//@ui5-bundle sap/fe/macros/library-preload.js
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/CommonHelper-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/m/library", "sap/ui/Device", "sap/ui/mdc/enum/EditMode", "sap/ui/model/Context", "sap/ui/model/odata/v4/AnnotationHelper"], function (Log, CommonUtils, BindingToolkit, MetaModelFunction, ModelHelper, mLibrary, Device, EditMode, Context, ODataModelAnnotationHelper) {
  "use strict";

  var system = Device.system;
  var isPropertyFilterable = MetaModelFunction.isPropertyFilterable;
  var ref = BindingToolkit.ref;
  var fn = BindingToolkit.fn;
  var compileExpression = BindingToolkit.compileExpression;
  const ValueColor = mLibrary.ValueColor;
  const CommonHelper = {
    getPathToKey: function (oCtx) {
      return oCtx.getObject();
    },
    /**
     * Determines if a field is visible.
     *
     * @param target Target instance
     * @param oInterface Interface instance
     * @returns Returns true, false, or expression with path
     */
    isVisible: function (target, oInterface) {
      const oModel = oInterface.context.getModel(),
        sPropertyPath = oInterface.context.getPath(),
        oAnnotations = oModel.getObject(`${sPropertyPath}@`),
        hidden = oAnnotations["@com.sap.vocabularies.UI.v1.Hidden"];
      return typeof hidden === "object" ? "{= !${" + hidden.$Path + "} }" : !hidden;
    },
    /**
     * Determine if field is editable.
     *
     * @param target Target instance
     * @param oInterface Interface instance
     * @returns A Binding Expression to determine if a field should be editable or not.
     */
    getParameterEditMode: function (target, oInterface) {
      const oModel = oInterface.context.getModel(),
        sPropertyPath = oInterface.context.getPath(),
        oAnnotations = oModel.getObject(`${sPropertyPath}@`),
        fieldControl = oAnnotations["@com.sap.vocabularies.Common.v1.FieldControl"],
        immutable = oAnnotations["@Org.OData.Core.V1.Immutable"],
        computed = oAnnotations["@Org.OData.Core.V1.Computed"];
      let sEditMode = EditMode.Editable;
      if (immutable || computed) {
        sEditMode = EditMode.ReadOnly;
      } else if (fieldControl) {
        if (fieldControl.$EnumMember) {
          if (fieldControl.$EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly") {
            sEditMode = EditMode.ReadOnly;
          }
          if (fieldControl.$EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Inapplicable" || fieldControl.$EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden") {
            sEditMode = EditMode.Disabled;
          }
        }
        if (fieldControl.$Path) {
          sEditMode = "{= %{" + fieldControl.$Path + "} < 3 ? (%{" + fieldControl.$Path + "} === 0 ? '" + EditMode.Disabled + "' : '" + EditMode.ReadOnly + "') : '" + EditMode.Editable + "'}";
        }
      }
      return sEditMode;
    },
    /**
     * Get the complete metapath to the target.
     *
     * @param target
     * @param oInterface
     * @returns The metapath
     */
    getMetaPath: function (target, oInterface) {
      return oInterface && oInterface.context && oInterface.context.getPath() || undefined;
    },
    isDesktop: function () {
      return system.desktop === true;
    },
    getTargetCollectionPath: function (context, navCollection) {
      let sPath = context.getPath();
      if (context.getMetadata().getName() === "sap.ui.model.Context" && (context.getObject("$kind") === "EntitySet" || context.getObject("$ContainsTarget") === true)) {
        return sPath;
      }
      if (context.getModel) {
        sPath = context.getModel().getMetaPath && context.getModel().getMetaPath(sPath) || context.getModel().getMetaModel().getMetaPath(sPath);
      }
      //Supporting sPath of any format, either '/<entitySet>/<navigationCollection>' <OR> '/<entitySet>/$Type/<navigationCollection>'
      const aParts = sPath.split("/").filter(function (sPart) {
        return sPart && sPart != "$Type";
      }); //filter out empty strings and parts referring to '$Type'
      const entitySet = `/${aParts[0]}`;
      if (aParts.length === 1) {
        return entitySet;
      }
      const navigationCollection = navCollection === undefined ? aParts.slice(1).join("/$NavigationPropertyBinding/") : navCollection;
      return `${entitySet}/$NavigationPropertyBinding/${navigationCollection}`; // used in gotoTargetEntitySet method in the same file
    },

    isPropertyFilterable: function (context, oDataField) {
      const oModel = context.getModel(),
        sPropertyPath = context.getPath(),
        // LoacationPath would be the prefix of sPropertyPath, example: sPropertyPath = '/Customer/Set/Name' -> sPropertyLocationPath = '/Customer/Set'
        sPropertyLocationPath = CommonHelper.getLocationForPropertyPath(oModel, sPropertyPath),
        sProperty = sPropertyPath.replace(`${sPropertyLocationPath}/`, "");
      if (oDataField && (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")) {
        return false;
      }
      return isPropertyFilterable(oModel, sPropertyLocationPath, sProperty);
    },
    getLocationForPropertyPath: function (oModel, sPropertyPath) {
      let iLength;
      let sCollectionPath = sPropertyPath.slice(0, sPropertyPath.lastIndexOf("/"));
      if (oModel.getObject(`${sCollectionPath}/$kind`) === "EntityContainer") {
        iLength = sCollectionPath.length + 1;
        sCollectionPath = sPropertyPath.slice(iLength, sPropertyPath.indexOf("/", iLength));
      }
      return sCollectionPath;
    },
    gotoActionParameter: function (oContext) {
      const sPath = oContext.getPath(),
        sPropertyName = oContext.getObject(`${sPath}/$Name`);
      return CommonUtils.getParameterPath(sPath, sPropertyName);
    },
    /**
     * Returns the entity set name from the entity type name.
     *
     * @param oMetaModel OData v4 metamodel instance
     * @param sEntityType EntityType of the actiom
     * @returns The EntitySet of the bound action
     * @private
     * @ui5-restricted
     */
    getEntitySetName: function (oMetaModel, sEntityType) {
      const oEntityContainer = oMetaModel.getObject("/");
      for (const key in oEntityContainer) {
        if (typeof oEntityContainer[key] === "object" && oEntityContainer[key].$Type === sEntityType) {
          return key;
        }
      }
      return undefined;
    },
    /**
     * Returns the metamodel path correctly for bound actions if used with bReturnOnlyPath as true,
     * else returns an object which has 3 properties related to the action. They are the entity set name,
     * the $Path value of the OperationAvailable annotation and the binding parameter name. If
     * bCheckStaticValue is true, returns the static value of OperationAvailable annotation, if present.
     * e.g. for bound action someNameSpace.SomeBoundAction
     * of entity set SomeEntitySet, the string "/SomeEntitySet/someNameSpace.SomeBoundAction" is returned.
     *
     * @param oAction The context object of the action
     * @param bReturnOnlyPath If false, additional info is returned along with metamodel path to the bound action
     * @param sActionName The name of the bound action of the form someNameSpace.SomeBoundAction
     * @param bCheckStaticValue If true, the static value of OperationAvailable is returned, if present
     * @returns The string or object as specified by bReturnOnlyPath
     * @private
     * @ui5-restricted
     */
    getActionPath: function (oAction, bReturnOnlyPath, sActionName, bCheckStaticValue) {
      let sContextPath = oAction.getPath().split("/@")[0];
      sActionName = !sActionName ? oAction.getObject(oAction.getPath()) : sActionName;
      if (sActionName && sActionName.indexOf("(") > -1) {
        // action bound to another entity type
        sActionName = sActionName.split("(")[0];
      } else if (oAction.getObject(sContextPath)) {
        // TODO: this logic sounds wrong, to be corrected
        const sEntityTypeName = oAction.getObject(sContextPath).$Type;
        const sEntityName = this.getEntitySetName(oAction.getModel(), sEntityTypeName);
        if (sEntityName) {
          sContextPath = `/${sEntityName}`;
        }
      } else {
        return sContextPath;
      }
      if (bCheckStaticValue) {
        return oAction.getObject(`${sContextPath}/${sActionName}@Org.OData.Core.V1.OperationAvailable`);
      }
      if (bReturnOnlyPath) {
        return `${sContextPath}/${sActionName}`;
      } else {
        return {
          sContextPath: sContextPath,
          sProperty: oAction.getObject(`${sContextPath}/${sActionName}@Org.OData.Core.V1.OperationAvailable/$Path`),
          sBindingParameter: oAction.getObject(`${sContextPath}/${sActionName}/@$ui5.overload/0/$Parameter/0/$Name`)
        };
      }
    },
    getNavigationContext: function (oContext) {
      return ODataModelAnnotationHelper.getNavigationPath(oContext.getPath());
    },
    /**
     * Returns the path without the entity type (potentially first) and property (last) part (optional).
     * The result can be an empty string if it is a simple direct property.
     *
     * If and only if the given property path starts with a slash (/), it is considered that the entity type
     * is part of the path and will be stripped away.
     *
     * @param sPropertyPath
     * @param bKeepProperty
     * @returns The navigation path
     */
    getNavigationPath: function (sPropertyPath, bKeepProperty) {
      const bStartsWithEntityType = sPropertyPath.startsWith("/");
      const aParts = sPropertyPath.split("/").filter(function (part) {
        return !!part;
      });
      if (bStartsWithEntityType) {
        aParts.shift();
      }
      if (!bKeepProperty) {
        aParts.pop();
      }
      return aParts.join("/");
    },
    /**
     * Returns the correct metamodel path for bound actions.
     *
     * Since this method is called irrespective of the action type, this will be applied to unbound actions.
     * In such a case, if an incorrect path is returned, it is ignored during templating.
     *
     * Example: for the bound action someNameSpace.SomeBoundAction of entity set SomeEntitySet,
     * the string "/SomeEntitySet/someNameSpace.SomeBoundAction" is returned.
     *
     * @function
     * @static
     * @name sap.fe.macros.CommonHelper.getActionContext
     * @memberof sap.fe.macros.CommonHelper
     * @param oAction Context object for the action
     * @returns Correct metamodel path for bound and incorrect path for unbound actions
     * @private
     * @ui5-restricted
     */
    getActionContext: function (oAction) {
      return CommonHelper.getActionPath(oAction, true);
    },
    /**
     * Returns the metamodel path correctly for overloaded bound actions. For unbound actions,
     * the incorrect path is returned, but ignored during templating.
     * e.g. for bound action someNameSpace.SomeBoundAction of entity set SomeEntitySet,
     * the string "/SomeEntitySet/someNameSpace.SomeBoundAction/@$ui5.overload/0" is returned.
     *
     * @function
     * @static
     * @name sap.fe.macros.CommonHelper.getPathToBoundActionOverload
     * @memberof sap.fe.macros.CommonHelper
     * @param oAction The context object for the action
     * @returns The correct metamodel path for bound action overload and incorrect path for unbound actions
     * @private
     * @ui5-restricted
     */
    getPathToBoundActionOverload: function (oAction) {
      const sPath = CommonHelper.getActionPath(oAction, true);
      return `${sPath}/@$ui5.overload/0`;
    },
    /**
     * Returns the string with single quotes.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param sValue Some string that needs to be converted into single quotes
     * @param [bEscape] Should the string be escaped beforehand
     * @returns - String with single quotes
     */
    addSingleQuotes: function (sValue, bEscape) {
      if (bEscape && sValue) {
        sValue = this.escapeSingleQuotes(sValue);
      }
      return `'${sValue}'`;
    },
    /**
     * Returns the string with escaped single quotes.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param sValue Some string that needs escaping of single quotes
     * @returns - String with escaped single quotes
     */
    escapeSingleQuotes: function (sValue) {
      return sValue.replace(/[']/g, "\\'");
    },
    /**
     * Returns the function string
     * The first argument of generateFunction is name of the generated function string.
     * Remaining arguments of generateFunction are arguments of the newly generated function string.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param sFuncName Some string for the function name
     * @param args The remaining arguments
     * @returns - Function string depends on arguments passed
     */
    generateFunction: function (sFuncName) {
      let sParams = "";
      for (let i = 0; i < (arguments.length <= 1 ? 0 : arguments.length - 1); i++) {
        sParams += i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];
        if (i < (arguments.length <= 1 ? 0 : arguments.length - 1) - 1) {
          sParams += ", ";
        }
      }
      let sFunction = `${sFuncName}()`;
      if (sParams) {
        sFunction = `${sFuncName}(${sParams})`;
      }
      return sFunction;
    },
    /*
     * Returns the visibility expression for datapoint title/link
     *
     * @function
     * @param {string} [sPath] annotation path of data point or Microchart
     * @param {boolean} [bLink] true if link visibility is being determined, false if title visibility is being determined
     * @param {boolean} [bFieldVisibility] true if field is vsiible, false otherwise
     * @returns  {string} sVisibilityExp Used to get the  visibility binding for DataPoints title in the Header.
     *
     */

    getHeaderDataPointLinkVisibility: function (sPath, bLink, bFieldVisibility) {
      let sVisibilityExp;
      if (bFieldVisibility) {
        sVisibilityExp = bLink ? "{= ${internal>isHeaderDPLinkVisible/" + sPath + "} === true && " + bFieldVisibility + "}" : "{= ${internal>isHeaderDPLinkVisible/" + sPath + "} !== true && " + bFieldVisibility + "}";
      } else {
        sVisibilityExp = bLink ? "{= ${internal>isHeaderDPLinkVisible/" + sPath + "} === true}" : "{= ${internal>isHeaderDPLinkVisible/" + sPath + "} !== true}";
      }
      return sVisibilityExp;
    },
    /**
     * Converts object to string(different from JSON.stringify or.toString).
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param oParams Some object
     * @returns - Object string
     */
    objectToString: function (oParams) {
      let iNumberOfKeys = Object.keys(oParams).length,
        sParams = "";
      for (const sKey in oParams) {
        let sValue = oParams[sKey];
        if (sValue && typeof sValue === "object") {
          sValue = this.objectToString(sValue);
        }
        sParams += `${sKey}: ${sValue}`;
        if (iNumberOfKeys > 1) {
          --iNumberOfKeys;
          sParams += ", ";
        }
      }
      return `{ ${sParams}}`;
    },
    /**
     * Removes escape characters (\) from an expression.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param sExpression An expression with escape characters
     * @returns Expression string without escape characters or undefined
     */
    removeEscapeCharacters: function (sExpression) {
      return sExpression ? sExpression.replace(/\\?\\([{}])/g, "$1") : undefined;
    },
    /**
     * Makes updates to a stringified object so that it works properly in a template by adding ui5Object:true.
     *
     * @param sStringified
     * @returns The updated string representation of the object
     */
    stringifyObject: function (sStringified) {
      if (!sStringified || sStringified === "{}") {
        return undefined;
      } else {
        const oObject = JSON.parse(sStringified);
        if (typeof oObject === "object" && !Array.isArray(oObject)) {
          const oUI5Object = {
            ui5object: true
          };
          Object.assign(oUI5Object, oObject);
          return JSON.stringify(oUI5Object);
        } else {
          const sType = Array.isArray(oObject) ? "Array" : typeof oObject;
          Log.error(`Unexpected object type in stringifyObject (${sType}) - only works with object`);
          throw new Error("stringifyObject only works with objects!");
        }
      }
    },
    /**
     * Create a string representation of the given data, taking care that it is not treated as a binding expression.
     *
     * @param vData The data to stringify
     * @returns The string representation of the data.
     */
    stringifyCustomData: function (vData) {
      const oObject = {
        ui5object: true
      };
      oObject["customData"] = vData instanceof Context ? vData.getObject() : vData;
      return JSON.stringify(oObject);
    },
    /**
     * Parses the given data, potentially unwraps the data.
     *
     * @param vData The data to parse
     * @returns The result of the data parsing
     */
    parseCustomData: function (vData) {
      vData = typeof vData === "string" ? JSON.parse(vData) : vData;
      if (vData && vData.hasOwnProperty("customData")) {
        return vData["customData"];
      }
      return vData;
    },
    getContextPath: function (oValue, oInterface) {
      const sPath = oInterface && oInterface.context && oInterface.context.getPath();
      return sPath[sPath.length - 1] === "/" ? sPath.slice(0, -1) : sPath;
    },
    /**
     * Returns a stringified JSON object containing  Presentation Variant sort conditions.
     *
     * @param oContext
     * @param oPresentationVariant Presentation variant Annotation
     * @param sPresentationVariantPath
     * @returns Stringified JSON object
     */
    getSortConditions: function (oContext, oPresentationVariant, sPresentationVariantPath) {
      if (oPresentationVariant && CommonHelper._isPresentationVariantAnnotation(sPresentationVariantPath) && oPresentationVariant.SortOrder) {
        const aSortConditions = {
          sorters: []
        };
        const sEntityPath = oContext.getPath(0).split("@")[0];
        oPresentationVariant.SortOrder.forEach(function () {
          let oCondition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          let oSortProperty = {};
          const oSorter = {};
          if (oCondition.DynamicProperty) {
            var _oContext$getModel$ge;
            oSortProperty = (_oContext$getModel$ge = oContext.getModel(0).getObject(sEntityPath + oCondition.DynamicProperty.$AnnotationPath)) === null || _oContext$getModel$ge === void 0 ? void 0 : _oContext$getModel$ge.Name;
          } else if (oCondition.Property) {
            oSortProperty = oCondition.Property.$PropertyPath;
          }
          if (oSortProperty) {
            oSorter.name = oSortProperty;
            oSorter.descending = !!oCondition.Descending;
            aSortConditions.sorters.push(oSorter);
          } else {
            throw new Error("Please define the right path to the sort property");
          }
        });
        return JSON.stringify(aSortConditions);
      }
      return undefined;
    },
    _isPresentationVariantAnnotation: function (annotationPath) {
      return annotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`) > -1 || annotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`) > -1;
    },
    createPresentationPathContext: function (oPresentationContext) {
      const aPaths = oPresentationContext.sPath.split("@") || [];
      const oModel = oPresentationContext.getModel();
      if (aPaths.length && aPaths[aPaths.length - 1].indexOf("com.sap.vocabularies.UI.v1.SelectionPresentationVariant") > -1) {
        const sPath = oPresentationContext.sPath.split("/PresentationVariant")[0];
        return oModel.createBindingContext(`${sPath}@sapui.name`);
      }
      return oModel.createBindingContext(`${oPresentationContext.sPath}@sapui.name`);
    },
    getPressHandlerForDataFieldForIBN: function (oDataField, sContext, bNavigateWithConfirmationDialog) {
      if (!oDataField) return undefined;
      const mNavigationParameters = {
        navigationContexts: sContext ? sContext : "${$source>/}.getBindingContext()"
      };
      if (oDataField.RequiresContext && !oDataField.Inline && bNavigateWithConfirmationDialog) {
        mNavigationParameters.applicableContexts = "${internal>ibn/" + oDataField.SemanticObject + "-" + oDataField.Action + "/aApplicable/}";
        mNavigationParameters.notApplicableContexts = "${internal>ibn/" + oDataField.SemanticObject + "-" + oDataField.Action + "/aNotApplicable/}";
        mNavigationParameters.label = this.addSingleQuotes(oDataField.Label, true);
      }
      if (oDataField.Mapping) {
        mNavigationParameters.semanticObjectMapping = this.addSingleQuotes(JSON.stringify(oDataField.Mapping));
      }
      return this.generateFunction(bNavigateWithConfirmationDialog ? "._intentBasedNavigation.navigateWithConfirmationDialog" : "._intentBasedNavigation.navigate", this.addSingleQuotes(oDataField.SemanticObject), this.addSingleQuotes(oDataField.Action), this.objectToString(mNavigationParameters));
    },
    getEntitySet: function (oContext) {
      const sPath = oContext.getPath();
      return ModelHelper.getEntitySetPath(sPath);
    },
    /**
     * Handles the visibility of form menu actions both in path based and static value scenarios.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param sVisibleValue Either static boolean values or Array of path expressions for visibility of menu button.
     * @returns The binding expression determining the visibility of menu actions.
     */
    handleVisibilityOfMenuActions: function (sVisibleValue) {
      const combinedConditions = [];
      if (Array.isArray(sVisibleValue)) {
        for (let i = 0; i < sVisibleValue.length; i++) {
          if (sVisibleValue[i].indexOf("{") > -1 && sVisibleValue[i].indexOf("{=") === -1) {
            sVisibleValue[i] = "{=" + sVisibleValue[i] + "}";
          }
          if (sVisibleValue[i].split("{=").length > 0) {
            sVisibleValue[i] = sVisibleValue[i].split("{=")[1].slice(0, -1);
          }
          combinedConditions.push(`(${sVisibleValue[i]})`);
        }
      }
      return combinedConditions.length > 0 ? `{= ${combinedConditions.join(" || ")}}` : sVisibleValue;
    },
    /**
     * Method to do the calculation of criticality in case CriticalityCalculation present in the annotation
     *
     * The calculation is done by comparing a value to the threshold values relevant for the specified improvement direction.
     * For improvement direction Target, the criticality is calculated using both low and high threshold values. It will be
     *
     * - Positive if the value is greater than or equal to AcceptanceRangeLowValue and lower than or equal to AcceptanceRangeHighValue
     * - Neutral if the value is greater than or equal to ToleranceRangeLowValue and lower than AcceptanceRangeLowValue OR greater than AcceptanceRangeHighValue and lower than or equal to ToleranceRangeHighValue
     * - Critical if the value is greater than or equal to DeviationRangeLowValue and lower than ToleranceRangeLowValue OR greater than ToleranceRangeHighValue and lower than or equal to DeviationRangeHighValue
     * - Negative if the value is lower than DeviationRangeLowValue or greater than DeviationRangeHighValue
     *
     * For improvement direction Minimize, the criticality is calculated using the high threshold values. It is
     * - Positive if the value is lower than or equal to AcceptanceRangeHighValue
     * - Neutral if the value is greater than AcceptanceRangeHighValue and lower than or equal to ToleranceRangeHighValue
     * - Critical if the value is greater than ToleranceRangeHighValue and lower than or equal to DeviationRangeHighValue
     * - Negative if the value is greater than DeviationRangeHighValue
     *
     * For improvement direction Maximize, the criticality is calculated using the low threshold values. It is
     *
     * - Positive if the value is greater than or equal to AcceptanceRangeLowValue
     * - Neutral if the value is less than AcceptanceRangeLowValue and greater than or equal to ToleranceRangeLowValue
     * - Critical if the value is lower than ToleranceRangeLowValue and greater than or equal to DeviationRangeLowValue
     * - Negative if the value is lower than DeviationRangeLowValue
     *
     * Thresholds are optional. For unassigned values, defaults are determined in this order:
     *
     * - For DeviationRange, an omitted LowValue translates into the smallest possible number (-INF), an omitted HighValue translates into the largest possible number (+INF)
     * - For ToleranceRange, an omitted LowValue will be initialized with DeviationRangeLowValue, an omitted HighValue will be initialized with DeviationRangeHighValue
     * - For AcceptanceRange, an omitted LowValue will be initialized with ToleranceRangeLowValue, an omitted HighValue will be initialized with ToleranceRangeHighValue.
     *
     * @param sImprovementDirection ImprovementDirection to be used for creating the criticality binding
     * @param sValue Value from Datapoint to be measured
     * @param sDeviationLow ExpressionBinding for Lower Deviation level
     * @param sToleranceLow ExpressionBinding for Lower Tolerance level
     * @param sAcceptanceLow ExpressionBinding for Lower Acceptance level
     * @param sAcceptanceHigh ExpressionBinding for Higher Acceptance level
     * @param sToleranceHigh ExpressionBinding for Higher Tolerance level
     * @param sDeviationHigh ExpressionBinding for Higher Deviation level
     * @returns Returns criticality calculation as expression binding
     */
    getCriticalityCalculationBinding: function (sImprovementDirection, sValue, sDeviationLow, sToleranceLow, sAcceptanceLow, sAcceptanceHigh, sToleranceHigh, sDeviationHigh) {
      let sCriticalityExpression = ValueColor.Neutral; // Default Criticality State

      sValue = `%${sValue}`;

      // Setting Unassigned Values
      sDeviationLow = sDeviationLow || -Infinity;
      sToleranceLow = sToleranceLow || sDeviationLow;
      sAcceptanceLow = sAcceptanceLow || sToleranceLow;
      sDeviationHigh = sDeviationHigh || Infinity;
      sToleranceHigh = sToleranceHigh || sDeviationHigh;
      sAcceptanceHigh = sAcceptanceHigh || sToleranceHigh;

      // Dealing with Decimal and Path based bingdings
      sDeviationLow = sDeviationLow && (+sDeviationLow ? +sDeviationLow : `%${sDeviationLow}`);
      sToleranceLow = sToleranceLow && (+sToleranceLow ? +sToleranceLow : `%${sToleranceLow}`);
      sAcceptanceLow = sAcceptanceLow && (+sAcceptanceLow ? +sAcceptanceLow : `%${sAcceptanceLow}`);
      sAcceptanceHigh = sAcceptanceHigh && (+sAcceptanceHigh ? +sAcceptanceHigh : `%${sAcceptanceHigh}`);
      sToleranceHigh = sToleranceHigh && (+sToleranceHigh ? +sToleranceHigh : `%${sToleranceHigh}`);
      sDeviationHigh = sDeviationHigh && (+sDeviationHigh ? +sDeviationHigh : `%${sDeviationHigh}`);

      // Creating runtime expression binding from criticality calculation for Criticality State
      if (sImprovementDirection.indexOf("Minimize") > -1) {
        sCriticalityExpression = "{= " + sValue + " <= " + sAcceptanceHigh + " ? '" + ValueColor.Good + "' : " + sValue + " <= " + sToleranceHigh + " ? '" + ValueColor.Neutral + "' : " + "(" + sDeviationHigh + " && " + sValue + " <= " + sDeviationHigh + ") ? '" + ValueColor.Critical + "' : '" + ValueColor.Error + "' }";
      } else if (sImprovementDirection.indexOf("Maximize") > -1) {
        sCriticalityExpression = "{= " + sValue + " >= " + sAcceptanceLow + " ? '" + ValueColor.Good + "' : " + sValue + " >= " + sToleranceLow + " ? '" + ValueColor.Neutral + "' : " + "(" + sDeviationLow + " && " + sValue + " >= " + sDeviationLow + ") ? '" + ValueColor.Critical + "' : '" + ValueColor.Error + "' }";
      } else if (sImprovementDirection.indexOf("Target") > -1) {
        sCriticalityExpression = "{= (" + sValue + " <= " + sAcceptanceHigh + " && " + sValue + " >= " + sAcceptanceLow + ") ? '" + ValueColor.Good + "' : " + "((" + sValue + " >= " + sToleranceLow + " && " + sValue + " < " + sAcceptanceLow + ") || (" + sValue + " > " + sAcceptanceHigh + " && " + sValue + " <= " + sToleranceHigh + ")) ? '" + ValueColor.Neutral + "' : " + "((" + sDeviationLow + " && (" + sValue + " >= " + sDeviationLow + ") && (" + sValue + " < " + sToleranceLow + ")) || ((" + sValue + " > " + sToleranceHigh + ") && " + sDeviationHigh + " && (" + sValue + " <= " + sDeviationHigh + "))) ? '" + ValueColor.Critical + "' : '" + ValueColor.Error + "' }";
      } else {
        Log.warning("Case not supported, returning the default Value Neutral");
      }
      return sCriticalityExpression;
    },
    /**
     * To fetch measure attribute index.
     *
     * @param iMeasure Chart Annotations
     * @param oChartAnnotations Chart Annotations
     * @returns MeasureAttribute index.
     * @private
     */
    getMeasureAttributeIndex: function (iMeasure, oChartAnnotations) {
      var _oChartAnnotations$Me, _oChartAnnotations$Dy;
      let aMeasures, sMeasurePropertyPath;
      if ((oChartAnnotations === null || oChartAnnotations === void 0 ? void 0 : (_oChartAnnotations$Me = oChartAnnotations.Measures) === null || _oChartAnnotations$Me === void 0 ? void 0 : _oChartAnnotations$Me.length) > 0) {
        aMeasures = oChartAnnotations.Measures;
        sMeasurePropertyPath = aMeasures[iMeasure].$PropertyPath;
      } else if ((oChartAnnotations === null || oChartAnnotations === void 0 ? void 0 : (_oChartAnnotations$Dy = oChartAnnotations.DynamicMeasures) === null || _oChartAnnotations$Dy === void 0 ? void 0 : _oChartAnnotations$Dy.length) > 0) {
        aMeasures = oChartAnnotations.DynamicMeasures;
        sMeasurePropertyPath = aMeasures[iMeasure].$AnnotationPath;
      }
      let bMeasureAttributeExists;
      const aMeasureAttributes = oChartAnnotations.MeasureAttributes;
      let iMeasureAttribute = -1;
      const fnCheckMeasure = function (sMeasurePath, oMeasureAttribute, index) {
        if (oMeasureAttribute) {
          if (oMeasureAttribute.Measure && oMeasureAttribute.Measure.$PropertyPath === sMeasurePath) {
            iMeasureAttribute = index;
            return true;
          } else if (oMeasureAttribute.DynamicMeasure && oMeasureAttribute.DynamicMeasure.$AnnotationPath === sMeasurePath) {
            iMeasureAttribute = index;
            return true;
          }
        }
      };
      if (aMeasureAttributes) {
        bMeasureAttributeExists = aMeasureAttributes.some(fnCheckMeasure.bind(null, sMeasurePropertyPath));
      }
      return bMeasureAttributeExists && iMeasureAttribute > -1 && iMeasureAttribute;
    },
    getMeasureAttribute: function (oContext) {
      const oMetaModel = oContext.getModel(),
        sChartAnnotationPath = oContext.getPath();
      return oMetaModel.requestObject(sChartAnnotationPath).then(function (oChartAnnotations) {
        const aMeasureAttributes = oChartAnnotations.MeasureAttributes,
          iMeasureAttribute = CommonHelper.getMeasureAttributeIndex(0, oChartAnnotations);
        const sMeasureAttributePath = iMeasureAttribute > -1 && aMeasureAttributes[iMeasureAttribute] && aMeasureAttributes[iMeasureAttribute].DataPoint ? `${sChartAnnotationPath}/MeasureAttributes/${iMeasureAttribute}/` : undefined;
        if (sMeasureAttributePath === undefined) {
          Log.warning("DataPoint missing for the measure");
        }
        return sMeasureAttributePath ? `${sMeasureAttributePath}DataPoint/$AnnotationPath/` : sMeasureAttributePath;
      });
    },
    /**
     * This function returns the measureAttribute for the measure.
     *
     * @param oContext Context to the measure annotation
     * @returns Path to the measureAttribute of the measure
     */
    getMeasureAttributeForMeasure: function (oContext) {
      const oMetaModel = oContext.getModel(),
        sMeasurePath = oContext.getPath(),
        sChartAnnotationPath = sMeasurePath.substring(0, sMeasurePath.lastIndexOf("Measure")),
        iMeasure = sMeasurePath.replace(/.*\//, "");
      const oChartAnnotations = oMetaModel.getObject(sChartAnnotationPath);
      const aMeasureAttributes = oChartAnnotations.MeasureAttributes,
        iMeasureAttribute = CommonHelper.getMeasureAttributeIndex(iMeasure, oChartAnnotations);
      const sMeasureAttributePath = iMeasureAttribute > -1 && aMeasureAttributes[iMeasureAttribute] && aMeasureAttributes[iMeasureAttribute].DataPoint ? `${sChartAnnotationPath}MeasureAttributes/${iMeasureAttribute}/` : undefined;
      if (sMeasureAttributePath === undefined) {
        Log.warning("DataPoint missing for the measure");
      }
      return sMeasureAttributePath ? `${sMeasureAttributePath}DataPoint/$AnnotationPath/` : sMeasureAttributePath;
    },
    /**
     * Method to determine if the contained navigation property has a draft root/node parent entitySet.
     *
     * @function
     * @name isDraftParentEntityForContainment
     * @param oTargetCollectionContainsTarget Target collection has ContainsTarget property
     * @param oTableMetadata Table metadata for which draft support shall be checked
     * @returns Returns true if draft
     */
    isDraftParentEntityForContainment: function (oTargetCollectionContainsTarget, oTableMetadata) {
      if (oTargetCollectionContainsTarget) {
        if (oTableMetadata && oTableMetadata.parentEntitySet && oTableMetadata.parentEntitySet.sPath) {
          const sParentEntitySetPath = oTableMetadata.parentEntitySet.sPath;
          const oDraftRoot = oTableMetadata.parentEntitySet.oModel.getObject(`${sParentEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot`);
          const oDraftNode = oTableMetadata.parentEntitySet.oModel.getObject(`${sParentEntitySetPath}@com.sap.vocabularies.Common.v1.DraftNode`);
          if (oDraftRoot || oDraftNode) {
            return true;
          } else {
            return false;
          }
        }
      }
      return false;
    },
    /**
     * Ensures the data is processed as defined in the template.
     * Since the property Data is of the type 'object', it may not be in the same order as required by the template.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param dataElement The data that is currently being processed.
     * @returns The correct path according to the template.
     */
    getDataFromTemplate: function (dataElement) {
      const splitPath = dataElement.getPath().split("/");
      const dataKey = splitPath[splitPath.length - 1];
      const connectedDataPath = `/${splitPath.slice(1, -2).join("/")}/@`;
      const connectedObject = dataElement.getObject(connectedDataPath);
      const template = connectedObject.Template;
      const splitTemp = template.split("}");
      const tempArray = [];
      for (let i = 0; i < splitTemp.length - 1; i++) {
        const key = splitTemp[i].split("{")[1].trim();
        tempArray.push(key);
      }
      Object.keys(connectedObject.Data).forEach(function (sKey) {
        if (sKey.startsWith("$")) {
          delete connectedObject.Data[sKey];
        }
      });
      const index = Object.keys(connectedObject.Data).indexOf(dataKey);
      return `/${splitPath.slice(1, -2).join("/")}/Data/${tempArray[index]}`;
    },
    /**
     * Checks if the end of the template has been reached.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param target The target of the connected fields.
     * @param element The element that is currently being processed.
     * @returns True or False (depending on the template index).
     */
    notLastIndex: function (target, element) {
      const template = target.Template;
      const splitTemp = template.split("}");
      const tempArray = [];
      let isLastIndex = false;
      for (let i = 0; i < splitTemp.length - 1; i++) {
        const dataKey = splitTemp[i].split("{")[1].trim();
        tempArray.push(dataKey);
      }
      tempArray.forEach(function (templateInfo) {
        if (target.Data[templateInfo] === element && tempArray.indexOf(templateInfo) !== tempArray.length - 1) {
          isLastIndex = true;
        }
      });
      return isLastIndex;
    },
    /**
     * Determines the delimiter from the template.
     *
     * @function
     * @memberof sap.fe.macros.CommonHelper
     * @param template The template string.
     * @returns The delimiter in the template string.
     */
    getDelimiter: function (template) {
      return template.split("}")[1].split("{")[0].trim();
    },
    oMetaModel: undefined,
    setMetaModel: function (oMetaModel) {
      this.oMetaModel = oMetaModel;
    },
    getMetaModel: function (oContext, oInterface) {
      if (oContext) {
        return oInterface.context.getModel();
      }
      return this.oMetaModel;
    },
    getParameters: function (oContext, oInterface) {
      if (oContext) {
        const oMetaModel = oInterface.context.getModel();
        const sPath = oInterface.context.getPath();
        const oParameterInfo = CommonUtils.getParameterInfo(oMetaModel, sPath);
        if (oParameterInfo.parameterProperties) {
          return Object.keys(oParameterInfo.parameterProperties);
        }
      }
      return [];
    },
    /**
     * Build an expression calling an action handler via the FPM helper's actionWrapper function
     *
     * This function assumes that the 'FPM.actionWrapper()' function is available at runtime.
     *
     * @param oAction Action metadata
     * @param oAction.handlerModule Module containing the action handler method
     * @param oAction.handlerMethod Action handler method name
     * @param [oThis] `this` (if the function is called from a macro)
     * @param oThis.id The table's ID
     * @returns The action wrapper binding	expression
     */
    buildActionWrapper: function (oAction, oThis) {
      const aParams = [ref("$event"), oAction.handlerModule, oAction.handlerMethod];
      if (oThis && oThis.id) {
        const oAdditionalParams = {
          contexts: ref("${internal>selectedContexts}")
        };
        aParams.push(oAdditionalParams);
      }
      return compileExpression(fn("FPM.actionWrapper", aParams));
    },
    /**
     * Returns the value whether or not the element should be visible depending on the Hidden annotation.
     * It is inverted as the UI elements have a visible property instead of a hidden one.
     *
     * @param dataFieldAnnotations The dataField object
     * @returns A path or a Boolean
     */
    getHiddenPathExpression: function (dataFieldAnnotations) {
      if (dataFieldAnnotations["@com.sap.vocabularies.UI.v1.Hidden"] !== null) {
        const hidden = dataFieldAnnotations["@com.sap.vocabularies.UI.v1.Hidden"];
        return typeof hidden === "object" ? "{= !${" + hidden.$Path + "} }" : !hidden;
      }
      return true;
    },
    validatePresentationMetaPath: function (metaPath, objectTerm) {
      // perform validation only if annotation set (to avoid backwards compatibility issues for test without annotations)
      if (metaPath.indexOf(objectTerm.slice(0, objectTerm.lastIndexOf("."))) > -1) {
        const allowedTerms = ["com.sap.vocabularies.UI.v1.PresentationVariant", "com.sap.vocabularies.UI.v1.SelectionPresentationVariant", objectTerm];
        if (!allowedTerms.some(term => {
          return metaPath.search(new RegExp(`${term}(#|/|$)`)) > -1;
        })) {
          throw new Error(`Annotation Path ${metaPath} mentioned in the manifest is not valid for ${objectTerm}`);
        }
      }
    }
  };
  CommonHelper.getSortConditions.requiresIContext = true;
  return CommonHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/CommonHelper", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/m/library","sap/ui/Device","sap/ui/mdc/enum/EditMode","sap/ui/model/Context","sap/ui/model/odata/v4/AnnotationHelper"],function(t,e,n,i,r,o,a,s,c,l){"use strict";var u=a.system;var f=i.isPropertyFilterable;var d=n.ref;var g=n.fn;var p=n.compileExpression;const h=o.ValueColor;const b={getPathToKey:function(t){return t.getObject()},isVisible:function(t,e){const n=e.context.getModel(),i=e.context.getPath(),r=n.getObject(`${i}@`),o=r["@com.sap.vocabularies.UI.v1.Hidden"];return typeof o==="object"?"{= !${"+o.$Path+"} }":!o},getParameterEditMode:function(t,e){const n=e.context.getModel(),i=e.context.getPath(),r=n.getObject(`${i}@`),o=r["@com.sap.vocabularies.Common.v1.FieldControl"],a=r["@Org.OData.Core.V1.Immutable"],c=r["@Org.OData.Core.V1.Computed"];let l=s.Editable;if(a||c){l=s.ReadOnly}else if(o){if(o.$EnumMember){if(o.$EnumMember==="com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly"){l=s.ReadOnly}if(o.$EnumMember==="com.sap.vocabularies.Common.v1.FieldControlType/Inapplicable"||o.$EnumMember==="com.sap.vocabularies.Common.v1.FieldControlType/Hidden"){l=s.Disabled}}if(o.$Path){l="{= %{"+o.$Path+"} < 3 ? (%{"+o.$Path+"} === 0 ? '"+s.Disabled+"' : '"+s.ReadOnly+"') : '"+s.Editable+"'}"}}return l},getMetaPath:function(t,e){return e&&e.context&&e.context.getPath()||undefined},isDesktop:function(){return u.desktop===true},getTargetCollectionPath:function(t,e){let n=t.getPath();if(t.getMetadata().getName()==="sap.ui.model.Context"&&(t.getObject("$kind")==="EntitySet"||t.getObject("$ContainsTarget")===true)){return n}if(t.getModel){n=t.getModel().getMetaPath&&t.getModel().getMetaPath(n)||t.getModel().getMetaModel().getMetaPath(n)}const i=n.split("/").filter(function(t){return t&&t!="$Type"});const r=`/${i[0]}`;if(i.length===1){return r}const o=e===undefined?i.slice(1).join("/$NavigationPropertyBinding/"):e;return`${r}/$NavigationPropertyBinding/${o}`},isPropertyFilterable:function(t,e){const n=t.getModel(),i=t.getPath(),r=b.getLocationForPropertyPath(n,i),o=i.replace(`${r}/`,"");if(e&&(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")){return false}return f(n,r,o)},getLocationForPropertyPath:function(t,e){let n;let i=e.slice(0,e.lastIndexOf("/"));if(t.getObject(`${i}/$kind`)==="EntityContainer"){n=i.length+1;i=e.slice(n,e.indexOf("/",n))}return i},gotoActionParameter:function(t){const n=t.getPath(),i=t.getObject(`${n}/$Name`);return e.getParameterPath(n,i)},getEntitySetName:function(t,e){const n=t.getObject("/");for(const t in n){if(typeof n[t]==="object"&&n[t].$Type===e){return t}}return undefined},getActionPath:function(t,e,n,i){let r=t.getPath().split("/@")[0];n=!n?t.getObject(t.getPath()):n;if(n&&n.indexOf("(")>-1){n=n.split("(")[0]}else if(t.getObject(r)){const e=t.getObject(r).$Type;const n=this.getEntitySetName(t.getModel(),e);if(n){r=`/${n}`}}else{return r}if(i){return t.getObject(`${r}/${n}@Org.OData.Core.V1.OperationAvailable`)}if(e){return`${r}/${n}`}else{return{sContextPath:r,sProperty:t.getObject(`${r}/${n}@Org.OData.Core.V1.OperationAvailable/$Path`),sBindingParameter:t.getObject(`${r}/${n}/@$ui5.overload/0/$Parameter/0/$Name`)}}},getNavigationContext:function(t){return l.getNavigationPath(t.getPath())},getNavigationPath:function(t,e){const n=t.startsWith("/");const i=t.split("/").filter(function(t){return!!t});if(n){i.shift()}if(!e){i.pop()}return i.join("/")},getActionContext:function(t){return b.getActionPath(t,true)},getPathToBoundActionOverload:function(t){const e=b.getActionPath(t,true);return`${e}/@$ui5.overload/0`},addSingleQuotes:function(t,e){if(e&&t){t=this.escapeSingleQuotes(t)}return`'${t}'`},escapeSingleQuotes:function(t){return t.replace(/[']/g,"\\'")},generateFunction:function(t){let e="";for(let t=0;t<(arguments.length<=1?0:arguments.length-1);t++){e+=t+1<1||arguments.length<=t+1?undefined:arguments[t+1];if(t<(arguments.length<=1?0:arguments.length-1)-1){e+=", "}}let n=`${t}()`;if(e){n=`${t}(${e})`}return n},getHeaderDataPointLinkVisibility:function(t,e,n){let i;if(n){i=e?"{= ${internal>isHeaderDPLinkVisible/"+t+"} === true && "+n+"}":"{= ${internal>isHeaderDPLinkVisible/"+t+"} !== true && "+n+"}"}else{i=e?"{= ${internal>isHeaderDPLinkVisible/"+t+"} === true}":"{= ${internal>isHeaderDPLinkVisible/"+t+"} !== true}"}return i},objectToString:function(t){let e=Object.keys(t).length,n="";for(const i in t){let r=t[i];if(r&&typeof r==="object"){r=this.objectToString(r)}n+=`${i}: ${r}`;if(e>1){--e;n+=", "}}return`{ ${n}}`},removeEscapeCharacters:function(t){return t?t.replace(/\\?\\([{}])/g,"$1"):undefined},stringifyObject:function(e){if(!e||e==="{}"){return undefined}else{const n=JSON.parse(e);if(typeof n==="object"&&!Array.isArray(n)){const t={ui5object:true};Object.assign(t,n);return JSON.stringify(t)}else{const e=Array.isArray(n)?"Array":typeof n;t.error(`Unexpected object type in stringifyObject (${e}) - only works with object`);throw new Error("stringifyObject only works with objects!")}}},stringifyCustomData:function(t){const e={ui5object:true};e["customData"]=t instanceof c?t.getObject():t;return JSON.stringify(e)},parseCustomData:function(t){t=typeof t==="string"?JSON.parse(t):t;if(t&&t.hasOwnProperty("customData")){return t["customData"]}return t},getContextPath:function(t,e){const n=e&&e.context&&e.context.getPath();return n[n.length-1]==="/"?n.slice(0,-1):n},getSortConditions:function(t,e,n){if(e&&b._isPresentationVariantAnnotation(n)&&e.SortOrder){const n={sorters:[]};const i=t.getPath(0).split("@")[0];e.SortOrder.forEach(function(){let e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let r={};const o={};if(e.DynamicProperty){var a;r=(a=t.getModel(0).getObject(i+e.DynamicProperty.$AnnotationPath))===null||a===void 0?void 0:a.Name}else if(e.Property){r=e.Property.$PropertyPath}if(r){o.name=r;o.descending=!!e.Descending;n.sorters.push(o)}else{throw new Error("Please define the right path to the sort property")}});return JSON.stringify(n)}return undefined},_isPresentationVariantAnnotation:function(t){return t.indexOf(`@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`)>-1||t.indexOf(`@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`)>-1},createPresentationPathContext:function(t){const e=t.sPath.split("@")||[];const n=t.getModel();if(e.length&&e[e.length-1].indexOf("com.sap.vocabularies.UI.v1.SelectionPresentationVariant")>-1){const e=t.sPath.split("/PresentationVariant")[0];return n.createBindingContext(`${e}@sapui.name`)}return n.createBindingContext(`${t.sPath}@sapui.name`)},getPressHandlerForDataFieldForIBN:function(t,e,n){if(!t)return undefined;const i={navigationContexts:e?e:"${$source>/}.getBindingContext()"};if(t.RequiresContext&&!t.Inline&&n){i.applicableContexts="${internal>ibn/"+t.SemanticObject+"-"+t.Action+"/aApplicable/}";i.notApplicableContexts="${internal>ibn/"+t.SemanticObject+"-"+t.Action+"/aNotApplicable/}";i.label=this.addSingleQuotes(t.Label,true)}if(t.Mapping){i.semanticObjectMapping=this.addSingleQuotes(JSON.stringify(t.Mapping))}return this.generateFunction(n?"._intentBasedNavigation.navigateWithConfirmationDialog":"._intentBasedNavigation.navigate",this.addSingleQuotes(t.SemanticObject),this.addSingleQuotes(t.Action),this.objectToString(i))},getEntitySet:function(t){const e=t.getPath();return r.getEntitySetPath(e)},handleVisibilityOfMenuActions:function(t){const e=[];if(Array.isArray(t)){for(let n=0;n<t.length;n++){if(t[n].indexOf("{")>-1&&t[n].indexOf("{=")===-1){t[n]="{="+t[n]+"}"}if(t[n].split("{=").length>0){t[n]=t[n].split("{=")[1].slice(0,-1)}e.push(`(${t[n]})`)}}return e.length>0?`{= ${e.join(" || ")}}`:t},getCriticalityCalculationBinding:function(e,n,i,r,o,a,s,c){let l=h.Neutral;n=`%${n}`;i=i||-Infinity;r=r||i;o=o||r;c=c||Infinity;s=s||c;a=a||s;i=i&&(+i?+i:`%${i}`);r=r&&(+r?+r:`%${r}`);o=o&&(+o?+o:`%${o}`);a=a&&(+a?+a:`%${a}`);s=s&&(+s?+s:`%${s}`);c=c&&(+c?+c:`%${c}`);if(e.indexOf("Minimize")>-1){l="{= "+n+" <= "+a+" ? '"+h.Good+"' : "+n+" <= "+s+" ? '"+h.Neutral+"' : "+"("+c+" && "+n+" <= "+c+") ? '"+h.Critical+"' : '"+h.Error+"' }"}else if(e.indexOf("Maximize")>-1){l="{= "+n+" >= "+o+" ? '"+h.Good+"' : "+n+" >= "+r+" ? '"+h.Neutral+"' : "+"("+i+" && "+n+" >= "+i+") ? '"+h.Critical+"' : '"+h.Error+"' }"}else if(e.indexOf("Target")>-1){l="{= ("+n+" <= "+a+" && "+n+" >= "+o+") ? '"+h.Good+"' : "+"(("+n+" >= "+r+" && "+n+" < "+o+") || ("+n+" > "+a+" && "+n+" <= "+s+")) ? '"+h.Neutral+"' : "+"(("+i+" && ("+n+" >= "+i+") && ("+n+" < "+r+")) || (("+n+" > "+s+") && "+c+" && ("+n+" <= "+c+"))) ? '"+h.Critical+"' : '"+h.Error+"' }"}else{t.warning("Case not supported, returning the default Value Neutral")}return l},getMeasureAttributeIndex:function(t,e){var n,i;let r,o;if((e===null||e===void 0?void 0:(n=e.Measures)===null||n===void 0?void 0:n.length)>0){r=e.Measures;o=r[t].$PropertyPath}else if((e===null||e===void 0?void 0:(i=e.DynamicMeasures)===null||i===void 0?void 0:i.length)>0){r=e.DynamicMeasures;o=r[t].$AnnotationPath}let a;const s=e.MeasureAttributes;let c=-1;const l=function(t,e,n){if(e){if(e.Measure&&e.Measure.$PropertyPath===t){c=n;return true}else if(e.DynamicMeasure&&e.DynamicMeasure.$AnnotationPath===t){c=n;return true}}};if(s){a=s.some(l.bind(null,o))}return a&&c>-1&&c},getMeasureAttribute:function(e){const n=e.getModel(),i=e.getPath();return n.requestObject(i).then(function(e){const n=e.MeasureAttributes,r=b.getMeasureAttributeIndex(0,e);const o=r>-1&&n[r]&&n[r].DataPoint?`${i}/MeasureAttributes/${r}/`:undefined;if(o===undefined){t.warning("DataPoint missing for the measure")}return o?`${o}DataPoint/$AnnotationPath/`:o})},getMeasureAttributeForMeasure:function(e){const n=e.getModel(),i=e.getPath(),r=i.substring(0,i.lastIndexOf("Measure")),o=i.replace(/.*\//,"");const a=n.getObject(r);const s=a.MeasureAttributes,c=b.getMeasureAttributeIndex(o,a);const l=c>-1&&s[c]&&s[c].DataPoint?`${r}MeasureAttributes/${c}/`:undefined;if(l===undefined){t.warning("DataPoint missing for the measure")}return l?`${l}DataPoint/$AnnotationPath/`:l},isDraftParentEntityForContainment:function(t,e){if(t){if(e&&e.parentEntitySet&&e.parentEntitySet.sPath){const t=e.parentEntitySet.sPath;const n=e.parentEntitySet.oModel.getObject(`${t}@com.sap.vocabularies.Common.v1.DraftRoot`);const i=e.parentEntitySet.oModel.getObject(`${t}@com.sap.vocabularies.Common.v1.DraftNode`);if(n||i){return true}else{return false}}}return false},getDataFromTemplate:function(t){const e=t.getPath().split("/");const n=e[e.length-1];const i=`/${e.slice(1,-2).join("/")}/@`;const r=t.getObject(i);const o=r.Template;const a=o.split("}");const s=[];for(let t=0;t<a.length-1;t++){const e=a[t].split("{")[1].trim();s.push(e)}Object.keys(r.Data).forEach(function(t){if(t.startsWith("$")){delete r.Data[t]}});const c=Object.keys(r.Data).indexOf(n);return`/${e.slice(1,-2).join("/")}/Data/${s[c]}`},notLastIndex:function(t,e){const n=t.Template;const i=n.split("}");const r=[];let o=false;for(let t=0;t<i.length-1;t++){const e=i[t].split("{")[1].trim();r.push(e)}r.forEach(function(n){if(t.Data[n]===e&&r.indexOf(n)!==r.length-1){o=true}});return o},getDelimiter:function(t){return t.split("}")[1].split("{")[0].trim()},oMetaModel:undefined,setMetaModel:function(t){this.oMetaModel=t},getMetaModel:function(t,e){if(t){return e.context.getModel()}return this.oMetaModel},getParameters:function(t,n){if(t){const t=n.context.getModel();const i=n.context.getPath();const r=e.getParameterInfo(t,i);if(r.parameterProperties){return Object.keys(r.parameterProperties)}}return[]},buildActionWrapper:function(t,e){const n=[d("$event"),t.handlerModule,t.handlerMethod];if(e&&e.id){const t={contexts:d("${internal>selectedContexts}")};n.push(t)}return p(g("FPM.actionWrapper",n))},getHiddenPathExpression:function(t){if(t["@com.sap.vocabularies.UI.v1.Hidden"]!==null){const e=t["@com.sap.vocabularies.UI.v1.Hidden"];return typeof e==="object"?"{= !${"+e.$Path+"} }":!e}return true},validatePresentationMetaPath:function(t,e){if(t.indexOf(e.slice(0,e.lastIndexOf(".")))>-1){const n=["com.sap.vocabularies.UI.v1.PresentationVariant","com.sap.vocabularies.UI.v1.SelectionPresentationVariant",e];if(!n.some(e=>t.search(new RegExp(`${e}(#|/|$)`))>-1)){throw new Error(`Annotation Path ${t} mentioned in the manifest is not valid for ${e}`)}}}};b.getSortConditions.requiresIContext=true;return b},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/DelegateUtil-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/internal/valuehelp/ValueHelpTemplating"], function (Log, CommonUtils, StableIdHelper, PropertyFormatters, FieldHelper, ValueHelpTemplating) {
  "use strict";

  var generateID = ValueHelpTemplating.generateID;
  var getRelativePropertyPath = PropertyFormatters.getRelativePropertyPath;
  var generate = StableIdHelper.generate;
  const NS_MACRODATA = "http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1";
  function _retrieveModel() {
    this.control.detachModelContextChange(_retrieveModel, this);
    const sModelName = this.modelName,
      oModel = this.control.getModel(sModelName);
    if (oModel) {
      this.resolve(oModel);
    } else {
      this.control.attachModelContextChange(_retrieveModel, this);
    }
  }
  async function getCustomDataWithModifier(oControl, sProperty, oModifier) {
    const aCustomData = [];
    const aRetrievedCustomData = await Promise.resolve().then(oModifier.getAggregation.bind(oModifier, oControl, "customData"));
    const oPromise = aRetrievedCustomData.reduce((oPreviousPromise, oCustomData) => {
      return oPreviousPromise.then(oModifier.getProperty.bind(oModifier, oCustomData, "key")).then(function (sKey) {
        if (sKey === sProperty) {
          aCustomData.push(oCustomData);
        }
      });
    }, Promise.resolve());
    await oPromise;
    if (aCustomData.length === 1) {
      return oModifier.getProperty(aCustomData[0], "value");
    } else {
      return undefined;
    }
  }
  const FETCHED_PROPERTIES_DATA_KEY = "sap_fe_ControlDelegate_propertyInfoMap";
  const DelegateUtil = {
    setCachedProperties(control, fetchedProperties) {
      // do not cache during templating, else it becomes part of the cached view
      if (control instanceof window.Element) {
        return;
      }
      const key = FETCHED_PROPERTIES_DATA_KEY;
      DelegateUtil.setCustomData(control, key, fetchedProperties);
    },
    getCachedProperties(control) {
      // properties are not cached during templating
      if (control instanceof window.Element) {
        return null;
      }
      const key = FETCHED_PROPERTIES_DATA_KEY;
      return DelegateUtil.getCustomData(control, key);
    },
    getCustomData(oControl, sProperty, oModifier) {
      // If Modifier is given, the method must execute asynchronously and return a Promise
      if (oModifier) {
        return getCustomDataWithModifier(oControl, sProperty, oModifier);
      } else {
        // Delegate invoked from a non-flex change - FilterBarDelegate._addP13nItem for OP table filtering, FilterBarDelegate.fetchProperties etc.
        if (oControl && sProperty) {
          if (oControl instanceof window.Element) {
            return oControl.getAttributeNS(NS_MACRODATA, sProperty);
          }
          if (oControl.data instanceof Function) {
            return oControl.data(sProperty);
          }
        }
        return undefined;
      }
    },
    setCustomData(oControl, sProperty, vValue) {
      if (oControl && sProperty) {
        if (oControl instanceof window.Element) {
          return oControl.setAttributeNS(NS_MACRODATA, `customData:${sProperty}`, vValue);
        }
        if (oControl.data instanceof Function) {
          return oControl.data(sProperty, vValue);
        }
      }
    },
    fetchPropertiesForEntity(sEntitySet, oMetaModel) {
      return oMetaModel.requestObject(`${sEntitySet}/`);
    },
    fetchAnnotationsForEntity(sEntitySet, oMetaModel) {
      return oMetaModel.requestObject(`${sEntitySet}@`);
    },
    fetchModel(oControl) {
      return new Promise(resolve => {
        const sModelName = oControl.getDelegate().payload && oControl.getDelegate().payload.modelName,
          oContext = {
            modelName: sModelName,
            control: oControl,
            resolve: resolve
          };
        _retrieveModel.call(oContext);
      });
    },
    templateControlFragment(sFragmentName, oPreprocessorSettings, oOptions, oModifier) {
      return CommonUtils.templateControlFragment(sFragmentName, oPreprocessorSettings, oOptions, oModifier);
    },
    doesValueHelpExist(mParameters) {
      const sPropertyName = mParameters.sPropertyName || "";
      const sValueHelpType = mParameters.sValueHelpType || "";
      const oMetaModel = mParameters.oMetaModel;
      const oModifier = mParameters.oModifier;
      const sOriginalProperty = `${mParameters.sBindingPath}/${sPropertyName}`;
      const oPropertyContext = oMetaModel.createBindingContext(sOriginalProperty);
      let sValueHelpProperty = FieldHelper.valueHelpProperty(oPropertyContext);
      const bIsAbsolute = mParameters.sBindingPath && mParameters.sBindingPath.indexOf("/") === 0;

      // unit/currency
      if (sValueHelpProperty.indexOf("$Path") > -1) {
        sValueHelpProperty = oMetaModel.getObject(sValueHelpProperty);
      }
      if (bIsAbsolute && sValueHelpProperty.indexOf("/") !== 0) {
        sValueHelpProperty = `${mParameters.sBindingPath}/${sValueHelpProperty}`;
      }
      const sGeneratedId = generateID(mParameters.flexId, generate([oModifier ? oModifier.getId(mParameters.oControl) : mParameters.oControl.getId(), sValueHelpType]), getRelativePropertyPath(oPropertyContext.getProperty(sOriginalProperty), {
        context: {
          getModel: () => {
            return mParameters.oMetaModel;
          },
          getPath: () => {
            return sOriginalProperty;
          }
        }
      }), getRelativePropertyPath(oPropertyContext.getProperty(sValueHelpProperty), {
        context: {
          getModel: () => {
            return mParameters.oMetaModel;
          },
          getPath: () => {
            return sValueHelpProperty;
          }
        }
      }));
      return Promise.resolve().then(function () {
        if (oModifier) {
          return oModifier.getAggregation(mParameters.oControl, "dependents");
        }
        return mParameters.oControl.getAggregation("dependents");
      }).then(function (aDependents) {
        return Promise.resolve(aDependents && aDependents.some(function (oDependent) {
          return oModifier ? oModifier.getId(oDependent) === sGeneratedId : oDependent.getId() === sGeneratedId;
        }));
      });
    },
    isValueHelpRequired(mParameters, bInFilterField) {
      const sPropertyName = mParameters.sPropertyName || "",
        oMetaModel = mParameters.oMetaModel,
        sProperty = `${mParameters.sBindingPath}/${sPropertyName}`,
        oPropertyContext = oMetaModel.createBindingContext(sProperty),
        sValueHelpProperty = FieldHelper.valueHelpProperty(oPropertyContext, bInFilterField);
      return this.getCustomData(mParameters.oControl, "displayModePropertyBinding", mParameters.oModifier).then(function (bReadOnly) {
        // Check whether the control is read-only. If yes, no need of a value help.
        bReadOnly = typeof bReadOnly === "boolean" ? bReadOnly : bReadOnly === "true";
        if (bReadOnly) {
          return false;
        }
        // Else, check whether Value Help relevant annotation exists for the property.
        // TODO use PropertyFormatter.hasValueHelp () => if doing so, QUnit tests fail due to mocked model implementation
        return Promise.all([oMetaModel.requestObject(`${sValueHelpProperty}@com.sap.vocabularies.Common.v1.ValueListWithFixedValues`), oMetaModel.requestObject(`${sValueHelpProperty}@com.sap.vocabularies.Common.v1.ValueListReferences`), oMetaModel.requestObject(`${sValueHelpProperty}@com.sap.vocabularies.Common.v1.ValueListMapping`), oMetaModel.requestObject(`${sValueHelpProperty}@com.sap.vocabularies.Common.v1.ValueList`)]);
      }).then(function (aResults) {
        return !!aResults[0] || !!aResults[1] || !!aResults[2] || !!aResults[3];
      }).catch(function (oError) {
        Log.warning("Error while retrieving custom data / value list annotation values", oError);
      });
    },
    isMultiValue(oProperty) {
      let bIsMultiValue = true;
      //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
      switch (oProperty.filterExpression) {
        case "SearchExpression":
        case "SingleRange":
        case "SingleValue":
          bIsMultiValue = false;
          break;
        default:
          break;
      }
      if (oProperty.type && oProperty.type.indexOf("Boolean") > 0) {
        bIsMultiValue = false;
      }
      return bIsMultiValue;
    }
  };
  return DelegateUtil;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/DelegateUtil", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/PropertyFormatters","sap/fe/macros/field/FieldHelper","sap/fe/macros/internal/valuehelp/ValueHelpTemplating"],function(e,t,n,o,r,a){"use strict";var s=a.generateID;var i=o.getRelativePropertyPath;var l=n.generate;const c="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1";function u(){this.control.detachModelContextChange(u,this);const e=this.modelName,t=this.control.getModel(e);if(t){this.resolve(t)}else{this.control.attachModelContextChange(u,this)}}async function d(e,t,n){const o=[];const r=await Promise.resolve().then(n.getAggregation.bind(n,e,"customData"));const a=r.reduce((e,r)=>e.then(n.getProperty.bind(n,r,"key")).then(function(e){if(e===t){o.push(r)}}),Promise.resolve());await a;if(o.length===1){return n.getProperty(o[0],"value")}else{return undefined}}const f="sap_fe_ControlDelegate_propertyInfoMap";const g={setCachedProperties(e,t){if(e instanceof window.Element){return}const n=f;g.setCustomData(e,n,t)},getCachedProperties(e){if(e instanceof window.Element){return null}const t=f;return g.getCustomData(e,t)},getCustomData(e,t,n){if(n){return d(e,t,n)}else{if(e&&t){if(e instanceof window.Element){return e.getAttributeNS(c,t)}if(e.data instanceof Function){return e.data(t)}}return undefined}},setCustomData(e,t,n){if(e&&t){if(e instanceof window.Element){return e.setAttributeNS(c,`customData:${t}`,n)}if(e.data instanceof Function){return e.data(t,n)}}},fetchPropertiesForEntity(e,t){return t.requestObject(`${e}/`)},fetchAnnotationsForEntity(e,t){return t.requestObject(`${e}@`)},fetchModel(e){return new Promise(t=>{const n=e.getDelegate().payload&&e.getDelegate().payload.modelName,o={modelName:n,control:e,resolve:t};u.call(o)})},templateControlFragment(e,n,o,r){return t.templateControlFragment(e,n,o,r)},doesValueHelpExist(e){const t=e.sPropertyName||"";const n=e.sValueHelpType||"";const o=e.oMetaModel;const a=e.oModifier;const c=`${e.sBindingPath}/${t}`;const u=o.createBindingContext(c);let d=r.valueHelpProperty(u);const f=e.sBindingPath&&e.sBindingPath.indexOf("/")===0;if(d.indexOf("$Path")>-1){d=o.getObject(d)}if(f&&d.indexOf("/")!==0){d=`${e.sBindingPath}/${d}`}const g=s(e.flexId,l([a?a.getId(e.oControl):e.oControl.getId(),n]),i(u.getProperty(c),{context:{getModel:()=>e.oMetaModel,getPath:()=>c}}),i(u.getProperty(d),{context:{getModel:()=>e.oMetaModel,getPath:()=>d}}));return Promise.resolve().then(function(){if(a){return a.getAggregation(e.oControl,"dependents")}return e.oControl.getAggregation("dependents")}).then(function(e){return Promise.resolve(e&&e.some(function(e){return a?a.getId(e)===g:e.getId()===g}))})},isValueHelpRequired(t,n){const o=t.sPropertyName||"",a=t.oMetaModel,s=`${t.sBindingPath}/${o}`,i=a.createBindingContext(s),l=r.valueHelpProperty(i,n);return this.getCustomData(t.oControl,"displayModePropertyBinding",t.oModifier).then(function(e){e=typeof e==="boolean"?e:e==="true";if(e){return false}return Promise.all([a.requestObject(`${l}@com.sap.vocabularies.Common.v1.ValueListWithFixedValues`),a.requestObject(`${l}@com.sap.vocabularies.Common.v1.ValueListReferences`),a.requestObject(`${l}@com.sap.vocabularies.Common.v1.ValueListMapping`),a.requestObject(`${l}@com.sap.vocabularies.Common.v1.ValueList`)])}).then(function(e){return!!e[0]||!!e[1]||!!e[2]||!!e[3]}).catch(function(t){e.warning("Error while retrieving custom data / value list annotation values",t)})},isMultiValue(e){let t=true;switch(e.filterExpression){case"SearchExpression":case"SingleRange":case"SingleValue":t=false;break;default:break}if(e.type&&e.type.indexOf("Boolean")>0){t=false}return t}};return g},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/MacroAPI-dbg", ["sap/base/util/merge", "sap/base/util/uid", "sap/fe/core/converters/ConverterContext", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/Component", "sap/ui/core/Control"], function (merge, uid, ConverterContext, ClassSupport, Component, Control) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class3;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const MacroAPIFQN = "sap.fe.macros.MacroAPI";

  /**
   * Base API control for building blocks.
   *
   * @hideconstructor
   * @name sap.fe.macros.MacroAPI
   * @public
   */
  let MacroAPI = (_dec = defineUI5Class(MacroAPIFQN), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "string"
  }), _dec4 = property({
    type: "string"
  }), _dec5 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(MacroAPI, _Control);
    function MacroAPI(mSettings) {
      var _this;
      for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        others[_key - 1] = arguments[_key];
      }
      _this = _Control.call(this, mSettings, ...others) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "content", _descriptor4, _assertThisInitialized(_this));
      _this.parentContextToBind = {};
      MacroAPI.registerInstance(_assertThisInitialized(_this));
      return _this;
    }
    var _proto = MacroAPI.prototype;
    _proto.init = function init() {
      _Control.prototype.init.call(this);
      if (!this.getModel("_pageModel")) {
        var _Component$getOwnerCo;
        const oPageModel = (_Component$getOwnerCo = Component.getOwnerComponentFor(this)) === null || _Component$getOwnerCo === void 0 ? void 0 : _Component$getOwnerCo.getModel("_pageModel");
        if (oPageModel) {
          this.setModel(oPageModel, "_pageModel");
        }
      }
    };
    MacroAPI.registerInstance = function registerInstance(_instance) {
      if (!this.instanceMap.get(_instance.constructor)) {
        this.instanceMap.set(_instance.constructor, []);
      }
      this.instanceMap.get(_instance.constructor).push(_instance);
    }

    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     *
     * @public
     */;
    MacroAPI.render = function render(oRm, oControl) {
      oRm.renderControl(oControl.content);
    };
    _proto.rerender = function rerender() {
      this.content.rerender();
    };
    _proto.getDomRef = function getDomRef() {
      const oContent = this.content;
      return oContent ? oContent.getDomRef() : _Control.prototype.getDomRef.call(this);
    };
    _proto.getController = function getController() {
      return this.getModel("$view").getObject().getController();
    };
    MacroAPI.getAPI = function getAPI(oEvent) {
      let oSource = oEvent.getSource();
      if (this.isDependentBound) {
        while (oSource && !oSource.isA(MacroAPIFQN) && oSource.getParent) {
          const oDependents = oSource.getDependents();
          const hasCorrectDependent = oDependents.find(oDependent => oDependent.isA(MacroAPIFQN));
          if (hasCorrectDependent) {
            oSource = hasCorrectDependent;
          } else {
            oSource = oSource.getParent();
          }
        }
      } else {
        while (oSource && !oSource.isA(MacroAPIFQN) && oSource.getParent) {
          oSource = oSource.getParent();
        }
      }
      if (!oSource || !oSource.isA(MacroAPIFQN)) {
        const oSourceMap = this.instanceMap.get(this);
        oSource = oSourceMap === null || oSourceMap === void 0 ? void 0 : oSourceMap[oSourceMap.length - 1];
      }
      return oSource && oSource.isA(MacroAPIFQN) && oSource;
    }

    /**
     * Retrieve a Converter Context.
     *
     * @param oDataModelPath
     * @param contextPath
     * @param mSettings
     * @returns A Converter Context
     */;
    /**
     * Keep track of a binding context that should be assigned to the parent of that control.
     *
     * @param modelName The model name that the context will relate to
     * @param path The path of the binding context
     */
    _proto.setParentBindingContext = function setParentBindingContext(modelName, path) {
      this.parentContextToBind[modelName] = path;
    };
    _proto.setParent = function setParent() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      _Control.prototype.setParent.call(this, ...args);
      Object.keys(this.parentContextToBind).forEach(modelName => {
        this.getParent().bindObject({
          path: this.parentContextToBind[modelName],
          model: modelName,
          events: {
            change: function () {
              const oBoundContext = this.getBoundContext();
              if (oBoundContext && !oBoundContext.getObject()) {
                oBoundContext.setProperty("", {});
              }
            }
          }
        });
      });
    };
    return MacroAPI;
  }(Control), _class3.namespace = "sap.fe.macros", _class3.macroName = "Macro", _class3.fragment = "sap.fe.macros.Macro", _class3.hasValidation = true, _class3.instanceMap = new WeakMap(), _class3.isDependentBound = false, _class3.getConverterContext = function (oDataModelPath, contextPath, mSettings) {
    const oAppComponent = mSettings.appComponent;
    const viewData = mSettings.models.viewData && mSettings.models.viewData.getData();
    return ConverterContext.createConverterContextForMacro(oDataModelPath.startingEntitySet.name, mSettings.models.metaModel, oAppComponent && oAppComponent.getDiagnostics(), merge, oDataModelPath.contextLocation, viewData);
  }, _class3.createBindingContext = function (oData, mSettings) {
    const sContextPath = `/uid--${uid()}`;
    mSettings.models.converterContext.setProperty(sContextPath, oData);
    return mSettings.models.converterContext.createBindingContext(sContextPath);
  }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return MacroAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/MacroAPI", ["sap/base/util/merge","sap/base/util/uid","sap/fe/core/converters/ConverterContext","sap/fe/core/helpers/ClassSupport","sap/ui/core/Component","sap/ui/core/Control"],function(e,t,n,r,i,o){"use strict";var a,s,c,l,u,p,f,d,g,h,m,b;var v=r.property;var C=r.implementInterface;var y=r.defineUI5Class;var P=r.aggregation;function _(e,t,n,r){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function w(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function M(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;x(e,t)}function x(e,t){x=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return x(e,t)}function O(e,t,n,r,i){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o);if(i&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(i):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function z(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const D="sap.fe.macros.MacroAPI";let j=(a=y(D),s=C("sap.ui.core.IFormContent"),c=v({type:"string"}),l=v({type:"string"}),u=P({type:"sap.ui.core.Control",multiple:false,isDefault:true}),a(p=(f=(b=function(e){M(t,e);function t(n){var r;for(var i=arguments.length,o=new Array(i>1?i-1:0),a=1;a<i;a++){o[a-1]=arguments[a]}r=e.call(this,n,...o)||this;_(r,"__implements__sap_ui_core_IFormContent",d,w(r));_(r,"contextPath",g,w(r));_(r,"metaPath",h,w(r));_(r,"content",m,w(r));r.parentContextToBind={};t.registerInstance(w(r));return r}var n=t.prototype;n.init=function t(){e.prototype.init.call(this);if(!this.getModel("_pageModel")){var n;const e=(n=i.getOwnerComponentFor(this))===null||n===void 0?void 0:n.getModel("_pageModel");if(e){this.setModel(e,"_pageModel")}}};t.registerInstance=function e(t){if(!this.instanceMap.get(t.constructor)){this.instanceMap.set(t.constructor,[])}this.instanceMap.get(t.constructor).push(t)};t.render=function e(t,n){t.renderControl(n.content)};n.rerender=function e(){this.content.rerender()};n.getDomRef=function t(){const n=this.content;return n?n.getDomRef():e.prototype.getDomRef.call(this)};n.getController=function e(){return this.getModel("$view").getObject().getController()};t.getAPI=function e(t){let n=t.getSource();if(this.isDependentBound){while(n&&!n.isA(D)&&n.getParent){const e=n.getDependents();const t=e.find(e=>e.isA(D));if(t){n=t}else{n=n.getParent()}}}else{while(n&&!n.isA(D)&&n.getParent){n=n.getParent()}}if(!n||!n.isA(D)){const e=this.instanceMap.get(this);n=e===null||e===void 0?void 0:e[e.length-1]}return n&&n.isA(D)&&n};n.setParentBindingContext=function e(t,n){this.parentContextToBind[t]=n};n.setParent=function t(){for(var n=arguments.length,r=new Array(n),i=0;i<n;i++){r[i]=arguments[i]}e.prototype.setParent.call(this,...r);Object.keys(this.parentContextToBind).forEach(e=>{this.getParent().bindObject({path:this.parentContextToBind[e],model:e,events:{change:function(){const e=this.getBoundContext();if(e&&!e.getObject()){e.setProperty("",{})}}}})})};return t}(o),b.namespace="sap.fe.macros",b.macroName="Macro",b.fragment="sap.fe.macros.Macro",b.hasValidation=true,b.instanceMap=new WeakMap,b.isDependentBound=false,b.getConverterContext=function(t,r,i){const o=i.appComponent;const a=i.models.viewData&&i.models.viewData.getData();return n.createConverterContextForMacro(t.startingEntitySet.name,i.models.metaModel,o&&o.getDiagnostics(),e,t.contextLocation,a)},b.createBindingContext=function(e,n){const r=`/uid--${t()}`;n.models.converterContext.setProperty(r,e);return n.models.converterContext.createBindingContext(r)},b),d=O(f.prototype,"__implements__sap_ui_core_IFormContent",[s],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),g=O(f.prototype,"contextPath",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),h=O(f.prototype,"metaPath",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),m=O(f.prototype,"content",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),f))||p);return j},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/MacroTemplating-dbg", [], function () {
  "use strict";

  var _exports = {};
  const getPath = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return oInterface.context.getPath();
    }
    return "";
  };
  getPath.requiresIContext = true;
  _exports.getPath = getPath;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/MacroTemplating", [],function(){"use strict";var t={};const e=function(t,e){if(e&&e.context){return e.context.getPath()}return""};e.requiresIContext=true;t.getPath=e;return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/actions/CustomAction.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/helpers/FPMHelper", "sap/m/Button", "sap/fe/core/jsx-runtime/jsx"], function (Log, BuildingBlockSupport, RuntimeBuildingBlock, FPMHelper, Button, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var _exports = {};
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let CustomActionBlock = (_dec = defineBuildingBlock({
    name: "CustomAction",
    namespace: "sap.fe.macros.actions"
  }), _dec2 = blockAttribute({
    type: "object",
    required: true
  }), _dec3 = blockAttribute({
    type: "string",
    required: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(CustomActionBlock, _RuntimeBuildingBlock);
    function CustomActionBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _RuntimeBuildingBlock.call(this, ...args) || this;
      _initializerDefineProperty(_this, "action", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "id", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    _exports = CustomActionBlock;
    var _proto = CustomActionBlock.prototype;
    _proto.getContent = function getContent() {
      let pressEvent;
      if (this.action.command) {
        pressEvent = {
          "jsx:command": `${this.action.command}|press`
        };
      } else {
        pressEvent = {
          press: event => {
            FPMHelper.actionWrapper(event, this.action.handlerModule, this.action.handlerMethod, {}).catch(error => Log.error(error));
          }
        };
      }
      return _jsx(Button, {
        id: this.id,
        text: this.action.text ?? "",
        ...pressEvent,
        type: "Transparent",
        visible: this.action.visible,
        enabled: this.action.enabled
      });
    };
    return CustomActionBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "action", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = CustomActionBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/actions/CustomAction.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/helpers/FPMHelper","sap/m/Button","sap/fe/core/jsx-runtime/jsx"],function(e,t,i,r,n,a){"use strict";var o,l,u,c,s,p,f;var d={};var b=t.defineBuildingBlock;var h=t.blockAttribute;function m(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function v(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function g(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;y(e,t)}function y(e,t){y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return y(e,t)}function j(e,t,i,r,n){var a={};Object.keys(r).forEach(function(e){a[e]=r[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function w(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let z=(o=b({name:"CustomAction",namespace:"sap.fe.macros.actions"}),l=h({type:"object",required:true}),u=h({type:"string",required:true}),o(c=(s=function(t){g(i,t);function i(){var e;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}e=t.call(this,...r)||this;m(e,"action",p,v(e));m(e,"id",f,v(e));return e}d=i;var o=i.prototype;o.getContent=function t(){let i;if(this.action.command){i={"jsx:command":`${this.action.command}|press`}}else{i={press:t=>{r.actionWrapper(t,this.action.handlerModule,this.action.handlerMethod,{}).catch(t=>e.error(t))}}}return a(n,{id:this.id,text:this.action.text??"",...i,type:"Transparent",visible:this.action.visible,enabled:this.action.enabled})};return i}(i),p=j(s.prototype,"action",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),f=j(s.prototype,"id",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),s))||c);d=z;return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/actions/DataFieldForAction.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/library", "sap/fe/core/templating/CriticalityFormatters", "sap/m/Button", "sap/fe/core/jsx-runtime/jsx"], function (BuildingBlockSupport, RuntimeBuildingBlock, DataField, MetaModelConverter, library, CriticalityFormatters, Button, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var _exports = {};
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var isActionWithDialog = DataField.isActionWithDialog;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let DataFieldForActionBlock = (_dec = defineBuildingBlock({
    name: "DataFieldForAction",
    namespace: "sap.fe.macros.actions"
  }), _dec2 = blockAttribute({
    type: "object",
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec4 = blockAttribute({
    type: "string",
    required: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(DataFieldForActionBlock, _RuntimeBuildingBlock);
    function DataFieldForActionBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _RuntimeBuildingBlock.call(this, ...args) || this;
      _initializerDefineProperty(_this, "action", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "id", _descriptor3, _assertThisInitialized(_this));
      return _this;
    }
    _exports = DataFieldForActionBlock;
    var _proto = DataFieldForActionBlock.prototype;
    _proto.getContent = function getContent(view) {
      const controller = view.getController();
      const dataViewModelPath = getInvolvedDataModelObjects(this.contextPath);
      const odataMetaModel = this.contextPath.getModel();
      const annotationPath = this.action.annotationPath;
      let pressEvent;
      if (annotationPath) {
        const annotationPathContext = odataMetaModel.getContext(annotationPath);
        const dataFieldContextModelPath = getInvolvedDataModelObjects(annotationPathContext);
        const dataFieldForAction = dataFieldContextModelPath.targetObject;
        if (dataFieldForAction) {
          var _dataViewModelPath$ta;
          const actionParameters = {
            entitySetName: (_dataViewModelPath$ta = dataViewModelPath.targetEntitySet) === null || _dataViewModelPath$ta === void 0 ? void 0 : _dataViewModelPath$ta.name,
            invocationGrouping: dataFieldForAction.InvocationGrouping === "UI.OperationGroupingType/ChangeSet" ? library.InvocationGrouping.ChangeSet : library.InvocationGrouping.Isolated,
            label: dataFieldForAction.Label,
            isNavigable: this.action.isNavigable,
            defaultValuesExtensionFunction: this.action.defaultValuesExtensionFunction
          };
          if (!this.action.command) {
            pressEvent = {
              press: () => {
                controller.handlers.onCallAction(view, dataFieldForAction.Action, {
                  ...actionParameters,
                  ...{
                    contexts: view.getBindingContext(),
                    model: view.getModel()
                  }
                });
              }
            };
          } else {
            pressEvent = {
              "jsx:command": `${this.action.command}|press`
            };
          }
          return _jsx(Button, {
            id: this.id,
            text: actionParameters.label,
            ...pressEvent,
            ariaHasPopup: isActionWithDialog(dataFieldContextModelPath.targetObject),
            visible: this.action.visible,
            enabled: this.action.enabled,
            type: CriticalityFormatters.buildExpressionForCriticalityButtonType(dataFieldContextModelPath)
          });
        }
      }
    };
    return DataFieldForActionBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "action", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = DataFieldForActionBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/actions/DataFieldForAction.block", ["sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/MetaModelConverter","sap/fe/core/library","sap/fe/core/templating/CriticalityFormatters","sap/m/Button","sap/fe/core/jsx-runtime/jsx"],function(e,t,i,n,r,o,a,l){"use strict";var c,u,s,p,d,f,b,g,v;var h={};var m=n.getInvolvedDataModelObjects;var y=i.isActionWithDialog;var x=e.defineBuildingBlock;var j=e.blockAttribute;function O(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function w(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function z(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;B(e,t)}function B(e,t){B=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return B(e,t)}function C(e,t,i,n,r){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function P(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let k=(c=x({name:"DataFieldForAction",namespace:"sap.fe.macros.actions"}),u=j({type:"object",required:true}),s=j({type:"sap.ui.model.Context",required:true}),p=j({type:"string",required:true}),c(d=(f=function(e){z(t,e);function t(){var t;for(var i=arguments.length,n=new Array(i),r=0;r<i;r++){n[r]=arguments[r]}t=e.call(this,...n)||this;O(t,"action",b,w(t));O(t,"contextPath",g,w(t));O(t,"id",v,w(t));return t}h=t;var i=t.prototype;i.getContent=function e(t){const i=t.getController();const n=m(this.contextPath);const c=this.contextPath.getModel();const u=this.action.annotationPath;let s;if(u){const e=c.getContext(u);const d=m(e);const f=d.targetObject;if(f){var p;const e={entitySetName:(p=n.targetEntitySet)===null||p===void 0?void 0:p.name,invocationGrouping:f.InvocationGrouping==="UI.OperationGroupingType/ChangeSet"?r.InvocationGrouping.ChangeSet:r.InvocationGrouping.Isolated,label:f.Label,isNavigable:this.action.isNavigable,defaultValuesExtensionFunction:this.action.defaultValuesExtensionFunction};if(!this.action.command){s={press:()=>{i.handlers.onCallAction(t,f.Action,{...e,...{contexts:t.getBindingContext(),model:t.getModel()}})}}}else{s={"jsx:command":`${this.action.command}|press`}}return l(a,{id:this.id,text:e.label,...s,ariaHasPopup:y(d.targetObject),visible:this.action.visible,enabled:this.action.enabled,type:o.buildExpressionForCriticalityButtonType(d)})}}};return t}(t),b=C(f.prototype,"action",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=C(f.prototype,"contextPath",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),v=C(f.prototype,"id",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),f))||d);h=k;return h},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/Chart.block-dbg", ["sap/base/Log", "sap/base/util/uid", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/core/converters/helpers/Aggregation", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/macros/CommonHelper", "sap/ui/core/library", "sap/ui/model/json/JSONModel", "../internal/helpers/ActionHelper", "../internal/helpers/DefaultActionHandler", "./ChartHelper"], function (Log, uid, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, DataField, DataVisualization, Aggregation, MetaModelConverter, BindingToolkit, ModelHelper, StableIdHelper, DataModelPathHelper, CommonHelper, library, JSONModel, ActionHelper, DefaultActionHandler, ChartHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _class3;
  var _exports = {};
  var TitleLevel = library.TitleLevel;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var generate = StableIdHelper.generate;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var AggregationHelper = Aggregation.AggregationHelper;
  var getVisualizationsFromPresentationVariant = DataVisualization.getVisualizationsFromPresentationVariant;
  var getDataVisualizationConfiguration = DataVisualization.getDataVisualizationConfiguration;
  var isDataModelObjectPathForActionWithDialog = DataField.isDataModelObjectPathForActionWithDialog;
  var xml = BuildingBlockTemplateProcessor.xml;
  var escapeXMLAttributeValue = BuildingBlockTemplateProcessor.escapeXMLAttributeValue;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const measureRole = {
    "com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1": "axis1",
    "com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis2": "axis2",
    "com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis3": "axis3",
    "com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis4": "axis4"
  };
  var personalizationValues;
  /**
   * Build actions and action groups with all properties for chart visualization.
   *
   * @param childAction XML node corresponding to actions
   * @returns Prepared action object
   */
  (function (personalizationValues) {
    personalizationValues["Sort"] = "Sort";
    personalizationValues["Type"] = "Type";
    personalizationValues["Item"] = "Item";
    personalizationValues["Filter"] = "Filter";
  })(personalizationValues || (personalizationValues = {}));
  const setCustomActionProperties = function (childAction) {
    var _action$getAttribute;
    let menuContentActions = null;
    const action = childAction;
    let menuActions = [];
    const actionKey = (_action$getAttribute = action.getAttribute("key")) === null || _action$getAttribute === void 0 ? void 0 : _action$getAttribute.replace("InlineXML_", "");
    // For the actionGroup we authorize the both entries <sap.fe.macros:ActionGroup> (compliant with old FPM examples) and <sap.fe.macros.chart:ActionGroup>
    if (action.children.length && action.localName === "ActionGroup" && action.namespaceURI && ["sap.fe.macros", "sap.fe.macros.chart"].indexOf(action.namespaceURI) > -1) {
      const actionsToAdd = Array.prototype.slice.apply(action.children);
      let actionIdx = 0;
      menuContentActions = actionsToAdd.reduce((customAction, actToAdd) => {
        var _actToAdd$getAttribut;
        const actionKeyAdd = ((_actToAdd$getAttribut = actToAdd.getAttribute("key")) === null || _actToAdd$getAttribut === void 0 ? void 0 : _actToAdd$getAttribut.replace("InlineXML_", "")) || actionKey + "_Menu_" + actionIdx;
        const curOutObject = {
          key: actionKeyAdd,
          text: actToAdd.getAttribute("text"),
          __noWrap: true,
          press: actToAdd.getAttribute("press"),
          requiresSelection: actToAdd.getAttribute("requiresSelection") === "true",
          enabled: actToAdd.getAttribute("enabled") === null ? true : actToAdd.getAttribute("enabled")
        };
        customAction[curOutObject.key] = curOutObject;
        actionIdx++;
        return customAction;
      }, {});
      menuActions = Object.values(menuContentActions).slice(-action.children.length).map(function (menuItem) {
        return menuItem.key;
      });
    }
    return {
      key: actionKey,
      text: action.getAttribute("text"),
      position: {
        placement: action.getAttribute("placement"),
        anchor: action.getAttribute("anchor")
      },
      __noWrap: true,
      press: action.getAttribute("press"),
      requiresSelection: action.getAttribute("requiresSelection") === "true",
      enabled: action.getAttribute("enabled") === null ? true : action.getAttribute("enabled"),
      menu: menuActions.length ? menuActions : null,
      menuContentActions: menuContentActions
    };
  };
  let ChartBlock = (
  /**
   *
   * Building block for creating a Chart based on the metadata provided by OData V4.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Chart id="MyChart" metaPath="@com.sap.vocabularies.UI.v1.Chart" /&gt;
   * </pre>
   *
   * Building block for creating a Chart based on the metadata provided by OData V4.
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "Chart",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.chart.ChartAPI"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec3 = blockAttribute({
    type: "object"
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec8 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec9 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec10 = blockAttribute({
    type: "sap.ui.core.TitleLevel",
    isPublic: true
  }), _dec11 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec12 = blockAttribute({
    type: "string|boolean",
    isPublic: true
  }), _dec13 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec14 = blockAttribute({
    type: "string"
  }), _dec15 = blockAttribute({
    type: "string"
  }), _dec16 = blockAttribute({
    type: "string"
  }), _dec17 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec18 = blockAttribute({
    type: "boolean"
  }), _dec19 = blockAttribute({
    type: "boolean"
  }), _dec20 = blockAttribute({
    type: "string"
  }), _dec21 = blockAttribute({
    type: "string"
  }), _dec22 = blockAttribute({
    type: "string"
  }), _dec23 = blockAttribute({
    type: "string"
  }), _dec24 = blockAttribute({
    type: "boolean"
  }), _dec25 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec26 = blockEvent(), _dec27 = blockEvent(), _dec28 = blockAggregation({
    type: "sap.fe.macros.internal.chart.Action | sap.fe.macros.internal.chart.ActionGroup",
    isPublic: true,
    processAggregations: setCustomActionProperties
  }), _dec29 = blockEvent(), _dec30 = blockEvent(), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(ChartBlock, _BuildingBlockBase);
    /**
     * ID of the chart
     */

    /**
     * Metadata path to the presentation context (UI.Chart with or without a qualifier)
     */

    // We require metaPath to be there even though it is not formally required

    /**
     * Metadata path to the entitySet or navigationProperty
     */

    // We require contextPath to be there even though it is not formally required

    /**
     * The height of the chart
     */

    /**
     * The width of the chart
     */

    /**
     * Specifies the header text that is shown in the chart
     */

    /**
     * Specifies the visibility of the chart header
     */

    /**
     * Defines the "aria-level" of the chart header
     */

    /**
     * Specifies the selection mode
     */

    /**
     * Parameter which sets the personalization of the chart
     */

    /**
     * Parameter which sets the ID of the filterbar associating it to the chart
     */

    /**
     * 	Parameter which sets the noDataText for the chart
     */

    /**
     * Parameter which sets the chart delegate for the chart
     */

    /**
     * Parameter which sets the visualization properties for the chart
     */

    /**
     * The actions to be shown in the action area of the chart
     */

    /**
     * The XML and manifest actions to be shown in the action area of the chart
     */

    /**
     * An event triggered when chart selections are changed. The event contains information about the data selected/deselected and
     * the Boolean flag that indicates whether data is selected or deselected
     */

    /**
     * Event handler to react to the stateChange event of the chart.
     */

    function ChartBlock(_props, configuration, _settings) {
      var _this;
      _this = _BuildingBlockBase.call(this, _props, configuration, _settings) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartDefinition", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "height", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "width", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "header", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerVisible", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerLevel", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionMode", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "personalization", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBar", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "noDataText", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartDelegate", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "vizProperties", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartActions", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "draftSupported", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "autoBindOnInit", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationPath", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filter", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "measures", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_applyIdToContent", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantManagement", _descriptor24, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantSelected", _descriptor25, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantSaved", _descriptor26, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actions", _descriptor27, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionChange", _descriptor28, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor29, _assertThisInitialized(_this));
      _this._commandActions = [];
      _this.createChartDefinition = (converterContext, contextObjectPath, controlPath) => {
        var _this$metaPath, _this$metaPath$getObj;
        let visualizationPath = getContextRelativeTargetObjectPath(contextObjectPath);
        if (((_this$metaPath = _this.metaPath) === null || _this$metaPath === void 0 ? void 0 : (_this$metaPath$getObj = _this$metaPath.getObject()) === null || _this$metaPath$getObj === void 0 ? void 0 : _this$metaPath$getObj.$Type) === "com.sap.vocabularies.UI.v1.PresentationVariantType") {
          const visualizations = _this.metaPath.getObject().Visualizations;
          visualizationPath = ChartBlock.checkChartVisualizationPath(visualizations, visualizationPath);
        }

        // fallback to default Chart if visualizationPath is missing or visualizationPath is not found in control (in case of PresentationVariant)
        if (!visualizationPath || controlPath.indexOf(visualizationPath) === -1) {
          visualizationPath = `@${"com.sap.vocabularies.UI.v1.Chart"}`;
        }
        const visualizationDefinition = getDataVisualizationConfiguration(visualizationPath, _this.useCondensedLayout, converterContext, undefined, undefined, undefined, true);
        return visualizationDefinition.visualizations[0];
      };
      _this.createBindingContext = function (data, settings) {
        const contextPath = `/${uid()}`;
        settings.models.converterContext.setProperty(contextPath, data);
        return settings.models.converterContext.createBindingContext(contextPath);
      };
      _this.getChartMeasures = (props, aggregationHelper) => {
        const chartAnnotationPath = props.chartDefinition.annotationPath.split("/");
        // this is required because getAbsolutePath in converterContext returns "/SalesOrderManage/_Item/_Item/@com.sap.vocabularies.v1.Chart" as annotationPath
        const annotationPath = chartAnnotationPath.filter(function (item, pos) {
          return chartAnnotationPath.indexOf(item) == pos;
        }).toString().replaceAll(",", "/");
        const oChart = getInvolvedDataModelObjects(_this.metaPath.getModel().createBindingContext(annotationPath), _this.contextPath).targetObject;
        const aggregatedProperty = aggregationHelper.getAggregatedProperties("AggregatedProperty");
        let measures = [];
        const annoPath = props.metaPath.getPath();
        const aggregatedProperties = aggregationHelper.getAggregatedProperties("AggregatedProperties");
        const chartMeasures = oChart.Measures ? oChart.Measures : [];
        const chartDynamicMeasures = oChart.DynamicMeasures ? oChart.DynamicMeasures : [];
        //check if there are measures pointing to aggregatedproperties
        const transAggInMeasures = aggregatedProperties[0] ? aggregatedProperties[0].filter(function (properties) {
          return chartMeasures.some(function (propertyMeasureType) {
            return properties.Name === propertyMeasureType.value;
          });
        }) : undefined;
        const entitySetPath = annoPath.replace(/@com.sap.vocabularies.UI.v1.(Chart|PresentationVariant|SelectionPresentationVariant).*/, "");
        const transAggregations = props.chartDefinition.transAgg;
        const customAggregations = props.chartDefinition.customAgg;
        // intimate the user if there is Aggregatedproperty configured with no DYnamicMeasures, bu there are measures with AggregatedProperties
        if (aggregatedProperty.length > 0 && !chartDynamicMeasures && transAggInMeasures.length > 0) {
          Log.warning("The transformational aggregate measures are configured as Chart.Measures but should be configured as Chart.DynamicMeasures instead. Please check the SAP Help documentation and correct the configuration accordingly.");
        }
        const isCustomAggregateIsMeasure = chartMeasures.some(oChartMeasure => {
          const oCustomAggMeasure = _this.getCustomAggMeasure(customAggregations, oChartMeasure);
          return !!oCustomAggMeasure;
        });
        if (aggregatedProperty.length > 0 && !(chartDynamicMeasures !== null && chartDynamicMeasures !== void 0 && chartDynamicMeasures.length) && !isCustomAggregateIsMeasure) {
          throw new Error("Please configure DynamicMeasures for the chart");
        }
        if (aggregatedProperty.length > 0) {
          for (const dynamicMeasure of chartDynamicMeasures) {
            measures = _this.getDynamicMeasures(measures, dynamicMeasure, entitySetPath, oChart);
          }
        }
        for (const chartMeasure of chartMeasures) {
          const key = chartMeasure.value;
          const customAggMeasure = _this.getCustomAggMeasure(customAggregations, chartMeasure);
          const measureType = {};
          if (customAggMeasure) {
            measures = _this.setCustomAggMeasure(measures, measureType, customAggMeasure, key);
            //if there is neither aggregatedProperty nor measures pointing to customAggregates, but we have normal measures. Now check if these measures are part of AggregatedProperties Obj
          } else if (aggregatedProperty.length === 0 && transAggregations[key]) {
            measures = _this.setTransAggMeasure(measures, measureType, transAggregations, key);
          }
          _this.setChartMeasureAttributes(_this._chart.MeasureAttributes, entitySetPath, measureType);
        }
        const measuresModel = new JSONModel(measures);
        measuresModel.$$valueAsPromise = true;
        return measuresModel.createBindingContext("/");
      };
      _this.setCustomAggMeasure = (measures, measure, customAggMeasure, key) => {
        if (key.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Measure: ${key} from an association cannot be used`);
        }
        measure.key = customAggMeasure.value;
        measure.role = "axis1";
        measure.label = customAggMeasure.label;
        measure.propertyPath = customAggMeasure.value;
        measures.push(measure);
        return measures;
      };
      _this.setTransAggMeasure = (measures, measure, transAggregations, key) => {
        const transAggMeasure = transAggregations[key];
        measure.key = transAggMeasure.name;
        measure.role = "axis1";
        measure.propertyPath = key;
        measure.aggregationMethod = transAggMeasure.aggregationMethod;
        measure.label = transAggMeasure.label || measure.label;
        measures.push(measure);
        return measures;
      };
      _this.getDynamicMeasures = (measures, chartDynamicMeasure, entitySetPath, chart) => {
        var _chartDynamicMeasure$;
        const key = chartDynamicMeasure.value || "";
        const aggregatedProperty = getInvolvedDataModelObjects(_this.metaPath.getModel().createBindingContext(entitySetPath + key), _this.contextPath).targetObject;
        if (key.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Measure: ${key} from an association cannot be used`);
          // check if the annotation path is wrong
        } else if (!aggregatedProperty) {
          throw new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${chartDynamicMeasure.value}`);
          // check if the path starts with @
        } else if (((_chartDynamicMeasure$ = chartDynamicMeasure.value) === null || _chartDynamicMeasure$ === void 0 ? void 0 : _chartDynamicMeasure$.startsWith(`@${"com.sap.vocabularies.Analytics.v1.AggregatedProperty"}`)) === null) {
          throw new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${chartDynamicMeasure.value}`);
        } else {
          var _aggregatedProperty$a;
          // check if AggregatedProperty is defined in given DynamicMeasure
          const dynamicMeasure = {
            key: aggregatedProperty.Name,
            role: "axis1"
          };
          dynamicMeasure.propertyPath = aggregatedProperty.AggregatableProperty.value;
          dynamicMeasure.aggregationMethod = aggregatedProperty.AggregationMethod;
          dynamicMeasure.label = resolveBindingString(((_aggregatedProperty$a = aggregatedProperty.annotations.Common) === null || _aggregatedProperty$a === void 0 ? void 0 : _aggregatedProperty$a.Label) || getInvolvedDataModelObjects(_this.metaPath.getModel().createBindingContext(entitySetPath + dynamicMeasure.propertyPath + `@${"com.sap.vocabularies.Common.v1.Label"}`), _this.contextPath).targetObject);
          _this.setChartMeasureAttributes(chart.MeasureAttributes, entitySetPath, dynamicMeasure);
          measures.push(dynamicMeasure);
        }
        return measures;
      };
      _this.getCustomAggMeasure = (customAggregations, measure) => {
        if (measure.value && customAggregations[measure.value]) {
          var _customAggregations$m;
          measure.label = (_customAggregations$m = customAggregations[measure.value]) === null || _customAggregations$m === void 0 ? void 0 : _customAggregations$m.label;
          return measure;
        }
        return null;
      };
      _this.setChartMeasureAttributes = (measureAttributes, entitySetPath, measure) => {
        if (measureAttributes !== null && measureAttributes !== void 0 && measureAttributes.length) {
          for (const measureAttribute of measureAttributes) {
            _this._setChartMeasureAttribute(measureAttribute, entitySetPath, measure);
          }
        }
      };
      _this._setChartMeasureAttribute = (measureAttribute, entitySetPath, measure) => {
        var _measureAttribute$Dyn, _measureAttribute$Mea, _measureAttribute$Dat;
        const path = measureAttribute.DynamicMeasure ? measureAttribute === null || measureAttribute === void 0 ? void 0 : (_measureAttribute$Dyn = measureAttribute.DynamicMeasure) === null || _measureAttribute$Dyn === void 0 ? void 0 : _measureAttribute$Dyn.value : measureAttribute === null || measureAttribute === void 0 ? void 0 : (_measureAttribute$Mea = measureAttribute.Measure) === null || _measureAttribute$Mea === void 0 ? void 0 : _measureAttribute$Mea.value;
        const measureAttributeDataPoint = measureAttribute.DataPoint ? measureAttribute === null || measureAttribute === void 0 ? void 0 : (_measureAttribute$Dat = measureAttribute.DataPoint) === null || _measureAttribute$Dat === void 0 ? void 0 : _measureAttribute$Dat.value : null;
        const role = measureAttribute.Role;
        const dataPoint = measureAttributeDataPoint && getInvolvedDataModelObjects(_this.metaPath.getModel().createBindingContext(entitySetPath + measureAttributeDataPoint), _this.contextPath).targetObject;
        if (measure.key === path) {
          _this.setMeasureRole(measure, role);
          //still to add data point, but UI5 Chart API is missing
          _this.setMeasureDataPoint(measure, dataPoint);
        }
      };
      _this.setMeasureDataPoint = (measure, dataPoint) => {
        if (dataPoint && dataPoint.Value.$Path == measure.key) {
          measure.dataPoint = ChartHelper.formatJSONToString(_this.createDataPointProperty(dataPoint)) || "";
        }
      };
      _this.setMeasureRole = (measure, role) => {
        if (role) {
          const index = role.$EnumMember;
          measure.role = measureRole[index];
        }
      };
      _this.getDependents = chartContext => {
        if (_this._commandActions.length > 0) {
          return _this._commandActions.map(commandAction => {
            return _this.getActionCommand(commandAction, chartContext);
          });
        }
        return "";
      };
      _this.checkPersonalizationInChartProperties = oProps => {
        if (oProps.personalization) {
          if (oProps.personalization === "false") {
            _this.personalization = undefined;
          } else if (oProps.personalization === "true") {
            _this.personalization = Object.values(personalizationValues).join(",");
          } else if (_this.verifyValidPersonlization(oProps.personalization) === true) {
            _this.personalization = oProps.personalization;
          } else {
            _this.personalization = undefined;
          }
        }
      };
      _this.verifyValidPersonlization = personalization => {
        let valid = true;
        const splitArray = personalization.split(",");
        const acceptedValues = Object.values(personalizationValues);
        splitArray.forEach(arrayElement => {
          if (!acceptedValues.includes(arrayElement)) {
            valid = false;
          }
        });
        return valid;
      };
      _this.getVariantManagement = (oProps, oChartDefinition) => {
        let variantManagement = oProps.variantManagement ? oProps.variantManagement : oChartDefinition.variantManagement;
        variantManagement = _this.personalization === undefined ? "None" : variantManagement;
        return variantManagement;
      };
      _this.createVariantManagement = () => {
        const personalization = _this.personalization;
        if (personalization) {
          const variantManagement = _this.variantManagement;
          if (variantManagement === "Control") {
            return xml`
					<mdc:variant>
					<variant:VariantManagement
						id="${generate([_this.id, "VM"])}"
						for="${_this.id}"
						showSetAsDefault="${true}"
						select="${_this.variantSelected}"
						headerLevel="${_this.headerLevel}"
						save="${_this.variantSaved}"
					/>
					</mdc:variant>
			`;
          } else if (variantManagement === "None" || variantManagement === "Page") {
            return "";
          }
        } else if (!personalization) {
          Log.warning("Variant Management cannot be enabled when personalization is disabled");
        }
        return "";
      };
      _this.getPersistenceProvider = () => {
        if (_this.variantManagement === "None") {
          return xml`<p13n:PersistenceProvider id="${generate([_this.id, "PersistenceProvider"])}" for="${_this.id}"/>`;
        }
        return "";
      };
      _this.pushActionCommand = (actionContext, dataField, chartOperationAvailableMap, action) => {
        if (dataField) {
          const commandAction = {
            actionContext: actionContext,
            onExecuteAction: ChartHelper.getPressEventForDataFieldForActionButton(_this.id, dataField, chartOperationAvailableMap || ""),
            onExecuteIBN: CommonHelper.getPressHandlerForDataFieldForIBN(dataField, `\${internal>selectedContexts}`, false),
            onExecuteManifest: CommonHelper.buildActionWrapper(action, _assertThisInitialized(_this))
          };
          _this._commandActions.push(commandAction);
        }
      };
      _this.getActionCommand = (commandAction, chartContext) => {
        const action = commandAction.actionContext.getObject();
        const dataFieldContext = action.annotationPath && _this.contextPath.getModel().createBindingContext(action.annotationPath);
        const dataField = dataFieldContext && dataFieldContext.getObject();
        const dataFieldAction = _this.contextPath.getModel().createBindingContext(action.annotationPath + "/Action");
        const actionContext = CommonHelper.getActionContext(dataFieldAction);
        const isBoundPath = CommonHelper.getPathToBoundActionOverload(dataFieldAction);
        const isBound = _this.contextPath.getModel().createBindingContext(isBoundPath).getObject();
        const chartOperationAvailableMap = escapeXMLAttributeValue(ChartHelper.getOperationAvailableMap(chartContext.getObject(), {
          context: chartContext
        }));
        const isActionEnabled = action.enabled ? action.enabled : ChartHelper.isDataFieldForActionButtonEnabled(isBound && isBound.$IsBound, dataField.Action, _this.contextPath, chartOperationAvailableMap || "", action.enableOnSelect || "");
        let isIBNEnabled;
        if (action.enabled) {
          isIBNEnabled = action.enabled;
        } else if (dataField.RequiresContext) {
          isIBNEnabled = "{= %{internal>numberOfSelectedContexts} >= 1}";
        }
        const actionCommand = xml`<internalMacro:ActionCommand
		action="${action}"
		onExecuteAction="${commandAction.onExecuteAction}"
		onExecuteIBN="${commandAction.onExecuteIBN}"
		onExecuteManifest="${commandAction.onExecuteManifest}"
		isIBNEnabled="${isIBNEnabled}"
		isActionEnabled="${isActionEnabled}"
		visible="${_this.getVisible(dataFieldContext)}"
	/>`;
        if (action.type == "ForAction" && (!isBound || isBound.IsBound !== true || actionContext[`@${"Org.OData.Core.V1.OperationAvailable"}`] !== false)) {
          return actionCommand;
        } else if (action.type == "ForAction") {
          return "";
        } else {
          return actionCommand;
        }
      };
      _this.getItems = chartContext => {
        if (_this._chart) {
          const dimensions = [];
          const measures = [];
          if (_this._chart.Dimensions) {
            ChartHelper.formatDimensions(chartContext).getObject().forEach(dimension => {
              dimension.id = generate([_this.id, "dimension", dimension.key]);
              dimensions.push(_this.getItem({
                id: dimension.id,
                key: dimension.key,
                label: dimension.label,
                role: dimension.role
              }, "_fe_groupable_", "groupable"));
            });
          }
          if (_this.measures) {
            ChartHelper.formatMeasures(_this.measures).forEach(measure => {
              measure.id = generate([_this.id, "measure", measure.key]);
              measures.push(_this.getItem({
                id: measure.id,
                key: measure.key,
                label: measure.label,
                role: measure.role
              }, "_fe_aggregatable_", "aggregatable"));
            });
          }
          if (dimensions.length && measures.length) {
            return dimensions.concat(measures);
          }
        }
        return "";
      };
      _this.getItem = (item, prefix, type) => {
        return xml`<chart:Item
			id="${item.id}"
			name="${prefix + item.key}"
			type="${type}"
			label="${resolveBindingString(item.label, "string")}"
			role="${item.role}"
		/>`;
      };
      _this.getToolbarActions = (chartContext, isInsightsEnabled) => {
        var _this$chartDefinition;
        const actions = _this.getActions(chartContext);
        if ((_this$chartDefinition = _this.chartDefinition) !== null && _this$chartDefinition !== void 0 && _this$chartDefinition.onSegmentedButtonPressed) {
          actions.push(_this.getSegmentedButton());
        }
        if (isInsightsEnabled) {
          actions.push(_this.getStandardActions(isInsightsEnabled));
        }
        if (actions.length > 0) {
          return xml`<mdc:actions>${actions}</mdc:actions>`;
        }
        return "";
      };
      _this.getStandardActions = isInsightsEnabled => {
        if (isInsightsEnabled) {
          return xml`<mdcat:ActionToolbarAction visible="${isInsightsEnabled}">
				<Button
					text="{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}"
					core:require="{API: 'sap/fe/macros/chart/ChartAPI'}"
					press="API.onAddCardToInsightsPressed($event)"
					visible="${isInsightsEnabled}"
					enabled="${isInsightsEnabled}"
				>
					<layoutData>
						<OverflowToolbarLayoutData priority="AlwaysOverflow" />
					</layoutData>
				</Button>
			</mdcat:ActionToolbarAction>`;
        }
      };
      _this.getActions = chartContext => {
        var _this$chartActions;
        let actions = (_this$chartActions = _this.chartActions) === null || _this$chartActions === void 0 ? void 0 : _this$chartActions.getObject();
        actions = _this.removeMenuItems(actions);
        return actions.map(action => {
          if (action.annotationPath) {
            // Load annotation based actions
            return _this.getAction(action, chartContext, false);
          } else if (action.hasOwnProperty("noWrap")) {
            // Load XML or manifest based actions / action groups
            return _this.getCustomActions(action, chartContext);
          }
        });
      };
      _this.removeMenuItems = actions => {
        // If action is already part of menu in action group, then it will
        // be removed from the main actions list
        for (const action of actions) {
          if (action.menu) {
            action.menu.forEach(item => {
              if (actions.indexOf(item) !== -1) {
                actions.splice(actions.indexOf(item), 1);
              }
            });
          }
        }
        return actions;
      };
      _this.getCustomActions = (action, chartContext) => {
        let actionEnabled = action.enabled;
        if ((action.requiresSelection ?? false) && action.enabled === "true") {
          actionEnabled = "{= %{internal>numberOfSelectedContexts} >= 1}";
        }
        if (action.type === "Default") {
          // Load XML or manifest based toolbar actions
          return _this.getActionToolbarAction(action, {
            id: generate([_this.id, action.id]),
            unittestid: "DataFieldForActionButtonAction",
            label: action.text ? action.text : "",
            ariaHasPopup: undefined,
            press: action.press ? action.press : "",
            enabled: actionEnabled,
            visible: action.visible ? action.visible : false
          }, false);
        } else if (action.type === "Menu") {
          // Load action groups (Menu)
          return _this.getActionToolbarMenuAction({
            id: generate([_this.id, action.id]),
            text: action.text,
            visible: action.visible,
            enabled: actionEnabled,
            useDefaultActionOnly: DefaultActionHandler.getUseDefaultActionOnly(action),
            buttonMode: DefaultActionHandler.getButtonMode(action),
            defaultAction: undefined,
            actions: action
          }, chartContext);
        }
      };
      _this.getMenuItemFromMenu = (menuItemAction, chartContext) => {
        let pressHandler;
        if (menuItemAction.annotationPath) {
          //Annotation based action is passed as menu item for menu button
          return _this.getAction(menuItemAction, chartContext, true);
        }
        if (menuItemAction.command) {
          pressHandler = "cmd:" + menuItemAction.command;
        } else if (menuItemAction.noWrap ?? false) {
          pressHandler = menuItemAction.press;
        } else {
          pressHandler = CommonHelper.buildActionWrapper(menuItemAction, _assertThisInitialized(_this));
        }
        return xml`<MenuItem
		core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
		text="${menuItemAction.text}"
		press="${pressHandler}"
		visible="${menuItemAction.visible}"
		enabled="${menuItemAction.enabled}"
	/>`;
      };
      _this.getActionToolbarMenuAction = (props, chartContext) => {
        var _props$actions, _props$actions$menu;
        const aMenuItems = (_props$actions = props.actions) === null || _props$actions === void 0 ? void 0 : (_props$actions$menu = _props$actions.menu) === null || _props$actions$menu === void 0 ? void 0 : _props$actions$menu.map(action => {
          return _this.getMenuItemFromMenu(action, chartContext);
        });
        return xml`<mdcat:ActionToolbarAction>
			<MenuButton
			text="${props.text}"
			type="Transparent"
			menuPosition="BeginBottom"
			id="${props.id}"
			visible="${props.visible}"
			enabled="${props.enabled}"
			useDefaultActionOnly="${props.useDefaultActionOnly}"
			buttonMode="${props.buttonMode}"
			defaultAction="${props.defaultAction}"
			>
				<menu>
					<Menu>
						${aMenuItems}
					</Menu>
				</menu>
			</MenuButton>
		</mdcat:ActionToolbarAction>`;
      };
      _this.getAction = (action, chartContext, isMenuItem) => {
        const dataFieldContext = _this.contextPath.getModel().createBindingContext(action.annotationPath || "");
        if (action.type === "ForNavigation") {
          return _this.getNavigationActions(action, dataFieldContext, isMenuItem);
        } else if (action.type === "ForAction") {
          return _this.getAnnotationActions(chartContext, action, dataFieldContext, isMenuItem);
        }
        return "";
      };
      _this.getNavigationActions = (action, dataFieldContext, isMenuItem) => {
        let enabled = "true";
        const dataField = dataFieldContext.getObject();
        if (action.enabled !== undefined) {
          enabled = action.enabled;
        } else if (dataField.RequiresContext) {
          enabled = "{= %{internal>numberOfSelectedContexts} >= 1}";
        }
        return _this.getActionToolbarAction(action, {
          id: undefined,
          unittestid: "DataFieldForIntentBasedNavigationButtonAction",
          label: dataField.Label,
          ariaHasPopup: undefined,
          press: CommonHelper.getPressHandlerForDataFieldForIBN(dataField, `\${internal>selectedContexts}`, false),
          enabled: enabled,
          visible: _this.getVisible(dataFieldContext)
        }, isMenuItem);
      };
      _this.getAnnotationActions = (chartContext, action, dataFieldContext, isMenuItem) => {
        const dataFieldAction = _this.contextPath.getModel().createBindingContext(action.annotationPath + "/Action");
        const actionContext = _this.contextPath.getModel().createBindingContext(CommonHelper.getActionContext(dataFieldAction));
        const actionObject = actionContext.getObject();
        const isBoundPath = CommonHelper.getPathToBoundActionOverload(dataFieldAction);
        const isBound = _this.contextPath.getModel().createBindingContext(isBoundPath).getObject();
        const dataField = dataFieldContext.getObject();
        if (!isBound || isBound.$IsBound !== true || actionObject[`@${"Org.OData.Core.V1.OperationAvailable"}`] !== false) {
          const enabled = _this.getAnnotationActionsEnabled(action, isBound, dataField, chartContext);
          const dataFieldModelObjectPath = getInvolvedDataModelObjects(_this.contextPath.getModel().createBindingContext(action.annotationPath));
          const ariaHasPopup = isDataModelObjectPathForActionWithDialog(dataFieldModelObjectPath);
          const chartOperationAvailableMap = escapeXMLAttributeValue(ChartHelper.getOperationAvailableMap(chartContext.getObject(), {
            context: chartContext
          })) || "";
          return _this.getActionToolbarAction(action, {
            id: generate([_this.id, getInvolvedDataModelObjects(dataFieldContext)]),
            unittestid: "DataFieldForActionButtonAction",
            label: dataField.Label,
            ariaHasPopup: ariaHasPopup,
            press: ChartHelper.getPressEventForDataFieldForActionButton(_this.id, dataField, chartOperationAvailableMap),
            enabled: enabled,
            visible: _this.getVisible(dataFieldContext)
          }, isMenuItem);
        }
        return "";
      };
      _this.getActionToolbarAction = (action, toolbarAction, isMenuItem) => {
        if (isMenuItem) {
          return xml`
			<MenuItem
				text="${toolbarAction.label}"
				press="${action.command ? "cmd:" + action.command : toolbarAction.press}"
				enabled="${toolbarAction.enabled}"
				visible="${toolbarAction.visible}"
			/>`;
        } else {
          return _this.buildAction(action, toolbarAction);
        }
      };
      _this.buildAction = (action, toolbarAction) => {
        let actionPress = "";
        if (action.hasOwnProperty("noWrap")) {
          if (action.command) {
            actionPress = "cmd:" + action.command;
          } else if (action.noWrap === true) {
            actionPress = toolbarAction.press;
          } else if (!action.annotationPath) {
            actionPress = CommonHelper.buildActionWrapper(action, _assertThisInitialized(_this));
          }
          return xml`<mdcat:ActionToolbarAction>
			<Button
				core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
				unittest:id="${toolbarAction.unittestid}"
				id="${toolbarAction.id}"
				text="${toolbarAction.label}"
				ariaHasPopup="${toolbarAction.ariaHasPopup}"
				press="${actionPress}"
				enabled="${toolbarAction.enabled}"
				visible="${toolbarAction.visible}"
			/>
		   </mdcat:ActionToolbarAction>`;
        } else {
          return xml`<mdcat:ActionToolbarAction>
			<Button
				unittest:id="${toolbarAction.unittestid}"
				id="${toolbarAction.id}"
				text="${toolbarAction.label}"
				ariaHasPopup="${toolbarAction.ariaHasPopup}"
				press="${action.command ? "cmd:" + action.command : toolbarAction.press}"
				enabled="${toolbarAction.enabled}"
				visible="${toolbarAction.visible}"
			/>
		</mdcat:ActionToolbarAction>`;
        }
      };
      _this.getAnnotationActionsEnabled = (action, isBound, dataField, chartContext) => {
        return action.enabled !== undefined ? action.enabled : ChartHelper.isDataFieldForActionButtonEnabled(isBound && isBound.$IsBound, dataField.Action, _this.contextPath, ChartHelper.getOperationAvailableMap(chartContext.getObject(), {
          context: chartContext
        }), action.enableOnSelect || "");
      };
      _this.getSegmentedButton = () => {
        return xml`<mdcat:ActionToolbarAction layoutInformation="{
			aggregationName: 'end',
			alignment: 'End'
		}">
			<SegmentedButton
				id="${generate([_this.id, "SegmentedButton", "TemplateContentView"])}"
				select="${_this.chartDefinition.onSegmentedButtonPressed}"
				visible="{= \${pageInternal>alpContentView} !== 'Table' }"
				selectedKey="{pageInternal>alpContentView}"
			>
				<items>
					${_this.getSegmentedButtonItems()}
				</items>
			</SegmentedButton>
		</mdcat:ActionToolbarAction>`;
      };
      _this.getSegmentedButtonItems = () => {
        const segmentedButtonItems = [];
        if (CommonHelper.isDesktop()) {
          segmentedButtonItems.push(_this.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}", "Hybrid", "sap-icon://chart-table-view"));
        }
        segmentedButtonItems.push(_this.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}", "Chart", "sap-icon://bar-chart"));
        segmentedButtonItems.push(_this.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}", "Table", "sap-icon://table-view"));
        return segmentedButtonItems;
      };
      _this.getSegmentedButtonItem = (tooltip, key, icon) => {
        return xml`<SegmentedButtonItem
			tooltip="${tooltip}"
			key="${key}"
			icon="${icon}"
		/>`;
      };
      _this.getVisible = dataFieldContext => {
        const dataField = dataFieldContext.getObject();
        if (dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`] && dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path) {
          const hiddenPathContext = _this.contextPath.getModel().createBindingContext(dataFieldContext.getPath() + `/@${"com.sap.vocabularies.UI.v1.Hidden"}/$Path`, dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path);
          return ChartHelper.getHiddenPathExpressionForTableActionsAndIBN(dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path, {
            context: hiddenPathContext
          });
        } else if (dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]) {
          return !dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`];
        } else {
          return true;
        }
      };
      _this.getContextPath = () => {
        return _this.contextPath.getPath().lastIndexOf("/") === _this.contextPath.getPath().length - 1 ? _this.contextPath.getPath().replaceAll("/", "") : _this.contextPath.getPath().split("/")[_this.contextPath.getPath().split("/").length - 1];
      };
      const _contextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
      const initialConverterContext = _this.getConverterContext(_contextObjectPath, /*this.contextPath*/undefined, _settings);
      const _visualizationPath = ChartBlock.getVisualizationPath(_assertThisInitialized(_this), _contextObjectPath, initialConverterContext);
      const extraParams = ChartBlock.getExtraParams(_assertThisInitialized(_this), _visualizationPath);
      const _converterContext = _this.getConverterContext(_contextObjectPath, /*this.contextPath*/undefined, _settings, extraParams);
      const _aggregationHelper = new AggregationHelper(_converterContext.getEntityType(), _converterContext, true); // passing the last parameter as true to consider the old annotations i.e. Aggregation.Aggregatable for backward compatibility in case of chart
      _this._chartContext = ChartHelper.getUiChart(_this.metaPath);
      _this._chart = _this._chartContext.getObject();
      if (_this._applyIdToContent ?? false) {
        _this._apiId = _this.id + "::Chart";
        _this._contentId = _this.id;
      } else {
        _this._apiId = _this.id;
        _this._contentId = _this.getContentId(_this.id);
      }
      if (_this._chart) {
        var _this$chartDefinition2, _contextObjectPath$co, _this$chartDefinition5, _this$chartDefinition6, _this$chartDefinition7, _this$chartDefinition8, _this$chartDefinition9;
        _this.chartDefinition = _this.chartDefinition === undefined || _this.chartDefinition === null ? _this.createChartDefinition(_converterContext, _contextObjectPath, _this._chartContext.getPath()) : _this.chartDefinition;
        // API Properties
        _this.navigationPath = _this.chartDefinition.navigationPath;
        _this.autoBindOnInit = _this.chartDefinition.autoBindOnInit;
        _this.vizProperties = _this.chartDefinition.vizProperties;
        _this.chartActions = _this.createBindingContext(_this.chartDefinition.actions, _settings);
        _this.selectionMode = _this.selectionMode.toUpperCase();
        if (_this.filterBar) {
          _this.filter = _this.getContentId(_this.filterBar);
        } else if (!_this.filter) {
          _this.filter = _this.chartDefinition.filterId;
        }
        _this.checkPersonalizationInChartProperties(_assertThisInitialized(_this));
        _this.variantManagement = _this.getVariantManagement(_assertThisInitialized(_this), _this.chartDefinition);
        _this.visible = _this.chartDefinition.visible;
        let contextPath = _this.contextPath.getPath();
        contextPath = contextPath[contextPath.length - 1] === "/" ? contextPath.slice(0, -1) : contextPath;
        _this.draftSupported = ModelHelper.isDraftSupported(_settings.models.metaModel, contextPath);
        _this._chartType = ChartHelper.formatChartType(_this._chart.ChartType);
        const operationAvailableMap = ChartHelper.getOperationAvailableMap(_this._chart, {
          context: _this._chartContext
        });
        if (Object.keys((_this$chartDefinition2 = _this.chartDefinition) === null || _this$chartDefinition2 === void 0 ? void 0 : _this$chartDefinition2.commandActions).length > 0) {
          var _this$chartDefinition3;
          Object.keys((_this$chartDefinition3 = _this.chartDefinition) === null || _this$chartDefinition3 === void 0 ? void 0 : _this$chartDefinition3.commandActions).forEach(key => {
            var _this$chartDefinition4;
            const action = (_this$chartDefinition4 = _this.chartDefinition) === null || _this$chartDefinition4 === void 0 ? void 0 : _this$chartDefinition4.commandActions[key];
            const actionContext = _this.createBindingContext(action, _settings);
            const dataFieldContext = action.annotationPath && _this.contextPath.getModel().createBindingContext(action.annotationPath);
            const dataField = dataFieldContext && dataFieldContext.getObject();
            const chartOperationAvailableMap = escapeXMLAttributeValue(operationAvailableMap);
            _this.pushActionCommand(actionContext, dataField, chartOperationAvailableMap, action);
          });
        }
        _this.measures = _this.getChartMeasures(_assertThisInitialized(_this), _aggregationHelper);
        const presentationPath = CommonHelper.createPresentationPathContext(_this.metaPath);
        _this._sortCondtions = ChartHelper.getSortConditions(_this.metaPath, _this.metaPath.getObject(), presentationPath.getPath(), _this.chartDefinition.applySupported);
        const chartActionsContext = _this.contextPath.getModel().createBindingContext(_this._chartContext.getPath() + "/Actions", _this._chart.Actions);
        const contextPathContext = _this.contextPath.getModel().createBindingContext(_this.contextPath.getPath(), _this.contextPath);
        const contextPathPath = CommonHelper.getContextPath(_this.contextPath, {
          context: contextPathContext
        });
        const targetCollectionPath = CommonHelper.getTargetCollectionPath(_this.contextPath);
        const targetCollectionPathContext = _this.contextPath.getModel().createBindingContext(targetCollectionPath, _this.contextPath);
        const actionsObject = (_contextObjectPath$co = _contextObjectPath.convertedTypes.resolvePath(chartActionsContext.getPath())) === null || _contextObjectPath$co === void 0 ? void 0 : _contextObjectPath$co.target;
        _this._customData = {
          targetCollectionPath: contextPathPath,
          entitySet: typeof targetCollectionPathContext.getObject() === "string" ? targetCollectionPathContext.getObject() : targetCollectionPathContext.getObject("@sapui.name"),
          entityType: contextPathPath + "/",
          operationAvailableMap: CommonHelper.stringifyCustomData(JSON.parse(operationAvailableMap)),
          multiSelectDisabledActions: ActionHelper.getMultiSelectDisabledActions(actionsObject) + "",
          segmentedButtonId: generate([_this.id, "SegmentedButton", "TemplateContentView"]),
          customAgg: CommonHelper.stringifyCustomData((_this$chartDefinition5 = _this.chartDefinition) === null || _this$chartDefinition5 === void 0 ? void 0 : _this$chartDefinition5.customAgg),
          transAgg: CommonHelper.stringifyCustomData((_this$chartDefinition6 = _this.chartDefinition) === null || _this$chartDefinition6 === void 0 ? void 0 : _this$chartDefinition6.transAgg),
          applySupported: CommonHelper.stringifyCustomData((_this$chartDefinition7 = _this.chartDefinition) === null || _this$chartDefinition7 === void 0 ? void 0 : _this$chartDefinition7.applySupported),
          vizProperties: _this.vizProperties,
          draftSupported: _this.draftSupported,
          multiViews: (_this$chartDefinition8 = _this.chartDefinition) === null || _this$chartDefinition8 === void 0 ? void 0 : _this$chartDefinition8.multiViews,
          selectionPresentationVariantPath: CommonHelper.stringifyCustomData({
            data: (_this$chartDefinition9 = _this.chartDefinition) === null || _this$chartDefinition9 === void 0 ? void 0 : _this$chartDefinition9.selectionPresentationVariantPath
          })
        };
        _this._actions = _this.chartActions ? _this.getToolbarActions(_this._chartContext, _this.chartDefinition.isInsightsEnabled ?? false) : "";
      } else {
        // fallback to display empty chart
        _this.autoBindOnInit = false;
        _this.visible = "true";
        _this.navigationPath = "";
        _this._actions = "";
        _this._customData = {
          targetCollectionPath: "",
          entitySet: "",
          entityType: "",
          operationAvailableMap: "",
          multiSelectDisabledActions: "",
          segmentedButtonId: "",
          customAgg: "",
          transAgg: "",
          applySupported: "",
          vizProperties: ""
        };
      }
      return _this;
    }
    _exports = ChartBlock;
    var _proto = ChartBlock.prototype;
    _proto.getContentId = function getContentId(macroId) {
      return `${macroId}-content`;
    };
    ChartBlock.getExtraParams = function getExtraParams(props, visualizationPath) {
      const extraParams = {};
      if (props.actions) {
        var _Object$values;
        (_Object$values = Object.values(props.actions)) === null || _Object$values === void 0 ? void 0 : _Object$values.forEach(item => {
          props.actions = {
            ...props.actions,
            ...item.menuContentActions
          };
          delete item.menuContentActions;
        });
      }
      if (visualizationPath) {
        extraParams[visualizationPath] = {
          actions: props.actions
        };
      }
      return extraParams;
    };
    /**
     * Format the data point as a JSON object.
     *
     * @param oDataPointAnno
     * @returns The formatted json object
     */
    _proto.createDataPointProperty = function createDataPointProperty(oDataPointAnno) {
      const oDataPoint = {};
      if (oDataPointAnno.TargetValue) {
        oDataPoint.targetValue = oDataPointAnno.TargetValue.$Path;
      }
      if (oDataPointAnno.ForeCastValue) {
        oDataPoint.foreCastValue = oDataPointAnno.ForeCastValue.$Path;
      }
      let oCriticality = null;
      if (oDataPointAnno.Criticality) {
        if (oDataPointAnno.Criticality.$Path) {
          //will be an aggregated property or custom aggregate
          oCriticality = {
            Calculated: oDataPointAnno.Criticality.$Path
          };
        } else {
          oCriticality = {
            Static: oDataPointAnno.Criticality.$EnumMember.replace("com.sap.vocabularies.UI.v1.CriticalityType/", "")
          };
        }
      } else if (oDataPointAnno.CriticalityCalculation) {
        const oThresholds = {};
        const bConstant = this.buildThresholds(oThresholds, oDataPointAnno.CriticalityCalculation);
        if (bConstant) {
          oCriticality = {
            ConstantThresholds: oThresholds
          };
        } else {
          oCriticality = {
            DynamicThresholds: oThresholds
          };
        }
      }
      if (oCriticality) {
        oDataPoint.criticality = oCriticality;
      }
      return oDataPoint;
    }

    /**
     * Checks whether the thresholds are dynamic or constant.
     *
     * @param oThresholds The threshold skeleton
     * @param oCriticalityCalculation The UI.DataPoint.CriticalityCalculation annotation
     * @returns `true` if the threshold should be supplied as ConstantThresholds, <code>false</code> if the threshold should
     * be supplied as DynamicThresholds
     * @private
     */;
    _proto.buildThresholds = function buildThresholds(oThresholds, oCriticalityCalculation) {
      const aKeys = ["AcceptanceRangeLowValue", "AcceptanceRangeHighValue", "ToleranceRangeLowValue", "ToleranceRangeHighValue", "DeviationRangeLowValue", "DeviationRangeHighValue"];
      let bConstant = true,
        sKey,
        i,
        j;
      oThresholds.ImprovementDirection = oCriticalityCalculation.ImprovementDirection.$EnumMember.replace("com.sap.vocabularies.UI.v1.ImprovementDirectionType/", "");
      const oDynamicThresholds = {
        oneSupplied: false,
        usedMeasures: []
        // combination to check whether at least one is supplied
      };

      const oConstantThresholds = {
        oneSupplied: false
        // combination to check whether at least one is supplied
      };

      for (i = 0; i < aKeys.length; i++) {
        sKey = aKeys[i];
        oDynamicThresholds[sKey] = oCriticalityCalculation[sKey] ? oCriticalityCalculation[sKey].$Path : undefined;
        oDynamicThresholds.oneSupplied = oDynamicThresholds.oneSupplied || oDynamicThresholds[sKey];
        if (!oDynamicThresholds.oneSupplied) {
          // only consider in case no dynamic threshold is supplied
          oConstantThresholds[sKey] = oCriticalityCalculation[sKey];
          oConstantThresholds.oneSupplied = oConstantThresholds.oneSupplied || oConstantThresholds[sKey];
        } else if (oDynamicThresholds[sKey]) {
          oDynamicThresholds.usedMeasures.push(oDynamicThresholds[sKey]);
        }
      }

      // dynamic definition shall overrule constant definition
      if (oDynamicThresholds.oneSupplied) {
        bConstant = false;
        for (i = 0; i < aKeys.length; i++) {
          if (oDynamicThresholds[aKeys[i]]) {
            oThresholds[aKeys[i]] = oDynamicThresholds[aKeys[i]];
          }
        }
        oThresholds.usedMeasures = oDynamicThresholds.usedMeasures;
      } else {
        let oAggregationLevel;
        oThresholds.AggregationLevels = [];

        // check if at least one static value is supplied
        if (oConstantThresholds.oneSupplied) {
          // add one entry in the aggregation level
          oAggregationLevel = {
            VisibleDimensions: null
          };
          for (i = 0; i < aKeys.length; i++) {
            if (oConstantThresholds[aKeys[i]]) {
              oAggregationLevel[aKeys[i]] = oConstantThresholds[aKeys[i]];
            }
          }
          oThresholds.AggregationLevels.push(oAggregationLevel);
        }

        // further check for ConstantThresholds
        if (oCriticalityCalculation.ConstantThresholds && oCriticalityCalculation.ConstantThresholds.length > 0) {
          for (i = 0; i < oCriticalityCalculation.ConstantThresholds.length; i++) {
            const oAggregationLevelInfo = oCriticalityCalculation.ConstantThresholds[i];
            const aVisibleDimensions = oAggregationLevelInfo.AggregationLevel ? [] : null;
            if (oAggregationLevelInfo.AggregationLevel && oAggregationLevelInfo.AggregationLevel.length > 0) {
              for (j = 0; j < oAggregationLevelInfo.AggregationLevel.length; j++) {
                aVisibleDimensions.push(oAggregationLevelInfo.AggregationLevel[j].$PropertyPath);
              }
            }
            oAggregationLevel = {
              VisibleDimensions: aVisibleDimensions
            };
            for (j = 0; j < aKeys.length; j++) {
              const nValue = oAggregationLevelInfo[aKeys[j]];
              if (nValue) {
                oAggregationLevel[aKeys[j]] = nValue;
              }
            }
            oThresholds.AggregationLevels.push(oAggregationLevel);
          }
        }
      }
      return bConstant;
    };
    _proto.getTemplate = function getTemplate() {
      let chartdelegate = "";
      if (this._customData.targetCollectionPath === "") {
        this.noDataText = this.getTranslatedText("M_CHART_NO_ANNOTATION_SET_TEXT");
      }
      if (this.chartDelegate) {
        chartdelegate = this.chartDelegate;
      } else {
        const contextPath = this.getContextPath();
        chartdelegate = "{name:'sap/fe/macros/chart/ChartDelegate', payload: {collectionName: '" + contextPath + "', contextPath: '" + contextPath + "', parameters:{$$groupId:'$auto.Workers'}, selectionMode: '" + this.selectionMode + "'}}";
      }
      const binding = "{internal>controls/" + this.id + "}";
      if (!this.header) {
        var _this$_chart, _this$_chart$Title;
        this.header = (_this$_chart = this._chart) === null || _this$_chart === void 0 ? void 0 : (_this$_chart$Title = _this$_chart.Title) === null || _this$_chart$Title === void 0 ? void 0 : _this$_chart$Title.toString();
      }
      return xml`
			<macro:ChartAPI xmlns="sap.m" xmlns:macro="sap.fe.macros.chart" xmlns:variant="sap.ui.fl.variants" xmlns:p13n="sap.ui.mdc.p13n" xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1" xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1" xmlns:internalMacro="sap.fe.macros.internal" xmlns:chart="sap.ui.mdc.chart" xmlns:mdc="sap.ui.mdc" xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:core="sap.ui.core" id="${this._apiId}" selectionChange="${this.selectionChange}" stateChange="${this.stateChange}">
				<macro:layoutData>
					<FlexItemData growFactor="1" shrinkFactor="1" />
				</macro:layoutData>
				<mdc:Chart
					binding="${binding}"
					unittest:id="ChartMacroFragment"
					id="${this._contentId}"
					chartType="${this._chartType}"
					sortConditions="${this._sortCondtions}"
					header="${this.header}"
					headerVisible="${this.headerVisible}"
					height="${this.height}"
					width="${this.width}"
					headerLevel="${this.headerLevel}"
					p13nMode="${this.personalization}"
					filter="${this.filter}"
					noDataText="${this.noDataText}"
					autoBindOnInit="${this.autoBindOnInit}"
					delegate="${chartdelegate}"
					macrodata:targetCollectionPath="${this._customData.targetCollectionPath}"
					macrodata:entitySet="${this._customData.entitySet}"
					macrodata:entityType="${this._customData.entityType}"
					macrodata:operationAvailableMap="${this._customData.operationAvailableMap}"
					macrodata:multiSelectDisabledActions="${this._customData.multiSelectDisabledActions}"
					macrodata:segmentedButtonId="${this._customData.segmentedButtonId}"
					macrodata:customAgg="${this._customData.customAgg}"
					macrodata:transAgg="${this._customData.transAgg}"
					macrodata:applySupported="${this._customData.applySupported}"
					macrodata:vizProperties="${this._customData.vizProperties}"
					macrodata:draftSupported="${this._customData.draftSupported}"
					macrodata:multiViews="${this._customData.multiViews}"
					macrodata:selectionPresentationVariantPath="${this._customData.selectionPresentationVariantPath}"
					visible="${this.visible}"
				>
				<mdc:dependents>
					${this.getDependents(this._chartContext)}
					${this.getPersistenceProvider()}
				</mdc:dependents>
				<mdc:items>
					${this.getItems(this._chartContext)}
				</mdc:items>
				${this._actions}
				${this.createVariantManagement()}
			</mdc:Chart>
		</macro:ChartAPI>`;
    };
    return ChartBlock;
  }(BuildingBlockBase), _class3.checkChartVisualizationPath = (visualizations, visualizationPath) => {
    visualizations.forEach(function (visualization) {
      if (visualization.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`) > -1) {
        visualizationPath = visualization.$AnnotationPath;
      }
    });
    return visualizationPath;
  }, _class3.getVisualizationPath = (props, contextObjectPath, converterContext) => {
    var _contextObjectPath$ta;
    const metaPath = getContextRelativeTargetObjectPath(contextObjectPath);

    // fallback to default Chart if metapath is not set
    if (!metaPath) {
      Log.error(`Missing metapath parameter for Chart`);
      return `@${"com.sap.vocabularies.UI.v1.Chart"}`;
    }
    if (contextObjectPath.targetObject.term === "com.sap.vocabularies.UI.v1.Chart") {
      return metaPath; // MetaPath is already pointing to a Chart
    }

    //Need to switch to the context related the PV or SPV
    const resolvedTarget = converterContext.getEntityTypeAnnotation(metaPath);
    let visualizations = [];
    switch ((_contextObjectPath$ta = contextObjectPath.targetObject) === null || _contextObjectPath$ta === void 0 ? void 0 : _contextObjectPath$ta.term) {
      case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
        if (contextObjectPath.targetObject.PresentationVariant) {
          visualizations = getVisualizationsFromPresentationVariant(contextObjectPath.targetObject.PresentationVariant, metaPath, resolvedTarget.converterContext, true);
        }
        break;
      case "com.sap.vocabularies.UI.v1.PresentationVariant":
        visualizations = getVisualizationsFromPresentationVariant(contextObjectPath.targetObject, metaPath, resolvedTarget.converterContext, true);
        break;
    }
    const chartViz = visualizations.find(viz => {
      return viz.visualization.term === "com.sap.vocabularies.UI.v1.Chart";
    });
    if (chartViz) {
      return chartViz.annotationPath;
    } else {
      // fallback to default Chart if annotation missing in PV
      Log.error(`Bad metapath parameter for chart: ${contextObjectPath.targetObject.term}`);
      return `@${"com.sap.vocabularies.UI.v1.Chart"}`;
    }
  }, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "chartDefinition", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "height", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "100%";
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "width", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "100%";
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "headerVisible", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "headerLevel", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return TitleLevel.Auto;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "selectionMode", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "MULTIPLE";
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "personalization", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "filterBar", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "noDataText", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "chartDelegate", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "vizProperties", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "chartActions", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "draftSupported", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "autoBindOnInit", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "navigationPath", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "filter", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "measures", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "_applyIdToContent", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "variantManagement", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "variantSelected", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "variantSaved", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "actions", [_dec28], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "selectionChange", [_dec29], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec30], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ChartBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/Chart.block", ["sap/base/Log","sap/base/util/uid","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/core/converters/helpers/Aggregation","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/DataModelPathHelper","sap/fe/macros/CommonHelper","sap/ui/core/library","sap/ui/model/json/JSONModel","../internal/helpers/ActionHelper","../internal/helpers/DefaultActionHandler","./ChartHelper"],function(e,t,n,a,i,r,o,s,l,c,u,d,g,p,h,m,b,f,v){"use strict";var P,A,y,C,x,M,$,D,I,T,O,B,_,S,z,w,V,E,j,F,k,N,H,L,U,R,W,q,G,X,J,K,Y,Q,Z,ee,te,ne,ae,ie,re,oe,se,le,ce,ue,de,ge,pe,he,me,be,fe,ve,Pe,Ae,ye,Ce,xe,Me,$e,De;var Ie={};var Te=h.TitleLevel;var Oe=g.getContextRelativeTargetObjectPath;var Be=d.generate;var _e=c.resolveBindingString;var Se=l.getInvolvedDataModelObjects;var ze=s.AggregationHelper;var we=o.getVisualizationsFromPresentationVariant;var Ve=o.getDataVisualizationConfiguration;var Ee=r.isDataModelObjectPathForActionWithDialog;var je=i.xml;var Fe=i.escapeXMLAttributeValue;var ke=a.defineBuildingBlock;var Ne=a.blockEvent;var He=a.blockAttribute;var Le=a.blockAggregation;function Ue(e,t,n,a){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(a):void 0})}function Re(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function We(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;qe(e,t)}function qe(e,t){qe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return qe(e,t)}function Ge(e,t,n,a,i){var r={};Object.keys(a).forEach(function(e){r[e]=a[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=n.slice().reverse().reduce(function(n,a){return a(e,t,n)||n},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function Xe(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const Je={"com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis1":"axis1","com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis2":"axis2","com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis3":"axis3","com.sap.vocabularies.UI.v1.ChartMeasureRoleType/Axis4":"axis4"};var Ke;(function(e){e["Sort"]="Sort";e["Type"]="Type";e["Item"]="Item";e["Filter"]="Filter"})(Ke||(Ke={}));const Ye=function(e){var t;let n=null;const a=e;let i=[];const r=(t=a.getAttribute("key"))===null||t===void 0?void 0:t.replace("InlineXML_","");if(a.children.length&&a.localName==="ActionGroup"&&a.namespaceURI&&["sap.fe.macros","sap.fe.macros.chart"].indexOf(a.namespaceURI)>-1){const e=Array.prototype.slice.apply(a.children);let t=0;n=e.reduce((e,n)=>{var a;const i=((a=n.getAttribute("key"))===null||a===void 0?void 0:a.replace("InlineXML_",""))||r+"_Menu_"+t;const o={key:i,text:n.getAttribute("text"),__noWrap:true,press:n.getAttribute("press"),requiresSelection:n.getAttribute("requiresSelection")==="true",enabled:n.getAttribute("enabled")===null?true:n.getAttribute("enabled")};e[o.key]=o;t++;return e},{});i=Object.values(n).slice(-a.children.length).map(function(e){return e.key})}return{key:r,text:a.getAttribute("text"),position:{placement:a.getAttribute("placement"),anchor:a.getAttribute("anchor")},__noWrap:true,press:a.getAttribute("press"),requiresSelection:a.getAttribute("requiresSelection")==="true",enabled:a.getAttribute("enabled")===null?true:a.getAttribute("enabled"),menu:i.length?i:null,menuContentActions:n}};let Qe=(P=ke({name:"Chart",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.chart.ChartAPI"]}),A=He({type:"string",isPublic:true}),y=He({type:"object"}),C=He({type:"sap.ui.model.Context",isPublic:true}),x=He({type:"sap.ui.model.Context",isPublic:true}),M=He({type:"string"}),$=He({type:"string"}),D=He({type:"string",isPublic:true}),I=He({type:"boolean",isPublic:true}),T=He({type:"sap.ui.core.TitleLevel",isPublic:true}),O=He({type:"string",isPublic:true}),B=He({type:"string|boolean",isPublic:true}),_=He({type:"string",isPublic:true}),S=He({type:"string"}),z=He({type:"string"}),w=He({type:"string"}),V=He({type:"sap.ui.model.Context"}),E=He({type:"boolean"}),j=He({type:"boolean"}),F=He({type:"string"}),k=He({type:"string"}),N=He({type:"string"}),H=He({type:"string"}),L=He({type:"boolean"}),U=He({type:"string",isPublic:true}),R=Ne(),W=Ne(),q=Le({type:"sap.fe.macros.internal.chart.Action | sap.fe.macros.internal.chart.ActionGroup",isPublic:true,processAggregations:Ye}),G=Ne(),X=Ne(),P(J=(K=(De=function(n){We(a,n);function a(i,r,o){var s;s=n.call(this,i,r,o)||this;Ue(s,"id",Y,Re(s));Ue(s,"chartDefinition",Q,Re(s));Ue(s,"metaPath",Z,Re(s));Ue(s,"contextPath",ee,Re(s));Ue(s,"height",te,Re(s));Ue(s,"width",ne,Re(s));Ue(s,"header",ae,Re(s));Ue(s,"headerVisible",ie,Re(s));Ue(s,"headerLevel",re,Re(s));Ue(s,"selectionMode",oe,Re(s));Ue(s,"personalization",se,Re(s));Ue(s,"filterBar",le,Re(s));Ue(s,"noDataText",ce,Re(s));Ue(s,"chartDelegate",ue,Re(s));Ue(s,"vizProperties",de,Re(s));Ue(s,"chartActions",ge,Re(s));Ue(s,"draftSupported",pe,Re(s));Ue(s,"autoBindOnInit",he,Re(s));Ue(s,"visible",me,Re(s));Ue(s,"navigationPath",be,Re(s));Ue(s,"filter",fe,Re(s));Ue(s,"measures",ve,Re(s));Ue(s,"_applyIdToContent",Pe,Re(s));Ue(s,"variantManagement",Ae,Re(s));Ue(s,"variantSelected",ye,Re(s));Ue(s,"variantSaved",Ce,Re(s));Ue(s,"actions",xe,Re(s));Ue(s,"selectionChange",Me,Re(s));Ue(s,"stateChange",$e,Re(s));s._commandActions=[];s.createChartDefinition=(e,t,n)=>{var i,r;let o=Oe(t);if(((i=s.metaPath)===null||i===void 0?void 0:(r=i.getObject())===null||r===void 0?void 0:r.$Type)==="com.sap.vocabularies.UI.v1.PresentationVariantType"){const e=s.metaPath.getObject().Visualizations;o=a.checkChartVisualizationPath(e,o)}if(!o||n.indexOf(o)===-1){o=`@${"com.sap.vocabularies.UI.v1.Chart"}`}const l=Ve(o,s.useCondensedLayout,e,undefined,undefined,undefined,true);return l.visualizations[0]};s.createBindingContext=function(e,n){const a=`/${t()}`;n.models.converterContext.setProperty(a,e);return n.models.converterContext.createBindingContext(a)};s.getChartMeasures=(t,n)=>{const a=t.chartDefinition.annotationPath.split("/");const i=a.filter(function(e,t){return a.indexOf(e)==t}).toString().replaceAll(",","/");const r=Se(s.metaPath.getModel().createBindingContext(i),s.contextPath).targetObject;const o=n.getAggregatedProperties("AggregatedProperty");let l=[];const c=t.metaPath.getPath();const u=n.getAggregatedProperties("AggregatedProperties");const d=r.Measures?r.Measures:[];const g=r.DynamicMeasures?r.DynamicMeasures:[];const p=u[0]?u[0].filter(function(e){return d.some(function(t){return e.Name===t.value})}):undefined;const h=c.replace(/@com.sap.vocabularies.UI.v1.(Chart|PresentationVariant|SelectionPresentationVariant).*/,"");const b=t.chartDefinition.transAgg;const f=t.chartDefinition.customAgg;if(o.length>0&&!g&&p.length>0){e.warning("The transformational aggregate measures are configured as Chart.Measures but should be configured as Chart.DynamicMeasures instead. Please check the SAP Help documentation and correct the configuration accordingly.")}const v=d.some(e=>{const t=s.getCustomAggMeasure(f,e);return!!t});if(o.length>0&&!(g!==null&&g!==void 0&&g.length)&&!v){throw new Error("Please configure DynamicMeasures for the chart")}if(o.length>0){for(const e of g){l=s.getDynamicMeasures(l,e,h,r)}}for(const e of d){const t=e.value;const n=s.getCustomAggMeasure(f,e);const a={};if(n){l=s.setCustomAggMeasure(l,a,n,t)}else if(o.length===0&&b[t]){l=s.setTransAggMeasure(l,a,b,t)}s.setChartMeasureAttributes(s._chart.MeasureAttributes,h,a)}const P=new m(l);P.$$valueAsPromise=true;return P.createBindingContext("/")};s.setCustomAggMeasure=(t,n,a,i)=>{if(i.indexOf("/")>-1){e.error(`$expand is not yet supported. Measure: ${i} from an association cannot be used`)}n.key=a.value;n.role="axis1";n.label=a.label;n.propertyPath=a.value;t.push(n);return t};s.setTransAggMeasure=(e,t,n,a)=>{const i=n[a];t.key=i.name;t.role="axis1";t.propertyPath=a;t.aggregationMethod=i.aggregationMethod;t.label=i.label||t.label;e.push(t);return e};s.getDynamicMeasures=(t,n,a,i)=>{var r;const o=n.value||"";const l=Se(s.metaPath.getModel().createBindingContext(a+o),s.contextPath).targetObject;if(o.indexOf("/")>-1){e.error(`$expand is not yet supported. Measure: ${o} from an association cannot be used`)}else if(!l){throw new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${n.value}`)}else if(((r=n.value)===null||r===void 0?void 0:r.startsWith(`@${"com.sap.vocabularies.Analytics.v1.AggregatedProperty"}`))===null){throw new Error(`Please provide the right AnnotationPath to the Dynamic Measure ${n.value}`)}else{var c;const e={key:l.Name,role:"axis1"};e.propertyPath=l.AggregatableProperty.value;e.aggregationMethod=l.AggregationMethod;e.label=_e(((c=l.annotations.Common)===null||c===void 0?void 0:c.Label)||Se(s.metaPath.getModel().createBindingContext(a+e.propertyPath+`@${"com.sap.vocabularies.Common.v1.Label"}`),s.contextPath).targetObject);s.setChartMeasureAttributes(i.MeasureAttributes,a,e);t.push(e)}return t};s.getCustomAggMeasure=(e,t)=>{if(t.value&&e[t.value]){var n;t.label=(n=e[t.value])===null||n===void 0?void 0:n.label;return t}return null};s.setChartMeasureAttributes=(e,t,n)=>{if(e!==null&&e!==void 0&&e.length){for(const a of e){s._setChartMeasureAttribute(a,t,n)}}};s._setChartMeasureAttribute=(e,t,n)=>{var a,i,r;const o=e.DynamicMeasure?e===null||e===void 0?void 0:(a=e.DynamicMeasure)===null||a===void 0?void 0:a.value:e===null||e===void 0?void 0:(i=e.Measure)===null||i===void 0?void 0:i.value;const l=e.DataPoint?e===null||e===void 0?void 0:(r=e.DataPoint)===null||r===void 0?void 0:r.value:null;const c=e.Role;const u=l&&Se(s.metaPath.getModel().createBindingContext(t+l),s.contextPath).targetObject;if(n.key===o){s.setMeasureRole(n,c);s.setMeasureDataPoint(n,u)}};s.setMeasureDataPoint=(e,t)=>{if(t&&t.Value.$Path==e.key){e.dataPoint=v.formatJSONToString(s.createDataPointProperty(t))||""}};s.setMeasureRole=(e,t)=>{if(t){const n=t.$EnumMember;e.role=Je[n]}};s.getDependents=e=>{if(s._commandActions.length>0){return s._commandActions.map(t=>s.getActionCommand(t,e))}return""};s.checkPersonalizationInChartProperties=e=>{if(e.personalization){if(e.personalization==="false"){s.personalization=undefined}else if(e.personalization==="true"){s.personalization=Object.values(Ke).join(",")}else if(s.verifyValidPersonlization(e.personalization)===true){s.personalization=e.personalization}else{s.personalization=undefined}}};s.verifyValidPersonlization=e=>{let t=true;const n=e.split(",");const a=Object.values(Ke);n.forEach(e=>{if(!a.includes(e)){t=false}});return t};s.getVariantManagement=(e,t)=>{let n=e.variantManagement?e.variantManagement:t.variantManagement;n=s.personalization===undefined?"None":n;return n};s.createVariantManagement=()=>{const t=s.personalization;if(t){const e=s.variantManagement;if(e==="Control"){return je`
					<mdc:variant>
					<variant:VariantManagement
						id="${Be([s.id,"VM"])}"
						for="${s.id}"
						showSetAsDefault="${true}"
						select="${s.variantSelected}"
						headerLevel="${s.headerLevel}"
						save="${s.variantSaved}"
					/>
					</mdc:variant>
			`}else if(e==="None"||e==="Page"){return""}}else if(!t){e.warning("Variant Management cannot be enabled when personalization is disabled")}return""};s.getPersistenceProvider=()=>{if(s.variantManagement==="None"){return je`<p13n:PersistenceProvider id="${Be([s.id,"PersistenceProvider"])}" for="${s.id}"/>`}return""};s.pushActionCommand=(e,t,n,a)=>{if(t){const i={actionContext:e,onExecuteAction:v.getPressEventForDataFieldForActionButton(s.id,t,n||""),onExecuteIBN:p.getPressHandlerForDataFieldForIBN(t,`\${internal>selectedContexts}`,false),onExecuteManifest:p.buildActionWrapper(a,Re(s))};s._commandActions.push(i)}};s.getActionCommand=(e,t)=>{const n=e.actionContext.getObject();const a=n.annotationPath&&s.contextPath.getModel().createBindingContext(n.annotationPath);const i=a&&a.getObject();const r=s.contextPath.getModel().createBindingContext(n.annotationPath+"/Action");const o=p.getActionContext(r);const l=p.getPathToBoundActionOverload(r);const c=s.contextPath.getModel().createBindingContext(l).getObject();const u=Fe(v.getOperationAvailableMap(t.getObject(),{context:t}));const d=n.enabled?n.enabled:v.isDataFieldForActionButtonEnabled(c&&c.$IsBound,i.Action,s.contextPath,u||"",n.enableOnSelect||"");let g;if(n.enabled){g=n.enabled}else if(i.RequiresContext){g="{= %{internal>numberOfSelectedContexts} >= 1}"}const h=je`<internalMacro:ActionCommand
		action="${n}"
		onExecuteAction="${e.onExecuteAction}"
		onExecuteIBN="${e.onExecuteIBN}"
		onExecuteManifest="${e.onExecuteManifest}"
		isIBNEnabled="${g}"
		isActionEnabled="${d}"
		visible="${s.getVisible(a)}"
	/>`;if(n.type=="ForAction"&&(!c||c.IsBound!==true||o[`@${"Org.OData.Core.V1.OperationAvailable"}`]!==false)){return h}else if(n.type=="ForAction"){return""}else{return h}};s.getItems=e=>{if(s._chart){const t=[];const n=[];if(s._chart.Dimensions){v.formatDimensions(e).getObject().forEach(e=>{e.id=Be([s.id,"dimension",e.key]);t.push(s.getItem({id:e.id,key:e.key,label:e.label,role:e.role},"_fe_groupable_","groupable"))})}if(s.measures){v.formatMeasures(s.measures).forEach(e=>{e.id=Be([s.id,"measure",e.key]);n.push(s.getItem({id:e.id,key:e.key,label:e.label,role:e.role},"_fe_aggregatable_","aggregatable"))})}if(t.length&&n.length){return t.concat(n)}}return""};s.getItem=(e,t,n)=>je`<chart:Item
			id="${e.id}"
			name="${t+e.key}"
			type="${n}"
			label="${_e(e.label,"string")}"
			role="${e.role}"
		/>`;s.getToolbarActions=(e,t)=>{var n;const a=s.getActions(e);if((n=s.chartDefinition)!==null&&n!==void 0&&n.onSegmentedButtonPressed){a.push(s.getSegmentedButton())}if(t){a.push(s.getStandardActions(t))}if(a.length>0){return je`<mdc:actions>${a}</mdc:actions>`}return""};s.getStandardActions=e=>{if(e){return je`<mdcat:ActionToolbarAction visible="${e}">
				<Button
					text="{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}"
					core:require="{API: 'sap/fe/macros/chart/ChartAPI'}"
					press="API.onAddCardToInsightsPressed($event)"
					visible="${e}"
					enabled="${e}"
				>
					<layoutData>
						<OverflowToolbarLayoutData priority="AlwaysOverflow" />
					</layoutData>
				</Button>
			</mdcat:ActionToolbarAction>`}};s.getActions=e=>{var t;let n=(t=s.chartActions)===null||t===void 0?void 0:t.getObject();n=s.removeMenuItems(n);return n.map(t=>{if(t.annotationPath){return s.getAction(t,e,false)}else if(t.hasOwnProperty("noWrap")){return s.getCustomActions(t,e)}})};s.removeMenuItems=e=>{for(const t of e){if(t.menu){t.menu.forEach(t=>{if(e.indexOf(t)!==-1){e.splice(e.indexOf(t),1)}})}}return e};s.getCustomActions=(e,t)=>{let n=e.enabled;if((e.requiresSelection??false)&&e.enabled==="true"){n="{= %{internal>numberOfSelectedContexts} >= 1}"}if(e.type==="Default"){return s.getActionToolbarAction(e,{id:Be([s.id,e.id]),unittestid:"DataFieldForActionButtonAction",label:e.text?e.text:"",ariaHasPopup:undefined,press:e.press?e.press:"",enabled:n,visible:e.visible?e.visible:false},false)}else if(e.type==="Menu"){return s.getActionToolbarMenuAction({id:Be([s.id,e.id]),text:e.text,visible:e.visible,enabled:n,useDefaultActionOnly:f.getUseDefaultActionOnly(e),buttonMode:f.getButtonMode(e),defaultAction:undefined,actions:e},t)}};s.getMenuItemFromMenu=(e,t)=>{let n;if(e.annotationPath){return s.getAction(e,t,true)}if(e.command){n="cmd:"+e.command}else if(e.noWrap??false){n=e.press}else{n=p.buildActionWrapper(e,Re(s))}return je`<MenuItem
		core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
		text="${e.text}"
		press="${n}"
		visible="${e.visible}"
		enabled="${e.enabled}"
	/>`};s.getActionToolbarMenuAction=(e,t)=>{var n,a;const i=(n=e.actions)===null||n===void 0?void 0:(a=n.menu)===null||a===void 0?void 0:a.map(e=>s.getMenuItemFromMenu(e,t));return je`<mdcat:ActionToolbarAction>
			<MenuButton
			text="${e.text}"
			type="Transparent"
			menuPosition="BeginBottom"
			id="${e.id}"
			visible="${e.visible}"
			enabled="${e.enabled}"
			useDefaultActionOnly="${e.useDefaultActionOnly}"
			buttonMode="${e.buttonMode}"
			defaultAction="${e.defaultAction}"
			>
				<menu>
					<Menu>
						${i}
					</Menu>
				</menu>
			</MenuButton>
		</mdcat:ActionToolbarAction>`};s.getAction=(e,t,n)=>{const a=s.contextPath.getModel().createBindingContext(e.annotationPath||"");if(e.type==="ForNavigation"){return s.getNavigationActions(e,a,n)}else if(e.type==="ForAction"){return s.getAnnotationActions(t,e,a,n)}return""};s.getNavigationActions=(e,t,n)=>{let a="true";const i=t.getObject();if(e.enabled!==undefined){a=e.enabled}else if(i.RequiresContext){a="{= %{internal>numberOfSelectedContexts} >= 1}"}return s.getActionToolbarAction(e,{id:undefined,unittestid:"DataFieldForIntentBasedNavigationButtonAction",label:i.Label,ariaHasPopup:undefined,press:p.getPressHandlerForDataFieldForIBN(i,`\${internal>selectedContexts}`,false),enabled:a,visible:s.getVisible(t)},n)};s.getAnnotationActions=(e,t,n,a)=>{const i=s.contextPath.getModel().createBindingContext(t.annotationPath+"/Action");const r=s.contextPath.getModel().createBindingContext(p.getActionContext(i));const o=r.getObject();const l=p.getPathToBoundActionOverload(i);const c=s.contextPath.getModel().createBindingContext(l).getObject();const u=n.getObject();if(!c||c.$IsBound!==true||o[`@${"Org.OData.Core.V1.OperationAvailable"}`]!==false){const i=s.getAnnotationActionsEnabled(t,c,u,e);const r=Se(s.contextPath.getModel().createBindingContext(t.annotationPath));const o=Ee(r);const l=Fe(v.getOperationAvailableMap(e.getObject(),{context:e}))||"";return s.getActionToolbarAction(t,{id:Be([s.id,Se(n)]),unittestid:"DataFieldForActionButtonAction",label:u.Label,ariaHasPopup:o,press:v.getPressEventForDataFieldForActionButton(s.id,u,l),enabled:i,visible:s.getVisible(n)},a)}return""};s.getActionToolbarAction=(e,t,n)=>{if(n){return je`
			<MenuItem
				text="${t.label}"
				press="${e.command?"cmd:"+e.command:t.press}"
				enabled="${t.enabled}"
				visible="${t.visible}"
			/>`}else{return s.buildAction(e,t)}};s.buildAction=(e,t)=>{let n="";if(e.hasOwnProperty("noWrap")){if(e.command){n="cmd:"+e.command}else if(e.noWrap===true){n=t.press}else if(!e.annotationPath){n=p.buildActionWrapper(e,Re(s))}return je`<mdcat:ActionToolbarAction>
			<Button
				core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
				unittest:id="${t.unittestid}"
				id="${t.id}"
				text="${t.label}"
				ariaHasPopup="${t.ariaHasPopup}"
				press="${n}"
				enabled="${t.enabled}"
				visible="${t.visible}"
			/>
		   </mdcat:ActionToolbarAction>`}else{return je`<mdcat:ActionToolbarAction>
			<Button
				unittest:id="${t.unittestid}"
				id="${t.id}"
				text="${t.label}"
				ariaHasPopup="${t.ariaHasPopup}"
				press="${e.command?"cmd:"+e.command:t.press}"
				enabled="${t.enabled}"
				visible="${t.visible}"
			/>
		</mdcat:ActionToolbarAction>`}};s.getAnnotationActionsEnabled=(e,t,n,a)=>e.enabled!==undefined?e.enabled:v.isDataFieldForActionButtonEnabled(t&&t.$IsBound,n.Action,s.contextPath,v.getOperationAvailableMap(a.getObject(),{context:a}),e.enableOnSelect||"");s.getSegmentedButton=()=>je`<mdcat:ActionToolbarAction layoutInformation="{
			aggregationName: 'end',
			alignment: 'End'
		}">
			<SegmentedButton
				id="${Be([s.id,"SegmentedButton","TemplateContentView"])}"
				select="${s.chartDefinition.onSegmentedButtonPressed}"
				visible="{= \${pageInternal>alpContentView} !== 'Table' }"
				selectedKey="{pageInternal>alpContentView}"
			>
				<items>
					${s.getSegmentedButtonItems()}
				</items>
			</SegmentedButton>
		</mdcat:ActionToolbarAction>`;s.getSegmentedButtonItems=()=>{const e=[];if(p.isDesktop()){e.push(s.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}","Hybrid","sap-icon://chart-table-view"))}e.push(s.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}","Chart","sap-icon://bar-chart"));e.push(s.getSegmentedButtonItem("{sap.fe.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}","Table","sap-icon://table-view"));return e};s.getSegmentedButtonItem=(e,t,n)=>je`<SegmentedButtonItem
			tooltip="${e}"
			key="${t}"
			icon="${n}"
		/>`;s.getVisible=e=>{const t=e.getObject();if(t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]&&t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path){const n=s.contextPath.getModel().createBindingContext(e.getPath()+`/@${"com.sap.vocabularies.UI.v1.Hidden"}/$Path`,t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path);return v.getHiddenPathExpressionForTableActionsAndIBN(t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`].$Path,{context:n})}else if(t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]){return!t[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]}else{return true}};s.getContextPath=()=>s.contextPath.getPath().lastIndexOf("/")===s.contextPath.getPath().length-1?s.contextPath.getPath().replaceAll("/",""):s.contextPath.getPath().split("/")[s.contextPath.getPath().split("/").length-1];const l=Se(s.metaPath,s.contextPath);const c=s.getConverterContext(l,undefined,o);const d=a.getVisualizationPath(Re(s),l,c);const g=a.getExtraParams(Re(s),d);const h=s.getConverterContext(l,undefined,o,g);const P=new ze(h.getEntityType(),h,true);s._chartContext=v.getUiChart(s.metaPath);s._chart=s._chartContext.getObject();if(s._applyIdToContent??false){s._apiId=s.id+"::Chart";s._contentId=s.id}else{s._apiId=s.id;s._contentId=s.getContentId(s.id)}if(s._chart){var A,y,C,x,M,$,D;s.chartDefinition=s.chartDefinition===undefined||s.chartDefinition===null?s.createChartDefinition(h,l,s._chartContext.getPath()):s.chartDefinition;s.navigationPath=s.chartDefinition.navigationPath;s.autoBindOnInit=s.chartDefinition.autoBindOnInit;s.vizProperties=s.chartDefinition.vizProperties;s.chartActions=s.createBindingContext(s.chartDefinition.actions,o);s.selectionMode=s.selectionMode.toUpperCase();if(s.filterBar){s.filter=s.getContentId(s.filterBar)}else if(!s.filter){s.filter=s.chartDefinition.filterId}s.checkPersonalizationInChartProperties(Re(s));s.variantManagement=s.getVariantManagement(Re(s),s.chartDefinition);s.visible=s.chartDefinition.visible;let e=s.contextPath.getPath();e=e[e.length-1]==="/"?e.slice(0,-1):e;s.draftSupported=u.isDraftSupported(o.models.metaModel,e);s._chartType=v.formatChartType(s._chart.ChartType);const t=v.getOperationAvailableMap(s._chart,{context:s._chartContext});if(Object.keys((A=s.chartDefinition)===null||A===void 0?void 0:A.commandActions).length>0){var I;Object.keys((I=s.chartDefinition)===null||I===void 0?void 0:I.commandActions).forEach(e=>{var n;const a=(n=s.chartDefinition)===null||n===void 0?void 0:n.commandActions[e];const i=s.createBindingContext(a,o);const r=a.annotationPath&&s.contextPath.getModel().createBindingContext(a.annotationPath);const l=r&&r.getObject();const c=Fe(t);s.pushActionCommand(i,l,c,a)})}s.measures=s.getChartMeasures(Re(s),P);const n=p.createPresentationPathContext(s.metaPath);s._sortCondtions=v.getSortConditions(s.metaPath,s.metaPath.getObject(),n.getPath(),s.chartDefinition.applySupported);const a=s.contextPath.getModel().createBindingContext(s._chartContext.getPath()+"/Actions",s._chart.Actions);const i=s.contextPath.getModel().createBindingContext(s.contextPath.getPath(),s.contextPath);const r=p.getContextPath(s.contextPath,{context:i});const c=p.getTargetCollectionPath(s.contextPath);const d=s.contextPath.getModel().createBindingContext(c,s.contextPath);const g=(y=l.convertedTypes.resolvePath(a.getPath()))===null||y===void 0?void 0:y.target;s._customData={targetCollectionPath:r,entitySet:typeof d.getObject()==="string"?d.getObject():d.getObject("@sapui.name"),entityType:r+"/",operationAvailableMap:p.stringifyCustomData(JSON.parse(t)),multiSelectDisabledActions:b.getMultiSelectDisabledActions(g)+"",segmentedButtonId:Be([s.id,"SegmentedButton","TemplateContentView"]),customAgg:p.stringifyCustomData((C=s.chartDefinition)===null||C===void 0?void 0:C.customAgg),transAgg:p.stringifyCustomData((x=s.chartDefinition)===null||x===void 0?void 0:x.transAgg),applySupported:p.stringifyCustomData((M=s.chartDefinition)===null||M===void 0?void 0:M.applySupported),vizProperties:s.vizProperties,draftSupported:s.draftSupported,multiViews:($=s.chartDefinition)===null||$===void 0?void 0:$.multiViews,selectionPresentationVariantPath:p.stringifyCustomData({data:(D=s.chartDefinition)===null||D===void 0?void 0:D.selectionPresentationVariantPath})};s._actions=s.chartActions?s.getToolbarActions(s._chartContext,s.chartDefinition.isInsightsEnabled??false):""}else{s.autoBindOnInit=false;s.visible="true";s.navigationPath="";s._actions="";s._customData={targetCollectionPath:"",entitySet:"",entityType:"",operationAvailableMap:"",multiSelectDisabledActions:"",segmentedButtonId:"",customAgg:"",transAgg:"",applySupported:"",vizProperties:""}}return s}Ie=a;var i=a.prototype;i.getContentId=function e(t){return`${t}-content`};a.getExtraParams=function e(t,n){const a={};if(t.actions){var i;(i=Object.values(t.actions))===null||i===void 0?void 0:i.forEach(e=>{t.actions={...t.actions,...e.menuContentActions};delete e.menuContentActions})}if(n){a[n]={actions:t.actions}}return a};i.createDataPointProperty=function e(t){const n={};if(t.TargetValue){n.targetValue=t.TargetValue.$Path}if(t.ForeCastValue){n.foreCastValue=t.ForeCastValue.$Path}let a=null;if(t.Criticality){if(t.Criticality.$Path){a={Calculated:t.Criticality.$Path}}else{a={Static:t.Criticality.$EnumMember.replace("com.sap.vocabularies.UI.v1.CriticalityType/","")}}}else if(t.CriticalityCalculation){const e={};const n=this.buildThresholds(e,t.CriticalityCalculation);if(n){a={ConstantThresholds:e}}else{a={DynamicThresholds:e}}}if(a){n.criticality=a}return n};i.buildThresholds=function e(t,n){const a=["AcceptanceRangeLowValue","AcceptanceRangeHighValue","ToleranceRangeLowValue","ToleranceRangeHighValue","DeviationRangeLowValue","DeviationRangeHighValue"];let i=true,r,o,s;t.ImprovementDirection=n.ImprovementDirection.$EnumMember.replace("com.sap.vocabularies.UI.v1.ImprovementDirectionType/","");const l={oneSupplied:false,usedMeasures:[]};const c={oneSupplied:false};for(o=0;o<a.length;o++){r=a[o];l[r]=n[r]?n[r].$Path:undefined;l.oneSupplied=l.oneSupplied||l[r];if(!l.oneSupplied){c[r]=n[r];c.oneSupplied=c.oneSupplied||c[r]}else if(l[r]){l.usedMeasures.push(l[r])}}if(l.oneSupplied){i=false;for(o=0;o<a.length;o++){if(l[a[o]]){t[a[o]]=l[a[o]]}}t.usedMeasures=l.usedMeasures}else{let e;t.AggregationLevels=[];if(c.oneSupplied){e={VisibleDimensions:null};for(o=0;o<a.length;o++){if(c[a[o]]){e[a[o]]=c[a[o]]}}t.AggregationLevels.push(e)}if(n.ConstantThresholds&&n.ConstantThresholds.length>0){for(o=0;o<n.ConstantThresholds.length;o++){const i=n.ConstantThresholds[o];const r=i.AggregationLevel?[]:null;if(i.AggregationLevel&&i.AggregationLevel.length>0){for(s=0;s<i.AggregationLevel.length;s++){r.push(i.AggregationLevel[s].$PropertyPath)}}e={VisibleDimensions:r};for(s=0;s<a.length;s++){const t=i[a[s]];if(t){e[a[s]]=t}}t.AggregationLevels.push(e)}}}return i};i.getTemplate=function e(){let t="";if(this._customData.targetCollectionPath===""){this.noDataText=this.getTranslatedText("M_CHART_NO_ANNOTATION_SET_TEXT")}if(this.chartDelegate){t=this.chartDelegate}else{const e=this.getContextPath();t="{name:'sap/fe/macros/chart/ChartDelegate', payload: {collectionName: '"+e+"', contextPath: '"+e+"', parameters:{$$groupId:'$auto.Workers'}, selectionMode: '"+this.selectionMode+"'}}"}const n="{internal>controls/"+this.id+"}";if(!this.header){var a,i;this.header=(a=this._chart)===null||a===void 0?void 0:(i=a.Title)===null||i===void 0?void 0:i.toString()}return je`
			<macro:ChartAPI xmlns="sap.m" xmlns:macro="sap.fe.macros.chart" xmlns:variant="sap.ui.fl.variants" xmlns:p13n="sap.ui.mdc.p13n" xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1" xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1" xmlns:internalMacro="sap.fe.macros.internal" xmlns:chart="sap.ui.mdc.chart" xmlns:mdc="sap.ui.mdc" xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:core="sap.ui.core" id="${this._apiId}" selectionChange="${this.selectionChange}" stateChange="${this.stateChange}">
				<macro:layoutData>
					<FlexItemData growFactor="1" shrinkFactor="1" />
				</macro:layoutData>
				<mdc:Chart
					binding="${n}"
					unittest:id="ChartMacroFragment"
					id="${this._contentId}"
					chartType="${this._chartType}"
					sortConditions="${this._sortCondtions}"
					header="${this.header}"
					headerVisible="${this.headerVisible}"
					height="${this.height}"
					width="${this.width}"
					headerLevel="${this.headerLevel}"
					p13nMode="${this.personalization}"
					filter="${this.filter}"
					noDataText="${this.noDataText}"
					autoBindOnInit="${this.autoBindOnInit}"
					delegate="${t}"
					macrodata:targetCollectionPath="${this._customData.targetCollectionPath}"
					macrodata:entitySet="${this._customData.entitySet}"
					macrodata:entityType="${this._customData.entityType}"
					macrodata:operationAvailableMap="${this._customData.operationAvailableMap}"
					macrodata:multiSelectDisabledActions="${this._customData.multiSelectDisabledActions}"
					macrodata:segmentedButtonId="${this._customData.segmentedButtonId}"
					macrodata:customAgg="${this._customData.customAgg}"
					macrodata:transAgg="${this._customData.transAgg}"
					macrodata:applySupported="${this._customData.applySupported}"
					macrodata:vizProperties="${this._customData.vizProperties}"
					macrodata:draftSupported="${this._customData.draftSupported}"
					macrodata:multiViews="${this._customData.multiViews}"
					macrodata:selectionPresentationVariantPath="${this._customData.selectionPresentationVariantPath}"
					visible="${this.visible}"
				>
				<mdc:dependents>
					${this.getDependents(this._chartContext)}
					${this.getPersistenceProvider()}
				</mdc:dependents>
				<mdc:items>
					${this.getItems(this._chartContext)}
				</mdc:items>
				${this._actions}
				${this.createVariantManagement()}
			</mdc:Chart>
		</macro:ChartAPI>`};return a}(n),De.checkChartVisualizationPath=(e,t)=>{e.forEach(function(e){if(e.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`)>-1){t=e.$AnnotationPath}});return t},De.getVisualizationPath=(t,n,a)=>{var i;const r=Oe(n);if(!r){e.error(`Missing metapath parameter for Chart`);return`@${"com.sap.vocabularies.UI.v1.Chart"}`}if(n.targetObject.term==="com.sap.vocabularies.UI.v1.Chart"){return r}const o=a.getEntityTypeAnnotation(r);let s=[];switch((i=n.targetObject)===null||i===void 0?void 0:i.term){case"com.sap.vocabularies.UI.v1.SelectionPresentationVariant":if(n.targetObject.PresentationVariant){s=we(n.targetObject.PresentationVariant,r,o.converterContext,true)}break;case"com.sap.vocabularies.UI.v1.PresentationVariant":s=we(n.targetObject,r,o.converterContext,true);break}const l=s.find(e=>e.visualization.term==="com.sap.vocabularies.UI.v1.Chart");if(l){return l.annotationPath}else{e.error(`Bad metapath parameter for chart: ${n.targetObject.term}`);return`@${"com.sap.vocabularies.UI.v1.Chart"}`}},De),Y=Ge(K.prototype,"id",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),Q=Ge(K.prototype,"chartDefinition",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),Z=Ge(K.prototype,"metaPath",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),ee=Ge(K.prototype,"contextPath",[x],{configurable:true,enumerable:true,writable:true,initializer:null}),te=Ge(K.prototype,"height",[M],{configurable:true,enumerable:true,writable:true,initializer:function(){return"100%"}}),ne=Ge(K.prototype,"width",[$],{configurable:true,enumerable:true,writable:true,initializer:function(){return"100%"}}),ae=Ge(K.prototype,"header",[D],{configurable:true,enumerable:true,writable:true,initializer:null}),ie=Ge(K.prototype,"headerVisible",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),re=Ge(K.prototype,"headerLevel",[T],{configurable:true,enumerable:true,writable:true,initializer:function(){return Te.Auto}}),oe=Ge(K.prototype,"selectionMode",[O],{configurable:true,enumerable:true,writable:true,initializer:function(){return"MULTIPLE"}}),se=Ge(K.prototype,"personalization",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),le=Ge(K.prototype,"filterBar",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),ce=Ge(K.prototype,"noDataText",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),ue=Ge(K.prototype,"chartDelegate",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),de=Ge(K.prototype,"vizProperties",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),ge=Ge(K.prototype,"chartActions",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),pe=Ge(K.prototype,"draftSupported",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),he=Ge(K.prototype,"autoBindOnInit",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),me=Ge(K.prototype,"visible",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),be=Ge(K.prototype,"navigationPath",[k],{configurable:true,enumerable:true,writable:true,initializer:null}),fe=Ge(K.prototype,"filter",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),ve=Ge(K.prototype,"measures",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),Pe=Ge(K.prototype,"_applyIdToContent",[L],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),Ae=Ge(K.prototype,"variantManagement",[U],{configurable:true,enumerable:true,writable:true,initializer:null}),ye=Ge(K.prototype,"variantSelected",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),Ce=Ge(K.prototype,"variantSaved",[W],{configurable:true,enumerable:true,writable:true,initializer:null}),xe=Ge(K.prototype,"actions",[q],{configurable:true,enumerable:true,writable:true,initializer:null}),Me=Ge(K.prototype,"selectionChange",[G],{configurable:true,enumerable:true,writable:true,initializer:null}),$e=Ge(K.prototype,"stateChange",[X],{configurable:true,enumerable:true,writable:true,initializer:null}),K))||J);Ie=Qe;return Ie},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartAPI-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/helpers/ClassSupport", "sap/fe/macros/chart/ChartRuntime", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/filter/FilterUtils", "sap/fe/macros/MacroAPI", "../insights/CommonInsightsHelper", "../insights/InsightsCardHelper"], function (Log, merge, ClassSupport, ChartRuntime, ChartUtils, FilterUtils, MacroAPI, CommonInsightsHelper, InsightsCardHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
  var showInsightsCardPreview = InsightsCardHelper.showInsightsCardPreview;
  var IntegrationCardType = InsightsCardHelper.IntegrationCardType;
  var genericErrorMessageForInsightsCard = InsightsCardHelper.genericErrorMessageForInsightsCard;
  var createInsightsParams = CommonInsightsHelper.createInsightsParams;
  var xmlEventHandler = ClassSupport.xmlEventHandler;
  var property = ClassSupport.property;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Building block used to create a chart based on the metadata provided by OData V4.
   * <br>
   * Usually, a contextPath and metaPath is expected.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Chart id="Mychart" contextPath="/RootEntity" metaPath="@com.sap.vocabularies.UI.v1.Chart" /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.Chart
   * @public
   */
  let ChartAPI = (_dec = defineUI5Class("sap.fe.macros.chart.ChartAPI", {
    returnTypes: ["sap.fe.macros.MacroAPI"]
  }), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "string",
    required: true,
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"],
    expectedAnnotations: ["com.sap.vocabularies.UI.v1.Chart"]
  }), _dec4 = property({
    type: "string",
    required: true,
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"],
    expectedAnnotations: []
  }), _dec5 = property({
    type: "string"
  }), _dec6 = property({
    type: "boolean",
    defaultValue: true
  }), _dec7 = property({
    type: "string",
    defaultValue: "Multiple",
    allowedValues: ["None", "Single", "Multiple"]
  }), _dec8 = property({
    type: "string"
  }), _dec9 = property({
    type: "string",
    allowedValues: ["Control"]
  }), _dec10 = property({
    type: "boolean | string",
    defaultValue: true
  }), _dec11 = property({
    type: "string[]",
    defaultValue: []
  }), _dec12 = aggregation({
    type: "sap.fe.macros.chart.Action",
    multiple: true
  }), _dec13 = event(), _dec14 = event(), _dec15 = event(), _dec16 = xmlEventHandler(), _dec17 = xmlEventHandler(), _dec18 = xmlEventHandler(), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(ChartAPI, _MacroAPI);
    function ChartAPI() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MacroAPI.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "header", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerVisible", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionMode", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBar", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantManagement", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "personalization", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "prevDrillStack", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actions", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionChange", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalDataRequested", _descriptor14, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = ChartAPI.prototype;
    /**
     * Gets contexts from the chart that have been selected by the user.
     *
     * @returns Contexts of the rows selected by the user
     * @public
     */
    _proto.getSelectedContexts = function getSelectedContexts() {
      var _this$content, _this$content$getBind;
      return ((_this$content = this.content) === null || _this$content === void 0 ? void 0 : (_this$content$getBind = _this$content.getBindingContext("internal")) === null || _this$content$getBind === void 0 ? void 0 : _this$content$getBind.getProperty("selectedContexts")) || [];
    }

    /**
     * An event triggered when chart selections are changed. The event contains information about the data selected/deselected and the Boolean flag that indicates whether data is selected or deselected.
     *
     * @public
     */;
    _proto.onAfterRendering = function onAfterRendering() {
      const view = this.getController().getView();
      const internalModelContext = view.getBindingContext("internal");
      const chart = this.getContent();
      const showMessageStrip = {};
      const sChartEntityPath = chart.data("entitySet"),
        sCacheKey = `${sChartEntityPath}Chart`,
        oBindingContext = view.getBindingContext();
      showMessageStrip[sCacheKey] = chart.data("draftSupported") === "true" && !!oBindingContext && !oBindingContext.getObject("IsActiveEntity");
      internalModelContext.setProperty("controls/showMessageStrip", showMessageStrip);
    };
    _proto.refreshNotApplicableFields = function refreshNotApplicableFields(oFilterControl) {
      const oChart = this.getContent();
      return FilterUtils.getNotApplicableFilters(oFilterControl, oChart);
    };
    _proto.handleSelectionChange = function handleSelectionChange(oEvent) {
      const aData = oEvent.getParameter("data");
      const bSelected = oEvent.getParameter("name") === "selectData";
      ChartRuntime.fnUpdateChart(oEvent);
      this.fireSelectionChange(merge({}, {
        data: aData,
        selected: bSelected
      }));
    };
    _proto.onInternalDataRequested = function onInternalDataRequested() {
      this.fireEvent("internalDataRequested");
    };
    _proto.hasSelections = function hasSelections() {
      // consider chart selections in the current drill stack or on any further drill downs
      const mdcChart = this.content;
      if (mdcChart) {
        try {
          const chart = mdcChart.getControlDelegate().getInnerChart(mdcChart);
          if (chart) {
            const aDimensions = ChartUtils.getDimensionsFromDrillStack(chart);
            const bIsDrillDown = aDimensions.length > this.prevDrillStack.length;
            const bIsDrillUp = aDimensions.length < this.prevDrillStack.length;
            const bNoChange = aDimensions.toString() === this.prevDrillStack.toString();
            let aFilters;
            if (bIsDrillUp && aDimensions.length === 1) {
              // drilling up to level0 would clear all selections
              aFilters = ChartUtils.getChartSelections(mdcChart, true);
            } else {
              // apply filters of selections of previous drillstack when drilling up/down
              // to the chart and table
              aFilters = ChartUtils.getChartSelections(mdcChart);
            }
            if (bIsDrillDown || bIsDrillUp) {
              // update the drillstack on a drill up/ drill down
              this.prevDrillStack = aDimensions;
              return aFilters.length > 0;
            } else if (bNoChange) {
              // bNoChange is true when chart is selected
              return aFilters.length > 0;
            }
          }
        } catch (err) {
          Log.error(`Error while checking for selections in Chart: ${err}`);
        }
      }
      return false;
    }

    /**
     * Event handler to create insightsParams and call the API to show insights card preview for charts.
     *
     * @returns Undefined if card preview is rendered.
     */;
    _proto.onAddCardToInsightsPressed = async function onAddCardToInsightsPressed() {
      try {
        const insightsParams = await createInsightsParams(this, IntegrationCardType.analytical);
        if (insightsParams) {
          showInsightsCardPreview(insightsParams);
          return;
        }
      } catch (e) {
        genericErrorMessageForInsightsCard(this.content);
        Log.error(e);
      }
    };
    return ChartAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "headerVisible", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "selectionMode", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "filterBar", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "variantManagement", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "personalization", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "prevDrillStack", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "actions", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "selectionChange", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "internalDataRequested", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "handleSelectionChange", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "handleSelectionChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onInternalDataRequested", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "onInternalDataRequested"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAddCardToInsightsPressed", [_dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "onAddCardToInsightsPressed"), _class2.prototype)), _class2)) || _class);
  return ChartAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartAPI", ["sap/base/Log","sap/base/util/merge","sap/fe/core/helpers/ClassSupport","sap/fe/macros/chart/ChartRuntime","sap/fe/macros/chart/ChartUtils","sap/fe/macros/filter/FilterUtils","sap/fe/macros/MacroAPI","../insights/CommonInsightsHelper","../insights/InsightsCardHelper"],function(e,t,r,n,i,a,o,l,s){"use strict";var u,c,p,g,f,d,h,b,y,v,m,C,w,P,S,z,D,I,O,A,x,E,j,M,k,R,T,V,q,B,F,N,U,_;var H=s.showInsightsCardPreview;var $=s.IntegrationCardType;var L=s.genericErrorMessageForInsightsCard;var G=l.createInsightsParams;var J=r.xmlEventHandler;var K=r.property;var Q=r.event;var W=r.defineUI5Class;var X=r.aggregation;function Y(e,t,r,n){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function Z(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function ee(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;te(e,t)}function te(e,t){te=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return te(e,t)}function re(e,t,r,n,i){var a={};Object.keys(n).forEach(function(e){a[e]=n[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},a);if(i&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(i):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function ne(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let ie=(u=W("sap.fe.macros.chart.ChartAPI",{returnTypes:["sap.fe.macros.MacroAPI"]}),c=K({type:"string"}),p=K({type:"string",required:true,expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"],expectedAnnotations:["com.sap.vocabularies.UI.v1.Chart"]}),g=K({type:"string",required:true,expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"],expectedAnnotations:[]}),f=K({type:"string"}),d=K({type:"boolean",defaultValue:true}),h=K({type:"string",defaultValue:"Multiple",allowedValues:["None","Single","Multiple"]}),b=K({type:"string"}),y=K({type:"string",allowedValues:["Control"]}),v=K({type:"boolean | string",defaultValue:true}),m=K({type:"string[]",defaultValue:[]}),C=X({type:"sap.fe.macros.chart.Action",multiple:true}),w=Q(),P=Q(),S=Q(),z=J(),D=J(),I=J(),u(O=(A=function(r){ee(o,r);function o(){var e;for(var t=arguments.length,n=new Array(t),i=0;i<t;i++){n[i]=arguments[i]}e=r.call(this,...n)||this;Y(e,"id",x,Z(e));Y(e,"metaPath",E,Z(e));Y(e,"contextPath",j,Z(e));Y(e,"header",M,Z(e));Y(e,"headerVisible",k,Z(e));Y(e,"selectionMode",R,Z(e));Y(e,"filterBar",T,Z(e));Y(e,"variantManagement",V,Z(e));Y(e,"personalization",q,Z(e));Y(e,"prevDrillStack",B,Z(e));Y(e,"actions",F,Z(e));Y(e,"selectionChange",N,Z(e));Y(e,"stateChange",U,Z(e));Y(e,"internalDataRequested",_,Z(e));return e}var l=o.prototype;l.getSelectedContexts=function e(){var t,r;return((t=this.content)===null||t===void 0?void 0:(r=t.getBindingContext("internal"))===null||r===void 0?void 0:r.getProperty("selectedContexts"))||[]};l.onAfterRendering=function e(){const t=this.getController().getView();const r=t.getBindingContext("internal");const n=this.getContent();const i={};const a=n.data("entitySet"),o=`${a}Chart`,l=t.getBindingContext();i[o]=n.data("draftSupported")==="true"&&!!l&&!l.getObject("IsActiveEntity");r.setProperty("controls/showMessageStrip",i)};l.refreshNotApplicableFields=function e(t){const r=this.getContent();return a.getNotApplicableFilters(t,r)};l.handleSelectionChange=function e(r){const i=r.getParameter("data");const a=r.getParameter("name")==="selectData";n.fnUpdateChart(r);this.fireSelectionChange(t({},{data:i,selected:a}))};l.onInternalDataRequested=function e(){this.fireEvent("internalDataRequested")};l.hasSelections=function t(){const r=this.content;if(r){try{const e=r.getControlDelegate().getInnerChart(r);if(e){const t=i.getDimensionsFromDrillStack(e);const n=t.length>this.prevDrillStack.length;const a=t.length<this.prevDrillStack.length;const o=t.toString()===this.prevDrillStack.toString();let l;if(a&&t.length===1){l=i.getChartSelections(r,true)}else{l=i.getChartSelections(r)}if(n||a){this.prevDrillStack=t;return l.length>0}else if(o){return l.length>0}}}catch(t){e.error(`Error while checking for selections in Chart: ${t}`)}}return false};l.onAddCardToInsightsPressed=async function t(){try{const e=await G(this,$.analytical);if(e){H(e);return}}catch(t){L(this.content);e.error(t)}};return o}(o),x=re(A.prototype,"id",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),E=re(A.prototype,"metaPath",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),j=re(A.prototype,"contextPath",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),M=re(A.prototype,"header",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),k=re(A.prototype,"headerVisible",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),R=re(A.prototype,"selectionMode",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),T=re(A.prototype,"filterBar",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),V=re(A.prototype,"variantManagement",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),q=re(A.prototype,"personalization",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),B=re(A.prototype,"prevDrillStack",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),F=re(A.prototype,"actions",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),N=re(A.prototype,"selectionChange",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),U=re(A.prototype,"stateChange",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),_=re(A.prototype,"internalDataRequested",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),re(A.prototype,"handleSelectionChange",[z],Object.getOwnPropertyDescriptor(A.prototype,"handleSelectionChange"),A.prototype),re(A.prototype,"onInternalDataRequested",[D],Object.getOwnPropertyDescriptor(A.prototype,"onInternalDataRequested"),A.prototype),re(A.prototype,"onAddCardToInsightsPressed",[I],Object.getOwnPropertyDescriptor(A.prototype,"onAddCardToInsightsPressed"),A.prototype),A))||O);return ie},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartDelegate-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/macros/chart/ChartHelper", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/CommonHelper", "sap/fe/macros/DelegateUtil", "sap/fe/macros/filter/FilterUtils", "sap/ui/mdc/library", "sap/ui/mdc/odata/v4/util/DelegateUtil", "sap/ui/mdc/odata/v4/vizChart/ChartDelegate", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "../filterBar/FilterBarDelegate"], function (Log, merge, CommonUtils, MetaModelFunction, ResourceModelHelper, ChartHelper, ChartUtils, CommonHelper, MacrosDelegateUtil, FilterUtils, MDCLib, DelegateUtil, BaseChartDelegate, Filter, FilterOperator, FilterBarDelegate) {
  "use strict";

  var getResourceModel = ResourceModelHelper.getResourceModel;
  var isMultiValueFilterExpression = MetaModelFunction.isMultiValueFilterExpression;
  var getSortRestrictionsInfo = MetaModelFunction.getSortRestrictionsInfo;
  var getFilterRestrictionsInfo = MetaModelFunction.getFilterRestrictionsInfo;
  const ChartItemRoleType = MDCLib.ChartItemRoleType;
  // /**
  //  * Helper class for sap.ui.mdc.Chart.
  //  * <h3><b>Note:</b></h3>
  //  * The class is experimental and the API/behaviour is not finalised
  //  * and hence this should not be used for productive usage.
  //  * Especially this class is not intended to be used for the FE scenario,
  //  * here we shall use sap.fe.macros.ChartDelegate that is especially tailored for V4
  //  * meta model
  //  *
  //  * @author SAP SE
  //  * @private
  //  * @experimental
  //  * @since 1.62
  //  * @alias sap.fe.macros.ChartDelegate
  //  */
  const ChartDelegate = Object.assign({}, BaseChartDelegate);
  BaseChartDelegate.apiVersion = 2;
  ChartDelegate._setChartNoDataText = function (oChart, oBindingInfo) {
    let sNoDataKey = "";
    const oChartFilterInfo = ChartUtils.getAllFilterInfo(oChart),
      suffixResourceKey = oBindingInfo.path.startsWith("/") ? oBindingInfo.path.substr(1) : oBindingInfo.path;
    const _getNoDataTextWithFilters = function () {
      if (oChart.data("multiViews")) {
        return "M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW";
      } else {
        return "T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER";
      }
    };
    if (oChart.getFilter()) {
      if (oChartFilterInfo.search || oChartFilterInfo.filters && oChartFilterInfo.filters.length) {
        sNoDataKey = _getNoDataTextWithFilters();
      } else {
        sNoDataKey = "T_TABLE_AND_CHART_NO_DATA_TEXT";
      }
    } else if (oChartFilterInfo.search || oChartFilterInfo.filters && oChartFilterInfo.filters.length) {
      sNoDataKey = _getNoDataTextWithFilters();
    } else {
      sNoDataKey = "M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT";
    }
    oChart.setNoDataText(getResourceModel(oChart).getText(sNoDataKey, undefined, suffixResourceKey));
  };
  ChartDelegate._handleProperty = function (oMDCChart, mEntitySetAnnotations, mKnownAggregatableProps, mCustomAggregates, aProperties, sCriticality) {
    const oApplySupported = CommonHelper.parseCustomData(oMDCChart.data("applySupported"));
    const sortRestrictionsInfo = getSortRestrictionsInfo(mEntitySetAnnotations);
    const oFilterRestrictions = mEntitySetAnnotations["@Org.OData.Capabilities.V1.FilterRestrictions"];
    const oFilterRestrictionsInfo = getFilterRestrictionsInfo(oFilterRestrictions);
    const oObj = this.getModel().getObject(this.getPath());
    const sKey = this.getModel().getObject(`${this.getPath()}@sapui.name`);
    const oMetaModel = this.getModel();
    const aModes = oMDCChart.getP13nMode();
    checkForNonfilterableEntitySet(oMDCChart, aModes);
    if (oObj && oObj.$kind === "Property") {
      // ignore (as for now) all complex properties
      // not clear if they might be nesting (complex in complex)
      // not clear how they are represented in non-filterable annotation
      // etc.
      if (oObj.$isCollection) {
        //Log.warning("Complex property with type " + oObj.$Type + " has been ignored");
        return;
      }
      const oPropertyAnnotations = oMetaModel.getObject(`${this.getPath()}@`);
      const sPath = oMetaModel.getObject("@sapui.name", oMetaModel.getMetaContext(this.getPath()));
      const aGroupableProperties = oApplySupported && oApplySupported.GroupableProperties;
      const aAggregatableProperties = oApplySupported && oApplySupported.AggregatableProperties;
      let bGroupable = aGroupableProperties ? checkPropertyType(aGroupableProperties, sPath) : false;
      let bAggregatable = aAggregatableProperties ? checkPropertyType(aAggregatableProperties, sPath) : false;
      if (!aGroupableProperties || aGroupableProperties && !aGroupableProperties.length) {
        bGroupable = oPropertyAnnotations["@Org.OData.Aggregation.V1.Groupable"];
      }
      if (!aAggregatableProperties || aAggregatableProperties && !aAggregatableProperties.length) {
        bAggregatable = oPropertyAnnotations["@Org.OData.Aggregation.V1.Aggregatable"];
      }

      //Right now: skip them, since we can't create a chart from it
      if (!bGroupable && !bAggregatable) {
        return;
      }
      checkPropertyIsBothGroupableAndAggregatable(mCustomAggregates, sKey, bGroupable, bAggregatable);
      if (bAggregatable) {
        const aAggregateProperties = ChartDelegate._createPropertyInfosForAggregatable(oMDCChart, sKey, oPropertyAnnotations, oFilterRestrictionsInfo, sortRestrictionsInfo, mKnownAggregatableProps, mCustomAggregates);
        aAggregateProperties.forEach(function (oAggregateProperty) {
          aProperties.push(oAggregateProperty);
        });
        //Add transformation aggregated properties to chart properties
        if (aModes && aModes.includes("Filter")) {
          const aKnownAggregatableProps = Object.keys(mKnownAggregatableProps);
          const aGroupablePropertiesValues = aGroupableProperties.map(oProperty => oProperty.$PropertyPath);
          aKnownAggregatableProps.forEach(sProperty => {
            // Add transformation aggregated property to chart so that in the filter dropdown it's visible
            // Also mark visibility false as this property should not come up in under chart section of personalization dialog
            if (!aGroupablePropertiesValues.includes(sProperty)) {
              aProperties = addPropertyToChart(aProperties, sKey, oPropertyAnnotations, oFilterRestrictionsInfo, sortRestrictionsInfo, oMDCChart, sCriticality, oObj, false, true, undefined, true);
            }
          });
        }
      }
      if (bGroupable) {
        const sName = sKey || "",
          sTextProperty = oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"] ? oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"].$Path : null;
        let bIsNavigationText = false;
        if (sName && sName.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Property: ${sName} from an association cannot be used`);
          return;
        }
        if (sTextProperty && sTextProperty.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Text Property: ${sTextProperty} from an association cannot be used`);
          bIsNavigationText = true;
        }
        aProperties = addPropertyToChart(aProperties, sKey, oPropertyAnnotations, oFilterRestrictionsInfo, sortRestrictionsInfo, oMDCChart, sCriticality, oObj, true, false, bIsNavigationText);
      }
    }
  };

  // create properties for chart
  function addPropertyToChart(aProperties, sKey, oPropertyAnnotations, oFilterRestrictionsInfo, sortRestrictionsInfo, oMDCChart, sCriticality, oObj, bIsGroupable, bIsAggregatable, bIsNavigationText, bIsHidden) {
    aProperties.push({
      name: "_fe_groupable_" + sKey,
      propertyPath: sKey,
      label: oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Label"] || sKey,
      sortable: ChartDelegate._getSortable(oMDCChart, sortRestrictionsInfo.propertyInfo[sKey], false),
      filterable: oFilterRestrictionsInfo[sKey] ? oFilterRestrictionsInfo[sKey].filterable : true,
      groupable: bIsGroupable,
      aggregatable: bIsAggregatable,
      maxConditions: isMultiValueFilterExpression(oFilterRestrictionsInfo.propertyInfo[sKey]) ? -1 : 1,
      sortKey: sKey,
      path: sKey,
      role: ChartItemRoleType.category,
      //standard, normally this should be interpreted from UI.Chart annotation
      criticality: sCriticality,
      //To be implemented by FE
      typeConfig: oObj.typeConfig,
      visible: bIsHidden ? !bIsHidden : true,
      textProperty: !bIsNavigationText && oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"] ? oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"].$Path : null,
      //To be implemented by FE
      textFormatter: oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]
    });
    return aProperties;
  }

  // If entityset is non filterable,then from p13n modes remove Filter so that on UI filter option doesn't show up
  function checkForNonfilterableEntitySet(oMDCChart, aModes) {
    var _oMDCChart$getModel, _oMDCChart$getModel$g, _oMDCChart$getModel$g2;
    const bEntitySetFilerable = oMDCChart === null || oMDCChart === void 0 ? void 0 : (_oMDCChart$getModel = oMDCChart.getModel()) === null || _oMDCChart$getModel === void 0 ? void 0 : (_oMDCChart$getModel$g = _oMDCChart$getModel.getMetaModel()) === null || _oMDCChart$getModel$g === void 0 ? void 0 : (_oMDCChart$getModel$g2 = _oMDCChart$getModel$g.getObject(`${oMDCChart.data("targetCollectionPath")}@Org.OData.Capabilities.V1.FilterRestrictions`)) === null || _oMDCChart$getModel$g2 === void 0 ? void 0 : _oMDCChart$getModel$g2.Filterable;
    if (bEntitySetFilerable !== undefined && !bEntitySetFilerable) {
      aModes = aModes.filter(item => item !== "Filter");
      oMDCChart.setP13nMode(aModes);
    }
  }

  //  check if Groupable /Aggregatable property is present or not
  function checkPropertyType(aProperties, sPath) {
    if (aProperties.length) {
      for (const element of aProperties) {
        var _element$Property;
        if ((element === null || element === void 0 ? void 0 : element.$PropertyPath) === sPath || (element === null || element === void 0 ? void 0 : (_element$Property = element.Property) === null || _element$Property === void 0 ? void 0 : _element$Property.$PropertyPath) === sPath) {
          return true;
        }
      }
    }
  }

  //If same custom property is configured as groupable and aggregatable throw an error
  function checkPropertyIsBothGroupableAndAggregatable(mCustomAggregates, sKey, bGroupable, bAggregatable) {
    const customProperties = Object.keys(mCustomAggregates);
    if (bGroupable && bAggregatable && customProperties.includes(sKey)) {
      throw new Error("Same property can not be configured as groupable and aggregatable");
    }
  }
  ChartDelegate.formatText = function (oValue1, oValue2) {
    const oTextArrangementAnnotation = this.textFormatter;
    if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst") {
      return `${oValue2} (${oValue1})`;
    } else if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast") {
      return `${oValue1} (${oValue2})`;
    } else if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly") {
      return oValue2;
    }
    return oValue2 ? oValue2 : oValue1;
  };
  ChartDelegate.updateBindingInfo = function (oChart, oBindingInfo) {
    ChartDelegate._setChartNoDataText(oChart, oBindingInfo);
    const oFilter = sap.ui.getCore().byId(oChart.getFilter());
    const mConditions = oChart.getConditions();
    if (!oBindingInfo) {
      oBindingInfo = {};
    }
    if (!oBindingInfo.parameters) {
      oBindingInfo.parameters = {};
    }
    if (oFilter) {
      // Search
      const oInfo = FilterUtils.getFilterInfo(oFilter, {});
      const oApplySupported = CommonHelper.parseCustomData(oChart.data("applySupported"));
      if (oApplySupported && oApplySupported.enableSearch && oInfo.search) {
        oBindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(oInfo.search);
      } else if (oBindingInfo.parameters.$search) {
        delete oBindingInfo.parameters.$search;
      }
    }
    const sParameterPath = mConditions ? DelegateUtil.getParametersInfo(oFilter, mConditions) : null;
    if (sParameterPath) {
      oBindingInfo.path = sParameterPath;
    }
    const oFilterInfo = ChartUtils.getAllFilterInfo(oChart);

    // remove prefixes so that entityset will match with the property names with these field
    if (oFilterInfo.filters) {
      oFilterInfo.filters = CommonUtils.getChartPropertiesWithoutPrefixes(oFilterInfo.filters);
    }
    oBindingInfo.filters = oFilterInfo.filters.length > 0 ? new Filter({
      filters: oFilterInfo.filters,
      and: true
    }) : null;
    oBindingInfo.sorter = this.getSorters(oChart);
    ChartDelegate._checkAndAddDraftFilter(oChart, oBindingInfo);
  };
  ChartDelegate.fetchProperties = function (oMDCChart) {
    const oModel = this._getModel(oMDCChart);
    let pCreatePropertyInfos;
    if (!oModel) {
      pCreatePropertyInfos = new Promise(resolve => {
        oMDCChart.attachModelContextChange({
          resolver: resolve
        }, onModelContextChange, this);
      }).then(oRetrievedModel => {
        return this._createPropertyInfos(oMDCChart, oRetrievedModel);
      });
    } else {
      pCreatePropertyInfos = this._createPropertyInfos(oMDCChart, oModel);
    }
    return pCreatePropertyInfos.then(function (aProperties) {
      if (oMDCChart.data) {
        oMDCChart.data("$mdcChartPropertyInfo", aProperties);
        // store the properties to fetch during p13n calculation
        MacrosDelegateUtil.setCachedProperties(oMDCChart, aProperties);
      }
      return aProperties;
    });
  };
  function onModelContextChange(oEvent, oData) {
    const oMDCChart = oEvent.getSource();
    const oModel = this._getModel(oMDCChart);
    if (oModel) {
      oMDCChart.detachModelContextChange(onModelContextChange);
      oData.resolver(oModel);
    }
  }
  ChartDelegate._createPropertyInfos = async function (oMDCChart, oModel) {
    const sEntitySetPath = `/${oMDCChart.data("entitySet")}`;
    const oMetaModel = oModel.getMetaModel();
    const aResults = await Promise.all([oMetaModel.requestObject(`${sEntitySetPath}/`), oMetaModel.requestObject(`${sEntitySetPath}@`)]);
    const aProperties = [];
    let oEntityType = aResults[0];
    const mEntitySetAnnotations = aResults[1];
    oEntityType = allowedPropertiesForFilterOption(oEntityType, oMDCChart);
    const mCustomAggregates = CommonHelper.parseCustomData(oMDCChart.data("customAgg"));
    getCustomAggregate(mCustomAggregates, oMDCChart);
    let sAnno;
    const aPropertyPromise = [];
    for (const sAnnoKey in mEntitySetAnnotations) {
      if (sAnnoKey.startsWith("@Org.OData.Aggregation.V1.CustomAggregate")) {
        sAnno = sAnnoKey.replace("@Org.OData.Aggregation.V1.CustomAggregate#", "");
        const aAnno = sAnno.split("@");
        if (aAnno.length == 2 && aAnno[1] == "com.sap.vocabularies.Common.v1.Label") {
          mCustomAggregates[aAnno[0]] = mEntitySetAnnotations[sAnnoKey];
        }
      }
    }
    const mTypeAggregatableProps = CommonHelper.parseCustomData(oMDCChart.data("transAgg"));
    const mKnownAggregatableProps = {};
    for (const sAggregatable in mTypeAggregatableProps) {
      const sPropKey = mTypeAggregatableProps[sAggregatable].propertyPath;
      mKnownAggregatableProps[sPropKey] = mKnownAggregatableProps[sPropKey] || {};
      mKnownAggregatableProps[sPropKey][mTypeAggregatableProps[sAggregatable].aggregationMethod] = {
        name: mTypeAggregatableProps[sAggregatable].name,
        label: mTypeAggregatableProps[sAggregatable].label
      };
    }
    for (const sKey in oEntityType) {
      if (sKey.indexOf("$") !== 0) {
        aPropertyPromise.push(ChartHelper.fetchCriticality(oMetaModel, oMetaModel.createBindingContext(`${sEntitySetPath}/${sKey}`)).then(ChartDelegate._handleProperty.bind(oMetaModel.getMetaContext(`${sEntitySetPath}/${sKey}`), oMDCChart, mEntitySetAnnotations, mKnownAggregatableProps, mCustomAggregates, aProperties)));
      }
    }
    await Promise.all(aPropertyPromise);
    return aProperties;
  };

  // for every property of chart, configure the typeConfig which we would like to see in the filter dropdrown list
  function allowedPropertiesForFilterOption(oEntityType, oMDCChart) {
    for (const i in oEntityType) {
      if (i == "$Key" || i == "$kind" || i == "SAP_Message") {
        continue;
      } else if (oEntityType[i]["$kind"] == "Property") {
        oEntityType[i]["typeConfig"] = oMDCChart.getTypeUtil().getTypeConfig(oEntityType[i].$Type);
      } else {
        oEntityType[i]["typeConfig"] = null;
      }
    }
    return oEntityType;
  }
  function getCustomAggregate(mCustomAggregates, oMDCChart) {
    const aDimensions = [],
      aMeasures = [];
    if (mCustomAggregates && Object.keys(mCustomAggregates).length >= 1) {
      const aChartItems = oMDCChart.getItems();
      for (const key in aChartItems) {
        if (aChartItems[key].getType() === "groupable") {
          aDimensions.push(ChartDelegate.getInternalChartNameFromPropertyNameAndKind(aChartItems[key].getName(), "groupable"));
        } else if (aChartItems[key].getType() === "aggregatable") {
          aMeasures.push(ChartDelegate.getInternalChartNameFromPropertyNameAndKind(aChartItems[key].getName(), "aggregatable"));
        }
      }
      if (aMeasures.filter(function (val) {
        return aDimensions.indexOf(val) != -1;
      }).length >= 1) {
        Log.error("Dimension and Measure has the sameProperty Configured");
      }
    }
  }
  ChartDelegate._createPropertyInfosForAggregatable = function (oMDCChart, sKey, oPropertyAnnotations, oFilterRestrictionsInfo, sortRestrictionsInfo, mKnownAggregatableProps, mCustomAggregates) {
    const aAggregateProperties = [];
    if (Object.keys(mKnownAggregatableProps).indexOf(sKey) > -1) {
      for (const sAggregatable in mKnownAggregatableProps[sKey]) {
        aAggregateProperties.push({
          name: "_fe_aggregatable_" + mKnownAggregatableProps[sKey][sAggregatable].name,
          propertyPath: sKey,
          label: mKnownAggregatableProps[sKey][sAggregatable].label || `${oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Label"]} (${sAggregatable})` || `${sKey} (${sAggregatable})`,
          sortable: sortRestrictionsInfo.propertyInfo[sKey] ? sortRestrictionsInfo.propertyInfo[sKey].sortable : true,
          filterable: false,
          groupable: false,
          aggregatable: true,
          path: sKey,
          aggregationMethod: sAggregatable,
          maxConditions: isMultiValueFilterExpression(oFilterRestrictionsInfo.propertyInfo[sKey]) ? -1 : 1,
          role: ChartItemRoleType.axis1,
          datapoint: null //To be implemented by FE
        });
      }
    }

    if (Object.keys(mCustomAggregates).indexOf(sKey) > -1) {
      for (const sCustom in mCustomAggregates) {
        if (sCustom === sKey) {
          const oItem = merge({}, mCustomAggregates[sCustom], {
            name: "_fe_aggregatable_" + sCustom,
            groupable: false,
            aggregatable: true,
            filterable: false,
            role: ChartItemRoleType.axis1,
            propertyPath: sCustom,
            datapoint: null //To be implemented by FE
          });

          aAggregateProperties.push(oItem);
          break;
        }
      }
    }
    return aAggregateProperties;
  };
  ChartDelegate.rebind = function (oMDCChart, oBindingInfo) {
    const sSearch = oBindingInfo.parameters.$search;
    if (sSearch) {
      delete oBindingInfo.parameters.$search;
    }
    BaseChartDelegate.rebind(oMDCChart, oBindingInfo);
    if (sSearch) {
      const oInnerChart = oMDCChart.getControlDelegate().getInnerChart(oMDCChart),
        oChartBinding = oInnerChart && oInnerChart.getBinding("data");

      // Temporary workaround until this is fixed in MDCChart / UI5 Chart
      // In order to avoid having 2 OData requests, we need to suspend the binding before setting some aggregation properties
      // and resume it once the chart has added other aggregation properties (in onBeforeRendering)
      oChartBinding.suspend();
      oChartBinding.setAggregation({
        search: sSearch
      });
      const oInnerChartDelegate = {
        onBeforeRendering: function () {
          oChartBinding.resume();
          oInnerChart.removeEventDelegate(oInnerChartDelegate);
        }
      };
      oInnerChart.addEventDelegate(oInnerChartDelegate);
    }
    oMDCChart.fireEvent("bindingUpdated");
  };
  ChartDelegate._setChart = function (oMDCChart, oInnerChart) {
    const oChartAPI = oMDCChart.getParent();
    oInnerChart.setVizProperties(oMDCChart.data("vizProperties"));
    oInnerChart.detachSelectData(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.detachDeselectData(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.detachDrilledUp(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.attachSelectData(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.attachDeselectData(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.attachDrilledUp(oChartAPI.handleSelectionChange.bind(oChartAPI));
    oInnerChart.setSelectionMode(oMDCChart.getPayload().selectionMode.toUpperCase());
    BaseChartDelegate._setChart(oMDCChart, oInnerChart);
  };
  ChartDelegate._getBindingInfo = function (oMDCChart) {
    if (this._getBindingInfoFromState(oMDCChart)) {
      return this._getBindingInfoFromState(oMDCChart);
    }
    const oMetadataInfo = oMDCChart.getDelegate().payload;
    const oMetaModel = oMDCChart.getModel() && oMDCChart.getModel().getMetaModel();
    const sTargetCollectionPath = oMDCChart.data("targetCollectionPath");
    const sEntitySetPath = (oMetaModel.getObject(`${sTargetCollectionPath}/$kind`) !== "NavigationProperty" ? "/" : "") + oMetadataInfo.contextPath;
    const oParams = merge({}, oMetadataInfo.parameters, {
      entitySet: oMDCChart.data("entitySet")
    });
    return {
      path: sEntitySetPath,
      events: {
        dataRequested: oMDCChart.getParent().onInternalDataRequested.bind(oMDCChart.getParent())
      },
      parameters: oParams
    };
  };
  ChartDelegate.removeItemFromInnerChart = function (oMDCChart, oMDCChartItem) {
    BaseChartDelegate.removeItemFromInnerChart.call(this, oMDCChart, oMDCChartItem);
    if (oMDCChartItem.getType() === "groupable") {
      const oInnerChart = this.getInnerChart(oMDCChart);
      oInnerChart.fireDeselectData();
    }
  };
  ChartDelegate._getSortable = function (oMDCChart, sortRestrictionsProperty, bIsTransAggregate) {
    if (bIsTransAggregate) {
      if (oMDCChart.data("draftSupported") === "true") {
        return false;
      } else {
        return sortRestrictionsProperty ? sortRestrictionsProperty.sortable : true;
      }
    }
    return sortRestrictionsProperty ? sortRestrictionsProperty.sortable : true;
  };
  ChartDelegate._checkAndAddDraftFilter = function (oChart, oBindingInfo) {
    if (oChart.data("draftSupported") === "true") {
      if (!oBindingInfo) {
        oBindingInfo = {};
      }
      if (!oBindingInfo.filters) {
        oBindingInfo.filters = [];
        oBindingInfo.filters.push(new Filter("IsActiveEntity", FilterOperator.EQ, true));
      } else {
        var _oBindingInfo$filters, _oBindingInfo$filters2;
        (_oBindingInfo$filters = oBindingInfo.filters) === null || _oBindingInfo$filters === void 0 ? void 0 : (_oBindingInfo$filters2 = _oBindingInfo$filters.aFilters) === null || _oBindingInfo$filters2 === void 0 ? void 0 : _oBindingInfo$filters2.push(new Filter("IsActiveEntity", FilterOperator.EQ, true));
      }
    }
  };

  /**
   * This function returns an ID which should be used in the internal chart for the measure or dimension.
   * For standard cases, this is just the ID of the property.
   * If it is necessary to use another ID internally inside the chart (e.g. on duplicate property IDs) this method can be overwritten.
   * In this case, <code>getPropertyFromNameAndKind</code> needs to be overwritten as well.
   *
   * @param {string} name ID of the property
   * @param {string} kind Type of the property (measure or dimension)
   * @returns {string} Internal ID for the sap.chart.Chart
   */
  ChartDelegate.getInternalChartNameFromPropertyNameAndKind = function (name, kind) {
    return name.replace("_fe_" + kind + "_", "");
  };

  /**
   * This maps an id of an internal chart dimension or measure & type of a property to its corresponding property entry.
   *
   * @param {string} name ID of internal chart measure or dimension
   * @param {string} kind The kind of property that is used
   * @param {sap.ui.mdc.Chart} mdcChart Reference to the MDC_Chart
   * @returns {object} PropertyInfo object
   */
  ChartDelegate.getPropertyFromNameAndKind = function (name, kind, mdcChart) {
    return mdcChart.getPropertyHelper().getProperty("_fe_" + kind + "_" + name);
  };

  /**
   * Provide the chart's filter delegate to provide basic filter functionality such as adding FilterFields.
   *
   * @returns Object for the personalization of the chart filter
   */
  ChartDelegate.getFilterDelegate = function () {
    return Object.assign({
      apiVersion: 2
    }, FilterBarDelegate, {
      addItem: function (oParentControl, sPropertyInfoName) {
        const prop = ChartDelegate.getInternalChartNameFromPropertyNameAndKind(sPropertyInfoName, "groupable");
        return FilterBarDelegate.addItem(oParentControl, prop).then(oFilterItem => {
          oFilterItem === null || oFilterItem === void 0 ? void 0 : oFilterItem.bindProperty("conditions", {
            path: "$filters>/conditions/" + sPropertyInfoName
          });
          return oFilterItem;
        });
      }
    });
  };
  return ChartDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartDelegate", ["sap/base/Log","sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ResourceModelHelper","sap/fe/macros/chart/ChartHelper","sap/fe/macros/chart/ChartUtils","sap/fe/macros/CommonHelper","sap/fe/macros/DelegateUtil","sap/fe/macros/filter/FilterUtils","sap/ui/mdc/library","sap/ui/mdc/odata/v4/util/DelegateUtil","sap/ui/mdc/odata/v4/vizChart/ChartDelegate","sap/ui/model/Filter","sap/ui/model/FilterOperator","../filterBar/FilterBarDelegate"],function(e,t,r,a,n,o,i,s,l,c,g,f,p,u,d,h){"use strict";var m=n.getResourceModel;var b=a.isMultiValueFilterExpression;var y=a.getSortRestrictionsInfo;var C=a.getFilterRestrictionsInfo;const v=g.ChartItemRoleType;const _=Object.assign({},p);p.apiVersion=2;_._setChartNoDataText=function(e,t){let r="";const a=i.getAllFilterInfo(e),n=t.path.startsWith("/")?t.path.substr(1):t.path;const o=function(){if(e.data("multiViews")){return"M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW"}else{return"T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER"}};if(e.getFilter()){if(a.search||a.filters&&a.filters.length){r=o()}else{r="T_TABLE_AND_CHART_NO_DATA_TEXT"}}else if(a.search||a.filters&&a.filters.length){r=o()}else{r="M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT"}e.setNoDataText(m(e).getText(r,undefined,n))};_._handleProperty=function(t,r,a,n,o,i){const l=s.parseCustomData(t.data("applySupported"));const c=y(r);const g=r["@Org.OData.Capabilities.V1.FilterRestrictions"];const f=C(g);const p=this.getModel().getObject(this.getPath());const u=this.getModel().getObject(`${this.getPath()}@sapui.name`);const d=this.getModel();const h=t.getP13nMode();T(t,h);if(p&&p.$kind==="Property"){if(p.$isCollection){return}const r=d.getObject(`${this.getPath()}@`);const s=d.getObject("@sapui.name",d.getMetaContext(this.getPath()));const g=l&&l.GroupableProperties;const m=l&&l.AggregatableProperties;let b=g?A(g,s):false;let y=m?A(m,s):false;if(!g||g&&!g.length){b=r["@Org.OData.Aggregation.V1.Groupable"]}if(!m||m&&!m.length){y=r["@Org.OData.Aggregation.V1.Aggregatable"]}if(!b&&!y){return}I(n,u,b,y);if(y){const e=_._createPropertyInfosForAggregatable(t,u,r,f,c,a,n);e.forEach(function(e){o.push(e)});if(h&&h.includes("Filter")){const e=Object.keys(a);const n=g.map(e=>e.$PropertyPath);e.forEach(e=>{if(!n.includes(e)){o=P(o,u,r,f,c,t,i,p,false,true,undefined,true)}})}}if(b){const a=u||"",n=r["@com.sap.vocabularies.Common.v1.Text"]?r["@com.sap.vocabularies.Common.v1.Text"].$Path:null;let s=false;if(a&&a.indexOf("/")>-1){e.error(`$expand is not yet supported. Property: ${a} from an association cannot be used`);return}if(n&&n.indexOf("/")>-1){e.error(`$expand is not yet supported. Text Property: ${n} from an association cannot be used`);s=true}o=P(o,u,r,f,c,t,i,p,true,false,s)}}};function P(e,t,r,a,n,o,i,s,l,c,g,f){e.push({name:"_fe_groupable_"+t,propertyPath:t,label:r["@com.sap.vocabularies.Common.v1.Label"]||t,sortable:_._getSortable(o,n.propertyInfo[t],false),filterable:a[t]?a[t].filterable:true,groupable:l,aggregatable:c,maxConditions:b(a.propertyInfo[t])?-1:1,sortKey:t,path:t,role:v.category,criticality:i,typeConfig:s.typeConfig,visible:f?!f:true,textProperty:!g&&r["@com.sap.vocabularies.Common.v1.Text"]?r["@com.sap.vocabularies.Common.v1.Text"].$Path:null,textFormatter:r["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]});return e}function T(e,t){var r,a,n;const o=e===null||e===void 0?void 0:(r=e.getModel())===null||r===void 0?void 0:(a=r.getMetaModel())===null||a===void 0?void 0:(n=a.getObject(`${e.data("targetCollectionPath")}@Org.OData.Capabilities.V1.FilterRestrictions`))===null||n===void 0?void 0:n.Filterable;if(o!==undefined&&!o){t=t.filter(e=>e!=="Filter");e.setP13nMode(t)}}function A(e,t){if(e.length){for(const a of e){var r;if((a===null||a===void 0?void 0:a.$PropertyPath)===t||(a===null||a===void 0?void 0:(r=a.Property)===null||r===void 0?void 0:r.$PropertyPath)===t){return true}}}}function I(e,t,r,a){const n=Object.keys(e);if(r&&a&&n.includes(t)){throw new Error("Same property can not be configured as groupable and aggregatable")}}_.formatText=function(e,t){const r=this.textFormatter;if(r.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextFirst"){return`${t} (${e})`}else if(r.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextLast"){return`${e} (${t})`}else if(r.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly"){return t}return t?t:e};_.updateBindingInfo=function(e,t){_._setChartNoDataText(e,t);const a=sap.ui.getCore().byId(e.getFilter());const n=e.getConditions();if(!t){t={}}if(!t.parameters){t.parameters={}}if(a){const n=c.getFilterInfo(a,{});const o=s.parseCustomData(e.data("applySupported"));if(o&&o.enableSearch&&n.search){t.parameters.$search=r.normalizeSearchTerm(n.search)}else if(t.parameters.$search){delete t.parameters.$search}}const o=n?f.getParametersInfo(a,n):null;if(o){t.path=o}const l=i.getAllFilterInfo(e);if(l.filters){l.filters=r.getChartPropertiesWithoutPrefixes(l.filters)}t.filters=l.filters.length>0?new u({filters:l.filters,and:true}):null;t.sorter=this.getSorters(e);_._checkAndAddDraftFilter(e,t)};_.fetchProperties=function(e){const t=this._getModel(e);let r;if(!t){r=new Promise(t=>{e.attachModelContextChange({resolver:t},$,this)}).then(t=>this._createPropertyInfos(e,t))}else{r=this._createPropertyInfos(e,t)}return r.then(function(t){if(e.data){e.data("$mdcChartPropertyInfo",t);l.setCachedProperties(e,t)}return t})};function $(e,t){const r=e.getSource();const a=this._getModel(r);if(a){r.detachModelContextChange($);t.resolver(a)}}_._createPropertyInfos=async function(e,t){const r=`/${e.data("entitySet")}`;const a=t.getMetaModel();const n=await Promise.all([a.requestObject(`${r}/`),a.requestObject(`${r}@`)]);const i=[];let l=n[0];const c=n[1];l=D(l,e);const g=s.parseCustomData(e.data("customAgg"));x(g,e);let f;const p=[];for(const e in c){if(e.startsWith("@Org.OData.Aggregation.V1.CustomAggregate")){f=e.replace("@Org.OData.Aggregation.V1.CustomAggregate#","");const t=f.split("@");if(t.length==2&&t[1]=="com.sap.vocabularies.Common.v1.Label"){g[t[0]]=c[e]}}}const u=s.parseCustomData(e.data("transAgg"));const d={};for(const e in u){const t=u[e].propertyPath;d[t]=d[t]||{};d[t][u[e].aggregationMethod]={name:u[e].name,label:u[e].label}}for(const t in l){if(t.indexOf("$")!==0){p.push(o.fetchCriticality(a,a.createBindingContext(`${r}/${t}`)).then(_._handleProperty.bind(a.getMetaContext(`${r}/${t}`),e,c,d,g,i)))}}await Promise.all(p);return i};function D(e,t){for(const r in e){if(r=="$Key"||r=="$kind"||r=="SAP_Message"){continue}else if(e[r]["$kind"]=="Property"){e[r]["typeConfig"]=t.getTypeUtil().getTypeConfig(e[r].$Type)}else{e[r]["typeConfig"]=null}}return e}function x(t,r){const a=[],n=[];if(t&&Object.keys(t).length>=1){const t=r.getItems();for(const e in t){if(t[e].getType()==="groupable"){a.push(_.getInternalChartNameFromPropertyNameAndKind(t[e].getName(),"groupable"))}else if(t[e].getType()==="aggregatable"){n.push(_.getInternalChartNameFromPropertyNameAndKind(t[e].getName(),"aggregatable"))}}if(n.filter(function(e){return a.indexOf(e)!=-1}).length>=1){e.error("Dimension and Measure has the sameProperty Configured")}}}_._createPropertyInfosForAggregatable=function(e,r,a,n,o,i,s){const l=[];if(Object.keys(i).indexOf(r)>-1){for(const e in i[r]){l.push({name:"_fe_aggregatable_"+i[r][e].name,propertyPath:r,label:i[r][e].label||`${a["@com.sap.vocabularies.Common.v1.Label"]} (${e})`||`${r} (${e})`,sortable:o.propertyInfo[r]?o.propertyInfo[r].sortable:true,filterable:false,groupable:false,aggregatable:true,path:r,aggregationMethod:e,maxConditions:b(n.propertyInfo[r])?-1:1,role:v.axis1,datapoint:null})}}if(Object.keys(s).indexOf(r)>-1){for(const e in s){if(e===r){const r=t({},s[e],{name:"_fe_aggregatable_"+e,groupable:false,aggregatable:true,filterable:false,role:v.axis1,propertyPath:e,datapoint:null});l.push(r);break}}}return l};_.rebind=function(e,t){const r=t.parameters.$search;if(r){delete t.parameters.$search}p.rebind(e,t);if(r){const t=e.getControlDelegate().getInnerChart(e),a=t&&t.getBinding("data");a.suspend();a.setAggregation({search:r});const n={onBeforeRendering:function(){a.resume();t.removeEventDelegate(n)}};t.addEventDelegate(n)}e.fireEvent("bindingUpdated")};_._setChart=function(e,t){const r=e.getParent();t.setVizProperties(e.data("vizProperties"));t.detachSelectData(r.handleSelectionChange.bind(r));t.detachDeselectData(r.handleSelectionChange.bind(r));t.detachDrilledUp(r.handleSelectionChange.bind(r));t.attachSelectData(r.handleSelectionChange.bind(r));t.attachDeselectData(r.handleSelectionChange.bind(r));t.attachDrilledUp(r.handleSelectionChange.bind(r));t.setSelectionMode(e.getPayload().selectionMode.toUpperCase());p._setChart(e,t)};_._getBindingInfo=function(e){if(this._getBindingInfoFromState(e)){return this._getBindingInfoFromState(e)}const r=e.getDelegate().payload;const a=e.getModel()&&e.getModel().getMetaModel();const n=e.data("targetCollectionPath");const o=(a.getObject(`${n}/$kind`)!=="NavigationProperty"?"/":"")+r.contextPath;const i=t({},r.parameters,{entitySet:e.data("entitySet")});return{path:o,events:{dataRequested:e.getParent().onInternalDataRequested.bind(e.getParent())},parameters:i}};_.removeItemFromInnerChart=function(e,t){p.removeItemFromInnerChart.call(this,e,t);if(t.getType()==="groupable"){const t=this.getInnerChart(e);t.fireDeselectData()}};_._getSortable=function(e,t,r){if(r){if(e.data("draftSupported")==="true"){return false}else{return t?t.sortable:true}}return t?t.sortable:true};_._checkAndAddDraftFilter=function(e,t){if(e.data("draftSupported")==="true"){if(!t){t={}}if(!t.filters){t.filters=[];t.filters.push(new u("IsActiveEntity",d.EQ,true))}else{var r,a;(r=t.filters)===null||r===void 0?void 0:(a=r.aFilters)===null||a===void 0?void 0:a.push(new u("IsActiveEntity",d.EQ,true))}}};_.getInternalChartNameFromPropertyNameAndKind=function(e,t){return e.replace("_fe_"+t+"_","")};_.getPropertyFromNameAndKind=function(e,t,r){return r.getPropertyHelper().getProperty("_fe_"+t+"_"+e)};_.getFilterDelegate=function(){return Object.assign({apiVersion:2},h,{addItem:function(e,t){const r=_.getInternalChartNameFromPropertyNameAndKind(t,"groupable");return h.addItem(e,r).then(e=>{e===null||e===void 0?void 0:e.bindProperty("conditions",{path:"$filters>/conditions/"+t});return e})}})};return _},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartHelper-dbg", ["sap/base/Log", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/macros/CommonHelper", "sap/fe/macros/internal/helpers/ActionHelper", "sap/ui/model/json/JSONModel", "sap/ui/model/odata/v4/AnnotationHelper"], function (Log, DataVisualization, CommonHelper, ActionHelper, JSONModel, ODataModelAnnotationHelper) {
  "use strict";

  var getUiControl = DataVisualization.getUiControl;
  function getEntitySetPath(annotationContext) {
    return annotationContext.getPath().replace(/@com.sap.vocabularies.UI.v1.(Chart|PresentationVariant).*/, "");
  }
  var ChartTypeEnum;
  (function (ChartTypeEnum) {
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Column"] = "column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/ColumnStacked"] = "stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/ColumnDual"] = "dual_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual"] = "dual_stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100"] = "100_stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual100"] = "100_dual_stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Bar"] = "bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/BarStacked"] = "stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/BarDual"] = "dual_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/BarStackedDual"] = "dual_stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/BarStacked100"] = "100_stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/BarStackedDual100"] = "100_dual_stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Area"] = "area";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/AreaStacked"] = "stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/AreaStacked100"] = "100_stacked_column";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalArea"] = "bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked"] = "stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100"] = "100_stacked_bar";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Line"] = "line";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/LineDual"] = "dual_line";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Combination"] = "combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/CombinationStacked"] = "stacked_combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/CombinationDual"] = "dual_combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/CombinationStackedDual"] = "dual_stacked_combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStacked"] = "horizontal_stacked_combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Pie"] = "pie";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Donut"] = "donut";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Scatter"] = "scatter";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Bubble"] = "bubble";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Radar"] = "line";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HeatMap"] = "heatmap";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/TreeMap"] = "treemap";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Waterfall"] = "waterfall";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/Bullet"] = "bullet";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/VerticalBullet"] = "vertical_bullet";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalWaterfall"] = "horizontal_waterfall";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationDual"] = "dual_horizontal_combination";
    ChartTypeEnum["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStackedDual"] = "dual_horizontal_stacked_combination";
  })(ChartTypeEnum || (ChartTypeEnum = {}));
  var DimensionRoleTypeEnum;
  /**
   * Helper class for sap.fe.macros Chart phantom control for preprocessing.
   * <h3><b>Note:</b></h3>
   * The class is experimental and the API/behaviour is not finalised
   * and hence this should not be used for productive usage.
   * Especially this class is not intended to be used for the FE scenario,
   * here we shall use sap.fe.macros.ChartHelper that is especially tailored for V4
   * meta model
   *
   * @author SAP SE
   * @private
   * @experimental
   * @since 1.62.0
   * @alias sap.fe.macros.ChartHelper
   */
  (function (DimensionRoleTypeEnum) {
    DimensionRoleTypeEnum["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Category"] = "category";
    DimensionRoleTypeEnum["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Series"] = "series";
    DimensionRoleTypeEnum["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Category2"] = "category2";
  })(DimensionRoleTypeEnum || (DimensionRoleTypeEnum = {}));
  const ChartHelper = {
    formatJSONToString(crit) {
      if (!crit) {
        return undefined;
      }
      let criticality = JSON.stringify(crit);
      criticality = criticality.replace(new RegExp("{", "g"), "\\{");
      criticality = criticality.replace(new RegExp("}", "g"), "\\}");
      return criticality;
    },
    formatChartType(chartType) {
      return ChartTypeEnum[chartType === null || chartType === void 0 ? void 0 : chartType.$EnumMember];
    },
    formatDimensions(annotationContext) {
      const annotation = annotationContext.getObject("./"),
        metaModel = annotationContext.getModel(),
        entitySetPath = getEntitySetPath(annotationContext),
        dimensions = [];
      let isNavigationText = false;

      //perhaps there are no dimension
      annotation.DimensionAttributes = annotation.DimensionAttributes || [];
      for (const dimension of annotation.Dimensions) {
        const key = dimension.$PropertyPath;
        const text = metaModel.getObject(`${entitySetPath + key}@${"com.sap.vocabularies.Common.v1.Text"}`) || {};
        if (key.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Dimension: ${key} from an association cannot be used`);
        }
        if (text.$Path && text.$Path.indexOf("/") > -1) {
          Log.error(`$expand is not yet supported. Text Property: ${text.$Path} from an association cannot be used for the dimension ${key}`);
          isNavigationText = true;
        }
        const chartDimension = {
          key: key,
          textPath: !isNavigationText ? text.$Path : undefined,
          label: metaModel.getObject(`${entitySetPath + key}@${"com.sap.vocabularies.Common.v1.Label"}`),
          role: "category"
        };
        for (const attribute of annotation.DimensionAttributes) {
          var _attribute$Dimension;
          if (chartDimension.key === ((_attribute$Dimension = attribute.Dimension) === null || _attribute$Dimension === void 0 ? void 0 : _attribute$Dimension.$PropertyPath)) {
            var _attribute$Role;
            chartDimension.role = DimensionRoleTypeEnum[(_attribute$Role = attribute.Role) === null || _attribute$Role === void 0 ? void 0 : _attribute$Role.$EnumMember] || chartDimension.role;
            break;
          }
        }
        chartDimension.criticality = this.fetchCriticality(metaModel, metaModel.createBindingContext(entitySetPath + key)).then(this.formatJSONToString);
        dimensions.push(chartDimension);
      }
      const dimensionModel = new JSONModel(dimensions);
      dimensionModel.$$valueAsPromise = true;
      return dimensionModel.createBindingContext("/");
    },
    fetchCriticality(oMetaModel, oCtx) {
      const UI = "@com.sap.vocabularies.UI.v1";
      return oMetaModel.requestObject(`${UI}.ValueCriticality`, oCtx).then(function (aValueCriticality) {
        let oCriticality, oValueCriticality;
        if (aValueCriticality) {
          oCriticality = {
            VeryPositive: [],
            Positive: [],
            Critical: [],
            VeryNegative: [],
            Negative: [],
            Neutral: []
          };
          for (let i = 0; i < aValueCriticality.length; i++) {
            oValueCriticality = aValueCriticality[i];
            if (oValueCriticality.Criticality.$EnumMember.endsWith("VeryPositive")) {
              oCriticality.VeryPositive.push(oValueCriticality.Value);
            } else if (oValueCriticality.Criticality.$EnumMember.endsWith("Positive")) {
              oCriticality.Positive.push(oValueCriticality.Value);
            } else if (oValueCriticality.Criticality.$EnumMember.endsWith("Critical")) {
              oCriticality.Critical.push(oValueCriticality.Value);
            } else if (oValueCriticality.Criticality.$EnumMember.endsWith("VeryNegative")) {
              oCriticality.VeryNegative.push(oValueCriticality.Value);
            } else if (oValueCriticality.Criticality.$EnumMember.endsWith("Negative")) {
              oCriticality.Negative.push(oValueCriticality.Value);
            } else {
              oCriticality.Neutral.push(oValueCriticality.Value);
            }
          }
          for (const sKey in oCriticality) {
            if (oCriticality[sKey].length == 0) {
              delete oCriticality[sKey];
            }
          }
        }
        return oCriticality;
      });
    },
    formatMeasures(annotationContext) {
      return annotationContext.getModel().getData();
    },
    getUiChart(presentationContext) {
      return getUiControl(presentationContext, `@${"com.sap.vocabularies.UI.v1.Chart"}`);
    },
    getOperationAvailableMap(chart, contextContext) {
      const chartCollection = (chart === null || chart === void 0 ? void 0 : chart.Actions) || [];
      return JSON.stringify(ActionHelper.getOperationAvailableMap(chartCollection, "chart", contextContext));
    },
    /**
     * Returns a stringified JSON object containing Presentation Variant sort conditions.
     *
     * @param oContext
     * @param oPresentationVariant Presentation Variant annotation
     * @param sPresentationVariantPath
     * @param oApplySupported
     * @returns Stringified JSON object
     */
    getSortConditions: function (oContext, oPresentationVariant, sPresentationVariantPath, oApplySupported) {
      if (oPresentationVariant && CommonHelper._isPresentationVariantAnnotation(sPresentationVariantPath) && oPresentationVariant.SortOrder) {
        const aSortConditions = {
          sorters: []
        };
        const sEntityPath = oContext.getPath(0).split("@")[0];
        oPresentationVariant.SortOrder.forEach(function () {
          let oCondition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          let oSortProperty = "";
          const oSorter = {};
          if (oCondition.DynamicProperty) {
            var _oContext$getModel$ge;
            oSortProperty = "_fe_aggregatable_" + ((_oContext$getModel$ge = oContext.getModel(0).getObject(sEntityPath + oCondition.DynamicProperty.$AnnotationPath)) === null || _oContext$getModel$ge === void 0 ? void 0 : _oContext$getModel$ge.Name);
          } else if (oCondition.Property) {
            const aGroupableProperties = oApplySupported.GroupableProperties;
            if (aGroupableProperties && aGroupableProperties.length) {
              for (let i = 0; i < aGroupableProperties.length; i++) {
                if (aGroupableProperties[i].$PropertyPath === oCondition.Property.$PropertyPath) {
                  oSortProperty = "_fe_groupable_" + oCondition.Property.$PropertyPath;
                  break;
                }
                if (!oSortProperty) {
                  oSortProperty = "_fe_aggregatable_" + oCondition.Property.$PropertyPath;
                }
              }
            } else if (oContext.getModel(0).getObject(`${sEntityPath + oCondition.Property.$PropertyPath}@${"Org.OData.Aggregation.V1.Groupable"}`)) {
              oSortProperty = "_fe_groupable_" + oCondition.Property.$PropertyPath;
            } else {
              oSortProperty = "_fe_aggregatable_" + oCondition.Property.$PropertyPath;
            }
          }
          if (oSortProperty) {
            oSorter.name = oSortProperty;
            oSorter.descending = !!oCondition.Descending;
            aSortConditions.sorters.push(oSorter);
          } else {
            throw new Error("Please define the right path to the sort property");
          }
        });
        return JSON.stringify(aSortConditions);
      }
      return undefined;
    },
    getBindingData(sTargetCollection, oContext, aActions) {
      const aOperationAvailablePath = [];
      let sSelect;
      for (const i in aActions) {
        if (aActions[i].$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
          const sActionName = aActions[i].Action;
          const oActionOperationAvailable = CommonHelper.getActionPath(oContext, false, sActionName, true);
          if (oActionOperationAvailable && oActionOperationAvailable.$Path) {
            aOperationAvailablePath.push(`'${oActionOperationAvailable.$Path}'`);
          } else if (oActionOperationAvailable === null) {
            // We disabled action advertisement but kept it in the code for the time being
            //aOperationAvailablePath.push(sActionName);
          }
        }
      }
      if (aOperationAvailablePath.length > 0) {
        //TODO: request fails with $select. check this with odata v4 model
        sSelect = " $select: '" + aOperationAvailablePath.join() + "'";
      }
      return "'{path: '" + (oContext.getObject("$kind") === "EntitySet" ? "/" : "") + oContext.getObject("@sapui.name") + "'" + (sSelect ? ",parameters:{" + sSelect + "}" : "") + "}'";
    },
    _getModel(oCollection, oInterface) {
      return oInterface.context;
    },
    // TODO: combine this one with the one from the table
    isDataFieldForActionButtonEnabled(bIsBound, sAction, oCollection, sOperationAvailableMap, sEnableSelectOn) {
      if (bIsBound !== true) {
        return "true";
      }
      const oModel = oCollection.getModel();
      const sNavPath = oCollection.getPath();
      const sPartner = oModel.getObject(sNavPath).$Partner;
      const oOperationAvailableMap = sOperationAvailableMap && JSON.parse(sOperationAvailableMap);
      const aPath = oOperationAvailableMap && oOperationAvailableMap[sAction] && oOperationAvailableMap[sAction].split("/");
      const sNumberOfSelectedContexts = ActionHelper.getNumberOfContextsExpression(sEnableSelectOn);
      if (aPath && aPath[0] === sPartner) {
        const sPath = oOperationAvailableMap[sAction].replace(sPartner + "/", "");
        return "{= ${" + sNumberOfSelectedContexts + " && ${" + sPath + "}}";
      } else {
        return "{= ${" + sNumberOfSelectedContexts + "}";
      }
    },
    getHiddenPathExpressionForTableActionsAndIBN(sHiddenPath, oDetails) {
      const oContext = oDetails.context,
        sPropertyPath = oContext.getPath(),
        sEntitySetPath = ODataModelAnnotationHelper.getNavigationPath(sPropertyPath);
      if (sHiddenPath.indexOf("/") > 0) {
        const aSplitHiddenPath = sHiddenPath.split("/");
        const sNavigationPath = aSplitHiddenPath[0];
        // supports visiblity based on the property from the partner association
        if (oContext.getObject(sEntitySetPath + "/$Partner") === sNavigationPath) {
          return "{= !%{" + aSplitHiddenPath.slice(1).join("/") + "} }";
        }
        // any other association will be ignored and the button will be made visible
      }

      return true;
    },
    /**
     * Method to get press event for DataFieldForActionButton.
     *
     * @function
     * @name getPressEventForDataFieldForActionButton
     * @param id Current control ID
     * @param action DataFieldForAction model
     * @param operationAvailableMap Stringified JSON object
     * @returns A binding expression for the press property of the DataFieldForActionButton
     */
    getPressEventForDataFieldForActionButton(id, action, operationAvailableMap) {
      return ActionHelper.getPressEventDataFieldForActionButton(id, action, {
        contexts: "${internal>selectedContexts}"
      }, operationAvailableMap);
    },
    /**
     * @function
     * @name getActionType
     * @param action DataFieldForAction model
     * @returns A Boolean value depending on the action type
     */
    getActionType(action) {
      return (action["$Type"].indexOf("com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") > -1 || action["$Type"].indexOf("com.sap.vocabularies.UI.v1.DataFieldForAction") > -1) && action["Inline"];
    },
    getCollectionName(collection) {
      return collection.split("/")[collection.split("/").length - 1];
    }
  };
  ChartHelper.getSortConditions.requiresIContext = true;
  return ChartHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartHelper", ["sap/base/Log","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/macros/CommonHelper","sap/fe/macros/internal/helpers/ActionHelper","sap/ui/model/json/JSONModel","sap/ui/model/odata/v4/AnnotationHelper"],function(e,a,t,o,r,i){"use strict";var n=a.getUiControl;function s(e){return e.getPath().replace(/@com.sap.vocabularies.UI.v1.(Chart|PresentationVariant).*/,"")}var c;(function(e){e["com.sap.vocabularies.UI.v1.ChartType/Column"]="column";e["com.sap.vocabularies.UI.v1.ChartType/ColumnStacked"]="stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/ColumnDual"]="dual_column";e["com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual"]="dual_stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100"]="100_stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/ColumnStackedDual100"]="100_dual_stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/Bar"]="bar";e["com.sap.vocabularies.UI.v1.ChartType/BarStacked"]="stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/BarDual"]="dual_bar";e["com.sap.vocabularies.UI.v1.ChartType/BarStackedDual"]="dual_stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/BarStacked100"]="100_stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/BarStackedDual100"]="100_dual_stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/Area"]="area";e["com.sap.vocabularies.UI.v1.ChartType/AreaStacked"]="stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/AreaStacked100"]="100_stacked_column";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalArea"]="bar";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked"]="stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100"]="100_stacked_bar";e["com.sap.vocabularies.UI.v1.ChartType/Line"]="line";e["com.sap.vocabularies.UI.v1.ChartType/LineDual"]="dual_line";e["com.sap.vocabularies.UI.v1.ChartType/Combination"]="combination";e["com.sap.vocabularies.UI.v1.ChartType/CombinationStacked"]="stacked_combination";e["com.sap.vocabularies.UI.v1.ChartType/CombinationDual"]="dual_combination";e["com.sap.vocabularies.UI.v1.ChartType/CombinationStackedDual"]="dual_stacked_combination";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStacked"]="horizontal_stacked_combination";e["com.sap.vocabularies.UI.v1.ChartType/Pie"]="pie";e["com.sap.vocabularies.UI.v1.ChartType/Donut"]="donut";e["com.sap.vocabularies.UI.v1.ChartType/Scatter"]="scatter";e["com.sap.vocabularies.UI.v1.ChartType/Bubble"]="bubble";e["com.sap.vocabularies.UI.v1.ChartType/Radar"]="line";e["com.sap.vocabularies.UI.v1.ChartType/HeatMap"]="heatmap";e["com.sap.vocabularies.UI.v1.ChartType/TreeMap"]="treemap";e["com.sap.vocabularies.UI.v1.ChartType/Waterfall"]="waterfall";e["com.sap.vocabularies.UI.v1.ChartType/Bullet"]="bullet";e["com.sap.vocabularies.UI.v1.ChartType/VerticalBullet"]="vertical_bullet";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalWaterfall"]="horizontal_waterfall";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationDual"]="dual_horizontal_combination";e["com.sap.vocabularies.UI.v1.ChartType/HorizontalCombinationStackedDual"]="dual_horizontal_stacked_combination"})(c||(c={}));var l;(function(e){e["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Category"]="category";e["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Series"]="series";e["com.sap.vocabularies.UI.v1.ChartDimensionRoleType/Category2"]="category2"})(l||(l={}));const u={formatJSONToString(e){if(!e){return undefined}let a=JSON.stringify(e);a=a.replace(new RegExp("{","g"),"\\{");a=a.replace(new RegExp("}","g"),"\\}");return a},formatChartType(e){return c[e===null||e===void 0?void 0:e.$EnumMember]},formatDimensions(a){const t=a.getObject("./"),o=a.getModel(),i=s(a),n=[];let c=false;t.DimensionAttributes=t.DimensionAttributes||[];for(const a of t.Dimensions){const r=a.$PropertyPath;const s=o.getObject(`${i+r}@${"com.sap.vocabularies.Common.v1.Text"}`)||{};if(r.indexOf("/")>-1){e.error(`$expand is not yet supported. Dimension: ${r} from an association cannot be used`)}if(s.$Path&&s.$Path.indexOf("/")>-1){e.error(`$expand is not yet supported. Text Property: ${s.$Path} from an association cannot be used for the dimension ${r}`);c=true}const v={key:r,textPath:!c?s.$Path:undefined,label:o.getObject(`${i+r}@${"com.sap.vocabularies.Common.v1.Label"}`),role:"category"};for(const e of t.DimensionAttributes){var u;if(v.key===((u=e.Dimension)===null||u===void 0?void 0:u.$PropertyPath)){var p;v.role=l[(p=e.Role)===null||p===void 0?void 0:p.$EnumMember]||v.role;break}}v.criticality=this.fetchCriticality(o,o.createBindingContext(i+r)).then(this.formatJSONToString);n.push(v)}const v=new r(n);v.$$valueAsPromise=true;return v.createBindingContext("/")},fetchCriticality(e,a){const t="@com.sap.vocabularies.UI.v1";return e.requestObject(`${t}.ValueCriticality`,a).then(function(e){let a,t;if(e){a={VeryPositive:[],Positive:[],Critical:[],VeryNegative:[],Negative:[],Neutral:[]};for(let o=0;o<e.length;o++){t=e[o];if(t.Criticality.$EnumMember.endsWith("VeryPositive")){a.VeryPositive.push(t.Value)}else if(t.Criticality.$EnumMember.endsWith("Positive")){a.Positive.push(t.Value)}else if(t.Criticality.$EnumMember.endsWith("Critical")){a.Critical.push(t.Value)}else if(t.Criticality.$EnumMember.endsWith("VeryNegative")){a.VeryNegative.push(t.Value)}else if(t.Criticality.$EnumMember.endsWith("Negative")){a.Negative.push(t.Value)}else{a.Neutral.push(t.Value)}}for(const e in a){if(a[e].length==0){delete a[e]}}}return a})},formatMeasures(e){return e.getModel().getData()},getUiChart(e){return n(e,`@${"com.sap.vocabularies.UI.v1.Chart"}`)},getOperationAvailableMap(e,a){const t=(e===null||e===void 0?void 0:e.Actions)||[];return JSON.stringify(o.getOperationAvailableMap(t,"chart",a))},getSortConditions:function(e,a,o,r){if(a&&t._isPresentationVariantAnnotation(o)&&a.SortOrder){const t={sorters:[]};const o=e.getPath(0).split("@")[0];a.SortOrder.forEach(function(){let a=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let i="";const n={};if(a.DynamicProperty){var s;i="_fe_aggregatable_"+((s=e.getModel(0).getObject(o+a.DynamicProperty.$AnnotationPath))===null||s===void 0?void 0:s.Name)}else if(a.Property){const t=r.GroupableProperties;if(t&&t.length){for(let e=0;e<t.length;e++){if(t[e].$PropertyPath===a.Property.$PropertyPath){i="_fe_groupable_"+a.Property.$PropertyPath;break}if(!i){i="_fe_aggregatable_"+a.Property.$PropertyPath}}}else if(e.getModel(0).getObject(`${o+a.Property.$PropertyPath}@${"Org.OData.Aggregation.V1.Groupable"}`)){i="_fe_groupable_"+a.Property.$PropertyPath}else{i="_fe_aggregatable_"+a.Property.$PropertyPath}}if(i){n.name=i;n.descending=!!a.Descending;t.sorters.push(n)}else{throw new Error("Please define the right path to the sort property")}});return JSON.stringify(t)}return undefined},getBindingData(e,a,o){const r=[];let i;for(const e in o){if(o[e].$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"){const i=o[e].Action;const n=t.getActionPath(a,false,i,true);if(n&&n.$Path){r.push(`'${n.$Path}'`)}else if(n===null){}}}if(r.length>0){i=" $select: '"+r.join()+"'"}return"'{path: '"+(a.getObject("$kind")==="EntitySet"?"/":"")+a.getObject("@sapui.name")+"'"+(i?",parameters:{"+i+"}":"")+"}'"},_getModel(e,a){return a.context},isDataFieldForActionButtonEnabled(e,a,t,r,i){if(e!==true){return"true"}const n=t.getModel();const s=t.getPath();const c=n.getObject(s).$Partner;const l=r&&JSON.parse(r);const u=l&&l[a]&&l[a].split("/");const p=o.getNumberOfContextsExpression(i);if(u&&u[0]===c){const e=l[a].replace(c+"/","");return"{= ${"+p+" && ${"+e+"}}"}else{return"{= ${"+p+"}"}},getHiddenPathExpressionForTableActionsAndIBN(e,a){const t=a.context,o=t.getPath(),r=i.getNavigationPath(o);if(e.indexOf("/")>0){const a=e.split("/");const o=a[0];if(t.getObject(r+"/$Partner")===o){return"{= !%{"+a.slice(1).join("/")+"} }"}}return true},getPressEventForDataFieldForActionButton(e,a,t){return o.getPressEventDataFieldForActionButton(e,a,{contexts:"${internal>selectedContexts}"},t)},getActionType(e){return(e["$Type"].indexOf("com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")>-1||e["$Type"].indexOf("com.sap.vocabularies.UI.v1.DataFieldForAction")>-1)&&e["Inline"]},getCollectionName(e){return e.split("/")[e.split("/").length-1]}};u.getSortConditions.requiresIContext=true;return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartRuntime-dbg", ["sap/fe/core/ActionRuntime", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/DelegateUtil"], function (ActionRuntime, ChartUtils, DelegateUtil) {
  "use strict";

  /**
   * Static class used by MDC_Chart during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const ChartRuntime = {
    /**
     * Updates the chart after selection or deselection of data points.
     *
     * @function
     * @static
     * @name sap.fe.macros.chart.ChartRuntime.fnUpdateChart
     * @memberof sap.fe.macros.chart.ChartRuntime
     * @param oEvent Chart event
     * @ui5-restricted
     */
    fnUpdateChart: function (oEvent) {
      const oInnerChart = oEvent.getSource();
      const oMdcChart = oInnerChart.getParent();
      let sActionsMultiselectDisabled,
        oActionOperationAvailableMap = {},
        aActionsMultiselectDisabled = [];
      // changing drill stack changes order of custom data, looping through all
      oMdcChart.getCustomData().forEach(function (oCustomData) {
        if (oCustomData.getKey() === "operationAvailableMap") {
          oActionOperationAvailableMap = DelegateUtil.getCustomData(oMdcChart, "operationAvailableMap") && DelegateUtil.getCustomData(oMdcChart, "operationAvailableMap").customData;
        } else if (oCustomData.getKey() === "multiSelectDisabledActions") {
          sActionsMultiselectDisabled = oCustomData.getValue();
          aActionsMultiselectDisabled = sActionsMultiselectDisabled ? sActionsMultiselectDisabled.split(",") : [];
        }
      });
      const oInternalModelContext = oMdcChart.getBindingContext("internal");
      const aSelectedContexts = [];
      let oModelObject;
      const aSelectedDataPoints = ChartUtils.getChartSelectedData(oInnerChart);
      for (let i = 0; i < aSelectedDataPoints.length; i++) {
        aSelectedContexts.push(aSelectedDataPoints[i].context);
      }
      oInternalModelContext.setProperty("selectedContexts", aSelectedContexts);
      oInternalModelContext.getModel().setProperty(`${oInternalModelContext.getPath()}/numberOfSelectedContexts`, oInnerChart.getSelectedDataPoints().count);
      for (let j = 0; j < aSelectedContexts.length; j++) {
        const oSelectedContext = aSelectedContexts[j];
        const oContextData = oSelectedContext.getObject();
        for (const key in oContextData) {
          if (key.indexOf("#") === 0) {
            let sActionPath = key;
            sActionPath = sActionPath.substring(1, sActionPath.length);
            oModelObject = oInternalModelContext.getObject();
            oModelObject[sActionPath] = true;
            oInternalModelContext.setProperty("", oModelObject);
          }
        }
        oModelObject = oInternalModelContext.getObject();
      }
      ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, "chart");
      if (aSelectedContexts.length > 1) {
        aActionsMultiselectDisabled.forEach(function (sAction) {
          oInternalModelContext.setProperty(sAction, false);
        });
      }
    }
  };
  return ChartRuntime;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartRuntime", ["sap/fe/core/ActionRuntime","sap/fe/macros/chart/ChartUtils","sap/fe/macros/DelegateUtil"],function(t,e,n){"use strict";const a={fnUpdateChart:function(a){const o=a.getSource();const s=o.getParent();let c,i={},l=[];s.getCustomData().forEach(function(t){if(t.getKey()==="operationAvailableMap"){i=n.getCustomData(s,"operationAvailableMap")&&n.getCustomData(s,"operationAvailableMap").customData}else if(t.getKey()==="multiSelectDisabledActions"){c=t.getValue();l=c?c.split(","):[]}});const r=s.getBindingContext("internal");const g=[];let f;const u=e.getChartSelectedData(o);for(let t=0;t<u.length;t++){g.push(u[t].context)}r.setProperty("selectedContexts",g);r.getModel().setProperty(`${r.getPath()}/numberOfSelectedContexts`,o.getSelectedDataPoints().count);for(let t=0;t<g.length;t++){const e=g[t];const n=e.getObject();for(const t in n){if(t.indexOf("#")===0){let e=t;e=e.substring(1,e.length);f=r.getObject();f[e]=true;r.setProperty("",f)}}f=r.getObject()}t.setActionEnablement(r,i,g,"chart");if(g.length>1){l.forEach(function(t){r.setProperty(t,false)})}}};return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartUtils-dbg", ["sap/fe/core/CommonUtils", "sap/fe/macros/filter/FilterUtils", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "../CommonHelper", "../table/Utils"], function (CommonUtils, FilterUtil, Filter, FilterOperator, CommonHelper, Utils) {
  "use strict";

  const ChartUtils = {
    /**
     * Method that returns the chart filters stored in the UI model.
     *
     * @param oMdcChart The MDC_Chart control
     * @param bClearSelections Clears chart selections in the UI model if true
     * @returns The chart selections
     */
    getChartSelections: function (oMdcChart, bClearSelections) {
      // get chart selections
      if (bClearSelections) {
        this.getChartModel(oMdcChart, "", {});
      }
      const aVizSelections = this.getChartModel(oMdcChart, "filters");
      return aVizSelections || [];
    },
    /**
     * Method that returns the chart selections as a filter.
     *
     * @param oMdcChart The MDC_Chart control
     * @returns Filter containing chart selections
     */
    getChartFilters: function (oMdcChart) {
      // get chart selections as a filter
      const aFilters = this.getChartSelections(oMdcChart) || [];
      return new Filter(aFilters);
    },
    /**
     * Method that sets the chart selections as in the UI model.
     *
     * @param oMdcChart The MDC_Chart control
     */
    setChartFilters: function (oMdcChart) {
      // saving selections in each drill stack for future use
      const oDrillStack = this.getChartModel(oMdcChart, "drillStack") || {};
      const oChart = oMdcChart.getControlDelegate().getInnerChart(oMdcChart);
      const aChartFilters = [];
      let aVisibleDimensions;
      function addChartFilters(aSelectedData) {
        for (const item in aSelectedData) {
          const aDimFilters = [];
          for (const i in aVisibleDimensions) {
            const sPath = aVisibleDimensions[i];
            const sValue = aSelectedData[item].data[sPath];
            if (sValue !== undefined) {
              aDimFilters.push(new Filter({
                path: sPath,
                operator: FilterOperator.EQ,
                value1: sValue
              }));
            }
          }
          if (aDimFilters.length > 0) {
            aChartFilters.push(new Filter(aDimFilters, true));
          }
        }
      }
      if (oChart) {
        const aVizSelections = this.getVizSelection(oChart);
        aVisibleDimensions = oChart.getVisibleDimensions();
        const aDimensions = this.getDimensionsFromDrillStack(oChart);
        if (aDimensions.length > 0) {
          this.getChartModel(oMdcChart, "drillStack", {});
          oDrillStack[aDimensions.toString()] = aVizSelections;
          this.getChartModel(oMdcChart, "drillStack", oDrillStack);
        }
        if (aVizSelections.length > 0) {
          // creating filters with selections in the current drillstack
          addChartFilters(aVizSelections);
        } else {
          // creating filters with selections in the previous drillstack when there are no selections in the current drillstack
          const aDrillStackKeys = Object.keys(oDrillStack) || [];
          const aPrevDrillStackData = oDrillStack[aDrillStackKeys[aDrillStackKeys.length - 2]] || [];
          addChartFilters(aPrevDrillStackData);
        }
        this.getChartModel(oMdcChart, "filters", aChartFilters);
      }
    },
    /**
     * Method that returns the chart selections as a filter.
     *
     * @param oChart The inner chart control
     * @returns The filters in the filter bar
     */
    getFilterBarFilterInfo: function (oChart) {
      return FilterUtil.getFilterInfo(oChart.getFilter(), {
        targetControl: oChart
      });
    },
    /**
     * Method that returns the filters for the chart and filter bar.
     *
     * @param oChart The inner chart control
     * @returns The new filter containing the filters for both the chart and the filter bar
     */
    getAllFilterInfo: function (oChart) {
      const oFilters = this.getFilterBarFilterInfo(oChart);
      const aChartFilters = this.getChartFilters(oChart);
      // Get filters added through personalization dialog filter option
      const aP13nProperties = Utils.getP13nFilters(oChart);
      // Retrieve selection presentation variant path from custom data
      const selectionPresentationVariantPath = CommonHelper.parseCustomData(oChart.data("selectionPresentationVariantPath")) ? CommonHelper.parseCustomData(oChart.data("selectionPresentationVariantPath")).data : "";
      // Check if SV is present in SPV, if yes get the Sv values
      const aSelctionVariant = selectionPresentationVariantPath ? CommonUtils.getFiltersInfoForSV(oChart, selectionPresentationVariantPath, true) : null;
      if (aChartFilters && aChartFilters.aFilters && aChartFilters.aFilters.length) {
        oFilters.filters.push(aChartFilters);
      }
      if (aP13nProperties.length > 0) {
        aP13nProperties.forEach(element => {
          if (element.aFilters && element.aFilters.length > 0) {
            // if we filter using more than one field
            element.aFilters.forEach(filterValue => {
              oFilters.filters.push(filterValue);
            });
          } else {
            // if we filter using only one field
            oFilters.filters.push(element);
          }
        });
      }
      if (aSelctionVariant && aSelctionVariant.filters.length > 0) {
        aSelctionVariant.filters.forEach(filterValue => {
          oFilters.filters.push(filterValue.aFilters[0]);
        });
      }
      return oFilters;
    },
    /**
     * Method that returns selected data in the chart.
     *
     * @param oChart The inner chart control
     * @returns The selected chart data
     */
    getChartSelectedData: function (oChart) {
      let aSelectedPoints = [];
      // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
      switch (oChart.getSelectionBehavior()) {
        case "DATAPOINT":
          aSelectedPoints = oChart.getSelectedDataPoints().dataPoints;
          break;
        case "CATEGORY":
          aSelectedPoints = oChart.getSelectedCategories().categories;
          break;
        case "SERIES":
          aSelectedPoints = oChart.getSelectedSeries().series;
          break;
      }
      return aSelectedPoints;
    },
    /**
     * Method to get filters, drillstack and selected contexts in the UI model.
     * Can also be used to set data in the model.
     *
     * @param oMdcChart The MDC_Chart control
     * @param sPath The path in the UI model from which chart data is to be set/fetched
     * @param vData The chart info to be set
     * @returns The chart info (filters/drillstack/selectedContexts)
     */
    getChartModel: function (oMdcChart, sPath, vData) {
      const oInternalModelContext = oMdcChart.getBindingContext("internal");
      if (!oInternalModelContext) {
        return false;
      }
      if (vData) {
        oInternalModelContext.setProperty(sPath, vData);
      }
      return oInternalModelContext && oInternalModelContext.getObject(sPath);
    },
    /**
     * Method to fetch the current drillstack dimensions.
     *
     * @param oChart The inner chart control
     * @returns The current drillstack dimensions
     */
    getDimensionsFromDrillStack: function (oChart) {
      const aCurrentDrillStack = oChart.getDrillStack() || [];
      const aCurrentDrillView = aCurrentDrillStack.pop() || {};
      return aCurrentDrillView.dimension || [];
    },
    /**
     * Method to fetch chart selections.
     *
     * @param oChart The inner chart control
     * @returns The chart selections
     */
    getVizSelection: function (oChart) {
      return oChart && oChart._getVizFrame() && oChart._getVizFrame().vizSelection() || [];
    }
  };
  return ChartUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/chart/ChartUtils", ["sap/fe/core/CommonUtils","sap/fe/macros/filter/FilterUtils","sap/ui/model/Filter","sap/ui/model/FilterOperator","../CommonHelper","../table/Utils"],function(t,e,i,n,r,s){"use strict";const o={getChartSelections:function(t,e){if(e){this.getChartModel(t,"",{})}const i=this.getChartModel(t,"filters");return i||[]},getChartFilters:function(t){const e=this.getChartSelections(t)||[];return new i(e)},setChartFilters:function(t){const e=this.getChartModel(t,"drillStack")||{};const r=t.getControlDelegate().getInnerChart(t);const s=[];let o;function l(t){for(const e in t){const r=[];for(const s in o){const l=o[s];const a=t[e].data[l];if(a!==undefined){r.push(new i({path:l,operator:n.EQ,value1:a}))}}if(r.length>0){s.push(new i(r,true))}}}if(r){const i=this.getVizSelection(r);o=r.getVisibleDimensions();const n=this.getDimensionsFromDrillStack(r);if(n.length>0){this.getChartModel(t,"drillStack",{});e[n.toString()]=i;this.getChartModel(t,"drillStack",e)}if(i.length>0){l(i)}else{const t=Object.keys(e)||[];const i=e[t[t.length-2]]||[];l(i)}this.getChartModel(t,"filters",s)}},getFilterBarFilterInfo:function(t){return e.getFilterInfo(t.getFilter(),{targetControl:t})},getAllFilterInfo:function(e){const i=this.getFilterBarFilterInfo(e);const n=this.getChartFilters(e);const o=s.getP13nFilters(e);const l=r.parseCustomData(e.data("selectionPresentationVariantPath"))?r.parseCustomData(e.data("selectionPresentationVariantPath")).data:"";const a=l?t.getFiltersInfoForSV(e,l,true):null;if(n&&n.aFilters&&n.aFilters.length){i.filters.push(n)}if(o.length>0){o.forEach(t=>{if(t.aFilters&&t.aFilters.length>0){t.aFilters.forEach(t=>{i.filters.push(t)})}else{i.filters.push(t)}})}if(a&&a.filters.length>0){a.filters.forEach(t=>{i.filters.push(t.aFilters[0])})}return i},getChartSelectedData:function(t){let e=[];switch(t.getSelectionBehavior()){case"DATAPOINT":e=t.getSelectedDataPoints().dataPoints;break;case"CATEGORY":e=t.getSelectedCategories().categories;break;case"SERIES":e=t.getSelectedSeries().series;break}return e},getChartModel:function(t,e,i){const n=t.getBindingContext("internal");if(!n){return false}if(i){n.setProperty(e,i)}return n&&n.getObject(e)},getDimensionsFromDrillStack:function(t){const e=t.getDrillStack()||[];const i=e.pop()||{};return i.dimension||[]},getVizSelection:function(t){return t&&t._getVizFrame()&&t._getVizFrame().vizSelection()||[]}};return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/Contact.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter, BindingToolkit, StableIdHelper, DataModelPathHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
  var _exports = {};
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var generate = StableIdHelper.generate;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ContactBlock = (_dec = defineBuildingBlock({
    name: "Contact",
    namespace: "sap.fe.macros",
    designtime: "sap/fe/macros/Contact.designtime"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    expectedTypes: ["com.sap.vocabularies.Communication.v1.ContactType"],
    required: true
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "boolean"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(ContactBlock, _BuildingBlockBase);
    function ContactBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "idPrefix", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_flexId", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor6, _assertThisInitialized(_this));
      return _this;
    }
    _exports = ContactBlock;
    var _proto = ContactBlock.prototype;
    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */
    _proto.getTemplate = function getTemplate() {
      let id;
      if (this._flexId) {
        //in case a flex id is given, take this one
        id = this._flexId;
      } else {
        //alternatively check for idPrefix and generate an appropriate id
        id = this.idPrefix ? generate([this.idPrefix, "Field-content"]) : undefined;
      }
      const convertedContact = convertMetaModelContext(this.metaPath);
      const myDataModel = getInvolvedDataModelObjects(this.metaPath, this.contextPath);
      const value = getExpressionFromAnnotation(convertedContact.fn, getRelativePaths(myDataModel));
      const delegateConfiguration = {
        name: "sap/fe/macros/contact/ContactDelegate",
        payload: {
          contact: this.metaPath.getPath()
        }
      };
      return xml`<mdc:Field
		xmlns:mdc="sap.ui.mdc"
		delegate="{name: 'sap/ui/mdc/odata/v4/FieldBaseDelegate'}"
		${this.attr("id", id)}
		editMode="Display"
		width="100%"
		${this.attr("visible", this.visible)}
		${this.attr("value", value)}
		${this.attr("ariaLabelledBy", this.ariaLabelledBy)}
	>
		<mdc:fieldInfo>
			<mdc:Link
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				enablePersonalization="false"
				${this.attr("delegate", JSON.stringify(delegateConfiguration))}
			/>
		</mdc:fieldInfo>
	</mdc:Field>
			`;
    };
    return ContactBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_flexId", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ContactBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/Contact.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/DataModelPathHelper"],function(e,t,i,r,a,n,l){"use strict";var o,u,s,c,d,p,f,b,m,h,g,v,y,P,x;var B={};var w=l.getRelativePaths;var z=n.generate;var k=a.getExpressionFromAnnotation;var O=r.getInvolvedDataModelObjects;var C=r.convertMetaModelContext;var I=i.xml;var _=t.defineBuildingBlock;var j=t.blockAttribute;function F(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function M(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function T(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;D(e,t)}function D(e,t){D=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return D(e,t)}function E(e,t,i,r,a){var n={};Object.keys(r).forEach(function(e){n[e]=r[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},n);if(a&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(a):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function L(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let S=(o=_({name:"Contact",namespace:"sap.fe.macros",designtime:"sap/fe/macros/Contact.designtime"}),u=j({type:"string"}),s=j({type:"string"}),c=j({type:"sap.ui.model.Context",expectedTypes:["com.sap.vocabularies.Communication.v1.ContactType"],required:true}),d=j({type:"sap.ui.model.Context",expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),p=j({type:"string"}),f=j({type:"boolean"}),o(b=(m=function(e){T(t,e);function t(){var t;for(var i=arguments.length,r=new Array(i),a=0;a<i;a++){r[a]=arguments[a]}t=e.call(this,...r)||this;F(t,"idPrefix",h,M(t));F(t,"_flexId",g,M(t));F(t,"metaPath",v,M(t));F(t,"contextPath",y,M(t));F(t,"ariaLabelledBy",P,M(t));F(t,"visible",x,M(t));return t}B=t;var i=t.prototype;i.getTemplate=function e(){let t;if(this._flexId){t=this._flexId}else{t=this.idPrefix?z([this.idPrefix,"Field-content"]):undefined}const i=C(this.metaPath);const r=O(this.metaPath,this.contextPath);const a=k(i.fn,w(r));const n={name:"sap/fe/macros/contact/ContactDelegate",payload:{contact:this.metaPath.getPath()}};return I`<mdc:Field
		xmlns:mdc="sap.ui.mdc"
		delegate="{name: 'sap/ui/mdc/odata/v4/FieldBaseDelegate'}"
		${this.attr("id",t)}
		editMode="Display"
		width="100%"
		${this.attr("visible",this.visible)}
		${this.attr("value",a)}
		${this.attr("ariaLabelledBy",this.ariaLabelledBy)}
	>
		<mdc:fieldInfo>
			<mdc:Link
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				enablePersonalization="false"
				${this.attr("delegate",JSON.stringify(n))}
			/>
		</mdc:fieldInfo>
	</mdc:Field>
			`};return t}(e),h=E(m.prototype,"idPrefix",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=E(m.prototype,"_flexId",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),v=E(m.prototype,"metaPath",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),y=E(m.prototype,"contextPath",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),P=E(m.prototype,"ariaLabelledBy",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),x=E(m.prototype,"visible",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),m))||b);B=S;return B},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/ContactDelegate-dbg", ["sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/mdc/LinkDelegate"], function (Fragment, XMLPreprocessor, XMLTemplateProcessor, LinkDelegate) {
  "use strict";

  return Object.assign({}, LinkDelegate, {
    /**
     * Method called to do the templating of the popover content.
     *
     * @param payload
     * @param metaModel
     * @returns  A promise containing the popover content
     */
    _fnTemplateFragment: async function (payload, metaModel) {
      const fragmentName = "sap.fe.macros.contact.ContactQuickView";
      const preProcessorSettings = {
        bindingContexts: {},
        models: {}
      };
      const contactContext = metaModel.createBindingContext(payload.contact);
      if (payload.contact && contactContext) {
        preProcessorSettings.bindingContexts = {
          contact: contactContext
        };
        preProcessorSettings.models = {
          contact: metaModel
        };
      }
      const fragment = XMLTemplateProcessor.loadTemplate(fragmentName, "fragment");
      const templatedFragment = await XMLPreprocessor.process(fragment, {
        name: fragmentName
      }, preProcessorSettings);
      return Fragment.load({
        definition: templatedFragment,
        controller: this
      });
    },
    /**
     * Method calls by the mdc.field to determine what should be the content of the popup when mdcLink#open is called.
     *
     * @param payload
     * @param mdcLinkControl
     * @returns A promise containing the popover content
     */
    fetchAdditionalContent: async function (payload, mdcLinkControl) {
      var _payload$navigationPa;
      const navigateRegexpMatch = (_payload$navigationPa = payload.navigationPath) === null || _payload$navigationPa === void 0 ? void 0 : _payload$navigationPa.match(/{(.*?)}/);
      const bindingContext = navigateRegexpMatch && navigateRegexpMatch.length > 1 && navigateRegexpMatch[1] ? mdcLinkControl.getModel().bindContext(navigateRegexpMatch[1], mdcLinkControl.getBindingContext(), {
        $$ownRequest: true
      }) : null;
      if (mdcLinkControl.isA("sap.ui.mdc.Link")) {
        const metaModel = mdcLinkControl.getModel().getMetaModel();
        const popoverContent = await this._fnTemplateFragment(payload, metaModel);
        if (bindingContext) {
          popoverContent.setBindingContext(bindingContext.getBoundContext());
        }
        return [popoverContent];
      }
      return Promise.resolve([]);
    },
    fetchLinkType: async function () {
      return {
        initialType: {
          type: 2,
          // this means mdcLink.open will open a popup which shows content retrieved by fetchAdditionalContent
          directLink: undefined
        },
        runtimeType: undefined
      };
    }
  });
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/ContactDelegate", ["sap/ui/core/Fragment","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/mdc/LinkDelegate"],function(t,n,e,i){"use strict";return Object.assign({},i,{_fnTemplateFragment:async function(i,o){const c="sap.fe.macros.contact.ContactQuickView";const a={bindingContexts:{},models:{}};const s=o.createBindingContext(i.contact);if(i.contact&&s){a.bindingContexts={contact:s};a.models={contact:o}}const r=e.loadTemplate(c,"fragment");const d=await n.process(r,{name:c},a);return t.load({definition:d,controller:this})},fetchAdditionalContent:async function(t,n){var e;const i=(e=t.navigationPath)===null||e===void 0?void 0:e.match(/{(.*?)}/);const o=i&&i.length>1&&i[1]?n.getModel().bindContext(i[1],n.getBindingContext(),{$$ownRequest:true}):null;if(n.isA("sap.ui.mdc.Link")){const e=n.getModel().getMetaModel();const i=await this._fnTemplateFragment(t,e);if(o){i.setBindingContext(o.getBoundContext())}return[i]}return Promise.resolve([])},fetchLinkType:async function(){return{initialType:{type:2,directLink:undefined},runtimeType:undefined}}})},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/ContactHelper-dbg", ["sap/ui/core/Core"], function (Core) {
  "use strict";

  const oRB = Core.getLibraryResourceBundle("sap.ui.mdc");
  const ContactHelper = {
    // emails: first preferred, then work
    // phones : first work, then cell, then fax, then preferred
    // address : first preferred, then work
    formatUri: function (itemType, value) {
      switch (itemType) {
        case "phone":
          return `tel:${value}`;
        case "mail":
          return `mailto:${value}`;
        default:
          return value;
      }
    },
    formatAddress: function (street, code, locality, region, country) {
      const textToWrite = [];
      if (street) {
        textToWrite.push(street);
      }
      if (code && locality) {
        textToWrite.push(`${code} ${locality}`);
      } else {
        if (code) {
          textToWrite.push(code);
        }
        if (locality) {
          textToWrite.push(locality);
        }
      }
      if (region) {
        textToWrite.push(region);
      }
      if (country) {
        textToWrite.push(country);
      }
      return textToWrite.join(", ");
    },
    computeLabel: function (itemType, subType) {
      switch (itemType) {
        case "role":
          return oRB.getText("info.POPOVER_CONTACT_SECTION_ROLE");
        case "title":
          return oRB.getText("info.POPOVER_CONTACT_SECTION_JOBTITLE");
        case "org":
          return oRB.getText("info.POPOVER_CONTACT_SECTION_DEPARTMENT");
        case "phone":
          if (subType.indexOf("fax") > -1) {
            return oRB.getText("info.POPOVER_CONTACT_SECTION_FAX");
          } else if (subType.indexOf("work") > -1) {
            return oRB.getText("info.POPOVER_CONTACT_SECTION_PHONE");
          } else if (subType.indexOf("cell") > -1) {
            return oRB.getText("info.POPOVER_CONTACT_SECTION_MOBILE");
          } else if (subType.indexOf("preferred") > -1) {
            return oRB.getText("info.POPOVER_CONTACT_SECTION_PHONE");
          }
          break;
        case "mail":
          return oRB.getText("info.POPOVER_CONTACT_SECTION_EMAIL");
        case "address":
          return oRB.getText("info.POPOVER_CONTACT_SECTION_ADR");
        default:
          return "contactItem";
      }
    },
    getContactTitle: function () {
      return oRB.getText("info.POPOVER_CONTACT_SECTION_TITLE");
    },
    getAvatarInitials: function (oInitials) {
      return oInitials ? oInitials : "";
    }
  };
  return ContactHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/contact/ContactHelper", ["sap/ui/core/Core"],function(e){"use strict";const t=e.getLibraryResourceBundle("sap.ui.mdc");const n={formatUri:function(e,t){switch(e){case"phone":return`tel:${t}`;case"mail":return`mailto:${t}`;default:return t}},formatAddress:function(e,t,n,r,O){const i=[];if(e){i.push(e)}if(t&&n){i.push(`${t} ${n}`)}else{if(t){i.push(t)}if(n){i.push(n)}}if(r){i.push(r)}if(O){i.push(O)}return i.join(", ")},computeLabel:function(e,n){switch(e){case"role":return t.getText("info.POPOVER_CONTACT_SECTION_ROLE");case"title":return t.getText("info.POPOVER_CONTACT_SECTION_JOBTITLE");case"org":return t.getText("info.POPOVER_CONTACT_SECTION_DEPARTMENT");case"phone":if(n.indexOf("fax")>-1){return t.getText("info.POPOVER_CONTACT_SECTION_FAX")}else if(n.indexOf("work")>-1){return t.getText("info.POPOVER_CONTACT_SECTION_PHONE")}else if(n.indexOf("cell")>-1){return t.getText("info.POPOVER_CONTACT_SECTION_MOBILE")}else if(n.indexOf("preferred")>-1){return t.getText("info.POPOVER_CONTACT_SECTION_PHONE")}break;case"mail":return t.getText("info.POPOVER_CONTACT_SECTION_EMAIL");case"address":return t.getText("info.POPOVER_CONTACT_SECTION_ADR");default:return"contactItem"}},getContactTitle:function(){return t.getText("info.POPOVER_CONTACT_SECTION_TITLE")},getAvatarInitials:function(e){return e?e:""}};return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/ConditionalWrapper-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/Control"], function (ClassSupport, Control) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var association = ClassSupport.association;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ConditionalWrapper = (_dec = defineUI5Class("sap.fe.macros.controls.ConditionalWrapper"), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "sap.ui.core.CSSSize",
    defaultValue: null
  }), _dec4 = property({
    type: "boolean",
    defaultValue: false
  }), _dec5 = property({
    type: "boolean",
    defaultValue: false
  }), _dec6 = association({
    type: "sap.ui.core.Control",
    multiple: true,
    singularName: "ariaLabelledBy"
  }), _dec7 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec8 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(ConditionalWrapper, _Control);
    function ConditionalWrapper() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "width", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formDoNotAdjustWidth", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "condition", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contentTrue", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contentFalse", _descriptor7, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = ConditionalWrapper.prototype;
    _proto.enhanceAccessibilityState = function enhanceAccessibilityState(oElement, mAriaProps) {
      const oParent = this.getParent();
      if (oParent && oParent.enhanceAccessibilityState) {
        oParent.enhanceAccessibilityState(this, mAriaProps);
      }
      return mAriaProps;
    }

    /**
     * This function provides the current accessibility state of the control.
     *
     * @returns The accessibility info of the wrapped control
     */;
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      var _content;
      let content;
      if (this.condition) {
        content = this.contentTrue;
      } else {
        content = this.contentFalse;
      }
      return (_content = content) !== null && _content !== void 0 && _content.getAccessibilityInfo ? content.getAccessibilityInfo() : {};
    };
    _proto._setAriaLabelledBy = function _setAriaLabelledBy(oContent) {
      if (oContent && oContent.addAriaLabelledBy) {
        const aAriaLabelledBy = this.ariaLabelledBy;
        for (let i = 0; i < aAriaLabelledBy.length; i++) {
          const sId = aAriaLabelledBy[i];
          const aAriaLabelledBys = oContent.getAriaLabelledBy() || [];
          if (aAriaLabelledBys.indexOf(sId) === -1) {
            oContent.addAriaLabelledBy(sId);
          }
        }
      }
    };
    _proto.onBeforeRendering = function onBeforeRendering() {
      // before calling the renderer of the ConditionalWrapper parent control may have set ariaLabelledBy
      // we ensure it is passed to its inner controls
      this._setAriaLabelledBy(this.contentTrue);
      this._setAriaLabelledBy(this.contentFalse);
    };
    ConditionalWrapper.render = function render(oRm, oControl) {
      oRm.openStart("div", oControl);
      oRm.style("width", oControl.width);
      oRm.style("display", "inline-block");
      oRm.openEnd();
      if (oControl.condition) {
        oRm.renderControl(oControl.contentTrue);
      } else {
        oRm.renderControl(oControl.contentFalse);
      }
      oRm.close("div"); // end of the complete Control
    };
    return ConditionalWrapper;
  }(Control), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "width", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "formDoNotAdjustWidth", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "condition", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "contentTrue", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "contentFalse", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return ConditionalWrapper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/ConditionalWrapper", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/Control"],function(e,t){"use strict";var i,r,n,l,a,o,u,c,s,f,p,b,d,y,h,m,g;var v=e.property;var _=e.implementInterface;var w=e.defineUI5Class;var z=e.association;var A=e.aggregation;function C(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function B(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function L(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;O(e,t)}function O(e,t){O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return O(e,t)}function j(e,t,i,r,n){var l={};Object.keys(r).forEach(function(e){l[e]=r[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},l);if(n&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(n):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function F(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let I=(i=w("sap.fe.macros.controls.ConditionalWrapper"),r=_("sap.ui.core.IFormContent"),n=v({type:"sap.ui.core.CSSSize",defaultValue:null}),l=v({type:"boolean",defaultValue:false}),a=v({type:"boolean",defaultValue:false}),o=z({type:"sap.ui.core.Control",multiple:true,singularName:"ariaLabelledBy"}),u=A({type:"sap.ui.core.Control",multiple:false,isDefault:true}),c=A({type:"sap.ui.core.Control",multiple:false}),i(s=(f=function(e){L(t,e);function t(){var t;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}t=e.call(this,...r)||this;C(t,"__implements__sap_ui_core_IFormContent",p,B(t));C(t,"width",b,B(t));C(t,"formDoNotAdjustWidth",d,B(t));C(t,"condition",y,B(t));C(t,"ariaLabelledBy",h,B(t));C(t,"contentTrue",m,B(t));C(t,"contentFalse",g,B(t));return t}var i=t.prototype;i.enhanceAccessibilityState=function e(t,i){const r=this.getParent();if(r&&r.enhanceAccessibilityState){r.enhanceAccessibilityState(this,i)}return i};i.getAccessibilityInfo=function e(){var t;let i;if(this.condition){i=this.contentTrue}else{i=this.contentFalse}return(t=i)!==null&&t!==void 0&&t.getAccessibilityInfo?i.getAccessibilityInfo():{}};i._setAriaLabelledBy=function e(t){if(t&&t.addAriaLabelledBy){const e=this.ariaLabelledBy;for(let i=0;i<e.length;i++){const r=e[i];const n=t.getAriaLabelledBy()||[];if(n.indexOf(r)===-1){t.addAriaLabelledBy(r)}}}};i.onBeforeRendering=function e(){this._setAriaLabelledBy(this.contentTrue);this._setAriaLabelledBy(this.contentFalse)};t.render=function e(t,i){t.openStart("div",i);t.style("width",i.width);t.style("display","inline-block");t.openEnd();if(i.condition){t.renderControl(i.contentTrue)}else{t.renderControl(i.contentFalse)}t.close("div")};return t}(t),p=j(f.prototype,"__implements__sap_ui_core_IFormContent",[r],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),b=j(f.prototype,"width",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),d=j(f.prototype,"formDoNotAdjustWidth",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),y=j(f.prototype,"condition",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),h=j(f.prototype,"ariaLabelledBy",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),m=j(f.prototype,"contentTrue",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=j(f.prototype,"contentFalse",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),f))||s);return I},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/CustomFilterFieldContentWrapper-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/SemanticDateOperators", "sap/ui/base/ManagedObjectObserver", "sap/ui/core/Control", "sap/ui/mdc/condition/Condition", "sap/ui/mdc/enum/ConditionValidated", "sap/ui/mdc/field/ConditionsType", "sap/ui/model/json/JSONModel"], function (ClassSupport, SemanticDateOperators, ManagedObjectObserver, Control, Condition, ConditionValidated, ConditionsType, JSONModel) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _class3;
  var _exports = {};
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let CustomFilterFieldContentWrapper = (
  /**
   * @class
   * Creates an <code>sap.fe.macros.controls.CustomFilterFieldContentWrapper</code> object.
   * This is used in the {@link sap.ui.mdc.FilterField FilterField} as a filter content.
   * @extends sap.ui.core.Control
   * @private
   * @alias sap.fe.core.macros.CustomFilterFieldContentWrapper
   */
  _dec = defineUI5Class("sap.fe.macros.controls.CustomFilterFieldContentWrapper"), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "sap.ui.core.CSSSize",
    defaultValue: null
  }), _dec4 = property({
    type: "boolean",
    defaultValue: false
  }), _dec5 = property({
    type: "object[]",
    defaultValue: []
  }), _dec6 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec7 = event(), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(CustomFilterFieldContentWrapper, _Control);
    function CustomFilterFieldContentWrapper() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "width", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formDoNotAdjustWidth", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "conditions", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "content", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "conditionsChange", _descriptor6, _assertThisInitialized(_this));
      return _this;
    }
    _exports = CustomFilterFieldContentWrapper;
    CustomFilterFieldContentWrapper.render = function render(renderManager, control) {
      renderManager.openStart("div", control);
      renderManager.style("min-height", "1rem");
      renderManager.style("width", control.width);
      renderManager.openEnd();
      renderManager.renderControl(control.getContent()); // render the child Control
      renderManager.close("div"); // end of the complete Control
    }

    /**
     * Maps an array of filter values to an array of conditions.
     *
     * @param filterValues Array of filter value bindings or a filter value string
     * @param [operator] The operator to be used (optional) - if not set, the default operator (EQ) will be used
     * @private
     * @returns Array of filter conditions
     */;
    CustomFilterFieldContentWrapper._filterValuesToConditions = function _filterValuesToConditions(filterValues, operator) {
      let formatOptions = {
          operators: []
        },
        conditions = [];
      if (operator) {
        formatOptions = {
          operators: [operator]
        };
      }
      if (filterValues === "") {
        filterValues = [];
      } else if (typeof filterValues === "object" && filterValues.hasOwnProperty("operator") && filterValues.hasOwnProperty("values")) {
        formatOptions = {
          operators: [filterValues.operator]
        };
        filterValues = filterValues.values;
      } else if (filterValues !== undefined && typeof filterValues !== "object" && typeof filterValues !== "string") {
        throw new Error(`FilterUtils.js#_filterValuesToConditions: Unexpected type of input parameter vValues: ${typeof filterValues}`);
      }
      const conditionsType = new ConditionsType(formatOptions);
      const conditionValues = Array.isArray(filterValues) ? filterValues : [filterValues];

      // Shortcut for operator without values and semantic date operations
      if (typeof operator === "string" && (conditionValues.length === 0 || SemanticDateOperators.getSemanticDateOperations().includes(operator))) {
        conditions = [Condition.createCondition(operator, conditionValues, null, null, ConditionValidated.NotValidated)];
      } else {
        conditions = conditionValues.map(conditionValue => {
          const stringValue = conditionValue === null || conditionValue === void 0 ? void 0 : conditionValue.toString(),
            parsedConditions = conditionsType.parseValue(stringValue, "any");
          return parsedConditions === null || parsedConditions === void 0 ? void 0 : parsedConditions[0];
        }).filter(conditionValue => conditionValue !== undefined);
      }
      return conditions;
    }

    /**
     * Maps an array of conditions to a comma separated list of filter values.
     *
     * @param conditions Array of filter conditions
     * @param formatOptions Format options that specifies a condition type
     * @private
     * @returns Concatenated string of filter values
     */;
    CustomFilterFieldContentWrapper._conditionsToFilterModelString = function _conditionsToFilterModelString(conditions, formatOptions) {
      const conditionsType = new ConditionsType(formatOptions);
      return conditions.map(condition => {
        return conditionsType.formatValue([condition], "any") || "";
      }).filter(stringValue => {
        return stringValue !== "";
      }).join(",");
    }

    /**
     * Listens to filter model changes and updates wrapper property "conditions".
     *
     * @param changeEvent Event triggered by a filter model change
     * @private
     */;
    var _proto = CustomFilterFieldContentWrapper.prototype;
    _proto._handleFilterModelChange = function _handleFilterModelChange(changeEvent) {
      var _this$getObjectBindin;
      const propertyPath = (_this$getObjectBindin = this.getObjectBinding("filterValues")) === null || _this$getObjectBindin === void 0 ? void 0 : _this$getObjectBindin.getPath(),
        values = changeEvent.getSource().getProperty(propertyPath);
      this.updateConditionsByFilterValues(values, "");
    }

    /**
     * Listens to "conditions" changes and updates the filter model.
     *
     * @param conditions Event triggered by a "conditions" change
     * @private
     */;
    _proto._handleConditionsChange = function _handleConditionsChange(conditions) {
      this.updateFilterModelByConditions(conditions);
    }

    /**
     * Initialize CustomFilterFieldContentWrapper control and register observer.
     */;
    _proto.init = function init() {
      _Control.prototype.init.call(this);
      this._conditionsObserver = new ManagedObjectObserver(this._observeChanges.bind(this));
      this._conditionsObserver.observe(this, {
        properties: ["conditions"]
      });
      this._filterModel = new JSONModel();
      this._filterModel.attachPropertyChange(this._handleFilterModelChange, this);
      this.setModel(this._filterModel, CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS);
    }

    /**
     * Overrides {@link sap.ui.core.Control#clone Control.clone} to clone additional
     * internal states.
     *
     * @param [sIdSuffix] A suffix to be appended to the cloned control id
     * @param [aLocalIds] An array of local IDs within the cloned hierarchy (internally used)
     * @returns Reference to the newly created clone
     * @protected
     */;
    _proto.clone = function clone(sIdSuffix, aLocalIds) {
      const clone = _Control.prototype.clone.call(this, sIdSuffix, aLocalIds);
      // During cloning, the old model will be copied and overwrites any new model (same alias) that
      // you introduce during init(); hence you need to overwrite it again by the new one that you've
      // created during init() (i.e. clone._filterModel); that standard behaviour of super.clone()
      // can't even be suppressed in an own constructor; for a detailed investigation of the cloning,
      // please overwrite the setModel() method and check the list of callers and steps induced by them.
      clone.setModel(clone._filterModel, CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS);
      return clone;
    }

    /**
     * Listens to property changes.
     *
     * @param changes Property changes
     * @private
     */;
    _proto._observeChanges = function _observeChanges(changes) {
      if (changes.name === "conditions") {
        this._handleConditionsChange(changes.current);
      }
    }

    /**
     * Gets the content of this wrapper control.
     *
     * @returns The wrapper content
     * @private
     */;
    _proto.getContent = function getContent() {
      return this.getAggregation("content");
    }

    /**
     * Gets the value for control property 'conditions'.
     *
     * @returns Array of filter conditions
     * @private
     */;
    _proto.getConditions = function getConditions() {
      return this.getProperty("conditions");
    }

    /**
     * Sets the value for control property 'conditions'.
     *
     * @param [conditions] Array of filter conditions
     * @returns Reference to this wrapper
     * @private
     */;
    _proto.setConditions = function setConditions(conditions) {
      this.setProperty("conditions", conditions || []);
      return this;
    }

    /**
     * Gets the filter model alias 'filterValues'.
     *
     * @returns The filter model
     * @private
     */;
    _proto.getFilterModelAlias = function getFilterModelAlias() {
      return CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS;
    }

    /**
     * Updates the property "conditions" with filter values
     * sent by ExtensionAPI#setFilterValues().
     *
     * @param values The filter values
     * @param [operator] The operator name
     * @private
     */;
    _proto.updateConditionsByFilterValues = function updateConditionsByFilterValues(values, operator) {
      const conditions = CustomFilterFieldContentWrapper._filterValuesToConditions(values, operator);
      this.setConditions(conditions);
    }

    /**
     * Updates filter model with conditions
     * sent by the {@link sap.ui.mdc.FilterField FilterField}.
     *
     * @param conditions Array of filter conditions
     * @private
     */;
    _proto.updateFilterModelByConditions = function updateFilterModelByConditions(conditions) {
      var _conditions$;
      const operator = ((_conditions$ = conditions[0]) === null || _conditions$ === void 0 ? void 0 : _conditions$.operator) || "";
      const formatOptions = operator !== "" ? {
        operators: [operator]
      } : {
        operators: []
      };
      if (this.getBindingContext(CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS)) {
        var _this$getBindingConte;
        const stringValue = CustomFilterFieldContentWrapper._conditionsToFilterModelString(conditions, formatOptions);
        this._filterModel.setProperty((_this$getBindingConte = this.getBindingContext(CustomFilterFieldContentWrapper.FILTER_MODEL_ALIAS)) === null || _this$getBindingConte === void 0 ? void 0 : _this$getBindingConte.getPath(), stringValue);
      }
    };
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      var _content$getAccessibi;
      const content = this.getContent();
      return (content === null || content === void 0 ? void 0 : (_content$getAccessibi = content.getAccessibilityInfo) === null || _content$getAccessibi === void 0 ? void 0 : _content$getAccessibi.call(content)) || {};
    }

    /**
     * Returns the DOMNode ID to be used for the "labelFor" attribute.
     *
     * We forward the call of this method to the content control.
     *
     * @returns ID to be used for the <code>labelFor</code>
     */;
    _proto.getIdForLabel = function getIdForLabel() {
      const content = this.getContent();
      return content === null || content === void 0 ? void 0 : content.getIdForLabel();
    };
    return CustomFilterFieldContentWrapper;
  }(Control), _class3.FILTER_MODEL_ALIAS = "filterValues", _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "width", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "formDoNotAdjustWidth", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "conditions", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "conditionsChange", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = CustomFilterFieldContentWrapper;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/CustomFilterFieldContentWrapper", ["sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/SemanticDateOperators","sap/ui/base/ManagedObjectObserver","sap/ui/core/Control","sap/ui/mdc/condition/Condition","sap/ui/mdc/enum/ConditionValidated","sap/ui/mdc/field/ConditionsType","sap/ui/model/json/JSONModel"],function(e,t,i,n,o,r,l,a){"use strict";var s,u,c,d,p,f,h,g,b,v,y,_,C,m,w,O;var F={};var M=e.property;var A=e.implementInterface;var I=e.event;var L=e.defineUI5Class;var S=e.aggregation;function E(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function j(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function z(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;V(e,t)}function V(e,t){V=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return V(e,t)}function P(e,t,i,n,o){var r={};Object.keys(n).forEach(function(e){r[e]=n[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},r);if(o&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(o):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function D(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let T=(s=L("sap.fe.macros.controls.CustomFilterFieldContentWrapper"),u=A("sap.ui.core.IFormContent"),c=M({type:"sap.ui.core.CSSSize",defaultValue:null}),d=M({type:"boolean",defaultValue:false}),p=M({type:"object[]",defaultValue:[]}),f=S({type:"sap.ui.core.Control",multiple:false,isDefault:true}),h=I(),s(g=(b=(O=function(e){z(n,e);function n(){var t;for(var i=arguments.length,n=new Array(i),o=0;o<i;o++){n[o]=arguments[o]}t=e.call(this,...n)||this;E(t,"__implements__sap_ui_core_IFormContent",v,j(t));E(t,"width",y,j(t));E(t,"formDoNotAdjustWidth",_,j(t));E(t,"conditions",C,j(t));E(t,"content",m,j(t));E(t,"conditionsChange",w,j(t));return t}F=n;n.render=function e(t,i){t.openStart("div",i);t.style("min-height","1rem");t.style("width",i.width);t.openEnd();t.renderControl(i.getContent());t.close("div")};n._filterValuesToConditions=function e(i,n){let a={operators:[]},s=[];if(n){a={operators:[n]}}if(i===""){i=[]}else if(typeof i==="object"&&i.hasOwnProperty("operator")&&i.hasOwnProperty("values")){a={operators:[i.operator]};i=i.values}else if(i!==undefined&&typeof i!=="object"&&typeof i!=="string"){throw new Error(`FilterUtils.js#_filterValuesToConditions: Unexpected type of input parameter vValues: ${typeof i}`)}const u=new l(a);const c=Array.isArray(i)?i:[i];if(typeof n==="string"&&(c.length===0||t.getSemanticDateOperations().includes(n))){s=[o.createCondition(n,c,null,null,r.NotValidated)]}else{s=c.map(e=>{const t=e===null||e===void 0?void 0:e.toString(),i=u.parseValue(t,"any");return i===null||i===void 0?void 0:i[0]}).filter(e=>e!==undefined)}return s};n._conditionsToFilterModelString=function e(t,i){const n=new l(i);return t.map(e=>n.formatValue([e],"any")||"").filter(e=>e!=="").join(",")};var s=n.prototype;s._handleFilterModelChange=function e(t){var i;const n=(i=this.getObjectBinding("filterValues"))===null||i===void 0?void 0:i.getPath(),o=t.getSource().getProperty(n);this.updateConditionsByFilterValues(o,"")};s._handleConditionsChange=function e(t){this.updateFilterModelByConditions(t)};s.init=function t(){e.prototype.init.call(this);this._conditionsObserver=new i(this._observeChanges.bind(this));this._conditionsObserver.observe(this,{properties:["conditions"]});this._filterModel=new a;this._filterModel.attachPropertyChange(this._handleFilterModelChange,this);this.setModel(this._filterModel,n.FILTER_MODEL_ALIAS)};s.clone=function t(i,o){const t=e.prototype.clone.call(this,i,o);t.setModel(t._filterModel,n.FILTER_MODEL_ALIAS);return t};s._observeChanges=function e(t){if(t.name==="conditions"){this._handleConditionsChange(t.current)}};s.getContent=function e(){return this.getAggregation("content")};s.getConditions=function e(){return this.getProperty("conditions")};s.setConditions=function e(t){this.setProperty("conditions",t||[]);return this};s.getFilterModelAlias=function e(){return n.FILTER_MODEL_ALIAS};s.updateConditionsByFilterValues=function e(t,i){const o=n._filterValuesToConditions(t,i);this.setConditions(o)};s.updateFilterModelByConditions=function e(t){var i;const o=((i=t[0])===null||i===void 0?void 0:i.operator)||"";const r=o!==""?{operators:[o]}:{operators:[]};if(this.getBindingContext(n.FILTER_MODEL_ALIAS)){var l;const e=n._conditionsToFilterModelString(t,r);this._filterModel.setProperty((l=this.getBindingContext(n.FILTER_MODEL_ALIAS))===null||l===void 0?void 0:l.getPath(),e)}};s.getAccessibilityInfo=function e(){var t;const i=this.getContent();return(i===null||i===void 0?void 0:(t=i.getAccessibilityInfo)===null||t===void 0?void 0:t.call(i))||{}};s.getIdForLabel=function e(){const t=this.getContent();return t===null||t===void 0?void 0:t.getIdForLabel()};return n}(n),O.FILTER_MODEL_ALIAS="filterValues",O),v=P(b.prototype,"__implements__sap_ui_core_IFormContent",[u],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),y=P(b.prototype,"width",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),_=P(b.prototype,"formDoNotAdjustWidth",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),C=P(b.prototype,"conditions",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),m=P(b.prototype,"content",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),w=P(b.prototype,"conditionsChange",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),b))||g);F=T;return F},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/CustomQuickViewPage-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/KeepAliveHelper", "sap/fe/macros/DelegateUtil", "sap/m/QuickViewPage"], function (CommonUtils, ClassSupport, KeepAliveHelper, DelegateUtil, QuickViewPage) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let CustomQuickViewPage = (_dec = defineUI5Class("sap.fe.macros.controls.CustomQuickViewPage"), _dec2 = aggregation({
    type: "sap.ui.core.Control",
    multiple: true
  }), _dec3 = aggregation({
    type: "sap.m.QuickViewGroup",
    multiple: true,
    singularName: "group",
    isDefault: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_QuickViewPage) {
    _inheritsLoose(CustomQuickViewPage, _QuickViewPage);
    function CustomQuickViewPage() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _QuickViewPage.call(this, ...args) || this;
      _initializerDefineProperty(_this, "customContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "groups", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = CustomQuickViewPage.prototype;
    _proto.onBeforeRendering = function onBeforeRendering(oEvent) {
      const parent = this.getParent();
      if (parent && parent.isA("sap.fe.macros.controls.ConditionalWrapper") && parent.getProperty("condition") === true) {
        this.setCrossAppNavCallback(() => {
          const sQuickViewPageTitleLinkHref = DelegateUtil.getCustomData(this, "titleLink");
          const oView = CommonUtils.getTargetView(this);
          const oAppComponent = CommonUtils.getAppComponent(oView);
          const oShellServiceHelper = oAppComponent.getShellServices();
          let oShellHash = oShellServiceHelper.parseShellHash(sQuickViewPageTitleLinkHref);
          const oNavArgs = {
            target: {
              semanticObject: oShellHash.semanticObject,
              action: oShellHash.action
            },
            params: oShellHash.params
          };
          const sQuickViewPageTitleLinkIntent = `${oNavArgs.target.semanticObject}-${oNavArgs.target.action}`;
          if (sQuickViewPageTitleLinkIntent && typeof sQuickViewPageTitleLinkIntent === "string" && sQuickViewPageTitleLinkIntent !== "" && this.oCrossAppNavigator && this.oCrossAppNavigator.isNavigationSupported([sQuickViewPageTitleLinkIntent])) {
            var _oLinkControl;
            let oLinkControl = this.getParent();
            while (oLinkControl && !oLinkControl.isA("sap.ui.mdc.Link")) {
              oLinkControl = oLinkControl.getParent();
            }
            const sTargetHref = ((_oLinkControl = oLinkControl) === null || _oLinkControl === void 0 ? void 0 : _oLinkControl.getModel("$sapuimdcLink")).getProperty("/titleLinkHref");
            if (sTargetHref) {
              oShellHash = oShellServiceHelper.parseShellHash(sTargetHref);
            } else {
              oShellHash = oShellServiceHelper.parseShellHash(sQuickViewPageTitleLinkIntent);
              oShellHash.params = oNavArgs.params;
            }
            KeepAliveHelper.storeControlRefreshStrategyForHash(oView, oShellHash);
            return {
              target: {
                semanticObject: oShellHash.semanticObject,
                action: oShellHash.action
              },
              params: oShellHash.params
            };
          } else {
            const oCurrentShellHash = oShellServiceHelper.parseShellHash(window.location.hash);
            KeepAliveHelper.storeControlRefreshStrategyForHash(oView, oCurrentShellHash);
            return {
              target: {
                semanticObject: oCurrentShellHash.semanticObject,
                action: oCurrentShellHash.action,
                appSpecificRoute: oCurrentShellHash.appSpecificRoute
              },
              params: oCurrentShellHash.params
            };
          }
        });
      }
      _QuickViewPage.prototype.onBeforeRendering.call(this, oEvent);
      const oPageContent = this.getPageContent();
      const oForm = oPageContent.form;
      if (oForm) {
        const _aContent = this.customContent;
        if (_aContent && _aContent.length > 0) {
          _aContent.forEach(_oContent => {
            const _oContentClone = _oContent.clone();
            _oContentClone.setModel(this.getModel());
            _oContentClone.setBindingContext(this.getBindingContext());
            oForm.addContent(_oContentClone);
          });
          setTimeout(function () {
            oForm.rerender();
          }, 0);
        }
      }
    };
    return CustomQuickViewPage;
  }(QuickViewPage), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "customContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "groups", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return CustomQuickViewPage;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/CustomQuickViewPage", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/KeepAliveHelper","sap/fe/macros/DelegateUtil","sap/m/QuickViewPage"],function(e,t,r,i,n){"use strict";var o,a,s,l,c,u,p;var f=t.defineUI5Class;var g=t.aggregation;function h(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function m(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function d(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;b(e,t)}function b(e,t){b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return b(e,t)}function v(e,t,r,i,n){var o={};Object.keys(i).forEach(function(e){o[e]=i[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function y(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let C=(o=f("sap.fe.macros.controls.CustomQuickViewPage"),a=g({type:"sap.ui.core.Control",multiple:true}),s=g({type:"sap.m.QuickViewGroup",multiple:true,singularName:"group",isDefault:true}),o(l=(c=function(t){d(n,t);function n(){var e;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++){i[n]=arguments[n]}e=t.call(this,...i)||this;h(e,"customContent",u,m(e));h(e,"groups",p,m(e));return e}var o=n.prototype;o.onBeforeRendering=function n(o){const a=this.getParent();if(a&&a.isA("sap.fe.macros.controls.ConditionalWrapper")&&a.getProperty("condition")===true){this.setCrossAppNavCallback(()=>{const t=i.getCustomData(this,"titleLink");const n=e.getTargetView(this);const o=e.getAppComponent(n);const a=o.getShellServices();let s=a.parseShellHash(t);const l={target:{semanticObject:s.semanticObject,action:s.action},params:s.params};const c=`${l.target.semanticObject}-${l.target.action}`;if(c&&typeof c==="string"&&c!==""&&this.oCrossAppNavigator&&this.oCrossAppNavigator.isNavigationSupported([c])){var u;let e=this.getParent();while(e&&!e.isA("sap.ui.mdc.Link")){e=e.getParent()}const t=((u=e)===null||u===void 0?void 0:u.getModel("$sapuimdcLink")).getProperty("/titleLinkHref");if(t){s=a.parseShellHash(t)}else{s=a.parseShellHash(c);s.params=l.params}r.storeControlRefreshStrategyForHash(n,s);return{target:{semanticObject:s.semanticObject,action:s.action},params:s.params}}else{const e=a.parseShellHash(window.location.hash);r.storeControlRefreshStrategyForHash(n,e);return{target:{semanticObject:e.semanticObject,action:e.action,appSpecificRoute:e.appSpecificRoute},params:e.params}}})}t.prototype.onBeforeRendering.call(this,o);const s=this.getPageContent();const l=s.form;if(l){const e=this.customContent;if(e&&e.length>0){e.forEach(e=>{const t=e.clone();t.setModel(this.getModel());t.setBindingContext(this.getBindingContext());l.addContent(t)});setTimeout(function(){l.rerender()},0)}}};return n}(n),u=v(c.prototype,"customContent",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),p=v(c.prototype,"groups",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),c))||l);return C},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/FieldWrapper-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/Control"], function (ClassSupport, Control) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var association = ClassSupport.association;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FieldWrapper = (_dec = defineUI5Class("sap.fe.macros.controls.FieldWrapper"), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "sap.ui.core.TextAlign"
  }), _dec4 = property({
    type: "sap.ui.core.CSSSize",
    defaultValue: null
  }), _dec5 = property({
    type: "boolean",
    defaultValue: false
  }), _dec6 = property({
    type: "string",
    defaultValue: "Display"
  }), _dec7 = property({
    type: "boolean",
    defaultValue: false
  }), _dec8 = association({
    type: "sap.ui.core.Control",
    multiple: true,
    singularName: "ariaLabelledBy"
  }), _dec9 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec10 = aggregation({
    type: "sap.ui.core.Control",
    multiple: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(FieldWrapper, _Control);
    function FieldWrapper() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "textAlign", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "width", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formDoNotAdjustWidth", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "editMode", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "required", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contentDisplay", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contentEdit", _descriptor9, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = FieldWrapper.prototype;
    _proto.enhanceAccessibilityState = function enhanceAccessibilityState(oElement, mAriaProps) {
      const oParent = this.getParent();
      if (oParent && oParent.enhanceAccessibilityState) {
        // use FieldWrapper as control, but aria properties of rendered inner control.
        oParent.enhanceAccessibilityState(this, mAriaProps);
      }
      return mAriaProps;
    };
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      let oContent;
      if (this.editMode === "Display") {
        oContent = this.contentDisplay;
      } else {
        oContent = this.contentEdit.length ? this.contentEdit[0] : null;
      }
      return oContent && oContent.getAccessibilityInfo ? oContent.getAccessibilityInfo() : {};
    }

    /**
     * Returns the DOMNode ID to be used for the "labelFor" attribute.
     *
     * We forward the call of this method to the content control.
     *
     * @returns ID to be used for the <code>labelFor</code>
     */;
    _proto.getIdForLabel = function getIdForLabel() {
      var _oContent;
      let oContent;
      if (this.editMode === "Display") {
        oContent = this.contentDisplay;
      } else {
        oContent = this.contentEdit.length ? this.contentEdit[0] : null;
      }
      return (_oContent = oContent) === null || _oContent === void 0 ? void 0 : _oContent.getIdForLabel();
    };
    _proto._setAriaLabelledBy = function _setAriaLabelledBy(oContent) {
      if (oContent && oContent.addAriaLabelledBy) {
        const aAriaLabelledBy = this.ariaLabelledBy;
        for (let i = 0; i < aAriaLabelledBy.length; i++) {
          const sId = aAriaLabelledBy[i];
          const aAriaLabelledBys = oContent.getAriaLabelledBy() || [];
          if (aAriaLabelledBys.indexOf(sId) === -1) {
            oContent.addAriaLabelledBy(sId);
          }
        }
      }
    };
    _proto.onBeforeRendering = function onBeforeRendering() {
      // before calling the renderer of the FieldWrapper parent control may have set ariaLabelledBy
      // we ensure it is passed to its inner controls
      this._setAriaLabelledBy(this.contentDisplay);
      const aContentEdit = this.contentEdit;
      for (let i = 0; i < aContentEdit.length; i++) {
        this._setAriaLabelledBy(aContentEdit[i]);
      }
    };
    FieldWrapper.render = function render(oRm, oControl) {
      oRm.openStart("div", oControl);
      oRm.style("text-align", oControl.textAlign);
      if (oControl.editMode === "Display") {
        oRm.style("width", oControl.width);
        oRm.openEnd();
        oRm.renderControl(oControl.contentDisplay); // render the child Control for display
      } else {
        const aContentEdit = oControl.contentEdit;

        // if (aContentEdit.length > 1) {
        // 	oRm.class("sapUiMdcFieldBaseMoreFields");
        // }
        oRm.style("width", oControl.width);
        oRm.openEnd();
        for (let i = 0; i < aContentEdit.length; i++) {
          const oContent = aContentEdit[i]; // render the child Control  for edit
          oRm.renderControl(oContent);
        }
      }
      oRm.close("div"); // end of the complete Control
    };
    return FieldWrapper;
  }(Control), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "textAlign", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "width", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "formDoNotAdjustWidth", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "editMode", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "required", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "contentDisplay", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "contentEdit", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FieldWrapper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/FieldWrapper", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/Control"],function(e,t){"use strict";var i,r,n,l,a,o,u,s,c,p,d,f,b,y,h,g,m,v,w,_,A;var z=e.property;var D=e.implementInterface;var E=e.defineUI5Class;var C=e.association;var L=e.aggregation;function B(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function I(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function O(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;j(e,t)}function j(e,t){j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return j(e,t)}function S(e,t,i,r,n){var l={};Object.keys(r).forEach(function(e){l[e]=r[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},l);if(n&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(n):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function x(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let F=(i=E("sap.fe.macros.controls.FieldWrapper"),r=D("sap.ui.core.IFormContent"),n=z({type:"sap.ui.core.TextAlign"}),l=z({type:"sap.ui.core.CSSSize",defaultValue:null}),a=z({type:"boolean",defaultValue:false}),o=z({type:"string",defaultValue:"Display"}),u=z({type:"boolean",defaultValue:false}),s=C({type:"sap.ui.core.Control",multiple:true,singularName:"ariaLabelledBy"}),c=L({type:"sap.ui.core.Control",multiple:false,isDefault:true}),p=L({type:"sap.ui.core.Control",multiple:true}),i(d=(f=function(e){O(t,e);function t(){var t;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}t=e.call(this,...r)||this;B(t,"__implements__sap_ui_core_IFormContent",b,I(t));B(t,"textAlign",y,I(t));B(t,"width",h,I(t));B(t,"formDoNotAdjustWidth",g,I(t));B(t,"editMode",m,I(t));B(t,"required",v,I(t));B(t,"ariaLabelledBy",w,I(t));B(t,"contentDisplay",_,I(t));B(t,"contentEdit",A,I(t));return t}var i=t.prototype;i.enhanceAccessibilityState=function e(t,i){const r=this.getParent();if(r&&r.enhanceAccessibilityState){r.enhanceAccessibilityState(this,i)}return i};i.getAccessibilityInfo=function e(){let t;if(this.editMode==="Display"){t=this.contentDisplay}else{t=this.contentEdit.length?this.contentEdit[0]:null}return t&&t.getAccessibilityInfo?t.getAccessibilityInfo():{}};i.getIdForLabel=function e(){var t;let i;if(this.editMode==="Display"){i=this.contentDisplay}else{i=this.contentEdit.length?this.contentEdit[0]:null}return(t=i)===null||t===void 0?void 0:t.getIdForLabel()};i._setAriaLabelledBy=function e(t){if(t&&t.addAriaLabelledBy){const e=this.ariaLabelledBy;for(let i=0;i<e.length;i++){const r=e[i];const n=t.getAriaLabelledBy()||[];if(n.indexOf(r)===-1){t.addAriaLabelledBy(r)}}}};i.onBeforeRendering=function e(){this._setAriaLabelledBy(this.contentDisplay);const t=this.contentEdit;for(let e=0;e<t.length;e++){this._setAriaLabelledBy(t[e])}};t.render=function e(t,i){t.openStart("div",i);t.style("text-align",i.textAlign);if(i.editMode==="Display"){t.style("width",i.width);t.openEnd();t.renderControl(i.contentDisplay)}else{const e=i.contentEdit;t.style("width",i.width);t.openEnd();for(let i=0;i<e.length;i++){const r=e[i];t.renderControl(r)}}t.close("div")};return t}(t),b=S(f.prototype,"__implements__sap_ui_core_IFormContent",[r],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),y=S(f.prototype,"textAlign",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),h=S(f.prototype,"width",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),g=S(f.prototype,"formDoNotAdjustWidth",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),m=S(f.prototype,"editMode",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),v=S(f.prototype,"required",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),w=S(f.prototype,"ariaLabelledBy",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),_=S(f.prototype,"contentDisplay",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),A=S(f.prototype,"contentEdit",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),f))||d);return F},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/FileWrapper-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ResourceModelHelper", "sap/m/BusyDialog", "./FieldWrapper"], function (CommonUtils, MetaModelConverter, ClassSupport, ResourceModelHelper, BusyDialog, FieldWrapper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FileWrapper = (_dec = defineUI5Class("sap.fe.macros.controls.FileWrapper"), _dec2 = property({
    type: "sap.ui.core.URI"
  }), _dec3 = property({
    type: "string"
  }), _dec4 = property({
    type: "string"
  }), _dec5 = property({
    type: "string"
  }), _dec6 = aggregation({
    type: "sap.m.Avatar",
    multiple: false
  }), _dec7 = aggregation({
    type: "sap.ui.core.Icon",
    multiple: false
  }), _dec8 = aggregation({
    type: "sap.m.Link",
    multiple: false
  }), _dec9 = aggregation({
    type: "sap.m.Text",
    multiple: false
  }), _dec10 = aggregation({
    type: "sap.ui.unified.FileUploader",
    multiple: false
  }), _dec11 = aggregation({
    type: "sap.m.Button",
    multiple: false
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_FieldWrapper) {
    _inheritsLoose(FileWrapper, _FieldWrapper);
    function FileWrapper() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _FieldWrapper.call(this, ...args) || this;
      _initializerDefineProperty(_this, "uploadUrl", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "propertyPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filename", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "mediaType", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "avatar", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "icon", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "link", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "text", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "fileUploader", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "deleteButton", _descriptor10, _assertThisInitialized(_this));
      _this._busy = false;
      return _this;
    }
    var _proto = FileWrapper.prototype;
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      const accInfo = [];
      if (this.avatar) {
        accInfo.push(this.avatar);
      }
      if (this.icon) {
        accInfo.push(this.icon);
      }
      if (this.link) {
        accInfo.push(this.link);
      }
      if (this.text) {
        accInfo.push(this.text);
      }
      if (this.fileUploader) {
        accInfo.push(this.fileUploader);
      }
      if (this.deleteButton) {
        accInfo.push(this.deleteButton);
      }
      return {
        children: accInfo
      };
    };
    _proto.onBeforeRendering = function onBeforeRendering() {
      this._setAriaLabels();
      this._addSideEffects();
    };
    _proto._setAriaLabels = function _setAriaLabels() {
      this._setAriaLabelledBy(this.avatar);
      this._setAriaLabelledBy(this.icon);
      this._setAriaLabelledBy(this.link);
      this._setAriaLabelledBy(this.text);
      this._setAriaLabelledBy(this.fileUploader);
      this._setAriaLabelledBy(this.deleteButton);
    };
    _proto._addSideEffects = function _addSideEffects() {
      var _this$_getSideEffectC;
      // add control SideEffects for stream content, filename and mediatype
      const navigationProperties = [],
        view = CommonUtils.getTargetView(this),
        viewDataFullContextPath = view.getViewData().fullContextPath,
        metaModel = view.getModel().getMetaModel(),
        metaModelPath = metaModel.getMetaPath(viewDataFullContextPath),
        viewContext = metaModel.getContext(viewDataFullContextPath),
        dataViewModelPath = MetaModelConverter.getInvolvedDataModelObjects(viewContext),
        sourcePath = this.data("sourcePath"),
        fieldPath = sourcePath.replace(`${metaModelPath}`, ""),
        path = fieldPath.replace(this.propertyPath, "");
      navigationProperties.push({
        $NavigationPropertyPath: fieldPath
      });
      if (this.filename) {
        navigationProperties.push({
          $NavigationPropertyPath: path + this.filename
        });
      }
      if (this.mediaType) {
        navigationProperties.push({
          $NavigationPropertyPath: path + this.mediaType
        });
      }
      (_this$_getSideEffectC = this._getSideEffectController()) === null || _this$_getSideEffectC === void 0 ? void 0 : _this$_getSideEffectC.addControlSideEffects(dataViewModelPath.targetEntityType.fullyQualifiedName, {
        sourceProperties: [fieldPath],
        targetEntities: navigationProperties,
        sourceControlId: this.getId()
      });
    };
    _proto._getSideEffectController = function _getSideEffectController() {
      const controller = this._getViewController();
      return controller ? controller._sideEffects : undefined;
    };
    _proto._getViewController = function _getViewController() {
      const view = CommonUtils.getTargetView(this);
      return view && view.getController();
    };
    _proto.getUploadUrl = function getUploadUrl() {
      // set upload url as canonical url for NavigationProperties
      // this is a workaround as some backends cannot resolve NavigationsProperties for stream types
      const context = this.getBindingContext();
      return context && this.uploadUrl ? this.uploadUrl.replace(context.getPath(), context.getCanonicalPath()) : "";
    };
    _proto.setUIBusy = function setUIBusy(busy) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const that = this;
      this._busy = busy;
      if (busy) {
        if (!this.busyDialog) {
          this.busyDialog = new BusyDialog({
            text: getResourceModel(this).getText("M_FILEWRAPPER_BUSY_DIALOG_TITLE"),
            showCancelButton: false
          });
        }
        setTimeout(function () {
          if (that._busy) {
            var _that$busyDialog;
            (_that$busyDialog = that.busyDialog) === null || _that$busyDialog === void 0 ? void 0 : _that$busyDialog.open();
          }
        }, 1000);
      } else {
        var _this$busyDialog;
        (_this$busyDialog = this.busyDialog) === null || _this$busyDialog === void 0 ? void 0 : _this$busyDialog.close(false);
      }
    };
    _proto.getUIBusy = function getUIBusy() {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      return this._busy;
    };
    FileWrapper.render = function render(renderManager, fileWrapper) {
      renderManager.openStart("div", fileWrapper); // FileWrapper control div
      renderManager.style("width", fileWrapper.width);
      renderManager.openEnd();

      // Outer Box
      renderManager.openStart("div"); // div for all controls
      renderManager.style("display", "flex");
      renderManager.style("box-sizing", "border-box");
      renderManager.style("justify-content", "space-between");
      renderManager.style("align-items", "center");
      renderManager.style("flex-wrap", "wrap");
      renderManager.style("align-content", "stretch");
      renderManager.style("width", "100%");
      renderManager.openEnd();

      // Display Mode
      renderManager.openStart("div"); // div for controls shown in Display mode
      renderManager.style("display", "flex");
      renderManager.style("align-items", "center");
      renderManager.openEnd();
      if (fileWrapper.avatar) {
        renderManager.renderControl(fileWrapper.avatar); // render the Avatar Control
      } else {
        renderManager.renderControl(fileWrapper.icon); // render the Icon Control
        renderManager.renderControl(fileWrapper.link); // render the Link Control
        renderManager.renderControl(fileWrapper.text); // render the Text Control for empty file indication
      }

      renderManager.close("div"); // div for controls shown in Display mode

      // Additional content for Edit Mode
      renderManager.openStart("div"); // div for controls shown in Display + Edit mode
      renderManager.style("display", "flex");
      renderManager.style("align-items", "center");
      renderManager.openEnd();
      renderManager.renderControl(fileWrapper.fileUploader); // render the FileUploader Control
      renderManager.renderControl(fileWrapper.deleteButton); // render the Delete Button Control
      renderManager.close("div"); // div for controls shown in Display + Edit mode

      renderManager.close("div"); // div for all controls

      renderManager.close("div"); // end of the complete Control
    };
    _proto.destroy = function destroy(bSuppressInvalidate) {
      const oSideEffects = this._getSideEffectController();
      if (oSideEffects) {
        oSideEffects.removeControlSideEffects(this);
      }
      delete this.busyDialog;
      FieldWrapper.prototype.destroy.apply(this, [bSuppressInvalidate]);
    };
    return FileWrapper;
  }(FieldWrapper), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "uploadUrl", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "propertyPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "filename", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "mediaType", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "avatar", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "icon", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "link", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "text", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "fileUploader", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "deleteButton", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FileWrapper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/controls/FileWrapper", ["sap/fe/core/CommonUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ResourceModelHelper","sap/m/BusyDialog","./FieldWrapper"],function(e,t,i,r,l,n){"use strict";var a,o,s,u,p,f,c,d,h,y,b,g,v,m,w,_,C,P,B,E,z,U,x;var A=r.getResourceModel;var S=i.property;var I=i.defineUI5Class;var L=i.aggregation;function T(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function D(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function M(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;O(e,t)}function O(e,t){O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return O(e,t)}function j(e,t,i,r,l){var n={};Object.keys(r).forEach(function(e){n[e]=r[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},n);if(l&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(l):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function k(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let R=(a=I("sap.fe.macros.controls.FileWrapper"),o=S({type:"sap.ui.core.URI"}),s=S({type:"string"}),u=S({type:"string"}),p=S({type:"string"}),f=L({type:"sap.m.Avatar",multiple:false}),c=L({type:"sap.ui.core.Icon",multiple:false}),d=L({type:"sap.m.Link",multiple:false}),h=L({type:"sap.m.Text",multiple:false}),y=L({type:"sap.ui.unified.FileUploader",multiple:false}),b=L({type:"sap.m.Button",multiple:false}),a(g=(v=function(i){M(r,i);function r(){var e;for(var t=arguments.length,r=new Array(t),l=0;l<t;l++){r[l]=arguments[l]}e=i.call(this,...r)||this;T(e,"uploadUrl",m,D(e));T(e,"propertyPath",w,D(e));T(e,"filename",_,D(e));T(e,"mediaType",C,D(e));T(e,"avatar",P,D(e));T(e,"icon",B,D(e));T(e,"link",E,D(e));T(e,"text",z,D(e));T(e,"fileUploader",U,D(e));T(e,"deleteButton",x,D(e));e._busy=false;return e}var a=r.prototype;a.getAccessibilityInfo=function e(){const t=[];if(this.avatar){t.push(this.avatar)}if(this.icon){t.push(this.icon)}if(this.link){t.push(this.link)}if(this.text){t.push(this.text)}if(this.fileUploader){t.push(this.fileUploader)}if(this.deleteButton){t.push(this.deleteButton)}return{children:t}};a.onBeforeRendering=function e(){this._setAriaLabels();this._addSideEffects()};a._setAriaLabels=function e(){this._setAriaLabelledBy(this.avatar);this._setAriaLabelledBy(this.icon);this._setAriaLabelledBy(this.link);this._setAriaLabelledBy(this.text);this._setAriaLabelledBy(this.fileUploader);this._setAriaLabelledBy(this.deleteButton)};a._addSideEffects=function i(){var r;const l=[],n=e.getTargetView(this),a=n.getViewData().fullContextPath,o=n.getModel().getMetaModel(),s=o.getMetaPath(a),u=o.getContext(a),p=t.getInvolvedDataModelObjects(u),f=this.data("sourcePath"),c=f.replace(`${s}`,""),d=c.replace(this.propertyPath,"");l.push({$NavigationPropertyPath:c});if(this.filename){l.push({$NavigationPropertyPath:d+this.filename})}if(this.mediaType){l.push({$NavigationPropertyPath:d+this.mediaType})}(r=this._getSideEffectController())===null||r===void 0?void 0:r.addControlSideEffects(p.targetEntityType.fullyQualifiedName,{sourceProperties:[c],targetEntities:l,sourceControlId:this.getId()})};a._getSideEffectController=function e(){const t=this._getViewController();return t?t._sideEffects:undefined};a._getViewController=function t(){const i=e.getTargetView(this);return i&&i.getController()};a.getUploadUrl=function e(){const t=this.getBindingContext();return t&&this.uploadUrl?this.uploadUrl.replace(t.getPath(),t.getCanonicalPath()):""};a.setUIBusy=function e(t){const i=this;this._busy=t;if(t){if(!this.busyDialog){this.busyDialog=new l({text:A(this).getText("M_FILEWRAPPER_BUSY_DIALOG_TITLE"),showCancelButton:false})}setTimeout(function(){if(i._busy){var e;(e=i.busyDialog)===null||e===void 0?void 0:e.open()}},1e3)}else{var r;(r=this.busyDialog)===null||r===void 0?void 0:r.close(false)}};a.getUIBusy=function e(){return this._busy};r.render=function e(t,i){t.openStart("div",i);t.style("width",i.width);t.openEnd();t.openStart("div");t.style("display","flex");t.style("box-sizing","border-box");t.style("justify-content","space-between");t.style("align-items","center");t.style("flex-wrap","wrap");t.style("align-content","stretch");t.style("width","100%");t.openEnd();t.openStart("div");t.style("display","flex");t.style("align-items","center");t.openEnd();if(i.avatar){t.renderControl(i.avatar)}else{t.renderControl(i.icon);t.renderControl(i.link);t.renderControl(i.text)}t.close("div");t.openStart("div");t.style("display","flex");t.style("align-items","center");t.openEnd();t.renderControl(i.fileUploader);t.renderControl(i.deleteButton);t.close("div");t.close("div");t.close("div")};a.destroy=function e(t){const i=this._getSideEffectController();if(i){i.removeControlSideEffects(this)}delete this.busyDialog;n.prototype.destroy.apply(this,[t])};return r}(n),m=j(v.prototype,"uploadUrl",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),w=j(v.prototype,"propertyPath",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),_=j(v.prototype,"filename",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),C=j(v.prototype,"mediaType",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),P=j(v.prototype,"avatar",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),B=j(v.prototype,"icon",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),E=j(v.prototype,"link",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),z=j(v.prototype,"text",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),U=j(v.prototype,"fileUploader",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),x=j(v.prototype,"deleteButton",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),v))||g);return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/draftIndicator/DraftIndicator.block-dbg", ["sap/base/strings/formatMessage", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/CommonUtils", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/m/Button", "sap/m/library", "sap/m/ObjectMarker", "sap/m/Popover", "sap/m/Text", "sap/m/VBox", "sap/ui/core/Core", "sap/fe/core/jsx-runtime/jsx", "sap/fe/core/jsx-runtime/jsxs"], function (formatMessage, BuildingBlockSupport, RuntimeBuildingBlock, CommonUtils, BindingHelper, MetaModelConverter, BindingToolkit, Button, library, ObjectMarker, Popover, Text, VBox, Core, _jsx, _jsxs) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
  var _exports = {};
  var ObjectMarkerVisibility = library.ObjectMarkerVisibility;
  var ObjectMarkerType = library.ObjectMarkerType;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isEmpty = BindingToolkit.isEmpty;
  var ifElse = BindingToolkit.ifElse;
  var constant = BindingToolkit.constant;
  var and = BindingToolkit.and;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var UI = BindingHelper.UI;
  var Entity = BindingHelper.Entity;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let DraftIndicatorBlock = (
  /**
   * Building block for creating a DraftIndicator based on the metadata provided by OData V4.
   *
   * Usage example:
   * <pre>
   * &lt;macro:DraftIndicator
   *   id="SomeID"
   * /&gt;
   * </pre>
   *
   * @private
   */
  _dec = defineBuildingBlock({
    name: "DraftIndicator",
    namespace: "sap.fe.macros"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "string",
    validate: value => {
      if (value && ![ObjectMarkerVisibility.IconOnly, ObjectMarkerVisibility.IconAndText].includes(value)) {
        throw new Error(`Allowed value ${value} does not match`);
      }
    }
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty"]
  }), _dec6 = blockAttribute({
    type: "boolean",
    bindable: true
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(DraftIndicatorBlock, _RuntimeBuildingBlock);
    function DraftIndicatorBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _RuntimeBuildingBlock.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "draftIndicatorType", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entitySet", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isDraftIndicatorVisible", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "class", _descriptor6, _assertThisInitialized(_this));
      return _this;
    }
    _exports = DraftIndicatorBlock;
    /**
     * Runtime formatter function to format the correct text that displays the owner of a draft.
     *
     * This is used in case the DraftIndicator is shown for an active entity that has a draft of another user.
     *
     * @param hasDraftEntity
     * @param draftInProcessByUser
     * @param draftLastChangedByUser
     * @param draftInProcessByUserDesc
     * @param draftLastChangedByUserDesc
     * @returns Text to display
     */
    DraftIndicatorBlock.formatDraftOwnerTextInPopover = function formatDraftOwnerTextInPopover(hasDraftEntity, draftInProcessByUser, draftLastChangedByUser, draftInProcessByUserDesc, draftLastChangedByUserDesc) {
      const macroResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      if (hasDraftEntity) {
        const userDescription = draftInProcessByUserDesc || draftInProcessByUser || draftLastChangedByUserDesc || draftLastChangedByUser;
        if (!userDescription) {
          return macroResourceBundle.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_UNSAVED_CHANGES_BY_UNKNOWN");
        } else {
          return draftInProcessByUser ? macroResourceBundle.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_LOCKED_BY_KNOWN", [userDescription]) : macroResourceBundle.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_UNSAVED_CHANGES_BY_KNOWN", [userDescription]);
        }
      } else {
        return macroResourceBundle.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_NO_DATA_TEXT");
      }
    }

    /***
     * Gets the properties of the DraftAdministrativeData entity connected to the given entity set
     *
     * @returns List of property names
     */;
    var _proto = DraftIndicatorBlock.prototype;
    _proto.getDraftAdministrativeDataProperties = function getDraftAdministrativeDataProperties() {
      const draftAdministrativeDataContext = this.entitySet.getModel().createBindingContext("DraftAdministrativeData", this.entitySet);
      const convertedDraftAdministrativeData = convertMetaModelContext(draftAdministrativeDataContext);
      return convertedDraftAdministrativeData.targetType.entityProperties.map(property => property.name);
    }

    /**
     * Constructs the binding expression for the text displayed as title of the popup.
     *
     * @returns The binding expression
     */;
    _proto.getPopoverTitleBindingExpression = function getPopoverTitleBindingExpression() {
      return ifElse(not(Entity.IsActive), pathInModel("M_COMMON_DRAFT_OBJECT", "sap.fe.i18n"), ifElse(Entity.HasDraft, ifElse(not(isEmpty(pathInModel("DraftAdministrativeData/InProcessByUser"))), pathInModel("M_COMMON_DRAFT_LOCKED_OBJECT", "sap.fe.i18n"), pathInModel("M_DRAFT_POPOVER_ADMIN_UNSAVED_OBJECT", "sap.fe.i18n")), this.draftIndicatorType === ObjectMarkerVisibility.IconAndText ? " " : pathInModel("C_DRAFT_POPOVER_ADMIN_DATA_DRAFTINFO_FLAGGED_OBJECT", "sap.fe.i18n")));
    }

    /**
     * Constructs the binding expression for the text displayed to identify the draft owner in the popup.
     * This binding is configured to call formatDraftOwnerTextInPopover at runtime.
     *
     * We cannot reference formatDraftOwnerTextInPopover directly as we need to conditionally pass properties that might exist or not,
     * and referring to non-existing properties fails the binding.
     *
     * @returns The binding expression
     */;
    _proto.getDraftOwnerTextBindingExpression = function getDraftOwnerTextBindingExpression() {
      const draftAdministrativeDataProperties = this.getDraftAdministrativeDataProperties();
      const parts = [{
        path: "HasDraftEntity",
        targetType: "any"
      }, {
        path: "DraftAdministrativeData/InProcessByUser"
      }, {
        path: "DraftAdministrativeData/LastChangedByUser"
      }];
      if (draftAdministrativeDataProperties.includes("InProcessByUserDescription")) {
        parts.push({
          path: "DraftAdministrativeData/InProcessByUserDescription"
        });
      }
      if (draftAdministrativeDataProperties.includes("LastChangedByUserDescription")) {
        parts.push({
          path: "DraftAdministrativeData/LastChangedByUserDescription"
        });
      }

      //parts.push({path: "sap.fe.i18n>"})

      return {
        parts,
        formatter: DraftIndicatorBlock.formatDraftOwnerTextInPopover
      };
    }

    /**
     * Creates a popover control to display draft information.
     *
     * @param control Control that the popover is to be created for
     * @returns The created popover control
     */;
    _proto.createPopover = function createPopover(control) {
      const isDraftWithNoChangesBinding = and(not(Entity.IsActive), isEmpty(pathInModel("DraftAdministrativeData/LastChangeDateTime")));
      const draftWithNoChangesTextBinding = this.draftIndicatorType === ObjectMarkerVisibility.IconAndText ? pathInModel("M_DRAFT_POPOVER_ADMIN_GENERIC_LOCKED_OBJECT_POPOVER_TEXT", "sap.fe.i18n") : pathInModel("C_DRAFT_POPOVER_ADMIN_DATA_DRAFTINFO_POPOVER_NO_DATA_TEXT", "sap.fe.i18n");
      const isDraftWithChangesBinding = and(not(Entity.IsActive), not(isEmpty(pathInModel("DraftAdministrativeData/LastChangeDateTime"))));
      const draftWithChangesTextBinding = {
        parts: [{
          path: "M_DRAFT_POPOVER_ADMIN_LAST_CHANGE_TEXT",
          model: "sap.fe.i18n"
        }, {
          path: "DraftAdministrativeData/LastChangeDateTime"
        }],
        formatter: formatMessage
      };
      const isActiveInstanceBinding = and(Entity.IsActive, not(isEmpty(pathInModel("DraftAdministrativeData/LastChangeDateTime"))));
      const activeInstanceTextBinding = {
        ...draftWithChangesTextBinding
      };
      const popover = _jsx(Popover, {
        title: this.getPopoverTitleBindingExpression(),
        showHeader: true,
        contentWidth: "15.625rem",
        verticalScrolling: false,
        class: "sapUiContentPadding",
        endButton: _jsx(Button, {
          icon: "sap-icon://decline",
          press: () => {
            var _this$draftPopover;
            return (_this$draftPopover = this.draftPopover) === null || _this$draftPopover === void 0 ? void 0 : _this$draftPopover.close();
          }
        }),
        children: _jsxs(VBox, {
          class: "sapUiContentPadding",
          children: [_jsx(VBox, {
            visible: isDraftWithNoChangesBinding,
            children: _jsx(Text, {
              text: draftWithNoChangesTextBinding
            })
          }), _jsx(VBox, {
            visible: isDraftWithChangesBinding,
            children: _jsx(Text, {
              text: draftWithChangesTextBinding
            })
          }), _jsxs(VBox, {
            visible: isActiveInstanceBinding,
            children: [_jsx(Text, {
              text: this.getDraftOwnerTextBindingExpression()
            }), _jsx(Text, {
              class: "sapUiSmallMarginTop",
              text: activeInstanceTextBinding
            })]
          })]
        })
      });
      CommonUtils.getTargetView(control).addDependent(popover);
      return popover;
    }

    /**
     * Handles pressing of the object marker by opening a corresponding popover.
     *
     * @param event Event object passed from the press event
     */;
    _proto.onObjectMarkerPressed = function onObjectMarkerPressed(event) {
      const source = event.getSource();
      const bindingContext = source.getBindingContext();
      this.draftPopover ??= this.createPopover(source);
      this.draftPopover.setBindingContext(bindingContext);
      this.draftPopover.openBy(source, false);
    }

    /**
     * Constructs the binding expression for the "additionalInfo" attribute in the "IconAndText" case.
     *
     * @returns The binding expression
     */;
    _proto.getIconAndTextAdditionalInfoBindingExpression = function getIconAndTextAdditionalInfoBindingExpression() {
      const draftAdministrativeDataProperties = this.getDraftAdministrativeDataProperties();
      const orBindings = [];
      if (draftAdministrativeDataProperties.includes("InProcessByUserDescription")) {
        orBindings.push(pathInModel("DraftAdministrativeData/InProcessByUserDescription"));
      }
      orBindings.push(pathInModel("DraftAdministrativeData/InProcessByUser"));
      if (draftAdministrativeDataProperties.includes("LastChangedByUserDescription")) {
        orBindings.push(pathInModel("DraftAdministrativeData/LastChangedByUserDescription"));
      }
      orBindings.push(pathInModel("DraftAdministrativeData/LastChangedByUser"));
      return ifElse(Entity.HasDraft, or(...orBindings), "");
    }

    /**
     * Returns the content of this building block for the "IconAndText" type.
     *
     * @returns The control tree
     */;
    _proto.getIconAndTextContent = function getIconAndTextContent() {
      const type = ifElse(not(Entity.IsActive), ObjectMarkerType.Draft, ifElse(Entity.HasDraft, ifElse(pathInModel("DraftAdministrativeData/InProcessByUser"), ObjectMarkerType.LockedBy, ifElse(pathInModel("DraftAdministrativeData/LastChangedByUser"), ObjectMarkerType.UnsavedBy, ObjectMarkerType.Unsaved)), ObjectMarkerType.Flagged));
      const visibility = ifElse(not(Entity.HasDraft), ObjectMarkerVisibility.TextOnly, ObjectMarkerVisibility.IconAndText);
      return _jsx(ObjectMarker, {
        type: type,
        press: this.onObjectMarkerPressed.bind(this),
        visibility: visibility,
        visible: this.isDraftIndicatorVisible,
        additionalInfo: this.getIconAndTextAdditionalInfoBindingExpression(),
        ariaLabelledBy: this.ariaLabelledBy ? [this.ariaLabelledBy] : [],
        class: this.class
      });
    }

    /**
     * Returns the content of this building block for the "IconOnly" type.
     *
     * @returns The control tree
     */;
    _proto.getIconOnlyContent = function getIconOnlyContent() {
      const type = ifElse(not(Entity.IsActive), ObjectMarkerType.Draft, ifElse(Entity.HasDraft, ifElse(pathInModel("DraftAdministrativeData/InProcessByUser"), ObjectMarkerType.Locked, ObjectMarkerType.Unsaved), ObjectMarkerType.Flagged));
      // If Entity.HasDraft is empty, there is no context at all, so don't show the indicator
      const visible = and(not(isEmpty(Entity.HasDraft)), not(UI.IsEditable), Entity.HasDraft, not(pathInModel("DraftAdministrativeData/DraftIsCreatedByMe")));
      return _jsx(ObjectMarker, {
        type: type,
        press: this.onObjectMarkerPressed.bind(this),
        visibility: ObjectMarkerVisibility.IconOnly,
        visible: visible,
        ariaLabelledBy: this.ariaLabelledBy ? [this.ariaLabelledBy] : [],
        class: this.class
      });
    }

    /**
     * Returns the content of this building block.
     *
     * @returns The control tree
     */;
    _proto.getContent = function getContent() {
      if (this.draftIndicatorType === ObjectMarkerVisibility.IconAndText) {
        return this.getIconAndTextContent();
      } else {
        return this.getIconOnlyContent();
      }
    };
    return DraftIndicatorBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "draftIndicatorType", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return ObjectMarkerVisibility.IconAndText;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "entitySet", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isDraftIndicatorVisible", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return constant(false);
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "class", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  })), _class2)) || _class);
  _exports = DraftIndicatorBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/draftIndicator/DraftIndicator.block", ["sap/base/strings/formatMessage","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/CommonUtils","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/m/Button","sap/m/library","sap/m/ObjectMarker","sap/m/Popover","sap/m/Text","sap/m/VBox","sap/ui/core/Core","sap/fe/core/jsx-runtime/jsx","sap/fe/core/jsx-runtime/jsxs"],function(e,t,r,i,n,a,s,o,c,l,d,p,f,u,D,v){"use strict";var y,g,b,A,_,h,T,m,O,I,B,P,E,C,x;var M={};var R=c.ObjectMarkerVisibility;var U=c.ObjectMarkerType;var L=s.pathInModel;var N=s.or;var w=s.not;var F=s.isEmpty;var V=s.ifElse;var j=s.constant;var k=s.and;var S=a.convertMetaModelContext;var z=n.UI;var H=n.Entity;var G=t.defineBuildingBlock;var K=t.blockAttribute;function J(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function W(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function X(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Y(e,t)}function Y(e,t){Y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return Y(e,t)}function q(e,t,r,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function $(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let Q=(y=G({name:"DraftIndicator",namespace:"sap.fe.macros"}),g=K({type:"string"}),b=K({type:"string"}),A=K({type:"string",validate:e=>{if(e&&![R.IconOnly,R.IconAndText].includes(e)){throw new Error(`Allowed value ${e} does not match`)}}}),_=K({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty"]}),h=K({type:"boolean",bindable:true}),T=K({type:"string"}),y(m=(O=function(t){X(r,t);function r(){var e;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++){i[n]=arguments[n]}e=t.call(this,...i)||this;J(e,"id",I,W(e));J(e,"ariaLabelledBy",B,W(e));J(e,"draftIndicatorType",P,W(e));J(e,"entitySet",E,W(e));J(e,"isDraftIndicatorVisible",C,W(e));J(e,"class",x,W(e));return e}M=r;r.formatDraftOwnerTextInPopover=function e(t,r,i,n,a){const s=u.getLibraryResourceBundle("sap.fe.macros");if(t){const e=n||r||a||i;if(!e){return s.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_UNSAVED_CHANGES_BY_UNKNOWN")}else{return r?s.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_LOCKED_BY_KNOWN",[e]):s.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_UNSAVED_CHANGES_BY_KNOWN",[e])}}else{return s.getText("M_FIELD_RUNTIME_DRAFT_POPOVER_NO_DATA_TEXT")}};var n=r.prototype;n.getDraftAdministrativeDataProperties=function e(){const t=this.entitySet.getModel().createBindingContext("DraftAdministrativeData",this.entitySet);const r=S(t);return r.targetType.entityProperties.map(e=>e.name)};n.getPopoverTitleBindingExpression=function e(){return V(w(H.IsActive),L("M_COMMON_DRAFT_OBJECT","sap.fe.i18n"),V(H.HasDraft,V(w(F(L("DraftAdministrativeData/InProcessByUser"))),L("M_COMMON_DRAFT_LOCKED_OBJECT","sap.fe.i18n"),L("M_DRAFT_POPOVER_ADMIN_UNSAVED_OBJECT","sap.fe.i18n")),this.draftIndicatorType===R.IconAndText?" ":L("C_DRAFT_POPOVER_ADMIN_DATA_DRAFTINFO_FLAGGED_OBJECT","sap.fe.i18n")))};n.getDraftOwnerTextBindingExpression=function e(){const t=this.getDraftAdministrativeDataProperties();const i=[{path:"HasDraftEntity",targetType:"any"},{path:"DraftAdministrativeData/InProcessByUser"},{path:"DraftAdministrativeData/LastChangedByUser"}];if(t.includes("InProcessByUserDescription")){i.push({path:"DraftAdministrativeData/InProcessByUserDescription"})}if(t.includes("LastChangedByUserDescription")){i.push({path:"DraftAdministrativeData/LastChangedByUserDescription"})}return{parts:i,formatter:r.formatDraftOwnerTextInPopover}};n.createPopover=function t(r){const n=k(w(H.IsActive),F(L("DraftAdministrativeData/LastChangeDateTime")));const a=this.draftIndicatorType===R.IconAndText?L("M_DRAFT_POPOVER_ADMIN_GENERIC_LOCKED_OBJECT_POPOVER_TEXT","sap.fe.i18n"):L("C_DRAFT_POPOVER_ADMIN_DATA_DRAFTINFO_POPOVER_NO_DATA_TEXT","sap.fe.i18n");const s=k(w(H.IsActive),w(F(L("DraftAdministrativeData/LastChangeDateTime"))));const c={parts:[{path:"M_DRAFT_POPOVER_ADMIN_LAST_CHANGE_TEXT",model:"sap.fe.i18n"},{path:"DraftAdministrativeData/LastChangeDateTime"}],formatter:e};const l=k(H.IsActive,w(F(L("DraftAdministrativeData/LastChangeDateTime"))));const u={...c};const y=D(d,{title:this.getPopoverTitleBindingExpression(),showHeader:true,contentWidth:"15.625rem",verticalScrolling:false,class:"sapUiContentPadding",endButton:D(o,{icon:"sap-icon://decline",press:()=>{var e;return(e=this.draftPopover)===null||e===void 0?void 0:e.close()}}),children:v(f,{class:"sapUiContentPadding",children:[D(f,{visible:n,children:D(p,{text:a})}),D(f,{visible:s,children:D(p,{text:c})}),v(f,{visible:l,children:[D(p,{text:this.getDraftOwnerTextBindingExpression()}),D(p,{class:"sapUiSmallMarginTop",text:u})]})]})});i.getTargetView(r).addDependent(y);return y};n.onObjectMarkerPressed=function e(t){const r=t.getSource();const i=r.getBindingContext();this.draftPopover??=this.createPopover(r);this.draftPopover.setBindingContext(i);this.draftPopover.openBy(r,false)};n.getIconAndTextAdditionalInfoBindingExpression=function e(){const t=this.getDraftAdministrativeDataProperties();const r=[];if(t.includes("InProcessByUserDescription")){r.push(L("DraftAdministrativeData/InProcessByUserDescription"))}r.push(L("DraftAdministrativeData/InProcessByUser"));if(t.includes("LastChangedByUserDescription")){r.push(L("DraftAdministrativeData/LastChangedByUserDescription"))}r.push(L("DraftAdministrativeData/LastChangedByUser"));return V(H.HasDraft,N(...r),"")};n.getIconAndTextContent=function e(){const t=V(w(H.IsActive),U.Draft,V(H.HasDraft,V(L("DraftAdministrativeData/InProcessByUser"),U.LockedBy,V(L("DraftAdministrativeData/LastChangedByUser"),U.UnsavedBy,U.Unsaved)),U.Flagged));const r=V(w(H.HasDraft),R.TextOnly,R.IconAndText);return D(l,{type:t,press:this.onObjectMarkerPressed.bind(this),visibility:r,visible:this.isDraftIndicatorVisible,additionalInfo:this.getIconAndTextAdditionalInfoBindingExpression(),ariaLabelledBy:this.ariaLabelledBy?[this.ariaLabelledBy]:[],class:this.class})};n.getIconOnlyContent=function e(){const t=V(w(H.IsActive),U.Draft,V(H.HasDraft,V(L("DraftAdministrativeData/InProcessByUser"),U.Locked,U.Unsaved),U.Flagged));const r=k(w(F(H.HasDraft)),w(z.IsEditable),H.HasDraft,w(L("DraftAdministrativeData/DraftIsCreatedByMe")));return D(l,{type:t,press:this.onObjectMarkerPressed.bind(this),visibility:R.IconOnly,visible:r,ariaLabelledBy:this.ariaLabelledBy?[this.ariaLabelledBy]:[],class:this.class})};n.getContent=function e(){if(this.draftIndicatorType===R.IconAndText){return this.getIconAndTextContent()}else{return this.getIconOnlyContent()}};return r}(r),I=q(O.prototype,"id",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),B=q(O.prototype,"ariaLabelledBy",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),P=q(O.prototype,"draftIndicatorType",[A],{configurable:true,enumerable:true,writable:true,initializer:function(){return R.IconAndText}}),E=q(O.prototype,"entitySet",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),C=q(O.prototype,"isDraftIndicatorVisible",[h],{configurable:true,enumerable:true,writable:true,initializer:function(){return j(false)}}),x=q(O.prototype,"class",[T],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),O))||m);M=Q;return M},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/fcl/FlexibleColumnLayoutActions.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor) {
  "use strict";

  var _dec, _class;
  var _exports = {};
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let FlexibleColumnLayoutActionsBlock = (_dec = defineBuildingBlock({
    name: "FlexibleColumnLayoutActions",
    namespace: "sap.fe.macros.fcl",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.m.OverflowToolbarButton"]
  }), _dec(_class = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FlexibleColumnLayoutActionsBlock, _BuildingBlockBase);
    function FlexibleColumnLayoutActionsBlock() {
      return _BuildingBlockBase.apply(this, arguments) || this;
    }
    _exports = FlexibleColumnLayoutActionsBlock;
    var _proto = FlexibleColumnLayoutActionsBlock.prototype;
    _proto.getTemplate = function getTemplate() {
      return xml`
            <m:OverflowToolbarButton
                id="fe::FCLStandardAction::FullScreen"
                type="Transparent"
                icon="{fclhelper>/actionButtonsInfo/switchIcon}"
                visible="{fclhelper>/actionButtonsInfo/switchVisible}"
                press="._routing.switchFullScreen()"
            />
            <m:OverflowToolbarButton
                id="fe::FCLStandardAction::Close"
                type="Transparent"
                icon="sap-icon://decline"
                tooltip="{sap.fe.i18n>C_COMMON_SAPFE_CLOSE}"
                visible="{fclhelper>/actionButtonsInfo/closeVisible}"
                press="._routing.closeColumn()"
            />`;
    };
    return FlexibleColumnLayoutActionsBlock;
  }(BuildingBlockBase)) || _class);
  _exports = FlexibleColumnLayoutActionsBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/fcl/FlexibleColumnLayoutActions.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"],function(e,o,t){"use strict";var n,r;var i={};var c=t.xml;var l=o.defineBuildingBlock;function s(e,o){e.prototype=Object.create(o.prototype);e.prototype.constructor=e;a(e,o)}function a(e,o){a=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(o,t){o.__proto__=t;return o};return a(e,o)}let p=(n=l({name:"FlexibleColumnLayoutActions",namespace:"sap.fe.macros.fcl",publicNamespace:"sap.fe.macros",returnTypes:["sap.m.OverflowToolbarButton"]}),n(r=function(e){s(o,e);function o(){return e.apply(this,arguments)||this}i=o;var t=o.prototype;t.getTemplate=function e(){return c`
            <m:OverflowToolbarButton
                id="fe::FCLStandardAction::FullScreen"
                type="Transparent"
                icon="{fclhelper>/actionButtonsInfo/switchIcon}"
                visible="{fclhelper>/actionButtonsInfo/switchVisible}"
                press="._routing.switchFullScreen()"
            />
            <m:OverflowToolbarButton
                id="fe::FCLStandardAction::Close"
                type="Transparent"
                icon="sap-icon://decline"
                tooltip="{sap.fe.i18n>C_COMMON_SAPFE_CLOSE}"
                visible="{fclhelper>/actionButtonsInfo/closeVisible}"
                press="._routing.closeColumn()"
            />`};return o}(e))||r);i=p;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldAPI-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/message/Message", "../MacroAPI"], function (ClassSupport, Message, MacroAPI) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;
  var xmlEventHandler = ClassSupport.xmlEventHandler;
  var property = ClassSupport.property;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var association = ClassSupport.association;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Returns the first visible control in the FieldWrapper.
   *
   * @param oControl FieldWrapper
   * @returns The first visible control
   */
  function getControlInFieldWrapper(oControl) {
    if (oControl.isA("sap.fe.macros.controls.FieldWrapper")) {
      const oFieldWrapper = oControl;
      const aControls = oFieldWrapper.getEditMode() === "Display" ? [oFieldWrapper.getContentDisplay()] : oFieldWrapper.getContentEdit();
      if (aControls.length >= 1) {
        return aControls.length ? aControls[0] : undefined;
      }
    } else {
      return oControl;
    }
    return undefined;
  }

  /**
   * Building block for creating a field based on the metadata provided by OData V4.
   * <br>
   * Usually, a DataField or DataPoint annotation is expected, but the field can also be used to display a property from the entity type.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Field id="MyField" metaPath="MyProperty" /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.Field
   * @public
   */
  let FieldAPI = (_dec = defineUI5Class("sap.fe.macros.field.FieldAPI", {
    returnTypes: ["sap.fe.core.controls.FormElementWrapper" /*, not sure i want to add those yet "sap.fe.macros.field.FieldAPI", "sap.m.HBox", "sap.fe.macros.controls.ConditionalWrapper", "sap.m.Button"*/]
  }), _dec2 = property({
    type: "boolean"
  }), _dec3 = property({
    type: "boolean"
  }), _dec4 = property({
    type: "string"
  }), _dec5 = property({
    type: "string",
    expectedAnnotations: [],
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty", "Property"]
  }), _dec6 = property({
    type: "string",
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"]
  }), _dec7 = event(), _dec8 = association({
    type: "sap.ui.core.Control",
    multiple: true,
    singularName: "ariaLabelledBy"
  }), _dec9 = property({
    type: "boolean"
  }), _dec10 = property({
    type: "sap.fe.macros.FieldFormatOptions"
  }), _dec11 = property({
    type: "string"
  }), _dec12 = property({
    type: "boolean"
  }), _dec13 = property({
    type: "boolean"
  }), _dec14 = xmlEventHandler(), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(FieldAPI, _MacroAPI);
    function FieldAPI() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MacroAPI.call(this, ...args) || this;
      _initializerDefineProperty(_this, "editable", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "readOnly", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "id", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "change", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "required", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formatOptions", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "semanticObject", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "collaborationEnabled", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor12, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = FieldAPI.prototype;
    _proto.handleChange = function handleChange(oEvent) {
      this.fireChange({
        value: this.getValue(),
        isValid: oEvent.getParameter("valid")
      });
    };
    _proto.onBeforeRendering = function onBeforeRendering() {
      const isArialLabelledByCompliant = function (control) {
        return control.isA(["sap.m.Button", "sap.fe.macros.controls.FieldWrapper", "sap.ui.mdc.Field", "sap.fe.macros.controls.FileWrapper"]);
      };
      const oContent = this.content;
      if (oContent && isArialLabelledByCompliant(oContent) && oContent.addAriaLabelledBy) {
        const aAriaLabelledBy = this.getAriaLabelledBy();
        for (let i = 0; i < aAriaLabelledBy.length; i++) {
          const sId = aAriaLabelledBy[i];
          const aAriaLabelledBys = oContent.getAriaLabelledBy() || [];
          if (aAriaLabelledBys.indexOf(sId) === -1) {
            oContent.addAriaLabelledBy(sId);
          }
        }
      }
    };
    _proto.enhanceAccessibilityState = function enhanceAccessibilityState(_oElement, mAriaProps) {
      const oParent = this.getParent();
      if (oParent && oParent.enhanceAccessibilityState) {
        // use FieldWrapper as control, but aria properties of rendered inner control.
        oParent.enhanceAccessibilityState(this, mAriaProps);
      }
      return mAriaProps;
    };
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      const oContent = this.content;
      return oContent && oContent.getAccessibilityInfo ? oContent.getAccessibilityInfo() : {};
    }

    /**
     * Returns the DOMNode ID to be used for the "labelFor" attribute.
     *
     * We forward the call of this method to the content control.
     *
     * @returns ID to be used for the <code>labelFor</code>
     */;
    _proto.getIdForLabel = function getIdForLabel() {
      const oContent = this.content;
      return oContent.getIdForLabel();
    }

    /**
     * Retrieves the current value of the field.
     *
     * @public
     * @returns The current value of the field
     */;
    _proto.getValue = function getValue() {
      var _oControl, _oControl2, _oControl3, _oControl4;
      let oControl = getControlInFieldWrapper(this.content);
      if (this.collaborationEnabled && (_oControl = oControl) !== null && _oControl !== void 0 && _oControl.isA("sap.m.HBox")) {
        oControl = oControl.getItems()[0];
      }
      if ((_oControl2 = oControl) !== null && _oControl2 !== void 0 && _oControl2.isA("sap.m.CheckBox")) {
        return oControl.getSelected();
      } else if ((_oControl3 = oControl) !== null && _oControl3 !== void 0 && _oControl3.isA("sap.m.InputBase")) {
        return oControl.getValue();
      } else if ((_oControl4 = oControl) !== null && _oControl4 !== void 0 && _oControl4.isA("sap.ui.mdc.Field")) {
        return oControl.getValue(); // FieldWrapper
      } else {
        throw "getting value not yet implemented for this field type";
      }
    }

    /**
     * Adds a message to the field.
     *
     * @param [parameters] The parameters to create message
     * @param parameters.type Type of the message
     * @param parameters.message Message text
     * @param parameters.description Message description
     * @param parameters.persistent True if the message is persistent
     * @returns The id of the message
     * @public
     */;
    _proto.addMessage = function addMessage(parameters) {
      const msgManager = this.getMessageManager();
      const oControl = getControlInFieldWrapper(this.content);
      let path; //target for oMessage
      if (oControl !== null && oControl !== void 0 && oControl.isA("sap.m.CheckBox")) {
        var _getBinding;
        path = (_getBinding = oControl.getBinding("selected")) === null || _getBinding === void 0 ? void 0 : _getBinding.getResolvedPath();
      } else if (oControl !== null && oControl !== void 0 && oControl.isA("sap.m.InputBase")) {
        var _getBinding2;
        path = (_getBinding2 = oControl.getBinding("value")) === null || _getBinding2 === void 0 ? void 0 : _getBinding2.getResolvedPath();
      } else if (oControl !== null && oControl !== void 0 && oControl.isA("sap.ui.mdc.Field")) {
        path = oControl.getBinding("value").getResolvedPath();
      }
      const oMessage = new Message({
        target: path,
        type: parameters.type,
        message: parameters.message,
        processor: oControl === null || oControl === void 0 ? void 0 : oControl.getModel(),
        description: parameters.description,
        persistent: parameters.persistent
      });
      msgManager.addMessages(oMessage);
      return oMessage.getId();
    }

    /**
     * Removes a message from the field.
     *
     * @param id The id of the message
     * @public
     */;
    _proto.removeMessage = function removeMessage(id) {
      const msgManager = this.getMessageManager();
      const arr = msgManager.getMessageModel().getData();
      const result = arr.find(e => e.id === id);
      if (result) {
        msgManager.removeMessages(result);
      }
    };
    _proto.getMessageManager = function getMessageManager() {
      return sap.ui.getCore().getMessageManager();
    };
    return FieldAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editable", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "readOnly", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "change", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "required", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "formatOptions", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "semanticObject", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "collaborationEnabled", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "handleChange", [_dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "handleChange"), _class2.prototype)), _class2)) || _class);
  return FieldAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldAPI", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/message/Message","../MacroAPI"],function(e,t,i){"use strict";var r,n,a,l,o,s,u,c,p,d,g,f,b,y,m,h,v,w,A,z,P,M,O,B,E,C,F,I;var x=e.xmlEventHandler;var j=e.property;var L=e.event;var S=e.defineUI5Class;var D=e.association;function R(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function T(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function V(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;W(e,t)}function W(e,t){W=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return W(e,t)}function _(e,t,i,r,n){var a={};Object.keys(r).forEach(function(e){a[e]=r[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function k(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}function N(e){if(e.isA("sap.fe.macros.controls.FieldWrapper")){const t=e;const i=t.getEditMode()==="Display"?[t.getContentDisplay()]:t.getContentEdit();if(i.length>=1){return i.length?i[0]:undefined}}else{return e}return undefined}let q=(r=S("sap.fe.macros.field.FieldAPI",{returnTypes:["sap.fe.core.controls.FormElementWrapper"]}),n=j({type:"boolean"}),a=j({type:"boolean"}),l=j({type:"string"}),o=j({type:"string",expectedAnnotations:[],expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty","Property"]}),s=j({type:"string",expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"]}),u=L(),c=D({type:"sap.ui.core.Control",multiple:true,singularName:"ariaLabelledBy"}),p=j({type:"boolean"}),d=j({type:"sap.fe.macros.FieldFormatOptions"}),g=j({type:"string"}),f=j({type:"boolean"}),b=j({type:"boolean"}),y=x(),r(m=(h=function(e){V(i,e);function i(){var t;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}t=e.call(this,...r)||this;R(t,"editable",v,T(t));R(t,"readOnly",w,T(t));R(t,"id",A,T(t));R(t,"metaPath",z,T(t));R(t,"contextPath",P,T(t));R(t,"change",M,T(t));R(t,"ariaLabelledBy",O,T(t));R(t,"required",B,T(t));R(t,"formatOptions",E,T(t));R(t,"semanticObject",C,T(t));R(t,"collaborationEnabled",F,T(t));R(t,"visible",I,T(t));return t}var r=i.prototype;r.handleChange=function e(t){this.fireChange({value:this.getValue(),isValid:t.getParameter("valid")})};r.onBeforeRendering=function e(){const t=function(e){return e.isA(["sap.m.Button","sap.fe.macros.controls.FieldWrapper","sap.ui.mdc.Field","sap.fe.macros.controls.FileWrapper"])};const i=this.content;if(i&&t(i)&&i.addAriaLabelledBy){const e=this.getAriaLabelledBy();for(let t=0;t<e.length;t++){const r=e[t];const n=i.getAriaLabelledBy()||[];if(n.indexOf(r)===-1){i.addAriaLabelledBy(r)}}}};r.enhanceAccessibilityState=function e(t,i){const r=this.getParent();if(r&&r.enhanceAccessibilityState){r.enhanceAccessibilityState(this,i)}return i};r.getAccessibilityInfo=function e(){const t=this.content;return t&&t.getAccessibilityInfo?t.getAccessibilityInfo():{}};r.getIdForLabel=function e(){const t=this.content;return t.getIdForLabel()};r.getValue=function e(){var t,i,r,n;let a=N(this.content);if(this.collaborationEnabled&&(t=a)!==null&&t!==void 0&&t.isA("sap.m.HBox")){a=a.getItems()[0]}if((i=a)!==null&&i!==void 0&&i.isA("sap.m.CheckBox")){return a.getSelected()}else if((r=a)!==null&&r!==void 0&&r.isA("sap.m.InputBase")){return a.getValue()}else if((n=a)!==null&&n!==void 0&&n.isA("sap.ui.mdc.Field")){return a.getValue()}else{throw"getting value not yet implemented for this field type"}};r.addMessage=function e(i){const r=this.getMessageManager();const n=N(this.content);let a;if(n!==null&&n!==void 0&&n.isA("sap.m.CheckBox")){var l;a=(l=n.getBinding("selected"))===null||l===void 0?void 0:l.getResolvedPath()}else if(n!==null&&n!==void 0&&n.isA("sap.m.InputBase")){var o;a=(o=n.getBinding("value"))===null||o===void 0?void 0:o.getResolvedPath()}else if(n!==null&&n!==void 0&&n.isA("sap.ui.mdc.Field")){a=n.getBinding("value").getResolvedPath()}const s=new t({target:a,type:i.type,message:i.message,processor:n===null||n===void 0?void 0:n.getModel(),description:i.description,persistent:i.persistent});r.addMessages(s);return s.getId()};r.removeMessage=function e(t){const i=this.getMessageManager();const r=i.getMessageModel().getData();const n=r.find(e=>e.id===t);if(n){i.removeMessages(n)}};r.getMessageManager=function e(){return sap.ui.getCore().getMessageManager()};return i}(i),v=_(h.prototype,"editable",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),w=_(h.prototype,"readOnly",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),A=_(h.prototype,"id",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),z=_(h.prototype,"metaPath",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),P=_(h.prototype,"contextPath",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),M=_(h.prototype,"change",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),O=_(h.prototype,"ariaLabelledBy",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),B=_(h.prototype,"required",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),E=_(h.prototype,"formatOptions",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),C=_(h.prototype,"semanticObject",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),F=_(h.prototype,"collaborationEnabled",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),I=_(h.prototype,"visible",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),_(h.prototype,"handleChange",[y],Object.getOwnPropertyDescriptor(h.prototype,"handleChange"),h.prototype),h))||m);return q},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldBaseDelegate-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/type/TypeUtil", "sap/ui/mdc/field/FieldBaseDelegate", "sap/ui/mdc/odata/v4/TypeMap", "sap/ui/model/Filter"], function (Log, CommonUtils, TypeUtil, FieldBaseDelegate, ODataV4TypeMap, Filter) {
  "use strict";

  return Object.assign({}, FieldBaseDelegate, {
    apiVersion: 2,
    getTypeMap: function () {
      return ODataV4TypeMap;
    },
    /**
     * If the <code>Field</code> control is used, the used data type might come from the binding.
     * In V4-unit or currency case it might need to be formatted once.
     * To initialize the internal type later on, the currencies must be returned.
     *
     * @param field The <code>Field</code> instance
     * @param type Type from binding
     * @param value Given value
     * @returns Information needed to initialize internal type (needs to set bTypeInitialized to true if initialized)
     */
    initializeTypeFromBinding: function (field, type, value) {
      // V4 Unit and Currency types have a map with valid units and create an internal customizing for it.
      // The Field needs to keep this customizing logic when creating the internal type.
      // (As external RAW binding is used there is no formatting on parsing.)

      const result = {};
      if (type && type.isA(["sap.ui.model.odata.type.Unit", "sap.ui.model.odata.type.Currency"]) && Array.isArray(value) && value.length > 2 && value[2] !== undefined) {
        // format once to set internal customizing. Allow null as valid values for custom units
        type.formatValue(value, "string");
        result.bTypeInitialized = true;
        result.mCustomUnits = value[2]; // TODO: find a better way to provide custom units to internal type
      }

      return result;
    },
    /**
     * This function initializes the unit type.
     * If the <code>Field</code> control is used, the used data type might come from the binding.
     * If the type is a V4 unit or currency, it might need to be formatted once.
     *
     * @param field The <code>Field</code> instance
     * @param type Type from binding
     * @param typeInitialization Information needed to initialize internal type
     */
    initializeInternalUnitType: function (field, type, typeInitialization) {
      if ((typeInitialization === null || typeInitialization === void 0 ? void 0 : typeInitialization.mCustomUnits) !== undefined) {
        // if already initialized initialize new type too.
        type.formatValue([null, null, typeInitialization.mCustomUnits], "string");
      }
    },
    /**
     * This function enhances the value with unit or currency information if needed by the data type.
     *
     * @param field The <code>Field</code> instance
     * @param  values Values
     * @param  typeInitialization Information needed to initialize internal type
     * @returns Values
     */
    enhanceValueForUnit: function (field, values, typeInitialization) {
      if ((typeInitialization === null || typeInitialization === void 0 ? void 0 : typeInitialization.bTypeInitialized) === true && values.length === 2) {
        values.push(typeInitialization.mCustomUnits);
        return values;
      }
      return undefined;
    },
    /**
     * This function returns which <code>ValueHelpDelegate</code> is used
     * if a default field help (for example, for defining conditions in </code>FilterField</code>)
     * is created.
     *
     * @param field The <code>Field</code> instance
     * @returns Delegate object with name and payload
     */
    getDefaultValueHelpDelegate: function (field) {
      return {
        name: "sap/ui/mdc/odata/v4/ValueHelpDelegate",
        payload: {}
      };
    },
    getTypeUtil: function (field) {
      return TypeUtil;
    },
    /**
     * Determine all parameters in a value help that use a specific property.
     *
     * @param valueListInfo Value list info
     * @param propertyName Name of the property
     * @returns List of all found parameters
     */
    _getValueListParameter: function (valueListInfo, propertyName) {
      //determine path to value list property
      return valueListInfo.Parameters.filter(function (entry) {
        if (entry.LocalDataProperty) {
          return entry.LocalDataProperty.$PropertyPath === propertyName;
        } else {
          return false;
        }
      });
    },
    /**
     * Build filters for each relevant parameter.
     *
     * @param valueList Value list info
     * @param propertyName Name of the property
     * @param valueHelpProperty Name of the value help property
     * @param keyValue Value of the property
     * @param valuehelpPayload Payload of the value help
     * @param valuehelpConditionPayload Additional condition information for this key
     * @param bindingContext BindingContext of the field
     * @returns List of filters
     */
    _getFilter: function (valueList, propertyName, valueHelpProperty, keyValue, valuehelpPayload, valuehelpConditionPayload, bindingContext) {
      const filters = [];
      const parameters = valueList.Parameters.filter(function (parameter) {
        var _parameter$LocalDataP;
        return parameter.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterIn" || parameter.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || ((_parameter$LocalDataP = parameter.LocalDataProperty) === null || _parameter$LocalDataP === void 0 ? void 0 : _parameter$LocalDataP.$PropertyPath) === propertyName && parameter.ValueListProperty === valueHelpProperty;
      });
      for (const parameter of parameters) {
        var _parameter$LocalDataP2;
        let filterValue;
        if (((_parameter$LocalDataP2 = parameter.LocalDataProperty) === null || _parameter$LocalDataP2 === void 0 ? void 0 : _parameter$LocalDataP2.$PropertyPath) === propertyName) {
          filterValue = keyValue;
        } else if ((valuehelpPayload === null || valuehelpPayload === void 0 ? void 0 : valuehelpPayload.isActionParameterDialog) === true) {
          var _parameter$LocalDataP3;
          const apdFieldPath = `APD_::${(_parameter$LocalDataP3 = parameter.LocalDataProperty) === null || _parameter$LocalDataP3 === void 0 ? void 0 : _parameter$LocalDataP3.$PropertyPath}`;
          const apdField = sap.ui.getCore().byId(apdFieldPath);
          filterValue = apdField === null || apdField === void 0 ? void 0 : apdField.getValue();
        } else if (valuehelpConditionPayload !== undefined) {
          var _parameter$LocalDataP4;
          const sourcePath = (_parameter$LocalDataP4 = parameter.LocalDataProperty) === null || _parameter$LocalDataP4 === void 0 ? void 0 : _parameter$LocalDataP4.$PropertyPath;
          const conditionPayload = valuehelpConditionPayload === null || valuehelpConditionPayload === void 0 ? void 0 : valuehelpConditionPayload[0];
          filterValue = sourcePath && (conditionPayload === null || conditionPayload === void 0 ? void 0 : conditionPayload[sourcePath]);
        } else if (bindingContext !== undefined) {
          var _parameter$LocalDataP5;
          // if the value help is not used try getting the filter value from the binding context
          const sourcePath = (_parameter$LocalDataP5 = parameter.LocalDataProperty) === null || _parameter$LocalDataP5 === void 0 ? void 0 : _parameter$LocalDataP5.$PropertyPath;
          filterValue = bindingContext.getObject(sourcePath);
        }
        /* Add value to the filter for the text determination */
        if (filterValue !== null && filterValue !== undefined) {
          filters.push(new Filter({
            path: parameter.ValueListProperty,
            operator: "EQ",
            value1: filterValue
          }));
        }
      }
      return filters;
    },
    /**
     * Determines the key, description, and payload of a user input.
     *
     * @param field The <code>Field</code> instance
     * @param valueHelp Value help instance
     * @param config Configuration Object
     * @returns Object containing description, key, and payload. If it is not available right now (must be requested), a <code>Promise</code> is returned
     */
    getItemForValue: function (field, valueHelp, config) {
      //BCP: 2270162887 . The MDC field should not try to get the item when the field is emptied
      // JIRA: FIORITECHP1-25361 - Improve the type-ahead behavior for missinng text annotation or constraints violations of the existing text annotation
      if (config.value === "") {
        return;
      }
      const payload = field.getPayload();
      if (config.checkDescription) {
        const valuehelpPayload = valueHelp.getPayload();
        const descriptionPath = valuehelpPayload.valueHelpDescriptionPath;
        const maxLength = valuehelpPayload === null || valuehelpPayload === void 0 ? void 0 : valuehelpPayload.maxLength;
        const valueLength = config.value !== null && config.value !== undefined ? config.value.toString().length : 0;
        if (descriptionPath === "") {
          // In case the property value help collection has no text annotation (descriptionPath is empty) the description check shouldn´t occur.
          // In such a case the method getDescription will be called by MDC and within this method a SideEffect is requested to retrieve the text from the text property of the main entity
          config.checkDescription = false;
        } else if (maxLength !== undefined && valueLength > maxLength) {
          //value length is > text proeperty length constraint
          return;
        }
      }
      return FieldBaseDelegate.getItemForValue(field, valueHelp, config);
    },
    /**
     * Determines the description for a given key.
     *
     * @param field The <code>Field</code> instance
     * @param valueHelp Field help assigned to the <code>Field</code> or <code>FilterField</code> control
     * @param key Key value of the description
     * @param _conditionIn In parameters for the key (no longer supported)
     * @param _conditionOut Out parameters for the key (no longer supported)
     * @param bindingContext BindingContext <code>BindingContext</code> of the checked field. Inside a table, the <code>FieldHelp</code> element can be connected to a different row
     * @param _ConditionModel ConditionModel</code>, if bound to one
     * @param _conditionModelName Name of the <code>ConditionModel</code>, if bound to one
     * @param conditionPayload Additional context information for this key
     * @param control Instance of the calling control
     * @param _type Type of the value
     * @returns Description for the key or object containing a description, key and payload. If the description is not available right away (it must be requested), a <code>Promise</code> is returned
     */
    getDescription: async function (field, valueHelp, key, _conditionIn, _conditionOut, bindingContext, _ConditionModel, _conditionModelName, conditionPayload, control, _type) {
      var _payload, _payload2;
      //JIRA: FIORITECHP1-22022 . The MDC field should not  tries to determine description with the initial GET of the data.
      // it should rely on the data we already received from the backend
      // But The getDescription function is also called in the FilterField case if a variant is loaded.
      // As the description text could be language dependent it is not stored in the variant, so it needs to be read on rendering.

      let payload = field === null || field === void 0 ? void 0 : field.getPayload();

      /* Retrieve text from value help, if value was set by out-parameter (BCP 2270160633) */
      if (!payload && control !== null && control !== void 0 && control.getDisplay().includes("Description")) {
        payload = {
          retrieveTextFromValueList: true
        };
      }
      if (((_payload = payload) === null || _payload === void 0 ? void 0 : _payload.retrieveTextFromValueList) === true || ((_payload2 = payload) === null || _payload2 === void 0 ? void 0 : _payload2.isFilterField) === true) {
        const dataModel = valueHelp.getModel();
        const metaModel = dataModel ? dataModel.getMetaModel() : CommonUtils.getAppComponent(valueHelp).getModel().getMetaModel();
        const valuehelpPayload = valueHelp.getPayload();
        const valuehelpConditionPayload = conditionPayload === null || conditionPayload === void 0 ? void 0 : conditionPayload[valuehelpPayload.valueHelpQualifier];
        const propertyPath = valuehelpPayload.propertyPath;
        const propertyDescriptionPath = valuehelpPayload === null || valuehelpPayload === void 0 ? void 0 : valuehelpPayload.propertyDescriptionPath;
        let textProperty;
        try {
          var _valueHelpParameters$;
          /* Request value help metadata */
          const valueListInfo = await metaModel.requestValueListInfo(propertyPath, true, bindingContext);
          const propertyName = metaModel.getObject(`${propertyPath}@sapui.name`);
          // take the first value list annotation - alternatively take the one without qualifier or the first one
          const valueList = valueListInfo[Object.keys(valueListInfo)[0]];
          const valueHelpParameters = this._getValueListParameter(valueList, propertyName);
          const valueHelpProperty = valueHelpParameters === null || valueHelpParameters === void 0 ? void 0 : (_valueHelpParameters$ = valueHelpParameters[0]) === null || _valueHelpParameters$ === void 0 ? void 0 : _valueHelpParameters$.ValueListProperty;
          if (!valueHelpProperty) {
            throw Error(`Inconsistent value help annotation for ${propertyName}`);
          }
          // get text annotation for this value list property
          const valueListModel = valueList.$model;
          const textAnnotation = valueListModel.getMetaModel().getObject(`/${valueList.CollectionPath}/${valueHelpProperty}@com.sap.vocabularies.Common.v1.Text`);
          if (textAnnotation && textAnnotation.$Path) {
            textProperty = textAnnotation.$Path;
            /* Build the filter for the relevant parameters */
            const filters = this._getFilter(valueList, propertyName, valueHelpProperty, key, valuehelpPayload, valuehelpConditionPayload, bindingContext);
            const listBinding = valueListModel.bindList(`/${valueList.CollectionPath}`, undefined, undefined, filters, {
              $select: textProperty
            });
            /* Request description for given key from value list entity */
            const contexts = await listBinding.requestContexts(0, 2);
            return contexts.length ? contexts[0].getObject(textProperty) : undefined;
          } else if (bindingContext !== undefined && propertyDescriptionPath) {
            const lastIndex = propertyDescriptionPath.lastIndexOf("/");
            const sideEffectPath = lastIndex > 0 ? propertyDescriptionPath.substring(0, lastIndex) : propertyDescriptionPath;
            const sideEffectsService = CommonUtils.getAppComponent(valueHelp).getSideEffectsService();
            await sideEffectsService.requestSideEffects([sideEffectPath], bindingContext);
            Log.warning(`RequestSideEffects is triggered because the text annotation for ${valueHelpProperty} is not defined at the CollectionPath of the value help`);
            return undefined;
          } else {
            Log.error(`Text Annotation for ${valueHelpProperty} is not defined`);
            return undefined;
          }
        } catch (error) {
          const status = error ? error.status : undefined;
          const message = error instanceof Error ? error.message : String(error);
          const msg = status === 404 ? `Metadata not found (${status}) for value help of property ${propertyPath}` : message;
          Log.error(msg);
        }
      }
      return undefined;
    }
  });
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldBaseDelegate", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/type/TypeUtil","sap/ui/mdc/field/FieldBaseDelegate","sap/ui/mdc/odata/v4/TypeMap","sap/ui/model/Filter"],function(e,t,n,o,i,a){"use strict";return Object.assign({},o,{apiVersion:2,getTypeMap:function(){return i},initializeTypeFromBinding:function(e,t,n){const o={};if(t&&t.isA(["sap.ui.model.odata.type.Unit","sap.ui.model.odata.type.Currency"])&&Array.isArray(n)&&n.length>2&&n[2]!==undefined){t.formatValue(n,"string");o.bTypeInitialized=true;o.mCustomUnits=n[2]}return o},initializeInternalUnitType:function(e,t,n){if((n===null||n===void 0?void 0:n.mCustomUnits)!==undefined){t.formatValue([null,null,n.mCustomUnits],"string")}},enhanceValueForUnit:function(e,t,n){if((n===null||n===void 0?void 0:n.bTypeInitialized)===true&&t.length===2){t.push(n.mCustomUnits);return t}return undefined},getDefaultValueHelpDelegate:function(e){return{name:"sap/ui/mdc/odata/v4/ValueHelpDelegate",payload:{}}},getTypeUtil:function(e){return n},_getValueListParameter:function(e,t){return e.Parameters.filter(function(e){if(e.LocalDataProperty){return e.LocalDataProperty.$PropertyPath===t}else{return false}})},_getFilter:function(e,t,n,o,i,r,l){const u=[];const s=e.Parameters.filter(function(e){var o;return e.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterIn"||e.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterInOut"||((o=e.LocalDataProperty)===null||o===void 0?void 0:o.$PropertyPath)===t&&e.ValueListProperty===n});for(const e of s){var d;let n;if(((d=e.LocalDataProperty)===null||d===void 0?void 0:d.$PropertyPath)===t){n=o}else if((i===null||i===void 0?void 0:i.isActionParameterDialog)===true){var c;const t=`APD_::${(c=e.LocalDataProperty)===null||c===void 0?void 0:c.$PropertyPath}`;const o=sap.ui.getCore().byId(t);n=o===null||o===void 0?void 0:o.getValue()}else if(r!==undefined){var f;const t=(f=e.LocalDataProperty)===null||f===void 0?void 0:f.$PropertyPath;const o=r===null||r===void 0?void 0:r[0];n=t&&(o===null||o===void 0?void 0:o[t])}else if(l!==undefined){var p;const t=(p=e.LocalDataProperty)===null||p===void 0?void 0:p.$PropertyPath;n=l.getObject(t)}if(n!==null&&n!==undefined){u.push(new a({path:e.ValueListProperty,operator:"EQ",value1:n}))}}return u},getItemForValue:function(e,t,n){if(n.value===""){return}const i=e.getPayload();if(n.checkDescription){const e=t.getPayload();const o=e.valueHelpDescriptionPath;const i=e===null||e===void 0?void 0:e.maxLength;const a=n.value!==null&&n.value!==undefined?n.value.toString().length:0;if(o===""){n.checkDescription=false}else if(i!==undefined&&a>i){return}}return o.getItemForValue(e,t,n)},getDescription:async function(n,o,i,a,r,l,u,s,d,c,f){var p,v;let g=n===null||n===void 0?void 0:n.getPayload();if(!g&&c!==null&&c!==void 0&&c.getDisplay().includes("Description")){g={retrieveTextFromValueList:true}}if(((p=g)===null||p===void 0?void 0:p.retrieveTextFromValueList)===true||((v=g)===null||v===void 0?void 0:v.isFilterField)===true){const n=o.getModel();const a=n?n.getMetaModel():t.getAppComponent(o).getModel().getMetaModel();const r=o.getPayload();const u=d===null||d===void 0?void 0:d[r.valueHelpQualifier];const s=r.propertyPath;const c=r===null||r===void 0?void 0:r.propertyDescriptionPath;let f;try{var m;const n=await a.requestValueListInfo(s,true,l);const d=a.getObject(`${s}@sapui.name`);const p=n[Object.keys(n)[0]];const v=this._getValueListParameter(p,d);const g=v===null||v===void 0?void 0:(m=v[0])===null||m===void 0?void 0:m.ValueListProperty;if(!g){throw Error(`Inconsistent value help annotation for ${d}`)}const y=p.$model;const P=y.getMetaModel().getObject(`/${p.CollectionPath}/${g}@com.sap.vocabularies.Common.v1.Text`);if(P&&P.$Path){f=P.$Path;const e=this._getFilter(p,d,g,i,r,u,l);const t=y.bindList(`/${p.CollectionPath}`,undefined,undefined,e,{$select:f});const n=await t.requestContexts(0,2);return n.length?n[0].getObject(f):undefined}else if(l!==undefined&&c){const n=c.lastIndexOf("/");const i=n>0?c.substring(0,n):c;const a=t.getAppComponent(o).getSideEffectsService();await a.requestSideEffects([i],l);e.warning(`RequestSideEffects is triggered because the text annotation for ${g} is not defined at the CollectionPath of the value help`);return undefined}else{e.error(`Text Annotation for ${g} is not defined`);return undefined}}catch(t){const n=t?t.status:undefined;const o=t instanceof Error?t.message:String(t);const i=n===404?`Metadata not found (${n}) for value help of property ${s}`:o;e.error(i)}}return undefined}})},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldHelper-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/FieldControlHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/CommonHelper", "sap/fe/macros/internal/valuehelp/ValueListHelper", "sap/ui/base/ManagedObject", "sap/ui/model/odata/v4/AnnotationHelper"], function (Log, CommonUtils, BindingHelper, Key, BindingToolkit, ModelHelper, StableIdHelper, FieldControlHelper, UIFormatters, CommonHelper, ValueListHelper, ManagedObject, AnnotationHelper) {
  "use strict";

  var getAlignmentExpression = UIFormatters.getAlignmentExpression;
  var isRequiredExpression = FieldControlHelper.isRequiredExpression;
  var generate = StableIdHelper.generate;
  var or = BindingToolkit.or;
  var ifElse = BindingToolkit.ifElse;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var KeyHelper = Key.KeyHelper;
  var UI = BindingHelper.UI;
  const ISOCurrency = "@Org.OData.Measures.V1.ISOCurrency",
    Unit = "@Org.OData.Measures.V1.Unit";
  const FieldHelper = {
    isNotAlwaysHidden: function (oDataField, oDetails) {
      // this is used in HeaderDataPointTitle.fragment
      const oContext = oDetails.context;
      let isAlwaysHidden = false;
      if (oDataField.Value && oDataField.Value.$Path) {
        isAlwaysHidden = oContext.getObject("Value/$Path@com.sap.vocabularies.UI.v1.Hidden");
      }
      if (!isAlwaysHidden || isAlwaysHidden.$Path) {
        isAlwaysHidden = oContext.getObject("@com.sap.vocabularies.UI.v1.Hidden");
        if (!isAlwaysHidden || isAlwaysHidden.$Path) {
          isAlwaysHidden = false;
        }
      }
      return !isAlwaysHidden;
    },
    isRequired: function (oFieldControl, sEditMode) {
      // this is used in actionParameterDialog.fragment
      if (sEditMode === "Display" || sEditMode === "ReadOnly" || sEditMode === "Disabled") {
        return false;
      }
      if (oFieldControl) {
        if (ManagedObject.bindingParser(oFieldControl)) {
          return "{= %" + oFieldControl + " === 7}";
        } else {
          return oFieldControl == "com.sap.vocabularies.Common.v1.FieldControlType/Mandatory";
        }
      }
      return false;
    },
    getActionParameterVisibility: function (oParam, oContext) {
      // To use the UI.Hidden annotation for controlling visibility the value needs to be negated
      if (typeof oParam === "object") {
        if (oParam && oParam.$If && oParam.$If.length === 3) {
          // In case the UI.Hidden contains a dynamic expression we do this
          // by just switching the "then" and "else" part of the erpression
          // oParam.$If[0] <== Condition part
          // oParam.$If[1] <== Then part
          // oParam.$If[2] <== Else part
          const oNegParam = {
            $If: []
          };
          oNegParam.$If[0] = oParam.$If[0];
          oNegParam.$If[1] = oParam.$If[2];
          oNegParam.$If[2] = oParam.$If[1];
          return AnnotationHelper.value(oNegParam, oContext);
        } else {
          return "{= !%{" + oParam.$Path + "} }";
        }
      } else if (typeof oParam === "boolean") {
        return AnnotationHelper.value(!oParam, oContext);
      } else {
        return undefined;
      }
    },
    /**
     * Computed annotation that returns vProperty for a string and @sapui.name for an object.
     *
     * @param vProperty The property
     * @param oInterface The interface instance
     * @returns The property name
     */
    propertyName: function (vProperty, oInterface) {
      let sPropertyName;
      if (typeof vProperty === "string") {
        if (oInterface.context.getPath().indexOf("$Path") > -1 || oInterface.context.getPath().indexOf("$PropertyPath") > -1) {
          // We could end up with a pure string property (no $Path), and this is not a real property in that case
          sPropertyName = vProperty;
        }
      } else if (vProperty.$Path || vProperty.$PropertyPath) {
        const sPath = vProperty.$Path ? "/$Path" : "/$PropertyPath";
        const sContextPath = oInterface.context.getPath();
        sPropertyName = oInterface.context.getObject(`${sContextPath + sPath}/$@sapui.name`);
      } else if (vProperty.Value && vProperty.Value.$Path) {
        sPropertyName = vProperty.Value.$Path;
      } else {
        sPropertyName = oInterface.context.getObject("@sapui.name");
      }
      return sPropertyName;
    },
    fieldControl: function (sPropertyPath, oInterface) {
      // actionParameter dialog and editable header facet
      const oModel = oInterface && oInterface.context.getModel();
      const sPath = oInterface && oInterface.context.getPath();
      const oFieldControlContext = oModel && oModel.createBindingContext(`${sPath}@com.sap.vocabularies.Common.v1.FieldControl`);
      const oFieldControl = oFieldControlContext && oFieldControlContext.getProperty();
      if (oFieldControl) {
        if (oFieldControl.hasOwnProperty("$EnumMember")) {
          return oFieldControl.$EnumMember;
        } else if (oFieldControl.hasOwnProperty("$Path")) {
          return AnnotationHelper.value(oFieldControl, {
            context: oFieldControlContext
          });
        }
      } else {
        return undefined;
      }
    },
    /**
     * Method to get the value help property from a DataField or a PropertyPath (in case a SelectionField is used)
     * Priority from where to get the property value of the field (examples are "Name" and "Supplier"):
     * 1. If oPropertyContext.getObject() has key '$Path', then we take the value at '$Path'.
     * 2. Else, value at oPropertyContext.getObject().
     * If there is an ISOCurrency or if there are Unit annotations for the field property,
     * then the Path at the ISOCurrency or Unit annotations of the field property is considered.
     *
     * @memberof sap.fe.macros.field.FieldHelper.js
     * @param oPropertyContext The context from which value help property need to be extracted.
     * @param bInFilterField Whether or not we're in the filter field and should ignore
     * @returns The value help property path
     */
    valueHelpProperty: function (oPropertyContext, bInFilterField) {
      /* For currency (and later Unit) we need to forward the value help to the annotated field */
      const sContextPath = oPropertyContext.getPath();
      const oContent = oPropertyContext.getObject() || {};
      let sPath = oContent.$Path ? `${sContextPath}/$Path` : sContextPath;
      const sAnnoPath = `${sPath}@`;
      const oPropertyAnnotations = oPropertyContext.getObject(sAnnoPath);
      let sAnnotation;
      if (oPropertyAnnotations) {
        sAnnotation = oPropertyAnnotations.hasOwnProperty(ISOCurrency) && ISOCurrency || oPropertyAnnotations.hasOwnProperty(Unit) && Unit;
        if (sAnnotation && !bInFilterField) {
          const sUnitOrCurrencyPath = `${sPath + sAnnotation}/$Path`;
          // we check that the currency or unit is a Property and not a fixed value
          if (oPropertyContext.getObject(sUnitOrCurrencyPath)) {
            sPath = sUnitOrCurrencyPath;
          }
        }
      }
      return sPath;
    },
    /**
     * Dedicated method to avoid looking for unit properties.
     *
     * @param oPropertyContext
     * @returns The value help property path
     */
    valueHelpPropertyForFilterField: function (oPropertyContext) {
      return FieldHelper.valueHelpProperty(oPropertyContext, true);
    },
    /**
     * Method to generate the ID for Value Help.
     *
     * @function
     * @name getIDForFieldValueHelp
     * @memberof sap.fe.macros.field.FieldHelper.js
     * @param sFlexId Flex ID of the current object
     * @param sIdPrefix Prefix for the ValueHelp ID
     * @param sOriginalPropertyName Name of the property
     * @param sPropertyName Name of the ValueHelp Property
     * @returns The ID generated for the ValueHelp
     */
    getIDForFieldValueHelp: function (sFlexId, sIdPrefix, sOriginalPropertyName, sPropertyName) {
      if (sFlexId) {
        return sFlexId;
      }
      let sProperty = sPropertyName;
      if (sOriginalPropertyName !== sPropertyName) {
        sProperty = `${sOriginalPropertyName}::${sPropertyName}`;
      }
      return generate([sIdPrefix, sProperty]);
    },
    /**
     * Method to get the fieldHelp property of the FilterField.
     *
     * @function
     * @name getFieldHelpPropertyForFilterField
     * @memberof sap.fe.macros.field.FieldHelper.js
     * @param propertyContext Property context for filter field
     * @param oProperty The object of the FieldHelp property
     * @param sPropertyType The $Type of the property
     * @param sVhIdPrefix The ID prefix of the value help
     * @param sPropertyName The name of the property
     * @param sValueHelpPropertyName The property name of the value help
     * @param bHasValueListWithFixedValues `true` if there is a value list with a fixed value annotation
     * @param bUseSemanticDateRange `true` if the semantic date range is set to 'true' in the manifest
     * @returns The field help property of the value help
     */
    getFieldHelpPropertyForFilterField: function (propertyContext, oProperty, sPropertyType, sVhIdPrefix, sPropertyName, sValueHelpPropertyName, bHasValueListWithFixedValues, bUseSemanticDateRange) {
      const sProperty = FieldHelper.propertyName(oProperty, {
          context: propertyContext
        }),
        bSemanticDateRange = bUseSemanticDateRange === "true" || bUseSemanticDateRange === true;
      const oModel = propertyContext.getModel(),
        sPropertyPath = propertyContext.getPath(),
        sPropertyLocationPath = CommonHelper.getLocationForPropertyPath(oModel, sPropertyPath),
        oFilterRestrictions = CommonUtils.getFilterRestrictionsByPath(sPropertyLocationPath, oModel);
      if ((sPropertyType === "Edm.DateTimeOffset" || sPropertyType === "Edm.Date") && bSemanticDateRange && oFilterRestrictions && oFilterRestrictions.FilterAllowedExpressions && oFilterRestrictions.FilterAllowedExpressions[sProperty] && (oFilterRestrictions.FilterAllowedExpressions[sProperty].indexOf("SingleRange") !== -1 || oFilterRestrictions.FilterAllowedExpressions[sProperty].indexOf("SingleValue") !== -1) || sPropertyType === "Edm.Boolean" && !bHasValueListWithFixedValues) {
        return undefined;
      }
      return FieldHelper.getIDForFieldValueHelp(null, sVhIdPrefix || "FilterFieldValueHelp", sPropertyName, sValueHelpPropertyName);
    },
    /*
     * Method to compute the delegate with payload
     * @function
     * @param {object} delegateName - name of the delegate methode
     * @param {boolean} retrieveTextFromValueList - added to the payload of the delegate methode
     * @return {object} - returns the delegate with payload
     */
    computeFieldBaseDelegate: function (delegateName, retrieveTextFromValueList) {
      if (retrieveTextFromValueList) {
        return JSON.stringify({
          name: delegateName,
          payload: {
            retrieveTextFromValueList: retrieveTextFromValueList
          }
        });
      }
      return `{name: '${delegateName}'}`;
    },
    _getPrimaryIntents: function (aSemanticObjectsList) {
      const aPromises = [];
      if (aSemanticObjectsList) {
        const oUshellContainer = sap.ushell && sap.ushell.Container;
        const oService = oUshellContainer && oUshellContainer.getService("CrossApplicationNavigation");
        aSemanticObjectsList.forEach(function (semObject) {
          if (typeof semObject === "string") {
            aPromises.push(oService.getPrimaryIntent(semObject, {}));
          }
        });
      }
      return Promise.all(aPromises).then(function (aSemObjectPrimaryAction) {
        return aSemObjectPrimaryAction;
      }).catch(function (oError) {
        Log.error("Error fetching primary intents", oError);
        return [];
      });
    },
    _checkIfSemanticObjectsHasPrimaryAction: function (oSemantics, aSemanticObjectsPrimaryActions, appComponent) {
      const _fnIsSemanticObjectActionUnavailable = function (_oSemantics, _oPrimaryAction, _index) {
        for (const unavailableActionsIndex in _oSemantics.semanticObjectUnavailableActions[_index].actions) {
          if (_oPrimaryAction.intent.split("-")[1].indexOf(_oSemantics.semanticObjectUnavailableActions[_index].actions[unavailableActionsIndex]) === 0) {
            return false;
          }
        }
        return true;
      };
      oSemantics.semanticPrimaryActions = aSemanticObjectsPrimaryActions;
      const oPrimaryAction = oSemantics.semanticObjects && oSemantics.mainSemanticObject && oSemantics.semanticPrimaryActions[oSemantics.semanticObjects.indexOf(oSemantics.mainSemanticObject)];
      const sCurrentHash = appComponent.getShellServices().getHash();
      if (oSemantics.mainSemanticObject && oPrimaryAction !== null && oPrimaryAction.intent !== sCurrentHash) {
        for (const index in oSemantics.semanticObjectUnavailableActions) {
          if (oSemantics.mainSemanticObject.indexOf(oSemantics.semanticObjectUnavailableActions[index].semanticObject) === 0) {
            return _fnIsSemanticObjectActionUnavailable(oSemantics, oPrimaryAction, index);
          }
        }
        return true;
      } else {
        return false;
      }
    },
    checkPrimaryActions: function (oSemantics, bGetTitleLink, appComponent) {
      return this._getPrimaryIntents(oSemantics && oSemantics.semanticObjects).then(aSemanticObjectsPrimaryActions => {
        return bGetTitleLink ? {
          titleLink: aSemanticObjectsPrimaryActions,
          hasTitleLink: this._checkIfSemanticObjectsHasPrimaryAction(oSemantics, aSemanticObjectsPrimaryActions, appComponent)
        } : this._checkIfSemanticObjectsHasPrimaryAction(oSemantics, aSemanticObjectsPrimaryActions, appComponent);
      }).catch(function (oError) {
        Log.error("Error in checkPrimaryActions", oError);
      });
    },
    _getTitleLinkWithParameters: function (_oSemanticObjectModel, _linkIntent) {
      if (_oSemanticObjectModel && _oSemanticObjectModel.titlelink) {
        return _oSemanticObjectModel.titlelink;
      } else {
        return _linkIntent;
      }
    },
    getPrimaryAction: function (oSemantics) {
      return oSemantics.semanticPrimaryActions[oSemantics.semanticObjects.indexOf(oSemantics.mainSemanticObject)].intent ? FieldHelper._getTitleLinkWithParameters(oSemantics, oSemantics.semanticPrimaryActions[oSemantics.semanticObjects.indexOf(oSemantics.mainSemanticObject)].intent) : oSemantics.primaryIntentAction;
    },
    /**
     * Method to fetch the filter restrictions. Filter restrictions can be annotated on an entity set or a navigation property.
     * Depending on the path to which the control is bound, we check for filter restrictions on the context path of the control,
     * or on the navigation property (if there is a navigation).
     * Eg. If the table is bound to '/EntitySet', for property path '/EntitySet/_Association/PropertyName', the filter restrictions
     * on '/EntitySet' win over filter restrictions on '/EntitySet/_Association'.
     * If the table is bound to '/EntitySet/_Association', the filter restrictions on '/EntitySet/_Association' win over filter
     * retrictions on '/AssociationEntitySet'.
     *
     * @param oContext Property Context
     * @param oProperty Property object in the metadata
     * @param bUseSemanticDateRange Boolean Suggests if semantic date range should be used
     * @param sSettings Stringified object of the property settings
     * @param contextPath Path to which the parent control (the table or the filter bar) is bound
     * @returns String containing comma-separated list of operators for filtering
     */
    operators: function (oContext, oProperty, bUseSemanticDateRange, sSettings, contextPath) {
      // this is used in FilterField.block
      if (!oProperty || !contextPath) {
        return undefined;
      }
      let operators;
      const sProperty = FieldHelper.propertyName(oProperty, {
        context: oContext
      });
      const oModel = oContext.getModel(),
        sPropertyPath = oContext.getPath(),
        sPropertyLocationPath = CommonHelper.getLocationForPropertyPath(oModel, sPropertyPath),
        propertyType = oProperty.$Type;
      if (propertyType === "Edm.Guid") {
        return CommonUtils.getOperatorsForGuidProperty();
      }

      // remove '/'
      contextPath = contextPath.slice(0, -1);
      const isTableBoundToNavigation = contextPath.lastIndexOf("/") > 0;
      const isNavigationPath = isTableBoundToNavigation && contextPath !== sPropertyLocationPath || !isTableBoundToNavigation && sPropertyLocationPath.lastIndexOf("/") > 0;
      const navigationPath = isNavigationPath && sPropertyLocationPath.substr(sPropertyLocationPath.indexOf(contextPath) + contextPath.length + 1) || "";
      const propertyPath = isNavigationPath && navigationPath + "/" + sProperty || sProperty;
      if (!isTableBoundToNavigation) {
        if (!isNavigationPath) {
          // /SalesOrderManage/ID
          operators = CommonUtils.getOperatorsForProperty(sProperty, sPropertyLocationPath, oModel, propertyType, bUseSemanticDateRange, sSettings);
        } else {
          // /SalesOrderManange/_Item/Material
          //let operators
          operators = CommonUtils.getOperatorsForProperty(propertyPath, contextPath, oModel, propertyType, bUseSemanticDateRange, sSettings);
          if (operators.length === 0) {
            operators = CommonUtils.getOperatorsForProperty(sProperty, sPropertyLocationPath, oModel, propertyType, bUseSemanticDateRange, sSettings);
          }
        }
      } else if (!isNavigationPath) {
        var _operators;
        // /SalesOrderManage/_Item/Material
        operators = CommonUtils.getOperatorsForProperty(propertyPath, contextPath, oModel, propertyType, bUseSemanticDateRange, sSettings);
        if (operators.length === 0) {
          operators = CommonUtils.getOperatorsForProperty(sProperty, ModelHelper.getEntitySetPath(contextPath), oModel, propertyType, bUseSemanticDateRange, sSettings);
        }
        return ((_operators = operators) === null || _operators === void 0 ? void 0 : _operators.length) > 0 ? operators.toString() : undefined;
      } else {
        // /SalesOrderManage/_Item/_Association/PropertyName
        // This is currently not supported for tables
        operators = CommonUtils.getOperatorsForProperty(propertyPath, contextPath, oModel, propertyType, bUseSemanticDateRange, sSettings);
        if (operators.length === 0) {
          operators = CommonUtils.getOperatorsForProperty(propertyPath, ModelHelper.getEntitySetPath(contextPath), oModel, propertyType, bUseSemanticDateRange, sSettings);
        }
      }
      if ((!operators || operators.length === 0) && (propertyType === "Edm.Date" || propertyType === "Edm.DateTimeOffset")) {
        operators = CommonUtils.getOperatorsForDateProperty(propertyType);
      }
      return operators.length > 0 ? operators.toString() : undefined;
    },
    /**
     * Return the path of the DaFieldDefault (if any). Otherwise, the DataField path is returned.
     *
     * @param oDataFieldContext Context of the DataField
     * @returns Object path
     */
    getDataFieldDefault: function (oDataFieldContext) {
      // this is used in column.fragment
      const oDataFieldDefault = oDataFieldContext.getModel().getObject(`${oDataFieldContext.getPath()}@com.sap.vocabularies.UI.v1.DataFieldDefault`);
      return oDataFieldDefault ? `${oDataFieldContext.getPath()}@com.sap.vocabularies.UI.v1.DataFieldDefault` : oDataFieldContext.getPath();
    },
    /*
     * Method to get visible expression for DataFieldActionButton
     * @function
     * @name isDataFieldActionButtonVisible
     * @param {object} oThis - Current Object
     * @param {object} oDataField - DataPoint's Value
     * @param {boolean} bIsBound - DataPoint action bound
     * @param {object} oActionContext - ActionContext Value
     * @return {boolean} - returns boolean
     */
    isDataFieldActionButtonVisible: function (oThis, oDataField, bIsBound, oActionContext) {
      return oDataField["@com.sap.vocabularies.UI.v1.Hidden"] !== true && (bIsBound !== true || oActionContext !== false);
    },
    /**
     * Method to get press event for DataFieldActionButton.
     *
     * @function
     * @name getPressEventForDataFieldActionButton
     * @param oThis Current Object
     * @param oDataField DataPoint's Value
     * @returns The binding expression for the DataFieldActionButton press event
     */
    getPressEventForDataFieldActionButton: function (oThis, oDataField) {
      var _oThis$entitySet;
      let sInvocationGrouping = "Isolated";
      if (oDataField.InvocationGrouping && oDataField.InvocationGrouping.$EnumMember === "com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet") {
        sInvocationGrouping = "ChangeSet";
      }
      let bIsNavigable = oThis.navigateAfterAction;
      bIsNavigable = bIsNavigable === "false" ? false : true;
      const entities = oThis === null || oThis === void 0 ? void 0 : (_oThis$entitySet = oThis.entitySet) === null || _oThis$entitySet === void 0 ? void 0 : _oThis$entitySet.getPath().split("/");
      const entitySetName = entities[entities.length - 1];
      const oParams = {
        contexts: "${$source>/}.getBindingContext()",
        invocationGrouping: CommonHelper.addSingleQuotes(sInvocationGrouping),
        model: "${$source>/}.getModel()",
        label: CommonHelper.addSingleQuotes(oDataField.Label, true),
        isNavigable: bIsNavigable,
        entitySetName: CommonHelper.addSingleQuotes(entitySetName)
      };
      return CommonHelper.generateFunction(".editFlow.invokeAction", CommonHelper.addSingleQuotes(oDataField.Action), CommonHelper.objectToString(oParams));
    },
    isNumericDataType: function (sDataFieldType) {
      const _sDataFieldType = sDataFieldType;
      if (_sDataFieldType !== undefined) {
        const aNumericDataTypes = ["Edm.Int16", "Edm.Int32", "Edm.Int64", "Edm.Byte", "Edm.SByte", "Edm.Single", "Edm.Decimal", "Edm.Double"];
        return aNumericDataTypes.indexOf(_sDataFieldType) === -1 ? false : true;
      } else {
        return false;
      }
    },
    isDateOrTimeDataType: function (sPropertyType) {
      if (sPropertyType !== undefined) {
        const aDateTimeDataTypes = ["Edm.DateTimeOffset", "Edm.DateTime", "Edm.Date", "Edm.TimeOfDay", "Edm.Time"];
        return aDateTimeDataTypes.indexOf(sPropertyType) > -1;
      } else {
        return false;
      }
    },
    isDateTimeDataType: function (sPropertyType) {
      if (sPropertyType !== undefined) {
        const aDateDataTypes = ["Edm.DateTimeOffset", "Edm.DateTime"];
        return aDateDataTypes.indexOf(sPropertyType) > -1;
      } else {
        return false;
      }
    },
    isDateDataType: function (sPropertyType) {
      return sPropertyType === "Edm.Date";
    },
    isTimeDataType: function (sPropertyType) {
      if (sPropertyType !== undefined) {
        const aDateDataTypes = ["Edm.TimeOfDay", "Edm.Time"];
        return aDateDataTypes.indexOf(sPropertyType) > -1;
      } else {
        return false;
      }
    },
    /**
     * To display a text arrangement showing text and id, we need a string field on the UI.
     *
     * @param oAnnotations All the annotations of a property
     * @param sType The property data type
     * @returns The type to be used on the UI for the alignment
     * @private
     */
    getDataTypeForVisualization: function (oAnnotations, sType) {
      var _oAnnotations$sTextAr, _oAnnotations$sTextAn;
      const sTextAnnotation = "@com.sap.vocabularies.Common.v1.Text",
        sTextArrangementAnnotation = "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement";

      /*
        In case of TextSeparate, the returned is used for the filed itself only showing
         the value of the original property, thus also the type of the property needs to be used.
        In case of TextOnly, we consider it to be Edm.String according to the definition
         in the vocabulary, even if it's not.
        In other cases, we return Edm.String, as the value is build using a text template.
       */
      return (oAnnotations === null || oAnnotations === void 0 ? void 0 : (_oAnnotations$sTextAr = oAnnotations[sTextArrangementAnnotation]) === null || _oAnnotations$sTextAr === void 0 ? void 0 : _oAnnotations$sTextAr.$EnumMember) !== "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate" && oAnnotations !== null && oAnnotations !== void 0 && (_oAnnotations$sTextAn = oAnnotations[sTextAnnotation]) !== null && _oAnnotations$sTextAn !== void 0 && _oAnnotations$sTextAn.$Path ? "Edm.String" : sType;
    },
    getColumnAlignment: function (oDataField, oTable) {
      const sEntityPath = oTable.collection.sPath,
        oModel = oTable.collection.oModel;
      if ((oDataField["$Type"] === "com.sap.vocabularies.UI.v1.DataFieldForAction" || oDataField["$Type"] === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") && oDataField.Inline && oDataField.IconUrl) {
        return "Center";
      }
      // Columns containing a Semantic Key must be Begin aligned
      const aSemanticKeys = oModel.getObject(`${sEntityPath}/@com.sap.vocabularies.Common.v1.SemanticKey`);
      if (oDataField["$Type"] === "com.sap.vocabularies.UI.v1.DataField") {
        const sPropertyPath = oDataField.Value.$Path;
        const bIsSemanticKey = aSemanticKeys && !aSemanticKeys.every(function (oKey) {
          return oKey.$PropertyPath !== sPropertyPath;
        });
        if (bIsSemanticKey) {
          return "Begin";
        }
      }
      return FieldHelper.getDataFieldAlignment(oDataField, oModel, sEntityPath);
    },
    /**
     * Get alignment based only on the property.
     *
     * @param sType The property's type
     * @param oFormatOptions The field format options
     * @param [oComputedEditMode] The computed Edit mode of the property is empty when directly called from the ColumnProperty fragment
     * @returns The property alignment
     */
    getPropertyAlignment: function (sType, oFormatOptions, oComputedEditMode) {
      let sDefaultAlignment = "Begin";
      const sTextAlignment = oFormatOptions ? oFormatOptions.textAlignMode : "";
      switch (sTextAlignment) {
        case "Form":
          if (this.isNumericDataType(sType)) {
            sDefaultAlignment = "Begin";
            if (oComputedEditMode) {
              sDefaultAlignment = getAlignmentExpression(oComputedEditMode, "Begin", "End");
            }
          }
          break;
        default:
          if (this.isNumericDataType(sType) || this.isDateOrTimeDataType(sType)) {
            sDefaultAlignment = "Right";
          }
          break;
      }
      return sDefaultAlignment;
    },
    getDataFieldAlignment: function (oDataField, oModel, sEntityPath, oFormatOptions, oComputedEditMode) {
      let sDataFieldPath,
        sDefaultAlignment = "Begin",
        sType,
        oAnnotations;
      if (oDataField["$Type"] === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
        sDataFieldPath = oDataField.Target.$AnnotationPath;
        if (oDataField.Target["$AnnotationPath"] && oDataField.Target["$AnnotationPath"].indexOf("com.sap.vocabularies.UI.v1.FieldGroup") >= 0) {
          const oFieldGroup = oModel.getObject(`${sEntityPath}/${sDataFieldPath}`);
          for (let i = 0; i < oFieldGroup.Data.length; i++) {
            sType = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/Data/${i.toString()}/Value/$Path/$Type`);
            oAnnotations = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/Data/${i.toString()}/Value/$Path@`);
            sType = this.getDataTypeForVisualization(oAnnotations, sType);
            sDefaultAlignment = this.getPropertyAlignment(sType, oFormatOptions, oComputedEditMode);
            if (sDefaultAlignment === "Begin") {
              break;
            }
          }
          return sDefaultAlignment;
        } else if (oDataField.Target["$AnnotationPath"] && oDataField.Target["$AnnotationPath"].indexOf("com.sap.vocabularies.UI.v1.DataPoint") >= 0 && oModel.getObject(`${sEntityPath}/${sDataFieldPath}/Visualization/$EnumMember`) === "com.sap.vocabularies.UI.v1.VisualizationType/Rating") {
          return sDefaultAlignment;
        } else {
          sType = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/$Type`);
          if (sType === "com.sap.vocabularies.UI.v1.DataPointType") {
            sType = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/Value/$Path/$Type`);
            oAnnotations = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/Value/$Path@`);
            sType = this.getDataTypeForVisualization(oAnnotations, sType);
          }
          sDefaultAlignment = this.getPropertyAlignment(sType, oFormatOptions, oComputedEditMode);
        }
      } else {
        sDataFieldPath = oDataField.Value.$Path;
        sType = oModel.getObject(`${sEntityPath}/${sDataFieldPath}/$Type`);
        oAnnotations = oModel.getObject(`${sEntityPath}/${sDataFieldPath}@`);
        sType = this.getDataTypeForVisualization(oAnnotations, sType);
        if (!(oModel.getObject(`${sEntityPath}/`)["$Key"].indexOf(sDataFieldPath) === 0)) {
          sDefaultAlignment = this.getPropertyAlignment(sType, oFormatOptions, oComputedEditMode);
        }
      }
      return sDefaultAlignment;
    },
    getTypeAlignment: function (oContext, oDataField, oFormatOptions, sEntityPath, oComputedEditMode, oProperty) {
      const oInterface = oContext.getInterface(0);
      const oModel = oInterface.getModel();
      if (sEntityPath === "/undefined" && oProperty && oProperty.$target) {
        sEntityPath = `/${oProperty.$target.fullyQualifiedName.split("/")[0]}`;
      }
      return FieldHelper.getDataFieldAlignment(oDataField, oModel, sEntityPath, oFormatOptions, oComputedEditMode);
    },
    /**
     * Method to get enabled expression for DataFieldActionButton.
     *
     * @function
     * @name isDataFieldActionButtonEnabled
     * @param oDataField DataPoint's Value
     * @param bIsBound DataPoint action bound
     * @param oActionContext ActionContext Value
     * @param sActionContextFormat Formatted value of ActionContext
     * @returns A boolean or string expression for enabled property
     */
    isDataFieldActionButtonEnabled: function (oDataField, bIsBound, oActionContext, sActionContextFormat) {
      if (bIsBound !== true) {
        return "true";
      }
      return (oActionContext === null ? "{= !${#" + oDataField.Action + "} ? false : true }" : oActionContext) ? sActionContextFormat : "true";
    },
    /**
     * Method to compute the label for a DataField.
     * If the DataField's label is an empty string, it's not rendered even if a fallback exists.
     *
     * @function
     * @name computeLabelText
     * @param {object} oDataField The DataField being processed
     * @param {object} oInterface The interface for context instance
     * @returns {string} The computed text for the DataField label.
     */

    computeLabelText: function (oDataField, oInterface) {
      const oModel = oInterface.context.getModel();
      let sContextPath = oInterface.context.getPath();
      if (sContextPath.endsWith("/")) {
        sContextPath = sContextPath.slice(0, sContextPath.lastIndexOf("/"));
      }
      const sDataFieldLabel = oModel.getObject(`${sContextPath}/Label`);
      //We do not show an additional label text for a button:
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
        return undefined;
      }
      if (sDataFieldLabel) {
        return sDataFieldLabel;
      } else if (sDataFieldLabel === "") {
        return "";
      }
      let sDataFieldTargetTitle;
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
        if (oDataField.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.DataPoint") > -1 || oDataField.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.Chart") > -1) {
          sDataFieldTargetTitle = oModel.getObject(`${sContextPath}/Target/$AnnotationPath@/Title`);
        }
        if (oDataField.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.Communication.v1.Contact") > -1) {
          sDataFieldTargetTitle = oModel.getObject(`${sContextPath}/Target/$AnnotationPath@/fn/$Path@com.sap.vocabularies.Common.v1.Label`);
        }
      }
      if (sDataFieldTargetTitle) {
        return sDataFieldTargetTitle;
      }
      let sDataFieldTargetLabel;
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
        sDataFieldTargetLabel = oModel.getObject(`${sContextPath}/Target/$AnnotationPath@/Label`);
      }
      if (sDataFieldTargetLabel) {
        return sDataFieldTargetLabel;
      }
      const sDataFieldValueLabel = oModel.getObject(`${sContextPath}/Value/$Path@com.sap.vocabularies.Common.v1.Label`);
      if (sDataFieldValueLabel) {
        return sDataFieldValueLabel;
      }
      let sDataFieldTargetValueLabel;
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
        sDataFieldTargetValueLabel = oModel.getObject(`${sContextPath}/Target/$AnnotationPath/Value/$Path@com.sap.vocabularies.Common.v1.Label`);
      }
      if (sDataFieldTargetValueLabel) {
        return sDataFieldTargetValueLabel;
      }
      return "";
    },
    /**
     * Method to align the data fields with their label.
     *
     * @function
     * @name buildExpressionForAlignItems
     * @param sVisualization
     * @returns Expression binding for alignItems property
     */
    buildExpressionForAlignItems: function (sVisualization) {
      const fieldVisualizationBindingExpression = constant(sVisualization);
      const progressVisualizationBindingExpression = constant("com.sap.vocabularies.UI.v1.VisualizationType/Progress");
      const ratingVisualizationBindingExpression = constant("com.sap.vocabularies.UI.v1.VisualizationType/Rating");
      return compileExpression(ifElse(or(equal(fieldVisualizationBindingExpression, progressVisualizationBindingExpression), equal(fieldVisualizationBindingExpression, ratingVisualizationBindingExpression)), constant("Center"), ifElse(UI.IsEditable, constant("Center"), constant("Stretch"))));
    },
    /**
     * Method to check ValueListReferences, ValueListMapping and ValueList inside ActionParameters for FieldHelp.
     *
     * @function
     * @name hasValueHelp
     * @param oPropertyAnnotations Action parameter object
     * @returns `true` if there is a ValueList* annotation defined
     */
    hasValueHelpAnnotation: function (oPropertyAnnotations) {
      if (oPropertyAnnotations) {
        return !!(oPropertyAnnotations["@com.sap.vocabularies.Common.v1.ValueListReferences"] || oPropertyAnnotations["@com.sap.vocabularies.Common.v1.ValueListMapping"] || oPropertyAnnotations["@com.sap.vocabularies.Common.v1.ValueList"]);
      }
      return false;
    },
    /**
     * Method to get display property for ActionParameter dialog.
     *
     * 	@function
     * @name getAPDialogDisplayFormat
     * @param oProperty The action parameter instance
     * @param oInterface The interface for the context instance
     * @returns The display format  for an action parameter Field
     */
    getAPDialogDisplayFormat: function (oProperty, oInterface) {
      let oAnnotation;
      const oModel = oInterface.context.getModel();
      const sContextPath = oInterface.context.getPath();
      const sPropertyName = oProperty.$Name || oInterface.context.getProperty(`${sContextPath}@sapui.name`);
      const oActionParameterAnnotations = oModel.getObject(`${sContextPath}@`);
      const oValueHelpAnnotation = oActionParameterAnnotations["@com.sap.vocabularies.Common.v1.ValueList"] || oActionParameterAnnotations["@com.sap.vocabularies.Common.v1.ValueListMapping"] || oActionParameterAnnotations["@com.sap.vocabularies.Common.v1.ValueListReferences"];
      const getValueListPropertyName = function (oValueList) {
        const oValueListParameter = oValueList.Parameters.find(function (oParameter) {
          return oParameter.LocalDataProperty && oParameter.LocalDataProperty.$PropertyPath === sPropertyName;
        });
        return oValueListParameter && oValueListParameter.ValueListProperty;
      };
      let sValueListPropertyName;
      if (oActionParameterAnnotations["@com.sap.vocabularies.Common.v1.TextArrangement"] || oActionParameterAnnotations["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]) {
        return CommonUtils.computeDisplayMode(oActionParameterAnnotations, undefined);
      } else if (oValueHelpAnnotation) {
        if (oValueHelpAnnotation.CollectionPath) {
          // get the name of the corresponding property in value list collection
          sValueListPropertyName = getValueListPropertyName(oValueHelpAnnotation);
          if (!sValueListPropertyName) {
            return "Value";
          }
          // get text for this property
          oAnnotation = oModel.getObject(`/${oValueHelpAnnotation.CollectionPath}/${sValueListPropertyName}@`);
          return oAnnotation && oAnnotation["@com.sap.vocabularies.Common.v1.Text"] ? CommonUtils.computeDisplayMode(oAnnotation, undefined) : "Value";
        } else {
          return oModel.requestValueListInfo(sContextPath, true).then(function (oValueListInfo) {
            // get the name of the corresponding property in value list collection
            sValueListPropertyName = getValueListPropertyName(oValueListInfo[""]);
            if (!sValueListPropertyName) {
              return "Value";
            }
            // get text for this property
            oAnnotation = oValueListInfo[""].$model.getMetaModel().getObject(`/${oValueListInfo[""]["CollectionPath"]}/${sValueListPropertyName}@`);
            return oAnnotation && oAnnotation["@com.sap.vocabularies.Common.v1.Text"] ? CommonUtils.computeDisplayMode(oAnnotation, undefined) : "Value";
          });
        }
      } else {
        return "Value";
      }
    },
    /**
     * Method to get display property for ActionParameter dialog FieldHelp.
     *
     * @function
     * @name getActionParameterDialogFieldHelp
     * @param oActionParameter Action parameter object
     * @param sSapUIName Action sapui name
     * @param sParamName The parameter name
     * @returns The ID of the fieldHelp used by this action parameter
     */
    getActionParameterDialogFieldHelp: function (oActionParameter, sSapUIName, sParamName) {
      return this.hasValueHelpAnnotation(oActionParameter) ? generate([sSapUIName, sParamName]) : undefined;
    },
    /**
     * Method to get the delegate configuration for ActionParameter dialog.
     *
     * @function
     * @name getValueHelpDelegate
     * @param isBound Action is bound
     * @param entityTypePath The EntityType Path
     * @param sapUIName The name of the Action
     * @param paramName The name of the ActionParameter
     * @returns The delegate configuration object as a string
     */
    getValueHelpDelegate: function (isBound, entityTypePath, sapUIName, paramName) {
      const delegateConfiguration = {
        name: CommonHelper.addSingleQuotes("sap/fe/macros/valuehelp/ValueHelpDelegate"),
        payload: {
          propertyPath: CommonHelper.addSingleQuotes(ValueListHelper.getPropertyPath({
            UnboundAction: !isBound,
            EntityTypePath: entityTypePath,
            Action: sapUIName,
            Property: paramName
          })),
          qualifiers: {},
          valueHelpQualifier: CommonHelper.addSingleQuotes(""),
          isActionParameterDialog: true
        }
      };
      return CommonHelper.objectToString(delegateConfiguration);
    },
    /**
     * Method to get the delegate configuration for NonComputedVisibleKeyField dialog.
     *
     * @function
     * @name getValueHelpDelegateForNonComputedVisibleKeyField
     * @param propertyPath The current property path
     * @returns The delegate configuration object as a string
     */
    getValueHelpDelegateForNonComputedVisibleKeyField: function (propertyPath) {
      const delegateConfiguration = {
        name: CommonHelper.addSingleQuotes("sap/fe/macros/valuehelp/ValueHelpDelegate"),
        payload: {
          propertyPath: CommonHelper.addSingleQuotes(propertyPath),
          qualifiers: {},
          valueHelpQualifier: CommonHelper.addSingleQuotes("")
        }
      };
      return CommonHelper.objectToString(delegateConfiguration);
    },
    /**
     * Method to fetch entity from a path containing multiple associations.
     *
     * @function
     * @name _getEntitySetFromMultiLevel
     * @param oContext The context whose path is to be checked
     * @param sPath The path from which entity has to be fetched
     * @param sSourceEntity The entity path in which nav entity exists
     * @param iStart The start index : beginning parts of the path to be ignored
     * @param iDiff The diff index : end parts of the path to be ignored
     * @returns The path of the entity set
     */
    _getEntitySetFromMultiLevel: function (oContext, sPath, sSourceEntity, iStart, iDiff) {
      let aNavParts = sPath.split("/").filter(Boolean);
      aNavParts = aNavParts.filter(function (sPart) {
        return sPart !== "$NavigationPropertyBinding";
      });
      if (aNavParts.length > 0) {
        for (let i = iStart; i < aNavParts.length - iDiff; i++) {
          sSourceEntity = `/${oContext.getObject(`${sSourceEntity}/$NavigationPropertyBinding/${aNavParts[i]}`)}`;
        }
      }
      return sSourceEntity;
    },
    /**
     * When the value displayed is in text arrangement TextOnly we also want to retrieve the Text value for tables even if we don't show it.
     * This method will return the value of the original data field.
     *
     * @param oThis The current object
     * @param oDataFieldTextArrangement DataField using text arrangement annotation
     * @param oDataField DataField containing the value using text arrangement annotation
     * @returns The binding to the value
     */
    getBindingInfoForTextArrangement: function (oThis, oDataFieldTextArrangement, oDataField) {
      // this is used in ColumnContent fragment
      if (oDataFieldTextArrangement && oDataFieldTextArrangement.$EnumMember && oDataFieldTextArrangement.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly" && oDataField) {
        return `{${oDataField.Value.$Path}}`;
      }
      return undefined;
    },
    getPathForIconSource: function (sPropertyPath) {
      return "{= FIELDRUNTIME.getIconForMimeType(%{" + sPropertyPath + "@odata.mediaContentType})}";
    },
    getFilenameExpr: function (sFilename, sNoFilenameText) {
      if (sFilename) {
        if (sFilename.indexOf("{") === 0) {
          // filename is referenced via path, i.e. @Core.ContentDisposition.Filename : path
          return "{= $" + sFilename + " ? $" + sFilename + " : $" + sNoFilenameText + "}";
        }
        // static filename, i.e. @Core.ContentDisposition.Filename : 'someStaticName'
        return sFilename;
      }
      // no @Core.ContentDisposition.Filename
      return sNoFilenameText;
    },
    calculateMBfromByte: function (iByte) {
      return iByte ? (iByte / (1024 * 1024)).toFixed(6) : undefined;
    },
    getDownloadUrl: function (propertyPath) {
      return propertyPath + "{= ${internal>/stickySessionToken} ? ('?SAP-ContextId=' + ${internal>/stickySessionToken}) : '' }";
    },
    getMarginClass: function (compactSemanticKey) {
      return compactSemanticKey === "true" || compactSemanticKey === true ? "sapMTableContentMargin" : undefined;
    },
    getRequired: function (immutableKey, target, requiredProperties) {
      let targetRequiredExpression = constant(false);
      if (target !== null) {
        targetRequiredExpression = isRequiredExpression(target === null || target === void 0 ? void 0 : target.targetObject);
      }
      return compileExpression(or(targetRequiredExpression, requiredProperties.indexOf(immutableKey) > -1));
    },
    /**
     * The method checks if the field is already part of a form.
     *
     * @param dataFieldCollection The list of the fields of the form
     * @param dataFieldObjectPath The data model object path of the field which needs to be checked in the form
     * @returns `true` if the field is already part of the form, `false` otherwise
     */
    isFieldPartOfForm: function (dataFieldCollection, dataFieldObjectPath) {
      //generating key for the received data field
      const connectedDataFieldKey = KeyHelper.generateKeyFromDataField(dataFieldObjectPath.targetObject);
      // trying to find the generated key in already existing form elements
      const isFieldFound = dataFieldCollection.find(field => {
        return field.key === connectedDataFieldKey;
      });
      return isFieldFound ? true : false;
    }
  };
  FieldHelper.fieldControl.requiresIContext = true;
  FieldHelper.getTypeAlignment.requiresIContext = true;
  FieldHelper.getAPDialogDisplayFormat.requiresIContext = true;
  FieldHelper.computeLabelText.requiresIContext = true;
  FieldHelper.getActionParameterVisibility.requiresIContext = true;
  return FieldHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldHelper", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/FieldControlHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/CommonHelper","sap/fe/macros/internal/valuehelp/ValueListHelper","sap/ui/base/ManagedObject","sap/ui/model/odata/v4/AnnotationHelper"],function(e,t,n,a,i,r,o,l,s,c,u,f,m){"use strict";var p=s.getAlignmentExpression;var g=l.isRequiredExpression;var d=o.generate;var v=i.or;var b=i.ifElse;var y=i.equal;var $=i.constant;var P=i.compileExpression;var h=a.KeyHelper;var O=n.UI;const T="@Org.OData.Measures.V1.ISOCurrency",F="@Org.OData.Measures.V1.Unit";const D={isNotAlwaysHidden:function(e,t){const n=t.context;let a=false;if(e.Value&&e.Value.$Path){a=n.getObject("Value/$Path@com.sap.vocabularies.UI.v1.Hidden")}if(!a||a.$Path){a=n.getObject("@com.sap.vocabularies.UI.v1.Hidden");if(!a||a.$Path){a=false}}return!a},isRequired:function(e,t){if(t==="Display"||t==="ReadOnly"||t==="Disabled"){return false}if(e){if(f.bindingParser(e)){return"{= %"+e+" === 7}"}else{return e=="com.sap.vocabularies.Common.v1.FieldControlType/Mandatory"}}return false},getActionParameterVisibility:function(e,t){if(typeof e==="object"){if(e&&e.$If&&e.$If.length===3){const n={$If:[]};n.$If[0]=e.$If[0];n.$If[1]=e.$If[2];n.$If[2]=e.$If[1];return m.value(n,t)}else{return"{= !%{"+e.$Path+"} }"}}else if(typeof e==="boolean"){return m.value(!e,t)}else{return undefined}},propertyName:function(e,t){let n;if(typeof e==="string"){if(t.context.getPath().indexOf("$Path")>-1||t.context.getPath().indexOf("$PropertyPath")>-1){n=e}}else if(e.$Path||e.$PropertyPath){const a=e.$Path?"/$Path":"/$PropertyPath";const i=t.context.getPath();n=t.context.getObject(`${i+a}/$@sapui.name`)}else if(e.Value&&e.Value.$Path){n=e.Value.$Path}else{n=t.context.getObject("@sapui.name")}return n},fieldControl:function(e,t){const n=t&&t.context.getModel();const a=t&&t.context.getPath();const i=n&&n.createBindingContext(`${a}@com.sap.vocabularies.Common.v1.FieldControl`);const r=i&&i.getProperty();if(r){if(r.hasOwnProperty("$EnumMember")){return r.$EnumMember}else if(r.hasOwnProperty("$Path")){return m.value(r,{context:i})}}else{return undefined}},valueHelpProperty:function(e,t){const n=e.getPath();const a=e.getObject()||{};let i=a.$Path?`${n}/$Path`:n;const r=`${i}@`;const o=e.getObject(r);let l;if(o){l=o.hasOwnProperty(T)&&T||o.hasOwnProperty(F)&&F;if(l&&!t){const t=`${i+l}/$Path`;if(e.getObject(t)){i=t}}}return i},valueHelpPropertyForFilterField:function(e){return D.valueHelpProperty(e,true)},getIDForFieldValueHelp:function(e,t,n,a){if(e){return e}let i=a;if(n!==a){i=`${n}::${a}`}return d([t,i])},getFieldHelpPropertyForFilterField:function(e,n,a,i,r,o,l,s){const u=D.propertyName(n,{context:e}),f=s==="true"||s===true;const m=e.getModel(),p=e.getPath(),g=c.getLocationForPropertyPath(m,p),d=t.getFilterRestrictionsByPath(g,m);if((a==="Edm.DateTimeOffset"||a==="Edm.Date")&&f&&d&&d.FilterAllowedExpressions&&d.FilterAllowedExpressions[u]&&(d.FilterAllowedExpressions[u].indexOf("SingleRange")!==-1||d.FilterAllowedExpressions[u].indexOf("SingleValue")!==-1)||a==="Edm.Boolean"&&!l){return undefined}return D.getIDForFieldValueHelp(null,i||"FilterFieldValueHelp",r,o)},computeFieldBaseDelegate:function(e,t){if(t){return JSON.stringify({name:e,payload:{retrieveTextFromValueList:t}})}return`{name: '${e}'}`},_getPrimaryIntents:function(t){const n=[];if(t){const e=sap.ushell&&sap.ushell.Container;const a=e&&e.getService("CrossApplicationNavigation");t.forEach(function(e){if(typeof e==="string"){n.push(a.getPrimaryIntent(e,{}))}})}return Promise.all(n).then(function(e){return e}).catch(function(t){e.error("Error fetching primary intents",t);return[]})},_checkIfSemanticObjectsHasPrimaryAction:function(e,t,n){const a=function(e,t,n){for(const a in e.semanticObjectUnavailableActions[n].actions){if(t.intent.split("-")[1].indexOf(e.semanticObjectUnavailableActions[n].actions[a])===0){return false}}return true};e.semanticPrimaryActions=t;const i=e.semanticObjects&&e.mainSemanticObject&&e.semanticPrimaryActions[e.semanticObjects.indexOf(e.mainSemanticObject)];const r=n.getShellServices().getHash();if(e.mainSemanticObject&&i!==null&&i.intent!==r){for(const t in e.semanticObjectUnavailableActions){if(e.mainSemanticObject.indexOf(e.semanticObjectUnavailableActions[t].semanticObject)===0){return a(e,i,t)}}return true}else{return false}},checkPrimaryActions:function(t,n,a){return this._getPrimaryIntents(t&&t.semanticObjects).then(e=>n?{titleLink:e,hasTitleLink:this._checkIfSemanticObjectsHasPrimaryAction(t,e,a)}:this._checkIfSemanticObjectsHasPrimaryAction(t,e,a)).catch(function(t){e.error("Error in checkPrimaryActions",t)})},_getTitleLinkWithParameters:function(e,t){if(e&&e.titlelink){return e.titlelink}else{return t}},getPrimaryAction:function(e){return e.semanticPrimaryActions[e.semanticObjects.indexOf(e.mainSemanticObject)].intent?D._getTitleLinkWithParameters(e,e.semanticPrimaryActions[e.semanticObjects.indexOf(e.mainSemanticObject)].intent):e.primaryIntentAction},operators:function(e,n,a,i,o){if(!n||!o){return undefined}let l;const s=D.propertyName(n,{context:e});const u=e.getModel(),f=e.getPath(),m=c.getLocationForPropertyPath(u,f),p=n.$Type;if(p==="Edm.Guid"){return t.getOperatorsForGuidProperty()}o=o.slice(0,-1);const g=o.lastIndexOf("/")>0;const d=g&&o!==m||!g&&m.lastIndexOf("/")>0;const v=d&&m.substr(m.indexOf(o)+o.length+1)||"";const b=d&&v+"/"+s||s;if(!g){if(!d){l=t.getOperatorsForProperty(s,m,u,p,a,i)}else{l=t.getOperatorsForProperty(b,o,u,p,a,i);if(l.length===0){l=t.getOperatorsForProperty(s,m,u,p,a,i)}}}else if(!d){var y;l=t.getOperatorsForProperty(b,o,u,p,a,i);if(l.length===0){l=t.getOperatorsForProperty(s,r.getEntitySetPath(o),u,p,a,i)}return((y=l)===null||y===void 0?void 0:y.length)>0?l.toString():undefined}else{l=t.getOperatorsForProperty(b,o,u,p,a,i);if(l.length===0){l=t.getOperatorsForProperty(b,r.getEntitySetPath(o),u,p,a,i)}}if((!l||l.length===0)&&(p==="Edm.Date"||p==="Edm.DateTimeOffset")){l=t.getOperatorsForDateProperty(p)}return l.length>0?l.toString():undefined},getDataFieldDefault:function(e){const t=e.getModel().getObject(`${e.getPath()}@com.sap.vocabularies.UI.v1.DataFieldDefault`);return t?`${e.getPath()}@com.sap.vocabularies.UI.v1.DataFieldDefault`:e.getPath()},isDataFieldActionButtonVisible:function(e,t,n,a){return t["@com.sap.vocabularies.UI.v1.Hidden"]!==true&&(n!==true||a!==false)},getPressEventForDataFieldActionButton:function(e,t){var n;let a="Isolated";if(t.InvocationGrouping&&t.InvocationGrouping.$EnumMember==="com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet"){a="ChangeSet"}let i=e.navigateAfterAction;i=i==="false"?false:true;const r=e===null||e===void 0?void 0:(n=e.entitySet)===null||n===void 0?void 0:n.getPath().split("/");const o=r[r.length-1];const l={contexts:"${$source>/}.getBindingContext()",invocationGrouping:c.addSingleQuotes(a),model:"${$source>/}.getModel()",label:c.addSingleQuotes(t.Label,true),isNavigable:i,entitySetName:c.addSingleQuotes(o)};return c.generateFunction(".editFlow.invokeAction",c.addSingleQuotes(t.Action),c.objectToString(l))},isNumericDataType:function(e){const t=e;if(t!==undefined){const e=["Edm.Int16","Edm.Int32","Edm.Int64","Edm.Byte","Edm.SByte","Edm.Single","Edm.Decimal","Edm.Double"];return e.indexOf(t)===-1?false:true}else{return false}},isDateOrTimeDataType:function(e){if(e!==undefined){const t=["Edm.DateTimeOffset","Edm.DateTime","Edm.Date","Edm.TimeOfDay","Edm.Time"];return t.indexOf(e)>-1}else{return false}},isDateTimeDataType:function(e){if(e!==undefined){const t=["Edm.DateTimeOffset","Edm.DateTime"];return t.indexOf(e)>-1}else{return false}},isDateDataType:function(e){return e==="Edm.Date"},isTimeDataType:function(e){if(e!==undefined){const t=["Edm.TimeOfDay","Edm.Time"];return t.indexOf(e)>-1}else{return false}},getDataTypeForVisualization:function(e,t){var n,a;const i="@com.sap.vocabularies.Common.v1.Text",r="@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement";return(e===null||e===void 0?void 0:(n=e[r])===null||n===void 0?void 0:n.$EnumMember)!=="com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate"&&e!==null&&e!==void 0&&(a=e[i])!==null&&a!==void 0&&a.$Path?"Edm.String":t},getColumnAlignment:function(e,t){const n=t.collection.sPath,a=t.collection.oModel;if((e["$Type"]==="com.sap.vocabularies.UI.v1.DataFieldForAction"||e["$Type"]==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")&&e.Inline&&e.IconUrl){return"Center"}const i=a.getObject(`${n}/@com.sap.vocabularies.Common.v1.SemanticKey`);if(e["$Type"]==="com.sap.vocabularies.UI.v1.DataField"){const t=e.Value.$Path;const n=i&&!i.every(function(e){return e.$PropertyPath!==t});if(n){return"Begin"}}return D.getDataFieldAlignment(e,a,n)},getPropertyAlignment:function(e,t,n){let a="Begin";const i=t?t.textAlignMode:"";switch(i){case"Form":if(this.isNumericDataType(e)){a="Begin";if(n){a=p(n,"Begin","End")}}break;default:if(this.isNumericDataType(e)||this.isDateOrTimeDataType(e)){a="Right"}break}return a},getDataFieldAlignment:function(e,t,n,a,i){let r,o="Begin",l,s;if(e["$Type"]==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){r=e.Target.$AnnotationPath;if(e.Target["$AnnotationPath"]&&e.Target["$AnnotationPath"].indexOf("com.sap.vocabularies.UI.v1.FieldGroup")>=0){const e=t.getObject(`${n}/${r}`);for(let c=0;c<e.Data.length;c++){l=t.getObject(`${n}/${r}/Data/${c.toString()}/Value/$Path/$Type`);s=t.getObject(`${n}/${r}/Data/${c.toString()}/Value/$Path@`);l=this.getDataTypeForVisualization(s,l);o=this.getPropertyAlignment(l,a,i);if(o==="Begin"){break}}return o}else if(e.Target["$AnnotationPath"]&&e.Target["$AnnotationPath"].indexOf("com.sap.vocabularies.UI.v1.DataPoint")>=0&&t.getObject(`${n}/${r}/Visualization/$EnumMember`)==="com.sap.vocabularies.UI.v1.VisualizationType/Rating"){return o}else{l=t.getObject(`${n}/${r}/$Type`);if(l==="com.sap.vocabularies.UI.v1.DataPointType"){l=t.getObject(`${n}/${r}/Value/$Path/$Type`);s=t.getObject(`${n}/${r}/Value/$Path@`);l=this.getDataTypeForVisualization(s,l)}o=this.getPropertyAlignment(l,a,i)}}else{r=e.Value.$Path;l=t.getObject(`${n}/${r}/$Type`);s=t.getObject(`${n}/${r}@`);l=this.getDataTypeForVisualization(s,l);if(!(t.getObject(`${n}/`)["$Key"].indexOf(r)===0)){o=this.getPropertyAlignment(l,a,i)}}return o},getTypeAlignment:function(e,t,n,a,i,r){const o=e.getInterface(0);const l=o.getModel();if(a==="/undefined"&&r&&r.$target){a=`/${r.$target.fullyQualifiedName.split("/")[0]}`}return D.getDataFieldAlignment(t,l,a,n,i)},isDataFieldActionButtonEnabled:function(e,t,n,a){if(t!==true){return"true"}return(n===null?"{= !${#"+e.Action+"} ? false : true }":n)?a:"true"},computeLabelText:function(e,t){const n=t.context.getModel();let a=t.context.getPath();if(a.endsWith("/")){a=a.slice(0,a.lastIndexOf("/"))}const i=n.getObject(`${a}/Label`);if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){return undefined}if(i){return i}else if(i===""){return""}let r;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){if(e.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.DataPoint")>-1||e.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.UI.v1.Chart")>-1){r=n.getObject(`${a}/Target/$AnnotationPath@/Title`)}if(e.Target.$AnnotationPath.indexOf("@com.sap.vocabularies.Communication.v1.Contact")>-1){r=n.getObject(`${a}/Target/$AnnotationPath@/fn/$Path@com.sap.vocabularies.Common.v1.Label`)}}if(r){return r}let o;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){o=n.getObject(`${a}/Target/$AnnotationPath@/Label`)}if(o){return o}const l=n.getObject(`${a}/Value/$Path@com.sap.vocabularies.Common.v1.Label`);if(l){return l}let s;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){s=n.getObject(`${a}/Target/$AnnotationPath/Value/$Path@com.sap.vocabularies.Common.v1.Label`)}if(s){return s}return""},buildExpressionForAlignItems:function(e){const t=$(e);const n=$("com.sap.vocabularies.UI.v1.VisualizationType/Progress");const a=$("com.sap.vocabularies.UI.v1.VisualizationType/Rating");return P(b(v(y(t,n),y(t,a)),$("Center"),b(O.IsEditable,$("Center"),$("Stretch"))))},hasValueHelpAnnotation:function(e){if(e){return!!(e["@com.sap.vocabularies.Common.v1.ValueListReferences"]||e["@com.sap.vocabularies.Common.v1.ValueListMapping"]||e["@com.sap.vocabularies.Common.v1.ValueList"])}return false},getAPDialogDisplayFormat:function(e,n){let a;const i=n.context.getModel();const r=n.context.getPath();const o=e.$Name||n.context.getProperty(`${r}@sapui.name`);const l=i.getObject(`${r}@`);const s=l["@com.sap.vocabularies.Common.v1.ValueList"]||l["@com.sap.vocabularies.Common.v1.ValueListMapping"]||l["@com.sap.vocabularies.Common.v1.ValueListReferences"];const c=function(e){const t=e.Parameters.find(function(e){return e.LocalDataProperty&&e.LocalDataProperty.$PropertyPath===o});return t&&t.ValueListProperty};let u;if(l["@com.sap.vocabularies.Common.v1.TextArrangement"]||l["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]){return t.computeDisplayMode(l,undefined)}else if(s){if(s.CollectionPath){u=c(s);if(!u){return"Value"}a=i.getObject(`/${s.CollectionPath}/${u}@`);return a&&a["@com.sap.vocabularies.Common.v1.Text"]?t.computeDisplayMode(a,undefined):"Value"}else{return i.requestValueListInfo(r,true).then(function(e){u=c(e[""]);if(!u){return"Value"}a=e[""].$model.getMetaModel().getObject(`/${e[""]["CollectionPath"]}/${u}@`);return a&&a["@com.sap.vocabularies.Common.v1.Text"]?t.computeDisplayMode(a,undefined):"Value"})}}else{return"Value"}},getActionParameterDialogFieldHelp:function(e,t,n){return this.hasValueHelpAnnotation(e)?d([t,n]):undefined},getValueHelpDelegate:function(e,t,n,a){const i={name:c.addSingleQuotes("sap/fe/macros/valuehelp/ValueHelpDelegate"),payload:{propertyPath:c.addSingleQuotes(u.getPropertyPath({UnboundAction:!e,EntityTypePath:t,Action:n,Property:a})),qualifiers:{},valueHelpQualifier:c.addSingleQuotes(""),isActionParameterDialog:true}};return c.objectToString(i)},getValueHelpDelegateForNonComputedVisibleKeyField:function(e){const t={name:c.addSingleQuotes("sap/fe/macros/valuehelp/ValueHelpDelegate"),payload:{propertyPath:c.addSingleQuotes(e),qualifiers:{},valueHelpQualifier:c.addSingleQuotes("")}};return c.objectToString(t)},_getEntitySetFromMultiLevel:function(e,t,n,a,i){let r=t.split("/").filter(Boolean);r=r.filter(function(e){return e!=="$NavigationPropertyBinding"});if(r.length>0){for(let t=a;t<r.length-i;t++){n=`/${e.getObject(`${n}/$NavigationPropertyBinding/${r[t]}`)}`}}return n},getBindingInfoForTextArrangement:function(e,t,n){if(t&&t.$EnumMember&&t.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly"&&n){return`{${n.Value.$Path}}`}return undefined},getPathForIconSource:function(e){return"{= FIELDRUNTIME.getIconForMimeType(%{"+e+"@odata.mediaContentType})}"},getFilenameExpr:function(e,t){if(e){if(e.indexOf("{")===0){return"{= $"+e+" ? $"+e+" : $"+t+"}"}return e}return t},calculateMBfromByte:function(e){return e?(e/(1024*1024)).toFixed(6):undefined},getDownloadUrl:function(e){return e+"{= ${internal>/stickySessionToken} ? ('?SAP-ContextId=' + ${internal>/stickySessionToken}) : '' }"},getMarginClass:function(e){return e==="true"||e===true?"sapMTableContentMargin":undefined},getRequired:function(e,t,n){let a=$(false);if(t!==null){a=g(t===null||t===void 0?void 0:t.targetObject)}return P(v(a,n.indexOf(e)>-1))},isFieldPartOfForm:function(e,t){const n=h.generateKeyFromDataField(t.targetObject);const a=e.find(e=>e.key===n);return a?true:false}};D.fieldControl.requiresIContext=true;D.getTypeAlignment.requiresIContext=true;D.getAPDialogDisplayFormat.requiresIContext=true;D.computeLabelText.requiresIContext=true;D.getActionParameterVisibility.requiresIContext=true;return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldRuntime-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/collaboration/ActivitySync", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/fe/core/controllerextensions/editFlow/draft", "sap/fe/core/helpers/KeepAliveHelper", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/macros/CommonHelper", "sap/fe/macros/controls/FieldWrapper", "sap/fe/macros/field/FieldAPI", "sap/m/IllustratedMessage", "sap/m/IllustratedMessageType", "sap/m/library", "sap/m/MessageBox", "sap/m/ResponsivePopover", "sap/ui/core/Core", "sap/ui/core/IconPool", "sap/ui/Device", "sap/ui/model/Filter", "sap/ui/unified/FileUploaderParameter", "sap/ui/util/openWindow"], function (Log, CommonUtils, CollaborationActivitySync, CollaborationCommon, draft, KeepAliveHelper, ModelHelper, ResourceModelHelper, CommonHelper, FieldWrapper, FieldAPI, IllustratedMessage, IllustratedMessageType, mobilelibrary, MessageBox, ResponsivePopover, Core, IconPool, Device, Filter, FileUploaderParameter, openWindow) {
  "use strict";

  var system = Device.system;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var Activity = CollaborationCommon.Activity;
  /**
   * Gets the binding used for collaboration notifications.
   *
   * @param field
   * @returns The binding
   */
  function getCollaborationBinding(field) {
    let binding = field.getBindingContext().getBinding();
    if (!binding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
      const oView = CommonUtils.getTargetView(field);
      binding = oView.getBindingContext().getBinding();
    }
    return binding;
  }

  /**
   * Static class used by "sap.ui.mdc.Field" during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const FieldRuntime = {
    resetChangesHandler: undefined,
    uploadPromises: undefined,
    /**
     * Triggers an internal navigation on the link pertaining to DataFieldWithNavigationPath.
     *
     * @param oSource Source of the press event
     * @param oController Instance of the controller
     * @param sNavPath The navigation path
     */
    onDataFieldWithNavigationPath: function (oSource, oController, sNavPath) {
      if (oController._routing) {
        let oBindingContext = oSource.getBindingContext();
        const oView = CommonUtils.getTargetView(oSource),
          oMetaModel = oBindingContext.getModel().getMetaModel(),
          fnNavigate = function (oContext) {
            if (oContext) {
              oBindingContext = oContext;
            }
            oController._routing.navigateToTarget(oBindingContext, sNavPath, true);
          };
        // Show draft loss confirmation dialog in case of Object page
        if (oView.getViewData().converterType === "ObjectPage" && !ModelHelper.isStickySessionSupported(oMetaModel)) {
          draft.processDataLossOrDraftDiscardConfirmation(fnNavigate, Function.prototype, oBindingContext, oView.getController(), true, draft.NavigationType.ForwardNavigation);
        } else {
          fnNavigate();
        }
      } else {
        Log.error("FieldRuntime: No routing listener controller extension found. Internal navigation aborted.", "sap.fe.macros.field.FieldRuntime", "onDataFieldWithNavigationPath");
      }
    },
    isDraftIndicatorVisible: function (sPropertyPath, sSemanticKeyHasDraftIndicator, HasDraftEntity, IsActiveEntity, hideDraftInfo) {
      if (IsActiveEntity !== undefined && HasDraftEntity !== undefined && (!IsActiveEntity || HasDraftEntity) && !hideDraftInfo) {
        return sPropertyPath === sSemanticKeyHasDraftIndicator;
      } else {
        return false;
      }
    },
    /**
     * Handler for the validateFieldGroup event.
     *
     * @function
     * @name onValidateFieldGroup
     * @param oController The controller of the page containing the field
     * @param oEvent The event object passed by the validateFieldGroup event
     */
    onValidateFieldGroup: function (oController, oEvent) {
      const oFEController = FieldRuntime._getExtensionController(oController);
      oFEController._sideEffects.handleFieldGroupChange(oEvent);
    },
    /**
     * Handler for the change event.
     * Store field group IDs of this field for requesting side effects when required.
     * We store them here to ensure a change in the value of the field has taken place.
     *
     * @function
     * @name handleChange
     * @param oController The controller of the page containing the field
     * @param oEvent The event object passed by the change event
     */
    handleChange: function (oController, oEvent) {
      const oSourceField = oEvent.getSource(),
        bIsTransient = oSourceField && oSourceField.getBindingContext().isTransient(),
        pValueResolved = oEvent.getParameter("promise") || Promise.resolve(),
        oSource = oEvent.getSource(),
        bValid = oEvent.getParameter("valid"),
        fieldValidity = this.getFieldStateOnChange(oEvent).state["validity"];

      // TODO: currently we have undefined and true... and our creation row implementation relies on this.
      // I would move this logic to this place as it's hard to understand for field consumer

      pValueResolved.then(function () {
        // The event is gone. For now we'll just recreate it again
        oEvent.oSource = oSource;
        oEvent.mParameters = {
          valid: bValid
        };
        FieldAPI.handleChange(oEvent, oController);
      }).catch(function /*oError: any*/
      () {
        // The event is gone. For now we'll just recreate it again
        oEvent.oSource = oSource;
        oEvent.mParameters = {
          valid: false
        };

        // as the UI might need to react on. We could provide a parameter to inform if validation
        // was successful?
        FieldAPI.handleChange(oEvent, oController);
      });

      // Use the FE Controller instead of the extensionAPI to access internal FE controllers
      const oFEController = FieldRuntime._getExtensionController(oController);
      oFEController.editFlow.syncTask(pValueResolved);

      // if the context is transient, it means the request would fail anyway as the record does not exist in reality
      // TODO: should the request be made in future if the context is transient?
      if (bIsTransient) {
        return;
      }

      // SIDE EFFECTS
      oFEController._sideEffects.handleFieldChange(oEvent, fieldValidity, pValueResolved);

      // Collaboration Draft Activity Sync
      const oField = oEvent.getSource(),
        bCollaborationEnabled = CollaborationActivitySync.isConnected(oField);
      if (bCollaborationEnabled && fieldValidity) {
        var _ref, _oField$getBindingInf;
        /* TODO: for now we use always the first binding part (so in case of composite bindings like amount and
        		unit or currency only the amount is considered) */
        const binding = getCollaborationBinding(oField);
        const data = [...(((_ref = oField.getBindingInfo("value") || oField.getBindingInfo("selected")) === null || _ref === void 0 ? void 0 : _ref.parts) || []), ...(((_oField$getBindingInf = oField.getBindingInfo("additionalValue")) === null || _oField$getBindingInf === void 0 ? void 0 : _oField$getBindingInf.parts) || [])].map(function (part) {
          if (part) {
            var _oField$getBindingCon;
            return `${(_oField$getBindingCon = oField.getBindingContext()) === null || _oField$getBindingCon === void 0 ? void 0 : _oField$getBindingCon.getPath()}/${part.path}`;
          }
        });
        const updateCollaboration = () => {
          if (binding.hasPendingChanges()) {
            // The value has been changed by the user --> wait until it's sent to the server before sending a notification to other users
            binding.attachEventOnce("patchCompleted", function () {
              CollaborationActivitySync.send(oField, Activity.Change, data);
            });
          } else {
            // No changes --> send a Undo notification
            CollaborationActivitySync.send(oField, Activity.Undo, data);
          }
        };
        if (oSourceField.isA("sap.ui.mdc.Field")) {
          pValueResolved.then(() => {
            updateCollaboration();
          }).catch(() => {
            updateCollaboration();
          });
        } else {
          updateCollaboration();
        }
      }
    },
    handleLiveChange: function (event) {
      // Collaboration Draft Activity Sync
      const field = event.getSource();
      if (CollaborationActivitySync.isConnected(field)) {
        /* TODO: for now we use always the first binding part (so in case of composite bindings like amount and
        		unit or currency only the amount is considered) */
        const bindingPath = field.getBindingInfo("value").parts[0].path;
        const fullPath = `${field.getBindingContext().getPath()}/${bindingPath}`;
        CollaborationActivitySync.send(field, Activity.LiveChange, fullPath);

        // If the user reverted the change no change event is sent therefore we have to handle it here
        if (!this.resetChangesHandler) {
          this.resetChangesHandler = () => {
            // We need to wait a little bit for the focus to be updated
            setTimeout(() => {
              if (field.isA("sap.ui.mdc.Field")) {
                const focusedControl = Core.byId(Core.getCurrentFocusedControlId());
                if ((focusedControl === null || focusedControl === void 0 ? void 0 : focusedControl.getParent()) === field) {
                  // We're still un the same MDC Field --> do nothing
                  return;
                }
              }
              field.detachBrowserEvent("focusout", this.resetChangesHandler);
              delete this.resetChangesHandler;
              CollaborationActivitySync.send(field, Activity.Undo, fullPath);
            }, 100);
          };
          field.attachBrowserEvent("focusout", this.resetChangesHandler);
        }
      }
    },
    handleOpenPicker: function (oEvent) {
      // Collaboration Draft Activity Sync
      const oField = oEvent.getSource();
      const bCollaborationEnabled = CollaborationActivitySync.isConnected(oField);
      if (bCollaborationEnabled) {
        const sBindingPath = oField.getBindingInfo("value").parts[0].path;
        const sFullPath = `${oField.getBindingContext().getPath()}/${sBindingPath}`;
        CollaborationActivitySync.send(oField, Activity.LiveChange, sFullPath);
      }
    },
    handleClosePicker: function (oEvent) {
      // Collaboration Draft Activity Sync
      const oField = oEvent.getSource();
      const bCollaborationEnabled = CollaborationActivitySync.isConnected(oField);
      if (bCollaborationEnabled) {
        const binding = getCollaborationBinding(oField);
        if (!binding.hasPendingChanges()) {
          // If there are no pending changes, the picker was closed without changing the value --> send a UNDO notification
          // In case there were changes, notifications are managed in handleChange
          const sBindingPath = oField.getBindingInfo("value").parts[0].path;
          const sFullPath = `${oField.getBindingContext().getPath()}/${sBindingPath}`;
          CollaborationActivitySync.send(oField, Activity.Undo, sFullPath);
        }
      }
    },
    _sendCollaborationMessageForFileUploader(fileUploader, activity) {
      const isCollaborationEnabled = CollaborationActivitySync.isConnected(fileUploader);
      if (isCollaborationEnabled) {
        var _fileUploader$getPare, _fileUploader$getBind;
        const bindingPath = (_fileUploader$getPare = fileUploader.getParent()) === null || _fileUploader$getPare === void 0 ? void 0 : _fileUploader$getPare.getProperty("propertyPath");
        const fullPath = `${(_fileUploader$getBind = fileUploader.getBindingContext()) === null || _fileUploader$getBind === void 0 ? void 0 : _fileUploader$getBind.getPath()}/${bindingPath}`;
        CollaborationActivitySync.send(fileUploader, activity, fullPath);
      }
    },
    handleOpenUploader: function (event) {
      // Collaboration Draft Activity Sync
      const fileUploader = event.getSource();
      FieldRuntime._sendCollaborationMessageForFileUploader(fileUploader, Activity.LiveChange);
    },
    handleCloseUploader: function (event) {
      // Collaboration Draft Activity Sync
      const fileUploader = event.getSource();
      FieldRuntime._sendCollaborationMessageForFileUploader(fileUploader, Activity.Undo);
    },
    /**
     * Gets the field value and validity on a change event.
     *
     * @function
     * @name fieldValidityOnChange
     * @param oEvent The event object passed by the change event
     * @returns Field value and validity
     */
    getFieldStateOnChange: function (oEvent) {
      let oSourceField = oEvent.getSource(),
        mFieldState = {};
      const _isBindingStateMessages = function (oBinding) {
        return oBinding && oBinding.getDataState() ? oBinding.getDataState().getInvalidValue() === undefined : true;
      };
      if (oSourceField.isA("sap.fe.macros.field.FieldAPI")) {
        oSourceField = oSourceField.getContent();
      }
      if (oSourceField.isA(FieldWrapper.getMetadata().getName()) && oSourceField.getEditMode() === "Editable") {
        oSourceField = oSourceField.getContentEdit()[0];
      }
      if (oSourceField.isA("sap.ui.mdc.Field")) {
        let bIsValid = oEvent.getParameter("valid") || oEvent.getParameter("isValid");
        if (bIsValid === undefined) {
          if (oSourceField.getMaxConditions() === 1) {
            const oValueBindingInfo = oSourceField.getBindingInfo("value");
            bIsValid = _isBindingStateMessages(oValueBindingInfo && oValueBindingInfo.binding);
          }
          if (oSourceField.getValue() === "" && !oSourceField.getProperty("required")) {
            bIsValid = true;
          }
        }
        mFieldState = {
          fieldValue: oSourceField.getValue(),
          validity: !!bIsValid
        };
      } else {
        // oSourceField extends from a FileUploader || Input || is a CheckBox
        const oBinding = oSourceField.getBinding("uploadUrl") || oSourceField.getBinding("value") || oSourceField.getBinding("selected");
        mFieldState = {
          fieldValue: oBinding && oBinding.getValue(),
          validity: _isBindingStateMessages(oBinding)
        };
      }
      return {
        field: oSourceField,
        state: mFieldState
      };
    },
    _fnFixHashQueryString: function (sCurrentHash) {
      if (sCurrentHash && sCurrentHash.indexOf("?") !== -1) {
        // sCurrentHash can contain query string, cut it off!
        sCurrentHash = sCurrentHash.split("?")[0];
      }
      return sCurrentHash;
    },
    _fnGetLinkInformation: function (_oSource, _oLink, _sPropertyPath, _sValue, fnSetActive) {
      const oModel = _oLink && _oLink.getModel();
      const oMetaModel = oModel && oModel.getMetaModel();
      const sSemanticObjectName = _sValue || _oSource && _oSource.getValue();
      const oView = _oLink && CommonUtils.getTargetView(_oLink);
      const oInternalModelContext = oView && oView.getBindingContext("internal");
      const oAppComponent = oView && CommonUtils.getAppComponent(oView);
      const oShellServiceHelper = oAppComponent && oAppComponent.getShellServices();
      const pGetLinksPromise = oShellServiceHelper && oShellServiceHelper.getLinksWithCache([[{
        semanticObject: sSemanticObjectName
      }]]);
      const aSemanticObjectUnavailableActions = oMetaModel && oMetaModel.getObject(`${_sPropertyPath}@com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions`);
      return {
        SemanticObjectName: sSemanticObjectName,
        SemanticObjectFullPath: _sPropertyPath,
        //sSemanticObjectFullPath,
        MetaModel: oMetaModel,
        InternalModelContext: oInternalModelContext,
        ShellServiceHelper: oShellServiceHelper,
        GetLinksPromise: pGetLinksPromise,
        SemanticObjectUnavailableActions: aSemanticObjectUnavailableActions,
        fnSetActive: fnSetActive
      };
    },
    _fnQuickViewHasNewCondition: function (oSemanticObjectPayload, _oLinkInfo) {
      if (oSemanticObjectPayload && oSemanticObjectPayload.path && oSemanticObjectPayload.path === _oLinkInfo.SemanticObjectFullPath) {
        // Got the resolved Semantic Object!
        const bResultingNewConditionForConditionalWrapper = oSemanticObjectPayload[!_oLinkInfo.SemanticObjectUnavailableActions ? "HasTargetsNotFiltered" : "HasTargets"];
        _oLinkInfo.fnSetActive(!!bResultingNewConditionForConditionalWrapper);
        return true;
      } else {
        return false;
      }
    },
    _fnQuickViewSetNewConditionForConditionalWrapper: function (_oLinkInfo, _oFinalSemanticObjects) {
      if (_oFinalSemanticObjects[_oLinkInfo.SemanticObjectName]) {
        let sTmpPath, oSemanticObjectPayload;
        const aSemanticObjectPaths = Object.keys(_oFinalSemanticObjects[_oLinkInfo.SemanticObjectName]);
        for (const iPathsCount in aSemanticObjectPaths) {
          sTmpPath = aSemanticObjectPaths[iPathsCount];
          oSemanticObjectPayload = _oFinalSemanticObjects[_oLinkInfo.SemanticObjectName] && _oFinalSemanticObjects[_oLinkInfo.SemanticObjectName][sTmpPath];
          if (FieldRuntime._fnQuickViewHasNewCondition(oSemanticObjectPayload, _oLinkInfo)) {
            break;
          }
        }
      }
    },
    _fnUpdateSemanticObjectsTargetModel: function (oEvent, sValue, oControl, _sPropertyPath) {
      const oSource = oEvent && oEvent.getSource();
      let fnSetActive;
      if (oControl.isA("sap.m.ObjectStatus")) {
        fnSetActive = bActive => oControl.setActive(bActive);
      }
      if (oControl.isA("sap.m.ObjectIdentifier")) {
        fnSetActive = bActive => oControl.setTitleActive(bActive);
      }
      const oConditionalWrapper = oControl && oControl.getParent();
      if (oConditionalWrapper && oConditionalWrapper.isA("sap.fe.macros.controls.ConditionalWrapper")) {
        fnSetActive = bActive => oConditionalWrapper.setCondition(bActive);
      }
      if (fnSetActive !== undefined) {
        const oLinkInfo = FieldRuntime._fnGetLinkInformation(oSource, oControl, _sPropertyPath, sValue, fnSetActive);
        oLinkInfo.fnSetActive = fnSetActive;
        const sCurrentHash = FieldRuntime._fnFixHashQueryString(CommonUtils.getAppComponent(oControl).getShellServices().getHash());
        CommonUtils.updateSemanticTargets([oLinkInfo.GetLinksPromise], [{
          semanticObject: oLinkInfo.SemanticObjectName,
          path: oLinkInfo.SemanticObjectFullPath
        }], oLinkInfo.InternalModelContext, sCurrentHash).then(function (oFinalSemanticObjects) {
          if (oFinalSemanticObjects) {
            FieldRuntime._fnQuickViewSetNewConditionForConditionalWrapper(oLinkInfo, oFinalSemanticObjects);
          }
        }).catch(function (oError) {
          Log.error("Cannot update Semantic Targets model", oError);
        });
      }
    },
    _checkControlHasModelAndBindingContext(_control) {
      if (!_control.getModel() || !_control.getBindingContext()) {
        return false;
      } else {
        return true;
      }
    },
    _checkCustomDataValueBeforeUpdatingSemanticObjectModel(_control, propertyPath, aCustomData) {
      let sSemanticObjectPathValue;
      let oValueBinding;
      const _fnCustomDataValueIsString = function (semanticObjectPathValue) {
        return !(semanticObjectPathValue !== null && typeof semanticObjectPathValue === "object");
      };
      // remove technical custom datas set by UI5
      aCustomData = aCustomData.filter(customData => customData.getKey() !== "sap-ui-custom-settings");
      for (const index in aCustomData) {
        sSemanticObjectPathValue = aCustomData[index].getValue();
        if (!sSemanticObjectPathValue && _fnCustomDataValueIsString(sSemanticObjectPathValue)) {
          oValueBinding = aCustomData[index].getBinding("value");
          if (oValueBinding) {
            oValueBinding.attachEventOnce("change", function (_oChangeEvent) {
              FieldRuntime._fnUpdateSemanticObjectsTargetModel(_oChangeEvent, null, _control, propertyPath);
            });
          }
        } else if (_fnCustomDataValueIsString(sSemanticObjectPathValue)) {
          FieldRuntime._fnUpdateSemanticObjectsTargetModel(null, sSemanticObjectPathValue, _control, propertyPath);
        }
      }
    },
    LinkModelContextChange: function (oEvent, sProperty, sPathToProperty) {
      const control = oEvent.getSource();
      if (FieldRuntime._checkControlHasModelAndBindingContext(control)) {
        const sPropertyPath = `${sPathToProperty}/${sProperty}`;
        const mdcLink = control.getDependents().length ? control.getDependents()[0] : undefined;
        const aCustomData = mdcLink === null || mdcLink === void 0 ? void 0 : mdcLink.getCustomData();
        if (aCustomData && aCustomData.length > 0) {
          FieldRuntime._checkCustomDataValueBeforeUpdatingSemanticObjectModel(control, sPropertyPath, aCustomData);
        }
      }
    },
    openExternalLink: function (event) {
      const source = event.getSource();
      if (source.data("url") && source.getProperty("text") !== "") {
        // This opens the link in the same tab as the link. It was done to be more consistent with other type of links.
        openWindow(source.data("url"), "_self");
      }
    },
    createPopoverWithNoTargets: function (mdcLink) {
      const mdcLinkId = mdcLink.getId();
      const illustratedMessageSettings = {
        title: getResourceModel(mdcLink).getText("M_ILLUSTRATEDMESSAGE_TITLE"),
        description: getResourceModel(mdcLink).getText("M_ILLUSTRATEDMESSAGE_DESCRIPTION"),
        enableFormattedText: true,
        illustrationSize: "Dot",
        // IllustratedMessageSize.Dot not available in "@types/openui5": "1.107.0"
        illustrationType: IllustratedMessageType.Tent
      };
      const illustratedMessage = new IllustratedMessage(`${mdcLinkId}-illustratedmessage`, illustratedMessageSettings);
      const popoverSettings = {
        horizontalScrolling: false,
        showHeader: system.phone,
        placement: mobilelibrary.PlacementType.Auto,
        content: [illustratedMessage],
        afterClose: function (event) {
          if (event.getSource()) {
            event.getSource().destroy();
          }
        }
      };
      return new ResponsivePopover(`${mdcLinkId}-popover`, popoverSettings);
    },
    openLink: async function (mdcLink, sapmLink) {
      try {
        const hRef = await mdcLink.getTriggerHref();
        if (!hRef) {
          try {
            const linkItems = await mdcLink.retrieveLinkItems();
            if ((linkItems === null || linkItems === void 0 ? void 0 : linkItems.length) === 0 && mdcLink.getPayload().hasQuickViewFacets === "false") {
              const popover = FieldRuntime.createPopoverWithNoTargets(mdcLink);
              mdcLink.addDependent(popover);
              popover.openBy(sapmLink);
            } else {
              await mdcLink.open(sapmLink);
            }
          } catch (error) {
            Log.error(`Cannot retrieve the QuickView Popover dialog: ${error}`);
          }
        } else {
          const view = CommonUtils.getTargetView(sapmLink);
          const appComponent = CommonUtils.getAppComponent(view);
          const shellService = appComponent.getShellServices();
          const shellHash = shellService.parseShellHash(hRef);
          const navArgs = {
            target: {
              semanticObject: shellHash.semanticObject,
              action: shellHash.action
            },
            params: shellHash.params
          };
          KeepAliveHelper.storeControlRefreshStrategyForHash(view, shellHash);
          if (CommonUtils.isStickyEditMode(sapmLink) !== true) {
            //URL params and xappState has been generated earlier hence using toExternal
            shellService.toExternal(navArgs, appComponent);
          } else {
            try {
              const newHref = await shellService.hrefForExternalAsync(navArgs, appComponent);
              openWindow(newHref);
            } catch (error) {
              Log.error(`Error while retireving hrefForExternal : ${error}`);
            }
          }
        }
      } catch (error) {
        Log.error(`Error triggering link Href: ${error}`);
      }
    },
    pressLink: async function (oEvent) {
      const oSource = oEvent.getSource();
      const sapmLink = oSource.isA("sap.m.ObjectIdentifier") ? oSource.findElements(false, elem => {
        return elem.isA("sap.m.Link");
      })[0] : oSource;
      if (oSource.getDependents() && oSource.getDependents().length > 0 && sapmLink.getProperty("text") !== "") {
        const oFieldInfo = oSource.getDependents()[0];
        if (oFieldInfo && oFieldInfo.isA("sap.ui.mdc.Link")) {
          await FieldRuntime.openLink(oFieldInfo, sapmLink);
        }
      }
      return sapmLink;
    },
    uploadStream: function (controller, event) {
      const fileUploader = event.getSource(),
        FEController = FieldRuntime._getExtensionController(controller),
        fileWrapper = fileUploader.getParent(),
        uploadUrl = fileWrapper.getUploadUrl();
      if (uploadUrl !== "") {
        var _fileUploader$getMode, _fileUploader$getBind2;
        fileWrapper.setUIBusy(true);

        // use uploadUrl from FileWrapper which returns a canonical URL
        fileUploader.setUploadUrl(uploadUrl);
        fileUploader.removeAllHeaderParameters();
        const token = (_fileUploader$getMode = fileUploader.getModel()) === null || _fileUploader$getMode === void 0 ? void 0 : _fileUploader$getMode.getHttpHeaders()["X-CSRF-Token"];
        if (token) {
          const headerParameterCSRFToken = new FileUploaderParameter();
          headerParameterCSRFToken.setName("x-csrf-token");
          headerParameterCSRFToken.setValue(token);
          fileUploader.addHeaderParameter(headerParameterCSRFToken);
        }
        const eTag = (_fileUploader$getBind2 = fileUploader.getBindingContext()) === null || _fileUploader$getBind2 === void 0 ? void 0 : _fileUploader$getBind2.getProperty("@odata.etag");
        if (eTag) {
          const headerParameterETag = new FileUploaderParameter();
          headerParameterETag.setName("If-Match");
          // Ignore ETag in collaboration draft
          headerParameterETag.setValue(CollaborationActivitySync.isConnected(fileUploader) ? "*" : eTag);
          fileUploader.addHeaderParameter(headerParameterETag);
        }
        const headerParameterAccept = new FileUploaderParameter();
        headerParameterAccept.setName("Accept");
        headerParameterAccept.setValue("application/json");
        fileUploader.addHeaderParameter(headerParameterAccept);

        // synchronize upload with other requests
        const uploadPromise = new Promise((resolve, reject) => {
          this.uploadPromises = this.uploadPromises || {};
          this.uploadPromises[fileUploader.getId()] = {
            resolve: resolve,
            reject: reject
          };
          fileUploader.upload();
        });
        FEController.editFlow.syncTask(uploadPromise);
      } else {
        MessageBox.error(getResourceModel(controller).getText("M_FIELD_FILEUPLOADER_ABORTED_TEXT"));
      }
    },
    handleUploadComplete: function (event, propertyFileName, propertyPath, controller) {
      const status = event.getParameter("status"),
        fileUploader = event.getSource(),
        fileWrapper = fileUploader.getParent();
      fileWrapper.setUIBusy(false);
      const context = fileUploader.getBindingContext();
      if (status === 0 || status >= 400) {
        this._displayMessageForFailedUpload(event);
        this.uploadPromises[fileUploader.getId()].reject();
      } else {
        var _fileWrapper$avatar;
        const newETag = event.getParameter("headers").etag;
        if (newETag) {
          // set new etag for filename update, but without sending patch request
          context === null || context === void 0 ? void 0 : context.setProperty("@odata.etag", newETag, null);
        }

        // set filename for link text
        if (propertyFileName !== null && propertyFileName !== void 0 && propertyFileName.path) {
          context === null || context === void 0 ? void 0 : context.setProperty(propertyFileName.path, fileUploader.getValue());
        }

        // delete the avatar cache that not gets updated otherwise
        (_fileWrapper$avatar = fileWrapper.avatar) === null || _fileWrapper$avatar === void 0 ? void 0 : _fileWrapper$avatar.refreshAvatarCacheBusting();
        this._callSideEffectsForStream(event, fileWrapper, controller);
        this.uploadPromises[fileUploader.getId()].resolve();
      }
      delete this.uploadPromises[fileUploader.getId()];

      // Collaboration Draft Activity Sync
      const isCollaborationEnabled = CollaborationActivitySync.isConnected(fileUploader);
      if (!isCollaborationEnabled || !context) {
        return;
      }
      const notificationData = [`${context.getPath()}/${propertyPath}`];
      if (propertyFileName !== null && propertyFileName !== void 0 && propertyFileName.path) {
        notificationData.push(`${context.getPath()}/${propertyFileName.path}`);
      }
      let binding = context.getBinding();
      if (!binding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
        const oView = CommonUtils.getTargetView(fileUploader);
        binding = oView.getBindingContext().getBinding();
      }
      if (binding.hasPendingChanges()) {
        binding.attachEventOnce("patchCompleted", () => {
          CollaborationActivitySync.send(fileWrapper, Activity.Change, notificationData);
        });
      } else {
        CollaborationActivitySync.send(fileWrapper, Activity.Change, notificationData);
      }
    },
    _displayMessageForFailedUpload: function (oEvent) {
      // handling of backend errors
      const sError = oEvent.getParameter("responseRaw") || oEvent.getParameter("response");
      let sMessageText, oError;
      try {
        oError = sError && JSON.parse(sError);
        sMessageText = oError.error && oError.error.message;
      } catch (e) {
        sMessageText = sError || getResourceModel(oEvent.getSource()).getText("M_FIELD_FILEUPLOADER_ABORTED_TEXT");
      }
      MessageBox.error(sMessageText);
    },
    removeStream: function (event, propertyFileName, propertyPath, controller) {
      const deleteButton = event.getSource();
      const fileWrapper = deleteButton.getParent();
      const context = fileWrapper.getBindingContext();

      // streams are removed by assigning the null value
      context.setProperty(propertyPath, null);
      // When setting the property to null, the uploadUrl (@@MODEL.format) is set to "" by the model
      //	with that another upload is not possible before refreshing the page
      // (refreshing the page would recreate the URL)
      //	This is the workaround:
      //	We set the property to undefined only on the frontend which will recreate the uploadUrl
      context.setProperty(propertyPath, undefined, null);
      this._callSideEffectsForStream(event, fileWrapper, controller);

      // Collaboration Draft Activity Sync
      const bCollaborationEnabled = CollaborationActivitySync.isConnected(deleteButton);
      if (bCollaborationEnabled) {
        let binding = context.getBinding();
        if (!binding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
          const oView = CommonUtils.getTargetView(deleteButton);
          binding = oView.getBindingContext().getBinding();
        }
        const data = [`${context.getPath()}/${propertyPath}`];
        if (propertyFileName !== null && propertyFileName !== void 0 && propertyFileName.path) {
          data.push(`${context.getPath()}/${propertyFileName.path}`);
        }
        CollaborationActivitySync.send(deleteButton, Activity.LiveChange, data);
        binding.attachEventOnce("patchCompleted", function () {
          CollaborationActivitySync.send(deleteButton, Activity.Change, data);
        });
      }
    },
    _callSideEffectsForStream: function (oEvent, oControl, oController) {
      const oFEController = FieldRuntime._getExtensionController(oController);
      if (oControl && oControl.getBindingContext().isTransient()) {
        return;
      }
      if (oControl) {
        oEvent.oSource = oControl;
      }
      oFEController._sideEffects.handleFieldChange(oEvent, this.getFieldStateOnChange(oEvent).state["validity"]);
    },
    getIconForMimeType: function (sMimeType) {
      return IconPool.getIconForMimeType(sMimeType);
    },
    /**
     * Method to retrieve text from value list for DataField.
     *
     * @function
     * @name retrieveTextFromValueList
     * @param sPropertyValue The property value of the datafield
     * @param sPropertyFullPath The property full path's
     * @param sDisplayFormat The display format for the datafield
     * @returns The formatted value in corresponding display format.
     */
    retrieveTextFromValueList: function (sPropertyValue, sPropertyFullPath, sDisplayFormat) {
      let sTextProperty;
      let oMetaModel;
      let sPropertyName;
      if (sPropertyValue) {
        oMetaModel = CommonHelper.getMetaModel();
        sPropertyName = oMetaModel.getObject(`${sPropertyFullPath}@sapui.name`);
        return oMetaModel.requestValueListInfo(sPropertyFullPath, true).then(function (mValueListInfo) {
          // take the "" one if exists, otherwise take the first one in the object TODO: to be discussed
          const oValueListInfo = mValueListInfo[mValueListInfo[""] ? "" : Object.keys(mValueListInfo)[0]];
          const oValueListModel = oValueListInfo.$model;
          const oMetaModelValueList = oValueListModel.getMetaModel();
          const oParamWithKey = oValueListInfo.Parameters.find(function (oParameter) {
            return oParameter.LocalDataProperty && oParameter.LocalDataProperty.$PropertyPath === sPropertyName;
          });
          if (oParamWithKey && !oParamWithKey.ValueListProperty) {
            return Promise.reject(`Inconsistent value help annotation for ${sPropertyName}`);
          }
          const oTextAnnotation = oMetaModelValueList.getObject(`/${oValueListInfo.CollectionPath}/${oParamWithKey.ValueListProperty}@com.sap.vocabularies.Common.v1.Text`);
          if (oTextAnnotation && oTextAnnotation.$Path) {
            sTextProperty = oTextAnnotation.$Path;
            const oFilter = new Filter({
              path: oParamWithKey.ValueListProperty,
              operator: "EQ",
              value1: sPropertyValue
            });
            const oListBinding = oValueListModel.bindList(`/${oValueListInfo.CollectionPath}`, undefined, undefined, oFilter, {
              $select: sTextProperty
            });
            return oListBinding.requestContexts(0, 2);
          } else {
            sDisplayFormat = "Value";
            return sPropertyValue;
          }
        }).then(function (aContexts) {
          var _aContexts$;
          const sDescription = sTextProperty ? (_aContexts$ = aContexts[0]) === null || _aContexts$ === void 0 ? void 0 : _aContexts$.getObject()[sTextProperty] : "";
          switch (sDisplayFormat) {
            case "Description":
              return sDescription;
            case "DescriptionValue":
              return Core.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT", [sDescription, sPropertyValue]);
            case "ValueDescription":
              return Core.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT", [sPropertyValue, sDescription]);
            default:
              return sPropertyValue;
          }
        }).catch(function (oError) {
          const sMsg = oError.status && oError.status === 404 ? `Metadata not found (${oError.status}) for value help of property ${sPropertyFullPath}` : oError.message;
          Log.error(sMsg);
        });
      }
      return sPropertyValue;
    },
    handleTypeMissmatch: function (oEvent) {
      const resourceModel = getResourceModel(oEvent.getSource());
      MessageBox.error(resourceModel.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE"), {
        details: `<p><strong>${resourceModel.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE_DETAILS_SELECTED")}</strong></p>${oEvent.getParameters().mimeType}<br><br>` + `<p><strong>${resourceModel.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE_DETAILS_ALLOWED")}</strong></p>${oEvent.getSource().getMimeType().toString().replaceAll(",", ", ")}`,
        contentWidth: "150px"
      });
    },
    handleFileSizeExceed: function (oEvent) {
      MessageBox.error(getResourceModel(oEvent.getSource()).getText("M_FIELD_FILEUPLOADER_FILE_TOO_BIG", oEvent.getSource().getMaximumFileSize().toFixed(3)), {
        contentWidth: "150px"
      });
    },
    _getExtensionController: function (oController) {
      return oController.isA("sap.fe.core.ExtensionAPI") ? oController._controller : oController;
    }
  };

  /**
   * @global
   */
  return FieldRuntime;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldRuntime", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/collaboration/ActivitySync","sap/fe/core/controllerextensions/collaboration/CollaborationCommon","sap/fe/core/controllerextensions/editFlow/draft","sap/fe/core/helpers/KeepAliveHelper","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/macros/CommonHelper","sap/fe/macros/controls/FieldWrapper","sap/fe/macros/field/FieldAPI","sap/m/IllustratedMessage","sap/m/IllustratedMessageType","sap/m/library","sap/m/MessageBox","sap/m/ResponsivePopover","sap/ui/core/Core","sap/ui/core/IconPool","sap/ui/Device","sap/ui/model/Filter","sap/ui/unified/FileUploaderParameter","sap/ui/util/openWindow"],function(e,t,n,o,i,a,r,s,c,l,d,g,u,f,p,h,m,v,C,S,P,E){"use strict";var T=C.system;var _=s.getResourceModel;var F=o.Activity;function M(e){let n=e.getBindingContext().getBinding();if(!n.isA("sap.ui.model.odata.v4.ODataListBinding")){const o=t.getTargetView(e);n=o.getBindingContext().getBinding()}return n}const y={resetChangesHandler:undefined,uploadPromises:undefined,onDataFieldWithNavigationPath:function(n,o,a){if(o._routing){let e=n.getBindingContext();const s=t.getTargetView(n),c=e.getModel().getMetaModel(),l=function(t){if(t){e=t}o._routing.navigateToTarget(e,a,true)};if(s.getViewData().converterType==="ObjectPage"&&!r.isStickySessionSupported(c)){i.processDataLossOrDraftDiscardConfirmation(l,Function.prototype,e,s.getController(),true,i.NavigationType.ForwardNavigation)}else{l()}}else{e.error("FieldRuntime: No routing listener controller extension found. Internal navigation aborted.","sap.fe.macros.field.FieldRuntime","onDataFieldWithNavigationPath")}},isDraftIndicatorVisible:function(e,t,n,o,i){if(o!==undefined&&n!==undefined&&(!o||n)&&!i){return e===t}else{return false}},onValidateFieldGroup:function(e,t){const n=y._getExtensionController(e);n._sideEffects.handleFieldGroupChange(t)},handleChange:function(e,t){const o=t.getSource(),i=o&&o.getBindingContext().isTransient(),a=t.getParameter("promise")||Promise.resolve(),r=t.getSource(),s=t.getParameter("valid"),c=this.getFieldStateOnChange(t).state["validity"];a.then(function(){t.oSource=r;t.mParameters={valid:s};d.handleChange(t,e)}).catch(function(){t.oSource=r;t.mParameters={valid:false};d.handleChange(t,e)});const l=y._getExtensionController(e);l.editFlow.syncTask(a);if(i){return}l._sideEffects.handleFieldChange(t,c,a);const g=t.getSource(),u=n.isConnected(g);if(u&&c){var f,p;const e=M(g);const t=[...((f=g.getBindingInfo("value")||g.getBindingInfo("selected"))===null||f===void 0?void 0:f.parts)||[],...((p=g.getBindingInfo("additionalValue"))===null||p===void 0?void 0:p.parts)||[]].map(function(e){if(e){var t;return`${(t=g.getBindingContext())===null||t===void 0?void 0:t.getPath()}/${e.path}`}});const i=()=>{if(e.hasPendingChanges()){e.attachEventOnce("patchCompleted",function(){n.send(g,F.Change,t)})}else{n.send(g,F.Undo,t)}};if(o.isA("sap.ui.mdc.Field")){a.then(()=>{i()}).catch(()=>{i()})}else{i()}}},handleLiveChange:function(e){const t=e.getSource();if(n.isConnected(t)){const e=t.getBindingInfo("value").parts[0].path;const o=`${t.getBindingContext().getPath()}/${e}`;n.send(t,F.LiveChange,o);if(!this.resetChangesHandler){this.resetChangesHandler=()=>{setTimeout(()=>{if(t.isA("sap.ui.mdc.Field")){const e=m.byId(m.getCurrentFocusedControlId());if((e===null||e===void 0?void 0:e.getParent())===t){return}}t.detachBrowserEvent("focusout",this.resetChangesHandler);delete this.resetChangesHandler;n.send(t,F.Undo,o)},100)};t.attachBrowserEvent("focusout",this.resetChangesHandler)}}},handleOpenPicker:function(e){const t=e.getSource();const o=n.isConnected(t);if(o){const e=t.getBindingInfo("value").parts[0].path;const o=`${t.getBindingContext().getPath()}/${e}`;n.send(t,F.LiveChange,o)}},handleClosePicker:function(e){const t=e.getSource();const o=n.isConnected(t);if(o){const e=M(t);if(!e.hasPendingChanges()){const e=t.getBindingInfo("value").parts[0].path;const o=`${t.getBindingContext().getPath()}/${e}`;n.send(t,F.Undo,o)}}},_sendCollaborationMessageForFileUploader(e,t){const o=n.isConnected(e);if(o){var i,a;const o=(i=e.getParent())===null||i===void 0?void 0:i.getProperty("propertyPath");const r=`${(a=e.getBindingContext())===null||a===void 0?void 0:a.getPath()}/${o}`;n.send(e,t,r)}},handleOpenUploader:function(e){const t=e.getSource();y._sendCollaborationMessageForFileUploader(t,F.LiveChange)},handleCloseUploader:function(e){const t=e.getSource();y._sendCollaborationMessageForFileUploader(t,F.Undo)},getFieldStateOnChange:function(e){let t=e.getSource(),n={};const o=function(e){return e&&e.getDataState()?e.getDataState().getInvalidValue()===undefined:true};if(t.isA("sap.fe.macros.field.FieldAPI")){t=t.getContent()}if(t.isA(l.getMetadata().getName())&&t.getEditMode()==="Editable"){t=t.getContentEdit()[0]}if(t.isA("sap.ui.mdc.Field")){let i=e.getParameter("valid")||e.getParameter("isValid");if(i===undefined){if(t.getMaxConditions()===1){const e=t.getBindingInfo("value");i=o(e&&e.binding)}if(t.getValue()===""&&!t.getProperty("required")){i=true}}n={fieldValue:t.getValue(),validity:!!i}}else{const e=t.getBinding("uploadUrl")||t.getBinding("value")||t.getBinding("selected");n={fieldValue:e&&e.getValue(),validity:o(e)}}return{field:t,state:n}},_fnFixHashQueryString:function(e){if(e&&e.indexOf("?")!==-1){e=e.split("?")[0]}return e},_fnGetLinkInformation:function(e,n,o,i,a){const r=n&&n.getModel();const s=r&&r.getMetaModel();const c=i||e&&e.getValue();const l=n&&t.getTargetView(n);const d=l&&l.getBindingContext("internal");const g=l&&t.getAppComponent(l);const u=g&&g.getShellServices();const f=u&&u.getLinksWithCache([[{semanticObject:c}]]);const p=s&&s.getObject(`${o}@com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions`);return{SemanticObjectName:c,SemanticObjectFullPath:o,MetaModel:s,InternalModelContext:d,ShellServiceHelper:u,GetLinksPromise:f,SemanticObjectUnavailableActions:p,fnSetActive:a}},_fnQuickViewHasNewCondition:function(e,t){if(e&&e.path&&e.path===t.SemanticObjectFullPath){const n=e[!t.SemanticObjectUnavailableActions?"HasTargetsNotFiltered":"HasTargets"];t.fnSetActive(!!n);return true}else{return false}},_fnQuickViewSetNewConditionForConditionalWrapper:function(e,t){if(t[e.SemanticObjectName]){let n,o;const i=Object.keys(t[e.SemanticObjectName]);for(const a in i){n=i[a];o=t[e.SemanticObjectName]&&t[e.SemanticObjectName][n];if(y._fnQuickViewHasNewCondition(o,e)){break}}}},_fnUpdateSemanticObjectsTargetModel:function(n,o,i,a){const r=n&&n.getSource();let s;if(i.isA("sap.m.ObjectStatus")){s=e=>i.setActive(e)}if(i.isA("sap.m.ObjectIdentifier")){s=e=>i.setTitleActive(e)}const c=i&&i.getParent();if(c&&c.isA("sap.fe.macros.controls.ConditionalWrapper")){s=e=>c.setCondition(e)}if(s!==undefined){const n=y._fnGetLinkInformation(r,i,a,o,s);n.fnSetActive=s;const c=y._fnFixHashQueryString(t.getAppComponent(i).getShellServices().getHash());t.updateSemanticTargets([n.GetLinksPromise],[{semanticObject:n.SemanticObjectName,path:n.SemanticObjectFullPath}],n.InternalModelContext,c).then(function(e){if(e){y._fnQuickViewSetNewConditionForConditionalWrapper(n,e)}}).catch(function(t){e.error("Cannot update Semantic Targets model",t)})}},_checkControlHasModelAndBindingContext(e){if(!e.getModel()||!e.getBindingContext()){return false}else{return true}},_checkCustomDataValueBeforeUpdatingSemanticObjectModel(e,t,n){let o;let i;const a=function(e){return!(e!==null&&typeof e==="object")};n=n.filter(e=>e.getKey()!=="sap-ui-custom-settings");for(const r in n){o=n[r].getValue();if(!o&&a(o)){i=n[r].getBinding("value");if(i){i.attachEventOnce("change",function(n){y._fnUpdateSemanticObjectsTargetModel(n,null,e,t)})}}else if(a(o)){y._fnUpdateSemanticObjectsTargetModel(null,o,e,t)}}},LinkModelContextChange:function(e,t,n){const o=e.getSource();if(y._checkControlHasModelAndBindingContext(o)){const e=`${n}/${t}`;const i=o.getDependents().length?o.getDependents()[0]:undefined;const a=i===null||i===void 0?void 0:i.getCustomData();if(a&&a.length>0){y._checkCustomDataValueBeforeUpdatingSemanticObjectModel(o,e,a)}}},openExternalLink:function(e){const t=e.getSource();if(t.data("url")&&t.getProperty("text")!==""){E(t.data("url"),"_self")}},createPopoverWithNoTargets:function(e){const t=e.getId();const n={title:_(e).getText("M_ILLUSTRATEDMESSAGE_TITLE"),description:_(e).getText("M_ILLUSTRATEDMESSAGE_DESCRIPTION"),enableFormattedText:true,illustrationSize:"Dot",illustrationType:u.Tent};const o=new g(`${t}-illustratedmessage`,n);const i={horizontalScrolling:false,showHeader:T.phone,placement:f.PlacementType.Auto,content:[o],afterClose:function(e){if(e.getSource()){e.getSource().destroy()}}};return new h(`${t}-popover`,i)},openLink:async function(n,o){try{const i=await n.getTriggerHref();if(!i){try{const e=await n.retrieveLinkItems();if((e===null||e===void 0?void 0:e.length)===0&&n.getPayload().hasQuickViewFacets==="false"){const e=y.createPopoverWithNoTargets(n);n.addDependent(e);e.openBy(o)}else{await n.open(o)}}catch(t){e.error(`Cannot retrieve the QuickView Popover dialog: ${t}`)}}else{const n=t.getTargetView(o);const r=t.getAppComponent(n);const s=r.getShellServices();const c=s.parseShellHash(i);const l={target:{semanticObject:c.semanticObject,action:c.action},params:c.params};a.storeControlRefreshStrategyForHash(n,c);if(t.isStickyEditMode(o)!==true){s.toExternal(l,r)}else{try{const e=await s.hrefForExternalAsync(l,r);E(e)}catch(t){e.error(`Error while retireving hrefForExternal : ${t}`)}}}}catch(t){e.error(`Error triggering link Href: ${t}`)}},pressLink:async function(e){const t=e.getSource();const n=t.isA("sap.m.ObjectIdentifier")?t.findElements(false,e=>e.isA("sap.m.Link"))[0]:t;if(t.getDependents()&&t.getDependents().length>0&&n.getProperty("text")!==""){const e=t.getDependents()[0];if(e&&e.isA("sap.ui.mdc.Link")){await y.openLink(e,n)}}return n},uploadStream:function(e,t){const o=t.getSource(),i=y._getExtensionController(e),a=o.getParent(),r=a.getUploadUrl();if(r!==""){var s,c;a.setUIBusy(true);o.setUploadUrl(r);o.removeAllHeaderParameters();const e=(s=o.getModel())===null||s===void 0?void 0:s.getHttpHeaders()["X-CSRF-Token"];if(e){const t=new P;t.setName("x-csrf-token");t.setValue(e);o.addHeaderParameter(t)}const t=(c=o.getBindingContext())===null||c===void 0?void 0:c.getProperty("@odata.etag");if(t){const e=new P;e.setName("If-Match");e.setValue(n.isConnected(o)?"*":t);o.addHeaderParameter(e)}const l=new P;l.setName("Accept");l.setValue("application/json");o.addHeaderParameter(l);const d=new Promise((e,t)=>{this.uploadPromises=this.uploadPromises||{};this.uploadPromises[o.getId()]={resolve:e,reject:t};o.upload()});i.editFlow.syncTask(d)}else{p.error(_(e).getText("M_FIELD_FILEUPLOADER_ABORTED_TEXT"))}},handleUploadComplete:function(e,o,i,a){const r=e.getParameter("status"),s=e.getSource(),c=s.getParent();c.setUIBusy(false);const l=s.getBindingContext();if(r===0||r>=400){this._displayMessageForFailedUpload(e);this.uploadPromises[s.getId()].reject()}else{var d;const t=e.getParameter("headers").etag;if(t){l===null||l===void 0?void 0:l.setProperty("@odata.etag",t,null)}if(o!==null&&o!==void 0&&o.path){l===null||l===void 0?void 0:l.setProperty(o.path,s.getValue())}(d=c.avatar)===null||d===void 0?void 0:d.refreshAvatarCacheBusting();this._callSideEffectsForStream(e,c,a);this.uploadPromises[s.getId()].resolve()}delete this.uploadPromises[s.getId()];const g=n.isConnected(s);if(!g||!l){return}const u=[`${l.getPath()}/${i}`];if(o!==null&&o!==void 0&&o.path){u.push(`${l.getPath()}/${o.path}`)}let f=l.getBinding();if(!f.isA("sap.ui.model.odata.v4.ODataListBinding")){const e=t.getTargetView(s);f=e.getBindingContext().getBinding()}if(f.hasPendingChanges()){f.attachEventOnce("patchCompleted",()=>{n.send(c,F.Change,u)})}else{n.send(c,F.Change,u)}},_displayMessageForFailedUpload:function(e){const t=e.getParameter("responseRaw")||e.getParameter("response");let n,o;try{o=t&&JSON.parse(t);n=o.error&&o.error.message}catch(o){n=t||_(e.getSource()).getText("M_FIELD_FILEUPLOADER_ABORTED_TEXT")}p.error(n)},removeStream:function(e,o,i,a){const r=e.getSource();const s=r.getParent();const c=s.getBindingContext();c.setProperty(i,null);c.setProperty(i,undefined,null);this._callSideEffectsForStream(e,s,a);const l=n.isConnected(r);if(l){let e=c.getBinding();if(!e.isA("sap.ui.model.odata.v4.ODataListBinding")){const n=t.getTargetView(r);e=n.getBindingContext().getBinding()}const a=[`${c.getPath()}/${i}`];if(o!==null&&o!==void 0&&o.path){a.push(`${c.getPath()}/${o.path}`)}n.send(r,F.LiveChange,a);e.attachEventOnce("patchCompleted",function(){n.send(r,F.Change,a)})}},_callSideEffectsForStream:function(e,t,n){const o=y._getExtensionController(n);if(t&&t.getBindingContext().isTransient()){return}if(t){e.oSource=t}o._sideEffects.handleFieldChange(e,this.getFieldStateOnChange(e).state["validity"])},getIconForMimeType:function(e){return v.getIconForMimeType(e)},retrieveTextFromValueList:function(t,n,o){let i;let a;let r;if(t){a=c.getMetaModel();r=a.getObject(`${n}@sapui.name`);return a.requestValueListInfo(n,true).then(function(e){const n=e[e[""]?"":Object.keys(e)[0]];const a=n.$model;const s=a.getMetaModel();const c=n.Parameters.find(function(e){return e.LocalDataProperty&&e.LocalDataProperty.$PropertyPath===r});if(c&&!c.ValueListProperty){return Promise.reject(`Inconsistent value help annotation for ${r}`)}const l=s.getObject(`/${n.CollectionPath}/${c.ValueListProperty}@com.sap.vocabularies.Common.v1.Text`);if(l&&l.$Path){i=l.$Path;const e=new S({path:c.ValueListProperty,operator:"EQ",value1:t});const o=a.bindList(`/${n.CollectionPath}`,undefined,undefined,e,{$select:i});return o.requestContexts(0,2)}else{o="Value";return t}}).then(function(e){var n;const a=i?(n=e[0])===null||n===void 0?void 0:n.getObject()[i]:"";switch(o){case"Description":return a;case"DescriptionValue":return m.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT",[a,t]);case"ValueDescription":return m.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT",[t,a]);default:return t}}).catch(function(t){const o=t.status&&t.status===404?`Metadata not found (${t.status}) for value help of property ${n}`:t.message;e.error(o)})}return t},handleTypeMissmatch:function(e){const t=_(e.getSource());p.error(t.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE"),{details:`<p><strong>${t.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE_DETAILS_SELECTED")}</strong></p>${e.getParameters().mimeType}<br><br>`+`<p><strong>${t.getText("M_FIELD_FILEUPLOADER_WRONG_MIMETYPE_DETAILS_ALLOWED")}</strong></p>${e.getSource().getMimeType().toString().replaceAll(",",", ")}`,contentWidth:"150px"})},handleFileSizeExceed:function(e){p.error(_(e.getSource()).getText("M_FIELD_FILEUPLOADER_FILE_TOO_BIG",e.getSource().getMaximumFileSize().toFixed(3)),{contentWidth:"150px"})},_getExtensionController:function(e){return e.isA("sap.fe.core.ExtensionAPI")?e._controller:e}};return y},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldTemplating-dbg", ["sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/CommonFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/FieldControlHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/SemanticObjectHelper", "sap/fe/core/templating/UIFormatters", "sap/ui/core/format/NumberFormat", "sap/ui/model/json/JSONModel", "./FieldHelper"], function (DataField, BindingHelper, BindingToolkit, TypeGuards, CommonFormatters, DataModelPathHelper, FieldControlHelper, PropertyHelper, SemanticObjectHelper, UIFormatters, NumberFormat, JSONModel, FieldHelper) {
  "use strict";

  var _exports = {};
  var ifUnitEditable = UIFormatters.ifUnitEditable;
  var hasSemanticObject = SemanticObjectHelper.hasSemanticObject;
  var getDynamicPathFromSemanticObject = SemanticObjectHelper.getDynamicPathFromSemanticObject;
  var isReadOnlyExpression = FieldControlHelper.isReadOnlyExpression;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isProperty = TypeGuards.isProperty;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var transformRecursively = BindingToolkit.transformRecursively;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var isComplexTypeExpression = BindingToolkit.isComplexTypeExpression;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var UI = BindingHelper.UI;
  var isDataFieldForAnnotation = DataField.isDataFieldForAnnotation;
  /**
   * Recursively add the text arrangement to a binding expression.
   *
   * @param bindingExpressionToEnhance The binding expression to be enhanced
   * @param fullContextPath The current context path we're on (to properly resolve the text arrangement properties)
   * @returns An updated expression containing the text arrangement binding.
   */
  const addTextArrangementToBindingExpression = function (bindingExpressionToEnhance, fullContextPath) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      let outExpression = expression;
      if (expression.modelName === undefined) {
        // In case of default model we then need to resolve the text arrangement property
        const oPropertyDataModelPath = enhanceDataModelPath(fullContextPath, expression.path);
        outExpression = CommonFormatters.getBindingWithTextArrangement(oPropertyDataModelPath, expression);
      }
      return outExpression;
    });
  };
  _exports.addTextArrangementToBindingExpression = addTextArrangementToBindingExpression;
  const formatValueRecursively = function (bindingExpressionToEnhance, fullContextPath) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      let outExpression = expression;
      if (expression.modelName === undefined) {
        // In case of default model we then need to resolve the text arrangement property
        const oPropertyDataModelPath = enhanceDataModelPath(fullContextPath, expression.path);
        outExpression = formatWithTypeInformation(oPropertyDataModelPath.targetObject, expression);
      }
      return outExpression;
    });
  };
  _exports.formatValueRecursively = formatValueRecursively;
  const getTextBindingExpression = function (oPropertyDataModelObjectPath, fieldFormatOptions) {
    return getTextBinding(oPropertyDataModelObjectPath, fieldFormatOptions, true);
  };
  _exports.getTextBindingExpression = getTextBindingExpression;
  const getTextBinding = function (oPropertyDataModelObjectPath, fieldFormatOptions) {
    var _oPropertyDataModelOb, _oPropertyDataModelOb2, _oPropertyDataModelOb3, _oPropertyDataModelOb4, _oPropertyDataModelOb5, _oPropertyDataModelOb6, _oPropertyDataModelOb7, _oPropertyDataModelOb8, _oPropertyDataModelOb9, _oPropertyDataModelOb10, _oPropertyDataModelOb11, _oPropertyDataModelOb12, _oPropertyDataModelOb13, _oPropertyDataModelOb14, _oPropertyDataModelOb15;
    let asObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (((_oPropertyDataModelOb = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb === void 0 ? void 0 : _oPropertyDataModelOb.$Type) === "com.sap.vocabularies.UI.v1.DataField" || ((_oPropertyDataModelOb2 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb2 === void 0 ? void 0 : _oPropertyDataModelOb2.$Type) === "com.sap.vocabularies.UI.v1.DataPointType" || ((_oPropertyDataModelOb3 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb3 === void 0 ? void 0 : _oPropertyDataModelOb3.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath" || ((_oPropertyDataModelOb4 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb4 === void 0 ? void 0 : _oPropertyDataModelOb4.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" || ((_oPropertyDataModelOb5 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb5 === void 0 ? void 0 : _oPropertyDataModelOb5.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" || ((_oPropertyDataModelOb6 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb6 === void 0 ? void 0 : _oPropertyDataModelOb6.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithAction") {
      // If there is no resolved property, the value is returned as a constant
      const fieldValue = getExpressionFromAnnotation(oPropertyDataModelObjectPath.targetObject.Value) ?? "";
      return compileExpression(fieldValue);
    }
    if (isPathAnnotationExpression(oPropertyDataModelObjectPath.targetObject) && oPropertyDataModelObjectPath.targetObject.$target) {
      oPropertyDataModelObjectPath = enhanceDataModelPath(oPropertyDataModelObjectPath, oPropertyDataModelObjectPath.targetObject.path);
    }
    const oPropertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oPropertyDataModelObjectPath));
    let oTargetBinding;
    // formatting
    if ((_oPropertyDataModelOb7 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb7 !== void 0 && (_oPropertyDataModelOb8 = _oPropertyDataModelOb7.annotations) !== null && _oPropertyDataModelOb8 !== void 0 && (_oPropertyDataModelOb9 = _oPropertyDataModelOb8.Measures) !== null && _oPropertyDataModelOb9 !== void 0 && _oPropertyDataModelOb9.Unit || (_oPropertyDataModelOb10 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb10 !== void 0 && (_oPropertyDataModelOb11 = _oPropertyDataModelOb10.annotations) !== null && _oPropertyDataModelOb11 !== void 0 && (_oPropertyDataModelOb12 = _oPropertyDataModelOb11.Measures) !== null && _oPropertyDataModelOb12 !== void 0 && _oPropertyDataModelOb12.ISOCurrency) {
      oTargetBinding = UIFormatters.getBindingWithUnitOrCurrency(oPropertyDataModelObjectPath, oPropertyBindingExpression);
      if ((fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.measureDisplayMode) === "Hidden" && isComplexTypeExpression(oTargetBinding)) {
        // TODO: Refactor once types are less generic here
        oTargetBinding.formatOptions = {
          ...oTargetBinding.formatOptions,
          showMeasure: false
        };
      }
    } else if ((_oPropertyDataModelOb13 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb13 !== void 0 && (_oPropertyDataModelOb14 = _oPropertyDataModelOb13.annotations) !== null && _oPropertyDataModelOb14 !== void 0 && (_oPropertyDataModelOb15 = _oPropertyDataModelOb14.Common) !== null && _oPropertyDataModelOb15 !== void 0 && _oPropertyDataModelOb15.Timezone) {
      oTargetBinding = UIFormatters.getBindingWithTimezone(oPropertyDataModelObjectPath, oPropertyBindingExpression, false, true, fieldFormatOptions.dateFormatOptions);
    } else {
      oTargetBinding = CommonFormatters.getBindingWithTextArrangement(oPropertyDataModelObjectPath, oPropertyBindingExpression, fieldFormatOptions);
    }
    if (asObject) {
      return oTargetBinding;
    }
    // We don't include $$nopatch and parseKeepEmptyString as they make no sense in the text binding case
    return compileExpression(oTargetBinding);
  };
  _exports.getTextBinding = getTextBinding;
  const getValueBinding = function (oPropertyDataModelObjectPath, fieldFormatOptions) {
    let ignoreUnit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let ignoreFormatting = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let bindingParameters = arguments.length > 4 ? arguments[4] : undefined;
    let targetTypeAny = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
    let keepUnit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    if (isPathAnnotationExpression(oPropertyDataModelObjectPath.targetObject) && oPropertyDataModelObjectPath.targetObject.$target) {
      const oNavPath = oPropertyDataModelObjectPath.targetEntityType.resolvePath(oPropertyDataModelObjectPath.targetObject.path, true);
      oPropertyDataModelObjectPath.targetObject = oNavPath.target;
      oNavPath.visitedObjects.forEach(oNavObj => {
        if (isNavigationProperty(oNavObj)) {
          oPropertyDataModelObjectPath.navigationProperties.push(oNavObj);
        }
      });
    }
    const targetObject = oPropertyDataModelObjectPath.targetObject;
    if (isProperty(targetObject)) {
      let oBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oPropertyDataModelObjectPath));
      if (isPathInModelExpression(oBindingExpression)) {
        var _targetObject$annotat, _targetObject$annotat2, _targetObject$annotat3, _targetObject$annotat4, _targetObject$annotat5, _targetObject$annotat6;
        if ((_targetObject$annotat = targetObject.annotations) !== null && _targetObject$annotat !== void 0 && (_targetObject$annotat2 = _targetObject$annotat.Communication) !== null && _targetObject$annotat2 !== void 0 && _targetObject$annotat2.IsEmailAddress) {
          oBindingExpression.type = "sap.fe.core.type.Email";
        } else if (!ignoreUnit && ((_targetObject$annotat3 = targetObject.annotations) !== null && _targetObject$annotat3 !== void 0 && (_targetObject$annotat4 = _targetObject$annotat3.Measures) !== null && _targetObject$annotat4 !== void 0 && _targetObject$annotat4.ISOCurrency || (_targetObject$annotat5 = targetObject.annotations) !== null && _targetObject$annotat5 !== void 0 && (_targetObject$annotat6 = _targetObject$annotat5.Measures) !== null && _targetObject$annotat6 !== void 0 && _targetObject$annotat6.Unit)) {
          oBindingExpression = UIFormatters.getBindingWithUnitOrCurrency(oPropertyDataModelObjectPath, oBindingExpression, true, keepUnit ? undefined : {
            showMeasure: false
          });
        } else {
          var _oPropertyDataModelOb16, _oPropertyDataModelOb17;
          const oTimezone = (_oPropertyDataModelOb16 = oPropertyDataModelObjectPath.targetObject.annotations) === null || _oPropertyDataModelOb16 === void 0 ? void 0 : (_oPropertyDataModelOb17 = _oPropertyDataModelOb16.Common) === null || _oPropertyDataModelOb17 === void 0 ? void 0 : _oPropertyDataModelOb17.Timezone;
          if (oTimezone) {
            oBindingExpression = UIFormatters.getBindingWithTimezone(oPropertyDataModelObjectPath, oBindingExpression, true);
          } else {
            oBindingExpression = formatWithTypeInformation(targetObject, oBindingExpression);
          }
          if (isPathInModelExpression(oBindingExpression) && oBindingExpression.type === "sap.ui.model.odata.type.String") {
            oBindingExpression.formatOptions = {
              parseKeepsEmptyString: true
            };
          }
        }
        if (isPathInModelExpression(oBindingExpression)) {
          if (ignoreFormatting) {
            delete oBindingExpression.formatOptions;
            delete oBindingExpression.constraints;
            delete oBindingExpression.type;
          }
          if (bindingParameters) {
            oBindingExpression.parameters = bindingParameters;
          }
          if (targetTypeAny) {
            oBindingExpression.targetType = "any";
          }
        }
        return compileExpression(oBindingExpression);
      } else {
        // if somehow we could not compile the binding -> return empty string
        return "";
      }
    } else if ((targetObject === null || targetObject === void 0 ? void 0 : targetObject.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" || (targetObject === null || targetObject === void 0 ? void 0 : targetObject.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath") {
      return compileExpression(getExpressionFromAnnotation(targetObject.Value));
    } else {
      return "";
    }
  };
  _exports.getValueBinding = getValueBinding;
  const getAssociatedTextBinding = function (oPropertyDataModelObjectPath, fieldFormatOptions) {
    const textPropertyPath = PropertyHelper.getAssociatedTextPropertyPath(oPropertyDataModelObjectPath.targetObject);
    if (textPropertyPath) {
      const oTextPropertyPath = enhanceDataModelPath(oPropertyDataModelObjectPath, textPropertyPath);
      return getValueBinding(oTextPropertyPath, fieldFormatOptions, true, true, {
        $$noPatch: true
      });
    }
    return undefined;
  };
  _exports.getAssociatedTextBinding = getAssociatedTextBinding;
  const isUsedInNavigationWithQuickViewFacets = function (oDataModelPath, oProperty) {
    var _oDataModelPath$targe, _oDataModelPath$targe2, _oDataModelPath$targe3, _oDataModelPath$targe4, _oDataModelPath$conte;
    const aNavigationProperties = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : (_oDataModelPath$targe = oDataModelPath.targetEntityType) === null || _oDataModelPath$targe === void 0 ? void 0 : _oDataModelPath$targe.navigationProperties) || [];
    const aSemanticObjects = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : (_oDataModelPath$targe2 = oDataModelPath.targetEntityType) === null || _oDataModelPath$targe2 === void 0 ? void 0 : (_oDataModelPath$targe3 = _oDataModelPath$targe2.annotations) === null || _oDataModelPath$targe3 === void 0 ? void 0 : (_oDataModelPath$targe4 = _oDataModelPath$targe3.Common) === null || _oDataModelPath$targe4 === void 0 ? void 0 : _oDataModelPath$targe4.SemanticKey) || [];
    let bIsUsedInNavigationWithQuickViewFacets = false;
    aNavigationProperties.forEach(oNavProp => {
      if (oNavProp.referentialConstraint && oNavProp.referentialConstraint.length) {
        oNavProp.referentialConstraint.forEach(oRefConstraint => {
          if ((oRefConstraint === null || oRefConstraint === void 0 ? void 0 : oRefConstraint.sourceProperty) === oProperty.name) {
            var _oNavProp$targetType, _oNavProp$targetType$, _oNavProp$targetType$2;
            if (oNavProp !== null && oNavProp !== void 0 && (_oNavProp$targetType = oNavProp.targetType) !== null && _oNavProp$targetType !== void 0 && (_oNavProp$targetType$ = _oNavProp$targetType.annotations) !== null && _oNavProp$targetType$ !== void 0 && (_oNavProp$targetType$2 = _oNavProp$targetType$.UI) !== null && _oNavProp$targetType$2 !== void 0 && _oNavProp$targetType$2.QuickViewFacets) {
              bIsUsedInNavigationWithQuickViewFacets = true;
            }
          }
        });
      }
    });
    if (((_oDataModelPath$conte = oDataModelPath.contextLocation) === null || _oDataModelPath$conte === void 0 ? void 0 : _oDataModelPath$conte.targetEntitySet) !== oDataModelPath.targetEntitySet) {
      var _oDataModelPath$targe5, _oDataModelPath$targe6, _oDataModelPath$targe7;
      const aIsTargetSemanticKey = aSemanticObjects.some(function (oSemantic) {
        var _oSemantic$$target;
        return (oSemantic === null || oSemantic === void 0 ? void 0 : (_oSemantic$$target = oSemantic.$target) === null || _oSemantic$$target === void 0 ? void 0 : _oSemantic$$target.name) === oProperty.name;
      });
      if ((aIsTargetSemanticKey || oProperty.isKey) && oDataModelPath !== null && oDataModelPath !== void 0 && (_oDataModelPath$targe5 = oDataModelPath.targetEntityType) !== null && _oDataModelPath$targe5 !== void 0 && (_oDataModelPath$targe6 = _oDataModelPath$targe5.annotations) !== null && _oDataModelPath$targe6 !== void 0 && (_oDataModelPath$targe7 = _oDataModelPath$targe6.UI) !== null && _oDataModelPath$targe7 !== void 0 && _oDataModelPath$targe7.QuickViewFacets) {
        bIsUsedInNavigationWithQuickViewFacets = true;
      }
    }
    return bIsUsedInNavigationWithQuickViewFacets;
  };
  _exports.isUsedInNavigationWithQuickViewFacets = isUsedInNavigationWithQuickViewFacets;
  const isRetrieveTextFromValueListEnabled = function (oPropertyPath, fieldFormatOptions) {
    var _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation3;
    const oProperty = isPathAnnotationExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    if (!((_oProperty$annotation = oProperty.annotations) !== null && _oProperty$annotation !== void 0 && (_oProperty$annotation2 = _oProperty$annotation.Common) !== null && _oProperty$annotation2 !== void 0 && _oProperty$annotation2.Text) && !((_oProperty$annotation3 = oProperty.annotations) !== null && _oProperty$annotation3 !== void 0 && _oProperty$annotation3.Measures) && PropertyHelper.hasValueHelp(oProperty) && fieldFormatOptions.textAlignMode === "Form") {
      return true;
    }
    return false;
  };

  /**
   * Calculates text alignment based on the dataModelObjectPath.
   *
   * @param dataFieldModelPath The property's type
   * @param formatOptions The field format options
   * @param computedEditMode The editMode used in this case
   * @returns The property alignment
   */
  _exports.isRetrieveTextFromValueListEnabled = isRetrieveTextFromValueListEnabled;
  const getTextAlignment = function (dataFieldModelPath, formatOptions, computedEditMode) {
    var _dataFieldModelPath$t, _dataFieldModelPath$t2, _dataFieldModelPath$t3, _dataFieldModelPath$t4, _dataFieldModelPath$t5, _dataFieldModelPath$t6;
    // check for the target value type directly, or in case it is pointing to a DataPoint we look at the dataPoint's value
    let sType = ((_dataFieldModelPath$t = dataFieldModelPath.targetObject.Value) === null || _dataFieldModelPath$t === void 0 ? void 0 : _dataFieldModelPath$t.$target.type) || ((_dataFieldModelPath$t2 = dataFieldModelPath.targetObject.Target) === null || _dataFieldModelPath$t2 === void 0 ? void 0 : _dataFieldModelPath$t2.$target.Value.$target.type);
    let annotations;
    if (PropertyHelper.isKey(((_dataFieldModelPath$t3 = dataFieldModelPath.targetObject.Value) === null || _dataFieldModelPath$t3 === void 0 ? void 0 : _dataFieldModelPath$t3.$target) || ((_dataFieldModelPath$t4 = dataFieldModelPath.targetObject.Target) === null || _dataFieldModelPath$t4 === void 0 ? void 0 : (_dataFieldModelPath$t5 = _dataFieldModelPath$t4.$target) === null || _dataFieldModelPath$t5 === void 0 ? void 0 : (_dataFieldModelPath$t6 = _dataFieldModelPath$t5.Value) === null || _dataFieldModelPath$t6 === void 0 ? void 0 : _dataFieldModelPath$t6.$target))) {
      return "Begin";
    }
    if (dataFieldModelPath.targetObject.$Type !== "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
      annotations = dataFieldModelPath.targetObject.Value.$target.annotations.UI;
      sType = FieldHelper.getDataTypeForVisualization(annotations, sType);
    }
    return FieldHelper.getPropertyAlignment(sType, formatOptions, computedEditMode);
  };

  /**
   * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.
   *
   * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.
   *
   * @param dataFieldModelPath The metapath referring to the annotation we are evaluating.
   * @param [formatOptions] FormatOptions optional.
   * @param formatOptions.isAnalytics This flag is set when using an analytical table.
   * @returns An expression that you can bind to the UI.
   */
  _exports.getTextAlignment = getTextAlignment;
  const getVisibleExpression = function (dataFieldModelPath, formatOptions) {
    var _targetObject$Target, _targetObject$Target$, _targetObject$annotat7, _targetObject$annotat8, _propertyValue$annota, _propertyValue$annota2;
    const targetObject = dataFieldModelPath.targetObject;
    let propertyValue;
    if (targetObject) {
      switch (targetObject.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        case "com.sap.vocabularies.UI.v1.DataPointType":
          propertyValue = targetObject.Value.$target;
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          // if it is a DataFieldForAnnotation pointing to a DataPoint we look at the dataPoint's value
          if ((targetObject === null || targetObject === void 0 ? void 0 : (_targetObject$Target = targetObject.Target) === null || _targetObject$Target === void 0 ? void 0 : (_targetObject$Target$ = _targetObject$Target.$target) === null || _targetObject$Target$ === void 0 ? void 0 : _targetObject$Target$.$Type) === "com.sap.vocabularies.UI.v1.DataPointType") {
            var _targetObject$Target$2;
            propertyValue = (_targetObject$Target$2 = targetObject.Target.$target) === null || _targetObject$Target$2 === void 0 ? void 0 : _targetObject$Target$2.Value.$target;
            break;
          }
        // eslint-disable-next-line no-fallthrough
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        default:
          propertyValue = undefined;
      }
    }
    const isAnalyticalGroupHeaderExpanded = formatOptions !== null && formatOptions !== void 0 && formatOptions.isAnalytics ? UI.IsExpanded : constant(false);
    const isAnalyticalLeaf = formatOptions !== null && formatOptions !== void 0 && formatOptions.isAnalytics ? equal(UI.NodeLevel, 0) : constant(false);

    // A data field is visible if:
    // - the UI.Hidden expression in the original annotation does not evaluate to 'true'
    // - the UI.Hidden expression in the target property does not evaluate to 'true'
    // - in case of Analytics it's not visible for an expanded GroupHeader
    return compileExpression(and(...[not(equal(getExpressionFromAnnotation(targetObject === null || targetObject === void 0 ? void 0 : (_targetObject$annotat7 = targetObject.annotations) === null || _targetObject$annotat7 === void 0 ? void 0 : (_targetObject$annotat8 = _targetObject$annotat7.UI) === null || _targetObject$annotat8 === void 0 ? void 0 : _targetObject$annotat8.Hidden), true)), ifElse(!!propertyValue, propertyValue && not(equal(getExpressionFromAnnotation((_propertyValue$annota = propertyValue.annotations) === null || _propertyValue$annota === void 0 ? void 0 : (_propertyValue$annota2 = _propertyValue$annota.UI) === null || _propertyValue$annota2 === void 0 ? void 0 : _propertyValue$annota2.Hidden), true)), true), or(not(isAnalyticalGroupHeaderExpanded), isAnalyticalLeaf)]));
  };
  _exports.getVisibleExpression = getVisibleExpression;
  const QVTextBinding = function (oPropertyDataModelObjectPath, oPropertyValueDataModelObjectPath, fieldFormatOptions) {
    let asObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let returnValue = getValueBinding(oPropertyDataModelObjectPath, fieldFormatOptions, asObject);
    if (returnValue === "") {
      returnValue = getTextBinding(oPropertyValueDataModelObjectPath, fieldFormatOptions, asObject);
    }
    return returnValue;
  };
  _exports.QVTextBinding = QVTextBinding;
  const getQuickViewType = function (oPropertyDataModelObjectPath) {
    var _targetObject$$target, _targetObject$$target2, _targetObject$$target3, _targetObject$$target4, _targetObject$$target5, _targetObject$$target6;
    const targetObject = oPropertyDataModelObjectPath.targetObject;
    if (targetObject !== null && targetObject !== void 0 && (_targetObject$$target = targetObject.$target) !== null && _targetObject$$target !== void 0 && (_targetObject$$target2 = _targetObject$$target.annotations) !== null && _targetObject$$target2 !== void 0 && (_targetObject$$target3 = _targetObject$$target2.Communication) !== null && _targetObject$$target3 !== void 0 && _targetObject$$target3.IsEmailAddress) {
      return "email";
    }
    if (targetObject !== null && targetObject !== void 0 && (_targetObject$$target4 = targetObject.$target) !== null && _targetObject$$target4 !== void 0 && (_targetObject$$target5 = _targetObject$$target4.annotations) !== null && _targetObject$$target5 !== void 0 && (_targetObject$$target6 = _targetObject$$target5.Communication) !== null && _targetObject$$target6 !== void 0 && _targetObject$$target6.IsPhoneNumber) {
      return "phone";
    }
    return "text";
  };
  _exports.getQuickViewType = getQuickViewType;
  /**
   * Get the customData key value pair of SemanticObjects.
   *
   * @param propertyAnnotations The value of the Common annotation.
   * @param [dynamicSemanticObjectsOnly] Flag for retrieving dynamic Semantic Objects only.
   * @returns The array of the semantic Objects.
   */
  const getSemanticObjectExpressionToResolve = function (propertyAnnotations, dynamicSemanticObjectsOnly) {
    const aSemObjExprToResolve = [];
    let sSemObjExpression;
    let annotation;
    if (propertyAnnotations) {
      const semanticObjectsKeys = Object.keys(propertyAnnotations).filter(function (element) {
        return element === "SemanticObject" || element.startsWith("SemanticObject#");
      });
      for (const semanticObject of semanticObjectsKeys) {
        annotation = propertyAnnotations[semanticObject];
        sSemObjExpression = compileExpression(getExpressionFromAnnotation(annotation));
        if (!dynamicSemanticObjectsOnly || dynamicSemanticObjectsOnly && isPathAnnotationExpression(annotation)) {
          aSemObjExprToResolve.push({
            key: getDynamicPathFromSemanticObject(sSemObjExpression) || sSemObjExpression,
            value: sSemObjExpression
          });
        }
      }
    }
    return aSemObjExprToResolve;
  };
  _exports.getSemanticObjectExpressionToResolve = getSemanticObjectExpressionToResolve;
  const getSemanticObjects = function (aSemObjExprToResolve) {
    if (aSemObjExprToResolve.length > 0) {
      let sCustomDataKey = "";
      let sCustomDataValue = "";
      const aSemObjCustomData = [];
      for (let iSemObjCount = 0; iSemObjCount < aSemObjExprToResolve.length; iSemObjCount++) {
        sCustomDataKey = aSemObjExprToResolve[iSemObjCount].key;
        sCustomDataValue = compileExpression(getExpressionFromAnnotation(aSemObjExprToResolve[iSemObjCount].value));
        aSemObjCustomData.push({
          key: sCustomDataKey,
          value: sCustomDataValue
        });
      }
      const oSemanticObjectsModel = new JSONModel(aSemObjCustomData);
      oSemanticObjectsModel.$$valueAsPromise = true;
      const oSemObjBindingContext = oSemanticObjectsModel.createBindingContext("/");
      return oSemObjBindingContext;
    } else {
      return new JSONModel([]).createBindingContext("/");
    }
  };

  /**
   * Method to get MultipleLines for a DataField.
   *
   * @name getMultipleLinesForDataField
   * @param {any} oThis The current object
   * @param {string} sPropertyType The property type
   * @param {boolean} isMultiLineText The property isMultiLineText
   * @returns {CompiledBindingToolkitExpression<string>} The binding expression to determine if a data field should be a MultiLineText or not
   * @public
   */
  _exports.getSemanticObjects = getSemanticObjects;
  const getMultipleLinesForDataField = function (oThis, sPropertyType, isMultiLineText) {
    if (oThis.wrap === false) {
      return false;
    }
    if (sPropertyType !== "Edm.String") {
      return isMultiLineText;
    }
    if (oThis.editMode === "Display") {
      return true;
    }
    if (oThis.editMode.indexOf("{") > -1) {
      // If the editMode is computed then we just care about the page editMode to determine if the multiline property should be taken into account
      return compileExpression(or(not(UI.IsEditable), isMultiLineText));
    }
    return isMultiLineText;
  };
  _exports.getMultipleLinesForDataField = getMultipleLinesForDataField;
  const _hasValueHelpToShow = function (oProperty, measureDisplayMode) {
    // we show a value help if teh property has one or if its visible unit has one
    const oPropertyUnit = PropertyHelper.getAssociatedUnitProperty(oProperty);
    const oPropertyCurrency = PropertyHelper.getAssociatedCurrencyProperty(oProperty);
    return PropertyHelper.hasValueHelp(oProperty) && oProperty.type !== "Edm.Boolean" || measureDisplayMode !== "Hidden" && (oPropertyUnit && PropertyHelper.hasValueHelp(oPropertyUnit) || oPropertyCurrency && PropertyHelper.hasValueHelp(oPropertyCurrency));
  };

  /**
   * Sets Edit Style properties for Field in case of Macro Field and MassEditDialog fields.
   *
   * @param oProps Field Properties for the Macro Field.
   * @param oDataField DataField Object.
   * @param oDataModelPath DataModel Object Path to the property.
   * @param onlyEditStyle To add only editStyle.
   */
  const setEditStyleProperties = function (oProps, oDataField, oDataModelPath, onlyEditStyle) {
    var _oDataField$Target, _oProps$formatOptions, _oProperty$annotation4, _oProperty$annotation5, _oProperty$annotation6, _oProperty$annotation7, _oProperty$annotation8, _oProps$formatOptions3, _oProperty$annotation9, _oProperty$annotation10, _oProperty$annotation11, _oProperty$annotation12;
    const oProperty = oDataModelPath.targetObject;
    if (!isProperty(oProperty) || ["com.sap.vocabularies.UI.v1.DataFieldForAction", "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath", "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"].includes(oDataField.$Type)) {
      oProps.editStyle = null;
      return;
    }
    if (!onlyEditStyle) {
      var _oDataField$annotatio, _oDataField$annotatio2, _oDataField$Value, _oDataField$Value$$ta, _oDataField$Value$$ta2, _oDataField$Value$$ta3;
      oProps.valueBindingExpression = getValueBinding(oDataModelPath, oProps.formatOptions);
      const editStylePlaceholder = ((_oDataField$annotatio = oDataField.annotations) === null || _oDataField$annotatio === void 0 ? void 0 : (_oDataField$annotatio2 = _oDataField$annotatio.UI) === null || _oDataField$annotatio2 === void 0 ? void 0 : _oDataField$annotatio2.Placeholder) || ((_oDataField$Value = oDataField.Value) === null || _oDataField$Value === void 0 ? void 0 : (_oDataField$Value$$ta = _oDataField$Value.$target) === null || _oDataField$Value$$ta === void 0 ? void 0 : (_oDataField$Value$$ta2 = _oDataField$Value$$ta.annotations) === null || _oDataField$Value$$ta2 === void 0 ? void 0 : (_oDataField$Value$$ta3 = _oDataField$Value$$ta2.UI) === null || _oDataField$Value$$ta3 === void 0 ? void 0 : _oDataField$Value$$ta3.Placeholder);
      if (editStylePlaceholder) {
        oProps.editStylePlaceholder = compileExpression(getExpressionFromAnnotation(editStylePlaceholder));
      }
    }

    // Setup RatingIndicator
    const dataPointAnnotation = isDataFieldForAnnotation(oDataField) ? (_oDataField$Target = oDataField.Target) === null || _oDataField$Target === void 0 ? void 0 : _oDataField$Target.$target : oDataField;
    if ((dataPointAnnotation === null || dataPointAnnotation === void 0 ? void 0 : dataPointAnnotation.Visualization) === "UI.VisualizationType/Rating") {
      var _dataPointAnnotation$, _dataPointAnnotation$2;
      oProps.editStyle = "RatingIndicator";
      if ((_dataPointAnnotation$ = dataPointAnnotation.annotations) !== null && _dataPointAnnotation$ !== void 0 && (_dataPointAnnotation$2 = _dataPointAnnotation$.Common) !== null && _dataPointAnnotation$2 !== void 0 && _dataPointAnnotation$2.QuickInfo) {
        var _dataPointAnnotation$3, _dataPointAnnotation$4;
        oProps.ratingIndicatorTooltip = compileExpression(getExpressionFromAnnotation((_dataPointAnnotation$3 = dataPointAnnotation.annotations) === null || _dataPointAnnotation$3 === void 0 ? void 0 : (_dataPointAnnotation$4 = _dataPointAnnotation$3.Common) === null || _dataPointAnnotation$4 === void 0 ? void 0 : _dataPointAnnotation$4.QuickInfo));
      }
      oProps.ratingIndicatorTargetValue = compileExpression(getExpressionFromAnnotation(dataPointAnnotation.TargetValue));
      return;
    }
    if (_hasValueHelpToShow(oProperty, (_oProps$formatOptions = oProps.formatOptions) === null || _oProps$formatOptions === void 0 ? void 0 : _oProps$formatOptions.measureDisplayMode)) {
      if (!onlyEditStyle) {
        var _oProps$formatOptions2;
        oProps.textBindingExpression = getAssociatedTextBinding(oDataModelPath, oProps.formatOptions);
        if (((_oProps$formatOptions2 = oProps.formatOptions) === null || _oProps$formatOptions2 === void 0 ? void 0 : _oProps$formatOptions2.measureDisplayMode) !== "Hidden") {
          // for the MDC Field we need to keep the unit inside the valueBindingExpression
          oProps.valueBindingExpression = getValueBinding(oDataModelPath, oProps.formatOptions, false, false, undefined, false, true);
        }
      }
      oProps.editStyle = "InputWithValueHelp";
      return;
    }
    switch (oProperty.type) {
      case "Edm.Date":
        oProps.editStyle = "DatePicker";
        return;
      case "Edm.Time":
      case "Edm.TimeOfDay":
        oProps.editStyle = "TimePicker";
        return;
      case "Edm.DateTime":
      case "Edm.DateTimeOffset":
        oProps.editStyle = "DateTimePicker";
        // No timezone defined. Also for compatibility reasons.
        if (!((_oProperty$annotation4 = oProperty.annotations) !== null && _oProperty$annotation4 !== void 0 && (_oProperty$annotation5 = _oProperty$annotation4.Common) !== null && _oProperty$annotation5 !== void 0 && _oProperty$annotation5.Timezone)) {
          oProps.showTimezone = undefined;
        } else {
          oProps.showTimezone = true;
        }
        return;
      case "Edm.Boolean":
        oProps.editStyle = "CheckBox";
        return;
      case "Edm.Stream":
        oProps.editStyle = "File";
        return;
      case "Edm.String":
        if ((_oProperty$annotation6 = oProperty.annotations) !== null && _oProperty$annotation6 !== void 0 && (_oProperty$annotation7 = _oProperty$annotation6.UI) !== null && _oProperty$annotation7 !== void 0 && (_oProperty$annotation8 = _oProperty$annotation7.MultiLineText) !== null && _oProperty$annotation8 !== void 0 && _oProperty$annotation8.valueOf()) {
          oProps.editStyle = "TextArea";
          return;
        }
        break;
      default:
        oProps.editStyle = "Input";
    }
    if (((_oProps$formatOptions3 = oProps.formatOptions) === null || _oProps$formatOptions3 === void 0 ? void 0 : _oProps$formatOptions3.measureDisplayMode) !== "Hidden" && ((_oProperty$annotation9 = oProperty.annotations) !== null && _oProperty$annotation9 !== void 0 && (_oProperty$annotation10 = _oProperty$annotation9.Measures) !== null && _oProperty$annotation10 !== void 0 && _oProperty$annotation10.ISOCurrency || (_oProperty$annotation11 = oProperty.annotations) !== null && _oProperty$annotation11 !== void 0 && (_oProperty$annotation12 = _oProperty$annotation11.Measures) !== null && _oProperty$annotation12 !== void 0 && _oProperty$annotation12.Unit)) {
      if (!onlyEditStyle) {
        oProps.unitBindingExpression = compileExpression(UIFormatters.getBindingForUnitOrCurrency(oDataModelPath));
        oProps.descriptionBindingExpression = UIFormatters.ifUnitEditable(oProperty, "", UIFormatters.getBindingForUnitOrCurrency(oDataModelPath));
        const unitProperty = PropertyHelper.getAssociatedCurrencyProperty(oProperty) || PropertyHelper.getAssociatedUnitProperty(oProperty);
        oProps.staticUnit = unitProperty ? undefined : getStaticUnitWithLocale(oProperty);
        oProps.unitEditable = oProps.formatOptions.measureDisplayMode === "ReadOnly" ? "false" : compileExpression(not(isReadOnlyExpression(unitProperty)));
        oProps.valueInputWidth = ifUnitEditable(oProperty, "70%", "100%");
        oProps.valueInputFieldWidth = ifUnitEditable(oProperty, "100%", "70%");
        oProps.unitInputVisible = ifUnitEditable(oProperty, true, false);
      }
      oProps.editStyle = "InputWithUnit";
      return;
    }
    oProps.editStyle = "Input";
  };

  /**
   * Returns the unit or currency  value using the locale if the annotation value is a unit key.
   *
   * @param property Property with a static unit or currency
   * @returns The value for the unit/currency
   */
  _exports.setEditStyleProperties = setEditStyleProperties;
  const getStaticUnitWithLocale = property => {
    var _property$annotations, _property$annotations2, _property$annotations3, _property$annotations4, _property$annotations5, _property$annotations6, _unitFormat$oLocaleDa, _localeData$units;
    let unit = ((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Measures) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.Unit) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.valueOf()) || (property === null || property === void 0 ? void 0 : (_property$annotations4 = property.annotations) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.Measures) === null || _property$annotations5 === void 0 ? void 0 : (_property$annotations6 = _property$annotations5.ISOCurrency) === null || _property$annotations6 === void 0 ? void 0 : _property$annotations6.valueOf());
    // this is a hack of UI5 locale data to retrieve the localized text for the unit key where we access UI5 private structure
    const unitFormat = NumberFormat.getUnitInstance();
    const localeData = unitFormat === null || unitFormat === void 0 ? void 0 : (_unitFormat$oLocaleDa = unitFormat.oLocaleData) === null || _unitFormat$oLocaleDa === void 0 ? void 0 : _unitFormat$oLocaleDa.mData;
    if (localeData !== null && localeData !== void 0 && (_localeData$units = localeData.units) !== null && _localeData$units !== void 0 && _localeData$units.short && localeData.units.short[unit] && localeData.units.short[unit].displayName) {
      unit = localeData.units.short[unit].displayName;
    }
    return unit;
  };
  _exports.getStaticUnitWithLocale = getStaticUnitWithLocale;
  const hasSemanticObjectInNavigationOrProperty = propertyDataModelObjectPath => {
    var _propertyDataModelObj, _propertyDataModelObj2, _propertyDataModelObj3, _propertyDataModelObj4;
    const property = propertyDataModelObjectPath.targetObject;
    if (SemanticObjectHelper.hasSemanticObject(property)) {
      return true;
    }
    const lastNavProp = propertyDataModelObjectPath !== null && propertyDataModelObjectPath !== void 0 && (_propertyDataModelObj = propertyDataModelObjectPath.navigationProperties) !== null && _propertyDataModelObj !== void 0 && _propertyDataModelObj.length ? propertyDataModelObjectPath === null || propertyDataModelObjectPath === void 0 ? void 0 : propertyDataModelObjectPath.navigationProperties[(propertyDataModelObjectPath === null || propertyDataModelObjectPath === void 0 ? void 0 : (_propertyDataModelObj2 = propertyDataModelObjectPath.navigationProperties) === null || _propertyDataModelObj2 === void 0 ? void 0 : _propertyDataModelObj2.length) - 1] : null;
    if (!lastNavProp || (_propertyDataModelObj3 = propertyDataModelObjectPath.contextLocation) !== null && _propertyDataModelObj3 !== void 0 && (_propertyDataModelObj4 = _propertyDataModelObj3.navigationProperties) !== null && _propertyDataModelObj4 !== void 0 && _propertyDataModelObj4.find(contextNavProp => contextNavProp.name === lastNavProp.name)) {
      return false;
    }
    return SemanticObjectHelper.hasSemanticObject(lastNavProp);
  };

  /**
   * Get the dataModelObjectPath with the value property as targetObject if it exists
   * for a dataModelObjectPath targeting a DataField or a DataPoint annotation.
   *
   * @param initialDataModelObjectPath
   * @returns The dataModelObjectPath targetiing the value property or undefined
   */
  _exports.hasSemanticObjectInNavigationOrProperty = hasSemanticObjectInNavigationOrProperty;
  const getDataModelObjectPathForValue = initialDataModelObjectPath => {
    if (!initialDataModelObjectPath.targetObject) {
      return undefined;
    }
    let valuePath = "";
    // data point annotations need not have $Type defined, so add it if missing
    if (initialDataModelObjectPath.targetObject.term === "com.sap.vocabularies.UI.v1.DataPoint") {
      initialDataModelObjectPath.targetObject.$Type = initialDataModelObjectPath.targetObject.$Type || "com.sap.vocabularies.UI.v1.DataPointType";
    }
    switch (initialDataModelObjectPath.targetObject.$Type) {
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataPointType":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        if (typeof initialDataModelObjectPath.targetObject.Value === "object") {
          valuePath = initialDataModelObjectPath.targetObject.Value.path;
        }
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        if (initialDataModelObjectPath.targetObject.Target.$target) {
          if (initialDataModelObjectPath.targetObject.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataField" || initialDataModelObjectPath.targetObject.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataPointType") {
            if (initialDataModelObjectPath.targetObject.Target.value.indexOf("/") > 0) {
              var _initialDataModelObje;
              valuePath = initialDataModelObjectPath.targetObject.Target.value.replace(/\/@.*/, `/${(_initialDataModelObje = initialDataModelObjectPath.targetObject.Target.$target.Value) === null || _initialDataModelObje === void 0 ? void 0 : _initialDataModelObje.path}`);
            } else {
              var _initialDataModelObje2;
              valuePath = (_initialDataModelObje2 = initialDataModelObjectPath.targetObject.Target.$target.Value) === null || _initialDataModelObje2 === void 0 ? void 0 : _initialDataModelObje2.path;
            }
          } else {
            var _initialDataModelObje3;
            valuePath = (_initialDataModelObje3 = initialDataModelObjectPath.targetObject.Target) === null || _initialDataModelObje3 === void 0 ? void 0 : _initialDataModelObje3.path;
          }
        }
        break;
    }
    if (valuePath && valuePath.length > 0) {
      return enhanceDataModelPath(initialDataModelObjectPath, valuePath);
    } else {
      return undefined;
    }
  };

  /**
   * Get the property or the navigation property in  its relative path that holds semanticObject annotation if it exists.
   *
   * @param dataModelObjectPath
   * @returns A property or a NavProperty or undefined
   */
  _exports.getDataModelObjectPathForValue = getDataModelObjectPathForValue;
  const getPropertyWithSemanticObject = dataModelObjectPath => {
    let propertyWithSemanticObject;
    if (hasSemanticObject(dataModelObjectPath.targetObject)) {
      propertyWithSemanticObject = dataModelObjectPath.targetObject;
    } else if (dataModelObjectPath.navigationProperties.length > 0) {
      // there are no semantic objects on the property itself so we look for some on nav properties
      for (const navProperty of dataModelObjectPath.navigationProperties) {
        var _dataModelObjectPath$;
        if (!((_dataModelObjectPath$ = dataModelObjectPath.contextLocation) !== null && _dataModelObjectPath$ !== void 0 && _dataModelObjectPath$.navigationProperties.find(contextNavProp => contextNavProp.fullyQualifiedName === navProperty.fullyQualifiedName)) && !propertyWithSemanticObject && hasSemanticObject(navProperty)) {
          propertyWithSemanticObject = navProperty;
        }
      }
    }
    return propertyWithSemanticObject;
  };

  /**
   * Check if the considered property is a non-insertable property
   * A first check is done on the last navigation from the contextLocation:
   * 	- If the annotation 'nonInsertableProperty' is found and the property is listed, then the property is non-insertable,
   *  - Else the same check is done on the target entity.
   *
   * @param PropertyDataModelObjectPath
   * @returns True if the property is not insertable
   */
  _exports.getPropertyWithSemanticObject = getPropertyWithSemanticObject;
  const hasPropertyInsertRestrictions = PropertyDataModelObjectPath => {
    var _PropertyDataModelObj, _PropertyDataModelObj2;
    const lastNavProp = (_PropertyDataModelObj = PropertyDataModelObjectPath.contextLocation) === null || _PropertyDataModelObj === void 0 ? void 0 : (_PropertyDataModelObj2 = _PropertyDataModelObj.navigationProperties) === null || _PropertyDataModelObj2 === void 0 ? void 0 : _PropertyDataModelObj2.slice(-1)[0];
    const isAnnotatedWithNonInsertableProperties = function (object) {
      var _object$annotations, _object$annotations$C, _object$annotations$C2;
      return !!(object !== null && object !== void 0 && (_object$annotations = object.annotations) !== null && _object$annotations !== void 0 && (_object$annotations$C = _object$annotations.Capabilities) !== null && _object$annotations$C !== void 0 && (_object$annotations$C2 = _object$annotations$C.InsertRestrictions) !== null && _object$annotations$C2 !== void 0 && _object$annotations$C2.NonInsertableProperties);
    };
    const isListedInNonInsertableProperties = function (object) {
      var _object$annotations2, _object$annotations2$, _object$annotations2$2, _object$annotations2$3;
      return !!(object !== null && object !== void 0 && (_object$annotations2 = object.annotations) !== null && _object$annotations2 !== void 0 && (_object$annotations2$ = _object$annotations2.Capabilities) !== null && _object$annotations2$ !== void 0 && (_object$annotations2$2 = _object$annotations2$.InsertRestrictions) !== null && _object$annotations2$2 !== void 0 && (_object$annotations2$3 = _object$annotations2$2.NonInsertableProperties) !== null && _object$annotations2$3 !== void 0 && _object$annotations2$3.some(nonInsertableProperty => {
        var _nonInsertablePropert, _PropertyDataModelObj3;
        return (nonInsertableProperty === null || nonInsertableProperty === void 0 ? void 0 : (_nonInsertablePropert = nonInsertableProperty.$target) === null || _nonInsertablePropert === void 0 ? void 0 : _nonInsertablePropert.name) === ((_PropertyDataModelObj3 = PropertyDataModelObjectPath.targetObject) === null || _PropertyDataModelObj3 === void 0 ? void 0 : _PropertyDataModelObj3.name);
      }));
    };
    if (lastNavProp && isAnnotatedWithNonInsertableProperties(lastNavProp)) {
      return isListedInNonInsertableProperties(lastNavProp);
    } else {
      return !!PropertyDataModelObjectPath.targetEntitySet && isListedInNonInsertableProperties(PropertyDataModelObjectPath.targetEntitySet);
    }
  };

  /**
   * Get the binding for the draft indicator visibility.
   *
   * @param draftIndicatorKey
   * @returns  The visibility binding expression.
   */
  _exports.hasPropertyInsertRestrictions = hasPropertyInsertRestrictions;
  const getDraftIndicatorVisibleBinding = draftIndicatorKey => {
    return draftIndicatorKey ? compileExpression(formatResult([constant(draftIndicatorKey), pathInModel("semanticKeyHasDraftIndicator", "internal"), pathInModel("HasDraftEntity"), pathInModel("IsActiveEntity"), pathInModel("hideDraftInfo", "pageInternal")], "sap.fe.macros.field.FieldRuntime.isDraftIndicatorVisible")) : "false";
  };
  _exports.getDraftIndicatorVisibleBinding = getDraftIndicatorVisibleBinding;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/FieldTemplating", ["sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/CommonFormatters","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/FieldControlHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/SemanticObjectHelper","sap/fe/core/templating/UIFormatters","sap/ui/core/format/NumberFormat","sap/ui/model/json/JSONModel","./FieldHelper"],function(e,t,i,n,a,o,r,l,s,d,u,v,c){"use strict";var g={};var p=d.ifUnitEditable;var f=s.hasSemanticObject;var m=s.getDynamicPathFromSemanticObject;var y=r.isReadOnlyExpression;var b=o.getContextRelativeTargetObjectPath;var h=o.enhanceDataModelPath;var O=n.isProperty;var I=n.isPathAnnotationExpression;var T=n.isNavigationProperty;var j=i.transformRecursively;var U=i.pathInModel;var D=i.or;var F=i.not;var P=i.isPathInModelExpression;var E=i.isComplexTypeExpression;var $=i.ifElse;var x=i.getExpressionFromAnnotation;var S=i.formatWithTypeInformation;var V=i.formatResult;var B=i.equal;var C=i.constant;var A=i.compileExpression;var W=i.and;var M=t.UI;var N=e.isDataFieldForAnnotation;const k=function(e,t){return j(e,"PathInModel",e=>{let i=e;if(e.modelName===undefined){const n=h(t,e.path);i=a.getBindingWithTextArrangement(n,e)}return i})};g.addTextArrangementToBindingExpression=k;const H=function(e,t){return j(e,"PathInModel",e=>{let i=e;if(e.modelName===undefined){const n=h(t,e.path);i=S(n.targetObject,e)}return i})};g.formatValueRecursively=H;const w=function(e,t){return R(e,t,true)};g.getTextBindingExpression=w;const R=function(e,t){var i,n,o,r,l,s,u,v,c,g,p,f,m,y,O;let T=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(((i=e.targetObject)===null||i===void 0?void 0:i.$Type)==="com.sap.vocabularies.UI.v1.DataField"||((n=e.targetObject)===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"||((o=e.targetObject)===null||o===void 0?void 0:o.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath"||((r=e.targetObject)===null||r===void 0?void 0:r.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"||((l=e.targetObject)===null||l===void 0?void 0:l.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation"||((s=e.targetObject)===null||s===void 0?void 0:s.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithAction"){const t=x(e.targetObject.Value)??"";return A(t)}if(I(e.targetObject)&&e.targetObject.$target){e=h(e,e.targetObject.path)}const j=U(b(e));let D;if((u=e.targetObject)!==null&&u!==void 0&&(v=u.annotations)!==null&&v!==void 0&&(c=v.Measures)!==null&&c!==void 0&&c.Unit||(g=e.targetObject)!==null&&g!==void 0&&(p=g.annotations)!==null&&p!==void 0&&(f=p.Measures)!==null&&f!==void 0&&f.ISOCurrency){D=d.getBindingWithUnitOrCurrency(e,j);if((t===null||t===void 0?void 0:t.measureDisplayMode)==="Hidden"&&E(D)){D.formatOptions={...D.formatOptions,showMeasure:false}}}else if((m=e.targetObject)!==null&&m!==void 0&&(y=m.annotations)!==null&&y!==void 0&&(O=y.Common)!==null&&O!==void 0&&O.Timezone){D=d.getBindingWithTimezone(e,j,false,true,t.dateFormatOptions)}else{D=a.getBindingWithTextArrangement(e,j,t)}if(T){return D}return A(D)};g.getTextBinding=R;const z=function(e,t){let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let n=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let a=arguments.length>4?arguments[4]:undefined;let o=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let r=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;if(I(e.targetObject)&&e.targetObject.$target){const t=e.targetEntityType.resolvePath(e.targetObject.path,true);e.targetObject=t.target;t.visitedObjects.forEach(t=>{if(T(t)){e.navigationProperties.push(t)}})}const l=e.targetObject;if(O(l)){let t=U(b(e));if(P(t)){var s,u,v,c,g,p;if((s=l.annotations)!==null&&s!==void 0&&(u=s.Communication)!==null&&u!==void 0&&u.IsEmailAddress){t.type="sap.fe.core.type.Email"}else if(!i&&((v=l.annotations)!==null&&v!==void 0&&(c=v.Measures)!==null&&c!==void 0&&c.ISOCurrency||(g=l.annotations)!==null&&g!==void 0&&(p=g.Measures)!==null&&p!==void 0&&p.Unit)){t=d.getBindingWithUnitOrCurrency(e,t,true,r?undefined:{showMeasure:false})}else{var f,m;const i=(f=e.targetObject.annotations)===null||f===void 0?void 0:(m=f.Common)===null||m===void 0?void 0:m.Timezone;if(i){t=d.getBindingWithTimezone(e,t,true)}else{t=S(l,t)}if(P(t)&&t.type==="sap.ui.model.odata.type.String"){t.formatOptions={parseKeepsEmptyString:true}}}if(P(t)){if(n){delete t.formatOptions;delete t.constraints;delete t.type}if(a){t.parameters=a}if(o){t.targetType="any"}}return A(t)}else{return""}}else if((l===null||l===void 0?void 0:l.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"||(l===null||l===void 0?void 0:l.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath"){return A(x(l.Value))}else{return""}};g.getValueBinding=z;const L=function(e,t){const i=l.getAssociatedTextPropertyPath(e.targetObject);if(i){const n=h(e,i);return z(n,t,true,true,{$$noPatch:true})}return undefined};g.getAssociatedTextBinding=L;const Q=function(e,t){var i,n,a,o,r;const l=(e===null||e===void 0?void 0:(i=e.targetEntityType)===null||i===void 0?void 0:i.navigationProperties)||[];const s=(e===null||e===void 0?void 0:(n=e.targetEntityType)===null||n===void 0?void 0:(a=n.annotations)===null||a===void 0?void 0:(o=a.Common)===null||o===void 0?void 0:o.SemanticKey)||[];let d=false;l.forEach(e=>{if(e.referentialConstraint&&e.referentialConstraint.length){e.referentialConstraint.forEach(i=>{if((i===null||i===void 0?void 0:i.sourceProperty)===t.name){var n,a,o;if(e!==null&&e!==void 0&&(n=e.targetType)!==null&&n!==void 0&&(a=n.annotations)!==null&&a!==void 0&&(o=a.UI)!==null&&o!==void 0&&o.QuickViewFacets){d=true}}})}});if(((r=e.contextLocation)===null||r===void 0?void 0:r.targetEntitySet)!==e.targetEntitySet){var u,v,c;const i=s.some(function(e){var i;return(e===null||e===void 0?void 0:(i=e.$target)===null||i===void 0?void 0:i.name)===t.name});if((i||t.isKey)&&e!==null&&e!==void 0&&(u=e.targetEntityType)!==null&&u!==void 0&&(v=u.annotations)!==null&&v!==void 0&&(c=v.UI)!==null&&c!==void 0&&c.QuickViewFacets){d=true}}return d};g.isUsedInNavigationWithQuickViewFacets=Q;const K=function(e,t){var i,n,a;const o=I(e)&&e.$target||e;if(!((i=o.annotations)!==null&&i!==void 0&&(n=i.Common)!==null&&n!==void 0&&n.Text)&&!((a=o.annotations)!==null&&a!==void 0&&a.Measures)&&l.hasValueHelp(o)&&t.textAlignMode==="Form"){return true}return false};g.isRetrieveTextFromValueListEnabled=K;const q=function(e,t,i){var n,a,o,r,s,d;let u=((n=e.targetObject.Value)===null||n===void 0?void 0:n.$target.type)||((a=e.targetObject.Target)===null||a===void 0?void 0:a.$target.Value.$target.type);let v;if(l.isKey(((o=e.targetObject.Value)===null||o===void 0?void 0:o.$target)||((r=e.targetObject.Target)===null||r===void 0?void 0:(s=r.$target)===null||s===void 0?void 0:(d=s.Value)===null||d===void 0?void 0:d.$target))){return"Begin"}if(e.targetObject.$Type!=="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){v=e.targetObject.Value.$target.annotations.UI;u=c.getDataTypeForVisualization(v,u)}return c.getPropertyAlignment(u,t,i)};g.getTextAlignment=q;const G=function(e,t){var i,n,a,o,r,l;const s=e.targetObject;let d;if(s){switch(s.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":case"com.sap.vocabularies.UI.v1.DataPointType":d=s.Value.$target;break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if((s===null||s===void 0?void 0:(i=s.Target)===null||i===void 0?void 0:(n=i.$target)===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"){var u;d=(u=s.Target.$target)===null||u===void 0?void 0:u.Value.$target;break}case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldForAction":default:d=undefined}}const v=t!==null&&t!==void 0&&t.isAnalytics?M.IsExpanded:C(false);const c=t!==null&&t!==void 0&&t.isAnalytics?B(M.NodeLevel,0):C(false);return A(W(...[F(B(x(s===null||s===void 0?void 0:(a=s.annotations)===null||a===void 0?void 0:(o=a.UI)===null||o===void 0?void 0:o.Hidden),true)),$(!!d,d&&F(B(x((r=d.annotations)===null||r===void 0?void 0:(l=r.UI)===null||l===void 0?void 0:l.Hidden),true)),true),D(F(v),c)]))};g.getVisibleExpression=G;const J=function(e,t,i){let n=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let a=z(e,i,n);if(a===""){a=R(t,i,n)}return a};g.QVTextBinding=J;const X=function(e){var t,i,n,a,o,r;const l=e.targetObject;if(l!==null&&l!==void 0&&(t=l.$target)!==null&&t!==void 0&&(i=t.annotations)!==null&&i!==void 0&&(n=i.Communication)!==null&&n!==void 0&&n.IsEmailAddress){return"email"}if(l!==null&&l!==void 0&&(a=l.$target)!==null&&a!==void 0&&(o=a.annotations)!==null&&o!==void 0&&(r=o.Communication)!==null&&r!==void 0&&r.IsPhoneNumber){return"phone"}return"text"};g.getQuickViewType=X;const Y=function(e,t){const i=[];let n;let a;if(e){const o=Object.keys(e).filter(function(e){return e==="SemanticObject"||e.startsWith("SemanticObject#")});for(const r of o){a=e[r];n=A(x(a));if(!t||t&&I(a)){i.push({key:m(n)||n,value:n})}}}return i};g.getSemanticObjectExpressionToResolve=Y;const Z=function(e){if(e.length>0){let t="";let i="";const n=[];for(let a=0;a<e.length;a++){t=e[a].key;i=A(x(e[a].value));n.push({key:t,value:i})}const a=new v(n);a.$$valueAsPromise=true;const o=a.createBindingContext("/");return o}else{return new v([]).createBindingContext("/")}};g.getSemanticObjects=Z;const _=function(e,t,i){if(e.wrap===false){return false}if(t!=="Edm.String"){return i}if(e.editMode==="Display"){return true}if(e.editMode.indexOf("{")>-1){return A(D(F(M.IsEditable),i))}return i};g.getMultipleLinesForDataField=_;const ee=function(e,t){const i=l.getAssociatedUnitProperty(e);const n=l.getAssociatedCurrencyProperty(e);return l.hasValueHelp(e)&&e.type!=="Edm.Boolean"||t!=="Hidden"&&(i&&l.hasValueHelp(i)||n&&l.hasValueHelp(n))};const te=function(e,t,i,n){var a,o,r,s,u,v,c,g,f,m,b,h;const I=i.targetObject;if(!O(I)||["com.sap.vocabularies.UI.v1.DataFieldForAction","com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath","com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"].includes(t.$Type)){e.editStyle=null;return}if(!n){var T,j,U,D,P,E;e.valueBindingExpression=z(i,e.formatOptions);const n=((T=t.annotations)===null||T===void 0?void 0:(j=T.UI)===null||j===void 0?void 0:j.Placeholder)||((U=t.Value)===null||U===void 0?void 0:(D=U.$target)===null||D===void 0?void 0:(P=D.annotations)===null||P===void 0?void 0:(E=P.UI)===null||E===void 0?void 0:E.Placeholder);if(n){e.editStylePlaceholder=A(x(n))}}const $=N(t)?(a=t.Target)===null||a===void 0?void 0:a.$target:t;if(($===null||$===void 0?void 0:$.Visualization)==="UI.VisualizationType/Rating"){var S,V;e.editStyle="RatingIndicator";if((S=$.annotations)!==null&&S!==void 0&&(V=S.Common)!==null&&V!==void 0&&V.QuickInfo){var B,C;e.ratingIndicatorTooltip=A(x((B=$.annotations)===null||B===void 0?void 0:(C=B.Common)===null||C===void 0?void 0:C.QuickInfo))}e.ratingIndicatorTargetValue=A(x($.TargetValue));return}if(ee(I,(o=e.formatOptions)===null||o===void 0?void 0:o.measureDisplayMode)){if(!n){var W;e.textBindingExpression=L(i,e.formatOptions);if(((W=e.formatOptions)===null||W===void 0?void 0:W.measureDisplayMode)!=="Hidden"){e.valueBindingExpression=z(i,e.formatOptions,false,false,undefined,false,true)}}e.editStyle="InputWithValueHelp";return}switch(I.type){case"Edm.Date":e.editStyle="DatePicker";return;case"Edm.Time":case"Edm.TimeOfDay":e.editStyle="TimePicker";return;case"Edm.DateTime":case"Edm.DateTimeOffset":e.editStyle="DateTimePicker";if(!((r=I.annotations)!==null&&r!==void 0&&(s=r.Common)!==null&&s!==void 0&&s.Timezone)){e.showTimezone=undefined}else{e.showTimezone=true}return;case"Edm.Boolean":e.editStyle="CheckBox";return;case"Edm.Stream":e.editStyle="File";return;case"Edm.String":if((u=I.annotations)!==null&&u!==void 0&&(v=u.UI)!==null&&v!==void 0&&(c=v.MultiLineText)!==null&&c!==void 0&&c.valueOf()){e.editStyle="TextArea";return}break;default:e.editStyle="Input"}if(((g=e.formatOptions)===null||g===void 0?void 0:g.measureDisplayMode)!=="Hidden"&&((f=I.annotations)!==null&&f!==void 0&&(m=f.Measures)!==null&&m!==void 0&&m.ISOCurrency||(b=I.annotations)!==null&&b!==void 0&&(h=b.Measures)!==null&&h!==void 0&&h.Unit)){if(!n){e.unitBindingExpression=A(d.getBindingForUnitOrCurrency(i));e.descriptionBindingExpression=d.ifUnitEditable(I,"",d.getBindingForUnitOrCurrency(i));const t=l.getAssociatedCurrencyProperty(I)||l.getAssociatedUnitProperty(I);e.staticUnit=t?undefined:ie(I);e.unitEditable=e.formatOptions.measureDisplayMode==="ReadOnly"?"false":A(F(y(t)));e.valueInputWidth=p(I,"70%","100%");e.valueInputFieldWidth=p(I,"100%","70%");e.unitInputVisible=p(I,true,false)}e.editStyle="InputWithUnit";return}e.editStyle="Input"};g.setEditStyleProperties=te;const ie=e=>{var t,i,n,a,o,r,l,s;let d=((t=e.annotations)===null||t===void 0?void 0:(i=t.Measures)===null||i===void 0?void 0:(n=i.Unit)===null||n===void 0?void 0:n.valueOf())||(e===null||e===void 0?void 0:(a=e.annotations)===null||a===void 0?void 0:(o=a.Measures)===null||o===void 0?void 0:(r=o.ISOCurrency)===null||r===void 0?void 0:r.valueOf());const v=u.getUnitInstance();const c=v===null||v===void 0?void 0:(l=v.oLocaleData)===null||l===void 0?void 0:l.mData;if(c!==null&&c!==void 0&&(s=c.units)!==null&&s!==void 0&&s.short&&c.units.short[d]&&c.units.short[d].displayName){d=c.units.short[d].displayName}return d};g.getStaticUnitWithLocale=ie;const ne=e=>{var t,i,n,a;const o=e.targetObject;if(s.hasSemanticObject(o)){return true}const r=e!==null&&e!==void 0&&(t=e.navigationProperties)!==null&&t!==void 0&&t.length?e===null||e===void 0?void 0:e.navigationProperties[(e===null||e===void 0?void 0:(i=e.navigationProperties)===null||i===void 0?void 0:i.length)-1]:null;if(!r||(n=e.contextLocation)!==null&&n!==void 0&&(a=n.navigationProperties)!==null&&a!==void 0&&a.find(e=>e.name===r.name)){return false}return s.hasSemanticObject(r)};g.hasSemanticObjectInNavigationOrProperty=ne;const ae=e=>{if(!e.targetObject){return undefined}let t="";if(e.targetObject.term==="com.sap.vocabularies.UI.v1.DataPoint"){e.targetObject.$Type=e.targetObject.$Type||"com.sap.vocabularies.UI.v1.DataPointType"}switch(e.targetObject.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataPointType":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":if(typeof e.targetObject.Value==="object"){t=e.targetObject.Value.path}break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if(e.targetObject.Target.$target){if(e.targetObject.Target.$target.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.targetObject.Target.$target.$Type==="com.sap.vocabularies.UI.v1.DataPointType"){if(e.targetObject.Target.value.indexOf("/")>0){var i;t=e.targetObject.Target.value.replace(/\/@.*/,`/${(i=e.targetObject.Target.$target.Value)===null||i===void 0?void 0:i.path}`)}else{var n;t=(n=e.targetObject.Target.$target.Value)===null||n===void 0?void 0:n.path}}else{var a;t=(a=e.targetObject.Target)===null||a===void 0?void 0:a.path}}break}if(t&&t.length>0){return h(e,t)}else{return undefined}};g.getDataModelObjectPathForValue=ae;const oe=e=>{let t;if(f(e.targetObject)){t=e.targetObject}else if(e.navigationProperties.length>0){for(const n of e.navigationProperties){var i;if(!((i=e.contextLocation)!==null&&i!==void 0&&i.navigationProperties.find(e=>e.fullyQualifiedName===n.fullyQualifiedName))&&!t&&f(n)){t=n}}}return t};g.getPropertyWithSemanticObject=oe;const re=e=>{var t,i;const n=(t=e.contextLocation)===null||t===void 0?void 0:(i=t.navigationProperties)===null||i===void 0?void 0:i.slice(-1)[0];const a=function(e){var t,i,n;return!!(e!==null&&e!==void 0&&(t=e.annotations)!==null&&t!==void 0&&(i=t.Capabilities)!==null&&i!==void 0&&(n=i.InsertRestrictions)!==null&&n!==void 0&&n.NonInsertableProperties)};const o=function(t){var i,n,a,o;return!!(t!==null&&t!==void 0&&(i=t.annotations)!==null&&i!==void 0&&(n=i.Capabilities)!==null&&n!==void 0&&(a=n.InsertRestrictions)!==null&&a!==void 0&&(o=a.NonInsertableProperties)!==null&&o!==void 0&&o.some(t=>{var i,n;return(t===null||t===void 0?void 0:(i=t.$target)===null||i===void 0?void 0:i.name)===((n=e.targetObject)===null||n===void 0?void 0:n.name)}))};if(n&&a(n)){return o(n)}else{return!!e.targetEntitySet&&o(e.targetEntitySet)}};g.hasPropertyInsertRestrictions=re;const le=e=>e?A(V([C(e),U("semanticKeyHasDraftIndicator","internal"),U("HasDraftEntity"),U("IsActiveEntity"),U("hideDraftInfo","pageInternal")],"sap.fe.macros.field.FieldRuntime.isDraftIndicatorVisible")):"false";g.getDraftIndicatorVisibleBinding=le;return g},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/PublicField.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/BindingToolkit", "sap/fe/macros/field/FieldHelper"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, BindingToolkit, FieldHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  var _exports = {};
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var ifElse = BindingToolkit.ifElse;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let PublicFieldBlock = (
  /**
   * Public external field representation
   */
  _dec = defineBuildingBlock({
    name: "Field",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.core.controls.FormElementWrapper" /*, not sure i want to add those yet "sap.fe.macros.field.FieldAPI", "sap.m.HBox", "sap.fe.macros.controls.ConditionalWrapper", "sap.m.Button"*/]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true
  }), _dec5 = blockAttribute({
    type: "boolean",
    isPublic: true,
    required: false
  }), _dec6 = blockAttribute({
    type: "string",
    isPublic: true,
    required: false
  }), _dec7 = blockAttribute({
    type: "string",
    isPublic: true,
    required: false
  }), _dec8 = blockAttribute({
    type: "object",
    isPublic: true,
    validate: function (formatOptionsInput) {
      if (formatOptionsInput.displayMode && !["Value", "Description", "ValueDescription", "DescriptionValue"].includes(formatOptionsInput.displayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.displayMode} for displayMode does not match`);
      }
      if (formatOptionsInput.measureDisplayMode && !["Hidden", "ReadOnly"].includes(formatOptionsInput.measureDisplayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.measureDisplayMode} for measureDisplayMode does not match`);
      }
      if (formatOptionsInput.textExpandBehaviorDisplay && !["InPlace", "Popover"].includes(formatOptionsInput.textExpandBehaviorDisplay)) {
        throw new Error(`Allowed value ${formatOptionsInput.textExpandBehaviorDisplay} for textExpandBehaviorDisplay does not match`);
      }
      return formatOptionsInput;
    }
  }), _dec9 = blockEvent(), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(PublicFieldBlock, _BuildingBlockBase);
    /**
     * The 'id' property
     */

    /**
     * The meta path provided for the field
     */

    /**
     * The context path provided for the field
     */

    /**
     * The readOnly flag
     */

    /**
     * The semantic object associated to the field
     */

    /**
     * The edit mode expression for the field
     */

    /**
     * The object with the formatting options
     */

    /**
     * The generic change event
     */

    function PublicFieldBlock(props) {
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "readOnly", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "semanticObject", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "editModeExpression", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formatOptions", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "change", _descriptor8, _assertThisInitialized(_this));
      if (_this.readOnly !== undefined) {
        _this.editModeExpression = compileExpression(ifElse(equal(resolveBindingString(_this.readOnly, "boolean"), true), "Display", "Editable"));
      }
      return _this;
    }

    /**
     * Sets the internal formatOptions for the building block.
     *
     * @returns A string with the internal formatOptions for the building block
     */
    _exports = PublicFieldBlock;
    var _proto = PublicFieldBlock.prototype;
    _proto.getFormatOptions = function getFormatOptions() {
      return xml`
		<internalMacro:formatOptions
			textAlignMode="Form"
			showEmptyIndicator="true"
			displayMode="${this.formatOptions.displayMode}"
			measureDisplayMode="${this.formatOptions.measureDisplayMode}"
			textLinesEdit="${this.formatOptions.textLinesEdit}"
			textMaxLines="${this.formatOptions.textMaxLines}"
			textMaxCharactersDisplay="${this.formatOptions.textMaxCharactersDisplay}"
			textExpandBehaviorDisplay="${this.formatOptions.textExpandBehaviorDisplay}"
			textMaxLength="${this.formatOptions.textMaxLength}"
			>
			${this.writeDateFormatOptions()}
		</internalMacro:formatOptions>
			`;
    };
    _proto.writeDateFormatOptions = function writeDateFormatOptions() {
      if (this.formatOptions.showTime || this.formatOptions.showDate || this.formatOptions.showTimezone) {
        return xml`<internalMacro:dateFormatOptions showTime="${this.formatOptions.showTime}"
				showDate="${this.formatOptions.showDate}"
				showTimezone="${this.formatOptions.showTimezone}"
				/>`;
      }
      return "";
    }

    /**
     * The function calculates the corresponding ValueHelp field in case it´s
     * defined for the specific control.
     *
     * @returns An XML-based string with a possible ValueHelp control.
     */;
    _proto.getPossibleValueHelpTemplate = function getPossibleValueHelpTemplate() {
      const vhp = FieldHelper.valueHelpProperty(this.metaPath);
      const vhpCtx = this.metaPath.getModel().createBindingContext(vhp, this.metaPath);
      const hasValueHelpAnnotations = FieldHelper.hasValueHelpAnnotation(vhpCtx.getObject("@"));
      if (hasValueHelpAnnotations) {
        // depending on whether this one has a value help annotation included, add the dependent
        return xml`
			<internalMacro:dependents>
				<macros:ValueHelp _flexId="${this.id}-content_FieldValueHelp" property="${vhpCtx}" contextPath="${this.contextPath}" />
			</internalMacro:dependents>`;
      }
      return "";
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */;
    _proto.getTemplate = function getTemplate() {
      const contextPathPath = this.contextPath.getPath();
      const metaPathPath = this.metaPath.getPath();
      return xml`
		<internalMacro:Field
			xmlns:internalMacro="sap.fe.macros.internal"
			entitySet="${contextPathPath}"
			dataField="${metaPathPath}"
			editMode="${this.editModeExpression}"
			onChange="${this.change}"
			_flexId="${this.id}"
			semanticObject="${this.semanticObject}"
		>
			${this.getFormatOptions()}
			${this.getPossibleValueHelpTemplate()}
		</internalMacro:Field>`;
    };
    return PublicFieldBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "readOnly", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "semanticObject", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "editModeExpression", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "formatOptions", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "change", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = PublicFieldBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/PublicField.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/BindingToolkit","sap/fe/macros/field/FieldHelper"],function(e,t,i,r,a){"use strict";var n,o,l,s,u,p,c,d,f,h,m,b,y,x,g,O,v,w,M;var P={};var $=r.resolveBindingString;var D=r.ifElse;var E=r.equal;var B=r.compileExpression;var z=i.xml;var F=t.defineBuildingBlock;var j=t.blockEvent;var T=t.blockAttribute;function k(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function H(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function V(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;q(e,t)}function q(e,t){q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return q(e,t)}function _(e,t,i,r,a){var n={};Object.keys(r).forEach(function(e){n[e]=r[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},n);if(a&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(a):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function A(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let C=(n=F({name:"Field",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.core.controls.FormElementWrapper"]}),o=T({type:"string",isPublic:true,required:true}),l=T({type:"sap.ui.model.Context",isPublic:true,required:true}),s=T({type:"sap.ui.model.Context",isPublic:true,required:true}),u=T({type:"boolean",isPublic:true,required:false}),p=T({type:"string",isPublic:true,required:false}),c=T({type:"string",isPublic:true,required:false}),d=T({type:"object",isPublic:true,validate:function(e){if(e.displayMode&&!["Value","Description","ValueDescription","DescriptionValue"].includes(e.displayMode)){throw new Error(`Allowed value ${e.displayMode} for displayMode does not match`)}if(e.measureDisplayMode&&!["Hidden","ReadOnly"].includes(e.measureDisplayMode)){throw new Error(`Allowed value ${e.measureDisplayMode} for measureDisplayMode does not match`)}if(e.textExpandBehaviorDisplay&&!["InPlace","Popover"].includes(e.textExpandBehaviorDisplay)){throw new Error(`Allowed value ${e.textExpandBehaviorDisplay} for textExpandBehaviorDisplay does not match`)}return e}}),f=j(),n(h=(m=function(e){V(t,e);function t(t){var i;i=e.call(this,t)||this;k(i,"id",b,H(i));k(i,"metaPath",y,H(i));k(i,"contextPath",x,H(i));k(i,"readOnly",g,H(i));k(i,"semanticObject",O,H(i));k(i,"editModeExpression",v,H(i));k(i,"formatOptions",w,H(i));k(i,"change",M,H(i));if(i.readOnly!==undefined){i.editModeExpression=B(D(E($(i.readOnly,"boolean"),true),"Display","Editable"))}return i}P=t;var i=t.prototype;i.getFormatOptions=function e(){return z`
		<internalMacro:formatOptions
			textAlignMode="Form"
			showEmptyIndicator="true"
			displayMode="${this.formatOptions.displayMode}"
			measureDisplayMode="${this.formatOptions.measureDisplayMode}"
			textLinesEdit="${this.formatOptions.textLinesEdit}"
			textMaxLines="${this.formatOptions.textMaxLines}"
			textMaxCharactersDisplay="${this.formatOptions.textMaxCharactersDisplay}"
			textExpandBehaviorDisplay="${this.formatOptions.textExpandBehaviorDisplay}"
			textMaxLength="${this.formatOptions.textMaxLength}"
			>
			${this.writeDateFormatOptions()}
		</internalMacro:formatOptions>
			`};i.writeDateFormatOptions=function e(){if(this.formatOptions.showTime||this.formatOptions.showDate||this.formatOptions.showTimezone){return z`<internalMacro:dateFormatOptions showTime="${this.formatOptions.showTime}"
				showDate="${this.formatOptions.showDate}"
				showTimezone="${this.formatOptions.showTimezone}"
				/>`}return""};i.getPossibleValueHelpTemplate=function e(){const t=a.valueHelpProperty(this.metaPath);const i=this.metaPath.getModel().createBindingContext(t,this.metaPath);const r=a.hasValueHelpAnnotation(i.getObject("@"));if(r){return z`
			<internalMacro:dependents>
				<macros:ValueHelp _flexId="${this.id}-content_FieldValueHelp" property="${i}" contextPath="${this.contextPath}" />
			</internalMacro:dependents>`}return""};i.getTemplate=function e(){const t=this.contextPath.getPath();const i=this.metaPath.getPath();return z`
		<internalMacro:Field
			xmlns:internalMacro="sap.fe.macros.internal"
			entitySet="${t}"
			dataField="${i}"
			editMode="${this.editModeExpression}"
			onChange="${this.change}"
			_flexId="${this.id}"
			semanticObject="${this.semanticObject}"
		>
			${this.getFormatOptions()}
			${this.getPossibleValueHelpTemplate()}
		</internalMacro:Field>`};return t}(e),b=_(m.prototype,"id",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),y=_(m.prototype,"metaPath",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),x=_(m.prototype,"contextPath",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),g=_(m.prototype,"readOnly",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),O=_(m.prototype,"semanticObject",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),v=_(m.prototype,"editModeExpression",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),w=_(m.prototype,"formatOptions",[d],{configurable:true,enumerable:true,writable:true,initializer:function(){return{}}}),M=_(m.prototype,"change",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),m))||h);P=C;return P},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/TextAreaEx-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ResourceModelHelper", "sap/m/TextArea", "sap/ui/core/library"], function (ClassSupport, ResourceModelHelper, _TextArea, library) {
  "use strict";

  var _dec, _class;
  var _exports = {};
  var ValueState = library.ValueState;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let TextAreaEx = (
  /**
   * Extension of the TextArea control to add a check for the maximum length when setting the value.
   *
   * @extends sap.m.TextArea
   * @public
   */
  _dec = defineUI5Class("sap.fe.macros.field.TextAreaEx"), _dec(_class = /*#__PURE__*/function (_TextArea2) {
    _inheritsLoose(TextAreaEx, _TextArea2);
    function TextAreaEx() {
      return _TextArea2.apply(this, arguments) || this;
    }
    _exports = TextAreaEx;
    var _proto = TextAreaEx.prototype;
    /**
     * Fires live change event.
     *
     * @param {object} [parameters] Parameters to pass along with the event
     * @param parameters.value
     * @returns Reference to `this` in order to allow method chaining
     */
    _proto.fireLiveChange = function fireLiveChange(parameters) {
      _TextArea2.prototype.fireLiveChange.call(this, parameters);
      this._validateTextLength(parameters === null || parameters === void 0 ? void 0 : parameters.value);
      return this;
    }

    /**
     * Sets the value for the text area.
     *
     * @param {string} value New value for the property `value`
     * @returns Reference to `this` in order to allow method chaining
     * @private
     */;
    _proto.setValue = function setValue(value) {
      _TextArea2.prototype.setValue.call(this, value);
      this._validateTextLength(value);
      return this;
    }

    /**
     * Sets an error message for the value state if the maximum length is specified and the new value exceeds this maximum length.
     *
     * @param {string} [value] New value for property `value`
     * @private
     */;
    _proto._validateTextLength = function _validateTextLength(value) {
      const maxLength = this.getMaxLength();
      if (!maxLength || value === undefined) {
        return;
      }
      if (value.length > maxLength) {
        const valueStateText = getResourceModel(this).getText("M_FIELD_TEXTAREA_TEXT_TOO_LONG");
        this.setValueState(ValueState.Error);
        this.setValueStateText(valueStateText);
      } else {
        this.setValueState(ValueState.None);
      }
    };
    return TextAreaEx;
  }(_TextArea)) || _class);
  _exports = TextAreaEx;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/field/TextAreaEx", ["sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ResourceModelHelper","sap/m/TextArea","sap/ui/core/library"],function(e,t,r,o){"use strict";var a,n;var i={};var s=o.ValueState;var u=t.getResourceModel;var l=e.defineUI5Class;function p(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;c(e,t)}function c(e,t){c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return c(e,t)}let f=(a=l("sap.fe.macros.field.TextAreaEx"),a(n=function(e){p(t,e);function t(){return e.apply(this,arguments)||this}i=t;var r=t.prototype;r.fireLiveChange=function t(r){e.prototype.fireLiveChange.call(this,r);this._validateTextLength(r===null||r===void 0?void 0:r.value);return this};r.setValue=function t(r){e.prototype.setValue.call(this,r);this._validateTextLength(r);return this};r._validateTextLength=function e(t){const r=this.getMaxLength();if(!r||t===undefined){return}if(t.length>r){const e=u(this).getText("M_FIELD_TEXTAREA_TEXT_TOO_LONG");this.setValueState(s.Error);this.setValueStateText(e)}else{this.setValueState(s.None)}};return t}(r))||n);i=f;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/DraftEditState-dbg", ["sap/ui/core/Core", "sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/mdc/condition/Operator", "sap/ui/mdc/enum/ConditionValidated", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/json/JSONModel"], function (Core, FilterOperatorUtil, Operator, ConditionValidated, Filter, FilterOperator, JSONModel) {
  "use strict";

  const feBundle = Core.getLibraryResourceBundle("sap.fe.macros");
  /**
   * Enum for edit state of a document in an draft enabled service collection.
   * Allows to simplify filtering on a set of documents as described by the
   * individual state
   *
   * @readonly
   * @enum {string}
   * @private
   * @ui5-restricted
   */
  const EDITSTATE = {
    /**
     * Active documents that don't have a corresponding draft and all own draft documents
     *
     * @private
     * @ui5-restricted
     */
    ALL: {
      id: "ALL",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_ALL_FILTER")
    },
    /**
     * Active documents that don't have a draft document
     *
     * @private
     * @ui5-restricted
     */
    UNCHANGED: {
      id: "UNCHANGED",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_UNCHANGED_FILTER")
    },
    /**
     * Own draft documents
     *
     * @private
     * @ui5-restricted
     */
    OWN_DRAFT: {
      id: "OWN_DRAFT",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_OWN_DRAFT_FILTER")
    },
    /**
     * Active documents that are locked by other users
     *
     * @private
     * @ui5-restricted
     */
    LOCKED: {
      id: "LOCKED",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_LOCKED_FILTER")
    },
    /**
     * Active documents that have draft documents by other users
     *
     * @private
     * @ui5-restricted
     */
    UNSAVED_CHANGES: {
      id: "UNSAVED_CHANGES",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_UNSAVED_CHANGES_FILTER")
    },
    /**
     * Active documents only
     *
     * @private
     * @ui5-restricted
     */
    ALL_HIDING_DRAFTS: {
      id: "ALL_HIDING_DRAFTS",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_ALL_HIDING_DRAFTS_FILTER")
    },
    /**
     * Active documents only (with collaborative draft)
     *
     * @private
     * @ui5-restricted
     */
    SAVED_ONLY: {
      id: "SAVED_ONLY",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_SAVED_ONLY_FILTER")
    },
    /**
     * My drafts, i.e. the drafts I have created, have been invited to or have made a change in (with collaborative draft)
     *
     * @private
     * @ui5-restricted
     */
    MY_DRAFTS: {
      id: "MY_DRAFTS",
      display: feBundle.getText("C_DRAFT_EDIT_STATE_DRAFT_MY_DRAFTS_FILTER")
    },
    getEditStatesContext: function (macroProps) {
      let availableEditStates;
      if (macroProps.getProperty("isDraftCollaborative")) {
        availableEditStates = [EDITSTATE.ALL, EDITSTATE.MY_DRAFTS, EDITSTATE.SAVED_ONLY];
      } else {
        availableEditStates = [EDITSTATE.ALL, EDITSTATE.ALL_HIDING_DRAFTS, EDITSTATE.UNCHANGED, EDITSTATE.OWN_DRAFT, EDITSTATE.LOCKED, EDITSTATE.UNSAVED_CHANGES];
      }
      return new JSONModel(availableEditStates).bindContext("/").getBoundContext();
    },
    getCurrentUserID: function () {
      var _sap$ushell, _sap$ushell$Container, _sap$ushell$Container2;
      return (_sap$ushell = sap.ushell) === null || _sap$ushell === void 0 ? void 0 : (_sap$ushell$Container = _sap$ushell.Container) === null || _sap$ushell$Container === void 0 ? void 0 : (_sap$ushell$Container2 = _sap$ushell$Container.getUser()) === null || _sap$ushell$Container2 === void 0 ? void 0 : _sap$ushell$Container2.getId();
    },
    getFilterForEditState: function (sEditState) {
      switch (sEditState) {
        case EDITSTATE.UNCHANGED.id:
          return new Filter({
            filters: [new Filter({
              path: "IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: true
            }), new Filter({
              path: "HasDraftEntity",
              operator: FilterOperator.EQ,
              value1: false
            })],
            and: true
          });
        case EDITSTATE.OWN_DRAFT.id:
          return new Filter({
            path: "IsActiveEntity",
            operator: FilterOperator.EQ,
            value1: false
          });
        case EDITSTATE.LOCKED.id:
          return new Filter({
            filters: [new Filter({
              path: "IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: true
            }), new Filter({
              path: "SiblingEntity/IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: null
            }), new Filter({
              path: "DraftAdministrativeData/InProcessByUser",
              operator: FilterOperator.NE,
              value1: ""
            }), new Filter({
              path: "DraftAdministrativeData/InProcessByUser",
              operator: FilterOperator.NE,
              value1: null
            })],
            and: true
          });
        case EDITSTATE.UNSAVED_CHANGES.id:
          return new Filter({
            filters: [new Filter({
              path: "IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: true
            }), new Filter({
              path: "SiblingEntity/IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: null
            }), new Filter({
              path: "DraftAdministrativeData/InProcessByUser",
              operator: FilterOperator.EQ,
              value1: ""
            })],
            and: true
          });
        case EDITSTATE.ALL_HIDING_DRAFTS.id:
        case EDITSTATE.SAVED_ONLY.id:
          return new Filter({
            path: "IsActiveEntity",
            operator: FilterOperator.EQ,
            value1: true
          });
        case EDITSTATE.MY_DRAFTS.id:
          const currentUserID = this.getCurrentUserID();
          return currentUserID ? new Filter({
            filters: [new Filter({
              path: "IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: false
            }), new Filter({
              path: "DraftAdministrativeData/DraftAdministrativeUser",
              operator: FilterOperator.Any,
              variable: "user",
              condition: new Filter({
                path: "user/UserID",
                operator: FilterOperator.EQ,
                value1: this.getCurrentUserID()
              })
            })],
            and: true
          }) : new Filter({
            path: "IsActiveEntity",
            operator: FilterOperator.EQ,
            value1: false
          });
        // Couldn't find current user (e.g. no shell) --> show all drafts
        default:
          // ALL
          return new Filter({
            filters: [new Filter({
              path: "IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: false
            }), new Filter({
              path: "SiblingEntity/IsActiveEntity",
              operator: FilterOperator.EQ,
              value1: null
            })],
            and: false
          });
      }
    }
  };
  FilterOperatorUtil.addOperator(new Operator({
    name: "DRAFT_EDIT_STATE",
    valueTypes: [Operator.ValueType.Self, Operator.ValueType.Self],
    tokenParse: "^(.*)$",
    format: function (vValue) {
      return vValue && vValue.values[1];
    },
    getModelFilter: function (oCondition) {
      return EDITSTATE.getFilterForEditState(oCondition.values[0]);
    },
    parse: function (parm) {
      return parm;
    },
    validateInput: true,
    checkValidated: function (oCondition) {
      // This ensures that the listfieldhelp is also called for old variants saved with Validated parameter as undefined.
      oCondition.validated = ConditionValidated.Validated;
    }
  }));
  return EDITSTATE;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/DraftEditState", ["sap/ui/core/Core","sap/ui/mdc/condition/FilterOperatorUtil","sap/ui/mdc/condition/Operator","sap/ui/mdc/enum/ConditionValidated","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/json/JSONModel"],function(e,t,a,r,i,n,s){"use strict";const o=e.getLibraryResourceBundle("sap.fe.macros");const A={ALL:{id:"ALL",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_ALL_FILTER")},UNCHANGED:{id:"UNCHANGED",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_UNCHANGED_FILTER")},OWN_DRAFT:{id:"OWN_DRAFT",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_OWN_DRAFT_FILTER")},LOCKED:{id:"LOCKED",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_LOCKED_FILTER")},UNSAVED_CHANGES:{id:"UNSAVED_CHANGES",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_UNSAVED_CHANGES_FILTER")},ALL_HIDING_DRAFTS:{id:"ALL_HIDING_DRAFTS",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_ALL_HIDING_DRAFTS_FILTER")},SAVED_ONLY:{id:"SAVED_ONLY",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_SAVED_ONLY_FILTER")},MY_DRAFTS:{id:"MY_DRAFTS",display:o.getText("C_DRAFT_EDIT_STATE_DRAFT_MY_DRAFTS_FILTER")},getEditStatesContext:function(e){let t;if(e.getProperty("isDraftCollaborative")){t=[A.ALL,A.MY_DRAFTS,A.SAVED_ONLY]}else{t=[A.ALL,A.ALL_HIDING_DRAFTS,A.UNCHANGED,A.OWN_DRAFT,A.LOCKED,A.UNSAVED_CHANGES]}return new s(t).bindContext("/").getBoundContext()},getCurrentUserID:function(){var e,t,a;return(e=sap.ushell)===null||e===void 0?void 0:(t=e.Container)===null||t===void 0?void 0:(a=t.getUser())===null||a===void 0?void 0:a.getId()},getFilterForEditState:function(e){switch(e){case A.UNCHANGED.id:return new i({filters:[new i({path:"IsActiveEntity",operator:n.EQ,value1:true}),new i({path:"HasDraftEntity",operator:n.EQ,value1:false})],and:true});case A.OWN_DRAFT.id:return new i({path:"IsActiveEntity",operator:n.EQ,value1:false});case A.LOCKED.id:return new i({filters:[new i({path:"IsActiveEntity",operator:n.EQ,value1:true}),new i({path:"SiblingEntity/IsActiveEntity",operator:n.EQ,value1:null}),new i({path:"DraftAdministrativeData/InProcessByUser",operator:n.NE,value1:""}),new i({path:"DraftAdministrativeData/InProcessByUser",operator:n.NE,value1:null})],and:true});case A.UNSAVED_CHANGES.id:return new i({filters:[new i({path:"IsActiveEntity",operator:n.EQ,value1:true}),new i({path:"SiblingEntity/IsActiveEntity",operator:n.EQ,value1:null}),new i({path:"DraftAdministrativeData/InProcessByUser",operator:n.EQ,value1:""})],and:true});case A.ALL_HIDING_DRAFTS.id:case A.SAVED_ONLY.id:return new i({path:"IsActiveEntity",operator:n.EQ,value1:true});case A.MY_DRAFTS.id:const e=this.getCurrentUserID();return e?new i({filters:[new i({path:"IsActiveEntity",operator:n.EQ,value1:false}),new i({path:"DraftAdministrativeData/DraftAdministrativeUser",operator:n.Any,variable:"user",condition:new i({path:"user/UserID",operator:n.EQ,value1:this.getCurrentUserID()})})],and:true}):new i({path:"IsActiveEntity",operator:n.EQ,value1:false});default:return new i({filters:[new i({path:"IsActiveEntity",operator:n.EQ,value1:false}),new i({path:"SiblingEntity/IsActiveEntity",operator:n.EQ,value1:null})],and:false})}}};t.addOperator(new a({name:"DRAFT_EDIT_STATE",valueTypes:[a.ValueType.Self,a.ValueType.Self],tokenParse:"^(.*)$",format:function(e){return e&&e.values[1]},getModelFilter:function(e){return A.getFilterForEditState(e.values[0])},parse:function(e){return e},validateInput:true,checkValidated:function(e){e.validated=r.Validated}}));return A},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterFieldHelper-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/core/type/FiscalDate", "sap/fe/macros/CommonHelper", "sap/ui/model/odata/v4/AnnotationHelper"], function (CommonUtils, BindingToolkit, DataModelPathHelper, PropertyFormatters, FiscalDate, CommonHelper, AnnotationHelper) {
  "use strict";

  var _exports = {};
  var getProperty = PropertyFormatters.getProperty;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var pathInModel = BindingToolkit.pathInModel;
  var getFiscalType = BindingToolkit.getFiscalType;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  var compileExpression = BindingToolkit.compileExpression;
  /**
   * Checks whether the property with the given path is required in the filter for the given annotation interface.
   *
   * @param path Property path - ignored when provided as string
   * @param annotationInterface Structure returned by the ODataMetaModel when using the @@ operator in XML templates
   * @returns The value true if the given input is requird for filtering
   */
  function isRequiredInFilter(path, annotationInterface) {
    const model = annotationInterface.context.getModel();
    const propertyPath = annotationInterface.context.getPath();
    const propertyLocationPath = CommonHelper.getLocationForPropertyPath(model, propertyPath);
    let property;
    let required = model.getObject(`${propertyLocationPath}/@com.sap.vocabularies.Common.v1.ResultContext`);
    if (!required) {
      var _oFR$RequiredProperti;
      if (typeof path === "string") {
        property = path;
      } else {
        property = model.getObject(`${propertyPath}@sapui.name`);
      }
      const oFR = CommonUtils.getFilterRestrictionsByPath(propertyLocationPath, model);
      required = oFR === null || oFR === void 0 ? void 0 : (_oFR$RequiredProperti = oFR.RequiredProperties) === null || _oFR$RequiredProperti === void 0 ? void 0 : _oFR$RequiredProperti.includes(property);
    }
    return required;
  }

  /**
   * Checks the maximum number of conditions for the given path and given annotation interface.
   *
   * @param path Property path - ignored when provided as string
   * @param annotationInterface Structure returned by the ODataMetaModel when using the @@ operator in XML templates
   * @returns The number of maximum allowed conditions or -1 if there is no limit.
   */
  _exports.isRequiredInFilter = isRequiredInFilter;
  function maxConditions(path, annotationInterface) {
    var _filterRestrictions$F;
    const model = annotationInterface.context.getModel();
    const propertyPath = annotationInterface.context.getPath();
    const propertyLocationPath = CommonHelper.getLocationForPropertyPath(model, propertyPath);
    let property;
    let max = -1;
    if (model.getObject(`${propertyLocationPath}/@com.sap.vocabularies.Common.v1.ResultContext`) === true) {
      return 1;
    }
    if (typeof path === "string") {
      property = path;
    } else {
      property = model.getObject(`${propertyPath}@sapui.name`);
    }
    const filterRestrictions = CommonUtils.getFilterRestrictionsByPath(propertyLocationPath, model);
    let propertyInfo = model.getObject(`${propertyLocationPath}/${property}`);
    if (!propertyInfo) {
      propertyInfo = model.getObject(propertyPath);
    }
    if (propertyInfo.$Type === "Edm.Boolean") {
      max = 1;
    } else if (filterRestrictions !== null && filterRestrictions !== void 0 && (_filterRestrictions$F = filterRestrictions.FilterAllowedExpressions) !== null && _filterRestrictions$F !== void 0 && _filterRestrictions$F[property]) {
      const allowedExpression = CommonUtils.getSpecificAllowedExpression(filterRestrictions.FilterAllowedExpressions[property]);
      if (allowedExpression === "SingleValue" || allowedExpression === "SingleRange") {
        max = 1;
      }
    }
    return max;
  }

  /**
   * To Create binding for mdc:filterfield conditions.
   *
   * @param dataModelObjectPath Data Model Object path to filter field property
   * @returns Expression binding for conditions for the field
   */
  _exports.maxConditions = maxConditions;
  function getConditionsBinding(dataModelObjectPath) {
    const relativePropertyPath = getContextRelativeTargetObjectPath(dataModelObjectPath, false, true);
    return compileExpression(pathInModel(`/conditions/${relativePropertyPath}`, "$filters"));
  }

  /**
   * Get the contraints string for the given property and interface.
   *
   * @param context
   * @param annotationInterface Structure returned by the ODataMetaModel when using the @@ operator in XML templates
   * @returns Constraints as string if available otherwise undefined
   */
  _exports.getConditionsBinding = getConditionsBinding;
  function constraints(context, annotationInterface) {
    const value = AnnotationHelper.format(context, annotationInterface) || "";
    const matches = value.match(/constraints:.*?({.*?})/);
    let propertyContraints = (matches === null || matches === void 0 ? void 0 : matches[1]) || "";
    // Workaround. Add "V4: true" to DateTimeOffset constraints. AnnotationHelper is not aware of this flag.
    if (value.includes("sap.ui.model.odata.type.DateTimeOffset")) {
      if (propertyContraints) {
        propertyContraints = `${propertyContraints.substring(0, matches === null || matches === void 0 ? void 0 : matches[1].indexOf("}"))}, V4: true}`;
      } else {
        propertyContraints = "{V4: true}";
      }
    }
    // Remove {nullable:false} from the constraints as it prevents from having an empty filter field
    // in the case of a single-value filter
    if (propertyContraints.includes("'nullable':false")) {
      propertyContraints = propertyContraints.replace(/,[ ]*'nullable':false/, "").replace(/'nullable':false[, ]*/, "");
      if (propertyContraints === "{}") {
        propertyContraints = "";
      }
    }
    return propertyContraints || undefined;
  }

  /**
   * Get the format options as string for the given path and given annotation interface.
   *
   * @param context
   * @param annotationInterface Structure returned by the ODataMetaModel when using the @@ operator in XML templates
   * @returns Format options as string if available otherwise undefined
   */
  _exports.constraints = constraints;
  function formatOptions(context, annotationInterface) {
    var _value$match;
    // as the Annotation helper always returns "parseKeepsEmptyString: true" we need to prevent this in case a property (of type string) is nullable
    // Filling annotationInterface.arguments with an array where the first parameter is null, and the second contains the "expected"
    // parseKeepsEmptyString value follows a proposal from the model colleagues to "overrule" the behavior of the AnnotationHelper
    if (context.$Type === "Edm.String") {
      if (!context.hasOwnProperty("$Nullable") || context.$Nullable === true) {
        annotationInterface.arguments = [null, {
          parseKeepsEmptyString: false
        }];
      }
      const fiscalType = getFiscalType(getProperty(context, annotationInterface));
      if (fiscalType) {
        if (!annotationInterface.arguments) {
          annotationInterface.arguments = [null, {}];
        }
        annotationInterface.arguments[1].fiscalType = fiscalType;
      }
    }
    const value = AnnotationHelper.format(context, annotationInterface) || "";
    return ((_value$match = value.match(/formatOptions:.*?({.*?})/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) || undefined;
  }

  /**
   * Get the data type for a given property.
   *
   * @param property Property information
   * @returns Type as string
   */
  _exports.formatOptions = formatOptions;
  function getDataType(property) {
    if (property.type === "Edm.String") {
      const fiscalType = getFiscalType(property);
      if (fiscalType) {
        return "sap.fe.core.type.FiscalDate";
      }
    }
    const typeMapping = EDM_TYPE_MAPPING[property.type];
    return typeMapping ? typeMapping.type : property.type;
  }

  /**
   * Get the placeholder of properties of type Edm.String.
   *
   * @param property Property information
   * @returns Placeholder as string if available otherwise undefined
   */
  _exports.getDataType = getDataType;
  function getPlaceholder(property) {
    if (property.type === "Edm.String") {
      const fiscalType = getFiscalType(property);
      if (fiscalType) {
        return new FiscalDate({
          fiscalType
        }, {}).getPattern();
      }
    }
    return undefined;
  }
  _exports.getPlaceholder = getPlaceholder;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterFieldHelper", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyFormatters","sap/fe/core/type/FiscalDate","sap/fe/macros/CommonHelper","sap/ui/model/odata/v4/AnnotationHelper"],function(e,t,n,o,i,r,a){"use strict";var l={};var s=o.getProperty;var c=n.getContextRelativeTargetObjectPath;var u=t.pathInModel;var f=t.getFiscalType;var p=t.EDM_TYPE_MAPPING;var d=t.compileExpression;function g(t,n){const o=n.context.getModel();const i=n.context.getPath();const a=r.getLocationForPropertyPath(o,i);let l;let s=o.getObject(`${a}/@com.sap.vocabularies.Common.v1.ResultContext`);if(!s){var c;if(typeof t==="string"){l=t}else{l=o.getObject(`${i}@sapui.name`)}const n=e.getFilterRestrictionsByPath(a,o);s=n===null||n===void 0?void 0:(c=n.RequiredProperties)===null||c===void 0?void 0:c.includes(l)}return s}l.isRequiredInFilter=g;function m(t,n){var o;const i=n.context.getModel();const a=n.context.getPath();const l=r.getLocationForPropertyPath(i,a);let s;let c=-1;if(i.getObject(`${l}/@com.sap.vocabularies.Common.v1.ResultContext`)===true){return 1}if(typeof t==="string"){s=t}else{s=i.getObject(`${a}@sapui.name`)}const u=e.getFilterRestrictionsByPath(l,i);let f=i.getObject(`${l}/${s}`);if(!f){f=i.getObject(a)}if(f.$Type==="Edm.Boolean"){c=1}else if(u!==null&&u!==void 0&&(o=u.FilterAllowedExpressions)!==null&&o!==void 0&&o[s]){const t=e.getSpecificAllowedExpression(u.FilterAllowedExpressions[s]);if(t==="SingleValue"||t==="SingleRange"){c=1}}return c}l.maxConditions=m;function v(e){const t=c(e,false,true);return d(u(`/conditions/${t}`,"$filters"))}l.getConditionsBinding=v;function y(e,t){const n=a.format(e,t)||"";const o=n.match(/constraints:.*?({.*?})/);let i=(o===null||o===void 0?void 0:o[1])||"";if(n.includes("sap.ui.model.odata.type.DateTimeOffset")){if(i){i=`${i.substring(0,o===null||o===void 0?void 0:o[1].indexOf("}"))}, V4: true}`}else{i="{V4: true}"}}if(i.includes("'nullable':false")){i=i.replace(/,[ ]*'nullable':false/,"").replace(/'nullable':false[, ]*/,"");if(i==="{}"){i=""}}return i||undefined}l.constraints=y;function P(e,t){var n;if(e.$Type==="Edm.String"){if(!e.hasOwnProperty("$Nullable")||e.$Nullable===true){t.arguments=[null,{parseKeepsEmptyString:false}]}const n=f(s(e,t));if(n){if(!t.arguments){t.arguments=[null,{}]}t.arguments[1].fiscalType=n}}const o=a.format(e,t)||"";return((n=o.match(/formatOptions:.*?({.*?})/))===null||n===void 0?void 0:n[1])||undefined}l.formatOptions=P;function b(e){if(e.type==="Edm.String"){const t=f(e);if(t){return"sap.fe.core.type.FiscalDate"}}const t=p[e.type];return t?t.type:e.type}l.getDataType=b;function h(e){if(e.type==="Edm.String"){const t=f(e);if(t){return new i({fiscalType:t},{}).getPattern()}}return undefined}l.getPlaceholder=h;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterFieldTemplating-dbg", ["sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters"], function (PropertyHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  const getDisplayProperty = function (propertyObjectPath, propertyConverted) {
    return hasValueHelp(propertyConverted) ? getDisplayMode(propertyObjectPath) : "Value";
  };
  _exports.getDisplayProperty = getDisplayProperty;
  const getFilterFieldDisplayFormat = async function (propertyObjectPath, propertyConverted, propertyInterface) {
    var _propertyConverted$an, _propertyConverted$an2;
    const oTextAnnotation = propertyConverted === null || propertyConverted === void 0 ? void 0 : (_propertyConverted$an = propertyConverted.annotations) === null || _propertyConverted$an === void 0 ? void 0 : (_propertyConverted$an2 = _propertyConverted$an.Common) === null || _propertyConverted$an2 === void 0 ? void 0 : _propertyConverted$an2.Text;
    if (oTextAnnotation) {
      // The text annotation should be on the property defined
      return getDisplayProperty(propertyObjectPath, propertyConverted);
    }
    const bHasValueHelp = hasValueHelp(propertyConverted);
    if (bHasValueHelp) {
      var _propertyObjectPath$t, _propertyObjectPath$t2, _propertyObjectPath$t3;
      // Exceptional case for missing text annotation on the property (retrieve text from value list)
      // Consider TextArrangement at EntityType otherwise set default display format 'DescriptionValue'
      const entityTextArrangement = propertyObjectPath === null || propertyObjectPath === void 0 ? void 0 : (_propertyObjectPath$t = propertyObjectPath.targetEntityType) === null || _propertyObjectPath$t === void 0 ? void 0 : (_propertyObjectPath$t2 = _propertyObjectPath$t.annotations) === null || _propertyObjectPath$t2 === void 0 ? void 0 : (_propertyObjectPath$t3 = _propertyObjectPath$t2.UI) === null || _propertyObjectPath$t3 === void 0 ? void 0 : _propertyObjectPath$t3.TextArrangement;
      return entityTextArrangement ? getDisplayMode(propertyObjectPath) : _getDisplayModeFromValueHelp(propertyInterface, propertyObjectPath);
    }
    return "Value";
  };

  /**
   * Method to determine the display mode from the value help.
   *
   * @param Interface The current templating context
   * @param propertyObjectPath The global path to reach the entitySet
   * @returns A promise with the string 'DescriptionValue' or 'Value', depending on whether a text annotation exists for the property in the value help
   * Hint: A text arrangement is consciously ignored. If the text is retrieved from the value help, the text arrangement of the value help property isn´t considered. Instead, the default text arrangement #TextFirst
   * is used.
   */
  _exports.getFilterFieldDisplayFormat = getFilterFieldDisplayFormat;
  async function _getDisplayModeFromValueHelp(Interface, propertyObjectPath) {
    const context = Interface.context;
    const metaModel = Interface.context.getModel();
    return await metaModel.requestValueListInfo(context.getPath(), true, context).then(function (valueListInfo) {
      var _firstValueListInfo$P;
      const firstKey = Object.keys(valueListInfo)[0];
      const firstValueListInfo = valueListInfo[firstKey];
      const valueListParameter = (_firstValueListInfo$P = firstValueListInfo.Parameters) === null || _firstValueListInfo$P === void 0 ? void 0 : _firstValueListInfo$P.find(element => {
        var _element$LocalDataPro, _propertyObjectPath$t4;
        return ((_element$LocalDataPro = element.LocalDataProperty) === null || _element$LocalDataPro === void 0 ? void 0 : _element$LocalDataPro.$PropertyPath) === (propertyObjectPath === null || propertyObjectPath === void 0 ? void 0 : (_propertyObjectPath$t4 = propertyObjectPath.targetObject) === null || _propertyObjectPath$t4 === void 0 ? void 0 : _propertyObjectPath$t4.name);
      });
      const valueListProperty = valueListParameter === null || valueListParameter === void 0 ? void 0 : valueListParameter.ValueListProperty;
      const textAnnotation = metaModel.getObject("/" + firstValueListInfo.CollectionPath + "/" + valueListProperty + "@com.sap.vocabularies.Common.v1.Text");
      return textAnnotation ? "DescriptionValue" : "Value";
    });
  }
  _exports._getDisplayModeFromValueHelp = _getDisplayModeFromValueHelp;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterFieldTemplating", ["sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters"],function(t,e){"use strict";var o={};var n=e.getDisplayMode;var i=t.hasValueHelp;const r=function(t,e){return i(e)?n(t):"Value"};o.getDisplayProperty=r;const a=async function(t,e,o){var a,u;const s=e===null||e===void 0?void 0:(a=e.annotations)===null||a===void 0?void 0:(u=a.Common)===null||u===void 0?void 0:u.Text;if(s){return r(t,e)}const v=i(e);if(v){var c,d,p;const e=t===null||t===void 0?void 0:(c=t.targetEntityType)===null||c===void 0?void 0:(d=c.annotations)===null||d===void 0?void 0:(p=d.UI)===null||p===void 0?void 0:p.TextArrangement;return e?n(t):l(o,t)}return"Value"};o.getFilterFieldDisplayFormat=a;async function l(t,e){const o=t.context;const n=t.context.getModel();return await n.requestValueListInfo(o.getPath(),true,o).then(function(t){var o;const i=Object.keys(t)[0];const r=t[i];const a=(o=r.Parameters)===null||o===void 0?void 0:o.find(t=>{var o,n;return((o=t.LocalDataProperty)===null||o===void 0?void 0:o.$PropertyPath)===(e===null||e===void 0?void 0:(n=e.targetObject)===null||n===void 0?void 0:n.name)});const l=a===null||a===void 0?void 0:a.ValueListProperty;const u=n.getObject("/"+r.CollectionPath+"/"+l+"@com.sap.vocabularies.Common.v1.Text");return u?"DescriptionValue":"Value"})}o._getDisplayModeFromValueHelp=l;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterUtils-dbg", ["sap/base/Log", "sap/base/util/deepClone", "sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/converters/ConverterContext", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/SemanticDateOperators", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/macros/CommonHelper", "sap/fe/macros/DelegateUtil", "sap/fe/macros/filter/DraftEditState", "sap/ui/core/Core", "sap/ui/mdc/condition/Condition", "sap/ui/mdc/condition/ConditionConverter", "sap/ui/mdc/enum/ConditionValidated", "sap/ui/mdc/odata/v4/TypeUtil", "sap/ui/mdc/p13n/StateUtil", "sap/ui/mdc/util/FilterUtil", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/odata/v4/ODataUtils"], function (Log, deepClone, merge, CommonUtils, FilterBarConverter, ConverterContext, MetaModelConverter, MetaModelFunction, ModelHelper, SemanticDateOperators, DisplayModeFormatter, CommonHelper, DelegateUtil, EDITSTATE, Core, Condition, ConditionConverter, ConditionValidated, TypeUtil, StateUtil, FilterUtil, Filter, FilterOperator, ODataUtils) {
  "use strict";

  var ODATA_TYPE_MAPPING = DisplayModeFormatter.ODATA_TYPE_MAPPING;
  var getAllCustomAggregates = MetaModelFunction.getAllCustomAggregates;
  const oFilterUtils = {
    getFilter: function (vIFilter) {
      const aFilters = oFilterUtils.getFilterInfo(vIFilter).filters;
      return aFilters.length ? new Filter(oFilterUtils.getFilterInfo(vIFilter).filters, false) : undefined;
    },
    getFilterField: function (propertyPath, converterContext, entityType) {
      return FilterBarConverter.getFilterField(propertyPath, converterContext, entityType);
    },
    buildProperyInfo: function (propertyInfoField, converterContext) {
      let oPropertyInfo;
      const aTypeConfig = {};
      const propertyConvertyContext = converterContext.getConverterContextFor(propertyInfoField.annotationPath);
      const propertyTargetObject = propertyConvertyContext.getDataModelObjectPath().targetObject;
      const oTypeConfig = FilterBarConverter.fetchTypeConfig(propertyTargetObject);
      oPropertyInfo = FilterBarConverter.fetchPropertyInfo(converterContext, propertyInfoField, oTypeConfig);
      aTypeConfig[propertyInfoField.key] = oTypeConfig;
      oPropertyInfo = FilterBarConverter.assignDataTypeToPropertyInfo(oPropertyInfo, converterContext, [], aTypeConfig);
      return oPropertyInfo;
    },
    createConverterContext: function (oFilterControl, sEntityTypePath, metaModel, appComponent) {
      const sFilterEntityTypePath = DelegateUtil.getCustomData(oFilterControl, "entityType"),
        contextPath = sEntityTypePath || sFilterEntityTypePath;
      const oView = oFilterControl.isA ? CommonUtils.getTargetView(oFilterControl) : null;
      const oMetaModel = metaModel || oFilterControl.getModel().getMetaModel();
      const oAppComponent = appComponent || oView && CommonUtils.getAppComponent(oView);
      const oVisualizationObjectPath = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.createBindingContext(contextPath));
      let manifestSettings;
      if (oFilterControl.isA && !oFilterControl.isA("sap.ui.mdc.filterbar.vh.FilterBar")) {
        manifestSettings = oView && oView.getViewData() || {};
      }
      return ConverterContext.createConverterContextForMacro(oVisualizationObjectPath.startingEntitySet.name, oMetaModel, oAppComponent === null || oAppComponent === void 0 ? void 0 : oAppComponent.getDiagnostics(), merge, oVisualizationObjectPath.contextLocation, manifestSettings);
    },
    getConvertedFilterFields: function (oFilterControl, sEntityTypePath, includeHidden, metaModel, appComponent, oModifier, lineItemTerm) {
      const oMetaModel = this._getFilterMetaModel(oFilterControl, metaModel);
      const sFilterEntityTypePath = DelegateUtil.getCustomData(oFilterControl, "entityType"),
        contextPath = sEntityTypePath || sFilterEntityTypePath;
      const lrTables = this._getFieldsForTable(oFilterControl, sEntityTypePath);
      const oConverterContext = this.createConverterContext(oFilterControl, sEntityTypePath, metaModel, appComponent);

      //aSelectionFields = FilterBarConverter.getSelectionFields(oConverterContext);
      return this._getSelectionFields(oFilterControl, sEntityTypePath, sFilterEntityTypePath, contextPath, lrTables, oMetaModel, oConverterContext, includeHidden, oModifier, lineItemTerm);
    },
    getBindingPathForParameters: function (oIFilter, mConditions, aFilterPropertiesMetadata, aParameters) {
      const aParams = [];
      aFilterPropertiesMetadata = oFilterUtils.setTypeConfigToProperties(aFilterPropertiesMetadata);
      // Collecting all parameter values from conditions
      for (let i = 0; i < aParameters.length; i++) {
        const sFieldPath = aParameters[i];
        if (mConditions[sFieldPath] && mConditions[sFieldPath].length > 0) {
          // We would be using only the first condition for parameter value.
          const oConditionInternal = merge({}, mConditions[sFieldPath][0]);
          const oProperty = FilterUtil.getPropertyByKey(aFilterPropertiesMetadata, sFieldPath);
          const oTypeConfig = oProperty.typeConfig || TypeUtil.getTypeConfig(oProperty.dataType, oProperty.formatOptions, oProperty.constraints);
          const mInternalParameterCondition = ConditionConverter.toType(oConditionInternal, oTypeConfig, oIFilter.getTypeUtil());
          const sEdmType = ODATA_TYPE_MAPPING[oTypeConfig.className];
          aParams.push(`${sFieldPath}=${encodeURIComponent(ODataUtils.formatLiteral(mInternalParameterCondition.values[0], sEdmType))}`);
        }
      }

      // Binding path from EntityType
      const sEntityTypePath = oIFilter.data("entityType");
      const sEntitySetPath = sEntityTypePath.substring(0, sEntityTypePath.length - 1);
      const sParameterEntitySet = sEntitySetPath.slice(0, sEntitySetPath.lastIndexOf("/"));
      const sTargetNavigation = sEntitySetPath.substring(sEntitySetPath.lastIndexOf("/") + 1);
      // create parameter context
      return `${sParameterEntitySet}(${aParams.toString()})/${sTargetNavigation}`;
    },
    getEditStateIsHideDraft: function (mConditions) {
      let bIsHideDraft = false;
      if (mConditions && mConditions.$editState) {
        const oCondition = mConditions.$editState.find(function (condition) {
          return condition.operator === "DRAFT_EDIT_STATE";
        });
        if (oCondition && (oCondition.values.includes("ALL_HIDING_DRAFTS") || oCondition.values.includes("SAVED_ONLY"))) {
          bIsHideDraft = true;
        }
      }
      return bIsHideDraft;
    },
    /**
     * Gets all filters that originate from the MDC FilterBar.
     *
     * @param vIFilter String or object instance related to
     *  - MDC_FilterBar/Table/Chart
     * @param mProperties Properties on filters that are to be retrieved. Available parameters:
     * 	 - ignoredProperties: Array of property names which should be not considered for filtering
     *	 - propertiesMetadata: Array with all the property metadata. If not provided, properties will be retrieved from vIFilter.
     *	 - targetControl: MDC_table or chart. If provided, property names which are not relevant for the target control entitySet are not considered.
     * @param mFilterConditions Map with externalized filter conditions.
     * @returns FilterBar filters and basic search
     * @private
     * @ui5-restricted
     */
    getFilterInfo: function (vIFilter, mProperties, mFilterConditions) {
      let aIgnoreProperties = mProperties && mProperties.ignoredProperties || [];
      const oTargetControl = mProperties && mProperties.targetControl,
        sTargetEntityPath = oTargetControl ? oTargetControl.data("entityType") : undefined;
      const mParameters = {};
      let oIFilter = vIFilter,
        sSearch,
        aFilters = [],
        sBindingPath,
        aPropertiesMetadata = mProperties && mProperties.propertiesMetadata;
      if (typeof vIFilter === "string") {
        oIFilter = Core.byId(vIFilter);
      }
      if (oIFilter) {
        sSearch = this._getSearchField(oIFilter, aIgnoreProperties);
        const mConditions = this._getFilterConditions(mProperties, mFilterConditions, oIFilter);
        let aFilterPropertiesMetadata = oIFilter.getPropertyInfoSet ? oIFilter.getPropertyInfoSet() : null;
        aFilterPropertiesMetadata = this._getFilterPropertiesMetadata(aFilterPropertiesMetadata, oIFilter);
        if (mProperties && mProperties.targetControl && mProperties.targetControl.isA("sap.ui.mdc.Chart")) {
          Object.keys(mConditions).forEach(function (sKey) {
            if (sKey === "$editState") {
              delete mConditions["$editState"];
            }
          });
        }
        let aParameters = oIFilter.data("parameters") || [];
        aParameters = typeof aParameters === "string" ? JSON.parse(aParameters) : aParameters;
        if (aParameters && aParameters.length > 0) {
          // Binding path changes in case of parameters.
          sBindingPath = oFilterUtils.getBindingPathForParameters(oIFilter, mConditions, aFilterPropertiesMetadata, aParameters);
          if (Object.keys(mConditions).length) {
            Object.keys(mConditions).forEach(param => {
              aParameters.forEach(requiredParam => {
                if (param === requiredParam) {
                  const mParametersValue = mConditions[param][0].values;
                  mParameters[requiredParam] = mParametersValue[0];
                }
              });
            });
          }
        }
        if (mConditions) {
          //Exclude Interface Filter properties that are not relevant for the Target control entitySet
          if (sTargetEntityPath && oIFilter.data("entityType") && oIFilter.data("entityType") !== sTargetEntityPath) {
            const oMetaModel = oIFilter.getModel().getMetaModel();
            const aTargetPropertiesMetadata = oIFilter.getControlDelegate().fetchPropertiesForEntity(sTargetEntityPath, oMetaModel, oIFilter);
            aPropertiesMetadata = aTargetPropertiesMetadata;
            const mEntityProperties = {};
            for (const i in aTargetPropertiesMetadata) {
              const oEntityProperty = aTargetPropertiesMetadata[i];
              mEntityProperties[oEntityProperty.name] = {
                hasProperty: true,
                dataType: oEntityProperty.dataType
              };
            }
            const _aIgnoreProperties = this._getIgnoredProperties(aFilterPropertiesMetadata, mEntityProperties);
            if (_aIgnoreProperties.length > 0) {
              aIgnoreProperties = aIgnoreProperties.concat(_aIgnoreProperties);
            }
          } else if (!aPropertiesMetadata) {
            aPropertiesMetadata = aFilterPropertiesMetadata;
          }
          // var aParamKeys = [];
          // aParameters.forEach(function (oParam) {
          // 	aParamKeys.push(oParam.key);
          // });
          const oFilter = FilterUtil.getFilterInfo(oIFilter, mConditions, oFilterUtils.setTypeConfigToProperties(aPropertiesMetadata), aIgnoreProperties.concat(aParameters)).filters;
          aFilters = oFilter ? [oFilter] : [];
        }
      }
      return {
        parameters: mParameters,
        filters: aFilters,
        search: sSearch || undefined,
        bindingPath: sBindingPath
      };
    },
    setTypeConfigToProperties: function (aProperties) {
      if (aProperties && aProperties.length) {
        aProperties.forEach(function (oIFilterProperty) {
          if (oIFilterProperty.typeConfig && oIFilterProperty.typeConfig.typeInstance && oIFilterProperty.typeConfig.typeInstance.getConstraints instanceof Function) {
            return;
          }
          if (oIFilterProperty.path === "$editState") {
            oIFilterProperty.typeConfig = TypeUtil.getTypeConfig("sap.ui.model.odata.type.String", {}, {});
          } else if (oIFilterProperty.path === "$search") {
            oIFilterProperty.typeConfig = TypeUtil.getTypeConfig("sap.ui.model.odata.type.String", {}, {});
          } else if (oIFilterProperty.dataType || oIFilterProperty.typeConfig && oIFilterProperty.typeConfig.className) {
            oIFilterProperty.typeConfig = TypeUtil.getTypeConfig(oIFilterProperty.dataType || oIFilterProperty.typeConfig.className, oIFilterProperty.formatOptions, oIFilterProperty.constraints);
          }
        });
      }
      return aProperties;
    },
    getNotApplicableFilters: function (oFilterBar, oControl) {
      var _oControl$control;
      const sTargetEntityTypePath = oControl.data("entityType"),
        oFilterBarEntityPath = oFilterBar.data("entityType"),
        oFilterBarEntitySetAnnotations = oFilterBar.getModel().getMetaModel().getObject(oFilterBarEntityPath),
        aNotApplicable = [],
        mConditions = oFilterBar.getConditions(),
        oMetaModel = oFilterBar.getModel().getMetaModel(),
        bIsFilterBarEntityType = sTargetEntityTypePath === oFilterBar.data("entityType"),
        bIsChart = oControl.isA("sap.ui.mdc.Chart"),
        bIsAnalyticalTable = !bIsChart && oControl.getParent().getTableDefinition().enableAnalytics,
        bIsTreeTable = !bIsChart && ((_oControl$control = oControl.control) === null || _oControl$control === void 0 ? void 0 : _oControl$control.type) === "TreeTable",
        bEnableSearch = bIsChart ? CommonHelper.parseCustomData(DelegateUtil.getCustomData(oControl, "applySupported")).enableSearch : !(bIsAnalyticalTable || bIsTreeTable) || oControl.getParent().getTableDefinition().enableBasicSearch;
      if (mConditions && (!bIsFilterBarEntityType || bIsAnalyticalTable || bIsChart)) {
        // We don't need to calculate the difference on property Level if entity sets are identical
        const aTargetProperties = bIsFilterBarEntityType ? [] : oFilterBar.getControlDelegate().fetchPropertiesForEntity(sTargetEntityTypePath, oMetaModel, oFilterBar),
          mTargetProperties = aTargetProperties.reduce(function (mProp, oProp) {
            mProp[oProp.name] = oProp;
            return mProp;
          }, {}),
          mTableAggregates = !bIsChart && oControl.getParent().getTableDefinition().aggregates || {},
          mAggregatedProperties = {};
        Object.keys(mTableAggregates).forEach(function (sAggregateName) {
          const oAggregate = mTableAggregates[sAggregateName];
          mAggregatedProperties[oAggregate.relativePath] = oAggregate;
        });
        const chartEntityTypeAnnotations = oControl.getModel().getMetaModel().getObject(oControl.data("targetCollectionPath") + "/");
        if (oControl.isA("sap.ui.mdc.Chart")) {
          const oEntitySetAnnotations = oControl.getModel().getMetaModel().getObject(`${oControl.data("targetCollectionPath")}@`),
            mChartCustomAggregates = getAllCustomAggregates(oEntitySetAnnotations);
          Object.keys(mChartCustomAggregates).forEach(function (sAggregateName) {
            if (!mAggregatedProperties[sAggregateName]) {
              const oAggregate = mChartCustomAggregates[sAggregateName];
              mAggregatedProperties[sAggregateName] = oAggregate;
            }
          });
        }
        for (const sProperty in mConditions) {
          // Need to check the length of mConditions[sProperty] since previous filtered properties are kept into mConditions with empty array as definition
          const aConditionProperty = mConditions[sProperty];
          let typeCheck = true;
          if (chartEntityTypeAnnotations[sProperty] && oFilterBarEntitySetAnnotations[sProperty]) {
            typeCheck = chartEntityTypeAnnotations[sProperty]["$Type"] === oFilterBarEntitySetAnnotations[sProperty]["$Type"];
          }
          if (Array.isArray(aConditionProperty) && aConditionProperty.length > 0 && ((!mTargetProperties[sProperty] || mTargetProperties[sProperty] && !typeCheck) && (!bIsFilterBarEntityType || sProperty === "$editState" && bIsChart) || mAggregatedProperties[sProperty])) {
            aNotApplicable.push(sProperty.replace(/\+|\*/g, ""));
          }
        }
      }
      if (!bEnableSearch && oFilterBar.getSearch()) {
        aNotApplicable.push("$search");
      }
      return aNotApplicable;
    },
    /**
     * Gets the value list information of a property as defined for a given filter bar.
     *
     * @param filterBar The filter bar to get the value list information for
     * @param propertyName The property to get the value list information for
     * @returns The value list information
     */
    async _getValueListInfo(filterBar, propertyName) {
      var _filterBar$getModel;
      const metaModel = (_filterBar$getModel = filterBar.getModel()) === null || _filterBar$getModel === void 0 ? void 0 : _filterBar$getModel.getMetaModel();
      if (!metaModel) {
        return undefined;
      }
      const entityType = filterBar.data("entityType") ?? "";
      const valueListInfos = await metaModel.requestValueListInfo(entityType + propertyName, true, undefined).catch(() => null);
      return valueListInfos === null || valueListInfos === void 0 ? void 0 : valueListInfos[""];
    },
    /**
     * Gets the {@link ConditionValidated} state for a single value. This decides whether the value is treated as a selected value
     * in a value help, meaning that its description is loaded and displayed if existing, or whether it is displayed as a
     * condition (e.g. "=1").
     *
     * Values for properties without value list info are always treated as {@link ConditionValidated.NotValidated}.
     *
     * @param valueListInfo The value list info from the {@link MetaModel}
     * @param conditionPath Path to the property to set the value as condition for
     * @param value The single value to get the state for
     */
    _getConditionValidated: async function (valueListInfo, conditionPath, value) {
      if (!valueListInfo) {
        return ConditionValidated.NotValidated;
      }
      const filter = new Filter({
        path: conditionPath,
        operator: FilterOperator.EQ,
        value1: value
      });
      const listBinding = valueListInfo.$model.bindList(`/${valueListInfo.CollectionPath}`, undefined, undefined, filter, {
        $select: conditionPath
      });
      const valueExists = (await listBinding.requestContexts()).length > 0;
      if (valueExists) {
        return ConditionValidated.Validated;
      } else {
        return ConditionValidated.NotValidated;
      }
    },
    /**
     * Clears all input values of visible filter fields in the filter bar.
     *
     * @param oFilterBar The filter bar that contains the filter field
     */
    clearFilterValues: async function (oFilterBar) {
      var _state$filter$editSta;
      // Do nothing when the filter bar is hidden
      if (!oFilterBar) {
        return;
      }
      const state = await StateUtil.retrieveExternalState(oFilterBar);
      const editStatePath = "$editState";
      const editStateDefaultValue = EDITSTATE.ALL.id;
      const currentEditStateCondition = deepClone((_state$filter$editSta = state.filter[editStatePath]) === null || _state$filter$editSta === void 0 ? void 0 : _state$filter$editSta[0]);
      const currentEditStateIsDefault = (currentEditStateCondition === null || currentEditStateCondition === void 0 ? void 0 : currentEditStateCondition.values[0]) === editStateDefaultValue;

      // Clear all conditions
      for (const conditionPath of Object.keys(state.filter)) {
        if (conditionPath === editStatePath && currentEditStateIsDefault) {
          // Do not clear edit state condition if it is already "ALL"
          continue;
        }
        for (const condition of state.filter[conditionPath]) {
          condition.filtered = false;
        }
      }
      await StateUtil.applyExternalState(oFilterBar, {
        filter: state.filter
      });

      // Set edit state to 'ALL' if it wasn't before
      if (currentEditStateCondition && !currentEditStateIsDefault) {
        currentEditStateCondition.values = [editStateDefaultValue];
        await StateUtil.applyExternalState(oFilterBar, {
          filter: {
            [editStatePath]: [currentEditStateCondition]
          }
        });
      }

      // Allow app developers to update filters after clearing
      oFilterBar.getParent().fireAfterClear();
    },
    /**
     * Clear the filter value for a specific property in the filter bar.
     * This is a prerequisite before new values can be set cleanly.
     *
     * @param filterBar The filter bar that contains the filter field
     * @param conditionPath The path to the property as a condition path
     */
    async _clearFilterValue(filterBar, conditionPath) {
      const oState = await StateUtil.retrieveExternalState(filterBar);
      if (oState.filter[conditionPath]) {
        oState.filter[conditionPath].forEach(oCondition => {
          oCondition.filtered = false;
        });
        await StateUtil.applyExternalState(filterBar, {
          filter: {
            [conditionPath]: oState.filter[conditionPath]
          }
        });
      }
    },
    /**
     * Set the filter values for the given property in the filter bar.
     * The filter values can be either a single value or an array of values.
     * Each filter value must be represented as a primitive value.
     *
     * @param oFilterBar The filter bar that contains the filter field
     * @param sConditionPath The path to the property as a condition path
     * @param args List of optional parameters
     *  [sOperator] The operator to be used - if not set, the default operator (EQ) will be used
     *  [vValues] The values to be applied - if sOperator is missing, vValues is used as 3rd parameter
     */
    setFilterValues: async function (oFilterBar, sConditionPath) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }
      let sOperator = args === null || args === void 0 ? void 0 : args[0];
      let vValues = args === null || args === void 0 ? void 0 : args[1];

      // Do nothing when the filter bar is hidden
      if (!oFilterBar) {
        return;
      }

      // common filter Operators need a value. Do nothing if this value is undefined
      // BCP: 2270135274
      if (args.length === 2 && (vValues === undefined || vValues === null || vValues === "") && sOperator && Object.keys(FilterOperator).indexOf(sOperator) !== -1) {
        Log.warning(`An empty filter value cannot be applied with the ${sOperator} operator`);
        return;
      }

      // The 4th parameter is optional; if sOperator is missing, vValues is used as 3rd parameter
      // This does not apply for semantic dates, as these do not require vValues (exception: "LASTDAYS", 3)
      if (vValues === undefined && !SemanticDateOperators.getSemanticDateOperations().includes(sOperator || "")) {
        vValues = sOperator ?? [];
        sOperator = undefined;
      }

      // If sOperator is not set, use EQ as default
      if (!sOperator) {
        sOperator = FilterOperator.EQ;
      }

      // Supported array types:
      //  - Single Values:	"2" | ["2"]
      //  - Multiple Values:	["2", "3"]
      //  - Ranges:			["2","3"]
      // Unsupported array types:
      //  - Multiple Ranges:	[["2","3"]] | [["2","3"],["4","5"]]
      const supportedValueTypes = ["string", "number", "boolean"];
      if (vValues !== undefined && (!Array.isArray(vValues) && !supportedValueTypes.includes(typeof vValues) || Array.isArray(vValues) && vValues.length > 0 && !supportedValueTypes.includes(typeof vValues[0]))) {
        throw new Error("FilterUtils.js#_setFilterValues: Filter value not supported; only primitive values or an array thereof can be used.");
      }
      let values;
      if (vValues !== undefined) {
        values = Array.isArray(vValues) ? vValues : [vValues];
      }

      // Get the value list info of the property to later check whether the values exist
      const valueListInfo = await this._getValueListInfo(oFilterBar, sConditionPath);
      const filter = {};
      if (sConditionPath) {
        if (values && values.length) {
          if (sOperator === FilterOperator.BT) {
            // The operator BT requires one condition with both thresholds
            filter[sConditionPath] = [Condition.createCondition(sOperator, values, null, null, ConditionValidated.NotValidated)];
          } else {
            // Regular single and multi value conditions, if there are no values, we do not want any conditions
            filter[sConditionPath] = await Promise.all(values.map(async value => {
              // For the EQ case, tell MDC to validate the value (e.g. display the description), if it exists in the associated entity, otherwise never validate
              const conditionValidatedStatus = sOperator === FilterOperator.EQ ? await this._getConditionValidated(valueListInfo, sConditionPath, value) : ConditionValidated.NotValidated;
              return Condition.createCondition(sOperator, [value], null, null, conditionValidatedStatus);
            }));
          }
        } else if (SemanticDateOperators.getSemanticDateOperations().includes(sOperator || "")) {
          // vValues is undefined, so the operator is a semantic date that does not need values (see above)
          filter[sConditionPath] = [Condition.createCondition(sOperator, [], null, null, ConditionValidated.NotValidated)];
        }
      }

      // Always clear the current value as we do not want to add filter values but replace them
      await this._clearFilterValue(oFilterBar, sConditionPath);
      if (filter[sConditionPath]) {
        // This is not called in the reset case, i.e. setFilterValue("Property")
        await StateUtil.applyExternalState(oFilterBar, {
          filter
        });
      }
    },
    conditionToModelPath: function (sConditionPath) {
      // make the path usable as model property, therefore slashes become backslashes
      return sConditionPath.replace(/\//g, "\\");
    },
    _getFilterMetaModel: function (oFilterControl, metaModel) {
      return metaModel || oFilterControl.getModel().getMetaModel();
    },
    _getEntitySetPath: function (sEntityTypePath) {
      return sEntityTypePath && ModelHelper.getEntitySetPath(sEntityTypePath);
    },
    _getFieldsForTable: function (oFilterControl, sEntityTypePath) {
      const lrTables = [];
      /**
       * Gets fields from
       * 	- direct entity properties,
       * 	- navigateProperties key in the manifest if these properties are known by the entity
       *  - annotation "SelectionFields"
       */
      if (sEntityTypePath) {
        const oView = CommonUtils.getTargetView(oFilterControl);
        const tableControls = oView && oView.getController() && oView.getController()._getControls && oView.getController()._getControls("table"); //[0].getParent().getTableDefinition();
        if (tableControls) {
          tableControls.forEach(function (oTable) {
            lrTables.push(oTable.getParent().getTableDefinition());
          });
        }
        return lrTables;
      }
      return [];
    },
    _getSelectionFields: function (oFilterControl, sEntityTypePath, sFilterEntityTypePath, contextPath, lrTables, oMetaModel, oConverterContext, includeHidden, oModifier, lineItemTerm) {
      let aSelectionFields = FilterBarConverter.getSelectionFields(oConverterContext, lrTables, undefined, includeHidden, lineItemTerm).selectionFields;
      if ((oModifier ? oModifier.getControlType(oFilterControl) === "sap.ui.mdc.FilterBar" : oFilterControl.isA("sap.ui.mdc.FilterBar")) && sEntityTypePath !== sFilterEntityTypePath) {
        /**
         * We are on multi entity sets scenario so we add annotation "SelectionFields"
         * from FilterBar entity if these properties are known by the entity
         */
        const oVisualizationObjectPath = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.createBindingContext(contextPath));
        const oPageContext = oConverterContext.getConverterContextFor(sFilterEntityTypePath);
        const aFilterBarSelectionFieldsAnnotation = oPageContext.getEntityTypeAnnotation("@com.sap.vocabularies.UI.v1.SelectionFields").annotation || [];
        const mapSelectionFields = {};
        aSelectionFields.forEach(function (oSelectionField) {
          mapSelectionFields[oSelectionField.conditionPath] = true;
        });
        aFilterBarSelectionFieldsAnnotation.forEach(function (oFilterBarSelectionFieldAnnotation) {
          const sPath = oFilterBarSelectionFieldAnnotation.value;
          if (!mapSelectionFields[sPath]) {
            const oFilterField = FilterBarConverter.getFilterField(sPath, oConverterContext, oVisualizationObjectPath.startingEntitySet.entityType);
            if (oFilterField) {
              aSelectionFields.push(oFilterField);
            }
          }
        });
      }
      if (aSelectionFields) {
        const fieldNames = [];
        aSelectionFields.forEach(function (oField) {
          fieldNames.push(oField.key);
        });
        aSelectionFields = this._getSelectionFieldsFromPropertyInfos(oFilterControl, fieldNames, aSelectionFields);
      }
      return aSelectionFields;
    },
    _getSelectionFieldsFromPropertyInfos: function (oFilterControl, fieldNames, aSelectionFields) {
      const propertyInfoFields = oFilterControl.getPropertyInfo && oFilterControl.getPropertyInfo() || [];
      propertyInfoFields.forEach(function (oProp) {
        if (oProp.name === "$search" || oProp.name === "$editState") {
          return;
        }
        const selField = aSelectionFields[fieldNames.indexOf(oProp.key)];
        if (fieldNames.indexOf(oProp.key) !== -1 && selField.annotationPath) {
          oProp.group = selField.group;
          oProp.groupLabel = selField.groupLabel;
          oProp.settings = selField.settings;
          oProp.visualFilter = selField.visualFilter;
          oProp.label = selField.label;
          aSelectionFields[fieldNames.indexOf(oProp.key)] = oProp;
        }
        if (fieldNames.indexOf(oProp.key) === -1 && !oProp.annotationPath) {
          aSelectionFields.push(oProp);
        }
      });
      return aSelectionFields;
    },
    _getSearchField: function (oIFilter, aIgnoreProperties) {
      return oIFilter.getSearch && aIgnoreProperties.indexOf("search") === -1 ? oIFilter.getSearch() : null;
    },
    _getFilterConditions: function (mProperties, mFilterConditions, oIFilter) {
      const mConditions = mFilterConditions || oIFilter.getConditions();
      if (mProperties && mProperties.targetControl && mProperties.targetControl.isA("sap.ui.mdc.Chart")) {
        Object.keys(mConditions).forEach(function (sKey) {
          if (sKey === "$editState") {
            delete mConditions["$editState"];
          }
        });
      }
      return mConditions;
    },
    _getFilterPropertiesMetadata: function (aFilterPropertiesMetadata, oIFilter) {
      if (!(aFilterPropertiesMetadata && aFilterPropertiesMetadata.length)) {
        if (oIFilter.getPropertyInfo) {
          aFilterPropertiesMetadata = oIFilter.getPropertyInfo();
        } else {
          aFilterPropertiesMetadata = null;
        }
      }
      return aFilterPropertiesMetadata;
    },
    _getIgnoredProperties: function (aFilterPropertiesMetadata, mEntityProperties) {
      const aIgnoreProperties = [];
      aFilterPropertiesMetadata.forEach(function (oIFilterProperty) {
        const sIFilterPropertyName = oIFilterProperty.name;
        const mEntityPropertiesCurrent = mEntityProperties[sIFilterPropertyName];
        if (mEntityPropertiesCurrent && (!mEntityPropertiesCurrent["hasProperty"] || mEntityPropertiesCurrent["hasProperty"] && oIFilterProperty.dataType !== mEntityPropertiesCurrent.dataType)) {
          aIgnoreProperties.push(sIFilterPropertyName);
        }
      });
      return aIgnoreProperties;
    },
    getFilters: function (filterBar) {
      const {
        parameters,
        filters,
        search
      } = this.getFilterInfo(filterBar);
      return {
        parameters,
        filters,
        search
      };
    }
  };
  return oFilterUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/FilterUtils", ["sap/base/Log","sap/base/util/deepClone","sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/converters/ConverterContext","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/SemanticDateOperators","sap/fe/core/templating/DisplayModeFormatter","sap/fe/macros/CommonHelper","sap/fe/macros/DelegateUtil","sap/fe/macros/filter/DraftEditState","sap/ui/core/Core","sap/ui/mdc/condition/Condition","sap/ui/mdc/condition/ConditionConverter","sap/ui/mdc/enum/ConditionValidated","sap/ui/mdc/odata/v4/TypeUtil","sap/ui/mdc/p13n/StateUtil","sap/ui/mdc/util/FilterUtil","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/odata/v4/ODataUtils"],function(t,e,n,i,o,a,r,s,l,c,f,d,u,g,p,y,h,C,m,F,v,T,P,S){"use strict";var b=f.ODATA_TYPE_MAPPING;var M=s.getAllCustomAggregates;const E={getFilter:function(t){const e=E.getFilterInfo(t).filters;return e.length?new T(E.getFilterInfo(t).filters,false):undefined},getFilterField:function(t,e,n){return o.getFilterField(t,e,n)},buildProperyInfo:function(t,e){let n;const i={};const a=e.getConverterContextFor(t.annotationPath);const r=a.getDataModelObjectPath().targetObject;const s=o.fetchTypeConfig(r);n=o.fetchPropertyInfo(e,t,s);i[t.key]=s;n=o.assignDataTypeToPropertyInfo(n,e,[],i);return n},createConverterContext:function(t,e,o,s){const l=u.getCustomData(t,"entityType"),c=e||l;const f=t.isA?i.getTargetView(t):null;const d=o||t.getModel().getMetaModel();const g=s||f&&i.getAppComponent(f);const p=r.getInvolvedDataModelObjects(d.createBindingContext(c));let y;if(t.isA&&!t.isA("sap.ui.mdc.filterbar.vh.FilterBar")){y=f&&f.getViewData()||{}}return a.createConverterContextForMacro(p.startingEntitySet.name,d,g===null||g===void 0?void 0:g.getDiagnostics(),n,p.contextLocation,y)},getConvertedFilterFields:function(t,e,n,i,o,a,r){const s=this._getFilterMetaModel(t,i);const l=u.getCustomData(t,"entityType"),c=e||l;const f=this._getFieldsForTable(t,e);const d=this.createConverterContext(t,e,i,o);return this._getSelectionFields(t,e,l,c,f,s,d,n,a,r)},getBindingPathForParameters:function(t,e,i,o){const a=[];i=E.setTypeConfigToProperties(i);for(let r=0;r<o.length;r++){const s=o[r];if(e[s]&&e[s].length>0){const o=n({},e[s][0]);const r=v.getPropertyByKey(i,s);const l=r.typeConfig||m.getTypeConfig(r.dataType,r.formatOptions,r.constraints);const c=h.toType(o,l,t.getTypeUtil());const f=b[l.className];a.push(`${s}=${encodeURIComponent(S.formatLiteral(c.values[0],f))}`)}}const r=t.data("entityType");const s=r.substring(0,r.length-1);const l=s.slice(0,s.lastIndexOf("/"));const c=s.substring(s.lastIndexOf("/")+1);return`${l}(${a.toString()})/${c}`},getEditStateIsHideDraft:function(t){let e=false;if(t&&t.$editState){const n=t.$editState.find(function(t){return t.operator==="DRAFT_EDIT_STATE"});if(n&&(n.values.includes("ALL_HIDING_DRAFTS")||n.values.includes("SAVED_ONLY"))){e=true}}return e},getFilterInfo:function(t,e,n){let i=e&&e.ignoredProperties||[];const o=e&&e.targetControl,a=o?o.data("entityType"):undefined;const r={};let s=t,l,c=[],f,d=e&&e.propertiesMetadata;if(typeof t==="string"){s=p.byId(t)}if(s){l=this._getSearchField(s,i);const t=this._getFilterConditions(e,n,s);let o=s.getPropertyInfoSet?s.getPropertyInfoSet():null;o=this._getFilterPropertiesMetadata(o,s);if(e&&e.targetControl&&e.targetControl.isA("sap.ui.mdc.Chart")){Object.keys(t).forEach(function(e){if(e==="$editState"){delete t["$editState"]}})}let u=s.data("parameters")||[];u=typeof u==="string"?JSON.parse(u):u;if(u&&u.length>0){f=E.getBindingPathForParameters(s,t,o,u);if(Object.keys(t).length){Object.keys(t).forEach(e=>{u.forEach(n=>{if(e===n){const i=t[e][0].values;r[n]=i[0]}})})}}if(t){if(a&&s.data("entityType")&&s.data("entityType")!==a){const t=s.getModel().getMetaModel();const e=s.getControlDelegate().fetchPropertiesForEntity(a,t,s);d=e;const n={};for(const t in e){const i=e[t];n[i.name]={hasProperty:true,dataType:i.dataType}}const r=this._getIgnoredProperties(o,n);if(r.length>0){i=i.concat(r)}}else if(!d){d=o}const e=v.getFilterInfo(s,t,E.setTypeConfigToProperties(d),i.concat(u)).filters;c=e?[e]:[]}}return{parameters:r,filters:c,search:l||undefined,bindingPath:f}},setTypeConfigToProperties:function(t){if(t&&t.length){t.forEach(function(t){if(t.typeConfig&&t.typeConfig.typeInstance&&t.typeConfig.typeInstance.getConstraints instanceof Function){return}if(t.path==="$editState"){t.typeConfig=m.getTypeConfig("sap.ui.model.odata.type.String",{},{})}else if(t.path==="$search"){t.typeConfig=m.getTypeConfig("sap.ui.model.odata.type.String",{},{})}else if(t.dataType||t.typeConfig&&t.typeConfig.className){t.typeConfig=m.getTypeConfig(t.dataType||t.typeConfig.className,t.formatOptions,t.constraints)}})}return t},getNotApplicableFilters:function(t,e){var n;const i=e.data("entityType"),o=t.data("entityType"),a=t.getModel().getMetaModel().getObject(o),r=[],s=t.getConditions(),l=t.getModel().getMetaModel(),c=i===t.data("entityType"),f=e.isA("sap.ui.mdc.Chart"),g=!f&&e.getParent().getTableDefinition().enableAnalytics,p=!f&&((n=e.control)===null||n===void 0?void 0:n.type)==="TreeTable",y=f?d.parseCustomData(u.getCustomData(e,"applySupported")).enableSearch:!(g||p)||e.getParent().getTableDefinition().enableBasicSearch;if(s&&(!c||g||f)){const n=c?[]:t.getControlDelegate().fetchPropertiesForEntity(i,l,t),o=n.reduce(function(t,e){t[e.name]=e;return t},{}),d=!f&&e.getParent().getTableDefinition().aggregates||{},u={};Object.keys(d).forEach(function(t){const e=d[t];u[e.relativePath]=e});const g=e.getModel().getMetaModel().getObject(e.data("targetCollectionPath")+"/");if(e.isA("sap.ui.mdc.Chart")){const t=e.getModel().getMetaModel().getObject(`${e.data("targetCollectionPath")}@`),n=M(t);Object.keys(n).forEach(function(t){if(!u[t]){const e=n[t];u[t]=e}})}for(const t in s){const e=s[t];let n=true;if(g[t]&&a[t]){n=g[t]["$Type"]===a[t]["$Type"]}if(Array.isArray(e)&&e.length>0&&((!o[t]||o[t]&&!n)&&(!c||t==="$editState"&&f)||u[t])){r.push(t.replace(/\+|\*/g,""))}}}if(!y&&t.getSearch()){r.push("$search")}return r},async _getValueListInfo(t,e){var n;const i=(n=t.getModel())===null||n===void 0?void 0:n.getMetaModel();if(!i){return undefined}const o=t.data("entityType")??"";const a=await i.requestValueListInfo(o+e,true,undefined).catch(()=>null);return a===null||a===void 0?void 0:a[""]},_getConditionValidated:async function(t,e,n){if(!t){return C.NotValidated}const i=new T({path:e,operator:P.EQ,value1:n});const o=t.$model.bindList(`/${t.CollectionPath}`,undefined,undefined,i,{$select:e});const a=(await o.requestContexts()).length>0;if(a){return C.Validated}else{return C.NotValidated}},clearFilterValues:async function(t){var n;if(!t){return}const i=await F.retrieveExternalState(t);const o="$editState";const a=g.ALL.id;const r=e((n=i.filter[o])===null||n===void 0?void 0:n[0]);const s=(r===null||r===void 0?void 0:r.values[0])===a;for(const t of Object.keys(i.filter)){if(t===o&&s){continue}for(const e of i.filter[t]){e.filtered=false}}await F.applyExternalState(t,{filter:i.filter});if(r&&!s){r.values=[a];await F.applyExternalState(t,{filter:{[o]:[r]}})}t.getParent().fireAfterClear()},async _clearFilterValue(t,e){const n=await F.retrieveExternalState(t);if(n.filter[e]){n.filter[e].forEach(t=>{t.filtered=false});await F.applyExternalState(t,{filter:{[e]:n.filter[e]}})}},setFilterValues:async function(e,n){for(var i=arguments.length,o=new Array(i>2?i-2:0),a=2;a<i;a++){o[a-2]=arguments[a]}let r=o===null||o===void 0?void 0:o[0];let s=o===null||o===void 0?void 0:o[1];if(!e){return}if(o.length===2&&(s===undefined||s===null||s==="")&&r&&Object.keys(P).indexOf(r)!==-1){t.warning(`An empty filter value cannot be applied with the ${r} operator`);return}if(s===undefined&&!c.getSemanticDateOperations().includes(r||"")){s=r??[];r=undefined}if(!r){r=P.EQ}const l=["string","number","boolean"];if(s!==undefined&&(!Array.isArray(s)&&!l.includes(typeof s)||Array.isArray(s)&&s.length>0&&!l.includes(typeof s[0]))){throw new Error("FilterUtils.js#_setFilterValues: Filter value not supported; only primitive values or an array thereof can be used.")}let f;if(s!==undefined){f=Array.isArray(s)?s:[s]}const d=await this._getValueListInfo(e,n);const u={};if(n){if(f&&f.length){if(r===P.BT){u[n]=[y.createCondition(r,f,null,null,C.NotValidated)]}else{u[n]=await Promise.all(f.map(async t=>{const e=r===P.EQ?await this._getConditionValidated(d,n,t):C.NotValidated;return y.createCondition(r,[t],null,null,e)}))}}else if(c.getSemanticDateOperations().includes(r||"")){u[n]=[y.createCondition(r,[],null,null,C.NotValidated)]}}await this._clearFilterValue(e,n);if(u[n]){await F.applyExternalState(e,{filter:u})}},conditionToModelPath:function(t){return t.replace(/\//g,"\\")},_getFilterMetaModel:function(t,e){return e||t.getModel().getMetaModel()},_getEntitySetPath:function(t){return t&&l.getEntitySetPath(t)},_getFieldsForTable:function(t,e){const n=[];if(e){const e=i.getTargetView(t);const o=e&&e.getController()&&e.getController()._getControls&&e.getController()._getControls("table");if(o){o.forEach(function(t){n.push(t.getParent().getTableDefinition())})}return n}return[]},_getSelectionFields:function(t,e,n,i,a,s,l,c,f,d){let u=o.getSelectionFields(l,a,undefined,c,d).selectionFields;if((f?f.getControlType(t)==="sap.ui.mdc.FilterBar":t.isA("sap.ui.mdc.FilterBar"))&&e!==n){const t=r.getInvolvedDataModelObjects(s.createBindingContext(i));const e=l.getConverterContextFor(n);const a=e.getEntityTypeAnnotation("@com.sap.vocabularies.UI.v1.SelectionFields").annotation||[];const c={};u.forEach(function(t){c[t.conditionPath]=true});a.forEach(function(e){const n=e.value;if(!c[n]){const e=o.getFilterField(n,l,t.startingEntitySet.entityType);if(e){u.push(e)}}})}if(u){const e=[];u.forEach(function(t){e.push(t.key)});u=this._getSelectionFieldsFromPropertyInfos(t,e,u)}return u},_getSelectionFieldsFromPropertyInfos:function(t,e,n){const i=t.getPropertyInfo&&t.getPropertyInfo()||[];i.forEach(function(t){if(t.name==="$search"||t.name==="$editState"){return}const i=n[e.indexOf(t.key)];if(e.indexOf(t.key)!==-1&&i.annotationPath){t.group=i.group;t.groupLabel=i.groupLabel;t.settings=i.settings;t.visualFilter=i.visualFilter;t.label=i.label;n[e.indexOf(t.key)]=t}if(e.indexOf(t.key)===-1&&!t.annotationPath){n.push(t)}});return n},_getSearchField:function(t,e){return t.getSearch&&e.indexOf("search")===-1?t.getSearch():null},_getFilterConditions:function(t,e,n){const i=e||n.getConditions();if(t&&t.targetControl&&t.targetControl.isA("sap.ui.mdc.Chart")){Object.keys(i).forEach(function(t){if(t==="$editState"){delete i["$editState"]}})}return i},_getFilterPropertiesMetadata:function(t,e){if(!(t&&t.length)){if(e.getPropertyInfo){t=e.getPropertyInfo()}else{t=null}}return t},_getIgnoredProperties:function(t,e){const n=[];t.forEach(function(t){const i=t.name;const o=e[i];if(o&&(!o["hasProperty"]||o["hasProperty"]&&t.dataType!==o.dataType)){n.push(i)}});return n},getFilters:function(t){const{parameters:e,filters:n,search:i}=this.getFilterInfo(t);return{parameters:e,filters:n,search:i}}};return E},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/MultiValue-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/macros/filter/type/Value"], function (ClassSupport, Value) {
  "use strict";

  var _dec, _class;
  var _exports = {};
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let MultiValue = (
  /**
   * Handle format/parse of multi value filters.
   */
  _dec = defineUI5Class("sap.fe.macros.filter.type.MultiValue"), _dec(_class = /*#__PURE__*/function (_Value) {
    _inheritsLoose(MultiValue, _Value);
    function MultiValue() {
      return _Value.apply(this, arguments) || this;
    }
    _exports = MultiValue;
    var _proto = MultiValue.prototype;
    /**
     * Returns the unchanged values.
     *
     * @param values Input condition value
     * @returns First value of array or input
     * @protected
     */
    _proto.formatConditionValues = function formatConditionValues(values) {
      return values;
    }

    /**
     * Returns the string value parsed to the external value type.
     *
     * @param internalValue The internal string value to be formatted
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The formatted value
     * @protected
     */;
    _proto.formatValue = function formatValue(internalValue, externalValueType) {
      let result = internalValue;
      if (typeof result === "string") {
        result = result.split(",");
      }
      if (Array.isArray(result)) {
        result = result.map(value => _Value.prototype.formatValue.call(this, value, this.getElementTypeName(externalValueType))).filter(value => value !== undefined);
      }
      return result || [];
    }

    /**
     * Returns the value parsed to the internal string value.
     *
     * @param externalValue The value to be parsed
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The parsed value
     * @protected
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.parseValue = function parseValue(externalValue, externalValueType) {
      if (!externalValue) {
        externalValue = [];
      }
      return externalValue.map(value => {
        if (value === undefined) {
          value = [];
        } else if (!Array.isArray(value)) {
          value = [value];
        }
        return this.operator.format({
          values: value
        });
      });
    };
    return MultiValue;
  }(Value)) || _class);
  _exports = MultiValue;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/MultiValue", ["sap/fe/core/helpers/ClassSupport","sap/fe/macros/filter/type/Value"],function(t,e){"use strict";var r,o;var n={};var a=t.defineUI5Class;function i(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;f(t,e)}function f(t,e){f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,r){e.__proto__=r;return e};return f(t,e)}let u=(r=a("sap.fe.macros.filter.type.MultiValue"),r(o=function(t){i(e,t);function e(){return t.apply(this,arguments)||this}n=e;var r=e.prototype;r.formatConditionValues=function t(e){return e};r.formatValue=function e(r,o){let n=r;if(typeof n==="string"){n=n.split(",")}if(Array.isArray(n)){n=n.map(e=>t.prototype.formatValue.call(this,e,this.getElementTypeName(o))).filter(t=>t!==undefined)}return n||[]};r.parseValue=function t(e,r){if(!e){e=[]}return e.map(t=>{if(t===undefined){t=[]}else if(!Array.isArray(t)){t=[t]}return this.operator.format({values:t})})};return e}(e))||o);n=u;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/Range-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/macros/filter/type/Value"], function (ClassSupport, Value) {
  "use strict";

  var _dec, _class;
  var _exports = {};
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let Range = (
  /**
   * Handle format/parse of range filter values.
   */
  // eslint-disable-next-line new-cap
  _dec = defineUI5Class("sap.fe.macros.filter.type.Range"), _dec(_class = /*#__PURE__*/function (_Value) {
    _inheritsLoose(Range, _Value);
    function Range() {
      return _Value.apply(this, arguments) || this;
    }
    _exports = Range;
    var _proto = Range.prototype;
    /**
     * Returns the default operator name for range filter values ("BT").
     *
     * @returns The default operator name
     * @protected
     */
    _proto.getDefaultOperatorName = function getDefaultOperatorName() {
      return "BT";
    }

    /**
     * Returns the unchanged values.
     *
     * @param values Input condition value
     * @returns Unchanged input condition value
     * @protected
     */;
    _proto.formatConditionValues = function formatConditionValues(values) {
      return values;
    }

    /**
     * Returns the string value parsed to the external value type.
     *
     * @param internalValue The internal string value to be formatted
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The formatted value
     * @protected
     */;
    _proto.formatValue = function formatValue(internalValue, externalValueType) {
      let results = _Value.prototype.formatValue.call(this, internalValue, externalValueType);
      if (!results) {
        const minValue = this.oFormatOptions.min || Number.MIN_SAFE_INTEGER,
          maxValue = this.oFormatOptions.max || Number.MAX_SAFE_INTEGER;
        results = [minValue, maxValue];
      }
      return results;
    };
    return Range;
  }(Value)) || _class);
  _exports = Range;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/Range", ["sap/fe/core/helpers/ClassSupport","sap/fe/macros/filter/type/Value"],function(t,e){"use strict";var r,o;var n={};var a=t.defineUI5Class;function u(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;i(t,e)}function i(t,e){i=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,r){e.__proto__=r;return e};return i(t,e)}let p=(r=a("sap.fe.macros.filter.type.Range"),r(o=function(t){u(e,t);function e(){return t.apply(this,arguments)||this}n=e;var r=e.prototype;r.getDefaultOperatorName=function t(){return"BT"};r.formatConditionValues=function t(e){return e};r.formatValue=function e(r,o){let n=t.prototype.formatValue.call(this,r,o);if(!n){const t=this.oFormatOptions.min||Number.MIN_SAFE_INTEGER,e=this.oFormatOptions.max||Number.MAX_SAFE_INTEGER;n=[t,e]}return n};return e}(e))||o);n=p;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/Value-dbg", ["sap/base/Log", "sap/fe/core/helpers/ClassSupport", "sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/mdc/condition/Operator", "sap/ui/mdc/enum/FieldDisplay", "sap/ui/model/SimpleType", "sap/ui/model/type/Boolean", "sap/ui/model/type/Date", "sap/ui/model/type/Float", "sap/ui/model/type/Integer", "sap/ui/model/type/String"], function (Log, ClassSupport, FilterOperatorUtil, Operator, FieldDisplay, SimpleType, BooleanType, DateType, FloatType, IntegerType, StringType) {
  "use strict";

  var _dec, _class, _class2;
  var _exports = {};
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let Value = (
  /**
   * Handle format/parse single filter value.
   */
  _dec = defineUI5Class("sap.fe.macros.filter.type.Value"), _dec(_class = (_class2 = /*#__PURE__*/function (_SimpleType) {
    _inheritsLoose(Value, _SimpleType);
    /**
     * Creates a new value type instance with the given parameters.
     *
     * @param formatOptions Format options for this value type
     * @param formatOptions.operator The name of a (possibly custom) operator to use
     * @param constraints Constraints for this value type
     * @protected
     */
    function Value(formatOptions, constraints) {
      var _this;
      _this = _SimpleType.call(this, formatOptions, constraints) || this;
      const operatorName = (formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.operator) || _this.getDefaultOperatorName();
      _this.operator = FilterOperatorUtil.getOperator(operatorName);
      if (!_this.operator && operatorName.includes(".")) {
        _this._registerCustomOperator(operatorName);
      }
      return _this;
    }

    /**
     * Registers a custom binding operator.
     *
     * @param operatorName The binding operator name
     * @private
     */
    _exports = Value;
    var _proto = Value.prototype;
    _proto._registerCustomOperator = function _registerCustomOperator(operatorName) {
      const handlerFileName = operatorName.substring(0, operatorName.lastIndexOf(".")).replace(/\./g, "/"),
        methodName = operatorName.substring(operatorName.lastIndexOf(".") + 1);
      sap.ui.require([handlerFileName], customOperatorHandler => {
        if (!customOperatorHandler) {
          return;
        }
        this.operator = new Operator({
          filterOperator: "",
          tokenFormat: "",
          name: operatorName,
          valueTypes: ["self"],
          tokenParse: "^(.*)$",
          format: value => {
            return this.formatConditionValues(value.values);
          },
          parse: function (text, type, displayFormat, defaultOperator) {
            if (typeof text === "object") {
              if (text.operator !== operatorName) {
                throw Error("not matching operator");
              }
              return text.values;
            }
            return Operator.prototype.parse.apply(this, [text, type, displayFormat, defaultOperator]);
          },
          getModelFilter: condition => {
            return customOperatorHandler[methodName].call(customOperatorHandler, this.formatConditionValues(condition.values));
          }
        });
        FilterOperatorUtil.addOperator(this.operator);
      });
    }

    /**
     * Returns whether the specified operator is a multi-value operator.
     *
     * @param operator The binding operator
     * @returns `true`, if multi-value operator (`false` otherwise)
     * @private
     */;
    _proto._isMultiValueOperator = function _isMultiValueOperator(operator) {
      return operator.valueTypes.filter(function (valueType) {
        return !!valueType && valueType !== Value.OPERATOR_VALUE_TYPE_STATIC;
      }).length > 1;
    }

    /**
     * Returns whether the specified operator is a custom operator.
     *
     * @returns `true`, if custom operator (`false` otherwise)
     * @private
     */;
    _proto.hasCustomOperator = function hasCustomOperator() {
      return this.operator.name.includes(".");
    }

    /**
     * Parses the internal string value to the external value of type 'externalValueType'.
     *
     * @param value The internal string value to be parsed
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The parsed value
     * @private
     */;
    _proto._stringToExternal = function _stringToExternal(value, externalValueType) {
      let externalValue;
      const externalType = this._getTypeInstance(externalValueType);
      if (externalValueType && Value._isArrayType(externalValueType)) {
        if (!Array.isArray(value)) {
          value = [value];
        }
        externalValue = value.map(valueElement => {
          return externalType ? externalType.parseValue(valueElement, Value.INTERNAL_VALUE_TYPE) : valueElement;
        });
      } else {
        externalValue = externalType ? externalType.parseValue(value, Value.INTERNAL_VALUE_TYPE) : value;
      }
      return externalValue;
    }

    /**
     * Returns whether target type is an array.
     *
     * @param targetType The target type name
     * @returns `true`, if array type (`false` otherwise)
     * @private
     */;
    Value._isArrayType = function _isArrayType(targetType) {
      if (!targetType) {
        return false;
      }
      return targetType === "array" || targetType.endsWith("[]");
    }

    /**
     * Returns the external value formatted as the internal string value.
     *
     * @param externalValue The value to be parsed
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The formatted value
     * @private
     */;
    _proto._externalToString = function _externalToString(externalValue, externalValueType) {
      let value;
      const externalType = this._getTypeInstance(externalValueType);
      if (externalValueType && Value._isArrayType(externalValueType)) {
        if (!Array.isArray(externalValue)) {
          externalValue = [externalValue];
        }
        value = externalValue.map(valueElement => {
          return externalType ? externalType.formatValue(valueElement, Value.INTERNAL_VALUE_TYPE) : valueElement;
        });
      } else {
        value = externalType ? externalType.formatValue(externalValue, Value.INTERNAL_VALUE_TYPE) : externalValue;
      }
      return value;
    }

    /**
     * Retrieves the default type instance for given type name.
     *
     * @param typeName The name of the type
     * @returns The type instance
     * @private
     */;
    _proto._getTypeInstance = function _getTypeInstance(typeName) {
      typeName = this.getElementTypeName(typeName) || typeName;
      switch (typeName) {
        case "string":
          return new StringType();
        case "number":
        case "int":
          return new IntegerType();
        case "float":
          return new FloatType();
        case "date":
          return new DateType();
        case "boolean":
          return new BooleanType();
        default:
          Log.error("Unexpected filter type");
          throw new Error("Unexpected filter type");
      }
    }

    /**
     * Returns the default operator name ("EQ").
     * Should be overridden on demand.
     *
     * @returns The default operator name
     * @protected
     */;
    _proto.getDefaultOperatorName = function getDefaultOperatorName() {
      return FilterOperatorUtil.getEQOperator().name;
    }

    /**
     * Returns first value of array or input.
     *
     * @param values Input condition value
     * @returns Unchanged input condition value
     * @protected
     */;
    _proto.formatConditionValues = function formatConditionValues(values) {
      return Array.isArray(values) && values.length ? values[0] : values;
    }

    /**
     * Returns the element type name.
     *
     * @param typeName The actual type name
     * @returns The type of its elements
     * @protected
     */;
    _proto.getElementTypeName = function getElementTypeName(typeName) {
      if (typeName !== null && typeName !== void 0 && typeName.endsWith("[]")) {
        return typeName.substring(0, typeName.length - 2);
      }
      return undefined;
    }

    /**
     * Returns the string value parsed to the external value type 'this.operator'.
     *
     * @param internalValue The internal string value to be formatted
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The formatted value
     * @protected
     */;
    _proto.formatValue = function formatValue(internalValue, externalValueType) {
      if (!internalValue) {
        return undefined;
      }
      const isMultiValueOperator = this._isMultiValueOperator(this.operator),
        internalType = this._getTypeInstance(Value.INTERNAL_VALUE_TYPE);

      //  from internal model string with operator
      const values = this.operator.parse(internalValue || "", internalType, FieldDisplay.Value, false);
      const value = !isMultiValueOperator && Array.isArray(values) ? values[0] : values;
      return this._stringToExternal(value, externalValueType); // The value bound to a custom filter
    }

    /**
     * Returns the value parsed to the internal string value.
     *
     * @param externalValue The value to be parsed
     * @param externalValueType The external value type, e.g. int, float[], string, etc.
     * @returns The parsed value
     * @protected
     */;
    _proto.parseValue = function parseValue(externalValue, externalValueType) {
      if (!externalValue) {
        return undefined;
      }
      const isMultiValueOperator = this._isMultiValueOperator(this.operator),
        externalType = this._getTypeInstance(externalValueType);
      const value = this._externalToString(externalValue, externalValueType);

      // Format to internal model string with operator
      const values = isMultiValueOperator ? value : [value];
      if (this.hasCustomOperator()) {
        // Return a complex object while parsing the bound value in sap.ui.model.PropertyBinding.js#_externalToRaw()
        return {
          operator: this.operator.name,
          values: [this.operator.format({
            values: values
          }, externalType)],
          validated: undefined
        };
      }
      // Return a simple string value to be stored in the internal 'filterValues' model
      return this.operator.format({
        values: values
      }, externalType);
    }

    /**
     * Validates whether the given value in model representation is valid.
     *
     * @param externalValue The value to be validated
     * @protected
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.validateValue = function validateValue(externalValue) {
      /* Do Nothing */
    };
    return Value;
  }(SimpleType), _class2.INTERNAL_VALUE_TYPE = "string", _class2.OPERATOR_VALUE_TYPE_STATIC = "static", _class2)) || _class);
  _exports = Value;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filter/type/Value", ["sap/base/Log","sap/fe/core/helpers/ClassSupport","sap/ui/mdc/condition/FilterOperatorUtil","sap/ui/mdc/condition/Operator","sap/ui/mdc/enum/FieldDisplay","sap/ui/model/SimpleType","sap/ui/model/type/Boolean","sap/ui/model/type/Date","sap/ui/model/type/Float","sap/ui/model/type/Integer","sap/ui/model/type/String"],function(e,t,r,n,a,o,i,s,u,p,l){"use strict";var f,c,d;var y={};var m=t.defineUI5Class;function _(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;T(e,t)}function T(e,t){T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return T(e,t)}let h=(f=m("sap.fe.macros.filter.type.Value"),f(c=(d=function(t){_(o,t);function o(e,n){var a;a=t.call(this,e,n)||this;const o=(e===null||e===void 0?void 0:e.operator)||a.getDefaultOperatorName();a.operator=r.getOperator(o);if(!a.operator&&o.includes(".")){a._registerCustomOperator(o)}return a}y=o;var f=o.prototype;f._registerCustomOperator=function e(t){const a=t.substring(0,t.lastIndexOf(".")).replace(/\./g,"/"),o=t.substring(t.lastIndexOf(".")+1);sap.ui.require([a],e=>{if(!e){return}this.operator=new n({filterOperator:"",tokenFormat:"",name:t,valueTypes:["self"],tokenParse:"^(.*)$",format:e=>this.formatConditionValues(e.values),parse:function(e,r,a,o){if(typeof e==="object"){if(e.operator!==t){throw Error("not matching operator")}return e.values}return n.prototype.parse.apply(this,[e,r,a,o])},getModelFilter:t=>e[o].call(e,this.formatConditionValues(t.values))});r.addOperator(this.operator)})};f._isMultiValueOperator=function e(t){return t.valueTypes.filter(function(e){return!!e&&e!==o.OPERATOR_VALUE_TYPE_STATIC}).length>1};f.hasCustomOperator=function e(){return this.operator.name.includes(".")};f._stringToExternal=function e(t,r){let n;const a=this._getTypeInstance(r);if(r&&o._isArrayType(r)){if(!Array.isArray(t)){t=[t]}n=t.map(e=>a?a.parseValue(e,o.INTERNAL_VALUE_TYPE):e)}else{n=a?a.parseValue(t,o.INTERNAL_VALUE_TYPE):t}return n};o._isArrayType=function e(t){if(!t){return false}return t==="array"||t.endsWith("[]")};f._externalToString=function e(t,r){let n;const a=this._getTypeInstance(r);if(r&&o._isArrayType(r)){if(!Array.isArray(t)){t=[t]}n=t.map(e=>a?a.formatValue(e,o.INTERNAL_VALUE_TYPE):e)}else{n=a?a.formatValue(t,o.INTERNAL_VALUE_TYPE):t}return n};f._getTypeInstance=function t(r){r=this.getElementTypeName(r)||r;switch(r){case"string":return new l;case"number":case"int":return new p;case"float":return new u;case"date":return new s;case"boolean":return new i;default:e.error("Unexpected filter type");throw new Error("Unexpected filter type")}};f.getDefaultOperatorName=function e(){return r.getEQOperator().name};f.formatConditionValues=function e(t){return Array.isArray(t)&&t.length?t[0]:t};f.getElementTypeName=function e(t){if(t!==null&&t!==void 0&&t.endsWith("[]")){return t.substring(0,t.length-2)}return undefined};f.formatValue=function e(t,r){if(!t){return undefined}const n=this._isMultiValueOperator(this.operator),i=this._getTypeInstance(o.INTERNAL_VALUE_TYPE);const s=this.operator.parse(t||"",i,a.Value,false);const u=!n&&Array.isArray(s)?s[0]:s;return this._stringToExternal(u,r)};f.parseValue=function e(t,r){if(!t){return undefined}const n=this._isMultiValueOperator(this.operator),a=this._getTypeInstance(r);const o=this._externalToString(t,r);const i=n?o:[o];if(this.hasCustomOperator()){return{operator:this.operator.name,values:[this.operator.format({values:i},a)],validated:undefined}}return this.operator.format({values:i},a)};f.validateValue=function e(t){};return o}(o),d.INTERNAL_VALUE_TYPE="string",d.OPERATOR_VALUE_TYPE_STATIC="static",d))||c);y=h;return y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBar.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/TemplateModel", "sap/fe/core/templating/FilterHelper", "sap/fe/macros/CommonHelper"], function (Log, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, DataVisualization, FilterBar, MetaModelConverter, MetaModelFunction, ModelHelper, StableIdHelper, TemplateModel, FilterHelper, CommonHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30;
  var _exports = {};
  var getFilterConditions = FilterHelper.getFilterConditions;
  var generate = StableIdHelper.generate;
  var getSearchRestrictions = MetaModelFunction.getSearchRestrictions;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var getSelectionFields = FilterBar.getSelectionFields;
  var getSelectionVariant = DataVisualization.getSelectionVariant;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const setCustomFilterFieldProperties = function (childFilterField, aggregationObject) {
    aggregationObject.slotName = aggregationObject.key;
    aggregationObject.key = aggregationObject.key.replace("InlineXML_", "");
    aggregationObject.label = childFilterField.getAttribute("label");
    aggregationObject.required = childFilterField.getAttribute("required") === "true";
    return aggregationObject;
  };

  /**
   * Building block for creating a FilterBar based on the metadata provided by OData V4.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:FilterBar
   *   id="SomeID"
   *   showAdaptFiltersButton="true"
   *   p13nMode=["Item","Value"]
   *   listBindingNames = "sap.fe.tableBinding"
   *   liveMode="true"
   *   search=".handlers.onSearch"
   *   filterChanged=".handlers.onFiltersChanged"
   * /&gt;
   * </pre>
   *
   * Building block for creating a FilterBar based on the metadata provided by OData V4.
   *
   * @since 1.94.0
   */
  let FilterBarBlock = (_dec = defineBuildingBlock({
    name: "FilterBar",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.filterBar.FilterBarAPI"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec3 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec5 = blockAttribute({
    type: "string"
  }), _dec6 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec7 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec8 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec9 = blockAttribute({
    type: "string"
  }), _dec10 = blockAttribute({
    type: "boolean"
  }), _dec11 = blockAttribute({
    type: "boolean"
  }), _dec12 = blockAttribute({
    type: "boolean"
  }), _dec13 = blockAttribute({
    type: "sap.ui.mdc.FilterBarP13nMode[]"
  }), _dec14 = blockAttribute({
    type: "string"
  }), _dec15 = blockAttribute({
    type: "boolean"
  }), _dec16 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec17 = blockAttribute({
    type: "string",
    required: false
  }), _dec18 = blockAttribute({
    type: "boolean"
  }), _dec19 = blockAttribute({
    type: "boolean"
  }), _dec20 = blockAttribute({
    type: "boolean"
  }), _dec21 = blockAttribute({
    type: "string"
  }), _dec22 = blockAttribute({
    type: "string"
  }), _dec23 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec24 = blockAttribute({
    type: "boolean"
  }), _dec25 = blockEvent(), _dec26 = blockEvent(), _dec27 = blockEvent(), _dec28 = blockEvent(), _dec29 = blockEvent(), _dec30 = blockEvent(), _dec31 = blockAggregation({
    type: "sap.fe.macros.FilterField",
    isPublic: true,
    hasVirtualNode: true,
    processAggregations: setCustomFilterFieldProperties
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FilterBarBlock, _BuildingBlockBase);
    /**
     * ID of the FilterBar
     */

    /**
     * selectionFields to be displayed
     */

    /**
     * Displays possible errors during the search in a message box
     */

    /**
     * ID of the assigned variant management
     */

    /**
     * Don't show the basic search field
     */

    /**
     * Enables the fallback to show all fields of the EntityType as filter fields if com.sap.vocabularies.UI.v1.SelectionFields are not present
     */

    /**
     * Handles visibility of the 'Adapt Filters' button on the FilterBar
     */

    /**
     * Specifies the personalization options for the filter bar.
     */

    /**
     * Specifies the Sematic Date Range option for the filter bar.
     */

    /**
     * If set the search will be automatically triggered, when a filter value was changed.
     */

    /**
     * Filter conditions to be applied to the filter bar
     */

    /**
     * If set to <code>true</code>, all search requests are ignored. Once it has been set to <code>false</code>,
     * a search is triggered immediately if one or more search requests have been triggered in the meantime
     * but were ignored based on the setting.
     */

    /**
     * Id of control that will allow for switching between normal and visual filter
     */

    /**
     * Handles the visibility of the 'Clear' button on the FilterBar.
     */

    /**
     * Event handler to react to the search event of the FilterBar
     */

    /**
     * Event handler to react to the filterChange event of the FilterBar
     */

    /**
     * Event handler to react to the stateChange event of the FilterBar.
     */

    /**
     * Event handler to react to the filterChanged event of the FilterBar. Exposes parameters from the MDC filter bar
     */

    /**
     * Event handler to react to the search event of the FilterBar. Exposes parameteres from the MDC filter bar
     */

    /**
     * Event handler to react to the afterClear event of the FilterBar
     */

    function FilterBarBlock(props, configuration, mSettings) {
      var _this$contextPath, _targetEntitySet$anno, _targetEntitySet$anno2, _targetEntitySet$anno3, _targetEntitySet$anno4;
      var _this;
      _this = _BuildingBlockBase.call(this, props, configuration, mSettings) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionFields", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBarDelegate", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showMessages", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantBackreference", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "hideBasicSearch", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableFallback", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showAdaptFiltersButton", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "p13nMode", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "propertyInfo", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useSemanticDateRange", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "liveMode", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterConditions", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "suspendSelection", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showDraftEditState", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isDraftCollaborative", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "toggleControlId", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "initialLayout", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showClearButton", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_applyIdToContent", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "search", _descriptor24, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterChanged", _descriptor25, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor26, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalFilterChanged", _descriptor27, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalSearch", _descriptor28, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "afterClear", _descriptor29, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterFields", _descriptor30, _assertThisInitialized(_this));
      _this.checkIfCollaborationDraftSupported = oMetaModel => {
        if (ModelHelper.isCollaborationDraftSupported(oMetaModel)) {
          _this.isDraftCollaborative = true;
        }
      };
      _this.getEntityTypePath = metaPathParts => {
        return metaPathParts[0].endsWith("/") ? metaPathParts[0] : metaPathParts[0] + "/";
      };
      _this.getSearch = () => {
        if (!_this.hideBasicSearch) {
          return xml`<control:basicSearchField>
			<mdc:FilterField
				id="${generate([_this.id, "BasicSearchField"])}"
				placeholder="{sap.fe.i18n>M_FILTERBAR_SEARCH}"
				conditions="{$filters>/conditions/$search}"
				dataType="sap.ui.model.odata.type.String"
				maxConditions="1"
			/>
		</control:basicSearchField>`;
        }
        return "";
      };
      _this.processSelectionFields = () => {
        var _this$_filterFields, _this$selectionFields, _this$_filterFields2, _this$_valueHelps;
        let draftEditState = "";
        if (_this.showDraftEditState) {
          draftEditState = `<core:Fragment fragmentName="sap.fe.macros.filter.DraftEditState" type="XML" />`;
        }
        _this._valueHelps = [];
        _this._filterFields = [];
        (_this$_filterFields = _this._filterFields) === null || _this$_filterFields === void 0 ? void 0 : _this$_filterFields.push(draftEditState);
        if (!Array.isArray(_this.selectionFields)) {
          _this.selectionFields = _this.selectionFields.getObject();
        }
        (_this$selectionFields = _this.selectionFields) === null || _this$selectionFields === void 0 ? void 0 : _this$selectionFields.forEach((selectionField, selectionFieldIdx) => {
          if (selectionField.availability === "Default") {
            _this.setFilterFieldsAndValueHelps(selectionField, selectionFieldIdx);
          }
        });
        _this._filterFields = ((_this$_filterFields2 = _this._filterFields) === null || _this$_filterFields2 === void 0 ? void 0 : _this$_filterFields2.length) > 0 ? _this._filterFields : "";
        _this._valueHelps = ((_this$_valueHelps = _this._valueHelps) === null || _this$_valueHelps === void 0 ? void 0 : _this$_valueHelps.length) > 0 ? _this._valueHelps : "";
      };
      _this.setFilterFieldsAndValueHelps = (selectionField, selectionFieldIdx) => {
        if (selectionField.template === undefined && selectionField.type !== "Slot") {
          _this.pushFilterFieldsAndValueHelps(selectionField);
        } else if (Array.isArray(_this._filterFields)) {
          var _this$_filterFields3;
          (_this$_filterFields3 = _this._filterFields) === null || _this$_filterFields3 === void 0 ? void 0 : _this$_filterFields3.push(xml`<template:with path="selectionFields>${selectionFieldIdx}" var="item">
					<core:Fragment fragmentName="sap.fe.macros.filter.CustomFilter" type="XML" />
				</template:with>`);
        }
      };
      _this.pushFilterFieldsAndValueHelps = selectionField => {
        if (Array.isArray(_this._filterFields)) {
          var _this$_filterFields4;
          (_this$_filterFields4 = _this._filterFields) === null || _this$_filterFields4 === void 0 ? void 0 : _this$_filterFields4.push(xml`<internalMacro:FilterField
			idPrefix="${generate([_this.id, "FilterField", CommonHelper.getNavigationPath(selectionField.annotationPath)])}"
			vhIdPrefix="${generate([_this.id, "FilterFieldValueHelp"])}"
			property="${selectionField.annotationPath}"
			contextPath="${_this._getContextPathForFilterField(selectionField, _this._internalContextPath)}"
			useSemanticDateRange="${_this.useSemanticDateRange}"
			settings="${CommonHelper.stringifyCustomData(selectionField.settings)}"
			visualFilter="${selectionField.visualFilter}"
			/>`);
        }
        if (Array.isArray(_this._valueHelps)) {
          var _this$_valueHelps2;
          (_this$_valueHelps2 = _this._valueHelps) === null || _this$_valueHelps2 === void 0 ? void 0 : _this$_valueHelps2.push(xml`<macro:ValueHelp
			idPrefix="${generate([_this.id, "FilterFieldValueHelp"])}"
			conditionModel="$filters"
			property="${selectionField.annotationPath}"
			contextPath="${_this._getContextPathForFilterField(selectionField, _this._internalContextPath)}"
			filterFieldValueHelp="true"
			useSemanticDateRange="${_this.useSemanticDateRange}"
		/>`);
        }
      };
      if (!_this.metaPath) {
        Log.error("Context Path not available for FilterBar Macro.");
        return _assertThisInitialized(_this);
      }
      const sMetaPath = _this.metaPath.getPath();
      let entityTypePath = "";
      const _metaPathParts = (sMetaPath === null || sMetaPath === void 0 ? void 0 : sMetaPath.split("/@com.sap.vocabularies.UI.v1.SelectionFields")) || []; // [0]: entityTypePath, [1]: SF Qualifier.
      if (_metaPathParts.length > 0) {
        entityTypePath = _this.getEntityTypePath(_metaPathParts);
      }
      const sEntitySetPath = ModelHelper.getEntitySetPath(entityTypePath);
      const _oMetaModel = (_this$contextPath = _this.contextPath) === null || _this$contextPath === void 0 ? void 0 : _this$contextPath.getModel();
      _this._internalContextPath = _oMetaModel === null || _oMetaModel === void 0 ? void 0 : _oMetaModel.createBindingContext(entityTypePath);
      const sObjectPath = "@com.sap.vocabularies.UI.v1.SelectionFields";
      const annotationPath = "@com.sap.vocabularies.UI.v1.SelectionFields" + (_metaPathParts.length && _metaPathParts[1] || "");
      const oExtraParams = {};
      oExtraParams[sObjectPath] = {
        filterFields: _this.filterFields
      };
      const oVisualizationObjectPath = getInvolvedDataModelObjects(_this._internalContextPath);
      const oConverterContext = _this.getConverterContext(oVisualizationObjectPath, undefined, mSettings, oExtraParams);
      if (!_this.propertyInfo) {
        _this.propertyInfo = getSelectionFields(oConverterContext, [], annotationPath).sPropertyInfo;
      }

      //Filter Fields and values to the field are filled based on the selectionFields and this would be empty in case of macro outside the FE template
      if (!_this.selectionFields) {
        const oSelectionFields = getSelectionFields(oConverterContext, [], annotationPath).selectionFields;
        _this.selectionFields = new TemplateModel(oSelectionFields, _oMetaModel).createBindingContext("/");
        const oEntityType = oConverterContext.getEntityType(),
          oSelectionVariant = getSelectionVariant(oEntityType, oConverterContext),
          oEntitySetContext = _oMetaModel.getContext(sEntitySetPath),
          oFilterConditions = getFilterConditions(oEntitySetContext, {
            selectionVariant: oSelectionVariant
          });
        _this.filterConditions = oFilterConditions;
      }
      _this._processPropertyInfos(_this.propertyInfo);
      const targetEntitySet = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath).targetEntitySet;
      if (targetEntitySet !== null && targetEntitySet !== void 0 && (_targetEntitySet$anno = targetEntitySet.annotations) !== null && _targetEntitySet$anno !== void 0 && (_targetEntitySet$anno2 = _targetEntitySet$anno.Common) !== null && _targetEntitySet$anno2 !== void 0 && _targetEntitySet$anno2.DraftRoot || targetEntitySet !== null && targetEntitySet !== void 0 && (_targetEntitySet$anno3 = targetEntitySet.annotations) !== null && _targetEntitySet$anno3 !== void 0 && (_targetEntitySet$anno4 = _targetEntitySet$anno3.Common) !== null && _targetEntitySet$anno4 !== void 0 && _targetEntitySet$anno4.DraftNode) {
        _this.showDraftEditState = true;
        _this.checkIfCollaborationDraftSupported(_oMetaModel);
      }
      if (_this._applyIdToContent) {
        _this._apiId = _this.id + "::FilterBar";
        _this._contentId = _this.id;
      } else {
        _this._apiId = _this.id;
        _this._contentId = _this.getContentId(_this.id + "");
      }
      if (_this.hideBasicSearch !== true) {
        const oSearchRestrictionAnnotation = getSearchRestrictions(sEntitySetPath, _oMetaModel);
        _this.hideBasicSearch = Boolean(oSearchRestrictionAnnotation && !oSearchRestrictionAnnotation.Searchable);
      }
      _this.processSelectionFields();
      return _this;
    }
    _exports = FilterBarBlock;
    var _proto = FilterBarBlock.prototype;
    _proto._processPropertyInfos = function _processPropertyInfos(propertyInfo) {
      const aParameterFields = [];
      if (propertyInfo) {
        const sFetchedProperties = propertyInfo.replace(/\\{/g, "{").replace(/\\}/g, "}");
        const aFetchedProperties = JSON.parse(sFetchedProperties);
        const editStateLabel = this.getTranslatedText("FILTERBAR_EDITING_STATUS");
        aFetchedProperties.forEach(function (propInfo) {
          if (propInfo.isParameter) {
            aParameterFields.push(propInfo.name);
          }
          if (propInfo.path === "$editState") {
            propInfo.label = editStateLabel;
          }
        });
        this.propertyInfo = JSON.stringify(aFetchedProperties).replace(/\{/g, "\\{").replace(/\}/g, "\\}");
      }
      this._parameters = JSON.stringify(aParameterFields);
    };
    _proto._getContextPathForFilterField = function _getContextPathForFilterField(selectionField, filterBarContextPath) {
      let contextPath = filterBarContextPath;
      if (selectionField.isParameter) {
        // Example:
        // FilterBarContextPath: /Customer/Set
        // ParameterPropertyPath: /Customer/P_CC
        // ContextPathForFilterField: /Customer
        const annoPath = selectionField.annotationPath;
        contextPath = annoPath.substring(0, annoPath.lastIndexOf("/") + 1);
      }
      return contextPath;
    };
    _proto.getTemplate = function getTemplate() {
      var _this$_internalContex;
      const internalContextPath = (_this$_internalContex = this._internalContextPath) === null || _this$_internalContex === void 0 ? void 0 : _this$_internalContex.getPath();
      let filterDelegate = "";
      if (this.filterBarDelegate) {
        filterDelegate = this.filterBarDelegate;
      } else {
        filterDelegate = "{name:'sap/fe/macros/filterBar/FilterBarDelegate', payload: {entityTypePath: '" + internalContextPath + "'}}";
      }
      return xml`<macroFilterBar:FilterBarAPI
        xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
        xmlns:core="sap.ui.core"
        xmlns:mdc="sap.ui.mdc"
        xmlns:control="sap.fe.core.controls"
        xmlns:macroFilterBar="sap.fe.macros.filterBar"
        xmlns:macro="sap.fe.macros"
        xmlns:internalMacro="sap.fe.macros.internal"
        xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		id="${this._apiId}"
		search="${this.search}"
		filterChanged="${this.filterChanged}"
		afterClear="${this.afterClear}"
		internalSearch="${this.internalSearch}"
		internalFilterChanged="${this.internalFilterChanged}"
		stateChange="${this.stateChange}"
	>
		<control:FilterBar
			core:require="{API: 'sap/fe/macros/filterBar/FilterBarAPI'}"
			id="${this._contentId}"
			liveMode="${this.liveMode}"
			delegate="${filterDelegate}"
			variantBackreference="${this.variantBackreference}"
			showAdaptFiltersButton="${this.showAdaptFiltersButton}"
			showClearButton="${this.showClearButton}"
			p13nMode="${this.p13nMode}"
			search="API.handleSearch($event)"
			filtersChanged="API.handleFilterChanged($event)"
			filterConditions="${this.filterConditions}"
			suspendSelection="${this.suspendSelection}"
			showMessages="${this.showMessages}"
			toggleControl="${this.toggleControlId}"
			initialLayout="${this.initialLayout}"
			propertyInfo="${this.propertyInfo}"
			customData:localId="${this.id}"
			visible="${this.visible}"
			customData:hideBasicSearch="${this.hideBasicSearch}"
			customData:showDraftEditState="${this.showDraftEditState}"
			customData:useSemanticDateRange="${this.useSemanticDateRange}"
			customData:entityType="${internalContextPath}"
			customData:parameters="${this._parameters}"
		>
			<control:dependents>
				${this._valueHelps}
			</control:dependents>
			${this.getSearch()}
			<control:filterItems>
				${this._filterFields}
			</control:filterItems>
		</control:FilterBar>
	</macroFilterBar:FilterBarAPI>`;
    };
    return FilterBarBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "selectionFields", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filterBarDelegate", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "showMessages", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "variantBackreference", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "hideBasicSearch", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "enableFallback", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "showAdaptFiltersButton", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "p13nMode", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "Item,Value";
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "propertyInfo", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "useSemanticDateRange", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "liveMode", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "filterConditions", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "suspendSelection", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "showDraftEditState", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "isDraftCollaborative", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "toggleControlId", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "initialLayout", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "compact";
    }
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "showClearButton", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "_applyIdToContent", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "search", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "filterChanged", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "internalFilterChanged", [_dec28], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "internalSearch", [_dec29], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "afterClear", [_dec30], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "filterFields", [_dec31], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = FilterBarBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBar.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/TemplateModel","sap/fe/core/templating/FilterHelper","sap/fe/macros/CommonHelper"],function(e,t,r,i,a,l,n,o,s,u,c,p,d){"use strict";var f,b,h,g,m,y,v,F,C,P,S,B,w,I,$,_,D,x,z,A,M,k,E,H,T,R,O,V,L,N,j,q,U,J,X,G,W,K,Q,Y,Z,ee,te,re,ie,ae,le,ne,oe,se,ue,ce,pe,de,fe,be,he,ge,me,ye,ve,Fe,Ce;var Pe={};var Se=p.getFilterConditions;var Be=u.generate;var we=o.getSearchRestrictions;var Ie=n.getInvolvedDataModelObjects;var $e=l.getSelectionFields;var _e=a.getSelectionVariant;var De=i.xml;var xe=r.defineBuildingBlock;var ze=r.blockEvent;var Ae=r.blockAttribute;var Me=r.blockAggregation;function ke(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function Ee(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function He(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Te(e,t)}function Te(e,t){Te=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return Te(e,t)}function Re(e,t,r,i,a){var l={};Object.keys(i).forEach(function(e){l[e]=i[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},l);if(a&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(a):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function Oe(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const Ve=function(e,t){t.slotName=t.key;t.key=t.key.replace("InlineXML_","");t.label=e.getAttribute("label");t.required=e.getAttribute("required")==="true";return t};let Le=(f=xe({name:"FilterBar",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.filterBar.FilterBarAPI"]}),b=Ae({type:"string",isPublic:true}),h=Ae({type:"boolean",isPublic:true}),g=Ae({type:"sap.ui.model.Context"}),m=Ae({type:"string"}),y=Ae({type:"sap.ui.model.Context",isPublic:true}),v=Ae({type:"sap.ui.model.Context",isPublic:true}),F=Ae({type:"boolean",isPublic:true}),C=Ae({type:"string"}),P=Ae({type:"boolean"}),S=Ae({type:"boolean"}),B=Ae({type:"boolean"}),w=Ae({type:"sap.ui.mdc.FilterBarP13nMode[]"}),I=Ae({type:"string"}),$=Ae({type:"boolean"}),_=Ae({type:"boolean",isPublic:true}),D=Ae({type:"string",required:false}),x=Ae({type:"boolean"}),z=Ae({type:"boolean"}),A=Ae({type:"boolean"}),M=Ae({type:"string"}),k=Ae({type:"string"}),E=Ae({type:"boolean",isPublic:true}),H=Ae({type:"boolean"}),T=ze(),R=ze(),O=ze(),V=ze(),L=ze(),N=ze(),j=Me({type:"sap.fe.macros.FilterField",isPublic:true,hasVirtualNode:true,processAggregations:Ve}),f(q=(U=function(t){He(r,t);function r(r,i,a){var l,n,o,u,p;var f;f=t.call(this,r,i,a)||this;ke(f,"id",J,Ee(f));ke(f,"visible",X,Ee(f));ke(f,"selectionFields",G,Ee(f));ke(f,"filterBarDelegate",W,Ee(f));ke(f,"metaPath",K,Ee(f));ke(f,"contextPath",Q,Ee(f));ke(f,"showMessages",Y,Ee(f));ke(f,"variantBackreference",Z,Ee(f));ke(f,"hideBasicSearch",ee,Ee(f));ke(f,"enableFallback",te,Ee(f));ke(f,"showAdaptFiltersButton",re,Ee(f));ke(f,"p13nMode",ie,Ee(f));ke(f,"propertyInfo",ae,Ee(f));ke(f,"useSemanticDateRange",le,Ee(f));ke(f,"liveMode",ne,Ee(f));ke(f,"filterConditions",oe,Ee(f));ke(f,"suspendSelection",se,Ee(f));ke(f,"showDraftEditState",ue,Ee(f));ke(f,"isDraftCollaborative",ce,Ee(f));ke(f,"toggleControlId",pe,Ee(f));ke(f,"initialLayout",de,Ee(f));ke(f,"showClearButton",fe,Ee(f));ke(f,"_applyIdToContent",be,Ee(f));ke(f,"search",he,Ee(f));ke(f,"filterChanged",ge,Ee(f));ke(f,"stateChange",me,Ee(f));ke(f,"internalFilterChanged",ye,Ee(f));ke(f,"internalSearch",ve,Ee(f));ke(f,"afterClear",Fe,Ee(f));ke(f,"filterFields",Ce,Ee(f));f.checkIfCollaborationDraftSupported=e=>{if(s.isCollaborationDraftSupported(e)){f.isDraftCollaborative=true}};f.getEntityTypePath=e=>e[0].endsWith("/")?e[0]:e[0]+"/";f.getSearch=()=>{if(!f.hideBasicSearch){return De`<control:basicSearchField>
			<mdc:FilterField
				id="${Be([f.id,"BasicSearchField"])}"
				placeholder="{sap.fe.i18n>M_FILTERBAR_SEARCH}"
				conditions="{$filters>/conditions/$search}"
				dataType="sap.ui.model.odata.type.String"
				maxConditions="1"
			/>
		</control:basicSearchField>`}return""};f.processSelectionFields=()=>{var e,t,r,i;let a="";if(f.showDraftEditState){a=`<core:Fragment fragmentName="sap.fe.macros.filter.DraftEditState" type="XML" />`}f._valueHelps=[];f._filterFields=[];(e=f._filterFields)===null||e===void 0?void 0:e.push(a);if(!Array.isArray(f.selectionFields)){f.selectionFields=f.selectionFields.getObject()}(t=f.selectionFields)===null||t===void 0?void 0:t.forEach((e,t)=>{if(e.availability==="Default"){f.setFilterFieldsAndValueHelps(e,t)}});f._filterFields=((r=f._filterFields)===null||r===void 0?void 0:r.length)>0?f._filterFields:"";f._valueHelps=((i=f._valueHelps)===null||i===void 0?void 0:i.length)>0?f._valueHelps:""};f.setFilterFieldsAndValueHelps=(e,t)=>{if(e.template===undefined&&e.type!=="Slot"){f.pushFilterFieldsAndValueHelps(e)}else if(Array.isArray(f._filterFields)){var r;(r=f._filterFields)===null||r===void 0?void 0:r.push(De`<template:with path="selectionFields>${t}" var="item">
					<core:Fragment fragmentName="sap.fe.macros.filter.CustomFilter" type="XML" />
				</template:with>`)}};f.pushFilterFieldsAndValueHelps=e=>{if(Array.isArray(f._filterFields)){var t;(t=f._filterFields)===null||t===void 0?void 0:t.push(De`<internalMacro:FilterField
			idPrefix="${Be([f.id,"FilterField",d.getNavigationPath(e.annotationPath)])}"
			vhIdPrefix="${Be([f.id,"FilterFieldValueHelp"])}"
			property="${e.annotationPath}"
			contextPath="${f._getContextPathForFilterField(e,f._internalContextPath)}"
			useSemanticDateRange="${f.useSemanticDateRange}"
			settings="${d.stringifyCustomData(e.settings)}"
			visualFilter="${e.visualFilter}"
			/>`)}if(Array.isArray(f._valueHelps)){var r;(r=f._valueHelps)===null||r===void 0?void 0:r.push(De`<macro:ValueHelp
			idPrefix="${Be([f.id,"FilterFieldValueHelp"])}"
			conditionModel="$filters"
			property="${e.annotationPath}"
			contextPath="${f._getContextPathForFilterField(e,f._internalContextPath)}"
			filterFieldValueHelp="true"
			useSemanticDateRange="${f.useSemanticDateRange}"
		/>`)}};if(!f.metaPath){e.error("Context Path not available for FilterBar Macro.");return Ee(f)}const b=f.metaPath.getPath();let h="";const g=(b===null||b===void 0?void 0:b.split("/@com.sap.vocabularies.UI.v1.SelectionFields"))||[];if(g.length>0){h=f.getEntityTypePath(g)}const m=s.getEntitySetPath(h);const y=(l=f.contextPath)===null||l===void 0?void 0:l.getModel();f._internalContextPath=y===null||y===void 0?void 0:y.createBindingContext(h);const v="@com.sap.vocabularies.UI.v1.SelectionFields";const F="@com.sap.vocabularies.UI.v1.SelectionFields"+(g.length&&g[1]||"");const C={};C[v]={filterFields:f.filterFields};const P=Ie(f._internalContextPath);const S=f.getConverterContext(P,undefined,a,C);if(!f.propertyInfo){f.propertyInfo=$e(S,[],F).sPropertyInfo}if(!f.selectionFields){const e=$e(S,[],F).selectionFields;f.selectionFields=new c(e,y).createBindingContext("/");const t=S.getEntityType(),r=_e(t,S),i=y.getContext(m),a=Se(i,{selectionVariant:r});f.filterConditions=a}f._processPropertyInfos(f.propertyInfo);const B=Ie(f.metaPath,f.contextPath).targetEntitySet;if(B!==null&&B!==void 0&&(n=B.annotations)!==null&&n!==void 0&&(o=n.Common)!==null&&o!==void 0&&o.DraftRoot||B!==null&&B!==void 0&&(u=B.annotations)!==null&&u!==void 0&&(p=u.Common)!==null&&p!==void 0&&p.DraftNode){f.showDraftEditState=true;f.checkIfCollaborationDraftSupported(y)}if(f._applyIdToContent){f._apiId=f.id+"::FilterBar";f._contentId=f.id}else{f._apiId=f.id;f._contentId=f.getContentId(f.id+"")}if(f.hideBasicSearch!==true){const e=we(m,y);f.hideBasicSearch=Boolean(e&&!e.Searchable)}f.processSelectionFields();return f}Pe=r;var i=r.prototype;i._processPropertyInfos=function e(t){const r=[];if(t){const e=t.replace(/\\{/g,"{").replace(/\\}/g,"}");const i=JSON.parse(e);const a=this.getTranslatedText("FILTERBAR_EDITING_STATUS");i.forEach(function(e){if(e.isParameter){r.push(e.name)}if(e.path==="$editState"){e.label=a}});this.propertyInfo=JSON.stringify(i).replace(/\{/g,"\\{").replace(/\}/g,"\\}")}this._parameters=JSON.stringify(r)};i._getContextPathForFilterField=function e(t,r){let i=r;if(t.isParameter){const e=t.annotationPath;i=e.substring(0,e.lastIndexOf("/")+1)}return i};i.getTemplate=function e(){var t;const r=(t=this._internalContextPath)===null||t===void 0?void 0:t.getPath();let i="";if(this.filterBarDelegate){i=this.filterBarDelegate}else{i="{name:'sap/fe/macros/filterBar/FilterBarDelegate', payload: {entityTypePath: '"+r+"'}}"}return De`<macroFilterBar:FilterBarAPI
        xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
        xmlns:core="sap.ui.core"
        xmlns:mdc="sap.ui.mdc"
        xmlns:control="sap.fe.core.controls"
        xmlns:macroFilterBar="sap.fe.macros.filterBar"
        xmlns:macro="sap.fe.macros"
        xmlns:internalMacro="sap.fe.macros.internal"
        xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		id="${this._apiId}"
		search="${this.search}"
		filterChanged="${this.filterChanged}"
		afterClear="${this.afterClear}"
		internalSearch="${this.internalSearch}"
		internalFilterChanged="${this.internalFilterChanged}"
		stateChange="${this.stateChange}"
	>
		<control:FilterBar
			core:require="{API: 'sap/fe/macros/filterBar/FilterBarAPI'}"
			id="${this._contentId}"
			liveMode="${this.liveMode}"
			delegate="${i}"
			variantBackreference="${this.variantBackreference}"
			showAdaptFiltersButton="${this.showAdaptFiltersButton}"
			showClearButton="${this.showClearButton}"
			p13nMode="${this.p13nMode}"
			search="API.handleSearch($event)"
			filtersChanged="API.handleFilterChanged($event)"
			filterConditions="${this.filterConditions}"
			suspendSelection="${this.suspendSelection}"
			showMessages="${this.showMessages}"
			toggleControl="${this.toggleControlId}"
			initialLayout="${this.initialLayout}"
			propertyInfo="${this.propertyInfo}"
			customData:localId="${this.id}"
			visible="${this.visible}"
			customData:hideBasicSearch="${this.hideBasicSearch}"
			customData:showDraftEditState="${this.showDraftEditState}"
			customData:useSemanticDateRange="${this.useSemanticDateRange}"
			customData:entityType="${r}"
			customData:parameters="${this._parameters}"
		>
			<control:dependents>
				${this._valueHelps}
			</control:dependents>
			${this.getSearch()}
			<control:filterItems>
				${this._filterFields}
			</control:filterItems>
		</control:FilterBar>
	</macroFilterBar:FilterBarAPI>`};return r}(t),J=Re(U.prototype,"id",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),X=Re(U.prototype,"visible",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),G=Re(U.prototype,"selectionFields",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),W=Re(U.prototype,"filterBarDelegate",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),K=Re(U.prototype,"metaPath",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),Q=Re(U.prototype,"contextPath",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),Y=Re(U.prototype,"showMessages",[F],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),Z=Re(U.prototype,"variantBackreference",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),ee=Re(U.prototype,"hideBasicSearch",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),te=Re(U.prototype,"enableFallback",[S],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),re=Re(U.prototype,"showAdaptFiltersButton",[B],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),ie=Re(U.prototype,"p13nMode",[w],{configurable:true,enumerable:true,writable:true,initializer:function(){return"Item,Value"}}),ae=Re(U.prototype,"propertyInfo",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),le=Re(U.prototype,"useSemanticDateRange",[$],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),ne=Re(U.prototype,"liveMode",[_],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),oe=Re(U.prototype,"filterConditions",[D],{configurable:true,enumerable:true,writable:true,initializer:null}),se=Re(U.prototype,"suspendSelection",[x],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),ue=Re(U.prototype,"showDraftEditState",[z],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),ce=Re(U.prototype,"isDraftCollaborative",[A],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),pe=Re(U.prototype,"toggleControlId",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),de=Re(U.prototype,"initialLayout",[k],{configurable:true,enumerable:true,writable:true,initializer:function(){return"compact"}}),fe=Re(U.prototype,"showClearButton",[E],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),be=Re(U.prototype,"_applyIdToContent",[H],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),he=Re(U.prototype,"search",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),ge=Re(U.prototype,"filterChanged",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),me=Re(U.prototype,"stateChange",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),ye=Re(U.prototype,"internalFilterChanged",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),ve=Re(U.prototype,"internalSearch",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),Fe=Re(U.prototype,"afterClear",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),Ce=Re(U.prototype,"filterFields",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),U))||q);Pe=Le;return Pe},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBarAPI-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/SemanticDateOperators", "sap/fe/core/StateFilterToSelectionVariant", "sap/fe/macros/filter/FilterUtils", "sap/ui/mdc/p13n/StateUtil", "../MacroAPI"], function (Log, merge, ClassSupport, SemanticDateOperators, StateFiltersToSelectionVariant, FilterUtils, StateUtil, MacroAPI) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
  var xmlEventHandler = ClassSupport.xmlEventHandler;
  var property = ClassSupport.property;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Building block for creating a FilterBar based on the metadata provided by OData V4.
   * <br>
   * Usually, a SelectionFields annotation is expected.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:FilterBar id="MyFilterBar" metaPath="@com.sap.vocabularies.UI.v1.SelectionFields" /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.FilterBar
   * @public
   */
  let FilterBarAPI = (_dec = defineUI5Class("sap.fe.macros.filterBar.FilterBarAPI", {
    returnTypes: ["sap.ui.core.Control"]
  }), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "string",
    expectedAnnotations: ["com.sap.vocabularies.UI.v1.SelectionFields"],
    expectedTypes: ["EntitySet", "EntityType"]
  }), _dec4 = property({
    type: "string",
    expectedTypes: ["EntitySet", "EntityType", "NavigationProperty"]
  }), _dec5 = property({
    type: "boolean",
    defaultValue: false
  }), _dec6 = property({
    type: "boolean",
    defaultValue: true
  }), _dec7 = property({
    type: "boolean",
    defaultValue: true
  }), _dec8 = property({
    type: "boolean",
    defaultValue: false
  }), _dec9 = aggregation({
    type: "sap.fe.macros.FilterField",
    multiple: true
  }), _dec10 = event(), _dec11 = event(), _dec12 = event(), _dec13 = event(), _dec14 = event(), _dec15 = event(), _dec16 = xmlEventHandler(), _dec17 = xmlEventHandler(), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(FilterBarAPI, _MacroAPI);
    function FilterBarAPI() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MacroAPI.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "liveMode", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showMessages", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showClearButton", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterFields", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "search", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalSearch", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterChanged", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "afterClear", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalFilterChanged", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor14, _assertThisInitialized(_this));
      _this.triggerSearch = async () => {
        const filterBar = _this.content;
        try {
          if (filterBar) {
            await filterBar.waitForInitialization();
            return await filterBar.triggerSearch();
          }
        } catch (err) {
          const message = err instanceof Error ? err.message : String(err);
          Log.error(`FE : Buildingblock : FilterBar : ${message}`);
          throw Error(message);
        }
      };
      _this.isSemanticDateFilterApplied = () => {
        return !SemanticDateOperators.hasSemanticDateOperations(_this.content.getConditions());
      };
      return _this;
    }
    var _proto = FilterBarAPI.prototype;
    _proto.handleSearch = function handleSearch(oEvent) {
      const oFilterBar = oEvent.getSource();
      const oEventParameters = oEvent.getParameters();
      if (oFilterBar) {
        const oConditions = oFilterBar.getFilterConditions();
        const eventParameters = this._prepareEventParameters(oFilterBar);
        this.fireInternalSearch(merge({
          conditions: oConditions
        }, oEventParameters));
        this.fireSearch(eventParameters);
      }
    };
    _proto.handleFilterChanged = function handleFilterChanged(oEvent) {
      const oFilterBar = oEvent.getSource();
      const oEventParameters = oEvent.getParameters();
      if (oFilterBar) {
        const oConditions = oFilterBar.getFilterConditions();
        const eventParameters = this._prepareEventParameters(oFilterBar);
        this.fireInternalFilterChanged(merge({
          conditions: oConditions
        }, oEventParameters));
        this.fireFilterChanged(eventParameters);
      }
    };
    _proto._prepareEventParameters = function _prepareEventParameters(oFilterBar) {
      const {
        parameters,
        filters,
        search
      } = FilterUtils.getFilters(oFilterBar);
      return {
        parameters,
        filters,
        search
      };
    }

    /**
     * Set the filter values for the given property in the filter bar.
     * The filter values can be either a single value or an array of values.
     * Each filter value must be represented as a primitive value.
     *
     * @param sConditionPath The path to the property as a condition path
     * @param [sOperator] The operator to be used (optional) - if not set, the default operator (EQ) will be used
     * @param vValues The values to be applied
     * @returns A promise for asynchronous handling
     * @public
     */;
    _proto.setFilterValues = function setFilterValues(sConditionPath, sOperator, vValues) {
      if (arguments.length === 2) {
        vValues = sOperator;
        return FilterUtils.setFilterValues(this.content, sConditionPath, vValues);
      }
      return FilterUtils.setFilterValues(this.content, sConditionPath, sOperator, vValues);
    }

    /**
     * Get the Active Filters Text Summary for the filter bar.
     *
     * @returns Active filters summary as text
     * @public
     */;
    _proto.getActiveFiltersText = function getActiveFiltersText() {
      var _oFilterBar$getAssign;
      const oFilterBar = this.content;
      return (oFilterBar === null || oFilterBar === void 0 ? void 0 : (_oFilterBar$getAssign = oFilterBar.getAssignedFiltersText()) === null || _oFilterBar$getAssign === void 0 ? void 0 : _oFilterBar$getAssign.filtersText) || "";
    }

    /**
     * Provides all the filters that are currently active
     * along with the search expression.
     *
     * @returns {{filters: sap.ui.model.Filter[]|undefined, search: string|undefined}} An array of active filters and the search expression.
     * @public
     */;
    _proto.getFilters = function getFilters() {
      return FilterUtils.getFilters(this.content);
    }

    /**
     * Triggers the API search on the filter bar.
     *
     * @returns Returns a promise which resolves if filter go is triggered successfully; otherwise gets rejected.
     * @public
     */;
    /**
     * Get the selection variant from the filter bar.
     *
     *
     * @returns A promise which resolves with a {@link sap.fe.navigation.SelectionVariant}
     */
    _proto.getSelectionVariant = async function getSelectionVariant() {
      try {
        const filterBar = this.content;
        const filterState = await StateUtil.retrieveExternalState(filterBar);
        const filterObject = filterState.filter;
        const parameters = filterBar.data("parameters");
        return StateFiltersToSelectionVariant.getSelectionVariantFromConditions(filterObject, filterBar.getPropertyHelper(), parameters);
      } catch (error) {
        const id = this.getId();
        const message = error instanceof Error ? error.message : String(error);
        Log.error(`FilterBar Building Block (${id}) - get selection variant failed : ${message}`);
        throw Error(message);
      }
    };
    return FilterBarAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "liveMode", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "showMessages", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "showClearButton", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "filterFields", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "search", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "internalSearch", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "filterChanged", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "afterClear", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "internalFilterChanged", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "handleSearch", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "handleSearch"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFilterChanged", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFilterChanged"), _class2.prototype)), _class2)) || _class);
  return FilterBarAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBarAPI", ["sap/base/Log","sap/base/util/merge","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/SemanticDateOperators","sap/fe/core/StateFilterToSelectionVariant","sap/fe/macros/filter/FilterUtils","sap/ui/mdc/p13n/StateUtil","../MacroAPI"],function(e,t,r,i,n,a,l,o){"use strict";var u,s,c,p,f,b,g,h,d,y,m,v,w,F,S,z,C,P,E,O,x,V,B,T,j,I,A,_,D,M,U,k,$;var H=r.xmlEventHandler;var L=r.property;var N=r.event;var R=r.defineUI5Class;var q=r.aggregation;function G(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function J(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function K(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Q(e,t)}function Q(e,t){Q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return Q(e,t)}function W(e,t,r,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function X(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let Y=(u=R("sap.fe.macros.filterBar.FilterBarAPI",{returnTypes:["sap.ui.core.Control"]}),s=L({type:"string"}),c=L({type:"string",expectedAnnotations:["com.sap.vocabularies.UI.v1.SelectionFields"],expectedTypes:["EntitySet","EntityType"]}),p=L({type:"string",expectedTypes:["EntitySet","EntityType","NavigationProperty"]}),f=L({type:"boolean",defaultValue:false}),b=L({type:"boolean",defaultValue:true}),g=L({type:"boolean",defaultValue:true}),h=L({type:"boolean",defaultValue:false}),d=q({type:"sap.fe.macros.FilterField",multiple:true}),y=N(),m=N(),v=N(),w=N(),F=N(),S=N(),z=H(),C=H(),u(P=(E=function(r){K(o,r);function o(){var t;for(var n=arguments.length,a=new Array(n),l=0;l<n;l++){a[l]=arguments[l]}t=r.call(this,...a)||this;G(t,"id",O,J(t));G(t,"metaPath",x,J(t));G(t,"contextPath",V,J(t));G(t,"liveMode",B,J(t));G(t,"visible",T,J(t));G(t,"showMessages",j,J(t));G(t,"showClearButton",I,J(t));G(t,"filterFields",A,J(t));G(t,"search",_,J(t));G(t,"internalSearch",D,J(t));G(t,"filterChanged",M,J(t));G(t,"afterClear",U,J(t));G(t,"internalFilterChanged",k,J(t));G(t,"stateChange",$,J(t));t.triggerSearch=async()=>{const r=t.content;try{if(r){await r.waitForInitialization();return await r.triggerSearch()}}catch(t){const r=t instanceof Error?t.message:String(t);e.error(`FE : Buildingblock : FilterBar : ${r}`);throw Error(r)}};t.isSemanticDateFilterApplied=()=>!i.hasSemanticDateOperations(t.content.getConditions());return t}var u=o.prototype;u.handleSearch=function e(r){const i=r.getSource();const n=r.getParameters();if(i){const e=i.getFilterConditions();const r=this._prepareEventParameters(i);this.fireInternalSearch(t({conditions:e},n));this.fireSearch(r)}};u.handleFilterChanged=function e(r){const i=r.getSource();const n=r.getParameters();if(i){const e=i.getFilterConditions();const r=this._prepareEventParameters(i);this.fireInternalFilterChanged(t({conditions:e},n));this.fireFilterChanged(r)}};u._prepareEventParameters=function e(t){const{parameters:r,filters:i,search:n}=a.getFilters(t);return{parameters:r,filters:i,search:n}};u.setFilterValues=function e(t,r,i){if(arguments.length===2){i=r;return a.setFilterValues(this.content,t,i)}return a.setFilterValues(this.content,t,r,i)};u.getActiveFiltersText=function e(){var t;const r=this.content;return(r===null||r===void 0?void 0:(t=r.getAssignedFiltersText())===null||t===void 0?void 0:t.filtersText)||""};u.getFilters=function e(){return a.getFilters(this.content)};u.getSelectionVariant=async function t(){try{const e=this.content;const t=await l.retrieveExternalState(e);const r=t.filter;const i=e.data("parameters");return n.getSelectionVariantFromConditions(r,e.getPropertyHelper(),i)}catch(t){const r=this.getId();const i=t instanceof Error?t.message:String(t);e.error(`FilterBar Building Block (${r}) - get selection variant failed : ${i}`);throw Error(i)}};return o}(o),O=W(E.prototype,"id",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),x=W(E.prototype,"metaPath",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),V=W(E.prototype,"contextPath",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),B=W(E.prototype,"liveMode",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),T=W(E.prototype,"visible",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),j=W(E.prototype,"showMessages",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),I=W(E.prototype,"showClearButton",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),A=W(E.prototype,"filterFields",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),_=W(E.prototype,"search",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),D=W(E.prototype,"internalSearch",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),M=W(E.prototype,"filterChanged",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),U=W(E.prototype,"afterClear",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),k=W(E.prototype,"internalFilterChanged",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),$=W(E.prototype,"stateChange",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),W(E.prototype,"handleSearch",[z],Object.getOwnPropertyDescriptor(E.prototype,"handleSearch"),E.prototype),W(E.prototype,"handleFilterChanged",[C],Object.getOwnPropertyDescriptor(E.prototype,"handleFilterChanged"),E.prototype),E))||P);return Y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBarDelegate-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/TemplateModel", "sap/fe/core/templating/PropertyFormatters", "sap/fe/core/type/EDM", "sap/fe/core/type/TypeUtil", "sap/fe/macros/CommonHelper", "sap/fe/macros/DelegateUtil", "sap/fe/macros/filter/FilterUtils", "sap/ui/mdc/FilterBarDelegate", "sap/ui/model/json/JSONModel"], function (Log, mergeObjects, CommonUtils, FilterBar, MetaModelFunction, ModelHelper, ResourceModelHelper, StableIdHelper, TemplateModel, PropertyFormatters, EDM, TypeUtil, CommonHelper, DelegateUtil, FilterUtils, FilterBarDelegate, JSONModel) {
  "use strict";

  var getModelType = EDM.getModelType;
  var hasValueHelp = PropertyFormatters.hasValueHelp;
  var generate = StableIdHelper.generate;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var getLocalizedText = ResourceModelHelper.getLocalizedText;
  var isPropertyFilterable = MetaModelFunction.isPropertyFilterable;
  var processSelectionFields = FilterBar.processSelectionFields;
  const ODataFilterBarDelegate = Object.assign({}, FilterBarDelegate);
  ODataFilterBarDelegate.apiVersion = 2;
  const EDIT_STATE_PROPERTY_NAME = "$editState",
    SEARCH_PROPERTY_NAME = "$search",
    VALUE_HELP_TYPE = "FilterFieldValueHelp",
    FETCHED_PROPERTIES_DATA_KEY = "sap_fe_FilterBarDelegate_propertyInfoMap",
    CONDITION_PATH_TO_PROPERTY_PATH_REGEX = /[+*]/g;
  function _templateEditState(sIdPrefix, metaModel, oModifier) {
    const oThis = new JSONModel({
        id: sIdPrefix,
        isDraftCollaborative: ModelHelper.isCollaborationDraftSupported(metaModel)
      }),
      oPreprocessorSettings = {
        bindingContexts: {
          this: oThis.createBindingContext("/")
        },
        models: {
          //"this.i18n": ResourceModel.getModel(), TODO: To be checked why this is needed, should not be needed at all
          this: oThis
        }
      };
    return DelegateUtil.templateControlFragment("sap.fe.macros.filter.DraftEditState", oPreprocessorSettings, undefined, oModifier).finally(function () {
      oThis.destroy();
    });
  }
  ODataFilterBarDelegate._templateCustomFilter = async function (oFilterBar, sIdPrefix, oSelectionFieldInfo, oMetaModel, oModifier) {
    const sEntityTypePath = await DelegateUtil.getCustomData(oFilterBar, "entityType", oModifier);
    const oThis = new JSONModel({
        id: sIdPrefix
      }),
      oItemModel = new TemplateModel(oSelectionFieldInfo, oMetaModel),
      oPreprocessorSettings = {
        bindingContexts: {
          contextPath: oMetaModel.createBindingContext(sEntityTypePath),
          this: oThis.createBindingContext("/"),
          item: oItemModel.createBindingContext("/")
        },
        models: {
          contextPath: oMetaModel,
          this: oThis,
          item: oItemModel
        }
      },
      oView = CommonUtils.getTargetView(oFilterBar),
      oController = oView ? oView.getController() : undefined,
      oOptions = {
        controller: oController ? oController : undefined,
        view: oView
      };
    return DelegateUtil.templateControlFragment("sap.fe.macros.filter.CustomFilter", oPreprocessorSettings, oOptions, oModifier).finally(function () {
      oThis.destroy();
      oItemModel.destroy();
    });
  };
  function _getPropertyPath(sConditionPath) {
    return sConditionPath.replace(CONDITION_PATH_TO_PROPERTY_PATH_REGEX, "");
  }
  ODataFilterBarDelegate._findSelectionField = function (aSelectionFields, sFlexName) {
    return aSelectionFields.find(function (oSelectionField) {
      return (oSelectionField.conditionPath === sFlexName || oSelectionField.conditionPath.replaceAll(/\*/g, "") === sFlexName) && oSelectionField.availability !== "Hidden";
    });
  };
  function _generateIdPrefix(sFilterBarId, sControlType, sNavigationPrefix) {
    return sNavigationPrefix ? generate([sFilterBarId, sControlType, sNavigationPrefix]) : generate([sFilterBarId, sControlType]);
  }
  function _templateValueHelp(oSettings, oParameters) {
    const oThis = new JSONModel({
      idPrefix: oParameters.sVhIdPrefix,
      conditionModel: "$filters",
      navigationPrefix: oParameters.sNavigationPrefix ? `/${oParameters.sNavigationPrefix}` : "",
      filterFieldValueHelp: true,
      useSemanticDateRange: oParameters.bUseSemanticDateRange
    });
    const oPreprocessorSettings = mergeObjects({}, oSettings, {
      bindingContexts: {
        this: oThis.createBindingContext("/")
      },
      models: {
        this: oThis
      }
    });
    return Promise.resolve(DelegateUtil.templateControlFragment("sap.fe.macros.internal.valuehelp.ValueHelp", oPreprocessorSettings, {
      isXML: oSettings.isXML
    })).then(function (aVHElements) {
      if (aVHElements) {
        const sAggregationName = "dependents";
        //Some filter fields have the PersistenceProvider aggregation besides the FVH :
        if (aVHElements.length) {
          aVHElements.forEach(function (elt) {
            if (oParameters.oModifier) {
              oParameters.oModifier.insertAggregation(oParameters.oControl, sAggregationName, elt, 0);
            } else {
              oParameters.oControl.insertAggregation(sAggregationName, elt, 0, false);
            }
          });
        } else if (oParameters.oModifier) {
          oParameters.oModifier.insertAggregation(oParameters.oControl, sAggregationName, aVHElements, 0);
        } else {
          oParameters.oControl.insertAggregation(sAggregationName, aVHElements, 0, false);
        }
      }
    }).catch(function (oError) {
      Log.error("Error while evaluating DelegateUtil.isValueHelpRequired", oError);
    }).finally(function () {
      oThis.destroy();
    });
  }
  async function _addXMLCustomFilterField(oFilterBar, oModifier, sPropertyPath) {
    try {
      const aDependents = await Promise.resolve(oModifier.getAggregation(oFilterBar, "dependents"));
      let i;
      if (aDependents && aDependents.length > 1) {
        for (i = 0; i <= aDependents.length; i++) {
          const oFilterField = aDependents[i];
          if (oFilterField && oFilterField.isA("sap.ui.mdc.FilterField")) {
            const sDataProperty = oFilterField.getFieldPath(),
              sFilterFieldId = oFilterField.getId();
            if (sPropertyPath === sDataProperty && sFilterFieldId.indexOf("CustomFilterField")) {
              return Promise.resolve(oFilterField);
            }
          }
        }
      }
    } catch (oError) {
      Log.error("Filter Cannot be added", oError);
    }
  }
  function _templateFilterField(oSettings, oParameters, pageModel) {
    const oThis = new JSONModel({
      idPrefix: oParameters.sIdPrefix,
      vhIdPrefix: oParameters.sVhIdPrefix,
      propertyPath: oParameters.sPropertyName,
      navigationPrefix: oParameters.sNavigationPrefix ? `/${oParameters.sNavigationPrefix}` : "",
      useSemanticDateRange: oParameters.bUseSemanticDateRange,
      settings: oParameters.oSettings,
      visualFilter: oParameters.visualFilter
    });
    const oMetaModel = oParameters.oMetaModel;
    const oVisualFilter = new TemplateModel(oParameters.visualFilter, oMetaModel);
    const oPreprocessorSettings = mergeObjects({}, oSettings, {
      bindingContexts: {
        this: oThis.createBindingContext("/"),
        visualFilter: oVisualFilter.createBindingContext("/")
      },
      models: {
        this: oThis,
        visualFilter: oVisualFilter,
        metaModel: oMetaModel,
        converterContext: pageModel
      }
    });
    return DelegateUtil.templateControlFragment("sap.fe.macros.internal.filterField.FilterFieldTemplate", oPreprocessorSettings, {
      isXML: oSettings.isXML
    }).finally(function () {
      oThis.destroy();
    });
  }
  async function _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, sPropertyInfoName) {
    try {
      sPropertyInfoName = sPropertyInfoName.replace("*", "");
      const sPropertyInfoKey = generate([sPropertyInfoName]); //Making sure that navigation property names are generated properly e.g. _Item::Material
      if (mPropertyBag && !mPropertyBag.modifier) {
        throw "FilterBar Delegate method called without modifier.";
      }
      const delegate = await mPropertyBag.modifier.getProperty(oParentControl, "delegate");
      const aPropertyInfo = await mPropertyBag.modifier.getProperty(oParentControl, "propertyInfo");
      //We do not get propertyInfo in case of table filters
      if (aPropertyInfo) {
        const hasPropertyInfo = aPropertyInfo.some(function (prop) {
          return prop.key === sPropertyInfoKey || prop.name === sPropertyInfoKey;
        });
        if (!hasPropertyInfo) {
          const entityTypePath = delegate.payload.entityTypePath;
          const converterContext = FilterUtils.createConverterContext(oParentControl, entityTypePath, oMetaModel, mPropertyBag.appComponent);
          const entityType = converterContext.getEntityType();
          let filterField = FilterUtils.getFilterField(sPropertyInfoName, converterContext, entityType);
          filterField = FilterUtils.buildProperyInfo(filterField, converterContext);
          aPropertyInfo.push(filterField);
          mPropertyBag.modifier.setProperty(oParentControl, "propertyInfo", aPropertyInfo);
        }
      }
    } catch (errorMsg) {
      Log.warning(`${oParentControl.getId()} : ${errorMsg}`);
    }
  }

  /**
   * Method responsible for creating filter field in standalone mode / in the personalization settings of the filter bar.
   *
   * @param sPropertyInfoName Name of the property being added as the filter field
   * @param oParentControl Parent control instance to which the filter field is added
   * @param mPropertyBag Instance of the property bag from Flex API
   * @returns Once resolved, a filter field definition is returned
   */
  ODataFilterBarDelegate.addItem = async function (oParentControl, sPropertyInfoName, mPropertyBag) {
    if (!mPropertyBag) {
      // Invoked during runtime.
      return ODataFilterBarDelegate._addP13nItem(sPropertyInfoName, oParentControl);
    }
    const modifier = mPropertyBag.modifier;
    const model = mPropertyBag && mPropertyBag.appComponent && mPropertyBag.appComponent.getModel();
    const oMetaModel = model && model.getMetaModel();
    if (!oMetaModel) {
      return Promise.resolve(null);
    }
    const isXML = modifier && modifier.targets === "xmlTree";
    if (isXML) {
      await _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, sPropertyInfoName);
    }
    return ODataFilterBarDelegate._addFlexItem(sPropertyInfoName, oParentControl, oMetaModel, modifier, mPropertyBag.appComponent);
  };

  /**
   * Method responsible for removing filter field in standalone / personalization filter bar.
   *
   * @param oFilterFieldProperty Object of the filter field property being removed as filter field
   * @param oParentControl Parent control instance from which the filter field is removed
   * @param mPropertyBag Instance of property bag from Flex API
   * @returns The resolved promise
   */
  ODataFilterBarDelegate.removeItem = async function (oParentControl, oFilterFieldProperty, mPropertyBag) {
    let doRemoveItem = true;
    const modifier = mPropertyBag.modifier;
    const isXML = modifier && modifier.targets === "xmlTree";
    if (isXML && !oParentControl.data("sap_fe_FilterBarDelegate_propertyInfoMap")) {
      const model = mPropertyBag && mPropertyBag.appComponent && mPropertyBag.appComponent.getModel();
      const oMetaModel = model && model.getMetaModel();
      if (!oMetaModel) {
        return Promise.resolve(null);
      }
      if (typeof oFilterFieldProperty !== "string" && oFilterFieldProperty.getFieldPath()) {
        await _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, oFilterFieldProperty.getFieldPath());
      } else {
        await _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, oFilterFieldProperty);
      }
    }
    if (typeof oFilterFieldProperty !== "string" && oFilterFieldProperty.isA && oFilterFieldProperty.isA("sap.ui.mdc.FilterField")) {
      if (oFilterFieldProperty.data("isSlot") === "true" && mPropertyBag) {
        // Inserting into the modifier creates a change from flex also filter is been removed hence promise is resolved to false
        modifier.insertAggregation(oParentControl, "dependents", oFilterFieldProperty);
        doRemoveItem = false;
      }
    }
    return Promise.resolve(doRemoveItem);
  };

  /**
   * Method responsible for creating filter field condition in standalone / personalization filter bar.
   *
   * @param sPropertyInfoName Name of the property being added as filter field
   * @param oParentControl Parent control instance to which the filter field is added
   * @param mPropertyBag Instance of property bag from Flex API
   * @returns The resolved promise
   */
  ODataFilterBarDelegate.addCondition = async function (oParentControl, sPropertyInfoName, mPropertyBag) {
    const modifier = mPropertyBag.modifier;
    const isXML = modifier && modifier.targets === "xmlTree";
    if (isXML) {
      const model = mPropertyBag && mPropertyBag.appComponent && mPropertyBag.appComponent.getModel();
      const oMetaModel = model && model.getMetaModel();
      if (!oMetaModel) {
        return Promise.resolve(null);
      }
      await _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, sPropertyInfoName);
    }
    return Promise.resolve();
  };

  /**
   * Method responsible for removing filter field in standalone / personalization filter bar.
   *
   * @param sPropertyInfoName Name of the property being removed as filter field
   * @param oParentControl Parent control instance from which the filter field is removed
   * @param mPropertyBag Instance of property bag from Flex API
   * @returns The resolved promise
   */
  ODataFilterBarDelegate.removeCondition = async function (oParentControl, sPropertyInfoName, mPropertyBag) {
    if (!oParentControl.data("sap_fe_FilterBarDelegate_propertyInfoMap")) {
      const modifier = mPropertyBag.modifier;
      const isXML = modifier && modifier.targets === "xmlTree";
      if (isXML) {
        const model = mPropertyBag && mPropertyBag.appComponent && mPropertyBag.appComponent.getModel();
        const oMetaModel = model && model.getMetaModel();
        if (!oMetaModel) {
          return Promise.resolve(null);
        }
        await _addPropertyInfo(oParentControl, mPropertyBag, oMetaModel, sPropertyInfoName);
      }
    }
    return Promise.resolve();
  };
  /**
   * Clears all input values of visible filter fields in the filter bar.
   *
   * @param oFilterControl Instance of the FilterBar control
   * @returns The resolved promise
   */
  ODataFilterBarDelegate.clearFilters = async function (oFilterControl) {
    return FilterUtils.clearFilterValues(oFilterControl);
  };
  /**
   * Creates the filter field in the table adaptation of the FilterBar.
   *
   * @param sPropertyInfoName The property name of the entity type for which the filter field needs to be created
   * @param oParentControl Instance of the parent control
   * @returns Once resolved, a filter field definition is returned
   */
  ODataFilterBarDelegate._addP13nItem = function (sPropertyInfoName, oParentControl) {
    return DelegateUtil.fetchModel(oParentControl).then(function (oModel) {
      return ODataFilterBarDelegate._addFlexItem(sPropertyInfoName, oParentControl, oModel.getMetaModel(), undefined);
    }).catch(function (oError) {
      Log.error("Model could not be resolved", oError);
      return null;
    });
  };
  ODataFilterBarDelegate.fetchPropertiesForEntity = function (sEntityTypePath, oMetaModel, oFilterControl) {
    const oEntityType = oMetaModel.getObject(sEntityTypePath);
    const includeHidden = oFilterControl.isA("sap.ui.mdc.filterbar.vh.FilterBar") ? true : undefined;
    if (!oFilterControl || !oEntityType) {
      return [];
    }
    const oConverterContext = FilterUtils.createConverterContext(oFilterControl, sEntityTypePath);
    const sEntitySetPath = ModelHelper.getEntitySetPath(sEntityTypePath);
    const mFilterFields = FilterUtils.getConvertedFilterFields(oFilterControl, sEntityTypePath, includeHidden);
    let aFetchedProperties = [];
    mFilterFields.forEach(function (oFilterFieldInfo) {
      const sAnnotationPath = oFilterFieldInfo.annotationPath;
      if (sAnnotationPath) {
        var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3, _entityType$annotatio4;
        const oPropertyAnnotations = oConverterContext.getConvertedTypes().resolvePath(sAnnotationPath).target;
        const sTargetPropertyPrefix = CommonHelper.getLocationForPropertyPath(oMetaModel, sAnnotationPath);
        const sProperty = sAnnotationPath.replace(`${sTargetPropertyPrefix}/`, "");
        const entityType = oConverterContext.getEntityType();
        const selectionFields = (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.SelectionFields;
        const filterFacets = (_entityType$annotatio3 = entityType.annotations) === null || _entityType$annotatio3 === void 0 ? void 0 : (_entityType$annotatio4 = _entityType$annotatio3.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.FilterFacets;
        if (ODataFilterBarDelegate._isFilterAdaptable(oFilterFieldInfo, oPropertyAnnotations, selectionFields, filterFacets) && isPropertyFilterable(oMetaModel, sTargetPropertyPrefix, _getPropertyPath(sProperty), true)) {
          aFetchedProperties.push(oFilterFieldInfo);
        }
      } else {
        //Custom Filters
        aFetchedProperties.push(oFilterFieldInfo);
      }
    });
    const aParameterFields = [];
    const processedFields = processSelectionFields(aFetchedProperties, oConverterContext);
    const processedFieldsKeys = [];
    processedFields.forEach(function (oProps) {
      if (oProps.key) {
        processedFieldsKeys.push(oProps.key);
      }
    });
    aFetchedProperties = aFetchedProperties.filter(function (oProp) {
      return processedFieldsKeys.includes(oProp.key);
    });
    const oFR = CommonUtils.getFilterRestrictionsByPath(sEntitySetPath, oMetaModel),
      mAllowedExpressions = oFR.FilterAllowedExpressions;
    //Object.keys(processedFields).forEach(function (sFilterFieldKey: string) {
    processedFields.forEach(function (oProp, iFilterFieldIndex) {
      const oSelField = aFetchedProperties[iFilterFieldIndex];
      if (!oSelField || !oSelField.conditionPath) {
        return;
      }
      const sPropertyPath = _getPropertyPath(oSelField.conditionPath);
      //fetchBasic
      oProp = Object.assign(oProp, {
        group: oSelField.group,
        groupLabel: oSelField.groupLabel,
        path: oSelField.conditionPath,
        tooltip: null,
        removeFromAppState: false,
        hasValueHelp: false
      });

      //fetchPropInfo
      if (oSelField.annotationPath) {
        const sAnnotationPath = oSelField.annotationPath;
        const oProperty = oMetaModel.getObject(sAnnotationPath),
          oPropertyAnnotations = oMetaModel.getObject(`${sAnnotationPath}@`),
          oPropertyContext = oMetaModel.createBindingContext(sAnnotationPath);
        const bRemoveFromAppState = oPropertyAnnotations["@com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive"] || oPropertyAnnotations["@com.sap.vocabularies.UI.v1.ExcludeFromNavigationContext"] || oPropertyAnnotations["@com.sap.vocabularies.Analytics.v1.Measure"];
        const sTargetPropertyPrefix = CommonHelper.getLocationForPropertyPath(oMetaModel, oSelField.annotationPath);
        const sProperty = sAnnotationPath.replace(`${sTargetPropertyPrefix}/`, "");
        let oFilterDefaultValueAnnotation;
        let oFilterDefaultValue;
        if (isPropertyFilterable(oMetaModel, sTargetPropertyPrefix, _getPropertyPath(sProperty), true)) {
          oFilterDefaultValueAnnotation = oPropertyAnnotations["@com.sap.vocabularies.Common.v1.FilterDefaultValue"];
          if (oFilterDefaultValueAnnotation) {
            oFilterDefaultValue = oFilterDefaultValueAnnotation[`$${getModelType(oProperty.$Type)}`];
          }
          oProp = Object.assign(oProp, {
            tooltip: oPropertyAnnotations["@com.sap.vocabularies.Common.v1.QuickInfo"] || undefined,
            removeFromAppState: bRemoveFromAppState,
            hasValueHelp: hasValueHelp(oPropertyContext.getObject(), {
              context: oPropertyContext
            }),
            defaultFilterConditions: oFilterDefaultValue ? [{
              fieldPath: oSelField.conditionPath,
              operator: "EQ",
              values: [oFilterDefaultValue]
            }] : undefined
          });
        }
      }

      //base

      if (oProp) {
        if (mAllowedExpressions[sPropertyPath] && mAllowedExpressions[sPropertyPath].length > 0) {
          oProp.filterExpression = CommonUtils.getSpecificAllowedExpression(mAllowedExpressions[sPropertyPath]);
        } else {
          oProp.filterExpression = "auto";
        }
        oProp = Object.assign(oProp, {
          visible: oSelField.availability === "Default"
        });
      }
      processedFields[iFilterFieldIndex] = oProp;
    });
    processedFields.forEach(function (propInfo) {
      if (propInfo.path === "$editState") {
        propInfo.label = getResourceModel(oFilterControl).getText("FILTERBAR_EDITING_STATUS");
      }
      propInfo.typeConfig = TypeUtil.getTypeConfig(propInfo.dataType, propInfo.formatOptions, propInfo.constraints);
      propInfo.label = getLocalizedText(propInfo.label, oFilterControl) || "";
      if (propInfo.isParameter) {
        aParameterFields.push(propInfo.name);
      }
    });
    aFetchedProperties = processedFields;
    DelegateUtil.setCustomData(oFilterControl, "parameters", aParameterFields);
    return aFetchedProperties;
  };
  function getLineItemQualifierFromTable(oControl, oMetaModel) {
    var _oMetaModel$getObject;
    if (oControl.isA("sap.fe.macros.table.TableAPI")) {
      const annotationPaths = oControl.getMetaPath().split("#")[0].split("/");
      switch (annotationPaths[annotationPaths.length - 1]) {
        case `@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`:
        case `@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`:
          return (_oMetaModel$getObject = oMetaModel.getObject(oControl.getMetaPath()).Visualizations) === null || _oMetaModel$getObject === void 0 ? void 0 : _oMetaModel$getObject.find(visualization => visualization.$AnnotationPath.includes(`@${"com.sap.vocabularies.UI.v1.LineItem"}`)).$AnnotationPath;
        case `@${"com.sap.vocabularies.UI.v1.LineItem"}`:
          const metaPaths = oControl.getMetaPath().split("/");
          return metaPaths[metaPaths.length - 1];
      }
    }
    return undefined;
  }
  ODataFilterBarDelegate._isFilterAdaptable = function (filterFieldInfo, propertyAnnotations, selectionFields, filterFacets) {
    var _propertyAnnotations$, _propertyAnnotations$2;
    let isSelectionField, isInFilterFacets;
    if (selectionFields) {
      isSelectionField = selectionFields.some(function (selectionField) {
        if (selectionField.value === filterFieldInfo.key) {
          return true;
        }
        return false;
      });
    } else {
      isSelectionField = false;
    }
    if (filterFacets) {
      isInFilterFacets = filterFacets.some(function (filterFacet) {
        var _filterFacet$Target;
        const fieldGroup = (_filterFacet$Target = filterFacet.Target) === null || _filterFacet$Target === void 0 ? void 0 : _filterFacet$Target.$target;
        return fieldGroup === null || fieldGroup === void 0 ? void 0 : fieldGroup.Data.some(function (dataField) {
          // we expect dataField to be DataFieldTypes (having a Value) inside FieldGroups inside FilterFacets
          if (dataField.Value.path === filterFieldInfo.key) {
            return true;
          }
          // dataField types having no Value (DataFieldForAnnotationTypes, DataFieldForActionAbstractTypes, DataFieldForActionGroupTypes), there is nothing to check, but this should not occur anyway
          return false;
        });
      });
    } else {
      isInFilterFacets = false;
    }
    return isSelectionField || isInFilterFacets || !((_propertyAnnotations$ = propertyAnnotations.annotations) !== null && _propertyAnnotations$ !== void 0 && (_propertyAnnotations$2 = _propertyAnnotations$.UI) !== null && _propertyAnnotations$2 !== void 0 && _propertyAnnotations$2.AdaptationHidden);
  };
  ODataFilterBarDelegate._addFlexItem = function (sFlexPropertyName, oParentControl, oMetaModel, oModifier, oAppComponent) {
    const sFilterBarId = oModifier ? oModifier.getId(oParentControl) : oParentControl.getId(),
      sIdPrefix = oModifier ? "" : "Adaptation",
      aSelectionFields = FilterUtils.getConvertedFilterFields(oParentControl, null, undefined, oMetaModel, oAppComponent, oModifier, oModifier ? undefined : getLineItemQualifierFromTable(oParentControl.getParent(), oMetaModel)),
      oSelectionField = ODataFilterBarDelegate._findSelectionField(aSelectionFields, sFlexPropertyName),
      sPropertyPath = _getPropertyPath(sFlexPropertyName),
      bIsXML = !!oModifier && oModifier.targets === "xmlTree";
    if (sFlexPropertyName === EDIT_STATE_PROPERTY_NAME) {
      return _templateEditState(_generateIdPrefix(sFilterBarId, `${sIdPrefix}FilterField`), oMetaModel, oModifier);
    } else if (sFlexPropertyName === SEARCH_PROPERTY_NAME) {
      return Promise.resolve(null);
    } else if (oSelectionField !== null && oSelectionField !== void 0 && oSelectionField.template) {
      return ODataFilterBarDelegate._templateCustomFilter(oParentControl, _generateIdPrefix(sFilterBarId, `${sIdPrefix}FilterField`), oSelectionField, oMetaModel, oModifier);
    }
    if ((oSelectionField === null || oSelectionField === void 0 ? void 0 : oSelectionField.type) === "Slot" && oModifier) {
      return _addXMLCustomFilterField(oParentControl, oModifier, sPropertyPath);
    }
    const sNavigationPath = CommonHelper.getNavigationPath(sPropertyPath);
    let sEntityTypePath;
    let sUseSemanticDateRange;
    let oSettings;
    let sBindingPath;
    let oParameters;
    return Promise.resolve().then(function () {
      if (oSelectionField !== null && oSelectionField !== void 0 && oSelectionField.isParameter) {
        const sAnnotationPath = oSelectionField.annotationPath;
        return sAnnotationPath.substr(0, sAnnotationPath.lastIndexOf("/") + 1);
      }
      return DelegateUtil.getCustomData(oParentControl, "entityType", oModifier);
    }).then(function (sRetrievedEntityTypePath) {
      sEntityTypePath = sRetrievedEntityTypePath;
      return DelegateUtil.getCustomData(oParentControl, "useSemanticDateRange", oModifier);
    }).then(function (sRetrievedUseSemanticDateRange) {
      sUseSemanticDateRange = sRetrievedUseSemanticDateRange;
      const oPropertyContext = oMetaModel.createBindingContext(sEntityTypePath + sPropertyPath);
      const sInFilterBarId = oModifier ? oModifier.getId(oParentControl) : oParentControl.getId();
      oSettings = {
        bindingContexts: {
          contextPath: oMetaModel.createBindingContext(sEntityTypePath),
          property: oPropertyContext
        },
        models: {
          contextPath: oMetaModel,
          property: oMetaModel
        },
        isXML: bIsXML
      };
      sBindingPath = `/${ModelHelper.getEntitySetPath(sEntityTypePath).split("/").filter(ModelHelper.filterOutNavPropBinding).join("/")}`;
      oParameters = {
        sPropertyName: sPropertyPath,
        sBindingPath: sBindingPath,
        sValueHelpType: sIdPrefix + VALUE_HELP_TYPE,
        oControl: oParentControl,
        oMetaModel: oMetaModel,
        oModifier: oModifier,
        sIdPrefix: _generateIdPrefix(sInFilterBarId, `${sIdPrefix}FilterField`, sNavigationPath),
        sVhIdPrefix: _generateIdPrefix(sInFilterBarId, sIdPrefix + VALUE_HELP_TYPE),
        sNavigationPrefix: sNavigationPath,
        bUseSemanticDateRange: sUseSemanticDateRange,
        oSettings: (oSelectionField === null || oSelectionField === void 0 ? void 0 : oSelectionField.settings) ?? {},
        visualFilter: oSelectionField === null || oSelectionField === void 0 ? void 0 : oSelectionField.visualFilter
      };
      return DelegateUtil.doesValueHelpExist(oParameters);
    }).then(function (bValueHelpExists) {
      if (!bValueHelpExists) {
        return _templateValueHelp(oSettings, oParameters);
      }
      return Promise.resolve();
    }).then(function () {
      let pageModel;
      if (oParameters.visualFilter) {
        //Need to set the convertercontext as pageModel in settings for BuildingBlock 2.0
        pageModel = CommonUtils.getTargetView(oParentControl).getController()._getPageModel();
      }
      return _templateFilterField(oSettings, oParameters, pageModel);
    });
  };
  function _getCachedProperties(oFilterBar) {
    // properties are not cached during templating
    if (oFilterBar instanceof window.Element) {
      return null;
    }
    return DelegateUtil.getCustomData(oFilterBar, FETCHED_PROPERTIES_DATA_KEY);
  }
  function _setCachedProperties(oFilterBar, aFetchedProperties) {
    // do not cache during templating, else it becomes part of the cached view
    if (oFilterBar instanceof window.Element) {
      return;
    }
    DelegateUtil.setCustomData(oFilterBar, FETCHED_PROPERTIES_DATA_KEY, aFetchedProperties);
  }
  function _getCachedOrFetchPropertiesForEntity(sEntityTypePath, oMetaModel, oFilterBar) {
    let aFetchedProperties = _getCachedProperties(oFilterBar);
    let localGroupLabel;
    if (!aFetchedProperties) {
      aFetchedProperties = ODataFilterBarDelegate.fetchPropertiesForEntity(sEntityTypePath, oMetaModel, oFilterBar);
      aFetchedProperties.forEach(function (oGroup) {
        localGroupLabel = null;
        if (oGroup.groupLabel) {
          localGroupLabel = getLocalizedText(oGroup.groupLabel, oFilterBar);
          oGroup.groupLabel = localGroupLabel === null ? oGroup.groupLabel : localGroupLabel;
        }
      });
      aFetchedProperties.sort(function (a, b) {
        if (a.groupLabel === undefined || a.groupLabel === null) {
          return -1;
        }
        if (b.groupLabel === undefined || b.groupLabel === null) {
          return 1;
        }
        return a.groupLabel.localeCompare(b.groupLabel);
      });
      _setCachedProperties(oFilterBar, aFetchedProperties);
    }
    return aFetchedProperties;
  }
  ODataFilterBarDelegate.fetchProperties = function (oFilterBar) {
    const sEntityTypePath = DelegateUtil.getCustomData(oFilterBar, "entityType");
    return DelegateUtil.fetchModel(oFilterBar).then(function (oModel) {
      if (!oModel) {
        return [];
      }
      return _getCachedOrFetchPropertiesForEntity(sEntityTypePath, oModel.getMetaModel(), oFilterBar);
      // var aCleanedProperties = aProperties.concat();
      // var aAllowedAttributes = ["name", "label", "visible", "path", "typeConfig", "maxConditions", "group", "groupLabel"];
      // aCleanedProperties.forEach(function(oProperty) {
      // 	Object.keys(oProperty).forEach(function(sPropName) {
      // 		if (aAllowedAttributes.indexOf(sPropName) === -1) {
      // 			delete oProperty[sPropName];
      // 		}
      // 	});
      // });
      // return aCleanedProperties;
    });
  };

  ODataFilterBarDelegate.getTypeUtil = function () {
    return TypeUtil;
  };
  return ODataFilterBarDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/filterBar/FilterBarDelegate", ["sap/base/Log","sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/TemplateModel","sap/fe/core/templating/PropertyFormatters","sap/fe/core/type/EDM","sap/fe/core/type/TypeUtil","sap/fe/macros/CommonHelper","sap/fe/macros/DelegateUtil","sap/fe/macros/filter/FilterUtils","sap/ui/mdc/FilterBarDelegate","sap/ui/model/json/JSONModel"],function(e,t,n,o,i,r,a,l,s,c,u,f,d,p,g,m,v){"use strict";var h=u.getModelType;var P=c.hasValueHelp;var y=l.generate;var F=a.getResourceModel;var C=a.getLocalizedText;var b=i.isPropertyFilterable;var x=o.processSelectionFields;const M=Object.assign({},m);M.apiVersion=2;const I="$editState",T="$search",w="FilterFieldValueHelp",D="sap_fe_FilterBarDelegate_propertyInfoMap",S=/[+*]/g;function A(e,t,n){const o=new v({id:e,isDraftCollaborative:r.isCollaborationDraftSupported(t)}),i={bindingContexts:{this:o.createBindingContext("/")},models:{this:o}};return p.templateControlFragment("sap.fe.macros.filter.DraftEditState",i,undefined,n).finally(function(){o.destroy()})}M._templateCustomFilter=async function(e,t,o,i,r){const a=await p.getCustomData(e,"entityType",r);const l=new v({id:t}),c=new s(o,i),u={bindingContexts:{contextPath:i.createBindingContext(a),this:l.createBindingContext("/"),item:c.createBindingContext("/")},models:{contextPath:i,this:l,item:c}},f=n.getTargetView(e),d=f?f.getController():undefined,g={controller:d?d:undefined,view:f};return p.templateControlFragment("sap.fe.macros.filter.CustomFilter",u,g,r).finally(function(){l.destroy();c.destroy()})};function E(e){return e.replace(S,"")}M._findSelectionField=function(e,t){return e.find(function(e){return(e.conditionPath===t||e.conditionPath.replaceAll(/\*/g,"")===t)&&e.availability!=="Hidden"})};function L(e,t,n){return n?y([e,t,n]):y([e,t])}function $(n,o){const i=new v({idPrefix:o.sVhIdPrefix,conditionModel:"$filters",navigationPrefix:o.sNavigationPrefix?`/${o.sNavigationPrefix}`:"",filterFieldValueHelp:true,useSemanticDateRange:o.bUseSemanticDateRange});const r=t({},n,{bindingContexts:{this:i.createBindingContext("/")},models:{this:i}});return Promise.resolve(p.templateControlFragment("sap.fe.macros.internal.valuehelp.ValueHelp",r,{isXML:n.isXML})).then(function(e){if(e){const t="dependents";if(e.length){e.forEach(function(e){if(o.oModifier){o.oModifier.insertAggregation(o.oControl,t,e,0)}else{o.oControl.insertAggregation(t,e,0,false)}})}else if(o.oModifier){o.oModifier.insertAggregation(o.oControl,t,e,0)}else{o.oControl.insertAggregation(t,e,0,false)}}}).catch(function(t){e.error("Error while evaluating DelegateUtil.isValueHelpRequired",t)}).finally(function(){i.destroy()})}async function _(t,n,o){try{const e=await Promise.resolve(n.getAggregation(t,"dependents"));let i;if(e&&e.length>1){for(i=0;i<=e.length;i++){const t=e[i];if(t&&t.isA("sap.ui.mdc.FilterField")){const e=t.getFieldPath(),n=t.getId();if(o===e&&n.indexOf("CustomFilterField")){return Promise.resolve(t)}}}}}catch(t){e.error("Filter Cannot be added",t)}}function B(e,n,o){const i=new v({idPrefix:n.sIdPrefix,vhIdPrefix:n.sVhIdPrefix,propertyPath:n.sPropertyName,navigationPrefix:n.sNavigationPrefix?`/${n.sNavigationPrefix}`:"",useSemanticDateRange:n.bUseSemanticDateRange,settings:n.oSettings,visualFilter:n.visualFilter});const r=n.oMetaModel;const a=new s(n.visualFilter,r);const l=t({},e,{bindingContexts:{this:i.createBindingContext("/"),visualFilter:a.createBindingContext("/")},models:{this:i,visualFilter:a,metaModel:r,converterContext:o}});return p.templateControlFragment("sap.fe.macros.internal.filterField.FilterFieldTemplate",l,{isXML:e.isXML}).finally(function(){i.destroy()})}async function V(t,n,o,i){try{i=i.replace("*","");const e=y([i]);if(n&&!n.modifier){throw"FilterBar Delegate method called without modifier."}const r=await n.modifier.getProperty(t,"delegate");const a=await n.modifier.getProperty(t,"propertyInfo");if(a){const l=a.some(function(t){return t.key===e||t.name===e});if(!l){const e=r.payload.entityTypePath;const l=g.createConverterContext(t,e,o,n.appComponent);const s=l.getEntityType();let c=g.getFilterField(i,l,s);c=g.buildProperyInfo(c,l);a.push(c);n.modifier.setProperty(t,"propertyInfo",a)}}}catch(n){e.warning(`${t.getId()} : ${n}`)}}M.addItem=async function(e,t,n){if(!n){return M._addP13nItem(t,e)}const o=n.modifier;const i=n&&n.appComponent&&n.appComponent.getModel();const r=i&&i.getMetaModel();if(!r){return Promise.resolve(null)}const a=o&&o.targets==="xmlTree";if(a){await V(e,n,r,t)}return M._addFlexItem(t,e,r,o,n.appComponent)};M.removeItem=async function(e,t,n){let o=true;const i=n.modifier;const r=i&&i.targets==="xmlTree";if(r&&!e.data("sap_fe_FilterBarDelegate_propertyInfoMap")){const o=n&&n.appComponent&&n.appComponent.getModel();const i=o&&o.getMetaModel();if(!i){return Promise.resolve(null)}if(typeof t!=="string"&&t.getFieldPath()){await V(e,n,i,t.getFieldPath())}else{await V(e,n,i,t)}}if(typeof t!=="string"&&t.isA&&t.isA("sap.ui.mdc.FilterField")){if(t.data("isSlot")==="true"&&n){i.insertAggregation(e,"dependents",t);o=false}}return Promise.resolve(o)};M.addCondition=async function(e,t,n){const o=n.modifier;const i=o&&o.targets==="xmlTree";if(i){const o=n&&n.appComponent&&n.appComponent.getModel();const i=o&&o.getMetaModel();if(!i){return Promise.resolve(null)}await V(e,n,i,t)}return Promise.resolve()};M.removeCondition=async function(e,t,n){if(!e.data("sap_fe_FilterBarDelegate_propertyInfoMap")){const o=n.modifier;const i=o&&o.targets==="xmlTree";if(i){const o=n&&n.appComponent&&n.appComponent.getModel();const i=o&&o.getMetaModel();if(!i){return Promise.resolve(null)}await V(e,n,i,t)}}return Promise.resolve()};M.clearFilters=async function(e){return g.clearFilterValues(e)};M._addP13nItem=function(t,n){return p.fetchModel(n).then(function(e){return M._addFlexItem(t,n,e.getMetaModel(),undefined)}).catch(function(t){e.error("Model could not be resolved",t);return null})};M.fetchPropertiesForEntity=function(e,t,o){const i=t.getObject(e);const a=o.isA("sap.ui.mdc.filterbar.vh.FilterBar")?true:undefined;if(!o||!i){return[]}const l=g.createConverterContext(o,e);const s=r.getEntitySetPath(e);const c=g.getConvertedFilterFields(o,e,a);let u=[];c.forEach(function(e){const n=e.annotationPath;if(n){var o,i,r,a;const s=l.getConvertedTypes().resolvePath(n).target;const c=d.getLocationForPropertyPath(t,n);const f=n.replace(`${c}/`,"");const p=l.getEntityType();const g=(o=p.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:i.SelectionFields;const m=(r=p.annotations)===null||r===void 0?void 0:(a=r.UI)===null||a===void 0?void 0:a.FilterFacets;if(M._isFilterAdaptable(e,s,g,m)&&b(t,c,E(f),true)){u.push(e)}}else{u.push(e)}});const m=[];const v=x(u,l);const y=[];v.forEach(function(e){if(e.key){y.push(e.key)}});u=u.filter(function(e){return y.includes(e.key)});const I=n.getFilterRestrictionsByPath(s,t),T=I.FilterAllowedExpressions;v.forEach(function(e,o){const i=u[o];if(!i||!i.conditionPath){return}const r=E(i.conditionPath);e=Object.assign(e,{group:i.group,groupLabel:i.groupLabel,path:i.conditionPath,tooltip:null,removeFromAppState:false,hasValueHelp:false});if(i.annotationPath){const n=i.annotationPath;const o=t.getObject(n),r=t.getObject(`${n}@`),a=t.createBindingContext(n);const l=r["@com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive"]||r["@com.sap.vocabularies.UI.v1.ExcludeFromNavigationContext"]||r["@com.sap.vocabularies.Analytics.v1.Measure"];const s=d.getLocationForPropertyPath(t,i.annotationPath);const c=n.replace(`${s}/`,"");let u;let f;if(b(t,s,E(c),true)){u=r["@com.sap.vocabularies.Common.v1.FilterDefaultValue"];if(u){f=u[`$${h(o.$Type)}`]}e=Object.assign(e,{tooltip:r["@com.sap.vocabularies.Common.v1.QuickInfo"]||undefined,removeFromAppState:l,hasValueHelp:P(a.getObject(),{context:a}),defaultFilterConditions:f?[{fieldPath:i.conditionPath,operator:"EQ",values:[f]}]:undefined})}}if(e){if(T[r]&&T[r].length>0){e.filterExpression=n.getSpecificAllowedExpression(T[r])}else{e.filterExpression="auto"}e=Object.assign(e,{visible:i.availability==="Default"})}v[o]=e});v.forEach(function(e){if(e.path==="$editState"){e.label=F(o).getText("FILTERBAR_EDITING_STATUS")}e.typeConfig=f.getTypeConfig(e.dataType,e.formatOptions,e.constraints);e.label=C(e.label,o)||"";if(e.isParameter){m.push(e.name)}});u=v;p.setCustomData(o,"parameters",m);return u};function U(e,t){var n;if(e.isA("sap.fe.macros.table.TableAPI")){const o=e.getMetaPath().split("#")[0].split("/");switch(o[o.length-1]){case`@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`:case`@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`:return(n=t.getObject(e.getMetaPath()).Visualizations)===null||n===void 0?void 0:n.find(e=>e.$AnnotationPath.includes(`@${"com.sap.vocabularies.UI.v1.LineItem"}`)).$AnnotationPath;case`@${"com.sap.vocabularies.UI.v1.LineItem"}`:const o=e.getMetaPath().split("/");return o[o.length-1]}}return undefined}M._isFilterAdaptable=function(e,t,n,o){var i,r;let a,l;if(n){a=n.some(function(t){if(t.value===e.key){return true}return false})}else{a=false}if(o){l=o.some(function(t){var n;const o=(n=t.Target)===null||n===void 0?void 0:n.$target;return o===null||o===void 0?void 0:o.Data.some(function(t){if(t.Value.path===e.key){return true}return false})})}else{l=false}return a||l||!((i=t.annotations)!==null&&i!==void 0&&(r=i.UI)!==null&&r!==void 0&&r.AdaptationHidden)};M._addFlexItem=function(e,t,o,i,a){const l=i?i.getId(t):t.getId(),s=i?"":"Adaptation",c=g.getConvertedFilterFields(t,null,undefined,o,a,i,i?undefined:U(t.getParent(),o)),u=M._findSelectionField(c,e),f=E(e),m=!!i&&i.targets==="xmlTree";if(e===I){return A(L(l,`${s}FilterField`),o,i)}else if(e===T){return Promise.resolve(null)}else if(u!==null&&u!==void 0&&u.template){return M._templateCustomFilter(t,L(l,`${s}FilterField`),u,o,i)}if((u===null||u===void 0?void 0:u.type)==="Slot"&&i){return _(t,i,f)}const v=d.getNavigationPath(f);let h;let P;let y;let F;let C;return Promise.resolve().then(function(){if(u!==null&&u!==void 0&&u.isParameter){const e=u.annotationPath;return e.substr(0,e.lastIndexOf("/")+1)}return p.getCustomData(t,"entityType",i)}).then(function(e){h=e;return p.getCustomData(t,"useSemanticDateRange",i)}).then(function(e){P=e;const n=o.createBindingContext(h+f);const a=i?i.getId(t):t.getId();y={bindingContexts:{contextPath:o.createBindingContext(h),property:n},models:{contextPath:o,property:o},isXML:m};F=`/${r.getEntitySetPath(h).split("/").filter(r.filterOutNavPropBinding).join("/")}`;C={sPropertyName:f,sBindingPath:F,sValueHelpType:s+w,oControl:t,oMetaModel:o,oModifier:i,sIdPrefix:L(a,`${s}FilterField`,v),sVhIdPrefix:L(a,s+w),sNavigationPrefix:v,bUseSemanticDateRange:P,oSettings:(u===null||u===void 0?void 0:u.settings)??{},visualFilter:u===null||u===void 0?void 0:u.visualFilter};return p.doesValueHelpExist(C)}).then(function(e){if(!e){return $(y,C)}return Promise.resolve()}).then(function(){let e;if(C.visualFilter){e=n.getTargetView(t).getController()._getPageModel()}return B(y,C,e)})};function H(e){if(e instanceof window.Element){return null}return p.getCustomData(e,D)}function O(e,t){if(e instanceof window.Element){return}p.setCustomData(e,D,t)}function R(e,t,n){let o=H(n);let i;if(!o){o=M.fetchPropertiesForEntity(e,t,n);o.forEach(function(e){i=null;if(e.groupLabel){i=C(e.groupLabel,n);e.groupLabel=i===null?e.groupLabel:i}});o.sort(function(e,t){if(e.groupLabel===undefined||e.groupLabel===null){return-1}if(t.groupLabel===undefined||t.groupLabel===null){return 1}return e.groupLabel.localeCompare(t.groupLabel)});O(n,o)}return o}M.fetchProperties=function(e){const t=p.getCustomData(e,"entityType");return p.fetchModel(e).then(function(n){if(!n){return[]}return R(t,n.getMetaModel(),e)})};M.getTypeUtil=function(){return f};return M},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/Form.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/controls/Common/Form", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/helpers/ID", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/macros/form/FormHelper", "sap/ui/core/library", "sap/ui/model/odata/v4/AnnotationHelper"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, Form, BindingHelper, ID, MetaModelConverter, BindingToolkit, DataModelPathHelper, FormHelper, library, AnnotationHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;
  var _exports = {};
  var TitleLevel = library.TitleLevel;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var ifElse = BindingToolkit.ifElse;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var getFormContainerID = ID.getFormContainerID;
  var UI = BindingHelper.UI;
  var createFormDefinition = Form.createFormDefinition;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FormBlock = (
  /**
   * Building block for creating a Form based on the metadata provided by OData V4.
   * <br>
   * It is designed to work based on a FieldGroup annotation but can also work if you provide a ReferenceFacet or a CollectionFacet
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Form id="MyForm" metaPath="@com.sap.vocabularies.UI.v1.FieldGroup#GeneralInformation" /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.Form
   * @public
   */
  _dec = defineBuildingBlock({
    name: "Form",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.form.FormAPI"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    isPublic: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "Singleton", "EntityType"]
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true,
    expectedAnnotationTypes: ["com.sap.vocabularies.UI.v1.FieldGroupType", "com.sap.vocabularies.UI.v1.CollectionFacet", "com.sap.vocabularies.UI.v1.ReferenceFacet"],
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"]
  }), _dec5 = blockAttribute({
    type: "array"
  }), _dec6 = blockAttribute({
    type: "boolean"
  }), _dec7 = blockAttribute({
    type: "boolean"
  }), _dec8 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec9 = blockAttribute({
    type: "sap.ui.core.TitleLevel",
    isPublic: true
  }), _dec10 = blockAttribute({
    type: "string"
  }), _dec11 = blockAttribute({
    type: "string"
  }), _dec12 = blockEvent(), _dec13 = blockAggregation({
    type: "sap.fe.macros.form.FormElement",
    isPublic: true,
    slot: "formElements",
    isDefault: true
  }), _dec14 = blockAttribute({
    type: "object",
    isPublic: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FormBlock, _BuildingBlockBase);
    /**
     * The identifier of the form control.
     *
     * @public
     */

    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     *
     * @public
     */

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     *
     * @public
     */

    /**
     * The manifest defined form containers to be shown in the action area of the table
     */

    /**
     * Control the rendering of the form container labels
     */

    /**
     * Toggle Preview: Part of Preview / Preview via 'Show More' Button
     */

    /**
     * The title of the form control.
     *
     * @public
     */

    /**
     * Defines the "aria-level" of the form title, titles of internally used form containers are nested subsequently
     */

    /**
     * 	If set to false, the Form is not rendered.
     */

    // Independent from the form title, can be a bit confusing in standalone usage at is not showing anything by default

    // Just proxied down to the Field may need to see if needed or not

    /**
     * Defines the layout to be used within the form.
     * It defaults to the ColumnLayout, but you can also use a ResponsiveGridLayout.
     * All the properties of the ResponsiveGridLayout can be added to the configuration.
     */

    function FormBlock(props, configuration, mSettings) {
      var _this;
      _this = _BuildingBlockBase.call(this, props, configuration, mSettings) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formContainers", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useFormContainerLabels", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "partOfPreview", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "titleLevel", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "displayMode", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isVisible", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onChange", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formElements", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "layout", _descriptor13, _assertThisInitialized(_this));
      if (_this.metaPath && _this.contextPath && (_this.formContainers === undefined || _this.formContainers === null)) {
        const oContextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
        const mExtraSettings = {};
        let oFacetDefinition = oContextObjectPath.targetObject;
        let hasFieldGroup = false;
        if (oFacetDefinition && oFacetDefinition.$Type === "com.sap.vocabularies.UI.v1.FieldGroupType") {
          // Wrap the facet in a fake Facet annotation
          hasFieldGroup = true;
          oFacetDefinition = {
            $Type: "com.sap.vocabularies.UI.v1.ReferenceFacet",
            Label: oFacetDefinition.Label,
            Target: {
              $target: oFacetDefinition,
              fullyQualifiedName: oFacetDefinition.fullyQualifiedName,
              path: "",
              term: "",
              type: "AnnotationPath",
              value: getContextRelativeTargetObjectPath(oContextObjectPath)
            },
            annotations: {},
            fullyQualifiedName: oFacetDefinition.fullyQualifiedName
          };
          mExtraSettings[oFacetDefinition.Target.value] = {
            fields: _this.formElements
          };
        }
        const oConverterContext = _this.getConverterContext(oContextObjectPath, /*this.contextPath*/undefined, mSettings, mExtraSettings);
        const oFormDefinition = createFormDefinition(oFacetDefinition, _this.isVisible, oConverterContext);
        if (hasFieldGroup) {
          oFormDefinition.formContainers[0].annotationPath = _this.metaPath.getPath();
        }
        _this.formContainers = oFormDefinition.formContainers;
        _this.useFormContainerLabels = oFormDefinition.useFormContainerLabels;
        _this.facetType = oFacetDefinition && oFacetDefinition.$Type;
      } else {
        var _this$metaPath$getObj;
        _this.facetType = (_this$metaPath$getObj = _this.metaPath.getObject()) === null || _this$metaPath$getObj === void 0 ? void 0 : _this$metaPath$getObj.$Type;
      }
      if (!_this.isPublic) {
        _this._apiId = _this.createId("Form");
        _this._contentId = _this.id;
      } else {
        _this._apiId = _this.id;
        _this._contentId = `${_this.id}-content`;
      }
      // if displayMode === true -> _editable = false
      // if displayMode === false -> _editable = true
      //  => if displayMode === {myBindingValue} -> _editable = {myBindingValue} === true ? true : false
      // if DisplayMode === undefined -> _editable = {ui>/isEditable}
      if (_this.displayMode !== undefined) {
        _this._editable = compileExpression(ifElse(equal(resolveBindingString(_this.displayMode, "boolean"), false), true, false));
      } else {
        _this._editable = compileExpression(UI.IsEditable);
      }
      return _this;
    }
    _exports = FormBlock;
    var _proto = FormBlock.prototype;
    _proto.getDataFieldCollection = function getDataFieldCollection(formContainer, facetContext) {
      const facet = getInvolvedDataModelObjects(facetContext).targetObject;
      let navigationPath;
      let idPart;
      if (facet.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
        navigationPath = AnnotationHelper.getNavigationPath(facet.Target.value);
        idPart = facet;
      } else {
        const contextPathPath = this.contextPath.getPath();
        let facetPath = facetContext.getPath();
        if (facetPath.startsWith(contextPathPath)) {
          facetPath = facetPath.substring(contextPathPath.length);
        }
        navigationPath = AnnotationHelper.getNavigationPath(facetPath);
        idPart = facetPath;
      }
      const titleLevel = FormHelper.getFormContainerTitleLevel(this.title, this.titleLevel);
      const title = this.useFormContainerLabels && facet ? AnnotationHelper.label(facet, {
        context: facetContext
      }) : "";
      const id = this.id ? getFormContainerID(idPart) : undefined;
      return xml`
					<macro:FormContainer
					xmlns:macro="sap.fe.macros"
					${this.attr("id", id)}
					title="${title}"
					titleLevel="${titleLevel}"
					contextPath="${navigationPath ? formContainer.entitySet : this.contextPath}"
					metaPath="${facetContext}"
					dataFieldCollection="${formContainer.formElements}"
					navigationPath="${navigationPath}"
					visible="${formContainer.isVisible}"
					displayMode="${this.displayMode}"
					onChange="${this.onChange}"
					actions="${formContainer.actions}"
				>
				<macro:formElements>
					<slot name="formElements" />
				</macro:formElements>
			</macro:FormContainer>`;
    };
    _proto.getFormContainers = function getFormContainers() {
      if (this.formContainers.length === 0) {
        return "";
      }
      if (this.facetType.indexOf("com.sap.vocabularies.UI.v1.CollectionFacet") >= 0) {
        return this.formContainers.map((formContainer, formContainerIdx) => {
          if (formContainer.isVisible) {
            const facetContext = this.contextPath.getModel().createBindingContext(formContainer.annotationPath, this.contextPath);
            const facet = facetContext.getObject();
            if (facet.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet" && FormHelper.isReferenceFacetPartOfPreview(facet, this.partOfPreview)) {
              if (facet.Target.$AnnotationPath.$Type === "com.sap.vocabularies.Communication.v1.AddressType") {
                return xml`<template:with path="formContainers>${formContainerIdx}" var="formContainer">
											<template:with path="formContainers>${formContainerIdx}/annotationPath" var="facet">
												<core:Fragment fragmentName="sap.fe.macros.form.AddressSection" type="XML" />
											</template:with>
										</template:with>`;
              }
              return this.getDataFieldCollection(formContainer, facetContext);
            }
          }
          return "";
        });
      } else if (this.facetType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
        return this.formContainers.map(formContainer => {
          if (formContainer.isVisible) {
            const facetContext = this.contextPath.getModel().createBindingContext(formContainer.annotationPath, this.contextPath);
            return this.getDataFieldCollection(formContainer, facetContext);
          } else {
            return "";
          }
        });
      }
      return "";
    }

    /**
     * Create the proper layout information based on the `layout` property defined externally.
     *
     * @returns The layout information for the xml.
     */;
    _proto.getLayoutInformation = function getLayoutInformation() {
      switch (this.layout.type) {
        case "ResponsiveGridLayout":
          return xml`<f:ResponsiveGridLayout adjustLabelSpan="${this.layout.adjustLabelSpan}"
													breakpointL="${this.layout.breakpointL}"
													breakpointM="${this.layout.breakpointM}"
													breakpointXL="${this.layout.breakpointXL}"
													columnsL="${this.layout.columnsL}"
													columnsM="${this.layout.columnsM}"
													columnsXL="${this.layout.columnsXL}"
													emptySpanL="${this.layout.emptySpanL}"
													emptySpanM="${this.layout.emptySpanM}"
													emptySpanS="${this.layout.emptySpanS}"
													emptySpanXL="${this.layout.emptySpanXL}"
													labelSpanL="${this.layout.labelSpanL}"
													labelSpanM="${this.layout.labelSpanM}"
													labelSpanS="${this.layout.labelSpanS}"
													labelSpanXL="${this.layout.labelSpanXL}"
													singleContainerFullSize="${this.layout.singleContainerFullSize}" />`;
        case "ColumnLayout":
        default:
          return xml`<f:ColumnLayout
								columnsM="${this.layout.columnsM}"
								columnsL="${this.layout.columnsL}"
								columnsXL="${this.layout.columnsXL}"
								labelCellsLarge="${this.layout.labelCellsLarge}"
								emptyCellsLarge="${this.layout.emptyCellsLarge}" />`;
      }
    };
    _proto.getTemplate = function getTemplate() {
      const onChangeStr = this.onChange && this.onChange.replace("{", "\\{").replace("}", "\\}") || "";
      const metaPathPath = this.metaPath.getPath();
      const contextPathPath = this.contextPath.getPath();
      if (!this.isVisible) {
        return "";
      } else {
        return xml`<macro:FormAPI xmlns:macro="sap.fe.macros.form"
					xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
					xmlns:f="sap.ui.layout.form"
					xmlns:fl="sap.ui.fl"
					id="${this._apiId}"
					metaPath="${metaPathPath}"
					contextPath="${contextPathPath}">
				<f:Form
					fl:delegate='{
						"name": "sap/fe/macros/form/FormDelegate",
						"delegateType": "complete"
					}'
					id="${this._contentId}"
					editable="${this._editable}"
					macrodata:entitySet="{contextPath>@sapui.name}"
					visible="${this.isVisible}"
					class="sapUxAPObjectPageSubSectionAlignContent"
					macrodata:navigationPath="${contextPathPath}"
					macrodata:onChange="${onChangeStr}"
				>
					${this.addConditionally(this.title !== undefined, xml`<f:title>
							<core:Title level="${this.titleLevel}" text="${this.title}" />
						</f:title>`)}
					<f:layout>
					${this.getLayoutInformation()}

					</f:layout>
					<f:formContainers>
						${this.getFormContainers()}
					</f:formContainers>
				</f:Form>
			</macro:FormAPI>`;
      }
    };
    return FormBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "formContainers", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useFormContainerLabels", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "partOfPreview", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "titleLevel", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return TitleLevel.Auto;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "displayMode", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "isVisible", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "true";
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "onChange", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "formElements", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "layout", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {
        type: "ColumnLayout",
        columnsM: 2,
        columnsXL: 6,
        columnsL: 3,
        labelCellsLarge: 12
      };
    }
  })), _class2)) || _class);
  _exports = FormBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/Form.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/controls/Common/Form","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/helpers/ID","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DataModelPathHelper","sap/fe/macros/form/FormHelper","sap/ui/core/library","sap/ui/model/odata/v4/AnnotationHelper"],function(e,t,a,i,r,n,o,l,s,u,c,p){"use strict";var m,f,b,h,y,d,g,v,P,C,$,L,F,x,S,T,w,I,M,z,E,O,k,B,j,A,_,D,X;var U={};var N=c.TitleLevel;var R=s.getContextRelativeTargetObjectPath;var V=l.resolveBindingString;var q=l.ifElse;var G=l.equal;var H=l.compileExpression;var Q=o.getInvolvedDataModelObjects;var W=n.getFormContainerID;var J=r.UI;var K=i.createFormDefinition;var Y=a.xml;var Z=t.defineBuildingBlock;var ee=t.blockEvent;var te=t.blockAttribute;var ae=t.blockAggregation;function ie(e,t,a,i){if(!a)return;Object.defineProperty(e,t,{enumerable:a.enumerable,configurable:a.configurable,writable:a.writable,value:a.initializer?a.initializer.call(i):void 0})}function re(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function ne(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;oe(e,t)}function oe(e,t){oe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,a){t.__proto__=a;return t};return oe(e,t)}function le(e,t,a,i,r){var n={};Object.keys(i).forEach(function(e){n[e]=i[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=a.slice().reverse().reduce(function(a,i){return i(e,t,a)||a},n);if(r&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(r):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function se(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let ue=(m=Z({name:"Form",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.form.FormAPI"]}),f=te({type:"string",isPublic:true,required:true}),b=te({type:"sap.ui.model.Context",required:true,isPublic:true,expectedTypes:["EntitySet","NavigationProperty","Singleton","EntityType"]}),h=te({type:"sap.ui.model.Context",isPublic:true,required:true,expectedAnnotationTypes:["com.sap.vocabularies.UI.v1.FieldGroupType","com.sap.vocabularies.UI.v1.CollectionFacet","com.sap.vocabularies.UI.v1.ReferenceFacet"],expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"]}),y=te({type:"array"}),d=te({type:"boolean"}),g=te({type:"boolean"}),v=te({type:"string",isPublic:true}),P=te({type:"sap.ui.core.TitleLevel",isPublic:true}),C=te({type:"string"}),$=te({type:"string"}),L=ee(),F=ae({type:"sap.fe.macros.form.FormElement",isPublic:true,slot:"formElements",isDefault:true}),x=te({type:"object",isPublic:true}),m(S=(T=function(e){ne(t,e);function t(t,a,i){var r;r=e.call(this,t,a,i)||this;ie(r,"id",w,re(r));ie(r,"contextPath",I,re(r));ie(r,"metaPath",M,re(r));ie(r,"formContainers",z,re(r));ie(r,"useFormContainerLabels",E,re(r));ie(r,"partOfPreview",O,re(r));ie(r,"title",k,re(r));ie(r,"titleLevel",B,re(r));ie(r,"displayMode",j,re(r));ie(r,"isVisible",A,re(r));ie(r,"onChange",_,re(r));ie(r,"formElements",D,re(r));ie(r,"layout",X,re(r));if(r.metaPath&&r.contextPath&&(r.formContainers===undefined||r.formContainers===null)){const e=Q(r.metaPath,r.contextPath);const t={};let a=e.targetObject;let n=false;if(a&&a.$Type==="com.sap.vocabularies.UI.v1.FieldGroupType"){n=true;a={$Type:"com.sap.vocabularies.UI.v1.ReferenceFacet",Label:a.Label,Target:{$target:a,fullyQualifiedName:a.fullyQualifiedName,path:"",term:"",type:"AnnotationPath",value:R(e)},annotations:{},fullyQualifiedName:a.fullyQualifiedName};t[a.Target.value]={fields:r.formElements}}const o=r.getConverterContext(e,undefined,i,t);const l=K(a,r.isVisible,o);if(n){l.formContainers[0].annotationPath=r.metaPath.getPath()}r.formContainers=l.formContainers;r.useFormContainerLabels=l.useFormContainerLabels;r.facetType=a&&a.$Type}else{var n;r.facetType=(n=r.metaPath.getObject())===null||n===void 0?void 0:n.$Type}if(!r.isPublic){r._apiId=r.createId("Form");r._contentId=r.id}else{r._apiId=r.id;r._contentId=`${r.id}-content`}if(r.displayMode!==undefined){r._editable=H(q(G(V(r.displayMode,"boolean"),false),true,false))}else{r._editable=H(J.IsEditable)}return r}U=t;var a=t.prototype;a.getDataFieldCollection=function e(t,a){const i=Q(a).targetObject;let r;let n;if(i.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"){r=p.getNavigationPath(i.Target.value);n=i}else{const e=this.contextPath.getPath();let t=a.getPath();if(t.startsWith(e)){t=t.substring(e.length)}r=p.getNavigationPath(t);n=t}const o=u.getFormContainerTitleLevel(this.title,this.titleLevel);const l=this.useFormContainerLabels&&i?p.label(i,{context:a}):"";const s=this.id?W(n):undefined;return Y`
					<macro:FormContainer
					xmlns:macro="sap.fe.macros"
					${this.attr("id",s)}
					title="${l}"
					titleLevel="${o}"
					contextPath="${r?t.entitySet:this.contextPath}"
					metaPath="${a}"
					dataFieldCollection="${t.formElements}"
					navigationPath="${r}"
					visible="${t.isVisible}"
					displayMode="${this.displayMode}"
					onChange="${this.onChange}"
					actions="${t.actions}"
				>
				<macro:formElements>
					<slot name="formElements" />
				</macro:formElements>
			</macro:FormContainer>`};a.getFormContainers=function e(){if(this.formContainers.length===0){return""}if(this.facetType.indexOf("com.sap.vocabularies.UI.v1.CollectionFacet")>=0){return this.formContainers.map((e,t)=>{if(e.isVisible){const a=this.contextPath.getModel().createBindingContext(e.annotationPath,this.contextPath);const i=a.getObject();if(i.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"&&u.isReferenceFacetPartOfPreview(i,this.partOfPreview)){if(i.Target.$AnnotationPath.$Type==="com.sap.vocabularies.Communication.v1.AddressType"){return Y`<template:with path="formContainers>${t}" var="formContainer">
											<template:with path="formContainers>${t}/annotationPath" var="facet">
												<core:Fragment fragmentName="sap.fe.macros.form.AddressSection" type="XML" />
											</template:with>
										</template:with>`}return this.getDataFieldCollection(e,a)}}return""})}else if(this.facetType==="com.sap.vocabularies.UI.v1.ReferenceFacet"){return this.formContainers.map(e=>{if(e.isVisible){const t=this.contextPath.getModel().createBindingContext(e.annotationPath,this.contextPath);return this.getDataFieldCollection(e,t)}else{return""}})}return""};a.getLayoutInformation=function e(){switch(this.layout.type){case"ResponsiveGridLayout":return Y`<f:ResponsiveGridLayout adjustLabelSpan="${this.layout.adjustLabelSpan}"
													breakpointL="${this.layout.breakpointL}"
													breakpointM="${this.layout.breakpointM}"
													breakpointXL="${this.layout.breakpointXL}"
													columnsL="${this.layout.columnsL}"
													columnsM="${this.layout.columnsM}"
													columnsXL="${this.layout.columnsXL}"
													emptySpanL="${this.layout.emptySpanL}"
													emptySpanM="${this.layout.emptySpanM}"
													emptySpanS="${this.layout.emptySpanS}"
													emptySpanXL="${this.layout.emptySpanXL}"
													labelSpanL="${this.layout.labelSpanL}"
													labelSpanM="${this.layout.labelSpanM}"
													labelSpanS="${this.layout.labelSpanS}"
													labelSpanXL="${this.layout.labelSpanXL}"
													singleContainerFullSize="${this.layout.singleContainerFullSize}" />`;case"ColumnLayout":default:return Y`<f:ColumnLayout
								columnsM="${this.layout.columnsM}"
								columnsL="${this.layout.columnsL}"
								columnsXL="${this.layout.columnsXL}"
								labelCellsLarge="${this.layout.labelCellsLarge}"
								emptyCellsLarge="${this.layout.emptyCellsLarge}" />`}};a.getTemplate=function e(){const t=this.onChange&&this.onChange.replace("{","\\{").replace("}","\\}")||"";const a=this.metaPath.getPath();const i=this.contextPath.getPath();if(!this.isVisible){return""}else{return Y`<macro:FormAPI xmlns:macro="sap.fe.macros.form"
					xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
					xmlns:f="sap.ui.layout.form"
					xmlns:fl="sap.ui.fl"
					id="${this._apiId}"
					metaPath="${a}"
					contextPath="${i}">
				<f:Form
					fl:delegate='{
						"name": "sap/fe/macros/form/FormDelegate",
						"delegateType": "complete"
					}'
					id="${this._contentId}"
					editable="${this._editable}"
					macrodata:entitySet="{contextPath>@sapui.name}"
					visible="${this.isVisible}"
					class="sapUxAPObjectPageSubSectionAlignContent"
					macrodata:navigationPath="${i}"
					macrodata:onChange="${t}"
				>
					${this.addConditionally(this.title!==undefined,Y`<f:title>
							<core:Title level="${this.titleLevel}" text="${this.title}" />
						</f:title>`)}
					<f:layout>
					${this.getLayoutInformation()}

					</f:layout>
					<f:formContainers>
						${this.getFormContainers()}
					</f:formContainers>
				</f:Form>
			</macro:FormAPI>`}};return t}(e),w=le(T.prototype,"id",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),I=le(T.prototype,"contextPath",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),M=le(T.prototype,"metaPath",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),z=le(T.prototype,"formContainers",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),E=le(T.prototype,"useFormContainerLabels",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),O=le(T.prototype,"partOfPreview",[g],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),k=le(T.prototype,"title",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),B=le(T.prototype,"titleLevel",[P],{configurable:true,enumerable:true,writable:true,initializer:function(){return N.Auto}}),j=le(T.prototype,"displayMode",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),A=le(T.prototype,"isVisible",[$],{configurable:true,enumerable:true,writable:true,initializer:function(){return"true"}}),_=le(T.prototype,"onChange",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),D=le(T.prototype,"formElements",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),X=le(T.prototype,"layout",[x],{configurable:true,enumerable:true,writable:true,initializer:function(){return{type:"ColumnLayout",columnsM:2,columnsXL:6,columnsL:3,labelCellsLarge:12}}}),T))||S);U=ue;return U},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormAPI-dbg", ["sap/fe/core/helpers/ClassSupport", "../MacroAPI"], function (ClassSupport, MacroAPI) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FormAPI = (_dec = defineUI5Class("sap.fe.macros.form.FormAPI"), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "string",
    expectedAnnotations: ["@com.sap.vocabularies.UI.v1.FieldGroup", "@com.sap.vocabularies.UI.v1.CollectionFacet", "@com.sap.vocabularies.UI.v1.ReferenceFacet"],
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"]
  }), _dec4 = property({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(FormAPI, _MacroAPI);
    function FormAPI() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MacroAPI.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor3, _assertThisInitialized(_this));
      return _this;
    }
    return FormAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FormAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormAPI", ["sap/fe/core/helpers/ClassSupport","../MacroAPI"],function(e,r){"use strict";var t,i,n,a,o,l,u,c,s;var p=e.property;var f=e.defineUI5Class;function b(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function d(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function v(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;y(e,r)}function y(e,r){y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,t){r.__proto__=t;return r};return y(e,r)}function m(e,r,t,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=t.slice().reverse().reduce(function(t,i){return i(e,r,t)||t},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function g(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let h=(t=f("sap.fe.macros.form.FormAPI"),i=p({type:"string"}),n=p({type:"string",expectedAnnotations:["@com.sap.vocabularies.UI.v1.FieldGroup","@com.sap.vocabularies.UI.v1.CollectionFacet","@com.sap.vocabularies.UI.v1.ReferenceFacet"],expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"]}),a=p({type:"string"}),t(o=(l=function(e){v(r,e);function r(){var r;for(var t=arguments.length,i=new Array(t),n=0;n<t;n++){i[n]=arguments[n]}r=e.call(this,...i)||this;b(r,"id",u,d(r));b(r,"metaPath",c,d(r));b(r,"title",s,d(r));return r}return r}(r),u=m(l.prototype,"id",[i],{configurable:true,enumerable:true,writable:true,initializer:null}),c=m(l.prototype,"metaPath",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),s=m(l.prototype,"title",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),l))||o);return h},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormContainer.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/converters/controls/Common/Form", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/templating/DataModelPathHelper"], function (BuildingBlockBase, BuildingBlockSupport, Form, MetaModelConverter, DataModelPathHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
  var _exports = {};
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var createFormDefinition = Form.createFormDefinition;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FormContainerBlock = (
  /**
   * Building block for creating a FormContainer based on the provided OData V4 metadata.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:FormContainer
   *   id="SomeId"
   *   entitySet="{entitySet>}"
   *   dataFieldCollection ="{dataFieldCollection>}"
   *   title="someTitle"
   *   navigationPath="{ToSupplier}"
   *   visible=true
   *   onChange=".handlers.onFieldValueChange"
   * /&gt;
   * </pre>
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "FormContainer",
    namespace: "sap.fe.macros",
    fragment: "sap.fe.macros.form.FormContainer"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    isPublic: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true
  }), _dec6 = blockAttribute({
    type: "array"
  }), _dec7 = blockAttribute({
    type: "boolean"
  }), _dec8 = blockAttribute({
    type: "string"
  }), _dec9 = blockAttribute({
    type: "sap.ui.core.TitleLevel",
    isPublic: true
  }), _dec10 = blockAttribute({
    type: "string"
  }), _dec11 = blockAttribute({
    type: "string"
  }), _dec12 = blockAttribute({
    type: "string"
  }), _dec13 = blockAttribute({
    type: "array"
  }), _dec14 = blockAggregation({
    type: "sap.fe.macros.form.FormElement"
  }), _dec15 = blockEvent(), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FormContainerBlock, _BuildingBlockBase);
    /**
     * Metadata path to the dataFieldCollection
     */

    /**
     * Control whether the form is in displayMode or not
     */

    /**
     * Title of the form container
     */

    /**
     * Defines the "aria-level" of the form title, titles of internally used form containers are nested subsequently
     */

    /**
     * Binding the form container using a navigation path
     */

    /**
     * Binding the visibility of the form container using an expression binding or Boolean
     */

    /**
     * Flex designtime settings to be applied
     */

    // Just proxied down to the Field may need to see if needed or not

    function FormContainerBlock(props, externalConfiguration, settings) {
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entitySet", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dataFieldCollection", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "displayMode", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "titleLevel", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationPath", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "designtimeSettings", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actions", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formElements", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onChange", _descriptor14, _assertThisInitialized(_this));
      _this.entitySet = _this.contextPath;
      if (_this.formElements && Object.keys(_this.formElements).length > 0) {
        const oContextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
        const mExtraSettings = {};
        let oFacetDefinition = oContextObjectPath.targetObject;
        // Wrap the facet in a fake Facet annotation
        oFacetDefinition = {
          $Type: "com.sap.vocabularies.UI.v1.ReferenceFacet",
          Label: oFacetDefinition.Label,
          Target: {
            $target: oFacetDefinition,
            fullyQualifiedName: oFacetDefinition.fullyQualifiedName,
            path: "",
            term: "",
            type: "AnnotationPath",
            value: getContextRelativeTargetObjectPath(oContextObjectPath)
          },
          annotations: {},
          fullyQualifiedName: oFacetDefinition.fullyQualifiedName
        };
        mExtraSettings[oFacetDefinition.Target.value] = {
          fields: _this.formElements
        };
        const oConverterContext = _this.getConverterContext(oContextObjectPath, /*this.contextPath*/undefined, settings, mExtraSettings);
        const oFormDefinition = createFormDefinition(oFacetDefinition, "true", oConverterContext);
        _this.dataFieldCollection = oFormDefinition.formContainers[0].formElements;
      }
      return _this;
    }
    _exports = FormContainerBlock;
    return FormContainerBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "entitySet", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dataFieldCollection", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "displayMode", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "titleLevel", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "Auto";
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "navigationPath", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "designtimeSettings", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "sap/fe/macros/form/FormContainer.designtime";
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "actions", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "formElements", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "onChange", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = FormContainerBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormContainer.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/converters/controls/Common/Form","sap/fe/core/converters/MetaModelConverter","sap/fe/core/templating/DataModelPathHelper"],function(e,t,r,i,n){"use strict";var a,l,o,u,c,s,p,f,b,m,d,y,g,v,h,z,w,P,C,E,O,j,k,x,F,B,S,T,M,L,N;var A={};var D=n.getContextRelativeTargetObjectPath;var Q=i.getInvolvedDataModelObjects;var _=r.createFormDefinition;var R=t.defineBuildingBlock;var q=t.blockEvent;var I=t.blockAttribute;var $=t.blockAggregation;function H(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function U(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function G(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;J(e,t)}function J(e,t){J=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return J(e,t)}function K(e,t,r,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function V(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let W=(a=R({name:"FormContainer",namespace:"sap.fe.macros",fragment:"sap.fe.macros.form.FormContainer"}),l=I({type:"string"}),o=I({type:"sap.ui.model.Context",required:true,isPublic:true,expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),u=I({type:"sap.ui.model.Context"}),c=I({type:"sap.ui.model.Context",isPublic:true,required:true}),s=I({type:"array"}),p=I({type:"boolean"}),f=I({type:"string"}),b=I({type:"sap.ui.core.TitleLevel",isPublic:true}),m=I({type:"string"}),d=I({type:"string"}),y=I({type:"string"}),g=I({type:"array"}),v=$({type:"sap.fe.macros.form.FormElement"}),h=q(),a(z=(w=function(e){G(t,e);function t(t,r,i){var n;n=e.call(this,t)||this;H(n,"id",P,U(n));H(n,"contextPath",C,U(n));H(n,"entitySet",E,U(n));H(n,"metaPath",O,U(n));H(n,"dataFieldCollection",j,U(n));H(n,"displayMode",k,U(n));H(n,"title",x,U(n));H(n,"titleLevel",F,U(n));H(n,"navigationPath",B,U(n));H(n,"visible",S,U(n));H(n,"designtimeSettings",T,U(n));H(n,"actions",M,U(n));H(n,"formElements",L,U(n));H(n,"onChange",N,U(n));n.entitySet=n.contextPath;if(n.formElements&&Object.keys(n.formElements).length>0){const e=Q(n.metaPath,n.contextPath);const t={};let r=e.targetObject;r={$Type:"com.sap.vocabularies.UI.v1.ReferenceFacet",Label:r.Label,Target:{$target:r,fullyQualifiedName:r.fullyQualifiedName,path:"",term:"",type:"AnnotationPath",value:D(e)},annotations:{},fullyQualifiedName:r.fullyQualifiedName};t[r.Target.value]={fields:n.formElements};const a=n.getConverterContext(e,undefined,i,t);const l=_(r,"true",a);n.dataFieldCollection=l.formContainers[0].formElements}return n}A=t;return t}(e),P=K(w.prototype,"id",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),C=K(w.prototype,"contextPath",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),E=K(w.prototype,"entitySet",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),O=K(w.prototype,"metaPath",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),j=K(w.prototype,"dataFieldCollection",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),k=K(w.prototype,"displayMode",[p],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),x=K(w.prototype,"title",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),F=K(w.prototype,"titleLevel",[b],{configurable:true,enumerable:true,writable:true,initializer:function(){return"Auto"}}),B=K(w.prototype,"navigationPath",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),S=K(w.prototype,"visible",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),T=K(w.prototype,"designtimeSettings",[y],{configurable:true,enumerable:true,writable:true,initializer:function(){return"sap/fe/macros/form/FormContainer.designtime"}}),M=K(w.prototype,"actions",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),L=K(w.prototype,"formElements",[v],{configurable:true,enumerable:true,writable:true,initializer:function(){return{}}}),N=K(w.prototype,"onChange",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),w))||z);A=W;return A},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormContainerAPI-dbg", ["sap/fe/core/helpers/ClassSupport", "../MacroAPI"], function (ClassSupport, MacroAPI) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _class3;
  var xmlEventHandler = ClassSupport.xmlEventHandler;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * @alias sap.fe.macros.form.FormContainerAPI
   * @private
   */
  let FormContainerAPI = (_dec = defineUI5Class("sap.fe.macros.form.FormContainerAPI"), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "boolean"
  }), _dec4 = xmlEventHandler(), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(FormContainerAPI, _MacroAPI);
    /**
     * The identifier of the form container control.
     *
     * @public
     */

    function FormContainerAPI(props) {
      var _this;
      _this = _MacroAPI.call(this, props, true) || this;
      _initializerDefineProperty(_this, "formContainerId", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showDetails", _descriptor2, _assertThisInitialized(_this));
      _this.setParentBindingContext("internal", `controls/${_this.formContainerId}`);
      return _this;
    }
    var _proto = FormContainerAPI.prototype;
    _proto.toggleDetails = function toggleDetails() {
      this.showDetails = !this.showDetails;
    };
    return FormContainerAPI;
  }(MacroAPI), _class3.isDependentBound = true, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "formContainerId", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showDetails", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _applyDecoratedDescriptor(_class2.prototype, "toggleDetails", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "toggleDetails"), _class2.prototype)), _class2)) || _class);
  return FormContainerAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormContainerAPI", ["sap/fe/core/helpers/ClassSupport","../MacroAPI"],function(e,t){"use strict";var r,i,n,o,a,l,u,s,c;var f=e.xmlEventHandler;var p=e.property;var b=e.defineUI5Class;function d(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function y(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function h(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;v(e,t)}function v(e,t){v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return v(e,t)}function g(e,t,r,i,n){var o={};Object.keys(i).forEach(function(e){o[e]=i[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function m(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let w=(r=b("sap.fe.macros.form.FormContainerAPI"),i=p({type:"string"}),n=p({type:"boolean"}),o=f(),r(a=(l=(c=function(e){h(t,e);function t(t){var r;r=e.call(this,t,true)||this;d(r,"formContainerId",u,y(r));d(r,"showDetails",s,y(r));r.setParentBindingContext("internal",`controls/${r.formContainerId}`);return r}var r=t.prototype;r.toggleDetails=function e(){this.showDetails=!this.showDetails};return t}(t),c.isDependentBound=true,c),u=g(l.prototype,"formContainerId",[i],{configurable:true,enumerable:true,writable:true,initializer:null}),s=g(l.prototype,"showDetails",[n],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),g(l.prototype,"toggleDetails",[o],Object.getOwnPropertyDescriptor(l.prototype,"toggleDetails"),l.prototype),l))||a);return w},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormDelegate-dbg", ["sap/fe/macros/CommonHelper", "sap/fe/macros/DelegateUtil", "sap/ui/model/json/JSONModel", "sap/ui/model/ListBinding"], function (Common, DelegateUtil, JSONModel, ListBinding) {
  "use strict";

  const Delegate = {
    /**
     * @param mPropertyBag Object with parameters as properties
     * @param mPropertyBag.modifier Modifier to harmonize access, creation and manipulation to controls in XML Views and JS Controls
     * @param [mPropertyBag.appComponent] Needed to calculate the correct ID in case you provide a selector
     * @param [mPropertyBag.view] XML node of the view, required for XML case to create nodes and to find elements
     * @param [mPropertyBag.fieldSelector] Selector to calculate the ID for the control that is created
     * @param mPropertyBag.bindingPath Runtime binding path the control should be bound to
     * @param mPropertyBag.payload Payload parameter attached to the delegate, undefined if no payload was assigned
     * @param mPropertyBag.controlType Control type of the element the delegate is attached to
     * @param mPropertyBag.aggregationName Name of the aggregation the delegate should provide additional elements
     * @param mPropertyBag.element
     * @param mPropertyBag.parentSelector
     * @returns Map containing the controls to add
     */
    createLayout: async function (mPropertyBag) {
      var _mPropertyBag$appComp;
      const oModifier = mPropertyBag.modifier,
        oMetaModel = (_mPropertyBag$appComp = mPropertyBag.appComponent) === null || _mPropertyBag$appComp === void 0 ? void 0 : _mPropertyBag$appComp.getMetaModel(),
        oForm = mPropertyBag.element;
      let sEntitySet = await DelegateUtil.getCustomData(oForm, "entitySet", oModifier);
      if (!sEntitySet) {
        sEntitySet = await DelegateUtil.getCustomData(oForm, "navigationPath", oModifier);
      }
      const sPath = sEntitySet.startsWith("/") ? `${sEntitySet}` : `/${sEntitySet}`;
      const oFormContainer = mPropertyBag.parentSelector ? mPropertyBag.modifier.bySelector(mPropertyBag.parentSelector, mPropertyBag.appComponent, mPropertyBag.view) : undefined;
      const sNavigationPath = await DelegateUtil.getCustomData(oFormContainer, "navigationPath", oModifier);
      const sBindingPath = sNavigationPath ? `${sPath}/${sNavigationPath}` : sPath;
      const oMetaModelContext = oMetaModel === null || oMetaModel === void 0 ? void 0 : oMetaModel.getMetaContext(sBindingPath);
      const oPropertyContext = oMetaModel === null || oMetaModel === void 0 ? void 0 : oMetaModel.createBindingContext(`${sBindingPath}/${mPropertyBag.bindingPath}`);
      const sFormId = mPropertyBag.element.sId || mPropertyBag.element.id;
      const oParameters = {
        sPropertyName: mPropertyBag.bindingPath,
        sBindingPath: sBindingPath,
        sValueHelpType: "FormVH",
        oControl: oForm,
        oMetaModel: oMetaModel,
        oModifier: oModifier
      };
      function fnTemplateValueHelp(sFragmentName) {
        var _mPropertyBag$fieldSe;
        const oThis = new JSONModel({
            id: sFormId,
            idPrefix: (_mPropertyBag$fieldSe = mPropertyBag.fieldSelector) === null || _mPropertyBag$fieldSe === void 0 ? void 0 : _mPropertyBag$fieldSe.id
          }),
          oPreprocessorSettings = {
            bindingContexts: {
              entitySet: oMetaModelContext,
              contextPath: oMetaModelContext,
              property: oPropertyContext,
              this: oThis.createBindingContext("/")
            },
            models: {
              this: oThis,
              entitySet: oMetaModel,
              contextPath: oMetaModel,
              metaModel: oMetaModel,
              property: oMetaModel
            }
          };
        return DelegateUtil.templateControlFragment(sFragmentName, oPreprocessorSettings, {}, oModifier);
      }
      async function fnTemplateFormElement(sFragmentName, oView, navigationPath) {
        var _mPropertyBag$fieldSe2;
        const sOnChangeCustomData = await DelegateUtil.getCustomData(oForm, "onChange", oModifier);
        const sDisplayModeCustomData = await DelegateUtil.getCustomData(oForm, "displayMode", oModifier);
        const oThis = new JSONModel({
          // properties and events of Field macro
          _flexId: (_mPropertyBag$fieldSe2 = mPropertyBag.fieldSelector) === null || _mPropertyBag$fieldSe2 === void 0 ? void 0 : _mPropertyBag$fieldSe2.id,
          onChange: Common.removeEscapeCharacters(sOnChangeCustomData),
          displayMode: Common.removeEscapeCharacters(sDisplayModeCustomData),
          navigationPath: navigationPath
        });
        const oPreprocessorSettings = {
          bindingContexts: {
            entitySet: oMetaModelContext,
            dataField: oPropertyContext,
            this: oThis.createBindingContext("/")
          },
          models: {
            this: oThis,
            entitySet: oMetaModel,
            metaModel: oMetaModel,
            dataField: oMetaModel
          },
          appComponent: mPropertyBag.appComponent
        };
        return DelegateUtil.templateControlFragment(sFragmentName, oPreprocessorSettings, {
          view: oView
        }, oModifier);
      }
      const bValueHelpRequired = await DelegateUtil.isValueHelpRequired(oParameters);
      const bValueHelpExists = await DelegateUtil.doesValueHelpExist(oParameters);
      let oValueHelp;
      if (bValueHelpRequired && !bValueHelpExists) {
        oValueHelp = await fnTemplateValueHelp("sap.fe.macros.form.ValueHelpWrapper");
      }
      const oField = await fnTemplateFormElement("sap.fe.macros.form.FormElementFlexibility", mPropertyBag.view, sNavigationPath);
      return {
        control: oField,
        valueHelp: oValueHelp
      };
    },
    // getPropertyInfo is a patched version of ODataV4ReadDelegates to dela with navigationPath
    getPropertyInfo: function (mPropertyBag) {
      function _isComplexType(mProperty) {
        if (mProperty && mProperty.$Type) {
          if (mProperty.$Type.toLowerCase().indexOf("edm") !== 0) {
            return true;
          }
        }
        return false;
      }

      //Check if a given property path starts with a navigation property.
      function _startsWithNavigationProperty(sPropertyPath, aNavigationProperties) {
        return aNavigationProperties.some(function (sNavProp) {
          return sPropertyPath.startsWith(sNavProp);
        });
      }
      function _enrichProperty(sPropertyPath, mElement, mPropertyAnnotations, sEntityType, oElement, sAggregationName, aNavigationProperties) {
        const mProp = {
          name: sPropertyPath,
          bindingPath: sPropertyPath,
          entityType: sEntityType
        };
        // get label information, either via DataFieldDefault annotation (if exists) or Label annotation
        const mDataFieldDefaultAnnotation = mPropertyAnnotations["@com.sap.vocabularies.UI.v1.DataFieldDefault"];
        const sLabel = mDataFieldDefaultAnnotation && mDataFieldDefaultAnnotation.Label || mPropertyAnnotations["@com.sap.vocabularies.Common.v1.Label"];
        mProp.label = sLabel || "[LABEL_MISSING: " + sPropertyPath + "]";
        // evaluate Hidden annotation
        const mHiddenAnnotation = mPropertyAnnotations["@com.sap.vocabularies.UI.v1.Hidden"];
        mProp.hideFromReveal = mHiddenAnnotation;
        if (mHiddenAnnotation && mHiddenAnnotation.$Path) {
          var _oElement$getBindingC;
          mProp.hideFromReveal = (_oElement$getBindingC = oElement.getBindingContext()) === null || _oElement$getBindingC === void 0 ? void 0 : _oElement$getBindingC.getProperty(mHiddenAnnotation.$Path);
        }
        // evaluate AdaptationHidden annotation
        if (!mProp.hideFromReveal) {
          mProp.hideFromReveal = mPropertyAnnotations["@com.sap.vocabularies.UI.v1.AdaptationHidden"];
        }
        // evaluate FieldControl annotation
        let mFieldControlAnnotation;
        if (!mProp.hideFromReveal) {
          mFieldControlAnnotation = mPropertyAnnotations["@com.sap.vocabularies.Common.v1.FieldControl"];
          if (mFieldControlAnnotation) {
            mProp.hideFromReveal = mFieldControlAnnotation.$EnumMember === "com.sap.vocabularies.Common.v1.FieldControlType/Hidden";
          }
        }
        // @runtime hidden by field control value = 0
        mFieldControlAnnotation = mPropertyAnnotations["@com.sap.vocabularies.Common.v1.FieldControl"];
        const sFieldControlPath = mFieldControlAnnotation && mFieldControlAnnotation.Path;
        if (sFieldControlPath && !mProp.hideFromReveal) {
          // if the binding is a list binding, skip the check for field control
          const bListBinding = oElement.getBinding(sAggregationName) instanceof ListBinding;
          if (!bListBinding) {
            var _oElement$getBindingC2;
            const iFieldControlValue = (_oElement$getBindingC2 = oElement.getBindingContext()) === null || _oElement$getBindingC2 === void 0 ? void 0 : _oElement$getBindingC2.getProperty(sFieldControlPath);
            mProp.hideFromReveal = iFieldControlValue === 0;
          }
        }
        // no support for DataFieldFor/WithAction and DataFieldFor/WithIntentBasedNavigation within DataFieldDefault annotation
        if (mDataFieldDefaultAnnotation && (mDataFieldDefaultAnnotation.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || mDataFieldDefaultAnnotation.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || mDataFieldDefaultAnnotation.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction" || mDataFieldDefaultAnnotation.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")) {
          mProp.unsupported = true;
        }
        // no support for navigation properties and complex properties
        if (_startsWithNavigationProperty(sPropertyPath, aNavigationProperties) || _isComplexType(mElement)) {
          mProp.unsupported = true;
        }
        return mProp;
      }

      // Convert metadata format to delegate format.
      function _convertMetadataToDelegateFormat(mODataEntityType, sEntityType, oMetaModel, oElement, sAggregationName) {
        const aProperties = [];
        let sElementName = "";
        const aNavigationProperties = [];
        let mElement;
        for (sElementName in mODataEntityType) {
          mElement = mODataEntityType[sElementName];
          if (mElement.$kind === "NavigationProperty") {
            aNavigationProperties.push(sElementName);
          }
        }
        for (sElementName in mODataEntityType) {
          mElement = mODataEntityType[sElementName];
          if (mElement.$kind === "Property") {
            const mPropAnnotations = oMetaModel.getObject("/" + sEntityType + "/" + sElementName + "@");
            const mProp = _enrichProperty(sElementName, mElement, mPropAnnotations, sEntityType, oElement, sAggregationName, aNavigationProperties);
            aProperties.push(mProp);
          }
        }
        return aProperties;
      }

      //Get binding path either from payload (if available) or the element's binding context.
      function _getBindingPath(oElement, mPayload) {
        if (mPayload.path) {
          return mPayload.path;
        }
        const vBinding = oElement.getBindingContext();
        if (vBinding) {
          if (oElement.data("navigationPath")) {
            return vBinding.getPath() + "/" + oElement.data("navigationPath");
          }
          return vBinding.getPath();
        }
      }

      //Get all properties of the element's model.
      function _getODataPropertiesOfModel(oElement, sAggregationName, mPayload) {
        const oModel = oElement.getModel(mPayload.modelName);
        if (oModel) {
          if (oModel.isA("sap.ui.model.odata.v4.ODataModel")) {
            const oMetaModel = oModel.getMetaModel();
            const sBindingContextPath = _getBindingPath(oElement, mPayload);
            if (sBindingContextPath) {
              const oMetaModelContext = oMetaModel.getMetaContext(sBindingContextPath);
              const oMetaModelContextObject = oMetaModelContext.getObject();
              const mODataEntityType = oMetaModelContext.getObject(oMetaModelContextObject.$Type);
              return _convertMetadataToDelegateFormat(mODataEntityType, oMetaModelContextObject.$Type, oMetaModel, oElement, sAggregationName);
            }
          }
        }
        return Promise.resolve([]);
      }
      return Promise.resolve().then(function () {
        return _getODataPropertiesOfModel(mPropertyBag.element, mPropertyBag.aggregationName, mPropertyBag.payload);
      });
    }
  };
  return Delegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormDelegate", ["sap/fe/macros/CommonHelper","sap/fe/macros/DelegateUtil","sap/ui/model/json/JSONModel","sap/ui/model/ListBinding"],function(e,t,o,n){"use strict";const a={createLayout:async function(n){var a;const i=n.modifier,r=(a=n.appComponent)===null||a===void 0?void 0:a.getMetaModel(),s=n.element;let l=await t.getCustomData(s,"entitySet",i);if(!l){l=await t.getCustomData(s,"navigationPath",i)}const d=l.startsWith("/")?`${l}`:`/${l}`;const c=n.parentSelector?n.modifier.bySelector(n.parentSelector,n.appComponent,n.view):undefined;const p=await t.getCustomData(c,"navigationPath",i);const m=p?`${d}/${p}`:d;const u=r===null||r===void 0?void 0:r.getMetaContext(m);const v=r===null||r===void 0?void 0:r.createBindingContext(`${m}/${n.bindingPath}`);const f=n.element.sId||n.element.id;const g={sPropertyName:n.bindingPath,sBindingPath:m,sValueHelpType:"FormVH",oControl:s,oMetaModel:r,oModifier:i};function h(e){var a;const s=new o({id:f,idPrefix:(a=n.fieldSelector)===null||a===void 0?void 0:a.id}),l={bindingContexts:{entitySet:u,contextPath:u,property:v,this:s.createBindingContext("/")},models:{this:s,entitySet:r,contextPath:r,metaModel:r,property:r}};return t.templateControlFragment(e,l,{},i)}async function C(a,l,d){var c;const p=await t.getCustomData(s,"onChange",i);const m=await t.getCustomData(s,"displayMode",i);const f=new o({_flexId:(c=n.fieldSelector)===null||c===void 0?void 0:c.id,onChange:e.removeEscapeCharacters(p),displayMode:e.removeEscapeCharacters(m),navigationPath:d});const g={bindingContexts:{entitySet:u,dataField:v,this:f.createBindingContext("/")},models:{this:f,entitySet:r,metaModel:r,dataField:r},appComponent:n.appComponent};return t.templateControlFragment(a,g,{view:l},i)}const y=await t.isValueHelpRequired(g);const b=await t.doesValueHelpExist(g);let F;if(y&&!b){F=await h("sap.fe.macros.form.ValueHelpWrapper")}const P=await C("sap.fe.macros.form.FormElementFlexibility",n.view,p);return{control:P,valueHelp:F}},getPropertyInfo:function(e){function t(e){if(e&&e.$Type){if(e.$Type.toLowerCase().indexOf("edm")!==0){return true}}return false}function o(e,t){return t.some(function(t){return e.startsWith(t)})}function a(e,a,i,r,s,l,d){const c={name:e,bindingPath:e,entityType:r};const p=i["@com.sap.vocabularies.UI.v1.DataFieldDefault"];const m=p&&p.Label||i["@com.sap.vocabularies.Common.v1.Label"];c.label=m||"[LABEL_MISSING: "+e+"]";const u=i["@com.sap.vocabularies.UI.v1.Hidden"];c.hideFromReveal=u;if(u&&u.$Path){var v;c.hideFromReveal=(v=s.getBindingContext())===null||v===void 0?void 0:v.getProperty(u.$Path)}if(!c.hideFromReveal){c.hideFromReveal=i["@com.sap.vocabularies.UI.v1.AdaptationHidden"]}let f;if(!c.hideFromReveal){f=i["@com.sap.vocabularies.Common.v1.FieldControl"];if(f){c.hideFromReveal=f.$EnumMember==="com.sap.vocabularies.Common.v1.FieldControlType/Hidden"}}f=i["@com.sap.vocabularies.Common.v1.FieldControl"];const g=f&&f.Path;if(g&&!c.hideFromReveal){const e=s.getBinding(l)instanceof n;if(!e){var h;const e=(h=s.getBindingContext())===null||h===void 0?void 0:h.getProperty(g);c.hideFromReveal=e===0}}if(p&&(p.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||p.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"||p.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithAction"||p.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation")){c.unsupported=true}if(o(e,d)||t(a)){c.unsupported=true}return c}function i(e,t,o,n,i){const r=[];let s="";const l=[];let d;for(s in e){d=e[s];if(d.$kind==="NavigationProperty"){l.push(s)}}for(s in e){d=e[s];if(d.$kind==="Property"){const e=o.getObject("/"+t+"/"+s+"@");const c=a(s,d,e,t,n,i,l);r.push(c)}}return r}function r(e,t){if(t.path){return t.path}const o=e.getBindingContext();if(o){if(e.data("navigationPath")){return o.getPath()+"/"+e.data("navigationPath")}return o.getPath()}}function s(e,t,o){const n=e.getModel(o.modelName);if(n){if(n.isA("sap.ui.model.odata.v4.ODataModel")){const a=n.getMetaModel();const s=r(e,o);if(s){const o=a.getMetaContext(s);const n=o.getObject();const r=o.getObject(n.$Type);return i(r,n.$Type,a,e,t)}}}return Promise.resolve([])}return Promise.resolve().then(function(){return s(e.element,e.aggregationName,e.payload)})}};return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormElement.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  var _exports = {};
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FormElementBlock = (
  /**
   * Building block used to create a form element based on the metadata provided by OData V4.
   *
   * @public
   * @since 1.90.0
   */
  _dec = defineBuildingBlock({
    name: "FormElement",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.ui.layout.form.FormElement"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "Singleton", "EntityType"]
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true,
    expectedTypes: ["Property"],
    expectedAnnotationTypes: ["com.sap.vocabularies.UI.v1.DataField", "com.sap.vocabularies.UI.v1.DataFieldWithUrl", "com.sap.vocabularies.UI.v1.DataFieldForAnnotation", "com.sap.vocabularies.UI.v1.DataFieldForAction", "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation", "com.sap.vocabularies.UI.v1.DataFieldWithAction", "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation", "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath", "com.sap.vocabularies.UI.v1.DataPointType"]
  }), _dec5 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec6 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec7 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec8 = blockAggregation({
    type: "sap.ui.core.Control",
    slot: "fields",
    isPublic: true,
    isDefault: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FormElementBlock, _BuildingBlockBase);
    /**
     * The identifier of the FormElement building block.
     *
     * @public
     */

    /**
     * Defines the path of the context used in the current page or block.
     * This setting is defined by the framework.
     *
     * @public
     */

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     *
     * @public
     */

    /**
     * Label shown for the field. If not set, the label from the annotations will be shown.
     *
     * @public
     */

    /**
     * If set to false, the FormElement is not rendered.
     *
     * @public
     */

    /**
     * Optional aggregation of controls that should be displayed inside the FormElement.
     * If not set, a default Field building block will be rendered
     *
     * @public
     */

    function FormElementBlock(props, configuration, mSettings) {
      var _this;
      _this = _BuildingBlockBase.call(this, props, configuration, mSettings) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "label", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "key", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "fields", _descriptor7, _assertThisInitialized(_this));
      const oContextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
      if (_this.label === undefined) {
        var _annotations$Common, _annotations$Common$L;
        _this.label = ((_annotations$Common = oContextObjectPath.targetObject.annotations.Common) === null || _annotations$Common === void 0 ? void 0 : (_annotations$Common$L = _annotations$Common.Label) === null || _annotations$Common$L === void 0 ? void 0 : _annotations$Common$L.toString()) ?? "";
      }
      return _this;
    }
    _exports = FormElementBlock;
    var _proto = FormElementBlock.prototype;
    _proto.getFields = function getFields() {
      if (this.fields) {
        return xml`<slot name="fields" />`;
      } else {
        return xml`<macros:Field
						metaPath="${this.metaPath}"
						contextPath="${this.contextPath}"
						id="${this.createId("FormElementField")}" />`;
      }
    };
    _proto.getTemplate = function getTemplate() {
      return xml`<f:FormElement xmlns:f="sap.ui.layout.form" id="${this.id}"
			key="${this.key}"
			label="${this.label}"
			visible="${this.visible}">
			<f:fields>
				${this.getFields()}
			</f:fields>
		</f:FormElement>`;
    };
    return FormElementBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "label", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "key", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "fields", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = FormElementBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormElement.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter"],function(e,t,i,r){"use strict";var a,l,n,o,u,s,c,b,p,d,f,v,m,y,g,h,P;var F={};var z=r.getInvolvedDataModelObjects;var k=i.xml;var w=t.defineBuildingBlock;var B=t.blockAttribute;var I=t.blockAggregation;function x(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function D(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function E(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;O(e,t)}function O(e,t){O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return O(e,t)}function U(e,t,i,r,a){var l={};Object.keys(r).forEach(function(e){l[e]=r[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},l);if(a&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(a):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function j(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let T=(a=w({name:"FormElement",publicNamespace:"sap.fe.macros",returnTypes:["sap.ui.layout.form.FormElement"]}),l=B({type:"string",isPublic:true,required:true}),n=B({type:"sap.ui.model.Context",isPublic:true,required:true,expectedTypes:["EntitySet","NavigationProperty","Singleton","EntityType"]}),o=B({type:"sap.ui.model.Context",isPublic:true,required:true,expectedTypes:["Property"],expectedAnnotationTypes:["com.sap.vocabularies.UI.v1.DataField","com.sap.vocabularies.UI.v1.DataFieldWithUrl","com.sap.vocabularies.UI.v1.DataFieldForAnnotation","com.sap.vocabularies.UI.v1.DataFieldForAction","com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation","com.sap.vocabularies.UI.v1.DataFieldWithAction","com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation","com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath","com.sap.vocabularies.UI.v1.DataPointType"]}),u=B({type:"string",isPublic:true}),s=B({type:"boolean",isPublic:true}),c=B({type:"string",isPublic:true}),b=I({type:"sap.ui.core.Control",slot:"fields",isPublic:true,isDefault:true}),a(p=(d=function(e){E(t,e);function t(t,i,r){var a;a=e.call(this,t,i,r)||this;x(a,"id",f,D(a));x(a,"contextPath",v,D(a));x(a,"metaPath",m,D(a));x(a,"label",y,D(a));x(a,"visible",g,D(a));x(a,"key",h,D(a));x(a,"fields",P,D(a));const l=z(a.metaPath,a.contextPath);if(a.label===undefined){var n,o;a.label=((n=l.targetObject.annotations.Common)===null||n===void 0?void 0:(o=n.Label)===null||o===void 0?void 0:o.toString())??""}return a}F=t;var i=t.prototype;i.getFields=function e(){if(this.fields){return k`<slot name="fields" />`}else{return k`<macros:Field
						metaPath="${this.metaPath}"
						contextPath="${this.contextPath}"
						id="${this.createId("FormElementField")}" />`}};i.getTemplate=function e(){return k`<f:FormElement xmlns:f="sap.ui.layout.form" id="${this.id}"
			key="${this.key}"
			label="${this.label}"
			visible="${this.visible}">
			<f:fields>
				${this.getFields()}
			</f:fields>
		</f:FormElement>`};return t}(e),f=U(d.prototype,"id",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),v=U(d.prototype,"contextPath",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),m=U(d.prototype,"metaPath",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),y=U(d.prototype,"label",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=U(d.prototype,"visible",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),h=U(d.prototype,"key",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),P=U(d.prototype,"fields",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),d))||p);F=T;return F},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormHelper-dbg", ["sap/ui/core/library"], function (library) {
  "use strict";

  var TitleLevel = library.TitleLevel;
  /**
   * Helper class used by MDC controls for OData(V4) specific handling
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const FormHelper = {
    /**
     * Method that checks, if a reference facet needs to be assigned to either "blocks" or "moreBlocks" (tagged by subsection property "partOfPreview!).
     *
     * @param referenceFacet Reference facet that needs to be assigned
     * @param partOfPreview Subsection property "partOfPreview" that needs to aligned with the reference facet's annotation "PartOfPreview!
     * @param partOfPreview.toString
     * @returns True, if the ReferenceFacet has the same annotation as the subsection's property "partOfPreview"
     */
    isReferenceFacetPartOfPreview: function (referenceFacet, partOfPreview) {
      partOfPreview = partOfPreview.toString();
      if (referenceFacet.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
        const annotatedTerm = referenceFacet["@com.sap.vocabularies.UI.v1.PartOfPreview"];
        return partOfPreview === "true" && annotatedTerm !== false || partOfPreview === "false" && annotatedTerm === false;
      }
      return false;
    },
    /**
     * Creates and returns a select query with the selected fields from the parameters passed.
     *
     * @param semanticKeys SemanticKeys included in the entity set
     * @returns The fields to be included in the select query
     */
    create$Select: function (semanticKeys) {
      return (semanticKeys || []).map(key => key.$PropertyPath).join(",");
    },
    /**
     * Generates the binding expression for the form.
     *
     * @param navigationPath The navigation path defined for the entity
     * @param semanticKeys SemanticKeys included in the entity set
     * @returns The Binding expression including path and $select query as parameter depending on the function parameters
     */
    generateBindingExpression: function (navigationPath, semanticKeys) {
      if (!navigationPath && !semanticKeys) {
        return "";
      }
      const binding = {
        path: navigationPath || ""
      };
      if (semanticKeys) {
        binding.parameters = {
          $select: FormHelper.create$Select(semanticKeys)
        };
      }
      return JSON.stringify(binding);
    },
    /**
     * Calculates the title level for the containers in this form.
     *
     * If there is no form title, the form containers get the same header level as the form, otherwise the levels are incremented to reflect the deeper nesting.
     *
     * @param [title] The title of the form
     * @param [titleLevel] The title level of the form
     * @returns The title level of the form containers
     */
    getFormContainerTitleLevel: function (title, titleLevel) {
      if (!title) {
        return titleLevel;
      }
      switch (titleLevel) {
        case TitleLevel.H1:
          return TitleLevel.H2;
        case TitleLevel.H2:
          return TitleLevel.H3;
        case TitleLevel.H3:
          return TitleLevel.H4;
        case TitleLevel.H4:
          return TitleLevel.H5;
        case TitleLevel.H5:
        case TitleLevel.H6:
          return TitleLevel.H6;
        default:
          return TitleLevel.Auto;
      }
    }
  };
  return FormHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/form/FormHelper", ["sap/ui/core/library"],function(e){"use strict";var r=e.TitleLevel;const t={isReferenceFacetPartOfPreview:function(e,r){r=r.toString();if(e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"){const t=e["@com.sap.vocabularies.UI.v1.PartOfPreview"];return r==="true"&&t!==false||r==="false"&&t===false}return false},create$Select:function(e){return(e||[]).map(e=>e.$PropertyPath).join(",")},generateBindingExpression:function(e,r){if(!e&&!r){return""}const n={path:e||""};if(r){n.parameters={$select:t.create$Select(r)}}return JSON.stringify(n)},getFormContainerTitleLevel:function(e,t){if(!e){return t}switch(t){case r.H1:return r.H2;case r.H2:return r.H3;case r.H3:return r.H4;case r.H4:return r.H5;case r.H5:case r.H6:return r.H6;default:return r.Auto}}};return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/fpm/CustomFragment.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var _exports = {};
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let CustomFragmentBlock = (
  /**
   * Content of a custom fragment
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "CustomFragment",
    namespace: "sap.fe.macros.fpm"
  }), _dec2 = blockAttribute({
    type: "string",
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: false
  }), _dec4 = blockAttribute({
    type: "string",
    required: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(CustomFragmentBlock, _BuildingBlockBase);
    function CustomFragmentBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "fragmentName", _descriptor3, _assertThisInitialized(_this));
      return _this;
    }
    _exports = CustomFragmentBlock;
    var _proto = CustomFragmentBlock.prototype;
    /**
     * The building block template function.
     *
     * @returns An XML-based string
     */
    _proto.getTemplate = function getTemplate() {
      const fragmentInstanceName = this.fragmentName + "-JS".replace(/\//g, ".");
      return xml`<core:Fragment
			xmlns:compo="http://schemas.sap.com/sapui5/extension/sap.ui.core.xmlcomposite/1"
			fragmentName="${fragmentInstanceName}"
			id="${this.id}"
			type="CUSTOM"
		>
			<compo:fragmentContent>
				<core:FragmentDefinition>
					<core:Fragment fragmentName="${this.fragmentName}" type="XML" />
				</core:FragmentDefinition>
			</compo:fragmentContent>
		</core:Fragment>`;
    };
    return CustomFragmentBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "fragmentName", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = CustomFragmentBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/fpm/CustomFragment.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"],function(e,r,t){"use strict";var i,n,a,o,l,u,c,s,f;var p={};var m=t.xml;var b=r.defineBuildingBlock;var d=r.blockAttribute;function g(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function y(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function h(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;v(e,r)}function v(e,r){v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,t){r.__proto__=t;return r};return v(e,r)}function B(e,r,t,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=t.slice().reverse().reduce(function(t,i){return i(e,r,t)||t},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function w(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let z=(i=b({name:"CustomFragment",namespace:"sap.fe.macros.fpm"}),n=d({type:"string",required:true}),a=d({type:"sap.ui.model.Context",required:false}),o=d({type:"string",required:true}),i(l=(u=function(e){h(r,e);function r(){var r;for(var t=arguments.length,i=new Array(t),n=0;n<t;n++){i[n]=arguments[n]}r=e.call(this,...i)||this;g(r,"id",c,y(r));g(r,"contextPath",s,y(r));g(r,"fragmentName",f,y(r));return r}p=r;var t=r.prototype;t.getTemplate=function e(){const r=this.fragmentName+"-JS".replace(/\//g,".");return m`<core:Fragment
			xmlns:compo="http://schemas.sap.com/sapui5/extension/sap.ui.core.xmlcomposite/1"
			fragmentName="${r}"
			id="${this.id}"
			type="CUSTOM"
		>
			<compo:fragmentContent>
				<core:FragmentDefinition>
					<core:Fragment fragmentName="${this.fragmentName}" type="XML" />
				</core:FragmentDefinition>
			</compo:fragmentContent>
		</core:Fragment>`};return r}(e),c=B(u.prototype,"id",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),s=B(u.prototype,"contextPath",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),f=B(u.prototype,"fragmentName",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),u))||l);p=z;return p},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/AnalyticalInsightsHelper-dbg", [], function () {
  "use strict";

  var _exports = {};
  /**
   * Get measures of the chart.
   *
   * @param innerChart
   * @returns Measures of the chart.
   */
  function getMeasures(innerChart) {
    let measures = [];
    measures = innerChart.getMeasures().map(measure => {
      return {
        name: measure.getLabel(),
        value: "{" + measure.getName() + "}"
      };
    });
    return measures;
  }

  /**
   * Get dimensions of the chart.
   *
   * @param innerChart
   * @returns Dimensions of the chart.
   */
  _exports.getMeasures = getMeasures;
  function getDimensions(innerChart) {
    let dimensions = [];
    dimensions = innerChart.getDimensions().map(dimension => {
      if (dimension.getTextProperty()) {
        return {
          name: dimension.getLabel(),
          value: "{" + dimension.getTextProperty() + "}"
        };
      } else {
        return {
          name: dimension.getLabel(),
          value: "{" + dimension.getName() + "}"
        };
      }
    });
    return dimensions;
  }

  /**
   * Get feeds of the chart.
   *
   * @param innerChart
   * @returns Feeds of the chart.
   */
  _exports.getDimensions = getDimensions;
  function getFeeds(innerChart) {
    const vizFeeds = innerChart.getAggregation("_vizFrame").getFeeds();
    const feeds = vizFeeds.map(feed => {
      return feed.getProperty("values").map(feedValue => {
        const label = getLabel(innerChart, feedValue.getProperty("name"), feedValue.getProperty("type"));
        const feedType = {
          type: feed.getProperty("type"),
          uid: feed.getProperty("uid"),
          values: [label]
        };
        return feedType;
      });
    });
    return feeds.flat();
  }

  /**
   * Get measure label or dimension label of the chart.
   *
   * @param innerChart
   * @param name
   * @param type
   * @returns Measure label or Dimension label of the chart.
   */
  _exports.getFeeds = getFeeds;
  function getLabel(innerChart, name, type) {
    let label;
    const measures = innerChart.getMeasures();
    const dimensions = innerChart.getDimensions();
    if (type === "Dimension") {
      label = dimensions.filter(dimension => {
        return dimension.getName() === name;
      })[0].getLabel() || name;
    } else {
      label = measures.filter(measure => {
        return measure.getName() === name;
      })[0].getLabel() || name;
    }
    return label;
  }

  /**
   * Get chart properties.
   *
   * @param innerChart
   * @returns Chart properties.
   */
  _exports.getLabel = getLabel;
  function getChartProperties(innerChart) {
    return innerChart.getAggregation("_vizFrame").getVizProperties();
  }
  _exports.getChartProperties = getChartProperties;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/AnalyticalInsightsHelper", [],function(){"use strict";var e={};function t(e){let t=[];t=e.getMeasures().map(e=>({name:e.getLabel(),value:"{"+e.getName()+"}"}));return t}e.getMeasures=t;function r(e){let t=[];t=e.getDimensions().map(e=>{if(e.getTextProperty()){return{name:e.getLabel(),value:"{"+e.getTextProperty()+"}"}}else{return{name:e.getLabel(),value:"{"+e.getName()+"}"}}});return t}e.getDimensions=r;function n(e){const t=e.getAggregation("_vizFrame").getFeeds();const r=t.map(t=>t.getProperty("values").map(r=>{const n=a(e,r.getProperty("name"),r.getProperty("type"));const g={type:t.getProperty("type"),uid:t.getProperty("uid"),values:[n]};return g}));return r.flat()}e.getFeeds=n;function a(e,t,r){let n;const a=e.getMeasures();const g=e.getDimensions();if(r==="Dimension"){n=g.filter(e=>e.getName()===t)[0].getLabel()||t}else{n=a.filter(e=>e.getName()===t)[0].getLabel()||t}return n}e.getLabel=a;function g(e){return e.getAggregation("_vizFrame").getVizProperties()}e.getChartProperties=g;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/CommonInsightsHelper-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ResourceModelHelper", "sap/ui/core/Core", "sap/ui/mdc/p13n/StateUtil", "./AnalyticalInsightsHelper", "./InsightsCardHelper"], function (CommonUtils, MetaModelConverter, BindingToolkit, ResourceModelHelper, Core, StateUtil, AnalyticalInsightsHelper, InsightsCardHelper) {
  "use strict";

  var _exports = {};
  var showErrorMessageForInsightsCard = InsightsCardHelper.showErrorMessageForInsightsCard;
  var IntegrationCardType = InsightsCardHelper.IntegrationCardType;
  var getMeasures = AnalyticalInsightsHelper.getMeasures;
  var getFeeds = AnalyticalInsightsHelper.getFeeds;
  var getDimensions = AnalyticalInsightsHelper.getDimensions;
  var getChartProperties = AnalyticalInsightsHelper.getChartProperties;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  /**
   * Checks if the insights card creation is possible.
   *
   * @param control
   * @param insightsRelevantColumns
   * @returns True if the insights card can be created.
   */
  async function isInsightsCardCreationPossible(control, insightsRelevantColumns) {
    try {
      const filterBar = Core.byId(control.getFilter());
      const controlState = await StateUtil.retrieveExternalState(control);
      let isSemanticDateFilterApplied = false;
      let isControlLevelFilterApplied = false;
      if (filterBar !== undefined) {
        isSemanticDateFilterApplied = filterBar.getParent().isSemanticDateFilterApplied();
      }
      if (controlState.filter) {
        const controlLevelFilterKeys = Object.keys(controlState.filter);
        for (const key of controlLevelFilterKeys) {
          const controlStateFilter = controlState.filter[key];
          if (Array.isArray(controlStateFilter) && controlStateFilter.length) {
            isControlLevelFilterApplied = true;
            break;
          }
        }
      }
      if (isControlLevelFilterApplied || isSemanticDateFilterApplied || (insightsRelevantColumns ? insightsRelevantColumns.length === 0 : false)) {
        return false;
      }
      return true;
    } catch {
      throw Error("Error retrieving control states");
    }
  }

  /**
   * Filters the columns that can be shown on the insights card from the visible columns on the table.
   *
   * @param tableAPI
   * @returns A list of columns that can be shown on the insightsCard.
   */
  function getInsightsRelevantColumns(tableAPI) {
    var _table$getModel;
    const table = tableAPI.content;
    const visibleColumns = table.getColumns();
    const supportedColumnNames = [];
    const metaModel = (_table$getModel = table.getModel()) === null || _table$getModel === void 0 ? void 0 : _table$getModel.getMetaModel();
    const metaPath = table.data("metaPath");
    tableAPI.getTableDefinition().columns.forEach(function (column) {
      if (column.isInsightsSupported === true) {
        supportedColumnNames.push(column.name);
      }
    });
    return visibleColumns.filter(function (column) {
      return supportedColumnNames.includes(column.getDataProperty());
    }).map(function (supportedColumn) {
      const dataProperty = supportedColumn.getDataProperty(),
        propertyContext = metaModel === null || metaModel === void 0 ? void 0 : metaModel.getContext(metaPath + "/" + dataProperty),
        dataModel = getInvolvedDataModelObjects(propertyContext),
        propertyTargetObject = dataModel.targetObject,
        uomBinding = getUomBinding(propertyTargetObject, dataProperty),
        columnText = uomBinding ? uomBinding : getTextArrangementForColumn(propertyTargetObject, dataProperty);
      return {
        visible: false,
        name: columnText,
        label: supportedColumn.getProperty("header")
      };
    });
  }

  /**
   * Constructs the insights parameters from the table that is required to create the insights card.
   *
   * @param controlAPI
   * @param cardType
   * @param insightsRelevantColumns
   * @returns The insights parameters from the table.
   */
  _exports.getInsightsRelevantColumns = getInsightsRelevantColumns;
  async function createInsightsParams(controlAPI, cardType, insightsRelevantColumns) {
    let controlState;
    const control = controlAPI.content;
    const filterbarID = control.getFilter() !== "" ? control.getFilter() : undefined;
    const isCardCreationSupported = await isInsightsCardCreationPossible(control, insightsRelevantColumns);
    if (!isCardCreationSupported) {
      showErrorMessageForInsightsCard(cardType, getResourceModel(controlAPI));
      return;
    }
    try {
      controlState = await StateUtil.retrieveExternalState(control);
    } catch {
      throw Error("Error retrieving control states");
    }
    const entitySetPath = cardType === IntegrationCardType.table ? control.data("metaPath") : control.data("targetCollectionPath");
    const appComponent = CommonUtils.getAppComponent(control);
    const appManifest = appComponent.getManifestEntry("sap.app");
    const serviceUrl = control.getModel().getServiceUrl();
    let queryUrl = "";
    const insightsParams = {
      appComponent: appComponent,
      type: cardType,
      requestParameters: {
        serviceUrl: "",
        queryUrl: "",
        groupBy: undefined
      },
      content: {
        cardTitle: "",
        insightsRelevantColumns: []
      },
      parentAppId: appManifest.id,
      parameters: {
        filterbarID: filterbarID
      },
      entitySetPath: entitySetPath
    };
    if (cardType === IntegrationCardType.table) {
      insightsParams.content = {
        cardTitle: control.getHeader(),
        insightsRelevantColumns: insightsRelevantColumns ?? []
      };
      queryUrl = control.getRowBinding().getDownloadUrl();
      insightsParams.content.cardTitle = control.getHeader();
      insightsParams.parentAppId = appManifest.id;
      const groupProperty = Array.isArray(controlState.groupLevels) && controlState.groupLevels.length ? controlState.groupLevels[0].name : undefined;
      if (groupProperty !== undefined) {
        const groupPropertyName = groupProperty.includes("::") ? groupProperty.split("::")[1] : groupProperty;
        insightsParams.requestParameters.groupBy = {
          property: groupPropertyName
        };
      }
    } else {
      const chart = control;
      const innerChart = chart.getControlDelegate().getInnerChart(chart);
      const chartContent = {
        cardTitle: chart.getHeader(),
        legendVisible: false,
        chartType: chart.getChartType(),
        measures: getMeasures(innerChart),
        dimensions: getDimensions(innerChart),
        feeds: getFeeds(innerChart),
        allowedChartTypes: innerChart.getAvailableChartTypes().available,
        chartProperties: getChartProperties(innerChart)
      };
      insightsParams.content = chartContent;
      queryUrl = innerChart.getBindingInfo("data").binding.getDownloadUrl();
    }
    insightsParams.requestParameters.serviceUrl = serviceUrl;
    insightsParams.requestParameters.queryUrl = queryUrl.includes(serviceUrl) ? queryUrl.split(serviceUrl)[1] : queryUrl;
    return insightsParams;
  }
  _exports.createInsightsParams = createInsightsParams;
  function getTextArrangementForColumn(propertyTargetObject, property) {
    var _propertyTargetObject, _text$annotations, _text$annotations$UI, _text$annotations$UI$;
    const propertyParts = property.split("/");
    let navigationPath;
    if (propertyParts.length > 1) {
      propertyParts.pop();
      navigationPath = propertyParts.join();
    }
    const text = (_propertyTargetObject = propertyTargetObject.annotations.Common) === null || _propertyTargetObject === void 0 ? void 0 : _propertyTargetObject.Text;
    const textArrangement = text === null || text === void 0 ? void 0 : (_text$annotations = text.annotations) === null || _text$annotations === void 0 ? void 0 : (_text$annotations$UI = _text$annotations.UI) === null || _text$annotations$UI === void 0 ? void 0 : (_text$annotations$UI$ = _text$annotations$UI.TextArrangement) === null || _text$annotations$UI$ === void 0 ? void 0 : _text$annotations$UI$.valueOf();
    const propertyBinding = pathInModel(property);
    let columnBindingValue;
    if (text) {
      const textBinding = getExpressionFromAnnotation(text, navigationPath ? [navigationPath] : []);
      if (textArrangement === "UI.TextArrangementType/TextLast") {
        columnBindingValue = concat(propertyBinding, " (", textBinding, ")");
      } else if (textArrangement === "UI.TextArrangementType/TextOnly") {
        columnBindingValue = textBinding;
      } else if (textArrangement === "UI.TextArrangementType/TextSeparate") {
        columnBindingValue = propertyBinding;
      } else {
        columnBindingValue = concat(textBinding, " (", propertyBinding, ")");
      }
    } else {
      columnBindingValue = propertyBinding;
    }
    return compileExpression(columnBindingValue);
  }
  function getUomBinding(propertyTargetObject, property) {
    var _propertyTargetObject2, _propertyTargetObject3;
    const uom = ((_propertyTargetObject2 = propertyTargetObject.annotations.Measures) === null || _propertyTargetObject2 === void 0 ? void 0 : _propertyTargetObject2.ISOCurrency) || ((_propertyTargetObject3 = propertyTargetObject.annotations.Measures) === null || _propertyTargetObject3 === void 0 ? void 0 : _propertyTargetObject3.Unit);
    if (!uom) {
      return;
    } else {
      const propertyBinding = pathInModel(property);
      return compileExpression(concat(propertyBinding, " ", getExpressionFromAnnotation(uom)));
    }
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/CommonInsightsHelper", ["sap/fe/core/CommonUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ResourceModelHelper","sap/ui/core/Core","sap/ui/mdc/p13n/StateUtil","./AnalyticalInsightsHelper","./InsightsCardHelper"],function(e,t,r,n,a,o,s,i){"use strict";var l={};var c=i.showErrorMessageForInsightsCard;var d=i.IntegrationCardType;var u=s.getMeasures;var g=s.getFeeds;var p=s.getDimensions;var v=s.getChartProperties;var f=n.getResourceModel;var h=r.pathInModel;var m=r.getExpressionFromAnnotation;var y=r.concat;var C=r.compileExpression;var T=t.getInvolvedDataModelObjects;async function I(e,t){try{const r=a.byId(e.getFilter());const n=await o.retrieveExternalState(e);let s=false;let i=false;if(r!==undefined){s=r.getParent().isSemanticDateFilterApplied()}if(n.filter){const e=Object.keys(n.filter);for(const t of e){const e=n.filter[t];if(Array.isArray(e)&&e.length){i=true;break}}}if(i||s||(t?t.length===0:false)){return false}return true}catch{throw Error("Error retrieving control states")}}function b(e){var t;const r=e.content;const n=r.getColumns();const a=[];const o=(t=r.getModel())===null||t===void 0?void 0:t.getMetaModel();const s=r.data("metaPath");e.getTableDefinition().columns.forEach(function(e){if(e.isInsightsSupported===true){a.push(e.name)}});return n.filter(function(e){return a.includes(e.getDataProperty())}).map(function(e){const t=e.getDataProperty(),r=o===null||o===void 0?void 0:o.getContext(s+"/"+t),n=T(r),a=n.targetObject,i=P(a,t),l=i?i:M(a,t);return{visible:false,name:l,label:e.getProperty("header")}})}l.getInsightsRelevantColumns=b;async function A(t,r,n){let a;const s=t.content;const i=s.getFilter()!==""?s.getFilter():undefined;const l=await I(s,n);if(!l){c(r,f(t));return}try{a=await o.retrieveExternalState(s)}catch{throw Error("Error retrieving control states")}const h=r===d.table?s.data("metaPath"):s.data("targetCollectionPath");const m=e.getAppComponent(s);const y=m.getManifestEntry("sap.app");const C=s.getModel().getServiceUrl();let T="";const b={appComponent:m,type:r,requestParameters:{serviceUrl:"",queryUrl:"",groupBy:undefined},content:{cardTitle:"",insightsRelevantColumns:[]},parentAppId:y.id,parameters:{filterbarID:i},entitySetPath:h};if(r===d.table){b.content={cardTitle:s.getHeader(),insightsRelevantColumns:n??[]};T=s.getRowBinding().getDownloadUrl();b.content.cardTitle=s.getHeader();b.parentAppId=y.id;const e=Array.isArray(a.groupLevels)&&a.groupLevels.length?a.groupLevels[0].name:undefined;if(e!==undefined){const t=e.includes("::")?e.split("::")[1]:e;b.requestParameters.groupBy={property:t}}}else{const e=s;const t=e.getControlDelegate().getInnerChart(e);const r={cardTitle:e.getHeader(),legendVisible:false,chartType:e.getChartType(),measures:u(t),dimensions:p(t),feeds:g(t),allowedChartTypes:t.getAvailableChartTypes().available,chartProperties:v(t)};b.content=r;T=t.getBindingInfo("data").binding.getDownloadUrl()}b.requestParameters.serviceUrl=C;b.requestParameters.queryUrl=T.includes(C)?T.split(C)[1]:T;return b}l.createInsightsParams=A;function M(e,t){var r,n,a,o;const s=t.split("/");let i;if(s.length>1){s.pop();i=s.join()}const l=(r=e.annotations.Common)===null||r===void 0?void 0:r.Text;const c=l===null||l===void 0?void 0:(n=l.annotations)===null||n===void 0?void 0:(a=n.UI)===null||a===void 0?void 0:(o=a.TextArrangement)===null||o===void 0?void 0:o.valueOf();const d=h(t);let u;if(l){const e=m(l,i?[i]:[]);if(c==="UI.TextArrangementType/TextLast"){u=y(d," (",e,")")}else if(c==="UI.TextArrangementType/TextOnly"){u=e}else if(c==="UI.TextArrangementType/TextSeparate"){u=d}else{u=y(e," (",d,")")}}else{u=d}return C(u)}function P(e,t){var r,n;const a=((r=e.annotations.Measures)===null||r===void 0?void 0:r.ISOCurrency)||((n=e.annotations.Measures)===null||n===void 0?void 0:n.Unit);if(!a){return}else{const e=h(t);return C(y(e," ",m(a)))}}return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/InsightsCardHelper-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/navigation/SelectionVariant", "sap/insights/CardHelper", "sap/m/MessageBox", "sap/ui/core/Core", "sap/ui/mdc/p13n/StateUtil", "sap/ui/VersionInfo"], function (Log, CommonUtils, ResourceModelHelper, SelectionVariant, CardHelper, MessageBox, Core, StateUtil, VersionInfo) {
  "use strict";

  var _exports = {};
  let IntegrationCardType;
  (function (IntegrationCardType) {
    IntegrationCardType["table"] = "Table";
    IntegrationCardType["analytical"] = "Analytical";
  })(IntegrationCardType || (IntegrationCardType = {}));
  _exports.IntegrationCardType = IntegrationCardType;
  const MAX_TABLE_RECORDS = 15;
  const tableContentTopQuery = `$top=${MAX_TABLE_RECORDS}`;

  /**
   * Constructs an array of columns in the format expected by the insights card.
   *
   * @param selectedColumns
   * @returns The card columns that are to be displayed on the insights card.
   */
  function getColumnsToShow(selectedColumns) {
    const cardColumns = [];
    selectedColumns.forEach(function (column) {
      cardColumns.push({
        title: column.label,
        value: column.name,
        visible: column.visible
      });
    });
    return cardColumns;
  }

  /**
   * Constructs the card content for the insights card.
   * Includes the configuration of a navigation action and the creation of bindings to read the data from the response of the back end.
   *
   * @param insightsParams
   * @returns The card content for the insights card.
   */
  function getCardContent(insightsParams) {
    const columns = getColumnsToShow(insightsParams.content.insightsRelevantColumns);
    const cardContent = {
      data: {
        path: "/response/value"
      },
      maxItems: 15,
      row: {
        columns: columns,
        actions: [{
          type: "Navigation",
          parameters: "{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}"
        }]
      }
    };
    if (insightsParams.requestParameters.groupBy) {
      const groupConditionName = insightsParams.requestParameters.groupBy.property;
      const groupDescending = insightsParams.requestParameters.groupBy.descending;
      cardContent.group = {
        title: "{" + groupConditionName + "}",
        order: {
          path: groupConditionName,
          dir: groupDescending === true ? "DESC" : "ASC"
        }
      };
    }
    return cardContent;
  }

  /**
   * Creates the chart card content for the insights card.
   *
   * @param insightsParams
   * @returns The chart card content
   */
  function getChartCardContent(insightsParams) {
    return {
      chartType: insightsParams.content.chartType,
      chartProperties: insightsParams.content.chartProperties,
      data: {
        path: "/response/value"
      },
      dimensions: insightsParams.content.dimensions,
      measures: insightsParams.content.measures,
      feeds: insightsParams.content.feeds,
      actions: [{
        type: "Navigation",
        parameters: "{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}"
      }],
      actionableArea: "Chart"
    };
  }

  /**
   * Constructs the request object to fetch data for the insights card.
   *
   * @param insightsParams
   * @returns The request data for the insights card.
   */
  function getCardData(insightsParams) {
    let queryUrl = insightsParams.requestParameters.queryUrl;
    // fetch only the first 15 records
    queryUrl = insightsParams.type === IntegrationCardType.table ? `${queryUrl}&${tableContentTopQuery}` : queryUrl;
    return {
      request: {
        url: "{{destinations.service}}" + insightsParams.requestParameters.serviceUrl + "$batch",
        method: "POST",
        headers: {
          "X-CSRF-Token": "{{csrfTokens.token1}}"
        },
        batch: {
          response: {
            method: "GET",
            url: queryUrl,
            headers: {
              Accept: "application/json"
            }
          }
        }
      }
    };
  }

  /**
   * Constructs the card header for the insights card.
   * Includes the status to be shown and the navigation action to be configured on the insights card.
   *
   * @param insightsParams
   * @returns The card header
   */
  function getCardHeader(insightsParams) {
    const cardHeader = {
      title: insightsParams.content.cardTitle,
      actions: [{
        type: "Navigation",
        parameters: "{= extension.formatters.getNavigationContext(${parameters>/state/value})}"
      }]
    };
    if (insightsParams.type === IntegrationCardType.table) {
      cardHeader.status = {
        text: "{/response/@odata.count}" // number of records on LR received as part of the request
      };
    }

    return cardHeader;
  }

  /**
   * Construct the action object that is required by the insights card.
   * This is used to configure the navigation from the card to the source application.
   *
   * @param appComponent
   * @returns The action object
   */
  function getActionObject(appComponent) {
    const shellServiceHelper = appComponent.getShellServices();
    const hash = shellServiceHelper.getHash();
    const parsedHash = shellServiceHelper.parseShellHash(hash);
    const navigationService = appComponent.getNavigationService();
    const actionParams = {
      parameters: {
        ibnTarget: {
          semanticObject: parsedHash.semanticObject,
          action: parsedHash.action
        },
        ibnParams: {
          sensitiveProps: [],
          nhHybridIAppStateKey: navigationService.getIAppStateKey()
        }
      }
    };
    return JSON.stringify(actionParams);
  }

  /**
   * Construct the card configuration parameters required by the insights card.
   * This includes filters, parameters, sensitive properties and the action object for the navigation.
   *
   * @param filters The record of filters
   * @param appComponent Application component
   * @param entitySetPath Entity set path
   * @returns The card configuration parameters
   */
  async function getCardConfigParameters(filterbarID, appComponent, entitySetPath) {
    const cardConfigParams = {
      state: {
        value: getActionObject(appComponent)
      },
      _relevantODataFilters: {
        value: []
      },
      _relevantODataParameters: {
        value: []
      },
      _mandatoryODataFilters: {
        value: []
      },
      _mandatoryODataParameters: {
        value: []
      },
      sensitiveProps: [],
      _entitySet: {
        value: entitySetPath
      }
    };
    const filterBarState = filterbarID ? await StateUtil.retrieveExternalState(Core.byId(filterbarID)) : undefined;
    const filters = filterBarState === null || filterBarState === void 0 ? void 0 : filterBarState.filter;
    if (filters !== undefined) {
      for (const filterProp of Object.keys(filters)) {
        let filterPropSV = new SelectionVariant();
        const newFilterObject = {
          filterConditions: {
            [filterProp]: filters[filterProp]
          }
        };
        filterPropSV = CommonUtils.addExternalStateFiltersToSelectionVariant(filterPropSV, newFilterObject, Core.byId(filterbarID), undefined);
        if (filterPropSV.getSelectOptionsPropertyNames().length) {
          // add to insights only if filters exist
          const reconstructedSV = {
            id: filterPropSV.getID(),
            Parameters: [],
            SelectOptions: [{
              PropertyName: filterProp,
              Ranges: filterPropSV.getSelectOption(filterProp)
            }]
          };
          cardConfigParams[filterProp] = {
            value: JSON.stringify(reconstructedSV),
            type: "string"
          };
          cardConfigParams._relevantODataFilters.value.push(filterProp);
        }
      }
    }
    return cardConfigParams;
  }

  /**
   * Construct the card configuration for the insights card.
   *
   * @param insightsParams
   * @returns The card configuration for the insights card.
   */
  async function getCardConfig(insightsParams) {
    const cardConfiguration = {};
    const serviceUrl = insightsParams.requestParameters.serviceUrl;
    cardConfiguration.destinations = {
      service: {
        name: "(default)",
        defaultUrl: "/"
      }
    };
    cardConfiguration.csrfTokens = {
      token1: {
        data: {
          request: {
            url: serviceUrl,
            method: "HEAD",
            headers: {
              "X-CSRF-Token": "Fetch"
            }
          }
        }
      }
    };
    const filterbarID = insightsParams.parameters.filterbarID;
    const cardConfigParams = await getCardConfigParameters(filterbarID, insightsParams.appComponent, insightsParams.entitySetPath);
    cardConfiguration.parameters = cardConfigParams;
    return cardConfiguration;
  }

  /**
   * Construct the manifest entry for sap.card namespace of the insights card.
   *
   * @param insightsParams
   * @returns The card manifest entry for the sap.card namespace
   */
  async function getIntegrationCardManifest(insightsParams) {
    const cardConfig = {
      type: insightsParams.type
    };
    cardConfig.configuration = await getCardConfig(insightsParams);
    cardConfig.header = getCardHeader(insightsParams);
    cardConfig.data = getCardData(insightsParams);
    if (insightsParams.type === IntegrationCardType.analytical) {
      cardConfig.content = getChartCardContent(insightsParams);
    } else {
      cardConfig.content = getCardContent(insightsParams);
    }
    cardConfig.extension = "module:sap/insights/CardExtension";
    return cardConfig;
  }

  /**
   * Construct the manifest entry for sap.insights namespace of the insights card.
   *
   * @param insightsParams
   * @returns The card manifest entry for the sap.insights namespace
   */
  async function getManifestSapInsights(insightsParams) {
    const ui5Version = await VersionInfo.load();
    const manifestParams = {
      parentAppId: insightsParams.parentAppId,
      cardType: "RT",
      versions: {
        ui5: ui5Version.version + "-" + ui5Version.buildTimestamp
      },
      filterEntitySet: insightsParams.entitySetPath
    };
    if (insightsParams.type === IntegrationCardType.analytical) {
      manifestParams.allowedChartTypes = insightsParams.content.allowedChartTypes;
    }
    return manifestParams;
  }
  /**
   * Creates the card manifest for the insights card.
   *
   * @param insightsParams
   * @returns The insights card
   */
  async function createCardManifest(insightsParams) {
    const appComponent = insightsParams.appComponent,
      appManifest = {
        ...appComponent.getManifestEntry("sap.app")
      },
      ui5Manifest = {
        ...appComponent.getManifestEntry("sap.ui5")
      };
    const defaultModel = ui5Manifest.models[""];
    const dataSourceService = defaultModel.dataSource ? defaultModel.dataSource : "";
    const insightsCardManifest = {};
    const sapAppId = `user.${appManifest.id}.${Date.now()}`;
    appManifest.id = sapAppId;
    appManifest.type = "card";
    appManifest.dataSources.filterService = {
      ...appManifest.dataSources[dataSourceService]
    };
    insightsCardManifest["sap.app"] = appManifest;
    insightsCardManifest["sap.card"] = await getIntegrationCardManifest(insightsParams);
    insightsCardManifest["sap.insights"] = await getManifestSapInsights(insightsParams);
    return insightsCardManifest;
  }

  /**
   * Create the manifest of the insights card and show a preview of the card that is created.
   *
   * @param insightsParams
   */
  _exports.createCardManifest = createCardManifest;
  async function showInsightsCardPreview(insightsParams) {
    try {
      const cardHelperInstance = await CardHelper.getServiceAsync("UIService");
      const card = await createCardManifest(insightsParams);
      cardHelperInstance.showCardPreview(card, true);
    } catch (e) {
      genericErrorMessageForInsightsCard(insightsParams.appComponent);
      Log.error("Card creation failed");
    }
  }

  /**
   * Display a message box for the scenarios where the insights card cannot be created.
   *
   * @param controlType
   * @param resourceModel
   */
  _exports.showInsightsCardPreview = showInsightsCardPreview;
  function showErrorMessageForInsightsCard(controlType, resourceModel) {
    const headerText = `<strong>
		${resourceModel.getText("M_CARD_POSSIBLE_CAUSES")}
		</strong>`;
    let contentText = "";
    const footerText = `${resourceModel.getText("M_CARD_FOOTER_INFO")}`;
    if (controlType === IntegrationCardType.table) {
      contentText = `<ul><li>
			${resourceModel.getText("M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS")}
			</li><li>
			${resourceModel.getText("M_CARD_FAILURE_TABLE_REASON_TABLE_LEVEL_FILTERS")}
			</li><li>
			${resourceModel.getText("M_CARD_FAILURE_TABLE_REASON_UNSUPPORTED_COLUMNS")}
			</li></ul>`;
    } else {
      contentText = `<ul><li>
			${resourceModel.getText("M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS")}
			</li><li>
			${resourceModel.getText("M_CARD_FAILURE_CHART_REASON_CHART_LEVEL_FILTERS")}
			</li></ul>`;
    }
    const formattedTextString = headerText + contentText + footerText;
    MessageBox.error(resourceModel.getText("M_CARD_CREATION_FAILURE"), {
      onClose: function () {
        throw new Error("Insights is not supported");
      },
      details: formattedTextString
    });
  }
  _exports.showErrorMessageForInsightsCard = showErrorMessageForInsightsCard;
  function genericErrorMessageForInsightsCard(scope) {
    const resourceModel = ResourceModelHelper.getResourceModel(scope);
    MessageBox.error(resourceModel.getText("M_CARD_FAILURE_GENERIC"));
  }
  _exports.genericErrorMessageForInsightsCard = genericErrorMessageForInsightsCard;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/insights/InsightsCardHelper", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/helpers/ResourceModelHelper","sap/fe/navigation/SelectionVariant","sap/insights/CardHelper","sap/m/MessageBox","sap/ui/core/Core","sap/ui/mdc/p13n/StateUtil","sap/ui/VersionInfo"],function(t,e,a,n,r,s,o,i,c){"use strict";var l={};let p;(function(t){t["table"]="Table";t["analytical"]="Analytical"})(p||(p={}));l.IntegrationCardType=p;const u=15;const d=`$top=${u}`;function g(t){const e=[];t.forEach(function(t){e.push({title:t.label,value:t.name,visible:t.visible})});return e}function f(t){const e=g(t.content.insightsRelevantColumns);const a={data:{path:"/response/value"},maxItems:15,row:{columns:e,actions:[{type:"Navigation",parameters:"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}"}]}};if(t.requestParameters.groupBy){const e=t.requestParameters.groupBy.property;const n=t.requestParameters.groupBy.descending;a.group={title:"{"+e+"}",order:{path:e,dir:n===true?"DESC":"ASC"}}}return a}function m(t){return{chartType:t.content.chartType,chartProperties:t.content.chartProperties,data:{path:"/response/value"},dimensions:t.content.dimensions,measures:t.content.measures,feeds:t.content.feeds,actions:[{type:"Navigation",parameters:"{= extension.formatters.getNavigationContext(${parameters>/state/value}, ${})}"}],actionableArea:"Chart"}}function y(t){let e=t.requestParameters.queryUrl;e=t.type===p.table?`${e}&${d}`:e;return{request:{url:"{{destinations.service}}"+t.requestParameters.serviceUrl+"$batch",method:"POST",headers:{"X-CSRF-Token":"{{csrfTokens.token1}}"},batch:{response:{method:"GET",url:e,headers:{Accept:"application/json"}}}}}}function _(t){const e={title:t.content.cardTitle,actions:[{type:"Navigation",parameters:"{= extension.formatters.getNavigationContext(${parameters>/state/value})}"}]};if(t.type===p.table){e.status={text:"{/response/@odata.count}"}}return e}function v(t){const e=t.getShellServices();const a=e.getHash();const n=e.parseShellHash(a);const r=t.getNavigationService();const s={parameters:{ibnTarget:{semanticObject:n.semanticObject,action:n.action},ibnParams:{sensitiveProps:[],nhHybridIAppStateKey:r.getIAppStateKey()}}};return JSON.stringify(s)}async function E(t,a,r){const s={state:{value:v(a)},_relevantODataFilters:{value:[]},_relevantODataParameters:{value:[]},_mandatoryODataFilters:{value:[]},_mandatoryODataParameters:{value:[]},sensitiveProps:[],_entitySet:{value:r}};const c=t?await i.retrieveExternalState(o.byId(t)):undefined;const l=c===null||c===void 0?void 0:c.filter;if(l!==undefined){for(const a of Object.keys(l)){let r=new n;const i={filterConditions:{[a]:l[a]}};r=e.addExternalStateFiltersToSelectionVariant(r,i,o.byId(t),undefined);if(r.getSelectOptionsPropertyNames().length){const t={id:r.getID(),Parameters:[],SelectOptions:[{PropertyName:a,Ranges:r.getSelectOption(a)}]};s[a]={value:JSON.stringify(t),type:"string"};s._relevantODataFilters.value.push(a)}}}return s}async function S(t){const e={};const a=t.requestParameters.serviceUrl;e.destinations={service:{name:"(default)",defaultUrl:"/"}};e.csrfTokens={token1:{data:{request:{url:a,method:"HEAD",headers:{"X-CSRF-Token":"Fetch"}}}}};const n=t.parameters.filterbarID;const r=await E(n,t.appComponent,t.entitySetPath);e.parameters=r;return e}async function h(t){const e={type:t.type};e.configuration=await S(t);e.header=_(t);e.data=y(t);if(t.type===p.analytical){e.content=m(t)}else{e.content=f(t)}e.extension="module:sap/insights/CardExtension";return e}async function A(t){const e=await c.load();const a={parentAppId:t.parentAppId,cardType:"RT",versions:{ui5:e.version+"-"+e.buildTimestamp},filterEntitySet:t.entitySetPath};if(t.type===p.analytical){a.allowedChartTypes=t.content.allowedChartTypes}return a}async function C(t){const e=t.appComponent,a={...e.getManifestEntry("sap.app")},n={...e.getManifestEntry("sap.ui5")};const r=n.models[""];const s=r.dataSource?r.dataSource:"";const o={};const i=`user.${a.id}.${Date.now()}`;a.id=i;a.type="card";a.dataSources.filterService={...a.dataSources[s]};o["sap.app"]=a;o["sap.card"]=await h(t);o["sap.insights"]=await A(t);return o}l.createCardManifest=C;async function T(e){try{const t=await r.getServiceAsync("UIService");const a=await C(e);t.showCardPreview(a,true)}catch(a){I(e.appComponent);t.error("Card creation failed")}}l.showInsightsCardPreview=T;function R(t,e){const a=`<strong>\n\t\t${e.getText("M_CARD_POSSIBLE_CAUSES")}\n\t\t</strong>`;let n="";const r=`${e.getText("M_CARD_FOOTER_INFO")}`;if(t===p.table){n=`<ul><li>\n\t\t\t${e.getText("M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS")}\n\t\t\t</li><li>\n\t\t\t${e.getText("M_CARD_FAILURE_TABLE_REASON_TABLE_LEVEL_FILTERS")}\n\t\t\t</li><li>\n\t\t\t${e.getText("M_CARD_FAILURE_TABLE_REASON_UNSUPPORTED_COLUMNS")}\n\t\t\t</li></ul>`}else{n=`<ul><li>\n\t\t\t${e.getText("M_CARD_FAILURE_REASON_DATE_RANGE_FILTERS")}\n\t\t\t</li><li>\n\t\t\t${e.getText("M_CARD_FAILURE_CHART_REASON_CHART_LEVEL_FILTERS")}\n\t\t\t</li></ul>`}const o=a+n+r;s.error(e.getText("M_CARD_CREATION_FAILURE"),{onClose:function(){throw new Error("Insights is not supported")},details:o})}l.showErrorMessageForInsightsCard=R;function I(t){const e=a.getResourceModel(t);s.error(e.getText("M_CARD_FAILURE_GENERIC"))}l.genericErrorMessageForInsightsCard=I;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/ActionCommand.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;
  var _exports = {};
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ActionCommandBlock = (
  /**
   * Content of an action command
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "ActionCommand",
    namespace: "sap.fe.macros.internal"
  }), _dec2 = blockAttribute({
    type: "string",
    required: true
  }), _dec3 = blockAttribute({
    type: "object",
    required: true
  }), _dec4 = blockAttribute({
    type: "boolean"
  }), _dec5 = blockAttribute({
    type: "boolean"
  }), _dec6 = blockAttribute({
    type: "boolean"
  }), _dec7 = blockEvent(), _dec8 = blockEvent(), _dec9 = blockEvent(), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(ActionCommandBlock, _BuildingBlockBase);
    function ActionCommandBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "action", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isActionEnabled", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isIBNEnabled", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onExecuteAction", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onExecuteIBN", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onExecuteManifest", _descriptor8, _assertThisInitialized(_this));
      return _this;
    }
    _exports = ActionCommandBlock;
    var _proto = ActionCommandBlock.prototype;
    /**
     * The building block template function.
     *
     * @returns An XML-based string
     */
    _proto.getTemplate = function getTemplate() {
      let execute;
      let enabled;
      switch (this.action.type) {
        case "ForAction":
          execute = this.onExecuteAction;
          enabled = this.isActionEnabled !== undefined ? this.isActionEnabled : this.action.enabled;
          break;
        case "ForNavigation":
          execute = this.onExecuteIBN;
          enabled = this.isIBNEnabled !== undefined ? this.isIBNEnabled : this.action.enabled;
          break;
        default:
          execute = this.onExecuteManifest;
          enabled = this.action.enabled;
          break;
      }
      return xml`
		<control:CommandExecution
			xmlns:control="sap.fe.core.controls"
			core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
			execute="${execute}"
			enabled="${enabled}"
			visible="${this.visible !== undefined ? this.visible : this.action.visible}"
			command="${this.action.command}"
		/>`;
    };
    return ActionCommandBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "action", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isActionEnabled", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "isIBNEnabled", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "onExecuteAction", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "onExecuteIBN", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "onExecuteManifest", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ActionCommandBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/ActionCommand.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"],function(e,i,t){"use strict";var r,n,o,l,a,u,c,s,b,f,p,d,h,m,v,y,g,E,B;var w={};var z=t.xml;var k=i.defineBuildingBlock;var x=i.blockEvent;var A=i.blockAttribute;function N(e,i,t,r){if(!t)return;Object.defineProperty(e,i,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(r):void 0})}function O(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function P(e,i){e.prototype=Object.create(i.prototype);e.prototype.constructor=e;j(e,i)}function j(e,i){j=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(i,t){i.__proto__=t;return i};return j(e,i)}function I(e,i,t,r,n){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=t.slice().reverse().reduce(function(t,r){return r(e,i,t)||t},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,i,o);o=null}return o}function M(e,i){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let F=(r=k({name:"ActionCommand",namespace:"sap.fe.macros.internal"}),n=A({type:"string",required:true}),o=A({type:"object",required:true}),l=A({type:"boolean"}),a=A({type:"boolean"}),u=A({type:"boolean"}),c=x(),s=x(),b=x(),r(f=(p=function(e){P(i,e);function i(){var i;for(var t=arguments.length,r=new Array(t),n=0;n<t;n++){r[n]=arguments[n]}i=e.call(this,...r)||this;N(i,"id",d,O(i));N(i,"action",h,O(i));N(i,"isActionEnabled",m,O(i));N(i,"isIBNEnabled",v,O(i));N(i,"visible",y,O(i));N(i,"onExecuteAction",g,O(i));N(i,"onExecuteIBN",E,O(i));N(i,"onExecuteManifest",B,O(i));return i}w=i;var t=i.prototype;t.getTemplate=function e(){let i;let t;switch(this.action.type){case"ForAction":i=this.onExecuteAction;t=this.isActionEnabled!==undefined?this.isActionEnabled:this.action.enabled;break;case"ForNavigation":i=this.onExecuteIBN;t=this.isIBNEnabled!==undefined?this.isIBNEnabled:this.action.enabled;break;default:i=this.onExecuteManifest;t=this.action.enabled;break}return z`
		<control:CommandExecution
			xmlns:control="sap.fe.core.controls"
			core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
			execute="${i}"
			enabled="${t}"
			visible="${this.visible!==undefined?this.visible:this.action.visible}"
			command="${this.action.command}"
		/>`};return i}(e),d=I(p.prototype,"id",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),h=I(p.prototype,"action",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),m=I(p.prototype,"isActionEnabled",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),v=I(p.prototype,"isIBNEnabled",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),y=I(p.prototype,"visible",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=I(p.prototype,"onExecuteAction",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),E=I(p.prototype,"onExecuteIBN",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),B=I(p.prototype,"onExecuteManifest",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),p))||f);w=F;return w},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/DataPoint.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/internal/helpers/DataPointTemplating"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter, BindingToolkit, StableIdHelper, TypeGuards, CriticalityFormatters, DataModelPathHelper, PropertyHelper, UIFormatters, FieldTemplating, DataPointTemplating) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  var _exports = {};
  var getValueFormatted = DataPointTemplating.getValueFormatted;
  var getHeaderRatingIndicatorText = DataPointTemplating.getHeaderRatingIndicatorText;
  var buildFieldBindingExpression = DataPointTemplating.buildFieldBindingExpression;
  var buildExpressionForProgressIndicatorPercentValue = DataPointTemplating.buildExpressionForProgressIndicatorPercentValue;
  var buildExpressionForProgressIndicatorDisplayValue = DataPointTemplating.buildExpressionForProgressIndicatorDisplayValue;
  var isUsedInNavigationWithQuickViewFacets = FieldTemplating.isUsedInNavigationWithQuickViewFacets;
  var getVisibleExpression = FieldTemplating.getVisibleExpression;
  var getPropertyWithSemanticObject = FieldTemplating.getPropertyWithSemanticObject;
  var hasUnit = PropertyHelper.hasUnit;
  var hasCurrency = PropertyHelper.hasCurrency;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var buildExpressionForCriticalityIcon = CriticalityFormatters.buildExpressionForCriticalityIcon;
  var buildExpressionForCriticalityColor = CriticalityFormatters.buildExpressionForCriticalityColor;
  var isProperty = TypeGuards.isProperty;
  var generate = StableIdHelper.generate;
  var pathInModel = BindingToolkit.pathInModel;
  var notEqual = BindingToolkit.notEqual;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let DataPointBlock = (_dec = defineBuildingBlock({
    name: "DataPoint",
    namespace: "sap.fe.macros.internal"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec4 = blockAttribute({
    type: "string"
  }), _dec5 = blockAttribute({
    type: "object",
    validate: function (formatOptionsInput) {
      if (formatOptionsInput !== null && formatOptionsInput !== void 0 && formatOptionsInput.dataPointStyle && !["", "large"].includes(formatOptionsInput === null || formatOptionsInput === void 0 ? void 0 : formatOptionsInput.dataPointStyle)) {
        throw new Error(`Allowed value ${formatOptionsInput.dataPointStyle} for dataPointStyle does not match`);
      }
      if (formatOptionsInput !== null && formatOptionsInput !== void 0 && formatOptionsInput.displayMode && !["Value", "Description", "ValueDescription", "DescriptionValue"].includes(formatOptionsInput === null || formatOptionsInput === void 0 ? void 0 : formatOptionsInput.displayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.displayMode} for displayMode does not match`);
      }
      if (formatOptionsInput !== null && formatOptionsInput !== void 0 && formatOptionsInput.iconSize && !["1rem", "1.375rem", "2rem"].includes(formatOptionsInput === null || formatOptionsInput === void 0 ? void 0 : formatOptionsInput.iconSize)) {
        throw new Error(`Allowed value ${formatOptionsInput.iconSize} for iconSize does not match`);
      }
      if (formatOptionsInput !== null && formatOptionsInput !== void 0 && formatOptionsInput.measureDisplayMode && !["Hidden", "ReadOnly"].includes(formatOptionsInput === null || formatOptionsInput === void 0 ? void 0 : formatOptionsInput.measureDisplayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.measureDisplayMode} for measureDisplayMode does not match`);
      }
      return formatOptionsInput;
    }
  }), _dec6 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(DataPointBlock, _BuildingBlockBase);
    /**
     * Prefix added to the generated ID of the field
     */
    /**
     * Metadata path to the dataPoint.
     * This property is usually a metadataContext pointing to a DataPoint having
     * $Type = "com.sap.vocabularies.UI.v1.DataPointType"
     */
    /**
     * Property added to associate the label with the DataPoint
     */
    /**
     * Retrieves the templating objects to further process the DataPoint.
     *
     * @param context DataPointProperties or a DataPoint
     * @returns The models containing infos like the DataModelPath, ValueDataModelPath and DataPointConverted
     */
    DataPointBlock.getTemplatingObjects = function getTemplatingObjects(context) {
      var _internalDataModelPat, _internalDataModelPat2;
      const internalDataModelPath = getInvolvedDataModelObjects(context.metaPath, context.contextPath);
      let internalValueDataModelPath;
      context.visible = getVisibleExpression(internalDataModelPath);
      if (internalDataModelPath !== null && internalDataModelPath !== void 0 && (_internalDataModelPat = internalDataModelPath.targetObject) !== null && _internalDataModelPat !== void 0 && (_internalDataModelPat2 = _internalDataModelPat.Value) !== null && _internalDataModelPat2 !== void 0 && _internalDataModelPat2.path) {
        internalValueDataModelPath = enhanceDataModelPath(internalDataModelPath, internalDataModelPath.targetObject.Value.path);
      }
      const internalDataPointConverted = convertMetaModelContext(context.metaPath);
      return {
        dataModelPath: internalDataModelPath,
        valueDataModelPath: internalValueDataModelPath,
        dataPointConverted: internalDataPointConverted
      };
    }

    /**
     * Function that calculates the visualization type for this DataPoint.
     *
     * @param properties The datapoint properties
     * @returns The DataPointProperties with the optimized coding for the visualization type
     */;
    DataPointBlock.getDataPointVisualization = function getDataPointVisualization(properties) {
      const {
        dataModelPath,
        valueDataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(properties);
      if ((dataPointConverted === null || dataPointConverted === void 0 ? void 0 : dataPointConverted.Visualization) === "UI.VisualizationType/Rating") {
        properties.visualization = "Rating";
        return properties;
      }
      if ((dataPointConverted === null || dataPointConverted === void 0 ? void 0 : dataPointConverted.Visualization) === "UI.VisualizationType/Progress") {
        properties.visualization = "Progress";
        return properties;
      }
      const valueProperty = valueDataModelPath && valueDataModelPath.targetObject;
      //check whether the visualization type should be an object number in case one of the if conditions met
      properties.hasQuickView = valueProperty && isUsedInNavigationWithQuickViewFacets(dataModelPath, valueProperty);
      if (getPropertyWithSemanticObject(valueDataModelPath)) {
        properties.hasQuickView = true;
      }
      if (!properties.hasQuickView) {
        if (isProperty(valueProperty) && (hasUnit(valueProperty) || hasCurrency(valueProperty))) {
          // we only show an objectNumber if there is no quickview and a unit or a currency
          properties.visualization = "ObjectNumber";
          return properties;
        }
      }

      //default case to handle this as objectStatus type
      properties.visualization = "ObjectStatus";
      return properties;
    }

    /**
     * Constructor method of the building block.
     *
     * @param properties The datapoint properties
     */;
    function DataPointBlock(properties) {
      var _this;
      //setup initial default property settings
      properties.hasQuickView = false;
      _this = _BuildingBlockBase.call(this, DataPointBlock.getDataPointVisualization(properties)) || this;
      _initializerDefineProperty(_this, "idPrefix", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formatOptions", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor5, _assertThisInitialized(_this));
      return _this;
    }

    /**
     * The building block template for the rating indicator part.
     *
     * @returns An XML-based string with the definition of the rating indicator template
     */
    _exports = DataPointBlock;
    var _proto = DataPointBlock.prototype;
    _proto.getRatingIndicatorTemplate = function getRatingIndicatorTemplate() {
      var _dataPointValue$$targ;
      const {
        dataModelPath,
        valueDataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      const dataPointTarget = dataModelPath.targetObject;
      const targetValue = this.getTargetValueBinding();
      const dataPointValue = (dataPointTarget === null || dataPointTarget === void 0 ? void 0 : dataPointTarget.Value) || "";
      const propertyType = dataPointValue === null || dataPointValue === void 0 ? void 0 : (_dataPointValue$$targ = dataPointValue.$target) === null || _dataPointValue$$targ === void 0 ? void 0 : _dataPointValue$$targ.type;
      let numberOfFractionalDigits;
      if (propertyType === "Edm.Decimal" && dataPointTarget.ValueFormat) {
        if (dataPointTarget.ValueFormat.NumberOfFractionalDigits) {
          numberOfFractionalDigits = dataPointTarget.ValueFormat.NumberOfFractionalDigits;
        }
      }
      const value = getValueFormatted(valueDataModelPath, dataPointValue, propertyType, numberOfFractionalDigits);
      const text = getHeaderRatingIndicatorText(this.metaPath, dataPointTarget);
      let headerLabel = "";
      let targetLabel = "";
      const targetLabelExpression = compileExpression(formatResult([pathInModel("T_HEADER_RATING_INDICATOR_FOOTER", "sap.fe.i18n"), getExpressionFromAnnotation(dataPointConverted.Value, getRelativePaths(dataModelPath)), dataPointConverted.TargetValue ? getExpressionFromAnnotation(dataPointConverted.TargetValue, getRelativePaths(dataModelPath)) : "5"], "MESSAGE"));
      if (this.formatOptions.showLabels ?? false) {
        headerLabel = xml`<Label xmlns="sap.m"
					${this.attr("text", text)}
					${this.attr("visible", dataPointTarget.SampleSize || dataPointTarget.Description ? true : false)}
				/>`;
        targetLabel = xml`<Label
			xmlns="sap.m"
			core:require="{MESSAGE: 'sap/base/strings/formatMessage' }"
			${this.attr("text", targetLabelExpression)}
			visible="true" />`;
      }
      return xml`
		${headerLabel}
		<RatingIndicator
		xmlns="sap.m"

		${this.attr("id", this.idPrefix ? generate([this.idPrefix, "RatingIndicator-Field-display"]) : undefined)}
		${this.attr("maxValue", targetValue)}
		${this.attr("value", value)}
		${this.attr("tooltip", this.getTooltipValue())}
		${this.attr("iconSize", this.formatOptions.iconSize)}
		${this.attr("class", this.formatOptions.showLabels ?? false ? "sapUiTinyMarginTopBottom" : undefined)}
		editable="false"
	/>
	${targetLabel}`;
    }

    /**
     * The building block template for the progress indicator part.
     *
     * @returns An XML-based string with the definition of the progress indicator template
     */;
    _proto.getProgressIndicatorTemplate = function getProgressIndicatorTemplate() {
      var _this$formatOptions;
      const {
        dataModelPath,
        valueDataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      const criticalityColorExpression = buildExpressionForCriticalityColor(dataPointConverted, dataModelPath);
      const displayValue = buildExpressionForProgressIndicatorDisplayValue(dataModelPath);
      const percentValue = buildExpressionForProgressIndicatorPercentValue(dataModelPath);
      const dataPointTarget = dataModelPath.targetObject;
      let firstLabel = "";
      let secondLabel = "";
      if ((this === null || this === void 0 ? void 0 : (_this$formatOptions = this.formatOptions) === null || _this$formatOptions === void 0 ? void 0 : _this$formatOptions.showLabels) ?? false) {
        var _valueDataModelPath$t, _valueDataModelPath$t2, _valueDataModelPath$t3;
        firstLabel = xml`<Label
				xmlns="sap.m"
				${this.attr("text", dataPointTarget === null || dataPointTarget === void 0 ? void 0 : dataPointTarget.Description)}
				${this.attr("visible", !!(dataPointTarget !== null && dataPointTarget !== void 0 && dataPointTarget.Description))}
			/>`;

        // const secondLabelText = (valueDataModelPath?.targetObject as Property)?.annotations?.Common?.Label;
        const secondLabelExpression = getExpressionFromAnnotation(valueDataModelPath === null || valueDataModelPath === void 0 ? void 0 : (_valueDataModelPath$t = valueDataModelPath.targetObject) === null || _valueDataModelPath$t === void 0 ? void 0 : (_valueDataModelPath$t2 = _valueDataModelPath$t.annotations) === null || _valueDataModelPath$t2 === void 0 ? void 0 : (_valueDataModelPath$t3 = _valueDataModelPath$t2.Common) === null || _valueDataModelPath$t3 === void 0 ? void 0 : _valueDataModelPath$t3.Label);
        secondLabel = xml`<Label
				xmlns="sap.m"
				${this.attr("text", compileExpression(secondLabelExpression))}
				${this.attr("visible", !!compileExpression(notEqual(undefined, secondLabelExpression)))}
			/>`;
      }
      return xml`
		${firstLabel}
			<ProgressIndicator
				xmlns="sap.m"
				${this.attr("id", this.idPrefix ? generate([this.idPrefix, "ProgressIndicator-Field-display"]) : undefined)}
				${this.attr("displayValue", displayValue)}
				${this.attr("percentValue", percentValue)}
				${this.attr("state", criticalityColorExpression)}
				${this.attr("tooltip", this.getTooltipValue())}
			/>
			${secondLabel}`;
    }

    /**
     * The building block template for the object number common part.
     *
     * @returns An XML-based string with the definition of the object number common template
     */;
    _proto.getObjectNumberCommonTemplate = function getObjectNumberCommonTemplate() {
      const {
        dataModelPath,
        valueDataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      const criticalityColorExpression = buildExpressionForCriticalityColor(dataPointConverted, dataModelPath);
      const emptyIndicatorMode = this.formatOptions.showEmptyIndicator ?? false ? "On" : undefined;
      const objectStatusNumber = buildFieldBindingExpression(dataModelPath, this.formatOptions, true);
      const unit = this.formatOptions.measureDisplayMode === "Hidden" ? undefined : compileExpression(UIFormatters.getBindingForUnitOrCurrency(valueDataModelPath));
      return xml`<ObjectNumber
			xmlns="sap.m"
			${this.attr("id", this.idPrefix ? generate([this.idPrefix, "ObjectNumber-Field-display"]) : undefined)}
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			${this.attr("state", criticalityColorExpression)}
			${this.attr("number", objectStatusNumber)}
			${this.attr("unit", unit)}
			${this.attr("visible", this.visible)}
			emphasized="false"
			${this.attr("class", this.formatOptions.dataPointStyle === "large" ? "sapMObjectNumberLarge" : undefined)}
			${this.attr("tooltip", this.getTooltipValue())}
			${this.attr("emptyIndicatorMode", emptyIndicatorMode)}
		/>`;
    }

    /**
     * The building block template for the object number.
     *
     * @returns An XML-based string with the definition of the object number template
     */;
    _proto.getObjectNumberTemplate = function getObjectNumberTemplate() {
      var _this$formatOptions2;
      const {
        valueDataModelPath
      } = DataPointBlock.getTemplatingObjects(this);
      if ((this === null || this === void 0 ? void 0 : (_this$formatOptions2 = this.formatOptions) === null || _this$formatOptions2 === void 0 ? void 0 : _this$formatOptions2.isAnalytics) ?? false) {
        return xml`
				<control:ConditionalWrapper
					xmlns:control="sap.fe.macros.controls"
					${this.attr("condition", UIFormatters.hasValidAnalyticalCurrencyOrUnit(valueDataModelPath))}
				>
					<control:contentTrue>
						${this.getObjectNumberCommonTemplate()}
					</control:contentTrue>
					<control:contentFalse>
						<ObjectNumber
							xmlns="sap.m"
							${this.attr("id", this.idPrefix ? generate([this.idPrefix, "ObjectNumber-Field-display-differentUnit"]) : undefined)}
							number="*"
							unit=""
							${this.attr("visible", this.visible)}
							emphasized="false"
							${this.attr("class", this.formatOptions.dataPointStyle === "large" ? "sapMObjectNumberLarge" : undefined)}
						/>
					</control:contentFalse>
				</control:ConditionalWrapper>`;
      } else {
        return xml`${this.getObjectNumberCommonTemplate()}`;
      }
    }

    /**
     * Returns the dependent or an empty string.
     *
     * @returns Dependent either with the QuickView or an empty string.
     */;
    _proto.getObjectStatusDependentsTemplate = function getObjectStatusDependentsTemplate() {
      if (this.hasQuickView) {
        return `<dependents><macro:QuickView
						xmlns:macro="sap.fe.macros"
						dataField="{metaPath>}"
						contextPath="{contextPath>}"
					/></dependents>`;
      }
      return "";
    }

    /**
     * The building block template for the object status.
     *
     * @returns An XML-based string with the definition of the object status template
     */;
    _proto.getObjectStatusTemplate = function getObjectStatusTemplate() {
      const {
        dataModelPath,
        valueDataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      let criticalityColorExpression = buildExpressionForCriticalityColor(dataPointConverted, dataModelPath);
      if (criticalityColorExpression === "None" && valueDataModelPath) {
        criticalityColorExpression = this.hasQuickView ? "Information" : "None";
      }

      // if the semanticObjects already calculated the criticality we don't calculate it again
      criticalityColorExpression = criticalityColorExpression ? criticalityColorExpression : buildExpressionForCriticalityColor(dataPointConverted, dataModelPath);
      const emptyIndicatorMode = this.formatOptions.showEmptyIndicator ?? false ? "On" : undefined;
      const objectStatusText = buildFieldBindingExpression(dataModelPath, this.formatOptions, false);
      const iconExpression = this.formatOptions.dataPointStyle === "large" ? undefined : buildExpressionForCriticalityIcon(dataPointConverted, dataModelPath);
      return xml`<ObjectStatus
						xmlns="sap.m"
						${this.attr("id", this.idPrefix ? generate([this.idPrefix, "ObjectStatus-Field-display"]) : undefined)}
						core:require="{ FieldRuntime: 'sap/fe/macros/field/FieldRuntime' }"
						${this.attr("class", this.formatOptions.dataPointStyle === "large" ? "sapMObjectStatusLarge" : undefined)}
						${this.attr("icon", iconExpression)}
						${this.attr("tooltip", this.getTooltipValue())}
						${this.attr("state", criticalityColorExpression)}
						${this.attr("text", objectStatusText)}
						${this.attr("emptyIndicatorMode", emptyIndicatorMode)}
						${this.attr("active", this.hasQuickView)}
						press="FieldRuntime.pressLink"
						${this.attr("ariaLabelledBy", this.ariaLabelledBy !== null ? this.ariaLabelledBy : undefined)}
				>${this.getObjectStatusDependentsTemplate()}
				</ObjectStatus>`;
    }

    /**
     * The helper method to get a possible tooltip text.
     *
     * @returns BindingToolkitExpression
     */;
    _proto.getTooltipValue = function getTooltipValue() {
      var _dataPointConverted$a, _dataPointConverted$a2, _dataPointConverted$a3;
      const {
        dataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      return getExpressionFromAnnotation(dataPointConverted === null || dataPointConverted === void 0 ? void 0 : (_dataPointConverted$a = dataPointConverted.annotations) === null || _dataPointConverted$a === void 0 ? void 0 : (_dataPointConverted$a2 = _dataPointConverted$a.Common) === null || _dataPointConverted$a2 === void 0 ? void 0 : (_dataPointConverted$a3 = _dataPointConverted$a2.QuickInfo) === null || _dataPointConverted$a3 === void 0 ? void 0 : _dataPointConverted$a3.valueOf(), getRelativePaths(dataModelPath));
    }

    /**
     * The helper method to get a possible target value binding.
     *
     * @returns BindingToolkitExpression
     */;
    _proto.getTargetValueBinding = function getTargetValueBinding() {
      const {
        dataModelPath,
        dataPointConverted
      } = DataPointBlock.getTemplatingObjects(this);
      return getExpressionFromAnnotation(dataPointConverted.TargetValue, getRelativePaths(dataModelPath));
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */;
    _proto.getTemplate = function getTemplate() {
      switch (this.visualization) {
        case "Rating":
          {
            return this.getRatingIndicatorTemplate();
          }
        case "Progress":
          {
            return this.getProgressIndicatorTemplate();
          }
        case "ObjectNumber":
          {
            return this.getObjectNumberTemplate();
          }
        default:
          {
            return this.getObjectStatusTemplate();
          }
      }
    };
    return DataPointBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "formatOptions", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = DataPointBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/DataPoint.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/CriticalityFormatters","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/field/FieldTemplating","sap/fe/macros/internal/helpers/DataPointTemplating"],function(t,e,i,a,r,n,o,l,s,d,u,c,p){"use strict";var h,m,f,v,b,g,P,y,O,T,$,x,j;var V={};var M=p.getValueFormatted;var w=p.getHeaderRatingIndicatorText;var D=p.buildFieldBindingExpression;var S=p.buildExpressionForProgressIndicatorPercentValue;var z=p.buildExpressionForProgressIndicatorDisplayValue;var F=c.isUsedInNavigationWithQuickViewFacets;var E=c.getVisibleExpression;var I=c.getPropertyWithSemanticObject;var C=d.hasUnit;var B=d.hasCurrency;var k=s.getRelativePaths;var N=s.enhanceDataModelPath;var R=l.buildExpressionForCriticalityIcon;var L=l.buildExpressionForCriticalityColor;var A=o.isProperty;var Q=n.generate;var U=r.pathInModel;var _=r.notEqual;var H=r.getExpressionFromAnnotation;var q=r.formatResult;var G=r.compileExpression;var W=a.getInvolvedDataModelObjects;var J=a.convertMetaModelContext;var K=i.xml;var X=e.defineBuildingBlock;var Y=e.blockAttribute;function Z(t,e,i,a){if(!i)return;Object.defineProperty(t,e,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(a):void 0})}function tt(t){if(t===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function et(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;it(t,e)}function it(t,e){it=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,i){e.__proto__=i;return e};return it(t,e)}function at(t,e,i,a,r){var n={};Object.keys(a).forEach(function(t){n[t]=a[t]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,a){return a(t,e,i)||i},n);if(r&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(r):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(t,e,n);n=null}return n}function rt(t,e){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let nt=(h=X({name:"DataPoint",namespace:"sap.fe.macros.internal"}),m=Y({type:"string"}),f=Y({type:"sap.ui.model.Context",required:true}),v=Y({type:"string"}),b=Y({type:"object",validate:function(t){if(t!==null&&t!==void 0&&t.dataPointStyle&&!["","large"].includes(t===null||t===void 0?void 0:t.dataPointStyle)){throw new Error(`Allowed value ${t.dataPointStyle} for dataPointStyle does not match`)}if(t!==null&&t!==void 0&&t.displayMode&&!["Value","Description","ValueDescription","DescriptionValue"].includes(t===null||t===void 0?void 0:t.displayMode)){throw new Error(`Allowed value ${t.displayMode} for displayMode does not match`)}if(t!==null&&t!==void 0&&t.iconSize&&!["1rem","1.375rem","2rem"].includes(t===null||t===void 0?void 0:t.iconSize)){throw new Error(`Allowed value ${t.iconSize} for iconSize does not match`)}if(t!==null&&t!==void 0&&t.measureDisplayMode&&!["Hidden","ReadOnly"].includes(t===null||t===void 0?void 0:t.measureDisplayMode)){throw new Error(`Allowed value ${t.measureDisplayMode} for measureDisplayMode does not match`)}return t}}),g=Y({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),h(P=(y=function(t){et(e,t);e.getTemplatingObjects=function t(e){var i,a;const r=W(e.metaPath,e.contextPath);let n;e.visible=E(r);if(r!==null&&r!==void 0&&(i=r.targetObject)!==null&&i!==void 0&&(a=i.Value)!==null&&a!==void 0&&a.path){n=N(r,r.targetObject.Value.path)}const o=J(e.metaPath);return{dataModelPath:r,valueDataModelPath:n,dataPointConverted:o}};e.getDataPointVisualization=function t(i){const{dataModelPath:a,valueDataModelPath:r,dataPointConverted:n}=e.getTemplatingObjects(i);if((n===null||n===void 0?void 0:n.Visualization)==="UI.VisualizationType/Rating"){i.visualization="Rating";return i}if((n===null||n===void 0?void 0:n.Visualization)==="UI.VisualizationType/Progress"){i.visualization="Progress";return i}const o=r&&r.targetObject;i.hasQuickView=o&&F(a,o);if(I(r)){i.hasQuickView=true}if(!i.hasQuickView){if(A(o)&&(C(o)||B(o))){i.visualization="ObjectNumber";return i}}i.visualization="ObjectStatus";return i};function e(i){var a;i.hasQuickView=false;a=t.call(this,e.getDataPointVisualization(i))||this;Z(a,"idPrefix",O,tt(a));Z(a,"metaPath",T,tt(a));Z(a,"ariaLabelledBy",$,tt(a));Z(a,"formatOptions",x,tt(a));Z(a,"contextPath",j,tt(a));return a}V=e;var i=e.prototype;i.getRatingIndicatorTemplate=function t(){var i;const{dataModelPath:a,valueDataModelPath:r,dataPointConverted:n}=e.getTemplatingObjects(this);const o=a.targetObject;const l=this.getTargetValueBinding();const s=(o===null||o===void 0?void 0:o.Value)||"";const d=s===null||s===void 0?void 0:(i=s.$target)===null||i===void 0?void 0:i.type;let u;if(d==="Edm.Decimal"&&o.ValueFormat){if(o.ValueFormat.NumberOfFractionalDigits){u=o.ValueFormat.NumberOfFractionalDigits}}const c=M(r,s,d,u);const p=w(this.metaPath,o);let h="";let m="";const f=G(q([U("T_HEADER_RATING_INDICATOR_FOOTER","sap.fe.i18n"),H(n.Value,k(a)),n.TargetValue?H(n.TargetValue,k(a)):"5"],"MESSAGE"));if(this.formatOptions.showLabels??false){h=K`<Label xmlns="sap.m"
					${this.attr("text",p)}
					${this.attr("visible",o.SampleSize||o.Description?true:false)}
				/>`;m=K`<Label
			xmlns="sap.m"
			core:require="{MESSAGE: 'sap/base/strings/formatMessage' }"
			${this.attr("text",f)}
			visible="true" />`}return K`
		${h}
		<RatingIndicator
		xmlns="sap.m"

		${this.attr("id",this.idPrefix?Q([this.idPrefix,"RatingIndicator-Field-display"]):undefined)}
		${this.attr("maxValue",l)}
		${this.attr("value",c)}
		${this.attr("tooltip",this.getTooltipValue())}
		${this.attr("iconSize",this.formatOptions.iconSize)}
		${this.attr("class",this.formatOptions.showLabels??false?"sapUiTinyMarginTopBottom":undefined)}
		editable="false"
	/>
	${m}`};i.getProgressIndicatorTemplate=function t(){var i;const{dataModelPath:a,valueDataModelPath:r,dataPointConverted:n}=e.getTemplatingObjects(this);const o=L(n,a);const l=z(a);const s=S(a);const d=a.targetObject;let u="";let c="";if((this===null||this===void 0?void 0:(i=this.formatOptions)===null||i===void 0?void 0:i.showLabels)??false){var p,h,m;u=K`<Label
				xmlns="sap.m"
				${this.attr("text",d===null||d===void 0?void 0:d.Description)}
				${this.attr("visible",!!(d!==null&&d!==void 0&&d.Description))}
			/>`;const t=H(r===null||r===void 0?void 0:(p=r.targetObject)===null||p===void 0?void 0:(h=p.annotations)===null||h===void 0?void 0:(m=h.Common)===null||m===void 0?void 0:m.Label);c=K`<Label
				xmlns="sap.m"
				${this.attr("text",G(t))}
				${this.attr("visible",!!G(_(undefined,t)))}
			/>`}return K`
		${u}
			<ProgressIndicator
				xmlns="sap.m"
				${this.attr("id",this.idPrefix?Q([this.idPrefix,"ProgressIndicator-Field-display"]):undefined)}
				${this.attr("displayValue",l)}
				${this.attr("percentValue",s)}
				${this.attr("state",o)}
				${this.attr("tooltip",this.getTooltipValue())}
			/>
			${c}`};i.getObjectNumberCommonTemplate=function t(){const{dataModelPath:i,valueDataModelPath:a,dataPointConverted:r}=e.getTemplatingObjects(this);const n=L(r,i);const o=this.formatOptions.showEmptyIndicator??false?"On":undefined;const l=D(i,this.formatOptions,true);const s=this.formatOptions.measureDisplayMode==="Hidden"?undefined:G(u.getBindingForUnitOrCurrency(a));return K`<ObjectNumber
			xmlns="sap.m"
			${this.attr("id",this.idPrefix?Q([this.idPrefix,"ObjectNumber-Field-display"]):undefined)}
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			${this.attr("state",n)}
			${this.attr("number",l)}
			${this.attr("unit",s)}
			${this.attr("visible",this.visible)}
			emphasized="false"
			${this.attr("class",this.formatOptions.dataPointStyle==="large"?"sapMObjectNumberLarge":undefined)}
			${this.attr("tooltip",this.getTooltipValue())}
			${this.attr("emptyIndicatorMode",o)}
		/>`};i.getObjectNumberTemplate=function t(){var i;const{valueDataModelPath:a}=e.getTemplatingObjects(this);if((this===null||this===void 0?void 0:(i=this.formatOptions)===null||i===void 0?void 0:i.isAnalytics)??false){return K`
				<control:ConditionalWrapper
					xmlns:control="sap.fe.macros.controls"
					${this.attr("condition",u.hasValidAnalyticalCurrencyOrUnit(a))}
				>
					<control:contentTrue>
						${this.getObjectNumberCommonTemplate()}
					</control:contentTrue>
					<control:contentFalse>
						<ObjectNumber
							xmlns="sap.m"
							${this.attr("id",this.idPrefix?Q([this.idPrefix,"ObjectNumber-Field-display-differentUnit"]):undefined)}
							number="*"
							unit=""
							${this.attr("visible",this.visible)}
							emphasized="false"
							${this.attr("class",this.formatOptions.dataPointStyle==="large"?"sapMObjectNumberLarge":undefined)}
						/>
					</control:contentFalse>
				</control:ConditionalWrapper>`}else{return K`${this.getObjectNumberCommonTemplate()}`}};i.getObjectStatusDependentsTemplate=function t(){if(this.hasQuickView){return`<dependents><macro:QuickView\n\t\t\t\t\t\txmlns:macro="sap.fe.macros"\n\t\t\t\t\t\tdataField="{metaPath>}"\n\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t/></dependents>`}return""};i.getObjectStatusTemplate=function t(){const{dataModelPath:i,valueDataModelPath:a,dataPointConverted:r}=e.getTemplatingObjects(this);let n=L(r,i);if(n==="None"&&a){n=this.hasQuickView?"Information":"None"}n=n?n:L(r,i);const o=this.formatOptions.showEmptyIndicator??false?"On":undefined;const l=D(i,this.formatOptions,false);const s=this.formatOptions.dataPointStyle==="large"?undefined:R(r,i);return K`<ObjectStatus
						xmlns="sap.m"
						${this.attr("id",this.idPrefix?Q([this.idPrefix,"ObjectStatus-Field-display"]):undefined)}
						core:require="{ FieldRuntime: 'sap/fe/macros/field/FieldRuntime' }"
						${this.attr("class",this.formatOptions.dataPointStyle==="large"?"sapMObjectStatusLarge":undefined)}
						${this.attr("icon",s)}
						${this.attr("tooltip",this.getTooltipValue())}
						${this.attr("state",n)}
						${this.attr("text",l)}
						${this.attr("emptyIndicatorMode",o)}
						${this.attr("active",this.hasQuickView)}
						press="FieldRuntime.pressLink"
						${this.attr("ariaLabelledBy",this.ariaLabelledBy!==null?this.ariaLabelledBy:undefined)}
				>${this.getObjectStatusDependentsTemplate()}
				</ObjectStatus>`};i.getTooltipValue=function t(){var i,a,r;const{dataModelPath:n,dataPointConverted:o}=e.getTemplatingObjects(this);return H(o===null||o===void 0?void 0:(i=o.annotations)===null||i===void 0?void 0:(a=i.Common)===null||a===void 0?void 0:(r=a.QuickInfo)===null||r===void 0?void 0:r.valueOf(),k(n))};i.getTargetValueBinding=function t(){const{dataModelPath:i,dataPointConverted:a}=e.getTemplatingObjects(this);return H(a.TargetValue,k(i))};i.getTemplate=function t(){switch(this.visualization){case"Rating":{return this.getRatingIndicatorTemplate()}case"Progress":{return this.getProgressIndicatorTemplate()}case"ObjectNumber":{return this.getObjectNumberTemplate()}default:{return this.getObjectStatusTemplate()}}};return e}(t),O=at(y.prototype,"idPrefix",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),T=at(y.prototype,"metaPath",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),$=at(y.prototype,"ariaLabelledBy",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),x=at(y.prototype,"formatOptions",[b],{configurable:true,enumerable:true,writable:true,initializer:function(){return{}}}),j=at(y.prototype,"contextPath",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),y))||P);V=nt;return V},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/FilterField.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/macros/CommonHelper", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/filter/FilterFieldHelper", "sap/fe/macros/filter/FilterFieldTemplating"], function (Log, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter, BindingToolkit, StableIdHelper, DataModelPathHelper, PropertyFormatters, CommonHelper, FieldHelper, FilterFieldHelper, FilterFieldTemplating) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  var _exports = {};
  var getFilterFieldDisplayFormat = FilterFieldTemplating.getFilterFieldDisplayFormat;
  var maxConditions = FilterFieldHelper.maxConditions;
  var isRequiredInFilter = FilterFieldHelper.isRequiredInFilter;
  var getPlaceholder = FilterFieldHelper.getPlaceholder;
  var getDataType = FilterFieldHelper.getDataType;
  var getConditionsBinding = FilterFieldHelper.getConditionsBinding;
  var formatOptions = FilterFieldHelper.formatOptions;
  var constraints = FilterFieldHelper.constraints;
  var getRelativePropertyPath = PropertyFormatters.getRelativePropertyPath;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var generate = StableIdHelper.generate;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var compileExpression = BindingToolkit.compileExpression;
  var xml = BuildingBlockTemplateProcessor.xml;
  var SAP_UI_MODEL_CONTEXT = BuildingBlockTemplateProcessor.SAP_UI_MODEL_CONTEXT;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FilterFieldBlock = (
  /**
   * Building block for creating a Filter Field based on the metadata provided by OData V4.
   * <br>
   * It is designed to work based on a property context(property) pointing to an entity type property
   * needed to be used as filterfield and entityType context(contextPath) to consider the relativity of
   * the propertyPath of the property wrt entityType.
   *
   * Usage example:
   * <pre>
   * &lt;macro:FilterField id="MyFilterField" property="CompanyName" /&gt;
   * </pre>
   *
   * @private
   */
  _dec = defineBuildingBlock({
    name: "FilterField",
    namespace: "sap.fe.macros.internal"
  }), _dec2 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    isPublic: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    isPublic: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec5 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec6 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec7 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec8 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(FilterFieldBlock, _BuildingBlockBase);
    /**
     * Defines the metadata path to the property.
     */

    /**
     * Metadata path to the entitySet or navigationProperty
     */

    /**
     * Visual filter settings for filter field.
     */

    /**
     * A prefix that is added to the generated ID of the filter field.
     */

    /**
     * A prefix that is added to the generated ID of the value help used for the filter field.
     */

    /**
     * Specifies the Sematic Date Range option for the filter field.
     */

    /**
     * Settings from the manifest settings.
     */

    function FilterFieldBlock(props, configuration, settings) {
      var _propertyConverted$an, _propertyConverted$an2, _propertyConverted$an3, _propertyConverted$an4;
      var _this;
      _this = _BuildingBlockBase.call(this, props, configuration, settings) || this;
      _initializerDefineProperty(_this, "property", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visualFilter", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "idPrefix", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "vhIdPrefix", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useSemanticDateRange", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "settings", _descriptor7, _assertThisInitialized(_this));
      const propertyConverted = MetaModelConverter.convertMetaModelContext(_this.property);
      const dataModelPath = MetaModelConverter.getInvolvedDataModelObjects(_this.property, _this.contextPath);

      // Property settings
      const propertyName = propertyConverted.name,
        fixedValues = !!((_propertyConverted$an = propertyConverted.annotations) !== null && _propertyConverted$an !== void 0 && (_propertyConverted$an2 = _propertyConverted$an.Common) !== null && _propertyConverted$an2 !== void 0 && _propertyConverted$an2.ValueListWithFixedValues);
      _this.controlId = _this.idPrefix && generate([_this.idPrefix, propertyName]);
      _this.sourcePath = getTargetObjectPath(dataModelPath);
      _this.dataType = getDataType(propertyConverted);
      const labelTerm = (propertyConverted === null || propertyConverted === void 0 ? void 0 : (_propertyConverted$an3 = propertyConverted.annotations) === null || _propertyConverted$an3 === void 0 ? void 0 : (_propertyConverted$an4 = _propertyConverted$an3.Common) === null || _propertyConverted$an4 === void 0 ? void 0 : _propertyConverted$an4.Label) || propertyName;
      const labelExpression = getExpressionFromAnnotation(labelTerm);
      _this.label = compileExpression(labelExpression) || propertyName;
      _this.conditionsBinding = getConditionsBinding(dataModelPath) || "";
      _this.placeholder = getPlaceholder(propertyConverted);
      // Visual Filter settings
      _this.vfEnabled = !!_this.visualFilter && !(_this.idPrefix && _this.idPrefix.indexOf("Adaptation") > -1);
      _this.vfId = _this.vfEnabled ? generate([_this.idPrefix, propertyName, "VisualFilter"]) : undefined;

      //-----------------------------------------------------------------------------------------------------//
      // TODO: need to change operations from MetaModel to Converters.
      // This mainly included changing changing getFilterRestrictions operations from metaModel to converters
      const propertyContext = _this.property,
        model = propertyContext.getModel(),
        vhPropertyPath = FieldHelper.valueHelpPropertyForFilterField(propertyContext),
        filterable = CommonHelper.isPropertyFilterable(propertyContext),
        propertyObject = propertyContext.getObject(),
        propertyInterface = {
          context: propertyContext
        };
      _this.display = getFilterFieldDisplayFormat(dataModelPath, propertyConverted, propertyInterface);
      _this.isFilterable = !(filterable === false || filterable === "false");
      _this.maxConditions = maxConditions(propertyObject, propertyInterface);
      _this.dataTypeConstraints = constraints(propertyObject, propertyInterface);
      _this.dataTypeFormatOptions = formatOptions(propertyObject, propertyInterface);
      _this.required = isRequiredInFilter(propertyObject, propertyInterface);
      _this.operators = FieldHelper.operators(propertyContext, propertyObject, _this.useSemanticDateRange, _this.settings || "", _this.contextPath.getPath());

      // Value Help settings
      // TODO: This needs to be updated when VH macro is converted to 2.0
      const vhProperty = model.createBindingContext(vhPropertyPath);
      const vhPropertyObject = vhProperty.getObject(),
        vhPropertyInterface = {
          context: vhProperty
        },
        relativeVhPropertyPath = getRelativePropertyPath(vhPropertyObject, vhPropertyInterface),
        relativePropertyPath = getRelativePropertyPath(propertyObject, propertyInterface);
      _this.fieldHelpProperty = FieldHelper.getFieldHelpPropertyForFilterField(propertyContext, propertyObject, propertyObject.$Type, _this.vhIdPrefix, relativePropertyPath, relativeVhPropertyPath, fixedValues, _this.useSemanticDateRange);

      //-----------------------------------------------------------------------------------------------------//
      return _this;
    }
    _exports = FilterFieldBlock;
    var _proto = FilterFieldBlock.prototype;
    _proto.getVisualFilterContent = function getVisualFilterContent() {
      var _visualFilterObject, _visualFilterObject$i;
      let visualFilterObject = this.visualFilter,
        vfXML = "";
      if (!this.vfEnabled || !visualFilterObject) {
        return vfXML;
      }
      if ((_visualFilterObject = visualFilterObject) !== null && _visualFilterObject !== void 0 && (_visualFilterObject$i = _visualFilterObject.isA) !== null && _visualFilterObject$i !== void 0 && _visualFilterObject$i.call(_visualFilterObject, SAP_UI_MODEL_CONTEXT)) {
        visualFilterObject = visualFilterObject.getObject();
      }
      const {
        contextPath,
        presentationAnnotation,
        outParameter,
        inParameters,
        valuelistProperty,
        selectionVariantAnnotation,
        multipleSelectionAllowed,
        required,
        requiredProperties = [],
        showOverlayInitially,
        renderLineChart,
        isValueListWithFixedValues
      } = visualFilterObject;
      vfXML = xml`
				<macro:VisualFilter
					id="${this.vfId}"
					contextPath="${contextPath}"
					metaPath="${presentationAnnotation}"
					outParameter="${outParameter}"
					inParameters="${inParameters}"
					valuelistProperty="${valuelistProperty}"
					selectionVariantAnnotation="${selectionVariantAnnotation}"
					multipleSelectionAllowed="${multipleSelectionAllowed}"
					required="${required}"
					requiredProperties="${CommonHelper.stringifyCustomData(requiredProperties)}"
					showOverlayInitially="${showOverlayInitially}"
					renderLineChart="${renderLineChart}"
					isValueListWithFixedValues="${isValueListWithFixedValues}"
					filterBarEntityType="${contextPath}"
				/>
			`;
      return vfXML;
    };
    _proto.getTemplate = async function getTemplate() {
      let xmlRet = ``;
      if (this.isFilterable) {
        let display;
        try {
          display = await this.display;
        } catch (err) {
          Log.error(`FE : FilterField BuildingBlock : Error fetching display property for ${this.sourcePath} : ${err}`);
        }
        xmlRet = xml`
				<mdc:FilterField
					xmlns:mdc="sap.ui.mdc"
					xmlns:macro="sap.fe.macros"
					xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
					xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
					unittest:id="UnitTest::FilterField"
					customData:sourcePath="${this.sourcePath}"
					id="${this.controlId}"
					delegate="{name: 'sap/fe/macros/field/FieldBaseDelegate', payload:{isFilterField:true}}"
					label="${this.label}"
					dataType="${this.dataType}"
					display="${display}"
					maxConditions="${this.maxConditions}"
					fieldHelp="${this.fieldHelpProperty}"
					conditions="${this.conditionsBinding}"
					dataTypeConstraints="${this.dataTypeConstraints}"
					dataTypeFormatOptions="${this.dataTypeFormatOptions}"
					required="${this.required}"
					operators="${this.operators}"
					placeholder="${this.placeholder}"

				>
					${this.vfEnabled ? this.getVisualFilterContent() : ""}
				</mdc:FilterField>
			`;
      }
      return xmlRet;
    };
    return FilterFieldBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "property", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "visualFilter", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "FilterField";
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "vhIdPrefix", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "FilterFieldValueHelp";
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "useSemanticDateRange", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "settings", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  })), _class2)) || _class);
  _exports = FilterFieldBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/FilterField.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyFormatters","sap/fe/macros/CommonHelper","sap/fe/macros/field/FieldHelper","sap/fe/macros/filter/FilterFieldHelper","sap/fe/macros/filter/FilterFieldTemplating"],function(e,t,i,r,a,n,l,o,s,u,p,c,d){"use strict";var f,m,b,h,v,y,g,P,F,x,$,C,O,B,T,w,z;var D={};var E=d.getFilterFieldDisplayFormat;var I=c.maxConditions;var V=c.isRequiredInFilter;var j=c.getPlaceholder;var k=c.getDataType;var H=c.getConditionsBinding;var q=c.formatOptions;var A=c.constraints;var S=s.getRelativePropertyPath;var L=o.getTargetObjectPath;var M=l.generate;var R=n.getExpressionFromAnnotation;var _=n.compileExpression;var W=r.xml;var U=r.SAP_UI_MODEL_CONTEXT;var N=i.defineBuildingBlock;var X=i.blockAttribute;function G(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function J(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function K(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Q(e,t)}function Q(e,t){Q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return Q(e,t)}function Y(e,t,i,r,a){var n={};Object.keys(r).forEach(function(e){n[e]=r[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},n);if(a&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(a):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function Z(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let ee=(f=N({name:"FilterField",namespace:"sap.fe.macros.internal"}),m=X({type:"sap.ui.model.Context",required:true,isPublic:true}),b=X({type:"sap.ui.model.Context",required:true,isPublic:true}),h=X({type:"sap.ui.model.Context",isPublic:true}),v=X({type:"string",isPublic:true}),y=X({type:"string",isPublic:true}),g=X({type:"boolean",isPublic:true}),P=X({type:"string",isPublic:true}),f(F=(x=function(t){K(i,t);function i(e,i,r){var n,l,o,s;var c;c=t.call(this,e,i,r)||this;G(c,"property",$,J(c));G(c,"contextPath",C,J(c));G(c,"visualFilter",O,J(c));G(c,"idPrefix",B,J(c));G(c,"vhIdPrefix",T,J(c));G(c,"useSemanticDateRange",w,J(c));G(c,"settings",z,J(c));const d=a.convertMetaModelContext(c.property);const f=a.getInvolvedDataModelObjects(c.property,c.contextPath);const m=d.name,b=!!((n=d.annotations)!==null&&n!==void 0&&(l=n.Common)!==null&&l!==void 0&&l.ValueListWithFixedValues);c.controlId=c.idPrefix&&M([c.idPrefix,m]);c.sourcePath=L(f);c.dataType=k(d);const h=(d===null||d===void 0?void 0:(o=d.annotations)===null||o===void 0?void 0:(s=o.Common)===null||s===void 0?void 0:s.Label)||m;const v=R(h);c.label=_(v)||m;c.conditionsBinding=H(f)||"";c.placeholder=j(d);c.vfEnabled=!!c.visualFilter&&!(c.idPrefix&&c.idPrefix.indexOf("Adaptation")>-1);c.vfId=c.vfEnabled?M([c.idPrefix,m,"VisualFilter"]):undefined;const y=c.property,g=y.getModel(),P=p.valueHelpPropertyForFilterField(y),F=u.isPropertyFilterable(y),x=y.getObject(),D={context:y};c.display=E(f,d,D);c.isFilterable=!(F===false||F==="false");c.maxConditions=I(x,D);c.dataTypeConstraints=A(x,D);c.dataTypeFormatOptions=q(x,D);c.required=V(x,D);c.operators=p.operators(y,x,c.useSemanticDateRange,c.settings||"",c.contextPath.getPath());const W=g.createBindingContext(P);const U=W.getObject(),N={context:W},X=S(U,N),K=S(x,D);c.fieldHelpProperty=p.getFieldHelpPropertyForFilterField(y,x,x.$Type,c.vhIdPrefix,K,X,b,c.useSemanticDateRange);return c}D=i;var r=i.prototype;r.getVisualFilterContent=function e(){var t,i;let r=this.visualFilter,a="";if(!this.vfEnabled||!r){return a}if((t=r)!==null&&t!==void 0&&(i=t.isA)!==null&&i!==void 0&&i.call(t,U)){r=r.getObject()}const{contextPath:n,presentationAnnotation:l,outParameter:o,inParameters:s,valuelistProperty:p,selectionVariantAnnotation:c,multipleSelectionAllowed:d,required:f,requiredProperties:m=[],showOverlayInitially:b,renderLineChart:h,isValueListWithFixedValues:v}=r;a=W`
				<macro:VisualFilter
					id="${this.vfId}"
					contextPath="${n}"
					metaPath="${l}"
					outParameter="${o}"
					inParameters="${s}"
					valuelistProperty="${p}"
					selectionVariantAnnotation="${c}"
					multipleSelectionAllowed="${d}"
					required="${f}"
					requiredProperties="${u.stringifyCustomData(m)}"
					showOverlayInitially="${b}"
					renderLineChart="${h}"
					isValueListWithFixedValues="${v}"
					filterBarEntityType="${n}"
				/>
			`;return a};r.getTemplate=async function t(){let i=``;if(this.isFilterable){let t;try{t=await this.display}catch(t){e.error(`FE : FilterField BuildingBlock : Error fetching display property for ${this.sourcePath} : ${t}`)}i=W`
				<mdc:FilterField
					xmlns:mdc="sap.ui.mdc"
					xmlns:macro="sap.fe.macros"
					xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
					xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
					unittest:id="UnitTest::FilterField"
					customData:sourcePath="${this.sourcePath}"
					id="${this.controlId}"
					delegate="{name: 'sap/fe/macros/field/FieldBaseDelegate', payload:{isFilterField:true}}"
					label="${this.label}"
					dataType="${this.dataType}"
					display="${t}"
					maxConditions="${this.maxConditions}"
					fieldHelp="${this.fieldHelpProperty}"
					conditions="${this.conditionsBinding}"
					dataTypeConstraints="${this.dataTypeConstraints}"
					dataTypeFormatOptions="${this.dataTypeFormatOptions}"
					required="${this.required}"
					operators="${this.operators}"
					placeholder="${this.placeholder}"

				>
					${this.vfEnabled?this.getVisualFilterContent():""}
				</mdc:FilterField>
			`}return i};return i}(t),$=Y(x.prototype,"property",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),C=Y(x.prototype,"contextPath",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),O=Y(x.prototype,"visualFilter",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),B=Y(x.prototype,"idPrefix",[v],{configurable:true,enumerable:true,writable:true,initializer:function(){return"FilterField"}}),T=Y(x.prototype,"vhIdPrefix",[y],{configurable:true,enumerable:true,writable:true,initializer:function(){return"FilterFieldValueHelp"}}),w=Y(x.prototype,"useSemanticDateRange",[g],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),z=Y(x.prototype,"settings",[P],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),x))||F);D=ee;return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/InternalField.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/formatters/CollaborationFormatter", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TitleHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/CommonHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/situations/SituationsIndicator.block", "sap/ui/mdc/enum/EditMode", "../field/FieldHelper", "./field/FieldStructure", "./valuehelp/AdditionalValueFormatter"], function (Log, BuildingBlockBase, BuildingBlockSupport, MetaModelConverter, CollaborationFormatters, valueFormatters, BindingToolkit, MetaModelFunction, ModelHelper, StableIdHelper, TitleHelper, TypeGuards, DataModelPathHelper, PropertyHelper, UIFormatters, CommonHelper, FieldTemplating, SituationsIndicatorBlock, EditMode, FieldHelper, getFieldStructureTemplate, additionalValueFormatter) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26;
  var _exports = {};
  var getTextBindingExpression = FieldTemplating.getTextBindingExpression;
  var isSemanticKey = PropertyHelper.isSemanticKey;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isProperty = TypeGuards.isProperty;
  var getTitleBindingExpression = TitleHelper.getTitleBindingExpression;
  var generate = StableIdHelper.generate;
  var getRequiredPropertiesFromUpdateRestrictions = MetaModelFunction.getRequiredPropertiesFromUpdateRestrictions;
  var getRequiredPropertiesFromInsertRestrictions = MetaModelFunction.getRequiredPropertiesFromInsertRestrictions;
  var wrapBindingExpression = BindingToolkit.wrapBindingExpression;
  var pathInModel = BindingToolkit.pathInModel;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var fn = BindingToolkit.fn;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let InternalFieldBlock = (
  /**
   * Building block for creating a Field based on the metadata provided by OData V4.
   * <br>
   * Usually, a DataField annotation is expected
   *
   * Usage example:
   * <pre>
   * <internalMacro:Field
   *   idPrefix="SomePrefix"
   *   contextPath="{entitySet>}"
   *   metaPath="{dataField>}"
   * />
   * </pre>
   *
   * @hideconstructor
   * @private
   * @experimental
   * @since 1.94.0
   */
  _dec = defineBuildingBlock({
    name: "Field",
    namespace: "sap.fe.macros.internal",
    designtime: "sap/fe/macros/internal/Field.designtime"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "string"
  }), _dec5 = blockAttribute({
    type: "string"
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec8 = blockAttribute({
    type: "string"
  }), _dec9 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec10 = blockAttribute({
    type: "boolean"
  }), _dec11 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["Property"],
    expectedAnnotationTypes: ["com.sap.vocabularies.UI.v1.DataField", "com.sap.vocabularies.UI.v1.DataFieldWithUrl", "com.sap.vocabularies.UI.v1.DataFieldForAnnotation", "com.sap.vocabularies.UI.v1.DataFieldForAction", "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation", "com.sap.vocabularies.UI.v1.DataFieldWithAction", "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation", "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath", "com.sap.vocabularies.UI.v1.DataPointType"]
  }), _dec12 = blockAttribute({
    type: "sap.ui.mdc.enum.EditMode"
  }), _dec13 = blockAttribute({
    type: "boolean"
  }), _dec14 = blockAttribute({
    type: "string"
  }), _dec15 = blockAttribute({
    type: "string"
  }), _dec16 = blockAttribute({
    type: "sap.ui.core.TextAlign"
  }), _dec17 = blockAttribute({
    type: "string",
    required: false
  }), _dec18 = blockAttribute({
    type: "string"
  }), _dec19 = blockAttribute({
    type: "boolean"
  }), _dec20 = blockAttribute({
    type: "boolean"
  }), _dec21 = blockAttribute({
    type: "object",
    validate: function (formatOptionsInput) {
      if (formatOptionsInput.textAlignMode && !["Table", "Form"].includes(formatOptionsInput.textAlignMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.textAlignMode} for textAlignMode does not match`);
      }
      if (formatOptionsInput.displayMode && !["Value", "Description", "ValueDescription", "DescriptionValue"].includes(formatOptionsInput.displayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.displayMode} for displayMode does not match`);
      }
      if (formatOptionsInput.fieldMode && !["nowrapper", ""].includes(formatOptionsInput.fieldMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.fieldMode} for fieldMode does not match`);
      }
      if (formatOptionsInput.measureDisplayMode && !["Hidden", "ReadOnly"].includes(formatOptionsInput.measureDisplayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.measureDisplayMode} for measureDisplayMode does not match`);
      }
      if (formatOptionsInput.textExpandBehaviorDisplay && !["InPlace", "Popover"].includes(formatOptionsInput.textExpandBehaviorDisplay)) {
        throw new Error(`Allowed value ${formatOptionsInput.textExpandBehaviorDisplay} for textExpandBehaviorDisplay does not match`);
      }
      if (formatOptionsInput.semanticKeyStyle && !["ObjectIdentifier", "Label", ""].includes(formatOptionsInput.semanticKeyStyle)) {
        throw new Error(`Allowed value ${formatOptionsInput.semanticKeyStyle} for semanticKeyStyle does not match`);
      }
      if (typeof formatOptionsInput.isAnalytics === "string") {
        formatOptionsInput.isAnalytics = formatOptionsInput.isAnalytics === "true";
      }
      if (typeof formatOptionsInput.forInlineCreationRows === "string") {
        formatOptionsInput.forInlineCreationRows = formatOptionsInput.forInlineCreationRows === "true";
      }

      /*
      Historical default values are currently disabled
      if (!formatOptionsInput.semanticKeyStyle) {
      	formatOptionsInput.semanticKeyStyle = "";
      }
      */

      return formatOptionsInput;
    }
  }), _dec22 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec23 = blockAttribute({
    type: "boolean"
  }), _dec24 = blockAttribute({
    type: "string"
  }), _dec25 = blockAttribute({
    type: "string"
  }), _dec26 = blockEvent(), _dec27 = blockAttribute({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(InternalFieldBlock, _BuildingBlockBase);
    /**
     * Metadata path to the entity set
     */
    /**
     * Flag indicating whether action will navigate after execution
     */
    /**
     * Metadata path to the dataField.
     * This property is usually a metadataContext pointing to a DataField having
     * $Type of DataField, DataFieldWithUrl, DataFieldForAnnotation, DataFieldForAction, DataFieldForIntentBasedNavigation, DataFieldWithNavigationPath, or DataPointType.
     * But it can also be a Property with $kind="Property"
     */
    /**
     * Edit Mode of the field.
     *
     * If the editMode is undefined then we compute it based on the metadata
     * Otherwise we use the value provided here.
     */
    /**
     * Wrap field
     */
    /**
     * CSS class for margin
     */
    /**
     * Property added to associate the label with the Field
     */
    /**
     * Option to add a semantic object to a field
     */
    /**
     * Metadata path to the entity set.
     * This is used in inner fragments, so we need to declare it as block attribute context.
     */
    /**
     * This is used in inner fragments, so we need to declare it as block attribute.
     */
    /**
     * This is used in inner fragments, so we need to declare it as block attribute.
     */
    /**
     * This is used to set valueState on the field
     */
    /**
     * Event handler for change event
     */
    // (start) Computed properties for Link.fragment.xml
    /* Display style common properties start */
    /* AmountWith currency fragment end */
    /* Edit style common properties start */
    /**
     * This is used in inner fragments, so we need to declare it as block attribute.
     */
    /* Edit style common properties end */
    /* Rating Indicator properties start */
    /* InputWithUnit end */
    /*ObjectIdentifier start */
    /*SemanticKeyWithDraftIndicator end*/
    InternalFieldBlock.getOverrides = function getOverrides(mControlConfiguration, sID) {
      const oProps = {};
      if (mControlConfiguration) {
        const oControlConfig = mControlConfiguration[sID];
        if (oControlConfig) {
          Object.keys(oControlConfig).forEach(function (sConfigKey) {
            oProps[sConfigKey] = oControlConfig[sConfigKey];
          });
        }
      }
      return oProps;
    };
    InternalFieldBlock.getIdentifierTitle = function getIdentifierTitle(fieldFormatOptions, fullContextPath, alwaysShowDescriptionAndValue) {
      return getTitleBindingExpression(fullContextPath, getTextBindingExpression, fieldFormatOptions, undefined, undefined, alwaysShowDescriptionAndValue);
    };
    InternalFieldBlock.getObjectIdentifierText = function getObjectIdentifierText(fieldFormatOptions, oPropertyDataModelObjectPath) {
      var _oPropertyDefinition$, _oPropertyDefinition$2, _commonText$annotatio, _commonText$annotatio2;
      let propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oPropertyDataModelObjectPath));
      const targetDisplayMode = fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.displayMode;
      const oPropertyDefinition = oPropertyDataModelObjectPath.targetObject.type === "PropertyPath" ? oPropertyDataModelObjectPath.targetObject.$target : oPropertyDataModelObjectPath.targetObject;
      const commonText = (_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Common) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.Text;
      if (commonText === undefined || commonText !== null && commonText !== void 0 && (_commonText$annotatio = commonText.annotations) !== null && _commonText$annotatio !== void 0 && (_commonText$annotatio2 = _commonText$annotatio.UI) !== null && _commonText$annotatio2 !== void 0 && _commonText$annotatio2.TextArrangement) {
        return undefined;
      }
      propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
      switch (targetDisplayMode) {
        case "ValueDescription":
          const relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);
          return compileExpression(getExpressionFromAnnotation(commonText, relativeLocation));
        case "DescriptionValue":
          return compileExpression(formatResult([propertyBindingExpression], valueFormatters.formatToKeepWhitespace));
        default:
          return undefined;
      }
    };
    InternalFieldBlock.setUpDataPointType = function setUpDataPointType(oDataField) {
      // data point annotations need not have $Type defined, so add it if missing
      if ((oDataField === null || oDataField === void 0 ? void 0 : oDataField.term) === "com.sap.vocabularies.UI.v1.DataPoint") {
        oDataField.$Type = oDataField.$Type || "com.sap.vocabularies.UI.v1.DataPointType";
      }
    };
    InternalFieldBlock.setUpVisibleProperties = function setUpVisibleProperties(oFieldProps, oPropertyDataModelObjectPath) {
      // we do this before enhancing the dataModelPath so that it still points at the DataField
      oFieldProps.visible = FieldTemplating.getVisibleExpression(oPropertyDataModelObjectPath, oFieldProps.formatOptions);
      oFieldProps.displayVisible = oFieldProps.formatOptions.fieldMode === "nowrapper" ? oFieldProps.visible : undefined;
    };
    InternalFieldBlock.getContentId = function getContentId(sMacroId) {
      return `${sMacroId}-content`;
    };
    InternalFieldBlock.setUpEditableProperties = function setUpEditableProperties(oProps, oDataField, oDataModelPath, oMetaModel) {
      var _oDataModelPath$targe, _oProps$formatOptions, _oProps$entitySet, _oProps$entitySet2;
      const oPropertyForFieldControl = oDataModelPath !== null && oDataModelPath !== void 0 && (_oDataModelPath$targe = oDataModelPath.targetObject) !== null && _oDataModelPath$targe !== void 0 && _oDataModelPath$targe.Value ? oDataModelPath.targetObject.Value : oDataModelPath === null || oDataModelPath === void 0 ? void 0 : oDataModelPath.targetObject;
      let hasPropertyInsertRestrictions = false;
      if (((_oProps$formatOptions = oProps.formatOptions) === null || _oProps$formatOptions === void 0 ? void 0 : _oProps$formatOptions.forInlineCreationRows) === true) {
        hasPropertyInsertRestrictions = FieldTemplating.hasPropertyInsertRestrictions(oDataModelPath);
      }
      if (oProps.editMode !== undefined && oProps.editMode !== null) {
        // Even if it provided as a string it's a valid part of a binding expression that can be later combined into something else.
        oProps.editModeAsObject = oProps.editMode;
      } else {
        const bMeasureReadOnly = oProps.formatOptions.measureDisplayMode ? oProps.formatOptions.measureDisplayMode === "ReadOnly" : false;
        oProps.editModeAsObject = UIFormatters.getEditMode(oPropertyForFieldControl, oDataModelPath, bMeasureReadOnly, true, oDataField);
        oProps.editMode = compileExpression(ifElse(and(pathInModel("@$ui5.context.isInactive"), hasPropertyInsertRestrictions), "Display", oProps.editModeAsObject));
      }
      const editableExpression = UIFormatters.getEditableExpressionAsObject(oPropertyForFieldControl, oDataField, oDataModelPath);
      const aRequiredPropertiesFromInsertRestrictions = getRequiredPropertiesFromInsertRestrictions((_oProps$entitySet = oProps.entitySet) === null || _oProps$entitySet === void 0 ? void 0 : _oProps$entitySet.getPath().replaceAll("/$NavigationPropertyBinding/", "/"), oMetaModel);
      const aRequiredPropertiesFromUpdateRestrictions = getRequiredPropertiesFromUpdateRestrictions((_oProps$entitySet2 = oProps.entitySet) === null || _oProps$entitySet2 === void 0 ? void 0 : _oProps$entitySet2.getPath().replaceAll("/$NavigationPropertyBinding/", "/"), oMetaModel);
      const oRequiredProperties = {
        requiredPropertiesFromInsertRestrictions: aRequiredPropertiesFromInsertRestrictions,
        requiredPropertiesFromUpdateRestrictions: aRequiredPropertiesFromUpdateRestrictions
      };
      if (ModelHelper.isCollaborationDraftSupported(oMetaModel) && oProps.editMode !== EditMode.Display) {
        oProps.collaborationEnabled = true;
        // Expressions needed for Collaboration Visualization
        const collaborationExpression = UIFormatters.getCollaborationExpression(oDataModelPath, CollaborationFormatters.hasCollaborationActivity);
        oProps.collaborationHasActivityExpression = compileExpression(collaborationExpression);
        oProps.collaborationInitialsExpression = compileExpression(UIFormatters.getCollaborationExpression(oDataModelPath, CollaborationFormatters.getCollaborationActivityInitials));
        oProps.collaborationColorExpression = compileExpression(UIFormatters.getCollaborationExpression(oDataModelPath, CollaborationFormatters.getCollaborationActivityColor));
        oProps.editableExpression = compileExpression(and(editableExpression, not(collaborationExpression)));
        oProps.editMode = compileExpression(ifElse(collaborationExpression, constant("ReadOnly"), oProps.editModeAsObject));
      } else {
        oProps.editableExpression = compileExpression(editableExpression);
      }
      oProps.enabledExpression = UIFormatters.getEnabledExpression(oPropertyForFieldControl, oDataField, false, oDataModelPath);
      oProps.requiredExpression = UIFormatters.getRequiredExpression(oPropertyForFieldControl, oDataField, false, false, oRequiredProperties, oDataModelPath);
      if (oProps.idPrefix) {
        oProps.editStyleId = generate([oProps.idPrefix, "Field-edit"]);
      }
    };
    InternalFieldBlock.setUpFormatOptions = function setUpFormatOptions(oProps, oDataModelPath, oControlConfiguration, mSettings) {
      var _mSettings$models$vie;
      const oOverrideProps = InternalFieldBlock.getOverrides(oControlConfiguration, oProps.dataField.getPath());
      if (!oProps.formatOptions.displayMode) {
        oProps.formatOptions.displayMode = UIFormatters.getDisplayMode(oDataModelPath);
      }
      oProps.formatOptions.textLinesEdit = oOverrideProps.textLinesEdit || oOverrideProps.formatOptions && oOverrideProps.formatOptions.textLinesEdit || oProps.formatOptions.textLinesEdit || 4;
      oProps.formatOptions.textMaxLines = oOverrideProps.textMaxLines || oOverrideProps.formatOptions && oOverrideProps.formatOptions.textMaxLines || oProps.formatOptions.textMaxLines;

      // Retrieve text from value list as fallback feature for missing text annotation on the property
      if ((_mSettings$models$vie = mSettings.models.viewData) !== null && _mSettings$models$vie !== void 0 && _mSettings$models$vie.getProperty("/retrieveTextFromValueList")) {
        oProps.formatOptions.retrieveTextFromValueList = FieldTemplating.isRetrieveTextFromValueListEnabled(oDataModelPath.targetObject, oProps.formatOptions);
        if (oProps.formatOptions.retrieveTextFromValueList) {
          var _oDataModelPath$targe2, _oDataModelPath$targe3, _oDataModelPath$targe4;
          // Consider TextArrangement at EntityType otherwise set default display format 'DescriptionValue'
          const hasEntityTextArrangement = !!(oDataModelPath !== null && oDataModelPath !== void 0 && (_oDataModelPath$targe2 = oDataModelPath.targetEntityType) !== null && _oDataModelPath$targe2 !== void 0 && (_oDataModelPath$targe3 = _oDataModelPath$targe2.annotations) !== null && _oDataModelPath$targe3 !== void 0 && (_oDataModelPath$targe4 = _oDataModelPath$targe3.UI) !== null && _oDataModelPath$targe4 !== void 0 && _oDataModelPath$targe4.TextArrangement);
          oProps.formatOptions.displayMode = hasEntityTextArrangement ? oProps.formatOptions.displayMode : "DescriptionValue";
        }
      }
      if (oProps.formatOptions.fieldMode === "nowrapper" && oProps.editMode === "Display") {
        if (oProps._flexId) {
          oProps.noWrapperId = oProps._flexId;
        } else {
          oProps.noWrapperId = oProps.idPrefix ? generate([oProps.idPrefix, "Field-content"]) : undefined;
        }
      }
    };
    InternalFieldBlock.setUpDisplayStyle = function setUpDisplayStyle(oProps, oDataField, oDataModelPath) {
      var _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation3, _oProperty$annotation4, _oProperty$annotation19, _oProperty$annotation20, _oDataField$Target, _oDataField$Target$$t, _oDataField$Target2, _oDataField$Target2$$, _oDataField$ActionTar, _oDataField$ActionTar2, _oProperty$annotation21, _oProperty$annotation22, _oProperty$annotation23, _oProperty$annotation24, _oProperty$annotation25, _oProperty$annotation26, _oProperty$annotation29, _oProperty$annotation30;
      const oProperty = oDataModelPath.targetObject;
      if (!oDataModelPath.targetObject) {
        oProps.displayStyle = "Text";
        return;
      }
      oProps.hasUnitOrCurrency = ((_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Measures) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Unit) !== undefined || ((_oProperty$annotation3 = oProperty.annotations) === null || _oProperty$annotation3 === void 0 ? void 0 : (_oProperty$annotation4 = _oProperty$annotation3.Measures) === null || _oProperty$annotation4 === void 0 ? void 0 : _oProperty$annotation4.ISOCurrency) !== undefined;
      oProps.hasValidAnalyticalCurrencyOrUnit = UIFormatters.hasValidAnalyticalCurrencyOrUnit(oDataModelPath);
      oProps.textFromValueList = wrapBindingExpression(compileExpression(fn("FieldRuntime.retrieveTextFromValueList", [pathInModel(getContextRelativeTargetObjectPath(oDataModelPath)), `/${oProperty.fullyQualifiedName}`, oProps.formatOptions.displayMode])), false);
      if (oProperty.type === "Edm.Stream") {
        var _oProperty$annotation5, _oProperty$annotation6, _oProperty$annotation9, _oProperty$annotation10, _oProperty$annotation11, _oProperty$annotation12, _oProperty$annotation13, _oProperty$annotation14, _oProperty$annotation15, _oProperty$annotation16, _oProperty$annotation17, _oProperty$annotation18;
        // Common
        oProps.displayStyle = "File";
        oProps.fileRelativePropertyPath = getContextRelativeTargetObjectPath(oDataModelPath);
        if ((_oProperty$annotation5 = oProperty.annotations.Core) !== null && _oProperty$annotation5 !== void 0 && (_oProperty$annotation6 = _oProperty$annotation5.ContentDisposition) !== null && _oProperty$annotation6 !== void 0 && _oProperty$annotation6.Filename) {
          var _oProperty$annotation7, _oProperty$annotation8;
          const fileNameDataModelPath = enhanceDataModelPath(oDataModelPath, (_oProperty$annotation7 = oProperty.annotations.Core) === null || _oProperty$annotation7 === void 0 ? void 0 : (_oProperty$annotation8 = _oProperty$annotation7.ContentDisposition) === null || _oProperty$annotation8 === void 0 ? void 0 : _oProperty$annotation8.Filename);
          // This causes an expression parsing error: compileExpression(pathInModel(getContextRelativeTargetObjectPath(fileNameDataModelPath)));
          oProps.fileFilenameExpression = "{ path: '" + getContextRelativeTargetObjectPath(fileNameDataModelPath) + "' }";
        }
        oProps.fileStreamNotEmpty = compileExpression(not(equal(pathInModel(`${oProps.fileRelativePropertyPath}@odata.mediaContentType`), null)));

        // FileWrapper
        oProps.fileUploadUrl = FieldTemplating.getValueBinding(oDataModelPath, {});
        oProps.fileFilenamePath = (_oProperty$annotation9 = oProperty.annotations.Core) === null || _oProperty$annotation9 === void 0 ? void 0 : (_oProperty$annotation10 = _oProperty$annotation9.ContentDisposition) === null || _oProperty$annotation10 === void 0 ? void 0 : (_oProperty$annotation11 = _oProperty$annotation10.Filename) === null || _oProperty$annotation11 === void 0 ? void 0 : _oProperty$annotation11.path;
        oProps.fileMediaType = ((_oProperty$annotation12 = oProperty.annotations.Core) === null || _oProperty$annotation12 === void 0 ? void 0 : _oProperty$annotation12.MediaType) && compileExpression(getExpressionFromAnnotation((_oProperty$annotation13 = oProperty.annotations.Core) === null || _oProperty$annotation13 === void 0 ? void 0 : _oProperty$annotation13.MediaType));

        // template:if
        oProps.fileIsImage = !!((_oProperty$annotation14 = oProperty.annotations.UI) !== null && _oProperty$annotation14 !== void 0 && _oProperty$annotation14.IsImageURL) || !!((_oProperty$annotation15 = oProperty.annotations.UI) !== null && _oProperty$annotation15 !== void 0 && _oProperty$annotation15.IsImage) || /image\//i.test(((_oProperty$annotation16 = oProperty.annotations.Core) === null || _oProperty$annotation16 === void 0 ? void 0 : (_oProperty$annotation17 = _oProperty$annotation16.MediaType) === null || _oProperty$annotation17 === void 0 ? void 0 : _oProperty$annotation17.toString()) ?? "");

        // Avatar
        oProps.fileAvatarSrc = FieldTemplating.getValueBinding(oDataModelPath, {});

        // Icon
        oProps.fileIconSrc = FieldHelper.getPathForIconSource(oProps.fileRelativePropertyPath);

        // Link
        oProps.fileLinkText = FieldHelper.getFilenameExpr(oProps.fileFilenameExpression, "{sap.fe.i18n>M_FIELD_FILEUPLOADER_NOFILENAME_TEXT}");
        oProps.fileLinkHref = FieldHelper.getDownloadUrl(oProps.fileUploadUrl ?? "");

        // Text
        oProps.fileTextVisible = compileExpression(equal(pathInModel(`${oProps.fileRelativePropertyPath}@odata.mediaContentType`), null));

        // FileUploader
        if ((_oProperty$annotation18 = oProperty.annotations.Core) !== null && _oProperty$annotation18 !== void 0 && _oProperty$annotation18.AcceptableMediaTypes) {
          const acceptedTypes = Array.from(oProperty.annotations.Core.AcceptableMediaTypes).map(type => `'${type}'`);
          oProps.fileAcceptableMediaTypes = `{=odata.collection([${acceptedTypes.join(",")}])}`; // This does not feel right, but follows the logic of AnnotationHelper#value
        }

        oProps.fileMaximumSize = FieldHelper.calculateMBfromByte(oProperty.maxLength);
        return;
      }
      if ((_oProperty$annotation19 = oProperty.annotations) !== null && _oProperty$annotation19 !== void 0 && (_oProperty$annotation20 = _oProperty$annotation19.UI) !== null && _oProperty$annotation20 !== void 0 && _oProperty$annotation20.IsImageURL) {
        oProps.avatarVisible = FieldTemplating.getVisibleExpression(oDataModelPath);
        oProps.avatarSrc = FieldTemplating.getValueBinding(oDataModelPath, {});
        oProps.displayStyle = "Avatar";
        return;
      }
      switch (oDataField.$Type) {
        case "com.sap.vocabularies.UI.v1.DataPointType":
          oProps.displayStyle = "DataPoint";
          return;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          if (((_oDataField$Target = oDataField.Target) === null || _oDataField$Target === void 0 ? void 0 : (_oDataField$Target$$t = _oDataField$Target.$target) === null || _oDataField$Target$$t === void 0 ? void 0 : _oDataField$Target$$t.$Type) === "com.sap.vocabularies.UI.v1.DataPointType") {
            oProps.displayStyle = "DataPoint";
            return;
          } else if (((_oDataField$Target2 = oDataField.Target) === null || _oDataField$Target2 === void 0 ? void 0 : (_oDataField$Target2$$ = _oDataField$Target2.$target) === null || _oDataField$Target2$$ === void 0 ? void 0 : _oDataField$Target2$$.$Type) === "com.sap.vocabularies.Communication.v1.ContactType") {
            oProps.contactVisible = FieldTemplating.getVisibleExpression(oDataModelPath);
            oProps.displayStyle = "Contact";
            return;
          }
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
          //Qualms: the getObject is a bad practice, but for now it´s fine as an intermediate step to avoid refactoring of the helper in addition
          const dataFieldObject = oProps.dataField.getObject();
          oProps.buttonPress = FieldHelper.getPressEventForDataFieldActionButton(oProps, dataFieldObject);
          oProps.displayStyle = "Button";

          // Gracefully handle non-existing actions
          if (oDataField.ActionTarget === undefined) {
            oProps.buttonIsBound = true;
            oProps.buttonOperationAvailable = "false";
            oProps.buttonOperationAvailableFormatted = "false";
            Log.warning(`Warning: The action '${oDataField.Action}' does not exist. The corresponding action button will be disabled.`);
            return;
          }
          oProps.buttonIsBound = oDataField.ActionTarget.isBound;
          oProps.buttonOperationAvailable = (_oDataField$ActionTar = oDataField.ActionTarget.annotations) === null || _oDataField$ActionTar === void 0 ? void 0 : (_oDataField$ActionTar2 = _oDataField$ActionTar.Core) === null || _oDataField$ActionTar2 === void 0 ? void 0 : _oDataField$ActionTar2.OperationAvailable;
          oProps.buttonOperationAvailableFormatted = undefined;
          if (oProps.buttonOperationAvailable) {
            const actionTarget = oDataField.ActionTarget;
            const bindingParamName = actionTarget.parameters[0].name;
            //QUALMS, needs to be checked whether this makes sense at that place, might be good in a dedicated helper function
            oProps.buttonOperationAvailableFormatted = compileExpression(getExpressionFromAnnotation(oProps.buttonOperationAvailable, [], undefined, path => {
              if (path.startsWith(bindingParamName)) {
                return path.replace(bindingParamName + "/", "");
              }
              return path;
            }));
          }
          return;
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
          oProps.buttonPress = CommonHelper.getPressHandlerForDataFieldForIBN(oProps.dataField.getObject(), undefined, undefined);
          InternalFieldBlock.setUpNavigationAvailable(oProps, oDataField);
          oProps.displayStyle = "Button";
          return;
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
          oProps.text = InternalFieldBlock.getTextWithWhiteSpace(oProps.formatOptions, oDataModelPath);
          oProps.linkIsDataFieldWithIntentBasedNavigation = true;
          oProps.linkPress = CommonHelper.getPressHandlerForDataFieldForIBN(oProps.dataField.getObject());
          oProps.displayStyle = "Link";
          return;
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
          oProps.linkIsDataFieldWithNavigationPath = true;
          oProps.linkPress = `FieldRuntime.onDataFieldWithNavigationPath(\${$source>/}, $controller, '${oDataField.Target.value}')`;
          oProps.displayStyle = "Link";
          return;
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
          oProps.linkIsDataFieldWithAction = true;
          oProps.linkPress = FieldHelper.getPressEventForDataFieldActionButton(oProps, oProps.dataField.getObject());
          oProps.displayStyle = "Link";
          return;
      }
      const hasQuickView = FieldTemplating.isUsedInNavigationWithQuickViewFacets(oDataModelPath, oProperty);
      const hasSemanticObjects = !!FieldTemplating.getPropertyWithSemanticObject(oDataModelPath) || oProps.semanticObject !== undefined && oProps.semanticObject !== "";
      if (isSemanticKey(oProperty, oDataModelPath) && oProps.formatOptions.semanticKeyStyle) {
        var _annotations, _annotations$Common, _oDataModelPath$conte, _oDataModelPath$targe5, _oDataModelPath$targe6, _oDataModelPath$targe7, _oDataModelPath$conte2;
        oProps.hasQuickView = hasQuickView || hasSemanticObjects;
        oProps.hasSituationsIndicator = SituationsIndicatorBlock.getSituationsNavigationProperty(oDataModelPath.targetEntityType) !== undefined;
        InternalFieldBlock.setUpObjectIdentifierTitleAndText(oProps, oDataModelPath);
        if ((_annotations = ((_oDataModelPath$conte = oDataModelPath.contextLocation) === null || _oDataModelPath$conte === void 0 ? void 0 : _oDataModelPath$conte.targetEntitySet).annotations) !== null && _annotations !== void 0 && (_annotations$Common = _annotations.Common) !== null && _annotations$Common !== void 0 && _annotations$Common.DraftRoot && (_oDataModelPath$targe5 = oDataModelPath.targetEntitySet) !== null && _oDataModelPath$targe5 !== void 0 && (_oDataModelPath$targe6 = _oDataModelPath$targe5.annotations) !== null && _oDataModelPath$targe6 !== void 0 && (_oDataModelPath$targe7 = _oDataModelPath$targe6.Common) !== null && _oDataModelPath$targe7 !== void 0 && _oDataModelPath$targe7.DraftRoot) {
          oProps.draftIndicatorVisible = FieldTemplating.getDraftIndicatorVisibleBinding(oDataModelPath.targetObject.name);
          oProps.displayStyle = "SemanticKeyWithDraftIndicator";
          return;
        }
        oProps.showErrorIndicator = ((_oDataModelPath$conte2 = oDataModelPath.contextLocation) === null || _oDataModelPath$conte2 === void 0 ? void 0 : _oDataModelPath$conte2.targetObject._type) === "NavigationProperty" && !oProps.formatOptions.fieldGroupDraftIndicatorPropertyPath;
        oProps.situationsIndicatorPropertyPath = oDataModelPath.targetObject.name;
        oProps.displayStyle = oProps.formatOptions.semanticKeyStyle === "ObjectIdentifier" ? "ObjectIdentifier" : "LabelSemanticKey";
        return;
      }
      if (oDataField.Criticality) {
        oProps.hasQuickView = hasQuickView || hasSemanticObjects;
        oProps.linkUrl = oDataField.Url ? compileExpression(getExpressionFromAnnotation(oDataField.Url)) : undefined;
        oProps.displayStyle = "ObjectStatus";
        return;
      }
      if ((_oProperty$annotation21 = oProperty.annotations) !== null && _oProperty$annotation21 !== void 0 && (_oProperty$annotation22 = _oProperty$annotation21.Measures) !== null && _oProperty$annotation22 !== void 0 && _oProperty$annotation22.ISOCurrency && String(oProps.formatOptions.isCurrencyAligned) === "true" && oProps.formatOptions.measureDisplayMode !== "Hidden") {
        oProps.valueAsStringBindingExpression = FieldTemplating.getValueBinding(oDataModelPath, oProps.formatOptions, true, true, undefined, true);
        oProps.unitBindingExpression = compileExpression(UIFormatters.getBindingForUnitOrCurrency(oDataModelPath));
        oProps.displayStyle = "AmountWithCurrency";
        return;
      }
      if ((_oProperty$annotation23 = oProperty.annotations) !== null && _oProperty$annotation23 !== void 0 && (_oProperty$annotation24 = _oProperty$annotation23.Communication) !== null && _oProperty$annotation24 !== void 0 && _oProperty$annotation24.IsEmailAddress || (_oProperty$annotation25 = oProperty.annotations) !== null && _oProperty$annotation25 !== void 0 && (_oProperty$annotation26 = _oProperty$annotation25.Communication) !== null && _oProperty$annotation26 !== void 0 && _oProperty$annotation26.IsPhoneNumber) {
        var _oProperty$annotation27, _oProperty$annotation28;
        oProps.text = InternalFieldBlock.getTextWithWhiteSpace(oProps.formatOptions, oDataModelPath);
        oProps.linkIsEmailAddress = ((_oProperty$annotation27 = oProperty.annotations.Communication) === null || _oProperty$annotation27 === void 0 ? void 0 : _oProperty$annotation27.IsEmailAddress) !== undefined;
        oProps.linkIsPhoneNumber = ((_oProperty$annotation28 = oProperty.annotations.Communication) === null || _oProperty$annotation28 === void 0 ? void 0 : _oProperty$annotation28.IsPhoneNumber) !== undefined;
        const propertyValueBinding = FieldTemplating.getValueBinding(oDataModelPath, {});
        if (oProps.linkIsEmailAddress) {
          oProps.linkUrl = `mailto:${propertyValueBinding}`;
        }
        if (oProps.linkIsPhoneNumber) {
          oProps.linkUrl = `tel:${propertyValueBinding}`;
        }
        oProps.displayStyle = "Link";
        return;
      }
      if ((_oProperty$annotation29 = oProperty.annotations) !== null && _oProperty$annotation29 !== void 0 && (_oProperty$annotation30 = _oProperty$annotation29.UI) !== null && _oProperty$annotation30 !== void 0 && _oProperty$annotation30.MultiLineText) {
        oProps.displayStyle = "ExpandableText";
        return;
      }
      if (hasQuickView || hasSemanticObjects) {
        oProps.text = InternalFieldBlock.getTextWithWhiteSpace(oProps.formatOptions, oDataModelPath);
        oProps.hasQuickView = true;
        oProps.displayStyle = "LinkWithQuickView";
        return;
      }
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
        oProps.text = InternalFieldBlock.getTextWithWhiteSpace(oProps.formatOptions, oDataModelPath);
        oProps.displayStyle = "Link";
        oProps.iconUrl = oDataField.IconUrl ? compileExpression(getExpressionFromAnnotation(oDataField.IconUrl)) : undefined;
        oProps.linkUrl = compileExpression(getExpressionFromAnnotation(oDataField.Url));
        return;
      }
      oProps.displayStyle = "Text";
    };
    InternalFieldBlock.setUpEditStyle = function setUpEditStyle(oProps, oDataField, oDataModelPath, appComponent) {
      FieldTemplating.setEditStyleProperties(oProps, oDataField, oDataModelPath);
      oProps.fieldGroupIds = InternalFieldBlock.computeFieldGroupIds(oDataModelPath, appComponent);
    }

    /**
     * Calculate the fieldGroupIds for an Inputor other edit control.
     *
     * @param dataModelObjectPath
     * @param appComponent
     * @returns The value for fieldGroupIds
     */;
    InternalFieldBlock.computeFieldGroupIds = function computeFieldGroupIds(dataModelObjectPath, appComponent) {
      var _dataModelObjectPath$, _dataModelObjectPath$2;
      if (!appComponent) {
        //for ValueHelp / Mass edit Templating the appComponent is not passed to the templating
        return "";
      }
      const sideEffectService = appComponent.getSideEffectsService();
      const fieldGroupIds = sideEffectService.computeFieldGroupIds(((_dataModelObjectPath$ = dataModelObjectPath.targetEntityType) === null || _dataModelObjectPath$ === void 0 ? void 0 : _dataModelObjectPath$.fullyQualifiedName) ?? "", ((_dataModelObjectPath$2 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$2 === void 0 ? void 0 : _dataModelObjectPath$2.fullyQualifiedName) ?? "");
      const result = fieldGroupIds.join(",");
      return result === "" ? undefined : result;
    };
    InternalFieldBlock.setUpObjectIdentifierTitleAndText = function setUpObjectIdentifierTitleAndText(_oProps, oPropertyDataModelObjectPath) {
      var _oProps$formatOptions2;
      if (((_oProps$formatOptions2 = _oProps.formatOptions) === null || _oProps$formatOptions2 === void 0 ? void 0 : _oProps$formatOptions2.semanticKeyStyle) === "ObjectIdentifier") {
        // if DescriptionValue is set by default and property has a quickView,  we show description and value in ObjectIdentifier Title
        const alwaysShowDescriptionAndValue = _oProps.hasQuickView;
        _oProps.identifierTitle = InternalFieldBlock.getIdentifierTitle(_oProps.formatOptions, oPropertyDataModelObjectPath, alwaysShowDescriptionAndValue);
        if (!alwaysShowDescriptionAndValue) {
          _oProps.identifierText = InternalFieldBlock.getObjectIdentifierText(_oProps.formatOptions, oPropertyDataModelObjectPath);
        } else {
          _oProps.identifierText = undefined;
        }
      } else {
        _oProps.identifierTitle = InternalFieldBlock.getIdentifierTitle(_oProps.formatOptions, oPropertyDataModelObjectPath, true);
        _oProps.identifierText = undefined;
      }
    };
    InternalFieldBlock.getTextWithWhiteSpace = function getTextWithWhiteSpace(formatOptions, oDataModelPath) {
      const text = FieldTemplating.getTextBinding(oDataModelPath, formatOptions, true);
      return text._type === "PathInModel" || typeof text === "string" ? compileExpression(formatResult([text], "WSR")) : compileExpression(text);
    };
    InternalFieldBlock.setUpNavigationAvailable = function setUpNavigationAvailable(oProps, oDataField) {
      oProps.navigationAvailable = true;
      if ((oDataField === null || oDataField === void 0 ? void 0 : oDataField.$Type) === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && oDataField.NavigationAvailable !== undefined && String(oProps.formatOptions.ignoreNavigationAvailable) !== "true") {
        oProps.navigationAvailable = compileExpression(getExpressionFromAnnotation(oDataField.NavigationAvailable));
      }
    };
    InternalFieldBlock.setUpValueState = function setUpValueState(fieldProps, dataModelPath) {
      let valueStateExp;
      const fieldContainerType = fieldProps.formatOptions.textAlignMode;
      if (fieldContainerType === "Table") {
        valueStateExp = formatResult([pathInModel(`/recommendationsData`, "internal"), pathInModel(`/currentCtxt`, "internal"), fieldProps.dataSourcePath, fieldContainerType], additionalValueFormatter.formatValueState, dataModelPath.targetEntityType);
      } else {
        valueStateExp = formatResult([pathInModel(`/recommendationsData`, "internal"), pathInModel(`/currentCtxt`, "internal"), fieldProps.dataSourcePath, fieldContainerType], additionalValueFormatter.formatValueState);
      }
      fieldProps.valueState = compileExpression(valueStateExp);
    };
    function InternalFieldBlock(props, controlConfiguration, settings) {
      var _oDataFieldConverted$, _oDataFieldConverted$2;
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "dataSourcePath", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "emptyIndicatorMode", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_flexId", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "idPrefix", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_apiId", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "noWrapperId", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "vhIdPrefix", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entitySet", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigateAfterAction", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dataField", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "editMode", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "wrap", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "class", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "textAlign", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "semanticObject", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "requiredExpression", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showErrorObjectStatus", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formatOptions", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entityType", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "collaborationEnabled", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_vhFlexId", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "valueState", _descriptor24, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onChange", _descriptor25, _assertThisInitialized(_this));
      _this.hasQuickView = false;
      _this.linkUrl = undefined;
      _this.linkIsDataFieldWithIntentBasedNavigation = false;
      _this.linkIsDataFieldWithNavigationPath = false;
      _this.linkIsDataFieldWithAction = false;
      _this.linkIsEmailAddress = false;
      _this.linkIsPhoneNumber = false;
      _this.linkPress = undefined;
      _this.fileFilenameExpression = undefined;
      _this.fileAcceptableMediaTypes = undefined;
      _this.hasUnitOrCurrency = undefined;
      _this.hasValidAnalyticalCurrencyOrUnit = undefined;
      _this.textFromValueList = undefined;
      _this.editStyleId = undefined;
      _initializerDefineProperty(_this, "editStylePlaceholder", _descriptor26, _assertThisInitialized(_this));
      _this.ratingIndicatorTooltip = undefined;
      _this.ratingIndicatorTargetValue = undefined;
      _this.showErrorIndicator = false;
      _this.situationsIndicatorPropertyPath = "";
      const oDataFieldConverted = MetaModelConverter.convertMetaModelContext(_this.dataField);
      let oDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(_this.dataField, _this.entitySet);
      InternalFieldBlock.setUpDataPointType(oDataFieldConverted);
      InternalFieldBlock.setUpVisibleProperties(_assertThisInitialized(_this), oDataModelPath);
      if (_this._flexId) {
        _this._apiId = _this._flexId;
        _this._flexId = InternalFieldBlock.getContentId(_this._flexId);
        _this._vhFlexId = `${_this._flexId}_${_this.vhIdPrefix}`;
      }
      const valueDataModelPath = FieldTemplating.getDataModelObjectPathForValue(oDataModelPath);
      oDataModelPath = valueDataModelPath || oDataModelPath;
      _this.dataSourcePath = getTargetObjectPath(oDataModelPath);
      const oMetaModel = settings.models.metaModel || settings.models.entitySet;
      _this.entityType = oMetaModel.createBindingContext(`/${oDataModelPath.targetEntityType.fullyQualifiedName}`);
      InternalFieldBlock.setUpEditableProperties(_assertThisInitialized(_this), oDataFieldConverted, oDataModelPath, oMetaModel);
      InternalFieldBlock.setUpFormatOptions(_assertThisInitialized(_this), oDataModelPath, controlConfiguration, settings);
      InternalFieldBlock.setUpDisplayStyle(_assertThisInitialized(_this), oDataFieldConverted, oDataModelPath);
      InternalFieldBlock.setUpEditStyle(_assertThisInitialized(_this), oDataFieldConverted, oDataModelPath, settings.appComponent);
      InternalFieldBlock.setUpValueState(_assertThisInitialized(_this), oDataModelPath);

      // ---------------------------------------- compute bindings----------------------------------------------------
      const aDisplayStylesWithoutPropText = ["Avatar", "AmountWithCurrency"];
      if (_this.displayStyle && aDisplayStylesWithoutPropText.indexOf(_this.displayStyle) === -1 && oDataModelPath.targetObject) {
        _this.text = _this.text ?? FieldTemplating.getTextBinding(oDataModelPath, _this.formatOptions);
      } else {
        _this.text = "";
      }
      _this.emptyIndicatorMode = _this.formatOptions.showEmptyIndicator ? "On" : undefined;

      // If the target is a property with a DataFieldDefault, use this as data field
      if (isProperty(oDataFieldConverted) && ((_oDataFieldConverted$ = oDataFieldConverted.annotations) === null || _oDataFieldConverted$ === void 0 ? void 0 : (_oDataFieldConverted$2 = _oDataFieldConverted$.UI) === null || _oDataFieldConverted$2 === void 0 ? void 0 : _oDataFieldConverted$2.DataFieldDefault) !== undefined) {
        _this.dataField = oMetaModel.createBindingContext(`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`, _this.dataField);
      }
      return _this;
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */
    _exports = InternalFieldBlock;
    var _proto = InternalFieldBlock.prototype;
    _proto.getTemplate = function getTemplate() {
      return getFieldStructureTemplate(this);
    };
    return InternalFieldBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataSourcePath", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "emptyIndicatorMode", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_flexId", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_apiId", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "noWrapperId", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "vhIdPrefix", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "FieldValueHelp";
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "entitySet", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "navigateAfterAction", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "dataField", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "editMode", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "wrap", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "class", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "textAlign", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "semanticObject", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "requiredExpression", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "showErrorObjectStatus", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "formatOptions", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "entityType", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "collaborationEnabled", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "_vhFlexId", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "valueState", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "onChange", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "editStylePlaceholder", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = InternalFieldBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/InternalField.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/converters/MetaModelConverter","sap/fe/core/formatters/CollaborationFormatter","sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TitleHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/CommonHelper","sap/fe/macros/field/FieldTemplating","sap/fe/macros/situations/SituationsIndicator.block","sap/ui/mdc/enum/EditMode","../field/FieldHelper","./field/FieldStructure","./valuehelp/AdditionalValueFormatter"],function(e,t,i,a,n,r,o,l,s,d,u,p,c,f,v,y,b,m,g,I,h,x){"use strict";var O,F,P,T,S,E,A,D,M,w,U,C,j,B,V,k,W,L,N,$,z,R,_,H,q,K,Q,G,X,J,Y,Z,ee,te,ie,ae,ne,re,oe,le,se,de,ue,pe,ce,fe,ve,ye,be,me,ge,Ie,he,xe,Oe;var Fe={};var Pe=b.getTextBindingExpression;var Te=f.isSemanticKey;var Se=c.getTargetObjectPath;var Ee=c.getRelativePaths;var Ae=c.getContextRelativeTargetObjectPath;var De=c.enhanceDataModelPath;var Me=p.isProperty;var we=u.getTitleBindingExpression;var Ue=d.generate;var Ce=l.getRequiredPropertiesFromUpdateRestrictions;var je=l.getRequiredPropertiesFromInsertRestrictions;var Be=o.wrapBindingExpression;var Ve=o.pathInModel;var ke=o.not;var We=o.ifElse;var Le=o.getExpressionFromAnnotation;var Ne=o.formatWithTypeInformation;var $e=o.formatResult;var ze=o.fn;var Re=o.equal;var _e=o.constant;var He=o.compileExpression;var qe=o.and;var Ke=i.defineBuildingBlock;var Qe=i.blockEvent;var Ge=i.blockAttribute;function Xe(e,t,i,a){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(a):void 0})}function Je(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function Ye(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Ze(e,t)}function Ze(e,t){Ze=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return Ze(e,t)}function et(e,t,i,a,n){var r={};Object.keys(a).forEach(function(e){r[e]=a[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=i.slice().reverse().reduce(function(i,a){return a(e,t,i)||i},r);if(n&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(n):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function tt(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let it=(O=Ke({name:"Field",namespace:"sap.fe.macros.internal",designtime:"sap/fe/macros/internal/Field.designtime"}),F=Ge({type:"string"}),P=Ge({type:"string"}),T=Ge({type:"string"}),S=Ge({type:"string"}),E=Ge({type:"string"}),A=Ge({type:"string"}),D=Ge({type:"string"}),M=Ge({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),w=Ge({type:"boolean"}),U=Ge({type:"sap.ui.model.Context",required:true,expectedTypes:["Property"],expectedAnnotationTypes:["com.sap.vocabularies.UI.v1.DataField","com.sap.vocabularies.UI.v1.DataFieldWithUrl","com.sap.vocabularies.UI.v1.DataFieldForAnnotation","com.sap.vocabularies.UI.v1.DataFieldForAction","com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation","com.sap.vocabularies.UI.v1.DataFieldWithAction","com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation","com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath","com.sap.vocabularies.UI.v1.DataPointType"]}),C=Ge({type:"sap.ui.mdc.enum.EditMode"}),j=Ge({type:"boolean"}),B=Ge({type:"string"}),V=Ge({type:"string"}),k=Ge({type:"sap.ui.core.TextAlign"}),W=Ge({type:"string",required:false}),L=Ge({type:"string"}),N=Ge({type:"boolean"}),$=Ge({type:"boolean"}),z=Ge({type:"object",validate:function(e){if(e.textAlignMode&&!["Table","Form"].includes(e.textAlignMode)){throw new Error(`Allowed value ${e.textAlignMode} for textAlignMode does not match`)}if(e.displayMode&&!["Value","Description","ValueDescription","DescriptionValue"].includes(e.displayMode)){throw new Error(`Allowed value ${e.displayMode} for displayMode does not match`)}if(e.fieldMode&&!["nowrapper",""].includes(e.fieldMode)){throw new Error(`Allowed value ${e.fieldMode} for fieldMode does not match`)}if(e.measureDisplayMode&&!["Hidden","ReadOnly"].includes(e.measureDisplayMode)){throw new Error(`Allowed value ${e.measureDisplayMode} for measureDisplayMode does not match`)}if(e.textExpandBehaviorDisplay&&!["InPlace","Popover"].includes(e.textExpandBehaviorDisplay)){throw new Error(`Allowed value ${e.textExpandBehaviorDisplay} for textExpandBehaviorDisplay does not match`)}if(e.semanticKeyStyle&&!["ObjectIdentifier","Label",""].includes(e.semanticKeyStyle)){throw new Error(`Allowed value ${e.semanticKeyStyle} for semanticKeyStyle does not match`)}if(typeof e.isAnalytics==="string"){e.isAnalytics=e.isAnalytics==="true"}if(typeof e.forInlineCreationRows==="string"){e.forInlineCreationRows=e.forInlineCreationRows==="true"}return e}}),R=Ge({type:"sap.ui.model.Context"}),_=Ge({type:"boolean"}),H=Ge({type:"string"}),q=Ge({type:"string"}),K=Qe(),Q=Ge({type:"string"}),O(G=(X=function(t){Ye(i,t);i.getOverrides=function e(t,i){const a={};if(t){const e=t[i];if(e){Object.keys(e).forEach(function(t){a[t]=e[t]})}}return a};i.getIdentifierTitle=function e(t,i,a){return we(i,Pe,t,undefined,undefined,a)};i.getObjectIdentifierText=function e(t,i){var a,n,o,l;let s=Ve(Ae(i));const d=t===null||t===void 0?void 0:t.displayMode;const u=i.targetObject.type==="PropertyPath"?i.targetObject.$target:i.targetObject;const p=(a=u.annotations)===null||a===void 0?void 0:(n=a.Common)===null||n===void 0?void 0:n.Text;if(p===undefined||p!==null&&p!==void 0&&(o=p.annotations)!==null&&o!==void 0&&(l=o.UI)!==null&&l!==void 0&&l.TextArrangement){return undefined}s=Ne(u,s);switch(d){case"ValueDescription":const e=Ee(i);return He(Le(p,e));case"DescriptionValue":return He($e([s],r.formatToKeepWhitespace));default:return undefined}};i.setUpDataPointType=function e(t){if((t===null||t===void 0?void 0:t.term)==="com.sap.vocabularies.UI.v1.DataPoint"){t.$Type=t.$Type||"com.sap.vocabularies.UI.v1.DataPointType"}};i.setUpVisibleProperties=function e(t,i){t.visible=b.getVisibleExpression(i,t.formatOptions);t.displayVisible=t.formatOptions.fieldMode==="nowrapper"?t.visible:undefined};i.getContentId=function e(t){return`${t}-content`};i.setUpEditableProperties=function e(t,i,a,r){var o,l,d,u;const p=a!==null&&a!==void 0&&(o=a.targetObject)!==null&&o!==void 0&&o.Value?a.targetObject.Value:a===null||a===void 0?void 0:a.targetObject;let c=false;if(((l=t.formatOptions)===null||l===void 0?void 0:l.forInlineCreationRows)===true){c=b.hasPropertyInsertRestrictions(a)}if(t.editMode!==undefined&&t.editMode!==null){t.editModeAsObject=t.editMode}else{const e=t.formatOptions.measureDisplayMode?t.formatOptions.measureDisplayMode==="ReadOnly":false;t.editModeAsObject=v.getEditMode(p,a,e,true,i);t.editMode=He(We(qe(Ve("@$ui5.context.isInactive"),c),"Display",t.editModeAsObject))}const f=v.getEditableExpressionAsObject(p,i,a);const y=je((d=t.entitySet)===null||d===void 0?void 0:d.getPath().replaceAll("/$NavigationPropertyBinding/","/"),r);const m=Ce((u=t.entitySet)===null||u===void 0?void 0:u.getPath().replaceAll("/$NavigationPropertyBinding/","/"),r);const I={requiredPropertiesFromInsertRestrictions:y,requiredPropertiesFromUpdateRestrictions:m};if(s.isCollaborationDraftSupported(r)&&t.editMode!==g.Display){t.collaborationEnabled=true;const e=v.getCollaborationExpression(a,n.hasCollaborationActivity);t.collaborationHasActivityExpression=He(e);t.collaborationInitialsExpression=He(v.getCollaborationExpression(a,n.getCollaborationActivityInitials));t.collaborationColorExpression=He(v.getCollaborationExpression(a,n.getCollaborationActivityColor));t.editableExpression=He(qe(f,ke(e)));t.editMode=He(We(e,_e("ReadOnly"),t.editModeAsObject))}else{t.editableExpression=He(f)}t.enabledExpression=v.getEnabledExpression(p,i,false,a);t.requiredExpression=v.getRequiredExpression(p,i,false,false,I,a);if(t.idPrefix){t.editStyleId=Ue([t.idPrefix,"Field-edit"])}};i.setUpFormatOptions=function e(t,a,n,r){var o;const l=i.getOverrides(n,t.dataField.getPath());if(!t.formatOptions.displayMode){t.formatOptions.displayMode=v.getDisplayMode(a)}t.formatOptions.textLinesEdit=l.textLinesEdit||l.formatOptions&&l.formatOptions.textLinesEdit||t.formatOptions.textLinesEdit||4;t.formatOptions.textMaxLines=l.textMaxLines||l.formatOptions&&l.formatOptions.textMaxLines||t.formatOptions.textMaxLines;if((o=r.models.viewData)!==null&&o!==void 0&&o.getProperty("/retrieveTextFromValueList")){t.formatOptions.retrieveTextFromValueList=b.isRetrieveTextFromValueListEnabled(a.targetObject,t.formatOptions);if(t.formatOptions.retrieveTextFromValueList){var s,d,u;const e=!!(a!==null&&a!==void 0&&(s=a.targetEntityType)!==null&&s!==void 0&&(d=s.annotations)!==null&&d!==void 0&&(u=d.UI)!==null&&u!==void 0&&u.TextArrangement);t.formatOptions.displayMode=e?t.formatOptions.displayMode:"DescriptionValue"}}if(t.formatOptions.fieldMode==="nowrapper"&&t.editMode==="Display"){if(t._flexId){t.noWrapperId=t._flexId}else{t.noWrapperId=t.idPrefix?Ue([t.idPrefix,"Field-content"]):undefined}}};i.setUpDisplayStyle=function t(a,n,r){var o,l,s,d,u,p,c,f,g,h,x,O,F,P,T,S,E,A,D,M;const w=r.targetObject;if(!r.targetObject){a.displayStyle="Text";return}a.hasUnitOrCurrency=((o=w.annotations)===null||o===void 0?void 0:(l=o.Measures)===null||l===void 0?void 0:l.Unit)!==undefined||((s=w.annotations)===null||s===void 0?void 0:(d=s.Measures)===null||d===void 0?void 0:d.ISOCurrency)!==undefined;a.hasValidAnalyticalCurrencyOrUnit=v.hasValidAnalyticalCurrencyOrUnit(r);a.textFromValueList=Be(He(ze("FieldRuntime.retrieveTextFromValueList",[Ve(Ae(r)),`/${w.fullyQualifiedName}`,a.formatOptions.displayMode])),false);if(w.type==="Edm.Stream"){var U,C,j,B,V,k,W,L,N,$,z,R;a.displayStyle="File";a.fileRelativePropertyPath=Ae(r);if((U=w.annotations.Core)!==null&&U!==void 0&&(C=U.ContentDisposition)!==null&&C!==void 0&&C.Filename){var _,H;const e=De(r,(_=w.annotations.Core)===null||_===void 0?void 0:(H=_.ContentDisposition)===null||H===void 0?void 0:H.Filename);a.fileFilenameExpression="{ path: '"+Ae(e)+"' }"}a.fileStreamNotEmpty=He(ke(Re(Ve(`${a.fileRelativePropertyPath}@odata.mediaContentType`),null)));a.fileUploadUrl=b.getValueBinding(r,{});a.fileFilenamePath=(j=w.annotations.Core)===null||j===void 0?void 0:(B=j.ContentDisposition)===null||B===void 0?void 0:(V=B.Filename)===null||V===void 0?void 0:V.path;a.fileMediaType=((k=w.annotations.Core)===null||k===void 0?void 0:k.MediaType)&&He(Le((W=w.annotations.Core)===null||W===void 0?void 0:W.MediaType));a.fileIsImage=!!((L=w.annotations.UI)!==null&&L!==void 0&&L.IsImageURL)||!!((N=w.annotations.UI)!==null&&N!==void 0&&N.IsImage)||/image\//i.test((($=w.annotations.Core)===null||$===void 0?void 0:(z=$.MediaType)===null||z===void 0?void 0:z.toString())??"");a.fileAvatarSrc=b.getValueBinding(r,{});a.fileIconSrc=I.getPathForIconSource(a.fileRelativePropertyPath);a.fileLinkText=I.getFilenameExpr(a.fileFilenameExpression,"{sap.fe.i18n>M_FIELD_FILEUPLOADER_NOFILENAME_TEXT}");a.fileLinkHref=I.getDownloadUrl(a.fileUploadUrl??"");a.fileTextVisible=He(Re(Ve(`${a.fileRelativePropertyPath}@odata.mediaContentType`),null));if((R=w.annotations.Core)!==null&&R!==void 0&&R.AcceptableMediaTypes){const e=Array.from(w.annotations.Core.AcceptableMediaTypes).map(e=>`'${e}'`);a.fileAcceptableMediaTypes=`{=odata.collection([${e.join(",")}])}`}a.fileMaximumSize=I.calculateMBfromByte(w.maxLength);return}if((u=w.annotations)!==null&&u!==void 0&&(p=u.UI)!==null&&p!==void 0&&p.IsImageURL){a.avatarVisible=b.getVisibleExpression(r);a.avatarSrc=b.getValueBinding(r,{});a.displayStyle="Avatar";return}switch(n.$Type){case"com.sap.vocabularies.UI.v1.DataPointType":a.displayStyle="DataPoint";return;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if(((c=n.Target)===null||c===void 0?void 0:(f=c.$target)===null||f===void 0?void 0:f.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"){a.displayStyle="DataPoint";return}else if(((g=n.Target)===null||g===void 0?void 0:(h=g.$target)===null||h===void 0?void 0:h.$Type)==="com.sap.vocabularies.Communication.v1.ContactType"){a.contactVisible=b.getVisibleExpression(r);a.displayStyle="Contact";return}break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":const t=a.dataField.getObject();a.buttonPress=I.getPressEventForDataFieldActionButton(a,t);a.displayStyle="Button";if(n.ActionTarget===undefined){a.buttonIsBound=true;a.buttonOperationAvailable="false";a.buttonOperationAvailableFormatted="false";e.warning(`Warning: The action '${n.Action}' does not exist. The corresponding action button will be disabled.`);return}a.buttonIsBound=n.ActionTarget.isBound;a.buttonOperationAvailable=(x=n.ActionTarget.annotations)===null||x===void 0?void 0:(O=x.Core)===null||O===void 0?void 0:O.OperationAvailable;a.buttonOperationAvailableFormatted=undefined;if(a.buttonOperationAvailable){const e=n.ActionTarget;const t=e.parameters[0].name;a.buttonOperationAvailableFormatted=He(Le(a.buttonOperationAvailable,[],undefined,e=>{if(e.startsWith(t)){return e.replace(t+"/","")}return e}))}return;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":a.buttonPress=y.getPressHandlerForDataFieldForIBN(a.dataField.getObject(),undefined,undefined);i.setUpNavigationAvailable(a,n);a.displayStyle="Button";return;case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":a.text=i.getTextWithWhiteSpace(a.formatOptions,r);a.linkIsDataFieldWithIntentBasedNavigation=true;a.linkPress=y.getPressHandlerForDataFieldForIBN(a.dataField.getObject());a.displayStyle="Link";return;case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":a.linkIsDataFieldWithNavigationPath=true;a.linkPress=`FieldRuntime.onDataFieldWithNavigationPath(\${$source>/}, $controller, '${n.Target.value}')`;a.displayStyle="Link";return;case"com.sap.vocabularies.UI.v1.DataFieldWithAction":a.linkIsDataFieldWithAction=true;a.linkPress=I.getPressEventForDataFieldActionButton(a,a.dataField.getObject());a.displayStyle="Link";return}const q=b.isUsedInNavigationWithQuickViewFacets(r,w);const K=!!b.getPropertyWithSemanticObject(r)||a.semanticObject!==undefined&&a.semanticObject!=="";if(Te(w,r)&&a.formatOptions.semanticKeyStyle){var Q,G,X,J,Y,Z,ee;a.hasQuickView=q||K;a.hasSituationsIndicator=m.getSituationsNavigationProperty(r.targetEntityType)!==undefined;i.setUpObjectIdentifierTitleAndText(a,r);if((Q=((X=r.contextLocation)===null||X===void 0?void 0:X.targetEntitySet).annotations)!==null&&Q!==void 0&&(G=Q.Common)!==null&&G!==void 0&&G.DraftRoot&&(J=r.targetEntitySet)!==null&&J!==void 0&&(Y=J.annotations)!==null&&Y!==void 0&&(Z=Y.Common)!==null&&Z!==void 0&&Z.DraftRoot){a.draftIndicatorVisible=b.getDraftIndicatorVisibleBinding(r.targetObject.name);a.displayStyle="SemanticKeyWithDraftIndicator";return}a.showErrorIndicator=((ee=r.contextLocation)===null||ee===void 0?void 0:ee.targetObject._type)==="NavigationProperty"&&!a.formatOptions.fieldGroupDraftIndicatorPropertyPath;a.situationsIndicatorPropertyPath=r.targetObject.name;a.displayStyle=a.formatOptions.semanticKeyStyle==="ObjectIdentifier"?"ObjectIdentifier":"LabelSemanticKey";return}if(n.Criticality){a.hasQuickView=q||K;a.linkUrl=n.Url?He(Le(n.Url)):undefined;a.displayStyle="ObjectStatus";return}if((F=w.annotations)!==null&&F!==void 0&&(P=F.Measures)!==null&&P!==void 0&&P.ISOCurrency&&String(a.formatOptions.isCurrencyAligned)==="true"&&a.formatOptions.measureDisplayMode!=="Hidden"){a.valueAsStringBindingExpression=b.getValueBinding(r,a.formatOptions,true,true,undefined,true);a.unitBindingExpression=He(v.getBindingForUnitOrCurrency(r));a.displayStyle="AmountWithCurrency";return}if((T=w.annotations)!==null&&T!==void 0&&(S=T.Communication)!==null&&S!==void 0&&S.IsEmailAddress||(E=w.annotations)!==null&&E!==void 0&&(A=E.Communication)!==null&&A!==void 0&&A.IsPhoneNumber){var te,ie;a.text=i.getTextWithWhiteSpace(a.formatOptions,r);a.linkIsEmailAddress=((te=w.annotations.Communication)===null||te===void 0?void 0:te.IsEmailAddress)!==undefined;a.linkIsPhoneNumber=((ie=w.annotations.Communication)===null||ie===void 0?void 0:ie.IsPhoneNumber)!==undefined;const e=b.getValueBinding(r,{});if(a.linkIsEmailAddress){a.linkUrl=`mailto:${e}`}if(a.linkIsPhoneNumber){a.linkUrl=`tel:${e}`}a.displayStyle="Link";return}if((D=w.annotations)!==null&&D!==void 0&&(M=D.UI)!==null&&M!==void 0&&M.MultiLineText){a.displayStyle="ExpandableText";return}if(q||K){a.text=i.getTextWithWhiteSpace(a.formatOptions,r);a.hasQuickView=true;a.displayStyle="LinkWithQuickView";return}if(n.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"){a.text=i.getTextWithWhiteSpace(a.formatOptions,r);a.displayStyle="Link";a.iconUrl=n.IconUrl?He(Le(n.IconUrl)):undefined;a.linkUrl=He(Le(n.Url));return}a.displayStyle="Text"};i.setUpEditStyle=function e(t,a,n,r){b.setEditStyleProperties(t,a,n);t.fieldGroupIds=i.computeFieldGroupIds(n,r)};i.computeFieldGroupIds=function e(t,i){var a,n;if(!i){return""}const r=i.getSideEffectsService();const o=r.computeFieldGroupIds(((a=t.targetEntityType)===null||a===void 0?void 0:a.fullyQualifiedName)??"",((n=t.targetObject)===null||n===void 0?void 0:n.fullyQualifiedName)??"");const l=o.join(",");return l===""?undefined:l};i.setUpObjectIdentifierTitleAndText=function e(t,a){var n;if(((n=t.formatOptions)===null||n===void 0?void 0:n.semanticKeyStyle)==="ObjectIdentifier"){const e=t.hasQuickView;t.identifierTitle=i.getIdentifierTitle(t.formatOptions,a,e);if(!e){t.identifierText=i.getObjectIdentifierText(t.formatOptions,a)}else{t.identifierText=undefined}}else{t.identifierTitle=i.getIdentifierTitle(t.formatOptions,a,true);t.identifierText=undefined}};i.getTextWithWhiteSpace=function e(t,i){const a=b.getTextBinding(i,t,true);return a._type==="PathInModel"||typeof a==="string"?He($e([a],"WSR")):He(a)};i.setUpNavigationAvailable=function e(t,i){t.navigationAvailable=true;if((i===null||i===void 0?void 0:i.$Type)==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&i.NavigationAvailable!==undefined&&String(t.formatOptions.ignoreNavigationAvailable)!=="true"){t.navigationAvailable=He(Le(i.NavigationAvailable))}};i.setUpValueState=function e(t,i){let a;const n=t.formatOptions.textAlignMode;if(n==="Table"){a=$e([Ve(`/recommendationsData`,"internal"),Ve(`/currentCtxt`,"internal"),t.dataSourcePath,n],x.formatValueState,i.targetEntityType)}else{a=$e([Ve(`/recommendationsData`,"internal"),Ve(`/currentCtxt`,"internal"),t.dataSourcePath,n],x.formatValueState)}t.valueState=He(a)};function i(e,n,r){var o,l;var s;s=t.call(this,e)||this;Xe(s,"dataSourcePath",J,Je(s));Xe(s,"emptyIndicatorMode",Y,Je(s));Xe(s,"_flexId",Z,Je(s));Xe(s,"idPrefix",ee,Je(s));Xe(s,"_apiId",te,Je(s));Xe(s,"noWrapperId",ie,Je(s));Xe(s,"vhIdPrefix",ae,Je(s));Xe(s,"entitySet",ne,Je(s));Xe(s,"navigateAfterAction",re,Je(s));Xe(s,"dataField",oe,Je(s));Xe(s,"editMode",le,Je(s));Xe(s,"wrap",se,Je(s));Xe(s,"class",de,Je(s));Xe(s,"ariaLabelledBy",ue,Je(s));Xe(s,"textAlign",pe,Je(s));Xe(s,"semanticObject",ce,Je(s));Xe(s,"requiredExpression",fe,Je(s));Xe(s,"visible",ve,Je(s));Xe(s,"showErrorObjectStatus",ye,Je(s));Xe(s,"formatOptions",be,Je(s));Xe(s,"entityType",me,Je(s));Xe(s,"collaborationEnabled",ge,Je(s));Xe(s,"_vhFlexId",Ie,Je(s));Xe(s,"valueState",he,Je(s));Xe(s,"onChange",xe,Je(s));s.hasQuickView=false;s.linkUrl=undefined;s.linkIsDataFieldWithIntentBasedNavigation=false;s.linkIsDataFieldWithNavigationPath=false;s.linkIsDataFieldWithAction=false;s.linkIsEmailAddress=false;s.linkIsPhoneNumber=false;s.linkPress=undefined;s.fileFilenameExpression=undefined;s.fileAcceptableMediaTypes=undefined;s.hasUnitOrCurrency=undefined;s.hasValidAnalyticalCurrencyOrUnit=undefined;s.textFromValueList=undefined;s.editStyleId=undefined;Xe(s,"editStylePlaceholder",Oe,Je(s));s.ratingIndicatorTooltip=undefined;s.ratingIndicatorTargetValue=undefined;s.showErrorIndicator=false;s.situationsIndicatorPropertyPath="";const d=a.convertMetaModelContext(s.dataField);let u=a.getInvolvedDataModelObjects(s.dataField,s.entitySet);i.setUpDataPointType(d);i.setUpVisibleProperties(Je(s),u);if(s._flexId){s._apiId=s._flexId;s._flexId=i.getContentId(s._flexId);s._vhFlexId=`${s._flexId}_${s.vhIdPrefix}`}const p=b.getDataModelObjectPathForValue(u);u=p||u;s.dataSourcePath=Se(u);const c=r.models.metaModel||r.models.entitySet;s.entityType=c.createBindingContext(`/${u.targetEntityType.fullyQualifiedName}`);i.setUpEditableProperties(Je(s),d,u,c);i.setUpFormatOptions(Je(s),u,n,r);i.setUpDisplayStyle(Je(s),d,u);i.setUpEditStyle(Je(s),d,u,r.appComponent);i.setUpValueState(Je(s),u);const f=["Avatar","AmountWithCurrency"];if(s.displayStyle&&f.indexOf(s.displayStyle)===-1&&u.targetObject){s.text=s.text??b.getTextBinding(u,s.formatOptions)}else{s.text=""}s.emptyIndicatorMode=s.formatOptions.showEmptyIndicator?"On":undefined;if(Me(d)&&((o=d.annotations)===null||o===void 0?void 0:(l=o.UI)===null||l===void 0?void 0:l.DataFieldDefault)!==undefined){s.dataField=c.createBindingContext(`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`,s.dataField)}return s}Fe=i;var o=i.prototype;o.getTemplate=function e(){return h(this)};return i}(t),J=et(X.prototype,"dataSourcePath",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),Y=et(X.prototype,"emptyIndicatorMode",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),Z=et(X.prototype,"_flexId",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),ee=et(X.prototype,"idPrefix",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),te=et(X.prototype,"_apiId",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),ie=et(X.prototype,"noWrapperId",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),ae=et(X.prototype,"vhIdPrefix",[D],{configurable:true,enumerable:true,writable:true,initializer:function(){return"FieldValueHelp"}}),ne=et(X.prototype,"entitySet",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),re=et(X.prototype,"navigateAfterAction",[w],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),oe=et(X.prototype,"dataField",[U],{configurable:true,enumerable:true,writable:true,initializer:null}),le=et(X.prototype,"editMode",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),se=et(X.prototype,"wrap",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),de=et(X.prototype,"class",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),ue=et(X.prototype,"ariaLabelledBy",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),pe=et(X.prototype,"textAlign",[k],{configurable:true,enumerable:true,writable:true,initializer:null}),ce=et(X.prototype,"semanticObject",[W],{configurable:true,enumerable:true,writable:true,initializer:null}),fe=et(X.prototype,"requiredExpression",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),ve=et(X.prototype,"visible",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),ye=et(X.prototype,"showErrorObjectStatus",[$],{configurable:true,enumerable:true,writable:true,initializer:null}),be=et(X.prototype,"formatOptions",[z],{configurable:true,enumerable:true,writable:true,initializer:function(){return{}}}),me=et(X.prototype,"entityType",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),ge=et(X.prototype,"collaborationEnabled",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),Ie=et(X.prototype,"_vhFlexId",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),he=et(X.prototype,"valueState",[q],{configurable:true,enumerable:true,writable:true,initializer:null}),xe=et(X.prototype,"onChange",[K],{configurable:true,enumerable:true,writable:true,initializer:null}),Oe=et(X.prototype,"editStylePlaceholder",[Q],{configurable:true,enumerable:true,writable:true,initializer:null}),X))||G);Fe=it;return Fe},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/collaborationHelper-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/collaboration/ActivitySync", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon"], function (CommonUtils, CollaborationActivitySync, CollaborationCommon) {
  "use strict";

  var Activity = CollaborationCommon.Activity;
  function getRelatedFieldFromValueHelp(oValueHelp) {
    const oView = CommonUtils.getTargetView(oValueHelp);
    return oView.findElements(true, function (oElem) {
      return !!(oElem.getFieldHelp && oElem.getDomRef() && oElem.getFieldHelp() === oValueHelp.getId());
    })[0];
  }
  function onValueHelpOpenDialog(oEvent) {
    const oValueHelp = oEvent.getSource();
    const oField = collaborationHelper.getRelatedFieldFromValueHelp(oValueHelp);
    const bCollaborationEnabled = CollaborationActivitySync.isConnected(oField);
    if (bCollaborationEnabled && oField.getBinding("value")) {
      var _oField$getBinding, _oField$getBindingCon, _oField$getBinding2, _oField$getBindingCon2, _oField$getBinding3;
      const sFullPath = (_oField$getBinding = oField.getBinding("value")) !== null && _oField$getBinding !== void 0 && _oField$getBinding.isA("sap.ui.model.CompositeBinding") ?
      // for the compositeBinding, we just send a message containing the path of the first element
      // it is enough to lock the entire field
      `${(_oField$getBindingCon = oField.getBindingContext()) === null || _oField$getBindingCon === void 0 ? void 0 : _oField$getBindingCon.getPath()}/${(_oField$getBinding2 = oField.getBinding("value")) === null || _oField$getBinding2 === void 0 ? void 0 : _oField$getBinding2.getBindings()[0].getPath()}` : `${(_oField$getBindingCon2 = oField.getBindingContext()) === null || _oField$getBindingCon2 === void 0 ? void 0 : _oField$getBindingCon2.getPath()}/${(_oField$getBinding3 = oField.getBinding("value")) === null || _oField$getBinding3 === void 0 ? void 0 : _oField$getBinding3.getPath()}`;
      CollaborationActivitySync.send(oField, Activity.LiveChange, sFullPath);
    }
  }
  function onValueHelpCloseDialog(oEvent) {
    var _oField$getBinding4;
    const oValueHelp = oEvent.getSource();
    const oField = collaborationHelper.getRelatedFieldFromValueHelp(oValueHelp);
    const bCollaborationEnabled = CollaborationActivitySync.isConnected(oField);
    const isCompositeBinding = (_oField$getBinding4 = oField.getBinding("value")) === null || _oField$getBinding4 === void 0 ? void 0 : _oField$getBinding4.isA("sap.ui.model.CompositeBinding");
    const oValueBeforeUpdate = isCompositeBinding ? oField.getValue()[1] : oField.getValue();
    return new Promise(resolve => {
      setTimeout(function () {
        var _oField$getBinding5;
        const value = isCompositeBinding ? oValueHelp.getConditions()[0].values[0] : (_oField$getBinding5 = oField.getBinding("value")) === null || _oField$getBinding5 === void 0 ? void 0 : _oField$getBinding5.getValue();
        if (bCollaborationEnabled && oValueBeforeUpdate === value) {
          var _oField$getBindingCon3, _oField$getBindingCon4, _oField$getBinding6;
          const sFullPath = isCompositeBinding ? `${(_oField$getBindingCon3 = oField.getBindingContext()) === null || _oField$getBindingCon3 === void 0 ? void 0 : _oField$getBindingCon3.getPath()}/${oField.getBinding("value").getBindings()[0].getPath()}` : `${(_oField$getBindingCon4 = oField.getBindingContext()) === null || _oField$getBindingCon4 === void 0 ? void 0 : _oField$getBindingCon4.getPath()}/${(_oField$getBinding6 = oField.getBinding("value")) === null || _oField$getBinding6 === void 0 ? void 0 : _oField$getBinding6.getPath()}`;
          CollaborationActivitySync.send(oField, Activity.Undo, sFullPath);
        }
        resolve();
      }, 0);
    });
  }
  const collaborationHelper = {
    getRelatedFieldFromValueHelp,
    onValueHelpOpenDialog,
    onValueHelpCloseDialog
  };
  return collaborationHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/collaborationHelper", ["sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/collaboration/ActivitySync","sap/fe/core/controllerextensions/collaboration/CollaborationCommon"],function(e,n,t){"use strict";var i=t.Activity;function o(n){const t=e.getTargetView(n);return t.findElements(true,function(e){return!!(e.getFieldHelp&&e.getDomRef()&&e.getFieldHelp()===n.getId())})[0]}function l(e){const t=e.getSource();const o=d.getRelatedFieldFromValueHelp(t);const l=n.isConnected(o);if(l&&o.getBinding("value")){var g,a,u,s,v;const e=(g=o.getBinding("value"))!==null&&g!==void 0&&g.isA("sap.ui.model.CompositeBinding")?`${(a=o.getBindingContext())===null||a===void 0?void 0:a.getPath()}/${(u=o.getBinding("value"))===null||u===void 0?void 0:u.getBindings()[0].getPath()}`:`${(s=o.getBindingContext())===null||s===void 0?void 0:s.getPath()}/${(v=o.getBinding("value"))===null||v===void 0?void 0:v.getPath()}`;n.send(o,i.LiveChange,e)}}function g(e){var t;const o=e.getSource();const l=d.getRelatedFieldFromValueHelp(o);const g=n.isConnected(l);const a=(t=l.getBinding("value"))===null||t===void 0?void 0:t.isA("sap.ui.model.CompositeBinding");const u=a?l.getValue()[1]:l.getValue();return new Promise(e=>{setTimeout(function(){var t;const d=a?o.getConditions()[0].values[0]:(t=l.getBinding("value"))===null||t===void 0?void 0:t.getValue();if(g&&u===d){var s,v,c;const e=a?`${(s=l.getBindingContext())===null||s===void 0?void 0:s.getPath()}/${l.getBinding("value").getBindings()[0].getPath()}`:`${(v=l.getBindingContext())===null||v===void 0?void 0:v.getPath()}/${(c=l.getBinding("value"))===null||c===void 0?void 0:c.getPath()}`;n.send(l,i.Undo,e)}e()},0)})}const d={getRelatedFieldFromValueHelp:o,onValueHelpOpenDialog:l,onValueHelpCloseDialog:g};return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/DisplayStyle-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldHelper", "sap/ui/mdc/enum/EditMode"], function (BuildingBlockTemplateProcessor, MetaModelConverter, StableIdHelper, CriticalityFormatters, DataModelPathHelper, UIFormatters, FieldHelper, EditMode) {
  "use strict";

  var hasValidAnalyticalCurrencyOrUnit = UIFormatters.hasValidAnalyticalCurrencyOrUnit;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var buildExpressionForCriticalityIcon = CriticalityFormatters.buildExpressionForCriticalityIcon;
  var buildExpressionForCriticalityColor = CriticalityFormatters.buildExpressionForCriticalityColor;
  var buildExpressionForCriticalityButtonType = CriticalityFormatters.buildExpressionForCriticalityButtonType;
  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  const DisplayStyle = {
    /**
     * Generates the AmountWithCurrency template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getAmountWithCurrencyTemplate(internalField) {
      if (internalField.formatOptions.isAnalytics) {
        return xml`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${internalField.displayVisible}" condition="${internalField.hasValidAnalyticalCurrencyOrUnit}">
			<controls:contentTrue>
				<u:Currency
					xmlns:u="sap.ui.unified"
					stringValue="${internalField.valueAsStringBindingExpression}"
					currency="${internalField.unitBindingExpression}"
					useSymbol="false"
					maxPrecision="5"
				/>
			</controls:contentTrue>
			<controls:contentFalse>
				<u:Currency xmlns:u="sap.ui.unified" stringValue="" currency="*" useSymbol="false" />
			</controls:contentFalse>
		</controls:ConditionalWrapper>`;
      } else {
        return xml`<coreControls:FormElementWrapper xmlns:coreControls="sap.fe.core.controls"
			formDoNotAdjustWidth="true"
			width="${internalField.formatOptions.textAlignMode === "Table" ? "100%" : undefined}"
		>
			<u:Currency
				xmlns:u="sap.ui.unified"
				visible="${internalField.displayVisible}"
				stringValue="${internalField.valueAsStringBindingExpression}"
				currency="${internalField.unitBindingExpression}"
				useSymbol="false"
				maxPrecision="5"
			/>
		</coreControls:FormElementWrapper>`;
      }
    },
    /**
     * Generates the Avatar template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getAvatarTemplate(internalField) {
      let avatarId;
      if (internalField._flexId) {
        avatarId = internalField._flexId;
      } else if (internalField.idPrefix) {
        avatarId = generate([internalField.idPrefix, "Field-content"]);
      }
      return xml`
				<controls:FormElementWrapper
					xmlns:controls="sap.fe.core.controls"
					visible="${internalField.avatarVisible}"
				>
				<Avatar
					xmlns="sap.m"
					id="${avatarId}"
					src="${internalField.avatarSrc}"
					displaySize="S"
					class="sapUiSmallMarginEnd"
					displayShape="Square"
				/>
			</controls:FormElementWrapper>`;
    },
    /**
     * Generates the button template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getButtonTemplate: internalField => {
      var _internalField$format, _internalField$format2, _internalField$format3;
      const convertedDataField = MetaModelConverter.convertMetaModelContext(internalField.dataField);
      const oDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const icon = ((_internalField$format = internalField.formatOptions) === null || _internalField$format === void 0 ? void 0 : _internalField$format.showIconUrl) ?? false ? convertedDataField.IconUrl : undefined;
      const text = !(((_internalField$format2 = internalField.formatOptions) === null || _internalField$format2 === void 0 ? void 0 : _internalField$format2.showIconUrl) ?? false) ? convertedDataField.Label : undefined;
      const tooltip = ((_internalField$format3 = internalField.formatOptions) === null || _internalField$format3 === void 0 ? void 0 : _internalField$format3.showIconUrl) ?? false ? convertedDataField.Label : undefined;
      let button = "";
      if (convertedDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
        button = xml`<Button
				xmlns="sap.m"
				visible="${internalField.visible}"
				text="${text}"
				icon="${icon}"
				enabled="${internalField.navigationAvailable}"
				tooltip="${tooltip}"
				press="${internalField.buttonPress}"
			/>`;
      } else if (FieldHelper.isDataFieldActionButtonVisible(void 0, convertedDataField, internalField.buttonIsBound, internalField.buttonOperationAvailable)) {
        const enabled = FieldHelper.isDataFieldActionButtonEnabled(convertedDataField, internalField.buttonIsBound, internalField.buttonOperationAvailable, internalField.buttonOperationAvailableFormatted);
        const type = buildExpressionForCriticalityButtonType(oDataModelPath);
        button = xml`<Button
				xmlns="sap.m"
			    class="${internalField.class}"
				text="${text}"
				icon="${icon}"
				tooltip="${tooltip}"
				press="${internalField.buttonPress}"
				enabled="${enabled}"
				visible="${internalField.visible}"
				type="${type}"
				/>`;
      }
      return button;
    },
    /**
     * Generates the Contact template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getContactTemplate(internalField) {
      const contextMetaPath = internalField.dataField.getModel().createBindingContext("Target/$AnnotationPath", internalField.dataField);
      return xml`
		<macros:Contact
			idPrefix="${internalField.idPrefix}"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			metaPath="${contextMetaPath}"
			contextPath="${internalField.entitySet}"
			_flexId="${internalField._flexId}"
			visible="${internalField.contactVisible}"
		/>`;
    },
    /**
     * Generates the innerpart of the data point to be used in getDataPointTemplate.
     *
     * @param internalField Reference to the current internal field instance
     * @param withConditionalWrapper Boolean value to determine whether the DataPoint
     * 					  			shall be generated for the conditional wrapper case
     * @returns An XML-based string with the definition of the field control
     */
    getDataPointInnerPart(internalField, withConditionalWrapper) {
      const convertedDataField = MetaModelConverter.convertMetaModelContext(internalField.dataField);
      const metaPath = convertedDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" ? internalField.dataField.getModel().createBindingContext("Target/$AnnotationPath", internalField.dataField) : internalField.dataField;
      const formatOptions = xml`<internalMacro:formatOptions
				xmlns:internalMacro="sap.fe.macros.internal"
				measureDisplayMode="${internalField.formatOptions.measureDisplayMode}"
				showEmptyIndicator="${internalField.formatOptions.showEmptyIndicator}"
				isAnalytics="${internalField.formatOptions.isAnalytics}"
			/>`;
      return xml`<internalMacro:DataPoint
			xmlns:internalMacro="sap.fe.macros.internal"
			idPrefix="${internalField.idPrefix}"
			visible="${!withConditionalWrapper ? internalField.displayVisible : ""}"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			_flexId="${internalField._flexId}"
			metaPath="${metaPath}"
			contextPath="${internalField.entitySet}"
		>
			${formatOptions}
		</internalMacro:DataPoint>`;
    },
    /**
     * Generates the DataPoint template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getDataPointTemplate(internalField) {
      if ((internalField.formatOptions.isAnalytics ?? false) && (internalField.hasUnitOrCurrency ?? false)) {
        return xml`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${internalField.displayVisible}" condition="${internalField.hasValidAnalyticalCurrencyOrUnit}">
				<controls:contentTrue>
					 ${this.getDataPointInnerPart(internalField, true)}
				</controls:contentTrue>
					<controls:contentFalse>
						<Text xmlns="sap.m" text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>`;
      } else {
        return this.getDataPointInnerPart(internalField, false);
      }
    },
    /**
     * Generates the ExpandableText template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getExpandableText(internalField) {
      var _internalField$format4, _internalField$format5;
      return xml`
			<ExpandableText
				xmlns="sap.m"
				id="${internalField === null || internalField === void 0 ? void 0 : internalField.noWrapperId}"
				visible="${internalField === null || internalField === void 0 ? void 0 : internalField.displayVisible}"
				text="${internalField === null || internalField === void 0 ? void 0 : internalField.text}"
				overflowMode="${internalField === null || internalField === void 0 ? void 0 : (_internalField$format4 = internalField.formatOptions) === null || _internalField$format4 === void 0 ? void 0 : _internalField$format4.textExpandBehaviorDisplay}"
				maxCharacters="${internalField === null || internalField === void 0 ? void 0 : (_internalField$format5 = internalField.formatOptions) === null || _internalField$format5 === void 0 ? void 0 : _internalField$format5.textMaxCharactersDisplay}"
				emptyIndicatorMode="${internalField === null || internalField === void 0 ? void 0 : internalField.emptyIndicatorMode}"
		/>`;
    },
    /**
     * Generates the File template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getFileTemplate(internalField) {
      let innerFilePart;
      if (internalField.fileIsImage) {
        innerFilePart = xml`
			<controls:avatar xmlns:controls="sap.fe.macros.controls">
				<Avatar
					xmlns="sap.m"
					visible="${internalField.displayVisible}"
					src="${internalField.fileAvatarSrc}"
					displaySize="S"
					class="sapUiSmallMarginEnd"
					displayShape="Square">
					<customData>
						<ImageCustomData paramName="xcache" />
					</customData>
				</Avatar>
			</controls:avatar>`;
      } else {
        innerFilePart = xml`
			<controls:icon xmlns:controls="sap.fe.macros.controls">
				<core:Icon src="${internalField.fileIconSrc}" class="sapUiSmallMarginEnd" visible="${internalField.fileStreamNotEmpty}" />
			</controls:icon>
			<controls:link>
				<Link
					xmlns="sap.m"
					text="${internalField.fileLinkText}"
					target="_blank"
					href="${internalField.fileLinkHref}"
					visible="${internalField.fileStreamNotEmpty}"
					wrapping="true"
				/>
			</controls:link>
			<controls:text>
				<Text xmlns="sap.m" emptyIndicatorMode="On" text="" visible="${internalField.fileTextVisible}" />
			</controls:text>`;
      }
      if (internalField.editMode !== EditMode.Display) {
        const beforeDialogOpen = internalField.collaborationEnabled ? "FIELDRUNTIME.handleOpenUploader" : undefined;
        const afterDialogOpen = internalField.collaborationEnabled ? "FIELDRUNTIME.handleCloseUploader" : undefined;
        innerFilePart += xml`
			<controls:fileUploader xmlns:controls="sap.fe.macros.controls">
				<u:FileUploader
					xmlns:u="sap.ui.unified"
					name="FEV4FileUpload"
					visible="${internalField.editableExpression}"
					buttonOnly="true"
					iconOnly="true"
					multiple="false"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}"
					icon="sap-icon://upload"
					style="Transparent"
					sendXHR="true"
					useMultipart="false"
					sameFilenameAllowed="true"
					mimeType="${internalField.fileAcceptableMediaTypes}"
					typeMissmatch="FIELDRUNTIME.handleTypeMissmatch"
					maximumFileSize="${internalField.fileMaximumSize}"
					fileSizeExceed="FIELDRUNTIME.handleFileSizeExceed"
					uploadOnChange="false"
					uploadComplete="FIELDRUNTIME.handleUploadComplete($event, ${internalField.fileFilenameExpression || "undefined"}, '${internalField.fileRelativePropertyPath}', $controller)"
					httpRequestMethod="Put"
					change="FIELDRUNTIME.uploadStream($controller, $event)"
					beforeDialogOpen="${beforeDialogOpen}"
					afterDialogClose="${afterDialogOpen}"
					uploadStart="FIELDRUNTIME.handleOpenUploader"
				/>
			</controls:fileUploader>
			<controls:deleteButton>
				<Button
					xmlns="sap.m"
					icon="sap-icon://sys-cancel"
					type="Transparent"
					press="FIELDRUNTIME.removeStream($event, ${internalField.fileFilenameExpression || "undefined"}, '${internalField.fileRelativePropertyPath}', $controller)"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}"
					visible="${internalField.editableExpression}"
					enabled="${internalField.fileStreamNotEmpty}"
				/>
			</controls:deleteButton>`;
      }
      return xml`
			<controls:FileWrapper
				xmlns:controls="sap.fe.macros.controls"
				core:require="{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}"
				visible="${internalField.visible}"
				uploadUrl="${internalField.fileUploadUrl}"
				propertyPath="${internalField.fileRelativePropertyPath}"
				filename="${internalField.fileFilenamePath}"
				mediaType="${internalField.fileMediaType}"
				fieldGroupIds="${internalField.fieldGroupIds}"
				validateFieldGroup="FIELDRUNTIME.onValidateFieldGroup($controller, $event)"
				customData:sourcePath="${internalField.dataSourcePath}"
			>${innerFilePart}</controls:FileWrapper>`;
    },
    /**
     * Generates the Link template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getLinkTemplate(internalField) {
      if (internalField.linkIsDataFieldWithNavigationPath) {
        return xml`<Link
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				press="${internalField.linkPress}"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`;
      } else if (internalField.linkIsDataFieldWithIntentBasedNavigation) {
        return xml`<Link
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				press="${internalField.linkPress}"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`;
      } else if (internalField.linkIsEmailAddress || internalField.linkIsPhoneNumber) {
        return xml`<Link
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				href="${internalField.linkUrl}"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`;
      } else if (internalField.linkIsDataFieldWithAction) {
        return xml`<Link
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				press="${internalField.linkPress}"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`;
      } else if (internalField.iconUrl) {
        return xml`<ObjectStatus
				xmlns="sap.m"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer', FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.noWrapperId}"
				icon="${internalField.iconUrl}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				press="FieldRuntime.openExternalLink"
				active="true"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				customData:url="${internalField.linkUrl}"
			/>`;
      } else {
        return xml`<Link
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				href="${internalField.linkUrl}"
				target="_top"
				wrapping="${internalField.wrap === undefined ? true : internalField.wrap}"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
			/>`;
      }
    },
    /**
     * Generates the LinkWithQuickView template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getLinkWithQuickViewTemplate(internalField) {
      return xml`<Link
			xmlns="sap.m"
			xmlns:core="sap.ui.core"
			id="${internalField.noWrapperId}"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime', WSR: 'sap/base/strings/whitespaceReplacer'}"
			text="${internalField.formatOptions.retrieveTextFromValueList ? internalField.textFromValueList : internalField.text}"
			visible="${internalField.displayVisible}"
			wrapping="${internalField.wrap === undefined ? true : internalField.wrap}"
			press="FieldRuntime.pressLink"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			emptyIndicatorMode="${internalField.emptyIndicatorMode}"
		>
			<dependents>
				<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${internalField.dataField}" semanticObject="${internalField.semanticObject}" contextPath="${internalField.entitySet}" />
			</dependents>
		</Link>`;
    },
    /**
     * Generates the Text template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getTextTemplate(internalField) {
      if (internalField.formatOptions.isAnalytics && internalField.hasUnitOrCurrency) {
        return xml`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${internalField.displayVisible}" condition="${internalField.hasValidAnalyticalCurrencyOrUnit}">
			<controls:contentTrue>
					<Text xmlns="sap.m"
						id="${internalField.noWrapperId}"
						text="${internalField.text}"
						emptyIndicatorMode="${internalField.emptyIndicatorMode}"
						renderWhitespace="true"
						wrapping="${internalField.wrap}"
					/>
				</controls:contentTrue>
				<controls:contentFalse>
					<Text xmlns="sap.m" id="${internalField.noWrapperId}" text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>
		`;
      } else if (internalField.formatOptions.retrieveTextFromValueList) {
        return xml`<Text
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				visible="${internalField.displayVisible}"
				text="${internalField.textFromValueList}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				renderWhitespace="true"
			/>`;
      } else {
        return xml`<Text
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				visible="${internalField.displayVisible}"
				text="${internalField.text}"
				wrapping="${internalField.wrap}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				renderWhitespace="true"
		/>`;
      }
    },
    /**
     * Generates the ObjectIdentifier template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getObjectIdentifier(internalField) {
      const dependents = internalField.hasQuickView ? xml`<dependents>
	<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${internalField.dataField}" semanticObject="${internalField.semanticObject}" contextPath="${internalField.entitySet}" />
</dependents>` : "";
      let identifier = xml`<ObjectIdentifier
	xmlns="sap.m"
	core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
	id="${internalField.noWrapperId}"
	title="${internalField.identifierTitle}"
	text="${internalField.identifierText}"
	titleActive="${internalField.hasQuickView}"
	titlePress="FieldRuntime.pressLink"
	ariaLabelledBy="${internalField.ariaLabelledBy}"
	emptyIndicatorMode="${internalField.emptyIndicatorMode}">
${dependents}</ObjectIdentifier>`;
      if (internalField.hasSituationsIndicator) {
        identifier = xml`<HBox xmlns="sap.m" alignItems="Center" justifyContent="SpaceBetween" width="100%">
							${identifier}
							<SituationsIndicator
								xmlns="sap.fe.macros.internal.situations"
								entitySet="${internalField.entitySet}"
								propertyPath="${internalField.situationsIndicatorPropertyPath}"
							/>
						</HBox>`;
      }
      if (internalField.showErrorIndicator) {
        identifier = xml`<VBox xmlns="sap.m">
				${identifier}
					<ObjectStatus
						xmlns="sap.m"
						visible="${internalField.showErrorObjectStatus}"
						class="sapUiSmallMarginBottom"
						text="{sap.fe.i18n>Contains_Errors}"
						state="Error"
					/>
			</VBox>`;
      }
      return xml`${identifier}`;
    },
    /**
     * Generates the ObjectStatus template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getObjectStatus(internalField) {
      let objectStatus;
      const dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const enhancedValueDataModelPath = enhanceDataModelPath(dataModelObjectPath, dataModelObjectPath.targetObject.Value.path);
      const condition = hasValidAnalyticalCurrencyOrUnit(enhancedValueDataModelPath);
      const convertedDataField = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField);
      const criticalityIcon = buildExpressionForCriticalityIcon(convertedDataField);
      const state = buildExpressionForCriticalityColor(convertedDataField);
      if (internalField.formatOptions.isAnalytics && internalField.hasUnitOrCurrency) {
        objectStatus = xml`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls"
			id="${internalField.noWrapperId}"
			condition="${condition}"
		>
			<controls:contentTrue>
				<ObjectStatus
					xmlns="sap.m"
					icon="${criticalityIcon}"
					state="${state}"
					visible="${internalField.displayVisible}"
					text="${internalField.text}"
					emptyIndicatorMode="${internalField.emptyIndicatorMode}"
					class="sapMTextRenderWhitespaceWrap"
				/>
			</controls:contentTrue>
			<controls:contentFalse>
				<ObjectStatus xmlns="sap.m" text="*" visible="${internalField.displayVisible}" />
			</controls:contentFalse>
		</controls:ConditionalWrapper>`;
      } else {
        let dependents = "";
        let active = false;
        let pressAction;
        if (internalField.hasQuickView) {
          dependents = xml`<dependents>
					<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${internalField.dataField}" semanticObject="${internalField.semanticObject}" contextPath="${internalField.entitySet}" />
				</dependents>`;
          active = true;
          pressAction = "FieldRuntime.pressLink";
        }
        if (internalField.linkUrl) {
          active = true;
          pressAction = "FieldRuntime.openExternalLink";
        }
        objectStatus = xml`<ObjectStatus
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				icon="${criticalityIcon}"
				state="${state}"
				text="${internalField.text}"
				visible="${internalField.displayVisible}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				active="${active}"
				press="${pressAction}"
				customData:url="${internalField.linkUrl}"
			>
			${dependents}
		</ObjectStatus>`;
      }
      return objectStatus;
    },
    /**
     * Generates the LabelSemantickey template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getLabelSemanticKey(internalField) {
      if (internalField.hasQuickView) {
        return xml`<Link
				xmlns="sap.m"
				text="${internalField.text}"
				wrapping="true"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				press="FieldRuntime.pressLink"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
				emptyIndicatorMode="${internalField.emptyIndicatorMode}">
					<dependents>
						<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${internalField.dataField}" semanticObject="${internalField.semanticObject}" contextPath="${internalField.entitySet}" />
					</dependents>
				</Link>`;
      }
      return xml`<Label
				xmlns="sap.m"
				id="${internalField.noWrapperId}"
				visible="${internalField.displayVisible}"
				text="${internalField.identifierTitle}"
				design="Bold"/>`;
    },
    /**
     * Generates the semantic key with draft indicator template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getSemanticKeyWithDraftIndicatorTemplate(internalField) {
      let semanticKeyTemplate = internalField.formatOptions.semanticKeyStyle === "ObjectIdentifier" ? DisplayStyle.getObjectIdentifier(internalField) : DisplayStyle.getLabelSemanticKey(internalField);
      if (!internalField.formatOptions.fieldGroupDraftIndicatorPropertyPath) {
        // if the draftIndicator is not handled at the fieldGroup level
        //TODO could this be a boolean no draftIndicator
        semanticKeyTemplate = xml`<controls:FormElementWrapper
										xmlns:controls="sap.fe.core.controls"
										visible="${internalField.displayVisible}">
										<VBox
										xmlns="sap.m"
										class="${FieldHelper.getMarginClass(internalField.formatOptions.compactSemanticKey)}">
											${semanticKeyTemplate}
											<macro:DraftIndicator
												xmlns:macro="sap.fe.macros"
												draftIndicatorType="IconAndText"
												entitySet="${internalField.entitySet}"
												isDraftIndicatorVisible="${internalField.draftIndicatorVisible}"
												ariaLabelledBy="${internalField.ariaLabelledBy}"/>
										</VBox>
									</controls:FormElementWrapper>`;
      }
      return semanticKeyTemplate;
    },
    /**
     * Entry point for further templating processings.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getTemplate: internalField => {
      let innerFieldContent;
      switch (internalField.displayStyle) {
        case "AmountWithCurrency":
          innerFieldContent = DisplayStyle.getAmountWithCurrencyTemplate(internalField);
          break;
        case "Avatar":
          innerFieldContent = DisplayStyle.getAvatarTemplate(internalField);
          break;
        case "Button":
          innerFieldContent = DisplayStyle.getButtonTemplate(internalField);
          break;
        case "Contact":
          innerFieldContent = DisplayStyle.getContactTemplate(internalField);
          break;
        case "DataPoint":
          innerFieldContent = DisplayStyle.getDataPointTemplate(internalField);
          break;
        case "ExpandableText":
          innerFieldContent = DisplayStyle.getExpandableText(internalField);
          break;
        case "File":
          innerFieldContent = DisplayStyle.getFileTemplate(internalField);
          break;
        case "Link":
          innerFieldContent = DisplayStyle.getLinkTemplate(internalField);
          break;
        case "LinkWithQuickView":
          innerFieldContent = DisplayStyle.getLinkWithQuickViewTemplate(internalField);
          break;
        case "ObjectIdentifier":
          innerFieldContent = DisplayStyle.getObjectIdentifier(internalField);
          break;
        case "ObjectStatus":
          {
            innerFieldContent = DisplayStyle.getObjectStatus(internalField);
            break;
          }
        case "LabelSemanticKey":
          innerFieldContent = DisplayStyle.getLabelSemanticKey(internalField);
          break;
        case "SemanticKeyWithDraftIndicator":
          innerFieldContent = DisplayStyle.getSemanticKeyWithDraftIndicatorTemplate(internalField);
          break;
        case "Text":
          innerFieldContent = DisplayStyle.getTextTemplate(internalField);
          break;
      }
      return innerFieldContent;
    }
  };
  return DisplayStyle;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/DisplayStyle", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/CriticalityFormatters","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/field/FieldHelper","sap/ui/mdc/enum/EditMode"],function(e,t,a,i,n,r,l,s){"use strict";var o=r.hasValidAnalyticalCurrencyOrUnit;var d=n.enhanceDataModelPath;var c=i.buildExpressionForCriticalityIcon;var p=i.buildExpressionForCriticalityColor;var m=i.buildExpressionForCriticalityButtonType;var u=a.generate;var $=e.xml;const f={getAmountWithCurrencyTemplate(e){if(e.formatOptions.isAnalytics){return $`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${e.displayVisible}" condition="${e.hasValidAnalyticalCurrencyOrUnit}">
			<controls:contentTrue>
				<u:Currency
					xmlns:u="sap.ui.unified"
					stringValue="${e.valueAsStringBindingExpression}"
					currency="${e.unitBindingExpression}"
					useSymbol="false"
					maxPrecision="5"
				/>
			</controls:contentTrue>
			<controls:contentFalse>
				<u:Currency xmlns:u="sap.ui.unified" stringValue="" currency="*" useSymbol="false" />
			</controls:contentFalse>
		</controls:ConditionalWrapper>`}else{return $`<coreControls:FormElementWrapper xmlns:coreControls="sap.fe.core.controls"
			formDoNotAdjustWidth="true"
			width="${e.formatOptions.textAlignMode==="Table"?"100%":undefined}"
		>
			<u:Currency
				xmlns:u="sap.ui.unified"
				visible="${e.displayVisible}"
				stringValue="${e.valueAsStringBindingExpression}"
				currency="${e.unitBindingExpression}"
				useSymbol="false"
				maxPrecision="5"
			/>
		</coreControls:FormElementWrapper>`}},getAvatarTemplate(e){let t;if(e._flexId){t=e._flexId}else if(e.idPrefix){t=u([e.idPrefix,"Field-content"])}return $`
				<controls:FormElementWrapper
					xmlns:controls="sap.fe.core.controls"
					visible="${e.avatarVisible}"
				>
				<Avatar
					xmlns="sap.m"
					id="${t}"
					src="${e.avatarSrc}"
					displaySize="S"
					class="sapUiSmallMarginEnd"
					displayShape="Square"
				/>
			</controls:FormElementWrapper>`},getButtonTemplate:e=>{var a,i,n;const r=t.convertMetaModelContext(e.dataField);const s=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const o=((a=e.formatOptions)===null||a===void 0?void 0:a.showIconUrl)??false?r.IconUrl:undefined;const d=!(((i=e.formatOptions)===null||i===void 0?void 0:i.showIconUrl)??false)?r.Label:undefined;const c=((n=e.formatOptions)===null||n===void 0?void 0:n.showIconUrl)??false?r.Label:undefined;let p="";if(r.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){p=$`<Button
				xmlns="sap.m"
				visible="${e.visible}"
				text="${d}"
				icon="${o}"
				enabled="${e.navigationAvailable}"
				tooltip="${c}"
				press="${e.buttonPress}"
			/>`}else if(l.isDataFieldActionButtonVisible(void 0,r,e.buttonIsBound,e.buttonOperationAvailable)){const t=l.isDataFieldActionButtonEnabled(r,e.buttonIsBound,e.buttonOperationAvailable,e.buttonOperationAvailableFormatted);const a=m(s);p=$`<Button
				xmlns="sap.m"
			    class="${e.class}"
				text="${d}"
				icon="${o}"
				tooltip="${c}"
				press="${e.buttonPress}"
				enabled="${t}"
				visible="${e.visible}"
				type="${a}"
				/>`}return p},getContactTemplate(e){const t=e.dataField.getModel().createBindingContext("Target/$AnnotationPath",e.dataField);return $`
		<macros:Contact
			idPrefix="${e.idPrefix}"
			ariaLabelledBy="${e.ariaLabelledBy}"
			metaPath="${t}"
			contextPath="${e.entitySet}"
			_flexId="${e._flexId}"
			visible="${e.contactVisible}"
		/>`},getDataPointInnerPart(e,a){const i=t.convertMetaModelContext(e.dataField);const n=i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"?e.dataField.getModel().createBindingContext("Target/$AnnotationPath",e.dataField):e.dataField;const r=$`<internalMacro:formatOptions
				xmlns:internalMacro="sap.fe.macros.internal"
				measureDisplayMode="${e.formatOptions.measureDisplayMode}"
				showEmptyIndicator="${e.formatOptions.showEmptyIndicator}"
				isAnalytics="${e.formatOptions.isAnalytics}"
			/>`;return $`<internalMacro:DataPoint
			xmlns:internalMacro="sap.fe.macros.internal"
			idPrefix="${e.idPrefix}"
			visible="${!a?e.displayVisible:""}"
			ariaLabelledBy="${e.ariaLabelledBy}"
			_flexId="${e._flexId}"
			metaPath="${n}"
			contextPath="${e.entitySet}"
		>
			${r}
		</internalMacro:DataPoint>`},getDataPointTemplate(e){if((e.formatOptions.isAnalytics??false)&&(e.hasUnitOrCurrency??false)){return $`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${e.displayVisible}" condition="${e.hasValidAnalyticalCurrencyOrUnit}">
				<controls:contentTrue>
					 ${this.getDataPointInnerPart(e,true)}
				</controls:contentTrue>
					<controls:contentFalse>
						<Text xmlns="sap.m" text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>`}else{return this.getDataPointInnerPart(e,false)}},getExpandableText(e){var t,a;return $`
			<ExpandableText
				xmlns="sap.m"
				id="${e===null||e===void 0?void 0:e.noWrapperId}"
				visible="${e===null||e===void 0?void 0:e.displayVisible}"
				text="${e===null||e===void 0?void 0:e.text}"
				overflowMode="${e===null||e===void 0?void 0:(t=e.formatOptions)===null||t===void 0?void 0:t.textExpandBehaviorDisplay}"
				maxCharacters="${e===null||e===void 0?void 0:(a=e.formatOptions)===null||a===void 0?void 0:a.textMaxCharactersDisplay}"
				emptyIndicatorMode="${e===null||e===void 0?void 0:e.emptyIndicatorMode}"
		/>`},getFileTemplate(e){let t;if(e.fileIsImage){t=$`
			<controls:avatar xmlns:controls="sap.fe.macros.controls">
				<Avatar
					xmlns="sap.m"
					visible="${e.displayVisible}"
					src="${e.fileAvatarSrc}"
					displaySize="S"
					class="sapUiSmallMarginEnd"
					displayShape="Square">
					<customData>
						<ImageCustomData paramName="xcache" />
					</customData>
				</Avatar>
			</controls:avatar>`}else{t=$`
			<controls:icon xmlns:controls="sap.fe.macros.controls">
				<core:Icon src="${e.fileIconSrc}" class="sapUiSmallMarginEnd" visible="${e.fileStreamNotEmpty}" />
			</controls:icon>
			<controls:link>
				<Link
					xmlns="sap.m"
					text="${e.fileLinkText}"
					target="_blank"
					href="${e.fileLinkHref}"
					visible="${e.fileStreamNotEmpty}"
					wrapping="true"
				/>
			</controls:link>
			<controls:text>
				<Text xmlns="sap.m" emptyIndicatorMode="On" text="" visible="${e.fileTextVisible}" />
			</controls:text>`}if(e.editMode!==s.Display){const a=e.collaborationEnabled?"FIELDRUNTIME.handleOpenUploader":undefined;const i=e.collaborationEnabled?"FIELDRUNTIME.handleCloseUploader":undefined;t+=$`
			<controls:fileUploader xmlns:controls="sap.fe.macros.controls">
				<u:FileUploader
					xmlns:u="sap.ui.unified"
					name="FEV4FileUpload"
					visible="${e.editableExpression}"
					buttonOnly="true"
					iconOnly="true"
					multiple="false"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_UPLOAD_BUTTON_TOOLTIP}"
					icon="sap-icon://upload"
					style="Transparent"
					sendXHR="true"
					useMultipart="false"
					sameFilenameAllowed="true"
					mimeType="${e.fileAcceptableMediaTypes}"
					typeMissmatch="FIELDRUNTIME.handleTypeMissmatch"
					maximumFileSize="${e.fileMaximumSize}"
					fileSizeExceed="FIELDRUNTIME.handleFileSizeExceed"
					uploadOnChange="false"
					uploadComplete="FIELDRUNTIME.handleUploadComplete($event, ${e.fileFilenameExpression||"undefined"}, '${e.fileRelativePropertyPath}', $controller)"
					httpRequestMethod="Put"
					change="FIELDRUNTIME.uploadStream($controller, $event)"
					beforeDialogOpen="${a}"
					afterDialogClose="${i}"
					uploadStart="FIELDRUNTIME.handleOpenUploader"
				/>
			</controls:fileUploader>
			<controls:deleteButton>
				<Button
					xmlns="sap.m"
					icon="sap-icon://sys-cancel"
					type="Transparent"
					press="FIELDRUNTIME.removeStream($event, ${e.fileFilenameExpression||"undefined"}, '${e.fileRelativePropertyPath}', $controller)"
					tooltip="{sap.fe.i18n>M_FIELD_FILEUPLOADER_DELETE_BUTTON_TOOLTIP}"
					visible="${e.editableExpression}"
					enabled="${e.fileStreamNotEmpty}"
				/>
			</controls:deleteButton>`}return $`
			<controls:FileWrapper
				xmlns:controls="sap.fe.macros.controls"
				core:require="{FIELDRUNTIME: 'sap/fe/macros/field/FieldRuntime'}"
				visible="${e.visible}"
				uploadUrl="${e.fileUploadUrl}"
				propertyPath="${e.fileRelativePropertyPath}"
				filename="${e.fileFilenamePath}"
				mediaType="${e.fileMediaType}"
				fieldGroupIds="${e.fieldGroupIds}"
				validateFieldGroup="FIELDRUNTIME.onValidateFieldGroup($controller, $event)"
				customData:sourcePath="${e.dataSourcePath}"
			>${t}</controls:FileWrapper>`},getLinkTemplate(e){if(e.linkIsDataFieldWithNavigationPath){return $`<Link
				xmlns="sap.m"
				id="${e.noWrapperId}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				visible="${e.displayVisible}"
				text="${e.text}"
				press="${e.linkPress}"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`}else if(e.linkIsDataFieldWithIntentBasedNavigation){return $`<Link
				xmlns="sap.m"
				id="${e.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${e.displayVisible}"
				text="${e.text}"
				press="${e.linkPress}"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`}else if(e.linkIsEmailAddress||e.linkIsPhoneNumber){return $`<Link
				xmlns="sap.m"
				id="${e.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${e.displayVisible}"
				text="${e.text}"
				href="${e.linkUrl}"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`}else if(e.linkIsDataFieldWithAction){return $`<Link
				xmlns="sap.m"
				id="${e.noWrapperId}"
				visible="${e.displayVisible}"
				text="${e.text}"
				press="${e.linkPress}"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				class="sapMTextRenderWhitespaceWrap"
			/>`}else if(e.iconUrl){return $`<ObjectStatus
				xmlns="sap.m"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer', FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.noWrapperId}"
				icon="${e.iconUrl}"
				visible="${e.displayVisible}"
				text="${e.text}"
				press="FieldRuntime.openExternalLink"
				active="true"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				customData:url="${e.linkUrl}"
			/>`}else{return $`<Link
				xmlns="sap.m"
				id="${e.noWrapperId}"
				core:require="{WSR: 'sap/base/strings/whitespaceReplacer'}"
				visible="${e.displayVisible}"
				text="${e.text}"
				href="${e.linkUrl}"
				target="_top"
				wrapping="${e.wrap===undefined?true:e.wrap}"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
			/>`}},getLinkWithQuickViewTemplate(e){return $`<Link
			xmlns="sap.m"
			xmlns:core="sap.ui.core"
			id="${e.noWrapperId}"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime', WSR: 'sap/base/strings/whitespaceReplacer'}"
			text="${e.formatOptions.retrieveTextFromValueList?e.textFromValueList:e.text}"
			visible="${e.displayVisible}"
			wrapping="${e.wrap===undefined?true:e.wrap}"
			press="FieldRuntime.pressLink"
			ariaLabelledBy="${e.ariaLabelledBy}"
			emptyIndicatorMode="${e.emptyIndicatorMode}"
		>
			<dependents>
				<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${e.dataField}" semanticObject="${e.semanticObject}" contextPath="${e.entitySet}" />
			</dependents>
		</Link>`},getTextTemplate(e){if(e.formatOptions.isAnalytics&&e.hasUnitOrCurrency){return $`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls" visible="${e.displayVisible}" condition="${e.hasValidAnalyticalCurrencyOrUnit}">
			<controls:contentTrue>
					<Text xmlns="sap.m"
						id="${e.noWrapperId}"
						text="${e.text}"
						emptyIndicatorMode="${e.emptyIndicatorMode}"
						renderWhitespace="true"
						wrapping="${e.wrap}"
					/>
				</controls:contentTrue>
				<controls:contentFalse>
					<Text xmlns="sap.m" id="${e.noWrapperId}" text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>
		`}else if(e.formatOptions.retrieveTextFromValueList){return $`<Text
				xmlns="sap.m"
				id="${e.noWrapperId}"
				visible="${e.displayVisible}"
				text="${e.textFromValueList}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				renderWhitespace="true"
			/>`}else{return $`<Text
				xmlns="sap.m"
				id="${e.noWrapperId}"
				visible="${e.displayVisible}"
				text="${e.text}"
				wrapping="${e.wrap}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				renderWhitespace="true"
		/>`}},getObjectIdentifier(e){const t=e.hasQuickView?$`<dependents>
	<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${e.dataField}" semanticObject="${e.semanticObject}" contextPath="${e.entitySet}" />
</dependents>`:"";let a=$`<ObjectIdentifier
	xmlns="sap.m"
	core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
	id="${e.noWrapperId}"
	title="${e.identifierTitle}"
	text="${e.identifierText}"
	titleActive="${e.hasQuickView}"
	titlePress="FieldRuntime.pressLink"
	ariaLabelledBy="${e.ariaLabelledBy}"
	emptyIndicatorMode="${e.emptyIndicatorMode}">
${t}</ObjectIdentifier>`;if(e.hasSituationsIndicator){a=$`<HBox xmlns="sap.m" alignItems="Center" justifyContent="SpaceBetween" width="100%">
							${a}
							<SituationsIndicator
								xmlns="sap.fe.macros.internal.situations"
								entitySet="${e.entitySet}"
								propertyPath="${e.situationsIndicatorPropertyPath}"
							/>
						</HBox>`}if(e.showErrorIndicator){a=$`<VBox xmlns="sap.m">
				${a}
					<ObjectStatus
						xmlns="sap.m"
						visible="${e.showErrorObjectStatus}"
						class="sapUiSmallMarginBottom"
						text="{sap.fe.i18n>Contains_Errors}"
						state="Error"
					/>
			</VBox>`}return $`${a}`},getObjectStatus(e){let a;const i=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const n=d(i,i.targetObject.Value.path);const r=o(n);const l=t.getInvolvedDataModelObjects(e.dataField);const s=c(l);const m=p(l);if(e.formatOptions.isAnalytics&&e.hasUnitOrCurrency){a=$`<controls:ConditionalWrapper xmlns:controls="sap.fe.macros.controls"
			id="${e.noWrapperId}"
			condition="${r}"
		>
			<controls:contentTrue>
				<ObjectStatus
					xmlns="sap.m"
					icon="${s}"
					state="${m}"
					visible="${e.displayVisible}"
					text="${e.text}"
					emptyIndicatorMode="${e.emptyIndicatorMode}"
					class="sapMTextRenderWhitespaceWrap"
				/>
			</controls:contentTrue>
			<controls:contentFalse>
				<ObjectStatus xmlns="sap.m" text="*" visible="${e.displayVisible}" />
			</controls:contentFalse>
		</controls:ConditionalWrapper>`}else{let t="";let i=false;let n;if(e.hasQuickView){t=$`<dependents>
					<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${e.dataField}" semanticObject="${e.semanticObject}" contextPath="${e.entitySet}" />
				</dependents>`;i=true;n="FieldRuntime.pressLink"}if(e.linkUrl){i=true;n="FieldRuntime.openExternalLink"}a=$`<ObjectStatus
				xmlns="sap.m"
				id="${e.noWrapperId}"
				icon="${s}"
				state="${m}"
				text="${e.text}"
				visible="${e.displayVisible}"
				emptyIndicatorMode="${e.emptyIndicatorMode}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				active="${i}"
				press="${n}"
				customData:url="${e.linkUrl}"
			>
			${t}
		</ObjectStatus>`}return a},getLabelSemanticKey(e){if(e.hasQuickView){return $`<Link
				xmlns="sap.m"
				text="${e.text}"
				wrapping="true"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				press="FieldRuntime.pressLink"
				ariaLabelledBy="${e.ariaLabelledBy}"
				emptyIndicatorMode="${e.emptyIndicatorMode}">
					<dependents>
						<macro:QuickView xmlns:macro="sap.fe.macros" dataField="${e.dataField}" semanticObject="${e.semanticObject}" contextPath="${e.entitySet}" />
					</dependents>
				</Link>`}return $`<Label
				xmlns="sap.m"
				id="${e.noWrapperId}"
				visible="${e.displayVisible}"
				text="${e.identifierTitle}"
				design="Bold"/>`},getSemanticKeyWithDraftIndicatorTemplate(e){let t=e.formatOptions.semanticKeyStyle==="ObjectIdentifier"?f.getObjectIdentifier(e):f.getLabelSemanticKey(e);if(!e.formatOptions.fieldGroupDraftIndicatorPropertyPath){t=$`<controls:FormElementWrapper
										xmlns:controls="sap.fe.core.controls"
										visible="${e.displayVisible}">
										<VBox
										xmlns="sap.m"
										class="${l.getMarginClass(e.formatOptions.compactSemanticKey)}">
											${t}
											<macro:DraftIndicator
												xmlns:macro="sap.fe.macros"
												draftIndicatorType="IconAndText"
												entitySet="${e.entitySet}"
												isDraftIndicatorVisible="${e.draftIndicatorVisible}"
												ariaLabelledBy="${e.ariaLabelledBy}"/>
										</VBox>
									</controls:FormElementWrapper>`}return t},getTemplate:e=>{let t;switch(e.displayStyle){case"AmountWithCurrency":t=f.getAmountWithCurrencyTemplate(e);break;case"Avatar":t=f.getAvatarTemplate(e);break;case"Button":t=f.getButtonTemplate(e);break;case"Contact":t=f.getContactTemplate(e);break;case"DataPoint":t=f.getDataPointTemplate(e);break;case"ExpandableText":t=f.getExpandableText(e);break;case"File":t=f.getFileTemplate(e);break;case"Link":t=f.getLinkTemplate(e);break;case"LinkWithQuickView":t=f.getLinkWithQuickViewTemplate(e);break;case"ObjectIdentifier":t=f.getObjectIdentifier(e);break;case"ObjectStatus":{t=f.getObjectStatus(e);break}case"LabelSemanticKey":t=f.getLabelSemanticKey(e);break;case"SemanticKeyWithDraftIndicator":t=f.getSemanticKeyWithDraftIndicatorTemplate(e);break;case"Text":t=f.getTextTemplate(e);break}return t}};return f},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/EditStyle-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/internal/valuehelp/ValueHelpTemplating", "../../field/FieldHelper"], function (BuildingBlockTemplateProcessor, MetaModelConverter, StableIdHelper, PropertyFormatters, UIFormatter, FieldTemplating, ValueHelpTemplating, FieldHelper) {
  "use strict";

  var getTextAlignment = FieldTemplating.getTextAlignment;
  var getMultipleLinesForDataField = FieldTemplating.getMultipleLinesForDataField;
  var getRelativePropertyPath = PropertyFormatters.getRelativePropertyPath;
  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  const EditStyle = {
    /**
     * An internal helper to retrieve the reused layout data.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getLayoutData(internalField) {
      let layoutData = "";
      if (internalField.collaborationEnabled) {
        layoutData = xml`<layoutData>
				<FlexItemData growFactor="9" />
			</layoutData>`;
      }
      return layoutData;
    },
    /**
     * Generates a template for one of the pickers reference in the type.
     *
     * @param internalField Reference to the current internal field instance
     * @param type Reference to one of the edit style picker types
     * @returns An XML-based string with the definition of the field control
     */
    getDateTimePickerGeneric(internalField, type) {
      const dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const textAlign = getTextAlignment(dataModelObjectPath, internalField.formatOptions, internalField.editModeAsObject);
      return xml`<${type}
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			xmlns="sap.m"
			xmlns:core="sap.ui.core"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			log:sourcePath="${internalField.dataSourcePath}"
			id="${internalField.editStyleId}"
			width="100%"
			editable="${internalField.editableExpression}"
			enabled="${internalField.enabledExpression}"
			required="${internalField.requiredExpression}"
			change="${type === "DateTimePicker" ? internalField.onChange || "FieldRuntime.handleChange($controller, $event)" : "FieldRuntime.handleChange($controller, $event)"}"
			textAlign="${textAlign}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			value="${internalField.valueBindingExpression}"
			fieldGroupIds="${internalField.fieldGroupIds}"
			showTimezone="${internalField.showTimezone}"
			afterValueHelpOpen="${internalField.collaborationEnabled ? "FieldRuntime.handleOpenPicker" : undefined}"
			afterValueHelpClose="${internalField.collaborationEnabled ? "FieldRuntime.handleClosePicker" : undefined}"
			liveChange="${internalField.collaborationEnabled ? "FieldRuntime.handleLiveChange" : undefined}"
	>

	</${type}>
	`;
    },
    /**
     * Generates the Input template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getInputTemplate(internalField) {
      const dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const textAlign = getTextAlignment(dataModelObjectPath, internalField.formatOptions, internalField.editModeAsObject);
      return xml`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${internalField.dataSourcePath}"
		        core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.editStyleId}"
				value="${internalField.valueBindingExpression}"
				placeholder="${internalField.editStylePlaceholder}"
				width="100%"
				editable="${internalField.editableExpression}"
				enabled="${internalField.enabledExpression}"
				required="${internalField.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${internalField.collaborationEnabled ? "FieldRuntime.handleLiveChange" : undefined}"
				fieldGroupIds="${internalField.fieldGroupIds}"
				textAlign="${textAlign}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
				ariaLabelledBy="${internalField.ariaLabelledBy}"
			>
				${EditStyle.getLayoutData(internalField)}
			</Input>`;
    },
    /**
     * Generates the InputWithUnit template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getInputWithUnitTemplate(internalField) {
      const dataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const textAlign = getTextAlignment(dataModelObjectPath, internalField.formatOptions, internalField.editModeAsObject);
      if (internalField.staticUnit === undefined) {
        return xml`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${internalField.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.editStyleId}"
				value="${internalField.valueBindingExpression}"
				width="${internalField.valueInputWidth}"
				fieldWidth="${internalField.valueInputFieldWidth}"
				description="${internalField.descriptionBindingExpression}"
				editable="${internalField.editableExpression}"
				enabled="${internalField.enabledExpression}"
				required="${internalField.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${internalField.collaborationEnabled ? "FieldRuntime.handleLiveChange" : undefined}"
				textAlign="${textAlign}"
				fieldGroupIds="${internalField.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			>
				${EditStyle.getLayoutData(internalField)}
			</Input>
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${internalField.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.idPrefix ? generate([internalField.idPrefix, "Field-unitEdit"]) : undefined}"
				value="${internalField.unitBindingExpression}"
				width="30%"
				editable="${internalField.unitEditable}"
				enabled="${internalField.enabledExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${internalField.collaborationEnabled ? "FieldRuntime.handleLiveChange" : undefined}"
				textAlign="Begin"
				fieldGroupIds="${internalField.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
				visible="${internalField.unitInputVisible}"
			>
				${EditStyle.getLayoutData(internalField)}
			</Input>
			`;
      } else {
        return xml`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${internalField.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.editStyleId}"
				value="${internalField.valueBindingExpression}"
				placeholder="${internalField.editStylePlaceholder}"
				width="100%"
				fieldWidth="70%"
				description="${internalField.staticUnit}"
				editable="${internalField.editableExpression}"
				enabled="${internalField.enabledExpression}"
				required="${internalField.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${internalField.collaborationEnabled ? "FieldRuntime.handleLiveChange" : undefined}"
				textAlign="${textAlign}"
				fieldGroupIds="${internalField.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			>
				${EditStyle.getLayoutData(internalField)}
			</Input>`;
      }
    },
    /**
     * Generates the InputWithValueHelp template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getInputWithValueHelpTemplate(internalField) {
      var _property$annotations, _property$annotations2;
      const dataFieldDataModelObjectPath = MetaModelConverter.getInvolvedDataModelObjects(internalField.dataField, internalField.entitySet);
      const property = dataFieldDataModelObjectPath.targetObject.Value.$target;
      const delegate = FieldHelper.computeFieldBaseDelegate("sap/fe/macros/field/FieldBaseDelegate", internalField.formatOptions.retrieveTextFromValueList);
      const display = UIFormatter.getFieldDisplay(property, internalField.formatOptions.displayMode, internalField.editModeAsObject);
      const multipleLines = getMultipleLinesForDataField(internalField, property.type, (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : _property$annotations.UI.MultiLineText);
      const propertyContext = internalField.dataField.getModel().createBindingContext("Value", internalField.dataField);
      const valueHelpPropertyContext = internalField.dataField.getModel().createBindingContext(FieldHelper.valueHelpProperty(propertyContext));
      const fieldHelp = ValueHelpTemplating.generateID(internalField._vhFlexId, internalField.vhIdPrefix, getRelativePropertyPath(propertyContext, {
        context: propertyContext
      }), getRelativePropertyPath(valueHelpPropertyContext, {
        context: valueHelpPropertyContext
      }));
      const textAlign = getTextAlignment(dataFieldDataModelObjectPath, internalField.formatOptions, internalField.editModeAsObject);
      const label = FieldHelper.computeLabelText(internalField, {
        context: internalField.dataField
      });
      let optionalContentEdit = "";
      if (property.type === "Edm.String" && (_property$annotations2 = property.annotations) !== null && _property$annotations2 !== void 0 && _property$annotations2.UI.MultiLineText) {
        optionalContentEdit = xml`<mdc:contentEdit xmlns:mdc="sap.ui.mdc">
				<TextArea
					xmlns="sap.m"
					value="${internalField.valueBindingExpression}"
					required="${internalField.requiredExpression}"
					rows="${internalField.formatOptions.textLinesEdit}"
					growing="${internalField.formatOptions.textMaxLines > 0 ? true : undefined}"
					growingMaxLines="${internalField.formatOptions.textMaxLines}"
					width="100%"
					change="FieldRuntime.handleChange($controller, $event)"
					fieldGroupIds="${internalField.fieldGroupIds}"
				/>
			</mdc:contentEdit>`;
      }
      let optionalLayoutData = "";
      if (internalField.collaborationEnabled === true) {
        optionalLayoutData = xml`<mdc:layoutData xmlns:mdc="sap.ui.mdc">
				<FlexItemData xmlns="sap.m" growFactor="9" />
			</mdc:layoutData>`;
      }
      return xml`<mdc:Field
			xmlns:mdc="sap.ui.mdc"
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			delegate="${delegate}"
			id="${internalField.editStyleId}"
			log:sourcePath="${internalField.dataSourcePath}"
			value="${internalField.valueBindingExpression}"
			placeholder="${internalField.editStylePlaceholder}"
			valueState="${internalField.valueState}"
			editMode="${internalField.editMode}"
			width="100%"
			required="${internalField.requiredExpression}"
			additionalValue="${internalField.textBindingExpression}"
			display="${display}"
			multipleLines="${multipleLines}"
			fieldHelp="${fieldHelp}"
			fieldGroupIds="${internalField.fieldGroupIds}"
			change="FieldRuntime.handleChange($controller, $event)"
			liveChange="${internalField.collaborationEnabled === true ? "FieldRuntime.handleLiveChange" : undefined}"
			textAlign="${textAlign}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			label="${label}"
		>
			${optionalContentEdit}
			${optionalLayoutData}
		</mdc:Field>`;
    },
    /**
     * Generates the CheckBox template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getCheckBoxTemplate(internalField) {
      return xml`
		    <CheckBox
                xmlns="sap.m"
                xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		        macrodata:sourcePath="${internalField.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${internalField.editStyleId}"
		        selected="${internalField.valueBindingExpression}"
		        editable="${internalField.editableExpression}"
		        enabled="${internalField.enabledExpression}"
		        select="FieldRuntime.handleChange($controller, $event)"
		        fieldGroupIds="${internalField.fieldGroupIds}"
		        validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
		        ariaLabelledBy="${internalField.ariaLabelledBy}"
	    />
        `;
    },
    /**
     * Generates the TextArea template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getTextAreaTemplate(internalField) {
      const liveChange = internalField.collaborationEnabled || internalField.formatOptions.textMaxLength ? "FieldRuntime.handleLiveChange" : undefined;
      const growing = internalField.formatOptions.textMaxLines ? true : false;

      //unfortunately this one is a "different" layoutData than the others, therefore the reuse function from above cannot be used for the textArea template
      let layoutData = "";
      if (internalField.collaborationEnabled) {
        layoutData = xml`<field:layoutData>
			<FlexItemData xmlns="sap.m" growFactor="9" />
		</field:layoutData>`;
      }
      return xml`<field:TextAreaEx
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			xmlns:field="sap.fe.macros.field"
			xmlns:core="sap.ui.core"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			log:sourcePath="${internalField.dataSourcePath}"
			id="${internalField.editStyleId}"
			value="${internalField.valueBindingExpression}"
			placeholder="${internalField.editStylePlaceholder}"
			required="${internalField.requiredExpression}"
			rows="${internalField.formatOptions.textLinesEdit}"
			growing="${growing}"
			growingMaxLines="${internalField.formatOptions.textMaxLines}"
			width="100%"
			editable="${internalField.editableExpression}"
			enabled="${internalField.enabledExpression}"
			change="FieldRuntime.handleChange($controller, $event)"
			fieldGroupIds="${internalField.fieldGroupIds}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${internalField.ariaLabelledBy}"
			liveChange="${liveChange}"
			maxLength="${internalField.formatOptions.textMaxLength}"
			showExceededText="true"
		>
			${layoutData}
		</field:TextAreaEx>
		`;
    },
    /**
     * Generates the RatingIndicator template.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getRatingIndicatorTemplate: internalField => {
      const tooltip = internalField.ratingIndicatorTooltip || "{sap.fe.i18n>T_COMMON_RATING_INDICATOR_TITLE_LABEL}";
      return xml`<RatingIndicator
			xmlns="sap.m"
			id="${internalField.editStyleId}"
			maxValue="${internalField.ratingIndicatorTargetValue}"
			value="${internalField.valueBindingExpression}"
			tooltip="${tooltip}"
			iconSize="1.375rem"
			class="sapUiTinyMarginTopBottom"
			editable="true"
		>
		${EditStyle.getLayoutData(internalField)}
		</RatingIndicator>
		`;
    },
    /**
     * Entry point for further templating processings.
     *
     * @param internalField Reference to the current internal field instance
     * @returns An XML-based string with the definition of the field control
     */
    getTemplate: internalField => {
      let innerFieldContent;
      switch (internalField.editStyle) {
        case "CheckBox":
          innerFieldContent = EditStyle.getCheckBoxTemplate(internalField);
          break;
        case "DatePicker":
        case "DateTimePicker":
        case "TimePicker":
          {
            innerFieldContent = EditStyle.getDateTimePickerGeneric(internalField, internalField.editStyle);
            break;
          }
        case "Input":
          {
            innerFieldContent = EditStyle.getInputTemplate(internalField);
            break;
          }
        case "InputWithUnit":
          {
            innerFieldContent = EditStyle.getInputWithUnitTemplate(internalField);
            break;
          }
        case "InputWithValueHelp":
          {
            innerFieldContent = EditStyle.getInputWithValueHelpTemplate(internalField);
            break;
          }
        case "RatingIndicator":
          innerFieldContent = EditStyle.getRatingIndicatorTemplate(internalField);
          break;
        case "TextArea":
          innerFieldContent = EditStyle.getTextAreaTemplate(internalField);
          break;
        default:
      }
      return innerFieldContent;
    }
  };
  return EditStyle;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/EditStyle", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/PropertyFormatters","sap/fe/core/templating/UIFormatters","sap/fe/macros/field/FieldTemplating","sap/fe/macros/internal/valuehelp/ValueHelpTemplating","../../field/FieldHelper"],function(e,t,a,i,l,n,d,o){"use strict";var r=n.getTextAlignment;var s=n.getMultipleLinesForDataField;var u=i.getRelativePropertyPath;var p=a.generate;var c=e.xml;const m={getLayoutData(e){let t="";if(e.collaborationEnabled){t=c`<layoutData>
				<FlexItemData growFactor="9" />
			</layoutData>`}return t},getDateTimePickerGeneric(e,a){const i=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const l=r(i,e.formatOptions,e.editModeAsObject);return c`<${a}
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			xmlns="sap.m"
			xmlns:core="sap.ui.core"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			log:sourcePath="${e.dataSourcePath}"
			id="${e.editStyleId}"
			width="100%"
			editable="${e.editableExpression}"
			enabled="${e.enabledExpression}"
			required="${e.requiredExpression}"
			change="${a==="DateTimePicker"?e.onChange||"FieldRuntime.handleChange($controller, $event)":"FieldRuntime.handleChange($controller, $event)"}"
			textAlign="${l}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${e.ariaLabelledBy}"
			value="${e.valueBindingExpression}"
			fieldGroupIds="${e.fieldGroupIds}"
			showTimezone="${e.showTimezone}"
			afterValueHelpOpen="${e.collaborationEnabled?"FieldRuntime.handleOpenPicker":undefined}"
			afterValueHelpClose="${e.collaborationEnabled?"FieldRuntime.handleClosePicker":undefined}"
			liveChange="${e.collaborationEnabled?"FieldRuntime.handleLiveChange":undefined}"
	>

	</${a}>
	`},getInputTemplate(e){const a=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const i=r(a,e.formatOptions,e.editModeAsObject);return c`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${e.dataSourcePath}"
		        core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.editStyleId}"
				value="${e.valueBindingExpression}"
				placeholder="${e.editStylePlaceholder}"
				width="100%"
				editable="${e.editableExpression}"
				enabled="${e.enabledExpression}"
				required="${e.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${e.collaborationEnabled?"FieldRuntime.handleLiveChange":undefined}"
				fieldGroupIds="${e.fieldGroupIds}"
				textAlign="${i}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
				ariaLabelledBy="${e.ariaLabelledBy}"
			>
				${m.getLayoutData(e)}
			</Input>`},getInputWithUnitTemplate(e){const a=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const i=r(a,e.formatOptions,e.editModeAsObject);if(e.staticUnit===undefined){return c`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${e.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.editStyleId}"
				value="${e.valueBindingExpression}"
				width="${e.valueInputWidth}"
				fieldWidth="${e.valueInputFieldWidth}"
				description="${e.descriptionBindingExpression}"
				editable="${e.editableExpression}"
				enabled="${e.enabledExpression}"
				required="${e.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${e.collaborationEnabled?"FieldRuntime.handleLiveChange":undefined}"
				textAlign="${i}"
				fieldGroupIds="${e.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			>
				${m.getLayoutData(e)}
			</Input>
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${e.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.idPrefix?p([e.idPrefix,"Field-unitEdit"]):undefined}"
				value="${e.unitBindingExpression}"
				width="30%"
				editable="${e.unitEditable}"
				enabled="${e.enabledExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${e.collaborationEnabled?"FieldRuntime.handleLiveChange":undefined}"
				textAlign="Begin"
				fieldGroupIds="${e.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
				visible="${e.unitInputVisible}"
			>
				${m.getLayoutData(e)}
			</Input>
			`}else{return c`
			<Input
				xmlns="sap.m"
				xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
				log:sourcePath="${e.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.editStyleId}"
				value="${e.valueBindingExpression}"
				placeholder="${e.editStylePlaceholder}"
				width="100%"
				fieldWidth="70%"
				description="${e.staticUnit}"
				editable="${e.editableExpression}"
				enabled="${e.enabledExpression}"
				required="${e.requiredExpression}"
				change="FieldRuntime.handleChange($controller, $event)"
				liveChange="${e.collaborationEnabled?"FieldRuntime.handleLiveChange":undefined}"
				textAlign="${i}"
				fieldGroupIds="${e.fieldGroupIds}"
				validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			>
				${m.getLayoutData(e)}
			</Input>`}},getInputWithValueHelpTemplate(e){var a,i;const n=t.getInvolvedDataModelObjects(e.dataField,e.entitySet);const p=n.targetObject.Value.$target;const m=o.computeFieldBaseDelegate("sap/fe/macros/field/FieldBaseDelegate",e.formatOptions.retrieveTextFromValueList);const $=l.getFieldDisplay(p,e.formatOptions.displayMode,e.editModeAsObject);const g=s(e,p.type,(a=p.annotations)===null||a===void 0?void 0:a.UI.MultiLineText);const h=e.dataField.getModel().createBindingContext("Value",e.dataField);const x=e.dataField.getModel().createBindingContext(o.valueHelpProperty(h));const f=d.generateID(e._vhFlexId,e.vhIdPrefix,u(h,{context:h}),u(x,{context:x}));const v=r(n,e.formatOptions,e.editModeAsObject);const F=o.computeLabelText(e,{context:e.dataField});let b="";if(p.type==="Edm.String"&&(i=p.annotations)!==null&&i!==void 0&&i.UI.MultiLineText){b=c`<mdc:contentEdit xmlns:mdc="sap.ui.mdc">
				<TextArea
					xmlns="sap.m"
					value="${e.valueBindingExpression}"
					required="${e.requiredExpression}"
					rows="${e.formatOptions.textLinesEdit}"
					growing="${e.formatOptions.textMaxLines>0?true:undefined}"
					growingMaxLines="${e.formatOptions.textMaxLines}"
					width="100%"
					change="FieldRuntime.handleChange($controller, $event)"
					fieldGroupIds="${e.fieldGroupIds}"
				/>
			</mdc:contentEdit>`}let I="";if(e.collaborationEnabled===true){I=c`<mdc:layoutData xmlns:mdc="sap.ui.mdc">
				<FlexItemData xmlns="sap.m" growFactor="9" />
			</mdc:layoutData>`}return c`<mdc:Field
			xmlns:mdc="sap.ui.mdc"
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			delegate="${m}"
			id="${e.editStyleId}"
			log:sourcePath="${e.dataSourcePath}"
			value="${e.valueBindingExpression}"
			placeholder="${e.editStylePlaceholder}"
			valueState="${e.valueState}"
			editMode="${e.editMode}"
			width="100%"
			required="${e.requiredExpression}"
			additionalValue="${e.textBindingExpression}"
			display="${$}"
			multipleLines="${g}"
			fieldHelp="${f}"
			fieldGroupIds="${e.fieldGroupIds}"
			change="FieldRuntime.handleChange($controller, $event)"
			liveChange="${e.collaborationEnabled===true?"FieldRuntime.handleLiveChange":undefined}"
			textAlign="${v}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${e.ariaLabelledBy}"
			label="${F}"
		>
			${b}
			${I}
		</mdc:Field>`},getCheckBoxTemplate(e){return c`
		    <CheckBox
                xmlns="sap.m"
                xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		        macrodata:sourcePath="${e.dataSourcePath}"
				core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
				id="${e.editStyleId}"
		        selected="${e.valueBindingExpression}"
		        editable="${e.editableExpression}"
		        enabled="${e.enabledExpression}"
		        select="FieldRuntime.handleChange($controller, $event)"
		        fieldGroupIds="${e.fieldGroupIds}"
		        validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
		        ariaLabelledBy="${e.ariaLabelledBy}"
	    />
        `},getTextAreaTemplate(e){const t=e.collaborationEnabled||e.formatOptions.textMaxLength?"FieldRuntime.handleLiveChange":undefined;const a=e.formatOptions.textMaxLines?true:false;let i="";if(e.collaborationEnabled){i=c`<field:layoutData>
			<FlexItemData xmlns="sap.m" growFactor="9" />
		</field:layoutData>`}return c`<field:TextAreaEx
			xmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			xmlns:field="sap.fe.macros.field"
			xmlns:core="sap.ui.core"
			core:require="{FieldRuntime: 'sap/fe/macros/field/FieldRuntime'}"
			log:sourcePath="${e.dataSourcePath}"
			id="${e.editStyleId}"
			value="${e.valueBindingExpression}"
			placeholder="${e.editStylePlaceholder}"
			required="${e.requiredExpression}"
			rows="${e.formatOptions.textLinesEdit}"
			growing="${a}"
			growingMaxLines="${e.formatOptions.textMaxLines}"
			width="100%"
			editable="${e.editableExpression}"
			enabled="${e.enabledExpression}"
			change="FieldRuntime.handleChange($controller, $event)"
			fieldGroupIds="${e.fieldGroupIds}"
			validateFieldGroup="FieldRuntime.onValidateFieldGroup($controller, $event)"
			ariaLabelledBy="${e.ariaLabelledBy}"
			liveChange="${t}"
			maxLength="${e.formatOptions.textMaxLength}"
			showExceededText="true"
		>
			${i}
		</field:TextAreaEx>
		`},getRatingIndicatorTemplate:e=>{const t=e.ratingIndicatorTooltip||"{sap.fe.i18n>T_COMMON_RATING_INDICATOR_TITLE_LABEL}";return c`<RatingIndicator
			xmlns="sap.m"
			id="${e.editStyleId}"
			maxValue="${e.ratingIndicatorTargetValue}"
			value="${e.valueBindingExpression}"
			tooltip="${t}"
			iconSize="1.375rem"
			class="sapUiTinyMarginTopBottom"
			editable="true"
		>
		${m.getLayoutData(e)}
		</RatingIndicator>
		`},getTemplate:e=>{let t;switch(e.editStyle){case"CheckBox":t=m.getCheckBoxTemplate(e);break;case"DatePicker":case"DateTimePicker":case"TimePicker":{t=m.getDateTimePickerGeneric(e,e.editStyle);break}case"Input":{t=m.getInputTemplate(e);break}case"InputWithUnit":{t=m.getInputWithUnitTemplate(e);break}case"InputWithValueHelp":{t=m.getInputWithValueHelpTemplate(e);break}case"RatingIndicator":t=m.getRatingIndicatorTemplate(e);break;case"TextArea":t=m.getTextAreaTemplate(e);break;default:}return t}};return m},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/FieldStructure-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/StableIdHelper", "sap/ui/mdc/enum/EditMode", "./DisplayStyle", "./EditStyle"], function (BuildingBlockTemplateProcessor, StableIdHelper, EditMode, DisplayStyle, EditStyle) {
  "use strict";

  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  function getTemplateWithFieldApi(internalField, template) {
    let id;
    if (internalField.formatOptions.fieldMode === "nowrapper" && internalField.editMode === EditMode.Display) {
      return template;
    }
    if (internalField._apiId) {
      id = internalField._apiId;
    } else if (internalField.idPrefix) {
      id = generate([internalField.idPrefix, "Field"]);
    } else {
      id = undefined;
    }
    if (internalField.onChange === null || internalField.onChange === "null") {
      internalField.onChange = undefined;
    }
    return xml`
			<macroField:FieldAPI
				xmlns:macroField="sap.fe.macros.field"
				change="${internalField.onChange}"
				id="${id}"
				required="${internalField.requiredExpression}"
				editable="${internalField.editableExpression}"
				collaborationEnabled="${internalField.collaborationEnabled}"
				visible="${internalField.visible}"
			>
				${template}
			</macroField:FieldAPI>
		`;
  }

  /**
   * Helps to calculate the content edit functionality / templating.
   *
   * @param internalField Reference to the current internal field instance
   * @returns An XML-based string with the definition of the field control
   */
  function getContentEdit(internalField) {
    let contentEdit;
    if (internalField.editMode !== EditMode.Display && !!internalField.editStyle) {
      const editStyleTemplate = EditStyle.getTemplate(internalField);
      let contentInnerEdit;
      if (internalField.collaborationEnabled ?? false) {
        contentInnerEdit = xml`<HBox xmlns="sap.m" width="100%">
            ${editStyleTemplate}
            <core:Fragment fragmentName="sap.fe.macros.internal.CollaborationAvatar" type="XML" />
        </HBox>`;
      } else {
        contentInnerEdit = editStyleTemplate;
      }
      contentEdit = xml`${contentInnerEdit}`;
    }
    return contentEdit || "";
  }

  /**
   * Create the fieldWrapper control for use cases with display and edit styles.
   *
   * @param internalField Reference to the current internal field instance
   * @returns An XML-based string with the definition of the field control
   */
  function createFieldWrapper(internalField) {
    let fieldWrapperID;
    if (internalField._flexId) {
      fieldWrapperID = internalField._flexId;
    } else if (internalField.idPrefix) {
      fieldWrapperID = generate([internalField.idPrefix, "Field-content"]);
    } else {
      fieldWrapperID = undefined;
    }

    // compute the display part and the edit part for the fieldwrapper control
    const contentDisplay = DisplayStyle.getTemplate(internalField);
    // content edit part needs to be wrapped further with an hbox in case of collaboration mode
    // that´s why we need to call this special helper here which finally calls the editStyle.getTemplate
    const contentEdit = getContentEdit(internalField);
    return xml`<controls:FieldWrapper
		xmlns:controls="sap.fe.macros.controls"
		id="${fieldWrapperID}"
		editMode="${internalField.editMode}"
		visible="${internalField.visible}"
		width="100%"
		textAlign="${internalField.textAlign}"
		class="${internalField.class}"
		>

		<controls:contentDisplay>
			${contentDisplay}
		</controls:contentDisplay>
		<controls:contentEdit>
			${contentEdit}
		</controls:contentEdit>

	</controls:FieldWrapper>`;
  }

  /**
   * Helps to calculate the field structure wrapper.
   *
   * @param internalField Reference to the current internal field instance
   * @returns An XML-based string with the definition of the field control
   */
  function getFieldStructureTemplate(internalField) {
    //compute the field in case of mentioned display styles
    if (internalField.displayStyle === "Avatar" || internalField.displayStyle === "Contact" || internalField.displayStyle === "Button" || internalField.displayStyle === "File") {
      // check for special handling in case a file type is used with the collaboration mode
      // (renders an avatar directly)
      if (internalField.displayStyle === "File" && (internalField.collaborationEnabled ?? false) && internalField.editMode !== EditMode.Display) {
        const box = xml`
				<HBox xmlns="sap.m" width="100%">
				<VBox width="100%">
					${DisplayStyle.getFileTemplate(internalField)}
				</VBox>
				<core:Fragment fragmentName="sap.fe.macros.internal.CollaborationAvatar" type="XML" />
			</HBox>`;
        return getTemplateWithFieldApi(internalField, box);
      } else {
        //for all other cases render the displayStyles with a field api wrapper
        return getTemplateWithFieldApi(internalField, DisplayStyle.getTemplate(internalField));
      }
    } else if (internalField.formatOptions.fieldMode === "nowrapper" && internalField.editMode === EditMode.Display) {
      //renders a display based building block (e.g. a button) that has no field api wrapper around it.
      return DisplayStyle.getTemplate(internalField);
    } else {
      //for all other cases create a field wrapper
      const fieldWrapper = createFieldWrapper(internalField);
      return getTemplateWithFieldApi(internalField, fieldWrapper);
    }
  }
  return getFieldStructureTemplate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/field/FieldStructure", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/StableIdHelper","sap/ui/mdc/enum/EditMode","./DisplayStyle","./EditStyle"],function(e,l,t,i,n){"use strict";var o=l.generate;var a=e.xml;function r(e,l){let i;if(e.formatOptions.fieldMode==="nowrapper"&&e.editMode===t.Display){return l}if(e._apiId){i=e._apiId}else if(e.idPrefix){i=o([e.idPrefix,"Field"])}else{i=undefined}if(e.onChange===null||e.onChange==="null"){e.onChange=undefined}return a`
			<macroField:FieldAPI
				xmlns:macroField="sap.fe.macros.field"
				change="${e.onChange}"
				id="${i}"
				required="${e.requiredExpression}"
				editable="${e.editableExpression}"
				collaborationEnabled="${e.collaborationEnabled}"
				visible="${e.visible}"
			>
				${l}
			</macroField:FieldAPI>
		`}function s(e){let l;if(e.editMode!==t.Display&&!!e.editStyle){const t=n.getTemplate(e);let i;if(e.collaborationEnabled??false){i=a`<HBox xmlns="sap.m" width="100%">
            ${t}
            <core:Fragment fragmentName="sap.fe.macros.internal.CollaborationAvatar" type="XML" />
        </HBox>`}else{i=t}l=a`${i}`}return l||""}function d(e){let l;if(e._flexId){l=e._flexId}else if(e.idPrefix){l=o([e.idPrefix,"Field-content"])}else{l=undefined}const t=i.getTemplate(e);const n=s(e);return a`<controls:FieldWrapper
		xmlns:controls="sap.fe.macros.controls"
		id="${l}"
		editMode="${e.editMode}"
		visible="${e.visible}"
		width="100%"
		textAlign="${e.textAlign}"
		class="${e.class}"
		>

		<controls:contentDisplay>
			${t}
		</controls:contentDisplay>
		<controls:contentEdit>
			${n}
		</controls:contentEdit>

	</controls:FieldWrapper>`}function c(e){if(e.displayStyle==="Avatar"||e.displayStyle==="Contact"||e.displayStyle==="Button"||e.displayStyle==="File"){if(e.displayStyle==="File"&&(e.collaborationEnabled??false)&&e.editMode!==t.Display){const l=a`
				<HBox xmlns="sap.m" width="100%">
				<VBox width="100%">
					${i.getFileTemplate(e)}
				</VBox>
				<core:Fragment fragmentName="sap.fe.macros.internal.CollaborationAvatar" type="XML" />
			</HBox>`;return r(e,l)}else{return r(e,i.getTemplate(e))}}else if(e.formatOptions.fieldMode==="nowrapper"&&e.editMode===t.Display){return i.getTemplate(e)}else{const l=d(e);return r(e,l)}}return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/ActionHelper-dbg", ["sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/macros/CommonHelper"], function (BindingHelper, BindingToolkit, TypeGuards, CommonHelper) {
  "use strict";

  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var bindingContextPathVisitor = BindingHelper.bindingContextPathVisitor;
  const ActionHelper = {
    /**
     * Returns an array of actions that are not enabled with a multiple selection.
     *
     * @function
     * @name getMultiSelectDisabledActions
     * @param collections Array of records
     * @returns An array of action paths
     * @ui5-restricted
     */
    getMultiSelectDisabledActions(collections) {
      const multiSelectDisabledActions = [];
      const actions = (collections === null || collections === void 0 ? void 0 : collections.filter(collection => collection.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction")) ?? [];
      for (const action of actions) {
        const actionTarget = action === null || action === void 0 ? void 0 : action.ActionTarget;
        if ((actionTarget === null || actionTarget === void 0 ? void 0 : actionTarget.isBound) === true) {
          for (const parameter of actionTarget.parameters) {
            var _parameter$annotation, _parameter$annotation2;
            if (isPathAnnotationExpression((_parameter$annotation = parameter.annotations.UI) === null || _parameter$annotation === void 0 ? void 0 : _parameter$annotation.Hidden) || isPathAnnotationExpression((_parameter$annotation2 = parameter.annotations.Common) === null || _parameter$annotation2 === void 0 ? void 0 : _parameter$annotation2.FieldControl)) {
              multiSelectDisabledActions.push(actionTarget.name);
            }
          }
        }
      }
      return multiSelectDisabledActions;
    },
    /**
     * Method to get the expression for the 'press' event for the DataFieldForActionButton.
     *
     * @function
     * @name getPressEventDataFieldForActionButton
     * @param sId Control ID
     * @param oAction Action object
     * @param oParams Parameters
     * @param sOperationAvailableMap OperationAvailableMap as stringified JSON object
     * @returns The binding expression
     */
    getPressEventDataFieldForActionButton(sId, oAction, oParams, sOperationAvailableMap) {
      const sInvocationGrouping = oAction.InvocationGrouping && oAction.InvocationGrouping.$EnumMember === "com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet" ? "ChangeSet" : "Isolated";
      oParams = oParams || {};
      oParams["invocationGrouping"] = CommonHelper.addSingleQuotes(sInvocationGrouping);
      oParams["controlId"] = CommonHelper.addSingleQuotes(sId);
      oParams["operationAvailableMap"] = CommonHelper.addSingleQuotes(sOperationAvailableMap);
      oParams["model"] = "${$source>/}.getModel()";
      oParams["label"] = oAction.Label && CommonHelper.addSingleQuotes(oAction.Label, true);
      return CommonHelper.generateFunction(".editFlow.invokeAction", CommonHelper.addSingleQuotes(oAction.Action), CommonHelper.objectToString(oParams));
    },
    /**
     * Return Number of contexts expression.
     *
     * @function
     * @name getNumberOfContextsExpression
     * @param vActionEnabled Status of action (single or multiselect)
     * @returns Number of contexts expression
     */
    getNumberOfContextsExpression(vActionEnabled) {
      let sNumberOfSelectedContexts;
      if (vActionEnabled === "single") {
        sNumberOfSelectedContexts = "${internal>numberOfSelectedContexts} === 1";
      } else {
        sNumberOfSelectedContexts = "${internal>numberOfSelectedContexts} > 0";
      }
      return sNumberOfSelectedContexts;
    },
    /**
     * Return UI Control (LineItem/Chart) Operation Available Map.
     *
     * @function
     * @name getOperationAvailableMap
     * @param aCollection Array of records
     * @param sControl Control name (lineItem / chart)
     * @param oContext Converter context
     * @returns The record containing all action names and their corresponding Core.OperationAvailable property paths
     */
    getOperationAvailableMap(aCollection, sControl, oContext) {
      let oOperationAvailableMap = {};
      if (aCollection) {
        aCollection.forEach(oRecord => {
          if (oRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
            if (oRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
              const actionName = oRecord.Action;
              if ((actionName === null || actionName === void 0 ? void 0 : actionName.indexOf("/")) < 0 && !oRecord.Determining) {
                if (sControl === "table") {
                  oOperationAvailableMap = this._getOperationAvailableMapOfTable(oRecord, actionName, oOperationAvailableMap, oContext);
                } else if (sControl === "chart") {
                  oOperationAvailableMap = this._getOperationAvailableMapOfChart(actionName, oOperationAvailableMap, oContext);
                }
              }
            }
          }
        });
      }
      return oOperationAvailableMap;
    },
    /**
     * Return LineItem Action Operation Available Map.
     *
     * @function
     * @name _getOperationAvailableMapOfTable
     * @private
     * @param oDataFieldForAction Data field for action object
     * @param sActionName Action name
     * @param oOperationAvailableMap Operation available map object
     * @param oConverterContext Converter context object
     * @returns The record containing all action name of line item and the corresponding Core.OperationAvailable property path
     */
    _getOperationAvailableMapOfTable(oDataFieldForAction, sActionName, oOperationAvailableMap, oConverterContext) {
      var _actionTarget$annotat, _actionTarget$annotat2, _actionTarget$paramet;
      const actionTarget = oDataFieldForAction.ActionTarget;
      if ((actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$annotat = actionTarget.annotations) === null || _actionTarget$annotat === void 0 ? void 0 : (_actionTarget$annotat2 = _actionTarget$annotat.Core) === null || _actionTarget$annotat2 === void 0 ? void 0 : _actionTarget$annotat2.OperationAvailable) === null) {
        // We disabled action advertisement but kept it in the code for the time being
        //oOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);
      } else if (actionTarget !== null && actionTarget !== void 0 && (_actionTarget$paramet = actionTarget.parameters) !== null && _actionTarget$paramet !== void 0 && _actionTarget$paramet.length) {
        var _actionTarget$annotat3, _actionTarget$annotat4, _actionTarget$annotat5, _actionTarget$annotat6;
        const bindingParameterFullName = actionTarget.parameters[0].fullyQualifiedName,
          targetExpression = getExpressionFromAnnotation(actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$annotat3 = actionTarget.annotations) === null || _actionTarget$annotat3 === void 0 ? void 0 : (_actionTarget$annotat4 = _actionTarget$annotat3.Core) === null || _actionTarget$annotat4 === void 0 ? void 0 : _actionTarget$annotat4.OperationAvailable, [], undefined, path => bindingContextPathVisitor(path, oConverterContext, bindingParameterFullName));
        if (isPathInModelExpression(targetExpression)) {
          oOperationAvailableMap = this._addToMap(sActionName, targetExpression.path, oOperationAvailableMap);
        } else if ((actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$annotat5 = actionTarget.annotations) === null || _actionTarget$annotat5 === void 0 ? void 0 : (_actionTarget$annotat6 = _actionTarget$annotat5.Core) === null || _actionTarget$annotat6 === void 0 ? void 0 : _actionTarget$annotat6.OperationAvailable) !== undefined) {
          oOperationAvailableMap = this._addToMap(sActionName, targetExpression, oOperationAvailableMap);
        }
      }
      return oOperationAvailableMap;
    },
    /**
     * Return LineItem Action Operation Available Map.
     *
     * @function
     * @name _getOperationAvailableMapOfChart
     * @private
     * @param sActionName Action name
     * @param oOperationAvailableMap Operation available map object
     * @param oContext Context object
     * @returns The record containing all action name of chart and the corresponding Core.OperationAvailable property path
     */
    _getOperationAvailableMapOfChart(sActionName, oOperationAvailableMap, oContext) {
      let oResult = CommonHelper.getActionPath(oContext.context, false, sActionName, true);
      if (oResult === null) {
        oOperationAvailableMap = this._addToMap(sActionName, null, oOperationAvailableMap);
      } else {
        oResult = CommonHelper.getActionPath(oContext.context, false, sActionName);
        if (oResult.sProperty) {
          oOperationAvailableMap = this._addToMap(sActionName, oResult.sProperty.substr(oResult.sBindingParameter.length + 1), oOperationAvailableMap);
        }
      }
      return oOperationAvailableMap;
    },
    /**
     * Return Map.
     *
     * @function
     * @name _addToMap
     * @private
     * @param sKey Key
     * @param oValue Value
     * @param oMap Map object
     * @returns Map object
     */
    _addToMap(sKey, oValue, oMap) {
      if (sKey && oMap) {
        oMap[sKey] = oValue;
      }
      return oMap;
    }
  };
  return ActionHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/ActionHelper", ["sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/macros/CommonHelper"],function(e,o,i,n){"use strict";var t=i.isPathAnnotationExpression;var a=o.isPathInModelExpression;var l=o.getExpressionFromAnnotation;var r=e.bindingContextPathVisitor;const s={getMultiSelectDisabledActions(e){const o=[];const i=(e===null||e===void 0?void 0:e.filter(e=>e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"))??[];for(const e of i){const i=e===null||e===void 0?void 0:e.ActionTarget;if((i===null||i===void 0?void 0:i.isBound)===true){for(const e of i.parameters){var n,a;if(t((n=e.annotations.UI)===null||n===void 0?void 0:n.Hidden)||t((a=e.annotations.Common)===null||a===void 0?void 0:a.FieldControl)){o.push(i.name)}}}}return o},getPressEventDataFieldForActionButton(e,o,i,t){const a=o.InvocationGrouping&&o.InvocationGrouping.$EnumMember==="com.sap.vocabularies.UI.v1.OperationGroupingType/ChangeSet"?"ChangeSet":"Isolated";i=i||{};i["invocationGrouping"]=n.addSingleQuotes(a);i["controlId"]=n.addSingleQuotes(e);i["operationAvailableMap"]=n.addSingleQuotes(t);i["model"]="${$source>/}.getModel()";i["label"]=o.Label&&n.addSingleQuotes(o.Label,true);return n.generateFunction(".editFlow.invokeAction",n.addSingleQuotes(o.Action),n.objectToString(i))},getNumberOfContextsExpression(e){let o;if(e==="single"){o="${internal>numberOfSelectedContexts} === 1"}else{o="${internal>numberOfSelectedContexts} > 0"}return o},getOperationAvailableMap(e,o,i){let n={};if(e){e.forEach(e=>{if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"){if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"){const t=e.Action;if((t===null||t===void 0?void 0:t.indexOf("/"))<0&&!e.Determining){if(o==="table"){n=this._getOperationAvailableMapOfTable(e,t,n,i)}else if(o==="chart"){n=this._getOperationAvailableMapOfChart(t,n,i)}}}}})}return n},_getOperationAvailableMapOfTable(e,o,i,n){var t,s,d;const u=e.ActionTarget;if((u===null||u===void 0?void 0:(t=u.annotations)===null||t===void 0?void 0:(s=t.Core)===null||s===void 0?void 0:s.OperationAvailable)===null){}else if(u!==null&&u!==void 0&&(d=u.parameters)!==null&&d!==void 0&&d.length){var v,p,c,f;const e=u.parameters[0].fullyQualifiedName,t=l(u===null||u===void 0?void 0:(v=u.annotations)===null||v===void 0?void 0:(p=v.Core)===null||p===void 0?void 0:p.OperationAvailable,[],undefined,o=>r(o,n,e));if(a(t)){i=this._addToMap(o,t.path,i)}else if((u===null||u===void 0?void 0:(c=u.annotations)===null||c===void 0?void 0:(f=c.Core)===null||f===void 0?void 0:f.OperationAvailable)!==undefined){i=this._addToMap(o,t,i)}}return i},_getOperationAvailableMapOfChart(e,o,i){let t=n.getActionPath(i.context,false,e,true);if(t===null){o=this._addToMap(e,null,o)}else{t=n.getActionPath(i.context,false,e);if(t.sProperty){o=this._addToMap(e,t.sProperty.substr(t.sBindingParameter.length+1),o)}}return o},_addToMap(e,o,i){if(e&&i){i[e]=o}return i}};return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/DataPointTemplating-dbg", ["sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/ui/model/odata/v4/AnnotationHelper"], function (valueFormatters, BindingToolkit, TypeGuards, DataModelPathHelper, PropertyHelper, UIFormatters, AnnotationHelper) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var getBindingWithUnitOrCurrency = UIFormatters.getBindingWithUnitOrCurrency;
  var getBindingWithTimezone = UIFormatters.getBindingWithTimezone;
  var hasStaticPercentUnit = PropertyHelper.hasStaticPercentUnit;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isProperty = TypeGuards.isProperty;
  var unresolvableExpression = BindingToolkit.unresolvableExpression;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  var compileExpression = BindingToolkit.compileExpression;
  const getDataPointTargetExpression = oDataModelPath => {
    return oDataModelPath !== null && oDataModelPath !== void 0 && oDataModelPath.TargetValue ? getExpressionFromAnnotation(oDataModelPath.TargetValue) : unresolvableExpression;
  };
  const oResourceModel = sap.ui.getCore().getLibraryResourceBundle("sap.fe.macros");
  const buildExpressionForProgressIndicatorDisplayValue = oPropertyDataModelObjectPath => {
    var _oPropertyDataModelOb;
    const fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb === void 0 ? void 0 : _oPropertyDataModelOb.Value) || "";
    const relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);
    let fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);
    if (fieldValueExpression && TargetExpression) {
      var _targetObject$annotat, _targetObject$annotat2, _targetObject$annotat3, _targetObject$annotat4;
      let targetObject = oPropertyDataModelObjectPath.targetObject.Value;
      if (!isProperty(targetObject)) {
        targetObject = oPropertyDataModelObjectPath.targetObject.Value.$target;
      }
      const unit = ((_targetObject$annotat = targetObject.annotations) === null || _targetObject$annotat === void 0 ? void 0 : (_targetObject$annotat2 = _targetObject$annotat.Measures) === null || _targetObject$annotat2 === void 0 ? void 0 : _targetObject$annotat2.Unit) || ((_targetObject$annotat3 = targetObject.annotations) === null || _targetObject$annotat3 === void 0 ? void 0 : (_targetObject$annotat4 = _targetObject$annotat3.Measures) === null || _targetObject$annotat4 === void 0 ? void 0 : _targetObject$annotat4.ISOCurrency);
      if (!unit) {
        return oResourceModel.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [compileExpression(fieldValueExpression), compileExpression(TargetExpression)]);
      }
      // If the unit isn't a path, we check for a % sign as it is a special case.
      if (hasStaticPercentUnit(fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.$target)) {
        return `${compileExpression(fieldValueExpression)} %`;
      }
      fieldValueExpression = formatWithTypeInformation(targetObject, fieldValueExpression);
      const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
      return compileExpression(formatResult([fieldValueExpression, TargetExpression, unitBindingExpression], valueFormatters.formatProgressIndicatorText));
    }
    return undefined;
  };
  _exports.buildExpressionForProgressIndicatorDisplayValue = buildExpressionForProgressIndicatorDisplayValue;
  const buildUnitBindingExpression = dataPoint => {
    var _dataPoint$targetObje, _dataPoint$targetObje2, _targetObject$annotat5, _targetObject$annotat6, _targetObject$annotat7, _targetObject$annotat8;
    const relativeLocation = getRelativePaths(dataPoint);
    const targetObject = dataPoint === null || dataPoint === void 0 ? void 0 : (_dataPoint$targetObje = dataPoint.targetObject) === null || _dataPoint$targetObje === void 0 ? void 0 : (_dataPoint$targetObje2 = _dataPoint$targetObje.Value) === null || _dataPoint$targetObje2 === void 0 ? void 0 : _dataPoint$targetObje2.$target;
    if (!isProperty(targetObject)) {
      return "";
    }
    const unit = ((_targetObject$annotat5 = targetObject.annotations) === null || _targetObject$annotat5 === void 0 ? void 0 : (_targetObject$annotat6 = _targetObject$annotat5.Measures) === null || _targetObject$annotat6 === void 0 ? void 0 : _targetObject$annotat6.Unit) || ((_targetObject$annotat7 = targetObject.annotations) === null || _targetObject$annotat7 === void 0 ? void 0 : (_targetObject$annotat8 = _targetObject$annotat7.Measures) === null || _targetObject$annotat8 === void 0 ? void 0 : _targetObject$annotat8.ISOCurrency);
    return unit ? compileExpression(getExpressionFromAnnotation(unit, relativeLocation)) : "";
  };
  _exports.buildUnitBindingExpression = buildUnitBindingExpression;
  const buildRatingIndicatorSubtitleExpression = (oContext, mSampleSize) => {
    if (mSampleSize) {
      return formatRatingIndicatorSubTitle(AnnotationHelper.value(mSampleSize, {
        context: oContext
      }));
    }
  };
  // returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')
  const formatRatingIndicatorSubTitle = iSampleSizeValue => {
    if (iSampleSizeValue) {
      const sSubTitleLabel = iSampleSizeValue > 1 ? oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL");
      return oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE", [String(iSampleSizeValue), sSubTitleLabel]);
    }
  };

  /**
   * This function is used to get the header text of rating indicator.
   *
   * @param oContext Context of interface
   * @param oDataPoint Data point object
   * @returns {string | undefined} Expression binding for rating indicator text
   */
  const getHeaderRatingIndicatorText = (oContext, oDataPoint) => {
    let result;
    if (oDataPoint && oDataPoint.SampleSize) {
      result = buildRatingIndicatorSubtitleExpression(oContext, oDataPoint.SampleSize);
    } else if (oDataPoint && oDataPoint.Description) {
      const sModelValue = AnnotationHelper.value(oDataPoint.Description, {
        context: oContext
      });
      result = "${path:" + sModelValue + "}";
    }
    return result;
  };
  getHeaderRatingIndicatorText.requiresIContext = true;
  _exports.getHeaderRatingIndicatorText = getHeaderRatingIndicatorText;
  const buildExpressionForDescription = fieldValue => {
    var _fieldValue$targetObj, _fieldValue$targetObj2, _fieldValue$targetObj3;
    const relativeLocation = getRelativePaths(fieldValue);
    if (fieldValue !== null && fieldValue !== void 0 && (_fieldValue$targetObj = fieldValue.targetObject) !== null && _fieldValue$targetObj !== void 0 && (_fieldValue$targetObj2 = _fieldValue$targetObj.annotations) !== null && _fieldValue$targetObj2 !== void 0 && (_fieldValue$targetObj3 = _fieldValue$targetObj2.Common) !== null && _fieldValue$targetObj3 !== void 0 && _fieldValue$targetObj3.Text) {
      var _fieldValue$targetObj4, _fieldValue$targetObj5;
      const oTextExpression = getExpressionFromAnnotation(fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$targetObj4 = fieldValue.targetObject.annotations) === null || _fieldValue$targetObj4 === void 0 ? void 0 : (_fieldValue$targetObj5 = _fieldValue$targetObj4.Common) === null || _fieldValue$targetObj5 === void 0 ? void 0 : _fieldValue$targetObj5.Text, relativeLocation);
      if (isPathInModelExpression(oTextExpression)) {
        oTextExpression.parameters = {
          $$noPatch: true
        };
      }
      return oTextExpression;
    }
    return undefined;
  };
  const getDecimalFormat = (outExpression, fieldValue, sNumberOfFractionalDigits) => {
    if (!outExpression.constraints) {
      outExpression.constraints = {};
    }
    outExpression.constraints = Object.assign(outExpression.constraints, {
      precision: fieldValue.$target.precision,
      scale: sNumberOfFractionalDigits ? sNumberOfFractionalDigits : fieldValue.$target.scale
    });
    // sNumberOfFractionalDigits is only defined in getValueFormatted when NumberOfFractionalDigits is defined.
    // In that case, we need to instance the preserveDecimals parameter because of a change MDC side
    if (sNumberOfFractionalDigits) {
      if (!outExpression.formatOptions) {
        outExpression.formatOptions = {};
      }
      outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
        preserveDecimals: false
      });
    }
    return outExpression;
  };
  const getValueFormatted = (oPropertyDataModelPath, fieldValue, sPropertyType, sNumberOfFractionalDigits) => {
    var _fieldValue$path;
    let outExpression;
    const relativeLocation = (fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$path = fieldValue.path) === null || _fieldValue$path === void 0 ? void 0 : _fieldValue$path.indexOf("/")) === -1 ? getRelativePaths(oPropertyDataModelPath) : [];
    outExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const oPropertyDefinition = oPropertyDataModelPath.targetObject;
    if (sPropertyType && isPathInModelExpression(outExpression)) {
      var _EDM_TYPE_MAPPING$sPr;
      formatWithTypeInformation(oPropertyDefinition, outExpression);
      outExpression.type = (_EDM_TYPE_MAPPING$sPr = EDM_TYPE_MAPPING[sPropertyType]) === null || _EDM_TYPE_MAPPING$sPr === void 0 ? void 0 : _EDM_TYPE_MAPPING$sPr.type;
      switch (sPropertyType) {
        case "Edm.Decimal":
          // for the listReport, the decimal fields are formatted by returning a string
          // for the facets of the OP, the decimal fields are formatted by returning a promise, so we manage all the cases
          outExpression = getDecimalFormat(outExpression, fieldValue, sNumberOfFractionalDigits);
          break;
        default:
      }
    }
    return outExpression;
  };
  _exports.getValueFormatted = getValueFormatted;
  const buildFieldBindingExpression = (oDataModelPath, dataPointFormatOptions, bHideMeasure) => {
    var _oDataPointValue$$tar, _oPropertyDataModelOb2, _oPropertyDataModelOb3, _oPropertyDataModelOb4;
    const oDataPoint = oDataModelPath.targetObject;
    const oDataPointValue = (oDataPoint === null || oDataPoint === void 0 ? void 0 : oDataPoint.Value) || "";
    const sPropertyType = oDataPointValue === null || oDataPointValue === void 0 ? void 0 : (_oDataPointValue$$tar = oDataPointValue.$target) === null || _oDataPointValue$$tar === void 0 ? void 0 : _oDataPointValue$$tar.type;
    let sNumberOfFractionalDigits;
    if (sPropertyType === "Edm.Decimal" && oDataPoint.ValueFormat) {
      if (oDataPoint.ValueFormat.NumberOfFractionalDigits) {
        sNumberOfFractionalDigits = oDataPoint.ValueFormat.NumberOfFractionalDigits;
      }
    }
    const oPropertyDataModelObjectPath = enhanceDataModelPath(oDataModelPath, oDataPointValue.path);
    const oDescription = oPropertyDataModelObjectPath ? buildExpressionForDescription(oPropertyDataModelObjectPath) : undefined;
    const oFormattedValue = getValueFormatted(oPropertyDataModelObjectPath, oDataPointValue, sPropertyType, sNumberOfFractionalDigits);
    const sDisplayMode = oDescription ? dataPointFormatOptions.displayMode || getDisplayMode(oPropertyDataModelObjectPath) : "Value";
    let oBindingExpression;
    switch (sDisplayMode) {
      case "Description":
        oBindingExpression = oDescription;
        break;
      case "ValueDescription":
        oBindingExpression = formatResult([oFormattedValue, oDescription], valueFormatters.formatWithBrackets);
        break;
      case "DescriptionValue":
        oBindingExpression = formatResult([oDescription, oFormattedValue], valueFormatters.formatWithBrackets);
        break;
      default:
        if ((_oPropertyDataModelOb2 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb2 !== void 0 && (_oPropertyDataModelOb3 = _oPropertyDataModelOb2.annotations) !== null && _oPropertyDataModelOb3 !== void 0 && (_oPropertyDataModelOb4 = _oPropertyDataModelOb3.Common) !== null && _oPropertyDataModelOb4 !== void 0 && _oPropertyDataModelOb4.Timezone) {
          oBindingExpression = getBindingWithTimezone(oPropertyDataModelObjectPath, oFormattedValue);
        } else {
          oBindingExpression = _computeBindingWithUnitOrCurrency(oPropertyDataModelObjectPath, oFormattedValue, bHideMeasure || (dataPointFormatOptions === null || dataPointFormatOptions === void 0 ? void 0 : dataPointFormatOptions.measureDisplayMode) === "Hidden");
        }
    }
    return compileExpression(oBindingExpression);
  };
  _exports.buildFieldBindingExpression = buildFieldBindingExpression;
  const _computeBindingWithUnitOrCurrency = (propertyDataModelObjectPath, formattedValue, hideMeasure) => {
    var _propertyDataModelObj, _propertyDataModelObj2, _propertyDataModelObj3, _propertyDataModelObj4, _propertyDataModelObj5, _propertyDataModelObj6;
    if ((_propertyDataModelObj = propertyDataModelObjectPath.targetObject) !== null && _propertyDataModelObj !== void 0 && (_propertyDataModelObj2 = _propertyDataModelObj.annotations) !== null && _propertyDataModelObj2 !== void 0 && (_propertyDataModelObj3 = _propertyDataModelObj2.Measures) !== null && _propertyDataModelObj3 !== void 0 && _propertyDataModelObj3.Unit || (_propertyDataModelObj4 = propertyDataModelObjectPath.targetObject) !== null && _propertyDataModelObj4 !== void 0 && (_propertyDataModelObj5 = _propertyDataModelObj4.annotations) !== null && _propertyDataModelObj5 !== void 0 && (_propertyDataModelObj6 = _propertyDataModelObj5.Measures) !== null && _propertyDataModelObj6 !== void 0 && _propertyDataModelObj6.ISOCurrency) {
      if (hideMeasure && hasStaticPercentUnit(propertyDataModelObjectPath.targetObject)) {
        return formattedValue;
      }
      return getBindingWithUnitOrCurrency(propertyDataModelObjectPath, formattedValue, undefined, hideMeasure ? {
        showMeasure: false
      } : undefined);
    }
    return formattedValue;
  };

  /**
   * Method to calculate the percentage value of Progress Indicator. Basic formula is Value/Target * 100.
   *
   * @param oPropertyDataModelObjectPath
   * @returns The expression binding used to calculate the percentage value, which is shown in the progress indicator based on the formula given above.
   */
  _exports._computeBindingWithUnitOrCurrency = _computeBindingWithUnitOrCurrency;
  const buildExpressionForProgressIndicatorPercentValue = oPropertyDataModelObjectPath => {
    var _oPropertyDataModelOb5, _oPropertyDefinition$, _oPropertyDefinition$2, _oPropertyDefinition$3, _oPropertyDefinition$4;
    const fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb5 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb5 === void 0 ? void 0 : _oPropertyDataModelOb5.Value) || "";
    const relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);
    const fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);
    const oPropertyDefinition = fieldValue.$target;
    const unit = ((_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Measures) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.Unit) || ((_oPropertyDefinition$3 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$3 === void 0 ? void 0 : (_oPropertyDefinition$4 = _oPropertyDefinition$3.Measures) === null || _oPropertyDefinition$4 === void 0 ? void 0 : _oPropertyDefinition$4.ISOCurrency);
    if (unit) {
      const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
      return compileExpression(formatResult([fieldValueExpression, TargetExpression, unitBindingExpression], valueFormatters.computePercentage));
    }
    return compileExpression(formatResult([fieldValueExpression, TargetExpression, ""], valueFormatters.computePercentage));
  };
  _exports.buildExpressionForProgressIndicatorPercentValue = buildExpressionForProgressIndicatorPercentValue;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/DataPointTemplating", ["sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/ui/model/odata/v4/AnnotationHelper"],function(t,e,n,o,i,r,a){"use strict";var s={};var l=r.getDisplayMode;var u=r.getBindingWithUnitOrCurrency;var d=r.getBindingWithTimezone;var c=i.hasStaticPercentUnit;var v=o.getRelativePaths;var g=o.enhanceDataModelPath;var p=n.isProperty;var f=e.unresolvableExpression;var m=e.isPathInModelExpression;var O=e.getExpressionFromAnnotation;var T=e.formatWithTypeInformation;var I=e.formatResult;var b=e.EDM_TYPE_MAPPING;var _=e.compileExpression;const E=t=>t!==null&&t!==void 0&&t.TargetValue?O(t.TargetValue):f;const P=sap.ui.getCore().getLibraryResourceBundle("sap.fe.macros");const h=e=>{var n;const o=(e===null||e===void 0?void 0:(n=e.targetObject)===null||n===void 0?void 0:n.Value)||"";const i=v(e);let r=O(o,i);const a=E(e.targetObject);if(r&&a){var s,l,u,d;let n=e.targetObject.Value;if(!p(n)){n=e.targetObject.Value.$target}const v=((s=n.annotations)===null||s===void 0?void 0:(l=s.Measures)===null||l===void 0?void 0:l.Unit)||((u=n.annotations)===null||u===void 0?void 0:(d=u.Measures)===null||d===void 0?void 0:d.ISOCurrency);if(!v){return P.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM",[_(r),_(a)])}if(c(o===null||o===void 0?void 0:o.$target)){return`${_(r)} %`}r=T(n,r);const g=v.$target?T(v.$target,O(v,i)):O(v,i);return _(I([r,a,g],t.formatProgressIndicatorText))}return undefined};s.buildExpressionForProgressIndicatorDisplayValue=h;const A=t=>{var e,n,o,i,r,a;const s=v(t);const l=t===null||t===void 0?void 0:(e=t.targetObject)===null||e===void 0?void 0:(n=e.Value)===null||n===void 0?void 0:n.$target;if(!p(l)){return""}const u=((o=l.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.Unit)||((r=l.annotations)===null||r===void 0?void 0:(a=r.Measures)===null||a===void 0?void 0:a.ISOCurrency);return u?_(O(u,s)):""};s.buildUnitBindingExpression=A;const D=(t,e)=>{if(e){return N(a.value(e,{context:t}))}};const N=t=>{if(t){const e=t>1?P.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL"):P.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL");return P.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE",[String(t),e])}};const x=(t,e)=>{let n;if(e&&e.SampleSize){n=D(t,e.SampleSize)}else if(e&&e.Description){const o=a.value(e.Description,{context:t});n="${path:"+o+"}"}return n};x.requiresIContext=true;s.getHeaderRatingIndicatorText=x;const M=t=>{var e,n,o;const i=v(t);if(t!==null&&t!==void 0&&(e=t.targetObject)!==null&&e!==void 0&&(n=e.annotations)!==null&&n!==void 0&&(o=n.Common)!==null&&o!==void 0&&o.Text){var r,a;const e=O(t===null||t===void 0?void 0:(r=t.targetObject.annotations)===null||r===void 0?void 0:(a=r.Common)===null||a===void 0?void 0:a.Text,i);if(m(e)){e.parameters={$$noPatch:true}}return e}return undefined};const V=(t,e,n)=>{if(!t.constraints){t.constraints={}}t.constraints=Object.assign(t.constraints,{precision:e.$target.precision,scale:n?n:e.$target.scale});if(n){if(!t.formatOptions){t.formatOptions={}}t.formatOptions=Object.assign(t.formatOptions,{preserveDecimals:false})}return t};const y=(t,e,n,o)=>{var i;let r;const a=(e===null||e===void 0?void 0:(i=e.path)===null||i===void 0?void 0:i.indexOf("/"))===-1?v(t):[];r=O(e,a);const s=t.targetObject;if(n&&m(r)){var l;T(s,r);r.type=(l=b[n])===null||l===void 0?void 0:l.type;switch(n){case"Edm.Decimal":r=V(r,e,o);break;default:}}return r};s.getValueFormatted=y;const j=(e,n,o)=>{var i,r,a,s;const u=e.targetObject;const c=(u===null||u===void 0?void 0:u.Value)||"";const v=c===null||c===void 0?void 0:(i=c.$target)===null||i===void 0?void 0:i.type;let p;if(v==="Edm.Decimal"&&u.ValueFormat){if(u.ValueFormat.NumberOfFractionalDigits){p=u.ValueFormat.NumberOfFractionalDigits}}const f=g(e,c.path);const m=f?M(f):undefined;const O=y(f,c,v,p);const T=m?n.displayMode||l(f):"Value";let b;switch(T){case"Description":b=m;break;case"ValueDescription":b=I([O,m],t.formatWithBrackets);break;case"DescriptionValue":b=I([m,O],t.formatWithBrackets);break;default:if((r=f.targetObject)!==null&&r!==void 0&&(a=r.annotations)!==null&&a!==void 0&&(s=a.Common)!==null&&s!==void 0&&s.Timezone){b=d(f,O)}else{b=R(f,O,o||(n===null||n===void 0?void 0:n.measureDisplayMode)==="Hidden")}}return _(b)};s.buildFieldBindingExpression=j;const R=(t,e,n)=>{var o,i,r,a,s,l;if((o=t.targetObject)!==null&&o!==void 0&&(i=o.annotations)!==null&&i!==void 0&&(r=i.Measures)!==null&&r!==void 0&&r.Unit||(a=t.targetObject)!==null&&a!==void 0&&(s=a.annotations)!==null&&s!==void 0&&(l=s.Measures)!==null&&l!==void 0&&l.ISOCurrency){if(n&&c(t.targetObject)){return e}return u(t,e,undefined,n?{showMeasure:false}:undefined)}return e};s._computeBindingWithUnitOrCurrency=R;const C=e=>{var n,o,i,r,a;const s=(e===null||e===void 0?void 0:(n=e.targetObject)===null||n===void 0?void 0:n.Value)||"";const l=v(e);const u=O(s,l);const d=E(e.targetObject);const c=s.$target;const g=((o=c.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.Unit)||((r=c.annotations)===null||r===void 0?void 0:(a=r.Measures)===null||a===void 0?void 0:a.ISOCurrency);if(g){const e=g.$target?T(g.$target,O(g,l)):O(g,l);return _(I([u,d,e],t.computePercentage))}return _(I([u,d,""],t.computePercentage))};s.buildExpressionForProgressIndicatorPercentValue=C;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/DefaultActionHandler-dbg", ["sap/fe/macros/CommonHelper", "sap/fe/macros/table/TableHelper", "sap/m/library"], function (CommonHelper, Table, library) {
  "use strict";

  var MenuButtonMode = library.MenuButtonMode;
  const DefaultActionHandler = {
    /**
     * The default action group handler that is invoked when adding the menu button handling appropriately.
     *
     * @param oCtx The current context in which the handler is called
     * @param oAction The current action context
     * @param oDataFieldForDefaultAction The current dataField for the default action
     * @param defaultActionContextOrEntitySet The current context for the default action
     * @param mode The optional parameter for the handler mode; default setting is Table
     * @returns The appropriate expression string
     */
    getDefaultActionHandler: function (oCtx, oAction, oDataFieldForDefaultAction, defaultActionContextOrEntitySet) {
      let mode = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "Table";
      if (oAction.defaultAction) {
        try {
          switch (oAction.defaultAction.type) {
            case "ForAction":
              {
                if (mode === "Table") {
                  return Table.pressEventDataFieldForActionButton(oCtx, oDataFieldForDefaultAction, oCtx.collection.getObject("@sapui.name"), oCtx.tableDefinition.operationAvailableMap, defaultActionContextOrEntitySet, oAction.isNavigable, oAction.enableAutoScroll, oAction.defaultValuesExtensionFunction);
                }
                return undefined;
              }
            case "ForNavigation":
              {
                if (mode === "Table") {
                  return CommonHelper.getPressHandlerForDataFieldForIBN(oDataFieldForDefaultAction, "${internal>selectedContexts}", !oCtx.tableDefinition.enableAnalytics);
                }
                return undefined;
              }
            default:
              {
                if (oAction.defaultAction.command) {
                  return "cmd:" + oAction.defaultAction.command;
                }
                if (oAction.defaultAction.noWrap) {
                  return oAction.defaultAction.press;
                } else {
                  switch (mode) {
                    case "Table":
                      {
                        return CommonHelper.buildActionWrapper(oAction.defaultAction, oCtx);
                      }
                    case "Form":
                      {
                        return CommonHelper.buildActionWrapper(oAction.defaultAction, {
                          id: "forTheForm"
                        });
                      }
                  }
                }
              }
          }
        } catch (ioEx) {
          return "binding for the default action is not working as expected";
        }
      }
      return undefined;
    },
    /**
     * The function determines during templating whether to use the defaultActionOnly
     * setting for the sap.m.MenuButton control in case a defaultAction is provided.
     *
     * @param oAction The current action context
     * @returns A Boolean value
     */
    getUseDefaultActionOnly: function (oAction) {
      if (oAction.defaultAction) {
        return true;
      } else {
        return false;
      }
    },
    /**
     * The function determines during templating whether to use the 'Split'
     * or 'Regular' MenuButtonMode for the sap.m.MenuButton control
     * in case a defaultAction is available.
     *
     * @param oAction The current action context
     * @returns The MenuButtonMode
     */
    getButtonMode: function (oAction) {
      if (oAction.defaultAction) {
        return MenuButtonMode.Split;
      } else {
        return MenuButtonMode.Regular;
      }
    }
  };
  return DefaultActionHandler;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/DefaultActionHandler", ["sap/fe/macros/CommonHelper","sap/fe/macros/table/TableHelper","sap/m/library"],function(e,t,n){"use strict";var a=n.MenuButtonMode;const i={getDefaultActionHandler:function(n,a,i,r){let o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:"Table";if(a.defaultAction){try{switch(a.defaultAction.type){case"ForAction":{if(o==="Table"){return t.pressEventDataFieldForActionButton(n,i,n.collection.getObject("@sapui.name"),n.tableDefinition.operationAvailableMap,r,a.isNavigable,a.enableAutoScroll,a.defaultValuesExtensionFunction)}return undefined}case"ForNavigation":{if(o==="Table"){return e.getPressHandlerForDataFieldForIBN(i,"${internal>selectedContexts}",!n.tableDefinition.enableAnalytics)}return undefined}default:{if(a.defaultAction.command){return"cmd:"+a.defaultAction.command}if(a.defaultAction.noWrap){return a.defaultAction.press}else{switch(o){case"Table":{return e.buildActionWrapper(a.defaultAction,n)}case"Form":{return e.buildActionWrapper(a.defaultAction,{id:"forTheForm"})}}}}}}catch(e){return"binding for the default action is not working as expected"}}return undefined},getUseDefaultActionOnly:function(e){if(e.defaultAction){return true}else{return false}},getButtonMode:function(e){if(e.defaultAction){return a.Split}else{return a.Regular}}};return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/TableTemplating-dbg", ["sap/fe/core/helpers/BindingToolkit"], function (BindingToolkit) {
  "use strict";

  var _exports = {};
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var not = BindingToolkit.not;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  /**
   * Method to compute the headerVisible property.
   *
   * @param oProps Object containing the table properties
   * @returns Expression binding for headerVisible
   */
  const buildExpressionForHeaderVisible = oProps => {
    const headerBindingExpression = resolveBindingString(oProps === null || oProps === void 0 ? void 0 : oProps.header);
    const tabTileBindingExpression = resolveBindingString(oProps === null || oProps === void 0 ? void 0 : oProps.tabTitle);
    const headerVisibleBindingExpression = constant(oProps.headerVisible);
    return compileExpression(and(headerVisibleBindingExpression, not(equal(headerBindingExpression, tabTileBindingExpression))));
  };
  _exports.buildExpressionForHeaderVisible = buildExpressionForHeaderVisible;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/helpers/TableTemplating", ["sap/fe/core/helpers/BindingToolkit"],function(e){"use strict";var i={};var n=e.resolveBindingString;var r=e.not;var o=e.equal;var s=e.constant;var a=e.compileExpression;var t=e.and;const l=e=>{const i=n(e===null||e===void 0?void 0:e.header);const l=n(e===null||e===void 0?void 0:e.tabTitle);const d=s(e.headerVisible);return a(t(d,r(o(i,l))))};i.buildExpressionForHeaderVisible=l;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/AdditionalValueFormatter-dbg", ["sap/fe/macros/internal/valuehelp/AdditionalValueHelper", "sap/ui/core/library"], function (AdditionalValueHelper, library) {
  "use strict";

  var ValueState = library.ValueState;
  var additionalValueHelper = AdditionalValueHelper.additionalValueHelper;
  /**
   * Growing formatter used for growing and growingThreshold.
   *
   * @param this Valuehelp Table
   * @param recommendationData Data fetched from recommendation model
   * @param propertyPath Property Path of the Field
   * @returns Boolean value for growing and growingThreshold properties
   */
  function getGrowing(recommendationData, propertyPath) {
    const values = additionalValueHelper.getRelevantRecommendations(recommendationData || {}, this.getBindingContext(), propertyPath) || [];
    if (values.length > 0) {
      //if there are relevant recommendations then return true
      return true;
    }
    return false;
  }
  getGrowing.__functionName = "sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#getGrowing";
  function formatValueState(all_recommendations, currentPageContext, sourcepath, fieldContainerType) {
    let valueStateTypeData = ValueState.None;
    if (!this.getValue()) {
      // only if the existing state is none, we will override state based on recommendations data, else we keep it as is

      if (this.getValueState() == "None" || this.data("hasRecommendations") && this.getValueState() == "Information") {
        // currentPageContext - refers to binding context of view, so this may not be correct data for table, in case of OP.
        // so we use this.getBindingContext
        // for other cases like form, we can still use page context data, this will give correct context for both OP and SubOP.
        let bindingContext;
        if (fieldContainerType === "Table") {
          bindingContext = this.getBindingContext();
        } else {
          bindingContext = currentPageContext;
        }
        if (bindingContext && sourcepath) {
          const values = additionalValueHelper.getRelevantRecommendations(all_recommendations || {}, this.getBindingContext(), sourcepath) || [];
          if (values.length) {
            this.data("hasRecommendations", true);
            valueStateTypeData = ValueState.Information;
          }
        }
      } else {
        valueStateTypeData = this.getValueState();
      }
      if (valueStateTypeData === "Information") {
        this.setValueStateText(" ");
      }
    }
    return valueStateTypeData;
  }
  formatValueState.__functionName = "sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#formatValueState";

  // See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax
  /**
   * Collection of AdditionalValue formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const additionalValueFormatter = function (sName) {
    if (additionalValueFormatter.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return additionalValueFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  additionalValueFormatter.getGrowing = getGrowing;
  additionalValueFormatter.formatValueState = formatValueState;

  /**
   * @global
   */
  return additionalValueFormatter;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/AdditionalValueFormatter", ["sap/fe/macros/internal/valuehelp/AdditionalValueHelper","sap/ui/core/library"],function(e,t){"use strict";var a=t.ValueState;var n=e.additionalValueHelper;function i(e,t){const a=n.getRelevantRecommendations(e||{},this.getBindingContext(),t)||[];if(a.length>0){return true}return false}i.__functionName="sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#getGrowing";function r(e,t,i,r){let o=a.None;if(!this.getValue()){if(this.getValueState()=="None"||this.data("hasRecommendations")&&this.getValueState()=="Information"){let l;if(r==="Table"){l=this.getBindingContext()}else{l=t}if(l&&i){const t=n.getRelevantRecommendations(e||{},this.getBindingContext(),i)||[];if(t.length){this.data("hasRecommendations",true);o=a.Information}}}else{o=this.getValueState()}if(o==="Information"){this.setValueStateText(" ")}}return o}r.__functionName="sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#formatValueState";const o=function(e){if(o.hasOwnProperty(e)){for(var t=arguments.length,a=new Array(t>1?t-1:0),n=1;n<t;n++){a[n-1]=arguments[n]}return o[e].apply(this,a)}else{return""}};o.getGrowing=i;o.formatValueState=r;return o},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/AdditionalValueHelper-dbg", ["sap/ui/core/Core", "sap/ui/model/Filter", "sap/ui/model/FilterType", "sap/ui/model/Sorter"], function (Core, Filter, FilterType, Sorter) {
  "use strict";

  var _exports = {};
  var AdditionalValueGroupKey;
  (function (AdditionalValueGroupKey) {
    AdditionalValueGroupKey["recommendation"] = "recommendation";
    AdditionalValueGroupKey["recentValue"] = "recentValue";
  })(AdditionalValueGroupKey || (AdditionalValueGroupKey = {}));
  _exports.AdditionalValueGroupKey = AdditionalValueGroupKey;
  const additionalValueHelper = {
    /**
     * This function is responsible to create context based on additional value filters and custom sorter and request contexts from it.
     *
     * @param additionalValues Array of additional values
     * @param valueHelpListBinding List binding
     * @param valueHelpBindingInfo The binding info object to be used to bind the list to the model
     * @returns Additional value contexts
     */
    requestForAdditionalValueContextData: async function (additionalValues, valueHelpListBinding, valueHelpBindingInfo) {
      // reverse the array so that while creating transient context first additional value is grouped first
      const reverseAdditionalValues = [...additionalValues].reverse();
      if (!valueHelpListBinding.isSuspended()) {
        valueHelpListBinding.suspend();
      }
      if (valueHelpBindingInfo.parameters) {
        valueHelpListBinding.changeParameters(valueHelpBindingInfo.parameters);
      }

      // check if there is any input in the field
      // This information is used to determine
      // if to show the "others" section or not
      // and also to determine if typeAhead should open or not
      const searchTerm = valueHelpBindingInfo.parameters.$search;
      const additionalValueFilters = this.getAdditionalValueFilters(reverseAdditionalValues, [...this.getValueHelpBindingFilters(valueHelpBindingInfo)]);
      valueHelpBindingInfo.parameters.$search = searchTerm;
      // add custom sorter to take care of grouping the additional values
      const sorter = [this.getSorter()];
      const additionalValuesListBinding = valueHelpListBinding.getModel().bindList(valueHelpBindingInfo.path, undefined, sorter, additionalValueFilters, valueHelpBindingInfo.parameters);
      // get recommendation contexts from backend
      const additionalValueContexts = await additionalValuesListBinding.requestContexts();
      return additionalValueContexts.map(context => context.getObject());
    },
    /**
     * This function is responsible to fetch the valuehelp binding filters.
     *
     * @param valueHelpBindingInfo The binding info object to be used to bind the list to the model
     * @returns Filters of valuehelp binding
     */
    getValueHelpBindingFilters: function (valueHelpBindingInfo) {
      // get all existing filters from the binding info
      // this + additional value filters will be used later on to fetch additional values from the backend
      if (valueHelpBindingInfo.filters) {
        if (Array.isArray(valueHelpBindingInfo.filters)) {
          return valueHelpBindingInfo.filters;
        } else {
          return [valueHelpBindingInfo.filters];
        }
      }
      return [];
    },
    /**
     * This function resumes the suspended list binding and then resets changes on it.
     *
     * @param valueHelpListBinding List binding
     */
    resumeValueListBindingAndResetChanges: async function (valueHelpListBinding) {
      if (valueHelpListBinding.isSuspended()) {
        valueHelpListBinding.resume();
      }
      // get rid of existing transient contexts.

      // destroying causes issues sometimes, contexts are not always available to destroy but appear afterwards magically
      try {
        await valueHelpListBinding.resetChanges();
      } catch (error) {
        //We do not do anything here as we know the model will always throw an error and this will fill up the console with errors.
      }
    },
    /**
     * This function is used to sort and filter the Others group which contains other values which are not additional values.
     *
     * @param valueHelpListBinding List Binding
     * @param valueHelpBindingInfo The binding info object to be used to bind the list to the model
     * @param uniqueAdditionalValues Array of additional values which contain values which are unique to each group
     */
    sortAndFilterOthers: function (valueHelpListBinding, valueHelpBindingInfo, uniqueAdditionalValues) {
      // filtering on valueListBinding is required to show the "Others" section
      // We should only filter on valueHelpBinding when there is search term entered
      // otherwise we do not want to show the "Others" section
      const otherGroupFilters = this.createFiltersForOthersGroup(uniqueAdditionalValues, this.getValueHelpBindingFilters(valueHelpBindingInfo));
      valueHelpListBinding.filter([otherGroupFilters], FilterType.Application);
      valueHelpListBinding.sort(this.getSorter());
    },
    /**
     * This functions creates the filters for additional values.
     *
     * @param reverseAdditionalValues Array of additional values in reverse order
     * @param filters Existing valuehelp binding filters
     * @returns Additional value filters
     */
    getAdditionalValueFilters: function (reverseAdditionalValues, filters) {
      reverseAdditionalValues.forEach(additionalValue => {
        if (additionalValue.values.length > 0) {
          const values = additionalValue.values;
          const propertyPath = additionalValue.propertyPath;
          // add additional value filters to existing filters from the binding info
          values.forEach(value => {
            // update the value help binding info to get additional values from the backend
            filters.push(new Filter({
              path: propertyPath,
              value1: value,
              operator: "EQ"
            }));
          });
        }
      });
      return filters;
    },
    /**
     * This function returns a custom sorter which will be used to group additional values and also create Others group.
     *
     * @returns Custom Sorter containing different groups
     */
    getSorter: function () {
      // This sorter will return a custom sorter
      return new Sorter("", false, this.getSorterFunction);
    },
    /**
     * This function is a callback to the custom sorter.
     *
     * @param context Context of the Field
     * @returns Group key that can be used for sorting
     */
    getSorterFunction: function (context) {
      const resourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      //get the client side annotation to figure out the groupkey
      const groupKey = context.getProperty("@$fe.additionalValueGroupKey");
      if (groupKey === AdditionalValueGroupKey.recommendation) {
        return resourceBundle.getText("M_ADDITIONALVALUEHELPER_RECOMMENDATIONS");
      } else if (groupKey === AdditionalValueGroupKey.recentValue) {
        return resourceBundle.getText("M_ADDITIONALVALUEHELPER_RECENTVALUE");
      } else {
        return resourceBundle.getText("M_ADDITIONALVALUEHELPER_OTHERS");
      }
    },
    /**
     * This function is used to create transient contexts for the additional values.
     *
     * @param additionalValueContextData Array of Contexts created for additional values
     * @param reverseAdditionalValues Array of additional values in reverse order
     * @param valueHelpListBinding List Binding
     */
    createAdditionalValueTransientContexts: function (additionalValueContextData, reverseAdditionalValues, valueHelpListBinding) {
      if (additionalValueContextData.length > 0) {
        // recommendations exist in the valuehelp
        // now add transient context to the list binding per additional value group
        reverseAdditionalValues.forEach(additionalValue => {
          const values = additionalValue.values;
          const propertyPath = additionalValue.propertyPath;
          const groupKey = additionalValue.groupKey;
          //sorting and looping through the additionalValueContextData to create transient contexts
          this.sortAdditionalValueContextDataAndCreateContexts(additionalValueContextData, values, propertyPath, valueHelpListBinding, groupKey);
        });
      }
    },
    /**
     * This function is used to sort the additional value context data and create contexts.
     *
     * @param additionalValueContextData Array of Contexts created for additional values
     * @param values Array of values which are a part of additionalvalues
     * @param propertyPath Path pointing to the property of the field
     * @param valueHelpListBinding List Binding
     * @param groupKey AdditionalValueGroupKey
     */
    sortAdditionalValueContextDataAndCreateContexts: function (additionalValueContextData, values, propertyPath, valueHelpListBinding, groupKey) {
      [...values].reverse().forEach(value => {
        additionalValueContextData.forEach(contextData => {
          if (value === contextData[propertyPath]) {
            contextData["@$fe.additionalValueGroupKey"] = groupKey;
            valueHelpListBinding.create(contextData);
          }
        });
      });
    },
    /**
     * This function will remove the duplicate values which are a part of different additional value groups.
     *
     * @param additionalValueContextData Array of Contexts created for additional values
     * @param additionalValues Array of additional values
     * @returns Array of additional values which contain unique values in each group
     */
    removeDuplicateAdditionalValues: function (additionalValueContextData, additionalValues) {
      const uniqueAdditionalValues = [];
      //create a deep copy to make sure we dont alter the original additionalvalues
      additionalValues.forEach(additionalValue => {
        const values = [...additionalValue.values];
        const propertyPath = additionalValue.propertyPath;
        const groupKey = additionalValue.groupKey;
        uniqueAdditionalValues.push({
          values,
          propertyPath,
          groupKey
        });
      });
      //loop through the additionalValueContextData and uniqueAdditionalValues to see if there are any duplicates and then remove them
      additionalValueContextData.forEach(contextData => {
        let duplicateFlag = false;
        uniqueAdditionalValues.forEach(additionalValue => {
          const values = additionalValue.values;
          const propertyPath = additionalValue.propertyPath;
          if (values.includes(contextData[propertyPath])) {
            if (duplicateFlag) {
              // if we find a duplicate then remove it from the array
              values.splice(values.indexOf(contextData[propertyPath]), 1);
            } else {
              duplicateFlag = true;
            }
          }
        });
      });
      return uniqueAdditionalValues;
    },
    /**
     * This function is used to create filters to fetch values other than additional values.
     *
     * @param uniqueAdditionalValues Array of additional values which contain values which are unique to each group
     * @param valuehelpFilters Filters which are already a part of ValueHelp Binding
     * @returns Filters for Others group
     */
    createFiltersForOthersGroup: function (uniqueAdditionalValues, valuehelpFilters) {
      const filters = [];
      //create filters not equal to the values of uniqueAdditionalValues
      uniqueAdditionalValues.forEach(additionalValue => {
        const values = additionalValue.values;
        const propertyPath = additionalValue.propertyPath;
        values.forEach(value => {
          filters.push(new Filter({
            path: propertyPath,
            value1: value,
            operator: "NE"
          }));
        });
      });
      //set and to true for the uniqueAdditionalValues filters
      const uniqueAdditionalValuesFilters = new Filter({
        filters: filters,
        and: true
      });
      //check if filters are already present on valuehelpbinding and push uniqueAdditionalValuesFilters into the valuehelpbinding filters
      if (valuehelpFilters.length > 0) {
        valuehelpFilters.push(uniqueAdditionalValuesFilters);
        return new Filter({
          filters: valuehelpFilters,
          and: true
        });
      } else {
        //if no pre existing filters are present then return uniqueAdditionalValuesFilters
        return uniqueAdditionalValuesFilters;
      }
    },
    /**
     * This functions returns the relevant recommendations for the valuelist.
     *
     * @param data Object containing recommendation model data
     * @param bindingContext Binding context of the Field
     * @param propertyPath Property Path of the Field
     * @returns Relevant recommendations for the valuelist
     */
    getRelevantRecommendations: function (data, bindingContext, propertyPath) {
      const values = [];
      let relevantRecommendations;
      if (Object.keys(data).length > 0) {
        //get the right property path by eliminating the starting / and also main entityset name
        propertyPath = this.getRecommendationPropertyPath(propertyPath);
        //get the recommendations based on property path and binding context passed
        relevantRecommendations = this.getAdditionalValueFromPropertyPath(propertyPath, data, bindingContext);
        //if we get recommendations then push the values
        if (Object.keys(relevantRecommendations).length > 0) {
          relevantRecommendations.additionalValues.forEach(valueData => {
            values.push(valueData.value);
          });
          return values;
        } else {
          //if recommendations are not found then return null
          return null;
        }
      }
    },
    /**
     * This function is responsible to fetch the exact object from an array of objects that contains relevant recommendationData based on keys.
     *
     * @param recommendationData Array containing additional values
     * @param bindingContext Binding context of the Field
     * @returns Relevant object from an array of object that contains the additional value
     */
    getAdditionalValueFromKeys: function (recommendationData, bindingContext) {
      const contextData = bindingContext === null || bindingContext === void 0 ? void 0 : bindingContext.getObject();
      let result = {};
      //loop through the recommendationData and check if the keyProperties match with the binding context data
      if (bindingContext && contextData) {
        if (Array.isArray(recommendationData)) {
          recommendationData.forEach(recData => {
            const keyProperties = recData.keyProperties;
            let allKeysMatch = true;
            for (const key in keyProperties) {
              if (keyProperties[key] !== contextData[key]) {
                allKeysMatch = false;
                break;
              }
            }
            //if every key value matches with the binding context data then assign it to result which will be returned
            if (allKeysMatch) {
              result = recData;
            }
          });
        }
      }
      return result;
    },
    /**
     * This function is responsible for getting the additional value based on property path and binding context passed.
     *
     * @param propertyPath Property path of the field
     * @param recommendationData Object containing additional value
     * @param bindingContext Binding context of the field
     * @returns Additional value based on property path and binding context passed
     */
    getAdditionalValueFromPropertyPath: function (propertyPath, recommendationData, bindingContext) {
      //create a copy of the recommendationData to store its previous value as it will change because of the recursive approach
      let oldData = Object.assign(recommendationData, {});
      //check if property path exists on the recommendationData object and if so then return the object pointing to the property path
      if (Object.keys(recommendationData).includes(propertyPath)) {
        return recommendationData[propertyPath];
      } else {
        //if property path is not present then check if it is 1:n mapping and we need to do a recursive approach to land on the exact object containing the relevant recommendations
        //continue the while loop till the property path is found in the previous recommendationData
        while (Object.keys(oldData).length > 0 && !Object.keys(oldData).includes(propertyPath)) {
          // as it might be 1:n mapping so first seperate the navprop name and actual prop name to make sure we find the navprop first and then from its pointing object we find the property path
          //eg: _Item/Material will be first divided into _Item and we search for it and then from its relevant object we search for Material
          const propertyPaths = propertyPath.split("/");
          if (propertyPaths.length > 1) {
            //getting the navprop path
            const navPropPath = propertyPaths[0];
            //removing the navprop path from propertypaths so that we only check for actual property path
            propertyPaths.splice(0, 1);
            propertyPath = propertyPaths.join("/");
            //using getAdditionalValueFromPropertyPath and passing navPropPath we get the exact array of objects pointing to the navProp
            recommendationData = this.getAdditionalValueFromPropertyPath(navPropPath, recommendationData, bindingContext);
            //no pass the array of objects of navProp to getAdditionalValueFromKeys and get the exact object that contains the recommendationData based on keys
            recommendationData = this.getAdditionalValueFromKeys(recommendationData, bindingContext);
            if (Object.keys(recommendationData).length > 0) {
              //set the recommendationData to oldData before assigning the new value to it
              oldData = Object.assign(recommendationData, {});
              //here we check for the actual property path from the object we found from getAdditionalValueFromKeys
              //eg: Material can be found in the object which is part of array of objects of _Item
              recommendationData = this.getAdditionalValueFromPropertyPath(propertyPath, recommendationData, bindingContext);
            } else {
              return {};
            }
          } else {
            return {};
          }
        }
        return recommendationData;
      }
    },
    /**
     * This function returns the property path of the field by removing the leading '/' and main entity set name.
     *
     * @param propertyPath Property Path of the Field
     * @returns Property path of the field by removing the leading '/' and main entity set name.
     */
    getRecommendationPropertyPath: function (propertyPath) {
      //First we split the property path based on /
      const propertyPaths = propertyPath.split("/");
      //Now remove the first two elements of the array. As first element will always be '' and second element will be main entity set name
      propertyPaths.splice(0, 2);
      //Now join the remaining elements to create a new property path and return it
      return propertyPaths.join("/");
    },
    /**
     * This function checks if the listbinding contains transient contexts and they match the existing additional values. This is to ensure
     * we do not create duplicate transient contexts.
     *
     * @param listBinding List Binding
     * @param additionalValues Array of additional values which contain values which are unique to each group
     * @returns Boolean value which tells whether the list binding contains duplicate transient contexts or not
     */
    doesTransientContextsAlreadyExist: function (listBinding, additionalValues) {
      const contexts = listBinding.getAllCurrentContexts();
      let doesTransientContextExists = false;
      additionalValues.forEach(additionalValue => {
        const values = additionalValue.values;
        const propertyPath = additionalValue.propertyPath;
        //looping through the contexts to check if they are transient and contain values
        contexts.forEach(context => {
          const contextData = context.getObject();
          const isTransient = context.isTransient();
          //We check if the context is transient and has the value in it
          if (values.includes(contextData[propertyPath]) && isTransient === true) {
            doesTransientContextExists = true;
            return;
          }
        });
      });
      return doesTransientContextExists;
    }
  };
  _exports.additionalValueHelper = additionalValueHelper;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/AdditionalValueHelper", ["sap/ui/core/Core","sap/ui/model/Filter","sap/ui/model/FilterType","sap/ui/model/Sorter"],function(e,t,r,n){"use strict";var s={};var o;(function(e){e["recommendation"]="recommendation";e["recentValue"]="recentValue"})(o||(o={}));s.AdditionalValueGroupKey=o;const i={requestForAdditionalValueContextData:async function(e,t,r){const n=[...e].reverse();if(!t.isSuspended()){t.suspend()}if(r.parameters){t.changeParameters(r.parameters)}const s=r.parameters.$search;const o=this.getAdditionalValueFilters(n,[...this.getValueHelpBindingFilters(r)]);r.parameters.$search=s;const i=[this.getSorter()];const a=t.getModel().bindList(r.path,undefined,i,o,r.parameters);const l=await a.requestContexts();return l.map(e=>e.getObject())},getValueHelpBindingFilters:function(e){if(e.filters){if(Array.isArray(e.filters)){return e.filters}else{return[e.filters]}}return[]},resumeValueListBindingAndResetChanges:async function(e){if(e.isSuspended()){e.resume()}try{await e.resetChanges()}catch(e){}},sortAndFilterOthers:function(e,t,n){const s=this.createFiltersForOthersGroup(n,this.getValueHelpBindingFilters(t));e.filter([s],r.Application);e.sort(this.getSorter())},getAdditionalValueFilters:function(e,r){e.forEach(e=>{if(e.values.length>0){const n=e.values;const s=e.propertyPath;n.forEach(e=>{r.push(new t({path:s,value1:e,operator:"EQ"}))})}});return r},getSorter:function(){return new n("",false,this.getSorterFunction)},getSorterFunction:function(t){const r=e.getLibraryResourceBundle("sap.fe.macros");const n=t.getProperty("@$fe.additionalValueGroupKey");if(n===o.recommendation){return r.getText("M_ADDITIONALVALUEHELPER_RECOMMENDATIONS")}else if(n===o.recentValue){return r.getText("M_ADDITIONALVALUEHELPER_RECENTVALUE")}else{return r.getText("M_ADDITIONALVALUEHELPER_OTHERS")}},createAdditionalValueTransientContexts:function(e,t,r){if(e.length>0){t.forEach(t=>{const n=t.values;const s=t.propertyPath;const o=t.groupKey;this.sortAdditionalValueContextDataAndCreateContexts(e,n,s,r,o)})}},sortAdditionalValueContextDataAndCreateContexts:function(e,t,r,n,s){[...t].reverse().forEach(t=>{e.forEach(e=>{if(t===e[r]){e["@$fe.additionalValueGroupKey"]=s;n.create(e)}})})},removeDuplicateAdditionalValues:function(e,t){const r=[];t.forEach(e=>{const t=[...e.values];const n=e.propertyPath;const s=e.groupKey;r.push({values:t,propertyPath:n,groupKey:s})});e.forEach(e=>{let t=false;r.forEach(r=>{const n=r.values;const s=r.propertyPath;if(n.includes(e[s])){if(t){n.splice(n.indexOf(e[s]),1)}else{t=true}}})});return r},createFiltersForOthersGroup:function(e,r){const n=[];e.forEach(e=>{const r=e.values;const s=e.propertyPath;r.forEach(e=>{n.push(new t({path:s,value1:e,operator:"NE"}))})});const s=new t({filters:n,and:true});if(r.length>0){r.push(s);return new t({filters:r,and:true})}else{return s}},getRelevantRecommendations:function(e,t,r){const n=[];let s;if(Object.keys(e).length>0){r=this.getRecommendationPropertyPath(r);s=this.getAdditionalValueFromPropertyPath(r,e,t);if(Object.keys(s).length>0){s.additionalValues.forEach(e=>{n.push(e.value)});return n}else{return null}}},getAdditionalValueFromKeys:function(e,t){const r=t===null||t===void 0?void 0:t.getObject();let n={};if(t&&r){if(Array.isArray(e)){e.forEach(e=>{const t=e.keyProperties;let s=true;for(const e in t){if(t[e]!==r[e]){s=false;break}}if(s){n=e}})}}return n},getAdditionalValueFromPropertyPath:function(e,t,r){let n=Object.assign(t,{});if(Object.keys(t).includes(e)){return t[e]}else{while(Object.keys(n).length>0&&!Object.keys(n).includes(e)){const s=e.split("/");if(s.length>1){const o=s[0];s.splice(0,1);e=s.join("/");t=this.getAdditionalValueFromPropertyPath(o,t,r);t=this.getAdditionalValueFromKeys(t,r);if(Object.keys(t).length>0){n=Object.assign(t,{});t=this.getAdditionalValueFromPropertyPath(e,t,r)}else{return{}}}else{return{}}}return t}},getRecommendationPropertyPath:function(e){const t=e.split("/");t.splice(0,2);return t.join("/")},doesTransientContextsAlreadyExist:function(e,t){const r=e.getAllCurrentContexts();let n=false;t.forEach(e=>{const t=e.values;const s=e.propertyPath;r.forEach(e=>{const r=e.getObject();const o=e.isTransient();if(t.includes(r[s])&&o===true){n=true;return}})});return n}};s.additionalValueHelper=i;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/TableDelegate-dbg", ["sap/base/Log", "sap/base/util/deepEqual", "sap/fe/core/CommonUtils", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/type/EDM", "sap/fe/core/type/TypeUtil", "sap/fe/macros/DelegateUtil", "sap/fe/macros/internal/valuehelp/TableDelegateHelper", "sap/ui/core/Core", "sap/ui/mdc/odata/v4/TableDelegate", "sap/ui/mdc/odata/v4/util/DelegateUtil", "sap/ui/mdc/util/FilterUtil", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/Sorter"], function (Log, deepEqual, CommonUtils, FilterBar, MetaModelConverter, MetaModelFunction, ModelHelper, DataModelPathHelper, DisplayModeFormatter, PropertyHelper, EDM, TypeUtil, MacrosDelegateUtil, TableDelegateHelper, Core, TableDelegate, DelegateUtil, FilterUtil, Filter, FilterOperator, Sorter) {
  "use strict";

  var isSortableProperty = TableDelegateHelper.isSortableProperty;
  var isFilterableProperty = TableDelegateHelper.isFilterableProperty;
  var getPath = TableDelegateHelper.getPath;
  var isTypeFilterable = EDM.isTypeFilterable;
  var getLabel = PropertyHelper.getLabel;
  var getAssociatedUnitPropertyPath = PropertyHelper.getAssociatedUnitPropertyPath;
  var getAssociatedTimezonePropertyPath = PropertyHelper.getAssociatedTimezonePropertyPath;
  var getAssociatedTextPropertyPath = PropertyHelper.getAssociatedTextPropertyPath;
  var getAssociatedCurrencyPropertyPath = PropertyHelper.getAssociatedCurrencyPropertyPath;
  var getDisplayMode = DisplayModeFormatter.getDisplayMode;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isMultiValueFilterExpression = MetaModelFunction.isMultiValueFilterExpression;
  var getSortRestrictionsInfo = MetaModelFunction.getSortRestrictionsInfo;
  var getFilterRestrictionsInfo = MetaModelFunction.getFilterRestrictionsInfo;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var fetchTypeConfig = FilterBar.fetchTypeConfig;
  /**
   * Test delegate for OData V4.
   */
  const ODataTableDelegate = Object.assign({}, TableDelegate);

  /**
   * Fetches the relevant metadata for the table and returns property info array.
   *
   * @param table Instance of the MDCtable
   * @returns Array of property info
   */
  ODataTableDelegate.fetchProperties = async function (table) {
    const model = await this._getModel(table);
    const properties = await this._createPropertyInfos(table, model);
    ODataTableDelegate.createInternalBindingContext(table);
    MacrosDelegateUtil.setCachedProperties(table, properties);
    table.getBindingContext("internal").setProperty("tablePropertiesAvailable", true);
    return properties;
  };
  ODataTableDelegate.createInternalBindingContext = function (table) {
    let dialog = table;
    while (dialog && !dialog.isA("sap.ui.mdc.valuehelp.Dialog")) {
      dialog = dialog.getParent();
    }
    const internalModel = table.getModel("internal");
    if (dialog && internalModel) {
      const internalBindingContext = dialog.getBindingContext("internal");
      let newInternalBindingContextPath;
      if (internalBindingContext) {
        newInternalBindingContextPath = internalBindingContext.getPath() + `::VHDialog::${dialog.getId()}::table`;
      } else {
        newInternalBindingContextPath = `/buildingblocks/${table.getId()}`;
        internalModel.setProperty("/buildingblocks", {
          ...internalModel.getProperty("/buildingblocks")
        });
      }
      const newInternalBindingContext = internalModel.bindContext(newInternalBindingContextPath).getBoundContext();
      table.setBindingContext(newInternalBindingContext, "internal");
    }
  };

  /**
   * Collect related properties from a property's annotations.
   *
   * @param dataModelPropertyPath The model object path of the property.
   * @returns The related properties that were identified.
   * @private
   */
  function collectRelatedProperties(dataModelPropertyPath) {
    const dataModelAdditionalPropertyPath = getAdditionalProperty(dataModelPropertyPath);
    const relatedProperties = {};
    if (dataModelAdditionalPropertyPath !== null && dataModelAdditionalPropertyPath !== void 0 && dataModelAdditionalPropertyPath.targetObject) {
      var _property$annotations, _property$annotations2, _textAnnotation$annot, _textAnnotation$annot2, _textAnnotation$annot3;
      const additionalProperty = dataModelAdditionalPropertyPath.targetObject;
      const additionalPropertyPath = getTargetObjectPath(dataModelAdditionalPropertyPath, true);
      const property = dataModelPropertyPath.targetObject;
      const propertyPath = getTargetObjectPath(dataModelPropertyPath, true);
      const textAnnotation = (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Common) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.Text,
        textArrangement = textAnnotation === null || textAnnotation === void 0 ? void 0 : (_textAnnotation$annot = textAnnotation.annotations) === null || _textAnnotation$annot === void 0 ? void 0 : (_textAnnotation$annot2 = _textAnnotation$annot.UI) === null || _textAnnotation$annot2 === void 0 ? void 0 : (_textAnnotation$annot3 = _textAnnotation$annot2.TextArrangement) === null || _textAnnotation$annot3 === void 0 ? void 0 : _textAnnotation$annot3.toString(),
        displayMode = textAnnotation && textArrangement && getDisplayMode(property);
      if (displayMode === "Description") {
        relatedProperties[additionalPropertyPath] = additionalProperty;
      } else if (displayMode && displayMode !== "Value" || !textAnnotation) {
        relatedProperties[propertyPath] = property;
        relatedProperties[additionalPropertyPath] = additionalProperty;
      }
    }
    return relatedProperties;
  }
  ODataTableDelegate._createPropertyInfos = function (table, model) {
    const metadataInfo = table.getDelegate().payload;
    const properties = [];
    const entitySetPath = `/${metadataInfo.collectionName}`;
    const metaModel = model.getMetaModel();
    return metaModel.requestObject(`${entitySetPath}@`).then(function (entitySetAnnotations) {
      const sortRestrictionsInfo = getSortRestrictionsInfo(entitySetAnnotations);
      const filterRestrictions = entitySetAnnotations["@Org.OData.Capabilities.V1.FilterRestrictions"];
      const filterRestrictionsInfo = getFilterRestrictionsInfo(filterRestrictions);
      const customDataForColumns = MacrosDelegateUtil.getCustomData(table, "columns");
      const propertiesToBeCreated = {};
      const dataModelEntityPath = getInvolvedDataModelObjects(table.getModel().getMetaModel().getContext(entitySetPath));
      customDataForColumns.customData.forEach(function (columnDef) {
        const propertyInfo = {
          name: columnDef.path,
          label: columnDef.label,
          sortable: isSortableProperty(sortRestrictionsInfo, columnDef),
          filterable: isFilterableProperty(filterRestrictionsInfo, columnDef),
          maxConditions: getPropertyMaxConditions(filterRestrictionsInfo, columnDef),
          typeConfig: isTypeFilterable(columnDef.$Type) ? table.getTypeUtil().getTypeConfig(columnDef.$Type) : undefined
        };
        const dataModelPropertyPath = enhanceDataModelPath(dataModelEntityPath, columnDef.path);
        const property = dataModelPropertyPath.targetObject;
        if (property) {
          const targetPropertyPath = getTargetObjectPath(dataModelPropertyPath, true);
          let typeConfig;
          if (isTypeFilterable(property.type)) {
            const propertyTypeConfig = fetchTypeConfig(property);
            typeConfig = TypeUtil.getTypeConfig(propertyTypeConfig.type ?? "", propertyTypeConfig.formatOptions, propertyTypeConfig.constraints) ?? table.getTypeUtil().getTypeConfig(columnDef.$Type);
          }
          //Check if there is an additional property linked to the property as a Unit, Currency, Timezone or textArrangement
          const relatedPropertiesInfo = collectRelatedProperties(dataModelPropertyPath);
          const relatedPropertyPaths = Object.keys(relatedPropertiesInfo);
          if (relatedPropertyPaths.length) {
            propertyInfo.propertyInfos = relatedPropertyPaths;
            //Complex properties must be hidden for sorting and filtering
            propertyInfo.sortable = false;
            propertyInfo.filterable = false;
            // Collect information of related columns to be created.
            relatedPropertyPaths.forEach(path => {
              propertiesToBeCreated[path] = relatedPropertiesInfo[path];
            });
            // Also add property for the inOut Parameters on the ValueHelp when textArrangement is set to #TextOnly
            // It will not be linked to the complex Property (BCP 2270141154)
            if (!relatedPropertyPaths.find(path => relatedPropertiesInfo[path] === property)) {
              propertiesToBeCreated[targetPropertyPath] = property;
            }
          } else {
            propertyInfo.path = columnDef.path;
          }
          propertyInfo.typeConfig = propertyInfo.typeConfig ? typeConfig : undefined;
        } else {
          propertyInfo.path = columnDef.path;
        }
        properties.push(propertyInfo);
      });
      const relatedColumns = createRelatedProperties(propertiesToBeCreated, properties, sortRestrictionsInfo, filterRestrictionsInfo);
      return properties.concat(relatedColumns);
    });
  };

  /**
   * Updates the binding info with the relevant path and model from the metadata.
   *
   * @param oMDCTable The MDCTable instance
   * @param oBindingInfo The bindingInfo of the table
   */
  ODataTableDelegate.updateBindingInfo = function (oMDCTable, oBindingInfo) {
    TableDelegate.updateBindingInfo.apply(this, [oMDCTable, oBindingInfo]);
    if (!oMDCTable) {
      return;
    }
    const oMetadataInfo = oMDCTable.getDelegate().payload;
    if (oMetadataInfo && oBindingInfo) {
      oBindingInfo.path = oBindingInfo.path || oMetadataInfo.collectionPath || `/${oMetadataInfo.collectionName}`;
      oBindingInfo.model = oBindingInfo.model || oMetadataInfo.model;
    }
    if (!oBindingInfo) {
      oBindingInfo = {};
    }
    const oFilter = Core.byId(oMDCTable.getFilter()),
      bFilterEnabled = oMDCTable.isFilteringEnabled();
    let mConditions;
    let oInnerFilterInfo, oOuterFilterInfo;
    const aFilters = [];
    const tableProperties = MacrosDelegateUtil.getCachedProperties(oMDCTable);

    //TODO: consider a mechanism ('FilterMergeUtil' or enhance 'FilterUtil') to allow the connection between different filters)
    if (bFilterEnabled) {
      mConditions = oMDCTable.getConditions();
      oInnerFilterInfo = FilterUtil.getFilterInfo(oMDCTable, mConditions, tableProperties, []);
      if (oInnerFilterInfo.filters) {
        aFilters.push(oInnerFilterInfo.filters);
      }
    }
    if (oFilter) {
      mConditions = oFilter.getConditions();
      if (mConditions) {
        const aParameterNames = DelegateUtil.getParameterNames(oFilter);
        // The table properties needs to updated with the filter field if no Selectionfierlds are annotated and not part as value help parameter
        ODataTableDelegate._updatePropertyInfo(tableProperties, oMDCTable, mConditions, oMetadataInfo);
        oOuterFilterInfo = FilterUtil.getFilterInfo(oFilter, mConditions, tableProperties, aParameterNames);
        if (oOuterFilterInfo.filters) {
          aFilters.push(oOuterFilterInfo.filters);
        }
        const sParameterPath = DelegateUtil.getParametersInfo(oFilter, mConditions);
        if (sParameterPath) {
          oBindingInfo.path = sParameterPath;
        }
      }

      // get the basic search
      oBindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(oFilter.getSearch()) || undefined;
    }
    this._applyDefaultSorting(oBindingInfo, oMDCTable.getDelegate().payload);
    // add select to oBindingInfo (BCP 2170163012)
    oBindingInfo.parameters.$select = tableProperties === null || tableProperties === void 0 ? void 0 : tableProperties.reduce(function (sQuery, oProperty) {
      // Navigation properties (represented by X/Y) should not be added to $select.
      // ToDo : They should be added as $expand=X($select=Y) instead
      if (oProperty.path && oProperty.path.indexOf("/") === -1) {
        sQuery = sQuery ? `${sQuery},${oProperty.path}` : oProperty.path;
      }
      return sQuery;
    }, "");

    // Add $count
    oBindingInfo.parameters.$count = true;

    //If the entity is DraftEnabled add a DraftFilter
    if (ModelHelper.isDraftSupported(oMDCTable.getModel().getMetaModel(), oBindingInfo.path)) {
      aFilters.push(new Filter("IsActiveEntity", FilterOperator.EQ, true));
    }
    oBindingInfo.filters = new Filter(aFilters, true);
  };
  ODataTableDelegate.getTypeUtil = function /*oPayload*/
  () {
    return TypeUtil;
  };

  /**
   * Get table Model.
   *
   * @param table Instance of the MDCtable
   * @returns Model
   */
  ODataTableDelegate._getModel = async function (table) {
    const metadataInfo = table.getDelegate().payload;
    let model = table.getModel(metadataInfo.model);
    if (!model) {
      await new Promise(resolve => {
        table.attachEventOnce("modelContextChange", resolve);
      });
      model = table.getModel(metadataInfo.model);
    }
    return model;
  };

  /**
   * Applies a default sort order if needed. This is only the case if the request is not a $search request
   * (means the parameter $search of the bindingInfo is undefined) and if not already a sort order is set,
   * e.g. via presentation variant or manual by the user.
   *
   * @param oBindingInfo The bindingInfo of the table
   * @param oPayload The payload of the TableDelegate
   */
  ODataTableDelegate._applyDefaultSorting = function (oBindingInfo, oPayload) {
    if (oBindingInfo.parameters && oBindingInfo.parameters.$search == undefined && oBindingInfo.sorter && oBindingInfo.sorter.length == 0) {
      const defaultSortPropertyName = oPayload ? oPayload.defaultSortPropertyName : undefined;
      if (defaultSortPropertyName) {
        oBindingInfo.sorter.push(new Sorter(defaultSortPropertyName, false));
      }
    }
  };

  /**
   * Updates the table properties with filter field infos.
   *
   * @param aTableProperties Array with table properties
   * @param oMDCTable The MDCTable instance
   * @param mConditions The conditions of the table
   * @param oMetadataInfo The metadata info of the filter field
   */
  ODataTableDelegate._updatePropertyInfo = function (aTableProperties, oMDCTable, mConditions, oMetadataInfo) {
    const aConditionKey = Object.keys(mConditions),
      oMetaModel = oMDCTable.getModel().getMetaModel();
    aConditionKey.forEach(function (conditionKey) {
      if (aTableProperties.findIndex(function (tableProperty) {
        return tableProperty.path === conditionKey;
      }) === -1) {
        const oColumnDef = {
          path: conditionKey,
          typeConfig: oMDCTable.getTypeUtil().getTypeConfig(oMetaModel.getObject(`/${oMetadataInfo.collectionName}/${conditionKey}`).$Type)
        };
        aTableProperties.push(oColumnDef);
      }
    });
  };
  ODataTableDelegate.updateBinding = function (oTable, oBindingInfo, oBinding) {
    let bNeedManualRefresh = false;
    const oInternalBindingContext = oTable.getBindingContext("internal");
    const sManualUpdatePropertyKey = "pendingManualBindingUpdate";
    const bPendingManualUpdate = oInternalBindingContext === null || oInternalBindingContext === void 0 ? void 0 : oInternalBindingContext.getProperty(sManualUpdatePropertyKey);
    let oRowBinding = oTable.getRowBinding();

    //oBinding=null means that a rebinding needs to be forced via updateBinding in mdc TableDelegate
    TableDelegate.updateBinding.apply(ODataTableDelegate, [oTable, oBindingInfo, oBinding]);
    //get row binding after rebind from TableDelegate.updateBinding in case oBinding was null
    if (!oRowBinding) {
      oRowBinding = oTable.getRowBinding();
    }
    if (oRowBinding) {
      /**
       * Manual refresh if filters are not changed by binding.refresh() since updating the bindingInfo
       * is not enough to trigger a batch request.
       * Removing columns creates one batch request that was not executed before
       */
      const oldFilters = oRowBinding.getFilters("Application");
      bNeedManualRefresh = deepEqual(oBindingInfo.filters, oldFilters[0]) && oRowBinding.getQueryOptionsFromParameters().$search === oBindingInfo.parameters.$search && !bPendingManualUpdate;
    }
    if (bNeedManualRefresh && oTable.getFilter()) {
      oInternalBindingContext === null || oInternalBindingContext === void 0 ? void 0 : oInternalBindingContext.setProperty(sManualUpdatePropertyKey, true);
      oRowBinding.requestRefresh(oRowBinding.getGroupId()).finally(function () {
        oInternalBindingContext === null || oInternalBindingContext === void 0 ? void 0 : oInternalBindingContext.setProperty(sManualUpdatePropertyKey, false);
      }).catch(function (oError) {
        Log.error("Error while refreshing a filterBar VH table", oError);
      });
    }
    oTable.fireEvent("bindingUpdated");
    //no need to check for semantic targets here since we are in a VH and don't want to allow further navigation
  };

  /**
   * Creates a simple property for each identified complex property.
   *
   * @param propertiesToBeCreated Identified properties.
   * @param existingColumns The list of columns created for properties defined on the Value List.
   * @param sortRestrictionsInfo An object containing the sort restriction information
   * @param filterRestrictionsInfo An object containing the filter restriction information
   * @returns The array of properties created.
   * @private
   */
  function createRelatedProperties(propertiesToBeCreated, existingColumns, sortRestrictionsInfo, filterRestrictionsInfo) {
    const relatedPropertyNameMap = {},
      relatedColumns = [];
    Object.keys(propertiesToBeCreated).forEach(path => {
      const property = propertiesToBeCreated[path],
        relatedColumn = existingColumns.find(column => column.path === path); // Complex properties doesn't get path so only simple column are found
      if (!relatedColumn) {
        const newName = `Property::${path}`;
        relatedPropertyNameMap[path] = newName;
        const valueHelpTableColumn = {
          name: newName,
          label: getLabel(property),
          path: path,
          sortable: isSortableProperty(sortRestrictionsInfo, property),
          filterable: isFilterableProperty(filterRestrictionsInfo, property)
        };
        valueHelpTableColumn.maxConditions = getPropertyMaxConditions(filterRestrictionsInfo, valueHelpTableColumn);
        if (isTypeFilterable(property.type)) {
          const propertyTypeConfig = fetchTypeConfig(property);
          valueHelpTableColumn.typeConfig = TypeUtil.getTypeConfig(propertyTypeConfig.type ?? "", propertyTypeConfig.formatOptions, propertyTypeConfig.constraints);
        }
        relatedColumns.push(valueHelpTableColumn);
      }
    });
    // The property 'name' has been prefixed with 'Property::' for uniqueness.
    // Update the same in other propertyInfos[] references which point to this property.
    existingColumns.forEach(column => {
      if (column.propertyInfos) {
        var _column$propertyInfos;
        column.propertyInfos = (_column$propertyInfos = column.propertyInfos) === null || _column$propertyInfos === void 0 ? void 0 : _column$propertyInfos.map(columnName => relatedPropertyNameMap[columnName] ?? columnName);
      }
    });
    return relatedColumns;
  }

  /**
   * Identifies the maxConditions for a given property.
   *
   * @param filterRestrictionsInfo The filter restriction information from the restriction annotation.
   * @param property The target property.
   * @returns `-1` or `1` if the property is a MultiValueFilterExpression.
   * @private
   */

  function getPropertyMaxConditions(filterRestrictionsInfo, property) {
    var _filterRestrictionsIn;
    const propertyPath = getPath(property);
    return (_filterRestrictionsIn = filterRestrictionsInfo.propertyInfo) !== null && _filterRestrictionsIn !== void 0 && _filterRestrictionsIn.hasOwnProperty(propertyPath) && propertyPath && isMultiValueFilterExpression(filterRestrictionsInfo.propertyInfo[propertyPath]) ? -1 : 1;
  }

  /**
   * Identifies the additional property which references to the unit, timezone, textArrangement or currency.
   *
   * @param dataModelPropertyPath The model object path of the property.
   * @returns The additional property.
   * @private
   */
  function getAdditionalProperty(dataModelPropertyPath) {
    const property = dataModelPropertyPath.targetObject;
    const additionalPropertyPath = getAssociatedTextPropertyPath(property) || getAssociatedCurrencyPropertyPath(property) || getAssociatedUnitPropertyPath(property) || getAssociatedTimezonePropertyPath(property);
    if (!additionalPropertyPath) {
      return undefined;
    }
    const dataModelAdditionalProperty = enhanceDataModelPath(dataModelPropertyPath, additionalPropertyPath);

    //Additional Property could refer to a navigation property, keep the name and path as navigation property
    const additionalProperty = dataModelAdditionalProperty.targetObject;
    if (!additionalProperty) {
      return undefined;
    }
    return dataModelAdditionalProperty;
  }
  return ODataTableDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/TableDelegate", ["sap/base/Log","sap/base/util/deepEqual","sap/fe/core/CommonUtils","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/DisplayModeFormatter","sap/fe/core/templating/PropertyHelper","sap/fe/core/type/EDM","sap/fe/core/type/TypeUtil","sap/fe/macros/DelegateUtil","sap/fe/macros/internal/valuehelp/TableDelegateHelper","sap/ui/core/Core","sap/ui/mdc/odata/v4/TableDelegate","sap/ui/mdc/odata/v4/util/DelegateUtil","sap/ui/mdc/util/FilterUtil","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/Sorter"],function(e,t,n,o,r,i,a,s,l,c,p,f,d,g,u,y,h,v,m,b,P){"use strict";var C=g.isSortableProperty;var M=g.isFilterableProperty;var I=g.getPath;var T=p.isTypeFilterable;var D=c.getLabel;var O=c.getAssociatedUnitPropertyPath;var $=c.getAssociatedTimezonePropertyPath;var x=c.getAssociatedTextPropertyPath;var F=c.getAssociatedCurrencyPropertyPath;var B=l.getDisplayMode;var j=s.getTargetObjectPath;var E=s.enhanceDataModelPath;var U=i.isMultiValueFilterExpression;var w=i.getSortRestrictionsInfo;var S=i.getFilterRestrictionsInfo;var A=r.getInvolvedDataModelObjects;var _=o.fetchTypeConfig;const R=Object.assign({},y);R.fetchProperties=async function(e){const t=await this._getModel(e);const n=await this._createPropertyInfos(e,t);R.createInternalBindingContext(e);d.setCachedProperties(e,n);e.getBindingContext("internal").setProperty("tablePropertiesAvailable",true);return n};R.createInternalBindingContext=function(e){let t=e;while(t&&!t.isA("sap.ui.mdc.valuehelp.Dialog")){t=t.getParent()}const n=e.getModel("internal");if(t&&n){const o=t.getBindingContext("internal");let r;if(o){r=o.getPath()+`::VHDialog::${t.getId()}::table`}else{r=`/buildingblocks/${e.getId()}`;n.setProperty("/buildingblocks",{...n.getProperty("/buildingblocks")})}const i=n.bindContext(r).getBoundContext();e.setBindingContext(i,"internal")}};function k(e){const t=V(e);const n={};if(t!==null&&t!==void 0&&t.targetObject){var o,r,i,a,s;const l=t.targetObject;const c=j(t,true);const p=e.targetObject;const f=j(e,true);const d=(o=p.annotations)===null||o===void 0?void 0:(r=o.Common)===null||r===void 0?void 0:r.Text,g=d===null||d===void 0?void 0:(i=d.annotations)===null||i===void 0?void 0:(a=i.UI)===null||a===void 0?void 0:(s=a.TextArrangement)===null||s===void 0?void 0:s.toString(),u=d&&g&&B(p);if(u==="Description"){n[c]=l}else if(u&&u!=="Value"||!d){n[f]=p;n[c]=l}}return n}R._createPropertyInfos=function(e,t){const n=e.getDelegate().payload;const o=[];const r=`/${n.collectionName}`;const i=t.getMetaModel();return i.requestObject(`${r}@`).then(function(t){const n=w(t);const i=t["@Org.OData.Capabilities.V1.FilterRestrictions"];const a=S(i);const s=d.getCustomData(e,"columns");const l={};const c=A(e.getModel().getMetaModel().getContext(r));s.customData.forEach(function(t){const r={name:t.path,label:t.label,sortable:C(n,t),filterable:M(a,t),maxConditions:N(a,t),typeConfig:T(t.$Type)?e.getTypeUtil().getTypeConfig(t.$Type):undefined};const i=E(c,t.path);const s=i.targetObject;if(s){const n=j(i,true);let o;if(T(s.type)){const n=_(s);o=f.getTypeConfig(n.type??"",n.formatOptions,n.constraints)??e.getTypeUtil().getTypeConfig(t.$Type)}const a=k(i);const c=Object.keys(a);if(c.length){r.propertyInfos=c;r.sortable=false;r.filterable=false;c.forEach(e=>{l[e]=a[e]});if(!c.find(e=>a[e]===s)){l[n]=s}}else{r.path=t.path}r.typeConfig=r.typeConfig?o:undefined}else{r.path=t.path}o.push(r)});const p=H(l,o,n,a);return o.concat(p)})};R.updateBindingInfo=function(e,t){y.updateBindingInfo.apply(this,[e,t]);if(!e){return}const o=e.getDelegate().payload;if(o&&t){t.path=t.path||o.collectionPath||`/${o.collectionName}`;t.model=t.model||o.model}if(!t){t={}}const r=u.byId(e.getFilter()),i=e.isFilteringEnabled();let s;let l,c;const p=[];const f=d.getCachedProperties(e);if(i){s=e.getConditions();l=v.getFilterInfo(e,s,f,[]);if(l.filters){p.push(l.filters)}}if(r){s=r.getConditions();if(s){const n=h.getParameterNames(r);R._updatePropertyInfo(f,e,s,o);c=v.getFilterInfo(r,s,f,n);if(c.filters){p.push(c.filters)}const i=h.getParametersInfo(r,s);if(i){t.path=i}}t.parameters.$search=n.normalizeSearchTerm(r.getSearch())||undefined}this._applyDefaultSorting(t,e.getDelegate().payload);t.parameters.$select=f===null||f===void 0?void 0:f.reduce(function(e,t){if(t.path&&t.path.indexOf("/")===-1){e=e?`${e},${t.path}`:t.path}return e},"");t.parameters.$count=true;if(a.isDraftSupported(e.getModel().getMetaModel(),t.path)){p.push(new m("IsActiveEntity",b.EQ,true))}t.filters=new m(p,true)};R.getTypeUtil=function(){return f};R._getModel=async function(e){const t=e.getDelegate().payload;let n=e.getModel(t.model);if(!n){await new Promise(t=>{e.attachEventOnce("modelContextChange",t)});n=e.getModel(t.model)}return n};R._applyDefaultSorting=function(e,t){if(e.parameters&&e.parameters.$search==undefined&&e.sorter&&e.sorter.length==0){const n=t?t.defaultSortPropertyName:undefined;if(n){e.sorter.push(new P(n,false))}}};R._updatePropertyInfo=function(e,t,n,o){const r=Object.keys(n),i=t.getModel().getMetaModel();r.forEach(function(n){if(e.findIndex(function(e){return e.path===n})===-1){const r={path:n,typeConfig:t.getTypeUtil().getTypeConfig(i.getObject(`/${o.collectionName}/${n}`).$Type)};e.push(r)}})};R.updateBinding=function(n,o,r){let i=false;const a=n.getBindingContext("internal");const s="pendingManualBindingUpdate";const l=a===null||a===void 0?void 0:a.getProperty(s);let c=n.getRowBinding();y.updateBinding.apply(R,[n,o,r]);if(!c){c=n.getRowBinding()}if(c){const e=c.getFilters("Application");i=t(o.filters,e[0])&&c.getQueryOptionsFromParameters().$search===o.parameters.$search&&!l}if(i&&n.getFilter()){a===null||a===void 0?void 0:a.setProperty(s,true);c.requestRefresh(c.getGroupId()).finally(function(){a===null||a===void 0?void 0:a.setProperty(s,false)}).catch(function(t){e.error("Error while refreshing a filterBar VH table",t)})}n.fireEvent("bindingUpdated")};function H(e,t,n,o){const r={},i=[];Object.keys(e).forEach(a=>{const s=e[a],l=t.find(e=>e.path===a);if(!l){const e=`Property::${a}`;r[a]=e;const t={name:e,label:D(s),path:a,sortable:C(n,s),filterable:M(o,s)};t.maxConditions=N(o,t);if(T(s.type)){const e=_(s);t.typeConfig=f.getTypeConfig(e.type??"",e.formatOptions,e.constraints)}i.push(t)}});t.forEach(e=>{if(e.propertyInfos){var t;e.propertyInfos=(t=e.propertyInfos)===null||t===void 0?void 0:t.map(e=>r[e]??e)}});return i}function N(e,t){var n;const o=I(t);return(n=e.propertyInfo)!==null&&n!==void 0&&n.hasOwnProperty(o)&&o&&U(e.propertyInfo[o])?-1:1}function V(e){const t=e.targetObject;const n=x(t)||F(t)||O(t)||$(t);if(!n){return undefined}const o=E(e,n);const r=o.targetObject;if(!r){return undefined}return o}return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/TableDelegateHelper-dbg", ["sap/fe/core/helpers/TypeGuards"], function (TypeGuards) {
  "use strict";

  var _exports = {};
  var isProperty = TypeGuards.isProperty;
  /**
   * Identifies if the given property is filterable based on the sort restriction information.
   *
   * @param filterRestrictionsInfo The filter restriction information from the restriction annotation.
   * @param property The target property.
   * @returns `true` if the given property is filterable.
   * @private
   */
  function isFilterableProperty(filterRestrictionsInfo, property) {
    const propertyPath = getPath(property);
    return propertyPath && filterRestrictionsInfo !== null && filterRestrictionsInfo !== void 0 && filterRestrictionsInfo.propertyInfo.hasOwnProperty(propertyPath) ? filterRestrictionsInfo.propertyInfo[propertyPath].filterable : property.filterable ?? true;
  }

  /**
   * Identifies if the given property is sortable based on the sort restriction information.
   *
   * @param sortRestrictionsInfo The sort restriction information from the restriction annotation.
   * @param property The target property.
   * @returns `true` if the given property is sortable.
   * @private
   */
  _exports.isFilterableProperty = isFilterableProperty;
  function isSortableProperty(sortRestrictionsInfo, property) {
    const propertyPath = getPath(property);
    return propertyPath && sortRestrictionsInfo.propertyInfo[propertyPath] ? sortRestrictionsInfo.propertyInfo[propertyPath].sortable : property.sortable ?? true;
  }

  /**
   * Provides the property path of a given property or custom data from the ValueHelp.
   *
   * @param property The target property or custom data from the ValueHelp.
   * @returns The property path.
   */
  _exports.isSortableProperty = isSortableProperty;
  function getPath(property) {
    return isProperty(property) ? property.name : property.path;
  }
  _exports.getPath = getPath;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/TableDelegateHelper", ["sap/fe/core/helpers/TypeGuards"],function(r){"use strict";var e={};var t=r.isProperty;function o(r,e){const t=p(e);return t&&r!==null&&r!==void 0&&r.propertyInfo.hasOwnProperty(t)?r.propertyInfo[t].filterable:e.filterable??true}e.isFilterableProperty=o;function n(r,e){const t=p(e);return t&&r.propertyInfo[t]?r.propertyInfo[t].sortable:e.sortable??true}e.isSortableProperty=n;function p(r){return t(r)?r.name:r.path}e.getPath=p;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/ValueHelpTemplating-dbg", ["sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/internal/valuehelp/AdditionalValueFormatter"], function (BindingToolkit, StableIdHelper, TypeGuards, DataModelPathHelper, PropertyHelper, UIFormatters, FieldHelper, additionalValueFormatter) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var isUnit = PropertyHelper.isUnit;
  var isSemanticKey = PropertyHelper.isSemanticKey;
  var isGuid = PropertyHelper.isGuid;
  var isCurrency = PropertyHelper.isCurrency;
  var hasValueListForValidation = PropertyHelper.hasValueListForValidation;
  var hasValueHelpWithFixedValues = PropertyHelper.hasValueHelpWithFixedValues;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasDateType = PropertyHelper.hasDateType;
  var checkFilterExpressionRestrictions = DataModelPathHelper.checkFilterExpressionRestrictions;
  var isProperty = TypeGuards.isProperty;
  var generate = StableIdHelper.generate;
  var pathInModel = BindingToolkit.pathInModel;
  var formatResult = BindingToolkit.formatResult;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  /**
   * Retrieve the displayMode for the value help.
   * The main rule is that if a property is used in a VHTable then we don't want to display the text arrangement directly.
   *
   * @param propertyPath The current property
   * @param isValueHelpWithFixedValues The value help is a drop-down list
   * @returns The target displayMode
   */
  const getValueHelpTableDisplayMode = function (propertyPath, isValueHelpWithFixedValues) {
    var _propertyPath$targetO, _propertyPath$targetO2, _oTextAnnotation$anno, _oTextAnnotation$anno2, _oTextAnnotation$anno3;
    const sDisplayMode = getDisplayMode(propertyPath);
    const oTextAnnotation = (_propertyPath$targetO = propertyPath.targetObject.annotations) === null || _propertyPath$targetO === void 0 ? void 0 : (_propertyPath$targetO2 = _propertyPath$targetO.Common) === null || _propertyPath$targetO2 === void 0 ? void 0 : _propertyPath$targetO2.Text;
    const oTextArrangementAnnotation = typeof oTextAnnotation !== "string" && (oTextAnnotation === null || oTextAnnotation === void 0 ? void 0 : (_oTextAnnotation$anno = oTextAnnotation.annotations) === null || _oTextAnnotation$anno === void 0 ? void 0 : (_oTextAnnotation$anno2 = _oTextAnnotation$anno.UI) === null || _oTextAnnotation$anno2 === void 0 ? void 0 : (_oTextAnnotation$anno3 = _oTextAnnotation$anno2.TextArrangement) === null || _oTextAnnotation$anno3 === void 0 ? void 0 : _oTextAnnotation$anno3.toString());
    if (isValueHelpWithFixedValues) {
      return oTextAnnotation && typeof oTextAnnotation !== "string" && oTextAnnotation.path ? sDisplayMode : "Value";
    } else {
      // Only explicit defined TextArrangements in a Value Help with Dialog are considered
      return oTextArrangementAnnotation ? sDisplayMode : "Value";
    }
  };

  /**
   * Method to return delegate property of Value Help.
   *
   * @function
   * @name getDelegateConfiguration
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param propertyPath The current property path
   * @param conditionModelName Condition model of the Value Help
   * @param originalPropertyPath The original property path
   * @param requestGroupId The requestGroupId to use for requests
   * @param useMultiValueField If true the value help is for a multi value Field
   * @returns The expression needed to configure the delegate
   */
  _exports.getValueHelpTableDisplayMode = getValueHelpTableDisplayMode;
  const getDelegateConfiguration = function (propertyPath, conditionModelName, originalPropertyPath, requestGroupId) {
    let useMultiValueField = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    const isUnitValueHelp = propertyPath !== originalPropertyPath;
    const delegateConfiguration = {
      name: "sap/fe/macros/valuehelp/ValueHelpDelegate",
      payload: {
        propertyPath,
        isUnitValueHelp,
        conditionModel: conditionModelName,
        requestGroupId,
        useMultiValueField,
        qualifiers: {},
        valueHelpQualifier: ""
      }
    };
    return compileExpression(delegateConfiguration); // for some reason "qualifiers: {}" is ignored here
  };

  /**
   * Method to generate the ID for Value Help.
   *
   * @function
   * @name generateID
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param sFlexId Flex ID of the current object
   * @param sIdPrefix Prefix for the ValueHelp ID
   * @param sOriginalPropertyName Name of the property
   * @param sPropertyName Name of the ValueHelp Property
   * @returns The Id generated for the ValueHelp
   */
  _exports.getDelegateConfiguration = getDelegateConfiguration;
  const generateID = function (sFlexId, sIdPrefix, sOriginalPropertyName, sPropertyName) {
    if (sFlexId) {
      return sFlexId;
    }
    let sProperty = sPropertyName;
    if (sOriginalPropertyName !== sPropertyName) {
      sProperty = `${sOriginalPropertyName}::${sPropertyName}`;
    }
    return generate([sIdPrefix, sProperty]);
  };

  /**
   * Method to check if a property needs to be validated or not when used in the valuehelp.
   *
   * @function
   * @name requiresValidation
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param  property ValueHelp property type annotations
   * @returns `true` if the value help needs to be validated
   */
  _exports.generateID = generateID;
  const requiresValidation = function (property) {
    return hasValueHelpWithFixedValues(property) || hasValueListForValidation(property) || hasValueHelp(property) && (isUnit(property) || isCurrency(property) || isGuid(property));
  };

  /**
   * Method to decide if case-sensitive filter requests are to be used or not.
   *
   *  If the back end has FilterFunctions Capabilies for the service or the entity, we check it includes support for tolower.
   *
   * @function
   * @name useCaseSensitiveFilterRequests
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param oDataModelPath Current data model path·
   * @param aEntityContainerFilterFunctions Filter functions of entity container
   * @returns `true` if the entity set or service supports case sensitive filter requests
   */
  _exports.requiresValidation = requiresValidation;
  const useCaseSensitiveFilterRequests = function (oDataModelPath, aEntityContainerFilterFunctions) {
    var _oDataModelPath$targe, _oDataModelPath$targe2, _oDataModelPath$targe3;
    const filterFunctions = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : (_oDataModelPath$targe = oDataModelPath.targetEntitySet) === null || _oDataModelPath$targe === void 0 ? void 0 : (_oDataModelPath$targe2 = _oDataModelPath$targe.annotations) === null || _oDataModelPath$targe2 === void 0 ? void 0 : (_oDataModelPath$targe3 = _oDataModelPath$targe2.Capabilities) === null || _oDataModelPath$targe3 === void 0 ? void 0 : _oDataModelPath$targe3.FilterFunctions) || aEntityContainerFilterFunctions;
    return filterFunctions ? !(filterFunctions.indexOf("tolower") > -1) : true;
  };
  _exports.useCaseSensitiveFilterRequests = useCaseSensitiveFilterRequests;
  const isSemanticDateRange = function (oDataModelPath) {
    const targetProperty = oDataModelPath.targetObject;
    const targetRestrictions = checkFilterExpressionRestrictions(oDataModelPath, ["SingleRange"]);
    return hasDateType(targetProperty) && compileExpression(targetRestrictions);
  };
  _exports.isSemanticDateRange = isSemanticDateRange;
  const shouldShowConditionPanel = function (oDataModelPath, oContextPath) {
    // Force push the context path inside
    oDataModelPath.contextLocation = oContextPath;
    return compileExpression(checkFilterExpressionRestrictions(oDataModelPath, ["SingleValue", "MultiValue"])) === "false";
  };
  _exports.shouldShowConditionPanel = shouldShowConditionPanel;
  const getColumnDataProperty = function (sValueListProperty, propertyPath) {
    var _propertyPath$targetO3, _propertyPath$targetO4, _propertyPath$targetO5, _textAnnotation$annot, _textAnnotation$annot2, _textAnnotation$annot3;
    const textAnnotation = propertyPath === null || propertyPath === void 0 ? void 0 : (_propertyPath$targetO3 = propertyPath.targetObject) === null || _propertyPath$targetO3 === void 0 ? void 0 : (_propertyPath$targetO4 = _propertyPath$targetO3.annotations) === null || _propertyPath$targetO4 === void 0 ? void 0 : (_propertyPath$targetO5 = _propertyPath$targetO4.Common) === null || _propertyPath$targetO5 === void 0 ? void 0 : _propertyPath$targetO5.Text;
    return (textAnnotation === null || textAnnotation === void 0 ? void 0 : (_textAnnotation$annot = textAnnotation.annotations) === null || _textAnnotation$annot === void 0 ? void 0 : (_textAnnotation$annot2 = _textAnnotation$annot.UI) === null || _textAnnotation$annot2 === void 0 ? void 0 : (_textAnnotation$annot3 = _textAnnotation$annot2.TextArrangement) === null || _textAnnotation$annot3 === void 0 ? void 0 : _textAnnotation$annot3.valueOf()) === "UI.TextArrangementType/TextOnly" ? textAnnotation.path : sValueListProperty;
  };
  _exports.getColumnDataProperty = getColumnDataProperty;
  const getColumnDataPropertyType = function (valueListPropertyType, propertyPath) {
    var _propertyPath$targetO6, _propertyPath$targetO7, _propertyPath$targetO8, _propertyPath$targetO9, _propertyPath$targetO10, _propertyPath$targetO11;
    const textArrangement = propertyPath === null || propertyPath === void 0 ? void 0 : (_propertyPath$targetO6 = propertyPath.targetObject) === null || _propertyPath$targetO6 === void 0 ? void 0 : (_propertyPath$targetO7 = _propertyPath$targetO6.annotations) === null || _propertyPath$targetO7 === void 0 ? void 0 : (_propertyPath$targetO8 = _propertyPath$targetO7.Common) === null || _propertyPath$targetO8 === void 0 ? void 0 : (_propertyPath$targetO9 = _propertyPath$targetO8.Text) === null || _propertyPath$targetO9 === void 0 ? void 0 : (_propertyPath$targetO10 = _propertyPath$targetO9.annotations) === null || _propertyPath$targetO10 === void 0 ? void 0 : (_propertyPath$targetO11 = _propertyPath$targetO10.UI) === null || _propertyPath$targetO11 === void 0 ? void 0 : _propertyPath$targetO11.TextArrangement;
    return textArrangement && textArrangement.valueOf() !== "UI.TextArrangementType/TextSeparate" ? "Edm.String" : valueListPropertyType;
  };
  const getColumnHAlign = function (propertyPath) {
    const property = propertyPath.targetObject;
    const propertyType = isProperty(property) ? getColumnDataPropertyType(property.type, propertyPath) : "";
    return !propertyType || isSemanticKey(property, propertyPath) ? "Begin" : FieldHelper.getPropertyAlignment(propertyType, {
      textAlignMode: "Table"
    });
  };
  /**
   *
   * @function
   * @name getGrowingFormatter
   * @memberof sap.fe.macros.internal.valuehelp.ValueHelpTemplating.js
   * @param  propertyPath PropertyPath of the Field
   * @returns Runtime formatter for growing and growingThreshold
   */
  _exports.getColumnHAlign = getColumnHAlign;
  const getGrowingFormatter = function (propertyPath) {
    return compileExpression(formatResult([pathInModel("/recommendationsData", "internal"), constant(propertyPath)], additionalValueFormatter.getGrowing));
  };
  _exports.getGrowingFormatter = getGrowingFormatter;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/ValueHelpTemplating", ["sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/field/FieldHelper","sap/fe/macros/internal/valuehelp/AdditionalValueFormatter"],function(e,t,n,o,i,a,l,r){"use strict";var s={};var u=a.getDisplayMode;var d=i.isUnit;var v=i.isSemanticKey;var c=i.isGuid;var p=i.isCurrency;var g=i.hasValueListForValidation;var f=i.hasValueHelpWithFixedValues;var m=i.hasValueHelp;var h=i.hasDateType;var y=o.checkFilterExpressionRestrictions;var T=n.isProperty;var x=t.generate;var V=e.pathInModel;var F=e.formatResult;var H=e.constant;var S=e.compileExpression;const C=function(e,t){var n,o,i,a,l;const r=u(e);const s=(n=e.targetObject.annotations)===null||n===void 0?void 0:(o=n.Common)===null||o===void 0?void 0:o.Text;const d=typeof s!=="string"&&(s===null||s===void 0?void 0:(i=s.annotations)===null||i===void 0?void 0:(a=i.UI)===null||a===void 0?void 0:(l=a.TextArrangement)===null||l===void 0?void 0:l.toString());if(t){return s&&typeof s!=="string"&&s.path?r:"Value"}else{return d?r:"Value"}};s.getValueHelpTableDisplayMode=C;const D=function(e,t,n,o){let i=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;const a=e!==n;const l={name:"sap/fe/macros/valuehelp/ValueHelpDelegate",payload:{propertyPath:e,isUnitValueHelp:a,conditionModel:t,requestGroupId:o,useMultiValueField:i,qualifiers:{},valueHelpQualifier:""}};return S(l)};s.getDelegateConfiguration=D;const I=function(e,t,n,o){if(e){return e}let i=o;if(n!==o){i=`${n}::${o}`}return x([t,i])};s.generateID=I;const b=function(e){return f(e)||g(e)||m(e)&&(d(e)||p(e)||c(e))};s.requiresValidation=b;const A=function(e,t){var n,o,i;const a=(e===null||e===void 0?void 0:(n=e.targetEntitySet)===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Capabilities)===null||i===void 0?void 0:i.FilterFunctions)||t;return a?!(a.indexOf("tolower")>-1):true};s.useCaseSensitiveFilterRequests=A;const O=function(e){const t=e.targetObject;const n=y(e,["SingleRange"]);return h(t)&&S(n)};s.isSemanticDateRange=O;const M=function(e,t){e.contextLocation=t;return S(y(e,["SingleValue","MultiValue"]))==="false"};s.shouldShowConditionPanel=M;const U=function(e,t){var n,o,i,a,l,r;const s=t===null||t===void 0?void 0:(n=t.targetObject)===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Text;return(s===null||s===void 0?void 0:(a=s.annotations)===null||a===void 0?void 0:(l=a.UI)===null||l===void 0?void 0:(r=l.TextArrangement)===null||r===void 0?void 0:r.valueOf())==="UI.TextArrangementType/TextOnly"?s.path:e};s.getColumnDataProperty=U;const P=function(e,t){var n,o,i,a,l,r;const s=t===null||t===void 0?void 0:(n=t.targetObject)===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:(a=i.Text)===null||a===void 0?void 0:(l=a.annotations)===null||l===void 0?void 0:(r=l.UI)===null||r===void 0?void 0:r.TextArrangement;return s&&s.valueOf()!=="UI.TextArrangementType/TextSeparate"?"Edm.String":e};const j=function(e){const t=e.targetObject;const n=T(t)?P(t.type,e):"";return!n||v(t,e)?"Begin":l.getPropertyAlignment(n,{textAlignMode:"Table"})};s.getColumnHAlign=j;const G=function(e){return S(F([V("/recommendationsData","internal"),H(e)],r.getGrowing))};s.getGrowingFormatter=G;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/ValueListHelper-dbg", ["sap/base/Log", "sap/base/util/ObjectPath", "sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/m/table/Util", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/dom/units/Rem", "sap/ui/mdc/valuehelp/content/Conditions", "sap/ui/mdc/valuehelp/content/MDCTable", "sap/ui/mdc/valuehelp/content/MTable", "sap/ui/model/json/JSONModel"], function (Log, ObjectPath, CommonUtils, MetaModelConverter, MetaModelFunction, PropertyHelper, UIFormatters, Util, Fragment, XMLPreprocessor, XMLTemplateProcessor, Rem, Conditions, MDCTable, MTable, JSONModel) {
  "use strict";

  var _exports = {};
  var getTypeConfig = UIFormatters.getTypeConfig;
  var getDisplayMode = UIFormatters.getDisplayMode;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getAssociatedTimezoneProperty = PropertyHelper.getAssociatedTimezoneProperty;
  var getAssociatedTextProperty = PropertyHelper.getAssociatedTextProperty;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var isPropertyFilterable = MetaModelFunction.isPropertyFilterable;
  var getSortRestrictionsInfo = MetaModelFunction.getSortRestrictionsInfo;
  var convertTypes = MetaModelConverter.convertTypes;
  var Level = Log.Level;
  const columnNotAlreadyDefined = (columnDefs, vhKey) => !columnDefs.some(column => column.path === vhKey);
  const AnnotationLabel = "@com.sap.vocabularies.Common.v1.Label",
    AnnotationText = "@com.sap.vocabularies.Common.v1.Text",
    AnnotationTextUITextArrangement = "@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement",
    AnnotationValueListParameterIn = "com.sap.vocabularies.Common.v1.ValueListParameterIn",
    AnnotationValueListParameterConstant = "com.sap.vocabularies.Common.v1.ValueListParameterConstant",
    AnnotationValueListParameterOut = "com.sap.vocabularies.Common.v1.ValueListParameterOut",
    AnnotationValueListParameterInOut = "com.sap.vocabularies.Common.v1.ValueListParameterInOut",
    AnnotationValueListWithFixedValues = "@com.sap.vocabularies.Common.v1.ValueListWithFixedValues";
  _exports.AnnotationLabel = AnnotationLabel;
  _exports.AnnotationValueListWithFixedValues = AnnotationValueListWithFixedValues;
  _exports.AnnotationValueListParameterInOut = AnnotationValueListParameterInOut;
  _exports.AnnotationValueListParameterOut = AnnotationValueListParameterOut;
  _exports.AnnotationValueListParameterConstant = AnnotationValueListParameterConstant;
  _exports.AnnotationValueListParameterIn = AnnotationValueListParameterIn;
  _exports.AnnotationTextUITextArrangement = AnnotationTextUITextArrangement;
  _exports.AnnotationText = AnnotationText;
  function _getDefaultSortPropertyName(valueListInfo) {
    let sortFieldName;
    const metaModel = valueListInfo.$model.getMetaModel();
    const entitySetAnnotations = metaModel.getObject(`/${valueListInfo.CollectionPath}@`) || {};
    const sortRestrictionsInfo = getSortRestrictionsInfo(entitySetAnnotations);
    const foundElement = valueListInfo.Parameters.find(function (element) {
      return (element.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || element.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterOut" || element.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly") && !(metaModel.getObject(`/${valueListInfo.CollectionPath}/${element.ValueListProperty}@com.sap.vocabularies.UI.v1.Hidden`) === true);
    });
    if (foundElement) {
      if (metaModel.getObject(`/${valueListInfo.CollectionPath}/${foundElement.ValueListProperty}@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember`) === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly") {
        sortFieldName = metaModel.getObject(`/${valueListInfo.CollectionPath}/${foundElement.ValueListProperty}@com.sap.vocabularies.Common.v1.Text/$Path`);
      } else {
        sortFieldName = foundElement.ValueListProperty;
      }
    }
    if (sortFieldName && (!sortRestrictionsInfo.propertyInfo[sortFieldName] || sortRestrictionsInfo.propertyInfo[sortFieldName].sortable)) {
      return sortFieldName;
    } else {
      return undefined;
    }
  }
  function _redundantDescription(oVLParameter, aColumnInfo) {
    const oColumnInfo = aColumnInfo.find(function (columnInfo) {
      return oVLParameter.ValueListProperty === columnInfo.textColumnName;
    });
    if (oVLParameter.ValueListProperty === (oColumnInfo === null || oColumnInfo === void 0 ? void 0 : oColumnInfo.textColumnName) && !oColumnInfo.keyColumnHidden && oColumnInfo.keyColumnDisplayFormat !== "Value") {
      return true;
    }
    return undefined;
  }
  function _hasImportanceHigh(oValueListContext) {
    return oValueListContext.Parameters.some(function (oParameter) {
      return oParameter["@com.sap.vocabularies.UI.v1.Importance"] && oParameter["@com.sap.vocabularies.UI.v1.Importance"].$EnumMember === "com.sap.vocabularies.UI.v1.ImportanceType/High";
    });
  }
  function _build$SelectString(control) {
    const oViewData = control.getModel("viewData");
    if (oViewData) {
      const oData = oViewData.getData();
      if (oData) {
        const aColumns = oData.columns;
        if (aColumns) {
          return aColumns.reduce(function (sQuery, oProperty) {
            // Navigation properties (represented by X/Y) should not be added to $select.
            // TODO : They should be added as $expand=X($select=Y) instead
            if (oProperty.path && oProperty.path.indexOf("/") === -1) {
              sQuery = sQuery ? `${sQuery},${oProperty.path}` : oProperty.path;
            }
            return sQuery;
          }, undefined);
        }
      }
    }
    return undefined;
  }
  function _getValueHelpColumnDisplayFormat(oPropertyAnnotations, isValueHelpWithFixedValues) {
    const sDisplayMode = CommonUtils.computeDisplayMode(oPropertyAnnotations, undefined);
    const oTextAnnotation = oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"];
    const oTextArrangementAnnotation = oTextAnnotation && oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"];
    if (isValueHelpWithFixedValues) {
      return oTextAnnotation && typeof oTextAnnotation !== "string" && oTextAnnotation.$Path ? sDisplayMode : "Value";
    } else {
      // Only explicit defined TextArrangements in a Value Help with Dialog are considered
      return oTextArrangementAnnotation ? sDisplayMode : "Value";
    }
  }
  const ValueListHelper = {
    getValueListCollectionEntitySet: function (oValueListContext) {
      const mValueList = oValueListContext.getObject();
      return mValueList.$model.getMetaModel().createBindingContext(`/${mValueList.CollectionPath}`);
    },
    getTableDelegate: function (oValueList) {
      let sDefaultSortPropertyName = _getDefaultSortPropertyName(oValueList);
      if (sDefaultSortPropertyName) {
        sDefaultSortPropertyName = `'${sDefaultSortPropertyName}'`;
      }
      return "{name: 'sap/fe/macros/internal/valuehelp/TableDelegate', payload: {collectionName: '" + oValueList.CollectionPath + "'" + (sDefaultSortPropertyName ? ", defaultSortPropertyName: " + sDefaultSortPropertyName : "") + "}}";
    },
    getSortConditionsFromPresentationVariant: function (valueListInfo, isSuggestion) {
      if (valueListInfo.PresentationVariantQualifier !== undefined) {
        const presentationVariantQualifier = valueListInfo.PresentationVariantQualifier ? `#${valueListInfo.PresentationVariantQualifier}` : "",
          presentationVariantPath = `/${valueListInfo.CollectionPath}/@com.sap.vocabularies.UI.v1.PresentationVariant${presentationVariantQualifier}`;
        const presentationVariant = valueListInfo.$model.getMetaModel().getObject(presentationVariantPath);
        if (presentationVariant !== null && presentationVariant !== void 0 && presentationVariant.SortOrder) {
          const sortConditions = {
            sorters: []
          };
          presentationVariant.SortOrder.forEach(function (condition) {
            var _condition$Property;
            const sorter = {},
              propertyPath = condition === null || condition === void 0 ? void 0 : (_condition$Property = condition.Property) === null || _condition$Property === void 0 ? void 0 : _condition$Property.$PropertyPath;
            if (isSuggestion) {
              sorter.path = propertyPath;
            } else {
              sorter.name = propertyPath;
            }
            if (condition.Descending) {
              sorter.descending = true;
            } else {
              sorter.ascending = true;
            }
            sortConditions.sorters.push(sorter);
          });
          return isSuggestion ? `sorter: ${JSON.stringify(sortConditions.sorters)}` : JSON.stringify(sortConditions);
        }
      }
      return;
    },
    getPropertyPath: function (oParameters) {
      return !oParameters.UnboundAction ? `${oParameters.EntityTypePath}/${oParameters.Action}/${oParameters.Property}` : `/${oParameters.Action.substring(oParameters.Action.lastIndexOf(".") + 1)}/${oParameters.Property}`;
    },
    getValueListProperty: function (oPropertyContext) {
      const oValueListModel = oPropertyContext.getModel();
      const mValueList = oValueListModel.getObject("/");
      return mValueList.$model.getMetaModel().createBindingContext(`/${mValueList.CollectionPath}/${oPropertyContext.getObject()}`);
    },
    // This function is used for value help m-table and mdc-table
    getColumnVisibility: function (oValueList, oVLParameter, oSource) {
      const isDropDownList = oSource && !!oSource.valueHelpWithFixedValues,
        oColumnInfo = oSource.columnInfo,
        isVisible = !_redundantDescription(oVLParameter, oColumnInfo.columnInfos),
        isDialogTable = oColumnInfo.isDialogTable;
      if (isDropDownList || !isDropDownList && isDialogTable || !isDropDownList && !_hasImportanceHigh(oValueList)) {
        const columnWithHiddenAnnotation = oColumnInfo.columnInfos.find(function (columnInfo) {
          return oVLParameter.ValueListProperty === columnInfo.columnName && columnInfo.hasHiddenAnnotation === true;
        });
        return !columnWithHiddenAnnotation ? isVisible : false;
      } else if (!isDropDownList && _hasImportanceHigh(oValueList)) {
        return oVLParameter && oVLParameter["@com.sap.vocabularies.UI.v1.Importance"] && oVLParameter["@com.sap.vocabularies.UI.v1.Importance"].$EnumMember === "com.sap.vocabularies.UI.v1.ImportanceType/High" ? true : false;
      }
      return true;
    },
    getColumnVisibilityInfo: function (oValueList, sPropertyFullPath, bIsDropDownListe, isDialogTable) {
      const oMetaModel = oValueList.$model.getMetaModel();
      const aColumnInfos = [];
      const oColumnInfos = {
        isDialogTable: isDialogTable,
        columnInfos: aColumnInfos
      };
      oValueList.Parameters.forEach(function (oParameter) {
        const oPropertyAnnotations = oMetaModel.getObject(`/${oValueList.CollectionPath}/${oParameter.ValueListProperty}@`);
        const oTextAnnotation = oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"];
        let columnInfo = {};
        if (oTextAnnotation) {
          columnInfo = {
            keyColumnHidden: oPropertyAnnotations["@com.sap.vocabularies.UI.v1.Hidden"] ? true : false,
            keyColumnDisplayFormat: oTextAnnotation && _getValueHelpColumnDisplayFormat(oPropertyAnnotations, bIsDropDownListe),
            textColumnName: oTextAnnotation && oTextAnnotation.$Path,
            columnName: oParameter.ValueListProperty,
            hasHiddenAnnotation: oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.UI.v1.Hidden"] ? true : false
          };
        } else if (oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.UI.v1.Hidden"]) {
          columnInfo = {
            columnName: oParameter.ValueListProperty,
            hasHiddenAnnotation: oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.UI.v1.Hidden"] ? true : false
          };
        }
        oColumnInfos.columnInfos.push(columnInfo);
      });
      return oColumnInfos;
    },
    getTableItemsParameters: function (valueListInfo, requestGroupId, isSuggestion, isValueHelpWithFixedValues) {
      const itemParameters = [`path: '/${valueListInfo.CollectionPath}'`];

      // add select to oBindingInfo (BCP 2180255956 / 2170163012)
      const selectString = _build$SelectString(this);

      // since there could be recommendations/recent values to show in the suggestion popover
      // hence we need to create some transient contexts on the valueHelp list binding
      // so we will set the updateGroupId of the list binding to avoid sending calls to the backend
      // we need to explicitly set $$sharedRequest to false to make sure we can create transient contexts in RAP
      if (requestGroupId) {
        const selectStringPart = selectString ? `, '${selectString}'` : "";
        itemParameters.push(`parameters: {$$sharedRequest: false, $$updateGroupId: "donotsubmit", $$groupId: '${requestGroupId}'${selectStringPart}}`);
      } else if (selectString) {
        itemParameters.push(`parameters: {$$sharedRequest: false, $$updateGroupId: "donotsubmit", $select: '${selectString}'}`);
      }
      const isSuspended = valueListInfo.Parameters.some(function (oParameter) {
        return isSuggestion || oParameter.$Type === "com.sap.vocabularies.Common.v1.ValueListParameterIn";
      });
      itemParameters.push(`suspended: ${isSuspended}`);
      if (!isValueHelpWithFixedValues) {
        itemParameters.push("length: 10");
      }
      const sortConditionsFromPresentationVariant = ValueListHelper.getSortConditionsFromPresentationVariant(valueListInfo, isSuggestion);
      if (sortConditionsFromPresentationVariant) {
        itemParameters.push(sortConditionsFromPresentationVariant);
      } else if (isValueHelpWithFixedValues) {
        const defaultSortPropertyName = _getDefaultSortPropertyName(valueListInfo);
        if (defaultSortPropertyName) {
          itemParameters.push(`sorter: [{path: '${defaultSortPropertyName}', ascending: true}]`);
        }
      }
      return "{" + itemParameters.join(", ") + "}";
    },
    // Is needed for "external" representation in qunit
    hasImportance: function (oValueListContext) {
      return _hasImportanceHigh(oValueListContext.getObject()) ? "Importance/High" : "None";
    },
    // Is needed for "external" representation in qunit
    getMinScreenWidth: function (oValueList) {
      return _hasImportanceHigh(oValueList) ? "{= ${_VHUI>/minScreenWidth}}" : "416px";
    },
    /**
     * Retrieves the column width for a given property.
     *
     * @param propertyPath The propertyPath
     * @returns The width as a string.
     */
    getColumnWidth: function (propertyPath) {
      var _property$annotations, _property$annotations2, _textAnnotation$annot, _textAnnotation$annot2, _textAnnotation$annot3, _property$annotations3, _property$annotations4, _property$annotations5;
      const property = propertyPath.targetObject;
      let relatedProperty = [property];
      // The additional property could refer to the text, currency, unit or timezone
      const additionalProperty = getAssociatedTextProperty(property) || getAssociatedCurrencyProperty(property) || getAssociatedUnitProperty(property) || getAssociatedTimezoneProperty(property),
        textAnnotation = (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Common) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.Text,
        textArrangement = textAnnotation === null || textAnnotation === void 0 ? void 0 : (_textAnnotation$annot = textAnnotation.annotations) === null || _textAnnotation$annot === void 0 ? void 0 : (_textAnnotation$annot2 = _textAnnotation$annot.UI) === null || _textAnnotation$annot2 === void 0 ? void 0 : (_textAnnotation$annot3 = _textAnnotation$annot2.TextArrangement) === null || _textAnnotation$annot3 === void 0 ? void 0 : _textAnnotation$annot3.toString(),
        label = (_property$annotations3 = property.annotations) === null || _property$annotations3 === void 0 ? void 0 : (_property$annotations4 = _property$annotations3.Common) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.Label) === null || _property$annotations5 === void 0 ? void 0 : _property$annotations5.toString(),
        displayMode = textArrangement && getDisplayMode(propertyPath);
      if (additionalProperty) {
        if (displayMode === "Description") {
          relatedProperty = [additionalProperty];
        } else if (!textAnnotation || displayMode && displayMode !== "Value") {
          relatedProperty.push(additionalProperty);
        }
      }
      let size = 0;
      const instances = [];
      relatedProperty.forEach(prop => {
        const propertyTypeConfig = getTypeConfig(prop, undefined);
        const PropertyODataConstructor = ObjectPath.get(propertyTypeConfig.type);
        if (PropertyODataConstructor) {
          instances.push(new PropertyODataConstructor(propertyTypeConfig.formatOptions, propertyTypeConfig.constraints));
        }
      });
      const sWidth = Util.calcColumnWidth(instances, label);
      size = sWidth ? parseFloat(sWidth.replace("rem", "")) : 0;
      if (size === 0) {
        Log.error(`Cannot compute the column width for property: ${property.name}`);
      }
      return size <= 20 ? size.toString() + "rem" : "20rem";
    },
    getOutParameterPaths: function (aParameters) {
      let sPath = "";
      aParameters.forEach(function (oParameter) {
        if (oParameter.$Type.endsWith("Out")) {
          sPath += `{${oParameter.ValueListProperty}}`;
        }
      });
      return sPath;
    },
    entityIsSearchable: function (propertyAnnotations, collectionAnnotations) {
      var _propertyAnnotations$, _collectionAnnotation;
      const searchSupported = (_propertyAnnotations$ = propertyAnnotations["@com.sap.vocabularies.Common.v1.ValueList"]) === null || _propertyAnnotations$ === void 0 ? void 0 : _propertyAnnotations$.SearchSupported,
        searchable = (_collectionAnnotation = collectionAnnotations["@Org.OData.Capabilities.V1.SearchRestrictions"]) === null || _collectionAnnotation === void 0 ? void 0 : _collectionAnnotation.Searchable;
      if (searchable === undefined && searchSupported === false || searchable === true && searchSupported === false || searchable === false) {
        return false;
      }
      return true;
    },
    /**
     * Returns the condition path required for the condition model.
     * For e.g. <1:N-PropertyName>*\/<1:1-PropertyName>/<PropertyName>.
     *
     * @param metaModel The metamodel instance
     * @param entitySet The entity set path
     * @param propertyPath The property path
     * @returns The formatted condition path
     * @private
     */
    _getConditionPath: function (metaModel, entitySet, propertyPath) {
      // (see also: sap/fe/core/converters/controls/ListReport/FilterBar.ts)
      const parts = propertyPath.split("/");
      let conditionPath = "",
        partialPath;
      while (parts.length) {
        let part = parts.shift();
        partialPath = partialPath ? `${partialPath}/${part}` : part;
        const property = metaModel.getObject(`${entitySet}/${partialPath}`);
        if (property && property.$kind === "NavigationProperty" && property.$isCollection) {
          part += "*";
        }
        conditionPath = conditionPath ? `${conditionPath}/${part}` : part;
      }
      return conditionPath;
    },
    /**
     * Returns array of column definitions corresponding to properties defined as Selection Fields on the CollectionPath entity set in a ValueHelp.
     *
     * @param metaModel The metamodel instance
     * @param entitySet The entity set path
     * @returns Array of column definitions
     * @private
     */
    _getColumnDefinitionFromSelectionFields: function (metaModel, entitySet) {
      const columnDefs = [],
        entityTypeAnnotations = metaModel.getObject(`${entitySet}/@`),
        selectionFields = entityTypeAnnotations["@com.sap.vocabularies.UI.v1.SelectionFields"];
      if (selectionFields) {
        selectionFields.forEach(function (selectionField) {
          var _metaModel$getObject;
          const selectionFieldPath = `${entitySet}/${selectionField.$PropertyPath}`,
            conditionPath = ValueListHelper._getConditionPath(metaModel, entitySet, selectionField.$PropertyPath),
            propertyAnnotations = metaModel.getObject(`${selectionFieldPath}@`),
            columnDef = {
              path: conditionPath,
              label: propertyAnnotations[AnnotationLabel] || selectionFieldPath,
              sortable: true,
              filterable: isPropertyFilterable(metaModel, entitySet, selectionField.$PropertyPath, false),
              $Type: (_metaModel$getObject = metaModel.getObject(selectionFieldPath)) === null || _metaModel$getObject === void 0 ? void 0 : _metaModel$getObject.$Type
            };
          columnDefs.push(columnDef);
        });
      }
      return columnDefs;
    },
    _mergeColumnDefinitionsFromProperties: function (columnDefs, valueListInfo, valueListProperty, property, propertyAnnotations) {
      var _propertyAnnotations$2;
      let columnPath = valueListProperty,
        columnPropertyType = property.$Type;
      const label = propertyAnnotations[AnnotationLabel] || columnPath,
        textAnnotation = propertyAnnotations[AnnotationText];
      if (textAnnotation && ((_propertyAnnotations$2 = propertyAnnotations[AnnotationTextUITextArrangement]) === null || _propertyAnnotations$2 === void 0 ? void 0 : _propertyAnnotations$2.$EnumMember) === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly") {
        // the column property is the one coming from the text annotation
        columnPath = textAnnotation.$Path;
        const textPropertyPath = `/${valueListInfo.CollectionPath}/${columnPath}`;
        columnPropertyType = valueListInfo.$model.getMetaModel().getObject(textPropertyPath).$Type;
      }
      if (columnNotAlreadyDefined(columnDefs, columnPath)) {
        const columnDef = {
          path: columnPath,
          label: label,
          sortable: true,
          filterable: !propertyAnnotations["@com.sap.vocabularies.UI.v1.HiddenFilter"],
          $Type: columnPropertyType
        };
        columnDefs.push(columnDef);
      }
    },
    filterInOutParameters: function (vhParameters, typeFilter) {
      return vhParameters.filter(function (parameter) {
        return typeFilter.indexOf(parameter.parmeterType) > -1;
      });
    },
    getInParameters: function (vhParameters) {
      return ValueListHelper.filterInOutParameters(vhParameters, [AnnotationValueListParameterIn, AnnotationValueListParameterConstant, AnnotationValueListParameterInOut]);
    },
    getOutParameters: function (vhParameters) {
      return ValueListHelper.filterInOutParameters(vhParameters, [AnnotationValueListParameterOut, AnnotationValueListParameterInOut]);
    },
    createVHUIModel: function (valueHelp, propertyPath, metaModel) {
      // setting the _VHUI model evaluated in the ValueListTable fragment
      const vhUIModel = new JSONModel({}),
        propertyAnnotations = metaModel.getObject(`${propertyPath}@`);
      valueHelp.setModel(vhUIModel, "_VHUI");
      // Identifies the "ContextDependent-Scenario"
      vhUIModel.setProperty("/hasValueListRelevantQualifiers", !!propertyAnnotations["@com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"]);
      /* Property label for dialog title */
      vhUIModel.setProperty("/propertyLabel", propertyAnnotations[AnnotationLabel]);
      return vhUIModel;
    },
    /**
     * Returns the title of the value help dialog.
     * By default, the data field label is used, otherwise either the property label or the value list label is used as a fallback.
     * For context-dependent value helps, by default the value list label is used, otherwise either the property label or the data field label is used as a fallback.
     *
     * @param valueHelp The valueHelp instance
     * @param valuehelpLabel The label in the value help metadata
     * @returns The title for the valueHelp dialog
     * @private
     */
    _getDialogTitle: function (valueHelp, valuehelpLabel) {
      var _valueHelp$getControl;
      const propertyLabel = valueHelp.getModel("_VHUI").getProperty("/propertyLabel");
      const dataFieldLabel = (_valueHelp$getControl = valueHelp.getControl()) === null || _valueHelp$getControl === void 0 ? void 0 : _valueHelp$getControl.getProperty("label");
      return valueHelp.getModel("_VHUI").getProperty("/hasValueListRelevantQualifiers") ? valuehelpLabel || propertyLabel || dataFieldLabel : dataFieldLabel || propertyLabel || valuehelpLabel;
    },
    destroyVHContent: function (valueHelp) {
      if (valueHelp.getDialog()) {
        valueHelp.getDialog().destroyContent();
      }
      if (valueHelp.getTypeahead()) {
        valueHelp.getTypeahead().destroyContent();
      }
    },
    putDefaultQualifierFirst: function (qualifiers) {
      const indexDefaultVH = qualifiers.indexOf("");

      // default ValueHelp without qualifier should be the first
      if (indexDefaultVH > 0) {
        qualifiers.unshift(qualifiers[indexDefaultVH]);
        qualifiers.splice(indexDefaultVH + 1, 1);
      }
      return qualifiers;
    },
    _getContextPrefix: function (bindingContext, propertyBindingParts) {
      if (bindingContext && bindingContext.getPath()) {
        const bindigContextParts = bindingContext.getPath().split("/");
        if (propertyBindingParts.length - bindigContextParts.length > 1) {
          const contextPrefixParts = [];
          for (let i = bindigContextParts.length; i < propertyBindingParts.length - 1; i++) {
            contextPrefixParts.push(propertyBindingParts[i]);
          }
          return `${contextPrefixParts.join("/")}/`;
        }
      }
      return "";
    },
    _getVhParameter: function (conditionModel, valueHelp, contextPrefix, parameter, vhMetaModel, localDataPropertyPath) {
      let valuePath = "";
      const bindingContext = valueHelp.getBindingContext();
      if (conditionModel && conditionModel.length > 0) {
        var _valueHelp$getParent;
        if ((_valueHelp$getParent = valueHelp.getParent()) !== null && _valueHelp$getParent !== void 0 && _valueHelp$getParent.isA("sap.ui.mdc.Table") && bindingContext && ValueListHelper._parameterIsA(parameter, ["com.sap.vocabularies.Common.v1.ValueListParameterIn", "com.sap.vocabularies.Common.v1.ValueListParameterInOut"])) {
          // Special handling for value help used in filter dialog
          const parts = localDataPropertyPath.split("/");
          if (parts.length > 1) {
            const firstNavigationProperty = parts[0];
            const oBoundEntity = vhMetaModel.getMetaContext(bindingContext.getPath());
            const sPathOfTable = valueHelp.getParent().getRowBinding().getPath(); //TODO
            if (oBoundEntity.getObject(`${sPathOfTable}/$Partner`) === firstNavigationProperty) {
              // Using the condition model doesn't make any sense in case an in-parameter uses a navigation property
              // referring to the partner. Therefore reducing the path and using the FVH context instead of the condition model
              valuePath = localDataPropertyPath.replace(firstNavigationProperty + "/", "");
            }
          }
        }
        if (!valuePath) {
          valuePath = conditionModel + ">/conditions/" + localDataPropertyPath;
        }
      } else {
        valuePath = contextPrefix + localDataPropertyPath;
      }
      return {
        parmeterType: parameter.$Type,
        source: valuePath,
        helpPath: parameter.ValueListProperty,
        constantValue: parameter.Constant,
        initialValueFilterEmpty: Boolean(parameter.InitialValueIsSignificant)
      };
    },
    _parameterIsA(parameter, parameterTypes) {
      return parameterTypes.includes(parameter.$Type);
    },
    _enrichPath: function (path, propertyPath, localDataPropertyPath, parameter, propertyName, propertyAnnotations) {
      if (!path.key && ValueListHelper._parameterIsA(parameter, ["com.sap.vocabularies.Common.v1.ValueListParameterOut", "com.sap.vocabularies.Common.v1.ValueListParameterInOut"]) && localDataPropertyPath === propertyName) {
        var _propertyAnnotations$3;
        path.fieldPropertyPath = propertyPath;
        path.key = parameter.ValueListProperty;

        //Only the text annotation of the key can specify the description
        path.descriptionPath = ((_propertyAnnotations$3 = propertyAnnotations[AnnotationText]) === null || _propertyAnnotations$3 === void 0 ? void 0 : _propertyAnnotations$3.$Path) || "";
      }
    },
    _enrichKeys: function (vhKeys, parameter) {
      if (ValueListHelper._parameterIsA(parameter, ["com.sap.vocabularies.Common.v1.ValueListParameterOut", "com.sap.vocabularies.Common.v1.ValueListParameterIn", "com.sap.vocabularies.Common.v1.ValueListParameterInOut"]) && !vhKeys.includes(parameter.ValueListProperty)) {
        vhKeys.push(parameter.ValueListProperty);
      }
    },
    _processParameters: function (annotationValueListType, propertyName, conditionModel, valueHelp, contextPrefix, vhMetaModel, valueHelpQualifier) {
      const metaModel = annotationValueListType.$model.getMetaModel(),
        entitySetPath = `/${annotationValueListType.CollectionPath}`,
        entityType = metaModel.getObject(`${entitySetPath}/`);
      if (entityType === undefined) {
        Log.error(`Inconsistent value help metadata: Entity ${entitySetPath} is not defined`);
        return;
      }
      const columnDefs = ValueListHelper._getColumnDefinitionFromSelectionFields(metaModel, entitySetPath),
        vhParameters = [],
        vhKeys = entityType.$Key ? [...entityType.$Key] : [];
      const path = {
        fieldPropertyPath: "",
        descriptionPath: "",
        key: ""
      };
      for (const parameter of annotationValueListType.Parameters) {
        var _parameter$LocalDataP;
        //All String fields are allowed for filter
        const propertyPath = `/${annotationValueListType.CollectionPath}/${parameter.ValueListProperty}`,
          property = metaModel.getObject(propertyPath),
          propertyAnnotations = metaModel.getObject(`${propertyPath}@`) || {},
          localDataPropertyPath = ((_parameter$LocalDataP = parameter.LocalDataProperty) === null || _parameter$LocalDataP === void 0 ? void 0 : _parameter$LocalDataP.$PropertyPath) || "";

        // If property is undefined, then the property coming for the entry isn't defined in
        // the metamodel, therefore we don't need to add it in the in/out parameters
        if (property) {
          // Search for the *out Parameter mapped to the local property
          ValueListHelper._enrichPath(path, propertyPath, localDataPropertyPath, parameter, propertyName, propertyAnnotations);
          const valueListProperty = parameter.ValueListProperty;
          ValueListHelper._mergeColumnDefinitionsFromProperties(columnDefs, annotationValueListType, valueListProperty, property, propertyAnnotations);
        }

        //In and InOut and Out
        if (ValueListHelper._parameterIsA(parameter, ["com.sap.vocabularies.Common.v1.ValueListParameterIn", "com.sap.vocabularies.Common.v1.ValueListParameterOut", "com.sap.vocabularies.Common.v1.ValueListParameterInOut"]) && localDataPropertyPath !== propertyName) {
          const vhParameter = ValueListHelper._getVhParameter(conditionModel, valueHelp, contextPrefix, parameter, vhMetaModel, localDataPropertyPath);
          vhParameters.push(vhParameter);
        }

        //Constant as InParamter for filtering
        if (parameter.$Type === AnnotationValueListParameterConstant) {
          vhParameters.push({
            parmeterType: parameter.$Type,
            source: parameter.ValueListProperty,
            helpPath: parameter.ValueListProperty,
            constantValue: parameter.Constant,
            initialValueFilterEmpty: Boolean(parameter.InitialValueIsSignificant)
          });
        }

        // Enrich keys with out-parameters
        ValueListHelper._enrichKeys(vhKeys, parameter);
      }

      /* Ensure that vhKeys are part of the columnDefs, otherwise it is not considered in $select (BCP 2270141154) */
      for (const vhKey of vhKeys) {
        if (columnNotAlreadyDefined(columnDefs, vhKey)) {
          var _metaModel$getObject2;
          const columnDef = {
            path: vhKey,
            $Type: (_metaModel$getObject2 = metaModel.getObject(`/${annotationValueListType.CollectionPath}/${path.key}`)) === null || _metaModel$getObject2 === void 0 ? void 0 : _metaModel$getObject2.$Type,
            label: "",
            sortable: false,
            filterable: undefined
          };
          columnDefs.push(columnDef);
        }
      }
      const valuelistInfo = {
        keyPath: path.key,
        descriptionPath: path.descriptionPath,
        fieldPropertyPath: path.fieldPropertyPath,
        vhKeys: vhKeys,
        vhParameters: vhParameters,
        valueListInfo: annotationValueListType,
        columnDefs: columnDefs,
        valueHelpQualifier
      };
      return valuelistInfo;
    },
    _logError: function (propertyPath, error) {
      const status = error ? error.status : undefined;
      const message = error instanceof Error ? error.message : String(error);
      const msg = status === 404 ? `Metadata not found (${status}) for value help of property ${propertyPath}` : message;
      Log.error(msg);
    },
    getValueListInfo: async function (valueHelp, propertyPath, payload) {
      const bindingContext = valueHelp.getBindingContext(),
        conditionModel = payload.conditionModel,
        vhMetaModel = valueHelp.getModel().getMetaModel(),
        valueListInfos = [],
        propertyPathParts = propertyPath.split("/");
      try {
        const valueListByQualifier = await vhMetaModel.requestValueListInfo(propertyPath, true, bindingContext);
        const valueHelpQualifiers = ValueListHelper.putDefaultQualifierFirst(Object.keys(valueListByQualifier)),
          propertyName = propertyPathParts.pop();
        const contextPrefix = payload.useMultiValueField ? ValueListHelper._getContextPrefix(bindingContext, propertyPathParts) : "";
        for (const valueHelpQualifier of valueHelpQualifiers) {
          // Add column definitions for properties defined as Selection fields on the CollectionPath entity set.
          const annotationValueListType = valueListByQualifier[valueHelpQualifier];
          const valueListInfo = ValueListHelper._processParameters(annotationValueListType, propertyName, conditionModel, valueHelp, contextPrefix, vhMetaModel, annotationValueListType.$qualifier ?? valueHelpQualifier // for ValueListWithFixedValues, get the qualifier from $qualifier
          );
          /* Only consistent value help definitions shall be part of the value help */
          if (valueListInfo) {
            valueListInfos.push(valueListInfo);
          }
        }
      } catch (err) {
        this._logError(propertyPath, err);
        ValueListHelper.destroyVHContent(valueHelp);
      }
      return valueListInfos;
    },
    ALLFRAGMENTS: undefined,
    logFragment: undefined,
    _logTemplatedFragments: function (propertyPath, fragmentName, fragmentDefinition) {
      const logInfo = {
        path: propertyPath,
        fragmentName: fragmentName,
        fragment: fragmentDefinition
      };
      if (Log.getLevel() === Level.DEBUG) {
        //In debug mode we log all generated fragments
        ValueListHelper.ALLFRAGMENTS = ValueListHelper.ALLFRAGMENTS || [];
        ValueListHelper.ALLFRAGMENTS.push(logInfo);
      }
      if (ValueListHelper.logFragment) {
        //One Tool Subscriber allowed
        setTimeout(function () {
          ValueListHelper.logFragment(logInfo);
        }, 0);
      }
    },
    _templateFragment: async function (fragmentName, valueListInfo, sourceModel, propertyPath) {
      const localValueListInfo = valueListInfo.valueListInfo,
        valueListModel = new JSONModel(localValueListInfo),
        valueListServiceMetaModel = localValueListInfo.$model.getMetaModel(),
        viewData = new JSONModel({
          converterType: "ListReport",
          columns: valueListInfo.columnDefs || null
        });
      const fragmentDefinition = await XMLPreprocessor.process(XMLTemplateProcessor.loadTemplate(fragmentName, "fragment"), {
        name: fragmentName
      }, {
        bindingContexts: {
          valueList: valueListModel.createBindingContext("/"),
          contextPath: valueListServiceMetaModel.createBindingContext(`/${localValueListInfo.CollectionPath}/`),
          source: sourceModel.createBindingContext("/")
        },
        models: {
          valueList: valueListModel,
          contextPath: valueListServiceMetaModel,
          source: sourceModel,
          metaModel: valueListServiceMetaModel,
          viewData: viewData
        }
      });
      ValueListHelper._logTemplatedFragments(propertyPath, fragmentName, fragmentDefinition);
      return await Fragment.load({
        definition: fragmentDefinition
      });
    },
    _getContentId: function (valueHelpId, valueHelpQualifier, isTypeahead) {
      const contentType = isTypeahead ? "Popover" : "Dialog";
      return `${valueHelpId}::${contentType}::qualifier::${valueHelpQualifier}`;
    },
    _addInOutParametersToPayload: function (payload, valueListInfo) {
      const valueHelpQualifier = valueListInfo.valueHelpQualifier;
      if (!payload.qualifiers) {
        payload.qualifiers = {};
      }
      if (!payload.qualifiers[valueHelpQualifier]) {
        payload.qualifiers[valueHelpQualifier] = {
          vhKeys: valueListInfo.vhKeys,
          vhParameters: valueListInfo.vhParameters
        };
      }
    },
    _getValueHelpColumnDisplayFormat: function (propertyAnnotations, isValueHelpWithFixedValues) {
      const displayMode = CommonUtils.computeDisplayMode(propertyAnnotations, undefined),
        textAnnotation = propertyAnnotations && propertyAnnotations[AnnotationText],
        textArrangementAnnotation = textAnnotation && propertyAnnotations[AnnotationTextUITextArrangement];
      if (isValueHelpWithFixedValues) {
        return textAnnotation && typeof textAnnotation !== "string" && textAnnotation.$Path ? displayMode : "Value";
      } else {
        // Only explicit defined TextArrangements in a Value Help with Dialog are considered
        return textArrangementAnnotation ? displayMode : "Value";
      }
    },
    _getWidthInRem: function (control, isUnitValueHelp) {
      let width = control.$().width(); // JQuery
      if (isUnitValueHelp && width) {
        width = 0.3 * width;
      }
      const floatWidth = width ? parseFloat(String(Rem.fromPx(width))) : 0;
      return isNaN(floatWidth) ? 0 : floatWidth;
    },
    _getTableWidth: function (table, minWidth) {
      let width;
      const columns = table.getColumns(),
        visibleColumns = columns && columns.filter(function (column) {
          return column && column.getVisible && column.getVisible();
        }) || [],
        sumWidth = visibleColumns.reduce(function (sum, column) {
          width = column.getWidth();
          if (width && width.endsWith("px")) {
            width = String(Rem.fromPx(width));
          }
          const floatWidth = parseFloat(width);
          return sum + (isNaN(floatWidth) ? 9 : floatWidth);
        }, visibleColumns.length);
      return `${Math.max(sumWidth, minWidth)}em`;
    },
    _createValueHelpTypeahead: async function (propertyPath, valueHelp, content, valueListInfo, payload) {
      const contentId = content.getId(),
        propertyAnnotations = valueHelp.getModel().getMetaModel().getObject(`${propertyPath}@`),
        valueHelpWithFixedValues = propertyAnnotations[AnnotationValueListWithFixedValues] ?? false,
        isDialogTable = false,
        columnInfo = ValueListHelper.getColumnVisibilityInfo(valueListInfo.valueListInfo, propertyPath, valueHelpWithFixedValues, isDialogTable),
        sourceModel = new JSONModel({
          id: contentId,
          groupId: payload.requestGroupId || undefined,
          bSuggestion: true,
          propertyPath: propertyPath,
          columnInfo: columnInfo,
          valueHelpWithFixedValues: valueHelpWithFixedValues
        });
      content.setKeyPath(valueListInfo.keyPath);
      content.setDescriptionPath(valueListInfo.descriptionPath);
      payload.isValueListWithFixedValues = valueHelpWithFixedValues;
      const collectionAnnotations = valueListInfo.valueListInfo.$model.getMetaModel().getObject(`/${valueListInfo.valueListInfo.CollectionPath}@`) || {};
      content.setFilterFields(ValueListHelper.entityIsSearchable(propertyAnnotations, collectionAnnotations) ? "$search" : "");
      const table = await ValueListHelper._templateFragment("sap.fe.macros.internal.valuehelp.ValueListTable", valueListInfo, sourceModel, propertyPath);
      table.setModel(valueListInfo.valueListInfo.$model);
      Log.info(`Value List- suggest Table XML content created [${propertyPath}]`, table.getMetadata().getName(), "MDC Templating");
      content.setTable(table);
      const field = valueHelp.getControl();
      if (field !== undefined && (field.isA("sap.ui.mdc.FilterField") || field.isA("sap.ui.mdc.Field") || field.isA("sap.ui.mdc.MultiValueField"))) {
        //Can the filterfield be something else that we need the .isA() check?
        const reduceWidthForUnitValueHelp = Boolean(payload.isUnitValueHelp);
        const tableWidth = ValueListHelper._getTableWidth(table, ValueListHelper._getWidthInRem(field, reduceWidthForUnitValueHelp));
        table.setWidth(tableWidth);
        if (valueHelpWithFixedValues) {
          table.setMode(field.getMaxConditions() === 1 ? "SingleSelectMaster" : "MultiSelect");
        } else {
          table.setMode("SingleSelectMaster");
        }
      }
    },
    _createValueHelpDialog: async function (propertyPath, valueHelp, content, valueListInfo, payload) {
      const propertyAnnotations = valueHelp.getModel().getMetaModel().getObject(`${propertyPath}@`),
        isDropDownListe = false,
        isDialogTable = true,
        columnInfo = ValueListHelper.getColumnVisibilityInfo(valueListInfo.valueListInfo, propertyPath, isDropDownListe, isDialogTable),
        sourceModel = new JSONModel({
          id: content.getId(),
          groupId: payload.requestGroupId || undefined,
          bSuggestion: false,
          columnInfo: columnInfo,
          valueHelpWithFixedValues: isDropDownListe
        });
      content.setKeyPath(valueListInfo.keyPath);
      content.setDescriptionPath(valueListInfo.descriptionPath);
      const collectionAnnotations = valueListInfo.valueListInfo.$model.getMetaModel().getObject(`/${valueListInfo.valueListInfo.CollectionPath}@`) || {};
      content.setFilterFields(ValueListHelper.entityIsSearchable(propertyAnnotations, collectionAnnotations) ? "$search" : "");
      const tablePromise = ValueListHelper._templateFragment("sap.fe.macros.internal.valuehelp.ValueListDialogTable", valueListInfo, sourceModel, propertyPath);
      const filterBarPromise = ValueListHelper._templateFragment("sap.fe.macros.internal.valuehelp.ValueListFilterBar", valueListInfo, sourceModel, propertyPath);
      const [table, filterBar] = await Promise.all([tablePromise, filterBarPromise]);
      table.setModel(valueListInfo.valueListInfo.$model);
      filterBar.setModel(valueListInfo.valueListInfo.$model);
      content.setFilterBar(filterBar);
      content.setTable(table);
      table.setFilter(filterBar.getId());
      table.initialized();
      const field = valueHelp.getControl();
      if (field !== undefined) {
        table.setSelectionMode(field.getMaxConditions() === 1 ? "SingleMaster" : "Multi");
      }
      table.setWidth("100%");

      //This is a temporary workarround - provided by MDC (see FIORITECHP1-24002)
      const mdcTable = table;
      mdcTable._setShowP13nButton(false);
    },
    _getContentById: function (contentList, contentId) {
      return contentList.find(function (item) {
        return item.getId() === contentId;
      });
    },
    _createPopoverContent: function (contentId, caseSensitive, useAsValueHelp) {
      return new MTable({
        id: contentId,
        group: "group1",
        caseSensitive: caseSensitive,
        useAsValueHelp: useAsValueHelp
      });
    },
    _createDialogContent: function (contentId, caseSensitive, forceBind) {
      return new MDCTable({
        id: contentId,
        group: "group1",
        caseSensitive: caseSensitive,
        forceBind: forceBind
      });
    },
    _showConditionsContent: function (contentList, container) {
      let conditionsContent = contentList.length && contentList[contentList.length - 1].getMetadata().getName() === "sap.ui.mdc.valuehelp.content.Conditions" ? contentList[contentList.length - 1] : undefined;
      if (conditionsContent) {
        conditionsContent.setVisible(true);
      } else {
        conditionsContent = new Conditions();
        container.addContent(conditionsContent);
      }
    },
    _alignOrCreateContent: function (valueListInfo, contentId, caseSensitive, showConditionPanel, container) {
      const contentList = container.getContent();
      let content = ValueListHelper._getContentById(contentList, contentId);
      if (!content) {
        const forceBind = valueListInfo.valueListInfo.FetchValues === 2 ? false : true;
        content = ValueListHelper._createDialogContent(contentId, caseSensitive, forceBind);
        if (!showConditionPanel) {
          container.addContent(content);
        } else {
          container.insertContent(content, contentList.length - 1); // insert content before conditions content
        }
      } else {
        content.setVisible(true);
      }
      return content;
    },
    _prepareValueHelpTypeAhead: function (valueHelp, container, valueListInfos, payload, caseSensitive, firstTypeAheadContent) {
      const contentList = container.getContent();
      let qualifierForTypeahead = valueHelp.data("valuelistForValidation") || ""; // can also be null
      if (qualifierForTypeahead === " ") {
        qualifierForTypeahead = "";
      }
      const valueListInfo = qualifierForTypeahead ? valueListInfos.filter(function (subValueListInfo) {
        return subValueListInfo.valueHelpQualifier === qualifierForTypeahead;
      })[0] : valueListInfos[0];
      ValueListHelper._addInOutParametersToPayload(payload, valueListInfo);
      const contentId = ValueListHelper._getContentId(valueHelp.getId(), valueListInfo.valueHelpQualifier, true);
      let content = ValueListHelper._getContentById(contentList, contentId);
      if (!content) {
        const useAsValueHelp = firstTypeAheadContent.getUseAsValueHelp();
        content = ValueListHelper._createPopoverContent(contentId, caseSensitive, useAsValueHelp);
        container.insertContent(content, 0); // insert content as first content
      } else if (contentId !== contentList[0].getId()) {
        // content already available but not as first content?
        container.removeContent(content);
        container.insertContent(content, 0); // move content to first position
      }

      return {
        valueListInfo,
        content
      };
    },
    _prepareValueHelpDialog: function (valueHelp, container, valueListInfos, payload, selectedContentId, caseSensitive) {
      const showConditionPanel = valueHelp.data("showConditionPanel") && valueHelp.data("showConditionPanel") !== "false";
      const contentList = container.getContent();

      // set all contents to invisible
      for (const contentListItem of contentList) {
        contentListItem.setVisible(false);
      }
      if (showConditionPanel) {
        this._showConditionsContent(contentList, container);
      }
      let selectedInfo, selectedContent;

      // Create or reuse contents for the current context
      for (const valueListInfo of valueListInfos) {
        const valueHelpQualifier = valueListInfo.valueHelpQualifier;
        ValueListHelper._addInOutParametersToPayload(payload, valueListInfo);
        const contentId = ValueListHelper._getContentId(valueHelp.getId(), valueHelpQualifier, false);
        const content = this._alignOrCreateContent(valueListInfo, contentId, caseSensitive, showConditionPanel, container);
        if (valueListInfo.valueListInfo.Label) {
          const title = CommonUtils.getTranslatedTextFromExpBindingString(valueListInfo.valueListInfo.Label, valueHelp.getControl());
          content.setTitle(title);
        }
        if (!selectedContent || selectedContentId && selectedContentId === contentId) {
          selectedContent = content;
          selectedInfo = valueListInfo;
        }
      }
      if (!selectedInfo || !selectedContent) {
        throw new Error("selectedInfo or selectedContent undefined");
      }
      return {
        selectedInfo,
        selectedContent
      };
    },
    _addDescriptionInfosToPayload: function (payload, valueListInfo, metaModel) {
      if (payload.valueHelpDescriptionPath !== valueListInfo.descriptionPath) {
        var _convertedMetadata$re, _convertedMetadata$re2, _convertedMetadata$re3, _convertedMetadata$re4;
        const convertedMetadata = convertTypes(metaModel);
        const propertyDescriptionPath = (_convertedMetadata$re = convertedMetadata.resolvePath(payload.propertyPath).target) === null || _convertedMetadata$re === void 0 ? void 0 : (_convertedMetadata$re2 = _convertedMetadata$re.annotations) === null || _convertedMetadata$re2 === void 0 ? void 0 : (_convertedMetadata$re3 = _convertedMetadata$re2.Common) === null || _convertedMetadata$re3 === void 0 ? void 0 : (_convertedMetadata$re4 = _convertedMetadata$re3.Text) === null || _convertedMetadata$re4 === void 0 ? void 0 : _convertedMetadata$re4.path;

        /* Enrich payload with Text Property Infos */
        payload.valueHelpDescriptionPath = valueListInfo.descriptionPath;
        payload.valueHelpKeyPath = valueListInfo.keyPath;
        if (propertyDescriptionPath) {
          var _convertedMetadata$re5, _convertedMetadata$re6;
          payload.maxLength = payload.valueHelpDescriptionPath ? (_convertedMetadata$re5 = convertedMetadata.resolvePath(`/${valueListInfo.valueListInfo.CollectionPath}/${payload.valueHelpDescriptionPath}`)) === null || _convertedMetadata$re5 === void 0 ? void 0 : (_convertedMetadata$re6 = _convertedMetadata$re5.target) === null || _convertedMetadata$re6 === void 0 ? void 0 : _convertedMetadata$re6.maxLength : undefined;
          payload.propertyDescriptionPath = propertyDescriptionPath;
        }
      }
    },
    showValueList: async function (payload, container, selectedContentId) {
      const valueHelp = container.getParent(),
        isTypeahead = container.isTypeahead(),
        propertyPath = payload.propertyPath,
        metaModel = valueHelp.getModel().getMetaModel(),
        vhUIModel = valueHelp.getModel("_VHUI") !== undefined ? valueHelp.getModel("_VHUI") : ValueListHelper.createVHUIModel(valueHelp, propertyPath, metaModel);
      vhUIModel.setProperty("/isSuggestion", isTypeahead);
      vhUIModel.setProperty("/minScreenWidth", !isTypeahead ? "418px" : undefined);
      try {
        const valueListInfos = await ValueListHelper.getValueListInfo(valueHelp, propertyPath, payload);
        const firstTypeAheadContent = valueHelp.getTypeahead().getContent()[0],
          caseSensitive = firstTypeAheadContent.getCaseSensitive(); // take caseSensitive from first Typeahead content

        if (isTypeahead) {
          const {
            valueListInfo,
            content
          } = ValueListHelper._prepareValueHelpTypeAhead(valueHelp, container, valueListInfos, payload, caseSensitive, firstTypeAheadContent);
          payload.valueHelpQualifier = valueListInfo.valueHelpQualifier;
          ValueListHelper._addDescriptionInfosToPayload(payload, valueListInfo, metaModel);
          if (content.getTable() === undefined || content.getTable() === null) {
            await ValueListHelper._createValueHelpTypeahead(propertyPath, valueHelp, content, valueListInfo, payload);
          }
        } else {
          var _selectedInfo$valueLi;
          const {
            selectedInfo,
            selectedContent
          } = ValueListHelper._prepareValueHelpDialog(valueHelp, container, valueListInfos, payload, selectedContentId, caseSensitive);
          payload.valueHelpQualifier = selectedInfo.valueHelpQualifier;
          ValueListHelper._addDescriptionInfosToPayload(payload, selectedInfo, metaModel);

          /* For context depentent value helps the value list label is used for the dialog title */
          const title = CommonUtils.getTranslatedTextFromExpBindingString(ValueListHelper._getDialogTitle(valueHelp, (_selectedInfo$valueLi = selectedInfo.valueListInfo) === null || _selectedInfo$valueLi === void 0 ? void 0 : _selectedInfo$valueLi.Label), valueHelp.getControl());
          container.setTitle(title);
          if (selectedContent.getTable() === undefined || selectedContent.getTable() === null) {
            await ValueListHelper._createValueHelpDialog(propertyPath, valueHelp, selectedContent, selectedInfo, payload);
          }
        }
      } catch (err) {
        this._logError(propertyPath, err);
        ValueListHelper.destroyVHContent(valueHelp);
      }
    }
  };
  return ValueListHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/internal/valuehelp/ValueListHelper", ["sap/base/Log","sap/base/util/ObjectPath","sap/fe/core/CommonUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/m/table/Util","sap/ui/core/Fragment","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/dom/units/Rem","sap/ui/mdc/valuehelp/content/Conditions","sap/ui/mdc/valuehelp/content/MDCTable","sap/ui/mdc/valuehelp/content/MTable","sap/ui/model/json/JSONModel"],function(e,t,n,o,a,i,r,l,s,u,c,d,p,f,m,g){"use strict";var v={};var h=r.getTypeConfig;var P=r.getDisplayMode;var y=i.getAssociatedUnitProperty;var C=i.getAssociatedTimezoneProperty;var b=i.getAssociatedTextProperty;var I=i.getAssociatedCurrencyProperty;var $=a.isPropertyFilterable;var V=a.getSortRestrictionsInfo;var L=o.convertTypes;var T=e.Level;const M=(e,t)=>!e.some(e=>e.path===t);const _="@com.sap.vocabularies.Common.v1.Label",O="@com.sap.vocabularies.Common.v1.Text",x="@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement",F="com.sap.vocabularies.Common.v1.ValueListParameterIn",H="com.sap.vocabularies.Common.v1.ValueListParameterConstant",D="com.sap.vocabularies.Common.v1.ValueListParameterOut",S="com.sap.vocabularies.Common.v1.ValueListParameterInOut",A="@com.sap.vocabularies.Common.v1.ValueListWithFixedValues";v.AnnotationLabel=_;v.AnnotationValueListWithFixedValues=A;v.AnnotationValueListParameterInOut=S;v.AnnotationValueListParameterOut=D;v.AnnotationValueListParameterConstant=H;v.AnnotationValueListParameterIn=F;v.AnnotationTextUITextArrangement=x;v.AnnotationText=O;function U(e){let t;const n=e.$model.getMetaModel();const o=n.getObject(`/${e.CollectionPath}@`)||{};const a=V(o);const i=e.Parameters.find(function(t){return(t.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterInOut"||t.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterOut"||t.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterDisplayOnly")&&!(n.getObject(`/${e.CollectionPath}/${t.ValueListProperty}@com.sap.vocabularies.UI.v1.Hidden`)===true)});if(i){if(n.getObject(`/${e.CollectionPath}/${i.ValueListProperty}@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember`)==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly"){t=n.getObject(`/${e.CollectionPath}/${i.ValueListProperty}@com.sap.vocabularies.Common.v1.Text/$Path`)}else{t=i.ValueListProperty}}if(t&&(!a.propertyInfo[t]||a.propertyInfo[t].sortable)){return t}else{return undefined}}function j(e,t){const n=t.find(function(t){return e.ValueListProperty===t.textColumnName});if(e.ValueListProperty===(n===null||n===void 0?void 0:n.textColumnName)&&!n.keyColumnHidden&&n.keyColumnDisplayFormat!=="Value"){return true}return undefined}function w(e){return e.Parameters.some(function(e){return e["@com.sap.vocabularies.UI.v1.Importance"]&&e["@com.sap.vocabularies.UI.v1.Importance"].$EnumMember==="com.sap.vocabularies.UI.v1.ImportanceType/High"})}function E(e){const t=e.getModel("viewData");if(t){const e=t.getData();if(e){const t=e.columns;if(t){return t.reduce(function(e,t){if(t.path&&t.path.indexOf("/")===-1){e=e?`${e},${t.path}`:t.path}return e},undefined)}}}return undefined}function N(e,t){const o=n.computeDisplayMode(e,undefined);const a=e&&e["@com.sap.vocabularies.Common.v1.Text"];const i=a&&e["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"];if(t){return a&&typeof a!=="string"&&a.$Path?o:"Value"}else{return i?o:"Value"}}const B={getValueListCollectionEntitySet:function(e){const t=e.getObject();return t.$model.getMetaModel().createBindingContext(`/${t.CollectionPath}`)},getTableDelegate:function(e){let t=U(e);if(t){t=`'${t}'`}return"{name: 'sap/fe/macros/internal/valuehelp/TableDelegate', payload: {collectionName: '"+e.CollectionPath+"'"+(t?", defaultSortPropertyName: "+t:"")+"}}"},getSortConditionsFromPresentationVariant:function(e,t){if(e.PresentationVariantQualifier!==undefined){const n=e.PresentationVariantQualifier?`#${e.PresentationVariantQualifier}`:"",o=`/${e.CollectionPath}/@com.sap.vocabularies.UI.v1.PresentationVariant${n}`;const a=e.$model.getMetaModel().getObject(o);if(a!==null&&a!==void 0&&a.SortOrder){const e={sorters:[]};a.SortOrder.forEach(function(n){var o;const a={},i=n===null||n===void 0?void 0:(o=n.Property)===null||o===void 0?void 0:o.$PropertyPath;if(t){a.path=i}else{a.name=i}if(n.Descending){a.descending=true}else{a.ascending=true}e.sorters.push(a)});return t?`sorter: ${JSON.stringify(e.sorters)}`:JSON.stringify(e)}}return},getPropertyPath:function(e){return!e.UnboundAction?`${e.EntityTypePath}/${e.Action}/${e.Property}`:`/${e.Action.substring(e.Action.lastIndexOf(".")+1)}/${e.Property}`},getValueListProperty:function(e){const t=e.getModel();const n=t.getObject("/");return n.$model.getMetaModel().createBindingContext(`/${n.CollectionPath}/${e.getObject()}`)},getColumnVisibility:function(e,t,n){const o=n&&!!n.valueHelpWithFixedValues,a=n.columnInfo,i=!j(t,a.columnInfos),r=a.isDialogTable;if(o||!o&&r||!o&&!w(e)){const e=a.columnInfos.find(function(e){return t.ValueListProperty===e.columnName&&e.hasHiddenAnnotation===true});return!e?i:false}else if(!o&&w(e)){return t&&t["@com.sap.vocabularies.UI.v1.Importance"]&&t["@com.sap.vocabularies.UI.v1.Importance"].$EnumMember==="com.sap.vocabularies.UI.v1.ImportanceType/High"?true:false}return true},getColumnVisibilityInfo:function(e,t,n,o){const a=e.$model.getMetaModel();const i=[];const r={isDialogTable:o,columnInfos:i};e.Parameters.forEach(function(t){const o=a.getObject(`/${e.CollectionPath}/${t.ValueListProperty}@`);const i=o&&o["@com.sap.vocabularies.Common.v1.Text"];let l={};if(i){l={keyColumnHidden:o["@com.sap.vocabularies.UI.v1.Hidden"]?true:false,keyColumnDisplayFormat:i&&N(o,n),textColumnName:i&&i.$Path,columnName:t.ValueListProperty,hasHiddenAnnotation:o&&o["@com.sap.vocabularies.UI.v1.Hidden"]?true:false}}else if(o&&o["@com.sap.vocabularies.UI.v1.Hidden"]){l={columnName:t.ValueListProperty,hasHiddenAnnotation:o&&o["@com.sap.vocabularies.UI.v1.Hidden"]?true:false}}r.columnInfos.push(l)});return r},getTableItemsParameters:function(e,t,n,o){const a=[`path: '/${e.CollectionPath}'`];const i=E(this);if(t){const e=i?`, '${i}'`:"";a.push(`parameters: {$$sharedRequest: false, $$updateGroupId: "donotsubmit", $$groupId: '${t}'${e}}`)}else if(i){a.push(`parameters: {$$sharedRequest: false, $$updateGroupId: "donotsubmit", $select: '${i}'}`)}const r=e.Parameters.some(function(e){return n||e.$Type==="com.sap.vocabularies.Common.v1.ValueListParameterIn"});a.push(`suspended: ${r}`);if(!o){a.push("length: 10")}const l=B.getSortConditionsFromPresentationVariant(e,n);if(l){a.push(l)}else if(o){const t=U(e);if(t){a.push(`sorter: [{path: '${t}', ascending: true}]`)}}return"{"+a.join(", ")+"}"},hasImportance:function(e){return w(e.getObject())?"Importance/High":"None"},getMinScreenWidth:function(e){return w(e)?"{= ${_VHUI>/minScreenWidth}}":"416px"},getColumnWidth:function(n){var o,a,i,r,s,u,c,d;const p=n.targetObject;let f=[p];const m=b(p)||I(p)||y(p)||C(p),g=(o=p.annotations)===null||o===void 0?void 0:(a=o.Common)===null||a===void 0?void 0:a.Text,v=g===null||g===void 0?void 0:(i=g.annotations)===null||i===void 0?void 0:(r=i.UI)===null||r===void 0?void 0:(s=r.TextArrangement)===null||s===void 0?void 0:s.toString(),$=(u=p.annotations)===null||u===void 0?void 0:(c=u.Common)===null||c===void 0?void 0:(d=c.Label)===null||d===void 0?void 0:d.toString(),V=v&&P(n);if(m){if(V==="Description"){f=[m]}else if(!g||V&&V!=="Value"){f.push(m)}}let L=0;const T=[];f.forEach(e=>{const n=h(e,undefined);const o=t.get(n.type);if(o){T.push(new o(n.formatOptions,n.constraints))}});const M=l.calcColumnWidth(T,$);L=M?parseFloat(M.replace("rem","")):0;if(L===0){e.error(`Cannot compute the column width for property: ${p.name}`)}return L<=20?L.toString()+"rem":"20rem"},getOutParameterPaths:function(e){let t="";e.forEach(function(e){if(e.$Type.endsWith("Out")){t+=`{${e.ValueListProperty}}`}});return t},entityIsSearchable:function(e,t){var n,o;const a=(n=e["@com.sap.vocabularies.Common.v1.ValueList"])===null||n===void 0?void 0:n.SearchSupported,i=(o=t["@Org.OData.Capabilities.V1.SearchRestrictions"])===null||o===void 0?void 0:o.Searchable;if(i===undefined&&a===false||i===true&&a===false||i===false){return false}return true},_getConditionPath:function(e,t,n){const o=n.split("/");let a="",i;while(o.length){let n=o.shift();i=i?`${i}/${n}`:n;const r=e.getObject(`${t}/${i}`);if(r&&r.$kind==="NavigationProperty"&&r.$isCollection){n+="*"}a=a?`${a}/${n}`:n}return a},_getColumnDefinitionFromSelectionFields:function(e,t){const n=[],o=e.getObject(`${t}/@`),a=o["@com.sap.vocabularies.UI.v1.SelectionFields"];if(a){a.forEach(function(o){var a;const i=`${t}/${o.$PropertyPath}`,r=B._getConditionPath(e,t,o.$PropertyPath),l=e.getObject(`${i}@`),s={path:r,label:l[_]||i,sortable:true,filterable:$(e,t,o.$PropertyPath,false),$Type:(a=e.getObject(i))===null||a===void 0?void 0:a.$Type};n.push(s)})}return n},_mergeColumnDefinitionsFromProperties:function(e,t,n,o,a){var i;let r=n,l=o.$Type;const s=a[_]||r,u=a[O];if(u&&((i=a[x])===null||i===void 0?void 0:i.$EnumMember)==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly"){r=u.$Path;const e=`/${t.CollectionPath}/${r}`;l=t.$model.getMetaModel().getObject(e).$Type}if(M(e,r)){const t={path:r,label:s,sortable:true,filterable:!a["@com.sap.vocabularies.UI.v1.HiddenFilter"],$Type:l};e.push(t)}},filterInOutParameters:function(e,t){return e.filter(function(e){return t.indexOf(e.parmeterType)>-1})},getInParameters:function(e){return B.filterInOutParameters(e,[F,H,S])},getOutParameters:function(e){return B.filterInOutParameters(e,[D,S])},createVHUIModel:function(e,t,n){const o=new g({}),a=n.getObject(`${t}@`);e.setModel(o,"_VHUI");o.setProperty("/hasValueListRelevantQualifiers",!!a["@com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"]);o.setProperty("/propertyLabel",a[_]);return o},_getDialogTitle:function(e,t){var n;const o=e.getModel("_VHUI").getProperty("/propertyLabel");const a=(n=e.getControl())===null||n===void 0?void 0:n.getProperty("label");return e.getModel("_VHUI").getProperty("/hasValueListRelevantQualifiers")?t||o||a:a||o||t},destroyVHContent:function(e){if(e.getDialog()){e.getDialog().destroyContent()}if(e.getTypeahead()){e.getTypeahead().destroyContent()}},putDefaultQualifierFirst:function(e){const t=e.indexOf("");if(t>0){e.unshift(e[t]);e.splice(t+1,1)}return e},_getContextPrefix:function(e,t){if(e&&e.getPath()){const n=e.getPath().split("/");if(t.length-n.length>1){const e=[];for(let o=n.length;o<t.length-1;o++){e.push(t[o])}return`${e.join("/")}/`}}return""},_getVhParameter:function(e,t,n,o,a,i){let r="";const l=t.getBindingContext();if(e&&e.length>0){var s;if((s=t.getParent())!==null&&s!==void 0&&s.isA("sap.ui.mdc.Table")&&l&&B._parameterIsA(o,["com.sap.vocabularies.Common.v1.ValueListParameterIn","com.sap.vocabularies.Common.v1.ValueListParameterInOut"])){const e=i.split("/");if(e.length>1){const n=e[0];const o=a.getMetaContext(l.getPath());const s=t.getParent().getRowBinding().getPath();if(o.getObject(`${s}/$Partner`)===n){r=i.replace(n+"/","")}}}if(!r){r=e+">/conditions/"+i}}else{r=n+i}return{parmeterType:o.$Type,source:r,helpPath:o.ValueListProperty,constantValue:o.Constant,initialValueFilterEmpty:Boolean(o.InitialValueIsSignificant)}},_parameterIsA(e,t){return t.includes(e.$Type)},_enrichPath:function(e,t,n,o,a,i){if(!e.key&&B._parameterIsA(o,["com.sap.vocabularies.Common.v1.ValueListParameterOut","com.sap.vocabularies.Common.v1.ValueListParameterInOut"])&&n===a){var r;e.fieldPropertyPath=t;e.key=o.ValueListProperty;e.descriptionPath=((r=i[O])===null||r===void 0?void 0:r.$Path)||""}},_enrichKeys:function(e,t){if(B._parameterIsA(t,["com.sap.vocabularies.Common.v1.ValueListParameterOut","com.sap.vocabularies.Common.v1.ValueListParameterIn","com.sap.vocabularies.Common.v1.ValueListParameterInOut"])&&!e.includes(t.ValueListProperty)){e.push(t.ValueListProperty)}},_processParameters:function(t,n,o,a,i,r,l){const s=t.$model.getMetaModel(),u=`/${t.CollectionPath}`,c=s.getObject(`${u}/`);if(c===undefined){e.error(`Inconsistent value help metadata: Entity ${u} is not defined`);return}const d=B._getColumnDefinitionFromSelectionFields(s,u),p=[],f=c.$Key?[...c.$Key]:[];const m={fieldPropertyPath:"",descriptionPath:"",key:""};for(const e of t.Parameters){var g;const l=`/${t.CollectionPath}/${e.ValueListProperty}`,u=s.getObject(l),c=s.getObject(`${l}@`)||{},v=((g=e.LocalDataProperty)===null||g===void 0?void 0:g.$PropertyPath)||"";if(u){B._enrichPath(m,l,v,e,n,c);const o=e.ValueListProperty;B._mergeColumnDefinitionsFromProperties(d,t,o,u,c)}if(B._parameterIsA(e,["com.sap.vocabularies.Common.v1.ValueListParameterIn","com.sap.vocabularies.Common.v1.ValueListParameterOut","com.sap.vocabularies.Common.v1.ValueListParameterInOut"])&&v!==n){const t=B._getVhParameter(o,a,i,e,r,v);p.push(t)}if(e.$Type===H){p.push({parmeterType:e.$Type,source:e.ValueListProperty,helpPath:e.ValueListProperty,constantValue:e.Constant,initialValueFilterEmpty:Boolean(e.InitialValueIsSignificant)})}B._enrichKeys(f,e)}for(const e of f){if(M(d,e)){var v;const n={path:e,$Type:(v=s.getObject(`/${t.CollectionPath}/${m.key}`))===null||v===void 0?void 0:v.$Type,label:"",sortable:false,filterable:undefined};d.push(n)}}const h={keyPath:m.key,descriptionPath:m.descriptionPath,fieldPropertyPath:m.fieldPropertyPath,vhKeys:f,vhParameters:p,valueListInfo:t,columnDefs:d,valueHelpQualifier:l};return h},_logError:function(t,n){const o=n?n.status:undefined;const a=n instanceof Error?n.message:String(n);const i=o===404?`Metadata not found (${o}) for value help of property ${t}`:a;e.error(i)},getValueListInfo:async function(e,t,n){const o=e.getBindingContext(),a=n.conditionModel,i=e.getModel().getMetaModel(),r=[],l=t.split("/");try{const s=await i.requestValueListInfo(t,true,o);const u=B.putDefaultQualifierFirst(Object.keys(s)),c=l.pop();const d=n.useMultiValueField?B._getContextPrefix(o,l):"";for(const t of u){const n=s[t];const o=B._processParameters(n,c,a,e,d,i,n.$qualifier??t);if(o){r.push(o)}}}catch(n){this._logError(t,n);B.destroyVHContent(e)}return r},ALLFRAGMENTS:undefined,logFragment:undefined,_logTemplatedFragments:function(t,n,o){const a={path:t,fragmentName:n,fragment:o};if(e.getLevel()===T.DEBUG){B.ALLFRAGMENTS=B.ALLFRAGMENTS||[];B.ALLFRAGMENTS.push(a)}if(B.logFragment){setTimeout(function(){B.logFragment(a)},0)}},_templateFragment:async function(e,t,n,o){const a=t.valueListInfo,i=new g(a),r=a.$model.getMetaModel(),l=new g({converterType:"ListReport",columns:t.columnDefs||null});const d=await u.process(c.loadTemplate(e,"fragment"),{name:e},{bindingContexts:{valueList:i.createBindingContext("/"),contextPath:r.createBindingContext(`/${a.CollectionPath}/`),source:n.createBindingContext("/")},models:{valueList:i,contextPath:r,source:n,metaModel:r,viewData:l}});B._logTemplatedFragments(o,e,d);return await s.load({definition:d})},_getContentId:function(e,t,n){const o=n?"Popover":"Dialog";return`${e}::${o}::qualifier::${t}`},_addInOutParametersToPayload:function(e,t){const n=t.valueHelpQualifier;if(!e.qualifiers){e.qualifiers={}}if(!e.qualifiers[n]){e.qualifiers[n]={vhKeys:t.vhKeys,vhParameters:t.vhParameters}}},_getValueHelpColumnDisplayFormat:function(e,t){const o=n.computeDisplayMode(e,undefined),a=e&&e[O],i=a&&e[x];if(t){return a&&typeof a!=="string"&&a.$Path?o:"Value"}else{return i?o:"Value"}},_getWidthInRem:function(e,t){let n=e.$().width();if(t&&n){n=.3*n}const o=n?parseFloat(String(d.fromPx(n))):0;return isNaN(o)?0:o},_getTableWidth:function(e,t){let n;const o=e.getColumns(),a=o&&o.filter(function(e){return e&&e.getVisible&&e.getVisible()})||[],i=a.reduce(function(e,t){n=t.getWidth();if(n&&n.endsWith("px")){n=String(d.fromPx(n))}const o=parseFloat(n);return e+(isNaN(o)?9:o)},a.length);return`${Math.max(i,t)}em`},_createValueHelpTypeahead:async function(t,n,o,a,i){const r=o.getId(),l=n.getModel().getMetaModel().getObject(`${t}@`),s=l[A]??false,u=false,c=B.getColumnVisibilityInfo(a.valueListInfo,t,s,u),d=new g({id:r,groupId:i.requestGroupId||undefined,bSuggestion:true,propertyPath:t,columnInfo:c,valueHelpWithFixedValues:s});o.setKeyPath(a.keyPath);o.setDescriptionPath(a.descriptionPath);i.isValueListWithFixedValues=s;const p=a.valueListInfo.$model.getMetaModel().getObject(`/${a.valueListInfo.CollectionPath}@`)||{};o.setFilterFields(B.entityIsSearchable(l,p)?"$search":"");const f=await B._templateFragment("sap.fe.macros.internal.valuehelp.ValueListTable",a,d,t);f.setModel(a.valueListInfo.$model);e.info(`Value List- suggest Table XML content created [${t}]`,f.getMetadata().getName(),"MDC Templating");o.setTable(f);const m=n.getControl();if(m!==undefined&&(m.isA("sap.ui.mdc.FilterField")||m.isA("sap.ui.mdc.Field")||m.isA("sap.ui.mdc.MultiValueField"))){const e=Boolean(i.isUnitValueHelp);const t=B._getTableWidth(f,B._getWidthInRem(m,e));f.setWidth(t);if(s){f.setMode(m.getMaxConditions()===1?"SingleSelectMaster":"MultiSelect")}else{f.setMode("SingleSelectMaster")}}},_createValueHelpDialog:async function(e,t,n,o,a){const i=t.getModel().getMetaModel().getObject(`${e}@`),r=false,l=true,s=B.getColumnVisibilityInfo(o.valueListInfo,e,r,l),u=new g({id:n.getId(),groupId:a.requestGroupId||undefined,bSuggestion:false,columnInfo:s,valueHelpWithFixedValues:r});n.setKeyPath(o.keyPath);n.setDescriptionPath(o.descriptionPath);const c=o.valueListInfo.$model.getMetaModel().getObject(`/${o.valueListInfo.CollectionPath}@`)||{};n.setFilterFields(B.entityIsSearchable(i,c)?"$search":"");const d=B._templateFragment("sap.fe.macros.internal.valuehelp.ValueListDialogTable",o,u,e);const p=B._templateFragment("sap.fe.macros.internal.valuehelp.ValueListFilterBar",o,u,e);const[f,m]=await Promise.all([d,p]);f.setModel(o.valueListInfo.$model);m.setModel(o.valueListInfo.$model);n.setFilterBar(m);n.setTable(f);f.setFilter(m.getId());f.initialized();const v=t.getControl();if(v!==undefined){f.setSelectionMode(v.getMaxConditions()===1?"SingleMaster":"Multi")}f.setWidth("100%");const h=f;h._setShowP13nButton(false)},_getContentById:function(e,t){return e.find(function(e){return e.getId()===t})},_createPopoverContent:function(e,t,n){return new m({id:e,group:"group1",caseSensitive:t,useAsValueHelp:n})},_createDialogContent:function(e,t,n){return new f({id:e,group:"group1",caseSensitive:t,forceBind:n})},_showConditionsContent:function(e,t){let n=e.length&&e[e.length-1].getMetadata().getName()==="sap.ui.mdc.valuehelp.content.Conditions"?e[e.length-1]:undefined;if(n){n.setVisible(true)}else{n=new p;t.addContent(n)}},_alignOrCreateContent:function(e,t,n,o,a){const i=a.getContent();let r=B._getContentById(i,t);if(!r){const l=e.valueListInfo.FetchValues===2?false:true;r=B._createDialogContent(t,n,l);if(!o){a.addContent(r)}else{a.insertContent(r,i.length-1)}}else{r.setVisible(true)}return r},_prepareValueHelpTypeAhead:function(e,t,n,o,a,i){const r=t.getContent();let l=e.data("valuelistForValidation")||"";if(l===" "){l=""}const s=l?n.filter(function(e){return e.valueHelpQualifier===l})[0]:n[0];B._addInOutParametersToPayload(o,s);const u=B._getContentId(e.getId(),s.valueHelpQualifier,true);let c=B._getContentById(r,u);if(!c){const e=i.getUseAsValueHelp();c=B._createPopoverContent(u,a,e);t.insertContent(c,0)}else if(u!==r[0].getId()){t.removeContent(c);t.insertContent(c,0)}return{valueListInfo:s,content:c}},_prepareValueHelpDialog:function(e,t,o,a,i,r){const l=e.data("showConditionPanel")&&e.data("showConditionPanel")!=="false";const s=t.getContent();for(const e of s){e.setVisible(false)}if(l){this._showConditionsContent(s,t)}let u,c;for(const s of o){const o=s.valueHelpQualifier;B._addInOutParametersToPayload(a,s);const d=B._getContentId(e.getId(),o,false);const p=this._alignOrCreateContent(s,d,r,l,t);if(s.valueListInfo.Label){const t=n.getTranslatedTextFromExpBindingString(s.valueListInfo.Label,e.getControl());p.setTitle(t)}if(!c||i&&i===d){c=p;u=s}}if(!u||!c){throw new Error("selectedInfo or selectedContent undefined")}return{selectedInfo:u,selectedContent:c}},_addDescriptionInfosToPayload:function(e,t,n){if(e.valueHelpDescriptionPath!==t.descriptionPath){var o,a,i,r;const u=L(n);const c=(o=u.resolvePath(e.propertyPath).target)===null||o===void 0?void 0:(a=o.annotations)===null||a===void 0?void 0:(i=a.Common)===null||i===void 0?void 0:(r=i.Text)===null||r===void 0?void 0:r.path;e.valueHelpDescriptionPath=t.descriptionPath;e.valueHelpKeyPath=t.keyPath;if(c){var l,s;e.maxLength=e.valueHelpDescriptionPath?(l=u.resolvePath(`/${t.valueListInfo.CollectionPath}/${e.valueHelpDescriptionPath}`))===null||l===void 0?void 0:(s=l.target)===null||s===void 0?void 0:s.maxLength:undefined;e.propertyDescriptionPath=c}}},showValueList:async function(e,t,o){const a=t.getParent(),i=t.isTypeahead(),r=e.propertyPath,l=a.getModel().getMetaModel(),s=a.getModel("_VHUI")!==undefined?a.getModel("_VHUI"):B.createVHUIModel(a,r,l);s.setProperty("/isSuggestion",i);s.setProperty("/minScreenWidth",!i?"418px":undefined);try{const s=await B.getValueListInfo(a,r,e);const c=a.getTypeahead().getContent()[0],d=c.getCaseSensitive();if(i){const{valueListInfo:n,content:o}=B._prepareValueHelpTypeAhead(a,t,s,e,d,c);e.valueHelpQualifier=n.valueHelpQualifier;B._addDescriptionInfosToPayload(e,n,l);if(o.getTable()===undefined||o.getTable()===null){await B._createValueHelpTypeahead(r,a,o,n,e)}}else{var u;const{selectedInfo:i,selectedContent:c}=B._prepareValueHelpDialog(a,t,s,e,o,d);e.valueHelpQualifier=i.valueHelpQualifier;B._addDescriptionInfosToPayload(e,i,l);const p=n.getTranslatedTextFromExpBindingString(B._getDialogTitle(a,(u=i.valueListInfo)===null||u===void 0?void 0:u.Label),a.getControl());t.setTitle(p);if(c.getTable()===undefined||c.getTable()===null){await B._createValueHelpDialog(r,a,c,i,e)}}}catch(e){this._logError(r,e);B.destroyVHContent(a)}}};return B},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/kpiTag/KPITag.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/formatters/KPIFormatter", "sap/fe/core/helpers/BindingToolkit"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, kpiFormatters, BindingToolkit) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  var _exports = {};
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var pathInModel = BindingToolkit.pathInModel;
  var formatResult = BindingToolkit.formatResult;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let KPITagBlock = (
  /**
   * A building block used to display a KPI in the Analytical List Page
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "KPITag",
    namespace: "sap.fe.macros"
  }), _dec2 = blockAttribute({
    type: "string",
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec4 = blockAttribute({
    type: "string",
    required: true
  }), _dec5 = blockAttribute({
    type: "boolean",
    required: false
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(KPITagBlock, _BuildingBlockBase);
    function KPITagBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "kpiModelName", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "hasUnit", _descriptor4, _assertThisInitialized(_this));
      return _this;
    }
    _exports = KPITagBlock;
    var _proto = KPITagBlock.prototype;
    /**
     * Creates a binding expression for a specific property in the KPI model.
     *
     * @param propertyName The property to bind to in the KPI model
     * @returns A binding expression
     */
    _proto.getKpiPropertyExpression = function getKpiPropertyExpression(propertyName) {
      return pathInModel(`/${this.id}/manifest/sap.card/data/json/${propertyName}`, this.kpiModelName);
    }

    /**
     * Creates binding expressions for the KPITag's text and tooltip.
     *
     * @returns Object containing the binding expressions for the text and the tooltip
     */;
    _proto.getBindingExpressions = function getBindingExpressions() {
      const kpiTitle = this.metaPath.getProperty("Title");
      if (!kpiTitle) {
        return {
          text: undefined,
          tooltip: undefined
        };
      }
      const titleExpression = resolveBindingString(kpiTitle);
      return {
        text: formatResult([titleExpression], kpiFormatters.labelFormat),
        tooltip: formatResult([titleExpression, this.getKpiPropertyExpression("mainValueUnscaled"), this.getKpiPropertyExpression("mainUnit"), this.getKpiPropertyExpression("mainCriticality"), String(this.hasUnit)], kpiFormatters.tooltipFormat)
      };
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string
     */;
    _proto.getTemplate = function getTemplate() {
      const {
        text,
        tooltip
      } = this.getBindingExpressions();
      return xml`<m:GenericTag
			id="kpiTag-${this.id}"
			text="${text}"
			design="StatusIconHidden"
			status="${this.getKpiPropertyExpression("mainCriticality")}"
			class="sapUiTinyMarginBegin"
			tooltip="${tooltip}"
			press=".kpiManagement.onKPIPressed(\${$source>},'${this.id}')"
		>
			<m:ObjectNumber
				state="${this.getKpiPropertyExpression("mainCriticality")}"
				emphasized="false"
				number="${this.getKpiPropertyExpression("mainValue")}"
				unit="${this.getKpiPropertyExpression("mainUnit")}"

			/>
		</m:GenericTag>`;
    };
    return KPITagBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "kpiModelName", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "hasUnit", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = KPITagBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/kpiTag/KPITag.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/formatters/KPIFormatter","sap/fe/core/helpers/BindingToolkit"],function(e,t,i,r,n){"use strict";var a,o,l,s,u,p,c,d,f,g,b;var m={};var h=n.resolveBindingString;var y=n.pathInModel;var v=n.formatResult;var P=i.xml;var B=t.defineBuildingBlock;var x=t.blockAttribute;function k(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function z(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function E(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;w(e,t)}function w(e,t){w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return w(e,t)}function $(e,t,i,r,n){var a={};Object.keys(r).forEach(function(e){a[e]=r[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function K(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let O=(a=B({name:"KPITag",namespace:"sap.fe.macros"}),o=x({type:"string",required:true}),l=x({type:"sap.ui.model.Context",required:true}),s=x({type:"string",required:true}),u=x({type:"boolean",required:false}),a(p=(c=function(e){E(t,e);function t(){var t;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}t=e.call(this,...r)||this;k(t,"id",d,z(t));k(t,"metaPath",f,z(t));k(t,"kpiModelName",g,z(t));k(t,"hasUnit",b,z(t));return t}m=t;var i=t.prototype;i.getKpiPropertyExpression=function e(t){return y(`/${this.id}/manifest/sap.card/data/json/${t}`,this.kpiModelName)};i.getBindingExpressions=function e(){const t=this.metaPath.getProperty("Title");if(!t){return{text:undefined,tooltip:undefined}}const i=h(t);return{text:v([i],r.labelFormat),tooltip:v([i,this.getKpiPropertyExpression("mainValueUnscaled"),this.getKpiPropertyExpression("mainUnit"),this.getKpiPropertyExpression("mainCriticality"),String(this.hasUnit)],r.tooltipFormat)}};i.getTemplate=function e(){const{text:t,tooltip:i}=this.getBindingExpressions();return P`<m:GenericTag
			id="kpiTag-${this.id}"
			text="${t}"
			design="StatusIconHidden"
			status="${this.getKpiPropertyExpression("mainCriticality")}"
			class="sapUiTinyMarginBegin"
			tooltip="${i}"
			press=".kpiManagement.onKPIPressed(\${$source>},'${this.id}')"
		>
			<m:ObjectNumber
				state="${this.getKpiPropertyExpression("mainCriticality")}"
				emphasized="false"
				number="${this.getKpiPropertyExpression("mainValue")}"
				unit="${this.getKpiPropertyExpression("mainUnit")}"

			/>
		</m:GenericTag>`};return t}(e),d=$(c.prototype,"id",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),f=$(c.prototype,"metaPath",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),g=$(c.prototype,"kpiModelName",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),b=$(c.prototype,"hasUnit",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),c))||p);m=O;return m},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/library-dbg", ["sap/fe/core/library", "sap/fe/macros/filter/type/MultiValue", "sap/fe/macros/filter/type/Range", "sap/fe/macros/macroLibrary", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/library", "sap/ui/core/XMLTemplateProcessor", "sap/ui/mdc/field/ConditionsType", "sap/ui/mdc/library", "sap/ui/unified/library"], function (_library, _MultiValue, _Range, _macroLibrary, Core, Fragment, _library2, _XMLTemplateProcessor, _ConditionsType, _library3, _library4) {
  "use strict";

  var _exports = {};
  /**
   * Library containing the building blocks for SAP Fiori elements.
   *
   * @namespace
   * @name sap.fe.macros
   * @public
   */
  const macrosNamespace = "sap.fe.macros";

  // library dependencies
  _exports.macrosNamespace = macrosNamespace;
  const thisLib = Core.initLibrary({
    name: "sap.fe.macros",
    dependencies: ["sap.ui.core", "sap.ui.mdc", "sap.ui.unified", "sap.fe.core"],
    types: ["sap.fe.macros.NavigationType"],
    interfaces: [],
    controls: [],
    elements: [],
    // eslint-disable-next-line no-template-curly-in-string
    version: "1.115.1",
    noLibraryCSS: true
  });
  thisLib.NavigationType = {
    /**
     * For External Navigation
     *
     * @public
     */
    External: "External",
    /**
     * For In-Page Navigation
     *
     * @public
     */
    InPage: "InPage",
    /**
     * For No Navigation
     *
     * @public
     */
    None: "None"
  };
  Fragment.registerType("CUSTOM", {
    load: Fragment.getType("XML").load,
    init: function (mSettings) {
      const currentController = mSettings.containingView.getController();
      let targetControllerExtension = currentController;
      if (currentController && !currentController.isA("sap.fe.core.ExtensionAPI")) {
        targetControllerExtension = currentController.getExtensionAPI(mSettings.id);
      }
      mSettings.containingView = {
        oController: targetControllerExtension
      };
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return Fragment.getType("XML").init.apply(this, [mSettings, args]);
    }
  });
  return thisLib;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/library", ["sap/fe/core/library","sap/fe/macros/filter/type/MultiValue","sap/fe/macros/filter/type/Range","sap/fe/macros/macroLibrary","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/library","sap/ui/core/XMLTemplateProcessor","sap/ui/mdc/field/ConditionsType","sap/ui/mdc/library","sap/ui/unified/library"],function(e,a,i,r,n,s,o,t,p,c,l){"use strict";var f={};const u="sap.fe.macros";f.macrosNamespace=u;const y=n.initLibrary({name:"sap.fe.macros",dependencies:["sap.ui.core","sap.ui.mdc","sap.ui.unified","sap.fe.core"],types:["sap.fe.macros.NavigationType"],interfaces:[],controls:[],elements:[],version:"1.115.1",noLibraryCSS:true});y.NavigationType={External:"External",InPage:"InPage",None:"None"};s.registerType("CUSTOM",{load:s.getType("XML").load,init:function(e){const a=e.containingView.getController();let i=a;if(a&&!a.isA("sap.fe.core.ExtensionAPI")){i=a.getExtensionAPI(e.id)}e.containingView={oController:i};for(var r=arguments.length,n=new Array(r>1?r-1:0),o=1;o<r;o++){n[o-1]=arguments[o]}return s.getType("XML").init.apply(this,[e,n])}});return y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/macroLibrary-dbg", ["sap/fe/core/controls/DataLossOrDraftDiscard/DraftDataLossDialog.block", "sap/fe/macros/field/PublicField.block", "sap/fe/macros/form/FormElement.block", "sap/fe/macros/situations/SituationsIndicator.block", "sap/fe/macros/table/QuickFilterSelector.block", "sap/fe/macros/table/TableFullScreenDialog.block", "./actions/CustomAction.block", "./actions/DataFieldForAction.block", "./chart/Chart.block", "./contact/Contact.block", "./draftIndicator/DraftIndicator.block", "./fcl/FlexibleColumnLayoutActions.block", "./filterBar/FilterBar.block", "./form/Form.block", "./form/FormContainer.block", "./fpm/CustomFragment.block", "./internal/ActionCommand.block", "./internal/DataPoint.block", "./internal/FilterField.block", "./internal/InternalField.block", "./kpiTag/KPITag.block", "./microchart/MicroChart.block", "./multiValueField/MultiValueField.block", "./paginator/Paginator.block", "./quickView/QuickView.block", "./share/Share.block", "./table/Table.block", "./valuehelp/ValueHelp.block", "./valuehelp/ValueHelpFilterBar.block", "./visualfilters/VisualFilter.block"], function (DraftDataLossDialogBlock, PublicFieldBlock, FormElementBlock, SituationsIndicatorBlock, QuickFilterSelector, TableFullScreenDialogBlock, CustomAction, DataFieldForAction, ChartBlock, ContactBlock, DraftIndicatorBlock, FlexibleColumnLayoutActionsBlock, FilterBarBlock, FormBlock, FormContainerBlock, CustomFragmentBlock, ActionCommandBlock, DataPointBlock, FilterFieldBlock, InternalFieldBlock, KPITagBlock, MicroChartBlock, MultiValueFieldBlock, PaginatorBlock, QuickViewBlock, ShareBlock, TableBlock, ValueHelpBlock, ValueHelpFilterBarBlock, VisualFilterBlock) {
  "use strict";

  const buildingBlocks = [ActionCommandBlock, ChartBlock, ContactBlock, CustomAction, CustomFragmentBlock, DataFieldForAction, DataPointBlock, DraftDataLossDialogBlock, DraftIndicatorBlock, FilterBarBlock, FilterFieldBlock, FlexibleColumnLayoutActionsBlock, FormBlock, FormContainerBlock, FormElementBlock, InternalFieldBlock, KPITagBlock, MicroChartBlock, MultiValueFieldBlock, PaginatorBlock, PublicFieldBlock, QuickViewBlock, ShareBlock, SituationsIndicatorBlock, TableBlock, TableFullScreenDialogBlock, ValueHelpBlock, ValueHelpFilterBarBlock, VisualFilterBlock, QuickFilterSelector];
  function registerAll() {
    for (const buildingBlock of buildingBlocks) {
      buildingBlock.register();
    }
  }

  //This is needed in for templating test utils
  function unregisterAll() {
    for (const buildingBlock of buildingBlocks) {
      buildingBlock.unregister();
    }
  }

  //Always register when loaded for compatibility
  registerAll();
  return {
    register: registerAll,
    unregister: unregisterAll
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/macroLibrary", ["sap/fe/core/controls/DataLossOrDraftDiscard/DraftDataLossDialog.block","sap/fe/macros/field/PublicField.block","sap/fe/macros/form/FormElement.block","sap/fe/macros/situations/SituationsIndicator.block","sap/fe/macros/table/QuickFilterSelector.block","sap/fe/macros/table/TableFullScreenDialog.block","./actions/CustomAction.block","./actions/DataFieldForAction.block","./chart/Chart.block","./contact/Contact.block","./draftIndicator/DraftIndicator.block","./fcl/FlexibleColumnLayoutActions.block","./filterBar/FilterBar.block","./form/Form.block","./form/FormContainer.block","./fpm/CustomFragment.block","./internal/ActionCommand.block","./internal/DataPoint.block","./internal/FilterField.block","./internal/InternalField.block","./kpiTag/KPITag.block","./microchart/MicroChart.block","./multiValueField/MultiValueField.block","./paginator/Paginator.block","./quickView/QuickView.block","./share/Share.block","./table/Table.block","./valuehelp/ValueHelp.block","./valuehelp/ValueHelpFilterBar.block","./visualfilters/VisualFilter.block"],function(o,l,a,t,c,e,r,i,n,s,b,k,u,f,m,F,d,p,g,D,h,C,V,I,A,P,S,T,v,B){"use strict";const L=[d,n,s,r,F,i,p,o,b,u,g,k,f,m,a,D,h,C,V,I,l,A,P,t,S,e,T,v,B,c];function w(){for(const o of L){o.register()}}function H(){for(const o of L){o.unregister()}}w();return{register:w,unregister:H}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessageButton-dbg", ["sap/base/Log", "sap/base/util/UriParameters", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/macros/messages/MessagePopover", "sap/m/Button", "sap/m/ColumnListItem", "sap/m/Dialog", "sap/m/FormattedText", "sap/m/library", "sap/ui/core/Core", "sap/ui/core/library", "sap/ui/core/mvc/View", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/Sorter"], function (Log, UriParameters, messageHandling, ClassSupport, ResourceModelHelper, MessagePopover, Button, ColumnListItem, Dialog, FormattedText, library, Core, coreLibrary, View, Filter, FilterOperator, Sorter) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var MessageType = coreLibrary.MessageType;
  var ButtonType = library.ButtonType;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let MessageButton = (_dec = defineUI5Class("sap.fe.macros.messages.MessageButton"), _dec2 = aggregation({
    type: "sap.fe.macros.messages.MessageFilter",
    multiple: true,
    singularName: "customFilter"
  }), _dec3 = event(), _dec(_class = (_class2 = /*#__PURE__*/function (_Button) {
    _inheritsLoose(MessageButton, _Button);
    function MessageButton(id, settings) {
      var _this;
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      _this = _Button.call(this, id, settings) || this;
      _initializerDefineProperty(_this, "customFilters", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "messageChange", _descriptor2, _assertThisInitialized(_this));
      _this.sGeneralGroupText = "";
      _this.sViewId = "";
      _this.sLastActionText = "";
      return _this;
    }
    var _proto = MessageButton.prototype;
    _proto.init = function init() {
      Button.prototype.init.apply(this);
      //press event handler attached to open the message popover
      this.attachPress(this.handleMessagePopoverPress, this);
      this.oMessagePopover = new MessagePopover();
      this.oItemBinding = this.oMessagePopover.getBinding("items");
      this.oItemBinding.attachChange(this._setMessageData, this);
      const messageButtonId = this.getId();
      if (messageButtonId) {
        this.oMessagePopover.addCustomData(new sap.ui.core.CustomData({
          key: "messageButtonId",
          value: messageButtonId
        })); // TODO check for custom data type
      }

      this.attachModelContextChange(this._applyFiltersAndSort.bind(this));
      this.oMessagePopover.attachActiveTitlePress(this._activeTitlePress.bind(this));
    }

    /**
     * The method that is called when a user clicks on the MessageButton control.
     *
     * @param oEvent Event object
     */;
    _proto.handleMessagePopoverPress = function handleMessagePopoverPress(oEvent) {
      this.oMessagePopover.toggle(oEvent.getSource());
    }

    /**
     * The method that groups the messages based on the section or subsection they belong to.
     * This method force the loading of contexts for all tables before to apply the grouping.
     *
     * @param oView Current view.
     * @returns Return promise.
     * @private
     */;
    _proto._applyGroupingAsync = async function _applyGroupingAsync(oView) {
      const aWaitForData = [];
      const oViewBindingContext = oView.getBindingContext();
      const _findTablesRelatedToMessages = view => {
        const oRes = [];
        const aMessages = this.oItemBinding.getContexts().map(function (oContext) {
          return oContext.getObject();
        });
        const oViewContext = view.getBindingContext();
        if (oViewContext) {
          const oObjectPage = view.getContent()[0];
          messageHandling.getVisibleSectionsFromObjectPageLayout(oObjectPage).forEach(function (oSection) {
            oSection.getSubSections().forEach(function (oSubSection) {
              oSubSection.findElements(true).forEach(function (oElem) {
                if (oElem.isA("sap.ui.mdc.Table")) {
                  for (let i = 0; i < aMessages.length; i++) {
                    const oRowBinding = oElem.getRowBinding();
                    if (oRowBinding) {
                      const sElemeBindingPath = `${oViewContext.getPath()}/${oElem.getRowBinding().getPath()}`;
                      if (aMessages[i].target.indexOf(sElemeBindingPath) === 0) {
                        oRes.push({
                          table: oElem,
                          subsection: oSubSection
                        });
                        break;
                      }
                    }
                  }
                }
              });
            });
          });
        }
        return oRes;
      };
      // Search for table related to Messages and initialize the binding context of the parent subsection to retrieve the data
      const oTables = _findTablesRelatedToMessages.bind(this)(oView);
      oTables.forEach(function (_oTable) {
        var _oMDCTable$getBinding;
        const oMDCTable = _oTable.table,
          oSubsection = _oTable.subsection;
        if (!oMDCTable.getBindingContext() || ((_oMDCTable$getBinding = oMDCTable.getBindingContext()) === null || _oMDCTable$getBinding === void 0 ? void 0 : _oMDCTable$getBinding.getPath()) !== (oViewBindingContext === null || oViewBindingContext === void 0 ? void 0 : oViewBindingContext.getPath())) {
          oSubsection.setBindingContext(oViewBindingContext);
          if (!oMDCTable.getRowBinding().isLengthFinal()) {
            aWaitForData.push(new Promise(function (resolve) {
              oMDCTable.getRowBinding().attachEventOnce("dataReceived", function () {
                resolve();
              });
            }));
          }
        }
      });
      const waitForGroupingApplied = new Promise(resolve => {
        setTimeout(async () => {
          this._applyGrouping();
          resolve();
        }, 0);
      });
      try {
        await Promise.all(aWaitForData);
        oView.getModel().checkMessages();
        await waitForGroupingApplied;
      } catch (err) {
        Log.error("Error while grouping the messages in the messagePopOver");
      }
    }

    /**
     * The method that groups the messages based on the section or subsection they belong to.
     *
     * @private
     */;
    _proto._applyGrouping = function _applyGrouping() {
      this.oObjectPageLayout = this._getObjectPageLayout(this, this.oObjectPageLayout);
      if (!this.oObjectPageLayout) {
        return;
      }
      const aMessages = this.oMessagePopover.getItems();
      this._checkControlIdInSections(aMessages);
    }

    /**
     * The method retrieves the binding context for the refError object.
     * The refError contains a map to store the indexes of the rows with errors.
     *
     * @param oTable The table for which we want to get the refError Object.
     * @returns Context of the refError.
     * @private
     */;
    _proto._getTableRefErrorContext = function _getTableRefErrorContext(oTable) {
      const oModel = oTable.getModel("internal");
      //initialize the refError property if it doesn't exist
      if (!oTable.getBindingContext("internal").getProperty("refError")) {
        oModel.setProperty("refError", {}, oTable.getBindingContext("internal"));
      }
      const sRefErrorContextPath = oTable.getBindingContext("internal").getPath() + "/refError/" + oTable.getBindingContext().getPath().replace("/", "$") + "$" + oTable.getRowBinding().getPath().replace("/", "$");
      const oContext = oModel.getContext(sRefErrorContextPath);
      if (!oContext.getProperty("")) {
        oModel.setProperty("", {}, oContext);
      }
      return oContext;
    };
    _proto._updateInternalModel = function _updateInternalModel(oTableRowContext, iRowIndex, sTableTargetColProperty, oTable, oMessageObject, bIsCreationRow) {
      let oTemp;
      if (bIsCreationRow) {
        oTemp = {
          rowIndex: "CreationRow",
          targetColProperty: sTableTargetColProperty ? sTableTargetColProperty : ""
        };
      } else {
        oTemp = {
          rowIndex: oTableRowContext ? iRowIndex : "",
          targetColProperty: sTableTargetColProperty ? sTableTargetColProperty : ""
        };
      }
      const oModel = oTable.getModel("internal"),
        oContext = this._getTableRefErrorContext(oTable);
      //we first remove the entries with obsolete message ids from the internal model before inserting the new error info :
      const aValidMessageIds = sap.ui.getCore().getMessageManager().getMessageModel().getData().map(function (message) {
        return message.id;
      });
      let aObsoleteMessagelIds;
      if (oContext.getProperty()) {
        aObsoleteMessagelIds = Object.keys(oContext.getProperty()).filter(function (internalMessageId) {
          return aValidMessageIds.indexOf(internalMessageId) === -1;
        });
        aObsoleteMessagelIds.forEach(function (obsoleteId) {
          delete oContext.getProperty()[obsoleteId];
        });
      }
      oModel.setProperty(oMessageObject.getId(), Object.assign({}, oContext.getProperty(oMessageObject.getId()) ? oContext.getProperty(oMessageObject.getId()) : {}, oTemp), oContext);
    }

    /**
     * The method that sets groups for transient messages.
     *
     * @param {object} message The transient message for which we want to compute and set group.
     * @param {string} sActionName The action name.
     * @private
     */;
    _proto._setGroupLabelForTransientMsg = function _setGroupLabelForTransientMsg(message, sActionName) {
      this.sLastActionText = this.sLastActionText ? this.sLastActionText : Core.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_LAST_ACTION");
      message.setGroupName(`${this.sLastActionText}: ${sActionName}`);
    }

    /**
     * The method that groups messages and adds the subtitle.
     *
     * @param {object} message The message we use to compute the group and subtitle.
     * @param {object} section The section containing the controls.
     * @param {object} subSection The subsection containing the controls.
     * @param {object} aElements List of controls from a subsection related to a message.
     * @param {boolean} bMultipleSubSections True if there is more than 1 subsection in the section.
     * @param {string} sActionName The action name.
     * @returns {object} Return the control targeted by the message.
     * @private
     */;
    _proto._computeMessageGroupAndSubTitle = function _computeMessageGroupAndSubTitle(message, section, subSection, aElements, bMultipleSubSections, sActionName) {
      var _message$getBindingCo;
      const resourceModel = getResourceModel(section);
      this.oItemBinding.detachChange(this._setMessageData, this);
      const oMessageObject = (_message$getBindingCo = message.getBindingContext("message")) === null || _message$getBindingCo === void 0 ? void 0 : _message$getBindingCo.getObject();
      const setSectionNameInGroup = true;
      let oElement, oTable, oTargetTableInfo, l, iRowIndex, oTargetedControl, bIsCreationRow;
      const bIsBackendMessage = new RegExp("^/").test(oMessageObject === null || oMessageObject === void 0 ? void 0 : oMessageObject.getTargets()[0]);
      if (bIsBackendMessage) {
        for (l = 0; l < aElements.length; l++) {
          oElement = aElements[l];
          oTargetedControl = oElement;
          if (oElement.isA("sap.m.Table") || oElement.isA("sap.ui.table.Table")) {
            oTable = oElement.getParent();
            const oRowBinding = oTable.getRowBinding();
            const fnCallbackSetGroupName = (oMessageObj, actionName) => {
              this._setGroupLabelForTransientMsg(message, actionName);
            };
            if (oRowBinding && oRowBinding.isLengthFinal() && oTable.getBindingContext()) {
              const obj = messageHandling.getTableColumnDataAndSetSubtile(oMessageObject, oTable, oElement, oRowBinding, sActionName, setSectionNameInGroup, fnCallbackSetGroupName);
              oTargetTableInfo = obj.oTargetTableInfo;
              if (obj.subTitle) {
                message.setSubtitle(obj.subTitle);
              }
              message.setActiveTitle(!!oTargetTableInfo.oTableRowContext);
              if (oTargetTableInfo.oTableRowContext) {
                this._formatMessageDescription(message, oTargetTableInfo.oTableRowContext, oTargetTableInfo.sTableTargetColName, oTable);
              }
              iRowIndex = oTargetTableInfo.oTableRowContext && oTargetTableInfo.oTableRowContext.getIndex();
              this._updateInternalModel(oTargetTableInfo.oTableRowContext, iRowIndex, oTargetTableInfo.sTableTargetColProperty, oTable, oMessageObject);
            }
          } else {
            message.setActiveTitle(true);
            //check if the targeted control is a child of one of the other controls
            const bIsTargetedControlOrphan = messageHandling.bIsOrphanElement(oTargetedControl, aElements);
            if (bIsTargetedControlOrphan) {
              //set the subtitle
              message.setSubtitle("");
              break;
            }
          }
        }
      } else {
        //There is only one elt as this is a frontEnd message
        oTargetedControl = aElements[0];
        oTable = this._getMdcTable(oTargetedControl);
        if (oTable) {
          oTargetTableInfo = {};
          oTargetTableInfo.tableHeader = oTable.getHeader();
          const iTargetColumnIndex = this._getTableColumnIndex(oTargetedControl);
          oTargetTableInfo.sTableTargetColProperty = iTargetColumnIndex > -1 ? oTable.getColumns()[iTargetColumnIndex].getDataProperty() : undefined;
          oTargetTableInfo.sTableTargetColName = oTargetTableInfo.sTableTargetColProperty && iTargetColumnIndex > -1 ? oTable.getColumns()[iTargetColumnIndex].getHeader() : undefined;
          bIsCreationRow = this._getTableRow(oTargetedControl).isA("sap.ui.table.CreationRow");
          if (!bIsCreationRow) {
            iRowIndex = this._getTableRowIndex(oTargetedControl);
            oTargetTableInfo.oTableRowBindingContexts = oTable.getRowBinding().getCurrentContexts();
            oTargetTableInfo.oTableRowContext = oTargetTableInfo.oTableRowBindingContexts[iRowIndex];
          }
          const sMessageSubtitle = messageHandling.getMessageSubtitle(oMessageObject, oTargetTableInfo.oTableRowBindingContexts, oTargetTableInfo.oTableRowContext, oTargetTableInfo.sTableTargetColName, oTable, bIsCreationRow, iTargetColumnIndex === 0 && oTargetedControl.getValueState() === "Error" ? oTargetedControl : undefined);
          //set the subtitle
          if (sMessageSubtitle) {
            message.setSubtitle(sMessageSubtitle);
          }
          message.setActiveTitle(true);
          this._updateInternalModel(oTargetTableInfo.oTableRowContext, iRowIndex, oTargetTableInfo.sTableTargetColProperty, oTable, oMessageObject, bIsCreationRow);
        }
      }
      if (setSectionNameInGroup) {
        const sectionBasedGroupName = messageHandling.createSectionGroupName(section, subSection, bMultipleSubSections, oTargetTableInfo, resourceModel);
        message.setGroupName(sectionBasedGroupName);
        const sViewId = this._getViewId(this.getId());
        const oView = Core.byId(sViewId);
        const oMessageTargetProperty = oMessageObject.getTargets()[0] && oMessageObject.getTargets()[0].split("/").pop();
        const oUIModel = oView === null || oView === void 0 ? void 0 : oView.getModel("internal");
        if (oUIModel && oUIModel.getProperty("/messageTargetProperty") && oMessageTargetProperty && oMessageTargetProperty === oUIModel.getProperty("/messageTargetProperty")) {
          this.oMessagePopover.fireActiveTitlePress({
            item: message
          });
          oUIModel.setProperty("/messageTargetProperty", false);
        }
      }
      this.oItemBinding.attachChange(this._setMessageData, this);
      return oTargetedControl;
    };
    _proto._checkControlIdInSections = function _checkControlIdInSections(aMessages) {
      let section, aSubSections, message, i, j, k;
      this.sGeneralGroupText = this.sGeneralGroupText ? this.sGeneralGroupText : Core.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL");
      //Get all sections from the object page layout
      const aVisibleSections = messageHandling.getVisibleSectionsFromObjectPageLayout(this.oObjectPageLayout);
      if (aVisibleSections) {
        var _oView$getBindingCont;
        const viewId = this._getViewId(this.getId());
        const oView = Core.byId(viewId);
        const sActionName = oView === null || oView === void 0 ? void 0 : (_oView$getBindingCont = oView.getBindingContext("internal")) === null || _oView$getBindingCont === void 0 ? void 0 : _oView$getBindingCont.getProperty("sActionName");
        if (sActionName) {
          (oView === null || oView === void 0 ? void 0 : oView.getBindingContext("internal")).setProperty("sActionName", null);
        }
        for (i = aMessages.length - 1; i >= 0; --i) {
          // Loop over all messages
          message = aMessages[i];
          let bIsGeneralGroupName = true;
          for (j = aVisibleSections.length - 1; j >= 0; --j) {
            // Loop over all visible sections
            section = aVisibleSections[j];
            aSubSections = section.getSubSections();
            for (k = aSubSections.length - 1; k >= 0; --k) {
              // Loop over all sub-sections
              const subSection = aSubSections[k];
              const oMessageObject = message.getBindingContext("message").getObject();
              const aControls = messageHandling.getControlFromMessageRelatingToSubSection(subSection, oMessageObject);
              if (aControls.length > 0) {
                const oTargetedControl = this._computeMessageGroupAndSubTitle(message, section, subSection, aControls, aSubSections.length > 1, sActionName);
                // if we found table that matches with the message, we don't stop the loop
                // in case we find an additional control (eg mdc field) that also match with the message
                if (oTargetedControl && !oTargetedControl.isA("sap.m.Table") && !oTargetedControl.isA("sap.ui.table.Table")) {
                  j = k = -1;
                }
                bIsGeneralGroupName = false;
              }
            }
          }
          if (bIsGeneralGroupName) {
            const oMessageObject = message.getBindingContext("message").getObject();
            message.setActiveTitle(false);
            if (oMessageObject.persistent && sActionName) {
              this._setGroupLabelForTransientMsg(message, sActionName);
            } else {
              message.setGroupName(this.sGeneralGroupText);
            }
          }
        }
      }
    };
    _proto._findTargetForMessage = function _findTargetForMessage(message) {
      const messageObject = message.getBindingContext("message") && message.getBindingContext("message").getObject();
      if (messageObject && messageObject.target) {
        const oMetaModel = this.oObjectPageLayout && this.oObjectPageLayout.getModel() && this.oObjectPageLayout.getModel().getMetaModel(),
          contextPath = oMetaModel && oMetaModel.getMetaPath(messageObject.target),
          oContextPathMetadata = oMetaModel && oMetaModel.getObject(contextPath);
        if (oContextPathMetadata && oContextPathMetadata.$kind === "Property") {
          return true;
        }
      }
    };
    _proto._fnEnableBindings = function _fnEnableBindings(aSections) {
      if (UriParameters.fromQuery(window.location.search).get("sap-fe-xx-lazyloadingtest")) {
        return;
      }
      for (let iSection = 0; iSection < aSections.length; iSection++) {
        const oSection = aSections[iSection];
        let nonTableChartcontrolFound = false;
        const aSubSections = oSection.getSubSections();
        for (let iSubSection = 0; iSubSection < aSubSections.length; iSubSection++) {
          const oSubSection = aSubSections[iSubSection];
          const oAllBlocks = oSubSection.getBlocks();
          if (oAllBlocks) {
            for (let block = 0; block < oSubSection.getBlocks().length; block++) {
              var _oAllBlocks$block$get;
              if (oAllBlocks[block].getContent && !((_oAllBlocks$block$get = oAllBlocks[block].getContent()) !== null && _oAllBlocks$block$get !== void 0 && _oAllBlocks$block$get.isA("sap.fe.macros.table.TableAPI"))) {
                nonTableChartcontrolFound = true;
                break;
              }
            }
            if (nonTableChartcontrolFound) {
              oSubSection.setBindingContext(undefined);
            }
          }
          if (oSubSection.getBindingContext()) {
            this._findMessageGroupAfterRebinding();
            oSubSection.getBindingContext().getBinding().attachDataReceived(this._findMessageGroupAfterRebinding.bind(this));
          }
        }
      }
    };
    _proto._findMessageGroupAfterRebinding = function _findMessageGroupAfterRebinding() {
      const aMessages = this.oMessagePopover.getItems();
      this._checkControlIdInSections(aMessages);
    }

    /**
     * The method that retrieves the view ID (HTMLView/XMLView/JSONview/JSView/Templateview) of any control.
     *
     * @param sControlId ID of the control needed to retrieve the view ID
     * @returns The view ID of the control
     */;
    _proto._getViewId = function _getViewId(sControlId) {
      let sViewId,
        oControl = Core.byId(sControlId);
      while (oControl) {
        if (oControl instanceof View) {
          sViewId = oControl.getId();
          break;
        }
        oControl = oControl.getParent();
      }
      return sViewId;
    };
    _proto._setLongtextUrlDescription = function _setLongtextUrlDescription(sMessageDescriptionContent, oDiagnosisTitle) {
      this.oMessagePopover.setAsyncDescriptionHandler(function (config) {
        // This stores the old description
        const sOldDescription = sMessageDescriptionContent;
        // Here we can fetch the data and concatenate it to the old one
        // By default, the longtextUrl fetching will overwrite the description (with the default behaviour)
        // Here as we have overwritten the default async handler, which fetches and replaces the description of the item
        // we can manually modify it to include whatever needed.
        const sLongTextUrl = config.item.getLongtextUrl();
        if (sLongTextUrl) {
          jQuery.ajax({
            type: "GET",
            url: sLongTextUrl,
            success: function (data) {
              const sDiagnosisText = oDiagnosisTitle.getHtmlText() + data;
              config.item.setDescription(`${sOldDescription}${sDiagnosisText}`);
              config.promise.resolve();
            },
            error: function () {
              config.item.setDescription(sMessageDescriptionContent);
              const sError = `A request has failed for long text data. URL: ${sLongTextUrl}`;
              Log.error(sError);
              config.promise.reject(sError);
            }
          });
        }
      });
    };
    _proto._formatMessageDescription = function _formatMessageDescription(message, oTableRowContext, sTableTargetColName, oTable) {
      var _message$getBindingCo2;
      const resourceModel = getResourceModel(oTable);
      const sTableFirstColProperty = oTable.getParent().getIdentifierColumn();
      let sColumnInfo = "";
      const oMsgObj = (_message$getBindingCo2 = message.getBindingContext("message")) === null || _message$getBindingCo2 === void 0 ? void 0 : _message$getBindingCo2.getObject();
      const oColFromTableSettings = messageHandling.fetchColumnInfo(oMsgObj, oTable);
      if (sTableTargetColName) {
        // if column in present in table definition
        sColumnInfo = `${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")}: ${sTableTargetColName}`;
      } else if (oColFromTableSettings) {
        if (oColFromTableSettings.availability === "Hidden") {
          // if column in neither in table definition nor personalization
          if (message.getType() === "Error") {
            sColumnInfo = sTableFirstColProperty ? `${resourceModel.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC_ERROR")} ${oTableRowContext.getValue(sTableFirstColProperty)}` + "." : `${resourceModel.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC_ERROR")}` + ".";
          } else {
            sColumnInfo = sTableFirstColProperty ? `${resourceModel.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC")} ${oTableRowContext.getValue(sTableFirstColProperty)}` + "." : `${resourceModel.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC")}` + ".";
          }
        } else {
          // if column is not in table definition but in personalization
          //if no navigation to sub op then remove link to error field BCP : 2280168899
          if (!this._navigationConfigured(oTable)) {
            message.setActiveTitle(false);
          }
          sColumnInfo = `${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")}: ${oColFromTableSettings.label} (${resourceModel.getText("T_COLUMN_INDICATOR_IN_TABLE_DEFINITION")})`;
        }
      }
      const oFieldsAffectedTitle = new FormattedText({
        htmlText: `<html><body><strong>${resourceModel.getText("T_FIELDS_AFFECTED_TITLE")}</strong></body></html><br>`
      });
      let sFieldAffectedText;
      if (sTableFirstColProperty) {
        sFieldAffectedText = `${oFieldsAffectedTitle.getHtmlText()}<br>${resourceModel.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${oTable.getHeader()}<br>${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${oTableRowContext.getValue(sTableFirstColProperty)}<br>${sColumnInfo}<br>`;
      } else if (sColumnInfo == "" || !sColumnInfo) {
        sFieldAffectedText = "";
      } else {
        sFieldAffectedText = `${oFieldsAffectedTitle.getHtmlText()}<br>${resourceModel.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${oTable.getHeader()}<br>${sColumnInfo}<br>`;
      }
      const oDiagnosisTitle = new FormattedText({
        htmlText: `<html><body><strong>${resourceModel.getText("T_DIAGNOSIS_TITLE")}</strong></body></html><br>`
      });
      // get the UI messages from the message context to set it to Diagnosis section
      const sUIMessageDescription = message.getBindingContext("message").getObject().description;
      //set the description to null to reset it below
      message.setDescription(null);
      let sDiagnosisText = "";
      let sMessageDescriptionContent = "";
      if (message.getLongtextUrl()) {
        sMessageDescriptionContent = `${sFieldAffectedText}<br>`;
        this._setLongtextUrlDescription(sMessageDescriptionContent, oDiagnosisTitle);
      } else if (sUIMessageDescription) {
        sDiagnosisText = `${oDiagnosisTitle.getHtmlText()}<br>${sUIMessageDescription}`;
        sMessageDescriptionContent = `${sFieldAffectedText}<br>${sDiagnosisText}`;
        message.setDescription(sMessageDescriptionContent);
      } else {
        message.setDescription(sFieldAffectedText);
      }
    }

    /**
     * Method to set the button text, count and icon property based upon the message items
     * ButtonType:  Possible settings for warning and error messages are 'critical' and 'negative'.
     *
     *
     * @private
     */;
    _proto._setMessageData = function _setMessageData() {
      clearTimeout(this._setMessageDataTimeout);
      this._setMessageDataTimeout = setTimeout(async () => {
        const sIcon = "",
          oMessages = this.oMessagePopover.getItems(),
          oMessageCount = {
            Error: 0,
            Warning: 0,
            Success: 0,
            Information: 0
          },
          oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core"),
          iMessageLength = oMessages.length;
        let sButtonType = ButtonType.Default,
          sMessageKey = "",
          sTooltipText = "",
          sMessageText = "";
        if (iMessageLength > 0) {
          for (let i = 0; i < iMessageLength; i++) {
            if (!oMessages[i].getType() || oMessages[i].getType() === "") {
              ++oMessageCount["Information"];
            } else {
              ++oMessageCount[oMessages[i].getType()];
            }
          }
          if (oMessageCount[MessageType.Error] > 0) {
            sButtonType = ButtonType.Negative;
          } else if (oMessageCount[MessageType.Warning] > 0) {
            sButtonType = ButtonType.Critical;
          } else if (oMessageCount[MessageType.Success] > 0) {
            sButtonType = ButtonType.Success;
          } else if (oMessageCount[MessageType.Information] > 0) {
            sButtonType = ButtonType.Neutral;
          }
          const totalNumberOfMessages = oMessageCount[MessageType.Error] + oMessageCount[MessageType.Warning] + oMessageCount[MessageType.Success] + oMessageCount[MessageType.Information];
          this.setText(totalNumberOfMessages.toString());
          if (oMessageCount.Error === 1) {
            sMessageKey = "C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR";
          } else if (oMessageCount.Error > 1) {
            sMessageKey = "C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_MULTIPLE_ERROR_TOOLTIP";
          } else if (!oMessageCount.Error && oMessageCount.Warning) {
            sMessageKey = "C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_WARNING_TOOLTIP";
          } else if (!oMessageCount.Error && !oMessageCount.Warning && oMessageCount.Information) {
            sMessageKey = "C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO";
          } else if (!oMessageCount.Error && !oMessageCount.Warning && !oMessageCount.Information && oMessageCount.Success) {
            sMessageKey = "C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS";
          }
          if (sMessageKey) {
            sMessageText = oResourceBundle.getText(sMessageKey);
            sTooltipText = oMessageCount.Error ? `${oMessageCount.Error} ${sMessageText}` : sMessageText;
            this.setTooltip(sTooltipText);
          }
          this.setIcon(sIcon);
          this.setType(sButtonType);
          this.setVisible(true);
          const oView = Core.byId(this.sViewId);
          if (oView) {
            const oPageReady = oView.getController().pageReady;
            try {
              await oPageReady.waitPageReady();
              await this._applyGroupingAsync(oView);
            } catch (err) {
              Log.error("fail grouping messages");
            }
            this.fireMessageChange({
              iMessageLength: iMessageLength
            });
          }
          if (iMessageLength > 1) {
            this.oMessagePopover.navigateBack();
          }
        } else {
          this.setVisible(false);
          this.fireMessageChange({
            iMessageLength: iMessageLength
          });
        }
      }, 100);
    }

    /**
     * The method that is called when a user clicks on the title of the message.
     *
     * @function
     * @name _activeTitlePress
     * @private
     * @param oEvent Event object passed from the handler
     */;
    _proto._activeTitlePress = async function _activeTitlePress(oEvent) {
      const oInternalModelContext = this.getBindingContext("pageInternal");
      oInternalModelContext.setProperty("errorNavigationSectionFlag", true);
      const oItem = oEvent.getParameter("item"),
        oMessage = oItem.getBindingContext("message").getObject(),
        bIsBackendMessage = new RegExp("^/").test(oMessage.getTarget()),
        oView = Core.byId(this.sViewId);
      let oControl, sSectionTitle;
      const _defaultFocus = function (message, mdcTable) {
        const focusInfo = {
          preventScroll: true,
          targetInfo: message
        };
        mdcTable.focus(focusInfo);
      };

      //check if the pressed item is related to a table control
      if (oItem.getGroupName().indexOf("Table:") !== -1) {
        let oTargetMdcTable;
        if (bIsBackendMessage) {
          oTargetMdcTable = oMessage.controlIds.map(function (sControlId) {
            const control = Core.byId(sControlId);
            const oParentControl = control && control.getParent();
            return oParentControl && oParentControl.isA("sap.ui.mdc.Table") && oParentControl.getHeader() === oItem.getGroupName().split(", Table: ")[1] ? oParentControl : null;
          }).reduce(function (acc, val) {
            return val ? val : acc;
          });
          if (oTargetMdcTable) {
            sSectionTitle = oItem.getGroupName().split(", ")[0];
            try {
              await this._navigateFromMessageToSectionTableInIconTabBarMode(oTargetMdcTable, this.oObjectPageLayout, sSectionTitle);
              const oRefErrorContext = this._getTableRefErrorContext(oTargetMdcTable);
              const oRefError = oRefErrorContext.getProperty(oItem.getBindingContext("message").getObject().getId());
              const _setFocusOnTargetField = async (targetMdcTable, iRowIndex) => {
                const aTargetMdcTableRow = this._getMdcTableRows(targetMdcTable),
                  iFirstVisibleRow = this._getGridTable(targetMdcTable).getFirstVisibleRow();
                if (aTargetMdcTableRow.length > 0 && aTargetMdcTableRow[0]) {
                  const oTargetRow = aTargetMdcTableRow[iRowIndex - iFirstVisibleRow],
                    oTargetCell = this.getTargetCell(oTargetRow, oMessage);
                  if (oTargetCell) {
                    this.setFocusToControl(oTargetCell);
                    return undefined;
                  } else {
                    // control not found on table
                    const errorProperty = oMessage.getTarget().split("/").pop();
                    if (errorProperty) {
                      oView.getModel("internal").setProperty("/messageTargetProperty", errorProperty);
                    }
                    if (this._navigationConfigured(targetMdcTable)) {
                      return oView.getController()._routing.navigateForwardToContext(oTargetRow.getBindingContext());
                    } else {
                      return false;
                    }
                  }
                }
                return undefined;
              };
              if (oTargetMdcTable.data("tableType") === "GridTable" && oRefError.rowIndex !== "") {
                const iFirstVisibleRow = this._getGridTable(oTargetMdcTable).getFirstVisibleRow();
                try {
                  await oTargetMdcTable.scrollToIndex(oRefError.rowIndex);
                  const aTargetMdcTableRow = this._getMdcTableRows(oTargetMdcTable);
                  let iNewFirstVisibleRow, bScrollNeeded;
                  if (aTargetMdcTableRow.length > 0 && aTargetMdcTableRow[0]) {
                    iNewFirstVisibleRow = aTargetMdcTableRow[0].getParent().getFirstVisibleRow();
                    bScrollNeeded = iFirstVisibleRow - iNewFirstVisibleRow !== 0;
                  }
                  let oWaitControlIdAdded;
                  if (bScrollNeeded) {
                    //The scrollToIndex function does not wait for the UI update. As a workaround, pending a fix from MDC (BCP: 2170251631) we use the event "UIUpdated".
                    oWaitControlIdAdded = new Promise(function (resolve) {
                      Core.attachEvent("UIUpdated", resolve);
                    });
                  } else {
                    oWaitControlIdAdded = Promise.resolve();
                  }
                  await oWaitControlIdAdded;
                  setTimeout(async function () {
                    const focusOnTargetField = await _setFocusOnTargetField(oTargetMdcTable, oRefError.rowIndex);
                    if (focusOnTargetField === false) {
                      _defaultFocus(oMessage, oTargetMdcTable);
                    }
                  }, 0);
                } catch (err) {
                  Log.error("Error while focusing on error");
                }
              } else if (oTargetMdcTable.data("tableType") === "ResponsiveTable" && oRefError) {
                const focusOnMessageTargetControl = await this.focusOnMessageTargetControl(oView, oMessage, oTargetMdcTable, oRefError.rowIndex);
                if (focusOnMessageTargetControl === false) {
                  _defaultFocus(oMessage, oTargetMdcTable);
                }
              } else {
                this.focusOnMessageTargetControl(oView, oMessage);
              }
            } catch (err) {
              Log.error("Fail to navigate to Error control");
            }
          }
        } else {
          oControl = Core.byId(oMessage.controlIds[0]);
          //If the control underlying the frontEnd message is not within the current section, we first go into the target section:
          const oSelectedSection = Core.byId(this.oObjectPageLayout.getSelectedSection());
          if ((oSelectedSection === null || oSelectedSection === void 0 ? void 0 : oSelectedSection.findElements(true).indexOf(oControl)) === -1) {
            sSectionTitle = oItem.getGroupName().split(", ")[0];
            this._navigateFromMessageToSectionInIconTabBarMode(this.oObjectPageLayout, sSectionTitle);
          }
          this.setFocusToControl(oControl);
        }
      } else {
        // focus on control
        sSectionTitle = oItem.getGroupName().split(", ")[0];
        this._navigateFromMessageToSectionInIconTabBarMode(this.oObjectPageLayout, sSectionTitle);
        this.focusOnMessageTargetControl(oView, oMessage);
      }
    }

    /**
     * Retrieves a table cell targeted by a message.
     *
     * @param {object} targetRow A table row
     * @param {object} message Message targeting a cell
     * @returns {object} Returns the cell
     * @private
     */;
    _proto.getTargetCell = function getTargetCell(targetRow, message) {
      return message.getControlIds().length > 0 ? message.getControlIds().map(function (controlId) {
        const isControlInTable = targetRow.findElements(true, function (elem) {
          return elem.getId() === controlId;
        });
        return isControlInTable.length > 0 ? Core.byId(controlId) : null;
      }).reduce(function (acc, val) {
        return val ? val : acc;
      }) : null;
    }

    /**
     * Focus on the control targeted by a message.
     *
     * @param {object} view The current view
     * @param {object} message The message targeting the control on which we want to set the focus
     * @param {object} targetMdcTable The table targeted by the message (optional)
     * @param {number} rowIndex The row index of the table targeted by the message (optional)
     * @returns {Promise} Promise
     * @private
     */;
    _proto.focusOnMessageTargetControl = async function focusOnMessageTargetControl(view, message, targetMdcTable, rowIndex) {
      const aAllViewElements = view.findElements(true);
      const aErroneousControls = message.getControlIds().filter(function (sControlId) {
        return aAllViewElements.some(function (oElem) {
          return oElem.getId() === sControlId && oElem.getDomRef();
        });
      }).map(function (sControlId) {
        return Core.byId(sControlId);
      });
      const aNotTableErroneousControls = aErroneousControls.filter(function (oElem) {
        return !oElem.isA("sap.m.Table") && !oElem.isA("sap.ui.table.Table");
      });
      //The focus is set on Not Table control in priority
      if (aNotTableErroneousControls.length > 0) {
        this.setFocusToControl(aNotTableErroneousControls[0]);
        return undefined;
      } else if (aErroneousControls.length > 0) {
        const aTargetMdcTableRow = targetMdcTable ? targetMdcTable.findElements(true, function (oElem) {
          return oElem.isA(ColumnListItem.getMetadata().getName());
        }) : [];
        if (aTargetMdcTableRow.length > 0 && aTargetMdcTableRow[0]) {
          const oTargetRow = aTargetMdcTableRow[rowIndex];
          const oTargetCell = this.getTargetCell(oTargetRow, message);
          if (oTargetCell) {
            const oTargetField = oTargetCell.isA("sap.fe.macros.field.FieldAPI") ? oTargetCell.getContent().getContentEdit()[0] : oTargetCell.getItems()[0].getContent().getContentEdit()[0];
            this.setFocusToControl(oTargetField);
            return undefined;
          } else {
            const errorProperty = message.getTarget().split("/").pop();
            if (errorProperty) {
              view.getModel("internal").setProperty("/messageTargetProperty", errorProperty);
            }
            if (this._navigationConfigured(targetMdcTable)) {
              return view.getController()._routing.navigateForwardToContext(oTargetRow.getBindingContext());
            } else {
              return false;
            }
          }
        }
        return undefined;
      }
      return undefined;
    }

    /**
     *
     * @param obj The message object
     * @param aSections The array of sections in the object page
     * @returns The rank of the message
     */;
    _proto._getMessageRank = function _getMessageRank(obj, aSections) {
      if (aSections) {
        let section, aSubSections, subSection, j, k, aElements, aAllElements, sectionRank;
        for (j = aSections.length - 1; j >= 0; --j) {
          // Loop over all sections
          section = aSections[j];
          aSubSections = section.getSubSections();
          for (k = aSubSections.length - 1; k >= 0; --k) {
            // Loop over all sub-sections
            subSection = aSubSections[k];
            aAllElements = subSection.findElements(true); // Get all elements inside a sub-section
            //Try to find the control 1 inside the sub section
            aElements = aAllElements.filter(this._fnFilterUponId.bind(this, obj.getControlId()));
            sectionRank = j + 1;
            if (aElements.length > 0) {
              if (section.getVisible() && subSection.getVisible()) {
                if (!obj.hasOwnProperty("sectionName")) {
                  obj.sectionName = section.getTitle();
                }
                if (!obj.hasOwnProperty("subSectionName")) {
                  obj.subSectionName = subSection.getTitle();
                }
                return sectionRank * 10 + (k + 1);
              } else {
                // if section or subsection is invisible then group name would be Last Action
                // so ranking should be lower
                return 1;
              }
            }
          }
        }
        //if sub section title is Other messages, we return a high number(rank), which ensures
        //that messages belonging to this sub section always come later in messagePopover
        if (!obj.sectionName && !obj.subSectionName && obj.persistent) {
          return 1;
        }
        return 999;
      }
      return 999;
    }

    /**
     * Method to set the filters based upon the message items
     * The desired filter operation is:
     * ( filters provided by user && ( validation = true && Control should be present in view ) || messages for the current matching context ).
     *
     * @private
     */;
    _proto._applyFiltersAndSort = function _applyFiltersAndSort() {
      let oValidationFilters,
        oValidationAndContextFilter,
        oFilters,
        sPath,
        oSorter,
        oDialogFilter,
        objectPageLayoutSections = null;
      const aUserDefinedFilter = [];
      const filterOutMessagesInDialog = () => {
        const fnTest = aControlIds => {
          let index = Infinity,
            oControl = Core.byId(aControlIds[0]);
          const errorFieldControl = Core.byId(aControlIds[0]);
          while (oControl) {
            const fieldRankinDialog = oControl instanceof Dialog ? (errorFieldControl === null || errorFieldControl === void 0 ? void 0 : errorFieldControl.getParent()).findElements(true).indexOf(errorFieldControl) : Infinity;
            if (oControl instanceof Dialog) {
              if (index > fieldRankinDialog) {
                index = fieldRankinDialog;
                // Set the focus to the dialog's control
                this.setFocusToControl(errorFieldControl);
              }
              // messages for sap.m.Dialog should not appear in the message button
              return false;
            }
            oControl = oControl.getParent();
          }
          return true;
        };
        return new Filter({
          path: "controlIds",
          test: fnTest,
          caseSensitive: true
        });
      };
      //Filter function to verify if the control is part of the current view or not
      function getCheckControlInViewFilter() {
        const fnTest = function (aControlIds) {
          if (!aControlIds.length) {
            return false;
          }
          let oControl = Core.byId(aControlIds[0]);
          while (oControl) {
            if (oControl.getId() === sViewId) {
              return true;
            }
            if (oControl instanceof Dialog) {
              // messages for sap.m.Dialog should not appear in the message button
              return false;
            }
            oControl = oControl.getParent();
          }
          return false;
        };
        return new Filter({
          path: "controlIds",
          test: fnTest,
          caseSensitive: true
        });
      }
      if (!this.sViewId) {
        this.sViewId = this._getViewId(this.getId());
      }
      const sViewId = this.sViewId;
      //Add the filters provided by the user
      const aCustomFilters = this.getAggregation("customFilters");
      if (aCustomFilters) {
        aCustomFilters.forEach(function (filter) {
          aUserDefinedFilter.push(new Filter({
            path: filter.getProperty("path"),
            operator: filter.getProperty("operator"),
            value1: filter.getProperty("value1"),
            value2: filter.getProperty("value2")
          }));
        });
      }
      const oBindingContext = this.getBindingContext();
      if (!oBindingContext) {
        this.setVisible(false);
        return;
      } else {
        sPath = oBindingContext.getPath();
        //Filter for filtering out only validation messages which are currently present in the view
        oValidationFilters = new Filter({
          filters: [new Filter({
            path: "validation",
            operator: FilterOperator.EQ,
            value1: true
          }), getCheckControlInViewFilter()],
          and: true
        });
        //Filter for filtering out the bound messages i.e target starts with the context path
        oValidationAndContextFilter = new Filter({
          filters: [oValidationFilters, new Filter({
            path: "target",
            operator: FilterOperator.StartsWith,
            value1: sPath
          })],
          and: false
        });
        oDialogFilter = new Filter({
          filters: [filterOutMessagesInDialog()]
        });
      }
      const oValidationContextDialogFilters = new Filter({
        filters: [oValidationAndContextFilter, oDialogFilter],
        and: true
      });
      // and finally - if there any - add custom filter (via OR)
      if (aUserDefinedFilter.length > 0) {
        oFilters = new Filter({
          filters: [aUserDefinedFilter, oValidationContextDialogFilters],
          and: false
        });
      } else {
        oFilters = oValidationContextDialogFilters;
      }
      this.oItemBinding.filter(oFilters);
      this.oObjectPageLayout = this._getObjectPageLayout(this, this.oObjectPageLayout);
      // We support sorting only for ObjectPageLayout use-case.
      if (this.oObjectPageLayout) {
        oSorter = new Sorter("", null, null, (obj1, obj2) => {
          if (!objectPageLayoutSections) {
            objectPageLayoutSections = this.oObjectPageLayout && this.oObjectPageLayout.getSections();
          }
          const rankA = this._getMessageRank(obj1, objectPageLayoutSections);
          const rankB = this._getMessageRank(obj2, objectPageLayoutSections);
          if (rankA < rankB) {
            return -1;
          }
          if (rankA > rankB) {
            return 1;
          }
          return 0;
        });
        this.oItemBinding.sort(oSorter);
      }
    }

    /**
     *
     * @param sControlId
     * @param oItem
     * @returns True if the control ID matches the item ID
     */;
    _proto._fnFilterUponId = function _fnFilterUponId(sControlId, oItem) {
      return sControlId === oItem.getId();
    }

    /**
     * Retrieves the section based on section title and visibility.
     *
     * @param oObjectPage Object page.
     * @param sSectionTitle Section title.
     * @returns The section
     * @private
     */;
    _proto._getSectionBySectionTitle = function _getSectionBySectionTitle(oObjectPage, sSectionTitle) {
      let oSection;
      if (sSectionTitle) {
        const aSections = oObjectPage.getSections();
        for (let i = 0; i < aSections.length; i++) {
          if (aSections[i].getVisible() && aSections[i].getTitle() === sSectionTitle) {
            oSection = aSections[i];
            break;
          }
        }
      }
      return oSection;
    }

    /**
     * Navigates to the section if the object page uses an IconTabBar and if the current section is not the target of the navigation.
     *
     * @param oObjectPage Object page.
     * @param sSectionTitle Section title.
     * @private
     */;
    _proto._navigateFromMessageToSectionInIconTabBarMode = function _navigateFromMessageToSectionInIconTabBarMode(oObjectPage, sSectionTitle) {
      const bUseIconTabBar = oObjectPage.getUseIconTabBar();
      if (bUseIconTabBar) {
        const oSection = this._getSectionBySectionTitle(oObjectPage, sSectionTitle);
        const sSelectedSectionId = oObjectPage.getSelectedSection();
        if (oSection && sSelectedSectionId !== oSection.getId()) {
          oObjectPage.setSelectedSection(oSection.getId());
        }
      }
    };
    _proto._navigateFromMessageToSectionTableInIconTabBarMode = async function _navigateFromMessageToSectionTableInIconTabBarMode(oTable, oObjectPage, sSectionTitle) {
      const oRowBinding = oTable.getRowBinding();
      const oTableContext = oTable.getBindingContext();
      const oOPContext = oObjectPage.getBindingContext();
      const bShouldWaitForTableRefresh = !(oTableContext === oOPContext);
      this._navigateFromMessageToSectionInIconTabBarMode(oObjectPage, sSectionTitle);
      return new Promise(function (resolve) {
        if (bShouldWaitForTableRefresh) {
          oRowBinding.attachEventOnce("change", function () {
            resolve();
          });
        } else {
          resolve();
        }
      });
    }

    /**
     * Retrieves the MdcTable if it is found among any of the parent elements.
     *
     * @param oElement Control
     * @returns MDC table || undefined
     * @private
     */;
    _proto._getMdcTable = function _getMdcTable(oElement) {
      //check if the element has a table within any of its parents
      let oParentElement = oElement.getParent();
      while (oParentElement && !oParentElement.isA("sap.ui.mdc.Table")) {
        oParentElement = oParentElement.getParent();
      }
      return oParentElement && oParentElement.isA("sap.ui.mdc.Table") ? oParentElement : undefined;
    };
    _proto._getGridTable = function _getGridTable(oMdcTable) {
      return oMdcTable.findElements(true, function (oElem) {
        return oElem.isA("sap.ui.table.Table") && /** We check the element belongs to the MdcTable :*/
        oElem.getParent() === oMdcTable;
      })[0];
    }

    /**
     * Retrieves the table row (if available) containing the element.
     *
     * @param oElement Control
     * @returns Table row || undefined
     * @private
     */;
    _proto._getTableRow = function _getTableRow(oElement) {
      let oParentElement = oElement.getParent();
      while (oParentElement && !oParentElement.isA("sap.ui.table.Row") && !oParentElement.isA("sap.ui.table.CreationRow") && !oParentElement.isA(ColumnListItem.getMetadata().getName())) {
        oParentElement = oParentElement.getParent();
      }
      return oParentElement && (oParentElement.isA("sap.ui.table.Row") || oParentElement.isA("sap.ui.table.CreationRow") || oParentElement.isA(ColumnListItem.getMetadata().getName())) ? oParentElement : undefined;
    }

    /**
     * Retrieves the index of the table row containing the element.
     *
     * @param oElement Control
     * @returns Row index || undefined
     * @private
     */;
    _proto._getTableRowIndex = function _getTableRowIndex(oElement) {
      const oTableRow = this._getTableRow(oElement);
      let iRowIndex;
      if (oTableRow.isA("sap.ui.table.Row")) {
        iRowIndex = oTableRow.getIndex();
      } else {
        iRowIndex = oTableRow.getTable().getItems().findIndex(function (element) {
          return element.getId() === oTableRow.getId();
        });
      }
      return iRowIndex;
    }

    /**
     * Retrieves the index of the table column containing the element.
     *
     * @param oElement Control
     * @returns Column index || undefined
     * @private
     */;
    _proto._getTableColumnIndex = function _getTableColumnIndex(oElement) {
      const getTargetCellIndex = function (element, oTargetRow) {
        return oTargetRow.getCells().findIndex(function (oCell) {
          return oCell.getId() === element.getId();
        });
      };
      const getTargetColumnIndex = function (element, oTargetRow) {
        let oTargetElement = element.getParent(),
          iTargetCellIndex = getTargetCellIndex(oTargetElement, oTargetRow);
        while (oTargetElement && iTargetCellIndex < 0) {
          oTargetElement = oTargetElement.getParent();
          iTargetCellIndex = getTargetCellIndex(oTargetElement, oTargetRow);
        }
        return iTargetCellIndex;
      };
      const oTargetRow = this._getTableRow(oElement);
      let iTargetColumnIndex;
      iTargetColumnIndex = getTargetColumnIndex(oElement, oTargetRow);
      if (oTargetRow.isA("sap.ui.table.CreationRow")) {
        const sTargetCellId = oTargetRow.getCells()[iTargetColumnIndex].getId(),
          aTableColumns = oTargetRow.getTable().getColumns();
        iTargetColumnIndex = aTableColumns.findIndex(function (column) {
          if (column.getCreationTemplate()) {
            return sTargetCellId.search(column.getCreationTemplate().getId()) > -1 ? true : false;
          } else {
            return false;
          }
        });
      }
      return iTargetColumnIndex;
    };
    _proto._getMdcTableRows = function _getMdcTableRows(oMdcTable) {
      return oMdcTable.findElements(true, function (oElem) {
        return oElem.isA("sap.ui.table.Row") && /** We check the element belongs to the Mdc Table :*/
        oElem.getTable().getParent() === oMdcTable;
      });
    };
    _proto._getObjectPageLayout = function _getObjectPageLayout(oElement, oObjectPageLayout) {
      if (oObjectPageLayout) {
        return oObjectPageLayout;
      }
      oObjectPageLayout = oElement;
      //Iterate over parent till you have not reached the object page layout
      while (oObjectPageLayout && !oObjectPageLayout.isA("sap.uxap.ObjectPageLayout")) {
        oObjectPageLayout = oObjectPageLayout.getParent();
      }
      return oObjectPageLayout;
    }

    /**
     * The method that is called to check if a navigation is configured from the table to a sub object page.
     *
     * @private
     * @param table MdcTable
     * @returns Either true or false
     */;
    _proto._navigationConfigured = function _navigationConfigured(table) {
      // TODO: this logic would be moved to check the same at the template time to avoid the same check happening multiple times.
      const component = sap.ui.require("sap/ui/core/Component"),
        navObject = table && component.getOwnerComponentFor(table) && component.getOwnerComponentFor(table).getNavigation();
      let subOPConfigured = false,
        navConfigured = false;
      if (navObject && Object.keys(navObject).indexOf(table.getRowBinding().sPath) !== -1) {
        subOPConfigured = navObject[table === null || table === void 0 ? void 0 : table.getRowBinding().sPath] && navObject[table === null || table === void 0 ? void 0 : table.getRowBinding().sPath].detail && navObject[table === null || table === void 0 ? void 0 : table.getRowBinding().sPath].detail.route ? true : false;
      }
      navConfigured = subOPConfigured && (table === null || table === void 0 ? void 0 : table.getRowSettings().getRowActions()) && (table === null || table === void 0 ? void 0 : table.getRowSettings().getRowActions()[0].mProperties.type.indexOf("Navigation")) !== -1;
      return navConfigured;
    };
    _proto.setFocusToControl = function setFocusToControl(control) {
      const messagePopover = this.oMessagePopover;
      if (messagePopover && control && control.focus) {
        const fnFocus = () => {
          control.focus();
        };
        if (!messagePopover.isOpen()) {
          // when navigating to parent page to child page (on click of message), the child page might have a focus logic that might use a timeout.
          // we use the below timeouts to override this focus so that we focus on the target control of the message in the child page.
          setTimeout(fnFocus, 0);
        } else {
          const fnOnClose = () => {
            setTimeout(fnFocus, 0);
            messagePopover.detachEvent("afterClose", fnOnClose);
          };
          messagePopover.attachEvent("afterClose", fnOnClose);
          messagePopover.close();
        }
      } else {
        Log.warning("FE V4 : MessageButton : element doesn't have focus method for focusing.");
      }
    };
    return MessageButton;
  }(Button), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "customFilters", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "messageChange", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return MessageButton;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessageButton", ["sap/base/Log","sap/base/util/UriParameters","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ResourceModelHelper","sap/fe/macros/messages/MessagePopover","sap/m/Button","sap/m/ColumnListItem","sap/m/Dialog","sap/m/FormattedText","sap/m/library","sap/ui/core/Core","sap/ui/core/library","sap/ui/core/mvc/View","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/Sorter"],function(e,t,n,i,o,s,r,a,g,l,c,u,f,d,h,p,T){"use strict";var b,_,m,I,C,P,y;var E=f.MessageType;var S=c.ButtonType;var M=o.getResourceModel;var v=i.event;var w=i.defineUI5Class;var x=i.aggregation;function A(e,t,n,i){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(i):void 0})}function R(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function O(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;B(e,t)}function B(e,t){B=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return B(e,t)}function L(e,t,n,i,o){var s={};Object.keys(i).forEach(function(e){s[e]=i[e]});s.enumerable=!!s.enumerable;s.configurable=!!s.configurable;if("value"in s||s.initializer){s.writable=true}s=n.slice().reverse().reduce(function(n,i){return i(e,t,n)||n},s);if(o&&s.initializer!==void 0){s.value=s.initializer?s.initializer.call(o):void 0;s.initializer=undefined}if(s.initializer===void 0){Object.defineProperty(e,t,s);s=null}return s}function G(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let N=(b=w("sap.fe.macros.messages.MessageButton"),_=x({type:"sap.fe.macros.messages.MessageFilter",multiple:true,singularName:"customFilter"}),m=v(),b(I=(C=function(i){O(o,i);function o(e,t){var n;n=i.call(this,e,t)||this;A(n,"customFilters",P,R(n));A(n,"messageChange",y,R(n));n.sGeneralGroupText="";n.sViewId="";n.sLastActionText="";return n}var c=o.prototype;c.init=function e(){r.prototype.init.apply(this);this.attachPress(this.handleMessagePopoverPress,this);this.oMessagePopover=new s;this.oItemBinding=this.oMessagePopover.getBinding("items");this.oItemBinding.attachChange(this._setMessageData,this);const t=this.getId();if(t){this.oMessagePopover.addCustomData(new sap.ui.core.CustomData({key:"messageButtonId",value:t}))}this.attachModelContextChange(this._applyFiltersAndSort.bind(this));this.oMessagePopover.attachActiveTitlePress(this._activeTitlePress.bind(this))};c.handleMessagePopoverPress=function e(t){this.oMessagePopover.toggle(t.getSource())};c._applyGroupingAsync=async function t(i){const o=[];const s=i.getBindingContext();const r=e=>{const t=[];const i=this.oItemBinding.getContexts().map(function(e){return e.getObject()});const o=e.getBindingContext();if(o){const s=e.getContent()[0];n.getVisibleSectionsFromObjectPageLayout(s).forEach(function(e){e.getSubSections().forEach(function(e){e.findElements(true).forEach(function(n){if(n.isA("sap.ui.mdc.Table")){for(let s=0;s<i.length;s++){const r=n.getRowBinding();if(r){const r=`${o.getPath()}/${n.getRowBinding().getPath()}`;if(i[s].target.indexOf(r)===0){t.push({table:n,subsection:e});break}}}}})})})}return t};const a=r.bind(this)(i);a.forEach(function(e){var t;const n=e.table,i=e.subsection;if(!n.getBindingContext()||((t=n.getBindingContext())===null||t===void 0?void 0:t.getPath())!==(s===null||s===void 0?void 0:s.getPath())){i.setBindingContext(s);if(!n.getRowBinding().isLengthFinal()){o.push(new Promise(function(e){n.getRowBinding().attachEventOnce("dataReceived",function(){e()})}))}}});const g=new Promise(e=>{setTimeout(async()=>{this._applyGrouping();e()},0)});try{await Promise.all(o);i.getModel().checkMessages();await g}catch(t){e.error("Error while grouping the messages in the messagePopOver")}};c._applyGrouping=function e(){this.oObjectPageLayout=this._getObjectPageLayout(this,this.oObjectPageLayout);if(!this.oObjectPageLayout){return}const t=this.oMessagePopover.getItems();this._checkControlIdInSections(t)};c._getTableRefErrorContext=function e(t){const n=t.getModel("internal");if(!t.getBindingContext("internal").getProperty("refError")){n.setProperty("refError",{},t.getBindingContext("internal"))}const i=t.getBindingContext("internal").getPath()+"/refError/"+t.getBindingContext().getPath().replace("/","$")+"$"+t.getRowBinding().getPath().replace("/","$");const o=n.getContext(i);if(!o.getProperty("")){n.setProperty("",{},o)}return o};c._updateInternalModel=function e(t,n,i,o,s,r){let a;if(r){a={rowIndex:"CreationRow",targetColProperty:i?i:""}}else{a={rowIndex:t?n:"",targetColProperty:i?i:""}}const g=o.getModel("internal"),l=this._getTableRefErrorContext(o);const c=sap.ui.getCore().getMessageManager().getMessageModel().getData().map(function(e){return e.id});let u;if(l.getProperty()){u=Object.keys(l.getProperty()).filter(function(e){return c.indexOf(e)===-1});u.forEach(function(e){delete l.getProperty()[e]})}g.setProperty(s.getId(),Object.assign({},l.getProperty(s.getId())?l.getProperty(s.getId()):{},a),l)};c._setGroupLabelForTransientMsg=function e(t,n){this.sLastActionText=this.sLastActionText?this.sLastActionText:u.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_LAST_ACTION");t.setGroupName(`${this.sLastActionText}: ${n}`)};c._computeMessageGroupAndSubTitle=function e(t,i,o,s,r,a){var g;const l=M(i);this.oItemBinding.detachChange(this._setMessageData,this);const c=(g=t.getBindingContext("message"))===null||g===void 0?void 0:g.getObject();const f=true;let d,h,p,T,b,_,m;const I=new RegExp("^/").test(c===null||c===void 0?void 0:c.getTargets()[0]);if(I){for(T=0;T<s.length;T++){d=s[T];_=d;if(d.isA("sap.m.Table")||d.isA("sap.ui.table.Table")){h=d.getParent();const e=h.getRowBinding();const i=(e,n)=>{this._setGroupLabelForTransientMsg(t,n)};if(e&&e.isLengthFinal()&&h.getBindingContext()){const o=n.getTableColumnDataAndSetSubtile(c,h,d,e,a,f,i);p=o.oTargetTableInfo;if(o.subTitle){t.setSubtitle(o.subTitle)}t.setActiveTitle(!!p.oTableRowContext);if(p.oTableRowContext){this._formatMessageDescription(t,p.oTableRowContext,p.sTableTargetColName,h)}b=p.oTableRowContext&&p.oTableRowContext.getIndex();this._updateInternalModel(p.oTableRowContext,b,p.sTableTargetColProperty,h,c)}}else{t.setActiveTitle(true);const e=n.bIsOrphanElement(_,s);if(e){t.setSubtitle("");break}}}}else{_=s[0];h=this._getMdcTable(_);if(h){p={};p.tableHeader=h.getHeader();const e=this._getTableColumnIndex(_);p.sTableTargetColProperty=e>-1?h.getColumns()[e].getDataProperty():undefined;p.sTableTargetColName=p.sTableTargetColProperty&&e>-1?h.getColumns()[e].getHeader():undefined;m=this._getTableRow(_).isA("sap.ui.table.CreationRow");if(!m){b=this._getTableRowIndex(_);p.oTableRowBindingContexts=h.getRowBinding().getCurrentContexts();p.oTableRowContext=p.oTableRowBindingContexts[b]}const i=n.getMessageSubtitle(c,p.oTableRowBindingContexts,p.oTableRowContext,p.sTableTargetColName,h,m,e===0&&_.getValueState()==="Error"?_:undefined);if(i){t.setSubtitle(i)}t.setActiveTitle(true);this._updateInternalModel(p.oTableRowContext,b,p.sTableTargetColProperty,h,c,m)}}if(f){const e=n.createSectionGroupName(i,o,r,p,l);t.setGroupName(e);const s=this._getViewId(this.getId());const a=u.byId(s);const g=c.getTargets()[0]&&c.getTargets()[0].split("/").pop();const f=a===null||a===void 0?void 0:a.getModel("internal");if(f&&f.getProperty("/messageTargetProperty")&&g&&g===f.getProperty("/messageTargetProperty")){this.oMessagePopover.fireActiveTitlePress({item:t});f.setProperty("/messageTargetProperty",false)}}this.oItemBinding.attachChange(this._setMessageData,this);return _};c._checkControlIdInSections=function e(t){let i,o,s,r,a,g;this.sGeneralGroupText=this.sGeneralGroupText?this.sGeneralGroupText:u.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL");const l=n.getVisibleSectionsFromObjectPageLayout(this.oObjectPageLayout);if(l){var c;const e=this._getViewId(this.getId());const f=u.byId(e);const d=f===null||f===void 0?void 0:(c=f.getBindingContext("internal"))===null||c===void 0?void 0:c.getProperty("sActionName");if(d){(f===null||f===void 0?void 0:f.getBindingContext("internal")).setProperty("sActionName",null)}for(r=t.length-1;r>=0;--r){s=t[r];let e=true;for(a=l.length-1;a>=0;--a){i=l[a];o=i.getSubSections();for(g=o.length-1;g>=0;--g){const t=o[g];const r=s.getBindingContext("message").getObject();const l=n.getControlFromMessageRelatingToSubSection(t,r);if(l.length>0){const n=this._computeMessageGroupAndSubTitle(s,i,t,l,o.length>1,d);if(n&&!n.isA("sap.m.Table")&&!n.isA("sap.ui.table.Table")){a=g=-1}e=false}}}if(e){const e=s.getBindingContext("message").getObject();s.setActiveTitle(false);if(e.persistent&&d){this._setGroupLabelForTransientMsg(s,d)}else{s.setGroupName(this.sGeneralGroupText)}}}}};c._findTargetForMessage=function e(t){const n=t.getBindingContext("message")&&t.getBindingContext("message").getObject();if(n&&n.target){const e=this.oObjectPageLayout&&this.oObjectPageLayout.getModel()&&this.oObjectPageLayout.getModel().getMetaModel(),t=e&&e.getMetaPath(n.target),i=e&&e.getObject(t);if(i&&i.$kind==="Property"){return true}}};c._fnEnableBindings=function e(n){if(t.fromQuery(window.location.search).get("sap-fe-xx-lazyloadingtest")){return}for(let e=0;e<n.length;e++){const t=n[e];let o=false;const s=t.getSubSections();for(let e=0;e<s.length;e++){const t=s[e];const n=t.getBlocks();if(n){for(let e=0;e<t.getBlocks().length;e++){var i;if(n[e].getContent&&!((i=n[e].getContent())!==null&&i!==void 0&&i.isA("sap.fe.macros.table.TableAPI"))){o=true;break}}if(o){t.setBindingContext(undefined)}}if(t.getBindingContext()){this._findMessageGroupAfterRebinding();t.getBindingContext().getBinding().attachDataReceived(this._findMessageGroupAfterRebinding.bind(this))}}}};c._findMessageGroupAfterRebinding=function e(){const t=this.oMessagePopover.getItems();this._checkControlIdInSections(t)};c._getViewId=function e(t){let n,i=u.byId(t);while(i){if(i instanceof d){n=i.getId();break}i=i.getParent()}return n};c._setLongtextUrlDescription=function t(n,i){this.oMessagePopover.setAsyncDescriptionHandler(function(t){const o=n;const s=t.item.getLongtextUrl();if(s){jQuery.ajax({type:"GET",url:s,success:function(e){const n=i.getHtmlText()+e;t.item.setDescription(`${o}${n}`);t.promise.resolve()},error:function(){t.item.setDescription(n);const i=`A request has failed for long text data. URL: ${s}`;e.error(i);t.promise.reject(i)}})}})};c._formatMessageDescription=function e(t,i,o,s){var r;const a=M(s);const g=s.getParent().getIdentifierColumn();let c="";const u=(r=t.getBindingContext("message"))===null||r===void 0?void 0:r.getObject();const f=n.fetchColumnInfo(u,s);if(o){c=`${a.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")}: ${o}`}else if(f){if(f.availability==="Hidden"){if(t.getType()==="Error"){c=g?`${a.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC_ERROR")} ${i.getValue(g)}`+".":`${a.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC_ERROR")}`+"."}else{c=g?`${a.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC")} ${i.getValue(g)}`+".":`${a.getText("T_COLUMN_AVAILABLE_DIAGNOSIS_MSGDESC")}`+"."}}else{if(!this._navigationConfigured(s)){t.setActiveTitle(false)}c=`${a.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")}: ${f.label} (${a.getText("T_COLUMN_INDICATOR_IN_TABLE_DEFINITION")})`}}const d=new l({htmlText:`<html><body><strong>${a.getText("T_FIELDS_AFFECTED_TITLE")}</strong></body></html><br>`});let h;if(g){h=`${d.getHtmlText()}<br>${a.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${s.getHeader()}<br>${a.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${i.getValue(g)}<br>${c}<br>`}else if(c==""||!c){h=""}else{h=`${d.getHtmlText()}<br>${a.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${s.getHeader()}<br>${c}<br>`}const p=new l({htmlText:`<html><body><strong>${a.getText("T_DIAGNOSIS_TITLE")}</strong></body></html><br>`});const T=t.getBindingContext("message").getObject().description;t.setDescription(null);let b="";let _="";if(t.getLongtextUrl()){_=`${h}<br>`;this._setLongtextUrlDescription(_,p)}else if(T){b=`${p.getHtmlText()}<br>${T}`;_=`${h}<br>${b}`;t.setDescription(_)}else{t.setDescription(h)}};c._setMessageData=function t(){clearTimeout(this._setMessageDataTimeout);this._setMessageDataTimeout=setTimeout(async()=>{const t="",n=this.oMessagePopover.getItems(),i={Error:0,Warning:0,Success:0,Information:0},o=u.getLibraryResourceBundle("sap.fe.core"),s=n.length;let r=S.Default,a="",g="",l="";if(s>0){for(let e=0;e<s;e++){if(!n[e].getType()||n[e].getType()===""){++i["Information"]}else{++i[n[e].getType()]}}if(i[E.Error]>0){r=S.Negative}else if(i[E.Warning]>0){r=S.Critical}else if(i[E.Success]>0){r=S.Success}else if(i[E.Information]>0){r=S.Neutral}const c=i[E.Error]+i[E.Warning]+i[E.Success]+i[E.Information];this.setText(c.toString());if(i.Error===1){a="C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR"}else if(i.Error>1){a="C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_MULTIPLE_ERROR_TOOLTIP"}else if(!i.Error&&i.Warning){a="C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_WARNING_TOOLTIP"}else if(!i.Error&&!i.Warning&&i.Information){a="C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO"}else if(!i.Error&&!i.Warning&&!i.Information&&i.Success){a="C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS"}if(a){l=o.getText(a);g=i.Error?`${i.Error} ${l}`:l;this.setTooltip(g)}this.setIcon(t);this.setType(r);this.setVisible(true);const f=u.byId(this.sViewId);if(f){const t=f.getController().pageReady;try{await t.waitPageReady();await this._applyGroupingAsync(f)}catch(t){e.error("fail grouping messages")}this.fireMessageChange({iMessageLength:s})}if(s>1){this.oMessagePopover.navigateBack()}}else{this.setVisible(false);this.fireMessageChange({iMessageLength:s})}},100)};c._activeTitlePress=async function t(n){const i=this.getBindingContext("pageInternal");i.setProperty("errorNavigationSectionFlag",true);const o=n.getParameter("item"),s=o.getBindingContext("message").getObject(),r=new RegExp("^/").test(s.getTarget()),a=u.byId(this.sViewId);let g,l;const c=function(e,t){const n={preventScroll:true,targetInfo:e};t.focus(n)};if(o.getGroupName().indexOf("Table:")!==-1){let t;if(r){t=s.controlIds.map(function(e){const t=u.byId(e);const n=t&&t.getParent();return n&&n.isA("sap.ui.mdc.Table")&&n.getHeader()===o.getGroupName().split(", Table: ")[1]?n:null}).reduce(function(e,t){return t?t:e});if(t){l=o.getGroupName().split(", ")[0];try{await this._navigateFromMessageToSectionTableInIconTabBarMode(t,this.oObjectPageLayout,l);const n=this._getTableRefErrorContext(t);const i=n.getProperty(o.getBindingContext("message").getObject().getId());const r=async(e,t)=>{const n=this._getMdcTableRows(e),i=this._getGridTable(e).getFirstVisibleRow();if(n.length>0&&n[0]){const o=n[t-i],r=this.getTargetCell(o,s);if(r){this.setFocusToControl(r);return undefined}else{const t=s.getTarget().split("/").pop();if(t){a.getModel("internal").setProperty("/messageTargetProperty",t)}if(this._navigationConfigured(e)){return a.getController()._routing.navigateForwardToContext(o.getBindingContext())}else{return false}}}return undefined};if(t.data("tableType")==="GridTable"&&i.rowIndex!==""){const n=this._getGridTable(t).getFirstVisibleRow();try{await t.scrollToIndex(i.rowIndex);const e=this._getMdcTableRows(t);let o,a;if(e.length>0&&e[0]){o=e[0].getParent().getFirstVisibleRow();a=n-o!==0}let g;if(a){g=new Promise(function(e){u.attachEvent("UIUpdated",e)})}else{g=Promise.resolve()}await g;setTimeout(async function(){const e=await r(t,i.rowIndex);if(e===false){c(s,t)}},0)}catch(t){e.error("Error while focusing on error")}}else if(t.data("tableType")==="ResponsiveTable"&&i){const e=await this.focusOnMessageTargetControl(a,s,t,i.rowIndex);if(e===false){c(s,t)}}else{this.focusOnMessageTargetControl(a,s)}}catch(t){e.error("Fail to navigate to Error control")}}}else{g=u.byId(s.controlIds[0]);const e=u.byId(this.oObjectPageLayout.getSelectedSection());if((e===null||e===void 0?void 0:e.findElements(true).indexOf(g))===-1){l=o.getGroupName().split(", ")[0];this._navigateFromMessageToSectionInIconTabBarMode(this.oObjectPageLayout,l)}this.setFocusToControl(g)}}else{l=o.getGroupName().split(", ")[0];this._navigateFromMessageToSectionInIconTabBarMode(this.oObjectPageLayout,l);this.focusOnMessageTargetControl(a,s)}};c.getTargetCell=function e(t,n){return n.getControlIds().length>0?n.getControlIds().map(function(e){const n=t.findElements(true,function(t){return t.getId()===e});return n.length>0?u.byId(e):null}).reduce(function(e,t){return t?t:e}):null};c.focusOnMessageTargetControl=async function e(t,n,i,o){const s=t.findElements(true);const r=n.getControlIds().filter(function(e){return s.some(function(t){return t.getId()===e&&t.getDomRef()})}).map(function(e){return u.byId(e)});const g=r.filter(function(e){return!e.isA("sap.m.Table")&&!e.isA("sap.ui.table.Table")});if(g.length>0){this.setFocusToControl(g[0]);return undefined}else if(r.length>0){const e=i?i.findElements(true,function(e){return e.isA(a.getMetadata().getName())}):[];if(e.length>0&&e[0]){const s=e[o];const r=this.getTargetCell(s,n);if(r){const e=r.isA("sap.fe.macros.field.FieldAPI")?r.getContent().getContentEdit()[0]:r.getItems()[0].getContent().getContentEdit()[0];this.setFocusToControl(e);return undefined}else{const e=n.getTarget().split("/").pop();if(e){t.getModel("internal").setProperty("/messageTargetProperty",e)}if(this._navigationConfigured(i)){return t.getController()._routing.navigateForwardToContext(s.getBindingContext())}else{return false}}}return undefined}return undefined};c._getMessageRank=function e(t,n){if(n){let e,i,o,s,r,a,g,l;for(s=n.length-1;s>=0;--s){e=n[s];i=e.getSubSections();for(r=i.length-1;r>=0;--r){o=i[r];g=o.findElements(true);a=g.filter(this._fnFilterUponId.bind(this,t.getControlId()));l=s+1;if(a.length>0){if(e.getVisible()&&o.getVisible()){if(!t.hasOwnProperty("sectionName")){t.sectionName=e.getTitle()}if(!t.hasOwnProperty("subSectionName")){t.subSectionName=o.getTitle()}return l*10+(r+1)}else{return 1}}}}if(!t.sectionName&&!t.subSectionName&&t.persistent){return 1}return 999}return 999};c._applyFiltersAndSort=function e(){let t,n,i,o,s,r,a=null;const l=[];const c=()=>{const e=e=>{let t=Infinity,n=u.byId(e[0]);const i=u.byId(e[0]);while(n){const e=n instanceof g?(i===null||i===void 0?void 0:i.getParent()).findElements(true).indexOf(i):Infinity;if(n instanceof g){if(t>e){t=e;this.setFocusToControl(i)}return false}n=n.getParent()}return true};return new h({path:"controlIds",test:e,caseSensitive:true})};function f(){const e=function(e){if(!e.length){return false}let t=u.byId(e[0]);while(t){if(t.getId()===d){return true}if(t instanceof g){return false}t=t.getParent()}return false};return new h({path:"controlIds",test:e,caseSensitive:true})}if(!this.sViewId){this.sViewId=this._getViewId(this.getId())}const d=this.sViewId;const b=this.getAggregation("customFilters");if(b){b.forEach(function(e){l.push(new h({path:e.getProperty("path"),operator:e.getProperty("operator"),value1:e.getProperty("value1"),value2:e.getProperty("value2")}))})}const _=this.getBindingContext();if(!_){this.setVisible(false);return}else{o=_.getPath();t=new h({filters:[new h({path:"validation",operator:p.EQ,value1:true}),f()],and:true});n=new h({filters:[t,new h({path:"target",operator:p.StartsWith,value1:o})],and:false});r=new h({filters:[c()]})}const m=new h({filters:[n,r],and:true});if(l.length>0){i=new h({filters:[l,m],and:false})}else{i=m}this.oItemBinding.filter(i);this.oObjectPageLayout=this._getObjectPageLayout(this,this.oObjectPageLayout);if(this.oObjectPageLayout){s=new T("",null,null,(e,t)=>{if(!a){a=this.oObjectPageLayout&&this.oObjectPageLayout.getSections()}const n=this._getMessageRank(e,a);const i=this._getMessageRank(t,a);if(n<i){return-1}if(n>i){return 1}return 0});this.oItemBinding.sort(s)}};c._fnFilterUponId=function e(t,n){return t===n.getId()};c._getSectionBySectionTitle=function e(t,n){let i;if(n){const e=t.getSections();for(let t=0;t<e.length;t++){if(e[t].getVisible()&&e[t].getTitle()===n){i=e[t];break}}}return i};c._navigateFromMessageToSectionInIconTabBarMode=function e(t,n){const i=t.getUseIconTabBar();if(i){const e=this._getSectionBySectionTitle(t,n);const i=t.getSelectedSection();if(e&&i!==e.getId()){t.setSelectedSection(e.getId())}}};c._navigateFromMessageToSectionTableInIconTabBarMode=async function e(t,n,i){const o=t.getRowBinding();const s=t.getBindingContext();const r=n.getBindingContext();const a=!(s===r);this._navigateFromMessageToSectionInIconTabBarMode(n,i);return new Promise(function(e){if(a){o.attachEventOnce("change",function(){e()})}else{e()}})};c._getMdcTable=function e(t){let n=t.getParent();while(n&&!n.isA("sap.ui.mdc.Table")){n=n.getParent()}return n&&n.isA("sap.ui.mdc.Table")?n:undefined};c._getGridTable=function e(t){return t.findElements(true,function(e){return e.isA("sap.ui.table.Table")&&e.getParent()===t})[0]};c._getTableRow=function e(t){let n=t.getParent();while(n&&!n.isA("sap.ui.table.Row")&&!n.isA("sap.ui.table.CreationRow")&&!n.isA(a.getMetadata().getName())){n=n.getParent()}return n&&(n.isA("sap.ui.table.Row")||n.isA("sap.ui.table.CreationRow")||n.isA(a.getMetadata().getName()))?n:undefined};c._getTableRowIndex=function e(t){const n=this._getTableRow(t);let i;if(n.isA("sap.ui.table.Row")){i=n.getIndex()}else{i=n.getTable().getItems().findIndex(function(e){return e.getId()===n.getId()})}return i};c._getTableColumnIndex=function e(t){const n=function(e,t){return t.getCells().findIndex(function(t){return t.getId()===e.getId()})};const i=function(e,t){let i=e.getParent(),o=n(i,t);while(i&&o<0){i=i.getParent();o=n(i,t)}return o};const o=this._getTableRow(t);let s;s=i(t,o);if(o.isA("sap.ui.table.CreationRow")){const e=o.getCells()[s].getId(),t=o.getTable().getColumns();s=t.findIndex(function(t){if(t.getCreationTemplate()){return e.search(t.getCreationTemplate().getId())>-1?true:false}else{return false}})}return s};c._getMdcTableRows=function e(t){return t.findElements(true,function(e){return e.isA("sap.ui.table.Row")&&e.getTable().getParent()===t})};c._getObjectPageLayout=function e(t,n){if(n){return n}n=t;while(n&&!n.isA("sap.uxap.ObjectPageLayout")){n=n.getParent()}return n};c._navigationConfigured=function e(t){const n=sap.ui.require("sap/ui/core/Component"),i=t&&n.getOwnerComponentFor(t)&&n.getOwnerComponentFor(t).getNavigation();let o=false,s=false;if(i&&Object.keys(i).indexOf(t.getRowBinding().sPath)!==-1){o=i[t===null||t===void 0?void 0:t.getRowBinding().sPath]&&i[t===null||t===void 0?void 0:t.getRowBinding().sPath].detail&&i[t===null||t===void 0?void 0:t.getRowBinding().sPath].detail.route?true:false}s=o&&(t===null||t===void 0?void 0:t.getRowSettings().getRowActions())&&(t===null||t===void 0?void 0:t.getRowSettings().getRowActions()[0].mProperties.type.indexOf("Navigation"))!==-1;return s};c.setFocusToControl=function t(n){const i=this.oMessagePopover;if(i&&n&&n.focus){const e=()=>{n.focus()};if(!i.isOpen()){setTimeout(e,0)}else{const t=()=>{setTimeout(e,0);i.detachEvent("afterClose",t)};i.attachEvent("afterClose",t);i.close()}}else{e.warning("FE V4 : MessageButton : element doesn't have focus method for focusing.")}};return o}(r),P=L(C.prototype,"customFilters",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),y=L(C.prototype,"messageChange",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),C))||I);return N},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessageFilter-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/Element", "sap/ui/model/FilterOperator"], function (ClassSupport, Element, FilterOperator) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let MessageFilter = (_dec = defineUI5Class("sap.fe.macros.messages.MessageFilter"), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "sap.ui.model.FilterOperator"
  }), _dec4 = property({
    type: "string"
  }), _dec5 = property({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Element) {
    _inheritsLoose(MessageFilter, _Element);
    function MessageFilter() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Element.call(this, ...args) || this;
      _initializerDefineProperty(_this, "path", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "operator", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "value1", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "value2", _descriptor4, _assertThisInitialized(_this));
      return _this;
    }
    return MessageFilter;
  }(Element), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "path", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "operator", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return FilterOperator.Contains;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "value1", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "value2", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return MessageFilter;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessageFilter", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/Element","sap/ui/model/FilterOperator"],function(e,r,t){"use strict";var i,n,a,l,o,u,s,p,c,f,b;var d=e.property;var v=e.defineUI5Class;function y(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function g(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function h(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;m(e,r)}function m(e,r){m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,t){r.__proto__=t;return r};return m(e,r)}function w(e,r,t,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=t.slice().reverse().reduce(function(t,i){return i(e,r,t)||t},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function z(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let O=(i=v("sap.fe.macros.messages.MessageFilter"),n=d({type:"string"}),a=d({type:"sap.ui.model.FilterOperator"}),l=d({type:"string"}),o=d({type:"string"}),i(u=(s=function(e){h(r,e);function r(){var r;for(var t=arguments.length,i=new Array(t),n=0;n<t;n++){i[n]=arguments[n]}r=e.call(this,...i)||this;y(r,"path",p,g(r));y(r,"operator",c,g(r));y(r,"value1",f,g(r));y(r,"value2",b,g(r));return r}return r}(r),p=w(s.prototype,"path",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),c=w(s.prototype,"operator",[a],{configurable:true,enumerable:true,writable:true,initializer:function(){return t.Contains}}),f=w(s.prototype,"value1",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),b=w(s.prototype,"value2",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),s))||u);return O},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessagePopover-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/m/MessageItem", "sap/m/MessagePopover"], function (ClassSupport, MessageItem, MessagePopover) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let FeMessagePopover = (_dec = defineUI5Class("sap.fe.macros.messages.MessagePopover"), _dec(_class = /*#__PURE__*/function (_MessagePopover) {
    _inheritsLoose(FeMessagePopover, _MessagePopover);
    function FeMessagePopover() {
      return _MessagePopover.apply(this, arguments) || this;
    }
    var _proto = FeMessagePopover.prototype;
    _proto.init = function init() {
      MessagePopover.prototype.init.apply(this);
      this.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "message");
      this.bindAggregation("items", {
        path: "message>/",
        length: 9999,
        template: new MessageItem({
          type: "{message>type}",
          title: "{message>message}",
          description: "{message>description}",
          markupDescription: true,
          longtextUrl: "{message>descriptionUrl}",
          subtitle: "{message>additionalText}",
          activeTitle: "{= ${message>controlIds}.length > 0 ? true : false}"
        })
      });
      this.setGroupItems(true);
    };
    return FeMessagePopover;
  }(MessagePopover)) || _class);
  return FeMessagePopover;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/messages/MessagePopover", ["sap/fe/core/helpers/ClassSupport","sap/m/MessageItem","sap/m/MessagePopover"],function(e,t,s){"use strict";var r,o;var a=e.defineUI5Class;function i(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;n(e,t)}function n(e,t){n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,s){t.__proto__=s;return t};return n(e,t)}let p=(r=a("sap.fe.macros.messages.MessagePopover"),r(o=function(e){i(r,e);function r(){return e.apply(this,arguments)||this}var o=r.prototype;o.init=function e(){s.prototype.init.apply(this);this.setModel(sap.ui.getCore().getMessageManager().getMessageModel(),"message");this.bindAggregation("items",{path:"message>/",length:9999,template:new t({type:"{message>type}",title:"{message>message}",description:"{message>description}",markupDescription:true,longtextUrl:"{message>descriptionUrl}",subtitle:"{message>additionalText}",activeTitle:"{= ${message>controlIds}.length > 0 ? true : false}"})});this.setGroupItems(true)};return r}(s))||o);return p},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChart.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/CommonHelper", "sap/ui/model/odata/v4/AnnotationHelper"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter, BindingToolkit, UIFormatters, CommonHelper, AnnotationHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;
  var _exports = {};
  var hasValidAnalyticalCurrencyOrUnit = UIFormatters.hasValidAnalyticalCurrencyOrUnit;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var equal = BindingToolkit.equal;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let MicroChartBlock = (
  /**
   * Building block used to create a MicroChart based on the metadata provided by OData V4.
   *
   * @hideconstructor
   * @public
   * @since 1.93.0
   */
  _dec = defineBuildingBlock({
    name: "MicroChart",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.controls.ConditionalWrapper", "sap.fe.macros.microchart.MicroChartContainer"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    expectedTypes: ["EntitySet", "NavigationProperty"],
    isPublic: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true
  }), _dec5 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec8 = blockAttribute({
    type: "string"
  }), _dec9 = blockAttribute({
    type: "string"
  }), _dec10 = blockAttribute({
    type: "sap.fe.macros.NavigationType"
  }), _dec11 = blockAttribute({
    type: "function"
  }), _dec12 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec13 = blockAttribute({
    type: "boolean"
  }), _dec14 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(MicroChartBlock, _BuildingBlockBase);
    /**
     * ID of the MicroChart.
     */

    /**
     * Metadata path to the entitySet or navigationProperty.
     */

    /**
     * Metadata path to the Chart annotations.
     */

    /**
     * To control the rendering of Title, Subtitle and Currency Labels. When the size is xs then we do
     * not see the inner labels of the MicroChart as well.
     */

    /**
     * Batch group ID along with which this call should be grouped.
     */

    /**
     * Title for the MicroChart. If no title is provided, the title from the Chart annotation is used.
     */

    /**
     * Show blank space in case there is no data in the chart
     */

    /**
     * Description for the MicroChart. If no description is provided, the description from the Chart annotation is used.
     */

    /**
     * Type of navigation, that is, External or InPage
     */

    /**
     * Event handler for onTitlePressed event
     */

    /**
     * Size of the MicroChart
     */

    /**
     * Defines whether the MicroChart is part of an analytical table
     */

    /*
     * This is used in inner fragments, so we need to declare it as block attribute context.
     */

    function MicroChartBlock(props) {
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showOnlyChart", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "batchGroupId", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "hideOnNoData", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "description", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationType", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onTitlePressed", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "size", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isAnalytics", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "DataPoint", _descriptor13, _assertThisInitialized(_this));
      _this.metaPath = _this.metaPath.getModel().createBindingContext(AnnotationHelper.resolve$Path(_this.metaPath));
      const measureAttributePath = CommonHelper.getMeasureAttributeForMeasure(_this.metaPath.getModel().createBindingContext("Measures/0", _this.metaPath));
      if (measureAttributePath) {
        _this.DataPoint = _this.metaPath.getModel().createBindingContext(measureAttributePath);
      }
      return _this;
    }

    /**
     * Gets the content of the micro chart, i.e. a reference to the fragment for the given chart type.
     *
     * @returns XML string
     */
    _exports = MicroChartBlock;
    var _proto = MicroChartBlock.prototype;
    _proto.getMicroChartContent = function getMicroChartContent() {
      const convertedChart = convertMetaModelContext(this.metaPath);
      switch (convertedChart.ChartType) {
        case "UI.ChartType/Bullet":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.BulletMicroChart" type="XML" />`;
        case "UI.ChartType/Donut":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.RadialMicroChart" type="XML" />`;
        case "UI.ChartType/Pie":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.HarveyBallMicroChart" type="XML" />`;
        case "UI.ChartType/BarStacked":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.StackedBarMicroChart" type="XML" />`;
        case "UI.ChartType/Area":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.AreaMicroChart" type="XML" />`;
        case "UI.ChartType/Column":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.ColumnMicroChart" type="XML" />`;
        case "UI.ChartType/Line":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.LineMicroChart" type="XML" />`;
        case "UI.ChartType/Bar":
          return `<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.ComparisonMicroChart" type="XML" />`;
        default:
          return `<m:Text text="This chart type is not supported. Other Types yet to be implemented.." />`;
      }
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string
     */;
    _proto.getTemplate = function getTemplate() {
      const dataPointValueObjects = getInvolvedDataModelObjects(this.metaPath.getModel().createBindingContext("Value/$Path", this.DataPoint), this.contextPath);
      const wrapperConditionBinding = hasValidAnalyticalCurrencyOrUnit(dataPointValueObjects);
      const wrapperVisibleBinding = or(not(pathInModel("@$ui5.node.isExpanded")), equal(pathInModel("@$ui5.node.level"), 0));
      if (this.isAnalytics) {
        return xml`<controls:ConditionalWrapper
				xmlns:controls="sap.fe.macros.controls"
				condition="${wrapperConditionBinding}"
				visible="${wrapperVisibleBinding}" >
				<controls:contentTrue>
					${this.getMicroChartContent()}
				</controls:contentTrue>
				<controls:contentFalse>
					<m:Text text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>`;
      } else {
        return this.getMicroChartContent();
      }
    };
    return MicroChartBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "showOnlyChart", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "batchGroupId", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "hideOnNoData", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "description", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "navigationType", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "None";
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "onTitlePressed", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "size", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "isAnalytics", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "DataPoint", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = MicroChartBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChart.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/UIFormatters","sap/fe/macros/CommonHelper","sap/ui/model/odata/v4/AnnotationHelper"],function(e,t,r,a,i,n,o,l){"use strict";var u,c,s,p,m,f,b,h,g,d,y,C,v,M,P,T,w,z,B,x,O,N,I,k,F,L,U,A,D;var X={};var j=n.hasValidAnalyticalCurrencyOrUnit;var $=i.pathInModel;var E=i.or;var S=i.not;var _=i.equal;var q=a.getInvolvedDataModelObjects;var H=a.convertMetaModelContext;var W=r.xml;var G=t.defineBuildingBlock;var R=t.blockAttribute;function V(e,t,r,a){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(a):void 0})}function J(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function K(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Q(e,t)}function Q(e,t){Q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return Q(e,t)}function Y(e,t,r,a,i){var n={};Object.keys(a).forEach(function(e){n[e]=a[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=r.slice().reverse().reduce(function(r,a){return a(e,t,r)||r},n);if(i&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(i):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function Z(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let ee=(u=G({name:"MicroChart",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.controls.ConditionalWrapper","sap.fe.macros.microchart.MicroChartContainer"]}),c=R({type:"string",isPublic:true,required:true}),s=R({type:"sap.ui.model.Context",expectedTypes:["EntitySet","NavigationProperty"],isPublic:true}),p=R({type:"sap.ui.model.Context",isPublic:true,required:true}),m=R({type:"string",isPublic:true}),f=R({type:"string"}),b=R({type:"string"}),h=R({type:"string"}),g=R({type:"string"}),d=R({type:"sap.fe.macros.NavigationType"}),y=R({type:"function"}),C=R({type:"string",isPublic:true}),v=R({type:"boolean"}),M=R({type:"sap.ui.model.Context"}),u(P=(T=function(e){K(t,e);function t(t){var r;r=e.call(this,t)||this;V(r,"id",w,J(r));V(r,"contextPath",z,J(r));V(r,"metaPath",B,J(r));V(r,"showOnlyChart",x,J(r));V(r,"batchGroupId",O,J(r));V(r,"title",N,J(r));V(r,"hideOnNoData",I,J(r));V(r,"description",k,J(r));V(r,"navigationType",F,J(r));V(r,"onTitlePressed",L,J(r));V(r,"size",U,J(r));V(r,"isAnalytics",A,J(r));V(r,"DataPoint",D,J(r));r.metaPath=r.metaPath.getModel().createBindingContext(l.resolve$Path(r.metaPath));const a=o.getMeasureAttributeForMeasure(r.metaPath.getModel().createBindingContext("Measures/0",r.metaPath));if(a){r.DataPoint=r.metaPath.getModel().createBindingContext(a)}return r}X=t;var r=t.prototype;r.getMicroChartContent=function e(){const t=H(this.metaPath);switch(t.ChartType){case"UI.ChartType/Bullet":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.BulletMicroChart" type="XML" />`;case"UI.ChartType/Donut":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.RadialMicroChart" type="XML" />`;case"UI.ChartType/Pie":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.HarveyBallMicroChart" type="XML" />`;case"UI.ChartType/BarStacked":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.StackedBarMicroChart" type="XML" />`;case"UI.ChartType/Area":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.AreaMicroChart" type="XML" />`;case"UI.ChartType/Column":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.ColumnMicroChart" type="XML" />`;case"UI.ChartType/Line":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.LineMicroChart" type="XML" />`;case"UI.ChartType/Bar":return`<core:Fragment fragmentName="sap.fe.macros.microchart.fragments.ComparisonMicroChart" type="XML" />`;default:return`<m:Text text="This chart type is not supported. Other Types yet to be implemented.." />`}};r.getTemplate=function e(){const t=q(this.metaPath.getModel().createBindingContext("Value/$Path",this.DataPoint),this.contextPath);const r=j(t);const a=E(S($("@$ui5.node.isExpanded")),_($("@$ui5.node.level"),0));if(this.isAnalytics){return W`<controls:ConditionalWrapper
				xmlns:controls="sap.fe.macros.controls"
				condition="${r}"
				visible="${a}" >
				<controls:contentTrue>
					${this.getMicroChartContent()}
				</controls:contentTrue>
				<controls:contentFalse>
					<m:Text text="*" />
				</controls:contentFalse>
			</controls:ConditionalWrapper>`}else{return this.getMicroChartContent()}};return t}(e),w=Y(T.prototype,"id",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),z=Y(T.prototype,"contextPath",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),B=Y(T.prototype,"metaPath",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),x=Y(T.prototype,"showOnlyChart",[m],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),O=Y(T.prototype,"batchGroupId",[f],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),N=Y(T.prototype,"title",[b],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),I=Y(T.prototype,"hideOnNoData",[h],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),k=Y(T.prototype,"description",[g],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),F=Y(T.prototype,"navigationType",[d],{configurable:true,enumerable:true,writable:true,initializer:function(){return"None"}}),L=Y(T.prototype,"onTitlePressed",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),U=Y(T.prototype,"size",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),A=Y(T.prototype,"isAnalytics",[v],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),D=Y(T.prototype,"DataPoint",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),T))||P);X=ee;return X},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChartContainer-dbg", ["sap/base/Log", "sap/chart/coloring/CriticalityType", "sap/fe/core/helpers/ClassSupport", "sap/fe/macros/library", "sap/m/FlexBox", "sap/m/Label", "sap/m/library", "sap/suite/ui/microchart/AreaMicroChart", "sap/suite/ui/microchart/ColumnMicroChart", "sap/suite/ui/microchart/ComparisonMicroChart", "sap/suite/ui/microchart/LineMicroChart", "sap/ui/core/Control", "sap/ui/core/format/NumberFormat", "sap/ui/model/odata/v4/ODataListBinding", "sap/ui/model/odata/v4/ODataMetaModel", "sap/ui/model/type/Date"], function (Log, CriticalityType, ClassSupport, macroLib, FlexBox, Label, mobilelibrary, AreaMicroChart, ColumnMicroChart, ComparisonMicroChart, LineMicroChart, Control, NumberFormat, ODataV4ListBinding, ODataMetaModel, DateType) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;
  var property = ClassSupport.property;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const NavigationType = macroLib.NavigationType;
  const ValueColor = mobilelibrary.ValueColor;
  /**
   *  Container Control for Micro Chart and UoM.
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  let MicroChartContainer = (_dec = defineUI5Class("sap.fe.macros.microchart.MicroChartContainer"), _dec2 = property({
    type: "boolean",
    defaultValue: false
  }), _dec3 = property({
    type: "string",
    defaultValue: undefined
  }), _dec4 = property({
    type: "string[]",
    defaultValue: []
  }), _dec5 = property({
    type: "string",
    defaultValue: undefined
  }), _dec6 = property({
    type: "string[]",
    defaultValue: []
  }), _dec7 = property({
    type: "int",
    defaultValue: undefined
  }), _dec8 = property({
    type: "int",
    defaultValue: 1
  }), _dec9 = property({
    type: "int",
    defaultValue: undefined
  }), _dec10 = property({
    type: "string",
    defaultValue: ""
  }), _dec11 = property({
    type: "string",
    defaultValue: ""
  }), _dec12 = property({
    type: "sap.fe.macros.NavigationType",
    defaultValue: "None"
  }), _dec13 = property({
    type: "string",
    defaultValue: ""
  }), _dec14 = event(), _dec15 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec16 = aggregation({
    type: "sap.m.Label",
    multiple: false
  }), _dec17 = aggregation({
    type: "sap.ui.core.Control",
    multiple: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(MicroChartContainer, _Control);
    function MicroChartContainer() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "showOnlyChart", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "uomPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "measures", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dimension", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dataPointQualifiers", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "measurePrecision", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "measureScale", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dimensionPrecision", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartTitle", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartDescription", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationType", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "calendarPattern", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onTitlePressed", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "microChart", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_uomLabel", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "microChartTitle", _descriptor16, _assertThisInitialized(_this));
      return _this;
    }
    MicroChartContainer.render = function render(renderManager, control) {
      renderManager.openStart("div", control);
      renderManager.openEnd();
      if (!control.showOnlyChart) {
        const chartTitle = control.microChartTitle;
        if (chartTitle) {
          chartTitle.forEach(function (subChartTitle) {
            renderManager.openStart("div");
            renderManager.openEnd();
            renderManager.renderControl(subChartTitle);
            renderManager.close("div");
          });
        }
        renderManager.openStart("div");
        renderManager.openEnd();
        const chartDescription = new Label({
          text: control.chartDescription
        });
        renderManager.renderControl(chartDescription);
        renderManager.close("div");
      }
      const microChart = control.microChart;
      if (microChart) {
        microChart.addStyleClass("sapUiTinyMarginTopBottom");
        renderManager.renderControl(microChart);
        if (!control.showOnlyChart && control.uomPath) {
          const settings = control._checkIfChartRequiresRuntimeLabels() ? undefined : {
              text: {
                path: control.uomPath
              }
            },
            label = new Label(settings),
            flexBox = new FlexBox({
              alignItems: "Start",
              justifyContent: "End",
              items: [label]
            });
          renderManager.renderControl(flexBox);
          control.setAggregation("_uomLabel", label);
        }
      }
      renderManager.close("div");
    };
    var _proto = MicroChartContainer.prototype;
    _proto.onBeforeRendering = function onBeforeRendering() {
      const binding = this._getListBindingForRuntimeLabels();
      if (binding) {
        binding.detachEvent("change", this._setRuntimeChartLabelsAndUnitOfMeasure, this);
        this._olistBinding = undefined;
      }
    };
    _proto.onAfterRendering = function onAfterRendering() {
      const binding = this._getListBindingForRuntimeLabels();
      if (!this._checkIfChartRequiresRuntimeLabels()) {
        return;
      }
      if (binding) {
        binding.attachEvent("change", this._setRuntimeChartLabelsAndUnitOfMeasure, this);
        this._olistBinding = binding;
      }
    };
    _proto.setShowOnlyChart = function setShowOnlyChart(value) {
      if (!value && this._olistBinding) {
        this._setChartLabels();
      }
      this.setProperty("showOnlyChart", value, false /*re-rendering*/);
    };
    _proto._checkIfChartRequiresRuntimeLabels = function _checkIfChartRequiresRuntimeLabels() {
      const microChart = this.microChart;
      return Boolean(microChart instanceof AreaMicroChart || microChart instanceof ColumnMicroChart || microChart instanceof LineMicroChart || microChart instanceof ComparisonMicroChart);
    };
    _proto._checkForChartLabelAggregations = function _checkForChartLabelAggregations() {
      const microChart = this.microChart;
      return Boolean(microChart instanceof AreaMicroChart && microChart.getAggregation("firstYLabel") && microChart.getAggregation("lastYLabel") && microChart.getAggregation("firstXLabel") && microChart.getAggregation("lastXLabel") || microChart instanceof ColumnMicroChart && microChart.getAggregation("leftTopLabel") && microChart.getAggregation("rightTopLabel") && microChart.getAggregation("leftBottomLabel") && microChart.getAggregation("rightBottomLabel") || microChart instanceof LineMicroChart);
    };
    _proto._getListBindingForRuntimeLabels = function _getListBindingForRuntimeLabels() {
      const microChart = this.microChart;
      let binding;
      if (microChart instanceof AreaMicroChart) {
        const chart = microChart.getChart();
        binding = chart && chart.getBinding("points");
      } else if (microChart instanceof ColumnMicroChart) {
        binding = microChart.getBinding("columns");
      } else if (microChart instanceof LineMicroChart) {
        const lines = microChart.getLines();
        binding = lines && lines.length && lines[0].getBinding("points");
      } else if (microChart instanceof ComparisonMicroChart) {
        binding = microChart.getBinding("data");
      }
      return binding instanceof ODataV4ListBinding ? binding : false;
    };
    _proto._setRuntimeChartLabelsAndUnitOfMeasure = async function _setRuntimeChartLabelsAndUnitOfMeasure() {
      const listBinding = this._olistBinding,
        contexts = listBinding === null || listBinding === void 0 ? void 0 : listBinding.getContexts(),
        measures = this.measures,
        dimension = this.dimension,
        unitOfMeasurePath = this.uomPath,
        microChart = this.microChart,
        unitOfMeasureLabel = this._uomLabel;
      if (unitOfMeasureLabel && unitOfMeasurePath && contexts && contexts.length && !this.showOnlyChart) {
        unitOfMeasureLabel.setText(contexts[0].getObject(unitOfMeasurePath));
      } else if (unitOfMeasureLabel) {
        unitOfMeasureLabel.setText("");
      }
      if (!this._checkForChartLabelAggregations()) {
        return;
      }
      if (!contexts || !contexts.length) {
        this._setChartLabels();
        return;
      }
      const firstContext = contexts[0],
        lastContext = contexts[contexts.length - 1],
        linesPomises = [],
        lineChart = microChart instanceof LineMicroChart,
        currentMinX = firstContext.getObject(dimension),
        currentMaxX = lastContext.getObject(dimension);
      let currentMinY,
        currentMaxY,
        minX = {
          value: Infinity
        },
        maxX = {
          value: -Infinity
        },
        minY = {
          value: Infinity
        },
        maxY = {
          value: -Infinity
        };
      minX = currentMinX == undefined ? minX : {
        context: firstContext,
        value: currentMinX
      };
      maxX = currentMaxX == undefined ? maxX : {
        context: lastContext,
        value: currentMaxX
      };
      if (measures !== null && measures !== void 0 && measures.length) {
        measures.forEach((measure, i) => {
          currentMinY = firstContext.getObject(measure);
          currentMaxY = lastContext.getObject(measure);
          maxY = currentMaxY > maxY.value ? {
            context: lastContext,
            value: currentMaxY,
            index: lineChart ? i : 0
          } : maxY;
          minY = currentMinY < minY.value ? {
            context: firstContext,
            value: currentMinY,
            index: lineChart ? i : 0
          } : minY;
          if (lineChart) {
            linesPomises.push(this._getCriticalityFromPoint({
              context: lastContext,
              value: currentMaxY,
              index: i
            }));
          }
        });
      }
      this._setChartLabels(minY.value, maxY.value, minX.value, maxX.value);
      if (lineChart) {
        const colors = await Promise.all(linesPomises);
        if (colors !== null && colors !== void 0 && colors.length) {
          const lines = microChart.getLines();
          lines.forEach(function (line, i) {
            line.setColor(colors[i]);
          });
        }
      } else {
        await this._setChartLabelsColors(maxY, minY);
      }
    };
    _proto._setChartLabelsColors = async function _setChartLabelsColors(maxY, minY) {
      const microChart = this.microChart;
      const criticality = await Promise.all([this._getCriticalityFromPoint(minY), this._getCriticalityFromPoint(maxY)]);
      if (microChart instanceof AreaMicroChart) {
        microChart.getAggregation("firstYLabel").setProperty("color", criticality[0], true);
        microChart.getAggregation("lastYLabel").setProperty("color", criticality[1], true);
      } else if (microChart instanceof ColumnMicroChart) {
        microChart.getAggregation("leftTopLabel").setProperty("color", criticality[0], true);
        microChart.getAggregation("rightTopLabel").setProperty("color", criticality[1], true);
      }
    };
    _proto._setChartLabels = function _setChartLabels(leftTop, rightTop, leftBottom, rightBottom) {
      const microChart = this.microChart;
      leftTop = this._formatDateAndNumberValue(leftTop, this.measurePrecision, this.measureScale);
      rightTop = this._formatDateAndNumberValue(rightTop, this.measurePrecision, this.measureScale);
      leftBottom = this._formatDateAndNumberValue(leftBottom, this.dimensionPrecision, undefined, this.calendarPattern);
      rightBottom = this._formatDateAndNumberValue(rightBottom, this.dimensionPrecision, undefined, this.calendarPattern);
      if (microChart instanceof AreaMicroChart) {
        microChart.getAggregation("firstYLabel").setProperty("label", leftTop, false);
        microChart.getAggregation("lastYLabel").setProperty("label", rightTop, false);
        microChart.getAggregation("firstXLabel").setProperty("label", leftBottom, false);
        microChart.getAggregation("lastXLabel").setProperty("label", rightBottom, false);
      } else if (microChart instanceof ColumnMicroChart) {
        microChart.getAggregation("leftTopLabel").setProperty("label", leftTop, false);
        microChart.getAggregation("rightTopLabel").setProperty("label", rightTop, false);
        microChart.getAggregation("leftBottomLabel").setProperty("label", leftBottom, false);
        microChart.getAggregation("rightBottomLabel").setProperty("label", rightBottom, false);
      } else if (microChart instanceof LineMicroChart) {
        microChart.setProperty("leftTopLabel", leftTop, false);
        microChart.setProperty("rightTopLabel", rightTop, false);
        microChart.setProperty("leftBottomLabel", leftBottom, false);
        microChart.setProperty("rightBottomLabel", rightBottom, false);
      }
    };
    _proto._getCriticalityFromPoint = async function _getCriticalityFromPoint(point) {
      if (point !== null && point !== void 0 && point.context) {
        const metaModel = this.getModel() && this.getModel().getMetaModel(),
          dataPointQualifiers = this.dataPointQualifiers,
          metaPath = metaModel instanceof ODataMetaModel && point.context.getPath() && metaModel.getMetaPath(point.context.getPath());
        if (metaModel && typeof metaPath === "string") {
          const dataPoint = await metaModel.requestObject(`${metaPath}/@${"com.sap.vocabularies.UI.v1.DataPoint"}${point.index !== undefined && dataPointQualifiers[point.index] ? `#${dataPointQualifiers[point.index]}` : ""}`);
          if (dataPoint) {
            let criticality = ValueColor.Neutral;
            const context = point.context;
            if (dataPoint.Criticality) {
              criticality = this._criticality(dataPoint.Criticality, context);
            } else if (dataPoint.CriticalityCalculation) {
              const criticalityCalculation = dataPoint.CriticalityCalculation;
              const getValue = function (valueProperty) {
                let valueResponse;
                if (valueProperty !== null && valueProperty !== void 0 && valueProperty.$Path) {
                  valueResponse = context.getObject(valueProperty.$Path);
                } else if (valueProperty !== null && valueProperty !== void 0 && valueProperty.hasOwnProperty("$Decimal")) {
                  valueResponse = valueProperty.$Decimal;
                }
                return valueResponse;
              };
              criticality = this._criticalityCalculation(criticalityCalculation.ImprovementDirection.$EnumMember, point.value, getValue(criticalityCalculation.DeviationRangeLowValue), getValue(criticalityCalculation.ToleranceRangeLowValue), getValue(criticalityCalculation.AcceptanceRangeLowValue), getValue(criticalityCalculation.AcceptanceRangeHighValue), getValue(criticalityCalculation.ToleranceRangeHighValue), getValue(criticalityCalculation.DeviationRangeHighValue));
            }
            return criticality;
          }
        }
      }
      return Promise.resolve(ValueColor.Neutral);
    };
    _proto._criticality = function _criticality(criticality, context) {
      let criticalityValue, result;
      if (criticality.$Path) {
        criticalityValue = context.getObject(criticality.$Path);
        if (criticalityValue === CriticalityType.Negative || criticalityValue.toString() === "1") {
          result = ValueColor.Error;
        } else if (criticalityValue === CriticalityType.Critical || criticalityValue.toString() === "2") {
          result = ValueColor.Critical;
        } else if (criticalityValue === CriticalityType.Positive || criticalityValue.toString() === "3") {
          result = ValueColor.Good;
        }
      } else if (criticality.$EnumMember) {
        criticalityValue = criticality.$EnumMember;
        if (criticalityValue.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Negative") > -1) {
          result = ValueColor.Error;
        } else if (criticalityValue.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Positive") > -1) {
          result = ValueColor.Good;
        } else if (criticalityValue.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Critical") > -1) {
          result = ValueColor.Critical;
        }
      }
      if (result === undefined) {
        Log.warning("Case not supported, returning the default Value Neutral");
        return ValueColor.Neutral;
      }
      return result;
    };
    _proto._criticalityCalculation = function _criticalityCalculation(improvementDirection, value, deviationLow, toleranceLow, acceptanceLow, acceptanceHigh, toleranceHigh, deviationHigh) {
      let result;

      // Dealing with Decimal and Path based bingdings
      deviationLow = deviationLow == undefined ? -Infinity : deviationLow;
      toleranceLow = toleranceLow == undefined ? deviationLow : toleranceLow;
      acceptanceLow = acceptanceLow == undefined ? toleranceLow : acceptanceLow;
      deviationHigh = deviationHigh == undefined ? Infinity : deviationHigh;
      toleranceHigh = toleranceHigh == undefined ? deviationHigh : toleranceHigh;
      acceptanceHigh = acceptanceHigh == undefined ? toleranceHigh : acceptanceHigh;

      // Creating runtime expression binding from criticality calculation for Criticality State
      if (improvementDirection.indexOf("Minimize") > -1) {
        if (value <= acceptanceHigh) {
          result = ValueColor.Good;
        } else if (value <= toleranceHigh) {
          result = ValueColor.Neutral;
        } else if (value <= deviationHigh) {
          result = ValueColor.Critical;
        } else {
          result = ValueColor.Error;
        }
      } else if (improvementDirection.indexOf("Maximize") > -1) {
        if (value >= acceptanceLow) {
          result = ValueColor.Good;
        } else if (value >= toleranceLow) {
          result = ValueColor.Neutral;
        } else if (value >= deviationLow) {
          result = ValueColor.Critical;
        } else {
          result = ValueColor.Error;
        }
      } else if (improvementDirection.indexOf("Target") > -1) {
        if (value <= acceptanceHigh && value >= acceptanceLow) {
          result = ValueColor.Good;
        } else if (value >= toleranceLow && value < acceptanceLow || value > acceptanceHigh && value <= toleranceHigh) {
          result = ValueColor.Neutral;
        } else if (value >= deviationLow && value < toleranceLow || value > toleranceHigh && value <= deviationHigh) {
          result = ValueColor.Critical;
        } else {
          result = ValueColor.Error;
        }
      }
      if (result === undefined) {
        Log.warning("Case not supported, returning the default Value Neutral");
        return ValueColor.Neutral;
      }
      return result;
    };
    _proto._formatDateAndNumberValue = function _formatDateAndNumberValue(value, precision, scale, pattern) {
      if (pattern) {
        return this._getSemanticsValueFormatter(pattern).formatValue(value, "string");
      } else if (!isNaN(value)) {
        return this._getLabelNumberFormatter(precision, scale).format(value);
      }
      return value;
    };
    _proto._getSemanticsValueFormatter = function _getSemanticsValueFormatter(pattern) {
      if (!this._oDateType) {
        this._oDateType = new DateType({
          style: "short",
          source: {
            pattern
          }
        });
      }
      return this._oDateType;
    };
    _proto._getLabelNumberFormatter = function _getLabelNumberFormatter(precision, scale) {
      return NumberFormat.getFloatInstance({
        style: "short",
        showScale: true,
        precision: typeof precision === "number" && precision || 0,
        decimals: typeof scale === "number" && scale || 0
      });
    };
    return MicroChartContainer;
  }(Control), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "showOnlyChart", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "uomPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "measures", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "dimension", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "dataPointQualifiers", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "measurePrecision", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "measureScale", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "dimensionPrecision", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "chartTitle", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "chartDescription", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "navigationType", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "calendarPattern", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "onTitlePressed", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "microChart", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "_uomLabel", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "microChartTitle", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return MicroChartContainer;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChartContainer", ["sap/base/Log","sap/chart/coloring/CriticalityType","sap/fe/core/helpers/ClassSupport","sap/fe/macros/library","sap/m/FlexBox","sap/m/Label","sap/m/library","sap/suite/ui/microchart/AreaMicroChart","sap/suite/ui/microchart/ColumnMicroChart","sap/suite/ui/microchart/ComparisonMicroChart","sap/suite/ui/microchart/LineMicroChart","sap/ui/core/Control","sap/ui/core/format/NumberFormat","sap/ui/model/odata/v4/ODataListBinding","sap/ui/model/odata/v4/ODataMetaModel","sap/ui/model/type/Date"],function(e,t,i,r,a,n,o,l,s,u,c,f,g,h,p,d){"use strict";var b,m,y,C,v,P,L,_,w,A,O,T,x,V,z,N,B,D,M,R,E,I,S,F,j,$,U,k,Y,G,q,X,H,Q,J;var K=i.property;var W=i.event;var Z=i.defineUI5Class;var ee=i.aggregation;function te(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function ie(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function re(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;ae(e,t)}function ae(e,t){ae=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return ae(e,t)}function ne(e,t,i,r,a){var n={};Object.keys(r).forEach(function(e){n[e]=r[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},n);if(a&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(a):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function oe(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const le=r.NavigationType;const se=o.ValueColor;let ue=(b=Z("sap.fe.macros.microchart.MicroChartContainer"),m=K({type:"boolean",defaultValue:false}),y=K({type:"string",defaultValue:undefined}),C=K({type:"string[]",defaultValue:[]}),v=K({type:"string",defaultValue:undefined}),P=K({type:"string[]",defaultValue:[]}),L=K({type:"int",defaultValue:undefined}),_=K({type:"int",defaultValue:1}),w=K({type:"int",defaultValue:undefined}),A=K({type:"string",defaultValue:""}),O=K({type:"string",defaultValue:""}),T=K({type:"sap.fe.macros.NavigationType",defaultValue:"None"}),x=K({type:"string",defaultValue:""}),V=W(),z=ee({type:"sap.ui.core.Control",multiple:false,isDefault:true}),N=ee({type:"sap.m.Label",multiple:false}),B=ee({type:"sap.ui.core.Control",multiple:true}),b(D=(M=function(i){re(r,i);function r(){var e;for(var t=arguments.length,r=new Array(t),a=0;a<t;a++){r[a]=arguments[a]}e=i.call(this,...r)||this;te(e,"showOnlyChart",R,ie(e));te(e,"uomPath",E,ie(e));te(e,"measures",I,ie(e));te(e,"dimension",S,ie(e));te(e,"dataPointQualifiers",F,ie(e));te(e,"measurePrecision",j,ie(e));te(e,"measureScale",$,ie(e));te(e,"dimensionPrecision",U,ie(e));te(e,"chartTitle",k,ie(e));te(e,"chartDescription",Y,ie(e));te(e,"navigationType",G,ie(e));te(e,"calendarPattern",q,ie(e));te(e,"onTitlePressed",X,ie(e));te(e,"microChart",H,ie(e));te(e,"_uomLabel",Q,ie(e));te(e,"microChartTitle",J,ie(e));return e}r.render=function e(t,i){t.openStart("div",i);t.openEnd();if(!i.showOnlyChart){const e=i.microChartTitle;if(e){e.forEach(function(e){t.openStart("div");t.openEnd();t.renderControl(e);t.close("div")})}t.openStart("div");t.openEnd();const r=new n({text:i.chartDescription});t.renderControl(r);t.close("div")}const r=i.microChart;if(r){r.addStyleClass("sapUiTinyMarginTopBottom");t.renderControl(r);if(!i.showOnlyChart&&i.uomPath){const e=i._checkIfChartRequiresRuntimeLabels()?undefined:{text:{path:i.uomPath}},r=new n(e),o=new a({alignItems:"Start",justifyContent:"End",items:[r]});t.renderControl(o);i.setAggregation("_uomLabel",r)}}t.close("div")};var o=r.prototype;o.onBeforeRendering=function e(){const t=this._getListBindingForRuntimeLabels();if(t){t.detachEvent("change",this._setRuntimeChartLabelsAndUnitOfMeasure,this);this._olistBinding=undefined}};o.onAfterRendering=function e(){const t=this._getListBindingForRuntimeLabels();if(!this._checkIfChartRequiresRuntimeLabels()){return}if(t){t.attachEvent("change",this._setRuntimeChartLabelsAndUnitOfMeasure,this);this._olistBinding=t}};o.setShowOnlyChart=function e(t){if(!t&&this._olistBinding){this._setChartLabels()}this.setProperty("showOnlyChart",t,false)};o._checkIfChartRequiresRuntimeLabels=function e(){const t=this.microChart;return Boolean(t instanceof l||t instanceof s||t instanceof c||t instanceof u)};o._checkForChartLabelAggregations=function e(){const t=this.microChart;return Boolean(t instanceof l&&t.getAggregation("firstYLabel")&&t.getAggregation("lastYLabel")&&t.getAggregation("firstXLabel")&&t.getAggregation("lastXLabel")||t instanceof s&&t.getAggregation("leftTopLabel")&&t.getAggregation("rightTopLabel")&&t.getAggregation("leftBottomLabel")&&t.getAggregation("rightBottomLabel")||t instanceof c)};o._getListBindingForRuntimeLabels=function e(){const t=this.microChart;let i;if(t instanceof l){const e=t.getChart();i=e&&e.getBinding("points")}else if(t instanceof s){i=t.getBinding("columns")}else if(t instanceof c){const e=t.getLines();i=e&&e.length&&e[0].getBinding("points")}else if(t instanceof u){i=t.getBinding("data")}return i instanceof h?i:false};o._setRuntimeChartLabelsAndUnitOfMeasure=async function e(){const t=this._olistBinding,i=t===null||t===void 0?void 0:t.getContexts(),r=this.measures,a=this.dimension,n=this.uomPath,o=this.microChart,l=this._uomLabel;if(l&&n&&i&&i.length&&!this.showOnlyChart){l.setText(i[0].getObject(n))}else if(l){l.setText("")}if(!this._checkForChartLabelAggregations()){return}if(!i||!i.length){this._setChartLabels();return}const s=i[0],u=i[i.length-1],f=[],g=o instanceof c,h=s.getObject(a),p=u.getObject(a);let d,b,m={value:Infinity},y={value:-Infinity},C={value:Infinity},v={value:-Infinity};m=h==undefined?m:{context:s,value:h};y=p==undefined?y:{context:u,value:p};if(r!==null&&r!==void 0&&r.length){r.forEach((e,t)=>{d=s.getObject(e);b=u.getObject(e);v=b>v.value?{context:u,value:b,index:g?t:0}:v;C=d<C.value?{context:s,value:d,index:g?t:0}:C;if(g){f.push(this._getCriticalityFromPoint({context:u,value:b,index:t}))}})}this._setChartLabels(C.value,v.value,m.value,y.value);if(g){const e=await Promise.all(f);if(e!==null&&e!==void 0&&e.length){const t=o.getLines();t.forEach(function(t,i){t.setColor(e[i])})}}else{await this._setChartLabelsColors(v,C)}};o._setChartLabelsColors=async function e(t,i){const r=this.microChart;const a=await Promise.all([this._getCriticalityFromPoint(i),this._getCriticalityFromPoint(t)]);if(r instanceof l){r.getAggregation("firstYLabel").setProperty("color",a[0],true);r.getAggregation("lastYLabel").setProperty("color",a[1],true)}else if(r instanceof s){r.getAggregation("leftTopLabel").setProperty("color",a[0],true);r.getAggregation("rightTopLabel").setProperty("color",a[1],true)}};o._setChartLabels=function e(t,i,r,a){const n=this.microChart;t=this._formatDateAndNumberValue(t,this.measurePrecision,this.measureScale);i=this._formatDateAndNumberValue(i,this.measurePrecision,this.measureScale);r=this._formatDateAndNumberValue(r,this.dimensionPrecision,undefined,this.calendarPattern);a=this._formatDateAndNumberValue(a,this.dimensionPrecision,undefined,this.calendarPattern);if(n instanceof l){n.getAggregation("firstYLabel").setProperty("label",t,false);n.getAggregation("lastYLabel").setProperty("label",i,false);n.getAggregation("firstXLabel").setProperty("label",r,false);n.getAggregation("lastXLabel").setProperty("label",a,false)}else if(n instanceof s){n.getAggregation("leftTopLabel").setProperty("label",t,false);n.getAggregation("rightTopLabel").setProperty("label",i,false);n.getAggregation("leftBottomLabel").setProperty("label",r,false);n.getAggregation("rightBottomLabel").setProperty("label",a,false)}else if(n instanceof c){n.setProperty("leftTopLabel",t,false);n.setProperty("rightTopLabel",i,false);n.setProperty("leftBottomLabel",r,false);n.setProperty("rightBottomLabel",a,false)}};o._getCriticalityFromPoint=async function e(t){if(t!==null&&t!==void 0&&t.context){const e=this.getModel()&&this.getModel().getMetaModel(),i=this.dataPointQualifiers,r=e instanceof p&&t.context.getPath()&&e.getMetaPath(t.context.getPath());if(e&&typeof r==="string"){const a=await e.requestObject(`${r}/@${"com.sap.vocabularies.UI.v1.DataPoint"}${t.index!==undefined&&i[t.index]?`#${i[t.index]}`:""}`);if(a){let e=se.Neutral;const i=t.context;if(a.Criticality){e=this._criticality(a.Criticality,i)}else if(a.CriticalityCalculation){const r=a.CriticalityCalculation;const n=function(e){let t;if(e!==null&&e!==void 0&&e.$Path){t=i.getObject(e.$Path)}else if(e!==null&&e!==void 0&&e.hasOwnProperty("$Decimal")){t=e.$Decimal}return t};e=this._criticalityCalculation(r.ImprovementDirection.$EnumMember,t.value,n(r.DeviationRangeLowValue),n(r.ToleranceRangeLowValue),n(r.AcceptanceRangeLowValue),n(r.AcceptanceRangeHighValue),n(r.ToleranceRangeHighValue),n(r.DeviationRangeHighValue))}return e}}}return Promise.resolve(se.Neutral)};o._criticality=function i(r,a){let n,o;if(r.$Path){n=a.getObject(r.$Path);if(n===t.Negative||n.toString()==="1"){o=se.Error}else if(n===t.Critical||n.toString()==="2"){o=se.Critical}else if(n===t.Positive||n.toString()==="3"){o=se.Good}}else if(r.$EnumMember){n=r.$EnumMember;if(n.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Negative")>-1){o=se.Error}else if(n.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Positive")>-1){o=se.Good}else if(n.indexOf("com.sap.vocabularies.UI.v1.CriticalityType/Critical")>-1){o=se.Critical}}if(o===undefined){e.warning("Case not supported, returning the default Value Neutral");return se.Neutral}return o};o._criticalityCalculation=function t(i,r,a,n,o,l,s,u){let c;a=a==undefined?-Infinity:a;n=n==undefined?a:n;o=o==undefined?n:o;u=u==undefined?Infinity:u;s=s==undefined?u:s;l=l==undefined?s:l;if(i.indexOf("Minimize")>-1){if(r<=l){c=se.Good}else if(r<=s){c=se.Neutral}else if(r<=u){c=se.Critical}else{c=se.Error}}else if(i.indexOf("Maximize")>-1){if(r>=o){c=se.Good}else if(r>=n){c=se.Neutral}else if(r>=a){c=se.Critical}else{c=se.Error}}else if(i.indexOf("Target")>-1){if(r<=l&&r>=o){c=se.Good}else if(r>=n&&r<o||r>l&&r<=s){c=se.Neutral}else if(r>=a&&r<n||r>s&&r<=u){c=se.Critical}else{c=se.Error}}if(c===undefined){e.warning("Case not supported, returning the default Value Neutral");return se.Neutral}return c};o._formatDateAndNumberValue=function e(t,i,r,a){if(a){return this._getSemanticsValueFormatter(a).formatValue(t,"string")}else if(!isNaN(t)){return this._getLabelNumberFormatter(i,r).format(t)}return t};o._getSemanticsValueFormatter=function e(t){if(!this._oDateType){this._oDateType=new d({style:"short",source:{pattern:t}})}return this._oDateType};o._getLabelNumberFormatter=function e(t,i){return g.getFloatInstance({style:"short",showScale:true,precision:typeof t==="number"&&t||0,decimals:typeof i==="number"&&i||0})};return r}(f),R=ne(M.prototype,"showOnlyChart",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),E=ne(M.prototype,"uomPath",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),I=ne(M.prototype,"measures",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),S=ne(M.prototype,"dimension",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),F=ne(M.prototype,"dataPointQualifiers",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),j=ne(M.prototype,"measurePrecision",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),$=ne(M.prototype,"measureScale",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),U=ne(M.prototype,"dimensionPrecision",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),k=ne(M.prototype,"chartTitle",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),Y=ne(M.prototype,"chartDescription",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),G=ne(M.prototype,"navigationType",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),q=ne(M.prototype,"calendarPattern",[x],{configurable:true,enumerable:true,writable:true,initializer:null}),X=ne(M.prototype,"onTitlePressed",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),H=ne(M.prototype,"microChart",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),Q=ne(M.prototype,"_uomLabel",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),J=ne(M.prototype,"microChartTitle",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),M))||D);return ue},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChartHelper-dbg", ["sap/base/Log", "sap/fe/macros/CommonHelper", "sap/m/library", "sap/ui/core/format/DateFormat"], function (Log, CommonHelper, mobilelibrary, DateFormat) {
  "use strict";

  const ValueColor = mobilelibrary.ValueColor;
  const calendarPatternMap = {
    yyyy: /[1-9][0-9]{3,}|0[0-9]{3}/,
    Q: /[1-4]/,
    MM: /0[1-9]|1[0-2]/,
    ww: /0[1-9]|[1-4][0-9]|5[0-3]/,
    yyyyMMdd: /([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])/,
    yyyyMM: /([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])/,
    "yyyy-MM-dd": /([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])/
  };

  /**
   * Helper class used by MDC_Controls to handle SAP Fiori elements for OData V4
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const MicroChartHelper = {
    /**
     * This function returns the Threshold Color for bullet micro chart.
     *
     * @param value Threshold value provided in the annotations
     * @param iContext InterfaceContext with path to the threshold
     * @returns The indicator for Threshold Color
     */
    getThresholdColor: function (value, iContext) {
      const path = iContext.context.getPath();
      if (path.indexOf("DeviationRange") > -1) {
        return ValueColor.Error;
      } else if (path.indexOf("ToleranceRange") > -1) {
        return ValueColor.Critical;
      }
      return ValueColor.Neutral;
    },
    /**
     * To fetch measures from DataPoints.
     *
     * @param chartAnnotations Chart Annotations
     * @param entityTypeAnnotations EntityType Annotations
     * @param chartType Chart Type used
     * @returns Containing all measures.
     * @private
     */
    getMeasurePropertyPaths: function (chartAnnotations, entityTypeAnnotations, chartType) {
      const propertyPath = [];
      if (!entityTypeAnnotations) {
        Log.warning("FE:Macro:MicroChart : Couldn't find annotations for the DataPoint.");
        return undefined;
      }
      for (const measureIndex in chartAnnotations.Measures) {
        var _dataPoint$Value;
        const iMeasureAttribute = CommonHelper.getMeasureAttributeIndex(measureIndex, chartAnnotations),
          measureAttribute = iMeasureAttribute > -1 && chartAnnotations.MeasureAttributes && chartAnnotations.MeasureAttributes[iMeasureAttribute],
          dataPoint = measureAttribute && entityTypeAnnotations && entityTypeAnnotations[measureAttribute.DataPoint.$AnnotationPath];
        if (dataPoint !== null && dataPoint !== void 0 && (_dataPoint$Value = dataPoint.Value) !== null && _dataPoint$Value !== void 0 && _dataPoint$Value.$Path) {
          propertyPath.push(dataPoint.Value.$Path);
        } else {
          Log.warning(`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute ${chartType} MicroChart.`);
        }
      }
      return propertyPath.join(",");
    },
    /**
     * This function returns the visible expression path.
     *
     * @param args
     * @returns Expression Binding for the visible.
     */
    getHiddenPathExpression: function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (!args[0] && !args[1]) {
        return true;
      }
      if (args[0] === true || args[1] === true) {
        return false;
      }
      const hiddenPaths = [];
      [].forEach.call(args, function (hiddenProperty) {
        if (hiddenProperty && hiddenProperty.$Path) {
          hiddenPaths.push("%{" + hiddenProperty.$Path + "}");
        }
      });
      return hiddenPaths.length ? "{= " + hiddenPaths.join(" || ") + " === true ? false : true }" : false;
    },
    /**
     * This function returns the true/false to display chart.
     *
     * @param chartType The chart type
     * @param value Data point value of Value
     * @param maxValue Data point value of MaximumValue
     * @param valueHidden Hidden path object/boolean value for the referenced property of value
     * @param maxValueHidden Hidden path object/boolean value for the referenced property of MaxValue
     * @returns `true` or `false` to hide/show chart
     */
    isNotAlwaysHidden: function (chartType, value, maxValue, valueHidden, maxValueHidden) {
      if (valueHidden === true) {
        this.logError(chartType, value);
      }
      if (maxValueHidden === true) {
        this.logError(chartType, maxValue);
      }
      if (valueHidden === undefined && maxValueHidden === undefined) {
        return true;
      } else {
        return (!valueHidden || valueHidden.$Path) && valueHidden !== undefined || (!maxValueHidden || maxValueHidden.$Path) && maxValueHidden !== undefined ? true : false;
      }
    },
    /**
     * This function is to log errors for missing data point properties.
     *
     * @param chartType The chart type.
     * @param value Dynamic hidden property name.
     */
    logError: function (chartType, value) {
      Log.error(`Measure Property ${value.$Path} is hidden for the ${chartType} Micro Chart`);
    },
    /**
     * This function returns the formatted value with scale factor for the value displayed.
     *
     * @param path Property path for the value
     * @param property The Property for constraints
     * @param fractionDigits No. of fraction digits specified from annotations
     * @returns Expression Binding for the value with scale.
     */
    formatDecimal: function (path, property, fractionDigits) {
      if (!path) {
        return undefined;
      }
      const constraints = [],
        formatOptions = ["style: 'short'"];
      const scale = typeof fractionDigits === "number" ? fractionDigits : property && (property === null || property === void 0 ? void 0 : property.$Scale) || 1;
      if (property.$Nullable != undefined) {
        constraints.push("nullable: " + property.$Nullable);
      }
      if (property.$Precision != undefined) {
        formatOptions.push("precision: " + (property.$Precision ? property.$Precision : "1"));
      }
      constraints.push("scale: " + (scale === "variable" ? "'" + scale + "'" : scale));
      return "{ path: '" + path + "'" + ", type: 'sap.ui.model.odata.type.Decimal', constraints: { " + constraints.join(",") + " }, formatOptions: { " + formatOptions.join(",") + " } }";
    },
    /**
     * To fetch select parameters from annotations that need to be added to the list binding.
     *
     * @param groupId GroupId to be used
     * @param uomPath Unit of measure path
     * @param criticality Criticality for the chart
     * @param criticalityPath Criticality calculation object property path
     * @returns String containing all the property paths needed to be added to the $select query of the list binding.
     * @private
     */
    getSelectParameters: function (groupId, uomPath, criticality) {
      const propertyPath = [],
        parameters = [];
      if (groupId) {
        parameters.push(`$$groupId : '${groupId}'`);
      }
      if (criticality) {
        propertyPath.push(criticality);
      } else if (uomPath) {
        for (const k in uomPath) {
          if (!uomPath[k].$EnumMember && uomPath[k].$Path) {
            propertyPath.push(uomPath[k].$Path);
          }
        }
      }
      for (var _len2 = arguments.length, criticalityPath = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
        criticalityPath[_key2 - 3] = arguments[_key2];
      }
      for (const path of criticalityPath) {
        if (path) {
          propertyPath.push(path);
        }
      }
      if (propertyPath.length) {
        parameters.push(`$select : '${propertyPath.join(",")}'`);
      }
      return parameters.join(",");
    },
    /**
     * To fetch DataPoint Qualifiers of measures.
     *
     * @param chartAnnotations Chart Annotations
     * @param entityTypeAnnotations EntityType Annotations
     * @param chartType Chart Type used
     * @returns Containing all data point Qualifiers.
     * @private
     */
    getDataPointQualifiersForMeasures: function (chartAnnotations, entityTypeAnnotations, chartType) {
      const qualifiers = [],
        measureAttributes = chartAnnotations.MeasureAttributes,
        fnAddDataPointQualifier = function (chartMeasure) {
          const measure = chartMeasure.$PropertyPath;
          let qualifier;
          if (entityTypeAnnotations) {
            measureAttributes.forEach(function (measureAttribute) {
              var _measureAttribute$Mea, _measureAttribute$Dat;
              if (((_measureAttribute$Mea = measureAttribute.Measure) === null || _measureAttribute$Mea === void 0 ? void 0 : _measureAttribute$Mea.$PropertyPath) === measure && (_measureAttribute$Dat = measureAttribute.DataPoint) !== null && _measureAttribute$Dat !== void 0 && _measureAttribute$Dat.$AnnotationPath) {
                const annotationPath = measureAttribute.DataPoint.$AnnotationPath;
                if (entityTypeAnnotations[annotationPath]) {
                  qualifier = annotationPath.split("#")[1];
                  if (qualifier) {
                    qualifiers.push(qualifier);
                  }
                }
              }
            });
          }
          if (qualifier === undefined) {
            Log.warning(`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute for ${chartType} MicroChart.`);
          }
        };
      if (!entityTypeAnnotations) {
        Log.warning(`FE:Macro:MicroChart : Couldn't find annotations for the DataPoint ${chartType} MicroChart.`);
      }
      chartAnnotations.Measures.forEach(fnAddDataPointQualifier);
      return qualifiers.join(",");
    },
    /**
     * This function is to log warnings for missing datapoint properties.
     *
     * @param chartType The Chart type.
     * @param error Object with properties from DataPoint.
     */
    logWarning: function (chartType, error) {
      for (const key in error) {
        if (!error[key]) {
          Log.warning(`${key} parameter is missing for the ${chartType} Micro Chart`);
        }
      }
    },
    /**
     * This function is used to get DisplayValue for comparison micro chart data aggregation.
     *
     * @param dataPoint Data point object.
     * @param pathText Object after evaluating @com.sap.vocabularies.Common.v1.Text annotation
     * @param valueTextPath Evaluation of @com.sap.vocabularies.Common.v1.Text/$Path/$ value of the annotation
     * @param valueDataPointPath DataPoint>Value/$Path/$ value after evaluating annotation
     * @returns Expression binding for Display Value for comparison micro chart's aggregation data.
     */
    getDisplayValueForMicroChart: function (dataPoint, pathText, valueTextPath, valueDataPointPath) {
      const valueFormat = dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits;
      if (pathText) {
        return MicroChartHelper.formatDecimal(pathText["$Path"], valueTextPath, valueFormat);
      }
      return MicroChartHelper.formatDecimal(dataPoint.Value["$Path"], valueDataPointPath, valueFormat);
    },
    /**
     * This function is used to check whether micro chart is enabled or not by checking properties, chart annotations, hidden properties.
     *
     * @param chartType MicroChart Type eg:- Bullet.
     * @param dataPoint Data point object.
     * @param dataPointValueHidden Object with $Path annotation to get hidden value path
     * @param chartAnnotations ChartAnnotation object
     * @param dataPointMaxValue Object with $Path annotation to get hidden max value path
     * @returns `true` if the chart has all values and properties and also it is not always hidden sFinalDataPointValue && bMicrochartVisible.
     */
    shouldMicroChartRender: function (chartType, dataPoint, dataPointValueHidden, chartAnnotations, dataPointMaxValue) {
      const availableChartTypes = ["Area", "Column", "Comparison"],
        dataPointValue = dataPoint && dataPoint.Value,
        hiddenPath = dataPointValueHidden && dataPointValueHidden["com.sap.vocabularies.UI.v1.Hidden"],
        chartAnnotationDimension = chartAnnotations && chartAnnotations.Dimensions && chartAnnotations.Dimensions[0],
        finalDataPointValue = availableChartTypes.indexOf(chartType) > -1 ? dataPointValue && chartAnnotationDimension : dataPointValue; // only for three charts in array
      if (chartType === "Harvey") {
        const dataPointMaximumValue = dataPoint && dataPoint.MaximumValue,
          maxValueHiddenPath = dataPointMaxValue && dataPointMaxValue["com.sap.vocabularies.UI.v1.Hidden"];
        return dataPointValue && dataPointMaximumValue && MicroChartHelper.isNotAlwaysHidden("Bullet", dataPointValue, dataPointMaximumValue, hiddenPath, maxValueHiddenPath);
      }
      return finalDataPointValue && MicroChartHelper.isNotAlwaysHidden(chartType, dataPointValue, undefined, hiddenPath);
    },
    /**
     * This function is used to get dataPointQualifiers for Column, Comparison and StackedBar micro charts.
     *
     * @param annotationPath
     * @returns Result string or undefined.
     */
    getDataPointQualifiersForMicroChart: function (annotationPath) {
      if (annotationPath.indexOf("com.sap.vocabularies.UI.v1.DataPoint") === -1) {
        return undefined;
      }
      return annotationPath.split("#")[1] ?? "";
    },
    /**
     * This function is used to get colorPalette for comparison and HarveyBall Microcharts.
     *
     * @param dataPoint Data point object.
     * @returns Result string for colorPalette or undefined.
     */
    getColorPaletteForMicroChart: function (dataPoint) {
      return dataPoint.Criticality ? undefined : "sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,          sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,          sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11";
    },
    /**
     * This function is used to get MeasureScale for Area, Column and Line micro charts.
     *
     * @param dataPoint Data point object.
     * @returns Data point value format fractional digits or data point scale or 1.
     */
    getMeasureScaleForMicroChart: function (dataPoint) {
      if (dataPoint.ValueFormat && dataPoint.ValueFormat.NumberOfFractionalDigits) {
        return dataPoint.ValueFormat.NumberOfFractionalDigits;
      }
      if (dataPoint.Value && dataPoint.Value["$Path"] && dataPoint.Value["$Path"]["$Scale"]) {
        return dataPoint.Value["$Path"]["$Scale"];
      }
      return 1;
    },
    /**
     * This function is to return the binding expression of microchart.
     *
     * @param chartType The type of micro chart (Bullet, Radial etc.)
     * @param measure Measure value for micro chart.
     * @param microChart `this`/current model for micro chart.
     * @param collection Collection object.
     * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.
     * @param dataPoint Data point object used in case of Harvey Ball micro chart
     * @returns The binding expression for micro chart.
     * @private
     */
    getBindingExpressionForMicrochart: function (chartType, measure, microChart, collection, uiName, dataPoint) {
      const condition = collection["$isCollection"] || collection["$kind"] === "EntitySet";
      const path = condition ? "" : uiName;
      let currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(measure);
      let dataPointCriticallity = "";
      switch (chartType) {
        case "Radial":
          currencyOrUnit = "";
          break;
        case "Harvey":
          dataPointCriticallity = dataPoint.Criticality ? dataPoint.Criticality["$Path"] : "";
          break;
      }
      const functionValue = MicroChartHelper.getSelectParameters(microChart.batchGroupId, "", dataPointCriticallity, currencyOrUnit);
      return `{ path: '${path}'` + `, parameters : {${functionValue}} }`;
    },
    /**
     * This function is to return the UOMPath expression of the micro chart.
     *
     * @param showOnlyChart Whether only chart should be rendered or not.
     * @param measure Measures for the micro chart.
     * @returns UOMPath String for the micro chart.
     * @private
     */
    getUOMPathForMicrochart: function (showOnlyChart, measure) {
      if (measure && !showOnlyChart) {
        return measure[`@${"Org.OData.Measures.V1.ISOCurrency"}`] && measure[`@${"Org.OData.Measures.V1.ISOCurrency"}`].$Path || measure[`@${"Org.OData.Measures.V1.Unit"}`] && measure[`@${"Org.OData.Measures.V1.Unit"}`].$Path;
      }
      return undefined;
    },
    /**
     * This function is to return the aggregation binding expression of micro chart.
     *
     * @param aggregationType Aggregation type of chart (eg:- Point for AreaMicrochart)
     * @param collection Collection object.
     * @param dataPoint Data point info for micro chart.
     * @param uiName The @sapui.name in collection model is not accessible here from model hence need to pass it.
     * @param dimension Micro chart Dimensions.
     * @param measure Measure value for micro chart.
     * @param measureOrDimensionBar The measure or dimension passed specifically in case of bar chart
     * @returns Aggregation binding expression for micro chart.
     * @private
     */
    getAggregationForMicrochart: function (aggregationType, collection, dataPoint, uiName, dimension, measure, measureOrDimensionBar) {
      let path = collection["$kind"] === "EntitySet" ? "/" : "";
      path = path + uiName;
      const groupId = "";
      let dataPointCriticallityCalc = "";
      let dataPointCriticallity = dataPoint.Criticality ? dataPoint.Criticality["$Path"] : "";
      const currencyOrUnit = MicroChartHelper.getUOMPathForMicrochart(false, measure);
      let targetValuePath = "";
      let dimensionPropertyPath = "";
      if (dimension && dimension.$PropertyPath && dimension.$PropertyPath[`@${"com.sap.vocabularies.Common.v1.Text"}`]) {
        dimensionPropertyPath = dimension.$PropertyPath[`@${"com.sap.vocabularies.Common.v1.Text"}`].$Path;
      } else {
        dimensionPropertyPath = dimension.$PropertyPath;
      }
      switch (aggregationType) {
        case "Points":
          dataPointCriticallityCalc = dataPoint && dataPoint.CriticalityCalculation;
          targetValuePath = dataPoint && dataPoint.TargetValue && dataPoint.TargetValue["$Path"];
          dataPointCriticallity = "";
          break;
        case "Columns":
          dataPointCriticallityCalc = dataPoint && dataPoint.CriticalityCalculation;
          break;
        case "LinePoints":
          dataPointCriticallity = "";
          break;
        case "Bars":
          dimensionPropertyPath = "";
          break;
      }
      const functionValue = MicroChartHelper.getSelectParameters(groupId, dataPointCriticallityCalc, dataPointCriticallity, currencyOrUnit, targetValuePath, dimensionPropertyPath, measureOrDimensionBar);
      return `{path:'${path}'` + `, parameters : {${functionValue}} }`;
    },
    getCurrencyOrUnit: function (measure) {
      if (measure[`@${"Org.OData.Measures.V1.ISOCurrency"}`]) {
        return measure[`@${"Org.OData.Measures.V1.ISOCurrency"}`].$Path || measure[`@${"Org.OData.Measures.V1.ISOCurrency"}`];
      }
      if (measure[`@${"Org.OData.Measures.V1.Unit"}`]) {
        return measure[`@${"Org.OData.Measures.V1.Unit"}`].$Path || measure[`@${"Org.OData.Measures.V1.Unit"}`];
      }
      return "";
    },
    getCalendarPattern: function (propertyType, annotations) {
      return annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarYear"}`] && "yyyy" || annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarQuarter"}`] && "Q" || annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarMonth"}`] && "MM" || annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarWeek"}`] && "ww" || annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarDate"}`] && "yyyyMMdd" || annotations[`@${"com.sap.vocabularies.Common.v1.IsCalendarYearMonth"}`] && "yyyyMM" || propertyType === "Edm.Date" && "yyyy-MM-dd" || undefined;
    },
    formatDimension: function (date, pattern, propertyPath) {
      const value = DateFormat.getDateInstance({
        pattern
      }).parse(date, false, true);
      if (value instanceof Date) {
        return value.getTime();
      } else {
        Log.warning("Date value could not be determined for " + propertyPath);
      }
      return 0;
    },
    formatStringDimension: function (value, pattern, propertyPath) {
      if (pattern in calendarPatternMap) {
        const matchedValue = value === null || value === void 0 ? void 0 : value.toString().match(calendarPatternMap[pattern]);
        if (matchedValue && matchedValue !== null && matchedValue !== void 0 && matchedValue.length) {
          return MicroChartHelper.formatDimension(matchedValue[0], pattern, propertyPath);
        }
      }
      Log.warning("Pattern not supported for " + propertyPath);
      return 0;
    },
    getX: function (propertyPath, propertyType, annotations) {
      const pattern = annotations && MicroChartHelper.getCalendarPattern(propertyType, annotations);
      if (pattern && ["Edm.Date", "Edm.String"].some(type => type === propertyType)) {
        return `{parts: [{path: '${propertyPath}', targetType: 'any'}, {value: '${pattern}'}, {value: '${propertyPath}'}], formatter: 'MICROCHARTR.formatStringDimension'}`;
      }
    }
  };
  return MicroChartHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/microchart/MicroChartHelper", ["sap/base/Log","sap/fe/macros/CommonHelper","sap/m/library","sap/ui/core/format/DateFormat"],function(t,e,a,r){"use strict";const n=a.ValueColor;const i={yyyy:/[1-9][0-9]{3,}|0[0-9]{3}/,Q:/[1-4]/,MM:/0[1-9]|1[0-2]/,ww:/0[1-9]|[1-4][0-9]|5[0-3]/,yyyyMMdd:/([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])(0[1-9]|[12][0-9]|3[01])/,yyyyMM:/([1-9][0-9]{3,}|0[0-9]{3})(0[1-9]|1[0-2])/,"yyyy-MM-dd":/([1-9][0-9]{3,}|0[0-9]{3})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])/};const o={getThresholdColor:function(t,e){const a=e.context.getPath();if(a.indexOf("DeviationRange")>-1){return n.Error}else if(a.indexOf("ToleranceRange")>-1){return n.Critical}return n.Neutral},getMeasurePropertyPaths:function(a,r,n){const i=[];if(!r){t.warning("FE:Macro:MicroChart : Couldn't find annotations for the DataPoint.");return undefined}for(const u in a.Measures){var o;const s=e.getMeasureAttributeIndex(u,a),l=s>-1&&a.MeasureAttributes&&a.MeasureAttributes[s],c=l&&r&&r[l.DataPoint.$AnnotationPath];if(c!==null&&c!==void 0&&(o=c.Value)!==null&&o!==void 0&&o.$Path){i.push(c.Value.$Path)}else{t.warning(`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute ${n} MicroChart.`)}}return i.join(",")},getHiddenPathExpression:function(){for(var t=arguments.length,e=new Array(t),a=0;a<t;a++){e[a]=arguments[a]}if(!e[0]&&!e[1]){return true}if(e[0]===true||e[1]===true){return false}const r=[];[].forEach.call(e,function(t){if(t&&t.$Path){r.push("%{"+t.$Path+"}")}});return r.length?"{= "+r.join(" || ")+" === true ? false : true }":false},isNotAlwaysHidden:function(t,e,a,r,n){if(r===true){this.logError(t,e)}if(n===true){this.logError(t,a)}if(r===undefined&&n===undefined){return true}else{return(!r||r.$Path)&&r!==undefined||(!n||n.$Path)&&n!==undefined?true:false}},logError:function(e,a){t.error(`Measure Property ${a.$Path} is hidden for the ${e} Micro Chart`)},formatDecimal:function(t,e,a){if(!t){return undefined}const r=[],n=["style: 'short'"];const i=typeof a==="number"?a:e&&(e===null||e===void 0?void 0:e.$Scale)||1;if(e.$Nullable!=undefined){r.push("nullable: "+e.$Nullable)}if(e.$Precision!=undefined){n.push("precision: "+(e.$Precision?e.$Precision:"1"))}r.push("scale: "+(i==="variable"?"'"+i+"'":i));return"{ path: '"+t+"'"+", type: 'sap.ui.model.odata.type.Decimal', constraints: { "+r.join(",")+" }, formatOptions: { "+n.join(",")+" } }"},getSelectParameters:function(t,e,a){const r=[],n=[];if(t){n.push(`$$groupId : '${t}'`)}if(a){r.push(a)}else if(e){for(const t in e){if(!e[t].$EnumMember&&e[t].$Path){r.push(e[t].$Path)}}}for(var i=arguments.length,o=new Array(i>3?i-3:0),u=3;u<i;u++){o[u-3]=arguments[u]}for(const t of o){if(t){r.push(t)}}if(r.length){n.push(`$select : '${r.join(",")}'`)}return n.join(",")},getDataPointQualifiersForMeasures:function(e,a,r){const n=[],i=e.MeasureAttributes,o=function(e){const o=e.$PropertyPath;let u;if(a){i.forEach(function(t){var e,r;if(((e=t.Measure)===null||e===void 0?void 0:e.$PropertyPath)===o&&(r=t.DataPoint)!==null&&r!==void 0&&r.$AnnotationPath){const e=t.DataPoint.$AnnotationPath;if(a[e]){u=e.split("#")[1];if(u){n.push(u)}}}})}if(u===undefined){t.warning(`FE:Macro:MicroChart : Couldn't find DataPoint(Value) measure for the measureAttribute for ${r} MicroChart.`)}};if(!a){t.warning(`FE:Macro:MicroChart : Couldn't find annotations for the DataPoint ${r} MicroChart.`)}e.Measures.forEach(o);return n.join(",")},logWarning:function(e,a){for(const r in a){if(!a[r]){t.warning(`${r} parameter is missing for the ${e} Micro Chart`)}}},getDisplayValueForMicroChart:function(t,e,a,r){const n=t.ValueFormat&&t.ValueFormat.NumberOfFractionalDigits;if(e){return o.formatDecimal(e["$Path"],a,n)}return o.formatDecimal(t.Value["$Path"],r,n)},shouldMicroChartRender:function(t,e,a,r,n){const i=["Area","Column","Comparison"],u=e&&e.Value,s=a&&a["com.sap.vocabularies.UI.v1.Hidden"],l=r&&r.Dimensions&&r.Dimensions[0],c=i.indexOf(t)>-1?u&&l:u;if(t==="Harvey"){const t=e&&e.MaximumValue,a=n&&n["com.sap.vocabularies.UI.v1.Hidden"];return u&&t&&o.isNotAlwaysHidden("Bullet",u,t,s,a)}return c&&o.isNotAlwaysHidden(t,u,undefined,s)},getDataPointQualifiersForMicroChart:function(t){if(t.indexOf("com.sap.vocabularies.UI.v1.DataPoint")===-1){return undefined}return t.split("#")[1]??""},getColorPaletteForMicroChart:function(t){return t.Criticality?undefined:"sapUiChartPaletteQualitativeHue1, sapUiChartPaletteQualitativeHue2, sapUiChartPaletteQualitativeHue3,          sapUiChartPaletteQualitativeHue4, sapUiChartPaletteQualitativeHue5, sapUiChartPaletteQualitativeHue6, sapUiChartPaletteQualitativeHue7,          sapUiChartPaletteQualitativeHue8, sapUiChartPaletteQualitativeHue9, sapUiChartPaletteQualitativeHue10, sapUiChartPaletteQualitativeHue11"},getMeasureScaleForMicroChart:function(t){if(t.ValueFormat&&t.ValueFormat.NumberOfFractionalDigits){return t.ValueFormat.NumberOfFractionalDigits}if(t.Value&&t.Value["$Path"]&&t.Value["$Path"]["$Scale"]){return t.Value["$Path"]["$Scale"]}return 1},getBindingExpressionForMicrochart:function(t,e,a,r,n,i){const u=r["$isCollection"]||r["$kind"]==="EntitySet";const s=u?"":n;let l=o.getUOMPathForMicrochart(e);let c="";switch(t){case"Radial":l="";break;case"Harvey":c=i.Criticality?i.Criticality["$Path"]:"";break}const f=o.getSelectParameters(a.batchGroupId,"",c,l);return`{ path: '${s}'`+`, parameters : {${f}} }`},getUOMPathForMicrochart:function(t,e){if(e&&!t){return e[`@${"Org.OData.Measures.V1.ISOCurrency"}`]&&e[`@${"Org.OData.Measures.V1.ISOCurrency"}`].$Path||e[`@${"Org.OData.Measures.V1.Unit"}`]&&e[`@${"Org.OData.Measures.V1.Unit"}`].$Path}return undefined},getAggregationForMicrochart:function(t,e,a,r,n,i,u){let s=e["$kind"]==="EntitySet"?"/":"";s=s+r;const l="";let c="";let f=a.Criticality?a.Criticality["$Path"]:"";const h=o.getUOMPathForMicrochart(false,i);let d="";let m="";if(n&&n.$PropertyPath&&n.$PropertyPath[`@${"com.sap.vocabularies.Common.v1.Text"}`]){m=n.$PropertyPath[`@${"com.sap.vocabularies.Common.v1.Text"}`].$Path}else{m=n.$PropertyPath}switch(t){case"Points":c=a&&a.CriticalityCalculation;d=a&&a.TargetValue&&a.TargetValue["$Path"];f="";break;case"Columns":c=a&&a.CriticalityCalculation;break;case"LinePoints":f="";break;case"Bars":m="";break}const $=o.getSelectParameters(l,c,f,h,d,m,u);return`{path:'${s}'`+`, parameters : {${$}} }`},getCurrencyOrUnit:function(t){if(t[`@${"Org.OData.Measures.V1.ISOCurrency"}`]){return t[`@${"Org.OData.Measures.V1.ISOCurrency"}`].$Path||t[`@${"Org.OData.Measures.V1.ISOCurrency"}`]}if(t[`@${"Org.OData.Measures.V1.Unit"}`]){return t[`@${"Org.OData.Measures.V1.Unit"}`].$Path||t[`@${"Org.OData.Measures.V1.Unit"}`]}return""},getCalendarPattern:function(t,e){return e[`@${"com.sap.vocabularies.Common.v1.IsCalendarYear"}`]&&"yyyy"||e[`@${"com.sap.vocabularies.Common.v1.IsCalendarQuarter"}`]&&"Q"||e[`@${"com.sap.vocabularies.Common.v1.IsCalendarMonth"}`]&&"MM"||e[`@${"com.sap.vocabularies.Common.v1.IsCalendarWeek"}`]&&"ww"||e[`@${"com.sap.vocabularies.Common.v1.IsCalendarDate"}`]&&"yyyyMMdd"||e[`@${"com.sap.vocabularies.Common.v1.IsCalendarYearMonth"}`]&&"yyyyMM"||t==="Edm.Date"&&"yyyy-MM-dd"||undefined},formatDimension:function(e,a,n){const i=r.getDateInstance({pattern:a}).parse(e,false,true);if(i instanceof Date){return i.getTime()}else{t.warning("Date value could not be determined for "+n)}return 0},formatStringDimension:function(e,a,r){if(a in i){const t=e===null||e===void 0?void 0:e.toString().match(i[a]);if(t&&t!==null&&t!==void 0&&t.length){return o.formatDimension(t[0],a,r)}}t.warning("Pattern not supported for "+r);return 0},getX:function(t,e,a){const r=a&&o.getCalendarPattern(e,a);if(r&&["Edm.Date","Edm.String"].some(t=>t===e)){return`{parts: [{path: '${t}', targetType: 'any'}, {value: '${r}'}, {value: '${t}'}], formatter: 'MICROCHARTR.formatStringDimension'}`}}};return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueField.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/internal/valuehelp/ValueHelpTemplating"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, BindingHelper, MetaModelConverter, BindingToolkit, ID, TypeGuards, DataModelPathHelper, PropertyFormatters, UIFormatters, FieldHelper, FieldTemplating, ValueHelpTemplating) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7;
  var _exports = {};
  var getVisibleExpression = FieldTemplating.getVisibleExpression;
  var getValueBinding = FieldTemplating.getValueBinding;
  var getDisplayMode = UIFormatters.getDisplayMode;
  var isPathInsertable = DataModelPathHelper.isPathInsertable;
  var isPathDeletable = DataModelPathHelper.isPathDeletable;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isPropertyPathExpression = TypeGuards.isPropertyPathExpression;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isMultipleNavigationProperty = TypeGuards.isMultipleNavigationProperty;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var UI = BindingHelper.UI;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let MultiValueFieldBlock = (
  /**
   * Building block for creating a MultiValueField based on the metadata provided by OData V4.
   * <br>
   * Usually, a DataField annotation is expected
   *
   * Usage example:
   * <pre>
   * <internalMacro:MultiValueField
   *   idPrefix="SomePrefix"
   *   contextPath="{entitySet>}"
   *   metaPath="{dataField>}"
   * />
   * </pre>
   *
   * @hideconstructor
   * @private
   * @experimental
   * @since 1.94.0
   */
  _dec = defineBuildingBlock({
    name: "MultiValueField",
    namespace: "sap.fe.macros.internal"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["com.sap.vocabularies.UI.v1.DataField"]
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec8 = blockAttribute({
    type: "object",
    validate: function (formatOptionsInput) {
      if (formatOptionsInput.displayMode && !["Value", "Description", "ValueDescription", "DescriptionValue"].includes(formatOptionsInput.displayMode)) {
        throw new Error(`Allowed value ${formatOptionsInput.displayMode} for displayMode does not match`);
      }
      return formatOptionsInput;
    }
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(MultiValueFieldBlock, _BuildingBlockBase);
    /**
     * Prefix added to the generated ID of the field
     */
    /**
     * Prefix added to the generated ID of the value help used for the field
     */
    /**
     * Metadata path to the MultiValueField.
     * This property is usually a metadataContext pointing to a DataField having a Value that uses a 1:n navigation
     */
    /**
     * Mandatory context to the MultiValueField
     */
    /**
     * Property added to associate the label with the MultiValueField
     */
    /**
     * The format options
     */
    /**
     * Function to get the correct settings for the multi input.
     *
     * @param propertyDataModelObjectPath The corresponding DataModelObjectPath.
     * @param formatOptions The format options to calculate the result
     * @returns MultiInputSettings
     */
    MultiValueFieldBlock._getMultiInputSettings = function _getMultiInputSettings(propertyDataModelObjectPath, formatOptions) {
      var _propertyDefinition$a;
      const {
        collectionPath,
        itemDataModelObjectPath
      } = MultiValueFieldBlock._getPathStructure(propertyDataModelObjectPath);
      const collectionBindingDisplay = `{path:'${collectionPath}', templateShareable: false}`;
      const collectionBindingEdit = `{path:'${collectionPath}', parameters: {$$ownRequest : true}, templateShareable: false}`;
      const propertyPathOrProperty = propertyDataModelObjectPath.targetObject;
      const propertyDefinition = isPropertyPathExpression(propertyPathOrProperty) ? propertyPathOrProperty.$target : propertyPathOrProperty;
      const commonText = (_propertyDefinition$a = propertyDefinition.annotations.Common) === null || _propertyDefinition$a === void 0 ? void 0 : _propertyDefinition$a.Text;
      const relativeLocation = getRelativePaths(propertyDataModelObjectPath);
      const textExpression = commonText ? compileExpression(getExpressionFromAnnotation(commonText, relativeLocation)) : getValueBinding(itemDataModelObjectPath, formatOptions, true);
      return {
        text: textExpression,
        collectionBindingDisplay: collectionBindingDisplay,
        collectionBindingEdit: collectionBindingEdit,
        key: getValueBinding(itemDataModelObjectPath, formatOptions, true)
      };
    }

    // Process the dataModelPath to find the collection and the relative DataModelPath for the item.
    ;
    MultiValueFieldBlock._getPathStructure = function _getPathStructure(dataModelObjectPath) {
      var _dataModelObjectPath$, _dataModelObjectPath$2;
      let firstCollectionPath = "";
      const currentEntitySet = (_dataModelObjectPath$ = dataModelObjectPath.contextLocation) !== null && _dataModelObjectPath$ !== void 0 && _dataModelObjectPath$.targetEntitySet ? dataModelObjectPath.contextLocation.targetEntitySet : dataModelObjectPath.startingEntitySet;
      const navigatedPaths = [];
      const contextNavsForItem = ((_dataModelObjectPath$2 = dataModelObjectPath.contextLocation) === null || _dataModelObjectPath$2 === void 0 ? void 0 : _dataModelObjectPath$2.navigationProperties) || [];
      for (const navProp of dataModelObjectPath.navigationProperties) {
        if (dataModelObjectPath.contextLocation === undefined || !dataModelObjectPath.contextLocation.navigationProperties.some(contextNavProp => contextNavProp.fullyQualifiedName === navProp.fullyQualifiedName)) {
          // in case of relative entitySetPath we don't consider navigationPath that are already in the context
          navigatedPaths.push(navProp.name);
          contextNavsForItem.push(navProp);
        }
        if (currentEntitySet.navigationPropertyBinding.hasOwnProperty(navProp.name)) {
          if (isMultipleNavigationProperty(navProp)) {
            break;
          }
        }
      }
      firstCollectionPath = `${navigatedPaths.join("/")}`;
      const itemDataModelObjectPath = Object.assign({}, dataModelObjectPath);
      if (itemDataModelObjectPath.contextLocation) {
        itemDataModelObjectPath.contextLocation.navigationProperties = contextNavsForItem;
      }
      return {
        collectionPath: firstCollectionPath,
        itemDataModelObjectPath: itemDataModelObjectPath
      };
    }

    /**
     * Calculate the fieldGroupIds for the MultiValueField.
     *
     * @param dataModelObjectPath
     * @param appComponent
     * @returns The value for the fieldGroupIds
     */;
    MultiValueFieldBlock.computeFieldGroupIds = function computeFieldGroupIds(dataModelObjectPath, appComponent) {
      if (!appComponent) {
        //for ValueHelp / Mass edit Templating the appComponent is not passed to the templating
        return "";
      }
      const sideEffectService = appComponent.getSideEffectsService();
      const fieldGroupIds = sideEffectService.computeFieldGroupIds(dataModelObjectPath.targetEntityType.fullyQualifiedName, dataModelObjectPath.targetObject.fullyQualifiedName);
      const result = fieldGroupIds.join(",");
      return result === "" ? undefined : result;
    };
    function MultiValueFieldBlock(props, controlConfiguration, settings) {
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "idPrefix", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "vhIdPrefix", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "ariaLabelledBy", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "key", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formatOptions", _descriptor7, _assertThisInitialized(_this));
      let dataModelPath = MetaModelConverter.getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
      const dataFieldConverted = MetaModelConverter.convertMetaModelContext(_this.metaPath);
      let extraPath;
      if (isPathAnnotationExpression(dataFieldConverted.Value)) {
        extraPath = dataFieldConverted.Value.path;
      }
      _this.visible = getVisibleExpression(dataModelPath, _this.formatOptions);
      if (extraPath && extraPath.length > 0) {
        dataModelPath = enhanceDataModelPath(dataModelPath, extraPath);
      }
      const insertable = isPathInsertable(dataModelPath);
      const deleteNavigationRestriction = isPathDeletable(dataModelPath, {
        ignoreTargetCollection: true,
        authorizeUnresolvable: true
      });
      const deletePath = isPathDeletable(dataModelPath);
      // deletable:
      //		if restrictions come from Navigation we apply it
      //		otherwise we apply restrictions defined on target collection only if it's a constant
      //      otherwise it's true!
      const deletable = ifElse(deleteNavigationRestriction._type === "Unresolvable", or(not(isConstant(deletePath)), deletePath), deletePath);
      _this.editMode = _this.formatOptions.displayOnly === "true" ? "Display" : compileExpression(ifElse(and(insertable, deletable, UI.IsEditable), constant("Editable"), constant("Display")));
      _this.displayMode = getDisplayMode(dataModelPath);
      const multiInputSettings = MultiValueFieldBlock._getMultiInputSettings(dataModelPath, _this.formatOptions);
      _this.text = multiInputSettings.text;
      _this.collection = _this.editMode === "Display" ? multiInputSettings.collectionBindingDisplay : multiInputSettings.collectionBindingEdit;
      _this.key = multiInputSettings.key;
      _this.fieldGroupIds = MultiValueFieldBlock.computeFieldGroupIds(dataModelPath, settings.appComponent);
      return _this;
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */
    _exports = MultiValueFieldBlock;
    var _proto = MultiValueFieldBlock.prototype;
    _proto.getTemplate = function getTemplate() {
      //prepare settings for further processing
      const internalDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(this.metaPath, this.contextPath);
      const internalDataFieldConverted = internalDataModelPath.targetObject;
      const enhancedDataModelPath = enhanceDataModelPath(internalDataModelPath, internalDataFieldConverted.Value.path); // PathAnnotationExpression was checked in the templating
      //calculate the id settings for this block
      const id = this.idPrefix ? ID.generate([this.idPrefix, "MultiValueField"]) : undefined;
      //create a new binding context for the value help
      const valueHelpProperty = FieldHelper.valueHelpProperty(this.metaPath);
      const valueHelpPropertyContext = this.metaPath.getModel().createBindingContext(valueHelpProperty, this.metaPath);
      //calculate fieldHelp
      const fieldHelp = ValueHelpTemplating.generateID(undefined, this.vhIdPrefix, PropertyFormatters.getRelativePropertyPath(valueHelpPropertyContext, {
        context: this.contextPath
      }), getContextRelativeTargetObjectPath(enhancedDataModelPath) ?? "");
      //compute the correct label
      const label = FieldHelper.computeLabelText(internalDataFieldConverted.Value, {
        context: this.metaPath
      });
      const change = `MVFieldRuntime.handleChange($controller, $event)`;
      const validateFieldGroup = `MVFieldRuntime.onValidateFieldGroup($controller, $event)`;
      return xml`
		<mdc:MultiValueField
				xmlns:mdc="sap.ui.mdc"
				core:require="{MVFieldRuntime:'sap/fe/macros/multiValueField/MultiValueFieldRuntime'}"
				delegate="{name: 'sap/fe/macros/multiValueField/MultiValueFieldDelegate'}"
				id="${id}"
				items="${this.collection}"
				display="${this.displayMode}"
				width="100%"
				editMode="${this.editMode}"
				fieldHelp="${fieldHelp}"
				ariaLabelledBy = "${this.ariaLabelledBy}"
				showEmptyIndicator = "${this.formatOptions.showEmptyIndicator}"
				label = "${label}"
				change="${change}"
				fieldGroupIds="${this.fieldGroupIds}"
				validateFieldGroup="${validateFieldGroup}"
		>
		<mdcField:MultiValueFieldItem xmlns:mdcField="sap.ui.mdc.field" key="${this.key}" description="${this.text}" />
		</mdc:MultiValueField>`;
    };
    return MultiValueFieldBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "vhIdPrefix", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "FieldValueHelp";
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "ariaLabelledBy", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "key", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "formatOptions", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return {};
    }
  })), _class2)) || _class);
  _exports = MultiValueFieldBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueField.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyFormatters","sap/fe/core/templating/UIFormatters","sap/fe/macros/field/FieldHelper","sap/fe/macros/field/FieldTemplating","sap/fe/macros/internal/valuehelp/ValueHelpTemplating"],function(e,t,i,a,r,n,o,l,s,u,c,d,p,f){"use strict";var m,h,g,v,b,y,P,x,M,F,B,O,V,$,E,I,w;var D={};var j=p.getVisibleExpression;var k=p.getValueBinding;var z=c.getDisplayMode;var S=s.isPathInsertable;var T=s.isPathDeletable;var L=s.getRelativePaths;var C=s.getContextRelativeTargetObjectPath;var G=s.enhanceDataModelPath;var R=l.isPropertyPathExpression;var _=l.isPathAnnotationExpression;var H=l.isMultipleNavigationProperty;var N=n.or;var U=n.not;var q=n.isConstant;var A=n.ifElse;var Q=n.getExpressionFromAnnotation;var J=n.constant;var K=n.compileExpression;var W=n.and;var X=a.UI;var Y=i.xml;var Z=t.defineBuildingBlock;var ee=t.blockAttribute;function te(e,t,i,a){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(a):void 0})}function ie(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function ae(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;re(e,t)}function re(e,t){re=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return re(e,t)}function ne(e,t,i,a,r){var n={};Object.keys(a).forEach(function(e){n[e]=a[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,a){return a(e,t,i)||i},n);if(r&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(r):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function oe(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let le=(m=Z({name:"MultiValueField",namespace:"sap.fe.macros.internal"}),h=ee({type:"string"}),g=ee({type:"string"}),v=ee({type:"sap.ui.model.Context",required:true,expectedTypes:["com.sap.vocabularies.UI.v1.DataField"]}),b=ee({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),y=ee({type:"string"}),P=ee({type:"string"}),x=ee({type:"object",validate:function(e){if(e.displayMode&&!["Value","Description","ValueDescription","DescriptionValue"].includes(e.displayMode)){throw new Error(`Allowed value ${e.displayMode} for displayMode does not match`)}return e}}),m(M=(F=function(e){ae(t,e);t._getMultiInputSettings=function e(i,a){var r;const{collectionPath:n,itemDataModelObjectPath:o}=t._getPathStructure(i);const l=`{path:'${n}', templateShareable: false}`;const s=`{path:'${n}', parameters: {$$ownRequest : true}, templateShareable: false}`;const u=i.targetObject;const c=R(u)?u.$target:u;const d=(r=c.annotations.Common)===null||r===void 0?void 0:r.Text;const p=L(i);const f=d?K(Q(d,p)):k(o,a,true);return{text:f,collectionBindingDisplay:l,collectionBindingEdit:s,key:k(o,a,true)}};t._getPathStructure=function e(t){var i,a;let r="";const n=(i=t.contextLocation)!==null&&i!==void 0&&i.targetEntitySet?t.contextLocation.targetEntitySet:t.startingEntitySet;const o=[];const l=((a=t.contextLocation)===null||a===void 0?void 0:a.navigationProperties)||[];for(const e of t.navigationProperties){if(t.contextLocation===undefined||!t.contextLocation.navigationProperties.some(t=>t.fullyQualifiedName===e.fullyQualifiedName)){o.push(e.name);l.push(e)}if(n.navigationPropertyBinding.hasOwnProperty(e.name)){if(H(e)){break}}}r=`${o.join("/")}`;const s=Object.assign({},t);if(s.contextLocation){s.contextLocation.navigationProperties=l}return{collectionPath:r,itemDataModelObjectPath:s}};t.computeFieldGroupIds=function e(t,i){if(!i){return""}const a=i.getSideEffectsService();const r=a.computeFieldGroupIds(t.targetEntityType.fullyQualifiedName,t.targetObject.fullyQualifiedName);const n=r.join(",");return n===""?undefined:n};function t(i,a,n){var o;o=e.call(this,i)||this;te(o,"idPrefix",B,ie(o));te(o,"vhIdPrefix",O,ie(o));te(o,"metaPath",V,ie(o));te(o,"contextPath",$,ie(o));te(o,"ariaLabelledBy",E,ie(o));te(o,"key",I,ie(o));te(o,"formatOptions",w,ie(o));let l=r.getInvolvedDataModelObjects(o.metaPath,o.contextPath);const s=r.convertMetaModelContext(o.metaPath);let u;if(_(s.Value)){u=s.Value.path}o.visible=j(l,o.formatOptions);if(u&&u.length>0){l=G(l,u)}const c=S(l);const d=T(l,{ignoreTargetCollection:true,authorizeUnresolvable:true});const p=T(l);const f=A(d._type==="Unresolvable",N(U(q(p)),p),p);o.editMode=o.formatOptions.displayOnly==="true"?"Display":K(A(W(c,f,X.IsEditable),J("Editable"),J("Display")));o.displayMode=z(l);const m=t._getMultiInputSettings(l,o.formatOptions);o.text=m.text;o.collection=o.editMode==="Display"?m.collectionBindingDisplay:m.collectionBindingEdit;o.key=m.key;o.fieldGroupIds=t.computeFieldGroupIds(l,n.appComponent);return o}D=t;var i=t.prototype;i.getTemplate=function e(){const t=r.getInvolvedDataModelObjects(this.metaPath,this.contextPath);const i=t.targetObject;const a=G(t,i.Value.path);const n=this.idPrefix?o.generate([this.idPrefix,"MultiValueField"]):undefined;const l=d.valueHelpProperty(this.metaPath);const s=this.metaPath.getModel().createBindingContext(l,this.metaPath);const c=f.generateID(undefined,this.vhIdPrefix,u.getRelativePropertyPath(s,{context:this.contextPath}),C(a)??"");const p=d.computeLabelText(i.Value,{context:this.metaPath});const m=`MVFieldRuntime.handleChange($controller, $event)`;const h=`MVFieldRuntime.onValidateFieldGroup($controller, $event)`;return Y`
		<mdc:MultiValueField
				xmlns:mdc="sap.ui.mdc"
				core:require="{MVFieldRuntime:'sap/fe/macros/multiValueField/MultiValueFieldRuntime'}"
				delegate="{name: 'sap/fe/macros/multiValueField/MultiValueFieldDelegate'}"
				id="${n}"
				items="${this.collection}"
				display="${this.displayMode}"
				width="100%"
				editMode="${this.editMode}"
				fieldHelp="${c}"
				ariaLabelledBy = "${this.ariaLabelledBy}"
				showEmptyIndicator = "${this.formatOptions.showEmptyIndicator}"
				label = "${p}"
				change="${m}"
				fieldGroupIds="${this.fieldGroupIds}"
				validateFieldGroup="${h}"
		>
		<mdcField:MultiValueFieldItem xmlns:mdcField="sap.ui.mdc.field" key="${this.key}" description="${this.text}" />
		</mdc:MultiValueField>`};return t}(e),B=ne(F.prototype,"idPrefix",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),O=ne(F.prototype,"vhIdPrefix",[g],{configurable:true,enumerable:true,writable:true,initializer:function(){return"FieldValueHelp"}}),V=ne(F.prototype,"metaPath",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),$=ne(F.prototype,"contextPath",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),E=ne(F.prototype,"ariaLabelledBy",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),I=ne(F.prototype,"key",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),w=ne(F.prototype,"formatOptions",[x],{configurable:true,enumerable:true,writable:true,initializer:function(){return{}}}),F))||M);D=le;return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueFieldDelegate-dbg", ["sap/fe/core/CommonUtils", "sap/ui/mdc/field/MultiValueFieldDelegate"], function (CommonUtils, MdcMultiValueFieldDelegate) {
  "use strict";

  const MultiValueFieldDelegate = Object.assign({}, MdcMultiValueFieldDelegate);
  MultiValueFieldDelegate.updateItems = function (oPayload, aConditions, oControl) {
    const oListBinding = oControl.getBinding("items");
    if (oListBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
      const oBindingInfo = oControl.getBindingInfo("items");
      // check if conditions are added, removed or changed
      const oTemplate = oBindingInfo.template;
      const oKeyBindingInfo = oTemplate.getBindingInfo("key");
      const oDescriptionBindingInfo = oTemplate.getBindingInfo("description");
      const sKeyPath = oKeyBindingInfo && oKeyBindingInfo.parts[0].path;
      const sDescriptionPath = oDescriptionBindingInfo && oDescriptionBindingInfo.parts && oDescriptionBindingInfo.parts[0] && oDescriptionBindingInfo.parts[0].path;
      const aContexts = oListBinding.getCurrentContexts();
      const aDataToAdd = [];
      const oController = CommonUtils.getTargetView(oControl).getController();

      // Contexts to delete
      const aNewKeys = aConditions.map(function (oCondition) {
        return oCondition.values[0];
      });
      const aOldKeys = aContexts.map(function (oContext) {
        return oContext.getProperty(sKeyPath);
      });
      const aModificationPromises = [];
      for (let i = 0; i < aContexts.length; i++) {
        const oDeleteContext = aContexts[i];
        if (!aNewKeys.includes(oDeleteContext.getProperty(sKeyPath))) {
          aModificationPromises.push(
          //sideEffects will not be requested
          oController.editFlow.deleteMultipleDocuments([oDeleteContext], {
            controlId: oControl.getId(),
            noDialog: true,
            requestSideEffects: false
          }));
        }
      }
      // data to add
      aConditions.forEach(oCondition => {
        if (!aOldKeys.includes(oCondition.values[0])) {
          const oItem = {};
          if (sKeyPath && sKeyPath.indexOf("/") === -1) {
            // we do not manage to create on a sub entity of the 1:n navigation
            oItem[sKeyPath] = oCondition.values[0];
            if (sDescriptionPath && sDescriptionPath.indexOf("/") === -1 && sDescriptionPath !== sKeyPath) {
              oItem[sDescriptionPath] = oCondition.values[1];
            }
            aDataToAdd.push(oItem);
          }
        }
      });
      if (aDataToAdd.length) {
        aModificationPromises.push(
        //sideEffects will not be requested
        oController.editFlow.createMultipleDocuments(oListBinding, aDataToAdd, true, false, undefined, undefined, false));
      }
      return Promise.all(aModificationPromises);
    }
  };
  return MultiValueFieldDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueFieldDelegate", ["sap/fe/core/CommonUtils","sap/ui/mdc/field/MultiValueFieldDelegate"],function(e,t){"use strict";const n=Object.assign({},t);n.updateItems=function(t,n,s){const i=s.getBinding("items");if(i.isA("sap.ui.model.odata.v4.ODataListBinding")){const t=s.getBindingInfo("items");const o=t.template;const a=o.getBindingInfo("key");const l=o.getBindingInfo("description");const u=a&&a.parts[0].path;const c=l&&l.parts&&l.parts[0]&&l.parts[0].path;const r=i.getCurrentContexts();const f=[];const d=e.getTargetView(s).getController();const p=n.map(function(e){return e.values[0]});const g=r.map(function(e){return e.getProperty(u)});const m=[];for(let e=0;e<r.length;e++){const t=r[e];if(!p.includes(t.getProperty(u))){m.push(d.editFlow.deleteMultipleDocuments([t],{controlId:s.getId(),noDialog:true,requestSideEffects:false}))}}n.forEach(e=>{if(!g.includes(e.values[0])){const t={};if(u&&u.indexOf("/")===-1){t[u]=e.values[0];if(c&&c.indexOf("/")===-1&&c!==u){t[c]=e.values[1]}f.push(t)}}});if(f.length){m.push(d.editFlow.createMultipleDocuments(i,f,true,false,undefined,undefined,false))}return Promise.all(m)}};return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueFieldRuntime-dbg", ["../field/FieldRuntime"], function (FieldRuntime) {
  "use strict";

  const multiValueFieldRuntime = {
    /**
     * Handler for the change event.
     *
     * Used to request SideEffects based on the validity of change.
     *
     * @param controller The controller of the page containing the field
     * @param event The event object passed by the change event
     */
    handleChange: function (controller, event) {
      const sourcefield = event.getSource(),
        isTransient = sourcefield.getBindingContext().isTransient(),
        isValueResolved = event.getParameter("promise") || Promise.resolve();

      // Use the FE Controller instead of the extensionAPI to access internal FE controllers
      const feController = FieldRuntime._getExtensionController(controller);
      feController.editFlow.syncTask(isValueResolved);

      // if the context is transient, it means the request would fail anyway as the record does not exist in reality
      if (isTransient) {
        return;
      }
      feController._sideEffects.handleFieldChange(event, true, isValueResolved);
    },
    /**
     * Handler for the validateFieldGroup event.
     *
     * @param controller The controller of the page containing the field
     * @param event The event object passed by the validateFieldGroup event
     */
    onValidateFieldGroup: async function (controller, event) {
      const feController = FieldRuntime._getExtensionController(controller);
      await feController._sideEffects.handleFieldGroupChange(event);
    }
  };
  return multiValueFieldRuntime;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/multiValueField/MultiValueFieldRuntime", ["../field/FieldRuntime"],function(e){"use strict";const n={handleChange:function(n,t){const i=t.getSource(),o=i.getBindingContext().isTransient(),s=t.getParameter("promise")||Promise.resolve();const r=e._getExtensionController(n);r.editFlow.syncTask(s);if(o){return}r._sideEffects.handleFieldChange(t,true,s)},onValidateFieldGroup:async function(n,t){const i=e._getExtensionController(n);await i._sideEffects.handleFieldGroupChange(t)}};return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/paginator/Paginator.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper"], function (BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, BindingToolkit, StableIdHelper) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var _exports = {};
  var generate = StableIdHelper.generate;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let PaginatorBlock = (
  /**
   * Building block used to create a paginator control.
   *
   * Usage example:
   * <pre>
   * &lt;macro:Paginator /&gt;
   * </pre>
   *
   * @hideconstructor
   * @public
   * @since 1.94.0
   */
  _dec = defineBuildingBlock({
    name: "Paginator",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.m.HBox"]
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(PaginatorBlock, _BuildingBlockBase);
    function PaginatorBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    _exports = PaginatorBlock;
    var _proto = PaginatorBlock.prototype;
    /**
     * The building block template function.
     *
     * @returns An XML-based string
     */
    _proto.getTemplate = function getTemplate() {
      // The model name is hardcoded, as this building block can also be used transparently by application developers
      const navUpEnabledExpression = pathInModel("/navUpEnabled", "paginator");
      const navDownEnabledExpression = pathInModel("/navDownEnabled", "paginator");
      const visibleExpression = or(navUpEnabledExpression, navDownEnabledExpression);
      const navUpTooltipExpression = pathInModel("T_PAGINATOR_CONTROL_PAGINATOR_TOOLTIP_UP", "sap.fe.i18n");
      const navDownTooltipExpression = pathInModel("T_PAGINATOR_CONTROL_PAGINATOR_TOOLTIP_DOWN", "sap.fe.i18n");
      return xml`
			<m:HBox displayInline="true" id="${this.id}" visible="${visibleExpression}">
				<uxap:ObjectPageHeaderActionButton
					xmlns:uxap="sap.uxap"
					id="${generate([this.id, "previousItem"])}"
					enabled="${navUpEnabledExpression}"
					tooltip="${navUpTooltipExpression}"
					icon="sap-icon://navigation-up-arrow"
					press=".paginator.updateCurrentContext(-1)"
					type="Transparent"
					importance="High"
				/>
				<uxap:ObjectPageHeaderActionButton
					xmlns:uxap="sap.uxap"
					id="${generate([this.id, "nextItem"])}"
					enabled="${navDownEnabledExpression}"
					tooltip="${navDownTooltipExpression}"
					icon="sap-icon://navigation-down-arrow"
					press=".paginator.updateCurrentContext(1)"
					type="Transparent"
					importance="High"
				/>
			</m:HBox>`;
    };
    return PaginatorBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  })), _class2)) || _class);
  _exports = PaginatorBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/paginator/Paginator.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper"],function(e,r,i,t,n){"use strict";var a,o,l,u,s;var c={};var p=n.generate;var d=t.pathInModel;var f=t.or;var b=i.xml;var g=r.defineBuildingBlock;var v=r.blockAttribute;function m(e,r,i,t){if(!i)return;Object.defineProperty(e,r,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(t):void 0})}function O(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function h(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;B(e,r)}function B(e,r){B=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,i){r.__proto__=i;return r};return B(e,r)}function T(e,r,i,t,n){var a={};Object.keys(t).forEach(function(e){a[e]=t[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,t){return t(e,r,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function y(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let P=(a=g({name:"Paginator",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.m.HBox"]}),o=v({type:"string",isPublic:true}),a(l=(u=function(e){h(r,e);function r(){var r;for(var i=arguments.length,t=new Array(i),n=0;n<i;n++){t[n]=arguments[n]}r=e.call(this,...t)||this;m(r,"id",s,O(r));return r}c=r;var i=r.prototype;i.getTemplate=function e(){const r=d("/navUpEnabled","paginator");const i=d("/navDownEnabled","paginator");const t=f(r,i);const n=d("T_PAGINATOR_CONTROL_PAGINATOR_TOOLTIP_UP","sap.fe.i18n");const a=d("T_PAGINATOR_CONTROL_PAGINATOR_TOOLTIP_DOWN","sap.fe.i18n");return b`
			<m:HBox displayInline="true" id="${this.id}" visible="${t}">
				<uxap:ObjectPageHeaderActionButton
					xmlns:uxap="sap.uxap"
					id="${p([this.id,"previousItem"])}"
					enabled="${r}"
					tooltip="${n}"
					icon="sap-icon://navigation-up-arrow"
					press=".paginator.updateCurrentContext(-1)"
					type="Transparent"
					importance="High"
				/>
				<uxap:ObjectPageHeaderActionButton
					xmlns:uxap="sap.uxap"
					id="${p([this.id,"nextItem"])}"
					enabled="${i}"
					tooltip="${a}"
					icon="sap-icon://navigation-down-arrow"
					press=".paginator.updateCurrentContext(1)"
					type="Transparent"
					importance="High"
				/>
			</m:HBox>`};return r}(e),s=T(u.prototype,"id",[o],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),u))||l);c=P;return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/quickView/QuickView.block-dbg", ["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/SemanticObjectHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"], function (MetaModelConverter, BindingToolkit, TypeGuards, SemanticObjectHelper, FieldTemplating, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var _exports = {};
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var isUsedInNavigationWithQuickViewFacets = FieldTemplating.isUsedInNavigationWithQuickViewFacets;
  var getPropertyWithSemanticObject = FieldTemplating.getPropertyWithSemanticObject;
  var getDataModelObjectPathForValue = FieldTemplating.getDataModelObjectPathForValue;
  var getSemanticObjectUnavailableActions = SemanticObjectHelper.getSemanticObjectUnavailableActions;
  var getSemanticObjects = SemanticObjectHelper.getSemanticObjects;
  var getSemanticObjectMappings = SemanticObjectHelper.getSemanticObjectMappings;
  var getDynamicPathFromSemanticObject = SemanticObjectHelper.getDynamicPathFromSemanticObject;
  var isProperty = TypeGuards.isProperty;
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var compileExpression = BindingToolkit.compileExpression;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let QuickViewBlock = (_dec = defineBuildingBlock({
    name: "QuickView",
    namespace: "sap.fe.macros",
    designtime: "sap/fe/macros/quickView/QuickView.designtime"
  }), _dec2 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["Property"],
    expectedAnnotationTypes: ["com.sap.vocabularies.UI.v1.DataField", "com.sap.vocabularies.UI.v1.DataFieldWithUrl", "com.sap.vocabularies.UI.v1.DataFieldForAnnotation", "com.sap.vocabularies.UI.v1.DataPointType"]
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "EntityType", "Singleton"]
  }), _dec4 = blockAttribute({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(QuickViewBlock, _BuildingBlockBase);
    /**
     * Metadata path to the dataField.
     * This property is usually a metadataContext pointing to a DataField having
     * $Type of DataField, DataFieldWithUrl, DataFieldForAnnotation, DataFieldForAction, DataFieldForIntentBasedNavigation, DataFieldWithNavigationPath, or DataPointType.
     * But it can also be a Property with $kind="Property"
     */
    /**
     * Metadata path to the entity set
     */
    /**
     * Custom semantic object
     */
    /**
     * Get the relative path to the entity which quick view Facets we want to display.
     *
     * @param propertyDataModelPath
     * @returns A path if it exists.
     */
    QuickViewBlock.getRelativePathToQuickViewEntity = function getRelativePathToQuickViewEntity(propertyDataModelPath) {
      let relativePathToQuickViewEntity;
      const quickViewNavProp = this.getNavPropToQuickViewEntity(propertyDataModelPath);
      if (quickViewNavProp) {
        relativePathToQuickViewEntity = propertyDataModelPath.navigationProperties.reduce((relativPath, navProp) => {
          var _propertyDataModelPat;
          if (navProp.name !== quickViewNavProp.name && !((_propertyDataModelPat = propertyDataModelPath.contextLocation) !== null && _propertyDataModelPat !== void 0 && _propertyDataModelPat.navigationProperties.find(contextNavProp => contextNavProp.name === navProp.name))) {
            // we keep only navProperties that are part of the relativePath and not the one for quickViewNavProp
            return `${relativPath}${navProp.name}/`;
          }
          return relativPath;
        }, "");
        relativePathToQuickViewEntity = `${relativePathToQuickViewEntity}${quickViewNavProp.name}`;
      }
      return relativePathToQuickViewEntity;
    }

    /**
     * Get the semanticObject compile biding from metadata and a map to the qualifiers.
     *
     * @param propertyWithSemanticObject The property that holds semanticObject annotataions if it exists
     * @returns An object containing semanticObjectList and qualifierMap
     */;
    QuickViewBlock.getSemanticObjectsForPayloadAndQualifierMap = function getSemanticObjectsForPayloadAndQualifierMap(propertyWithSemanticObject) {
      const qualifierMap = {};
      const semanticObjectsList = [];
      if (propertyWithSemanticObject !== undefined) {
        for (const semanticObject of getSemanticObjects(propertyWithSemanticObject)) {
          const compiledSemanticObject = compileExpression(getExpressionFromAnnotation(semanticObject));
          // this should not happen, but we make sure not to add twice the semanticObject otherwise the mdcLink crashes
          if (compiledSemanticObject && !semanticObjectsList.includes(compiledSemanticObject)) {
            qualifierMap[semanticObject.qualifier || ""] = compiledSemanticObject;
            semanticObjectsList.push(compiledSemanticObject);
          }
        }
      }
      return {
        semanticObjectsList,
        qualifierMap
      };
    }

    /**
     * Get the semanticObjectMappings from metadata in the payload expected structure.
     *
     * @param propertyWithSemanticObject
     * @param qualifierMap
     * @returns A payload structure for semanticObjectMappings
     */;
    QuickViewBlock.getSemanticObjectMappingsForPayload = function getSemanticObjectMappingsForPayload(propertyWithSemanticObject, qualifierMap) {
      const semanticObjectMappings = [];
      if (propertyWithSemanticObject !== undefined) {
        for (const semanticObjectMapping of getSemanticObjectMappings(propertyWithSemanticObject)) {
          const correspondingSemanticObject = qualifierMap[semanticObjectMapping.qualifier || ""];
          if (correspondingSemanticObject) {
            semanticObjectMappings.push({
              semanticObject: correspondingSemanticObject,
              items: semanticObjectMapping.map(semanticObjectMappingType => {
                return {
                  key: semanticObjectMappingType.LocalProperty.value,
                  value: semanticObjectMappingType.SemanticObjectProperty.valueOf()
                };
              })
            });
          }
        }
      }
      return semanticObjectMappings;
    }

    /**
     * Get the semanticObjectUnavailableActions from metadata in the payload expected structure.
     *
     * @param propertyWithSemanticObject
     * @param qualifierMap
     * @returns A payload structure for semanticObjectUnavailableActions
     */;
    QuickViewBlock.getSemanticObjectUnavailableActionsForPayload = function getSemanticObjectUnavailableActionsForPayload(propertyWithSemanticObject, qualifierMap) {
      const semanticObjectUnavailableActions = [];
      if (propertyWithSemanticObject !== undefined) {
        for (const unavailableActionAnnotation of getSemanticObjectUnavailableActions(propertyWithSemanticObject)) {
          const correspondingSemanticObject = qualifierMap[unavailableActionAnnotation.qualifier || ""];
          if (correspondingSemanticObject) {
            semanticObjectUnavailableActions.push({
              semanticObject: correspondingSemanticObject,
              actions: unavailableActionAnnotation.map(unavailableAction => unavailableAction)
            });
          }
        }
      }
      return semanticObjectUnavailableActions;
    }

    /**
     * Add customObject(s) to the semanticObject list for the payload if it exists.
     *
     * @param semanticObjectsList
     * @param customSemanticObject
     */;
    QuickViewBlock.addCustomSemanticObjectToSemanticObjectListForPayload = function addCustomSemanticObjectToSemanticObjectListForPayload(semanticObjectsList, customSemanticObject) {
      if (customSemanticObject) {
        // the custom semantic objects are either a single string/key to custom data or a stringified array
        if (!customSemanticObject.startsWith("[")) {
          // customSemanticObject = "semanticObject" | "{pathInModel}"
          if (!semanticObjectsList.includes(customSemanticObject)) {
            semanticObjectsList.push(customSemanticObject);
          }
        } else {
          // customSemanticObject = '["semanticObject1","semanticObject2"]'
          for (const semanticObject of JSON.parse(customSemanticObject)) {
            if (!semanticObjectsList.includes(semanticObject)) {
              semanticObjectsList.push(semanticObject);
            }
          }
        }
      }
    }

    /**
     * Get the navigationProperty to an entity with QuickViewFacets that can be linked to the property.
     *
     * @param propertyDataModelPath
     * @returns A navigation property if it exists.
     */;
    QuickViewBlock.getNavPropToQuickViewEntity = function getNavPropToQuickViewEntity(propertyDataModelPath) {
      var _propertyDataModelPat2;
      //TODO we should investigate to put this code as common with FieldTemplating.isUsedInNavigationWithQuickViewFacets
      const property = propertyDataModelPath.targetObject;
      const navigationProperties = propertyDataModelPath.targetEntityType.navigationProperties;
      let quickViewNavProp = navigationProperties.find(navProp => {
        return navProp.referentialConstraint.some(referentialConstraint => {
          var _navProp$targetType$a;
          return referentialConstraint.sourceProperty === property.name && ((_navProp$targetType$a = navProp.targetType.annotations.UI) === null || _navProp$targetType$a === void 0 ? void 0 : _navProp$targetType$a.QuickViewFacets);
        });
      });
      if (!quickViewNavProp && ((_propertyDataModelPat2 = propertyDataModelPath.contextLocation) === null || _propertyDataModelPat2 === void 0 ? void 0 : _propertyDataModelPat2.targetEntitySet) !== propertyDataModelPath.targetEntitySet) {
        var _propertyDataModelPat3, _propertyDataModelPat4;
        const semanticKeys = ((_propertyDataModelPat3 = propertyDataModelPath.targetEntityType.annotations.Common) === null || _propertyDataModelPat3 === void 0 ? void 0 : _propertyDataModelPat3.SemanticKey) || [];
        const isPropertySemanticKey = semanticKeys.some(function (semanticKey) {
          return semanticKey.$target.name === property.name;
        });
        const lastNavProp = propertyDataModelPath.navigationProperties[propertyDataModelPath.navigationProperties.length - 1];
        if ((isPropertySemanticKey || property.isKey) && (_propertyDataModelPat4 = propertyDataModelPath.targetEntityType.annotations.UI) !== null && _propertyDataModelPat4 !== void 0 && _propertyDataModelPat4.QuickViewFacets) {
          quickViewNavProp = lastNavProp;
        }
      }
      return quickViewNavProp;
    };
    function QuickViewBlock(props, controlConfiguration, settings) {
      var _metaPathDataModelPat, _metaPathDataModelPat2, _metaPathDataModelPat3, _valueProperty$annota, _valueProperty$annota2;
      var _this;
      _this = _BuildingBlockBase.call(this, props, controlConfiguration, settings) || this;
      _initializerDefineProperty(_this, "dataField", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "semanticObject", _descriptor3, _assertThisInitialized(_this));
      let metaPathDataModelPath = MetaModelConverter.getInvolvedDataModelObjects(_this.dataField, _this.contextPath);
      const valueDataModelPath = getDataModelObjectPathForValue(metaPathDataModelPath);
      metaPathDataModelPath = valueDataModelPath || metaPathDataModelPath;
      const valueProperty = isProperty(metaPathDataModelPath.targetObject) ? metaPathDataModelPath.targetObject : undefined;
      const hasQuickViewFacets = valueProperty && isUsedInNavigationWithQuickViewFacets(metaPathDataModelPath, valueProperty) ? "true" : "false";
      const relativePathToQuickViewEntity = QuickViewBlock.getRelativePathToQuickViewEntity(metaPathDataModelPath);
      // it can be that there is no targetEntityset for the context location so we use the targetObjectFullyQualifiedName
      const absoluteContextPath = ((_metaPathDataModelPat = metaPathDataModelPath.contextLocation) === null || _metaPathDataModelPat === void 0 ? void 0 : (_metaPathDataModelPat2 = _metaPathDataModelPat.targetEntitySet) === null || _metaPathDataModelPat2 === void 0 ? void 0 : _metaPathDataModelPat2.name) ?? ((_metaPathDataModelPat3 = metaPathDataModelPath.contextLocation) === null || _metaPathDataModelPat3 === void 0 ? void 0 : _metaPathDataModelPat3.targetObject).fullyQualifiedName;
      const quickViewEntity = relativePathToQuickViewEntity ? `/${absoluteContextPath}/${relativePathToQuickViewEntity}` : undefined;
      const navigationPath = relativePathToQuickViewEntity ? compileExpression(pathInModel(relativePathToQuickViewEntity)) : undefined;
      const propertyWithSemanticObject = getPropertyWithSemanticObject(metaPathDataModelPath);
      let mainSemanticObject;
      const {
        semanticObjectsList,
        qualifierMap
      } = QuickViewBlock.getSemanticObjectsForPayloadAndQualifierMap(propertyWithSemanticObject);
      const semanticObjectMappings = QuickViewBlock.getSemanticObjectMappingsForPayload(propertyWithSemanticObject, qualifierMap);
      const semanticObjectUnavailableActions = QuickViewBlock.getSemanticObjectUnavailableActionsForPayload(propertyWithSemanticObject, qualifierMap);
      if (isProperty(propertyWithSemanticObject)) {
        // TODO why should this be different for navigation: when we add this some links disappear
        mainSemanticObject = qualifierMap.main || qualifierMap[""];
      }
      QuickViewBlock.addCustomSemanticObjectToSemanticObjectListForPayload(semanticObjectsList, _this.semanticObject);
      const propertyPathLabel = (valueProperty === null || valueProperty === void 0 ? void 0 : (_valueProperty$annota = valueProperty.annotations.Common) === null || _valueProperty$annota === void 0 ? void 0 : (_valueProperty$annota2 = _valueProperty$annota.Label) === null || _valueProperty$annota2 === void 0 ? void 0 : _valueProperty$annota2.valueOf()) || "";
      _this.payload = {
        semanticObjects: semanticObjectsList,
        entityType: quickViewEntity,
        semanticObjectUnavailableActions: semanticObjectUnavailableActions,
        semanticObjectMappings: semanticObjectMappings,
        mainSemanticObject: mainSemanticObject,
        propertyPathLabel: propertyPathLabel,
        dataField: quickViewEntity === undefined ? _this.dataField.getPath() : undefined,
        contact: undefined,
        navigationPath: navigationPath,
        hasQuickViewFacets: hasQuickViewFacets
      };
      return _this;
    }

    /**
     * The building block template function.
     *
     * @returns An XML-based string with the definition of the field control
     */
    _exports = QuickViewBlock;
    var _proto = QuickViewBlock.prototype;
    _proto.getTemplate = function getTemplate() {
      const delegateConfiguration = {
        name: "sap/fe/macros/quickView/QuickViewDelegate",
        payload: this.payload
      };
      return xml`<mdc:Link xmlns:mdc="sap.ui.mdc" delegate="${JSON.stringify(delegateConfiguration)}">
			${this.writeCustomData(this.payload.semanticObjects)}
			</mdc:Link>`;
    };
    _proto.writeCustomData = function writeCustomData(semanticObjects) {
      let customData = "";
      for (const semanticObject of semanticObjects) {
        const dynamicPath = getDynamicPathFromSemanticObject(semanticObject);
        if (dynamicPath) {
          customData = `${customData}
				<core:CustomData xmlns:core="sap.ui.core" key="${dynamicPath}" value="${semanticObject}" />`;
        }
      }
      if (customData.length) {
        return `<mdc:customData>
				${customData}
			</mdc:customData>`;
      }
      return "";
    };
    return QuickViewBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataField", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "semanticObject", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = QuickViewBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/quickView/QuickView.block", ["sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/SemanticObjectHelper","sap/fe/macros/field/FieldTemplating","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"],function(e,t,i,n,a,o,r,c){"use strict";var s,l,u,d,p,f,m,v,b;var g={};var y=c.xml;var O=r.defineBuildingBlock;var j=r.blockAttribute;var h=a.isUsedInNavigationWithQuickViewFacets;var P=a.getPropertyWithSemanticObject;var k=a.getDataModelObjectPathForValue;var S=n.getSemanticObjectUnavailableActions;var w=n.getSemanticObjects;var F=n.getSemanticObjectMappings;var T=n.getDynamicPathFromSemanticObject;var x=i.isProperty;var E=t.pathInModel;var D=t.getExpressionFromAnnotation;var Q=t.compileExpression;function V(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function B(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function L(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;M(e,t)}function M(e,t){M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return M(e,t)}function $(e,t,i,n,a){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},o);if(a&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(a):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function U(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let z=(s=O({name:"QuickView",namespace:"sap.fe.macros",designtime:"sap/fe/macros/quickView/QuickView.designtime"}),l=j({type:"sap.ui.model.Context",required:true,expectedTypes:["Property"],expectedAnnotationTypes:["com.sap.vocabularies.UI.v1.DataField","com.sap.vocabularies.UI.v1.DataFieldWithUrl","com.sap.vocabularies.UI.v1.DataFieldForAnnotation","com.sap.vocabularies.UI.v1.DataPointType"]}),u=j({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty","EntityType","Singleton"]}),d=j({type:"string"}),s(p=(f=function(t){L(i,t);i.getRelativePathToQuickViewEntity=function e(t){let i;const n=this.getNavPropToQuickViewEntity(t);if(n){i=t.navigationProperties.reduce((e,i)=>{var a;if(i.name!==n.name&&!((a=t.contextLocation)!==null&&a!==void 0&&a.navigationProperties.find(e=>e.name===i.name))){return`${e}${i.name}/`}return e},"");i=`${i}${n.name}`}return i};i.getSemanticObjectsForPayloadAndQualifierMap=function e(t){const i={};const n=[];if(t!==undefined){for(const e of w(t)){const t=Q(D(e));if(t&&!n.includes(t)){i[e.qualifier||""]=t;n.push(t)}}}return{semanticObjectsList:n,qualifierMap:i}};i.getSemanticObjectMappingsForPayload=function e(t,i){const n=[];if(t!==undefined){for(const e of F(t)){const t=i[e.qualifier||""];if(t){n.push({semanticObject:t,items:e.map(e=>({key:e.LocalProperty.value,value:e.SemanticObjectProperty.valueOf()}))})}}}return n};i.getSemanticObjectUnavailableActionsForPayload=function e(t,i){const n=[];if(t!==undefined){for(const e of S(t)){const t=i[e.qualifier||""];if(t){n.push({semanticObject:t,actions:e.map(e=>e)})}}}return n};i.addCustomSemanticObjectToSemanticObjectListForPayload=function e(t,i){if(i){if(!i.startsWith("[")){if(!t.includes(i)){t.push(i)}}else{for(const e of JSON.parse(i)){if(!t.includes(e)){t.push(e)}}}}};i.getNavPropToQuickViewEntity=function e(t){var i;const n=t.targetObject;const a=t.targetEntityType.navigationProperties;let o=a.find(e=>e.referentialConstraint.some(t=>{var i;return t.sourceProperty===n.name&&((i=e.targetType.annotations.UI)===null||i===void 0?void 0:i.QuickViewFacets)}));if(!o&&((i=t.contextLocation)===null||i===void 0?void 0:i.targetEntitySet)!==t.targetEntitySet){var r,c;const e=((r=t.targetEntityType.annotations.Common)===null||r===void 0?void 0:r.SemanticKey)||[];const i=e.some(function(e){return e.$target.name===n.name});const a=t.navigationProperties[t.navigationProperties.length-1];if((i||n.isKey)&&(c=t.targetEntityType.annotations.UI)!==null&&c!==void 0&&c.QuickViewFacets){o=a}}return o};function i(n,a,o){var r,c,s,l,u;var d;d=t.call(this,n,a,o)||this;V(d,"dataField",m,B(d));V(d,"contextPath",v,B(d));V(d,"semanticObject",b,B(d));let p=e.getInvolvedDataModelObjects(d.dataField,d.contextPath);const f=k(p);p=f||p;const g=x(p.targetObject)?p.targetObject:undefined;const y=g&&h(p,g)?"true":"false";const O=i.getRelativePathToQuickViewEntity(p);const j=((r=p.contextLocation)===null||r===void 0?void 0:(c=r.targetEntitySet)===null||c===void 0?void 0:c.name)??((s=p.contextLocation)===null||s===void 0?void 0:s.targetObject).fullyQualifiedName;const S=O?`/${j}/${O}`:undefined;const w=O?Q(E(O)):undefined;const F=P(p);let T;const{semanticObjectsList:D,qualifierMap:L}=i.getSemanticObjectsForPayloadAndQualifierMap(F);const M=i.getSemanticObjectMappingsForPayload(F,L);const $=i.getSemanticObjectUnavailableActionsForPayload(F,L);if(x(F)){T=L.main||L[""]}i.addCustomSemanticObjectToSemanticObjectListForPayload(D,d.semanticObject);const U=(g===null||g===void 0?void 0:(l=g.annotations.Common)===null||l===void 0?void 0:(u=l.Label)===null||u===void 0?void 0:u.valueOf())||"";d.payload={semanticObjects:D,entityType:S,semanticObjectUnavailableActions:$,semanticObjectMappings:M,mainSemanticObject:T,propertyPathLabel:U,dataField:S===undefined?d.dataField.getPath():undefined,contact:undefined,navigationPath:w,hasQuickViewFacets:y};return d}g=i;var n=i.prototype;n.getTemplate=function e(){const t={name:"sap/fe/macros/quickView/QuickViewDelegate",payload:this.payload};return y`<mdc:Link xmlns:mdc="sap.ui.mdc" delegate="${JSON.stringify(t)}">
			${this.writeCustomData(this.payload.semanticObjects)}
			</mdc:Link>`};n.writeCustomData=function e(t){let i="";for(const e of t){const t=T(e);if(t){i=`${i}\n\t\t\t\t<core:CustomData xmlns:core="sap.ui.core" key="${t}" value="${e}" />`}}if(i.length){return`<mdc:customData>\n\t\t\t\t${i}\n\t\t\t</mdc:customData>`}return""};return i}(o),m=$(f.prototype,"dataField",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),v=$(f.prototype,"contextPath",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),b=$(f.prototype,"semanticObject",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),f))||p);g=z;return g},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/quickView/QuickViewDelegate-dbg", ["sap/base/Log", "sap/base/util/deepClone", "sap/base/util/deepEqual", "sap/base/util/isPlainObject", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/KeepAliveHelper", "sap/fe/core/helpers/ToES6Promise", "sap/fe/core/templating/SemanticObjectHelper", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/field/FieldRuntime", "sap/fe/navigation/SelectionVariant", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/mdc/link/Factory", "sap/ui/mdc/link/LinkItem", "sap/ui/mdc/link/SemanticObjectMapping", "sap/ui/mdc/link/SemanticObjectMappingItem", "sap/ui/mdc/link/SemanticObjectUnavailableAction", "sap/ui/mdc/LinkDelegate", "sap/ui/model/json/JSONModel"], function (Log, deepClone, deepEqual, isPlainObject, CommonUtils, KeepAliveHelper, toES6Promise, SemanticObjectHelper, FieldHelper, FieldRuntime, SelectionVariant, Core, Fragment, XMLPreprocessor, XMLTemplateProcessor, Factory, LinkItem, SemanticObjectMapping, SemanticObjectMappingItem, SemanticObjectUnavailableAction, LinkDelegate, JSONModel) {
  "use strict";

  var getDynamicPathFromSemanticObject = SemanticObjectHelper.getDynamicPathFromSemanticObject;
  const SimpleLinkDelegate = Object.assign({}, LinkDelegate);
  const CONSTANTS = {
    iLinksShownInPopup: 3,
    sapmLink: "sap.m.Link",
    sapuimdcLink: "sap.ui.mdc.Link",
    sapuimdclinkLinkItem: "sap.ui.mdc.link.LinkItem",
    sapmObjectIdentifier: "sap.m.ObjectIdentifier",
    sapmObjectStatus: "sap.m.ObjectStatus"
  };
  SimpleLinkDelegate.getConstants = function () {
    return CONSTANTS;
  };
  /**
   * This will return an array of the SemanticObjects as strings given by the payload.
   *
   * @private
   * @param oPayload The payload defined by the application
   * @param oMetaModel The ODataMetaModel received from the Link
   * @returns The context pointing to the current EntityType.
   */
  SimpleLinkDelegate._getEntityType = function (oPayload, oMetaModel) {
    if (oMetaModel) {
      return oMetaModel.createBindingContext(oPayload.entityType);
    } else {
      return undefined;
    }
  };
  /**
   * This will return an array of the SemanticObjects as strings given by the payload.
   *
   * @private
   * @param oPayload The payload defined by the application
   * @param oMetaModel The ODataMetaModel received from the Link
   * @returns A model containing the payload information
   */
  SimpleLinkDelegate._getSemanticsModel = function (oPayload, oMetaModel) {
    if (oMetaModel) {
      return new JSONModel(oPayload);
    } else {
      return undefined;
    }
  };
  /**
   * This will return an array of the SemanticObjects as strings given by the payload.
   *
   * @private
   * @param oPayload The payload defined by the application
   * @param oMetaModel The ODataMetaModel received from the Link
   * @returns An array containing SemanticObjects based of the payload
   */
  SimpleLinkDelegate._getDataField = function (oPayload, oMetaModel) {
    return oMetaModel.createBindingContext(oPayload.dataField);
  };
  /**
   * This will return an array of the SemanticObjects as strings given by the payload.
   *
   * @private
   * @param oPayload The payload defined by the application
   * @param oMetaModel The ODataMetaModel received from the Link
   * @returns Ancontaining SemanticObjects based of the payload
   */
  SimpleLinkDelegate._getContact = function (oPayload, oMetaModel) {
    return oMetaModel.createBindingContext(oPayload.contact);
  };
  SimpleLinkDelegate.fnTemplateFragment = function () {
    let sFragmentName, titleLinkHref;
    const oFragmentModel = {};
    let oPayloadToUse;

    // payload has been modified by fetching Semantic Objects names with path
    if (this.resolvedpayload) {
      oPayloadToUse = this.resolvedpayload;
    } else {
      oPayloadToUse = this.payload;
    }
    if (oPayloadToUse && !oPayloadToUse.LinkId) {
      oPayloadToUse.LinkId = this.oControl && this.oControl.isA(CONSTANTS.sapuimdcLink) ? this.oControl.getId() : undefined;
    }
    if (oPayloadToUse.LinkId) {
      titleLinkHref = this.oControl.getModel("$sapuimdcLink").getProperty("/titleLinkHref");
      oPayloadToUse.titlelink = titleLinkHref;
    }
    const oSemanticsModel = this._getSemanticsModel(oPayloadToUse, this.oMetaModel);
    this.semanticModel = oSemanticsModel;
    if (oPayloadToUse.entityType && this._getEntityType(oPayloadToUse, this.oMetaModel)) {
      sFragmentName = "sap.fe.macros.quickView.fragments.EntityQuickView";
      oFragmentModel.bindingContexts = {
        entityType: this._getEntityType(oPayloadToUse, this.oMetaModel),
        semantic: oSemanticsModel.createBindingContext("/")
      };
      oFragmentModel.models = {
        entityType: this.oMetaModel,
        semantic: oSemanticsModel
      };
    } else if (oPayloadToUse.dataField && this._getDataField(oPayloadToUse, this.oMetaModel)) {
      sFragmentName = "sap.fe.macros.quickView.fragments.DataFieldQuickView";
      oFragmentModel.bindingContexts = {
        dataField: this._getDataField(oPayloadToUse, this.oMetaModel),
        semantic: oSemanticsModel.createBindingContext("/")
      };
      oFragmentModel.models = {
        dataField: this.oMetaModel,
        semantic: oSemanticsModel
      };
    }
    oFragmentModel.models.entitySet = this.oMetaModel;
    oFragmentModel.models.metaModel = this.oMetaModel;
    if (this.oControl && this.oControl.getModel("viewData")) {
      oFragmentModel.models.viewData = this.oControl.getModel("viewData");
      oFragmentModel.bindingContexts.viewData = this.oControl.getModel("viewData").createBindingContext("/");
    }
    const oFragment = XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment");
    return Promise.resolve(XMLPreprocessor.process(oFragment, {
      name: sFragmentName
    }, oFragmentModel)).then(_internalFragment => {
      return Fragment.load({
        definition: _internalFragment,
        controller: this
      });
    }).then(oPopoverContent => {
      if (oPopoverContent) {
        if (oFragmentModel.models && oFragmentModel.models.semantic) {
          oPopoverContent.setModel(oFragmentModel.models.semantic, "semantic");
          oPopoverContent.setBindingContext(oFragmentModel.bindingContexts.semantic, "semantic");
        }
        if (oFragmentModel.bindingContexts && oFragmentModel.bindingContexts.entityType) {
          oPopoverContent.setModel(oFragmentModel.models.entityType, "entityType");
          oPopoverContent.setBindingContext(oFragmentModel.bindingContexts.entityType, "entityType");
        }
      }
      this.resolvedpayload = undefined;
      return oPopoverContent;
    });
  };
  SimpleLinkDelegate.fetchAdditionalContent = function (oPayLoad, oMdcLinkControl) {
    var _oPayLoad$navigationP;
    this.oControl = oMdcLinkControl;
    const aNavigateRegexpMatch = oPayLoad === null || oPayLoad === void 0 ? void 0 : (_oPayLoad$navigationP = oPayLoad.navigationPath) === null || _oPayLoad$navigationP === void 0 ? void 0 : _oPayLoad$navigationP.match(/{(.*?)}/);
    const oBindingContext = aNavigateRegexpMatch && aNavigateRegexpMatch.length > 1 && aNavigateRegexpMatch[1] ? oMdcLinkControl.getModel().bindContext(aNavigateRegexpMatch[1], oMdcLinkControl.getBindingContext(), {
      $$ownRequest: true
    }) : null;
    this.payload = oPayLoad;
    if (oMdcLinkControl && oMdcLinkControl.isA(CONSTANTS.sapuimdcLink)) {
      this.oMetaModel = oMdcLinkControl.getModel().getMetaModel();
      return this.fnTemplateFragment().then(function (oPopoverContent) {
        if (oBindingContext) {
          oPopoverContent.setBindingContext(oBindingContext.getBoundContext());
        }
        return [oPopoverContent];
      });
    }
    return Promise.resolve([]);
  };
  SimpleLinkDelegate._fetchLinkCustomData = function (_oLink) {
    if (_oLink.getParent() && _oLink.isA(CONSTANTS.sapuimdcLink) && (_oLink.getParent().isA(CONSTANTS.sapmLink) || _oLink.getParent().isA(CONSTANTS.sapmObjectIdentifier) || _oLink.getParent().isA(CONSTANTS.sapmObjectStatus))) {
      return _oLink.getCustomData();
    } else {
      return undefined;
    }
  };
  /**
   * Fetches the relevant {@link sap.ui.mdc.link.LinkItem} for the Link and returns them.
   *
   * @public
   * @param oPayload The Payload of the Link given by the application
   * @param oBindingContext The ContextObject of the Link
   * @param oInfoLog The InfoLog of the Link
   * @returns Once resolved an array of {@link sap.ui.mdc.link.LinkItem} is returned
   */
  SimpleLinkDelegate.fetchLinkItems = function (oPayload, oBindingContext, oInfoLog) {
    if (oBindingContext && SimpleLinkDelegate._getSemanticObjects(oPayload)) {
      const oContextObject = oBindingContext.getObject();
      if (oInfoLog) {
        oInfoLog.initialize(SimpleLinkDelegate._getSemanticObjects(oPayload));
      }
      const _oLinkCustomData = this._link && this._fetchLinkCustomData(this._link);
      this.aLinkCustomData = _oLinkCustomData && this._fetchLinkCustomData(this._link).map(function (linkItem) {
        return linkItem.mProperties.value;
      });
      const oSemanticAttributesResolved = SimpleLinkDelegate._calculateSemanticAttributes(oContextObject, oPayload, oInfoLog, this._link);
      const oSemanticAttributes = oSemanticAttributesResolved.results;
      const oPayloadResolved = oSemanticAttributesResolved.payload;
      return SimpleLinkDelegate._retrieveNavigationTargets("", oSemanticAttributes, oPayloadResolved, oInfoLog, this._link).then(function (aLinks) {
        return aLinks.length === 0 ? null : aLinks;
      });
    } else {
      return Promise.resolve(null);
    }
  };

  /**
   * Find the type of the link.
   *
   * @param payload The payload of the mdc link.
   * @param aLinkItems Links returned by call to mdc _retrieveUnmodifiedLinkItems.
   * @returns The type of the link as defined by mdc.
   */
  SimpleLinkDelegate._findLinkType = function (payload, aLinkItems) {
    let nLinkType, oLinkItem;
    if ((aLinkItems === null || aLinkItems === void 0 ? void 0 : aLinkItems.length) === 1) {
      oLinkItem = new LinkItem({
        text: aLinkItems[0].getText(),
        href: aLinkItems[0].getHref()
      });
      nLinkType = payload.hasQuickViewFacets === "false" ? 1 : 2;
    } else if (payload.hasQuickViewFacets === "false" && (aLinkItems === null || aLinkItems === void 0 ? void 0 : aLinkItems.length) === 0) {
      nLinkType = 0;
    } else {
      nLinkType = 2;
    }
    return {
      linkType: nLinkType,
      linkItem: oLinkItem
    };
  };
  SimpleLinkDelegate.fetchLinkType = async function (oPayload, oLink) {
    const _oCurrentLink = oLink;
    const _oPayload = Object.assign({}, oPayload);
    const oDefaultInitialType = {
      initialType: {
        type: 2,
        directLink: undefined
      },
      runtimeType: undefined
    };
    // clean appStateKeyMap storage
    if (!this.appStateKeyMap) {
      this.appStateKeyMap = {};
    }
    try {
      var _oPayload$contact;
      if (_oPayload !== null && _oPayload !== void 0 && _oPayload.semanticObjects) {
        this._link = oLink;
        let aLinkItems = await _oCurrentLink._retrieveUnmodifiedLinkItems();
        if (aLinkItems.length === 1) {
          // This is the direct navigation use case so we need to perform the appropriate checks / transformations
          aLinkItems = await _oCurrentLink.retrieveLinkItems();
        }
        const _LinkType = SimpleLinkDelegate._findLinkType(_oPayload, aLinkItems);
        return {
          initialType: {
            type: _LinkType.linkType,
            directLink: _LinkType.linkItem ? _LinkType.linkItem : undefined
          },
          runtimeType: undefined
        };
      } else if ((_oPayload === null || _oPayload === void 0 ? void 0 : (_oPayload$contact = _oPayload.contact) === null || _oPayload$contact === void 0 ? void 0 : _oPayload$contact.length) > 0) {
        return oDefaultInitialType;
      } else if (_oPayload !== null && _oPayload !== void 0 && _oPayload.entityType && _oPayload !== null && _oPayload !== void 0 && _oPayload.navigationPath) {
        return oDefaultInitialType;
      }
      throw new Error("no payload or semanticObjects found");
    } catch (oError) {
      Log.error("Error in SimpleLinkDelegate.fetchLinkType: ", oError);
    }
  };
  SimpleLinkDelegate._RemoveTitleLinkFromTargets = function (_aLinkItems, _bTitleHasLink, _aTitleLink) {
    let _sTitleLinkHref, _oMDCLink;
    let bResult = false;
    if (_bTitleHasLink && _aTitleLink && _aTitleLink[0]) {
      let linkIsPrimaryAction, _sLinkIntentWithoutParameters;
      const _sTitleIntent = _aTitleLink[0].intent.split("?")[0];
      if (_aLinkItems && _aLinkItems[0]) {
        _sLinkIntentWithoutParameters = `#${_aLinkItems[0].getProperty("key")}`;
        linkIsPrimaryAction = _sTitleIntent === _sLinkIntentWithoutParameters;
        if (linkIsPrimaryAction) {
          _sTitleLinkHref = _aLinkItems[0].getProperty("href");
          this.payload.titlelinkhref = _sTitleLinkHref;
          if (_aLinkItems[0].isA(CONSTANTS.sapuimdclinkLinkItem)) {
            _oMDCLink = _aLinkItems[0].getParent();
            _oMDCLink.getModel("$sapuimdcLink").setProperty("/titleLinkHref", _sTitleLinkHref);
            const aMLinkItems = _oMDCLink.getModel("$sapuimdcLink").getProperty("/linkItems").filter(function (oLinkItem) {
              if (`#${oLinkItem.key}` !== _sLinkIntentWithoutParameters) {
                return oLinkItem;
              }
            });
            if (aMLinkItems && aMLinkItems.length > 0) {
              _oMDCLink.getModel("$sapuimdcLink").setProperty("/linkItems/", aMLinkItems);
            }
            bResult = true;
          }
        }
      }
    }
    return bResult;
  };
  SimpleLinkDelegate._IsSemanticObjectDynamic = function (aNewLinkCustomData, oThis) {
    if (aNewLinkCustomData && oThis.aLinkCustomData) {
      return oThis.aLinkCustomData.filter(function (link) {
        return aNewLinkCustomData.filter(function (otherLink) {
          return otherLink !== link;
        }).length > 0;
      }).length > 0;
    } else {
      return false;
    }
  };
  SimpleLinkDelegate._getLineContext = function (oView, mLineContext) {
    if (!mLineContext) {
      if (oView.getAggregation("content")[0] && oView.getAggregation("content")[0].getBindingContext()) {
        return oView.getAggregation("content")[0].getBindingContext();
      }
    }
    return mLineContext;
  };
  SimpleLinkDelegate._setFilterContextUrlForSelectionVariant = function (oView, oSelectionVariant, oNavigationService) {
    if (oView.getViewData().entitySet && oSelectionVariant) {
      const sContextUrl = oNavigationService.constructContextUrl(oView.getViewData().entitySet, oView.getModel());
      oSelectionVariant.setFilterContextUrl(sContextUrl);
    }
    return oSelectionVariant;
  };
  SimpleLinkDelegate._setObjectMappings = function (sSemanticObject, oParams, aSemanticObjectMappings, oSelectionVariant) {
    let hasChanged = false;
    const modifiedSelectionVariant = new SelectionVariant(oSelectionVariant.toJSONObject());
    // if semanticObjectMappings has items with dynamic semanticObjects we need to resolve them using oParams
    aSemanticObjectMappings.forEach(function (mapping) {
      let mappingSemanticObject = mapping.semanticObject;
      const mappingSemanticObjectPath = getDynamicPathFromSemanticObject(mapping.semanticObject);
      if (mappingSemanticObjectPath && oParams[mappingSemanticObjectPath]) {
        mappingSemanticObject = oParams[mappingSemanticObjectPath];
      }
      if (sSemanticObject === mappingSemanticObject) {
        const oMappings = mapping.items;
        for (const i in oMappings) {
          const sLocalProperty = oMappings[i].key;
          const sSemanticObjectProperty = oMappings[i].value;
          if (sLocalProperty !== sSemanticObjectProperty) {
            if (oParams[sLocalProperty]) {
              modifiedSelectionVariant.removeParameter(sSemanticObjectProperty);
              modifiedSelectionVariant.removeSelectOption(sSemanticObjectProperty);
              modifiedSelectionVariant.renameParameter(sLocalProperty, sSemanticObjectProperty);
              modifiedSelectionVariant.renameSelectOption(sLocalProperty, sSemanticObjectProperty);
              oParams[sSemanticObjectProperty] = oParams[sLocalProperty];
              delete oParams[sLocalProperty];
              hasChanged = true;
            }
            // We remove the parameter as there is no value

            // The local property comes from a navigation property
            else if (sLocalProperty.split("/").length > 1) {
              // find the property to be removed
              const propertyToBeRemoved = sLocalProperty.split("/").slice(-1)[0];
              // The navigation property has no value
              if (!oParams[propertyToBeRemoved]) {
                delete oParams[propertyToBeRemoved];
                modifiedSelectionVariant.removeParameter(propertyToBeRemoved);
                modifiedSelectionVariant.removeSelectOption(propertyToBeRemoved);
              } else if (propertyToBeRemoved !== sSemanticObjectProperty) {
                // The navigation property has a value and properties names are different
                modifiedSelectionVariant.renameParameter(propertyToBeRemoved, sSemanticObjectProperty);
                modifiedSelectionVariant.renameSelectOption(propertyToBeRemoved, sSemanticObjectProperty);
                oParams[sSemanticObjectProperty] = oParams[propertyToBeRemoved];
                delete oParams[propertyToBeRemoved];
              }
            } else {
              delete oParams[sLocalProperty];
              modifiedSelectionVariant.removeParameter(sSemanticObjectProperty);
              modifiedSelectionVariant.removeSelectOption(sSemanticObjectProperty);
            }
          }
        }
      }
    });
    return {
      params: oParams,
      hasChanged,
      selectionVariant: modifiedSelectionVariant
    };
  };

  /**
   * Call getAppStateKeyAndUrlParameters in navigation service and cache its results.
   *
   * @param _this The instance of quickviewdelegate.
   * @param navigationService The navigation service.
   * @param selectionVariant The current selection variant.
   * @param semanticObject The current semanticObject.
   */
  SimpleLinkDelegate._getAppStateKeyAndUrlParameters = async function (_this, navigationService, selectionVariant, semanticObject) {
    var _this$appStateKeyMap$;
    let aValues = [];

    // check if default cache contains already the unmodified selectionVariant
    if (deepEqual(selectionVariant, (_this$appStateKeyMap$ = _this.appStateKeyMap[""]) === null || _this$appStateKeyMap$ === void 0 ? void 0 : _this$appStateKeyMap$.selectionVariant)) {
      const defaultCache = _this.appStateKeyMap[""];
      return [defaultCache.semanticAttributes, defaultCache.appstatekey];
    }
    // update url parameters because there is a change in selection variant
    if (_this.appStateKeyMap[`${semanticObject}`] === undefined || !deepEqual(_this.appStateKeyMap[`${semanticObject}`].selectionVariant, selectionVariant)) {
      aValues = await toES6Promise(navigationService.getAppStateKeyAndUrlParameters(selectionVariant.toJSONString()));
      _this.appStateKeyMap[`${semanticObject}`] = {
        semanticAttributes: aValues[0],
        appstatekey: aValues[1],
        selectionVariant: selectionVariant
      };
    } else {
      const cache = _this.appStateKeyMap[`${semanticObject}`];
      aValues = [cache.semanticAttributes, cache.appstatekey];
    }
    return aValues;
  };
  SimpleLinkDelegate._getLinkItemWithNewParameter = async function (_that, _bTitleHasLink, _aTitleLink, _oLinkItem, _oShellServices, _oPayload, _oParams, _sAppStateKey, _oSelectionVariant, _oNavigationService) {
    return _oShellServices.expandCompactHash(_oLinkItem.getHref()).then(async function (sHash) {
      const oShellHash = _oShellServices.parseShellHash(sHash);
      const params = Object.assign({}, _oParams);
      const {
        params: oNewParams,
        hasChanged,
        selectionVariant: newSelectionVariant
      } = SimpleLinkDelegate._setObjectMappings(oShellHash.semanticObject, params, _oPayload.semanticObjectMappings, _oSelectionVariant);
      if (hasChanged) {
        const aValues = await SimpleLinkDelegate._getAppStateKeyAndUrlParameters(_that, _oNavigationService, newSelectionVariant, oShellHash.semanticObject);
        _sAppStateKey = aValues[1];
      }
      const oNewShellHash = {
        target: {
          semanticObject: oShellHash.semanticObject,
          action: oShellHash.action
        },
        params: oNewParams,
        appStateKey: _sAppStateKey
      };
      delete oNewShellHash.params["sap-xapp-state"];
      _oLinkItem.setHref(`#${_oShellServices.constructShellHash(oNewShellHash)}`);
      _oPayload.aSemanticLinks.push(_oLinkItem.getHref());
      // The link is removed from the target list because the title link has same target.
      return SimpleLinkDelegate._RemoveTitleLinkFromTargets.bind(_that)([_oLinkItem], _bTitleHasLink, _aTitleLink);
    });
  };
  SimpleLinkDelegate._removeEmptyLinkItem = function (aLinkItems) {
    return aLinkItems.filter(linkItem => {
      return linkItem !== undefined;
    });
  };
  /**
   * Enables the modification of LinkItems before the popover opens. This enables additional parameters
   * to be added to the link.
   *
   * @param oPayload The payload of the Link given by the application
   * @param oBindingContext The binding context of the Link
   * @param aLinkItems The LinkItems of the Link that can be modified
   * @returns Once resolved an array of {@link sap.ui.mdc.link.LinkItem} is returned
   */
  SimpleLinkDelegate.modifyLinkItems = async function (oPayload, oBindingContext, aLinkItems) {
    if (aLinkItems.length !== 0) {
      this.payload = oPayload;
      const oLink = aLinkItems[0].getParent();
      const oView = CommonUtils.getTargetView(oLink);
      const oAppComponent = CommonUtils.getAppComponent(oView);
      const primaryActionIsActive = await FieldHelper.checkPrimaryActions(oPayload, true, oAppComponent);
      const aTitleLink = primaryActionIsActive.titleLink;
      const bTitleHasLink = primaryActionIsActive.hasTitleLink;
      const oShellServices = oAppComponent.getShellServices();
      if (!oShellServices.hasUShell()) {
        Log.error("QuickViewDelegate: Cannot retrieve the shell services");
        return Promise.reject();
      }
      const oMetaModel = oView.getModel().getMetaModel();
      let mLineContext = oLink.getBindingContext();
      const oTargetInfo = {
        semanticObject: oPayload.mainSemanticObject,
        action: ""
      };
      try {
        const aNewLinkCustomData = oLink && this._fetchLinkCustomData(oLink).map(function (linkItem) {
          return linkItem.mProperties.value;
        });
        // check if all link items in this.aLinkCustomData are also present in aNewLinkCustomData
        if (SimpleLinkDelegate._IsSemanticObjectDynamic(aNewLinkCustomData, this)) {
          // if the customData changed there are different LinkItems to display
          const oSemanticAttributesResolved = SimpleLinkDelegate._calculateSemanticAttributes(oBindingContext.getObject(), oPayload, undefined, this._link);
          const oSemanticAttributes = oSemanticAttributesResolved.results;
          const oPayloadResolved = oSemanticAttributesResolved.payload;
          aLinkItems = await SimpleLinkDelegate._retrieveNavigationTargets("", oSemanticAttributes, oPayloadResolved, undefined, this._link);
        }
        const oNavigationService = oAppComponent.getNavigationService();
        const oController = oView.getController();
        let oSelectionVariant;
        let mLineContextData;
        mLineContext = SimpleLinkDelegate._getLineContext(oView, mLineContext);
        const sMetaPath = oMetaModel.getMetaPath(mLineContext.getPath());
        mLineContextData = oController._intentBasedNavigation.removeSensitiveData(mLineContext.getObject(), sMetaPath);
        mLineContextData = oController._intentBasedNavigation.prepareContextForExternalNavigation(mLineContextData, mLineContext);
        oSelectionVariant = oNavigationService.mixAttributesAndSelectionVariant(mLineContextData.semanticAttributes, {});
        oTargetInfo.propertiesWithoutConflict = mLineContextData.propertiesWithoutConflict;
        //TO modify the selection variant from the Extension API
        oController.intentBasedNavigation.adaptNavigationContext(oSelectionVariant, oTargetInfo);
        SimpleLinkDelegate._removeTechnicalParameters(oSelectionVariant);
        oSelectionVariant = SimpleLinkDelegate._setFilterContextUrlForSelectionVariant(oView, oSelectionVariant, oNavigationService);
        const aValues = await SimpleLinkDelegate._getAppStateKeyAndUrlParameters(this, oNavigationService, oSelectionVariant, "");
        const oParams = aValues[0];
        const appStateKey = aValues[1];
        let titleLinktoBeRemove;
        oPayload.aSemanticLinks = [];
        aLinkItems = SimpleLinkDelegate._removeEmptyLinkItem(aLinkItems);
        for (const index in aLinkItems) {
          titleLinktoBeRemove = await SimpleLinkDelegate._getLinkItemWithNewParameter(this, bTitleHasLink, aTitleLink, aLinkItems[index], oShellServices, oPayload, oParams, appStateKey, oSelectionVariant, oNavigationService);
          // Do not remove the link if there is only one direct target application
          if (titleLinktoBeRemove === true && aLinkItems.length > 1) {
            aLinkItems[index] = undefined;
          }
        }
        return SimpleLinkDelegate._removeEmptyLinkItem(aLinkItems);
      } catch (oError) {
        Log.error("Error while getting the navigation service", oError);
        return undefined;
      }
    } else {
      return aLinkItems;
    }
  };
  SimpleLinkDelegate.beforeNavigationCallback = function (oPayload, oEvent) {
    const oSource = oEvent.getSource(),
      sHref = oEvent.getParameter("href"),
      oURLParsing = Factory.getService("URLParsing"),
      oHash = sHref && oURLParsing.parseShellHash(sHref);
    KeepAliveHelper.storeControlRefreshStrategyForHash(oSource, oHash);
    return Promise.resolve(true);
  };
  SimpleLinkDelegate._removeTechnicalParameters = function (oSelectionVariant) {
    oSelectionVariant.removeSelectOption("@odata.context");
    oSelectionVariant.removeSelectOption("@odata.metadataEtag");
    oSelectionVariant.removeSelectOption("SAP__Messages");
  };
  SimpleLinkDelegate._getSemanticObjectCustomDataValue = function (aLinkCustomData, oSemanticObjectsResolved) {
    let sPropertyName, sCustomDataValue;
    for (let iCustomDataCount = 0; iCustomDataCount < aLinkCustomData.length; iCustomDataCount++) {
      sPropertyName = aLinkCustomData[iCustomDataCount].getKey();
      sCustomDataValue = aLinkCustomData[iCustomDataCount].getValue();
      oSemanticObjectsResolved[sPropertyName] = {
        value: sCustomDataValue
      };
    }
  };

  /**
   * Check the semantic object name if it is dynamic or not.
   *
   * @private
   * @param pathOrValue The semantic object path or name
   * @returns True if semantic object is dynamic
   */
  SimpleLinkDelegate._isDynamicPath = function (pathOrValue) {
    if (pathOrValue && pathOrValue.indexOf("{") === 0 && pathOrValue.indexOf("}") === pathOrValue.length - 1) {
      return true;
    } else {
      return false;
    }
  };

  /**
   * Update the payload with semantic object values from custom data of Link.
   *
   * @private
   * @param payload The payload of the mdc link.
   * @param newPayload The new updated payload.
   * @param semanticObjectName The semantic object name resolved.
   */
  SimpleLinkDelegate._updatePayloadWithResolvedSemanticObjectValue = function (payload, newPayload, semanticObjectName) {
    var _newPayload$semanticO;
    if (SimpleLinkDelegate._isDynamicPath(payload.mainSemanticObject)) {
      if (semanticObjectName) {
        newPayload.mainSemanticObject = semanticObjectName;
      } else {
        // no value from Custom Data, so removing mainSemanticObject
        newPayload.mainSemanticObject = undefined;
      }
    }
    switch (typeof semanticObjectName) {
      case "string":
        (_newPayload$semanticO = newPayload.semanticObjectsResolved) === null || _newPayload$semanticO === void 0 ? void 0 : _newPayload$semanticO.push(semanticObjectName);
        newPayload.semanticObjects.push(semanticObjectName);
        break;
      case "object":
        for (const j in semanticObjectName) {
          var _newPayload$semanticO2;
          (_newPayload$semanticO2 = newPayload.semanticObjectsResolved) === null || _newPayload$semanticO2 === void 0 ? void 0 : _newPayload$semanticO2.push(semanticObjectName[j]);
          newPayload.semanticObjects.push(semanticObjectName[j]);
        }
        break;
      default:
    }
  };
  SimpleLinkDelegate._createNewPayloadWithDynamicSemanticObjectsResolved = function (payload, semanticObjectsResolved, newPayload) {
    let semanticObjectName, tmpPropertyName;
    for (const i in payload.semanticObjects) {
      semanticObjectName = payload.semanticObjects[i];
      if (SimpleLinkDelegate._isDynamicPath(semanticObjectName)) {
        tmpPropertyName = semanticObjectName.substr(1, semanticObjectName.indexOf("}") - 1);
        semanticObjectName = semanticObjectsResolved[tmpPropertyName].value;
        SimpleLinkDelegate._updatePayloadWithResolvedSemanticObjectValue(payload, newPayload, semanticObjectName);
      } else {
        newPayload.semanticObjects.push(semanticObjectName);
      }
    }
  };

  /**
   * Update the semantic object name from the resolved value for the mappings attributes.
   *
   * @private
   * @param mdcPayload The payload given by the application.
   * @param mdcPayloadWithDynamicSemanticObjectsResolved The payload with the resolved value for the semantic object name.
   * @param newPayload The new updated payload.
   */
  SimpleLinkDelegate._updateSemanticObjectsForMappings = function (mdcPayload, mdcPayloadWithDynamicSemanticObjectsResolved, newPayload) {
    // update the semantic object name from the resolved ones in the semantic object mappings.
    mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.forEach(function (semanticObjectMapping) {
      if (semanticObjectMapping.semanticObject && SimpleLinkDelegate._isDynamicPath(semanticObjectMapping.semanticObject)) {
        semanticObjectMapping.semanticObject = newPayload.semanticObjects[mdcPayload.semanticObjects.indexOf(semanticObjectMapping.semanticObject)];
      }
    });
  };

  /**
   * Update the semantic object name from the resolved value for the unavailable actions.
   *
   * @private
   * @param mdcPayload The payload given by the application.
   * @param mdcPayloadSemanticObjectUnavailableActions The unavailable actions given by the application.
   * @param mdcPayloadWithDynamicSemanticObjectsResolved The updated payload with the resolved value for the semantic object name for the unavailable actions.
   */
  SimpleLinkDelegate._updateSemanticObjectsUnavailableActions = function (mdcPayload, mdcPayloadSemanticObjectUnavailableActions, mdcPayloadWithDynamicSemanticObjectsResolved) {
    let _Index;
    mdcPayloadSemanticObjectUnavailableActions.forEach(function (semanticObjectUnavailableAction) {
      // Dynamic SemanticObject has an unavailable action
      if (semanticObjectUnavailableAction !== null && semanticObjectUnavailableAction !== void 0 && semanticObjectUnavailableAction.semanticObject && SimpleLinkDelegate._isDynamicPath(semanticObjectUnavailableAction.semanticObject)) {
        _Index = mdcPayload.semanticObjects.findIndex(function (semanticObject) {
          return semanticObject === semanticObjectUnavailableAction.semanticObject;
        });
        if (_Index !== undefined) {
          // Get the SemanticObject name resolved to a value
          semanticObjectUnavailableAction.semanticObject = mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjects[_Index];
        }
      }
    });
  };

  /**
   * Update the semantic object name from the resolved value for the unavailable actions.
   *
   * @private
   * @param mdcPayload The updated payload with the information from custom data provided in the link.
   * @param mdcPayloadWithDynamicSemanticObjectsResolved The payload updated with resolved semantic objects names.
   */
  SimpleLinkDelegate._updateSemanticObjectsWithResolvedValue = function (mdcPayload, mdcPayloadWithDynamicSemanticObjectsResolved) {
    for (let newSemanticObjectsCount = 0; newSemanticObjectsCount < mdcPayload.semanticObjects.length; newSemanticObjectsCount++) {
      if (mdcPayloadWithDynamicSemanticObjectsResolved.mainSemanticObject === (mdcPayload.semanticObjectsResolved && mdcPayload.semanticObjectsResolved[newSemanticObjectsCount])) {
        mdcPayloadWithDynamicSemanticObjectsResolved.mainSemanticObject = mdcPayload.semanticObjects[newSemanticObjectsCount];
      }
      if (mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjects[newSemanticObjectsCount]) {
        mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjects[newSemanticObjectsCount] = mdcPayload.semanticObjects[newSemanticObjectsCount];
      } else {
        // no Custom Data value for a Semantic Object name with path
        mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjects.splice(newSemanticObjectsCount, 1);
      }
    }
  };

  /**
   * Remove empty semantic object mappings and if there is no semantic object name, link to it.
   *
   * @private
   * @param mdcPayloadWithDynamicSemanticObjectsResolved The payload used to check the mappings of the semantic objects.
   */
  SimpleLinkDelegate._removeEmptySemanticObjectsMappings = function (mdcPayloadWithDynamicSemanticObjectsResolved) {
    // remove undefined Semantic Object Mapping
    for (let mappingsCount = 0; mappingsCount < mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.length; mappingsCount++) {
      if (mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings[mappingsCount] && mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings[mappingsCount].semanticObject === undefined) {
        mdcPayloadWithDynamicSemanticObjectsResolved.semanticObjectMappings.splice(mappingsCount, 1);
      }
    }
  };
  SimpleLinkDelegate._setPayloadWithDynamicSemanticObjectsResolved = function (payload, newPayload) {
    let oPayloadWithDynamicSemanticObjectsResolved;
    if (newPayload.semanticObjectsResolved && newPayload.semanticObjectsResolved.length > 0) {
      oPayloadWithDynamicSemanticObjectsResolved = {
        entityType: payload.entityType,
        dataField: payload.dataField,
        contact: payload.contact,
        mainSemanticObject: payload.mainSemanticObject,
        navigationPath: payload.navigationPath,
        propertyPathLabel: payload.propertyPathLabel,
        semanticObjectMappings: deepClone(payload.semanticObjectMappings),
        semanticObjects: newPayload.semanticObjects
      };
      SimpleLinkDelegate._updateSemanticObjectsForMappings(payload, oPayloadWithDynamicSemanticObjectsResolved, newPayload);
      const _SemanticObjectUnavailableActions = deepClone(payload.semanticObjectUnavailableActions);
      SimpleLinkDelegate._updateSemanticObjectsUnavailableActions(payload, _SemanticObjectUnavailableActions, oPayloadWithDynamicSemanticObjectsResolved);
      oPayloadWithDynamicSemanticObjectsResolved.semanticObjectUnavailableActions = _SemanticObjectUnavailableActions;
      if (newPayload.mainSemanticObject) {
        oPayloadWithDynamicSemanticObjectsResolved.mainSemanticObject = newPayload.mainSemanticObject;
      } else {
        oPayloadWithDynamicSemanticObjectsResolved.mainSemanticObject = undefined;
      }
      SimpleLinkDelegate._updateSemanticObjectsWithResolvedValue(newPayload, oPayloadWithDynamicSemanticObjectsResolved);
      SimpleLinkDelegate._removeEmptySemanticObjectsMappings(oPayloadWithDynamicSemanticObjectsResolved);
      return oPayloadWithDynamicSemanticObjectsResolved;
    } else {
      return {};
    }
  };
  SimpleLinkDelegate._getPayloadWithDynamicSemanticObjectsResolved = function (payload, linkCustomData) {
    let oPayloadWithDynamicSemanticObjectsResolved;
    const oSemanticObjectsResolved = {};
    const newPayload = {
      semanticObjects: [],
      semanticObjectsResolved: [],
      semanticObjectMappings: []
    };
    if (payload.semanticObjects) {
      // sap.m.Link has custom data with Semantic Objects names resolved
      if (linkCustomData && linkCustomData.length > 0) {
        SimpleLinkDelegate._getSemanticObjectCustomDataValue(linkCustomData, oSemanticObjectsResolved);
        SimpleLinkDelegate._createNewPayloadWithDynamicSemanticObjectsResolved(payload, oSemanticObjectsResolved, newPayload);
        oPayloadWithDynamicSemanticObjectsResolved = SimpleLinkDelegate._setPayloadWithDynamicSemanticObjectsResolved(payload, newPayload);
        return oPayloadWithDynamicSemanticObjectsResolved;
      }
    } else {
      return undefined;
    }
  };
  SimpleLinkDelegate._updatePayloadWithSemanticAttributes = function (aSemanticObjects, oInfoLog, oContextObject, oResults, mSemanticObjectMappings) {
    aSemanticObjects.forEach(function (sSemanticObject) {
      if (oInfoLog) {
        oInfoLog.addContextObject(sSemanticObject, oContextObject);
      }
      oResults[sSemanticObject] = {};
      for (const sAttributeName in oContextObject) {
        let oAttribute = null,
          oTransformationAdditional = null;
        if (oInfoLog) {
          oAttribute = oInfoLog.getSemanticObjectAttribute(sSemanticObject, sAttributeName);
          if (!oAttribute) {
            oAttribute = oInfoLog.createAttributeStructure();
            oInfoLog.addSemanticObjectAttribute(sSemanticObject, sAttributeName, oAttribute);
          }
        }
        // Ignore undefined and null values
        if (oContextObject[sAttributeName] === undefined || oContextObject[sAttributeName] === null) {
          if (oAttribute) {
            oAttribute.transformations.push({
              value: undefined,
              description: "\u2139 Undefined and null values have been removed in SimpleLinkDelegate."
            });
          }
          continue;
        }
        // Ignore plain objects (BCP 1770496639)
        if (isPlainObject(oContextObject[sAttributeName])) {
          if (mSemanticObjectMappings && mSemanticObjectMappings[sSemanticObject]) {
            const aKeys = Object.keys(mSemanticObjectMappings[sSemanticObject]);
            let sNewAttributeNameMapped, sNewAttributeName, sValue, sKey;
            for (let index = 0; index < aKeys.length; index++) {
              sKey = aKeys[index];
              if (sKey.indexOf(sAttributeName) === 0) {
                sNewAttributeNameMapped = mSemanticObjectMappings[sSemanticObject][sKey];
                sNewAttributeName = sKey.split("/")[sKey.split("/").length - 1];
                sValue = oContextObject[sAttributeName][sNewAttributeName];
                if (sNewAttributeNameMapped && sNewAttributeName && sValue) {
                  oResults[sSemanticObject][sNewAttributeNameMapped] = sValue;
                }
              }
            }
          }
          if (oAttribute) {
            oAttribute.transformations.push({
              value: undefined,
              description: "\u2139 Plain objects has been removed in SimpleLinkDelegate."
            });
          }
          continue;
        }

        // Map the attribute name only if 'semanticObjectMapping' is defined.
        // Note: under defined 'semanticObjectMapping' we also mean an empty annotation or an annotation with empty record
        const sAttributeNameMapped = mSemanticObjectMappings && mSemanticObjectMappings[sSemanticObject] && mSemanticObjectMappings[sSemanticObject][sAttributeName] ? mSemanticObjectMappings[sSemanticObject][sAttributeName] : sAttributeName;
        if (oAttribute && sAttributeName !== sAttributeNameMapped) {
          oTransformationAdditional = {
            value: undefined,
            description: `\u2139 The attribute ${sAttributeName} has been renamed to ${sAttributeNameMapped} in SimpleLinkDelegate.`,
            reason: `\ud83d\udd34 A com.sap.vocabularies.Common.v1.SemanticObjectMapping annotation is defined for semantic object ${sSemanticObject} with source attribute ${sAttributeName} and target attribute ${sAttributeNameMapped}. You can modify the annotation if the mapping result is not what you expected.`
          };
        }

        // If more then one local property maps to the same target property (clash situation)
        // we take the value of the last property and write an error log
        if (oResults[sSemanticObject][sAttributeNameMapped]) {
          Log.error(`SimpleLinkDelegate: The attribute ${sAttributeName} can not be renamed to the attribute ${sAttributeNameMapped} due to a clash situation. This can lead to wrong navigation later on.`);
        }

        // Copy the value replacing the attribute name by semantic object name
        oResults[sSemanticObject][sAttributeNameMapped] = oContextObject[sAttributeName];
        if (oAttribute) {
          if (oTransformationAdditional) {
            oAttribute.transformations.push(oTransformationAdditional);
            const aAttributeNew = oInfoLog.createAttributeStructure();
            aAttributeNew.transformations.push({
              value: oContextObject[sAttributeName],
              description: `\u2139 The attribute ${sAttributeNameMapped} with the value ${oContextObject[sAttributeName]} has been added due to a mapping rule regarding the attribute ${sAttributeName} in SimpleLinkDelegate.`
            });
            oInfoLog.addSemanticObjectAttribute(sSemanticObject, sAttributeNameMapped, aAttributeNew);
          }
        }
      }
    });
  };

  /**
   * Checks which attributes of the ContextObject belong to which SemanticObject and maps them into a two dimensional array.
   *
   * @private
   * @param oContextObject The BindingContext of the SourceControl of the Link / of the Link itself if not set
   * @param oPayload The payload given by the application
   * @param oInfoLog The corresponding InfoLog of the Link
   * @param oLink The corresponding Link
   * @returns A two dimensional array which maps a given SemanticObject name together with a given attribute name to the value of that given attribute
   */
  SimpleLinkDelegate._calculateSemanticAttributes = function (oContextObject, oPayload, oInfoLog, oLink) {
    const aLinkCustomData = oLink && this._fetchLinkCustomData(oLink);
    const oPayloadWithDynamicSemanticObjectsResolved = SimpleLinkDelegate._getPayloadWithDynamicSemanticObjectsResolved(oPayload, aLinkCustomData);
    const oPayloadResolved = oPayloadWithDynamicSemanticObjectsResolved ? oPayloadWithDynamicSemanticObjectsResolved : oPayload;
    this.resolvedpayload = oPayloadWithDynamicSemanticObjectsResolved;
    const aSemanticObjects = SimpleLinkDelegate._getSemanticObjects(oPayloadResolved);
    const mSemanticObjectMappings = SimpleLinkDelegate._convertSemanticObjectMapping(SimpleLinkDelegate._getSemanticObjectMappings(oPayloadResolved));
    if (!aSemanticObjects.length) {
      return {
        payload: oPayloadResolved,
        results: {}
      };
    }
    const oResults = {};
    SimpleLinkDelegate._updatePayloadWithSemanticAttributes(aSemanticObjects, oInfoLog, oContextObject, oResults, mSemanticObjectMappings);
    return {
      payload: oPayloadResolved,
      results: oResults
    };
  };
  /**
   * Retrieves the actual targets for the navigation of the link. This uses the UShell loaded by the {@link sap.ui.mdc.link.Factory} to retrieve
   * the navigation targets from the FLP service.
   *
   * @private
   * @param sAppStateKey Key of the appstate (not used yet)
   * @param oSemanticAttributes The calculated by _calculateSemanticAttributes
   * @param oPayload The payload given by the application
   * @param oInfoLog The corresponding InfoLog of the Link
   * @param oLink The corresponding Link
   * @returns Resolving into availableAtions and ownNavigation containing an array of {@link sap.ui.mdc.link.LinkItem}
   */
  SimpleLinkDelegate._retrieveNavigationTargets = function (sAppStateKey, oSemanticAttributes, oPayload, oInfoLog, oLink) {
    if (!oPayload.semanticObjects) {
      return Promise.resolve([]);
    }
    const aSemanticObjects = oPayload.semanticObjects;
    const oNavigationTargets = {
      ownNavigation: undefined,
      availableActions: []
    };
    let iSuperiorActionLinksFound = 0;
    return Core.loadLibrary("sap.ui.fl", {
      async: true
    }).then(() => {
      return new Promise(resolve => {
        sap.ui.require(["sap/ui/fl/Utils"], async Utils => {
          const oAppComponent = Utils.getAppComponentForControl(oLink === undefined ? this.oControl : oLink);
          const oShellServices = oAppComponent ? oAppComponent.getShellServices() : null;
          if (!oShellServices) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            resolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);
          }
          if (!oShellServices.hasUShell()) {
            Log.error("SimpleLinkDelegate: Service 'CrossApplicationNavigation' or 'URLParsing' could not be obtained");
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            resolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);
          }
          const aParams = aSemanticObjects.map(function (sSemanticObject) {
            return [{
              semanticObject: sSemanticObject,
              params: oSemanticAttributes ? oSemanticAttributes[sSemanticObject] : undefined,
              appStateKey: sAppStateKey,
              sortResultsBy: "text"
            }];
          });
          try {
            const aLinks = await oShellServices.getLinks(aParams);
            let bHasLinks = false;
            for (let i = 0; i < aLinks.length; i++) {
              for (let j = 0; j < aLinks[i].length; j++) {
                if (aLinks[i][j].length > 0) {
                  bHasLinks = true;
                  break;
                }
                if (bHasLinks) {
                  break;
                }
              }
            }
            if (!aLinks || !aLinks.length || !bHasLinks) {
              // eslint-disable-next-line @typescript-eslint/ban-ts-comment
              // @ts-ignore
              resolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);
            }
            const aSemanticObjectUnavailableActions = SimpleLinkDelegate._getSemanticObjectUnavailableActions(oPayload);
            const oUnavailableActions = SimpleLinkDelegate._convertSemanticObjectUnavailableAction(aSemanticObjectUnavailableActions);
            let sCurrentHash = FieldRuntime._fnFixHashQueryString(oAppComponent.getShellServices().getHash());
            if (sCurrentHash) {
              // BCP 1770315035: we have to set the end-point '?' of action in order to avoid matching of "#SalesOrder-manage" in "#SalesOrder-manageFulfillment"
              sCurrentHash += "?";
            }
            const fnIsUnavailableAction = function (sSemanticObject, sAction) {
              return !!oUnavailableActions && !!oUnavailableActions[sSemanticObject] && oUnavailableActions[sSemanticObject].indexOf(sAction) > -1;
            };
            const fnAddLink = function (_oLink) {
              const oShellHash = oShellServices.parseShellHash(_oLink.intent);
              if (fnIsUnavailableAction(oShellHash.semanticObject, oShellHash.action)) {
                return;
              }
              const sHref = `#${oShellServices.constructShellHash({
                target: {
                  shellHash: _oLink.intent
                }
              })}`;
              if (_oLink.intent && _oLink.intent.indexOf(sCurrentHash) === 0) {
                // Prevent current app from being listed
                // NOTE: If the navigation target exists in
                // multiple contexts (~XXXX in hash) they will all be skipped
                oNavigationTargets.ownNavigation = new LinkItem({
                  href: sHref,
                  text: _oLink.text
                });
                return;
              }
              const oLinkItem = new LinkItem({
                // As the retrieveNavigationTargets method can be called several time we can not create the LinkItem instance with the same id
                key: oShellHash.semanticObject && oShellHash.action ? `${oShellHash.semanticObject}-${oShellHash.action}` : undefined,
                text: _oLink.text,
                description: undefined,
                href: sHref,
                // target: not supported yet
                icon: undefined,
                //_oLink.icon,
                initiallyVisible: _oLink.tags && _oLink.tags.indexOf("superiorAction") > -1
              });
              if (oLinkItem.getProperty("initiallyVisible")) {
                iSuperiorActionLinksFound++;
              }
              oNavigationTargets.availableActions.push(oLinkItem);
              if (oInfoLog) {
                oInfoLog.addSemanticObjectIntent(oShellHash.semanticObject, {
                  intent: oLinkItem.getHref(),
                  text: oLinkItem.getText()
                });
              }
            };
            for (let n = 0; n < aSemanticObjects.length; n++) {
              aLinks[n][0].forEach(fnAddLink);
            }
            if (iSuperiorActionLinksFound === 0) {
              for (let iLinkItemIndex = 0; iLinkItemIndex < oNavigationTargets.availableActions.length; iLinkItemIndex++) {
                if (iLinkItemIndex < this.getConstants().iLinksShownInPopup) {
                  oNavigationTargets.availableActions[iLinkItemIndex].setProperty("initiallyVisible", true);
                } else {
                  break;
                }
              }
            }
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            resolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);
          } catch (oError) {
            Log.error("SimpleLinkDelegate: '_retrieveNavigationTargets' failed executing getLinks method");
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            resolve(oNavigationTargets.availableActions, oNavigationTargets.ownNavigation);
          }
        });
      });
    });
  };
  SimpleLinkDelegate._getSemanticObjects = function (oPayload) {
    return oPayload.semanticObjects ? oPayload.semanticObjects : [];
  };
  SimpleLinkDelegate._getSemanticObjectUnavailableActions = function (oPayload) {
    const aSemanticObjectUnavailableActions = [];
    if (oPayload.semanticObjectUnavailableActions) {
      oPayload.semanticObjectUnavailableActions.forEach(function (oSemanticObjectUnavailableAction) {
        aSemanticObjectUnavailableActions.push(new SemanticObjectUnavailableAction({
          semanticObject: oSemanticObjectUnavailableAction.semanticObject,
          actions: oSemanticObjectUnavailableAction.actions
        }));
      });
    }
    return aSemanticObjectUnavailableActions;
  };

  /**
   * This will return an array of {@link sap.ui.mdc.link.SemanticObjectMapping} depending on the given payload.
   *
   * @private
   * @param oPayload The payload defined by the application
   * @returns An array of semantic object mappings.
   */
  SimpleLinkDelegate._getSemanticObjectMappings = function (oPayload) {
    const aSemanticObjectMappings = [];
    let aSemanticObjectMappingItems = [];
    if (oPayload.semanticObjectMappings) {
      oPayload.semanticObjectMappings.forEach(function (oSemanticObjectMapping) {
        aSemanticObjectMappingItems = [];
        if (oSemanticObjectMapping.items) {
          oSemanticObjectMapping.items.forEach(function (oSemanticObjectMappingItem) {
            aSemanticObjectMappingItems.push(new SemanticObjectMappingItem({
              key: oSemanticObjectMappingItem.key,
              value: oSemanticObjectMappingItem.value
            }));
          });
        }
        aSemanticObjectMappings.push(new SemanticObjectMapping({
          semanticObject: oSemanticObjectMapping.semanticObject,
          items: aSemanticObjectMappingItems
        }));
      });
    }
    return aSemanticObjectMappings;
  };
  /**
   * Converts a given array of SemanticObjectMapping into a Map containing SemanticObjects as Keys and a Map of it's corresponding SemanticObjectMappings as values.
   *
   * @private
   * @param aSemanticObjectMappings An array of SemanticObjectMappings.
   * @returns The converterd SemanticObjectMappings
   */
  SimpleLinkDelegate._convertSemanticObjectMapping = function (aSemanticObjectMappings) {
    if (!aSemanticObjectMappings.length) {
      return undefined;
    }
    const mSemanticObjectMappings = {};
    aSemanticObjectMappings.forEach(function (oSemanticObjectMapping) {
      if (!oSemanticObjectMapping.getSemanticObject()) {
        throw Error(`SimpleLinkDelegate: 'semanticObject' property with value '${oSemanticObjectMapping.getSemanticObject()}' is not valid`);
      }
      mSemanticObjectMappings[oSemanticObjectMapping.getSemanticObject()] = oSemanticObjectMapping.getItems().reduce(function (oMap, oItem) {
        oMap[oItem.getKey()] = oItem.getValue();
        return oMap;
      }, {});
    });
    return mSemanticObjectMappings;
  };
  /**
   * Converts a given array of SemanticObjectUnavailableActions into a map containing SemanticObjects as keys and a map of its corresponding SemanticObjectUnavailableActions as values.
   *
   * @private
   * @param aSemanticObjectUnavailableActions The SemanticObjectUnavailableActions converted
   * @returns The map containing the converted SemanticObjectUnavailableActions
   */
  SimpleLinkDelegate._convertSemanticObjectUnavailableAction = function (aSemanticObjectUnavailableActions) {
    let _SemanticObjectName;
    let _SemanticObjectHasAlreadyUnavailableActions;
    let _UnavailableActions = [];
    if (!aSemanticObjectUnavailableActions.length) {
      return undefined;
    }
    const mSemanticObjectUnavailableActions = {};
    aSemanticObjectUnavailableActions.forEach(function (oSemanticObjectUnavailableActions) {
      _SemanticObjectName = oSemanticObjectUnavailableActions.getSemanticObject();
      if (!_SemanticObjectName) {
        throw Error(`SimpleLinkDelegate: 'semanticObject' property with value '${_SemanticObjectName}' is not valid`);
      }
      _UnavailableActions = oSemanticObjectUnavailableActions.getActions();
      if (mSemanticObjectUnavailableActions[_SemanticObjectName] === undefined) {
        mSemanticObjectUnavailableActions[_SemanticObjectName] = _UnavailableActions;
      } else {
        _SemanticObjectHasAlreadyUnavailableActions = mSemanticObjectUnavailableActions[_SemanticObjectName];
        _UnavailableActions.forEach(function (UnavailableAction) {
          _SemanticObjectHasAlreadyUnavailableActions.push(UnavailableAction);
        });
        mSemanticObjectUnavailableActions[_SemanticObjectName] = _SemanticObjectHasAlreadyUnavailableActions;
      }
    });
    return mSemanticObjectUnavailableActions;
  };
  return SimpleLinkDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/quickView/QuickViewDelegate", ["sap/base/Log","sap/base/util/deepClone","sap/base/util/deepEqual","sap/base/util/isPlainObject","sap/fe/core/CommonUtils","sap/fe/core/helpers/KeepAliveHelper","sap/fe/core/helpers/ToES6Promise","sap/fe/core/templating/SemanticObjectHelper","sap/fe/macros/field/FieldHelper","sap/fe/macros/field/FieldRuntime","sap/fe/navigation/SelectionVariant","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/mdc/link/Factory","sap/ui/mdc/link/LinkItem","sap/ui/mdc/link/SemanticObjectMapping","sap/ui/mdc/link/SemanticObjectMappingItem","sap/ui/mdc/link/SemanticObjectUnavailableAction","sap/ui/mdc/LinkDelegate","sap/ui/model/json/JSONModel"],function(e,t,n,i,a,s,c,o,r,l,m,u,d,p,f,g,h,b,O,v,j,y){"use strict";var S=o.getDynamicPathFromSemanticObject;const k=Object.assign({},j);const _={iLinksShownInPopup:3,sapmLink:"sap.m.Link",sapuimdcLink:"sap.ui.mdc.Link",sapuimdclinkLinkItem:"sap.ui.mdc.link.LinkItem",sapmObjectIdentifier:"sap.m.ObjectIdentifier",sapmObjectStatus:"sap.m.ObjectStatus"};k.getConstants=function(){return _};k._getEntityType=function(e,t){if(t){return t.createBindingContext(e.entityType)}else{return undefined}};k._getSemanticsModel=function(e,t){if(t){return new y(e)}else{return undefined}};k._getDataField=function(e,t){return t.createBindingContext(e.dataField)};k._getContact=function(e,t){return t.createBindingContext(e.contact)};k.fnTemplateFragment=function(){let e,t;const n={};let i;if(this.resolvedpayload){i=this.resolvedpayload}else{i=this.payload}if(i&&!i.LinkId){i.LinkId=this.oControl&&this.oControl.isA(_.sapuimdcLink)?this.oControl.getId():undefined}if(i.LinkId){t=this.oControl.getModel("$sapuimdcLink").getProperty("/titleLinkHref");i.titlelink=t}const a=this._getSemanticsModel(i,this.oMetaModel);this.semanticModel=a;if(i.entityType&&this._getEntityType(i,this.oMetaModel)){e="sap.fe.macros.quickView.fragments.EntityQuickView";n.bindingContexts={entityType:this._getEntityType(i,this.oMetaModel),semantic:a.createBindingContext("/")};n.models={entityType:this.oMetaModel,semantic:a}}else if(i.dataField&&this._getDataField(i,this.oMetaModel)){e="sap.fe.macros.quickView.fragments.DataFieldQuickView";n.bindingContexts={dataField:this._getDataField(i,this.oMetaModel),semantic:a.createBindingContext("/")};n.models={dataField:this.oMetaModel,semantic:a}}n.models.entitySet=this.oMetaModel;n.models.metaModel=this.oMetaModel;if(this.oControl&&this.oControl.getModel("viewData")){n.models.viewData=this.oControl.getModel("viewData");n.bindingContexts.viewData=this.oControl.getModel("viewData").createBindingContext("/")}const s=f.loadTemplate(e,"fragment");return Promise.resolve(p.process(s,{name:e},n)).then(e=>d.load({definition:e,controller:this})).then(e=>{if(e){if(n.models&&n.models.semantic){e.setModel(n.models.semantic,"semantic");e.setBindingContext(n.bindingContexts.semantic,"semantic")}if(n.bindingContexts&&n.bindingContexts.entityType){e.setModel(n.models.entityType,"entityType");e.setBindingContext(n.bindingContexts.entityType,"entityType")}}this.resolvedpayload=undefined;return e})};k.fetchAdditionalContent=function(e,t){var n;this.oControl=t;const i=e===null||e===void 0?void 0:(n=e.navigationPath)===null||n===void 0?void 0:n.match(/{(.*?)}/);const a=i&&i.length>1&&i[1]?t.getModel().bindContext(i[1],t.getBindingContext(),{$$ownRequest:true}):null;this.payload=e;if(t&&t.isA(_.sapuimdcLink)){this.oMetaModel=t.getModel().getMetaModel();return this.fnTemplateFragment().then(function(e){if(a){e.setBindingContext(a.getBoundContext())}return[e]})}return Promise.resolve([])};k._fetchLinkCustomData=function(e){if(e.getParent()&&e.isA(_.sapuimdcLink)&&(e.getParent().isA(_.sapmLink)||e.getParent().isA(_.sapmObjectIdentifier)||e.getParent().isA(_.sapmObjectStatus))){return e.getCustomData()}else{return undefined}};k.fetchLinkItems=function(e,t,n){if(t&&k._getSemanticObjects(e)){const i=t.getObject();if(n){n.initialize(k._getSemanticObjects(e))}const a=this._link&&this._fetchLinkCustomData(this._link);this.aLinkCustomData=a&&this._fetchLinkCustomData(this._link).map(function(e){return e.mProperties.value});const s=k._calculateSemanticAttributes(i,e,n,this._link);const c=s.results;const o=s.payload;return k._retrieveNavigationTargets("",c,o,n,this._link).then(function(e){return e.length===0?null:e})}else{return Promise.resolve(null)}};k._findLinkType=function(e,t){let n,i;if((t===null||t===void 0?void 0:t.length)===1){i=new h({text:t[0].getText(),href:t[0].getHref()});n=e.hasQuickViewFacets==="false"?1:2}else if(e.hasQuickViewFacets==="false"&&(t===null||t===void 0?void 0:t.length)===0){n=0}else{n=2}return{linkType:n,linkItem:i}};k.fetchLinkType=async function(t,n){const i=n;const a=Object.assign({},t);const s={initialType:{type:2,directLink:undefined},runtimeType:undefined};if(!this.appStateKeyMap){this.appStateKeyMap={}}try{var c;if(a!==null&&a!==void 0&&a.semanticObjects){this._link=n;let e=await i._retrieveUnmodifiedLinkItems();if(e.length===1){e=await i.retrieveLinkItems()}const t=k._findLinkType(a,e);return{initialType:{type:t.linkType,directLink:t.linkItem?t.linkItem:undefined},runtimeType:undefined}}else if((a===null||a===void 0?void 0:(c=a.contact)===null||c===void 0?void 0:c.length)>0){return s}else if(a!==null&&a!==void 0&&a.entityType&&a!==null&&a!==void 0&&a.navigationPath){return s}throw new Error("no payload or semanticObjects found")}catch(t){e.error("Error in SimpleLinkDelegate.fetchLinkType: ",t)}};k._RemoveTitleLinkFromTargets=function(e,t,n){let i,a;let s=false;if(t&&n&&n[0]){let t,c;const o=n[0].intent.split("?")[0];if(e&&e[0]){c=`#${e[0].getProperty("key")}`;t=o===c;if(t){i=e[0].getProperty("href");this.payload.titlelinkhref=i;if(e[0].isA(_.sapuimdclinkLinkItem)){a=e[0].getParent();a.getModel("$sapuimdcLink").setProperty("/titleLinkHref",i);const t=a.getModel("$sapuimdcLink").getProperty("/linkItems").filter(function(e){if(`#${e.key}`!==c){return e}});if(t&&t.length>0){a.getModel("$sapuimdcLink").setProperty("/linkItems/",t)}s=true}}}}return s};k._IsSemanticObjectDynamic=function(e,t){if(e&&t.aLinkCustomData){return t.aLinkCustomData.filter(function(t){return e.filter(function(e){return e!==t}).length>0}).length>0}else{return false}};k._getLineContext=function(e,t){if(!t){if(e.getAggregation("content")[0]&&e.getAggregation("content")[0].getBindingContext()){return e.getAggregation("content")[0].getBindingContext()}}return t};k._setFilterContextUrlForSelectionVariant=function(e,t,n){if(e.getViewData().entitySet&&t){const i=n.constructContextUrl(e.getViewData().entitySet,e.getModel());t.setFilterContextUrl(i)}return t};k._setObjectMappings=function(e,t,n,i){let a=false;const s=new m(i.toJSONObject());n.forEach(function(n){let i=n.semanticObject;const c=S(n.semanticObject);if(c&&t[c]){i=t[c]}if(e===i){const e=n.items;for(const n in e){const i=e[n].key;const c=e[n].value;if(i!==c){if(t[i]){s.removeParameter(c);s.removeSelectOption(c);s.renameParameter(i,c);s.renameSelectOption(i,c);t[c]=t[i];delete t[i];a=true}else if(i.split("/").length>1){const e=i.split("/").slice(-1)[0];if(!t[e]){delete t[e];s.removeParameter(e);s.removeSelectOption(e)}else if(e!==c){s.renameParameter(e,c);s.renameSelectOption(e,c);t[c]=t[e];delete t[e]}}else{delete t[i];s.removeParameter(c);s.removeSelectOption(c)}}}}});return{params:t,hasChanged:a,selectionVariant:s}};k._getAppStateKeyAndUrlParameters=async function(e,t,i,a){var s;let o=[];if(n(i,(s=e.appStateKeyMap[""])===null||s===void 0?void 0:s.selectionVariant)){const t=e.appStateKeyMap[""];return[t.semanticAttributes,t.appstatekey]}if(e.appStateKeyMap[`${a}`]===undefined||!n(e.appStateKeyMap[`${a}`].selectionVariant,i)){o=await c(t.getAppStateKeyAndUrlParameters(i.toJSONString()));e.appStateKeyMap[`${a}`]={semanticAttributes:o[0],appstatekey:o[1],selectionVariant:i}}else{const t=e.appStateKeyMap[`${a}`];o=[t.semanticAttributes,t.appstatekey]}return o};k._getLinkItemWithNewParameter=async function(e,t,n,i,a,s,c,o,r,l){return a.expandCompactHash(i.getHref()).then(async function(m){const u=a.parseShellHash(m);const d=Object.assign({},c);const{params:p,hasChanged:f,selectionVariant:g}=k._setObjectMappings(u.semanticObject,d,s.semanticObjectMappings,r);if(f){const t=await k._getAppStateKeyAndUrlParameters(e,l,g,u.semanticObject);o=t[1]}const h={target:{semanticObject:u.semanticObject,action:u.action},params:p,appStateKey:o};delete h.params["sap-xapp-state"];i.setHref(`#${a.constructShellHash(h)}`);s.aSemanticLinks.push(i.getHref());return k._RemoveTitleLinkFromTargets.bind(e)([i],t,n)})};k._removeEmptyLinkItem=function(e){return e.filter(e=>e!==undefined)};k.modifyLinkItems=async function(t,n,i){if(i.length!==0){this.payload=t;const s=i[0].getParent();const c=a.getTargetView(s);const o=a.getAppComponent(c);const l=await r.checkPrimaryActions(t,true,o);const m=l.titleLink;const u=l.hasTitleLink;const d=o.getShellServices();if(!d.hasUShell()){e.error("QuickViewDelegate: Cannot retrieve the shell services");return Promise.reject()}const p=c.getModel().getMetaModel();let f=s.getBindingContext();const g={semanticObject:t.mainSemanticObject,action:""};try{const e=s&&this._fetchLinkCustomData(s).map(function(e){return e.mProperties.value});if(k._IsSemanticObjectDynamic(e,this)){const e=k._calculateSemanticAttributes(n.getObject(),t,undefined,this._link);const a=e.results;const s=e.payload;i=await k._retrieveNavigationTargets("",a,s,undefined,this._link)}const a=o.getNavigationService();const r=c.getController();let l;let h;f=k._getLineContext(c,f);const b=p.getMetaPath(f.getPath());h=r._intentBasedNavigation.removeSensitiveData(f.getObject(),b);h=r._intentBasedNavigation.prepareContextForExternalNavigation(h,f);l=a.mixAttributesAndSelectionVariant(h.semanticAttributes,{});g.propertiesWithoutConflict=h.propertiesWithoutConflict;r.intentBasedNavigation.adaptNavigationContext(l,g);k._removeTechnicalParameters(l);l=k._setFilterContextUrlForSelectionVariant(c,l,a);const O=await k._getAppStateKeyAndUrlParameters(this,a,l,"");const v=O[0];const j=O[1];let y;t.aSemanticLinks=[];i=k._removeEmptyLinkItem(i);for(const e in i){y=await k._getLinkItemWithNewParameter(this,u,m,i[e],d,t,v,j,l,a);if(y===true&&i.length>1){i[e]=undefined}}return k._removeEmptyLinkItem(i)}catch(t){e.error("Error while getting the navigation service",t);return undefined}}else{return i}};k.beforeNavigationCallback=function(e,t){const n=t.getSource(),i=t.getParameter("href"),a=g.getService("URLParsing"),c=i&&a.parseShellHash(i);s.storeControlRefreshStrategyForHash(n,c);return Promise.resolve(true)};k._removeTechnicalParameters=function(e){e.removeSelectOption("@odata.context");e.removeSelectOption("@odata.metadataEtag");e.removeSelectOption("SAP__Messages")};k._getSemanticObjectCustomDataValue=function(e,t){let n,i;for(let a=0;a<e.length;a++){n=e[a].getKey();i=e[a].getValue();t[n]={value:i}}};k._isDynamicPath=function(e){if(e&&e.indexOf("{")===0&&e.indexOf("}")===e.length-1){return true}else{return false}};k._updatePayloadWithResolvedSemanticObjectValue=function(e,t,n){var i;if(k._isDynamicPath(e.mainSemanticObject)){if(n){t.mainSemanticObject=n}else{t.mainSemanticObject=undefined}}switch(typeof n){case"string":(i=t.semanticObjectsResolved)===null||i===void 0?void 0:i.push(n);t.semanticObjects.push(n);break;case"object":for(const e in n){var a;(a=t.semanticObjectsResolved)===null||a===void 0?void 0:a.push(n[e]);t.semanticObjects.push(n[e])}break;default:}};k._createNewPayloadWithDynamicSemanticObjectsResolved=function(e,t,n){let i,a;for(const s in e.semanticObjects){i=e.semanticObjects[s];if(k._isDynamicPath(i)){a=i.substr(1,i.indexOf("}")-1);i=t[a].value;k._updatePayloadWithResolvedSemanticObjectValue(e,n,i)}else{n.semanticObjects.push(i)}}};k._updateSemanticObjectsForMappings=function(e,t,n){t.semanticObjectMappings.forEach(function(t){if(t.semanticObject&&k._isDynamicPath(t.semanticObject)){t.semanticObject=n.semanticObjects[e.semanticObjects.indexOf(t.semanticObject)]}})};k._updateSemanticObjectsUnavailableActions=function(e,t,n){let i;t.forEach(function(t){if(t!==null&&t!==void 0&&t.semanticObject&&k._isDynamicPath(t.semanticObject)){i=e.semanticObjects.findIndex(function(e){return e===t.semanticObject});if(i!==undefined){t.semanticObject=n.semanticObjects[i]}}})};k._updateSemanticObjectsWithResolvedValue=function(e,t){for(let n=0;n<e.semanticObjects.length;n++){if(t.mainSemanticObject===(e.semanticObjectsResolved&&e.semanticObjectsResolved[n])){t.mainSemanticObject=e.semanticObjects[n]}if(t.semanticObjects[n]){t.semanticObjects[n]=e.semanticObjects[n]}else{t.semanticObjects.splice(n,1)}}};k._removeEmptySemanticObjectsMappings=function(e){for(let t=0;t<e.semanticObjectMappings.length;t++){if(e.semanticObjectMappings[t]&&e.semanticObjectMappings[t].semanticObject===undefined){e.semanticObjectMappings.splice(t,1)}}};k._setPayloadWithDynamicSemanticObjectsResolved=function(e,n){let i;if(n.semanticObjectsResolved&&n.semanticObjectsResolved.length>0){i={entityType:e.entityType,dataField:e.dataField,contact:e.contact,mainSemanticObject:e.mainSemanticObject,navigationPath:e.navigationPath,propertyPathLabel:e.propertyPathLabel,semanticObjectMappings:t(e.semanticObjectMappings),semanticObjects:n.semanticObjects};k._updateSemanticObjectsForMappings(e,i,n);const a=t(e.semanticObjectUnavailableActions);k._updateSemanticObjectsUnavailableActions(e,a,i);i.semanticObjectUnavailableActions=a;if(n.mainSemanticObject){i.mainSemanticObject=n.mainSemanticObject}else{i.mainSemanticObject=undefined}k._updateSemanticObjectsWithResolvedValue(n,i);k._removeEmptySemanticObjectsMappings(i);return i}else{return{}}};k._getPayloadWithDynamicSemanticObjectsResolved=function(e,t){let n;const i={};const a={semanticObjects:[],semanticObjectsResolved:[],semanticObjectMappings:[]};if(e.semanticObjects){if(t&&t.length>0){k._getSemanticObjectCustomDataValue(t,i);k._createNewPayloadWithDynamicSemanticObjectsResolved(e,i,a);n=k._setPayloadWithDynamicSemanticObjectsResolved(e,a);return n}}else{return undefined}};k._updatePayloadWithSemanticAttributes=function(t,n,a,s,c){t.forEach(function(t){if(n){n.addContextObject(t,a)}s[t]={};for(const o in a){let r=null,l=null;if(n){r=n.getSemanticObjectAttribute(t,o);if(!r){r=n.createAttributeStructure();n.addSemanticObjectAttribute(t,o,r)}}if(a[o]===undefined||a[o]===null){if(r){r.transformations.push({value:undefined,description:"ℹ Undefined and null values have been removed in SimpleLinkDelegate."})}continue}if(i(a[o])){if(c&&c[t]){const e=Object.keys(c[t]);let n,i,r,l;for(let m=0;m<e.length;m++){l=e[m];if(l.indexOf(o)===0){n=c[t][l];i=l.split("/")[l.split("/").length-1];r=a[o][i];if(n&&i&&r){s[t][n]=r}}}}if(r){r.transformations.push({value:undefined,description:"ℹ Plain objects has been removed in SimpleLinkDelegate."})}continue}const m=c&&c[t]&&c[t][o]?c[t][o]:o;if(r&&o!==m){l={value:undefined,description:`ℹ The attribute ${o} has been renamed to ${m} in SimpleLinkDelegate.`,reason:`🔴 A com.sap.vocabularies.Common.v1.SemanticObjectMapping annotation is defined for semantic object ${t} with source attribute ${o} and target attribute ${m}. You can modify the annotation if the mapping result is not what you expected.`}}if(s[t][m]){e.error(`SimpleLinkDelegate: The attribute ${o} can not be renamed to the attribute ${m} due to a clash situation. This can lead to wrong navigation later on.`)}s[t][m]=a[o];if(r){if(l){r.transformations.push(l);const e=n.createAttributeStructure();e.transformations.push({value:a[o],description:`ℹ The attribute ${m} with the value ${a[o]} has been added due to a mapping rule regarding the attribute ${o} in SimpleLinkDelegate.`});n.addSemanticObjectAttribute(t,m,e)}}}})};k._calculateSemanticAttributes=function(e,t,n,i){const a=i&&this._fetchLinkCustomData(i);const s=k._getPayloadWithDynamicSemanticObjectsResolved(t,a);const c=s?s:t;this.resolvedpayload=s;const o=k._getSemanticObjects(c);const r=k._convertSemanticObjectMapping(k._getSemanticObjectMappings(c));if(!o.length){return{payload:c,results:{}}}const l={};k._updatePayloadWithSemanticAttributes(o,n,e,l,r);return{payload:c,results:l}};k._retrieveNavigationTargets=function(t,n,i,a,s){if(!i.semanticObjects){return Promise.resolve([])}const c=i.semanticObjects;const o={ownNavigation:undefined,availableActions:[]};let r=0;return u.loadLibrary("sap.ui.fl",{async:true}).then(()=>new Promise(m=>{sap.ui.require(["sap/ui/fl/Utils"],async u=>{const d=u.getAppComponentForControl(s===undefined?this.oControl:s);const p=d?d.getShellServices():null;if(!p){m(o.availableActions,o.ownNavigation)}if(!p.hasUShell()){e.error("SimpleLinkDelegate: Service 'CrossApplicationNavigation' or 'URLParsing' could not be obtained");m(o.availableActions,o.ownNavigation)}const f=c.map(function(e){return[{semanticObject:e,params:n?n[e]:undefined,appStateKey:t,sortResultsBy:"text"}]});try{const e=await p.getLinks(f);let t=false;for(let n=0;n<e.length;n++){for(let i=0;i<e[n].length;i++){if(e[n][i].length>0){t=true;break}if(t){break}}}if(!e||!e.length||!t){m(o.availableActions,o.ownNavigation)}const n=k._getSemanticObjectUnavailableActions(i);const s=k._convertSemanticObjectUnavailableAction(n);let u=l._fnFixHashQueryString(d.getShellServices().getHash());if(u){u+="?"}const g=function(e,t){return!!s&&!!s[e]&&s[e].indexOf(t)>-1};const b=function(e){const t=p.parseShellHash(e.intent);if(g(t.semanticObject,t.action)){return}const n=`#${p.constructShellHash({target:{shellHash:e.intent}})}`;if(e.intent&&e.intent.indexOf(u)===0){o.ownNavigation=new h({href:n,text:e.text});return}const i=new h({key:t.semanticObject&&t.action?`${t.semanticObject}-${t.action}`:undefined,text:e.text,description:undefined,href:n,icon:undefined,initiallyVisible:e.tags&&e.tags.indexOf("superiorAction")>-1});if(i.getProperty("initiallyVisible")){r++}o.availableActions.push(i);if(a){a.addSemanticObjectIntent(t.semanticObject,{intent:i.getHref(),text:i.getText()})}};for(let t=0;t<c.length;t++){e[t][0].forEach(b)}if(r===0){for(let e=0;e<o.availableActions.length;e++){if(e<this.getConstants().iLinksShownInPopup){o.availableActions[e].setProperty("initiallyVisible",true)}else{break}}}m(o.availableActions,o.ownNavigation)}catch(t){e.error("SimpleLinkDelegate: '_retrieveNavigationTargets' failed executing getLinks method");m(o.availableActions,o.ownNavigation)}})}))};k._getSemanticObjects=function(e){return e.semanticObjects?e.semanticObjects:[]};k._getSemanticObjectUnavailableActions=function(e){const t=[];if(e.semanticObjectUnavailableActions){e.semanticObjectUnavailableActions.forEach(function(e){t.push(new v({semanticObject:e.semanticObject,actions:e.actions}))})}return t};k._getSemanticObjectMappings=function(e){const t=[];let n=[];if(e.semanticObjectMappings){e.semanticObjectMappings.forEach(function(e){n=[];if(e.items){e.items.forEach(function(e){n.push(new O({key:e.key,value:e.value}))})}t.push(new b({semanticObject:e.semanticObject,items:n}))})}return t};k._convertSemanticObjectMapping=function(e){if(!e.length){return undefined}const t={};e.forEach(function(e){if(!e.getSemanticObject()){throw Error(`SimpleLinkDelegate: 'semanticObject' property with value '${e.getSemanticObject()}' is not valid`)}t[e.getSemanticObject()]=e.getItems().reduce(function(e,t){e[t.getKey()]=t.getValue();return e},{})});return t};k._convertSemanticObjectUnavailableAction=function(e){let t;let n;let i=[];if(!e.length){return undefined}const a={};e.forEach(function(e){t=e.getSemanticObject();if(!t){throw Error(`SimpleLinkDelegate: 'semanticObject' property with value '${t}' is not valid`)}i=e.getActions();if(a[t]===undefined){a[t]=i}else{n=a[t];i.forEach(function(e){n.push(e)});a[t]=n}});return a};return k},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/share/Share.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/CommonUtils", "sap/fe/core/controls/CommandExecution", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ClassSupport", "sap/m/Menu", "sap/m/MenuButton", "sap/m/MenuItem", "sap/suite/ui/commons/collaboration/CollaborationHelper", "sap/suite/ui/commons/collaboration/ServiceContainer", "sap/ui/core/CustomData", "sap/ui/performance/trace/FESRHelper", "sap/ushell/ui/footerbar/AddBookmarkButton", "./ShareAPI", "sap/fe/core/jsx-runtime/jsx"], function (Log, BuildingBlockSupport, RuntimeBuildingBlock, CommonUtils, CommandExecution, BindingHelper, BindingToolkit, ClassSupport, Menu, MenuButton, MenuItem, CollaborationHelper, ServiceContainer, CustomData, FESRHelper, AddBookmarkButton, ShareAPI, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;
  var _exports = {};
  var defineReference = ClassSupport.defineReference;
  var not = BindingToolkit.not;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var UI = BindingHelper.UI;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ShareBlock = (
  /**
   * Building block used to create the ‘Share’ functionality.
   * <br>
   * Please note that the 'Share in SAP Jam' option is only available on platforms that are integrated with SAP Jam.
   * <br>
   * If you are consuming this macro in an environment where the SAP Fiori launchpad is not available, then the 'Save as Tile' option is not visible.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Share
   * 	id="someID"
   *	visible="true"
   * /&gt;
   * </pre>
   *
   * @hideconstructor
   * @since 1.93.0
   */
  _dec = defineBuildingBlock({
    name: "Share",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.share.ShareAPI"]
  }), _dec2 = blockAttribute({
    type: "string",
    required: true,
    isPublic: true
  }), _dec3 = blockAttribute({
    type: "boolean",
    isPublic: true,
    bindable: true
  }), _dec4 = blockAttribute({
    type: "object",
    isPublic: false
  }), _dec5 = defineReference(), _dec6 = defineReference(), _dec7 = defineReference(), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(ShareBlock, _RuntimeBuildingBlock);
    function ShareBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _RuntimeBuildingBlock.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "msTeamsOptions", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "menuButton", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "menu", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "saveAsTileMenuItem", _descriptor6, _assertThisInitialized(_this));
      return _this;
    }
    _exports = ShareBlock;
    var _proto = ShareBlock.prototype;
    /**
     * Retrieves the share option from the shell configuration asynchronously and prepare the content of the menu button.
     * Options order are:
     * - Send as Email
     * - Share as Jam (if available)
     * - Teams options (if available)
     * - Save as tile.
     *
     * @param view The view this building block is used in
     * @param appComponent The AppComponent instance
     */
    _proto._initializeMenuItems = async function _initializeMenuItems(view, appComponent) {
      const isTeamsModeActive = await CollaborationHelper.isTeamsModeActive();
      if (isTeamsModeActive) {
        var _this$menuButton$curr, _this$menuButton$curr2;
        //need to clear the visible property bindings otherwise when the binding value changes then it will set back the visible to the resolved value
        (_this$menuButton$curr = this.menuButton.current) === null || _this$menuButton$curr === void 0 ? void 0 : _this$menuButton$curr.unbindProperty("visible", true);
        (_this$menuButton$curr2 = this.menuButton.current) === null || _this$menuButton$curr2 === void 0 ? void 0 : _this$menuButton$curr2.setVisible(false);
        return;
      }
      const controller = view.getController();
      const shellServices = appComponent.getShellServices();
      const isPluginInfoStable = await shellServices.waitForPluginsLoad();
      if (!isPluginInfoStable) {
        var _this$menuButton$curr3;
        // In case the plugin info is not yet available we need to do this computation again on the next button click
        const internalButton = (_this$menuButton$curr3 = this.menuButton.current) === null || _this$menuButton$curr3 === void 0 ? void 0 : _this$menuButton$curr3.getAggregation("_control");
        internalButton === null || internalButton === void 0 ? void 0 : internalButton.attachEventOnce("press", {}, () => this._initializeMenuItems, this);
      }
      if (this.menu.current) {
        this.menu.current.addItem(_jsx(MenuItem, {
          text: this.getTranslatedText("T_SEMANTIC_CONTROL_SEND_EMAIL"),
          icon: "sap-icon://email",
          press: () => controller.share._triggerEmail()
        }));
        this._addShellBasedMenuItems(controller, shellServices);
      }
    };
    _proto._addShellBasedMenuItems = async function _addShellBasedMenuItems(controller, shellServices) {
      var _shellServices$getUse, _shellServices$getUse2, _this$msTeamsOptions;
      const hasUshell = shellServices.hasUShell();
      const hasJam = !!((_shellServices$getUse = (_shellServices$getUse2 = shellServices.getUser()).isJamActive) !== null && _shellServices$getUse !== void 0 && _shellServices$getUse.call(_shellServices$getUse2));
      const collaborationTeamsHelper = await ServiceContainer.getServiceAsync();
      const shareCollaborationOptions = collaborationTeamsHelper.getOptions({
        isShareAsCardEnabled: ((_this$msTeamsOptions = this.msTeamsOptions) === null || _this$msTeamsOptions === void 0 ? void 0 : _this$msTeamsOptions.enableCard) === "true"
      });
      if (hasUshell) {
        if (hasJam) {
          var _this$menu, _this$menu$current;
          this === null || this === void 0 ? void 0 : (_this$menu = this.menu) === null || _this$menu === void 0 ? void 0 : (_this$menu$current = _this$menu.current) === null || _this$menu$current === void 0 ? void 0 : _this$menu$current.addItem(_jsx(MenuItem, {
            text: this.getTranslatedText("T_COMMON_SAPFE_SHARE_JAM"),
            icon: "sap-icon://share-2",
            press: () => controller.share._triggerShareToJam()
          }));
        }
        // prepare teams menu items
        for (const collaborationOption of shareCollaborationOptions) {
          var _collaborationOption$, _collaborationOption$2, _this$menu2, _this$menu2$current;
          const menuItemSettings = {
            text: collaborationOption.text,
            icon: collaborationOption.icon,
            visible: ((_collaborationOption$ = collaborationOption.subOptions) === null || _collaborationOption$ === void 0 ? void 0 : _collaborationOption$.length) === 1 && collaborationOption.subOptions[0].key === "COLLABORATION_MSTEAMS_CARD" ? compileExpression(not(UI.IsEditable)) : undefined,
            items: []
          };
          if (collaborationOption !== null && collaborationOption !== void 0 && collaborationOption.subOptions && (collaborationOption === null || collaborationOption === void 0 ? void 0 : (_collaborationOption$2 = collaborationOption.subOptions) === null || _collaborationOption$2 === void 0 ? void 0 : _collaborationOption$2.length) > 0) {
            menuItemSettings.items = [];
            collaborationOption.subOptions.forEach(subOption => {
              const subMenuItem = new MenuItem({
                text: subOption.text,
                icon: subOption.icon,
                press: this.collaborationMenuItemPress,
                visible: subOption.key === "COLLABORATION_MSTEAMS_CARD" ? compileExpression(not(UI.IsEditable)) : undefined,
                customData: new CustomData({
                  key: "collaborationData",
                  value: subOption
                })
              });
              if (subOption.fesrStepName) {
                FESRHelper.setSemanticStepname(subMenuItem, "press", subOption.fesrStepName);
              }
              menuItemSettings.items.push(subMenuItem);
            });
          } else {
            // if there are no sub option then the main option should be clickable
            // so add a press handler.
            menuItemSettings.press = this.collaborationMenuItemPress;
            menuItemSettings["customData"] = new CustomData({
              key: "collaborationData",
              value: collaborationOption
            });
          }
          const menuItem = new MenuItem(menuItemSettings);
          if (menuItemSettings.press && collaborationOption.fesrStepName) {
            FESRHelper.setSemanticStepname(menuItem, "press", collaborationOption.fesrStepName);
          }
          this === null || this === void 0 ? void 0 : (_this$menu2 = this.menu) === null || _this$menu2 === void 0 ? void 0 : (_this$menu2$current = _this$menu2.current) === null || _this$menu2$current === void 0 ? void 0 : _this$menu2$current.addItem(menuItem);
        }
        // set save as tile
        // for now we need to create addBookmarkButton to use the save as tile feature.
        // In the future save as tile should be available as an API or a MenuItem so that it can be added to the Menu button.
        // This needs to be discussed with AddBookmarkButton team.
        const addBookmarkButton = new AddBookmarkButton();
        if (addBookmarkButton.getEnabled()) {
          var _this$menu3, _this$menu3$current;
          this === null || this === void 0 ? void 0 : (_this$menu3 = this.menu) === null || _this$menu3 === void 0 ? void 0 : (_this$menu3$current = _this$menu3.current) === null || _this$menu3$current === void 0 ? void 0 : _this$menu3$current.addItem(_jsx(MenuItem, {
            ref: this.saveAsTileMenuItem,
            text: addBookmarkButton.getText(),
            icon: addBookmarkButton.getIcon(),
            press: () => controller.share._saveAsTile(this.saveAsTileMenuItem.current),
            children: {
              dependents: [addBookmarkButton]
            }
          }));
        } else {
          addBookmarkButton.destroy();
        }
      }
    };
    _proto.collaborationMenuItemPress = async function collaborationMenuItemPress(event) {
      const clickedMenuItem = event.getSource();
      const collaborationTeamsHelper = await ServiceContainer.getServiceAsync();
      const view = CommonUtils.getTargetView(clickedMenuItem);
      const controller = view.getController();
      // call adapt share metadata so that the collaboration info model is updated with the required info
      await controller.share._adaptShareMetadata();
      const collaborationInfo = view.getModel("collaborationInfo").getData();
      collaborationTeamsHelper.share(clickedMenuItem.data("collaborationData"), collaborationInfo);
    };
    _proto.getContent = function getContent(view, appComponent) {
      // Ctrl+Shift+S is needed for the time being but this needs to be removed after backlog from menu button
      const menuButton = _jsx(ShareAPI, {
        id: this.id,
        children: _jsx(MenuButton, {
          ref: this.menuButton,
          icon: "sap-icon://action",
          visible: this.visible,
          tooltip: "{sap.fe.i18n>M_COMMON_SAPFE_ACTION_SHARE} (Ctrl+Shift+S)",
          children: _jsx(Menu, {
            ref: this.menu
          })
        })
      });
      view.addDependent(_jsx(CommandExecution, {
        visible: this.visible,
        enabled: this.visible,
        command: "Share",
        execute: () => {
          var _this$menuButton$curr4;
          return (_this$menuButton$curr4 = this.menuButton.current) === null || _this$menuButton$curr4 === void 0 ? void 0 : _this$menuButton$curr4.getMenu().openBy(this.menuButton.current, true);
        }
      }));
      // The initialization is asynchronous, so we just trigger it and hope for the best :D
      this.isInitialized = this._initializeMenuItems(view, appComponent).catch(error => {
        Log.error(error);
      });
      return menuButton;
    };
    return ShareBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return constant(true);
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "msTeamsOptions", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "menuButton", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "saveAsTileMenuItem", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ShareBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/share/Share.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/CommonUtils","sap/fe/core/controls/CommandExecution","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ClassSupport","sap/m/Menu","sap/m/MenuButton","sap/m/MenuItem","sap/suite/ui/commons/collaboration/CollaborationHelper","sap/suite/ui/commons/collaboration/ServiceContainer","sap/ui/core/CustomData","sap/ui/performance/trace/FESRHelper","sap/ushell/ui/footerbar/AddBookmarkButton","./ShareAPI","sap/fe/core/jsx-runtime/jsx"],function(e,t,i,n,r,o,a,s,l,u,c,d,p,m,v,f,b,h){"use strict";var g,S,y,A,M,O,I,_,T,w,B,E,C,z,P;var x={};var k=s.defineReference;var N=a.not;var D=a.constant;var R=a.compileExpression;var j=o.UI;var L=t.defineBuildingBlock;var H=t.blockAttribute;function F(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function U(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function J(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;V(e,t)}function V(e,t){V=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return V(e,t)}function q(e,t,i,n,r){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function G(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let K=(g=L({name:"Share",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.share.ShareAPI"]}),S=H({type:"string",required:true,isPublic:true}),y=H({type:"boolean",isPublic:true,bindable:true}),A=H({type:"object",isPublic:false}),M=k(),O=k(),I=k(),g(_=(T=function(t){J(i,t);function i(){var e;for(var i=arguments.length,n=new Array(i),r=0;r<i;r++){n[r]=arguments[r]}e=t.call(this,...n)||this;F(e,"id",w,U(e));F(e,"visible",B,U(e));F(e,"msTeamsOptions",E,U(e));F(e,"menuButton",C,U(e));F(e,"menu",z,U(e));F(e,"saveAsTileMenuItem",P,U(e));return e}x=i;var o=i.prototype;o._initializeMenuItems=async function e(t,i){const n=await d.isTeamsModeActive();if(n){var r,o;(r=this.menuButton.current)===null||r===void 0?void 0:r.unbindProperty("visible",true);(o=this.menuButton.current)===null||o===void 0?void 0:o.setVisible(false);return}const a=t.getController();const s=i.getShellServices();const l=await s.waitForPluginsLoad();if(!l){var u;const e=(u=this.menuButton.current)===null||u===void 0?void 0:u.getAggregation("_control");e===null||e===void 0?void 0:e.attachEventOnce("press",{},()=>this._initializeMenuItems,this)}if(this.menu.current){this.menu.current.addItem(h(c,{text:this.getTranslatedText("T_SEMANTIC_CONTROL_SEND_EMAIL"),icon:"sap-icon://email",press:()=>a.share._triggerEmail()}));this._addShellBasedMenuItems(a,s)}};o._addShellBasedMenuItems=async function e(t,i){var n,r,o;const a=i.hasUShell();const s=!!((n=(r=i.getUser()).isJamActive)!==null&&n!==void 0&&n.call(r));const l=await p.getServiceAsync();const u=l.getOptions({isShareAsCardEnabled:((o=this.msTeamsOptions)===null||o===void 0?void 0:o.enableCard)==="true"});if(a){if(s){var d,b;this===null||this===void 0?void 0:(d=this.menu)===null||d===void 0?void 0:(b=d.current)===null||b===void 0?void 0:b.addItem(h(c,{text:this.getTranslatedText("T_COMMON_SAPFE_SHARE_JAM"),icon:"sap-icon://share-2",press:()=>t.share._triggerShareToJam()}))}for(const e of u){var g,S,y,A;const t={text:e.text,icon:e.icon,visible:((g=e.subOptions)===null||g===void 0?void 0:g.length)===1&&e.subOptions[0].key==="COLLABORATION_MSTEAMS_CARD"?R(N(j.IsEditable)):undefined,items:[]};if(e!==null&&e!==void 0&&e.subOptions&&(e===null||e===void 0?void 0:(S=e.subOptions)===null||S===void 0?void 0:S.length)>0){t.items=[];e.subOptions.forEach(e=>{const i=new c({text:e.text,icon:e.icon,press:this.collaborationMenuItemPress,visible:e.key==="COLLABORATION_MSTEAMS_CARD"?R(N(j.IsEditable)):undefined,customData:new m({key:"collaborationData",value:e})});if(e.fesrStepName){v.setSemanticStepname(i,"press",e.fesrStepName)}t.items.push(i)})}else{t.press=this.collaborationMenuItemPress;t["customData"]=new m({key:"collaborationData",value:e})}const i=new c(t);if(t.press&&e.fesrStepName){v.setSemanticStepname(i,"press",e.fesrStepName)}this===null||this===void 0?void 0:(y=this.menu)===null||y===void 0?void 0:(A=y.current)===null||A===void 0?void 0:A.addItem(i)}const e=new f;if(e.getEnabled()){var M,O;this===null||this===void 0?void 0:(M=this.menu)===null||M===void 0?void 0:(O=M.current)===null||O===void 0?void 0:O.addItem(h(c,{ref:this.saveAsTileMenuItem,text:e.getText(),icon:e.getIcon(),press:()=>t.share._saveAsTile(this.saveAsTileMenuItem.current),children:{dependents:[e]}}))}else{e.destroy()}}};o.collaborationMenuItemPress=async function e(t){const i=t.getSource();const r=await p.getServiceAsync();const o=n.getTargetView(i);const a=o.getController();await a.share._adaptShareMetadata();const s=o.getModel("collaborationInfo").getData();r.share(i.data("collaborationData"),s)};o.getContent=function t(i,n){const o=h(b,{id:this.id,children:h(u,{ref:this.menuButton,icon:"sap-icon://action",visible:this.visible,tooltip:"{sap.fe.i18n>M_COMMON_SAPFE_ACTION_SHARE} (Ctrl+Shift+S)",children:h(l,{ref:this.menu})})});i.addDependent(h(r,{visible:this.visible,enabled:this.visible,command:"Share",execute:()=>{var e;return(e=this.menuButton.current)===null||e===void 0?void 0:e.getMenu().openBy(this.menuButton.current,true)}}));this.isInitialized=this._initializeMenuItems(i,n).catch(t=>{e.error(t)});return o};return i}(i),w=q(T.prototype,"id",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),B=q(T.prototype,"visible",[y],{configurable:true,enumerable:true,writable:true,initializer:function(){return D(true)}}),E=q(T.prototype,"msTeamsOptions",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),C=q(T.prototype,"menuButton",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),z=q(T.prototype,"menu",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),P=q(T.prototype,"saveAsTileMenuItem",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),T))||_);x=K;return x},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/share/ShareAPI-dbg", ["sap/base/Log", "sap/fe/core/helpers/ClassSupport", "sap/suite/ui/commons/collaboration/CollaborationHelper", "../MacroAPI"], function (Log, ClassSupport, CollaborationHelper, MacroAPI) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Building block used to create the ‘Share’ functionality.
   * <br>
   * Please note that the 'Share in SAP Jam' option is only available on platforms that are integrated with SAP Jam.
   * <br>
   * If you are consuming this building block in an environment where the SAP Fiori launchpad is not available, then the 'Save as Tile' option is not visible.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Share
   * 	id="someID"
   *	visible="true"
   * /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.ShareAPI
   * @private
   * @since 1.108.0
   */
  let ShareAPI = (_dec = defineUI5Class("sap.fe.macros.share.ShareAPI", {
    interfaces: ["sap.m.IOverflowToolbarContent"]
  }), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "boolean",
    defaultValue: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(ShareAPI, _MacroAPI);
    function ShareAPI() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MacroAPI.call(this, ...args) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = ShareAPI.prototype;
    /**
     * Returns properties for the interface IOverflowToolbarContent.
     *
     * @returns {object} Returns the configuration of IOverflowToolbarContent
     */
    _proto.getOverflowToolbarConfig = function getOverflowToolbarConfig() {
      return {
        canOverflow: false
      };
    }

    /**
     * Sets the visibility of the 'Share' building block based on the value.
     * If the 'Share' building block is used in an application that's running in Microsoft Teams,
     * this function does not have any effect,
     * since the 'Share' building block handles the visibility on it's own in that case.
     *
     * @param visibility The desired visibility to be set
     * @returns Promise which resolves with the instance of ShareAPI
     * @private
     */;
    _proto.setVisibility = async function setVisibility(visibility) {
      const isTeamsModeActive = await CollaborationHelper.isTeamsModeActive();
      // In case of teams mode share should not be visible
      // so we do not do anything
      if (!isTeamsModeActive) {
        this.content.setVisible(visibility);
        this.visible = visibility;
      } else {
        Log.info("Share Building Block: visibility not changed since application is running in teams mode!");
      }
      return Promise.resolve(this);
    }

    /**
     * Adds style class to MenuButton. Requested by the toolbars that contain the Share Button.
     *
     * @param style
     * @returns {object} Returns the reference to the MenuButton
     */;
    _proto.addStyleClass = function addStyleClass(style) {
      const menuButton = this.getAggregation("content");
      menuButton.addStyleClass(style);
      return this;
    };
    return ShareAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return ShareAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/share/ShareAPI", ["sap/base/Log","sap/fe/core/helpers/ClassSupport","sap/suite/ui/commons/collaboration/CollaborationHelper","../MacroAPI"],function(e,i,t,r){"use strict";var n,o,a,l,s,u,c;var f=i.property;var p=i.defineUI5Class;function b(e,i,t,r){if(!t)return;Object.defineProperty(e,i,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(r):void 0})}function d(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function v(e,i){e.prototype=Object.create(i.prototype);e.prototype.constructor=e;h(e,i)}function h(e,i){h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(i,t){i.__proto__=t;return i};return h(e,i)}function y(e,i,t,r,n){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=t.slice().reverse().reduce(function(t,r){return r(e,i,t)||t},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,i,o);o=null}return o}function g(e,i){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let m=(n=p("sap.fe.macros.share.ShareAPI",{interfaces:["sap.m.IOverflowToolbarContent"]}),o=f({type:"string"}),a=f({type:"boolean",defaultValue:true}),n(l=(s=function(i){v(r,i);function r(){var e;for(var t=arguments.length,r=new Array(t),n=0;n<t;n++){r[n]=arguments[n]}e=i.call(this,...r)||this;b(e,"id",u,d(e));b(e,"visible",c,d(e));return e}var n=r.prototype;n.getOverflowToolbarConfig=function e(){return{canOverflow:false}};n.setVisibility=async function i(r){const n=await t.isTeamsModeActive();if(!n){this.content.setVisible(r);this.visible=r}else{e.info("Share Building Block: visibility not changed since application is running in teams mode!")}return Promise.resolve(this)};n.addStyleClass=function e(i){const t=this.getAggregation("content");t.addStyleClass(i);return this};return r}(r),u=y(s.prototype,"id",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),c=y(s.prototype,"visible",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),s))||l);return m},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsIndicator.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/macros/situations/SituationsPopover"], function (Log, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, MetaModelConverter, BindingToolkit, SituationsPopover) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var _exports = {};
  var showPopover = SituationsPopover.showPopover;
  var ref = BindingToolkit.ref;
  var pathInModel = BindingToolkit.pathInModel;
  var ifElse = BindingToolkit.ifElse;
  var greaterThan = BindingToolkit.greaterThan;
  var fn = BindingToolkit.fn;
  var equal = BindingToolkit.equal;
  var and = BindingToolkit.and;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let SituationsIndicatorBlock = (_dec = defineBuildingBlock({
    name: "SituationsIndicator",
    namespace: "sap.fe.macros.internal.situations"
  }), _dec2 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec3 = blockAttribute({
    type: "string",
    required: false
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(SituationsIndicatorBlock, _BuildingBlockBase);
    function SituationsIndicatorBlock() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BuildingBlockBase.call(this, ...args) || this;
      _initializerDefineProperty(_this, "entitySet", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "propertyPath", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    _exports = SituationsIndicatorBlock;
    SituationsIndicatorBlock.getSituationsNavigationProperty = function getSituationsNavigationProperty(context) {
      let navigationProperties;
      switch (context._type) {
        case "NavigationProperty":
          navigationProperties = context.targetType.navigationProperties;
          break;
        case "EntityType":
          navigationProperties = context.navigationProperties;
          break;
        default:
          navigationProperties = context.entityType.navigationProperties;
      }
      const situationsNavProps = navigationProperties.filter(navigationProperty => {
        var _navigationProperty$t, _navigationProperty$t2;
        return !navigationProperty.isCollection && ((_navigationProperty$t = navigationProperty.targetType.annotations.Common) === null || _navigationProperty$t === void 0 ? void 0 : (_navigationProperty$t2 = _navigationProperty$t.SAPObjectNodeType) === null || _navigationProperty$t2 === void 0 ? void 0 : _navigationProperty$t2.Name) === "BusinessSituation";
      });
      const situationsNavProp = situationsNavProps.length >= 1 ? situationsNavProps[0] : undefined;

      // only one navigation property may lead to an entity tagged as "BusinessSituation"
      if (situationsNavProps.length > 1) {
        const navPropNames = situationsNavProps.map(prop => `'${prop.name}'`).join(", ");
        let name;
        switch (context._type) {
          case "NavigationProperty":
            name = context.targetType.name;
            break;
          case "EntityType":
            name = context.name;
            break;
          default:
            name = context.entityType.name;
        }
        Log.error(`Entity type '${name}' has multiple paths to SAP Situations (${navPropNames}). Using '${situationsNavProp === null || situationsNavProp === void 0 ? void 0 : situationsNavProp.name}'.
Hint: Make sure there is at most one navigation property whose target entity type is annotated with
<Annotation Term="com.sap.vocabularies.Common.v1.SAPObjectNodeType">
  <Record>
    <PropertyValue Property="Name" String="BusinessSituation" />
  </Record>
</Annotation>.`);
      }
      return situationsNavProp;
    };
    var _proto = SituationsIndicatorBlock.prototype;
    _proto.getTemplate = function getTemplate() {
      const context = convertMetaModelContext(this.entitySet);
      const situationsNavProp = SituationsIndicatorBlock.getSituationsNavigationProperty(context);
      if (!situationsNavProp) {
        // No path to SAP Situations. That is, the entity type is not situation-enabled. Ignore this fragment.
        return undefined;
      }
      const numberOfSituations = pathInModel(`${situationsNavProp.name}/SitnNumberOfInstances`);

      // Indicator visibility
      let visible;
      if (!this.propertyPath) {
        // no propertyPath --> visibility depends on the number of situations only
        visible = greaterThan(numberOfSituations, 0);
      } else {
        // propertyPath --> visibility depends on the number of situations and on the semantic key used for showing indicators
        visible = and(greaterThan(numberOfSituations, 0), equal(pathInModel("semanticKeyHasDraftIndicator", "internal"), this.propertyPath));
      }

      // Button text: the number of situations if there are multiple, the empty string otherwise
      const text = ifElse(greaterThan(numberOfSituations, 1), numberOfSituations, "");

      // Button tooltip: "There is one situation" / "There are <n> situations"
      const tooltip = ifElse(equal(numberOfSituations, 1), this.getTranslatedText("situationsTooltipSingular"), fn("formatMessage", [this.getTranslatedText("situationsTooltipPlural"), numberOfSituations]));

      // 'press' handler
      const onPress = fn(showPopover, [ref("$controller"), ref("$event"), situationsNavProp.name]);
      return xml`
			<m:Button core:require="{rt: 'sap/fe/macros/situations/SituationsPopover', formatMessage: 'sap/base/strings/formatMessage'}"
				type="Attention"
				icon="sap-icon://alert"
				text="${text}"
				tooltip="${tooltip}"
				visible="${visible}"
				press="${onPress}"
			/>`;
    };
    return SituationsIndicatorBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "entitySet", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "propertyPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = SituationsIndicatorBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsIndicator.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/macros/situations/SituationsPopover"],function(e,t,i,r,n,a,o){"use strict";var s,l,u,c,p,f,d;var v={};var y=o.showPopover;var g=a.ref;var b=a.pathInModel;var m=a.ifElse;var h=a.greaterThan;var P=a.fn;var T=a.equal;var S=a.and;var B=n.convertMetaModelContext;var k=r.xml;var w=i.defineBuildingBlock;var O=i.blockAttribute;function $(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function z(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function j(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;M(e,t)}function M(e,t){M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return M(e,t)}function N(e,t,i,r,n){var a={};Object.keys(r).forEach(function(e){a[e]=r[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function A(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let E=(s=w({name:"SituationsIndicator",namespace:"sap.fe.macros.internal.situations"}),l=O({type:"sap.ui.model.Context",required:true}),u=O({type:"string",required:false}),s(c=(p=function(t){j(i,t);function i(){var e;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++){r[n]=arguments[n]}e=t.call(this,...r)||this;$(e,"entitySet",f,z(e));$(e,"propertyPath",d,z(e));return e}v=i;i.getSituationsNavigationProperty=function t(i){let r;switch(i._type){case"NavigationProperty":r=i.targetType.navigationProperties;break;case"EntityType":r=i.navigationProperties;break;default:r=i.entityType.navigationProperties}const n=r.filter(e=>{var t,i;return!e.isCollection&&((t=e.targetType.annotations.Common)===null||t===void 0?void 0:(i=t.SAPObjectNodeType)===null||i===void 0?void 0:i.Name)==="BusinessSituation"});const a=n.length>=1?n[0]:undefined;if(n.length>1){const t=n.map(e=>`'${e.name}'`).join(", ");let r;switch(i._type){case"NavigationProperty":r=i.targetType.name;break;case"EntityType":r=i.name;break;default:r=i.entityType.name}e.error(`Entity type '${r}' has multiple paths to SAP Situations (${t}). Using '${a===null||a===void 0?void 0:a.name}'.\nHint: Make sure there is at most one navigation property whose target entity type is annotated with\n<Annotation Term="com.sap.vocabularies.Common.v1.SAPObjectNodeType">\n  <Record>\n    <PropertyValue Property="Name" String="BusinessSituation" />\n  </Record>\n</Annotation>.`)}return a};var r=i.prototype;r.getTemplate=function e(){const t=B(this.entitySet);const r=i.getSituationsNavigationProperty(t);if(!r){return undefined}const n=b(`${r.name}/SitnNumberOfInstances`);let a;if(!this.propertyPath){a=h(n,0)}else{a=S(h(n,0),T(b("semanticKeyHasDraftIndicator","internal"),this.propertyPath))}const o=m(h(n,1),n,"");const s=m(T(n,1),this.getTranslatedText("situationsTooltipSingular"),P("formatMessage",[this.getTranslatedText("situationsTooltipPlural"),n]));const l=P(y,[g("$controller"),g("$event"),r.name]);return k`
			<m:Button core:require="{rt: 'sap/fe/macros/situations/SituationsPopover', formatMessage: 'sap/base/strings/formatMessage'}"
				type="Attention"
				icon="sap-icon://alert"
				text="${o}"
				tooltip="${s}"
				visible="${a}"
				press="${l}"
			/>`};return i}(t),f=N(p.prototype,"entitySet",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),d=N(p.prototype,"propertyPath",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),p))||c);v=E;return v},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsPopover-dbg", ["sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/macros/situations/SituationsText", "sap/m/Button", "sap/m/CustomListItem", "sap/m/HBox", "sap/m/Label", "sap/m/List", "sap/m/ObjectIdentifier", "sap/m/ObjectStatus", "sap/m/ResponsivePopover", "sap/m/Text", "sap/m/Toolbar", "sap/m/VBox"], function (BusyLocker, ResourceModelHelper, SituationsText, Button, CustomListItem, HBox, Label, List, ObjectIdentifier, ObjectStatus, ResponsivePopover, Text, Toolbar, VBox) {
  "use strict";

  var _exports = {};
  var bindText = SituationsText.bindText;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  function bindTimestamp(timestampPropertyPath) {
    return {
      path: timestampPropertyPath,
      type: "sap.ui.model.odata.type.DateTimeOffset",
      constraints: {
        precision: 7
      },
      formatOptions: {
        relative: true
      }
    };
  }
  let currentSituationIndicator;
  function createListPopover(controller, expectedNumberOfSituations) {
    let listDetailsPopover = null;
    const listPopover = new ResponsivePopover({
      showHeader: false,
      contentHeight: `${expectedNumberOfSituations * 4.5}em`,
      contentWidth: "25em",
      busyIndicatorDelay: 200,
      placement: "Horizontal",
      content: [new List({
        items: {
          path: "_Instance",
          events: {
            dataReceived: () => {
              listPopover.setContentHeight();
            }
          },
          parameters: {
            $orderby: "SitnInstceLastChgdAtDateTime desc",
            $expand: "_InstanceAttribute($expand=_InstanceAttributeValue)" // required for formatting the texts
          },

          template: new CustomListItem({
            type: "Navigation",
            press: goToDetails,
            content: [new HBox({
              items: [new ObjectStatus({
                icon: "sap-icon://alert",
                state: "Warning",
                tooltip: getResourceModel(controller).getText("situation")
              }).addStyleClass("sapUiTinyMarginEnd"), new ObjectIdentifier({
                title: bindText("SituationTitle"),
                text: bindTimestamp("SitnInstceLastChgdAtDateTime")
              })]
            }).addStyleClass("sapUiSmallMarginBeginEnd").addStyleClass("sapUiSmallMarginTopBottom")]
          }),
          templateShareable: false
        },
        showNoData: false
      })]
    });
    function goToList() {
      if (listDetailsPopover) {
        listDetailsPopover.unbindObject();
        listDetailsPopover.close();
      }
      if (currentSituationIndicator) {
        listPopover.openBy(currentSituationIndicator);
      }
    }
    async function goToDetails(event) {
      const pressedItem = event.getSource();
      const context = pressedItem.getBindingContext();
      if (context && currentSituationIndicator) {
        if (listDetailsPopover === null) {
          listDetailsPopover = await createPreviewPopover(controller, goToList);
          controller.getView().addDependent(listDetailsPopover);
        }
        listDetailsPopover.bindElement({
          path: context.getPath(),
          parameters: {
            $expand: "_InstanceAttribute($expand=_InstanceAttributeValue)"
          },
          events: {
            dataReceived: () => {
              BusyLocker.unlock(listDetailsPopover);
            }
          }
        });
        listPopover.close();
        BusyLocker.lock(listDetailsPopover);
        listDetailsPopover.openBy(currentSituationIndicator);
      }
    }
    return listPopover;
  }
  async function createPreviewPopover(controller, back) {
    const toolBarContent = [];
    const resourceModel = getResourceModel(controller);
    if (back) {
      toolBarContent.push(new Button({
        type: "Back",
        tooltip: resourceModel.getText("back"),
        press: back
      }).addStyleClass("sapUiNoMarginEnd"));
    }
    toolBarContent.push(new ObjectStatus({
      state: "Warning",
      icon: "sap-icon://alert",
      tooltip: resourceModel.getText("situationIconTooltip")
    }).addStyleClass("sapUiSmallMarginBegin"));
    toolBarContent.push(new ObjectIdentifier({
      titleActive: false,
      title: bindText("SituationTitle")
    }).addStyleClass("sapUiSmallMarginEnd"));
    const popoverSettings = {
      contentWidth: "25em",
      contentHeight: "7em",
      placement: "Horizontal",
      customHeader: new Toolbar({
        content: toolBarContent
      }),
      busyIndicatorDelay: 100,
      content: [new VBox({
        items: [new Label({
          text: bindTimestamp("SitnInstceLastChgdAtDateTime")
        }), new Text({
          text: bindText("SituationText")
        }).addStyleClass("sapUiTinyMarginTop")]
      })]
    };
    const shellServices = controller.getAppComponent().getShellServices();
    const navigationArguments = {
      target: {
        action: "displayExtended",
        semanticObject: "SituationInstance"
      }
    };
    const isNavigationSupported = await shellServices.isNavigationSupported([navigationArguments]);
    if (isNavigationSupported[0].supported) {
      popoverSettings.endButton = new Button({
        text: resourceModel.getText("showDetails"),
        press: event => {
          var _getBindingContext;
          const situationKey = (_getBindingContext = event.getSource().getBindingContext()) === null || _getBindingContext === void 0 ? void 0 : _getBindingContext.getObject(`SitnInstceKey`);
          if (situationKey !== undefined && situationKey !== null && shellServices.crossAppNavService) {
            navigationArguments.params = {
              SitnInstceKey: situationKey
            };
            shellServices.crossAppNavService.toExternal(navigationArguments);
          }
        }
      });
    }
    return new ResponsivePopover(popoverSettings).addStyleClass("sapUiPopupWithPadding").addStyleClass("sapUiResponsivePadding--header");
  }
  async function showPopover(controller, event, situationsNavigationProperty) {
    currentSituationIndicator = event.getSource();
    const bindingContext = currentSituationIndicator.getBindingContext(),
      numberOfSituations = bindingContext.getObject(`${situationsNavigationProperty}/SitnNumberOfInstances`);
    let popover;
    const context = bindingContext.getModel().bindContext(situationsNavigationProperty, bindingContext, {
      $expand: "_Instance($expand=_InstanceAttribute($expand=_InstanceAttributeValue))"
    }).getBoundContext();
    if (numberOfSituations <= 1) {
      popover = await createPreviewPopover(controller);
      popover.setBindingContext(context);
      popover.bindElement({
        path: "_Instance/0"
      });
    } else {
      popover = createListPopover(controller, numberOfSituations);
      popover.setBindingContext(context);
    }
    controller.getView().addDependent(popover);
    popover.openBy(currentSituationIndicator);
  }
  _exports.showPopover = showPopover;
  showPopover.__functionName = "rt.showPopover";
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsPopover", ["sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/helpers/ResourceModelHelper","sap/fe/macros/situations/SituationsText","sap/m/Button","sap/m/CustomListItem","sap/m/HBox","sap/m/Label","sap/m/List","sap/m/ObjectIdentifier","sap/m/ObjectStatus","sap/m/ResponsivePopover","sap/m/Text","sap/m/Toolbar","sap/m/VBox"],function(t,e,n,a,s,i,o,c,p,l,d,r,u,g){"use strict";var m={};var S=n.bindText;var f=e.getResourceModel;function x(t){return{path:t,type:"sap.ui.model.odata.type.DateTimeOffset",constraints:{precision:7},formatOptions:{relative:true}}}let y;function h(e,n){let a=null;const o=new d({showHeader:false,contentHeight:`${n*4.5}em`,contentWidth:"25em",busyIndicatorDelay:200,placement:"Horizontal",content:[new c({items:{path:"_Instance",events:{dataReceived:()=>{o.setContentHeight()}},parameters:{$orderby:"SitnInstceLastChgdAtDateTime desc",$expand:"_InstanceAttribute($expand=_InstanceAttributeValue)"},template:new s({type:"Navigation",press:u,content:[new i({items:[new l({icon:"sap-icon://alert",state:"Warning",tooltip:f(e).getText("situation")}).addStyleClass("sapUiTinyMarginEnd"),new p({title:S("SituationTitle"),text:x("SitnInstceLastChgdAtDateTime")})]}).addStyleClass("sapUiSmallMarginBeginEnd").addStyleClass("sapUiSmallMarginTopBottom")]}),templateShareable:false},showNoData:false})]});function r(){if(a){a.unbindObject();a.close()}if(y){o.openBy(y)}}async function u(n){const s=n.getSource();const i=s.getBindingContext();if(i&&y){if(a===null){a=await b(e,r);e.getView().addDependent(a)}a.bindElement({path:i.getPath(),parameters:{$expand:"_InstanceAttribute($expand=_InstanceAttributeValue)"},events:{dataReceived:()=>{t.unlock(a)}}});o.close();t.lock(a);a.openBy(y)}}return o}async function b(t,e){const n=[];const s=f(t);if(e){n.push(new a({type:"Back",tooltip:s.getText("back"),press:e}).addStyleClass("sapUiNoMarginEnd"))}n.push(new l({state:"Warning",icon:"sap-icon://alert",tooltip:s.getText("situationIconTooltip")}).addStyleClass("sapUiSmallMarginBegin"));n.push(new p({titleActive:false,title:S("SituationTitle")}).addStyleClass("sapUiSmallMarginEnd"));const i={contentWidth:"25em",contentHeight:"7em",placement:"Horizontal",customHeader:new u({content:n}),busyIndicatorDelay:100,content:[new g({items:[new o({text:x("SitnInstceLastChgdAtDateTime")}),new r({text:S("SituationText")}).addStyleClass("sapUiTinyMarginTop")]})]};const c=t.getAppComponent().getShellServices();const m={target:{action:"displayExtended",semanticObject:"SituationInstance"}};const y=await c.isNavigationSupported([m]);if(y[0].supported){i.endButton=new a({text:s.getText("showDetails"),press:t=>{var e;const n=(e=t.getSource().getBindingContext())===null||e===void 0?void 0:e.getObject(`SitnInstceKey`);if(n!==undefined&&n!==null&&c.crossAppNavService){m.params={SitnInstceKey:n};c.crossAppNavService.toExternal(m)}}})}return new d(i).addStyleClass("sapUiPopupWithPadding").addStyleClass("sapUiResponsivePadding--header")}async function w(t,e,n){y=e.getSource();const a=y.getBindingContext(),s=a.getObject(`${n}/SitnNumberOfInstances`);let i;const o=a.getModel().bindContext(n,a,{$expand:"_Instance($expand=_InstanceAttribute($expand=_InstanceAttributeValue))"}).getBoundContext();if(s<=1){i=await b(t);i.setBindingContext(o);i.bindElement({path:"_Instance/0"})}else{i=h(t,s);i.setBindingContext(o)}t.getView().addDependent(i);i.openBy(y)}m.showPopover=w;w.__functionName="rt.showPopover";return m},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsText-dbg", ["sap/base/Log", "sap/ui/model/odata/type/Boolean", "sap/ui/model/odata/type/Date", "sap/ui/model/odata/type/DateTimeOffset", "sap/ui/model/odata/type/Decimal", "sap/ui/model/odata/type/Guid", "sap/ui/model/odata/type/Int32", "sap/ui/model/odata/type/String"], function (Log, EdmBoolean, EdmDate, DateTimeOffset, Decimal, Guid, Int32, EdmString) {
  "use strict";

  var _exports = {};
  const types = {};
  function createEdmType(attributeEDMType) {
    switch (attributeEDMType) {
      case "EDM.BOOLEAN":
        return new EdmBoolean();
      case "EDM.DATE":
      case "EDM.DATETIME":
        return new EdmDate();
      case "EDM.DATETIMEOFFSET":
        return new DateTimeOffset();
      case "EDM.DECIMAL":
        return new Decimal();
      case "EDM.GUID":
        return new Guid();
      case "EDM.INT32":
        return new Int32();
      case "EDM.STRING":
        return new EdmString();
      default:
        return createEdmType("EDM.STRING");
    }
  }
  function parseAttributeValue(type, value, oDataType) {
    switch (type) {
      case "EDM.STRING":
        return value;
      case "EDM.DATE":
      case "EDM.DATETIME":
      case "EDM.DATETIMEOFFSET":
        return oDataType.parseValue(value, "string");
      case "EDM.INT32":
        return parseInt(value, 10);
      case "EDM.DECIMAL":
        return parseFloat(value);
      case "EDM.GUID":
        return value;
      case "EDM.BOOLEAN":
        // ABAP style: 'X' = true, '' = false
        return value === "X";
      default:
        return value;
    }
  }
  function getType(attributeEDMType) {
    let type = types[attributeEDMType];
    if (!type) {
      type = createEdmType(attributeEDMType);
      types[attributeEDMType] = type;
    }
    return type;
  }
  function formatter(key, template) {
    const context = this.getBindingContext();
    if (key === undefined || key === null || template === undefined || template === null || !context) {
      return "";
    }
    const attributes = context.getObject("_InstanceAttribute");
    if (attributes === undefined || attributes === null || attributes.length === 0) {
      return template;
    }
    const placeholderReplacer = (match, attributeSource, attributeName) => {
      const source = parseInt(attributeSource, 10).toString(); // remove leading zeros from the attribute source

      const resolvedAttribute = attributes.find(attribute => attribute.SitnInstceAttribSource === source && attribute.SitnInstceAttribName === attributeName);
      if (resolvedAttribute === undefined) {
        Log.error(`Failed to resolve attribute ${attributeSource}.${attributeName}`);
        return "";
      }
      if (!resolvedAttribute._InstanceAttributeValue) {
        Log.error(`Failed to resolve a value for attribute ${attributeSource}.${attributeName}`);
        return "";
      }
      const resolvedAttributeType = getType(resolvedAttribute.SitnInstceAttribEntityType);

      // Format the value(s) - if there are multiple, concatenate them
      return resolvedAttribute._InstanceAttributeValue.map(value => {
        const parsedValue = parseAttributeValue(resolvedAttribute.SitnInstceAttribEntityType, value.SitnInstceAttribValue, resolvedAttributeType);
        return resolvedAttributeType.formatValue(parsedValue, "string");
      }).join(", ");
    };

    // Replace placeholders for attribute values.
    // Their format is {<digitsequence>.<something>} - e.g. {01.PURCHASECONTRACT}
    return template.replace(/\{(\d+)\.([^}]+)}/g, placeholderReplacer);
  }
  _exports.formatter = formatter;
  function bindText(textTemplatePropertyPath) {
    return {
      parts: [{
        path: "SitnInstceKey"
      }, {
        path: `_InstanceText/${textTemplatePropertyPath}`
      }],
      formatter: formatter
    };
  }
  _exports.bindText = bindText;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/situations/SituationsText", ["sap/base/Log","sap/ui/model/odata/type/Boolean","sap/ui/model/odata/type/Date","sap/ui/model/odata/type/DateTimeOffset","sap/ui/model/odata/type/Decimal","sap/ui/model/odata/type/Guid","sap/ui/model/odata/type/Int32","sap/ui/model/odata/type/String"],function(t,e,n,r,a,u,i,s){"use strict";var c={};const o={};function E(t){switch(t){case"EDM.BOOLEAN":return new e;case"EDM.DATE":case"EDM.DATETIME":return new n;case"EDM.DATETIMEOFFSET":return new r;case"EDM.DECIMAL":return new a;case"EDM.GUID":return new u;case"EDM.INT32":return new i;case"EDM.STRING":return new s;default:return E("EDM.STRING")}}function d(t,e,n){switch(t){case"EDM.STRING":return e;case"EDM.DATE":case"EDM.DATETIME":case"EDM.DATETIMEOFFSET":return n.parseValue(e,"string");case"EDM.INT32":return parseInt(e,10);case"EDM.DECIMAL":return parseFloat(e);case"EDM.GUID":return e;case"EDM.BOOLEAN":return e==="X";default:return e}}function l(t){let e=o[t];if(!e){e=E(t);o[t]=e}return e}function D(e,n){const r=this.getBindingContext();if(e===undefined||e===null||n===undefined||n===null||!r){return""}const a=r.getObject("_InstanceAttribute");if(a===undefined||a===null||a.length===0){return n}const u=(e,n,r)=>{const u=parseInt(n,10).toString();const i=a.find(t=>t.SitnInstceAttribSource===u&&t.SitnInstceAttribName===r);if(i===undefined){t.error(`Failed to resolve attribute ${n}.${r}`);return""}if(!i._InstanceAttributeValue){t.error(`Failed to resolve a value for attribute ${n}.${r}`);return""}const s=l(i.SitnInstceAttribEntityType);return i._InstanceAttributeValue.map(t=>{const e=d(i.SitnInstceAttribEntityType,t.SitnInstceAttribValue,s);return s.formatValue(e,"string")}).join(", ")};return n.replace(/\{(\d+)\.([^}]+)}/g,u)}c.formatter=D;function p(t){return{parts:[{path:"SitnInstceKey"},{path:`_InstanceText/${t}`}],formatter:D}}c.bindText=p;return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/ActionsTemplating-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/ManifestSettings", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/UIFormatters", "../CommonHelper", "../internal/helpers/DefaultActionHandler", "./TableHelper"], function (BuildingBlockTemplateProcessor, DataField, Action, ManifestSettings, MetaModelConverter, StableIdHelper, UIFormatters, CommonHelper, DefaultActionHandler, TableHelper) {
  "use strict";

  var _exports = {};
  var getDataModelObjectPath = UIFormatters.getDataModelObjectPath;
  var generate = StableIdHelper.generate;
  var ActionType = ManifestSettings.ActionType;
  var ButtonType = Action.ButtonType;
  var isDataModelObjectPathForActionWithDialog = DataField.isDataModelObjectPathForActionWithDialog;
  var isDataFieldForIntentBasedNavigation = DataField.isDataFieldForIntentBasedNavigation;
  var isDataFieldForAction = DataField.isDataFieldForAction;
  var xml = BuildingBlockTemplateProcessor.xml;
  /**
   * Generates the xml string for the DataFieldForAction MenuItem.
   *
   * @param dataField DataField for action
   * @param action The name of the action
   * @param menuItemAction The menuItemAction to be evaluated
   * @param table The instance of the table building block
   * @returns The xml string for the DataFieldForAction MenuItem
   */
  function getMenuItemForAction(dataField, action, menuItemAction, table) {
    var _dataField$ActionTarg, _dataField$ActionTarg2, _dataField$ActionTarg3, _dataField$ActionTarg4, _dataField$ActionTarg5;
    if (!menuItemAction.annotationPath) return;
    const actionContextPath = CommonHelper.getActionContext(table.metaPath.getModel().createBindingContext(menuItemAction.annotationPath + "/Action"));
    const actionContext = table.metaPath.getModel().createBindingContext(actionContextPath);
    const dataFieldDataModelObjectPath = actionContext ? MetaModelConverter.getInvolvedDataModelObjects(actionContext, table.collection) : undefined;
    const isBound = (_dataField$ActionTarg = dataField.ActionTarget) === null || _dataField$ActionTarg === void 0 ? void 0 : _dataField$ActionTarg.isBound;
    const isOperationAvailable = ((_dataField$ActionTarg2 = dataField.ActionTarget) === null || _dataField$ActionTarg2 === void 0 ? void 0 : (_dataField$ActionTarg3 = _dataField$ActionTarg2.annotations) === null || _dataField$ActionTarg3 === void 0 ? void 0 : (_dataField$ActionTarg4 = _dataField$ActionTarg3.Core) === null || _dataField$ActionTarg4 === void 0 ? void 0 : (_dataField$ActionTarg5 = _dataField$ActionTarg4.OperationAvailable) === null || _dataField$ActionTarg5 === void 0 ? void 0 : _dataField$ActionTarg5.valueOf()) !== false;
    const press = menuItemAction.command ? "cmd:" + menuItemAction.command : TableHelper.pressEventDataFieldForActionButton({
      contextObjectPath: table.contextObjectPath,
      id: table.id
    }, dataField, table.collectionEntity.name, table.tableDefinition.operationAvailableMap, actionContext.getObject(), action.isNavigable, menuItemAction.enableAutoScroll, menuItemAction.defaultValuesExtensionFunction);
    const enabled = menuItemAction.enabled !== undefined ? menuItemAction.enabled : TableHelper.isDataFieldForActionEnabled(table.tableDefinition, dataField.Action, !!isBound, actionContext.getObject(), menuItemAction.enableOnSelect, dataFieldDataModelObjectPath === null || dataFieldDataModelObjectPath === void 0 ? void 0 : dataFieldDataModelObjectPath.targetEntityType);
    if (isBound !== true || isOperationAvailable) {
      return xml`<MenuItem
				text="${dataField.Label}"
				press="${press}"
				enabled="${enabled}"
				visible="${menuItemAction.visible}"
				/>`;
    }
  }

  /**
   * Generates the xml string for the DataFieldForIntentBasedNavigation MenuItem.
   *
   * @param dataField DataField for IntentBasedNavigation
   * @param menuItemAction The menuItemAction to be evaluated
   * @param table The instance of the table building block
   * @returns The xml string for the DataFieldForIntentBasedNavigation MenuItem
   */
  function getMenuItemForIntentBasedNavigation(dataField, menuItemAction, table) {
    const dataFieldContext = menuItemAction.annotationPath ? table.metaPath.getModel().createBindingContext(menuItemAction.annotationPath) : null;
    return xml`<MenuItem xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			text="${dataField.Label}"
			press="${menuItemAction.command ? "cmd:" + menuItemAction.command : CommonHelper.getPressHandlerForDataFieldForIBN(dataFieldContext === null || dataFieldContext === void 0 ? void 0 : dataFieldContext.getObject(), "${internal>selectedContexts}", !table.tableDefinition.enableAnalytics)}"
			enabled="${menuItemAction.enabled !== undefined ? menuItemAction.enabled : TableHelper.isDataFieldForIBNEnabled({
      collection: table.collection,
      tableDefinition: table.tableDefinition
    }, dataField, dataField.RequiresContext, dataField.NavigationAvailable)}"
			visible="${menuItemAction.visible}"
			macrodata:IBNData="${!dataField.RequiresContext ? `{semanticObject: '${dataField.SemanticObject}' , action : '${dataField.Action}'}` : undefined}"
		/>`;
  }

  /**
   * Generates the xml string for the MenuItem based on the type of the menuItemAction.
   *
   * @param action The name of the action
   * @param menuItemAction The menuItemAction to be evaluated
   * @param table The instance of the table building block
   * @returns The xml string for the MenuItem
   */
  function getMenuItem(action, menuItemAction, table) {
    const dataField = menuItemAction.annotationPath ? table.convertedMetaData.resolvePath(menuItemAction.annotationPath).target : undefined;
    switch (dataField && menuItemAction.type) {
      case "ForAction":
        if (isDataFieldForAction(dataField)) {
          return getMenuItemForAction(dataField, action, menuItemAction, table);
        }
        break;
      case "ForNavigation":
        if (isDataFieldForIntentBasedNavigation(dataField)) {
          return getMenuItemForIntentBasedNavigation(dataField, menuItemAction, table);
        }
        break;
      default:
    }
    const actionPress = menuItemAction.noWrap ? menuItemAction.press : CommonHelper.buildActionWrapper(menuItemAction, {
      id: table.id
    });
    return xml`<MenuItem
				core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
				text="${menuItemAction === null || menuItemAction === void 0 ? void 0 : menuItemAction.text}"
				press="${menuItemAction.command ? "cmd:" + menuItemAction.command : actionPress}"
				visible="${menuItemAction.visible}"
				enabled="${menuItemAction.enabled}"
			/>`;
  }

  /**
   * Generates the xml string for the DataFieldForActionButton.
   *
   * @param dataField DataField for action
   * @param action The name of the action
   * @param table The instance of the table building block
   * @returns The xml string for the DataFieldForActionButton
   */
  function getDataFieldButtonForAction(dataField, action, table) {
    var _dataField$ActionTarg6;
    const dataFieldActionContext = table.metaPath.getModel().createBindingContext(action.annotationPath + "/Action");
    const actionContextPath = CommonHelper.getActionContext(dataFieldActionContext);
    const actionContext = table.metaPath.getModel().createBindingContext(actionContextPath);
    const dataFieldDataModelObjectPath = actionContext ? MetaModelConverter.getInvolvedDataModelObjects(actionContext, table.collection) : undefined;
    const isBound = (_dataField$ActionTarg6 = dataField.ActionTarget) === null || _dataField$ActionTarg6 === void 0 ? void 0 : _dataField$ActionTarg6.isBound;
    const press = action.command ? "cmd:" + action.command : TableHelper.pressEventDataFieldForActionButton({
      contextObjectPath: table.contextObjectPath,
      id: table.id
    }, dataField, table.collectionEntity.name, table.tableDefinition.operationAvailableMap, actionContext.getObject(), action.isNavigable, action.enableAutoScroll, action.defaultValuesExtensionFunction);
    const enabled = action.enabled !== undefined ? action.enabled : TableHelper.isDataFieldForActionEnabled(table.tableDefinition, dataField.Action, !!isBound, actionContext.getObject(), action.enableOnSelect, dataFieldDataModelObjectPath === null || dataFieldDataModelObjectPath === void 0 ? void 0 : dataFieldDataModelObjectPath.targetEntityType);
    return xml`<Button xmlns="sap.m"
					id="${generate([table.id, dataField])}"
					text="${dataField.Label}"
					ariaHasPopup="${isDataModelObjectPathForActionWithDialog(getDataModelObjectPath({}, {
      context: dataFieldActionContext
    }))}"
					press="${press}"
					type="${ButtonType.Transparent}"
					enabled="${enabled}"
					visible="${action.visible}"
				/>`;
  }

  /**
   * Generates the xml string for the DataFieldForIntentBasedNavigation Button.
   *
   * @param dataField DataField for IntentBasedNavigation
   * @param action The name of the action
   * @param table The instance of the table building block
   * @returns The xml string for the DataFieldForIntentBasedNavigation Button
   */
  function getDataFieldButtonForIntentBasedNavigation(dataField, action, table) {
    const dataFieldContext = action.annotationPath ? table.metaPath.getModel().createBindingContext(action.annotationPath) : null;
    return xml`<Button xmlns="sap.m"
					id="${generate([table.id, dataField])}"
					text="${dataField.Label}"
					press="${action.command ? "cmd:" + action.command : CommonHelper.getPressHandlerForDataFieldForIBN(dataFieldContext === null || dataFieldContext === void 0 ? void 0 : dataFieldContext.getObject(), "${internal>selectedContexts}", !table.tableDefinition.enableAnalytics)}"
					type="${ButtonType.Transparent}"
					enabled="${action.enabled !== undefined ? action.enabled : TableHelper.isDataFieldForIBNEnabled({
      collection: table.collection,
      tableDefinition: table.tableDefinition
    }, dataField, dataField.RequiresContext, dataField.NavigationAvailable)}"
					visible="${action.visible}"
					macrodata:IBNData="${!dataField.RequiresContext ? "{semanticObject: '" + dataField.SemanticObject + "' , action : '" + dataField.Action + "'}" : undefined}"
				/>`;
  }

  /**
   * Generates the xml string for the button based on the type of the action.
   *
   * @param action The name of the action
   * @param table The instance of the table building block
   * @returns The xml string for the button
   */
  function getDataFieldButton(action, table) {
    const dataField = action.annotationPath ? table.convertedMetaData.resolvePath(action.annotationPath).target : undefined;
    let template = "";
    if (!dataField) {
      return template;
    }
    switch (action.type) {
      case "ForAction":
        if (isDataFieldForAction(dataField)) {
          var _dataField$ActionTarg7, _dataField$ActionTarg8, _dataField$ActionTarg9, _dataField$ActionTarg10, _dataField$ActionTarg11;
          const isBound = (_dataField$ActionTarg7 = dataField.ActionTarget) === null || _dataField$ActionTarg7 === void 0 ? void 0 : _dataField$ActionTarg7.isBound;
          const isOperationAvailable = ((_dataField$ActionTarg8 = dataField.ActionTarget) === null || _dataField$ActionTarg8 === void 0 ? void 0 : (_dataField$ActionTarg9 = _dataField$ActionTarg8.annotations) === null || _dataField$ActionTarg9 === void 0 ? void 0 : (_dataField$ActionTarg10 = _dataField$ActionTarg9.Core) === null || _dataField$ActionTarg10 === void 0 ? void 0 : (_dataField$ActionTarg11 = _dataField$ActionTarg10.OperationAvailable) === null || _dataField$ActionTarg11 === void 0 ? void 0 : _dataField$ActionTarg11.valueOf()) !== false;
          if (isBound !== true || isOperationAvailable) {
            template += getDataFieldButtonForAction(dataField, action, table);
          }
        }
        break;
      case "ForNavigation":
        if (isDataFieldForIntentBasedNavigation(dataField)) {
          template += getDataFieldButtonForIntentBasedNavigation(dataField, action, table);
        }
        break;
      default:
    }
    return template !== "" ? `<mdcat:ActionToolbarAction
			xmlns="sap.m"
			xmlns:mdcat="sap.ui.mdc.actiontoolbar"
			xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">
			${template}
			</mdcat:ActionToolbarAction>` : "";
  }

  /**
   * Generates the xml string for the MenuButton control which enables the user to show a hierarchical menu.
   *
   * @param action The name of the action
   * @param table The instance of the table building block
   * @returns The xml string for the MenuButton control
   */
  function getMenuButton(action, table) {
    var _action$menu;
    let xmltemplate = `<mdcat:ActionToolbarAction
						xmlns="sap.m"
						xmlns:mdcat="sap.ui.mdc.actiontoolbar">`;
    const defaultAction = action.defaultAction;
    const dataFieldForDefaultAction = defaultAction !== null && defaultAction !== void 0 && defaultAction.annotationPath ? table.convertedMetaData.resolvePath(defaultAction.annotationPath).target : null;
    const defaultActionContext = defaultAction !== null && defaultAction !== void 0 && defaultAction.annotationPath ? CommonHelper.getActionContext(table.metaPath.getModel().createBindingContext(defaultAction.annotationPath + "/Action")) : null;
    xmltemplate += xml`<MenuButton
						text="${action.text}"
						type="${ButtonType.Transparent}"
						menuPosition="BeginBottom"
						id="${generate([table.id, action.id])}"
						visible="${action.visible}"
						enabled="${action.enabled}"
						useDefaultActionOnly="${DefaultActionHandler.getUseDefaultActionOnly(action)}"
						buttonMode="${DefaultActionHandler.getButtonMode(action)}"
						defaultAction="${DefaultActionHandler.getDefaultActionHandler(table, action, dataFieldForDefaultAction, defaultActionContext)}"
						>
					<menu>
						<Menu>`;
    (_action$menu = action.menu) === null || _action$menu === void 0 ? void 0 : _action$menu.forEach(menuItemAction => {
      if (typeof menuItemAction !== "string") {
        xmltemplate += getMenuItem(action, menuItemAction, table);
      }
    });
    xmltemplate += `</Menu>
				</menu>
			</MenuButton>
		</mdcat:ActionToolbarAction>`;
    return xmltemplate;
  }

  /**
   * Generates the xml string for the default button.
   *
   * @param action The name of the action
   * @param table The instance of the table building block
   * @returns The xml string for the default button.
   */
  function getDefaultButton(action, table) {
    const actionPress = action.noWrap ? action.press : CommonHelper.buildActionWrapper(action, {
      id: table.id
    });
    return xml`<mdcat:ActionToolbarAction
		xmlns="sap.m"
		xmlns:mdcat="sap.ui.mdc.actiontoolbar">
		<Button
			core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
			id="${generate([table.id, action.id])}"
			text="${action.text}"
			press="${action.command ? "cmd:" + action.command : actionPress}"
			type="${ButtonType.Transparent}"
			visible="${action.visible}"
			enabled="${action.enabled}"
		/>
	</mdcat:ActionToolbarAction>`;
  }

  /**
   * Generates the xml string for actions based on the type of the action.
   *
   * @param table The instance of the table building block
   * @returns The xml string representation of the action
   */
  function getActions(table) {
    return table.tableDefinition.actions.map(action => {
      switch (action.type) {
        case "Default":
          if ("noWrap" in action) {
            return getDefaultButton(action, table);
          }
          break;
        case "Menu":
          return getMenuButton(action, table);
        default:
      }
      return getDataFieldButton(action, table);
    }).join("");
  }

  /**
   * Generates the xml string for the create button.
   *
   * @param standardActions Stantard actions to be evaluated
   * @param table The instance of the table building block
   * @returns The xml string for the create button
   */
  function getCreateButton(standardActions, table) {
    if (table.tableDefinition.annotation.standardActions.isInsertUpdateTemplated && standardActions.create.isTemplated !== "false") {
      return xml`<mdcat:ActionToolbarAction
					xmlns="sap.m"
					xmlns:mdcat="sap.ui.mdc.actiontoolbar"
					xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">
						<Button
							id="${generate([table.id, "StandardAction", "Create"])}"
							text="{sap.fe.i18n>M_COMMON_TABLE_CREATE}"
							press="cmd:Create"
							type="${ButtonType.Transparent}"
							visible="${standardActions.create.visible}"
							enabled="${standardActions.create.enabled}"
							macrodata:IBNData="${TableHelper.getIBNData(table.createOutboundDetail)}"
						/>
					</mdcat:ActionToolbarAction>`;
    }
    return "";
  }

  /**
   * Generates the xml string for the delete button.
   *
   * @param standardActions Stantard actions to be evaluated
   * @param table The instance of the table building block
   * @returns The xml string for the delete button
   */
  function getDeleteButton(standardActions, table) {
    if (standardActions.delete.isTemplated !== "false") {
      return xml`<mdcat:ActionToolbarAction
					xmlns="sap.m"
					xmlns:mdcat="sap.ui.mdc.actiontoolbar">
					<Button
						id="${generate([table.id, "StandardAction", "Delete"])}"
						text="{sap.fe.i18n>M_COMMON_TABLE_DELETE}"
						press="cmd:DeleteEntry"
						type="${ButtonType.Transparent}"
						visible="${standardActions.delete.visible}"
						enabled="${standardActions.delete.enabled}"
					/>
				</mdcat:ActionToolbarAction>`;
    }
    return "";
  }

  /**
   * Generates the xml string for standard actions based on the type of the standard action.
   *
   * @param table The instance of the table building block
   * @returns The xml string representation of the standard action
   */
  function getStandardActions(table) {
    let xmltemplate = ``;
    const standardActions = table.tableDefinition.annotation.standardActions.actions;
    xmltemplate += getCreateButton(standardActions, table);

    //  Generates the xml string for the copy button.
    table.tableDefinition.actions.filter(action => action.type === ActionType.Copy).forEach(action => {
      const dataField = action.annotationPath ? table.convertedMetaData.resolvePath(action.annotationPath).target : undefined;
      xmltemplate += `<mdcat:ActionToolbarAction
					xmlns="sap.m"
					xmlns:mdcat="sap.ui.mdc.actiontoolbar">`;
      xmltemplate += xml`<Button
							id="${generate([table.id, dataField])}"
							text="${action.text}"
							press="${dataField ? TableHelper.pressEventDataFieldForActionButton({
        contextObjectPath: table.contextObjectPath,
        id: table.id
      }, dataField, table.collectionEntity.name, table.tableDefinition.operationAvailableMap, "${internal>selectedContexts}", action.isNavigable, action.enableAutoScroll, action.defaultValuesExtensionFunction) : undefined}"
							type="${ButtonType.Transparent}"
							enabled="${action.enabled}"
							visible="${action.visible}"
						/>`;
      xmltemplate += `</mdcat:ActionToolbarAction>`;
    });
    xmltemplate += getDeleteButton(standardActions, table);

    //  Generates the xml string for the massEdit button.
    if (table.tableDefinition.annotation.standardActions.isInsertUpdateTemplated && standardActions.massEdit.isTemplated !== "false") {
      xmltemplate += xml`<mdcat:ActionToolbarAction xmlns="sap.m" xmlns:mdcat="sap.ui.mdc.actiontoolbar">
			<Button
				id="${generate([table.id, "StandardAction", "MassEdit"])}"
				text="{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}"
				press="API.onMassEditButtonPressed($event, $controller)"
				visible="${standardActions.massEdit.visible}"
				enabled="${standardActions.massEdit.enabled}"
			/>
		</mdcat:ActionToolbarAction>`;
    }
    if (standardActions.insights.isTemplated !== "false") {
      xmltemplate += xml`<mdcat:ActionToolbarAction xmlns="sap.m" xmlns:mdcat="sap.ui.mdc.actiontoolbar">
			<Button
				id="${generate([table.id, "StandardAction", "Insights"])}"
				text="{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}"
				press="API.onAddCardToInsightsPressed($event, $controller)"
				visible="${standardActions.insights.visible}"
				enabled="${standardActions.insights.enabled}"
			>
				<layoutData>
					<OverflowToolbarLayoutData priority="AlwaysOverflow" />
				</layoutData>
			</Button>
		</mdcat:ActionToolbarAction>`;
    }
    return xmltemplate;
  }

  /**
   * Generates the xml string for BasicSearch.
   *
   * @param table The instance of the table building block
   * @returns The xml string representation of the BasicSearch
   */
  function getBasicSearch(table) {
    if (table.useBasicSearch) {
      return xml`<mdcat:ActionToolbarAction xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:macroTable="sap.fe.macros.table">
						<macroTable:BasicSearch id="${table.filterBarId}" useDraftEditState="${table._collectionIsDraftEnabled}"/>
					</mdcat:ActionToolbarAction>`;
    }
    return "";
  }

  /**
   * Generates the xml string for TableFullScreenDialog.
   *
   * @param table The instance of the table building block
   * @returns The xml string representation of the TableFullScreenDialog
   */
  function getFullScreen(table) {
    if (table.enableFullScreen) {
      return xml`<mdcat:ActionToolbarAction xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:macroTable="sap.fe.macros.table">
						<macroTable:TableFullScreenDialog id="${generate([table.id, "StandardAction", "FullScreen"])}" />
					</mdcat:ActionToolbarAction>`;
    }
    return "";
  }

  /**
   * Generates the xml string for actions.
   *
   * @param table The instance of the table building block
   * @returns The xml string representation of the actions
   */
  function getTableActionTemplate(table) {
    return getBasicSearch(table) + getActions(table) + getStandardActions(table) + getFullScreen(table);
  }
  _exports.getTableActionTemplate = getTableActionTemplate;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/ActionsTemplating", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/ManifestSettings","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/UIFormatters","../CommonHelper","../internal/helpers/DefaultActionHandler","./TableHelper"],function(t,e,n,a,o,i,l,c,r,s){"use strict";var d={};var u=l.getDataModelObjectPath;var m=i.generate;var b=a.ActionType;var p=n.ButtonType;var v=e.isDataModelObjectPathForActionWithDialog;var f=e.isDataFieldForIntentBasedNavigation;var A=e.isDataFieldForAction;var $=t.xml;function x(t,e,n,a){var i,l,r,d,u;if(!n.annotationPath)return;const m=c.getActionContext(a.metaPath.getModel().createBindingContext(n.annotationPath+"/Action"));const b=a.metaPath.getModel().createBindingContext(m);const p=b?o.getInvolvedDataModelObjects(b,a.collection):undefined;const v=(i=t.ActionTarget)===null||i===void 0?void 0:i.isBound;const f=((l=t.ActionTarget)===null||l===void 0?void 0:(r=l.annotations)===null||r===void 0?void 0:(d=r.Core)===null||d===void 0?void 0:(u=d.OperationAvailable)===null||u===void 0?void 0:u.valueOf())!==false;const A=n.command?"cmd:"+n.command:s.pressEventDataFieldForActionButton({contextObjectPath:a.contextObjectPath,id:a.id},t,a.collectionEntity.name,a.tableDefinition.operationAvailableMap,b.getObject(),e.isNavigable,n.enableAutoScroll,n.defaultValuesExtensionFunction);const x=n.enabled!==undefined?n.enabled:s.isDataFieldForActionEnabled(a.tableDefinition,t.Action,!!v,b.getObject(),n.enableOnSelect,p===null||p===void 0?void 0:p.targetEntityType);if(v!==true||f){return $`<MenuItem
				text="${t.Label}"
				press="${A}"
				enabled="${x}"
				visible="${n.visible}"
				/>`}}function g(t,e,n){const a=e.annotationPath?n.metaPath.getModel().createBindingContext(e.annotationPath):null;return $`<MenuItem xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
			text="${t.Label}"
			press="${e.command?"cmd:"+e.command:c.getPressHandlerForDataFieldForIBN(a===null||a===void 0?void 0:a.getObject(),"${internal>selectedContexts}",!n.tableDefinition.enableAnalytics)}"
			enabled="${e.enabled!==undefined?e.enabled:s.isDataFieldForIBNEnabled({collection:n.collection,tableDefinition:n.tableDefinition},t,t.RequiresContext,t.NavigationAvailable)}"
			visible="${e.visible}"
			macrodata:IBNData="${!t.RequiresContext?`{semanticObject: '${t.SemanticObject}' , action : '${t.Action}'}`:undefined}"
		/>`}function D(t,e,n){const a=e.annotationPath?n.convertedMetaData.resolvePath(e.annotationPath).target:undefined;switch(a&&e.type){case"ForAction":if(A(a)){return x(a,t,e,n)}break;case"ForNavigation":if(f(a)){return g(a,e,n)}break;default:}const o=e.noWrap?e.press:c.buildActionWrapper(e,{id:n.id});return $`<MenuItem
				core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
				text="${e===null||e===void 0?void 0:e.text}"
				press="${e.command?"cmd:"+e.command:o}"
				visible="${e.visible}"
				enabled="${e.enabled}"
			/>`}function T(t,e,n){var a;const i=n.metaPath.getModel().createBindingContext(e.annotationPath+"/Action");const l=c.getActionContext(i);const r=n.metaPath.getModel().createBindingContext(l);const d=r?o.getInvolvedDataModelObjects(r,n.collection):undefined;const b=(a=t.ActionTarget)===null||a===void 0?void 0:a.isBound;const f=e.command?"cmd:"+e.command:s.pressEventDataFieldForActionButton({contextObjectPath:n.contextObjectPath,id:n.id},t,n.collectionEntity.name,n.tableDefinition.operationAvailableMap,r.getObject(),e.isNavigable,e.enableAutoScroll,e.defaultValuesExtensionFunction);const A=e.enabled!==undefined?e.enabled:s.isDataFieldForActionEnabled(n.tableDefinition,t.Action,!!b,r.getObject(),e.enableOnSelect,d===null||d===void 0?void 0:d.targetEntityType);return $`<Button xmlns="sap.m"
					id="${m([n.id,t])}"
					text="${t.Label}"
					ariaHasPopup="${v(u({},{context:i}))}"
					press="${f}"
					type="${p.Transparent}"
					enabled="${A}"
					visible="${e.visible}"
				/>`}function h(t,e,n){const a=e.annotationPath?n.metaPath.getModel().createBindingContext(e.annotationPath):null;return $`<Button xmlns="sap.m"
					id="${m([n.id,t])}"
					text="${t.Label}"
					press="${e.command?"cmd:"+e.command:c.getPressHandlerForDataFieldForIBN(a===null||a===void 0?void 0:a.getObject(),"${internal>selectedContexts}",!n.tableDefinition.enableAnalytics)}"
					type="${p.Transparent}"
					enabled="${e.enabled!==undefined?e.enabled:s.isDataFieldForIBNEnabled({collection:n.collection,tableDefinition:n.tableDefinition},t,t.RequiresContext,t.NavigationAvailable)}"
					visible="${e.visible}"
					macrodata:IBNData="${!t.RequiresContext?"{semanticObject: '"+t.SemanticObject+"' , action : '"+t.Action+"'}":undefined}"
				/>`}function M(t,e){const n=t.annotationPath?e.convertedMetaData.resolvePath(t.annotationPath).target:undefined;let a="";if(!n){return a}switch(t.type){case"ForAction":if(A(n)){var o,i,l,c,r;const s=(o=n.ActionTarget)===null||o===void 0?void 0:o.isBound;const d=((i=n.ActionTarget)===null||i===void 0?void 0:(l=i.annotations)===null||l===void 0?void 0:(c=l.Core)===null||c===void 0?void 0:(r=c.OperationAvailable)===null||r===void 0?void 0:r.valueOf())!==false;if(s!==true||d){a+=T(n,t,e)}}break;case"ForNavigation":if(f(n)){a+=h(n,t,e)}break;default:}return a!==""?`<mdcat:ActionToolbarAction\n\t\t\txmlns="sap.m"\n\t\t\txmlns:mdcat="sap.ui.mdc.actiontoolbar"\n\t\t\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">\n\t\t\t${a}\n\t\t\t</mdcat:ActionToolbarAction>`:""}function P(t,e){var n;let a=`<mdcat:ActionToolbarAction\n\t\t\t\t\t\txmlns="sap.m"\n\t\t\t\t\t\txmlns:mdcat="sap.ui.mdc.actiontoolbar">`;const o=t.defaultAction;const i=o!==null&&o!==void 0&&o.annotationPath?e.convertedMetaData.resolvePath(o.annotationPath).target:null;const l=o!==null&&o!==void 0&&o.annotationPath?c.getActionContext(e.metaPath.getModel().createBindingContext(o.annotationPath+"/Action")):null;a+=$`<MenuButton
						text="${t.text}"
						type="${p.Transparent}"
						menuPosition="BeginBottom"
						id="${m([e.id,t.id])}"
						visible="${t.visible}"
						enabled="${t.enabled}"
						useDefaultActionOnly="${r.getUseDefaultActionOnly(t)}"
						buttonMode="${r.getButtonMode(t)}"
						defaultAction="${r.getDefaultActionHandler(e,t,i,l)}"
						>
					<menu>
						<Menu>`;(n=t.menu)===null||n===void 0?void 0:n.forEach(n=>{if(typeof n!=="string"){a+=D(t,n,e)}});a+=`</Menu>\n\t\t\t\t</menu>\n\t\t\t</MenuButton>\n\t\t</mdcat:ActionToolbarAction>`;return a}function B(t,e){const n=t.noWrap?t.press:c.buildActionWrapper(t,{id:e.id});return $`<mdcat:ActionToolbarAction
		xmlns="sap.m"
		xmlns:mdcat="sap.ui.mdc.actiontoolbar">
		<Button
			core:require="{FPM: 'sap/fe/core/helpers/FPMHelper'}"
			id="${m([e.id,t.id])}"
			text="${t.text}"
			press="${t.command?"cmd:"+t.command:n}"
			type="${p.Transparent}"
			visible="${t.visible}"
			enabled="${t.enabled}"
		/>
	</mdcat:ActionToolbarAction>`}function F(t){return t.tableDefinition.actions.map(e=>{switch(e.type){case"Default":if("noWrap"in e){return B(e,t)}break;case"Menu":return P(e,t);default:}return M(e,t)}).join("")}function O(t,e){if(e.tableDefinition.annotation.standardActions.isInsertUpdateTemplated&&t.create.isTemplated!=="false"){return $`<mdcat:ActionToolbarAction
					xmlns="sap.m"
					xmlns:mdcat="sap.ui.mdc.actiontoolbar"
					xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">
						<Button
							id="${m([e.id,"StandardAction","Create"])}"
							text="{sap.fe.i18n>M_COMMON_TABLE_CREATE}"
							press="cmd:Create"
							type="${p.Transparent}"
							visible="${t.create.visible}"
							enabled="${t.create.enabled}"
							macrodata:IBNData="${s.getIBNData(e.createOutboundDetail)}"
						/>
					</mdcat:ActionToolbarAction>`}return""}function C(t,e){if(t.delete.isTemplated!=="false"){return $`<mdcat:ActionToolbarAction
					xmlns="sap.m"
					xmlns:mdcat="sap.ui.mdc.actiontoolbar">
					<Button
						id="${m([e.id,"StandardAction","Delete"])}"
						text="{sap.fe.i18n>M_COMMON_TABLE_DELETE}"
						press="cmd:DeleteEntry"
						type="${p.Transparent}"
						visible="${t.delete.visible}"
						enabled="${t.delete.enabled}"
					/>
				</mdcat:ActionToolbarAction>`}return""}function E(t){let e=``;const n=t.tableDefinition.annotation.standardActions.actions;e+=O(n,t);t.tableDefinition.actions.filter(t=>t.type===b.Copy).forEach(n=>{const a=n.annotationPath?t.convertedMetaData.resolvePath(n.annotationPath).target:undefined;e+=`<mdcat:ActionToolbarAction\n\t\t\t\t\txmlns="sap.m"\n\t\t\t\t\txmlns:mdcat="sap.ui.mdc.actiontoolbar">`;e+=$`<Button
							id="${m([t.id,a])}"
							text="${n.text}"
							press="${a?s.pressEventDataFieldForActionButton({contextObjectPath:t.contextObjectPath,id:t.id},a,t.collectionEntity.name,t.tableDefinition.operationAvailableMap,"${internal>selectedContexts}",n.isNavigable,n.enableAutoScroll,n.defaultValuesExtensionFunction):undefined}"
							type="${p.Transparent}"
							enabled="${n.enabled}"
							visible="${n.visible}"
						/>`;e+=`</mdcat:ActionToolbarAction>`});e+=C(n,t);if(t.tableDefinition.annotation.standardActions.isInsertUpdateTemplated&&n.massEdit.isTemplated!=="false"){e+=$`<mdcat:ActionToolbarAction xmlns="sap.m" xmlns:mdcat="sap.ui.mdc.actiontoolbar">
			<Button
				id="${m([t.id,"StandardAction","MassEdit"])}"
				text="{sap.fe.i18n>M_COMMON_TABLE_MASSEDIT}"
				press="API.onMassEditButtonPressed($event, $controller)"
				visible="${n.massEdit.visible}"
				enabled="${n.massEdit.enabled}"
			/>
		</mdcat:ActionToolbarAction>`}if(n.insights.isTemplated!=="false"){e+=$`<mdcat:ActionToolbarAction xmlns="sap.m" xmlns:mdcat="sap.ui.mdc.actiontoolbar">
			<Button
				id="${m([t.id,"StandardAction","Insights"])}"
				text="{sap.fe.i18n>M_COMMON_INSIGHTS_CARD}"
				press="API.onAddCardToInsightsPressed($event, $controller)"
				visible="${n.insights.visible}"
				enabled="${n.insights.enabled}"
			>
				<layoutData>
					<OverflowToolbarLayoutData priority="AlwaysOverflow" />
				</layoutData>
			</Button>
		</mdcat:ActionToolbarAction>`}return e}function y(t){if(t.useBasicSearch){return $`<mdcat:ActionToolbarAction xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:macroTable="sap.fe.macros.table">
						<macroTable:BasicSearch id="${t.filterBarId}" useDraftEditState="${t._collectionIsDraftEnabled}"/>
					</mdcat:ActionToolbarAction>`}return""}function I(t){if(t.enableFullScreen){return $`<mdcat:ActionToolbarAction xmlns:mdcat="sap.ui.mdc.actiontoolbar" xmlns:macroTable="sap.fe.macros.table">
						<macroTable:TableFullScreenDialog id="${m([t.id,"StandardAction","FullScreen"])}" />
					</mdcat:ActionToolbarAction>`}return""}function S(t){return y(t)+F(t)+E(t)+I(t)}d.getTableActionTemplate=S;return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/BasicSearch-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/core/templating/FilterHelper", "sap/fe/core/type/TypeUtil", "sap/m/SearchField", "sap/ui/core/Control"], function (ClassSupport, FilterHelper, TypeUtil, SearchField, Control) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  var getEditStatusFilter = FilterHelper.getEditStatusFilter;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let BasicSearch = (_dec = defineUI5Class("sap.fe.macros.table.BasicSearch"), _dec2 = implementInterface("sap.ui.mdc.IFilter"), _dec3 = event( /*{ conditionsBased: {
                                                                                                                                                type: "boolean"
                                                                                                                                                }}*/), _dec4 = event( /*{
                                                                                                                                                                      conditions: {
                                                                                                                                                                      type: "object"
                                                                                                                                                                      }
                                                                                                                                                                      }*/), _dec5 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false
  }), _dec6 = property({
    type: "boolean"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(BasicSearch, _Control);
    function BasicSearch() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_mdc_IFilter", _descriptor, _assertThisInitialized(_this));
      _this.__implements__sap_ui_mdc_IFilterSource = true;
      _initializerDefineProperty(_this, "filterChanged", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "search", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filter", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useDraftEditState", _descriptor5, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = BasicSearch.prototype;
    _proto.init = function init() {
      this.setAggregation("filter", new SearchField({
        placeholder: "{sap.fe.i18n>M_FILTERBAR_SEARCH}",
        search: () => {
          this.fireEvent("search");
        }
      }));
    };
    _proto.getConditions = function getConditions() {
      if (this.useDraftEditState) {
        return getEditStatusFilter();
      }
      return undefined;
    };
    _proto.getTypeUtil = function getTypeUtil() {
      return TypeUtil;
    };
    _proto.getPropertyInfoSet = function getPropertyInfoSet() {
      if (this.useDraftEditState) {
        return [{
          name: "$editState",
          path: "$editState",
          groupLabel: "",
          group: "",
          typeConfig: TypeUtil.getTypeConfig("sap.ui.model.odata.type.String", {}, {}),
          dataType: "sap.ui.model.odata.type.String",
          hiddenFilter: false
        }];
      }
      return [];
    };
    _proto.getSearch = function getSearch() {
      return this.filter.getValue();
    };
    _proto.validate = function validate() {
      return Promise.resolve();
    };
    BasicSearch.render = function render(oRm, oControl) {
      oRm.openStart("div", oControl);
      oRm.openEnd();
      oRm.renderControl(oControl.filter);
      oRm.close("div");
    };
    return BasicSearch;
  }(Control), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_mdc_IFilter", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "filterChanged", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "search", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filter", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "useDraftEditState", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  })), _class2)) || _class);
  return BasicSearch;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/BasicSearch", ["sap/fe/core/helpers/ClassSupport","sap/fe/core/templating/FilterHelper","sap/fe/core/type/TypeUtil","sap/m/SearchField","sap/ui/core/Control"],function(e,t,r,i,n){"use strict";var a,l,o,u,f,s,c,p,d,b,g,m,h;var y=t.getEditStatusFilter;var _=e.property;var v=e.implementInterface;var S=e.event;var w=e.defineUI5Class;var z=e.aggregation;function E(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function C(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function F(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;I(e,t)}function I(e,t){I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return I(e,t)}function O(e,t,r,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function P(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let j=(a=w("sap.fe.macros.table.BasicSearch"),l=v("sap.ui.mdc.IFilter"),o=S(),u=S(),f=z({type:"sap.ui.core.Control",multiple:false}),s=_({type:"boolean"}),a(c=(p=function(e){F(t,e);function t(){var t;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++){i[n]=arguments[n]}t=e.call(this,...i)||this;E(t,"__implements__sap_ui_mdc_IFilter",d,C(t));t.__implements__sap_ui_mdc_IFilterSource=true;E(t,"filterChanged",b,C(t));E(t,"search",g,C(t));E(t,"filter",m,C(t));E(t,"useDraftEditState",h,C(t));return t}var n=t.prototype;n.init=function e(){this.setAggregation("filter",new i({placeholder:"{sap.fe.i18n>M_FILTERBAR_SEARCH}",search:()=>{this.fireEvent("search")}}))};n.getConditions=function e(){if(this.useDraftEditState){return y()}return undefined};n.getTypeUtil=function e(){return r};n.getPropertyInfoSet=function e(){if(this.useDraftEditState){return[{name:"$editState",path:"$editState",groupLabel:"",group:"",typeConfig:r.getTypeConfig("sap.ui.model.odata.type.String",{},{}),dataType:"sap.ui.model.odata.type.String",hiddenFilter:false}]}return[]};n.getSearch=function e(){return this.filter.getValue()};n.validate=function e(){return Promise.resolve()};t.render=function e(t,r){t.openStart("div",r);t.openEnd();t.renderControl(r.filter);t.close("div")};return t}(n),d=O(p.prototype,"__implements__sap_ui_mdc_IFilter",[l],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),b=O(p.prototype,"filterChanged",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),g=O(p.prototype,"search",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),m=O(p.prototype,"filter",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),h=O(p.prototype,"useDraftEditState",[s],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),p))||c);return j},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/QuickFilterSelector.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/FilterHelper", "sap/m/SegmentedButton", "sap/m/SegmentedButtonItem", "sap/m/Select", "sap/ui/core/InvisibleText", "sap/ui/core/Item", "sap/fe/core/jsx-runtime/jsx"], function (BuildingBlockSupport, RuntimeBuildingBlock, MetaModelConverter, BindingToolkit, StableIdHelper, DataModelPathHelper, FilterHelper, SegmentedButton, SegmentedButtonItem, Select, InvisibleText, Item, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
  var _exports = {};
  var isSelectionVariant = FilterHelper.isSelectionVariant;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getTargetNavigationPath = DataModelPathHelper.getTargetNavigationPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var generate = StableIdHelper.generate;
  var pathInModel = BindingToolkit.pathInModel;
  var notEqual = BindingToolkit.notEqual;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let QuickFilterSelector = (_dec = defineBuildingBlock({
    name: "QuickFilterSelector",
    namespace: "sap.fe.macros.table"
  }), _dec2 = blockAttribute({
    type: "string",
    required: true
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec5 = blockAttribute({
    type: "object",
    required: true
  }), _dec6 = blockAttribute({
    type: "function"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(QuickFilterSelector, _RuntimeBuildingBlock);
    function QuickFilterSelector(props) {
      var _this;
      _this = _RuntimeBuildingBlock.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterConfiguration", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onSelectionChange", _descriptor5, _assertThisInitialized(_this));
      return _this;
    }

    /**
     * Generates the selector as a SegmentedButton.
     *
     * @returns  The SegmentedButton
     */
    _exports = QuickFilterSelector;
    var _proto = QuickFilterSelector.prototype;
    _proto.getSegmentedButtonSelector = function getSegmentedButtonSelector() {
      const items = this.filterConfiguration.paths.map((path, index) => {
        return _jsx(SegmentedButtonItem, {
          ...this.getSelectorItemProperties(index)
        });
      });
      return _jsx(SegmentedButton, {
        id: this.id,
        enabled: notEqual(pathInModel("hasPendingFilters", "pageInternal"), true),
        ariaLabelledBy: [this.getSelectorAriaLabelledById()],
        items: items,
        selectionChange: event => {
          var _this$onSelectionChan;
          (_this$onSelectionChan = this.onSelectionChange) === null || _this$onSelectionChan === void 0 ? void 0 : _this$onSelectionChan.call(this, event);
        }
      });
    }

    /**
     * Generates the selector as a Select.
     *
     * @returns  The Select
     */;
    _proto.getSelectSelector = function getSelectSelector() {
      const items = this.filterConfiguration.paths.map((path, index) => {
        return _jsx(Item, {
          ...this.getSelectorItemProperties(index)
        });
      });
      return _jsx(Select, {
        id: this.id,
        enabled: notEqual(pathInModel("hasPendingFilters", "pageInternal"), true),
        ariaLabelledBy: [this.getSelectorAriaLabelledById()],
        autoAdjustWidth: true,
        items: items,
        change: event => {
          var _this$onSelectionChan2;
          (_this$onSelectionChan2 = this.onSelectionChange) === null || _this$onSelectionChan2 === void 0 ? void 0 : _this$onSelectionChan2.call(this, event);
        }
      });
    }

    /**
     * Gets the properties of the selector Item.
     *
     * @param index The index of the item into the selector
     * @returns  The properties
     */;
    _proto.getSelectorItemProperties = function getSelectorItemProperties(index) {
      return {
        key: this.filterConfiguration.paths[index].annotationPath,
        text: this.getSelectorItemText(index)
      };
    }

    /**
     * Generates the Id of the InvisibleText control.
     *
     * @returns  The Id
     */;
    _proto.getSelectorAriaLabelledById = function getSelectorAriaLabelledById() {
      return generate([this.id, "AriaText"]);
    }

    /**
     * Generates the text for the selector item.
     *
     * @param index The index of the item into the selector
     * @returns  The text
     */;
    _proto.getSelectorItemText = function getSelectorItemText(index) {
      var _selectionVariant$Tex;
      const countText = ` ({internal>quickFilters/counts/${index}})`;
      const dataTableModelPath = getInvolvedDataModelObjects(this.metaPath);
      const selectionVariant = enhanceDataModelPath(dataTableModelPath, this.filterConfiguration.paths[index].annotationPath).targetObject;
      const text = (selectionVariant === null || selectionVariant === void 0 ? void 0 : (_selectionVariant$Tex = selectionVariant.Text) === null || _selectionVariant$Tex === void 0 ? void 0 : _selectionVariant$Tex.toString()) ?? "";
      return `${text}${this.filterConfiguration.showCounts ? countText : ""}`;
    }

    /**
     * Registers the SideEffects control that must be executed when table cells that are related to configured filter(s) change.
     *
     * @param appComponent The appComponent
     */;
    _proto.registerSideEffectForQuickFilter = function registerSideEffectForQuickFilter(appComponent) {
      var _dataVisualizationMod;
      const dataVisualizationModelPath = getInvolvedDataModelObjects(this.metaPath, this.contextPath);
      const viewEntityType = (_dataVisualizationMod = dataVisualizationModelPath.contextLocation) === null || _dataVisualizationMod === void 0 ? void 0 : _dataVisualizationMod.targetEntityType.fullyQualifiedName;
      const tableNavigationPath = getTargetNavigationPath(dataVisualizationModelPath, true);
      const selectionVariantPaths = this.filterConfiguration.paths.map(info => info.annotationPath);
      if (tableNavigationPath && viewEntityType) {
        const sourceProperties = new Set();
        for (const selectionVariantPath of selectionVariantPaths) {
          const selectionVariant = enhanceDataModelPath(dataVisualizationModelPath, selectionVariantPath).targetObject; // We authorize SelectionVariant without SelectOptions even if it's not compliant with vocabularies
          if (selectionVariant.SelectOptions && isSelectionVariant(selectionVariant)) {
            selectionVariant.SelectOptions.forEach(selectOption => {
              var _selectOption$Propert;
              const propertyPath = (_selectOption$Propert = selectOption.PropertyName) === null || _selectOption$Propert === void 0 ? void 0 : _selectOption$Propert.value;
              if (propertyPath) {
                const propertyModelPath = enhanceDataModelPath(dataVisualizationModelPath, propertyPath);
                sourceProperties.add(getTargetObjectPath(propertyModelPath, true));
              }
            });
          }
        }
        appComponent.getSideEffectsService().addControlSideEffects(viewEntityType, {
          sourceProperties: Array.from(sourceProperties),
          targetEntities: [{
            $NavigationPropertyPath: tableNavigationPath
          }],
          sourceControlId: this.id
        });
      }
    }

    /**
     * Creates the invisibleText for the accessibility compliance.
     *
     * @returns  The InvisibleText
     */;
    _proto.getAccessibilityControl = function getAccessibilityControl() {
      const textBinding = `{sap.fe.i18n>M_TABLE_QUICKFILTER_ARIA}`;
      const invisibleText = _jsx(InvisibleText, {
        text: textBinding,
        id: this.getSelectorAriaLabelledById()
      });

      //Adds the invisibleText into the static, hidden area UI area container.
      invisibleText.toStatic();
      return invisibleText;
    };
    _proto.getContent = function getContent(view, appComponent) {
      if (this.filterConfiguration.showCounts) {
        this.registerSideEffectForQuickFilter(appComponent);
      }
      /**
       * The number of views defined for a table determines the UI control that lets users switch the table views:
       *  - A segmented button for a maximum of three views
       *  - A select control for four or more views.
       */
      const selector = this.filterConfiguration.paths.length > 3 ? this.getSelectSelector() : this.getSegmentedButtonSelector();
      selector.addDependent(this.getAccessibilityControl());
      return selector;
    };
    return QuickFilterSelector;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "filterConfiguration", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "onSelectionChange", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = QuickFilterSelector;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/QuickFilterSelector.block", ["sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/FilterHelper","sap/m/SegmentedButton","sap/m/SegmentedButtonItem","sap/m/Select","sap/ui/core/InvisibleText","sap/ui/core/Item","sap/fe/core/jsx-runtime/jsx"],function(e,t,i,r,n,o,a,l,u,c,s,f,d){"use strict";var p,h,g,b,v,m,S,y,P,C,I,B,w;var x={};var j=a.isSelectionVariant;var O=o.getTargetObjectPath;var k=o.getTargetNavigationPath;var z=o.enhanceDataModelPath;var A=n.generate;var E=r.pathInModel;var T=r.notEqual;var F=i.getInvolvedDataModelObjects;var L=e.defineBuildingBlock;var M=e.blockAttribute;function _(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function q(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function D(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Q(e,t)}function Q(e,t){Q=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return Q(e,t)}function N(e,t,i,r,n){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function R(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let $=(p=L({name:"QuickFilterSelector",namespace:"sap.fe.macros.table"}),h=M({type:"string",required:true}),g=M({type:"sap.ui.model.Context",required:true}),b=M({type:"sap.ui.model.Context",required:true}),v=M({type:"object",required:true}),m=M({type:"function"}),p(S=(y=function(e){D(t,e);function t(t){var i;i=e.call(this,t)||this;_(i,"id",P,q(i));_(i,"metaPath",C,q(i));_(i,"contextPath",I,q(i));_(i,"filterConfiguration",B,q(i));_(i,"onSelectionChange",w,q(i));return i}x=t;var i=t.prototype;i.getSegmentedButtonSelector=function e(){const t=this.filterConfiguration.paths.map((e,t)=>d(u,{...this.getSelectorItemProperties(t)}));return d(l,{id:this.id,enabled:T(E("hasPendingFilters","pageInternal"),true),ariaLabelledBy:[this.getSelectorAriaLabelledById()],items:t,selectionChange:e=>{var t;(t=this.onSelectionChange)===null||t===void 0?void 0:t.call(this,e)}})};i.getSelectSelector=function e(){const t=this.filterConfiguration.paths.map((e,t)=>d(f,{...this.getSelectorItemProperties(t)}));return d(c,{id:this.id,enabled:T(E("hasPendingFilters","pageInternal"),true),ariaLabelledBy:[this.getSelectorAriaLabelledById()],autoAdjustWidth:true,items:t,change:e=>{var t;(t=this.onSelectionChange)===null||t===void 0?void 0:t.call(this,e)}})};i.getSelectorItemProperties=function e(t){return{key:this.filterConfiguration.paths[t].annotationPath,text:this.getSelectorItemText(t)}};i.getSelectorAriaLabelledById=function e(){return A([this.id,"AriaText"])};i.getSelectorItemText=function e(t){var i;const r=` ({internal>quickFilters/counts/${t}})`;const n=F(this.metaPath);const o=z(n,this.filterConfiguration.paths[t].annotationPath).targetObject;const a=(o===null||o===void 0?void 0:(i=o.Text)===null||i===void 0?void 0:i.toString())??"";return`${a}${this.filterConfiguration.showCounts?r:""}`};i.registerSideEffectForQuickFilter=function e(t){var i;const r=F(this.metaPath,this.contextPath);const n=(i=r.contextLocation)===null||i===void 0?void 0:i.targetEntityType.fullyQualifiedName;const o=k(r,true);const a=this.filterConfiguration.paths.map(e=>e.annotationPath);if(o&&n){const e=new Set;for(const t of a){const i=z(r,t).targetObject;if(i.SelectOptions&&j(i)){i.SelectOptions.forEach(t=>{var i;const n=(i=t.PropertyName)===null||i===void 0?void 0:i.value;if(n){const t=z(r,n);e.add(O(t,true))}})}}t.getSideEffectsService().addControlSideEffects(n,{sourceProperties:Array.from(e),targetEntities:[{$NavigationPropertyPath:o}],sourceControlId:this.id})}};i.getAccessibilityControl=function e(){const t=`{sap.fe.i18n>M_TABLE_QUICKFILTER_ARIA}`;const i=d(s,{text:t,id:this.getSelectorAriaLabelledById()});i.toStatic();return i};i.getContent=function e(t,i){if(this.filterConfiguration.showCounts){this.registerSideEffectForQuickFilter(i)}const r=this.filterConfiguration.paths.length>3?this.getSelectSelector():this.getSegmentedButtonSelector();r.addDependent(this.getAccessibilityControl());return r};return t}(t),P=N(y.prototype,"id",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),C=N(y.prototype,"metaPath",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),I=N(y.prototype,"contextPath",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),B=N(y.prototype,"filterConfiguration",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),w=N(y.prototype,"onSelectionChange",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),y))||S);x=$;return x},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/Table.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/CommonUtils", "sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/core/converters/ManifestSettings", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/macros/internal/helpers/TableTemplating", "sap/ui/core/library", "../CommonHelper", "../internal/helpers/ActionHelper", "../MacroAPI", "./ActionsTemplating", "./TableHelper"], function (Log, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, CommonUtils, DataField, DataVisualization, ManifestSettings, MetaModelConverter, ModelHelper, StableIdHelper, TypeGuards, DataModelPathHelper, TableTemplating, library, CommonHelper, ActionHelper, MacroAPI, ActionsTemplating, TableHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _dec64, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _descriptor50, _descriptor51, _descriptor52, _descriptor53, _descriptor54, _descriptor55, _descriptor56, _descriptor57, _descriptor58, _descriptor59, _descriptor60, _descriptor61, _descriptor62, _descriptor63;
  var _exports = {};
  var getTableActionTemplate = ActionsTemplating.getTableActionTemplate;
  var TitleLevel = library.TitleLevel;
  var buildExpressionForHeaderVisible = TableTemplating.buildExpressionForHeaderVisible;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var isSingleton = TypeGuards.isSingleton;
  var generate = StableIdHelper.generate;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var CreationMode = ManifestSettings.CreationMode;
  var getVisualizationsFromPresentationVariant = DataVisualization.getVisualizationsFromPresentationVariant;
  var getDataVisualizationConfiguration = DataVisualization.getDataVisualizationConfiguration;
  var isDataFieldForAnnotation = DataField.isDataFieldForAnnotation;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  var blockAggregation = BuildingBlockSupport.blockAggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const setCustomActionProperties = function (childAction) {
    var _act$getAttribute;
    let menuContentActions = null;
    const act = childAction;
    let menuActions = [];
    const actionKey = (_act$getAttribute = act.getAttribute("key")) === null || _act$getAttribute === void 0 ? void 0 : _act$getAttribute.replace("InlineXML_", "");
    // For the actionGroup we authorize the both entries <sap.fe.macros:ActionGroup> (compliant with old FPM examples) and <sap.fe.macros.table:ActionGroup>
    if (act.children.length && act.localName === "ActionGroup" && act.namespaceURI && ["sap.fe.macros", "sap.fe.macros.table"].indexOf(act.namespaceURI) > -1) {
      const actionsToAdd = Array.prototype.slice.apply(act.children);
      let actionIdx = 0;
      menuContentActions = actionsToAdd.reduce((acc, actToAdd) => {
        var _actToAdd$getAttribut;
        const actionKeyAdd = ((_actToAdd$getAttribut = actToAdd.getAttribute("key")) === null || _actToAdd$getAttribut === void 0 ? void 0 : _actToAdd$getAttribut.replace("InlineXML_", "")) || actionKey + "_Menu_" + actionIdx;
        const curOutObject = {
          key: actionKeyAdd,
          text: actToAdd.getAttribute("text"),
          __noWrap: true,
          press: actToAdd.getAttribute("press"),
          requiresSelection: actToAdd.getAttribute("requiresSelection") === "true",
          enabled: actToAdd.getAttribute("enabled") === null ? true : actToAdd.getAttribute("enabled")
        };
        acc[curOutObject.key] = curOutObject;
        actionIdx++;
        return acc;
      }, {});
      menuActions = Object.values(menuContentActions).slice(-act.children.length).map(function (menuItem) {
        return menuItem.key;
      });
    }
    return {
      key: actionKey,
      text: act.getAttribute("text"),
      position: {
        placement: act.getAttribute("placement"),
        anchor: act.getAttribute("anchor")
      },
      __noWrap: true,
      press: act.getAttribute("press"),
      requiresSelection: act.getAttribute("requiresSelection") === "true",
      enabled: act.getAttribute("enabled") === null ? true : act.getAttribute("enabled"),
      menu: menuActions.length ? menuActions : null,
      menuContentActions: menuContentActions
    };
  };
  const setCustomColumnProperties = function (childColumn, aggregationObject) {
    var _childColumn$children, _childColumn$getAttri;
    aggregationObject.key = aggregationObject.key.replace("InlineXML_", "");
    childColumn.setAttribute("key", aggregationObject.key);
    return {
      // Defaults are to be defined in Table.ts
      key: aggregationObject.key,
      type: "Slot",
      width: childColumn.getAttribute("width"),
      importance: childColumn.getAttribute("importance"),
      horizontalAlign: childColumn.getAttribute("horizontalAlign"),
      availability: childColumn.getAttribute("availability"),
      header: childColumn.getAttribute("header"),
      template: ((_childColumn$children = childColumn.children[0]) === null || _childColumn$children === void 0 ? void 0 : _childColumn$children.outerHTML) || "",
      properties: childColumn.getAttribute("properties") ? (_childColumn$getAttri = childColumn.getAttribute("properties")) === null || _childColumn$getAttri === void 0 ? void 0 : _childColumn$getAttri.split(",") : undefined,
      position: {
        placement: childColumn.getAttribute("placement") || childColumn.getAttribute("positionPlacement"),
        //positionPlacement is kept for backwards compatibility
        anchor: childColumn.getAttribute("anchor") || childColumn.getAttribute("positionAnchor") //positionAnchor is kept for backwards compatibility
      }
    };
  };
  let TableBlock = (_dec = defineBuildingBlock({
    name: "Table",
    namespace: "sap.fe.macros.internal",
    publicNamespace: "sap.fe.macros",
    returnTypes: ["sap.fe.macros.table.TableAPI"]
  }), _dec2 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: true
  }), _dec5 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec6 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec7 = blockAttribute({
    type: "number",
    isPublic: true
  }), _dec8 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec9 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec10 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec11 = blockAttribute({
    type: "sap.ui.core.TitleLevel",
    isPublic: true
  }), _dec12 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec13 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec14 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec15 = blockAttribute({
    type: "string|boolean",
    isPublic: true
  }), _dec16 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec17 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec18 = blockAttribute({
    type: "boolean",
    isPublic: true
  }), _dec19 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec20 = blockAttribute({
    type: "string",
    isPublic: true
  }), _dec21 = blockAttribute({
    type: "sap.ui.model.Context",
    isPublic: false,
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty", "Singleton"]
  }), _dec22 = blockAttribute({
    type: "string"
  }), _dec23 = blockAttribute({
    type: "boolean"
  }), _dec24 = blockAttribute({
    type: "string"
  }), _dec25 = blockAttribute({
    type: "boolean"
  }), _dec26 = blockAttribute({
    type: "string"
  }), _dec27 = blockAttribute({
    type: "string"
  }), _dec28 = blockAttribute({
    type: "string"
  }), _dec29 = blockAttribute({
    type: "string"
  }), _dec30 = blockAttribute({
    type: "string"
  }), _dec31 = blockAttribute({
    type: "boolean"
  }), _dec32 = blockAttribute({
    type: "boolean"
  }), _dec33 = blockAttribute({
    type: "boolean"
  }), _dec34 = blockAttribute({
    type: "string"
  }), _dec35 = blockAttribute({
    type: "string"
  }), _dec36 = blockAttribute({
    type: "number"
  }), _dec37 = blockAttribute({
    type: "boolean"
  }), _dec38 = blockAttribute({
    type: "boolean"
  }), _dec39 = blockAttribute({
    type: "boolean"
  }), _dec40 = blockAttribute({
    type: "string"
  }), _dec41 = blockAttribute({
    type: "string"
  }), _dec42 = blockAttribute({
    type: "string"
  }), _dec43 = blockAttribute({
    type: "string"
  }), _dec44 = blockAttribute({
    type: "string"
  }), _dec45 = blockAttribute({
    type: "string"
  }), _dec46 = blockAttribute({
    type: "boolean"
  }), _dec47 = blockAttribute({
    type: "boolean"
  }), _dec48 = blockAttribute({
    type: "number"
  }), _dec49 = blockAttribute({
    type: "string"
  }), _dec50 = blockAttribute({
    type: "object",
    isPublic: true
  }), _dec51 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec52 = blockAttribute({
    type: "string"
  }), _dec53 = blockAttribute({
    type: "string"
  }), _dec54 = blockAttribute({
    type: "boolean"
  }), _dec55 = blockAggregation({
    type: "sap.fe.macros.internal.table.Action | sap.fe.macros.internal.table.ActionGroup",
    isPublic: true,
    processAggregations: setCustomActionProperties
  }), _dec56 = blockAggregation({
    type: "sap.fe.macros.internal.table.Column",
    isPublic: true,
    hasVirtualNode: true,
    processAggregations: setCustomColumnProperties
  }), _dec57 = blockEvent(), _dec58 = blockEvent(), _dec59 = blockEvent(), _dec60 = blockEvent(), _dec61 = blockEvent(), _dec62 = blockEvent(), _dec63 = blockEvent(), _dec64 = blockEvent(), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(TableBlock, _BuildingBlockBase);
    //  *************** Public & Required Attributes ********************

    //  *************** Public Attributes ********************
    /**
     *The `busy` mode of table
     */

    /**
     * Parameter used to show the fullScreen button on the table.
     */

    /**
     * Enable export to file
     */

    /**
     * Number of columns that are fixed on the left. Only columns which are not fixed can be scrolled horizontally.
     */

    /**
     * Enable export to file
     */

    /**
     * The control ID of the FilterBar that is used to filter the rows of the table.
     */

    /**
     * Specifies header text that is shown in table.
     */

    /**
     * Defines the "aria-level" of the table header
     */

    /**
     * Controls if the header text should be shown or not
     */

    /**
     * Personalization Mode
     */

    /**
     * Specifies whether the table should be read-only or not.
     */

    /**
     * Allows to choose the Table type. Allowed values are `ResponsiveTable` or `GridTable`.
     */

    /**
     * Specifies whether the table is displayed with condensed layout (true/false). The default setting is `false`.
     */

    /**
     * Specifies the selection mode (None,Single,Multi,Auto)
     */

    //  *************** Private & Required Attributes ********************

    //  *************** Private Attributes ********************

    /**
     * Setting to determine if the new row should be created at the end or beginning
     */

    /**
     * Creation Mode to be passed to the onCreate handler. Values: ["Inline", "NewPage"]
     */

    /**
     * Specifies the full path and function name of a custom validation function.
     */

    /**
     * Specifies whether the button is hidden when no data has been entered yet in the row (true/false). The default setting is `false`.
     */

    /**
     * The control ID of the FilterBar that is used internally to filter the rows of the table.
     */

    /**
     * ONLY FOR RESPONSIVE TABLE: Setting to define the checkbox in the column header: Allowed values are `Default` or `ClearAll`. If set to `Default`, the sap.m.Table control renders the Select All checkbox, otherwise the Deselect All button is rendered.
     */

    /**
     * Used for binding the table to a navigation path. Only the path is used for binding rows.
     */

    /**
     * Parameter which sets the noDataText for the mdc table
     */

    /**
     * Specifies the possible actions available on the table row (Navigation,null). The default setting is `undefined`
     */

    /**
     * ONLY FOR GRID TABLE: Number of indices which can be selected in a range. If set to 0, the selection limit is disabled, and the Select All checkbox appears instead of the Deselect All button.
     */

    // We require tableDefinition to be there even though it is not formally required

    /**
     * Event handler to react when the user chooses a row
     */

    /**
     * Event handler to react to the contextChange event of the table.
     */

    /**
     *  Event handler for change event.
     */

    /**
     * Event handler called when the user chooses an option of the segmented button in the ALP View
     */

    /**
     * Event handler to react to the stateChange event of the table.
     */

    /**
     * Event handler to react when the table selection changes
     */

    function TableBlock(props, controlConfiguration, settings) {
      var _this$contextPath, _this$tableDefinition2, _this$tableDefinition3;
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "metaPath", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "busy", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableFullScreen", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableExport", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "frozenColumnCount", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enablePaste", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBar", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "header", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerLevel", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerVisible", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "id", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isSearchable", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "personalization", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "readOnly", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "type", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useCondensedLayout", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionMode", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantManagement", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "collection", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_apiId", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "autoBindOnInit", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "columnEditMode", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "createAtEnd", _descriptor24, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "createNewAction", _descriptor25, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "creationMode", _descriptor26, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "createOutbound", _descriptor27, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "customValidationFunction", _descriptor28, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dataStateIndicatorFilter", _descriptor29, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "disableAddRowButtonForEmptyData", _descriptor30, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableAutoColumnWidth", _descriptor31, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableAutoScroll", _descriptor32, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "fieldMode", _descriptor33, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBarId", _descriptor34, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "inlineCreationRowCount", _descriptor35, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isAlp", _descriptor36, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isCompactType", _descriptor37, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isOptimizedForSmallDevice", _descriptor38, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "multiSelectMode", _descriptor39, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationPath", _descriptor40, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "noDataText", _descriptor41, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "rowAction", _descriptor42, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tableType", _descriptor43, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "updatablePropertyPath", _descriptor44, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useBasicSearch", _descriptor45, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "searchable", _descriptor46, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionLimit", _descriptor47, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showCreate", _descriptor48, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tableDefinition", _descriptor49, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tableDefinitionContext", _descriptor50, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tableDelegate", _descriptor51, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tabTitle", _descriptor52, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "visible", _descriptor53, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actions", _descriptor54, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "columns", _descriptor55, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "rowPress", _descriptor56, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onContextChange", _descriptor57, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onChange", _descriptor58, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "onSegmentedButtonPressed", _descriptor59, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantSaved", _descriptor60, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor61, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionChange", _descriptor62, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantSelected", _descriptor63, _assertThisInitialized(_this));
      _this.getTableType = () => {
        const collection = _this.collection.getObject();
        switch (_this.tableType) {
          case "GridTable":
            return xml`<mdcTable:GridTableType
                rowCountMode="${_this.tableDefinition.control.rowCountMode}"
                rowCount="${_this.tableDefinition.control.rowCount}"
                selectionLimit="${_this.selectionLimit}"
				fixedColumnCount="${_this.tableDefinition.control.frozenColumnCount}"
            />`;
          case "TreeTable":
            return xml`<mdcTable:TreeTableType
                rowCountMode="${_this.tableDefinition.control.rowCountMode}"
                rowCount="${_this.tableDefinition.control.rowCount}"
				fixedColumnCount="${_this.tableDefinition.control.frozenColumnCount}"
            />`;
          default:
            const growingMode = collection.$kind === "EntitySet" ? "Scroll" : undefined;
            return xml`<mdcTable:ResponsiveTableType
                showDetailsButton="true"
                detailsButtonSetting="{=['Low', 'Medium', 'None']}"
                growingMode="${growingMode}"
            />`;
        }
      };
      _this.getDependents = () => {
        var _this$tableDefinition;
        let dependents = ``;
        if (!_this.readOnly && (_this$tableDefinition = _this.tableDefinition) !== null && _this$tableDefinition !== void 0 && _this$tableDefinition.columns) {
          for (const column of _this.tableDefinition.columns) {
            if (column.availability === "Default" && "annotationPath" in column) {
              dependents += _this.getValueHelp(column);
            }
          }
        }
        const standardActions = _this.tableDefinition.annotation.standardActions.actions;
        if (_this.tableDefinition.annotation.standardActions.isInsertUpdateTemplated && standardActions.create.isTemplated === "true") {
          dependents += xml`<control:CommandExecution
                                execute="${TableHelper.pressEventForCreateButton(_assertThisInitialized(_this), true)}"
                                visible="${standardActions.create.visible}"
                                enabled="${standardActions.create.enabled}"
                                command="Create"
                            />`;
        }
        if (standardActions.delete.isTemplated === "true") {
          var _ref, _ref$annotations, _ref$annotations$UI, _this$collectionEntit, _this$collectionEntit2;
          const headerInfo = (_ref = ((_this$collectionEntit = _this.collectionEntity) === null || _this$collectionEntit === void 0 ? void 0 : _this$collectionEntit.entityType) || ((_this$collectionEntit2 = _this.collectionEntity) === null || _this$collectionEntit2 === void 0 ? void 0 : _this$collectionEntit2.targetType)) === null || _ref === void 0 ? void 0 : (_ref$annotations = _ref.annotations) === null || _ref$annotations === void 0 ? void 0 : (_ref$annotations$UI = _ref$annotations.UI) === null || _ref$annotations$UI === void 0 ? void 0 : _ref$annotations$UI.HeaderInfo;
          dependents += xml`<control:CommandExecution
                        execute="${TableHelper.pressEventForDeleteButton(_assertThisInitialized(_this), _this.collectionEntity.name, headerInfo, _this.contextObjectPath)}"
                        visible="${standardActions.delete.visible}"
                        enabled="${standardActions.delete.enabled}"
                        command="DeleteEntry"
                        />`;
        }
        for (const actionName in _this.tableDefinition.commandActions) {
          const action = _this.tableDefinition.commandActions[actionName];
          dependents += `${_this.getActionCommand(actionName, action)}`;
        }
        dependents += `<control:CommandExecution execute="TableRuntime.displayTableSettings" command="TableSettings" />`;
        if (_this.variantManagement === "None") {
          dependents += `<!-- Persistence provider offers persisting personalization changes without variant management -->
			<p13n:PersistenceProvider id="${generate([_this.id, "PersistenceProvider"])}" for="${_this.id}" />`;
        }
        return xml`${dependents}`;
      };
      _this.getActions = () => {
        let dependents = "";
        if (_this.onSegmentedButtonPressed) {
          dependents = `<mdcat:ActionToolbarAction
            layoutInformation="{
                    aggregationName: 'end',
                    alignment: 'End'
                }"
            visible="{= \${pageInternal>alpContentView} === 'Table' }"
        >
            <SegmentedButton
                id="${generate([_this.id, "SegmentedButton", "TemplateContentView"])}"
                select="${_this.onSegmentedButtonPressed}"
                selectedKey="{pageInternal>alpContentView}"
            >
                <items>`;
          if (CommonHelper.isDesktop()) {
            dependents += `<SegmentedButtonItem
                            tooltip="{sap.fe.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}"
							key = "Hybrid"
							icon = "sap-icon://chart-table-view"
							/>`;
          }
          dependents += `<SegmentedButtonItem
                        tooltip="{sap.fe.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}"
                        key="Chart"
                        icon="sap-icon://bar-chart"
                    />
                    <SegmentedButtonItem
                        tooltip="{sap.fe.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}"
                        key="Table"
                        icon="sap-icon://table-view"
                    />
                </items>
            </SegmentedButton>
        </mdcat:ActionToolbarAction>`;
        }
        dependents += `${getTableActionTemplate(_assertThisInitialized(_this))}`;
        return xml`${dependents}`;
      };
      const contextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
      _this.contextObjectPath = contextObjectPath;
      const pageContext = settings.bindingContexts.converterContext;
      _this.pageTemplateType = pageContext === null || pageContext === void 0 ? void 0 : pageContext.getObject("/templateType");
      const tableDefinition = TableBlock.setUpTableDefinition(_assertThisInitialized(_this), settings);
      _this.collection = settings.models.metaModel.createBindingContext(tableDefinition.annotation.collection);
      _this.convertedMetaData = _this.contextObjectPath.convertedTypes;
      _this.collectionEntity = _this.convertedMetaData.resolvePath(_this.tableDefinition.annotation.collection).target;
      _this.setUpId();
      const converterContext = _this.getConverterContext(_this.contextObjectPath, (_this$contextPath = _this.contextPath) === null || _this$contextPath === void 0 ? void 0 : _this$contextPath.getPath(), settings);
      _this._collectionIsDraftEnabled = converterContext.getManifestWrapper().isFilterBarHidden() && ModelHelper.isDraftNode(_this.collectionEntity) || ModelHelper.isDraftRoot(_this.collectionEntity);
      _this.selectionMode = _this.tableDefinition.annotation.selectionMode;
      _this.enableFullScreen = _this.tableDefinition.control.enableFullScreen;
      _this.enableExport = _this.tableDefinition.control.enableExport;
      _this.enablePaste = _this.tableDefinition.annotation.standardActions.actions.paste.enabled;
      _this.frozenColumnCount = _this.tableDefinition.control.frozenColumnCount;
      _this.updatablePropertyPath = _this.tableDefinition.annotation.standardActions.updatablePropertyPath;
      _this.type = _this.tableDefinition.control.type;
      _this.disableAddRowButtonForEmptyData ??= _this.tableDefinition.control.disableAddRowButtonForEmptyData;
      _this.customValidationFunction ??= _this.tableDefinition.control.customValidationFunction;
      _this.headerVisible ??= _this.tableDefinition.control.headerVisible;
      _this.searchable ??= _this.tableDefinition.annotation.searchable;
      _this.inlineCreationRowCount ??= _this.tableDefinition.control.inlineCreationRowCount;
      _this.header ??= _this.tableDefinition.annotation.title;
      _this.selectionLimit ??= _this.tableDefinition.control.selectionLimit;
      _this.isCompactType ??= _this.tableDefinition.control.isCompactType;
      _this.creationMode ??= _this.tableDefinition.annotation.create.mode;
      _this.createAtEnd ??= _this.tableDefinition.annotation.create.append;
      _this.createOutbound ??= _this.tableDefinition.annotation.create.outbound;
      _this.createNewAction ??= _this.tableDefinition.annotation.create.newAction;
      _this.createOutboundDetail ??= _this.tableDefinition.annotation.create.outboundDetail;
      _this.personalization ??= _this.tableDefinition.annotation.p13nMode;
      _this.variantManagement ??= _this.tableDefinition.annotation.variantManagement;
      _this.enableAutoColumnWidth ??= true;
      _this.dataStateIndicatorFilter ??= _this.tableDefinition.control.dataStateIndicatorFilter;
      _this.isOptimizedForSmallDevice ??= CommonUtils.isSmallDevice();
      _this.navigationPath = tableDefinition.annotation.navigationPath;
      if (tableDefinition.annotation.collection.startsWith("/") && isSingleton(contextObjectPath.startingEntitySet)) {
        tableDefinition.annotation.collection = _this.navigationPath;
      }
      _this.setReadOnly();
      if (_this.rowPress) {
        _this.rowAction = "Navigation";
      }
      _this.rowPress ??= (_this$tableDefinition2 = _this.tableDefinition.annotation.row) === null || _this$tableDefinition2 === void 0 ? void 0 : _this$tableDefinition2.press;
      _this.rowAction ??= (_this$tableDefinition3 = _this.tableDefinition.annotation.row) === null || _this$tableDefinition3 === void 0 ? void 0 : _this$tableDefinition3.action;
      if (_this.personalization === "false") {
        _this.personalization = undefined;
      } else if (_this.personalization === "true") {
        _this.personalization = "Sort,Column,Filter";
      }
      switch (_this.personalization) {
        case "false":
          _this.personalization = undefined;
          break;
        case "true":
          _this.personalization = "Sort,Column,Filter";
          break;
        default:
      }
      if (_this.isSearchable === false) {
        _this.searchable = false;
      } else {
        _this.searchable = _this.tableDefinition.annotation.searchable;
      }
      let useBasicSearch = false;

      // Note for the 'filterBar' property:
      // 1. ID relative to the view of the Table.
      // 2. Absolute ID.
      // 3. ID would be considered in association to TableAPI's ID.
      if (!_this.filterBar && !_this.filterBarId && _this.searchable) {
        // filterBar: Public property for building blocks
        // filterBarId: Only used as Internal private property for FE templates
        _this.filterBarId = generate([_this.id, "StandardAction", "BasicSearch"]);
        useBasicSearch = true;
      }
      // Internal properties
      _this.useBasicSearch = useBasicSearch;
      _this.tableType = _this.type;
      _this.showCreate = _this.tableDefinition.annotation.standardActions.actions.create.visible || true;
      _this.autoBindOnInit = _this.tableDefinition.annotation.autoBindOnInit;
      switch (_this.readOnly) {
        case true:
          _this.columnEditMode = "Display";
          break;
        case false:
          _this.columnEditMode = "Editable";
          break;
        default:
          _this.columnEditMode = undefined;
      }
      return _this;
    }

    /**
     * Returns the annotation path pointing to the visualization annotation (LineItem).
     *
     * @param contextObjectPath The datamodel object path for the table
     * @param converterContext The converter context
     * @returns The annotation path
     */
    _exports = TableBlock;
    TableBlock.getVisualizationPath = function getVisualizationPath(contextObjectPath, converterContext) {
      const metaPath = getContextRelativeTargetObjectPath(contextObjectPath);

      // fallback to default LineItem if metapath is not set
      if (!metaPath) {
        Log.error(`Missing meta path parameter for LineItem`);
        return `@${"com.sap.vocabularies.UI.v1.LineItem"}`;
      }
      if (contextObjectPath.targetObject.term === "com.sap.vocabularies.UI.v1.LineItem") {
        return metaPath; // MetaPath is already pointing to a LineItem
      }
      //Need to switch to the context related the PV or SPV
      const resolvedTarget = converterContext.getEntityTypeAnnotation(metaPath);
      let visualizations = [];
      switch (contextObjectPath.targetObject.term) {
        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          if (contextObjectPath.targetObject.PresentationVariant) {
            visualizations = getVisualizationsFromPresentationVariant(contextObjectPath.targetObject.PresentationVariant, metaPath, resolvedTarget.converterContext, true);
          }
          break;
        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          visualizations = getVisualizationsFromPresentationVariant(contextObjectPath.targetObject, metaPath, resolvedTarget.converterContext, true);
          break;
        default:
          Log.error(`Bad metapath parameter for table : ${contextObjectPath.targetObject.term}`);
      }
      const lineItemViz = visualizations.find(viz => {
        return viz.visualization.term === "com.sap.vocabularies.UI.v1.LineItem";
      });
      if (lineItemViz) {
        return lineItemViz.annotationPath;
      } else {
        // fallback to default LineItem if annotation missing in PV
        Log.error(`Bad meta path parameter for LineItem: ${contextObjectPath.targetObject.term}`);
        return `@${"com.sap.vocabularies.UI.v1.LineItem"}`; // Fallback
      }
    };
    TableBlock.getPresentationPath = function getPresentationPath(contextObjectPath) {
      var _contextObjectPath$ta;
      let presentationPath;
      switch ((_contextObjectPath$ta = contextObjectPath.targetObject) === null || _contextObjectPath$ta === void 0 ? void 0 : _contextObjectPath$ta.term) {
        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationPath = getContextRelativeTargetObjectPath(contextObjectPath);
          break;
        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationPath = getContextRelativeTargetObjectPath(contextObjectPath) + "/PresentationVariant";
          break;
      }
      return presentationPath;
    };
    TableBlock.setUpTableDefinition = function setUpTableDefinition(table, settings) {
      let tableDefinition = table.tableDefinition;
      if (!tableDefinition) {
        var _table$contextPath, _table$contextPath2;
        const initialConverterContext = table.getConverterContext(table.contextObjectPath, (_table$contextPath = table.contextPath) === null || _table$contextPath === void 0 ? void 0 : _table$contextPath.getPath(), settings);
        const visualizationPath = TableBlock.getVisualizationPath(table.contextObjectPath, initialConverterContext);
        const presentationPath = TableBlock.getPresentationPath(table.contextObjectPath);

        //Check if we have ActionGroup and add nested actions

        const extraParams = {};
        const tableSettings = {
          enableExport: table.enableExport,
          frozenColumnCount: table.frozenColumnCount,
          enableFullScreen: table.enableFullScreen,
          enablePaste: table.enablePaste,
          selectionMode: table.selectionMode,
          type: table.type
        };
        if (table.actions) {
          var _Object$values;
          (_Object$values = Object.values(table.actions)) === null || _Object$values === void 0 ? void 0 : _Object$values.forEach(item => {
            table.actions = {
              ...table.actions,
              ...item.menuContentActions
            };
            delete item.menuContentActions;
          });
        }

        // table actions and columns as {} if not provided to allow merge with manifest settings
        extraParams[visualizationPath] = {
          actions: table.actions || {},
          columns: table.columns || {},
          tableSettings: tableSettings
        };
        const converterContext = table.getConverterContext(table.contextObjectPath, (_table$contextPath2 = table.contextPath) === null || _table$contextPath2 === void 0 ? void 0 : _table$contextPath2.getPath(), settings, extraParams);
        const visualizationDefinition = getDataVisualizationConfiguration(visualizationPath, table.useCondensedLayout, converterContext, undefined, undefined, presentationPath, true);
        tableDefinition = visualizationDefinition.visualizations[0];
        table.tableDefinition = tableDefinition;
      }
      table.tableDefinitionContext = MacroAPI.createBindingContext(table.tableDefinition, settings);
      return tableDefinition;
    };
    var _proto = TableBlock.prototype;
    _proto.setUpId = function setUpId() {
      if (this.id) {
        // The given ID shall be assigned to the TableAPI and not to the MDC Table
        this._apiId = this.id;
        this.id = this.getContentId(this.id);
      } else {
        // We generate the ID. Due to compatibility reasons we keep it on the MDC Table but provide assign
        // the ID with a ::Table suffix to the TableAPI
        const tableDefinition = this.tableDefinition;
        this.id ??= tableDefinition.annotation.id;
        this._apiId = generate([tableDefinition.annotation.id, "Table"]);
      }
    };
    _proto.setReadOnly = function setReadOnly() {
      // Special code for readOnly
      // readonly = false -> Force editable
      // readonly = true -> Force display mode
      // readonly = undefined -> Bound to edit flow
      if (this.readOnly === undefined && this.tableDefinition.annotation.displayMode === true) {
        this.readOnly = true;
      }
    };
    _proto._getEntityType = function _getEntityType() {
      var _this$collectionEntit3, _this$collectionEntit4;
      return ((_this$collectionEntit3 = this.collectionEntity) === null || _this$collectionEntit3 === void 0 ? void 0 : _this$collectionEntit3.entityType) || ((_this$collectionEntit4 = this.collectionEntity) === null || _this$collectionEntit4 === void 0 ? void 0 : _this$collectionEntit4.targetType);
    }

    /**
     * Generates the template string for the valueHelp based on the dataField path.
     *
     * @param datFieldPath DatFieldPath to be evaluated
     * @returns The xml string representation of the valueHelp
     */;
    _proto.getValueHelpTemplateFromPath = function getValueHelpTemplateFromPath(datFieldPath) {
      return datFieldPath ? `<macros:ValueHelp
        idPrefix="${generate([this.id, "TableValueHelp"])}"
        property="${datFieldPath}/Value"
    />` : "";
    }

    /**
     * Generates the template string for the valueHelp based on column.
     *
     * @param column Column to be evaluated
     * @returns The xml string representation of the valueHelp
     */;
    _proto.getValueHelp = function getValueHelp(column) {
      const dataFieldObject = this.convertedMetaData.resolvePath(column.annotationPath).target;
      if (isDataFieldForAnnotation(dataFieldObject) && dataFieldObject.Target.$target.term === "com.sap.vocabularies.UI.v1.Chart") {
        return ``;
      } else if (isDataFieldForAnnotation(dataFieldObject) && dataFieldObject.Target.$target.term === "com.sap.vocabularies.UI.v1.FieldGroup") {
        let template = ``;
        for (const index in dataFieldObject.Target.$target.Data) {
          template += this.getValueHelpTemplateFromPath(column.annotationPath + "/Target/$AnnotationPath/Data/" + index);
        }
        return xml`${template}`;
      } else {
        return xml`${this.getValueHelpTemplateFromPath(column.annotationPath)}`;
      }
    };
    /**
     * Generates the template string for the actionCommand.
     *
     * @param actionName The name of the action
     * @param action Action to be evaluated
     * @returns The xml string representation of the actionCommand
     */
    _proto.getActionCommand = function getActionCommand(actionName, action) {
      var _ActionTarget, _ActionTarget2, _ActionTarget2$annota, _ActionTarget2$annota2, _ActionTarget2$annota3;
      const dataField = action.annotationPath ? this.convertedMetaData.resolvePath(action.annotationPath).target : undefined;
      const actionContextPath = action.annotationPath ? CommonHelper.getActionContext(this.metaPath.getModel().createBindingContext(action.annotationPath + "/Action")) : undefined;
      const actionContext = this.metaPath.getModel().createBindingContext(actionContextPath);
      const dataFieldDataModelObjectPath = actionContext ? MetaModelConverter.getInvolvedDataModelObjects(actionContext, this.collection) : undefined;
      const isBound = dataField === null || dataField === void 0 ? void 0 : (_ActionTarget = dataField.ActionTarget) === null || _ActionTarget === void 0 ? void 0 : _ActionTarget.isBound;
      const isOperationAvailable = (dataField === null || dataField === void 0 ? void 0 : (_ActionTarget2 = dataField.ActionTarget) === null || _ActionTarget2 === void 0 ? void 0 : (_ActionTarget2$annota = _ActionTarget2.annotations) === null || _ActionTarget2$annota === void 0 ? void 0 : (_ActionTarget2$annota2 = _ActionTarget2$annota.Core) === null || _ActionTarget2$annota2 === void 0 ? void 0 : (_ActionTarget2$annota3 = _ActionTarget2$annota2.OperationAvailable) === null || _ActionTarget2$annota3 === void 0 ? void 0 : _ActionTarget2$annota3.valueOf()) !== false;
      const displayCommandAction = action.type === "ForAction" ? isBound !== true || isOperationAvailable : true;
      if (displayCommandAction) {
        return xml`<internalMacro:ActionCommand
							action="{tableDefinition>commandActions/${actionName}}"
							onExecuteAction="${TableHelper.pressEventDataFieldForActionButton({
          contextObjectPath: this.contextObjectPath,
          id: this.id
        }, dataField, this.collectionEntity.name, this.tableDefinition.operationAvailableMap, actionContext === null || actionContext === void 0 ? void 0 : actionContext.getObject(), action.isNavigable, action.enableAutoScroll, action.defaultValuesExtensionFunction)}"
							onExecuteIBN="${CommonHelper.getPressHandlerForDataFieldForIBN(dataField, "${internal>selectedContexts}", !this.tableDefinition.enableAnalytics)}"
							onExecuteManifest="${action.noWrap ? action.press : CommonHelper.buildActionWrapper(action, this)}"
							isIBNEnabled="${action.enabled ?? TableHelper.isDataFieldForIBNEnabled(this, dataField, !!dataField.RequiresContext, dataField.NavigationAvailable)}"
							isActionEnabled="${action.enabled ?? TableHelper.isDataFieldForActionEnabled(this.tableDefinition, dataField.Action, !!isBound, actionContextPath, action.enableOnSelect, dataFieldDataModelObjectPath === null || dataFieldDataModelObjectPath === void 0 ? void 0 : dataFieldDataModelObjectPath.targetEntityType)}"
							/>`;
      }
      return ``;
    };
    /**
     * Generates the template string for the CreationRow.
     *
     * @returns The xml string representation of the CreationRow
     */
    _proto.getCreationRow = function getCreationRow() {
      if (this.creationMode === "CreationRow") {
        const creationRowAction = this.tableDefinition.annotation.standardActions.actions.creationRow;
        if (creationRowAction.isTemplated) {
          return xml`<mdc:creationRow>
							<mdcTable:CreationRow
								id="${generate([this.id, "CreationRow"])}"
								visible="${creationRowAction.visible}"
								apply="${TableHelper.pressEventForCreateButton(this, false)}"
								applyEnabled="${creationRowAction.enabled}"
								macrodata:disableAddRowButtonForEmptyData="${this.disableAddRowButtonForEmptyData}"
								macrodata:customValidationFunction="${this.customValidationFunction}"
							/>
					   	   </mdc:creationRow>`;
        }
      }
      return "";
    };
    _proto.getRowSetting = function getRowSetting() {
      var _this$tableDefinition4, _this$tableDefinition5;
      let rowSettingsTemplate = `<mdcTable:RowSettings
        navigated="${(_this$tableDefinition4 = this.tableDefinition.annotation.row) === null || _this$tableDefinition4 === void 0 ? void 0 : _this$tableDefinition4.rowNavigated}"
        highlight="${(_this$tableDefinition5 = this.tableDefinition.annotation.row) === null || _this$tableDefinition5 === void 0 ? void 0 : _this$tableDefinition5.rowHighlighting}"
        >`;
      if (this.rowAction === "Navigation") {
        var _this$tableDefinition6;
        rowSettingsTemplate += `<mdcTable:rowActions>
                <mdcTable:RowActionItem
                    type = "${this.rowAction}"
                    press = "${this.tableType === "ResponsiveTable" ? "" : this.rowPress}"
                    visible = "${(_this$tableDefinition6 = this.tableDefinition.annotation.row) === null || _this$tableDefinition6 === void 0 ? void 0 : _this$tableDefinition6.visible}"
                    />
                </mdcTable:rowActions>`;
      }
      rowSettingsTemplate += `</mdcTable:RowSettings>`;
      return xml`${rowSettingsTemplate}`;
    };
    _proto.getVariantManagement = function getVariantManagement() {
      if (this.variantManagement === "Control") {
        return xml`<mdc:variant>
                        <variant:VariantManagement
                            id="${generate([this.id, "VM"])}"
                            for="{this>id}"
                            showSetAsDefault="true"
                            select="{this>variantSelected}"
                            headerLevel="${this.headerLevel}"
                            save="${this.variantSaved}"
                        />
                    </mdc:variant>`;
      }
      return "";
    };
    _proto.getQuickFilter = function getQuickFilter() {
      var _this$tableDefinition7;
      if ((_this$tableDefinition7 = this.tableDefinition.control.filters) !== null && _this$tableDefinition7 !== void 0 && _this$tableDefinition7.quickFilters) {
        const quickFilters = this.tableDefinition.control.filters.quickFilters;
        return xml`<mdc:quickFilter>
						<macroTable:QuickFilterSelector
							id="${generate([this.id, "QuickFilterContainer"])}"
							metaPath="${this.metaPath}"
							filterConfiguration="${quickFilters}"
							onSelectionChange="API.onQuickFilterSelectionChange"
						/>
					</mdc:quickFilter>`;
      }
      return "";
    };
    _proto.getEmptyRowsEnabled = function getEmptyRowsEnabled() {
      return this.creationMode === CreationMode.InlineCreationRows ? this.tableDefinition.annotation.standardActions.actions.create.enabled : undefined;
    };
    _proto.getTemplate = function getTemplate() {
      var _this$tableDefinition8, _annotations$Capabili, _annotations$Capabili2, _annotations$Capabili3, _TableHelper$getDeleg, _this$isAlp, _annotations$Common, _this$metaPath, _this$contextPath2, _this$tableDefinition9;
      const headerBindingExpression = buildExpressionForHeaderVisible(this);
      if (this.rowPress) {
        this.rowAction = "Navigation";
      }
      this.rowPress ??= (_this$tableDefinition8 = this.tableDefinition.annotation.row) === null || _this$tableDefinition8 === void 0 ? void 0 : _this$tableDefinition8.press;
      const collectionDeletablePath = (_annotations$Capabili = this.collectionEntity.annotations.Capabilities) === null || _annotations$Capabili === void 0 ? void 0 : (_annotations$Capabili2 = _annotations$Capabili.DeleteRestrictions) === null || _annotations$Capabili2 === void 0 ? void 0 : (_annotations$Capabili3 = _annotations$Capabili2.Deletable) === null || _annotations$Capabili3 === void 0 ? void 0 : _annotations$Capabili3.path;
      const lineItem = TableHelper.getUiLineItemObject(this.metaPath, this.convertedMetaData);
      const delegate = (_TableHelper$getDeleg = TableHelper.getDelegate) === null || _TableHelper$getDeleg === void 0 ? void 0 : _TableHelper$getDeleg.call(TableHelper, this.tableDefinition, (_this$isAlp = this.isAlp) === null || _this$isAlp === void 0 ? void 0 : _this$isAlp.toString(), this.tableDefinition.annotation.entityName);
      const selectionChange = `TableRuntime.setContexts(\${$source>/}, '${collectionDeletablePath}', '${(_annotations$Common = this.collectionEntity.annotations.Common) === null || _annotations$Common === void 0 ? void 0 : _annotations$Common.DraftRoot}', '${this.tableDefinition.operationAvailableMap}', '${TableHelper.getNavigationAvailableMap(lineItem)}', '${ActionHelper.getMultiSelectDisabledActions(lineItem)}', '${this.updatablePropertyPath}')`;
      const entityType = this._getEntityType();
      const modelContextChange = this.tableType === "TreeTable" ? `TableRuntime.onTreeTableContextChanged(\${$source>/}, ${this.tableDefinition.annotation.initialExpansionLevel})` : undefined;
      return xml`
            <macroTable:TableAPI
                xmlns="sap.m"
                xmlns:mdc="sap.ui.mdc"
                xmlns:plugins="sap.m.plugins"
                xmlns:mdcTable="sap.ui.mdc.table"
                xmlns:macroTable="sap.fe.macros.table"
                xmlns:mdcat="sap.ui.mdc.actiontoolbar"
                xmlns:core="sap.ui.core"
                xmlns:control="sap.fe.core.controls"
                xmlns:dt="sap.ui.dt"
                xmlns:fl="sap.ui.fl"
                xmlns:variant="sap.ui.fl.variants"
                xmlns:p13n="sap.ui.mdc.p13n"
                xmlns:internalMacro="sap.fe.macros.internal"
                xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
                xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                binding="{internal>controls/${this.id}}"
                id="${this._apiId}"
                tableDefinition="{_pageModel>${this.tableDefinitionContext.getPath()}}"
                entityTypeFullyQualifiedName="${entityType === null || entityType === void 0 ? void 0 : entityType.fullyQualifiedName}"
                metaPath="${(_this$metaPath = this.metaPath) === null || _this$metaPath === void 0 ? void 0 : _this$metaPath.getPath()}"
                contextPath="${(_this$contextPath2 = this.contextPath) === null || _this$contextPath2 === void 0 ? void 0 : _this$contextPath2.getPath()}"
                stateChange="${this.stateChange}"
                selectionChange="${this.selectionChange}"
				contextChange="${this.onContextChange}"
                readOnly="${this.readOnly}"
                filterBar="${this.filterBar}"
                macrodata:tableAPILocalId="${this._apiId}"
                emptyRowsEnabled="${this.getEmptyRowsEnabled()}"
                enableAutoColumnWidth="${this.enableAutoColumnWidth}"
                isOptimizedForSmallDevice="${this.isOptimizedForSmallDevice}"
            >
				<template:with path="collection>${CommonHelper.getTargetCollectionPath(this.collection)}" var="targetCollection">
                <macroTable:layoutData>
                    <FlexItemData maxWidth="100%" />
                </macroTable:layoutData>
                <!-- macrodata has to be an expression binding if it needs to be set as attribute via change handler during templating -->
                    <mdc:Table
                        unittest:id="TableMacroFragment"
                        core:require="{TableRuntime: 'sap/fe/macros/table/TableRuntime', API: 'sap/fe/macros/table/TableAPI'}"
                        fl:flexibility="{this>fl:flexibility}"
                        sortConditions="${this.tableDefinition.annotation.sortConditions}"
                        groupConditions="${CommonHelper.stringifyObject(this.tableDefinition.annotation.groupConditions)}"
                        aggregateConditions="${CommonHelper.stringifyObject(this.tableDefinition.annotation.aggregateConditions)}"
                        dt:designtime="${this.variantManagement === "None" ? "not-adaptable" : undefined}"
                        macrodata:kind="${this.collectionEntity._type}"
                        macrodata:navigationPath="${this.navigationPath}"
                        id="${this.id}"
                        busy="${this.busy}"
                        busyIndicatorDelay="0"
                        enableExport="${this.enableExport}"
                        delegate="${delegate}"
                        rowPress="${this.rowPress}"
                        height="100%"
                        autoBindOnInit="${this.autoBindOnInit && !this.filterBar}"
                        selectionMode="${this.selectionMode || "None"}"
                        selectionChange="${selectionChange}"
                        showRowCount="${this.tableDefinition.control.showRowCount}"
                        ${this.attr("header", this.header)}
                        headerVisible="${headerBindingExpression}"
                        headerLevel="${this.headerLevel}"
                        threshold="${this.tableDefinition.annotation.threshold}"
                        noData="${this.noDataText}"
                        p13nMode="${this.personalization}"
                        filter="${this.filterBarId}"
                        paste="API.onPaste($event, $controller)"
                        beforeExport="API.onBeforeExport($event)"
                        class="${this.tableDefinition.control.useCondensedTableLayout === true ? "sapUiSizeCondensed" : undefined}"
                        multiSelectMode="${this.tableDefinition.control.multiSelectMode}"
                        showPasteButton="${this.tableDefinition.annotation.standardActions.actions.paste.visible}"
                        enablePaste="${this.tableDefinition.annotation.standardActions.actions.paste.enabled}"
                        macrodata:rowsBindingInfo="${TableHelper.getRowsBindingInfo(this)}"
                        macrodata:enableAnalytics="${this.tableDefinition.enableAnalytics}"
                        macrodata:creationMode="${this.creationMode}"
                        macrodata:inlineCreationRowCount="${this.inlineCreationRowCount}"
                        macrodata:showCreate="${this.showCreate}"
                        macrodata:createAtEnd="${this.createAtEnd}"
                        macrodata:enableAutoScroll="${this.enableAutoScroll}"
                        macrodata:displayModePropertyBinding="${this.readOnly}"
                        macrodata:tableType="${this.tableType}"
                        macrodata:targetCollectionPath="${CommonHelper.getContextPath(null, {
        context: this.collection
      })}"
                        macrodata:entityType="${CommonHelper.getContextPath(null, {
        context: this.collection
      }) + "/"}"
                        macrodata:metaPath="${CommonHelper.getContextPath(null, {
        context: this.collection
      })}"
                        macrodata:onChange="${this.onChange}"
                        macrodata:hiddenFilters="${TableHelper.formatHiddenFilters((_this$tableDefinition9 = this.tableDefinition.control.filters) === null || _this$tableDefinition9 === void 0 ? void 0 : _this$tableDefinition9.hiddenFilters)}"
                        macrodata:requestGroupId="$auto.Workers"
                        macrodata:segmentedButtonId="${generate([this.id, "SegmentedButton", "TemplateContentView"])}"
                        macrodata:enablePaste="${this.enablePaste}"
                        macrodata:operationAvailableMap="${CommonHelper.stringifyCustomData(this.tableDefinition.operationAvailableMap)}"
                        visible="${this.visible}"
						modelContextChange="${modelContextChange}"
                    >
                        <mdc:dataStateIndicator>
                            <plugins:DataStateIndicator
                                filter="${this.dataStateIndicatorFilter}"
                                enableFiltering="true"
                                dataStateChange="API.onDataStateChange"
                            />
                        </mdc:dataStateIndicator>
                        <mdc:type>
                            ${this.getTableType()}
                        </mdc:type>
                        <mdc:dependents>
                            ${this.getDependents()}
                        </mdc:dependents>
                        <mdc:actions>
                            ${this.getActions()}
                        </mdc:actions>
                        <mdc:rowSettings>
                        ${this.getRowSetting()}
                        </mdc:rowSettings>
                        <mdc:columns>
                            <core:Fragment fragmentName="sap.fe.macros.table.Columns" type="XML" />
                        </mdc:columns>
                        ${this.getCreationRow()}
                        ${this.getVariantManagement()}
                        ${this.getQuickFilter()}
                    </mdc:Table>
				</template:with>
            </macroTable:TableAPI>
        `;
    };
    return TableBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "busy", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "enableFullScreen", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "enableExport", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "frozenColumnCount", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "enablePaste", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "filterBar", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "headerLevel", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return TitleLevel.Auto;
    }
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "headerVisible", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "isSearchable", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "personalization", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "readOnly", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "useCondensedLayout", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "selectionMode", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "variantManagement", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "collection", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "_apiId", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "autoBindOnInit", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "columnEditMode", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "createAtEnd", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "createNewAction", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "creationMode", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "createOutbound", [_dec28], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "customValidationFunction", [_dec29], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "dataStateIndicatorFilter", [_dec30], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "disableAddRowButtonForEmptyData", [_dec31], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "enableAutoColumnWidth", [_dec32], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "enableAutoScroll", [_dec33], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "fieldMode", [_dec34], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "filterBarId", [_dec35], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor35 = _applyDecoratedDescriptor(_class2.prototype, "inlineCreationRowCount", [_dec36], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor36 = _applyDecoratedDescriptor(_class2.prototype, "isAlp", [_dec37], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor37 = _applyDecoratedDescriptor(_class2.prototype, "isCompactType", [_dec38], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor38 = _applyDecoratedDescriptor(_class2.prototype, "isOptimizedForSmallDevice", [_dec39], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor39 = _applyDecoratedDescriptor(_class2.prototype, "multiSelectMode", [_dec40], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor40 = _applyDecoratedDescriptor(_class2.prototype, "navigationPath", [_dec41], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor41 = _applyDecoratedDescriptor(_class2.prototype, "noDataText", [_dec42], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor42 = _applyDecoratedDescriptor(_class2.prototype, "rowAction", [_dec43], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return undefined;
    }
  }), _descriptor43 = _applyDecoratedDescriptor(_class2.prototype, "tableType", [_dec44], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor44 = _applyDecoratedDescriptor(_class2.prototype, "updatablePropertyPath", [_dec45], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor45 = _applyDecoratedDescriptor(_class2.prototype, "useBasicSearch", [_dec46], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor46 = _applyDecoratedDescriptor(_class2.prototype, "searchable", [_dec47], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor47 = _applyDecoratedDescriptor(_class2.prototype, "selectionLimit", [_dec48], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor48 = _applyDecoratedDescriptor(_class2.prototype, "showCreate", [_dec49], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor49 = _applyDecoratedDescriptor(_class2.prototype, "tableDefinition", [_dec50], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor50 = _applyDecoratedDescriptor(_class2.prototype, "tableDefinitionContext", [_dec51], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor51 = _applyDecoratedDescriptor(_class2.prototype, "tableDelegate", [_dec52], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor52 = _applyDecoratedDescriptor(_class2.prototype, "tabTitle", [_dec53], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor53 = _applyDecoratedDescriptor(_class2.prototype, "visible", [_dec54], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor54 = _applyDecoratedDescriptor(_class2.prototype, "actions", [_dec55], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor55 = _applyDecoratedDescriptor(_class2.prototype, "columns", [_dec56], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor56 = _applyDecoratedDescriptor(_class2.prototype, "rowPress", [_dec57], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor57 = _applyDecoratedDescriptor(_class2.prototype, "onContextChange", [_dec58], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor58 = _applyDecoratedDescriptor(_class2.prototype, "onChange", [_dec59], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor59 = _applyDecoratedDescriptor(_class2.prototype, "onSegmentedButtonPressed", [_dec60], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor60 = _applyDecoratedDescriptor(_class2.prototype, "variantSaved", [_dec61], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor61 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec62], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor62 = _applyDecoratedDescriptor(_class2.prototype, "selectionChange", [_dec63], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor63 = _applyDecoratedDescriptor(_class2.prototype, "variantSelected", [_dec64], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = TableBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/Table.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/CommonUtils","sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/core/converters/ManifestSettings","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/macros/internal/helpers/TableTemplating","sap/ui/core/library","../CommonHelper","../internal/helpers/ActionHelper","../MacroAPI","./ActionsTemplating","./TableHelper"],function(e,t,i,n,a,o,r,l,u,s,c,b,d,p,m,f,g,h,y,v){"use strict";var C,w,P,D,$,A,T,x,z,M,S,I,E,O,B,F,R,k,V,_,L,N,j,U,H,q,W,G,Q,X,K,Y,J,Z,ee,te,ie,ne,ae,oe,re,le,ue,se,ce,be,de,pe,me,fe,ge,he,ye,ve,Ce,we,Pe,De,$e,Ae,Te,xe,ze,Me,Se,Ie,Ee,Oe,Be,Fe,Re,ke,Ve,_e,Le,Ne,je,Ue,He,qe,We,Ge,Qe,Xe,Ke,Ye,Je,Ze,et,tt,it,nt,at,ot,rt,lt,ut,st,ct,bt,dt,pt,mt,ft,gt,ht,yt,vt,Ct,wt,Pt,Dt,$t,At,Tt,xt,zt,Mt,St,It,Et,Ot,Bt,Ft,Rt,kt,Vt,_t,Lt;var Nt={};var jt=y.getTableActionTemplate;var Ut=m.TitleLevel;var Ht=p.buildExpressionForHeaderVisible;var qt=d.getContextRelativeTargetObjectPath;var Wt=b.isSingleton;var Gt=c.generate;var Qt=u.getInvolvedDataModelObjects;var Xt=l.CreationMode;var Kt=r.getVisualizationsFromPresentationVariant;var Yt=r.getDataVisualizationConfiguration;var Jt=o.isDataFieldForAnnotation;var Zt=n.xml;var ei=i.defineBuildingBlock;var ti=i.blockEvent;var ii=i.blockAttribute;var ni=i.blockAggregation;function ai(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function oi(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function ri(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;li(e,t)}function li(e,t){li=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return li(e,t)}function ui(e,t,i,n,a){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},o);if(a&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(a):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function si(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const ci=function(e){var t;let i=null;const n=e;let a=[];const o=(t=n.getAttribute("key"))===null||t===void 0?void 0:t.replace("InlineXML_","");if(n.children.length&&n.localName==="ActionGroup"&&n.namespaceURI&&["sap.fe.macros","sap.fe.macros.table"].indexOf(n.namespaceURI)>-1){const e=Array.prototype.slice.apply(n.children);let t=0;i=e.reduce((e,i)=>{var n;const a=((n=i.getAttribute("key"))===null||n===void 0?void 0:n.replace("InlineXML_",""))||o+"_Menu_"+t;const r={key:a,text:i.getAttribute("text"),__noWrap:true,press:i.getAttribute("press"),requiresSelection:i.getAttribute("requiresSelection")==="true",enabled:i.getAttribute("enabled")===null?true:i.getAttribute("enabled")};e[r.key]=r;t++;return e},{});a=Object.values(i).slice(-n.children.length).map(function(e){return e.key})}return{key:o,text:n.getAttribute("text"),position:{placement:n.getAttribute("placement"),anchor:n.getAttribute("anchor")},__noWrap:true,press:n.getAttribute("press"),requiresSelection:n.getAttribute("requiresSelection")==="true",enabled:n.getAttribute("enabled")===null?true:n.getAttribute("enabled"),menu:a.length?a:null,menuContentActions:i}};const bi=function(e,t){var i,n;t.key=t.key.replace("InlineXML_","");e.setAttribute("key",t.key);return{key:t.key,type:"Slot",width:e.getAttribute("width"),importance:e.getAttribute("importance"),horizontalAlign:e.getAttribute("horizontalAlign"),availability:e.getAttribute("availability"),header:e.getAttribute("header"),template:((i=e.children[0])===null||i===void 0?void 0:i.outerHTML)||"",properties:e.getAttribute("properties")?(n=e.getAttribute("properties"))===null||n===void 0?void 0:n.split(","):undefined,position:{placement:e.getAttribute("placement")||e.getAttribute("positionPlacement"),anchor:e.getAttribute("anchor")||e.getAttribute("positionAnchor")}}};let di=(C=ei({name:"Table",namespace:"sap.fe.macros.internal",publicNamespace:"sap.fe.macros",returnTypes:["sap.fe.macros.table.TableAPI"]}),w=ii({type:"sap.ui.model.Context",isPublic:true,required:true}),P=ii({type:"boolean",isPublic:true}),D=ii({type:"sap.ui.model.Context",isPublic:true}),$=ii({type:"boolean",isPublic:true}),A=ii({type:"boolean",isPublic:true}),T=ii({type:"number",isPublic:true}),x=ii({type:"boolean",isPublic:true}),z=ii({type:"string",isPublic:true}),M=ii({type:"string",isPublic:true}),S=ii({type:"sap.ui.core.TitleLevel",isPublic:true}),I=ii({type:"boolean",isPublic:true}),E=ii({type:"string",isPublic:true}),O=ii({type:"boolean",isPublic:true}),B=ii({type:"string|boolean",isPublic:true}),F=ii({type:"boolean",isPublic:true}),R=ii({type:"string",isPublic:true}),k=ii({type:"boolean",isPublic:true}),V=ii({type:"string",isPublic:true}),_=ii({type:"string",isPublic:true}),L=ii({type:"sap.ui.model.Context",isPublic:false,required:true,expectedTypes:["EntitySet","NavigationProperty","Singleton"]}),N=ii({type:"string"}),j=ii({type:"boolean"}),U=ii({type:"string"}),H=ii({type:"boolean"}),q=ii({type:"string"}),W=ii({type:"string"}),G=ii({type:"string"}),Q=ii({type:"string"}),X=ii({type:"string"}),K=ii({type:"boolean"}),Y=ii({type:"boolean"}),J=ii({type:"boolean"}),Z=ii({type:"string"}),ee=ii({type:"string"}),te=ii({type:"number"}),ie=ii({type:"boolean"}),ne=ii({type:"boolean"}),ae=ii({type:"boolean"}),oe=ii({type:"string"}),re=ii({type:"string"}),le=ii({type:"string"}),ue=ii({type:"string"}),se=ii({type:"string"}),ce=ii({type:"string"}),be=ii({type:"boolean"}),de=ii({type:"boolean"}),pe=ii({type:"number"}),me=ii({type:"string"}),fe=ii({type:"object",isPublic:true}),ge=ii({type:"sap.ui.model.Context"}),he=ii({type:"string"}),ye=ii({type:"string"}),ve=ii({type:"boolean"}),Ce=ni({type:"sap.fe.macros.internal.table.Action | sap.fe.macros.internal.table.ActionGroup",isPublic:true,processAggregations:ci}),we=ni({type:"sap.fe.macros.internal.table.Column",isPublic:true,hasVirtualNode:true,processAggregations:bi}),Pe=ti(),De=ti(),$e=ti(),Ae=ti(),Te=ti(),xe=ti(),ze=ti(),Me=ti(),C(Se=(Ie=function(t){ri(i,t);function i(e,n,o){var r,l,u;var c;c=t.call(this,e)||this;ai(c,"metaPath",Ee,oi(c));ai(c,"busy",Oe,oi(c));ai(c,"contextPath",Be,oi(c));ai(c,"enableFullScreen",Fe,oi(c));ai(c,"enableExport",Re,oi(c));ai(c,"frozenColumnCount",ke,oi(c));ai(c,"enablePaste",Ve,oi(c));ai(c,"filterBar",_e,oi(c));ai(c,"header",Le,oi(c));ai(c,"headerLevel",Ne,oi(c));ai(c,"headerVisible",je,oi(c));ai(c,"id",Ue,oi(c));ai(c,"isSearchable",He,oi(c));ai(c,"personalization",qe,oi(c));ai(c,"readOnly",We,oi(c));ai(c,"type",Ge,oi(c));ai(c,"useCondensedLayout",Qe,oi(c));ai(c,"selectionMode",Xe,oi(c));ai(c,"variantManagement",Ke,oi(c));ai(c,"collection",Ye,oi(c));ai(c,"_apiId",Je,oi(c));ai(c,"autoBindOnInit",Ze,oi(c));ai(c,"columnEditMode",et,oi(c));ai(c,"createAtEnd",tt,oi(c));ai(c,"createNewAction",it,oi(c));ai(c,"creationMode",nt,oi(c));ai(c,"createOutbound",at,oi(c));ai(c,"customValidationFunction",ot,oi(c));ai(c,"dataStateIndicatorFilter",rt,oi(c));ai(c,"disableAddRowButtonForEmptyData",lt,oi(c));ai(c,"enableAutoColumnWidth",ut,oi(c));ai(c,"enableAutoScroll",st,oi(c));ai(c,"fieldMode",ct,oi(c));ai(c,"filterBarId",bt,oi(c));ai(c,"inlineCreationRowCount",dt,oi(c));ai(c,"isAlp",pt,oi(c));ai(c,"isCompactType",mt,oi(c));ai(c,"isOptimizedForSmallDevice",ft,oi(c));ai(c,"multiSelectMode",gt,oi(c));ai(c,"navigationPath",ht,oi(c));ai(c,"noDataText",yt,oi(c));ai(c,"rowAction",vt,oi(c));ai(c,"tableType",Ct,oi(c));ai(c,"updatablePropertyPath",wt,oi(c));ai(c,"useBasicSearch",Pt,oi(c));ai(c,"searchable",Dt,oi(c));ai(c,"selectionLimit",$t,oi(c));ai(c,"showCreate",At,oi(c));ai(c,"tableDefinition",Tt,oi(c));ai(c,"tableDefinitionContext",xt,oi(c));ai(c,"tableDelegate",zt,oi(c));ai(c,"tabTitle",Mt,oi(c));ai(c,"visible",St,oi(c));ai(c,"actions",It,oi(c));ai(c,"columns",Et,oi(c));ai(c,"rowPress",Ot,oi(c));ai(c,"onContextChange",Bt,oi(c));ai(c,"onChange",Ft,oi(c));ai(c,"onSegmentedButtonPressed",Rt,oi(c));ai(c,"variantSaved",kt,oi(c));ai(c,"stateChange",Vt,oi(c));ai(c,"selectionChange",_t,oi(c));ai(c,"variantSelected",Lt,oi(c));c.getTableType=()=>{const e=c.collection.getObject();switch(c.tableType){case"GridTable":return Zt`<mdcTable:GridTableType
                rowCountMode="${c.tableDefinition.control.rowCountMode}"
                rowCount="${c.tableDefinition.control.rowCount}"
                selectionLimit="${c.selectionLimit}"
				fixedColumnCount="${c.tableDefinition.control.frozenColumnCount}"
            />`;case"TreeTable":return Zt`<mdcTable:TreeTableType
                rowCountMode="${c.tableDefinition.control.rowCountMode}"
                rowCount="${c.tableDefinition.control.rowCount}"
				fixedColumnCount="${c.tableDefinition.control.frozenColumnCount}"
            />`;default:const t=e.$kind==="EntitySet"?"Scroll":undefined;return Zt`<mdcTable:ResponsiveTableType
                showDetailsButton="true"
                detailsButtonSetting="{=['Low', 'Medium', 'None']}"
                growingMode="${t}"
            />`}};c.getDependents=()=>{var e;let t=``;if(!c.readOnly&&(e=c.tableDefinition)!==null&&e!==void 0&&e.columns){for(const e of c.tableDefinition.columns){if(e.availability==="Default"&&"annotationPath"in e){t+=c.getValueHelp(e)}}}const i=c.tableDefinition.annotation.standardActions.actions;if(c.tableDefinition.annotation.standardActions.isInsertUpdateTemplated&&i.create.isTemplated==="true"){t+=Zt`<control:CommandExecution
                                execute="${v.pressEventForCreateButton(oi(c),true)}"
                                visible="${i.create.visible}"
                                enabled="${i.create.enabled}"
                                command="Create"
                            />`}if(i.delete.isTemplated==="true"){var n,a,o,r,l;const e=(n=((r=c.collectionEntity)===null||r===void 0?void 0:r.entityType)||((l=c.collectionEntity)===null||l===void 0?void 0:l.targetType))===null||n===void 0?void 0:(a=n.annotations)===null||a===void 0?void 0:(o=a.UI)===null||o===void 0?void 0:o.HeaderInfo;t+=Zt`<control:CommandExecution
                        execute="${v.pressEventForDeleteButton(oi(c),c.collectionEntity.name,e,c.contextObjectPath)}"
                        visible="${i.delete.visible}"
                        enabled="${i.delete.enabled}"
                        command="DeleteEntry"
                        />`}for(const e in c.tableDefinition.commandActions){const i=c.tableDefinition.commandActions[e];t+=`${c.getActionCommand(e,i)}`}t+=`<control:CommandExecution execute="TableRuntime.displayTableSettings" command="TableSettings" />`;if(c.variantManagement==="None"){t+=`\x3c!-- Persistence provider offers persisting personalization changes without variant management --\x3e\n\t\t\t<p13n:PersistenceProvider id="${Gt([c.id,"PersistenceProvider"])}" for="${c.id}" />`}return Zt`${t}`};c.getActions=()=>{let e="";if(c.onSegmentedButtonPressed){e=`<mdcat:ActionToolbarAction\n            layoutInformation="{\n                    aggregationName: 'end',\n                    alignment: 'End'\n                }"\n            visible="{= \${pageInternal>alpContentView} === 'Table' }"\n        >\n            <SegmentedButton\n                id="${Gt([c.id,"SegmentedButton","TemplateContentView"])}"\n                select="${c.onSegmentedButtonPressed}"\n                selectedKey="{pageInternal>alpContentView}"\n            >\n                <items>`;if(f.isDesktop()){e+=`<SegmentedButtonItem\n                            tooltip="{sap.fe.i18n>M_COMMON_HYBRID_SEGMENTED_BUTTON_ITEM_TOOLTIP}"\n\t\t\t\t\t\t\tkey = "Hybrid"\n\t\t\t\t\t\t\ticon = "sap-icon://chart-table-view"\n\t\t\t\t\t\t\t/>`}e+=`<SegmentedButtonItem\n                        tooltip="{sap.fe.i18n>M_COMMON_CHART_SEGMENTED_BUTTON_ITEM_TOOLTIP}"\n                        key="Chart"\n                        icon="sap-icon://bar-chart"\n                    />\n                    <SegmentedButtonItem\n                        tooltip="{sap.fe.i18n>M_COMMON_TABLE_SEGMENTED_BUTTON_ITEM_TOOLTIP}"\n                        key="Table"\n                        icon="sap-icon://table-view"\n                    />\n                </items>\n            </SegmentedButton>\n        </mdcat:ActionToolbarAction>`}e+=`${jt(oi(c))}`;return Zt`${e}`};const b=Qt(c.metaPath,c.contextPath);c.contextObjectPath=b;const d=o.bindingContexts.converterContext;c.pageTemplateType=d===null||d===void 0?void 0:d.getObject("/templateType");const p=i.setUpTableDefinition(oi(c),o);c.collection=o.models.metaModel.createBindingContext(p.annotation.collection);c.convertedMetaData=c.contextObjectPath.convertedTypes;c.collectionEntity=c.convertedMetaData.resolvePath(c.tableDefinition.annotation.collection).target;c.setUpId();const m=c.getConverterContext(c.contextObjectPath,(r=c.contextPath)===null||r===void 0?void 0:r.getPath(),o);c._collectionIsDraftEnabled=m.getManifestWrapper().isFilterBarHidden()&&s.isDraftNode(c.collectionEntity)||s.isDraftRoot(c.collectionEntity);c.selectionMode=c.tableDefinition.annotation.selectionMode;c.enableFullScreen=c.tableDefinition.control.enableFullScreen;c.enableExport=c.tableDefinition.control.enableExport;c.enablePaste=c.tableDefinition.annotation.standardActions.actions.paste.enabled;c.frozenColumnCount=c.tableDefinition.control.frozenColumnCount;c.updatablePropertyPath=c.tableDefinition.annotation.standardActions.updatablePropertyPath;c.type=c.tableDefinition.control.type;c.disableAddRowButtonForEmptyData??=c.tableDefinition.control.disableAddRowButtonForEmptyData;c.customValidationFunction??=c.tableDefinition.control.customValidationFunction;c.headerVisible??=c.tableDefinition.control.headerVisible;c.searchable??=c.tableDefinition.annotation.searchable;c.inlineCreationRowCount??=c.tableDefinition.control.inlineCreationRowCount;c.header??=c.tableDefinition.annotation.title;c.selectionLimit??=c.tableDefinition.control.selectionLimit;c.isCompactType??=c.tableDefinition.control.isCompactType;c.creationMode??=c.tableDefinition.annotation.create.mode;c.createAtEnd??=c.tableDefinition.annotation.create.append;c.createOutbound??=c.tableDefinition.annotation.create.outbound;c.createNewAction??=c.tableDefinition.annotation.create.newAction;c.createOutboundDetail??=c.tableDefinition.annotation.create.outboundDetail;c.personalization??=c.tableDefinition.annotation.p13nMode;c.variantManagement??=c.tableDefinition.annotation.variantManagement;c.enableAutoColumnWidth??=true;c.dataStateIndicatorFilter??=c.tableDefinition.control.dataStateIndicatorFilter;c.isOptimizedForSmallDevice??=a.isSmallDevice();c.navigationPath=p.annotation.navigationPath;if(p.annotation.collection.startsWith("/")&&Wt(b.startingEntitySet)){p.annotation.collection=c.navigationPath}c.setReadOnly();if(c.rowPress){c.rowAction="Navigation"}c.rowPress??=(l=c.tableDefinition.annotation.row)===null||l===void 0?void 0:l.press;c.rowAction??=(u=c.tableDefinition.annotation.row)===null||u===void 0?void 0:u.action;if(c.personalization==="false"){c.personalization=undefined}else if(c.personalization==="true"){c.personalization="Sort,Column,Filter"}switch(c.personalization){case"false":c.personalization=undefined;break;case"true":c.personalization="Sort,Column,Filter";break;default:}if(c.isSearchable===false){c.searchable=false}else{c.searchable=c.tableDefinition.annotation.searchable}let g=false;if(!c.filterBar&&!c.filterBarId&&c.searchable){c.filterBarId=Gt([c.id,"StandardAction","BasicSearch"]);g=true}c.useBasicSearch=g;c.tableType=c.type;c.showCreate=c.tableDefinition.annotation.standardActions.actions.create.visible||true;c.autoBindOnInit=c.tableDefinition.annotation.autoBindOnInit;switch(c.readOnly){case true:c.columnEditMode="Display";break;case false:c.columnEditMode="Editable";break;default:c.columnEditMode=undefined}return c}Nt=i;i.getVisualizationPath=function t(i,n){const a=qt(i);if(!a){e.error(`Missing meta path parameter for LineItem`);return`@${"com.sap.vocabularies.UI.v1.LineItem"}`}if(i.targetObject.term==="com.sap.vocabularies.UI.v1.LineItem"){return a}const o=n.getEntityTypeAnnotation(a);let r=[];switch(i.targetObject.term){case"com.sap.vocabularies.UI.v1.SelectionPresentationVariant":if(i.targetObject.PresentationVariant){r=Kt(i.targetObject.PresentationVariant,a,o.converterContext,true)}break;case"com.sap.vocabularies.UI.v1.PresentationVariant":r=Kt(i.targetObject,a,o.converterContext,true);break;default:e.error(`Bad metapath parameter for table : ${i.targetObject.term}`)}const l=r.find(e=>e.visualization.term==="com.sap.vocabularies.UI.v1.LineItem");if(l){return l.annotationPath}else{e.error(`Bad meta path parameter for LineItem: ${i.targetObject.term}`);return`@${"com.sap.vocabularies.UI.v1.LineItem"}`}};i.getPresentationPath=function e(t){var i;let n;switch((i=t.targetObject)===null||i===void 0?void 0:i.term){case"com.sap.vocabularies.UI.v1.PresentationVariant":n=qt(t);break;case"com.sap.vocabularies.UI.v1.SelectionPresentationVariant":n=qt(t)+"/PresentationVariant";break}return n};i.setUpTableDefinition=function e(t,n){let a=t.tableDefinition;if(!a){var o,r;const e=t.getConverterContext(t.contextObjectPath,(o=t.contextPath)===null||o===void 0?void 0:o.getPath(),n);const u=i.getVisualizationPath(t.contextObjectPath,e);const s=i.getPresentationPath(t.contextObjectPath);const c={};const b={enableExport:t.enableExport,frozenColumnCount:t.frozenColumnCount,enableFullScreen:t.enableFullScreen,enablePaste:t.enablePaste,selectionMode:t.selectionMode,type:t.type};if(t.actions){var l;(l=Object.values(t.actions))===null||l===void 0?void 0:l.forEach(e=>{t.actions={...t.actions,...e.menuContentActions};delete e.menuContentActions})}c[u]={actions:t.actions||{},columns:t.columns||{},tableSettings:b};const d=t.getConverterContext(t.contextObjectPath,(r=t.contextPath)===null||r===void 0?void 0:r.getPath(),n,c);const p=Yt(u,t.useCondensedLayout,d,undefined,undefined,s,true);a=p.visualizations[0];t.tableDefinition=a}t.tableDefinitionContext=h.createBindingContext(t.tableDefinition,n);return a};var n=i.prototype;n.setUpId=function e(){if(this.id){this._apiId=this.id;this.id=this.getContentId(this.id)}else{const e=this.tableDefinition;this.id??=e.annotation.id;this._apiId=Gt([e.annotation.id,"Table"])}};n.setReadOnly=function e(){if(this.readOnly===undefined&&this.tableDefinition.annotation.displayMode===true){this.readOnly=true}};n._getEntityType=function e(){var t,i;return((t=this.collectionEntity)===null||t===void 0?void 0:t.entityType)||((i=this.collectionEntity)===null||i===void 0?void 0:i.targetType)};n.getValueHelpTemplateFromPath=function e(t){return t?`<macros:ValueHelp\n        idPrefix="${Gt([this.id,"TableValueHelp"])}"\n        property="${t}/Value"\n    />`:""};n.getValueHelp=function e(t){const i=this.convertedMetaData.resolvePath(t.annotationPath).target;if(Jt(i)&&i.Target.$target.term==="com.sap.vocabularies.UI.v1.Chart"){return``}else if(Jt(i)&&i.Target.$target.term==="com.sap.vocabularies.UI.v1.FieldGroup"){let e=``;for(const n in i.Target.$target.Data){e+=this.getValueHelpTemplateFromPath(t.annotationPath+"/Target/$AnnotationPath/Data/"+n)}return Zt`${e}`}else{return Zt`${this.getValueHelpTemplateFromPath(t.annotationPath)}`}};n.getActionCommand=function e(t,i){var n,a,o,r,l;const s=i.annotationPath?this.convertedMetaData.resolvePath(i.annotationPath).target:undefined;const c=i.annotationPath?f.getActionContext(this.metaPath.getModel().createBindingContext(i.annotationPath+"/Action")):undefined;const b=this.metaPath.getModel().createBindingContext(c);const d=b?u.getInvolvedDataModelObjects(b,this.collection):undefined;const p=s===null||s===void 0?void 0:(n=s.ActionTarget)===null||n===void 0?void 0:n.isBound;const m=(s===null||s===void 0?void 0:(a=s.ActionTarget)===null||a===void 0?void 0:(o=a.annotations)===null||o===void 0?void 0:(r=o.Core)===null||r===void 0?void 0:(l=r.OperationAvailable)===null||l===void 0?void 0:l.valueOf())!==false;const g=i.type==="ForAction"?p!==true||m:true;if(g){return Zt`<internalMacro:ActionCommand
							action="{tableDefinition>commandActions/${t}}"
							onExecuteAction="${v.pressEventDataFieldForActionButton({contextObjectPath:this.contextObjectPath,id:this.id},s,this.collectionEntity.name,this.tableDefinition.operationAvailableMap,b===null||b===void 0?void 0:b.getObject(),i.isNavigable,i.enableAutoScroll,i.defaultValuesExtensionFunction)}"
							onExecuteIBN="${f.getPressHandlerForDataFieldForIBN(s,"${internal>selectedContexts}",!this.tableDefinition.enableAnalytics)}"
							onExecuteManifest="${i.noWrap?i.press:f.buildActionWrapper(i,this)}"
							isIBNEnabled="${i.enabled??v.isDataFieldForIBNEnabled(this,s,!!s.RequiresContext,s.NavigationAvailable)}"
							isActionEnabled="${i.enabled??v.isDataFieldForActionEnabled(this.tableDefinition,s.Action,!!p,c,i.enableOnSelect,d===null||d===void 0?void 0:d.targetEntityType)}"
							/>`}return``};n.getCreationRow=function e(){if(this.creationMode==="CreationRow"){const e=this.tableDefinition.annotation.standardActions.actions.creationRow;if(e.isTemplated){return Zt`<mdc:creationRow>
							<mdcTable:CreationRow
								id="${Gt([this.id,"CreationRow"])}"
								visible="${e.visible}"
								apply="${v.pressEventForCreateButton(this,false)}"
								applyEnabled="${e.enabled}"
								macrodata:disableAddRowButtonForEmptyData="${this.disableAddRowButtonForEmptyData}"
								macrodata:customValidationFunction="${this.customValidationFunction}"
							/>
					   	   </mdc:creationRow>`}}return""};n.getRowSetting=function e(){var t,i;let n=`<mdcTable:RowSettings\n        navigated="${(t=this.tableDefinition.annotation.row)===null||t===void 0?void 0:t.rowNavigated}"\n        highlight="${(i=this.tableDefinition.annotation.row)===null||i===void 0?void 0:i.rowHighlighting}"\n        >`;if(this.rowAction==="Navigation"){var a;n+=`<mdcTable:rowActions>\n                <mdcTable:RowActionItem\n                    type = "${this.rowAction}"\n                    press = "${this.tableType==="ResponsiveTable"?"":this.rowPress}"\n                    visible = "${(a=this.tableDefinition.annotation.row)===null||a===void 0?void 0:a.visible}"\n                    />\n                </mdcTable:rowActions>`}n+=`</mdcTable:RowSettings>`;return Zt`${n}`};n.getVariantManagement=function e(){if(this.variantManagement==="Control"){return Zt`<mdc:variant>
                        <variant:VariantManagement
                            id="${Gt([this.id,"VM"])}"
                            for="{this>id}"
                            showSetAsDefault="true"
                            select="{this>variantSelected}"
                            headerLevel="${this.headerLevel}"
                            save="${this.variantSaved}"
                        />
                    </mdc:variant>`}return""};n.getQuickFilter=function e(){var t;if((t=this.tableDefinition.control.filters)!==null&&t!==void 0&&t.quickFilters){const e=this.tableDefinition.control.filters.quickFilters;return Zt`<mdc:quickFilter>
						<macroTable:QuickFilterSelector
							id="${Gt([this.id,"QuickFilterContainer"])}"
							metaPath="${this.metaPath}"
							filterConfiguration="${e}"
							onSelectionChange="API.onQuickFilterSelectionChange"
						/>
					</mdc:quickFilter>`}return""};n.getEmptyRowsEnabled=function e(){return this.creationMode===Xt.InlineCreationRows?this.tableDefinition.annotation.standardActions.actions.create.enabled:undefined};n.getTemplate=function e(){var t,i,n,a,o,r,l,u,s,c;const b=Ht(this);if(this.rowPress){this.rowAction="Navigation"}this.rowPress??=(t=this.tableDefinition.annotation.row)===null||t===void 0?void 0:t.press;const d=(i=this.collectionEntity.annotations.Capabilities)===null||i===void 0?void 0:(n=i.DeleteRestrictions)===null||n===void 0?void 0:(a=n.Deletable)===null||a===void 0?void 0:a.path;const p=v.getUiLineItemObject(this.metaPath,this.convertedMetaData);const m=(o=v.getDelegate)===null||o===void 0?void 0:o.call(v,this.tableDefinition,(r=this.isAlp)===null||r===void 0?void 0:r.toString(),this.tableDefinition.annotation.entityName);const h=`TableRuntime.setContexts(\${$source>/}, '${d}', '${(l=this.collectionEntity.annotations.Common)===null||l===void 0?void 0:l.DraftRoot}', '${this.tableDefinition.operationAvailableMap}', '${v.getNavigationAvailableMap(p)}', '${g.getMultiSelectDisabledActions(p)}', '${this.updatablePropertyPath}')`;const y=this._getEntityType();const C=this.tableType==="TreeTable"?`TableRuntime.onTreeTableContextChanged(\${$source>/}, ${this.tableDefinition.annotation.initialExpansionLevel})`:undefined;return Zt`
            <macroTable:TableAPI
                xmlns="sap.m"
                xmlns:mdc="sap.ui.mdc"
                xmlns:plugins="sap.m.plugins"
                xmlns:mdcTable="sap.ui.mdc.table"
                xmlns:macroTable="sap.fe.macros.table"
                xmlns:mdcat="sap.ui.mdc.actiontoolbar"
                xmlns:core="sap.ui.core"
                xmlns:control="sap.fe.core.controls"
                xmlns:dt="sap.ui.dt"
                xmlns:fl="sap.ui.fl"
                xmlns:variant="sap.ui.fl.variants"
                xmlns:p13n="sap.ui.mdc.p13n"
                xmlns:internalMacro="sap.fe.macros.internal"
                xmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"
                xmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                binding="{internal>controls/${this.id}}"
                id="${this._apiId}"
                tableDefinition="{_pageModel>${this.tableDefinitionContext.getPath()}}"
                entityTypeFullyQualifiedName="${y===null||y===void 0?void 0:y.fullyQualifiedName}"
                metaPath="${(u=this.metaPath)===null||u===void 0?void 0:u.getPath()}"
                contextPath="${(s=this.contextPath)===null||s===void 0?void 0:s.getPath()}"
                stateChange="${this.stateChange}"
                selectionChange="${this.selectionChange}"
				contextChange="${this.onContextChange}"
                readOnly="${this.readOnly}"
                filterBar="${this.filterBar}"
                macrodata:tableAPILocalId="${this._apiId}"
                emptyRowsEnabled="${this.getEmptyRowsEnabled()}"
                enableAutoColumnWidth="${this.enableAutoColumnWidth}"
                isOptimizedForSmallDevice="${this.isOptimizedForSmallDevice}"
            >
				<template:with path="collection>${f.getTargetCollectionPath(this.collection)}" var="targetCollection">
                <macroTable:layoutData>
                    <FlexItemData maxWidth="100%" />
                </macroTable:layoutData>
                <!-- macrodata has to be an expression binding if it needs to be set as attribute via change handler during templating -->
                    <mdc:Table
                        unittest:id="TableMacroFragment"
                        core:require="{TableRuntime: 'sap/fe/macros/table/TableRuntime', API: 'sap/fe/macros/table/TableAPI'}"
                        fl:flexibility="{this>fl:flexibility}"
                        sortConditions="${this.tableDefinition.annotation.sortConditions}"
                        groupConditions="${f.stringifyObject(this.tableDefinition.annotation.groupConditions)}"
                        aggregateConditions="${f.stringifyObject(this.tableDefinition.annotation.aggregateConditions)}"
                        dt:designtime="${this.variantManagement==="None"?"not-adaptable":undefined}"
                        macrodata:kind="${this.collectionEntity._type}"
                        macrodata:navigationPath="${this.navigationPath}"
                        id="${this.id}"
                        busy="${this.busy}"
                        busyIndicatorDelay="0"
                        enableExport="${this.enableExport}"
                        delegate="${m}"
                        rowPress="${this.rowPress}"
                        height="100%"
                        autoBindOnInit="${this.autoBindOnInit&&!this.filterBar}"
                        selectionMode="${this.selectionMode||"None"}"
                        selectionChange="${h}"
                        showRowCount="${this.tableDefinition.control.showRowCount}"
                        ${this.attr("header",this.header)}
                        headerVisible="${b}"
                        headerLevel="${this.headerLevel}"
                        threshold="${this.tableDefinition.annotation.threshold}"
                        noData="${this.noDataText}"
                        p13nMode="${this.personalization}"
                        filter="${this.filterBarId}"
                        paste="API.onPaste($event, $controller)"
                        beforeExport="API.onBeforeExport($event)"
                        class="${this.tableDefinition.control.useCondensedTableLayout===true?"sapUiSizeCondensed":undefined}"
                        multiSelectMode="${this.tableDefinition.control.multiSelectMode}"
                        showPasteButton="${this.tableDefinition.annotation.standardActions.actions.paste.visible}"
                        enablePaste="${this.tableDefinition.annotation.standardActions.actions.paste.enabled}"
                        macrodata:rowsBindingInfo="${v.getRowsBindingInfo(this)}"
                        macrodata:enableAnalytics="${this.tableDefinition.enableAnalytics}"
                        macrodata:creationMode="${this.creationMode}"
                        macrodata:inlineCreationRowCount="${this.inlineCreationRowCount}"
                        macrodata:showCreate="${this.showCreate}"
                        macrodata:createAtEnd="${this.createAtEnd}"
                        macrodata:enableAutoScroll="${this.enableAutoScroll}"
                        macrodata:displayModePropertyBinding="${this.readOnly}"
                        macrodata:tableType="${this.tableType}"
                        macrodata:targetCollectionPath="${f.getContextPath(null,{context:this.collection})}"
                        macrodata:entityType="${f.getContextPath(null,{context:this.collection})+"/"}"
                        macrodata:metaPath="${f.getContextPath(null,{context:this.collection})}"
                        macrodata:onChange="${this.onChange}"
                        macrodata:hiddenFilters="${v.formatHiddenFilters((c=this.tableDefinition.control.filters)===null||c===void 0?void 0:c.hiddenFilters)}"
                        macrodata:requestGroupId="$auto.Workers"
                        macrodata:segmentedButtonId="${Gt([this.id,"SegmentedButton","TemplateContentView"])}"
                        macrodata:enablePaste="${this.enablePaste}"
                        macrodata:operationAvailableMap="${f.stringifyCustomData(this.tableDefinition.operationAvailableMap)}"
                        visible="${this.visible}"
						modelContextChange="${C}"
                    >
                        <mdc:dataStateIndicator>
                            <plugins:DataStateIndicator
                                filter="${this.dataStateIndicatorFilter}"
                                enableFiltering="true"
                                dataStateChange="API.onDataStateChange"
                            />
                        </mdc:dataStateIndicator>
                        <mdc:type>
                            ${this.getTableType()}
                        </mdc:type>
                        <mdc:dependents>
                            ${this.getDependents()}
                        </mdc:dependents>
                        <mdc:actions>
                            ${this.getActions()}
                        </mdc:actions>
                        <mdc:rowSettings>
                        ${this.getRowSetting()}
                        </mdc:rowSettings>
                        <mdc:columns>
                            <core:Fragment fragmentName="sap.fe.macros.table.Columns" type="XML" />
                        </mdc:columns>
                        ${this.getCreationRow()}
                        ${this.getVariantManagement()}
                        ${this.getQuickFilter()}
                    </mdc:Table>
				</template:with>
            </macroTable:TableAPI>
        `};return i}(t),Ee=ui(Ie.prototype,"metaPath",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),Oe=ui(Ie.prototype,"busy",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),Be=ui(Ie.prototype,"contextPath",[D],{configurable:true,enumerable:true,writable:true,initializer:null}),Fe=ui(Ie.prototype,"enableFullScreen",[$],{configurable:true,enumerable:true,writable:true,initializer:null}),Re=ui(Ie.prototype,"enableExport",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),ke=ui(Ie.prototype,"frozenColumnCount",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),Ve=ui(Ie.prototype,"enablePaste",[x],{configurable:true,enumerable:true,writable:true,initializer:null}),_e=ui(Ie.prototype,"filterBar",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),Le=ui(Ie.prototype,"header",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),Ne=ui(Ie.prototype,"headerLevel",[S],{configurable:true,enumerable:true,writable:true,initializer:function(){return Ut.Auto}}),je=ui(Ie.prototype,"headerVisible",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),Ue=ui(Ie.prototype,"id",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),He=ui(Ie.prototype,"isSearchable",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),qe=ui(Ie.prototype,"personalization",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),We=ui(Ie.prototype,"readOnly",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),Ge=ui(Ie.prototype,"type",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),Qe=ui(Ie.prototype,"useCondensedLayout",[k],{configurable:true,enumerable:true,writable:true,initializer:null}),Xe=ui(Ie.prototype,"selectionMode",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),Ke=ui(Ie.prototype,"variantManagement",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),Ye=ui(Ie.prototype,"collection",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),Je=ui(Ie.prototype,"_apiId",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),Ze=ui(Ie.prototype,"autoBindOnInit",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),et=ui(Ie.prototype,"columnEditMode",[U],{configurable:true,enumerable:true,writable:true,initializer:null}),tt=ui(Ie.prototype,"createAtEnd",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),it=ui(Ie.prototype,"createNewAction",[q],{configurable:true,enumerable:true,writable:true,initializer:null}),nt=ui(Ie.prototype,"creationMode",[W],{configurable:true,enumerable:true,writable:true,initializer:null}),at=ui(Ie.prototype,"createOutbound",[G],{configurable:true,enumerable:true,writable:true,initializer:null}),ot=ui(Ie.prototype,"customValidationFunction",[Q],{configurable:true,enumerable:true,writable:true,initializer:null}),rt=ui(Ie.prototype,"dataStateIndicatorFilter",[X],{configurable:true,enumerable:true,writable:true,initializer:null}),lt=ui(Ie.prototype,"disableAddRowButtonForEmptyData",[K],{configurable:true,enumerable:true,writable:true,initializer:null}),ut=ui(Ie.prototype,"enableAutoColumnWidth",[Y],{configurable:true,enumerable:true,writable:true,initializer:null}),st=ui(Ie.prototype,"enableAutoScroll",[J],{configurable:true,enumerable:true,writable:true,initializer:null}),ct=ui(Ie.prototype,"fieldMode",[Z],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),bt=ui(Ie.prototype,"filterBarId",[ee],{configurable:true,enumerable:true,writable:true,initializer:null}),dt=ui(Ie.prototype,"inlineCreationRowCount",[te],{configurable:true,enumerable:true,writable:true,initializer:null}),pt=ui(Ie.prototype,"isAlp",[ie],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),mt=ui(Ie.prototype,"isCompactType",[ne],{configurable:true,enumerable:true,writable:true,initializer:null}),ft=ui(Ie.prototype,"isOptimizedForSmallDevice",[ae],{configurable:true,enumerable:true,writable:true,initializer:null}),gt=ui(Ie.prototype,"multiSelectMode",[oe],{configurable:true,enumerable:true,writable:true,initializer:null}),ht=ui(Ie.prototype,"navigationPath",[re],{configurable:true,enumerable:true,writable:true,initializer:null}),yt=ui(Ie.prototype,"noDataText",[le],{configurable:true,enumerable:true,writable:true,initializer:null}),vt=ui(Ie.prototype,"rowAction",[ue],{configurable:true,enumerable:true,writable:true,initializer:function(){return undefined}}),Ct=ui(Ie.prototype,"tableType",[se],{configurable:true,enumerable:true,writable:true,initializer:null}),wt=ui(Ie.prototype,"updatablePropertyPath",[ce],{configurable:true,enumerable:true,writable:true,initializer:null}),Pt=ui(Ie.prototype,"useBasicSearch",[be],{configurable:true,enumerable:true,writable:true,initializer:null}),Dt=ui(Ie.prototype,"searchable",[de],{configurable:true,enumerable:true,writable:true,initializer:null}),$t=ui(Ie.prototype,"selectionLimit",[pe],{configurable:true,enumerable:true,writable:true,initializer:null}),At=ui(Ie.prototype,"showCreate",[me],{configurable:true,enumerable:true,writable:true,initializer:null}),Tt=ui(Ie.prototype,"tableDefinition",[fe],{configurable:true,enumerable:true,writable:true,initializer:null}),xt=ui(Ie.prototype,"tableDefinitionContext",[ge],{configurable:true,enumerable:true,writable:true,initializer:null}),zt=ui(Ie.prototype,"tableDelegate",[he],{configurable:true,enumerable:true,writable:true,initializer:null}),Mt=ui(Ie.prototype,"tabTitle",[ye],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),St=ui(Ie.prototype,"visible",[ve],{configurable:true,enumerable:true,writable:true,initializer:null}),It=ui(Ie.prototype,"actions",[Ce],{configurable:true,enumerable:true,writable:true,initializer:null}),Et=ui(Ie.prototype,"columns",[we],{configurable:true,enumerable:true,writable:true,initializer:null}),Ot=ui(Ie.prototype,"rowPress",[Pe],{configurable:true,enumerable:true,writable:true,initializer:null}),Bt=ui(Ie.prototype,"onContextChange",[De],{configurable:true,enumerable:true,writable:true,initializer:null}),Ft=ui(Ie.prototype,"onChange",[$e],{configurable:true,enumerable:true,writable:true,initializer:null}),Rt=ui(Ie.prototype,"onSegmentedButtonPressed",[Ae],{configurable:true,enumerable:true,writable:true,initializer:null}),kt=ui(Ie.prototype,"variantSaved",[Te],{configurable:true,enumerable:true,writable:true,initializer:null}),Vt=ui(Ie.prototype,"stateChange",[xe],{configurable:true,enumerable:true,writable:true,initializer:null}),_t=ui(Ie.prototype,"selectionChange",[ze],{configurable:true,enumerable:true,writable:true,initializer:null}),Lt=ui(Ie.prototype,"variantSelected",[Me],{configurable:true,enumerable:true,writable:true,initializer:null}),Ie))||Se);Nt=di;return Nt},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableAPI-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/editFlow/NotApplicableContextDialog", "sap/fe/core/controllerextensions/routing/NavigationReason", "sap/fe/core/converters/ManifestSettings", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/DeleteHelper", "sap/fe/core/helpers/PasteHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/filter/FilterUtils", "sap/fe/macros/table/Utils", "sap/m/MessageBox", "sap/ui/core/Core", "sap/ui/core/message/Message", "sap/ui/model/Filter", "../insights/CommonInsightsHelper", "../insights/InsightsCardHelper", "../MacroAPI", "./TableHelper"], function (Log, CommonUtils, NotApplicableContextDialog, NavigationReason, ManifestSettings, MetaModelConverter, ClassSupport, DeleteHelper, PasteHelper, ResourceModelHelper, ChartUtils, FilterUtils, TableUtils, MessageBox, Core, Message, Filter, CommonInsightsHelper, InsightsCardHelper, MacroAPI, TableHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34;
  var showInsightsCardPreview = InsightsCardHelper.showInsightsCardPreview;
  var IntegrationCardType = InsightsCardHelper.IntegrationCardType;
  var genericErrorMessageForInsightsCard = InsightsCardHelper.genericErrorMessageForInsightsCard;
  var getInsightsRelevantColumns = CommonInsightsHelper.getInsightsRelevantColumns;
  var createInsightsParams = CommonInsightsHelper.createInsightsParams;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var getLocalizedText = ResourceModelHelper.getLocalizedText;
  var xmlEventHandler = ClassSupport.xmlEventHandler;
  var property = ClassSupport.property;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  var convertTypes = MetaModelConverter.convertTypes;
  var CreationMode = ManifestSettings.CreationMode;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Building block used to create a table based on the metadata provided by OData V4.
   * <br>
   * Usually, a LineItem or PresentationVariant annotation is expected, but the Table building block can also be used to display an EntitySet.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:Table id="MyTable" metaPath="@com.sap.vocabularies.UI.v1.LineItem" /&gt;
   * </pre>
   *
   * @alias sap.fe.macros.Table
   * @public
   */
  let TableAPI = (_dec = defineUI5Class("sap.fe.macros.table.TableAPI", {
    returnTypes: ["sap.fe.macros.MacroAPI"]
  }), _dec2 = property({
    type: "string",
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"],
    expectedAnnotations: ["com.sap.vocabularies.UI.v1.LineItem", "com.sap.vocabularies.UI.v1.PresentationVariant", "com.sap.vocabularies.UI.v1.SelectionPresentationVariant"]
  }), _dec3 = property({
    type: "string",
    expectedTypes: ["EntitySet", "EntityType", "Singleton", "NavigationProperty"]
  }), _dec4 = property({
    type: "object"
  }), _dec5 = property({
    type: "string"
  }), _dec6 = property({
    type: "boolean"
  }), _dec7 = property({
    type: "string"
  }), _dec8 = property({
    type: "boolean",
    defaultValue: false
  }), _dec9 = property({
    type: "string",
    defaultValue: "ResponsiveTable",
    allowedValues: ["GridTable", "ResponsiveTable"]
  }), _dec10 = property({
    type: "boolean",
    defaultValue: true
  }), _dec11 = property({
    type: "boolean",
    defaultValue: false
  }), _dec12 = property({
    type: "boolean",
    defaultValue: false
  }), _dec13 = property({
    type: "string"
  }), _dec14 = property({
    type: "string",
    allowedValues: ["None", "Single", "Multi", "Auto"]
  }), _dec15 = property({
    type: "string"
  }), _dec16 = property({
    type: "boolean",
    defaultValue: true
  }), _dec17 = property({
    type: "boolean",
    defaultValue: false
  }), _dec18 = property({
    type: "boolean",
    defaultValue: true
  }), _dec19 = property({
    type: "number"
  }), _dec20 = aggregation({
    type: "sap.fe.macros.table.Action",
    multiple: true
  }), _dec21 = aggregation({
    type: "sap.fe.macros.table.Column",
    multiple: true
  }), _dec22 = property({
    type: "boolean",
    defaultValue: false
  }), _dec23 = property({
    type: "boolean",
    defaultValue: false
  }), _dec24 = property({
    type: "boolean",
    defaultValue: false
  }), _dec25 = property({
    type: "boolean",
    defaultValue: false
  }), _dec26 = property({
    type: "boolean",
    defaultValue: false
  }), _dec27 = event(), _dec28 = event(), _dec29 = event(), _dec30 = event(), _dec31 = property({
    type: "boolean | string",
    defaultValue: true
  }), _dec32 = property({
    type: "string",
    allowedValues: ["Control"]
  }), _dec33 = property({
    type: "string"
  }), _dec34 = property({
    type: "boolean",
    defaultValue: true
  }), _dec35 = event(), _dec36 = xmlEventHandler(), _dec37 = xmlEventHandler(), _dec38 = xmlEventHandler(), _dec39 = xmlEventHandler(), _dec40 = xmlEventHandler(), _dec41 = xmlEventHandler(), _dec42 = xmlEventHandler(), _dec43 = xmlEventHandler(), _dec44 = xmlEventHandler(), _dec45 = xmlEventHandler(), _dec46 = xmlEventHandler(), _dec47 = xmlEventHandler(), _dec48 = xmlEventHandler(), _dec(_class = (_class2 = /*#__PURE__*/function (_MacroAPI) {
    _inheritsLoose(TableAPI, _MacroAPI);
    function TableAPI(mSettings) {
      var _this;
      for (var _len = arguments.length, others = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        others[_key - 1] = arguments[_key];
      }
      _this = _MacroAPI.call(this, mSettings, ...others) || this;
      _initializerDefineProperty(_this, "metaPath", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "tableDefinition", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entityTypeFullyQualifiedName", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "readOnly", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "id", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "busy", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "type", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableExport", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enablePaste", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableFullScreen", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBar", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionMode", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "header", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableAutoColumnWidth", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isOptimizedForSmallDevice", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "headerVisible", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "frozenColumnCount", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actions", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "columns", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "dataInitialized", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "bindingSuspended", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "outDatedBinding", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "pendingRequest", _descriptor24, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "emptyRowsEnabled", _descriptor25, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "rowPress", _descriptor26, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "stateChange", _descriptor27, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextChange", _descriptor28, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "internalDataRequested", _descriptor29, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "personalization", _descriptor30, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "variantManagement", _descriptor31, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "menu", _descriptor32, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isSearchable", _descriptor33, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionChange", _descriptor34, _assertThisInitialized(_this));
      _this.updateFilterBar();
      if (_this.content) {
        _this.content.attachEvent("selectionChange", {}, _this.onTableSelectionChange, _assertThisInitialized(_this));
      }
      return _this;
    }

    /**
     * Defines the relative path of the property in the metamodel, based on the current contextPath.
     *
     * @public
     */
    /**
     * Gets the relevant tableAPI for a UI5 event.
     * An event can be triggered either by the inner control (the table) or the Odata listBinding
     * The first initiator is the usual one so it's managed by the MacroAPI whereas
     * the second one is specific to this API and has to managed by the TableAPI.
     *
     * @param ui5Event The UI5 event
     * @returns The TableAPI or false if not found
     * @private
     */
    TableAPI.getAPI = function getAPI(ui5Event) {
      const source = ui5Event.getSource();
      let tableAPI;
      if (source.isA("sap.ui.model.odata.v4.ODataListBinding")) {
        var _this$instanceMap, _this$instanceMap$get;
        tableAPI = (_this$instanceMap = this.instanceMap) === null || _this$instanceMap === void 0 ? void 0 : (_this$instanceMap$get = _this$instanceMap.get(this)) === null || _this$instanceMap$get === void 0 ? void 0 : _this$instanceMap$get.find(api => {
          var _api$content;
          return ((_api$content = api.content) === null || _api$content === void 0 ? void 0 : _api$content.getRowBinding()) === source;
        });
      }
      return tableAPI || _MacroAPI.getAPI.call(this, ui5Event);
    }

    /**
     * Gets contexts from the table that have been selected by the user.
     *
     * @returns Contexts of the rows selected by the user
     * @public
     */;
    var _proto = TableAPI.prototype;
    _proto.getSelectedContexts = function getSelectedContexts() {
      return this.content.getSelectedContexts();
    }

    /**
     * Adds a message to the table.
     *
     * The message applies to the whole table and not to an individual table row.
     *
     * @param [parameters] The parameters to create the message
     * @param parameters.type Message type
     * @param parameters.message Message text
     * @param parameters.description Message description
     * @param parameters.persistent True if the message is persistent
     * @returns The ID of the message
     * @public
     */;
    _proto.addMessage = function addMessage(parameters) {
      const msgManager = this._getMessageManager();
      const oTable = this.content;
      const oMessage = new Message({
        target: oTable.getRowBinding().getResolvedPath(),
        type: parameters.type,
        message: parameters.message,
        processor: oTable.getModel(),
        description: parameters.description,
        persistent: parameters.persistent
      });
      msgManager.addMessages(oMessage);
      return oMessage.getId();
    }

    /**
     * Removes a message from the table.
     *
     * @param id The id of the message
     * @public
     */;
    _proto.removeMessage = function removeMessage(id) {
      const msgManager = this._getMessageManager();
      const messages = msgManager.getMessageModel().getData();
      const result = messages.find(e => e.id === id);
      if (result) {
        msgManager.removeMessages(result);
      }
    }

    /**
     * Updates the counts displayed into the quickFilter selector.
     *
     * @returns  Promise resolves once the counts are updated
     */;
    _proto.updateQuickFilterCounts = async function updateQuickFilterCounts() {
      var _CommonUtils$getTarge, _getChartControl, _ref;
      const table = this.content,
        selector = table.getQuickFilter(),
        controller = (_CommonUtils$getTarge = CommonUtils.getTargetView(this)) === null || _CommonUtils$getTarge === void 0 ? void 0 : _CommonUtils$getTarge.getController(),
        svItems = selector.getItems(),
        internalContext = table.getBindingContext("internal"),
        bindingPromises = [],
        currentFilterKey = selector.getSelectedKey();
      const quickFilterCounts = {};
      let chartFilters = [];
      if (!controller || !internalContext) {
        return Promise.resolve();
      }

      // Add filters related to the chart for ALP
      const chart = (_getChartControl = (_ref = controller).getChartControl) === null || _getChartControl === void 0 ? void 0 : _getChartControl.call(_ref);
      const chartAPI = chart && chart.getParent();
      if (chartAPI && chartAPI.hasSelections()) {
        const chartFilterInfo = ChartUtils.getAllFilterInfo(chart);
        if (chartFilterInfo.filters.length) {
          chartFilterInfo.filters = CommonUtils.getChartPropertiesWithoutPrefixes(chartFilterInfo.filters);
          chartFilters = [new Filter({
            filters: chartFilterInfo.filters,
            and: true
          })];
        }
      }
      const additionalFilters = [...TableUtils.getHiddenFilters(table), ...chartFilters];
      for (const k in svItems) {
        const itemKey = svItems[k].getKey(),
          filterInfos = CommonUtils.getFiltersInfoForSV(table, itemKey);
        quickFilterCounts[k] = "...";
        bindingPromises.push(TableUtils.getListBindingForCount(table, table.getBindingContext(), {
          batchGroupId: itemKey === currentFilterKey ? "$auto.Workers" : "$auto",
          additionalFilters: [...additionalFilters, ...filterInfos.filters]
        }));
      }
      internalContext.setProperty("quickFilters", {
        counts: quickFilterCounts
      });
      try {
        const counts = await Promise.all(bindingPromises);
        for (const k in counts) {
          internalContext.setProperty(`quickFilters/counts/${k}`, TableUtils.getCountFormatted(counts[k]));
        }
      } catch (error) {
        Log.error("Error while retrieving the binding promises", error);
      }
    };
    _proto._getMessageManager = function _getMessageManager() {
      return sap.ui.getCore().getMessageManager();
    }

    /**
     * An event triggered when the selection in the table changes.
     *
     * @public
     */;
    _proto._getRowBinding = function _getRowBinding() {
      const oTable = this.getContent();
      return oTable.getRowBinding();
    };
    _proto.getCounts = function getCounts() {
      const oTable = this.getContent();
      return TableUtils.getListBindingForCount(oTable, oTable.getBindingContext(), {
        batchGroupId: !this.getProperty("bindingSuspended") ? oTable.data("batchGroupId") : "$auto",
        additionalFilters: TableUtils.getHiddenFilters(oTable)
      }).then(iValue => {
        return TableUtils.getCountFormatted(iValue);
      }).catch(() => {
        return "0";
      });
    }

    /**
     * Handles the context change on the table.
     * An event is fired to propagate the OdataListBinding event and the enablement
     * of the creation row is calculated.
     *
     * @param ui5Event The UI5 event
     */;
    _proto.onContextChange = function onContextChange(ui5Event) {
      this.fireEvent("contextChange", ui5Event.getParameters());
      this.setFastCreationRowEnablement();
    }

    /**
     * Handles the change on a quickFilter
     * The table is rebound if the FilterBar is not suspended and update the AppState.
     *
     */;
    _proto.onQuickFilterSelectionChange = function onQuickFilterSelectionChange() {
      var _filterBar$getSuspend, _CommonUtils$getTarge2, _CommonUtils$getTarge3;
      const table = this.content;
      // Rebind the table to reflect the change in quick filter key.
      // We don't rebind the table if the filterBar for the table is suspended
      // as rebind will be done when the filterBar is resumed
      const filterBarID = table.getFilter();
      const filterBar = filterBarID && Core.byId(filterBarID);
      if (!(filterBar !== null && filterBar !== void 0 && (_filterBar$getSuspend = filterBar.getSuspendSelection) !== null && _filterBar$getSuspend !== void 0 && _filterBar$getSuspend.call(filterBar))) {
        table.rebind();
      }
      (_CommonUtils$getTarge2 = CommonUtils.getTargetView(this)) === null || _CommonUtils$getTarge2 === void 0 ? void 0 : (_CommonUtils$getTarge3 = _CommonUtils$getTarge2.getController()) === null || _CommonUtils$getTarge3 === void 0 ? void 0 : _CommonUtils$getTarge3.getExtensionAPI().updateAppState();
    };
    _proto.onTableRowPress = function onTableRowPress(oEvent, oController, oContext, mParameters) {
      // prevent navigation to an empty row
      if (oContext && oContext.isInactive() && oContext.isTransient()) {
        return false;
      }
      // In the case of an analytical table, if we're trying to navigate to a context corresponding to a visual group or grand total
      // --> Cancel navigation
      if (this.getTableDefinition().enableAnalytics && oContext && oContext.isA("sap.ui.model.odata.v4.Context") && typeof oContext.getProperty("@$ui5.node.isExpanded") === "boolean") {
        return false;
      } else {
        const navigationParameters = Object.assign({}, mParameters, {
          reason: NavigationReason.RowPress
        });
        oController._routing.navigateForwardToContext(oContext, navigationParameters);
      }
    };
    _proto.onInternalPatchCompleted = function onInternalPatchCompleted() {
      // BCP: 2380023090
      // We handle enablement of Delete for the table here.
      // EditFlow.ts#handlePatchSent is handling the action enablement.
      const internalModelContext = this.getBindingContext("internal");
      const selectedContexts = this.getSelectedContexts();
      DeleteHelper.updateDeleteInfoForSelectedContexts(internalModelContext, selectedContexts);
    };
    _proto.onInternalDataReceived = function onInternalDataReceived(oEvent) {
      if (oEvent.getParameter("error")) {
        this.getController().messageHandler.showMessageDialog();
      }
    };
    _proto.onInternalDataRequested = function onInternalDataRequested(oEvent) {
      var _this$getTableDefinit, _this$getTableDefinit2;
      const table = this.content;
      this.setProperty("dataInitialized", true);
      this.fireEvent("internalDataRequested", oEvent.getParameters());
      if (table.getQuickFilter() && (_this$getTableDefinit = this.getTableDefinition().control.filters) !== null && _this$getTableDefinit !== void 0 && (_this$getTableDefinit2 = _this$getTableDefinit.quickFilters) !== null && _this$getTableDefinit2 !== void 0 && _this$getTableDefinit2.showCounts) {
        this.updateQuickFilterCounts();
      }
    };
    _proto.onPaste = function onPaste(oEvent, oController) {
      // If paste is disable or if we're not in edit mode, we can't paste anything
      if (!this.tableDefinition.control.enablePaste || !this.getModel("ui").getProperty("/isEditable")) {
        return;
      }
      const aRawPastedData = oEvent.getParameter("data"),
        oTable = oEvent.getSource();
      if (oTable.getEnablePaste() === true) {
        PasteHelper.pasteData(aRawPastedData, oTable, oController);
      } else {
        const oResourceModel = sap.ui.getCore().getLibraryResourceBundle("sap.fe.core");
        MessageBox.error(oResourceModel.getText("T_OP_CONTROLLER_SAPFE_PASTE_DISABLED_MESSAGE"), {
          title: oResourceModel.getText("C_COMMON_SAPFE_ERROR")
        });
      }
    }

    // This event will allow us to intercept the export before is triggered to cover specific cases
    // that couldn't be addressed on the propertyInfos for each column.
    // e.g. Fixed Target Value for the datapoints
    ;
    _proto.onBeforeExport = function onBeforeExport(exportEvent) {
      const isSplitMode = exportEvent.getParameter("userExportSettings").splitCells,
        tableController = exportEvent.getSource(),
        exportSettings = exportEvent.getParameter("exportSettings"),
        tableDefinition = this.getTableDefinition();
      TableAPI.updateExportSettings(exportSettings, tableDefinition, tableController, isSplitMode);
    }

    /**
     * Handles the MDC DataStateIndicator plugin to display messageStrip on a table.
     *
     * @param oMessage
     * @param oTable
     * @name dataStateFilter
     * @returns Whether to render the messageStrip visible
     */;
    TableAPI.dataStateIndicatorFilter = function dataStateIndicatorFilter(oMessage, oTable) {
      var _oTable$getBindingCon;
      const sTableContextBindingPath = (_oTable$getBindingCon = oTable.getBindingContext()) === null || _oTable$getBindingCon === void 0 ? void 0 : _oTable$getBindingCon.getPath();
      const sTableRowBinding = (sTableContextBindingPath ? `${sTableContextBindingPath}/` : "") + oTable.getRowBinding().getPath();
      return sTableRowBinding === oMessage.getTarget() ? true : false;
    }

    /**
     * This event handles the DataState of the DataStateIndicator plugin from MDC on a table.
     * It's fired when new error messages are sent from the backend to update row highlighting.
     *
     * @name onDataStateChange
     * @param oEvent Event object
     */;
    _proto.onDataStateChange = function onDataStateChange(oEvent) {
      const oDataStateIndicator = oEvent.getSource();
      const aFilteredMessages = oEvent.getParameter("filteredMessages");
      if (aFilteredMessages) {
        const oInternalModel = oDataStateIndicator.getModel("internal");
        oInternalModel.setProperty("filteredMessages", aFilteredMessages, oDataStateIndicator.getBindingContext("internal"));
      }
    }

    /**
     * Updates the columns to be exported of a table.
     *
     * @param exportSettings The table export settings
     * @param tableDefinition The table definition from the table converter
     * @param tableController The table controller
     * @param isSplitMode Defines if the export has been launched using split mode
     * @returns The updated columns to be exported
     */;
    TableAPI.updateExportSettings = function updateExportSettings(exportSettings, tableDefinition, tableController, isSplitMode) {
      //Set static sizeLimit during export
      const columns = tableDefinition.columns;
      if (!tableDefinition.enableAnalytics && (tableDefinition.control.type === "ResponsiveTable" || tableDefinition.control.type === "GridTable")) {
        exportSettings.dataSource.sizeLimit = 1000;
      }
      const exportColumns = exportSettings.workbook.columns;
      for (let index = exportColumns.length - 1; index >= 0; index--) {
        const exportColumn = exportColumns[index];
        const resourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
        exportColumn.label = getLocalizedText(exportColumn.label, tableController);
        //translate boolean values
        if (exportColumn.type === "Boolean") {
          exportColumn.falseValue = resourceBundle.getText("no");
          exportColumn.trueValue = resourceBundle.getText("yes");
        }
        const targetValueColumn = columns === null || columns === void 0 ? void 0 : columns.find(column => {
          if (isSplitMode) {
            return this.columnWithTargetValueToBeAdded(column, exportColumn);
          } else {
            return false;
          }
        });
        if (targetValueColumn) {
          const columnToBeAdded = {
            label: resourceBundle.getText("TargetValue"),
            property: Array.isArray(exportColumn.property) ? exportColumn.property : [exportColumn.property],
            template: targetValueColumn.exportDataPointTargetValue
          };
          exportColumns.splice(index + 1, 0, columnToBeAdded);
        }
      }
      return exportSettings;
    }

    /**
     * Defines if a column that is to be exported and contains a DataPoint with a fixed target value needs to be added.
     *
     * @param column The column from the annotations column
     * @param columnExport The column to be exported
     * @returns `true` if the referenced column has defined a targetValue for the dataPoint, false else
     * @private
     */;
    TableAPI.columnWithTargetValueToBeAdded = function columnWithTargetValueToBeAdded(column, columnExport) {
      var _column$propertyInfos;
      let columnNeedsToBeAdded = false;
      if (column.exportDataPointTargetValue && ((_column$propertyInfos = column.propertyInfos) === null || _column$propertyInfos === void 0 ? void 0 : _column$propertyInfos.length) === 1) {
        //Add TargetValue column when exporting on split mode
        if (column.relativePath === columnExport.property || columnExport.property[0] === column.propertyInfos[0] || columnExport.property.includes(column.relativePath) || columnExport.property.includes(column.name)) {
          // part of a FieldGroup or from a lineItem or from a column on the entitySet
          delete columnExport.template;
          columnNeedsToBeAdded = true;
        }
      }
      return columnNeedsToBeAdded;
    };
    _proto.resumeBinding = function resumeBinding(bRequestIfNotInitialized) {
      this.setProperty("bindingSuspended", false);
      if (bRequestIfNotInitialized && !this.getDataInitialized() || this.getProperty("outDatedBinding")) {
        var _getContent;
        this.setProperty("outDatedBinding", false);
        (_getContent = this.getContent()) === null || _getContent === void 0 ? void 0 : _getContent.rebind();
      }
    };
    _proto.refreshNotApplicableFields = function refreshNotApplicableFields(oFilterControl) {
      const oTable = this.getContent();
      return FilterUtils.getNotApplicableFilters(oFilterControl, oTable);
    };
    _proto.suspendBinding = function suspendBinding() {
      this.setProperty("bindingSuspended", true);
    };
    _proto.invalidateContent = function invalidateContent() {
      this.setProperty("dataInitialized", false);
      this.setProperty("outDatedBinding", false);
    }

    /**
     * Sets the enablement of the creation row.
     * @private
     *
     */;
    _proto.setFastCreationRowEnablement = function setFastCreationRowEnablement() {
      const table = this.content;
      const fastCreationRow = table.getCreationRow();
      if (fastCreationRow && !fastCreationRow.getBindingContext()) {
        const tableBinding = table.getRowBinding();
        const bindingContext = tableBinding.getContext();
        if (bindingContext) {
          TableHelper.enableFastCreationRow(fastCreationRow, tableBinding.getPath(), bindingContext, bindingContext.getModel(), table.getModel("ui").getProperty("/isEditable"));
        }
      }
    }

    /**
     * Event handler to create insightsParams and call the API to show insights card preview for table.
     *
     * @returns Undefined if card preview is rendered.
     */;
    _proto.onAddCardToInsightsPressed = async function onAddCardToInsightsPressed() {
      try {
        const insightsRelevantColumns = getInsightsRelevantColumns(this);
        const insightsParams = await createInsightsParams(this, IntegrationCardType.table, insightsRelevantColumns);
        if (insightsParams) {
          showInsightsCardPreview(insightsParams);
          return;
        }
      } catch (e) {
        genericErrorMessageForInsightsCard(this.content);
        Log.error(e);
      }
    };
    _proto.onMassEditButtonPressed = function onMassEditButtonPressed(oEvent, pageController) {
      const oTable = this.content;
      if (pageController && pageController.massEdit) {
        pageController.massEdit.openMassEditDialog(oTable);
      } else {
        Log.warning("The Controller is not enhanced with Mass Edit functionality");
      }
    };
    _proto.onTableSelectionChange = function onTableSelectionChange(oEvent) {
      this.fireEvent("selectionChange", oEvent.getParameters());
    };
    _proto.onActionPress = async function onActionPress(oEvent, pageController, actionName, parameters) {
      parameters.model = oEvent.getSource().getModel();
      let executeAction = true;
      if (parameters.notApplicableContexts && parameters.notApplicableContexts.length > 0) {
        // If we have non applicable contexts, we need to open a dialog to ask the user if he wants to continue
        const convertedMetadata = convertTypes(parameters.model.getMetaModel());
        const entityType = convertedMetadata.resolvePath(this.entityTypeFullyQualifiedName).target;
        const myUnapplicableContextDialog = new NotApplicableContextDialog({
          entityType: entityType,
          notApplicableContexts: parameters.notApplicableContexts,
          title: parameters.label,
          resourceModel: getResourceModel(this)
        });
        parameters.contexts = parameters.applicableContexts;
        executeAction = await myUnapplicableContextDialog.open(this);
      }
      if (executeAction) {
        // Direct execution of the action
        try {
          return await pageController.editFlow.invokeAction(actionName, parameters);
        } catch (e) {
          Log.info(e);
        }
      }
    }

    /**
     * Expose the internal table definition for external usage in delegate.
     *
     * @returns The tableDefinition
     */;
    _proto.getTableDefinition = function getTableDefinition() {
      return this.tableDefinition;
    }

    /**
     * connect the filter to the tableAPI if required
     *
     * @private
     * @alias sap.fe.macros.TableAPI
     */;
    _proto.updateFilterBar = function updateFilterBar() {
      const table = this.getContent();
      const filterBarRefId = this.getFilterBar();
      if (table && filterBarRefId && table.getFilter() !== filterBarRefId) {
        this._setFilterBar(filterBarRefId);
      }
    }

    /**
     * Sets the filter depending on the type of filterBar.
     *
     * @param filterBarRefId Id of the filter bar
     * @private
     * @alias sap.fe.macros.TableAPI
     */;
    _proto._setFilterBar = function _setFilterBar(filterBarRefId) {
      var _CommonUtils$getTarge4;
      const table = this.getContent();

      // 'filterBar' property of macro:Table(passed as customData) might be
      // 1. A localId wrt View(FPM explorer example).
      // 2. Absolute Id(this was not supported in older versions).
      // 3. A localId wrt FragmentId(when an XMLComposite or Fragment is independently processed) instead of ViewId.
      //    'filterBar' was supported earlier as an 'association' to the 'mdc:Table' control inside 'macro:Table' in prior versions.
      //    In newer versions 'filterBar' is used like an association to 'macro:TableAPI'.
      //    This means that the Id is relative to 'macro:TableAPI'.
      //    This scenario happens in case of FilterBar and Table in a custom sections in OP of FEV4.

      const tableAPIId = this === null || this === void 0 ? void 0 : this.getId();
      const tableAPILocalId = this.data("tableAPILocalId");
      const potentialfilterBarId = tableAPILocalId && filterBarRefId && tableAPIId && tableAPIId.replace(new RegExp(tableAPILocalId + "$"), filterBarRefId); // 3

      const filterBar = ((_CommonUtils$getTarge4 = CommonUtils.getTargetView(this)) === null || _CommonUtils$getTarge4 === void 0 ? void 0 : _CommonUtils$getTarge4.byId(filterBarRefId)) || Core.byId(filterBarRefId) || Core.byId(potentialfilterBarId);
      if (filterBar) {
        if (filterBar.isA("sap.fe.macros.filterBar.FilterBarAPI")) {
          table.setFilter(`${filterBar.getId()}-content`);
        } else if (filterBar.isA("sap.ui.mdc.FilterBar")) {
          table.setFilter(filterBar.getId());
        }
      }
    };
    _proto.checkIfColumnExists = function checkIfColumnExists(aFilteredColummns, columnName) {
      return aFilteredColummns.some(function (oColumn) {
        if ((oColumn === null || oColumn === void 0 ? void 0 : oColumn.columnName) === columnName && oColumn !== null && oColumn !== void 0 && oColumn.sColumnNameVisible || (oColumn === null || oColumn === void 0 ? void 0 : oColumn.sTextArrangement) !== undefined && (oColumn === null || oColumn === void 0 ? void 0 : oColumn.sTextArrangement) === columnName) {
          return columnName;
        }
      });
    };
    _proto.getIdentifierColumn = function getIdentifierColumn() {
      const oTable = this.getContent();
      const headerInfoTitlePath = this.getTableDefinition().headerInfoTitle;
      const oMetaModel = oTable && oTable.getModel().getMetaModel(),
        sCurrentEntitySetName = oTable.data("metaPath");
      const aTechnicalKeys = oMetaModel.getObject(`${sCurrentEntitySetName}/$Type/$Key`);
      const aFilteredTechnicalKeys = [];
      if (aTechnicalKeys && aTechnicalKeys.length > 0) {
        aTechnicalKeys.forEach(function (technicalKey) {
          if (technicalKey !== "IsActiveEntity") {
            aFilteredTechnicalKeys.push(technicalKey);
          }
        });
      }
      const semanticKeyColumns = this.getTableDefinition().semanticKeys;
      const aVisibleColumns = [];
      const aFilteredColummns = [];
      const aTableColumns = oTable.getColumns();
      aTableColumns.forEach(function (oColumn) {
        const column = oColumn === null || oColumn === void 0 ? void 0 : oColumn.getDataProperty();
        aVisibleColumns.push(column);
      });
      aVisibleColumns.forEach(function (oColumn) {
        var _oTextArrangement$Co, _oTextArrangement$Co2;
        const oTextArrangement = oMetaModel.getObject(`${sCurrentEntitySetName}/$Type/${oColumn}@`);
        const sTextArrangement = oTextArrangement && ((_oTextArrangement$Co = oTextArrangement["@com.sap.vocabularies.Common.v1.Text"]) === null || _oTextArrangement$Co === void 0 ? void 0 : _oTextArrangement$Co.$Path);
        const sTextPlacement = oTextArrangement && ((_oTextArrangement$Co2 = oTextArrangement["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]) === null || _oTextArrangement$Co2 === void 0 ? void 0 : _oTextArrangement$Co2.$EnumMember);
        aFilteredColummns.push({
          columnName: oColumn,
          sTextArrangement: sTextArrangement,
          sColumnNameVisible: !(sTextPlacement === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly")
        });
      });
      let column;
      if (headerInfoTitlePath !== undefined && this.checkIfColumnExists(aFilteredColummns, headerInfoTitlePath)) {
        column = headerInfoTitlePath;
      } else if (semanticKeyColumns !== undefined && semanticKeyColumns.length === 1 && this.checkIfColumnExists(aFilteredColummns, semanticKeyColumns[0])) {
        column = semanticKeyColumns[0];
      } else if (aFilteredTechnicalKeys !== undefined && aFilteredTechnicalKeys.length === 1 && this.checkIfColumnExists(aFilteredColummns, aFilteredTechnicalKeys[0])) {
        column = aFilteredTechnicalKeys[0];
      }
      return column;
    }

    /**
     * EmptyRowsEnabled setter.
     *
     * @param enablement
     */;
    _proto.setEmptyRowsEnabled = function setEmptyRowsEnabled(enablement) {
      this.setProperty("emptyRowsEnabled", enablement);
      this.setUpEmptyRows(this.content);
    };
    _proto.setUpEmptyRows = async function setUpEmptyRows(table) {
      var _this$tableDefinition, _this$tableDefinition2, _table$getBindingCont;
      let createButtonWasPressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (((_this$tableDefinition = this.tableDefinition.control) === null || _this$tableDefinition === void 0 ? void 0 : _this$tableDefinition.creationMode) !== CreationMode.InlineCreationRows) {
        return;
      }
      const uiModel = table.getModel("ui");
      if (!uiModel) {
        return;
      }
      if (uiModel.getProperty("/isEditablePending")) {
        // The edit mode is still being computed, so we wait until this computation is done before checking its value
        const watchBinding = uiModel.bindProperty("/isEditablePending");
        await new Promise(resolve => {
          const fnHandler = () => {
            watchBinding.detachChange(fnHandler);
            watchBinding.destroy();
            resolve();
          };
          watchBinding.attachChange(fnHandler);
        });
      }
      const isInEditMode = uiModel.getProperty("/isEditable");
      if (!isInEditMode) {
        return;
      }
      if ((_this$tableDefinition2 = this.tableDefinition.control) !== null && _this$tableDefinition2 !== void 0 && _this$tableDefinition2.inlineCreationRowsHiddenInEditMode && !((_table$getBindingCont = table.getBindingContext("ui")) !== null && _table$getBindingCont !== void 0 && _table$getBindingCont.getProperty("createMode")) && !createButtonWasPressed) {
        return;
      }
      const binding = table.getRowBinding();
      if (binding.isResolved() && binding.isLengthFinal()) {
        const contextPath = binding.getContext().getPath();
        if (!this.emptyRowsEnabled) {
          return this._deleteEmptyRows(binding, contextPath);
        }
        const inactiveContext = binding.getAllCurrentContexts().find(function (context) {
          // when this is called from controller code we need to check that inactive contexts are still relative to the current table context
          return context.isInactive() === true && context.getPath().startsWith(contextPath);
        });
        if (!inactiveContext) {
          await this._createEmptyRow(binding, table);
        }
      }
    }

    /**
     * Deletes inactive rows from the table listBinding.
     *
     * @param binding
     * @param contextPath
     */;
    _proto._deleteEmptyRows = function _deleteEmptyRows(binding, contextPath) {
      for (const context of binding.getAllCurrentContexts()) {
        if (context.isInactive() === true && context.getPath().startsWith(contextPath)) {
          context.delete();
        }
      }
    };
    _proto._createEmptyRow = async function _createEmptyRow(oBinding, oTable) {
      var _this$tableDefinition3;
      const iInlineCreationRowCount = ((_this$tableDefinition3 = this.tableDefinition.control) === null || _this$tableDefinition3 === void 0 ? void 0 : _this$tableDefinition3.inlineCreationRowCount) || 2;
      const aData = [];
      for (let i = 0; i < iInlineCreationRowCount; i += 1) {
        aData.push({});
      }
      const bAtEnd = oTable.data("tableType") !== "ResponsiveTable";
      const bInactive = true;
      const oView = CommonUtils.getTargetView(oTable);
      const oController = oView.getController();
      const editFlow = oController.editFlow;
      if (!this.creatingEmptyRows) {
        this.creatingEmptyRows = true;
        try {
          const aContexts = await editFlow.createMultipleDocuments(oBinding, aData, bAtEnd, false, oController.editFlow.onBeforeCreate, bInactive);
          aContexts === null || aContexts === void 0 ? void 0 : aContexts.forEach(function (oContext) {
            oContext.created().catch(function (oError) {
              if (!oError.canceled) {
                throw oError;
              }
            });
          });
        } catch (e) {
          Log.error(e);
        } finally {
          this.creatingEmptyRows = false;
        }
      }
    };
    return TableAPI;
  }(MacroAPI), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "tableDefinition", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "entityTypeFullyQualifiedName", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "readOnly", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "busy", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "type", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "enableExport", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "enablePaste", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "enableFullScreen", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "filterBar", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "selectionMode", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "header", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "enableAutoColumnWidth", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "isOptimizedForSmallDevice", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "headerVisible", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "frozenColumnCount", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "actions", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "columns", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "dataInitialized", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "bindingSuspended", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "outDatedBinding", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "pendingRequest", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor25 = _applyDecoratedDescriptor(_class2.prototype, "emptyRowsEnabled", [_dec26], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor26 = _applyDecoratedDescriptor(_class2.prototype, "rowPress", [_dec27], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor27 = _applyDecoratedDescriptor(_class2.prototype, "stateChange", [_dec28], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor28 = _applyDecoratedDescriptor(_class2.prototype, "contextChange", [_dec29], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor29 = _applyDecoratedDescriptor(_class2.prototype, "internalDataRequested", [_dec30], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor30 = _applyDecoratedDescriptor(_class2.prototype, "personalization", [_dec31], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor31 = _applyDecoratedDescriptor(_class2.prototype, "variantManagement", [_dec32], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor32 = _applyDecoratedDescriptor(_class2.prototype, "menu", [_dec33], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor33 = _applyDecoratedDescriptor(_class2.prototype, "isSearchable", [_dec34], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor34 = _applyDecoratedDescriptor(_class2.prototype, "selectionChange", [_dec35], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "onContextChange", [_dec36], Object.getOwnPropertyDescriptor(_class2.prototype, "onContextChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onQuickFilterSelectionChange", [_dec37], Object.getOwnPropertyDescriptor(_class2.prototype, "onQuickFilterSelectionChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onTableRowPress", [_dec38], Object.getOwnPropertyDescriptor(_class2.prototype, "onTableRowPress"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onInternalPatchCompleted", [_dec39], Object.getOwnPropertyDescriptor(_class2.prototype, "onInternalPatchCompleted"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onInternalDataReceived", [_dec40], Object.getOwnPropertyDescriptor(_class2.prototype, "onInternalDataReceived"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onInternalDataRequested", [_dec41], Object.getOwnPropertyDescriptor(_class2.prototype, "onInternalDataRequested"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onPaste", [_dec42], Object.getOwnPropertyDescriptor(_class2.prototype, "onPaste"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeExport", [_dec43], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeExport"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onDataStateChange", [_dec44], Object.getOwnPropertyDescriptor(_class2.prototype, "onDataStateChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAddCardToInsightsPressed", [_dec45], Object.getOwnPropertyDescriptor(_class2.prototype, "onAddCardToInsightsPressed"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onMassEditButtonPressed", [_dec46], Object.getOwnPropertyDescriptor(_class2.prototype, "onMassEditButtonPressed"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onTableSelectionChange", [_dec47], Object.getOwnPropertyDescriptor(_class2.prototype, "onTableSelectionChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onActionPress", [_dec48], Object.getOwnPropertyDescriptor(_class2.prototype, "onActionPress"), _class2.prototype)), _class2)) || _class);
  return TableAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableAPI", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/editFlow/NotApplicableContextDialog","sap/fe/core/controllerextensions/routing/NavigationReason","sap/fe/core/converters/ManifestSettings","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/DeleteHelper","sap/fe/core/helpers/PasteHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/macros/chart/ChartUtils","sap/fe/macros/filter/FilterUtils","sap/fe/macros/table/Utils","sap/m/MessageBox","sap/ui/core/Core","sap/ui/core/message/Message","sap/ui/model/Filter","../insights/CommonInsightsHelper","../insights/InsightsCardHelper","../MacroAPI","./TableHelper"],function(e,t,n,r,i,o,a,l,s,u,c,p,d,g,f,b,y,h,m,v,C){"use strict";var w,P,E,x,T,I,R,D,M,F,S,z,A,B,O,V,_,j,k,N,$,L,U,q,H,Q,W,G,K,J,X,Y,Z,ee,te,ne,re,ie,oe,ae,le,se,ue,ce,pe,de,ge,fe,be,ye,he,me,ve,Ce,we,Pe,Ee,xe,Te,Ie,Re,De,Me,Fe,Se,ze,Ae,Be,Oe,Ve,_e,je,ke,Ne,$e,Le,Ue,qe,He,Qe,We,Ge,Ke,Je;var Xe=m.showInsightsCardPreview;var Ye=m.IntegrationCardType;var Ze=m.genericErrorMessageForInsightsCard;var et=h.getInsightsRelevantColumns;var tt=h.createInsightsParams;var nt=u.getResourceModel;var rt=u.getLocalizedText;var it=a.xmlEventHandler;var ot=a.property;var at=a.event;var lt=a.defineUI5Class;var st=a.aggregation;var ut=o.convertTypes;var ct=i.CreationMode;function pt(e,t,n,r){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function dt(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function gt(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;ft(e,t)}function ft(e,t){ft=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return ft(e,t)}function bt(e,t,n,r,i){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o);if(i&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(i):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function yt(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let ht=(w=lt("sap.fe.macros.table.TableAPI",{returnTypes:["sap.fe.macros.MacroAPI"]}),P=ot({type:"string",expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"],expectedAnnotations:["com.sap.vocabularies.UI.v1.LineItem","com.sap.vocabularies.UI.v1.PresentationVariant","com.sap.vocabularies.UI.v1.SelectionPresentationVariant"]}),E=ot({type:"string",expectedTypes:["EntitySet","EntityType","Singleton","NavigationProperty"]}),x=ot({type:"object"}),T=ot({type:"string"}),I=ot({type:"boolean"}),R=ot({type:"string"}),D=ot({type:"boolean",defaultValue:false}),M=ot({type:"string",defaultValue:"ResponsiveTable",allowedValues:["GridTable","ResponsiveTable"]}),F=ot({type:"boolean",defaultValue:true}),S=ot({type:"boolean",defaultValue:false}),z=ot({type:"boolean",defaultValue:false}),A=ot({type:"string"}),B=ot({type:"string",allowedValues:["None","Single","Multi","Auto"]}),O=ot({type:"string"}),V=ot({type:"boolean",defaultValue:true}),_=ot({type:"boolean",defaultValue:false}),j=ot({type:"boolean",defaultValue:true}),k=ot({type:"number"}),N=st({type:"sap.fe.macros.table.Action",multiple:true}),$=st({type:"sap.fe.macros.table.Column",multiple:true}),L=ot({type:"boolean",defaultValue:false}),U=ot({type:"boolean",defaultValue:false}),q=ot({type:"boolean",defaultValue:false}),H=ot({type:"boolean",defaultValue:false}),Q=ot({type:"boolean",defaultValue:false}),W=at(),G=at(),K=at(),J=at(),X=ot({type:"boolean | string",defaultValue:true}),Y=ot({type:"string",allowedValues:["Control"]}),Z=ot({type:"string"}),ee=ot({type:"boolean",defaultValue:true}),te=at(),ne=it(),re=it(),ie=it(),oe=it(),ae=it(),le=it(),se=it(),ue=it(),ce=it(),pe=it(),de=it(),ge=it(),fe=it(),w(be=(ye=function(i){gt(o,i);function o(e){var t;for(var n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++){r[o-1]=arguments[o]}t=i.call(this,e,...r)||this;pt(t,"metaPath",he,dt(t));pt(t,"contextPath",me,dt(t));pt(t,"tableDefinition",ve,dt(t));pt(t,"entityTypeFullyQualifiedName",Ce,dt(t));pt(t,"readOnly",we,dt(t));pt(t,"id",Pe,dt(t));pt(t,"busy",Ee,dt(t));pt(t,"type",xe,dt(t));pt(t,"enableExport",Te,dt(t));pt(t,"enablePaste",Ie,dt(t));pt(t,"enableFullScreen",Re,dt(t));pt(t,"filterBar",De,dt(t));pt(t,"selectionMode",Me,dt(t));pt(t,"header",Fe,dt(t));pt(t,"enableAutoColumnWidth",Se,dt(t));pt(t,"isOptimizedForSmallDevice",ze,dt(t));pt(t,"headerVisible",Ae,dt(t));pt(t,"frozenColumnCount",Be,dt(t));pt(t,"actions",Oe,dt(t));pt(t,"columns",Ve,dt(t));pt(t,"dataInitialized",_e,dt(t));pt(t,"bindingSuspended",je,dt(t));pt(t,"outDatedBinding",ke,dt(t));pt(t,"pendingRequest",Ne,dt(t));pt(t,"emptyRowsEnabled",$e,dt(t));pt(t,"rowPress",Le,dt(t));pt(t,"stateChange",Ue,dt(t));pt(t,"contextChange",qe,dt(t));pt(t,"internalDataRequested",He,dt(t));pt(t,"personalization",Qe,dt(t));pt(t,"variantManagement",We,dt(t));pt(t,"menu",Ge,dt(t));pt(t,"isSearchable",Ke,dt(t));pt(t,"selectionChange",Je,dt(t));t.updateFilterBar();if(t.content){t.content.attachEvent("selectionChange",{},t.onTableSelectionChange,dt(t))}return t}o.getAPI=function e(t){const n=t.getSource();let r;if(n.isA("sap.ui.model.odata.v4.ODataListBinding")){var o,a;r=(o=this.instanceMap)===null||o===void 0?void 0:(a=o.get(this))===null||a===void 0?void 0:a.find(e=>{var t;return((t=e.content)===null||t===void 0?void 0:t.getRowBinding())===n})}return r||i.getAPI.call(this,t)};var a=o.prototype;a.getSelectedContexts=function e(){return this.content.getSelectedContexts()};a.addMessage=function e(t){const n=this._getMessageManager();const r=this.content;const i=new b({target:r.getRowBinding().getResolvedPath(),type:t.type,message:t.message,processor:r.getModel(),description:t.description,persistent:t.persistent});n.addMessages(i);return i.getId()};a.removeMessage=function e(t){const n=this._getMessageManager();const r=n.getMessageModel().getData();const i=r.find(e=>e.id===t);if(i){n.removeMessages(i)}};a.updateQuickFilterCounts=async function n(){var r,i,o;const a=this.content,l=a.getQuickFilter(),s=(r=t.getTargetView(this))===null||r===void 0?void 0:r.getController(),u=l.getItems(),p=a.getBindingContext("internal"),g=[],f=l.getSelectedKey();const b={};let h=[];if(!s||!p){return Promise.resolve()}const m=(i=(o=s).getChartControl)===null||i===void 0?void 0:i.call(o);const v=m&&m.getParent();if(v&&v.hasSelections()){const e=c.getAllFilterInfo(m);if(e.filters.length){e.filters=t.getChartPropertiesWithoutPrefixes(e.filters);h=[new y({filters:e.filters,and:true})]}}const C=[...d.getHiddenFilters(a),...h];for(const e in u){const n=u[e].getKey(),r=t.getFiltersInfoForSV(a,n);b[e]="...";g.push(d.getListBindingForCount(a,a.getBindingContext(),{batchGroupId:n===f?"$auto.Workers":"$auto",additionalFilters:[...C,...r.filters]}))}p.setProperty("quickFilters",{counts:b});try{const e=await Promise.all(g);for(const t in e){p.setProperty(`quickFilters/counts/${t}`,d.getCountFormatted(e[t]))}}catch(t){e.error("Error while retrieving the binding promises",t)}};a._getMessageManager=function e(){return sap.ui.getCore().getMessageManager()};a._getRowBinding=function e(){const t=this.getContent();return t.getRowBinding()};a.getCounts=function e(){const t=this.getContent();return d.getListBindingForCount(t,t.getBindingContext(),{batchGroupId:!this.getProperty("bindingSuspended")?t.data("batchGroupId"):"$auto",additionalFilters:d.getHiddenFilters(t)}).then(e=>d.getCountFormatted(e)).catch(()=>"0")};a.onContextChange=function e(t){this.fireEvent("contextChange",t.getParameters());this.setFastCreationRowEnablement()};a.onQuickFilterSelectionChange=function e(){var n,r,i;const o=this.content;const a=o.getFilter();const l=a&&f.byId(a);if(!(l!==null&&l!==void 0&&(n=l.getSuspendSelection)!==null&&n!==void 0&&n.call(l))){o.rebind()}(r=t.getTargetView(this))===null||r===void 0?void 0:(i=r.getController())===null||i===void 0?void 0:i.getExtensionAPI().updateAppState()};a.onTableRowPress=function e(t,n,i,o){if(i&&i.isInactive()&&i.isTransient()){return false}if(this.getTableDefinition().enableAnalytics&&i&&i.isA("sap.ui.model.odata.v4.Context")&&typeof i.getProperty("@$ui5.node.isExpanded")==="boolean"){return false}else{const e=Object.assign({},o,{reason:r.RowPress});n._routing.navigateForwardToContext(i,e)}};a.onInternalPatchCompleted=function e(){const t=this.getBindingContext("internal");const n=this.getSelectedContexts();l.updateDeleteInfoForSelectedContexts(t,n)};a.onInternalDataReceived=function e(t){if(t.getParameter("error")){this.getController().messageHandler.showMessageDialog()}};a.onInternalDataRequested=function e(t){var n,r;const i=this.content;this.setProperty("dataInitialized",true);this.fireEvent("internalDataRequested",t.getParameters());if(i.getQuickFilter()&&(n=this.getTableDefinition().control.filters)!==null&&n!==void 0&&(r=n.quickFilters)!==null&&r!==void 0&&r.showCounts){this.updateQuickFilterCounts()}};a.onPaste=function e(t,n){if(!this.tableDefinition.control.enablePaste||!this.getModel("ui").getProperty("/isEditable")){return}const r=t.getParameter("data"),i=t.getSource();if(i.getEnablePaste()===true){s.pasteData(r,i,n)}else{const e=sap.ui.getCore().getLibraryResourceBundle("sap.fe.core");g.error(e.getText("T_OP_CONTROLLER_SAPFE_PASTE_DISABLED_MESSAGE"),{title:e.getText("C_COMMON_SAPFE_ERROR")})}};a.onBeforeExport=function e(t){const n=t.getParameter("userExportSettings").splitCells,r=t.getSource(),i=t.getParameter("exportSettings"),a=this.getTableDefinition();o.updateExportSettings(i,a,r,n)};o.dataStateIndicatorFilter=function e(t,n){var r;const i=(r=n.getBindingContext())===null||r===void 0?void 0:r.getPath();const o=(i?`${i}/`:"")+n.getRowBinding().getPath();return o===t.getTarget()?true:false};a.onDataStateChange=function e(t){const n=t.getSource();const r=t.getParameter("filteredMessages");if(r){const e=n.getModel("internal");e.setProperty("filteredMessages",r,n.getBindingContext("internal"))}};o.updateExportSettings=function e(t,n,r,i){const o=n.columns;if(!n.enableAnalytics&&(n.control.type==="ResponsiveTable"||n.control.type==="GridTable")){t.dataSource.sizeLimit=1e3}const a=t.workbook.columns;for(let e=a.length-1;e>=0;e--){const t=a[e];const n=f.getLibraryResourceBundle("sap.fe.macros");t.label=rt(t.label,r);if(t.type==="Boolean"){t.falseValue=n.getText("no");t.trueValue=n.getText("yes")}const l=o===null||o===void 0?void 0:o.find(e=>{if(i){return this.columnWithTargetValueToBeAdded(e,t)}else{return false}});if(l){const r={label:n.getText("TargetValue"),property:Array.isArray(t.property)?t.property:[t.property],template:l.exportDataPointTargetValue};a.splice(e+1,0,r)}}return t};o.columnWithTargetValueToBeAdded=function e(t,n){var r;let i=false;if(t.exportDataPointTargetValue&&((r=t.propertyInfos)===null||r===void 0?void 0:r.length)===1){if(t.relativePath===n.property||n.property[0]===t.propertyInfos[0]||n.property.includes(t.relativePath)||n.property.includes(t.name)){delete n.template;i=true}}return i};a.resumeBinding=function e(t){this.setProperty("bindingSuspended",false);if(t&&!this.getDataInitialized()||this.getProperty("outDatedBinding")){var n;this.setProperty("outDatedBinding",false);(n=this.getContent())===null||n===void 0?void 0:n.rebind()}};a.refreshNotApplicableFields=function e(t){const n=this.getContent();return p.getNotApplicableFilters(t,n)};a.suspendBinding=function e(){this.setProperty("bindingSuspended",true)};a.invalidateContent=function e(){this.setProperty("dataInitialized",false);this.setProperty("outDatedBinding",false)};a.setFastCreationRowEnablement=function e(){const t=this.content;const n=t.getCreationRow();if(n&&!n.getBindingContext()){const e=t.getRowBinding();const r=e.getContext();if(r){C.enableFastCreationRow(n,e.getPath(),r,r.getModel(),t.getModel("ui").getProperty("/isEditable"))}}};a.onAddCardToInsightsPressed=async function t(){try{const e=et(this);const t=await tt(this,Ye.table,e);if(t){Xe(t);return}}catch(t){Ze(this.content);e.error(t)}};a.onMassEditButtonPressed=function t(n,r){const i=this.content;if(r&&r.massEdit){r.massEdit.openMassEditDialog(i)}else{e.warning("The Controller is not enhanced with Mass Edit functionality")}};a.onTableSelectionChange=function e(t){this.fireEvent("selectionChange",t.getParameters())};a.onActionPress=async function t(r,i,o,a){a.model=r.getSource().getModel();let l=true;if(a.notApplicableContexts&&a.notApplicableContexts.length>0){const e=ut(a.model.getMetaModel());const t=e.resolvePath(this.entityTypeFullyQualifiedName).target;const r=new n({entityType:t,notApplicableContexts:a.notApplicableContexts,title:a.label,resourceModel:nt(this)});a.contexts=a.applicableContexts;l=await r.open(this)}if(l){try{return await i.editFlow.invokeAction(o,a)}catch(t){e.info(t)}}};a.getTableDefinition=function e(){return this.tableDefinition};a.updateFilterBar=function e(){const t=this.getContent();const n=this.getFilterBar();if(t&&n&&t.getFilter()!==n){this._setFilterBar(n)}};a._setFilterBar=function e(n){var r;const i=this.getContent();const o=this===null||this===void 0?void 0:this.getId();const a=this.data("tableAPILocalId");const l=a&&n&&o&&o.replace(new RegExp(a+"$"),n);const s=((r=t.getTargetView(this))===null||r===void 0?void 0:r.byId(n))||f.byId(n)||f.byId(l);if(s){if(s.isA("sap.fe.macros.filterBar.FilterBarAPI")){i.setFilter(`${s.getId()}-content`)}else if(s.isA("sap.ui.mdc.FilterBar")){i.setFilter(s.getId())}}};a.checkIfColumnExists=function e(t,n){return t.some(function(e){if((e===null||e===void 0?void 0:e.columnName)===n&&e!==null&&e!==void 0&&e.sColumnNameVisible||(e===null||e===void 0?void 0:e.sTextArrangement)!==undefined&&(e===null||e===void 0?void 0:e.sTextArrangement)===n){return n}})};a.getIdentifierColumn=function e(){const t=this.getContent();const n=this.getTableDefinition().headerInfoTitle;const r=t&&t.getModel().getMetaModel(),i=t.data("metaPath");const o=r.getObject(`${i}/$Type/$Key`);const a=[];if(o&&o.length>0){o.forEach(function(e){if(e!=="IsActiveEntity"){a.push(e)}})}const l=this.getTableDefinition().semanticKeys;const s=[];const u=[];const c=t.getColumns();c.forEach(function(e){const t=e===null||e===void 0?void 0:e.getDataProperty();s.push(t)});s.forEach(function(e){var t,n;const o=r.getObject(`${i}/$Type/${e}@`);const a=o&&((t=o["@com.sap.vocabularies.Common.v1.Text"])===null||t===void 0?void 0:t.$Path);const l=o&&((n=o["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"])===null||n===void 0?void 0:n.$EnumMember);u.push({columnName:e,sTextArrangement:a,sColumnNameVisible:!(l==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly")})});let p;if(n!==undefined&&this.checkIfColumnExists(u,n)){p=n}else if(l!==undefined&&l.length===1&&this.checkIfColumnExists(u,l[0])){p=l[0]}else if(a!==undefined&&a.length===1&&this.checkIfColumnExists(u,a[0])){p=a[0]}return p};a.setEmptyRowsEnabled=function e(t){this.setProperty("emptyRowsEnabled",t);this.setUpEmptyRows(this.content)};a.setUpEmptyRows=async function e(t){var n,r,i;let o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(((n=this.tableDefinition.control)===null||n===void 0?void 0:n.creationMode)!==ct.InlineCreationRows){return}const a=t.getModel("ui");if(!a){return}if(a.getProperty("/isEditablePending")){const e=a.bindProperty("/isEditablePending");await new Promise(t=>{const n=()=>{e.detachChange(n);e.destroy();t()};e.attachChange(n)})}const l=a.getProperty("/isEditable");if(!l){return}if((r=this.tableDefinition.control)!==null&&r!==void 0&&r.inlineCreationRowsHiddenInEditMode&&!((i=t.getBindingContext("ui"))!==null&&i!==void 0&&i.getProperty("createMode"))&&!o){return}const s=t.getRowBinding();if(s.isResolved()&&s.isLengthFinal()){const e=s.getContext().getPath();if(!this.emptyRowsEnabled){return this._deleteEmptyRows(s,e)}const n=s.getAllCurrentContexts().find(function(t){return t.isInactive()===true&&t.getPath().startsWith(e)});if(!n){await this._createEmptyRow(s,t)}}};a._deleteEmptyRows=function e(t,n){for(const e of t.getAllCurrentContexts()){if(e.isInactive()===true&&e.getPath().startsWith(n)){e.delete()}}};a._createEmptyRow=async function n(r,i){var o;const a=((o=this.tableDefinition.control)===null||o===void 0?void 0:o.inlineCreationRowCount)||2;const l=[];for(let e=0;e<a;e+=1){l.push({})}const s=i.data("tableType")!=="ResponsiveTable";const u=true;const c=t.getTargetView(i);const p=c.getController();const d=p.editFlow;if(!this.creatingEmptyRows){this.creatingEmptyRows=true;try{const e=await d.createMultipleDocuments(r,l,s,false,p.editFlow.onBeforeCreate,u);e===null||e===void 0?void 0:e.forEach(function(e){e.created().catch(function(e){if(!e.canceled){throw e}})})}catch(t){e.error(t)}finally{this.creatingEmptyRows=false}}};return o}(v),he=bt(ye.prototype,"metaPath",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),me=bt(ye.prototype,"contextPath",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),ve=bt(ye.prototype,"tableDefinition",[x],{configurable:true,enumerable:true,writable:true,initializer:null}),Ce=bt(ye.prototype,"entityTypeFullyQualifiedName",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),we=bt(ye.prototype,"readOnly",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),Pe=bt(ye.prototype,"id",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),Ee=bt(ye.prototype,"busy",[D],{configurable:true,enumerable:true,writable:true,initializer:null}),xe=bt(ye.prototype,"type",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),Te=bt(ye.prototype,"enableExport",[F],{configurable:true,enumerable:true,writable:true,initializer:null}),Ie=bt(ye.prototype,"enablePaste",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),Re=bt(ye.prototype,"enableFullScreen",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),De=bt(ye.prototype,"filterBar",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),Me=bt(ye.prototype,"selectionMode",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),Fe=bt(ye.prototype,"header",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),Se=bt(ye.prototype,"enableAutoColumnWidth",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),ze=bt(ye.prototype,"isOptimizedForSmallDevice",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),Ae=bt(ye.prototype,"headerVisible",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),Be=bt(ye.prototype,"frozenColumnCount",[k],{configurable:true,enumerable:true,writable:true,initializer:null}),Oe=bt(ye.prototype,"actions",[N],{configurable:true,enumerable:true,writable:true,initializer:null}),Ve=bt(ye.prototype,"columns",[$],{configurable:true,enumerable:true,writable:true,initializer:null}),_e=bt(ye.prototype,"dataInitialized",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),je=bt(ye.prototype,"bindingSuspended",[U],{configurable:true,enumerable:true,writable:true,initializer:null}),ke=bt(ye.prototype,"outDatedBinding",[q],{configurable:true,enumerable:true,writable:true,initializer:null}),Ne=bt(ye.prototype,"pendingRequest",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),$e=bt(ye.prototype,"emptyRowsEnabled",[Q],{configurable:true,enumerable:true,writable:true,initializer:null}),Le=bt(ye.prototype,"rowPress",[W],{configurable:true,enumerable:true,writable:true,initializer:null}),Ue=bt(ye.prototype,"stateChange",[G],{configurable:true,enumerable:true,writable:true,initializer:null}),qe=bt(ye.prototype,"contextChange",[K],{configurable:true,enumerable:true,writable:true,initializer:null}),He=bt(ye.prototype,"internalDataRequested",[J],{configurable:true,enumerable:true,writable:true,initializer:null}),Qe=bt(ye.prototype,"personalization",[X],{configurable:true,enumerable:true,writable:true,initializer:null}),We=bt(ye.prototype,"variantManagement",[Y],{configurable:true,enumerable:true,writable:true,initializer:null}),Ge=bt(ye.prototype,"menu",[Z],{configurable:true,enumerable:true,writable:true,initializer:null}),Ke=bt(ye.prototype,"isSearchable",[ee],{configurable:true,enumerable:true,writable:true,initializer:null}),Je=bt(ye.prototype,"selectionChange",[te],{configurable:true,enumerable:true,writable:true,initializer:null}),bt(ye.prototype,"onContextChange",[ne],Object.getOwnPropertyDescriptor(ye.prototype,"onContextChange"),ye.prototype),bt(ye.prototype,"onQuickFilterSelectionChange",[re],Object.getOwnPropertyDescriptor(ye.prototype,"onQuickFilterSelectionChange"),ye.prototype),bt(ye.prototype,"onTableRowPress",[ie],Object.getOwnPropertyDescriptor(ye.prototype,"onTableRowPress"),ye.prototype),bt(ye.prototype,"onInternalPatchCompleted",[oe],Object.getOwnPropertyDescriptor(ye.prototype,"onInternalPatchCompleted"),ye.prototype),bt(ye.prototype,"onInternalDataReceived",[ae],Object.getOwnPropertyDescriptor(ye.prototype,"onInternalDataReceived"),ye.prototype),bt(ye.prototype,"onInternalDataRequested",[le],Object.getOwnPropertyDescriptor(ye.prototype,"onInternalDataRequested"),ye.prototype),bt(ye.prototype,"onPaste",[se],Object.getOwnPropertyDescriptor(ye.prototype,"onPaste"),ye.prototype),bt(ye.prototype,"onBeforeExport",[ue],Object.getOwnPropertyDescriptor(ye.prototype,"onBeforeExport"),ye.prototype),bt(ye.prototype,"onDataStateChange",[ce],Object.getOwnPropertyDescriptor(ye.prototype,"onDataStateChange"),ye.prototype),bt(ye.prototype,"onAddCardToInsightsPressed",[pe],Object.getOwnPropertyDescriptor(ye.prototype,"onAddCardToInsightsPressed"),ye.prototype),bt(ye.prototype,"onMassEditButtonPressed",[de],Object.getOwnPropertyDescriptor(ye.prototype,"onMassEditButtonPressed"),ye.prototype),bt(ye.prototype,"onTableSelectionChange",[ge],Object.getOwnPropertyDescriptor(ye.prototype,"onTableSelectionChange"),ye.prototype),bt(ye.prototype,"onActionPress",[fe],Object.getOwnPropertyDescriptor(ye.prototype,"onActionPress"),ye.prototype),ye))||be);return ht},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableFullScreenDialog.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/helpers/ClassSupport", "sap/m/Button", "sap/m/Dialog", "sap/m/library", "sap/m/Page", "sap/m/Panel", "sap/ui/core/Component", "sap/ui/core/Core", "sap/ui/core/util/reflection/JsControlTreeModifier", "sap/fe/core/jsx-runtime/jsx"], function (BuildingBlockSupport, RuntimeBuildingBlock, ClassSupport, Button, Dialog, mLibrary, Page, Panel, Component, Core, JsControlTreeModifier, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var _exports = {};
  var defineReference = ClassSupport.defineReference;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const ButtonType = mLibrary.ButtonType;
  let TableFullScreenDialogBlock = (_dec = defineBuildingBlock({
    name: "TableFullScreenDialog",
    namespace: "sap.fe.macros.table"
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = defineReference(), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(TableFullScreenDialogBlock, _RuntimeBuildingBlock);
    function TableFullScreenDialogBlock(props) {
      var _this;
      _this = _RuntimeBuildingBlock.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "fullScreenButton", _descriptor2, _assertThisInitialized(_this));
      _this.fullScreenDialogContentPage = new Page();
      _this.enteringFullScreen = false;
      _this.messageBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      return _this;
    }
    _exports = TableFullScreenDialogBlock;
    var _proto = TableFullScreenDialogBlock.prototype;
    /**
     * Main handler for switching between full screen dialog and normal display.
     *
     * @function
     * @name onFullScreenToggle
     */
    _proto.onFullScreenToggle = async function onFullScreenToggle() {
      this.enteringFullScreen = !this.enteringFullScreen;
      this.tableAPI = this.getTableAPI();
      if (!this.tablePlaceHolderPanel) {
        this.tablePlaceHolderPanel = this.createTablePlaceHolderPanel();
      }
      if (this.enteringFullScreen) {
        var _this$fullScreenButto, _this$fullScreenButto2;
        // change the button icon and text
        (_this$fullScreenButto = this.fullScreenButton.current) === null || _this$fullScreenButto === void 0 ? void 0 : _this$fullScreenButto.setIcon("sap-icon://exit-full-screen");
        (_this$fullScreenButto2 = this.fullScreenButton.current) === null || _this$fullScreenButto2 === void 0 ? void 0 : _this$fullScreenButto2.setTooltip(this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MINIMIZE"));

        // Store the current location of the table to be able to move it back later
        this.nonFullScreenTableParent = this.tableAPI.getParent();
        this._originalAggregationName = await JsControlTreeModifier.getParentAggregationName(this.tableAPI);

        // Replace the current position of the table with an empty Panel as a placeholder
        this.nonFullScreenTableParent.setAggregation(this._originalAggregationName, this.tablePlaceHolderPanel);

        // Create the full screen dialog
        this.createDialog();

        // Move the table over into the content page in the dialog and open the dialog
        this.fullScreenDialogContentPage.addContent(this.tableAPI);
        this.fullScreenDialog.open();
      } else {
        var _this$fullScreenButto3, _this$fullScreenButto4;
        // change the button icon and text
        (_this$fullScreenButto3 = this.fullScreenButton.current) === null || _this$fullScreenButto3 === void 0 ? void 0 : _this$fullScreenButto3.setIcon("sap-icon://full-screen");
        (_this$fullScreenButto4 = this.fullScreenButton.current) === null || _this$fullScreenButto4 === void 0 ? void 0 : _this$fullScreenButto4.setTooltip(this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MAXIMIZE"));

        // Move the table back to the old place and close the dialog
        this.nonFullScreenTableParent.setAggregation(this._originalAggregationName, this.tableAPI);
        this.fullScreenDialog.close();
      }
    }

    /**
     * Determine a reference to the TableAPI control starting from the button.
     *
     * @function
     * @name getTableAPI
     * @returns The TableAPI
     */;
    _proto.getTableAPI = function getTableAPI() {
      let currentControl = this.fullScreenButton.current;
      do {
        currentControl = currentControl.getParent();
      } while (!currentControl.isA("sap.fe.macros.table.TableAPI"));
      return currentControl;
    }

    /**
     * Create the panel which acts as the placeholder for the table as long as it is displayed in the
     * full screen dialog.
     *
     * @function
     * @name createTablePlaceHolderPanel
     * @returns A Panel as placeholder for the table API
     */;
    _proto.createTablePlaceHolderPanel = function createTablePlaceHolderPanel() {
      const tablePlaceHolderPanel = new Panel({});
      tablePlaceHolderPanel.data("tableAPIreference", this.tableAPI);
      tablePlaceHolderPanel.data("FullScreenTablePlaceHolder", true);
      return tablePlaceHolderPanel;
    }

    /**
     * Create the full screen dialog.
     *
     * @function
     * @name createDialog
     */;
    _proto.createDialog = function createDialog() {
      if (!this.fullScreenDialog) {
        this.fullScreenDialog = new Dialog({
          showHeader: false,
          stretch: true,
          afterOpen: () => {
            this.afterDialogOpen();
          },
          beforeClose: () => {
            this.beforeDialogClose();
          },
          afterClose: () => {
            this.afterDialogClose();
          },
          endButton: this.getEndButton(),
          content: this.fullScreenDialogContentPage
        });
        // The below is needed for correctly setting the focus after adding a new row in
        // the table in fullscreen mode
        this.fullScreenDialog.data("FullScreenDialog", true);

        // Add the dialog as a dependent to the original parent of the table in order to not lose the context
        this.nonFullScreenTableParent.addDependent(this.fullScreenDialog);
      }
    }

    /**
     * Create the full screen dialog close button.
     *
     * @function
     * @name getEndButton
     * @returns The button control
     */;
    _proto.getEndButton = function getEndButton() {
      return new Button({
        text: this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_CLOSE"),
        type: ButtonType.Transparent,
        press: () => {
          // Just close the dialog here, all the needed processing is triggered
          // in beforeClose.
          // This ensures, that we only do it once event if the user presses the
          // ESC key and the Close button simultaneously
          this.fullScreenDialog.close();
        }
      });
    }

    /**
     * Set the focus back to the full screen button after opening the dialog.
     *
     * @function
     * @name afterDialogOpen
     */;
    _proto.afterDialogOpen = function afterDialogOpen() {
      var _this$fullScreenButto5;
      (_this$fullScreenButto5 = this.fullScreenButton.current) === null || _this$fullScreenButto5 === void 0 ? void 0 : _this$fullScreenButto5.focus();
    }

    /**
     * Handle dialog close via Esc. navigation etc.
     *
     * @function
     * @name beforeDialogClose
     */;
    _proto.beforeDialogClose = function beforeDialogClose() {
      // In case fullscreen dialog was closed due to navigation to another page/view/app, "Esc" click, etc. The dialog close
      // would be triggered externally and we need to clean up and move the table back to the old location
      if (this.tableAPI && this.enteringFullScreen) {
        this.onFullScreenToggle();
      }
    }

    /**
     * Some follow up after closing the dialog.
     *
     * @function
     * @name afterDialogClose
     */;
    _proto.afterDialogClose = function afterDialogClose() {
      var _this$fullScreenButto6;
      const component = Component.getOwnerComponentFor(this.tableAPI);
      const appComponent = Component.getOwnerComponentFor(component);
      (_this$fullScreenButto6 = this.fullScreenButton.current) === null || _this$fullScreenButto6 === void 0 ? void 0 : _this$fullScreenButto6.focus();
      // trigger the automatic scroll to the latest navigated row :
      appComponent.getRootViewController().getView().getController()._scrollTablesToLastNavigatedItems();
    }

    /**
     * The building block render function.
     *
     * @function
     * @name getContent
     * @returns An XML-based string with the definition of the full screen button
     */;
    _proto.getContent = function getContent() {
      return _jsx(Button, {
        ref: this.fullScreenButton,
        id: this.id,
        tooltip: this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MAXIMIZE"),
        icon: "sap-icon://full-screen",
        press: () => this.onFullScreenToggle(),
        type: "Transparent",
        visible: true,
        enabled: true
      });
    };
    return TableFullScreenDialogBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "fullScreenButton", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = TableFullScreenDialogBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableFullScreenDialog.block", ["sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/helpers/ClassSupport","sap/m/Button","sap/m/Dialog","sap/m/library","sap/m/Page","sap/m/Panel","sap/ui/core/Component","sap/ui/core/Core","sap/ui/core/util/reflection/JsControlTreeModifier","sap/fe/core/jsx-runtime/jsx"],function(e,t,n,r,l,i,o,a,s,u,c,f){"use strict";var g,d,p,h,b,S,P;var v={};var B=n.defineReference;var m=e.defineBuildingBlock;var T=e.blockAttribute;function C(e,t,n,r){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function A(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function _(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;D(e,t)}function D(e,t){D=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return D(e,t)}function I(e,t,n,r,l){var i={};Object.keys(r).forEach(function(e){i[e]=r[e]});i.enumerable=!!i.enumerable;i.configurable=!!i.configurable;if("value"in i||i.initializer){i.writable=true}i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i);if(l&&i.initializer!==void 0){i.value=i.initializer?i.initializer.call(l):void 0;i.initializer=undefined}if(i.initializer===void 0){Object.defineProperty(e,t,i);i=null}return i}function O(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const E=i.ButtonType;let F=(g=m({name:"TableFullScreenDialog",namespace:"sap.fe.macros.table"}),d=T({type:"string",isPublic:true,required:true}),p=B(),g(h=(b=function(e){_(t,e);function t(t){var n;n=e.call(this,t)||this;C(n,"id",S,A(n));C(n,"fullScreenButton",P,A(n));n.fullScreenDialogContentPage=new o;n.enteringFullScreen=false;n.messageBundle=u.getLibraryResourceBundle("sap.fe.macros");return n}v=t;var n=t.prototype;n.onFullScreenToggle=async function e(){this.enteringFullScreen=!this.enteringFullScreen;this.tableAPI=this.getTableAPI();if(!this.tablePlaceHolderPanel){this.tablePlaceHolderPanel=this.createTablePlaceHolderPanel()}if(this.enteringFullScreen){var t,n;(t=this.fullScreenButton.current)===null||t===void 0?void 0:t.setIcon("sap-icon://exit-full-screen");(n=this.fullScreenButton.current)===null||n===void 0?void 0:n.setTooltip(this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MINIMIZE"));this.nonFullScreenTableParent=this.tableAPI.getParent();this._originalAggregationName=await c.getParentAggregationName(this.tableAPI);this.nonFullScreenTableParent.setAggregation(this._originalAggregationName,this.tablePlaceHolderPanel);this.createDialog();this.fullScreenDialogContentPage.addContent(this.tableAPI);this.fullScreenDialog.open()}else{var r,l;(r=this.fullScreenButton.current)===null||r===void 0?void 0:r.setIcon("sap-icon://full-screen");(l=this.fullScreenButton.current)===null||l===void 0?void 0:l.setTooltip(this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MAXIMIZE"));this.nonFullScreenTableParent.setAggregation(this._originalAggregationName,this.tableAPI);this.fullScreenDialog.close()}};n.getTableAPI=function e(){let t=this.fullScreenButton.current;do{t=t.getParent()}while(!t.isA("sap.fe.macros.table.TableAPI"));return t};n.createTablePlaceHolderPanel=function e(){const t=new a({});t.data("tableAPIreference",this.tableAPI);t.data("FullScreenTablePlaceHolder",true);return t};n.createDialog=function e(){if(!this.fullScreenDialog){this.fullScreenDialog=new l({showHeader:false,stretch:true,afterOpen:()=>{this.afterDialogOpen()},beforeClose:()=>{this.beforeDialogClose()},afterClose:()=>{this.afterDialogClose()},endButton:this.getEndButton(),content:this.fullScreenDialogContentPage});this.fullScreenDialog.data("FullScreenDialog",true);this.nonFullScreenTableParent.addDependent(this.fullScreenDialog)}};n.getEndButton=function e(){return new r({text:this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_CLOSE"),type:E.Transparent,press:()=>{this.fullScreenDialog.close()}})};n.afterDialogOpen=function e(){var t;(t=this.fullScreenButton.current)===null||t===void 0?void 0:t.focus()};n.beforeDialogClose=function e(){if(this.tableAPI&&this.enteringFullScreen){this.onFullScreenToggle()}};n.afterDialogClose=function e(){var t;const n=s.getOwnerComponentFor(this.tableAPI);const r=s.getOwnerComponentFor(n);(t=this.fullScreenButton.current)===null||t===void 0?void 0:t.focus();r.getRootViewController().getView().getController()._scrollTablesToLastNavigatedItems()};n.getContent=function e(){return f(r,{ref:this.fullScreenButton,id:this.id,tooltip:this.messageBundle.getText("M_COMMON_TABLE_FULLSCREEN_MAXIMIZE"),icon:"sap-icon://full-screen",press:()=>this.onFullScreenToggle(),type:"Transparent",visible:true,enabled:true})};return t}(t),S=I(b.prototype,"id",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),P=I(b.prototype,"fullScreenButton",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),b))||h);v=F;return v},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableHelper-dbg", ["sap/base/Log", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/formatters/TableFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/SizeHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/library", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/CommonHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/internal/helpers/ActionHelper", "sap/fe/macros/table/TableSizeHelper", "sap/ui/mdc/enum/EditMode"], function (Log, DataVisualization, MetaModelConverter, TableFormatter, BindingToolkit, SizeHelper, StableIdHelper, TypeGuards, FELibrary, DataModelPathHelper, PropertyHelper, UIFormatters, CommonHelper, FieldTemplating, ActionHelper, TableSizeHelper, EditMode) {
  "use strict";

  var formatValueRecursively = FieldTemplating.formatValueRecursively;
  var getEditMode = UIFormatters.getEditMode;
  var isImageURL = PropertyHelper.isImageURL;
  var hasText = PropertyHelper.hasText;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var generate = StableIdHelper.generate;
  var ref = BindingToolkit.ref;
  var pathInModel = BindingToolkit.pathInModel;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var fn = BindingToolkit.fn;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var getUiControl = DataVisualization.getUiControl;
  const CreationMode = FELibrary.CreationMode;

  /**
   * Helper class used by the control library for OData-specific handling (OData V4)
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const TableHelper = {
    /**
     * Check if a given action is static.
     *
     * @param actionObject The instance or the path of the action
     * @param actionName The name of the action
     * @returns Returns 'true' if action is static, else 'false'
     * @private
     * @ui5-restricted
     */
    _isStaticAction: function (actionObject, actionName) {
      let action;
      if (actionObject) {
        if (Array.isArray(actionObject)) {
          const entityType = this._getActionOverloadEntityType(actionName);
          if (entityType) {
            action = actionObject.find(function (_action) {
              return _action.$IsBound && _action.$Parameter[0].$Type === entityType;
            });
          } else {
            // if this is just one - OK we take it. If it's more it's actually a wrong usage by the app
            // as we used the first one all the time we keep it as it is
            action = actionObject[0];
          }
        } else {
          action = actionObject;
        }
      }
      return !!action && typeof action !== "string" && action.$IsBound && !!action.$Parameter[0].$isCollection;
    },
    /**
     * Get the entity type of an action overload.
     *
     * @param sActionName The name of the action.
     * @returns The entity type used in the action overload.
     * @private
     */
    _getActionOverloadEntityType: function (sActionName) {
      if (sActionName && sActionName.indexOf("(") > -1) {
        const aParts = sActionName.split("(");
        return aParts[aParts.length - 1].replaceAll(")", "");
      }
      return undefined;
    },
    /**
     * Checks whether the action is overloaded on a different entity type.
     *
     * @param sActionName The name of the action.
     * @param sAnnotationTargetEntityType The entity type of the annotation target.
     * @returns Returns 'true' if the action is overloaded with a different entity type, else 'false'.
     * @private
     */
    _isActionOverloadOnDifferentType: function (sActionName, sAnnotationTargetEntityType) {
      const sEntityType = this._getActionOverloadEntityType(sActionName);
      return !!sEntityType && sAnnotationTargetEntityType !== sEntityType;
    },
    /**
     * Returns an array of the fields listed by the property RequestAtLeast in the PresentationVariant .
     *
     * @param oPresentationVariant The annotation related to com.sap.vocabularies.UI.v1.PresentationVariant.
     * @returns The fields.
     * @private
     * @ui5-restricted
     */
    getFieldsRequestedByPresentationVariant: function (oPresentationVariant) {
      var _oPresentationVariant;
      return ((_oPresentationVariant = oPresentationVariant.RequestAtLeast) === null || _oPresentationVariant === void 0 ? void 0 : _oPresentationVariant.map(oRequested => oRequested.value)) || [];
    },
    getNavigationAvailableFieldsFromLineItem: function (aLineItemContext) {
      const aSelectedFieldsArray = [];
      (aLineItemContext.getObject() || []).forEach(function (oRecord) {
        var _oRecord$NavigationAv;
        if (oRecord.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && !oRecord.Inline && !oRecord.Determining && (_oRecord$NavigationAv = oRecord.NavigationAvailable) !== null && _oRecord$NavigationAv !== void 0 && _oRecord$NavigationAv.$Path) {
          aSelectedFieldsArray.push(oRecord.NavigationAvailable.$Path);
        }
      });
      return aSelectedFieldsArray;
    },
    getNavigationAvailableMap: function (lineItemCollection) {
      const oIBNNavigationAvailableMap = {};
      lineItemCollection === null || lineItemCollection === void 0 ? void 0 : lineItemCollection.forEach(record => {
        if ("SemanticObject" in record) {
          const sKey = `${record.SemanticObject}-${record.Action}`;
          if (record.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && !record.Inline && record.RequiresContext) {
            if (record.NavigationAvailable !== undefined) {
              oIBNNavigationAvailableMap[sKey] = isPathAnnotationExpression(record.NavigationAvailable) ? record.NavigationAvailable.path : record.NavigationAvailable;
            }
          }
        }
      });
      return JSON.stringify(oIBNNavigationAvailableMap);
    },
    /**
     * Returns the context of the UI.LineItem.
     *
     * @param presentationContext The presentation context (either a presentation variant or a UI.LineItem)
     * @returns The context of the UI.LineItem
     */
    getUiLineItem: function (presentationContext) {
      return getUiControl(presentationContext, `@${"com.sap.vocabularies.UI.v1.LineItem"}`);
    },
    getUiLineItemObject: function (lineItemOrPresentationContext, convertedMetaData) {
      var _visualizations$find;
      const lineItemOrPresentationObject = convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target;
      if (!lineItemOrPresentationObject) return undefined;
      const visualizations = convertedMetaData.resolvePath(lineItemOrPresentationContext.getPath()).target.Visualizations;
      const lineItemObject = visualizations ? visualizations === null || visualizations === void 0 ? void 0 : (_visualizations$find = visualizations.find(item => item.value.indexOf("@" + "com.sap.vocabularies.UI.v1.LineItem") === 0)) === null || _visualizations$find === void 0 ? void 0 : _visualizations$find.$target : lineItemOrPresentationObject;
      return (lineItemObject === null || lineItemObject === void 0 ? void 0 : lineItemObject.term) === "com.sap.vocabularies.UI.v1.LineItem" ? lineItemObject : undefined;
    },
    /**
     * Creates and returns a select query with the selected fields from the parameters that were passed.
     *
     * @param table The instance of the inner model of the table building block
     * @returns The 'select' query that has the selected fields from the parameters that were passed
     */
    create$Select: function (table) {
      const selectedFields = [];
      const lineItemContext = TableHelper.getUiLineItem(table.metaPath);
      function pushField(field) {
        if (field && !selectedFields.includes(field) && field.indexOf("/") !== 0) {
          // Do not add singleton property (with absolute path) to $select
          selectedFields.push(field);
        }
      }
      function pushFieldList(fields) {
        if (fields !== null && fields !== void 0 && fields.length) {
          fields.forEach(pushField);
        }
      }
      const columns = table.tableDefinition.columns;
      const propertiesFromCustomColumns = this.getPropertiesFromCustomColumns(columns);
      if (propertiesFromCustomColumns !== null && propertiesFromCustomColumns !== void 0 && propertiesFromCustomColumns.length) {
        pushFieldList(propertiesFromCustomColumns);
      }
      if (lineItemContext.getPath().indexOf(`@${"com.sap.vocabularies.UI.v1.LineItem"}`) > -1) {
        var _targetCollection$ann, _table$contextObjectP, _table$contextObjectP2, _table$contextObjectP3, _table$contextObjectP4, _table$contextObjectP5, _table$contextObjectP6, _table$contextObjectP7, _table$contextObjectP8, _table$contextObjectP9, _table$contextObjectP10;
        // Don't process EntityType without LineItem
        const presentationAnnotation = getInvolvedDataModelObjects(table.metaPath).targetObject;
        const operationAvailableProperties = (table.tableDefinition.operationAvailableProperties || "").split(",");
        const applicableProperties = TableHelper._filterNonApplicableProperties(operationAvailableProperties, table.collection);
        const targetCollection = table.collectionEntity.entityType || table.collectionEntity.targetType;
        const aSemanticKeys = (((_targetCollection$ann = targetCollection.annotations.Common) === null || _targetCollection$ann === void 0 ? void 0 : _targetCollection$ann.SemanticKey) || []).map(oSemanticKey => oSemanticKey.value);
        if ((presentationAnnotation === null || presentationAnnotation === void 0 ? void 0 : presentationAnnotation.$Type) === "com.sap.vocabularies.UI.v1.PresentationVariantType") {
          pushFieldList(TableHelper.getFieldsRequestedByPresentationVariant(presentationAnnotation));
        }
        pushFieldList(TableHelper.getNavigationAvailableFieldsFromLineItem(lineItemContext));
        pushFieldList(applicableProperties);
        pushFieldList(aSemanticKeys);
        pushField((_table$contextObjectP = table.contextObjectPath.targetEntitySet) === null || _table$contextObjectP === void 0 ? void 0 : (_table$contextObjectP2 = _table$contextObjectP.annotations) === null || _table$contextObjectP2 === void 0 ? void 0 : (_table$contextObjectP3 = _table$contextObjectP2.Capabilities) === null || _table$contextObjectP3 === void 0 ? void 0 : (_table$contextObjectP4 = _table$contextObjectP3.DeleteRestrictions) === null || _table$contextObjectP4 === void 0 ? void 0 : (_table$contextObjectP5 = _table$contextObjectP4.Deletable) === null || _table$contextObjectP5 === void 0 ? void 0 : _table$contextObjectP5.path);
        pushField((_table$contextObjectP6 = table.contextObjectPath.targetEntitySet) === null || _table$contextObjectP6 === void 0 ? void 0 : (_table$contextObjectP7 = _table$contextObjectP6.annotations) === null || _table$contextObjectP7 === void 0 ? void 0 : (_table$contextObjectP8 = _table$contextObjectP7.Capabilities) === null || _table$contextObjectP8 === void 0 ? void 0 : (_table$contextObjectP9 = _table$contextObjectP8.UpdateRestrictions) === null || _table$contextObjectP9 === void 0 ? void 0 : (_table$contextObjectP10 = _table$contextObjectP9.Updatable) === null || _table$contextObjectP10 === void 0 ? void 0 : _table$contextObjectP10.path);
      }
      return selectedFields.join(",");
    },
    /**
     * Method to get column's width if defined from manifest or from customization via annotations.
     *
     * @function
     * @name getColumnWidth
     * @param oThis The instance of the inner model of the Table building block
     * @param column Defined width of the column, which is taken with priority if not null, undefined or empty
     * @param dataField DataField definition object
     * @param dataFieldActionText DataField's text from button
     * @param dataModelObjectPath The object path of the data model
     * @param useRemUnit Indicates if the rem unit must be concatenated with the column width result
     * @param microChartTitle The object containing title and description of the MicroChart
     * @returns - Column width if defined, otherwise width is set to auto
     */
    getColumnWidth: function (oThis, column, dataField, dataFieldActionText, dataModelObjectPath, useRemUnit, microChartTitle) {
      if (column.width) {
        return column.width;
      }
      if (oThis.enableAutoColumnWidth === true) {
        let width;
        width = this.getColumnWidthForImage(dataModelObjectPath) || this.getColumnWidthForDataField(oThis, column, dataField, dataFieldActionText, dataModelObjectPath, microChartTitle) || undefined;
        if (width) {
          return useRemUnit ? `${width}rem` : width;
        }
        width = compileExpression(formatResult([pathInModel("/editMode", "ui"), pathInModel("tablePropertiesAvailable", "internal"), column.name, useRemUnit], TableFormatter.getColumnWidth));
        return width;
      }
      return undefined;
    },
    /**
     * Method to get the width of the column containing an image.
     *
     * @function
     * @name getColumnWidthForImage
     * @param dataModelObjectPath The data model object path
     * @returns - Column width if defined, otherwise null (the width is treated as a rem value)
     */
    getColumnWidthForImage: function (dataModelObjectPath) {
      var _dataModelObjectPath$, _dataModelObjectPath$2, _dataModelObjectPath$3, _dataModelObjectPath$4, _dataModelObjectPath$5, _dataModelObjectPath$6, _dataModelObjectPath$7, _dataModelObjectPath$8, _dataModelObjectPath$9, _dataModelObjectPath$10, _annotations$Core2, _annotations$Core2$Me;
      let width = null;
      const annotations = (_dataModelObjectPath$ = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$ === void 0 ? void 0 : (_dataModelObjectPath$2 = _dataModelObjectPath$.Value) === null || _dataModelObjectPath$2 === void 0 ? void 0 : (_dataModelObjectPath$3 = _dataModelObjectPath$2.$target) === null || _dataModelObjectPath$3 === void 0 ? void 0 : _dataModelObjectPath$3.annotations;
      const dataType = (_dataModelObjectPath$4 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$4 === void 0 ? void 0 : (_dataModelObjectPath$5 = _dataModelObjectPath$4.Value) === null || _dataModelObjectPath$5 === void 0 ? void 0 : (_dataModelObjectPath$6 = _dataModelObjectPath$5.$target) === null || _dataModelObjectPath$6 === void 0 ? void 0 : _dataModelObjectPath$6.type;
      if ((_dataModelObjectPath$7 = dataModelObjectPath.targetObject) !== null && _dataModelObjectPath$7 !== void 0 && _dataModelObjectPath$7.Value && getEditMode((_dataModelObjectPath$8 = dataModelObjectPath.targetObject.Value) === null || _dataModelObjectPath$8 === void 0 ? void 0 : _dataModelObjectPath$8.$target, dataModelObjectPath, false, false, dataModelObjectPath.targetObject) === EditMode.Display) {
        var _annotations$Core, _annotations$Core$Med;
        const hasTextAnnotation = hasText(dataModelObjectPath.targetObject.Value.$target);
        if (dataType === "Edm.Stream" && !hasTextAnnotation && annotations !== null && annotations !== void 0 && (_annotations$Core = annotations.Core) !== null && _annotations$Core !== void 0 && (_annotations$Core$Med = _annotations$Core.MediaType) !== null && _annotations$Core$Med !== void 0 && _annotations$Core$Med.includes("image/")) {
          width = 6.2;
        }
      } else if (annotations && (isImageURL((_dataModelObjectPath$9 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$9 === void 0 ? void 0 : (_dataModelObjectPath$10 = _dataModelObjectPath$9.Value) === null || _dataModelObjectPath$10 === void 0 ? void 0 : _dataModelObjectPath$10.$target) || annotations !== null && annotations !== void 0 && (_annotations$Core2 = annotations.Core) !== null && _annotations$Core2 !== void 0 && (_annotations$Core2$Me = _annotations$Core2.MediaType) !== null && _annotations$Core2$Me !== void 0 && _annotations$Core2$Me.includes("image/"))) {
        width = 6.2;
      }
      return width;
    },
    /**
     * Method to get the width of the column containing the DataField.
     *
     * @function
     * @name getColumnWidthForDataField
     * @param oThis The instance of the inner model of the Table building block
     * @param column Defined width of the column, which is taken with priority if not null, undefined or empty
     * @param dataField Data Field
     * @param dataFieldActionText DataField's text from button
     * @param dataModelObjectPath The data model object path
     * @param oMicroChartTitle The object containing the title and description of the MicroChart
     * @returns - Column width if defined, otherwise null ( the width is treated as a rem value)
     */
    getColumnWidthForDataField: function (oThis, column, dataField, dataFieldActionText, dataModelObjectPath, oMicroChartTitle) {
      var _dataModelObjectPath$11, _dataModelObjectPath$12;
      const annotations = (_dataModelObjectPath$11 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$11 === void 0 ? void 0 : _dataModelObjectPath$11.annotations;
      const dataType = (_dataModelObjectPath$12 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$12 === void 0 ? void 0 : _dataModelObjectPath$12.$Type;
      let width = null;
      if (dataType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || dataType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || dataType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && dataField.Target.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.FieldGroup"}`) === -1) {
        var _dataField$Label;
        let nTmpTextWidth;
        nTmpTextWidth = SizeHelper.getButtonWidth(dataFieldActionText) || SizeHelper.getButtonWidth(dataField === null || dataField === void 0 ? void 0 : (_dataField$Label = dataField.Label) === null || _dataField$Label === void 0 ? void 0 : _dataField$Label.toString()) || SizeHelper.getButtonWidth(annotations === null || annotations === void 0 ? void 0 : annotations.Label);

        // get width for rating or progress bar datafield
        const nTmpVisualizationWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(dataModelObjectPath.targetObject).propertyWidth;
        if (nTmpVisualizationWidth > nTmpTextWidth) {
          width = nTmpVisualizationWidth;
        } else if (dataFieldActionText || annotations && (annotations.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" || annotations.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction")) {
          // Add additional 1.8 rem to avoid showing ellipsis in some cases.
          nTmpTextWidth += 1.8;
          width = nTmpTextWidth;
        }
        width = width || this.getColumnWidthForChart(oThis, column, dataField, nTmpTextWidth, oMicroChartTitle);
      }
      return width;
    },
    /**
     * Method to get the width of the column containing the Chart.
     *
     * @function
     * @name getColumnWidthForChart
     * @param oThis The instance of the inner model of the Table building block
     * @param column Defined width of the column, which is taken with priority if not null, undefined or empty
     * @param dataField Data Field
     * @param columnLabelWidth The width of the column label or button label
     * @param microChartTitle The object containing the title and the description of the MicroChart
     * @returns - Column width if defined, otherwise null (the width is treated as a rem value)
     */
    getColumnWidthForChart(oThis, column, dataField, columnLabelWidth, microChartTitle) {
      var _dataField$Target, _dataField$Target$$An;
      let chartSize,
        width = null;
      if (((_dataField$Target = dataField.Target) === null || _dataField$Target === void 0 ? void 0 : (_dataField$Target$$An = _dataField$Target.$AnnotationPath) === null || _dataField$Target$$An === void 0 ? void 0 : _dataField$Target$$An.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`)) !== -1) {
        switch (this.getChartSize(oThis, column)) {
          case "XS":
            chartSize = 4.4;
            break;
          case "S":
            chartSize = 4.6;
            break;
          case "M":
            chartSize = 5.5;
            break;
          case "L":
            chartSize = 6.9;
            break;
          default:
            chartSize = 5.3;
        }
        columnLabelWidth += 1.8;
        if (!this.getShowOnlyChart(oThis, column) && microChartTitle && (microChartTitle.Title.length || microChartTitle.Description.length)) {
          const tmpText = microChartTitle.Title.length > microChartTitle.Description.length ? microChartTitle.Title : microChartTitle.Description;
          const titleSize = SizeHelper.getButtonWidth(tmpText) + 7;
          const tmpWidth = titleSize > columnLabelWidth ? titleSize : columnLabelWidth;
          width = tmpWidth;
        } else if (columnLabelWidth > chartSize) {
          width = columnLabelWidth;
        } else {
          width = chartSize;
        }
      }
      return width;
    },
    /**
     * Method to add a margin class at the control.
     *
     * @function
     * @name getMarginClass
     * @param oCollection Title of the DataPoint
     * @param oDataField Value of the DataPoint
     * @param sVisualization
     * @param sFieldGroupHiddenExpressions Hidden expression contained in FieldGroup
     * @returns Adjusting the margin
     */
    getMarginClass: function (oCollection, oDataField, sVisualization, sFieldGroupHiddenExpressions) {
      let sBindingExpression,
        sClass = "";
      if (JSON.stringify(oCollection[oCollection.length - 1]) == JSON.stringify(oDataField)) {
        //If rating indicator is last element in fieldgroup, then the 0.5rem margin added by sapMRI class of interactive rating indicator on top and bottom must be nullified.
        if (sVisualization == "com.sap.vocabularies.UI.v1.VisualizationType/Rating") {
          sClass = "sapUiNoMarginBottom sapUiNoMarginTop";
        }
      } else if (sVisualization === "com.sap.vocabularies.UI.v1.VisualizationType/Rating") {
        //If rating indicator is NOT the last element in fieldgroup, then to maintain the 0.5rem spacing between cogetMarginClassntrols (as per UX spec),
        //only the top margin added by sapMRI class of interactive rating indicator must be nullified.

        sClass = "sapUiNoMarginTop";
      } else {
        sClass = "sapUiTinyMarginBottom";
      }
      if (sFieldGroupHiddenExpressions && sFieldGroupHiddenExpressions !== "true" && sFieldGroupHiddenExpressions !== "false") {
        const sHiddenExpressionResult = sFieldGroupHiddenExpressions.substring(sFieldGroupHiddenExpressions.indexOf("{=") + 2, sFieldGroupHiddenExpressions.lastIndexOf("}"));
        sBindingExpression = "{= " + sHiddenExpressionResult + " ? '" + sClass + "' : " + "''" + " }";
        return sBindingExpression;
      } else {
        return sClass;
      }
    },
    /**
     * Method to get VBox visibility.
     *
     * @param collection Collection of data fields in VBox
     * @param fieldGroupHiddenExpressions Hidden expression contained in FieldGroup
     * @param fieldGroup Data field containing the VBox
     * @returns Visibility expression
     */
    getVBoxVisibility: function (collection, fieldGroupHiddenExpressions, fieldGroup) {
      let allStatic = true;
      const hiddenPaths = [];
      if (fieldGroup[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]) {
        return fieldGroupHiddenExpressions;
      }
      for (const dataField of collection) {
        const hiddenAnnotationValue = dataField[`@${"com.sap.vocabularies.UI.v1.Hidden"}`];
        if (hiddenAnnotationValue === undefined || hiddenAnnotationValue === false) {
          hiddenPaths.push(false);
          continue;
        }
        if (hiddenAnnotationValue === true) {
          hiddenPaths.push(true);
          continue;
        }
        if (hiddenAnnotationValue.$Path) {
          hiddenPaths.push(pathInModel(hiddenAnnotationValue.$Path));
          allStatic = false;
          continue;
        }
        if (typeof hiddenAnnotationValue === "object") {
          // Dynamic expression found in a field
          return fieldGroupHiddenExpressions;
        }
      }
      const hasAnyPathExpressions = constant(hiddenPaths.length > 0 && allStatic !== true);
      const hasAllHiddenStaticExpressions = constant(hiddenPaths.length > 0 && hiddenPaths.indexOf(false) === -1 && allStatic);
      return compileExpression(ifElse(hasAnyPathExpressions, formatResult(hiddenPaths, TableFormatter.getVBoxVisibility), ifElse(hasAllHiddenStaticExpressions, constant(false), constant(true))));
    },
    /**
     * Method to provide hidden filters to the table.
     *
     * @function
     * @name formatHiddenFilters
     * @param oHiddenFilter The hiddenFilters via context named filters (and key hiddenFilters) passed to Macro Table
     * @returns The string representation of the hidden filters
     */
    formatHiddenFilters: function (oHiddenFilter) {
      if (oHiddenFilter) {
        try {
          return JSON.stringify(oHiddenFilter);
        } catch (ex) {
          return undefined;
        }
      }
      return undefined;
    },
    /**
     * Method to get the stable ID of a table element (column or FieldGroup label).
     *
     * @function
     * @name getElementStableId
     * @param tableId Current object ID
     * @param elementId Element Id or suffix
     * @param dataModelObjectPath DataModelObjectPath of the dataField
     * @returns The stable ID for a given column
     */
    getElementStableId: function (tableId, elementId, dataModelObjectPath) {
      var _Value;
      if (!tableId) {
        return undefined;
      }
      const dataField = dataModelObjectPath.targetObject;
      let dataFieldPart;
      switch (dataField.$Type) {
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          dataFieldPart = dataField.Target.value;
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
          dataFieldPart = dataField;
          break;
        default:
          dataFieldPart = ((_Value = dataField.Value) === null || _Value === void 0 ? void 0 : _Value.path) ?? "";
          break;
      }
      return generate([tableId, elementId, dataFieldPart]);
    },
    /**
     * Method to get the stable ID of the column.
     *
     * @function
     * @name getColumnStableId
     * @param id Current object ID
     * @param dataModelObjectPath DataModelObjectPath of the dataField
     * @returns The stable ID for a given column
     */
    getColumnStableId: function (id, dataModelObjectPath) {
      return TableHelper.getElementStableId(id, "C", dataModelObjectPath);
    },
    getFieldGroupLabelStableId: function (id, dataModelObjectPath) {
      return TableHelper.getElementStableId(id, "FGLabel", dataModelObjectPath);
    },
    /**
     * Method filters out properties which do not belong to the collection.
     *
     * @param properties The array of properties to be checked.
     * @param collectionContext The collection context to be used.
     * @returns The array of applicable properties.
     * @private
     */
    _filterNonApplicableProperties: function (properties, collectionContext) {
      return properties && properties.filter(function (sPropertyPath) {
        return collectionContext.getObject(`./${sPropertyPath}`);
      });
    },
    /**
     * Method to retreive the listed properties from the custom columns
     *
     * @param columns The table columns
     * @returns The list of available properties from the custom columns
     * @private
     */

    getPropertiesFromCustomColumns: function (columns) {
      // Add properties from the custom columns, this is required for the export of all the properties listed on a custom column
      if (!(columns !== null && columns !== void 0 && columns.length)) {
        return;
      }
      const propertiesFromCustomColumns = [];
      for (const column of columns) {
        var _column$properties;
        if ("properties" in column && (_column$properties = column.properties) !== null && _column$properties !== void 0 && _column$properties.length) {
          for (const property of column.properties) {
            if (propertiesFromCustomColumns.indexOf(property) === -1) {
              // only add property if it doesn't exist
              propertiesFromCustomColumns.push(property);
            }
          }
        }
      }
      return propertiesFromCustomColumns;
    },
    /**
     * Method to generate the binding information for a table row.
     *
     * @param table The instance of the inner model of the table building block
     * @returns - Returns the binding information of a table row
     */
    getRowsBindingInfo: function (table) {
      const dataModelPath = getInvolvedDataModelObjects(table.collection, table.contextPath);
      const path = getContextRelativeTargetObjectPath(dataModelPath) || getTargetObjectPath(dataModelPath);
      const oRowBinding = {
        ui5object: true,
        suspended: false,
        path: CommonHelper.addSingleQuotes(path),
        parameters: {
          $count: true
        },
        events: {}
      };
      if (table.tableDefinition.enable$select) {
        // Don't add $select parameter in case of an analytical query, this isn't supported by the model
        const sSelect = TableHelper.create$Select(table);
        if (sSelect) {
          oRowBinding.parameters.$select = `'${sSelect}'`;
        }
      }
      if (table.tableDefinition.enable$$getKeepAliveContext) {
        // we later ensure in the delegate only one list binding for a given targetCollectionPath has the flag $$getKeepAliveContext
        oRowBinding.parameters.$$getKeepAliveContext = true;
      }
      oRowBinding.parameters.$$groupId = CommonHelper.addSingleQuotes("$auto.Workers");
      oRowBinding.parameters.$$updateGroupId = CommonHelper.addSingleQuotes("$auto");
      oRowBinding.parameters.$$ownRequest = true;
      oRowBinding.parameters.$$patchWithoutSideEffects = true;
      oRowBinding.events.patchSent = CommonHelper.addSingleQuotes(".editFlow.handlePatchSent");
      oRowBinding.events.patchCompleted = CommonHelper.addSingleQuotes("API.onInternalPatchCompleted");
      oRowBinding.events.dataReceived = CommonHelper.addSingleQuotes("API.onInternalDataReceived");
      oRowBinding.events.dataRequested = CommonHelper.addSingleQuotes("API.onInternalDataRequested");
      oRowBinding.events.change = CommonHelper.addSingleQuotes("API.onContextChange");
      // recreate an empty row when one is activated
      oRowBinding.events.createActivate = CommonHelper.addSingleQuotes(".editFlow.handleCreateActivate");
      return CommonHelper.objectToString(oRowBinding);
    },
    /**
     * Method to check the validity of the fields in the creation row.
     *
     * @function
     * @name validateCreationRowFields
     * @param oFieldValidityObject Current Object holding the fields
     * @returns `true` if all the fields in the creation row are valid, `false` otherwise
     */
    validateCreationRowFields: function (oFieldValidityObject) {
      if (!oFieldValidityObject) {
        return false;
      }
      return Object.keys(oFieldValidityObject).length > 0 && Object.keys(oFieldValidityObject).every(function (key) {
        return oFieldValidityObject[key]["validity"];
      });
    },
    /**
     * Method to get the expression for the 'press' event for the DataFieldForActionButton.
     *
     * @function
     * @name pressEventDataFieldForActionButton
     * @param tableProperties The properties of the table control
     * @param tableProperties.contextObjectPath The datamodel object path for the table
     * @param tableProperties.id The id of the table control
     * @param dataField Value of the DataPoint
     * @param entitySetName Name of the EntitySet
     * @param operationAvailableMap OperationAvailableMap as stringified JSON object
     * @param actionContext The instance or the path of the action
     * @param isNavigable Action either triggers navigation or not
     * @param enableAutoScroll Action either triggers scrolling to the newly created items in the related table or not
     * @param defaultValuesExtensionFunction Function name to prefill dialog parameters
     * @returns The binding expression
     */
    pressEventDataFieldForActionButton: function (tableProperties, dataField, entitySetName, operationAvailableMap, actionObject) {
      let isNavigable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      let enableAutoScroll = arguments.length > 6 ? arguments[6] : undefined;
      let defaultValuesExtensionFunction = arguments.length > 7 ? arguments[7] : undefined;
      if (!dataField) return undefined;
      const sActionName = dataField.Action,
        targetEntityTypeName = tableProperties.contextObjectPath.targetEntityType.fullyQualifiedName,
        staticAction = typeof actionObject !== "string" && (this._isStaticAction(actionObject, sActionName) || this._isActionOverloadOnDifferentType(sActionName, targetEntityTypeName)),
        params = {
          contexts: !staticAction ? pathInModel("selectedContexts", "internal") : null,
          bStaticAction: staticAction ? staticAction : undefined,
          entitySetName: entitySetName,
          applicableContexts: !staticAction ? pathInModel(`dynamicActions/${dataField.Action}/aApplicable/`, "internal") : null,
          notApplicableContexts: !staticAction ? pathInModel(`dynamicActions/${dataField.Action}/aNotApplicable/`, "internal") : null,
          isNavigable: isNavigable,
          enableAutoScroll: enableAutoScroll,
          defaultValuesExtensionFunction: defaultValuesExtensionFunction
        };
      params.invocationGrouping = (dataField === null || dataField === void 0 ? void 0 : dataField.InvocationGrouping) === "UI.OperationGroupingType/ChangeSet" ? "ChangeSet" : "Isolated";
      params.controlId = tableProperties.id;
      params.operationAvailableMap = operationAvailableMap;
      params.label = dataField.Label;
      return compileExpression(fn("API.onActionPress", [ref("$event"), ref("$controller"), dataField.Action, params]));
      //return ActionHelper.getPressEventDataFieldForActionButton(table.id!, dataField, params, operationAvailableMap);
    },

    /**
     * Method to determine the binding expression for 'enabled' property of DataFieldForAction actions.
     *
     * @function
     * @name isDataFieldForActionEnabled
     * @param tableDefinition The table definition from the table converter
     * @param actionName The name of the action
     * @param isBound IsBound for Action
     * @param actionContext The instance or the path of the action
     * @param enableOnSelect Define the enabling of the action (single or multiselect)
     * @param annotationTargetEntityType The entity type of the annotation target
     * @returns A binding expression to define the 'enabled' property of the action
     */
    isDataFieldForActionEnabled: function (tableDefinition, actionName, isBound, actionObject, enableOnSelect, annotationTargetEntityType) {
      const isStaticAction = this._isStaticAction(actionObject, actionName);

      // Check for action overload on a different Entity type.
      // If yes, table row selection is not required to enable this action.
      if (this._isActionOverloadOnDifferentType(actionName, annotationTargetEntityType)) {
        // Action overload defined on different entity type
        const oOperationAvailableMap = tableDefinition && JSON.parse(tableDefinition.operationAvailableMap);
        if (oOperationAvailableMap !== null && oOperationAvailableMap !== void 0 && oOperationAvailableMap.hasOwnProperty(actionName)) {
          // Core.OperationAvailable annotation defined for the action.
          // Need to refer to internal model for enabled property of the dynamic action.
          // return compileBinding(bindingExpression("dynamicActions/" + sActionName + "/bEnabled", "internal"), true);
          return `{= \${internal>dynamicActions/${actionName}/bEnabled} }`;
        }
        // Consider the action just like any other static DataFieldForAction.
        return true;
      }
      if (!isBound || isStaticAction) {
        return true;
      }
      let dataFieldForActionEnabledExpression = "";
      const numberOfSelectedContexts = ActionHelper.getNumberOfContextsExpression(enableOnSelect ?? "multiselect");
      const action = `\${internal>dynamicActions/${actionName}/bEnabled}`;
      dataFieldForActionEnabledExpression = `${numberOfSelectedContexts} && ${action}`;
      return `{= ${dataFieldForActionEnabledExpression}}`;
    },
    /**
     * Method to determine the binding expression for 'enabled' property of DataFieldForIBN actions.
     *
     * @function
     * @name isDataFieldForIBNEnabled
     * @param tableProperties The properties of the table control
     * @param tableProperties.collection  The collection context to be used
     * @param tableProperties.tableDefinition The table definition from the table converter
     * @param dataField The value of the data field
     * @param requiresContext RequiresContext for IBN
     * @param isNavigationAvailable Define if the navigation is available
     * @returns A binding expression to define the 'enabled' property of the action
     */
    isDataFieldForIBNEnabled: function (tableProperties, dataField, requiresContext, isNavigationAvailable) {
      var _tableProperties$tabl;
      let isNavigationAvailablePath = null;
      if (isPathAnnotationExpression(isNavigationAvailable)) {
        isNavigationAvailablePath = isNavigationAvailable.path;
      }
      const isAnalyticalTable = tableProperties === null || tableProperties === void 0 ? void 0 : (_tableProperties$tabl = tableProperties.tableDefinition) === null || _tableProperties$tabl === void 0 ? void 0 : _tableProperties$tabl.enableAnalytics;
      if (!requiresContext) {
        const entitySet = tableProperties.collection.getPath();
        const metaModel = tableProperties.collection.getModel();
        if (isNavigationAvailable === false && !isAnalyticalTable) {
          Log.warning("NavigationAvailable as false is incorrect usage");
          return false;
        } else if (isNavigationAvailablePath && !isAnalyticalTable && isPathAnnotationExpression(dataField === null || dataField === void 0 ? void 0 : dataField.NavigationAvailable) && metaModel.getObject(entitySet + "/$Partner") === dataField.NavigationAvailable.path.split("/")[0]) {
          return `{= \${${isNavigationAvailablePath.substring(isNavigationAvailablePath.indexOf("/") + 1, isNavigationAvailablePath.length)}}}`;
        }
        return true;
      }
      let dataFieldForIBNEnabledExpression = "",
        numberOfSelectedContexts,
        action;
      if (isNavigationAvailable === true || isAnalyticalTable) {
        dataFieldForIBNEnabledExpression = "%{internal>numberOfSelectedContexts} >= 1";
      } else if (isNavigationAvailable === false) {
        Log.warning("NavigationAvailable as false is incorrect usage");
        return false;
      } else {
        numberOfSelectedContexts = "%{internal>numberOfSelectedContexts} >= 1";
        action = `\${internal>ibn/${dataField.SemanticObject}-${dataField.Action}/bEnabled}`;
        dataFieldForIBNEnabledExpression = numberOfSelectedContexts + " && " + action;
      }
      return `{= ${dataFieldForIBNEnabledExpression}}`;
    },
    /**
     * Method to get press event expression for CreateButton.
     *
     * @function
     * @name pressEventForCreateButton
     * @param oThis Current Object
     * @param bCmdExecutionFlag Flag to indicate that the function is called from CMD Execution
     * @returns The binding expression for the press event of the create button
     */
    pressEventForCreateButton: function (oThis, bCmdExecutionFlag) {
      const sCreationMode = oThis.creationMode;
      let oParams;
      const sMdcTable = bCmdExecutionFlag ? "${$source>}.getParent()" : "${$source>}.getParent().getParent().getParent()";
      let sRowBinding = sMdcTable + ".getRowBinding() || " + sMdcTable + ".data('rowsBindingInfo').path";
      switch (sCreationMode) {
        case CreationMode.External:
          // navigate to external target for creating new entries
          // TODO: Add required parameters
          oParams = {
            creationMode: CommonHelper.addSingleQuotes(CreationMode.External),
            outbound: CommonHelper.addSingleQuotes(oThis.createOutbound)
          };
          break;
        case CreationMode.CreationRow:
          oParams = {
            creationMode: CommonHelper.addSingleQuotes(CreationMode.CreationRow),
            creationRow: "${$source>}",
            createAtEnd: oThis.createAtEnd !== undefined ? oThis.createAtEnd : false
          };
          sRowBinding = "${$source>}.getParent().getRowBinding()";
          break;
        case CreationMode.NewPage:
        case CreationMode.Inline:
          oParams = {
            creationMode: CommonHelper.addSingleQuotes(sCreationMode),
            createAtEnd: oThis.createAtEnd !== undefined ? oThis.createAtEnd : false,
            tableId: CommonHelper.addSingleQuotes(oThis.id)
          };
          if (oThis.createNewAction) {
            oParams.newAction = CommonHelper.addSingleQuotes(oThis.createNewAction);
          }
          break;
        case CreationMode.InlineCreationRows:
          return CommonHelper.generateFunction(".editFlow.createEmptyRowsAndFocus", sMdcTable);
        default:
          // unsupported
          return undefined;
      }
      return CommonHelper.generateFunction(".editFlow.createDocument", sRowBinding, CommonHelper.objectToString(oParams));
    },
    getIBNData: function (outboundDetail) {
      if (outboundDetail) {
        const oIBNData = {
          semanticObject: CommonHelper.addSingleQuotes(outboundDetail.semanticObject),
          action: CommonHelper.addSingleQuotes(outboundDetail.action)
        };
        return CommonHelper.objectToString(oIBNData);
      }
    },
    _getExpressionForDeleteButton: function (value, fullContextPath) {
      if (typeof value === "string") {
        return CommonHelper.addSingleQuotes(value, true);
      } else {
        const expression = getExpressionFromAnnotation(value);
        if (isConstant(expression) || isPathInModelExpression(expression)) {
          const valueExpression = formatValueRecursively(expression, fullContextPath);
          return compileExpression(valueExpression);
        }
      }
    },
    /**
     * Method to get press event expression for 'Delete' button.
     *
     * @function
     * @name pressEventForDeleteButton
     * @param oThis Current Object
     * @param sEntitySetName EntitySet name
     * @param oHeaderInfo Header Info
     * @param fullcontextPath Context Path
     * @returns The binding expression for the press event of the 'Delete' button
     */
    pressEventForDeleteButton: function (oThis, sEntitySetName, oHeaderInfo, fullcontextPath) {
      const sDeletableContexts = "${internal>deletableContexts}";
      let sTitleExpression, sDescriptionExpression;
      if (oHeaderInfo !== null && oHeaderInfo !== void 0 && oHeaderInfo.Title) {
        sTitleExpression = this._getExpressionForDeleteButton(oHeaderInfo.Title.Value, fullcontextPath);
      }
      if (oHeaderInfo !== null && oHeaderInfo !== void 0 && oHeaderInfo.Description) {
        sDescriptionExpression = this._getExpressionForDeleteButton(oHeaderInfo.Description.Value, fullcontextPath);
      }
      const oParams = {
        id: CommonHelper.addSingleQuotes(oThis.id),
        entitySetName: CommonHelper.addSingleQuotes(sEntitySetName),
        numberOfSelectedContexts: "${internal>selectedContexts}.length",
        unSavedContexts: "${internal>unSavedContexts}",
        lockedContexts: "${internal>lockedContexts}",
        draftsWithDeletableActive: "${internal>draftsWithDeletableActive}",
        draftsWithNonDeletableActive: "${internal>draftsWithNonDeletableActive}",
        controlId: "${internal>controlId}",
        title: sTitleExpression,
        description: sDescriptionExpression,
        selectedContexts: "${internal>selectedContexts}"
      };
      return CommonHelper.generateFunction(".editFlow.deleteMultipleDocuments", sDeletableContexts, CommonHelper.objectToString(oParams));
    },
    /**
     * Method to set the visibility of the label for the column header.
     *
     * @function
     * @name setHeaderLabelVisibility
     * @param datafield DataField
     * @param dataFieldCollection List of items inside a fieldgroup (if any)
     * @returns `true` if the header label needs to be visible else false.
     */
    setHeaderLabelVisibility: function (datafield, dataFieldCollection) {
      // If Inline button/navigation action, return false, else true;
      if (!dataFieldCollection) {
        if (datafield.$Type.indexOf("DataFieldForAction") > -1 && datafield.Inline) {
          return false;
        }
        if (datafield.$Type.indexOf("DataFieldForIntentBasedNavigation") > -1 && datafield.Inline) {
          return false;
        }
        return true;
      }

      // In Fieldgroup, If NOT all datafield/datafieldForAnnotation exists with hidden, return true;
      return dataFieldCollection.some(function (oDC) {
        if ((oDC.$Type === "com.sap.vocabularies.UI.v1.DataField" || oDC.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") && oDC[`@${"com.sap.vocabularies.UI.v1.Hidden"}`] !== true) {
          return true;
        }
      });
    },
    /**
     * Method to get the text from the DataFieldForAnnotation into the column.
     *
     * @function
     * @name getTextOnActionField
     * @param oDataField DataPoint's Value
     * @param oContext Context object of the LineItem
     * @returns String from label referring to action text
     */
    getTextOnActionField: function (oDataField, oContext) {
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
        return oDataField.Label;
      }
      // for FieldGroup containing DataFieldForAnnotation
      if (oDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && oContext.context.getObject("Target/$AnnotationPath").indexOf("@" + "com.sap.vocabularies.UI.v1.FieldGroup") > -1) {
        const sPathDataFields = "Target/$AnnotationPath/Data/";
        const aMultipleLabels = [];
        for (const i in oContext.context.getObject(sPathDataFields)) {
          if (oContext.context.getObject(`${sPathDataFields + i}/$Type`) === "com.sap.vocabularies.UI.v1.DataFieldForAction" || oContext.context.getObject(`${sPathDataFields + i}/$Type`) === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
            aMultipleLabels.push(oContext.context.getObject(`${sPathDataFields + i}/Label`));
          }
        }
        // In case there are multiple actions inside a Field Group select the largest Action Label
        if (aMultipleLabels.length > 1) {
          return aMultipleLabels.reduce(function (a, b) {
            return a.length > b.length ? a : b;
          });
        } else {
          return aMultipleLabels.length === 0 ? undefined : aMultipleLabels.toString();
        }
      }
      return undefined;
    },
    _getResponsiveTableColumnSettings: function (oThis, oColumn) {
      if (oThis.tableType === "ResponsiveTable") {
        return oColumn.settings;
      }
      return null;
    },
    getChartSize: function (oThis, oColumn) {
      const settings = this._getResponsiveTableColumnSettings(oThis, oColumn);
      if (settings && settings.microChartSize) {
        return settings.microChartSize;
      }
      return "XS";
    },
    getShowOnlyChart: function (oThis, oColumn) {
      const settings = this._getResponsiveTableColumnSettings(oThis, oColumn);
      if (settings && settings.showMicroChartLabel) {
        return !settings.showMicroChartLabel;
      }
      return true;
    },
    getDelegate: function (table, isALP, entityName) {
      let oDelegate;
      if (isALP === "true") {
        // We don't support TreeTable in ALP
        if (table.control.type === "TreeTable") {
          throw new Error("TreeTable not supported in Analytical ListPage");
        }
        oDelegate = {
          name: "sap/fe/macros/table/delegates/ALPTableDelegate",
          payload: {
            collectionName: entityName
          }
        };
      } else if (table.control.type === "TreeTable") {
        oDelegate = {
          name: "sap/fe/macros/table/delegates/TreeTableDelegate",
          payload: {
            hierarchyQualifier: table.control.hierarchyQualifier,
            initialExpansionLevel: table.annotation.initialExpansionLevel
          }
        };
      } else {
        oDelegate = {
          name: "sap/fe/macros/table/delegates/TableDelegate"
        };
      }
      return JSON.stringify(oDelegate);
    },
    setIBNEnablement: function (oInternalModelContext, oNavigationAvailableMap, aSelectedContexts) {
      for (const sKey in oNavigationAvailableMap) {
        oInternalModelContext.setProperty(`ibn/${sKey}`, {
          bEnabled: false,
          aApplicable: [],
          aNotApplicable: []
        });
        const aApplicable = [],
          aNotApplicable = [];
        const sProperty = oNavigationAvailableMap[sKey];
        for (let i = 0; i < aSelectedContexts.length; i++) {
          const oSelectedContext = aSelectedContexts[i];
          if (oSelectedContext.getObject(sProperty)) {
            oInternalModelContext.getModel().setProperty(`${oInternalModelContext.getPath()}/ibn/${sKey}/bEnabled`, true);
            aApplicable.push(oSelectedContext);
          } else {
            aNotApplicable.push(oSelectedContext);
          }
        }
        oInternalModelContext.getModel().setProperty(`${oInternalModelContext.getPath()}/ibn/${sKey}/aApplicable`, aApplicable);
        oInternalModelContext.getModel().setProperty(`${oInternalModelContext.getPath()}/ibn/${sKey}/aNotApplicable`, aNotApplicable);
      }
    },
    /**
     * @param oFastCreationRow
     * @param sPath
     * @param oContext
     * @param oModel
     * @param oFinalUIState
     */
    enableFastCreationRow: async function (oFastCreationRow, sPath, oContext, oModel, oFinalUIState) {
      let oFastCreationListBinding, oFastCreationContext;
      if (oFastCreationRow) {
        try {
          await oFinalUIState;
          // If a draft is discarded while a message strip filter is active on the table there is a table rebind caused by the DataStateIndicator
          // To prevent a new creation row binding being created at that moment we check if the context is already deleted
          if (oFastCreationRow.getModel("ui").getProperty("/isEditable") && !oContext.isDeleted()) {
            oFastCreationListBinding = oModel.bindList(sPath, oContext, [], [], {
              $$updateGroupId: "doNotSubmit",
              $$groupId: "doNotSubmit"
            });
            // Workaround suggested by OData model v4 colleagues
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            oFastCreationListBinding.refreshInternal = function () {
              /* do nothing */
            };
            oFastCreationContext = oFastCreationListBinding.create();
            oFastCreationRow.setBindingContext(oFastCreationContext);

            // this is needed to avoid console error
            try {
              await oFastCreationContext.created();
            } catch (e) {
              Log.trace("transient fast creation context deleted");
            }
          }
        } catch (oError) {
          Log.error("Error while computing the final UI state", oError);
        }
      }
    }
  };
  TableHelper.getNavigationAvailableMap.requiresIContext = true;
  TableHelper.getTextOnActionField.requiresIContext = true;
  return TableHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableHelper", ["sap/base/Log","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/core/converters/MetaModelConverter","sap/fe/core/formatters/TableFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/SizeHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/library","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/CommonHelper","sap/fe/macros/field/FieldTemplating","sap/fe/macros/internal/helpers/ActionHelper","sap/fe/macros/table/TableSizeHelper","sap/ui/mdc/enum/EditMode"],function(e,t,n,i,a,o,r,l,s,c,u,d,v,f,g,p,b){"use strict";var h=f.formatValueRecursively;var m=d.getEditMode;var $=u.isImageURL;var A=u.hasText;var y=c.getTargetObjectPath;var I=c.getContextRelativeTargetObjectPath;var F=l.isPathAnnotationExpression;var S=r.generate;var C=a.ref;var O=a.pathInModel;var T=a.isPathInModelExpression;var x=a.isConstant;var D=a.ifElse;var P=a.getExpressionFromAnnotation;var E=a.formatResult;var N=a.fn;var U=a.constant;var j=a.compileExpression;var w=n.getInvolvedDataModelObjects;var B=t.getUiControl;const M=s.CreationMode;const R={_isStaticAction:function(e,t){let n;if(e){if(Array.isArray(e)){const i=this._getActionOverloadEntityType(t);if(i){n=e.find(function(e){return e.$IsBound&&e.$Parameter[0].$Type===i})}else{n=e[0]}}else{n=e}}return!!n&&typeof n!=="string"&&n.$IsBound&&!!n.$Parameter[0].$isCollection},_getActionOverloadEntityType:function(e){if(e&&e.indexOf("(")>-1){const t=e.split("(");return t[t.length-1].replaceAll(")","")}return undefined},_isActionOverloadOnDifferentType:function(e,t){const n=this._getActionOverloadEntityType(e);return!!n&&t!==n},getFieldsRequestedByPresentationVariant:function(e){var t;return((t=e.RequestAtLeast)===null||t===void 0?void 0:t.map(e=>e.value))||[]},getNavigationAvailableFieldsFromLineItem:function(e){const t=[];(e.getObject()||[]).forEach(function(e){var n;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&!e.Inline&&!e.Determining&&(n=e.NavigationAvailable)!==null&&n!==void 0&&n.$Path){t.push(e.NavigationAvailable.$Path)}});return t},getNavigationAvailableMap:function(e){const t={};e===null||e===void 0?void 0:e.forEach(e=>{if("SemanticObject"in e){const n=`${e.SemanticObject}-${e.Action}`;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&!e.Inline&&e.RequiresContext){if(e.NavigationAvailable!==undefined){t[n]=F(e.NavigationAvailable)?e.NavigationAvailable.path:e.NavigationAvailable}}}});return JSON.stringify(t)},getUiLineItem:function(e){return B(e,`@${"com.sap.vocabularies.UI.v1.LineItem"}`)},getUiLineItemObject:function(e,t){var n;const i=t.resolvePath(e.getPath()).target;if(!i)return undefined;const a=t.resolvePath(e.getPath()).target.Visualizations;const o=a?a===null||a===void 0?void 0:(n=a.find(e=>e.value.indexOf("@"+"com.sap.vocabularies.UI.v1.LineItem")===0))===null||n===void 0?void 0:n.$target:i;return(o===null||o===void 0?void 0:o.term)==="com.sap.vocabularies.UI.v1.LineItem"?o:undefined},create$Select:function(e){const t=[];const n=R.getUiLineItem(e.metaPath);function i(e){if(e&&!t.includes(e)&&e.indexOf("/")!==0){t.push(e)}}function a(e){if(e!==null&&e!==void 0&&e.length){e.forEach(i)}}const o=e.tableDefinition.columns;const r=this.getPropertiesFromCustomColumns(o);if(r!==null&&r!==void 0&&r.length){a(r)}if(n.getPath().indexOf(`@${"com.sap.vocabularies.UI.v1.LineItem"}`)>-1){var l,s,c,u,d,v,f,g,p,b,h;const t=w(e.metaPath).targetObject;const o=(e.tableDefinition.operationAvailableProperties||"").split(",");const r=R._filterNonApplicableProperties(o,e.collection);const m=e.collectionEntity.entityType||e.collectionEntity.targetType;const $=(((l=m.annotations.Common)===null||l===void 0?void 0:l.SemanticKey)||[]).map(e=>e.value);if((t===null||t===void 0?void 0:t.$Type)==="com.sap.vocabularies.UI.v1.PresentationVariantType"){a(R.getFieldsRequestedByPresentationVariant(t))}a(R.getNavigationAvailableFieldsFromLineItem(n));a(r);a($);i((s=e.contextObjectPath.targetEntitySet)===null||s===void 0?void 0:(c=s.annotations)===null||c===void 0?void 0:(u=c.Capabilities)===null||u===void 0?void 0:(d=u.DeleteRestrictions)===null||d===void 0?void 0:(v=d.Deletable)===null||v===void 0?void 0:v.path);i((f=e.contextObjectPath.targetEntitySet)===null||f===void 0?void 0:(g=f.annotations)===null||g===void 0?void 0:(p=g.Capabilities)===null||p===void 0?void 0:(b=p.UpdateRestrictions)===null||b===void 0?void 0:(h=b.Updatable)===null||h===void 0?void 0:h.path)}return t.join(",")},getColumnWidth:function(e,t,n,a,o,r,l){if(t.width){return t.width}if(e.enableAutoColumnWidth===true){let s;s=this.getColumnWidthForImage(o)||this.getColumnWidthForDataField(e,t,n,a,o,l)||undefined;if(s){return r?`${s}rem`:s}s=j(E([O("/editMode","ui"),O("tablePropertiesAvailable","internal"),t.name,r],i.getColumnWidth));return s}return undefined},getColumnWidthForImage:function(e){var t,n,i,a,o,r,l,s,c,u,d,v;let f=null;const g=(t=e.targetObject)===null||t===void 0?void 0:(n=t.Value)===null||n===void 0?void 0:(i=n.$target)===null||i===void 0?void 0:i.annotations;const p=(a=e.targetObject)===null||a===void 0?void 0:(o=a.Value)===null||o===void 0?void 0:(r=o.$target)===null||r===void 0?void 0:r.type;if((l=e.targetObject)!==null&&l!==void 0&&l.Value&&m((s=e.targetObject.Value)===null||s===void 0?void 0:s.$target,e,false,false,e.targetObject)===b.Display){var h,y;const t=A(e.targetObject.Value.$target);if(p==="Edm.Stream"&&!t&&g!==null&&g!==void 0&&(h=g.Core)!==null&&h!==void 0&&(y=h.MediaType)!==null&&y!==void 0&&y.includes("image/")){f=6.2}}else if(g&&($((c=e.targetObject)===null||c===void 0?void 0:(u=c.Value)===null||u===void 0?void 0:u.$target)||g!==null&&g!==void 0&&(d=g.Core)!==null&&d!==void 0&&(v=d.MediaType)!==null&&v!==void 0&&v.includes("image/"))){f=6.2}return f},getColumnWidthForDataField:function(e,t,n,i,a,r){var l,s;const c=(l=a.targetObject)===null||l===void 0?void 0:l.annotations;const u=(s=a.targetObject)===null||s===void 0?void 0:s.$Type;let d=null;if(u==="com.sap.vocabularies.UI.v1.DataFieldForAction"||u==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"||u==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&n.Target.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.FieldGroup"}`)===-1){var v;let l;l=o.getButtonWidth(i)||o.getButtonWidth(n===null||n===void 0?void 0:(v=n.Label)===null||v===void 0?void 0:v.toString())||o.getButtonWidth(c===null||c===void 0?void 0:c.Label);const s=p.getWidthForDataFieldForAnnotation(a.targetObject).propertyWidth;if(s>l){d=s}else if(i||c&&(c.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"||c.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction")){l+=1.8;d=l}d=d||this.getColumnWidthForChart(e,t,n,l,r)}return d},getColumnWidthForChart(e,t,n,i,a){var r,l;let s,c=null;if(((r=n.Target)===null||r===void 0?void 0:(l=r.$AnnotationPath)===null||l===void 0?void 0:l.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`))!==-1){switch(this.getChartSize(e,t)){case"XS":s=4.4;break;case"S":s=4.6;break;case"M":s=5.5;break;case"L":s=6.9;break;default:s=5.3}i+=1.8;if(!this.getShowOnlyChart(e,t)&&a&&(a.Title.length||a.Description.length)){const e=a.Title.length>a.Description.length?a.Title:a.Description;const t=o.getButtonWidth(e)+7;const n=t>i?t:i;c=n}else if(i>s){c=i}else{c=s}}return c},getMarginClass:function(e,t,n,i){let a,o="";if(JSON.stringify(e[e.length-1])==JSON.stringify(t)){if(n=="com.sap.vocabularies.UI.v1.VisualizationType/Rating"){o="sapUiNoMarginBottom sapUiNoMarginTop"}}else if(n==="com.sap.vocabularies.UI.v1.VisualizationType/Rating"){o="sapUiNoMarginTop"}else{o="sapUiTinyMarginBottom"}if(i&&i!=="true"&&i!=="false"){const e=i.substring(i.indexOf("{=")+2,i.lastIndexOf("}"));a="{= "+e+" ? '"+o+"' : "+"''"+" }";return a}else{return o}},getVBoxVisibility:function(e,t,n){let a=true;const o=[];if(n[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]){return t}for(const n of e){const e=n[`@${"com.sap.vocabularies.UI.v1.Hidden"}`];if(e===undefined||e===false){o.push(false);continue}if(e===true){o.push(true);continue}if(e.$Path){o.push(O(e.$Path));a=false;continue}if(typeof e==="object"){return t}}const r=U(o.length>0&&a!==true);const l=U(o.length>0&&o.indexOf(false)===-1&&a);return j(D(r,E(o,i.getVBoxVisibility),D(l,U(false),U(true))))},formatHiddenFilters:function(e){if(e){try{return JSON.stringify(e)}catch(e){return undefined}}return undefined},getElementStableId:function(e,t,n){var i;if(!e){return undefined}const a=n.targetObject;let o;switch(a.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":o=a.Target.value;break;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":o=a;break;default:o=((i=a.Value)===null||i===void 0?void 0:i.path)??"";break}return S([e,t,o])},getColumnStableId:function(e,t){return R.getElementStableId(e,"C",t)},getFieldGroupLabelStableId:function(e,t){return R.getElementStableId(e,"FGLabel",t)},_filterNonApplicableProperties:function(e,t){return e&&e.filter(function(e){return t.getObject(`./${e}`)})},getPropertiesFromCustomColumns:function(e){if(!(e!==null&&e!==void 0&&e.length)){return}const t=[];for(const i of e){var n;if("properties"in i&&(n=i.properties)!==null&&n!==void 0&&n.length){for(const e of i.properties){if(t.indexOf(e)===-1){t.push(e)}}}}return t},getRowsBindingInfo:function(e){const t=w(e.collection,e.contextPath);const n=I(t)||y(t);const i={ui5object:true,suspended:false,path:v.addSingleQuotes(n),parameters:{$count:true},events:{}};if(e.tableDefinition.enable$select){const t=R.create$Select(e);if(t){i.parameters.$select=`'${t}'`}}if(e.tableDefinition.enable$$getKeepAliveContext){i.parameters.$$getKeepAliveContext=true}i.parameters.$$groupId=v.addSingleQuotes("$auto.Workers");i.parameters.$$updateGroupId=v.addSingleQuotes("$auto");i.parameters.$$ownRequest=true;i.parameters.$$patchWithoutSideEffects=true;i.events.patchSent=v.addSingleQuotes(".editFlow.handlePatchSent");i.events.patchCompleted=v.addSingleQuotes("API.onInternalPatchCompleted");i.events.dataReceived=v.addSingleQuotes("API.onInternalDataReceived");i.events.dataRequested=v.addSingleQuotes("API.onInternalDataRequested");i.events.change=v.addSingleQuotes("API.onContextChange");i.events.createActivate=v.addSingleQuotes(".editFlow.handleCreateActivate");return v.objectToString(i)},validateCreationRowFields:function(e){if(!e){return false}return Object.keys(e).length>0&&Object.keys(e).every(function(t){return e[t]["validity"]})},pressEventDataFieldForActionButton:function(e,t,n,i,a){let o=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let r=arguments.length>6?arguments[6]:undefined;let l=arguments.length>7?arguments[7]:undefined;if(!t)return undefined;const s=t.Action,c=e.contextObjectPath.targetEntityType.fullyQualifiedName,u=typeof a!=="string"&&(this._isStaticAction(a,s)||this._isActionOverloadOnDifferentType(s,c)),d={contexts:!u?O("selectedContexts","internal"):null,bStaticAction:u?u:undefined,entitySetName:n,applicableContexts:!u?O(`dynamicActions/${t.Action}/aApplicable/`,"internal"):null,notApplicableContexts:!u?O(`dynamicActions/${t.Action}/aNotApplicable/`,"internal"):null,isNavigable:o,enableAutoScroll:r,defaultValuesExtensionFunction:l};d.invocationGrouping=(t===null||t===void 0?void 0:t.InvocationGrouping)==="UI.OperationGroupingType/ChangeSet"?"ChangeSet":"Isolated";d.controlId=e.id;d.operationAvailableMap=i;d.label=t.Label;return j(N("API.onActionPress",[C("$event"),C("$controller"),t.Action,d]))},isDataFieldForActionEnabled:function(e,t,n,i,a,o){const r=this._isStaticAction(i,t);if(this._isActionOverloadOnDifferentType(t,o)){const n=e&&JSON.parse(e.operationAvailableMap);if(n!==null&&n!==void 0&&n.hasOwnProperty(t)){return`{= \${internal>dynamicActions/${t}/bEnabled} }`}return true}if(!n||r){return true}let l="";const s=g.getNumberOfContextsExpression(a??"multiselect");const c=`\${internal>dynamicActions/${t}/bEnabled}`;l=`${s} && ${c}`;return`{= ${l}}`},isDataFieldForIBNEnabled:function(t,n,i,a){var o;let r=null;if(F(a)){r=a.path}const l=t===null||t===void 0?void 0:(o=t.tableDefinition)===null||o===void 0?void 0:o.enableAnalytics;if(!i){const i=t.collection.getPath();const o=t.collection.getModel();if(a===false&&!l){e.warning("NavigationAvailable as false is incorrect usage");return false}else if(r&&!l&&F(n===null||n===void 0?void 0:n.NavigationAvailable)&&o.getObject(i+"/$Partner")===n.NavigationAvailable.path.split("/")[0]){return`{= \${${r.substring(r.indexOf("/")+1,r.length)}}}`}return true}let s="",c,u;if(a===true||l){s="%{internal>numberOfSelectedContexts} >= 1"}else if(a===false){e.warning("NavigationAvailable as false is incorrect usage");return false}else{c="%{internal>numberOfSelectedContexts} >= 1";u=`\${internal>ibn/${n.SemanticObject}-${n.Action}/bEnabled}`;s=c+" && "+u}return`{= ${s}}`},pressEventForCreateButton:function(e,t){const n=e.creationMode;let i;const a=t?"${$source>}.getParent()":"${$source>}.getParent().getParent().getParent()";let o=a+".getRowBinding() || "+a+".data('rowsBindingInfo').path";switch(n){case M.External:i={creationMode:v.addSingleQuotes(M.External),outbound:v.addSingleQuotes(e.createOutbound)};break;case M.CreationRow:i={creationMode:v.addSingleQuotes(M.CreationRow),creationRow:"${$source>}",createAtEnd:e.createAtEnd!==undefined?e.createAtEnd:false};o="${$source>}.getParent().getRowBinding()";break;case M.NewPage:case M.Inline:i={creationMode:v.addSingleQuotes(n),createAtEnd:e.createAtEnd!==undefined?e.createAtEnd:false,tableId:v.addSingleQuotes(e.id)};if(e.createNewAction){i.newAction=v.addSingleQuotes(e.createNewAction)}break;case M.InlineCreationRows:return v.generateFunction(".editFlow.createEmptyRowsAndFocus",a);default:return undefined}return v.generateFunction(".editFlow.createDocument",o,v.objectToString(i))},getIBNData:function(e){if(e){const t={semanticObject:v.addSingleQuotes(e.semanticObject),action:v.addSingleQuotes(e.action)};return v.objectToString(t)}},_getExpressionForDeleteButton:function(e,t){if(typeof e==="string"){return v.addSingleQuotes(e,true)}else{const n=P(e);if(x(n)||T(n)){const e=h(n,t);return j(e)}}},pressEventForDeleteButton:function(e,t,n,i){const a="${internal>deletableContexts}";let o,r;if(n!==null&&n!==void 0&&n.Title){o=this._getExpressionForDeleteButton(n.Title.Value,i)}if(n!==null&&n!==void 0&&n.Description){r=this._getExpressionForDeleteButton(n.Description.Value,i)}const l={id:v.addSingleQuotes(e.id),entitySetName:v.addSingleQuotes(t),numberOfSelectedContexts:"${internal>selectedContexts}.length",unSavedContexts:"${internal>unSavedContexts}",lockedContexts:"${internal>lockedContexts}",draftsWithDeletableActive:"${internal>draftsWithDeletableActive}",draftsWithNonDeletableActive:"${internal>draftsWithNonDeletableActive}",controlId:"${internal>controlId}",title:o,description:r,selectedContexts:"${internal>selectedContexts}"};return v.generateFunction(".editFlow.deleteMultipleDocuments",a,v.objectToString(l))},setHeaderLabelVisibility:function(e,t){if(!t){if(e.$Type.indexOf("DataFieldForAction")>-1&&e.Inline){return false}if(e.$Type.indexOf("DataFieldForIntentBasedNavigation")>-1&&e.Inline){return false}return true}return t.some(function(e){if((e.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation")&&e[`@${"com.sap.vocabularies.UI.v1.Hidden"}`]!==true){return true}})},getTextOnActionField:function(e,t){if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){return e.Label}if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&t.context.getObject("Target/$AnnotationPath").indexOf("@"+"com.sap.vocabularies.UI.v1.FieldGroup")>-1){const e="Target/$AnnotationPath/Data/";const n=[];for(const i in t.context.getObject(e)){if(t.context.getObject(`${e+i}/$Type`)==="com.sap.vocabularies.UI.v1.DataFieldForAction"||t.context.getObject(`${e+i}/$Type`)==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){n.push(t.context.getObject(`${e+i}/Label`))}}if(n.length>1){return n.reduce(function(e,t){return e.length>t.length?e:t})}else{return n.length===0?undefined:n.toString()}}return undefined},_getResponsiveTableColumnSettings:function(e,t){if(e.tableType==="ResponsiveTable"){return t.settings}return null},getChartSize:function(e,t){const n=this._getResponsiveTableColumnSettings(e,t);if(n&&n.microChartSize){return n.microChartSize}return"XS"},getShowOnlyChart:function(e,t){const n=this._getResponsiveTableColumnSettings(e,t);if(n&&n.showMicroChartLabel){return!n.showMicroChartLabel}return true},getDelegate:function(e,t,n){let i;if(t==="true"){if(e.control.type==="TreeTable"){throw new Error("TreeTable not supported in Analytical ListPage")}i={name:"sap/fe/macros/table/delegates/ALPTableDelegate",payload:{collectionName:n}}}else if(e.control.type==="TreeTable"){i={name:"sap/fe/macros/table/delegates/TreeTableDelegate",payload:{hierarchyQualifier:e.control.hierarchyQualifier,initialExpansionLevel:e.annotation.initialExpansionLevel}}}else{i={name:"sap/fe/macros/table/delegates/TableDelegate"}}return JSON.stringify(i)},setIBNEnablement:function(e,t,n){for(const i in t){e.setProperty(`ibn/${i}`,{bEnabled:false,aApplicable:[],aNotApplicable:[]});const a=[],o=[];const r=t[i];for(let t=0;t<n.length;t++){const l=n[t];if(l.getObject(r)){e.getModel().setProperty(`${e.getPath()}/ibn/${i}/bEnabled`,true);a.push(l)}else{o.push(l)}}e.getModel().setProperty(`${e.getPath()}/ibn/${i}/aApplicable`,a);e.getModel().setProperty(`${e.getPath()}/ibn/${i}/aNotApplicable`,o)}},enableFastCreationRow:async function(t,n,i,a,o){let r,l;if(t){try{await o;if(t.getModel("ui").getProperty("/isEditable")&&!i.isDeleted()){r=a.bindList(n,i,[],[],{$$updateGroupId:"doNotSubmit",$$groupId:"doNotSubmit"});r.refreshInternal=function(){};l=r.create();t.setBindingContext(l);try{await l.created()}catch(t){e.trace("transient fast creation context deleted")}}}catch(t){e.error("Error while computing the final UI state",t)}}}};R.getNavigationAvailableMap.requiresIContext=true;R.getTextOnActionField.requiresIContext=true;return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableRuntime-dbg", ["sap/base/Log", "sap/fe/core/ActionRuntime", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/helpers/DeleteHelper", "sap/fe/core/library", "sap/fe/macros/field/FieldRuntime", "sap/fe/macros/table/TableHelper", "sap/fe/macros/table/Utils"], function (Log, ActionRuntime, CommonUtils, BusyLocker, deleteHelper, FELibrary, FieldRuntime, TableHelper, TableUtils) {
  "use strict";

  const CreationMode = FELibrary.CreationMode;
  /**
   * Static class used by Table building block during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const TableRuntime = {
    displayTableSettings: function (oEvent) {
      /*
      		 Temporary solution
      		 Wait for mdc Table to provide public api to either get button 'Settings' or fire event on this button
      		 */
      const oParent = oEvent.getSource().getParent(),
        oSettingsButton = sap.ui.getCore().byId(`${oParent.getId()}-settings`);
      CommonUtils.fireButtonPress(oSettingsButton);
    },
    executeConditionalActionShortcut: function (sButtonMatcher, oSource) {
      // Get the button related to keyboard shortcut
      const oMdcTable = oSource.getParent();
      if (sButtonMatcher !== CreationMode.CreationRow) {
        const oButton = oMdcTable.getActions().reduce(function (aActionButtons, oActionToolbarAction) {
          return aActionButtons.concat(oActionToolbarAction.getAction());
        }, []).find(function (oActionButton) {
          return oActionButton.getId().endsWith(sButtonMatcher);
        });
        CommonUtils.fireButtonPress(oButton);
      } else {
        const oCreationRow = oMdcTable.getAggregation("creationRow");
        if (oCreationRow && oCreationRow.getApplyEnabled() && oCreationRow.getVisible()) {
          oCreationRow.fireApply();
        }
      }
    },
    setContexts: function (oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath) {
      BusyLocker.lock(oTable);
      return TableRuntime.setContextsAsync(oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath).then(() => {
        Log.info("Selections updated");
      }).catch(error => {
        Log.error(error);
      }).finally(() => {
        BusyLocker.unlock(oTable);
      });
    },
    setContextsAsync: async function (oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath) {
      const aActionsMultiselectDisabled = sActionsMultiselectDisabled ? sActionsMultiselectDisabled.split(",") : [];
      const oActionOperationAvailableMap = JSON.parse(sCollection);
      const oNavigationAvailableMap = sNavigationAvailableMap && sNavigationAvailableMap !== "undefined" && JSON.parse(sNavigationAvailableMap);
      let aSelectedContexts = oTable.getSelectedContexts();
      const aDeletableContexts = [];
      const bReadOnlyDraftEnabled = oTable.data("displayModePropertyBinding") === "true" && draft !== "undefined";
      const aUpdatableContexts = [];
      // oDynamicActions are bound actions that are available according to some property
      // in each item
      const oDynamicActions = {};
      const oIBN = {};
      const oInternalModelContext = oTable.getBindingContext("internal");
      if (!oInternalModelContext) {
        return;
      }
      //do not consider empty rows as selected context
      aSelectedContexts = aSelectedContexts.filter(function (oContext) {
        return !oContext.isInactive();
      });
      const oModelObject = Object.assign(oInternalModelContext.getObject() || {}, {
        selectedContexts: aSelectedContexts,
        numberOfSelectedContexts: aSelectedContexts.length,
        dynamicActions: oDynamicActions,
        ibn: oIBN,
        deleteEnabled: true,
        deletableContexts: aDeletableContexts,
        unSavedContexts: [],
        lockedContexts: [],
        draftsWithNonDeletableActive: [],
        draftsWithDeletableActive: [],
        controlId: "",
        updatableContexts: aUpdatableContexts,
        semanticKeyHasDraftIndicator: oInternalModelContext.getProperty("semanticKeyHasDraftIndicator") ? oInternalModelContext.getProperty("semanticKeyHasDraftIndicator") : undefined
      });
      for (const oSelectedContext of aSelectedContexts) {
        const oContextData = oSelectedContext.getObject();
        for (const key in oContextData) {
          if (key.indexOf("#") === 0) {
            let sActionPath = key;
            sActionPath = sActionPath.substring(1, sActionPath.length);
            oModelObject.dynamicActions[sActionPath] = {
              enabled: true
            };
            oInternalModelContext.setProperty("", oModelObject);
          }
        }
        // The updatable contexts with mass edit depend on the following:
        // 1. Update is dependendent on current entity property (sUpdatablePath).
        // 2. The table is read only and draft enabled(like LR), in this case only active contexts can be mass edited(not draft contexts).
        //    So, update depends on 'IsActiveEntity' value which needs to be checked.
        const bUpdatableByPath = sUpdatablePath.length === 0 || !!oSelectedContext.getProperty(sUpdatablePath);
        const bNotDraftInReadOnlyMode = !bReadOnlyDraftEnabled || oContextData.IsActiveEntity;
        if (bUpdatableByPath && bNotDraftInReadOnlyMode) {
          aUpdatableContexts.push(oSelectedContext);
        }
      }
      deleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);
      if (!oTable.data("enableAnalytics")) {
        TableHelper.setIBNEnablement(oInternalModelContext, oNavigationAvailableMap, aSelectedContexts);
      }
      if (aSelectedContexts.length > 1) {
        this.disableAction(aActionsMultiselectDisabled, oDynamicActions);
      }
      if (oModelObject) {
        oModelObject["updatableContexts"] = aUpdatableContexts;
        oModelObject["controlId"] = oTable.getId();
        oInternalModelContext.setProperty("", oModelObject);
      }
      return ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, "table");
    },
    disableAction: function (aActionsMultiselectDisabled, oDynamicActions) {
      aActionsMultiselectDisabled.forEach(function (sAction) {
        oDynamicActions[sAction] = {
          bEnabled: false
        };
      });
    },
    onFieldChangeInCreationRow: function (oEvent, oCustomValidationFunction) {
      // CREATION ROW CASE
      const mField = FieldRuntime.getFieldStateOnChange(oEvent),
        oSourceField = mField.field,
        sFieldId = oSourceField.getId();
      const oInternalModelContext = oSourceField.getBindingContext("internal"),
        mFieldValidity = oInternalModelContext.getProperty("creationRowFieldValidity"),
        mNewFieldValidity = Object.assign({}, mFieldValidity);
      mNewFieldValidity[sFieldId] = mField.state;
      oInternalModelContext.setProperty("creationRowFieldValidity", mNewFieldValidity);

      // prepare Custom Validation
      if (oCustomValidationFunction) {
        const mCustomValidity = oInternalModelContext.getProperty("creationRowCustomValidity"),
          mNewCustomValidity = Object.assign({}, mCustomValidity);
        mNewCustomValidity[oSourceField.getBinding("value").getPath()] = {
          fieldId: oSourceField.getId()
        };
        oInternalModelContext.setProperty("creationRowCustomValidity", mNewCustomValidity);
        // Remove existing CustomValidation message
        const oMessageManager = sap.ui.getCore().getMessageManager();
        const sTarget = `${oSourceField.getBindingContext().getPath()}/${oSourceField.getBindingPath("value")}`;
        oMessageManager.getMessageModel().getData().forEach(function (oMessage) {
          if (oMessage.target === sTarget) {
            oMessageManager.removeMessages(oMessage);
          }
        });
      }
    },
    onTreeTableContextChanged: function (table, initialExpansionLevel) {
      // When the context of a TreeTable changes, we want to restore its expansion state to the default:
      //   - all expanded if there's a search parameter coming from the filterBar
      //   - otherwise initial expansion state coming from the PV (stored in the payload)
      //   - otherwise no expansion at all

      const rowBinding = table.getRowBinding();
      if (!rowBinding.getContext()) {
        return;
      }
      const aggregation = rowBinding.getAggregation() ?? {};
      const filterInfo = TableUtils.getAllFilterInfo(table);
      aggregation.expandTo = filterInfo.search ? 100 : initialExpansionLevel;
      rowBinding.setAggregation(aggregation);
    }
  };
  return TableRuntime;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableRuntime", ["sap/base/Log","sap/fe/core/ActionRuntime","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/helpers/DeleteHelper","sap/fe/core/library","sap/fe/macros/field/FieldRuntime","sap/fe/macros/table/TableHelper","sap/fe/macros/table/Utils"],function(e,t,n,o,i,s,a,r,c){"use strict";const l=s.CreationMode;const d={displayTableSettings:function(e){const t=e.getSource().getParent(),o=sap.ui.getCore().byId(`${t.getId()}-settings`);n.fireButtonPress(o)},executeConditionalActionShortcut:function(e,t){const o=t.getParent();if(e!==l.CreationRow){const t=o.getActions().reduce(function(e,t){return e.concat(t.getAction())},[]).find(function(t){return t.getId().endsWith(e)});n.fireButtonPress(t)}else{const e=o.getAggregation("creationRow");if(e&&e.getApplyEnabled()&&e.getVisible()){e.fireApply()}}},setContexts:function(t,n,i,s,a,r,c){o.lock(t);return d.setContextsAsync(t,n,i,s,a,r,c).then(()=>{e.info("Selections updated")}).catch(t=>{e.error(t)}).finally(()=>{o.unlock(t)})},setContextsAsync:async function(e,n,o,s,a,c,l){const d=c?c.split(","):[];const g=JSON.parse(s);const f=a&&a!=="undefined"&&JSON.parse(a);let u=e.getSelectedContexts();const p=[];const b=e.data("displayModePropertyBinding")==="true"&&o!=="undefined";const y=[];const C={};const h={};const x=e.getBindingContext("internal");if(!x){return}u=u.filter(function(e){return!e.isInactive()});const A=Object.assign(x.getObject()||{},{selectedContexts:u,numberOfSelectedContexts:u.length,dynamicActions:C,ibn:h,deleteEnabled:true,deletableContexts:p,unSavedContexts:[],lockedContexts:[],draftsWithNonDeletableActive:[],draftsWithDeletableActive:[],controlId:"",updatableContexts:y,semanticKeyHasDraftIndicator:x.getProperty("semanticKeyHasDraftIndicator")?x.getProperty("semanticKeyHasDraftIndicator"):undefined});for(const e of u){const t=e.getObject();for(const e in t){if(e.indexOf("#")===0){let t=e;t=t.substring(1,t.length);A.dynamicActions[t]={enabled:true};x.setProperty("",A)}}const n=l.length===0||!!e.getProperty(l);const o=!b||t.IsActiveEntity;if(n&&o){y.push(e)}}i.updateDeleteInfoForSelectedContexts(x,u);if(!e.data("enableAnalytics")){r.setIBNEnablement(x,f,u)}if(u.length>1){this.disableAction(d,C)}if(A){A["updatableContexts"]=y;A["controlId"]=e.getId();x.setProperty("",A)}return t.setActionEnablement(x,g,u,"table")},disableAction:function(e,t){e.forEach(function(e){t[e]={bEnabled:false}})},onFieldChangeInCreationRow:function(e,t){const n=a.getFieldStateOnChange(e),o=n.field,i=o.getId();const s=o.getBindingContext("internal"),r=s.getProperty("creationRowFieldValidity"),c=Object.assign({},r);c[i]=n.state;s.setProperty("creationRowFieldValidity",c);if(t){const e=s.getProperty("creationRowCustomValidity"),t=Object.assign({},e);t[o.getBinding("value").getPath()]={fieldId:o.getId()};s.setProperty("creationRowCustomValidity",t);const n=sap.ui.getCore().getMessageManager();const i=`${o.getBindingContext().getPath()}/${o.getBindingPath("value")}`;n.getMessageModel().getData().forEach(function(e){if(e.target===i){n.removeMessages(e)}})}},onTreeTableContextChanged:function(e,t){const n=e.getRowBinding();if(!n.getContext()){return}const o=n.getAggregation()??{};const i=c.getAllFilterInfo(e);o.expandTo=i.search?100:t;n.setAggregation(o)}};return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableSizeHelper-dbg", ["sap/base/Log", "sap/fe/core/helpers/SizeHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/m/table/Util"], function (Log, SizeHelper, DisplayModeFormatter, TableUtil) {
  "use strict";

  var getDisplayMode = DisplayModeFormatter.getDisplayMode;
  const TableSizeHelper = {
    /**
     * Method to calculate the width of the MDCColumn.
     *
     * @param dataField The Property or PropertyInfo Object for which the width will be calculated.
     * @param properties An array containing all property definitions (optional)
     * @param convertedMetaData
     * @param includeLabel Indicates if the label should be part of the width calculation
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns The width of the column.
     */
    getMDCColumnWidthFromDataField: function (dataField, properties, convertedMetaData) {
      let includeLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      const property = properties.find(prop => {
        var _convertedMetaData$re, _convertedMetaData$re2;
        return prop.metadataPath && ((_convertedMetaData$re = convertedMetaData.resolvePath(prop.metadataPath)) === null || _convertedMetaData$re === void 0 ? void 0 : (_convertedMetaData$re2 = _convertedMetaData$re.target) === null || _convertedMetaData$re2 === void 0 ? void 0 : _convertedMetaData$re2.fullyQualifiedName) === dataField.fullyQualifiedName;
      });
      return property ? this.getMDCColumnWidthFromProperty(property, properties, includeLabel) : 0;
    },
    getMDCColumnWidthFromProperty: function (property, properties) {
      var _property$visualSetti, _property$propertyInf, _property$typeConfig;
      let includeLabel = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      const mWidthCalculation = Object.assign({
        gap: 0,
        truncateLabel: !includeLabel,
        excludeProperties: []
      }, (_property$visualSetti = property.visualSettings) === null || _property$visualSetti === void 0 ? void 0 : _property$visualSetti.widthCalculation);
      let types;
      if ((_property$propertyInf = property.propertyInfos) !== null && _property$propertyInf !== void 0 && _property$propertyInf.length) {
        types = property.propertyInfos.map(propName => {
          var _prop$typeConfig;
          const prop = properties.find(_property => _property.name === propName);
          return prop === null || prop === void 0 ? void 0 : (_prop$typeConfig = prop.typeConfig) === null || _prop$typeConfig === void 0 ? void 0 : _prop$typeConfig.typeInstance;
        }).filter(item => item);
      } else if (property !== null && property !== void 0 && (_property$typeConfig = property.typeConfig) !== null && _property$typeConfig !== void 0 && _property$typeConfig.typeInstance) {
        types = [property === null || property === void 0 ? void 0 : property.typeConfig.typeInstance];
      }
      const sSize = types ? TableUtil.calcColumnWidth(types, property.label, mWidthCalculation) : null;
      if (!sSize) {
        Log.error(`Cannot compute the column width for property: ${property.name}`);
      }
      return sSize ? parseFloat(sSize.replace("Rem", "")) : 0;
    },
    /**
     * Method to calculate the  width of a DataFieldAnnotation object contained in a fieldGroup.
     *
     * @param dataField DataFieldAnnotation object.
     * @param properties Array containing all PropertyInfo objects.
     * @param convertedMetaData
     * @param showDataFieldsLabel Label is displayed inside the field
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns Object containing the width of the label and the width of the property.
     */
    getWidthForDataFieldForAnnotation: function (dataField, properties, convertedMetaData) {
      var _dataField$Target;
      let showDataFieldsLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      const oTargetedProperty = dataField === null || dataField === void 0 ? void 0 : (_dataField$Target = dataField.Target) === null || _dataField$Target === void 0 ? void 0 : _dataField$Target.$target;
      let nPropertyWidth = 0,
        fLabelWidth = 0;
      if (oTargetedProperty !== null && oTargetedProperty !== void 0 && oTargetedProperty.Visualization) {
        switch (oTargetedProperty.Visualization) {
          case "UI.VisualizationType/Rating":
            const nbStars = oTargetedProperty.TargetValue;
            nPropertyWidth = parseInt(nbStars, 10) * 1.375;
            break;
          case "UI.VisualizationType/Progress":
          default:
            nPropertyWidth = 5;
        }
        const sLabel = oTargetedProperty ? oTargetedProperty.label : dataField.Label || "";
        fLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;
      } else if (convertedMetaData && properties && (oTargetedProperty === null || oTargetedProperty === void 0 ? void 0 : oTargetedProperty.$Type) === "com.sap.vocabularies.Communication.v1.ContactType") {
        nPropertyWidth = this.getMDCColumnWidthFromDataField(oTargetedProperty.fn.$target, properties, convertedMetaData, false);
      }
      return {
        labelWidth: fLabelWidth,
        propertyWidth: nPropertyWidth
      };
    },
    /**
     * Method to calculate the width of a DataField object.
     *
     * @param dataField DataFieldAnnotation object.
     * @param showDataFieldsLabel Label is displayed inside the field.
     * @param properties Array containing all PropertyInfo objects.
     * @param convertedMetaData Context Object of the parent property.
     * @private
     * @alias sap.fe.macros.TableSizeHelper
     * @returns {object} Object containing the width of the label and the width of the property.
     */

    getWidthForDataField: function (dataField, showDataFieldsLabel, properties, convertedMetaData) {
      var _dataField$Value, _oTargetedProperty$an, _oTargetedProperty$an2, _dataField$Value2;
      const oTargetedProperty = (_dataField$Value = dataField.Value) === null || _dataField$Value === void 0 ? void 0 : _dataField$Value.$target,
        oTextArrangementTarget = oTargetedProperty === null || oTargetedProperty === void 0 ? void 0 : (_oTargetedProperty$an = oTargetedProperty.annotations) === null || _oTargetedProperty$an === void 0 ? void 0 : (_oTargetedProperty$an2 = _oTargetedProperty$an.Common) === null || _oTargetedProperty$an2 === void 0 ? void 0 : _oTargetedProperty$an2.Text,
        displayMode = getDisplayMode((_dataField$Value2 = dataField.Value) === null || _dataField$Value2 === void 0 ? void 0 : _dataField$Value2.$target);
      let nPropertyWidth = 0,
        fLabelWidth = 0;
      if (oTargetedProperty) {
        switch (displayMode) {
          case "Description":
            nPropertyWidth = this.getMDCColumnWidthFromDataField(oTextArrangementTarget.$target, properties, convertedMetaData, false) - 1;
            break;
          case "DescriptionValue":
          case "ValueDescription":
          case "Value":
          default:
            nPropertyWidth = this.getMDCColumnWidthFromDataField(oTargetedProperty, properties, convertedMetaData, false) - 1;
        }
        const sLabel = dataField.Label ? dataField.Label : oTargetedProperty.label;
        fLabelWidth = showDataFieldsLabel && sLabel ? SizeHelper.getButtonWidth(sLabel) : 0;
      } else {
        Log.error(`Cannot compute width for type object: ${dataField.$Type}`);
      }
      return {
        labelWidth: fLabelWidth,
        propertyWidth: nPropertyWidth
      };
    }
  };
  return TableSizeHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/TableSizeHelper", ["sap/base/Log","sap/fe/core/helpers/SizeHelper","sap/fe/core/templating/DisplayModeFormatter","sap/m/table/Util"],function(e,t,i,l){"use strict";var a=i.getDisplayMode;const o={getMDCColumnWidthFromDataField:function(e,t,i){let l=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const a=t.find(t=>{var l,a;return t.metadataPath&&((l=i.resolvePath(t.metadataPath))===null||l===void 0?void 0:(a=l.target)===null||a===void 0?void 0:a.fullyQualifiedName)===e.fullyQualifiedName});return a?this.getMDCColumnWidthFromProperty(a,t,l):0},getMDCColumnWidthFromProperty:function(t,i){var a,o,n;let r=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const d=Object.assign({gap:0,truncateLabel:!r,excludeProperties:[]},(a=t.visualSettings)===null||a===void 0?void 0:a.widthCalculation);let u;if((o=t.propertyInfos)!==null&&o!==void 0&&o.length){u=t.propertyInfos.map(e=>{var t;const l=i.find(t=>t.name===e);return l===null||l===void 0?void 0:(t=l.typeConfig)===null||t===void 0?void 0:t.typeInstance}).filter(e=>e)}else if(t!==null&&t!==void 0&&(n=t.typeConfig)!==null&&n!==void 0&&n.typeInstance){u=[t===null||t===void 0?void 0:t.typeConfig.typeInstance]}const s=u?l.calcColumnWidth(u,t.label,d):null;if(!s){e.error(`Cannot compute the column width for property: ${t.name}`)}return s?parseFloat(s.replace("Rem","")):0},getWidthForDataFieldForAnnotation:function(e,i,l){var a;let o=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const n=e===null||e===void 0?void 0:(a=e.Target)===null||a===void 0?void 0:a.$target;let r=0,d=0;if(n!==null&&n!==void 0&&n.Visualization){switch(n.Visualization){case"UI.VisualizationType/Rating":const e=n.TargetValue;r=parseInt(e,10)*1.375;break;case"UI.VisualizationType/Progress":default:r=5}const i=n?n.label:e.Label||"";d=o&&i?t.getButtonWidth(i):0}else if(l&&i&&(n===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.Communication.v1.ContactType"){r=this.getMDCColumnWidthFromDataField(n.fn.$target,i,l,false)}return{labelWidth:d,propertyWidth:r}},getWidthForDataField:function(i,l,o,n){var r,d,u,s;const c=(r=i.Value)===null||r===void 0?void 0:r.$target,p=c===null||c===void 0?void 0:(d=c.annotations)===null||d===void 0?void 0:(u=d.Common)===null||u===void 0?void 0:u.Text,v=a((s=i.Value)===null||s===void 0?void 0:s.$target);let f=0,g=0;if(c){switch(v){case"Description":f=this.getMDCColumnWidthFromDataField(p.$target,o,n,false)-1;break;case"DescriptionValue":case"ValueDescription":case"Value":default:f=this.getMDCColumnWidthFromDataField(c,o,n,false)-1}const e=i.Label?i.Label:c.label;g=l&&e?t.getButtonWidth(e):0}else{e.error(`Cannot compute width for type object: ${i.$Type}`)}return{labelWidth:g,propertyWidth:f}}};return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/Utils-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/macros/DelegateUtil", "sap/fe/macros/field/FieldRuntime", "sap/fe/macros/filter/FilterUtils", "sap/ui/core/Component", "sap/ui/core/format/NumberFormat", "sap/ui/model/Filter"], function (Log, CommonUtils, BindingToolkit, DelegateUtil, FieldRuntime, FilterUtils, Component, NumberFormat, Filter) {
  "use strict";

  var pathInModel = BindingToolkit.pathInModel;
  var compileExpression = BindingToolkit.compileExpression;
  function getHiddenFilters(oTable) {
    let aFilters = [];
    const hiddenFilters = oTable.data("hiddenFilters");
    if (hiddenFilters && Array.isArray(hiddenFilters.paths)) {
      hiddenFilters.paths.forEach(function (mPath) {
        const oSvFilter = CommonUtils.getFiltersInfoForSV(oTable, mPath.annotationPath);
        aFilters = aFilters.concat(oSvFilter.filters);
      });
    }
    return aFilters;
  }

  /**
   * Retrieves the external filters configured on the table.
   *
   * @param table The table
   * @returns  The filters
   */
  function getExternalFilters(table) {
    let filters = getHiddenFilters(table);
    const quickFilter = table.getQuickFilter();
    if (quickFilter) {
      const quickFilterKey = quickFilter.getSelectedKey() || quickFilter.getItems()[0].getKey();
      filters = filters.concat(CommonUtils.getFiltersInfoForSV(table, quickFilterKey).filters);
    }
    return filters;
  }
  function getListBindingForCount(oTable, oPageBinding, oParams) {
    let countBinding;
    const oBindingInfo = oTable.data("rowsBindingInfo"),
      oDataModel = oTable.getModel();
    const sBatchId = oParams.batchGroupId || "",
      oFilterInfo = getFilterInfo(oTable);
    let aFilters = Array.isArray(oParams.additionalFilters) ? oParams.additionalFilters : [];
    const sBindingPath = oFilterInfo.bindingPath ? oFilterInfo.bindingPath : oBindingInfo.path;
    aFilters = aFilters.concat(oFilterInfo.filters).concat(getP13nFilters(oTable));
    const oTableContextFilter = new Filter({
      filters: aFilters,
      and: true
    });

    // Need to pass by a temporary ListBinding in order to get $filter query option (as string) thanks to fetchFilter of OdataListBinding
    const oListBinding = oDataModel.bindList((oPageBinding ? `${oPageBinding.getPath()}/` : "") + sBindingPath, oTable.getBindingContext(), [], oTableContextFilter);
    return oListBinding.fetchFilter(oListBinding.getContext()).then(function (aStringFilters) {
      countBinding = oDataModel.bindProperty(`${oListBinding.getPath()}/$count`, oListBinding.getContext(), {
        $$groupId: sBatchId || "$auto",
        $filter: aStringFilters[0],
        $search: oFilterInfo.search
      });
      return countBinding.requestValue();
    }).then(function (iValue) {
      countBinding.destroy();
      oListBinding.destroy();
      return iValue;
    });
  }
  function getCountFormatted(iCount) {
    const oCountFormatter = NumberFormat.getIntegerInstance({
      groupingEnabled: true
    });
    return oCountFormatter.format(iCount);
  }
  function getFilterInfo(oTable) {
    const oTableDefinition = oTable.getParent().getTableDefinition();
    let aIgnoreProperties = [];
    function _getRelativePathArrayFromAggregates(oSubTable) {
      const mAggregates = oSubTable.getParent().getTableDefinition().aggregates;
      return Object.keys(mAggregates).map(function (sAggregateName) {
        return mAggregates[sAggregateName].relativePath;
      });
    }
    if (oTableDefinition.enableAnalytics) {
      aIgnoreProperties = aIgnoreProperties.concat(_getRelativePathArrayFromAggregates(oTable));
      if (!oTableDefinition.enableBasicSearch) {
        // Search isn't allow as a $apply transformation for this table
        aIgnoreProperties = aIgnoreProperties.concat(["search"]);
      }
    }
    return FilterUtils.getFilterInfo(oTable.getFilter(), {
      ignoredProperties: aIgnoreProperties,
      targetControl: oTable
    });
  }

  /**
   * Retrieves all filters configured in the personalization dialog of the table or chart.
   *
   * @param oControl Table or Chart instance
   * @returns Filters configured in the personalization dialog of the table or chart
   * @private
   * @ui5-restricted
   */
  function getP13nFilters(oControl) {
    const aP13nMode = oControl.getP13nMode();
    if (aP13nMode && aP13nMode.indexOf("Filter") > -1) {
      const aP13nProperties = (DelegateUtil.getCustomData(oControl, "sap_fe_ControlDelegate_propertyInfoMap") || []).filter(function (oControlProperty) {
          return oControlProperty && !(oControlProperty.filterable === false);
        }),
        oFilterInfo = FilterUtils.getFilterInfo(oControl, {
          propertiesMetadata: aP13nProperties
        });
      if (oFilterInfo && oFilterInfo.filters) {
        return oFilterInfo.filters;
      }
    }
    return [];
  }
  function getAllFilterInfo(oTable) {
    const oIFilterInfo = tableUtils.getFilterInfo(oTable);
    return {
      filters: oIFilterInfo.filters.concat(getExternalFilters(oTable), tableUtils.getP13nFilters(oTable)),
      search: oIFilterInfo.search,
      bindingPath: oIFilterInfo.bindingPath
    };
  }

  /**
   * Returns a promise that is resolved with the table itself when the table was bound.
   *
   * @param oTable The table to check for binding
   * @returns A Promise that will be resolved when table is bound
   */
  function whenBound(oTable) {
    return _getOrCreateBoundPromiseInfo(oTable).promise;
  }

  /**
   * If not yet happened, it resolves the table bound promise.
   *
   * @param oTable The table that was bound
   */
  function onTableBound(oTable) {
    const oBoundPromiseInfo = _getOrCreateBoundPromiseInfo(oTable);
    if (oBoundPromiseInfo.resolve) {
      oBoundPromiseInfo.resolve(oTable);
      oTable.data("boundPromiseResolve", null);
    }
  }
  function _getOrCreateBoundPromiseInfo(oTable) {
    if (!oTable.data("boundPromise")) {
      let fnResolve;
      oTable.data("boundPromise", new Promise(function (resolve) {
        fnResolve = resolve;
      }));
      if (oTable.isBound()) {
        fnResolve(oTable);
      } else {
        oTable.data("boundPromiseResolve", fnResolve);
      }
    }
    return {
      promise: oTable.data("boundPromise"),
      resolve: oTable.data("boundPromiseResolve")
    };
  }
  function fnGetSemanticTargetsFromTable(oController, oTable) {
    const oView = oController.getView();
    const oInternalModelContext = oView.getBindingContext("internal");
    if (oInternalModelContext) {
      const sEntitySet = DelegateUtil.getCustomData(oTable, "targetCollectionPath");
      if (sEntitySet) {
        const oComponent = oController.getOwnerComponent();
        const oAppComponent = Component.getOwnerComponentFor(oComponent);
        const oMetaModel = oAppComponent.getMetaModel();
        const oShellServiceHelper = oAppComponent.getShellServices();
        const sCurrentHash = FieldRuntime._fnFixHashQueryString(oShellServiceHelper.getHash());
        const oColumns = oTable.getParent().getTableDefinition().columns;
        const aSemanticObjectsForGetLinks = [];
        const aSemanticObjects = [];
        const aPathAlreadyProcessed = [];
        let sPath = "",
          sAnnotationPath,
          oProperty;
        let _oSemanticObject;
        const aSemanticObjectsPromises = [];
        let sQualifier, regexResult;
        for (let i = 0; i < oColumns.length; i++) {
          sAnnotationPath = oColumns[i].annotationPath;
          //this check is required in cases where custom columns are configured via manifest where there is no provision for an annotation path.
          if (sAnnotationPath) {
            oProperty = oMetaModel.getObject(sAnnotationPath);
            if (oProperty && oProperty.$kind === "Property") {
              sPath = oColumns[i].annotationPath;
            } else if (oProperty && oProperty.$Type === "com.sap.vocabularies.UI.v1.DataField") {
              sPath = `${sEntitySet}/${oMetaModel.getObject(`${sAnnotationPath}/Value/$Path`)}`;
            }
          }
          if (sPath !== "") {
            const _Keys = Object.keys(oMetaModel.getObject(sPath + "@"));
            for (let index = 0; index < _Keys.length; index++) {
              if (!aPathAlreadyProcessed.includes(sPath) && _Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObject"}`) === 0 && _Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`) === -1 && _Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`) === -1) {
                regexResult = /#(.*)/.exec(_Keys[index]);
                sQualifier = regexResult ? regexResult[1] : "";
                aSemanticObjectsPromises.push(CommonUtils.getSemanticObjectPromise(oAppComponent, oView, oMetaModel, sPath, sQualifier));
                aPathAlreadyProcessed.push(sPath);
              }
            }
          }
          sPath = "";
        }
        if (aSemanticObjectsPromises.length === 0) {
          return Promise.resolve();
        } else {
          Promise.all(aSemanticObjectsPromises).then(function (aValues) {
            const aGetLinksPromises = [];
            let sSemObjExpression;
            const aSemanticObjectsResolved = aValues.filter(function (element) {
              if (element.semanticObject && typeof element.semanticObject.semanticObject === "object") {
                sSemObjExpression = compileExpression(pathInModel(element.semanticObject.semanticObject.$Path));
                element.semanticObject.semanticObject = sSemObjExpression;
                element.semanticObjectForGetLinks[0].semanticObject = sSemObjExpression;
                return true;
              } else if (element) {
                return element.semanticObject !== undefined;
              } else {
                return false;
              }
            });
            for (let j = 0; j < aSemanticObjectsResolved.length; j++) {
              _oSemanticObject = aSemanticObjectsResolved[j];
              if (_oSemanticObject && _oSemanticObject.semanticObject && !(_oSemanticObject.semanticObject.semanticObject.indexOf("{") === 0)) {
                aSemanticObjectsForGetLinks.push(_oSemanticObject.semanticObjectForGetLinks);
                aSemanticObjects.push({
                  semanticObject: _oSemanticObject.semanticObject && _oSemanticObject.semanticObject.semanticObject,
                  unavailableActions: _oSemanticObject.unavailableActions,
                  path: aSemanticObjectsResolved[j].semanticObjectPath
                });
                aGetLinksPromises.push(oShellServiceHelper.getLinksWithCache([_oSemanticObject.semanticObjectForGetLinks])); //aSemanticObjectsForGetLinks));
              }
            }

            return CommonUtils.updateSemanticTargets(aGetLinksPromises, aSemanticObjects, oInternalModelContext, sCurrentHash);
          }).catch(function (oError) {
            Log.error("fnGetSemanticTargetsFromTable: Cannot get Semantic Objects", oError);
          });
        }
      }
    }
  }
  function clearSelection(oTable) {
    oTable.clearSelection();
    const oInternalModelContext = oTable.getBindingContext("internal");
    if (oInternalModelContext) {
      oInternalModelContext.setProperty("deleteEnabled", false);
      oInternalModelContext.setProperty("numberOfSelectedContexts", 0);
      oInternalModelContext.setProperty("selectedContexts", []);
      oInternalModelContext.setProperty("deletableContexts", []);
    }
  }
  const tableUtils = {
    getCountFormatted: getCountFormatted,
    getHiddenFilters: getHiddenFilters,
    getListBindingForCount: getListBindingForCount,
    getFilterInfo: getFilterInfo,
    getP13nFilters: getP13nFilters,
    getAllFilterInfo: getAllFilterInfo,
    whenBound: whenBound,
    onTableBound: onTableBound,
    getSemanticTargetsFromTable: fnGetSemanticTargetsFromTable,
    clearSelection: clearSelection
  };
  return tableUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/Utils", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/macros/DelegateUtil","sap/fe/macros/field/FieldRuntime","sap/fe/macros/filter/FilterUtils","sap/ui/core/Component","sap/ui/core/format/NumberFormat","sap/ui/model/Filter"],function(e,t,n,i,o,a,r,s,c){"use strict";var l=n.pathInModel;var f=n.compileExpression;function u(e){let n=[];const i=e.data("hiddenFilters");if(i&&Array.isArray(i.paths)){i.paths.forEach(function(i){const o=t.getFiltersInfoForSV(e,i.annotationPath);n=n.concat(o.filters)})}return n}function g(e){let n=u(e);const i=e.getQuickFilter();if(i){const o=i.getSelectedKey()||i.getItems()[0].getKey();n=n.concat(t.getFiltersInfoForSV(e,o).filters)}return n}function m(e,t,n){let i;const o=e.data("rowsBindingInfo"),a=e.getModel();const r=n.batchGroupId||"",s=b(e);let l=Array.isArray(n.additionalFilters)?n.additionalFilters:[];const f=s.bindingPath?s.bindingPath:o.path;l=l.concat(s.filters).concat(p(e));const u=new c({filters:l,and:true});const g=a.bindList((t?`${t.getPath()}/`:"")+f,e.getBindingContext(),[],u);return g.fetchFilter(g.getContext()).then(function(e){i=a.bindProperty(`${g.getPath()}/$count`,g.getContext(),{$$groupId:r||"$auto",$filter:e[0],$search:s.search});return i.requestValue()}).then(function(e){i.destroy();g.destroy();return e})}function d(e){const t=s.getIntegerInstance({groupingEnabled:true});return t.format(e)}function b(e){const t=e.getParent().getTableDefinition();let n=[];function i(e){const t=e.getParent().getTableDefinition().aggregates;return Object.keys(t).map(function(e){return t[e].relativePath})}if(t.enableAnalytics){n=n.concat(i(e));if(!t.enableBasicSearch){n=n.concat(["search"])}}return a.getFilterInfo(e.getFilter(),{ignoredProperties:n,targetControl:e})}function p(e){const t=e.getP13nMode();if(t&&t.indexOf("Filter")>-1){const t=(i.getCustomData(e,"sap_fe_ControlDelegate_propertyInfoMap")||[]).filter(function(e){return e&&!(e.filterable===false)}),n=a.getFilterInfo(e,{propertiesMetadata:t});if(n&&n.filters){return n.filters}}return[]}function h(e){const t=v.getFilterInfo(e);return{filters:t.filters.concat(g(e),v.getP13nFilters(e)),search:t.search,bindingPath:t.bindingPath}}function O(e){return F(e).promise}function P(e){const t=F(e);if(t.resolve){t.resolve(e);e.data("boundPromiseResolve",null)}}function F(e){if(!e.data("boundPromise")){let t;e.data("boundPromise",new Promise(function(e){t=e}));if(e.isBound()){t(e)}else{e.data("boundPromiseResolve",t)}}return{promise:e.data("boundPromise"),resolve:e.data("boundPromiseResolve")}}function j(n,a){const s=n.getView();const c=s.getBindingContext("internal");if(c){const u=i.getCustomData(a,"targetCollectionPath");if(u){const i=n.getOwnerComponent();const g=r.getOwnerComponentFor(i);const m=g.getMetaModel();const d=g.getShellServices();const b=o._fnFixHashQueryString(d.getHash());const p=a.getParent().getTableDefinition().columns;const h=[];const O=[];const P=[];let F="",j,C;let v;const y=[];let S,$;for(let e=0;e<p.length;e++){j=p[e].annotationPath;if(j){C=m.getObject(j);if(C&&C.$kind==="Property"){F=p[e].annotationPath}else if(C&&C.$Type==="com.sap.vocabularies.UI.v1.DataField"){F=`${u}/${m.getObject(`${j}/Value/$Path`)}`}}if(F!==""){const e=Object.keys(m.getObject(F+"@"));for(let n=0;n<e.length;n++){if(!P.includes(F)&&e[n].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObject"}`)===0&&e[n].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`)===-1&&e[n].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`)===-1){$=/#(.*)/.exec(e[n]);S=$?$[1]:"";y.push(t.getSemanticObjectPromise(g,s,m,F,S));P.push(F)}}}F=""}if(y.length===0){return Promise.resolve()}else{Promise.all(y).then(function(e){const n=[];let i;const o=e.filter(function(e){if(e.semanticObject&&typeof e.semanticObject.semanticObject==="object"){i=f(l(e.semanticObject.semanticObject.$Path));e.semanticObject.semanticObject=i;e.semanticObjectForGetLinks[0].semanticObject=i;return true}else if(e){return e.semanticObject!==undefined}else{return false}});for(let e=0;e<o.length;e++){v=o[e];if(v&&v.semanticObject&&!(v.semanticObject.semanticObject.indexOf("{")===0)){h.push(v.semanticObjectForGetLinks);O.push({semanticObject:v.semanticObject&&v.semanticObject.semanticObject,unavailableActions:v.unavailableActions,path:o[e].semanticObjectPath});n.push(d.getLinksWithCache([v.semanticObjectForGetLinks]))}}return t.updateSemanticTargets(n,O,c,b)}).catch(function(t){e.error("fnGetSemanticTargetsFromTable: Cannot get Semantic Objects",t)})}}}}function C(e){e.clearSelection();const t=e.getBindingContext("internal");if(t){t.setProperty("deleteEnabled",false);t.setProperty("numberOfSelectedContexts",0);t.setProperty("selectedContexts",[]);t.setProperty("deletableContexts",[])}}const v={getCountFormatted:d,getHiddenFilters:u,getListBindingForCount:m,getFilterInfo:b,getP13nFilters:p,getAllFilterInfo:h,whenBound:O,onTableBound:P,getSemanticTargetsFromTable:j,clearSelection:C};return v},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/ALPTableDelegate-dbg", ["sap/base/util/deepClone", "sap/fe/core/CommonUtils", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/DelegateUtil", "sap/fe/macros/table/delegates/TableDelegate", "sap/fe/macros/table/Utils", "sap/ui/model/Filter"], function (deepClone, CommonUtils, ChartUtils, DelegateUtil, TableDelegate, TableUtils, Filter) {
  "use strict";

  /**
   * Helper class for sap.ui.mdc.Table.
   * <h3><b>Note:</b></h3>
   * The class is experimental and the API/behaviour is not finalised and hence this should not be used for productive usage.
   *
   * @author SAP SE
   * @private
   * @experimental
   * @since 1.69.0
   * @alias sap.fe.macros.ALPTableDelegate
   */
  const ALPTableDelegate = Object.assign({}, TableDelegate, {
    apiVersion: 2,
    _internalUpdateBindingInfo: function (table, bindingInfo) {
      var _getChartControl, _ref;
      let filterInfo;
      let chartFilterInfo = {},
        tableFilterInfo = {};
      let chartFilters;

      // We need to deepClone the info we get from the custom data, otherwise some of its subobjects (e.g. parameters) will
      // be shared with oBindingInfo and modified later (Object.assign only does a shallow clone)
      Object.assign(bindingInfo, deepClone(DelegateUtil.getCustomData(table, "rowsBindingInfo")));
      if (table.getRowBinding()) {
        bindingInfo.suspended = false;
      }
      const view = CommonUtils.getTargetView(table);
      const mdcChart = (_getChartControl = (_ref = view.getController()).getChartControl) === null || _getChartControl === void 0 ? void 0 : _getChartControl.call(_ref);
      const chartAPI = mdcChart.getParent();
      const chartSelectionsExist = chartAPI.hasSelections();
      tableFilterInfo = TableUtils.getAllFilterInfo(table);
      const tableFilters = tableFilterInfo && tableFilterInfo.filters;
      filterInfo = tableFilterInfo;
      if (chartSelectionsExist) {
        chartFilterInfo = ChartUtils.getAllFilterInfo(mdcChart);
        chartFilters = chartFilterInfo && chartFilterInfo.filters ? CommonUtils.getChartPropertiesWithoutPrefixes(chartFilterInfo.filters) : null;
        filterInfo = chartFilterInfo;
      }
      const finalFilters = (tableFilters && chartFilters ? tableFilters.concat(chartFilters) : chartFilters || tableFilters) || [];
      const oFilter = finalFilters.length > 0 && new Filter({
        filters: finalFilters,
        and: true
      });
      if (filterInfo.bindingPath) {
        // In case of parameters
        bindingInfo.path = filterInfo.bindingPath;
      }

      // Prepare binding info with filter/search parameters
      ALPTableDelegate.updateBindingInfoWithSearchQuery(bindingInfo, filterInfo, oFilter);
    },
    rebind: function (table, bindingInfo) {
      const internalModelContext = table.getBindingContext("pageInternal");
      const templateContentView = internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty(`${internalModelContext.getPath()}/alpContentView`);
      if (templateContentView !== "Chart") {
        TableDelegate.rebind(table, bindingInfo);
      }
    }
  });
  return ALPTableDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/ALPTableDelegate", ["sap/base/util/deepClone","sap/fe/core/CommonUtils","sap/fe/macros/chart/ChartUtils","sap/fe/macros/DelegateUtil","sap/fe/macros/table/delegates/TableDelegate","sap/fe/macros/table/Utils","sap/ui/model/Filter"],function(e,t,n,i,a,s,o){"use strict";const l=Object.assign({},a,{apiVersion:2,_internalUpdateBindingInfo:function(a,r){var c,g;let f;let d={},p={};let u;Object.assign(r,e(i.getCustomData(a,"rowsBindingInfo")));if(a.getRowBinding()){r.suspended=false}const h=t.getTargetView(a);const C=(c=(g=h.getController()).getChartControl)===null||c===void 0?void 0:c.call(g);const b=C.getParent();const m=b.hasSelections();p=s.getAllFilterInfo(a);const P=p&&p.filters;f=p;if(m){d=n.getAllFilterInfo(C);u=d&&d.filters?t.getChartPropertiesWithoutPrefixes(d.filters):null;f=d}const I=(P&&u?P.concat(u):u||P)||[];const v=I.length>0&&new o({filters:I,and:true});if(f.bindingPath){r.path=f.bindingPath}l.updateBindingInfoWithSearchQuery(r,f,v)},rebind:function(e,t){const n=e.getBindingContext("pageInternal");const i=n===null||n===void 0?void 0:n.getProperty(`${n.getPath()}/alpContentView`);if(i!=="Chart"){a.rebind(e,t)}}});return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/TableDelegate-dbg", ["sap/base/Log", "sap/base/util/deepClone", "sap/base/util/deepEqual", "sap/base/util/deepExtend", "sap/fe/core/ActionRuntime", "sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/DeleteHelper", "sap/fe/core/helpers/ExcelFormatHelper", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/helpers/SizeHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/type/EDM", "sap/fe/core/type/TypeUtil", "sap/fe/macros/CommonHelper", "sap/fe/macros/DelegateUtil", "sap/fe/macros/filterBar/FilterBarDelegate", "sap/fe/macros/table/TableSizeHelper", "sap/fe/macros/table/Utils", "sap/ui/core/Fragment", "sap/ui/mdc/odata/v4/TableDelegate", "sap/ui/model/Filter", "sap/ui/model/json/JSONModel", "../TableHelper"], function (Log, deepClone, deepEqual, deepExtend, ActionRuntime, CommonUtils, MetaModelConverter, ValueFormatter, DeleteHelper, ExcelFormat, ModelHelper, ResourceModelHelper, SizeHelper, TypeGuards, EDM, TypeUtil, CommonHelper, DelegateUtil, FilterBarDelegate, TableSizeHelper, TableUtils, Fragment, TableDelegateBase, Filter, JSONModel, TableHelper) {
  "use strict";

  var isTypeFilterable = EDM.isTypeFilterable;
  var isMultipleNavigationProperty = TypeGuards.isMultipleNavigationProperty;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var getLocalizedText = ResourceModelHelper.getLocalizedText;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const SEMANTICKEY_HAS_DRAFTINDICATOR = "/semanticKeyHasDraftIndicator";

  /**
   * Helper class for sap.ui.mdc.Table.
   * <h3><b>Note:</b></h3>
   * The class is experimental and the API and the behavior are not finalized. This class is not intended for productive usage.
   *
   * @author SAP SE
   * @private
   * @experimental
   * @since 1.69.0
   * @alias sap.fe.macros.TableDelegate
   */
  return Object.assign({}, TableDelegateBase, {
    apiVersion: 2,
    /**
     * This function calculates the width for a FieldGroup column.
     * The width of the FieldGroup is the width of the widest property contained in the FieldGroup (including the label if showDataFieldsLabel is true)
     * The result of this calculation is stored in the visualSettings.widthCalculation.minWidth property, which is used by the MDCtable.
     *
     * @param oTable Instance of the MDCtable
     * @param oProperty Current property
     * @param aProperties Array of properties
     * @private
     * @alias sap.fe.macros.TableDelegate
     */
    _computeVisualSettingsForFieldGroup: function (oTable, oProperty, aProperties) {
      if (oProperty.name.indexOf("DataFieldForAnnotation::FieldGroup::") === 0) {
        const oColumn = oTable.getColumns().find(function (oCol) {
          return oCol.getDataProperty() === oProperty.name;
        });
        const bShowDataFieldsLabel = oColumn ? oColumn.data("showDataFieldsLabel") === "true" : false;
        const oMetaModel = oTable.getModel().getMetaModel();
        const involvedDataModelObjects = getInvolvedDataModelObjects(oMetaModel.getContext(oProperty.metadataPath));
        const convertedMetaData = involvedDataModelObjects.convertedTypes;
        const oDataField = involvedDataModelObjects.targetObject;
        const oFieldGroup = oDataField.Target.$target;
        const aFieldWidth = [];
        oFieldGroup.Data.forEach(function (oData) {
          let oDataFieldWidth;
          switch (oData.$Type) {
            case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
              oDataFieldWidth = TableSizeHelper.getWidthForDataFieldForAnnotation(oData, aProperties, convertedMetaData, bShowDataFieldsLabel);
              break;
            case "com.sap.vocabularies.UI.v1.DataField":
              oDataFieldWidth = TableSizeHelper.getWidthForDataField(oData, bShowDataFieldsLabel, aProperties, convertedMetaData);
              break;
            case "com.sap.vocabularies.UI.v1.DataFieldForAction":
              oDataFieldWidth = {
                labelWidth: 0,
                propertyWidth: SizeHelper.getButtonWidth(oData.Label)
              };
              break;
            default:
          }
          if (oDataFieldWidth) {
            aFieldWidth.push(oDataFieldWidth.labelWidth + oDataFieldWidth.propertyWidth);
          }
        });
        const nWidest = aFieldWidth.reduce(function (acc, value) {
          return Math.max(acc, value);
        }, 0);
        oProperty.visualSettings = deepExtend(oProperty.visualSettings, {
          widthCalculation: {
            verticalArrangement: true,
            minWidth: Math.ceil(nWidest)
          }
        });
      }
    },
    _computeVisualSettingsForPropertyWithValueHelp: function (table, property) {
      const tableAPI = table.getParent();
      if (!property.propertyInfos) {
        const metaModel = table.getModel().getMetaModel();
        if (property.metadataPath && metaModel) {
          const dataField = metaModel.getObject(`${property.metadataPath}@`);
          if (dataField && dataField["@com.sap.vocabularies.Common.v1.ValueList"]) {
            property.visualSettings = deepExtend(property.visualSettings || {}, {
              widthCalculation: {
                gap: tableAPI.getProperty("readOnly") ? 0 : 4
              }
            });
          }
        }
      }
    },
    _computeVisualSettingsForPropertyWithUnit: function (oTable, oProperty, oUnit, oUnitText, oTimezoneText) {
      const oTableAPI = oTable ? oTable.getParent() : null;
      // update gap for properties with string unit
      const sUnitText = oUnitText || oTimezoneText;
      if (sUnitText) {
        oProperty.visualSettings = deepExtend(oProperty.visualSettings, {
          widthCalculation: {
            gap: Math.ceil(SizeHelper.getButtonWidth(sUnitText))
          }
        });
      }
      if (oUnit) {
        oProperty.visualSettings = deepExtend(oProperty.visualSettings, {
          widthCalculation: {
            // For properties with unit, a gap needs to be added to properly render the column width on edit mode
            gap: oTableAPI && oTableAPI.getReadOnly() ? 0 : 6
          }
        });
      }
    },
    _computeLabel: function (property, labelMap) {
      if (property.label) {
        var _property$path;
        const propertiesWithSameLabel = labelMap[property.label];
        if ((propertiesWithSameLabel === null || propertiesWithSameLabel === void 0 ? void 0 : propertiesWithSameLabel.length) > 1 && (_property$path = property.path) !== null && _property$path !== void 0 && _property$path.includes("/") && property.additionalLabels) {
          property.label = property.label + " (" + property.additionalLabels.join(" / ") + ")";
        }
        delete property.additionalLabels;
      }
    },
    //Update VisualSetting for columnWidth calculation and labels on navigation properties
    _updatePropertyInfo: function (table, properties) {
      const labelMap = {};
      // Check available p13n modes
      const p13nMode = table.getP13nMode();
      properties.forEach(property => {
        if (!property.propertyInfos && property.label) {
          // Only for non-complex properties
          if ((p13nMode === null || p13nMode === void 0 ? void 0 : p13nMode.indexOf("Sort")) > -1 && property.sortable || (p13nMode === null || p13nMode === void 0 ? void 0 : p13nMode.indexOf("Filter")) > -1 && property.filterable || (p13nMode === null || p13nMode === void 0 ? void 0 : p13nMode.indexOf("Group")) > -1 && property.groupable) {
            labelMap[property.label] = labelMap[property.label] !== undefined ? labelMap[property.label].concat([property]) : [property];
          }
        }
      });
      properties.forEach(property => {
        this._computeVisualSettingsForFieldGroup(table, property, properties);
        this._computeVisualSettingsForPropertyWithValueHelp(table, property);
        // bcp: 2270003577
        // Some columns (eg: custom columns) have no typeConfig property.
        // initializing it prevents an exception throw
        property.typeConfig = deepExtend(property.typeConfig, {});
        this._computeLabel(property, labelMap);
      });
      return properties;
    },
    getColumnsFor: function (table) {
      return table.getParent().getTableDefinition().columns;
    },
    _getAggregatedPropertyMap: function (oTable) {
      return oTable.getParent().getTableDefinition().aggregates;
    },
    /**
     * Returns the export capabilities for the given sap.ui.mdc.Table instance.
     *
     * @param oTable Instance of the table
     * @returns Promise representing the export capabilities of the table instance
     */
    fetchExportCapabilities: function (oTable) {
      const oCapabilities = {
        XLSX: {}
      };
      let oModel;
      return DelegateUtil.fetchModel(oTable).then(function (model) {
        oModel = model;
        return oModel.getMetaModel().getObject("/$EntityContainer@Org.OData.Capabilities.V1.SupportedFormats");
      }).then(function (aSupportedFormats) {
        const aLowerFormats = (aSupportedFormats || []).map(element => {
          return element.toLowerCase();
        });
        if (aLowerFormats.indexOf("application/pdf") > -1) {
          return oModel.getMetaModel().getObject("/$EntityContainer@com.sap.vocabularies.PDF.v1.Features");
        }
        return undefined;
      }).then(function (oAnnotation) {
        if (oAnnotation) {
          oCapabilities["PDF"] = Object.assign({}, oAnnotation);
        }
      }).catch(function (err) {
        Log.error(`An error occurs while computing export capabilities: ${err}`);
      }).then(function () {
        return oCapabilities;
      });
    },
    /**
     * Filtering on 1:n navigation properties and navigation
     * properties not part of the LineItem annotation is forbidden.
     *
     * @param columnInfo
     * @param metaModel
     * @param table
     * @returns Boolean true if filtering is allowed, false otherwise
     */
    _isFilterableNavigationProperty: function (columnInfo, metaModel, table) {
      // get the DataModelObjectPath for the table
      const tableDataModelObjectPath = getInvolvedDataModelObjects(metaModel.getContext(DelegateUtil.getCustomData(table, "metaPath"))),
        // get all navigation properties leading to the column
        columnNavigationProperties = getInvolvedDataModelObjects(metaModel.getContext(columnInfo.annotationPath)).navigationProperties,
        // we are only interested in navigation properties relative to the table, so all before and including the tables targetType can be filtered
        tableTargetEntityIndex = columnNavigationProperties.findIndex(prop => {
          var _prop$targetType;
          return ((_prop$targetType = prop.targetType) === null || _prop$targetType === void 0 ? void 0 : _prop$targetType.name) === tableDataModelObjectPath.targetEntityType.name;
        }),
        relativeNavigationProperties = columnNavigationProperties.slice(tableTargetEntityIndex > 0 ? tableTargetEntityIndex : 0);
      return !columnInfo.relativePath.includes("/") || columnInfo.isPartOfLineItem === true && !relativeNavigationProperties.some(isMultipleNavigationProperty);
    },
    _fetchPropertyInfo: function (metaModel, columnInfo, table, appComponent) {
      var _columnInfo$typeConfi, _columnInfo$typeConfi2, _columnInfo$propertyI;
      const sAbsoluteNavigationPath = columnInfo.annotationPath,
        oDataField = metaModel.getObject(sAbsoluteNavigationPath),
        oNavigationContext = metaModel.createBindingContext(sAbsoluteNavigationPath),
        oTypeConfig = (_columnInfo$typeConfi = columnInfo.typeConfig) !== null && _columnInfo$typeConfi !== void 0 && _columnInfo$typeConfi.className && isTypeFilterable(columnInfo.typeConfig.className) ? TypeUtil.getTypeConfig(columnInfo.typeConfig.className, columnInfo.typeConfig.formatOptions, columnInfo.typeConfig.constraints) : {},
        bFilterable = CommonHelper.isPropertyFilterable(oNavigationContext, oDataField),
        isComplexType = columnInfo.typeConfig && columnInfo.typeConfig.className && ((_columnInfo$typeConfi2 = columnInfo.typeConfig.className) === null || _columnInfo$typeConfi2 === void 0 ? void 0 : _columnInfo$typeConfi2.indexOf("Edm.")) !== 0,
        bIsAnalyticalTable = DelegateUtil.getCustomData(table, "enableAnalytics") === "true",
        aAggregatedPropertyMapUnfilterable = bIsAnalyticalTable ? this._getAggregatedPropertyMap(table) : {},
        label = getLocalizedText(columnInfo.label ?? "", appComponent ?? table);
      const propertyInfo = {
        name: columnInfo.name,
        metadataPath: sAbsoluteNavigationPath,
        groupLabel: columnInfo.groupLabel,
        group: columnInfo.group,
        label: label,
        tooltip: columnInfo.tooltip,
        typeConfig: oTypeConfig,
        visible: columnInfo.availability !== "Hidden" && !isComplexType,
        exportSettings: this._setPropertyInfoExportSettings(columnInfo.exportSettings, columnInfo),
        unit: columnInfo.unit
      };

      // Set visualSettings only if it exists
      if (columnInfo.visualSettings && Object.keys(columnInfo.visualSettings).length > 0) {
        propertyInfo.visualSettings = columnInfo.visualSettings;
      }
      if (columnInfo.exportDataPointTargetValue) {
        propertyInfo.exportDataPointTargetValue = columnInfo.exportDataPointTargetValue;
      }

      // MDC expects  'propertyInfos' only for complex properties.
      // An empty array throws validation error and undefined value is unhandled.
      if ((_columnInfo$propertyI = columnInfo.propertyInfos) !== null && _columnInfo$propertyI !== void 0 && _columnInfo$propertyI.length) {
        propertyInfo.propertyInfos = columnInfo.propertyInfos;
        //only in case of complex properties, wrap the cell content	on the excel exported file
        if (propertyInfo.exportSettings) {
          var _columnInfo$exportSet;
          propertyInfo.exportSettings.wrap = (_columnInfo$exportSet = columnInfo.exportSettings) === null || _columnInfo$exportSet === void 0 ? void 0 : _columnInfo$exportSet.wrap;
        }
      } else {
        var _extension;
        // Add properties which are supported only by simple PropertyInfos.
        propertyInfo.path = columnInfo.relativePath;
        // TODO with the new complex property info, a lot of "Description" fields are added as filter/sort fields
        propertyInfo.sortable = columnInfo.sortable;
        if (bIsAnalyticalTable) {
          this._updateAnalyticalPropertyInfoAttributes(propertyInfo, columnInfo);
        }
        propertyInfo.filterable = !!bFilterable && this._isFilterableNavigationProperty(columnInfo, metaModel, table) && (
        // TODO ignoring all properties that are not also available for adaptation for now, but proper concept required
        !bIsAnalyticalTable || !aAggregatedPropertyMapUnfilterable[propertyInfo.name] && !((_extension = columnInfo.extension) !== null && _extension !== void 0 && _extension.technicallyGroupable));
        propertyInfo.key = columnInfo.isKey;
        propertyInfo.groupable = columnInfo.isGroupable;
        if (columnInfo.textArrangement) {
          const descriptionColumn = this.getColumnsFor(table).find(function (oCol) {
            var _columnInfo$textArran;
            return oCol.name === ((_columnInfo$textArran = columnInfo.textArrangement) === null || _columnInfo$textArran === void 0 ? void 0 : _columnInfo$textArran.textProperty);
          });
          if (descriptionColumn) {
            propertyInfo.mode = columnInfo.textArrangement.mode;
            propertyInfo.valueProperty = columnInfo.relativePath;
            propertyInfo.descriptionProperty = descriptionColumn.relativePath;
          }
        }
        propertyInfo.text = columnInfo.textArrangement && columnInfo.textArrangement.textProperty;
        propertyInfo.caseSensitive = columnInfo.caseSensitive;
        if (columnInfo.additionalLabels) {
          propertyInfo.additionalLabels = columnInfo.additionalLabels.map(additionalLabel => {
            return getLocalizedText(additionalLabel, appComponent || table);
          });
        }
      }
      this._computeVisualSettingsForPropertyWithUnit(table, propertyInfo, columnInfo.unit, columnInfo.unitText, columnInfo.timezoneText);
      return propertyInfo;
    },
    /**
     * Extend the export settings based on the column info.
     *
     * @param exportSettings The export settings to be extended
     * @param columnInfo The columnInfo object
     * @returns The extended export settings
     */
    _setPropertyInfoExportSettings: function (exportSettings, columnInfo) {
      var _columnInfo$typeConfi3;
      const exportFormat = this._getExportFormat((_columnInfo$typeConfi3 = columnInfo.typeConfig) === null || _columnInfo$typeConfi3 === void 0 ? void 0 : _columnInfo$typeConfi3.className);
      if (exportSettings) {
        if (exportFormat && !exportSettings.timezoneProperty) {
          exportSettings.format = exportFormat;
        }
        // Set the exportSettings template only if it exists.
        if (exportSettings.template) {
          var _columnInfo$exportSet2;
          exportSettings.template = (_columnInfo$exportSet2 = columnInfo.exportSettings) === null || _columnInfo$exportSet2 === void 0 ? void 0 : _columnInfo$exportSet2.template;
        }
      }
      return exportSettings;
    },
    _updateAnalyticalPropertyInfoAttributes(propertyInfo, columnInfo) {
      if (columnInfo.aggregatable) {
        propertyInfo.aggregatable = columnInfo.aggregatable;
      }
      if (columnInfo.extension) {
        propertyInfo.extension = columnInfo.extension;
      }
    },
    _fetchCustomPropertyInfo: function (columnInfo, table, appComponent) {
      let sLabel = "";
      if (columnInfo.header) {
        if (columnInfo.header.startsWith("{metaModel>")) {
          const metaModelPath = columnInfo.header.substring(11, columnInfo.header.length - 1);
          sLabel = table.getModel().getMetaModel().getObject(metaModelPath);
        } else {
          sLabel = getLocalizedText(columnInfo.header, appComponent || table); // Todo: To be removed once MDC provides translation support
        }
      }

      const propertyInfo = {
        name: columnInfo.name,
        groupLabel: undefined,
        group: undefined,
        label: sLabel.toString(),
        type: "Edm.String",
        // TBD
        visible: columnInfo.availability !== "Hidden",
        exportSettings: columnInfo.exportSettings,
        visualSettings: columnInfo.visualSettings
      };

      // MDC expects 'propertyInfos' only for complex properties.
      // An empty array throws validation error and undefined value is unhandled.
      if (columnInfo.propertyInfos && columnInfo.propertyInfos.length) {
        var _columnInfo$exportSet3, _columnInfo$exportSet4;
        propertyInfo.propertyInfos = columnInfo.propertyInfos;
        //only in case of complex properties, wrap the cell content on the excel exported file
        propertyInfo.exportSettings = {
          wrap: (_columnInfo$exportSet3 = columnInfo.exportSettings) === null || _columnInfo$exportSet3 === void 0 ? void 0 : _columnInfo$exportSet3.wrap,
          template: (_columnInfo$exportSet4 = columnInfo.exportSettings) === null || _columnInfo$exportSet4 === void 0 ? void 0 : _columnInfo$exportSet4.template
        };
      } else {
        // Add properties which are supported only by simple PropertyInfos.
        propertyInfo.path = columnInfo.name;
        propertyInfo.sortable = false;
        propertyInfo.filterable = false;
      }
      return propertyInfo;
    },
    _bColumnHasPropertyWithDraftIndicator: function (oColumnInfo) {
      return !!(oColumnInfo.formatOptions && oColumnInfo.formatOptions.hasDraftIndicator || oColumnInfo.formatOptions && oColumnInfo.formatOptions.fieldGroupDraftIndicatorPropertyPath);
    },
    _updateDraftIndicatorModel: function (_oTable, _oColumnInfo) {
      const aVisibleColumns = _oTable.getColumns();
      const oInternalBindingContext = _oTable.getBindingContext("internal");
      const sInternalPath = oInternalBindingContext && oInternalBindingContext.getPath();
      if (aVisibleColumns && oInternalBindingContext) {
        for (const index in aVisibleColumns) {
          if (this._bColumnHasPropertyWithDraftIndicator(_oColumnInfo) && _oColumnInfo.name === aVisibleColumns[index].getDataProperty()) {
            if (oInternalBindingContext.getProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR) === undefined) {
              oInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, _oColumnInfo.name);
              break;
            }
          }
        }
      }
    },
    _fetchPropertiesForEntity: function (oTable, sEntityTypePath, oMetaModel, oAppComponent) {
      // when fetching properties, this binding context is needed - so lets create it only once and use if for all properties/data-fields/line-items
      const sBindingPath = ModelHelper.getEntitySetPath(sEntityTypePath);
      let aFetchedProperties = [];
      const oFR = CommonUtils.getFilterRestrictionsByPath(sBindingPath, oMetaModel);
      const aNonFilterableProps = oFR.NonFilterableProperties;
      return Promise.resolve(this.getColumnsFor(oTable)).then(aColumns => {
        // DraftAdministrativeData does not work via 'entitySet/$NavigationPropertyBinding/DraftAdministrativeData'
        if (aColumns) {
          let oPropertyInfo;
          aColumns.forEach(oColumnInfo => {
            this._updateDraftIndicatorModel(oTable, oColumnInfo);
            switch (oColumnInfo.type) {
              case "Annotation":
                oPropertyInfo = this._fetchPropertyInfo(oMetaModel, oColumnInfo, oTable, oAppComponent);
                if (oPropertyInfo && aNonFilterableProps.indexOf(oPropertyInfo.name) === -1) {
                  oPropertyInfo.maxConditions = DelegateUtil.isMultiValue(oPropertyInfo) ? -1 : 1;
                }
                break;
              case "Slot":
              case "Default":
                oPropertyInfo = this._fetchCustomPropertyInfo(oColumnInfo, oTable, oAppComponent);
                break;
              default:
                throw new Error(`unhandled switch case ${oColumnInfo.type}`);
            }
            aFetchedProperties.push(oPropertyInfo);
          });
        }
      }).then(() => {
        aFetchedProperties = this._updatePropertyInfo(oTable, aFetchedProperties);
      }).catch(function (err) {
        Log.error(`An error occurs while updating fetched properties: ${err}`);
      }).then(function () {
        return aFetchedProperties;
      });
    },
    _getCachedOrFetchPropertiesForEntity: function (table, entityTypePath, metaModel, appComponent) {
      const fetchedProperties = DelegateUtil.getCachedProperties(table);
      if (fetchedProperties) {
        return Promise.resolve(fetchedProperties);
      }
      return this._fetchPropertiesForEntity(table, entityTypePath, metaModel, appComponent).then(function (subFetchedProperties) {
        DelegateUtil.setCachedProperties(table, subFetchedProperties);
        return subFetchedProperties;
      });
    },
    _setTableNoDataText: function (oTable, oBindingInfo) {
      let sNoDataKey = "";
      const oTableFilterInfo = TableUtils.getAllFilterInfo(oTable),
        suffixResourceKey = oBindingInfo.path.startsWith("/") ? oBindingInfo.path.substr(1) : oBindingInfo.path;
      const _getNoDataTextWithFilters = function () {
        if (oTable.data("hiddenFilters") || oTable.getQuickFilter()) {
          return "M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW";
        } else {
          return "T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER";
        }
      };
      const sFilterAssociation = oTable.getFilter();
      if (sFilterAssociation && !/BasicSearch$/.test(sFilterAssociation)) {
        // check if a FilterBar is associated to the Table (basic search on toolBar is excluded)
        if (oTableFilterInfo.search || oTableFilterInfo.filters && oTableFilterInfo.filters.length) {
          // check if table has any Filterbar filters or personalization filters
          sNoDataKey = _getNoDataTextWithFilters();
        } else {
          sNoDataKey = "T_TABLE_AND_CHART_NO_DATA_TEXT";
        }
      } else if (oTableFilterInfo.search || oTableFilterInfo.filters && oTableFilterInfo.filters.length) {
        //check if table has any personalization filters
        sNoDataKey = _getNoDataTextWithFilters();
      } else {
        sNoDataKey = "M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT";
      }
      oTable.setNoData(getResourceModel(oTable).getText(sNoDataKey, undefined, suffixResourceKey));
    },
    handleTableDataReceived: function (oTable, oInternalModelContext) {
      const oBinding = oTable && oTable.getRowBinding(),
        bDataReceivedAttached = oInternalModelContext && oInternalModelContext.getProperty("dataReceivedAttached");
      if (oInternalModelContext && !bDataReceivedAttached) {
        oBinding.attachDataReceived(function () {
          // Refresh the selected contexts to trigger re-calculation of enabled state of actions.
          oInternalModelContext.setProperty("selectedContexts", []);
          const aSelectedContexts = oTable.getSelectedContexts();
          oInternalModelContext.setProperty("selectedContexts", aSelectedContexts);
          oInternalModelContext.setProperty("numberOfSelectedContexts", aSelectedContexts.length);
          const oActionOperationAvailableMap = JSON.parse(CommonHelper.parseCustomData(DelegateUtil.getCustomData(oTable, "operationAvailableMap")));
          ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, "table");
          // Refresh enablement of delete button
          DeleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);
          const oTableAPI = oTable ? oTable.getParent() : null;
          if (oTableAPI) {
            oTableAPI.setUpEmptyRows(oTable);
          }
        });
        oInternalModelContext.setProperty("dataReceivedAttached", true);
      }
    },
    rebind: function (oTable, oBindingInfo) {
      const oTableAPI = oTable.getParent();
      const bIsSuspended = oTableAPI === null || oTableAPI === void 0 ? void 0 : oTableAPI.getProperty("bindingSuspended");
      oTableAPI === null || oTableAPI === void 0 ? void 0 : oTableAPI.setProperty("outDatedBinding", bIsSuspended);
      if (!bIsSuspended) {
        TableUtils.clearSelection(oTable);
        TableDelegateBase.rebind.apply(this, [oTable, oBindingInfo]);
        TableUtils.onTableBound(oTable);
        this._setTableNoDataText(oTable, oBindingInfo);
        return TableUtils.whenBound(oTable).then(this.handleTableDataReceived(oTable, oTable.getBindingContext("internal"))).catch(function (oError) {
          Log.error("Error while waiting for the table to be bound", oError);
        });
      }
      return Promise.resolve();
    },
    /**
     * Fetches the relevant metadata for the table and returns property info array.
     *
     * @param table Instance of the MDCtable
     * @returns Array of property info
     */
    fetchProperties: function (table) {
      return DelegateUtil.fetchModel(table).then(model => {
        return this._getCachedOrFetchPropertiesForEntity(table, DelegateUtil.getCustomData(table, "entityType"), model.getMetaModel());
      }).then(properties => {
        table.getBindingContext("internal").setProperty("tablePropertiesAvailable", true);
        return properties;
      });
    },
    preInit: function (oTable) {
      return TableDelegateBase.preInit.apply(this, [oTable]).then(function () {
        /**
         * Set the binding context to null for every fast creation row to avoid it inheriting
         * the wrong context and requesting the table columns on the parent entity
         * Set the correct binding context in ObjectPageController.enableFastCreationRow()
         */
        const oFastCreationRow = oTable.getCreationRow();
        if (oFastCreationRow) {
          oFastCreationRow.setBindingContext(null);
        }
      });
    },
    updateBindingInfo: function (oTable, oBindingInfo) {
      var _oTable$getCreationRo;
      TableDelegateBase.updateBindingInfo.apply(this, [oTable, oBindingInfo]);
      this._internalUpdateBindingInfo(oTable, oBindingInfo);
      this._setTableNoDataText(oTable, oBindingInfo);
      /**
       * We have to set the binding context to null for every fast creation row to avoid it inheriting
       * the wrong context and requesting the table columns on the parent entity
       * The correct binding context is set in ObjectPageController.enableFastCreationRow()
       */
      if (((_oTable$getCreationRo = oTable.getCreationRow()) === null || _oTable$getCreationRo === void 0 ? void 0 : _oTable$getCreationRo.getBindingContext()) === null) {
        TableHelper.enableFastCreationRow(oTable.getCreationRow(), oBindingInfo.path, oTable.getBindingContext(), oTable.getModel(), oTable.getModel("ui").getProperty("/isEditable"));
      }
    },
    _manageSemanticTargets: function (oMDCTable) {
      const oRowBinding = oMDCTable.getRowBinding();
      if (oRowBinding) {
        oRowBinding.attachEventOnce("dataRequested", function () {
          setTimeout(function () {
            const _oView = CommonUtils.getTargetView(oMDCTable);
            if (_oView) {
              TableUtils.getSemanticTargetsFromTable(_oView.getController(), oMDCTable);
            }
          }, 0);
        });
      }
    },
    updateBinding: function (oTable, oBindingInfo, oBinding) {
      const oTableAPI = oTable.getParent();
      const bIsSuspended = oTableAPI === null || oTableAPI === void 0 ? void 0 : oTableAPI.getProperty("bindingSuspended");
      if (!bIsSuspended) {
        let bNeedManualRefresh = false;
        const _oView = CommonUtils.getTargetView(oTable);
        const oInternalBindingContext = oTable.getBindingContext("internal");
        const sManualUpdatePropertyKey = "pendingManualBindingUpdate";
        const bPendingManualUpdate = oInternalBindingContext.getProperty(sManualUpdatePropertyKey);
        const oRowBinding = oTable.getRowBinding();
        if (oRowBinding) {
          /**
           * Manual refresh if filters are not changed by binding.refresh() since updating the bindingInfo
           * is not enough to trigger a batch request.
           * Removing columns creates one batch request that was not executed before
           */
          const oldFilters = oRowBinding.getFilters("Application");
          bNeedManualRefresh = deepEqual(oBindingInfo.filters, oldFilters[0]) && oBindingInfo.path === oRowBinding.getPath() &&
          // The path can be changed in case of a parametrized entity
          oRowBinding.getQueryOptionsFromParameters().$search === oBindingInfo.parameters.$search && !bPendingManualUpdate && _oView && _oView.getViewData().converterType === "ListReport";
        }
        TableDelegateBase.updateBinding.apply(this, [oTable, oBindingInfo, oBinding]);
        oTable.fireEvent("bindingUpdated");
        if (bNeedManualRefresh && oTable.getFilter() && oBinding) {
          oRowBinding.requestRefresh(oRowBinding.getGroupId()).finally(function () {
            oInternalBindingContext.setProperty(sManualUpdatePropertyKey, false);
          }).catch(function (oError) {
            Log.error("Error while refreshing the table", oError);
          });
          oInternalBindingContext.setProperty(sManualUpdatePropertyKey, true);
        }
        this._manageSemanticTargets(oTable);
      }
      oTableAPI === null || oTableAPI === void 0 ? void 0 : oTableAPI.setProperty("outDatedBinding", bIsSuspended);
    },
    _computeRowBindingInfoFromTemplate: function (oTable) {
      // We need to deepClone the info we get from the custom data, otherwise some of its subobjects (e.g. parameters) will
      // be shared with oBindingInfo and modified later (Object.assign only does a shallow clone)
      const rowBindingInfo = deepClone(DelegateUtil.getCustomData(oTable, "rowsBindingInfo"));
      // if the rowBindingInfo has a $$getKeepAliveContext parameter we need to check it is the only Table with such a
      // parameter for the collectionMetaPath
      if (rowBindingInfo.parameters.$$getKeepAliveContext) {
        const collectionPath = DelegateUtil.getCustomData(oTable, "targetCollectionPath");
        const internalModel = oTable.getModel("internal");
        const keptAliveLists = internalModel.getObject("/keptAliveLists") || {};
        if (!keptAliveLists[collectionPath]) {
          keptAliveLists[collectionPath] = oTable.getId();
          internalModel.setProperty("/keptAliveLists", keptAliveLists);
        } else if (keptAliveLists[collectionPath] !== oTable.getId()) {
          delete rowBindingInfo.parameters.$$getKeepAliveContext;
        }
      }
      return rowBindingInfo;
    },
    _internalUpdateBindingInfo: function (oTable, oBindingInfo) {
      const oInternalModelContext = oTable.getBindingContext("internal");
      Object.assign(oBindingInfo, this._computeRowBindingInfoFromTemplate(oTable));
      /**
       * Binding info might be suspended at the beginning when the first bindRows is called:
       * To avoid duplicate requests but still have a binding to create new entries.				 *
       * After the initial binding step, follow up bindings should no longer be suspended.
       */
      if (oTable.getRowBinding()) {
        oBindingInfo.suspended = false;
      }
      // The previously added handler for the event 'dataReceived' is not anymore there
      // since the bindingInfo is recreated from scratch so we need to set the flag to false in order
      // to again add the handler on this event if needed
      if (oInternalModelContext) {
        oInternalModelContext.setProperty("dataReceivedAttached", false);
      }
      let oFilter;
      const oFilterInfo = TableUtils.getAllFilterInfo(oTable);
      // Prepare binding info with filter/search parameters
      if (oFilterInfo.filters.length > 0) {
        oFilter = new Filter({
          filters: oFilterInfo.filters,
          and: true
        });
      }
      if (oFilterInfo.bindingPath) {
        oBindingInfo.path = oFilterInfo.bindingPath;
      }
      const oDataStateIndicator = oTable.getDataStateIndicator();
      if (oDataStateIndicator && oDataStateIndicator.isFiltering()) {
        // Include filters on messageStrip
        if (oBindingInfo.filters.length > 0) {
          oFilter = new Filter({
            filters: oBindingInfo.filters.concat(oFilterInfo.filters),
            and: true
          });
          this.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);
        }
      } else {
        this.updateBindingInfoWithSearchQuery(oBindingInfo, oFilterInfo, oFilter);
      }
    },
    updateBindingInfoWithSearchQuery: function (bindingInfo, filterInfo, filter) {
      bindingInfo.filters = filter;
      if (filterInfo.search) {
        bindingInfo.parameters.$search = CommonUtils.normalizeSearchTerm(filterInfo.search);
      } else {
        bindingInfo.parameters.$search = undefined;
      }
    },
    _templateCustomColumnFragment: function (oColumnInfo, oView, oModifier, sTableId) {
      const oColumnModel = new JSONModel(oColumnInfo),
        oThis = new JSONModel({
          id: sTableId
        }),
        oPreprocessorSettings = {
          bindingContexts: {
            this: oThis.createBindingContext("/"),
            column: oColumnModel.createBindingContext("/")
          },
          models: {
            this: oThis,
            column: oColumnModel
          }
        };
      return DelegateUtil.templateControlFragment("sap.fe.macros.table.CustomColumn", oPreprocessorSettings, {
        view: oView
      }, oModifier).then(function (oItem) {
        oColumnModel.destroy();
        return oItem;
      });
    },
    _templateSlotColumnFragment: async function (oColumnInfo, oView, oModifier, sTableId) {
      const oColumnModel = new JSONModel(oColumnInfo),
        oThis = new JSONModel({
          id: sTableId
        }),
        oPreprocessorSettings = {
          bindingContexts: {
            this: oThis.createBindingContext("/"),
            column: oColumnModel.createBindingContext("/")
          },
          models: {
            this: oThis,
            column: oColumnModel
          }
        };
      const slotColumnsXML = await DelegateUtil.templateControlFragment("sap.fe.macros.table.SlotColumn", oPreprocessorSettings, {
        isXML: true
      });
      if (!slotColumnsXML) {
        return Promise.resolve(null);
      }
      const slotXML = slotColumnsXML.getElementsByTagName("slot")[0],
        mdcTableTemplateXML = slotColumnsXML.getElementsByTagName("mdcTable:template")[0];
      mdcTableTemplateXML.removeChild(slotXML);
      if (oColumnInfo.template) {
        const oTemplate = new DOMParser().parseFromString(oColumnInfo.template, "text/xml");
        mdcTableTemplateXML.appendChild(oTemplate.firstElementChild);
      } else {
        Log.error(`Please provide content inside this Building Block Column: ${oColumnInfo.header}`);
        return Promise.resolve(null);
      }
      if (oModifier.targets !== "jsControlTree") {
        return slotColumnsXML;
      }
      return Fragment.load({
        type: "XML",
        definition: slotColumnsXML
      });
    },
    _getExportFormat: function (dataType) {
      switch (dataType) {
        case "Edm.Date":
          return ExcelFormat.getExcelDatefromJSDate();
        case "Edm.DateTimeOffset":
          return ExcelFormat.getExcelDateTimefromJSDateTime();
        case "Edm.TimeOfDay":
          return ExcelFormat.getExcelTimefromJSTime();
        default:
          return undefined;
      }
    },
    _getVHRelevantFields: function (oMetaModel, sMetadataPath, sBindingPath) {
      let aFields = [],
        oDataFieldData = oMetaModel.getObject(sMetadataPath);
      if (oDataFieldData.$kind && oDataFieldData.$kind === "Property") {
        oDataFieldData = oMetaModel.getObject(`${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`);
        sMetadataPath = `${sMetadataPath}@com.sap.vocabularies.UI.v1.DataFieldDefault`;
      }
      switch (oDataFieldData.$Type) {
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          if (oMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath`).includes("com.sap.vocabularies.UI.v1.FieldGroup")) {
            oMetaModel.getObject(`${sMetadataPath}/Target/$AnnotationPath/Data`).forEach((oValue, iIndex) => {
              aFields = aFields.concat(this._getVHRelevantFields(oMetaModel, `${sMetadataPath}/Target/$AnnotationPath/Data/${iIndex}`));
            });
          }
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
          aFields.push(oMetaModel.getObject(`${sMetadataPath}/Value/$Path`));
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
          break;
        default:
          // property
          // temporary workaround to make sure VH relevant field path do not contain the bindingpath
          if (sMetadataPath.indexOf(sBindingPath) === 0) {
            aFields.push(sMetadataPath.substring(sBindingPath.length + 1));
            break;
          }
          aFields.push(CommonHelper.getNavigationPath(sMetadataPath, true));
          break;
      }
      return aFields;
    },
    _setDraftIndicatorOnVisibleColumn: function (oTable, aColumns, oColumnInfo) {
      const oInternalBindingContext = oTable.getBindingContext("internal");
      if (!oInternalBindingContext) {
        return;
      }
      const sInternalPath = oInternalBindingContext.getPath();
      const aColumnsWithDraftIndicator = aColumns.filter(oColumn => {
        return this._bColumnHasPropertyWithDraftIndicator(oColumn);
      });
      const aVisibleColumns = oTable.getColumns();
      let sAddVisibleColumnName, sVisibleColumnName, bFoundColumnVisibleWithDraft, sColumnNameWithDraftIndicator;
      for (const i in aVisibleColumns) {
        sVisibleColumnName = aVisibleColumns[i].getDataProperty();
        for (const j in aColumnsWithDraftIndicator) {
          sColumnNameWithDraftIndicator = aColumnsWithDraftIndicator[j].name;
          if (sVisibleColumnName === sColumnNameWithDraftIndicator) {
            bFoundColumnVisibleWithDraft = true;
            break;
          }
          if (oColumnInfo && oColumnInfo.name === sColumnNameWithDraftIndicator) {
            sAddVisibleColumnName = oColumnInfo.name;
          }
        }
        if (bFoundColumnVisibleWithDraft) {
          oInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sVisibleColumnName);
          break;
        }
      }
      if (!bFoundColumnVisibleWithDraft && sAddVisibleColumnName) {
        oInternalBindingContext.setProperty(sInternalPath + SEMANTICKEY_HAS_DRAFTINDICATOR, sAddVisibleColumnName);
      }
    },
    removeItem: function (oTable, oPropertyInfoName, mPropertyBag) {
      let doRemoveItem = true;
      if (!oPropertyInfoName) {
        // 1. Application removed the property from their data model
        // 2. addItem failed before revertData created
        return Promise.resolve(doRemoveItem);
      }
      const oModifier = mPropertyBag.modifier;
      const sDataProperty = oModifier.getProperty(oPropertyInfoName, "dataProperty");
      if (sDataProperty && sDataProperty.indexOf && sDataProperty.indexOf("InlineXML") !== -1) {
        oModifier.insertAggregation(oTable, "dependents", oPropertyInfoName);
        doRemoveItem = false;
      }
      if (oTable.isA && oModifier.targets === "jsControlTree") {
        this._setDraftIndicatorStatus(oModifier, oTable, this.getColumnsFor(oTable));
      }
      return Promise.resolve(doRemoveItem);
    },
    _getMetaModel: function (mPropertyBag) {
      return mPropertyBag.appComponent && mPropertyBag.appComponent.getModel().getMetaModel();
    },
    _setDraftIndicatorStatus: function (oModifier, oTable, aColumns, oColumnInfo) {
      if (oModifier.targets === "jsControlTree") {
        this._setDraftIndicatorOnVisibleColumn(oTable, aColumns, oColumnInfo);
      }
    },
    _getGroupId: function (sRetrievedGroupId) {
      return sRetrievedGroupId || undefined;
    },
    _getDependent: function (oDependent, sPropertyInfoName, sDataProperty) {
      if (sPropertyInfoName === sDataProperty) {
        return oDependent;
      }
      return undefined;
    },
    _fnTemplateValueHelp: function (fnTemplateValueHelp, bValueHelpRequired, bValueHelpExists) {
      if (bValueHelpRequired && !bValueHelpExists) {
        return fnTemplateValueHelp("sap.fe.macros.table.ValueHelp");
      }
      return Promise.resolve();
    },
    _getDisplayMode: function (bDisplayMode) {
      let columnEditMode;
      if (bDisplayMode !== undefined) {
        bDisplayMode = typeof bDisplayMode === "boolean" ? bDisplayMode : bDisplayMode === "true";
        columnEditMode = bDisplayMode ? "Display" : "Editable";
        return {
          displaymode: bDisplayMode,
          columnEditMode: columnEditMode
        };
      }
      return {
        displaymode: undefined,
        columnEditMode: undefined
      };
    },
    _insertAggregation: function (oValueHelp, oModifier, oTable) {
      if (oValueHelp) {
        return oModifier.insertAggregation(oTable, "dependents", oValueHelp, 0);
      }
      return undefined;
    },
    /**
     * Invoked when a column is added using the table personalization dialog.
     *
     * @param sPropertyInfoName Name of the property for which the column is added
     * @param oTable Instance of table control
     * @param mPropertyBag Instance of property bag from the flexibility API
     * @returns Once resolved, a table column definition is returned
     */
    addItem: async function (oTable, sPropertyInfoName, mPropertyBag) {
      const oMetaModel = this._getMetaModel(mPropertyBag),
        oModifier = mPropertyBag.modifier,
        sTableId = oModifier.getId(oTable),
        aColumns = oTable.isA ? this.getColumnsFor(oTable) : null;
      if (!aColumns) {
        return Promise.resolve(null);
      }
      const oColumnInfo = aColumns.find(function (oColumn) {
        return oColumn.name === sPropertyInfoName;
      });
      if (!oColumnInfo) {
        Log.error(`${sPropertyInfoName} not found while adding column`);
        return Promise.resolve(null);
      }
      this._setDraftIndicatorStatus(oModifier, oTable, aColumns, oColumnInfo);
      // render custom column
      if (oColumnInfo.type === "Default") {
        return this._templateCustomColumnFragment(oColumnInfo, mPropertyBag.view, oModifier, sTableId);
      }
      if (oColumnInfo.type === "Slot") {
        return this._templateSlotColumnFragment(oColumnInfo, mPropertyBag.view, oModifier, sTableId);
      }
      // fall-back
      if (!oMetaModel) {
        return Promise.resolve(null);
      }
      const sPath = await DelegateUtil.getCustomData(oTable, "metaPath", oModifier);
      const sEntityTypePath = await DelegateUtil.getCustomData(oTable, "entityType", oModifier);
      const sRetrievedGroupId = await DelegateUtil.getCustomData(oTable, "requestGroupId", oModifier);
      const sGroupId = this._getGroupId(sRetrievedGroupId);
      const oTableContext = oMetaModel.createBindingContext(sPath);
      const aFetchedProperties = await this._getCachedOrFetchPropertiesForEntity(oTable, sEntityTypePath, oMetaModel, mPropertyBag.appComponent);
      const oPropertyInfo = aFetchedProperties.find(function (oInfo) {
        return oInfo.name === sPropertyInfoName;
      });
      const oPropertyContext = oMetaModel.createBindingContext(oPropertyInfo.metadataPath);
      const aVHProperties = this._getVHRelevantFields(oMetaModel, oPropertyInfo.metadataPath, sPath);
      const oParameters = {
        sBindingPath: sPath,
        sValueHelpType: "TableValueHelp",
        oControl: oTable,
        oMetaModel,
        oModifier,
        oPropertyInfo
      };
      const fnTemplateValueHelp = async sFragmentName => {
        const oThis = new JSONModel({
            id: sTableId,
            requestGroupId: sGroupId
          }),
          oPreprocessorSettings = {
            bindingContexts: {
              this: oThis.createBindingContext("/"),
              dataField: oPropertyContext,
              contextPath: oTableContext
            },
            models: {
              this: oThis,
              dataField: oMetaModel,
              metaModel: oMetaModel,
              contextPath: oMetaModel
            }
          };
        try {
          const oValueHelp = await DelegateUtil.templateControlFragment(sFragmentName, oPreprocessorSettings, {}, oModifier);
          return await this._insertAggregation(oValueHelp, oModifier, oTable);
        } catch (oError) {
          //We always resolve the promise to ensure that the app does not crash
          Log.error(`ValueHelp not loaded : ${oError.message}`);
          return null;
        } finally {
          oThis.destroy();
        }
      };
      const fnTemplateFragment = (oInPropertyInfo, oView) => {
        const sFragmentName = "sap.fe.macros.table.Column";
        let bDisplayMode;
        let sTableTypeCustomData;
        let sOnChangeCustomData;
        let sCreationModeCustomData;
        return Promise.all([DelegateUtil.getCustomData(oTable, "displayModePropertyBinding", oModifier), DelegateUtil.getCustomData(oTable, "tableType", oModifier), DelegateUtil.getCustomData(oTable, "onChange", oModifier), DelegateUtil.getCustomData(oTable, "creationMode", oModifier)]).then(aCustomData => {
          bDisplayMode = aCustomData[0];
          sTableTypeCustomData = aCustomData[1];
          sOnChangeCustomData = aCustomData[2];
          sCreationModeCustomData = aCustomData[3];
          // Read Only and Column Edit Mode can both have three state
          // Undefined means that the framework decides what to do
          // True / Display means always read only
          // False / Editable means editable but while still respecting the low level principle (immutable property will not be editable)
          const oDisplayModes = this._getDisplayMode(bDisplayMode);
          bDisplayMode = oDisplayModes.displaymode;
          const columnEditMode = oDisplayModes.columnEditMode;
          const oThis = new JSONModel({
              enableAutoColumnWidth: oTable.getParent().enableAutoColumnWidth,
              isOptimizedForSmallDevice: oTable.getParent().isOptimizedForSmallDevice,
              readOnly: bDisplayMode,
              columnEditMode: columnEditMode,
              tableType: sTableTypeCustomData,
              onChange: sOnChangeCustomData,
              id: sTableId,
              navigationPropertyPath: sPropertyInfoName,
              columnInfo: oColumnInfo,
              collection: {
                sPath: sPath,
                oModel: oMetaModel
              },
              creationMode: sCreationModeCustomData
            }),
            oPreprocessorSettings = {
              bindingContexts: {
                entitySet: oTableContext,
                collection: oTableContext,
                dataField: oPropertyContext,
                this: oThis.createBindingContext("/"),
                column: oThis.createBindingContext("/columnInfo")
              },
              models: {
                this: oThis,
                entitySet: oMetaModel,
                collection: oMetaModel,
                dataField: oMetaModel,
                metaModel: oMetaModel,
                column: oThis
              },
              appComponent: mPropertyBag.appComponent
            };
          return DelegateUtil.templateControlFragment(sFragmentName, oPreprocessorSettings, {
            view: oView
          }, oModifier).finally(function () {
            oThis.destroy();
          });
        });
      };
      await Promise.all(aVHProperties.map(async sPropertyName => {
        const mParameters = Object.assign({}, oParameters, {
          sPropertyName: sPropertyName
        });
        const aResults = await Promise.all([DelegateUtil.isValueHelpRequired(mParameters), DelegateUtil.doesValueHelpExist(mParameters)]);
        const bValueHelpRequired = aResults[0],
          bValueHelpExists = aResults[1];
        return this._fnTemplateValueHelp(fnTemplateValueHelp, bValueHelpRequired, bValueHelpExists);
      }));
      // If view is not provided try to get it by accessing to the parental hierarchy
      // If it doesn't work (table into an unattached OP section) get the view via the AppComponent
      const view = mPropertyBag.view || CommonUtils.getTargetView(oTable) || (mPropertyBag.appComponent ? CommonUtils.getCurrentPageView(mPropertyBag.appComponent) : undefined);
      return fnTemplateFragment(oPropertyInfo, view);
    },
    /**
     * Provide the Table's filter delegate to provide basic filter functionality such as adding FilterFields.
     *
     * @returns Object for the Tables filter personalization.
     */
    getFilterDelegate: function () {
      return Object.assign({
        apiVersion: 2
      }, FilterBarDelegate, {
        addItem: function (oParentControl, sPropertyInfoName) {
          if (sPropertyInfoName.indexOf("Property::") === 0) {
            // Correct the name of complex property info references.
            sPropertyInfoName = sPropertyInfoName.replace("Property::", "");
          }
          return FilterBarDelegate.addItem(oParentControl, sPropertyInfoName);
        }
      });
    },
    /**
     * Returns the TypeUtil attached to this delegate.
     *
     * @returns Any instance of TypeUtil
     */
    getTypeUtil: function /*oPayload: object*/
    () {
      return TypeUtil;
    },
    formatGroupHeader(oTable, oContext, sProperty) {
      var _oFormatInfo$typeConf, _oFormatInfo$typeConf2;
      const mFormatInfos = DelegateUtil.getCachedProperties(oTable),
        oFormatInfo = mFormatInfos && mFormatInfos.filter(obj => {
          return obj.name === sProperty;
        })[0],
        /*For a Date or DateTime property, the value is returned in external format using a UI5 type for the
              given property path that formats corresponding to the property's EDM type and constraints*/
        bExternalFormat = (oFormatInfo === null || oFormatInfo === void 0 ? void 0 : (_oFormatInfo$typeConf = oFormatInfo.typeConfig) === null || _oFormatInfo$typeConf === void 0 ? void 0 : _oFormatInfo$typeConf.baseType) === "DateTime" || (oFormatInfo === null || oFormatInfo === void 0 ? void 0 : (_oFormatInfo$typeConf2 = oFormatInfo.typeConfig) === null || _oFormatInfo$typeConf2 === void 0 ? void 0 : _oFormatInfo$typeConf2.baseType) === "Date";
      let sValue;
      if (oFormatInfo && oFormatInfo.mode) {
        switch (oFormatInfo.mode) {
          case "Description":
            sValue = oContext.getProperty(oFormatInfo.descriptionProperty, bExternalFormat);
            break;
          case "DescriptionValue":
            sValue = ValueFormatter.formatWithBrackets(oContext.getProperty(oFormatInfo.descriptionProperty, bExternalFormat), oContext.getProperty(oFormatInfo.valueProperty, bExternalFormat));
            break;
          case "ValueDescription":
            sValue = ValueFormatter.formatWithBrackets(oContext.getProperty(oFormatInfo.valueProperty, bExternalFormat), oContext.getProperty(oFormatInfo.descriptionProperty, bExternalFormat));
            break;
          default:
            break;
        }
      } else {
        sValue = oContext.getProperty(oFormatInfo === null || oFormatInfo === void 0 ? void 0 : oFormatInfo.path, bExternalFormat);
      }
      return getResourceModel(oTable).getText("M_TABLE_GROUP_HEADER_TITLE", [oFormatInfo === null || oFormatInfo === void 0 ? void 0 : oFormatInfo.label, sValue]);
    }
  });
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/TableDelegate", ["sap/base/Log","sap/base/util/deepClone","sap/base/util/deepEqual","sap/base/util/deepExtend","sap/fe/core/ActionRuntime","sap/fe/core/CommonUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/DeleteHelper","sap/fe/core/helpers/ExcelFormatHelper","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/helpers/SizeHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/type/EDM","sap/fe/core/type/TypeUtil","sap/fe/macros/CommonHelper","sap/fe/macros/DelegateUtil","sap/fe/macros/filterBar/FilterBarDelegate","sap/fe/macros/table/TableSizeHelper","sap/fe/macros/table/Utils","sap/ui/core/Fragment","sap/ui/mdc/odata/v4/TableDelegate","sap/ui/model/Filter","sap/ui/model/json/JSONModel","../TableHelper"],function(e,t,n,a,i,o,r,s,l,c,d,u,p,g,f,m,h,y,v,b,P,C,D,F,T,_){"use strict";var x=f.isTypeFilterable;var I=g.isMultipleNavigationProperty;var S=u.getResourceModel;var M=u.getLocalizedText;var A=r.getInvolvedDataModelObjects;const w="/semanticKeyHasDraftIndicator";return Object.assign({},D,{apiVersion:2,_computeVisualSettingsForFieldGroup:function(e,t,n){if(t.name.indexOf("DataFieldForAnnotation::FieldGroup::")===0){const i=e.getColumns().find(function(e){return e.getDataProperty()===t.name});const o=i?i.data("showDataFieldsLabel")==="true":false;const r=e.getModel().getMetaModel();const s=A(r.getContext(t.metadataPath));const l=s.convertedTypes;const c=s.targetObject;const d=c.Target.$target;const u=[];d.Data.forEach(function(e){let t;switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":t=b.getWidthForDataFieldForAnnotation(e,n,l,o);break;case"com.sap.vocabularies.UI.v1.DataField":t=b.getWidthForDataField(e,o,n,l);break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":t={labelWidth:0,propertyWidth:p.getButtonWidth(e.Label)};break;default:}if(t){u.push(t.labelWidth+t.propertyWidth)}});const g=u.reduce(function(e,t){return Math.max(e,t)},0);t.visualSettings=a(t.visualSettings,{widthCalculation:{verticalArrangement:true,minWidth:Math.ceil(g)}})}},_computeVisualSettingsForPropertyWithValueHelp:function(e,t){const n=e.getParent();if(!t.propertyInfos){const i=e.getModel().getMetaModel();if(t.metadataPath&&i){const e=i.getObject(`${t.metadataPath}@`);if(e&&e["@com.sap.vocabularies.Common.v1.ValueList"]){t.visualSettings=a(t.visualSettings||{},{widthCalculation:{gap:n.getProperty("readOnly")?0:4}})}}}},_computeVisualSettingsForPropertyWithUnit:function(e,t,n,i,o){const r=e?e.getParent():null;const s=i||o;if(s){t.visualSettings=a(t.visualSettings,{widthCalculation:{gap:Math.ceil(p.getButtonWidth(s))}})}if(n){t.visualSettings=a(t.visualSettings,{widthCalculation:{gap:r&&r.getReadOnly()?0:6}})}},_computeLabel:function(e,t){if(e.label){var n;const a=t[e.label];if((a===null||a===void 0?void 0:a.length)>1&&(n=e.path)!==null&&n!==void 0&&n.includes("/")&&e.additionalLabels){e.label=e.label+" ("+e.additionalLabels.join(" / ")+")"}delete e.additionalLabels}},_updatePropertyInfo:function(e,t){const n={};const i=e.getP13nMode();t.forEach(e=>{if(!e.propertyInfos&&e.label){if((i===null||i===void 0?void 0:i.indexOf("Sort"))>-1&&e.sortable||(i===null||i===void 0?void 0:i.indexOf("Filter"))>-1&&e.filterable||(i===null||i===void 0?void 0:i.indexOf("Group"))>-1&&e.groupable){n[e.label]=n[e.label]!==undefined?n[e.label].concat([e]):[e]}}});t.forEach(i=>{this._computeVisualSettingsForFieldGroup(e,i,t);this._computeVisualSettingsForPropertyWithValueHelp(e,i);i.typeConfig=a(i.typeConfig,{});this._computeLabel(i,n)});return t},getColumnsFor:function(e){return e.getParent().getTableDefinition().columns},_getAggregatedPropertyMap:function(e){return e.getParent().getTableDefinition().aggregates},fetchExportCapabilities:function(t){const n={XLSX:{}};let a;return y.fetchModel(t).then(function(e){a=e;return a.getMetaModel().getObject("/$EntityContainer@Org.OData.Capabilities.V1.SupportedFormats")}).then(function(e){const t=(e||[]).map(e=>e.toLowerCase());if(t.indexOf("application/pdf")>-1){return a.getMetaModel().getObject("/$EntityContainer@com.sap.vocabularies.PDF.v1.Features")}return undefined}).then(function(e){if(e){n["PDF"]=Object.assign({},e)}}).catch(function(t){e.error(`An error occurs while computing export capabilities: ${t}`)}).then(function(){return n})},_isFilterableNavigationProperty:function(e,t,n){const a=A(t.getContext(y.getCustomData(n,"metaPath"))),i=A(t.getContext(e.annotationPath)).navigationProperties,o=i.findIndex(e=>{var t;return((t=e.targetType)===null||t===void 0?void 0:t.name)===a.targetEntityType.name}),r=i.slice(o>0?o:0);return!e.relativePath.includes("/")||e.isPartOfLineItem===true&&!r.some(I)},_fetchPropertyInfo:function(e,t,n,a){var i,o,r;const s=t.annotationPath,l=e.getObject(s),c=e.createBindingContext(s),d=(i=t.typeConfig)!==null&&i!==void 0&&i.className&&x(t.typeConfig.className)?m.getTypeConfig(t.typeConfig.className,t.typeConfig.formatOptions,t.typeConfig.constraints):{},u=h.isPropertyFilterable(c,l),p=t.typeConfig&&t.typeConfig.className&&((o=t.typeConfig.className)===null||o===void 0?void 0:o.indexOf("Edm."))!==0,g=y.getCustomData(n,"enableAnalytics")==="true",f=g?this._getAggregatedPropertyMap(n):{},v=M(t.label??"",a??n);const b={name:t.name,metadataPath:s,groupLabel:t.groupLabel,group:t.group,label:v,tooltip:t.tooltip,typeConfig:d,visible:t.availability!=="Hidden"&&!p,exportSettings:this._setPropertyInfoExportSettings(t.exportSettings,t),unit:t.unit};if(t.visualSettings&&Object.keys(t.visualSettings).length>0){b.visualSettings=t.visualSettings}if(t.exportDataPointTargetValue){b.exportDataPointTargetValue=t.exportDataPointTargetValue}if((r=t.propertyInfos)!==null&&r!==void 0&&r.length){b.propertyInfos=t.propertyInfos;if(b.exportSettings){var P;b.exportSettings.wrap=(P=t.exportSettings)===null||P===void 0?void 0:P.wrap}}else{var C;b.path=t.relativePath;b.sortable=t.sortable;if(g){this._updateAnalyticalPropertyInfoAttributes(b,t)}b.filterable=!!u&&this._isFilterableNavigationProperty(t,e,n)&&(!g||!f[b.name]&&!((C=t.extension)!==null&&C!==void 0&&C.technicallyGroupable));b.key=t.isKey;b.groupable=t.isGroupable;if(t.textArrangement){const e=this.getColumnsFor(n).find(function(e){var n;return e.name===((n=t.textArrangement)===null||n===void 0?void 0:n.textProperty)});if(e){b.mode=t.textArrangement.mode;b.valueProperty=t.relativePath;b.descriptionProperty=e.relativePath}}b.text=t.textArrangement&&t.textArrangement.textProperty;b.caseSensitive=t.caseSensitive;if(t.additionalLabels){b.additionalLabels=t.additionalLabels.map(e=>M(e,a||n))}}this._computeVisualSettingsForPropertyWithUnit(n,b,t.unit,t.unitText,t.timezoneText);return b},_setPropertyInfoExportSettings:function(e,t){var n;const a=this._getExportFormat((n=t.typeConfig)===null||n===void 0?void 0:n.className);if(e){if(a&&!e.timezoneProperty){e.format=a}if(e.template){var i;e.template=(i=t.exportSettings)===null||i===void 0?void 0:i.template}}return e},_updateAnalyticalPropertyInfoAttributes(e,t){if(t.aggregatable){e.aggregatable=t.aggregatable}if(t.extension){e.extension=t.extension}},_fetchCustomPropertyInfo:function(e,t,n){let a="";if(e.header){if(e.header.startsWith("{metaModel>")){const n=e.header.substring(11,e.header.length-1);a=t.getModel().getMetaModel().getObject(n)}else{a=M(e.header,n||t)}}const i={name:e.name,groupLabel:undefined,group:undefined,label:a.toString(),type:"Edm.String",visible:e.availability!=="Hidden",exportSettings:e.exportSettings,visualSettings:e.visualSettings};if(e.propertyInfos&&e.propertyInfos.length){var o,r;i.propertyInfos=e.propertyInfos;i.exportSettings={wrap:(o=e.exportSettings)===null||o===void 0?void 0:o.wrap,template:(r=e.exportSettings)===null||r===void 0?void 0:r.template}}else{i.path=e.name;i.sortable=false;i.filterable=false}return i},_bColumnHasPropertyWithDraftIndicator:function(e){return!!(e.formatOptions&&e.formatOptions.hasDraftIndicator||e.formatOptions&&e.formatOptions.fieldGroupDraftIndicatorPropertyPath)},_updateDraftIndicatorModel:function(e,t){const n=e.getColumns();const a=e.getBindingContext("internal");const i=a&&a.getPath();if(n&&a){for(const e in n){if(this._bColumnHasPropertyWithDraftIndicator(t)&&t.name===n[e].getDataProperty()){if(a.getProperty(i+w)===undefined){a.setProperty(i+w,t.name);break}}}}},_fetchPropertiesForEntity:function(t,n,a,i){const r=d.getEntitySetPath(n);let s=[];const l=o.getFilterRestrictionsByPath(r,a);const c=l.NonFilterableProperties;return Promise.resolve(this.getColumnsFor(t)).then(e=>{if(e){let n;e.forEach(e=>{this._updateDraftIndicatorModel(t,e);switch(e.type){case"Annotation":n=this._fetchPropertyInfo(a,e,t,i);if(n&&c.indexOf(n.name)===-1){n.maxConditions=y.isMultiValue(n)?-1:1}break;case"Slot":case"Default":n=this._fetchCustomPropertyInfo(e,t,i);break;default:throw new Error(`unhandled switch case ${e.type}`)}s.push(n)})}}).then(()=>{s=this._updatePropertyInfo(t,s)}).catch(function(t){e.error(`An error occurs while updating fetched properties: ${t}`)}).then(function(){return s})},_getCachedOrFetchPropertiesForEntity:function(e,t,n,a){const i=y.getCachedProperties(e);if(i){return Promise.resolve(i)}return this._fetchPropertiesForEntity(e,t,n,a).then(function(t){y.setCachedProperties(e,t);return t})},_setTableNoDataText:function(e,t){let n="";const a=P.getAllFilterInfo(e),i=t.path.startsWith("/")?t.path.substr(1):t.path;const o=function(){if(e.data("hiddenFilters")||e.getQuickFilter()){return"M_TABLE_AND_CHART_NO_DATA_TEXT_MULTI_VIEW"}else{return"T_TABLE_AND_CHART_NO_DATA_TEXT_WITH_FILTER"}};const r=e.getFilter();if(r&&!/BasicSearch$/.test(r)){if(a.search||a.filters&&a.filters.length){n=o()}else{n="T_TABLE_AND_CHART_NO_DATA_TEXT"}}else if(a.search||a.filters&&a.filters.length){n=o()}else{n="M_TABLE_AND_CHART_NO_FILTERS_NO_DATA_TEXT"}e.setNoData(S(e).getText(n,undefined,i))},handleTableDataReceived:function(e,t){const n=e&&e.getRowBinding(),a=t&&t.getProperty("dataReceivedAttached");if(t&&!a){n.attachDataReceived(function(){t.setProperty("selectedContexts",[]);const n=e.getSelectedContexts();t.setProperty("selectedContexts",n);t.setProperty("numberOfSelectedContexts",n.length);const a=JSON.parse(h.parseCustomData(y.getCustomData(e,"operationAvailableMap")));i.setActionEnablement(t,a,n,"table");l.updateDeleteInfoForSelectedContexts(t,n);const o=e?e.getParent():null;if(o){o.setUpEmptyRows(e)}});t.setProperty("dataReceivedAttached",true)}},rebind:function(t,n){const a=t.getParent();const i=a===null||a===void 0?void 0:a.getProperty("bindingSuspended");a===null||a===void 0?void 0:a.setProperty("outDatedBinding",i);if(!i){P.clearSelection(t);D.rebind.apply(this,[t,n]);P.onTableBound(t);this._setTableNoDataText(t,n);return P.whenBound(t).then(this.handleTableDataReceived(t,t.getBindingContext("internal"))).catch(function(t){e.error("Error while waiting for the table to be bound",t)})}return Promise.resolve()},fetchProperties:function(e){return y.fetchModel(e).then(t=>this._getCachedOrFetchPropertiesForEntity(e,y.getCustomData(e,"entityType"),t.getMetaModel())).then(t=>{e.getBindingContext("internal").setProperty("tablePropertiesAvailable",true);return t})},preInit:function(e){return D.preInit.apply(this,[e]).then(function(){const t=e.getCreationRow();if(t){t.setBindingContext(null)}})},updateBindingInfo:function(e,t){var n;D.updateBindingInfo.apply(this,[e,t]);this._internalUpdateBindingInfo(e,t);this._setTableNoDataText(e,t);if(((n=e.getCreationRow())===null||n===void 0?void 0:n.getBindingContext())===null){_.enableFastCreationRow(e.getCreationRow(),t.path,e.getBindingContext(),e.getModel(),e.getModel("ui").getProperty("/isEditable"))}},_manageSemanticTargets:function(e){const t=e.getRowBinding();if(t){t.attachEventOnce("dataRequested",function(){setTimeout(function(){const t=o.getTargetView(e);if(t){P.getSemanticTargetsFromTable(t.getController(),e)}},0)})}},updateBinding:function(t,a,i){const r=t.getParent();const s=r===null||r===void 0?void 0:r.getProperty("bindingSuspended");if(!s){let r=false;const s=o.getTargetView(t);const l=t.getBindingContext("internal");const c="pendingManualBindingUpdate";const d=l.getProperty(c);const u=t.getRowBinding();if(u){const e=u.getFilters("Application");r=n(a.filters,e[0])&&a.path===u.getPath()&&u.getQueryOptionsFromParameters().$search===a.parameters.$search&&!d&&s&&s.getViewData().converterType==="ListReport"}D.updateBinding.apply(this,[t,a,i]);t.fireEvent("bindingUpdated");if(r&&t.getFilter()&&i){u.requestRefresh(u.getGroupId()).finally(function(){l.setProperty(c,false)}).catch(function(t){e.error("Error while refreshing the table",t)});l.setProperty(c,true)}this._manageSemanticTargets(t)}r===null||r===void 0?void 0:r.setProperty("outDatedBinding",s)},_computeRowBindingInfoFromTemplate:function(e){const n=t(y.getCustomData(e,"rowsBindingInfo"));if(n.parameters.$$getKeepAliveContext){const t=y.getCustomData(e,"targetCollectionPath");const a=e.getModel("internal");const i=a.getObject("/keptAliveLists")||{};if(!i[t]){i[t]=e.getId();a.setProperty("/keptAliveLists",i)}else if(i[t]!==e.getId()){delete n.parameters.$$getKeepAliveContext}}return n},_internalUpdateBindingInfo:function(e,t){const n=e.getBindingContext("internal");Object.assign(t,this._computeRowBindingInfoFromTemplate(e));if(e.getRowBinding()){t.suspended=false}if(n){n.setProperty("dataReceivedAttached",false)}let a;const i=P.getAllFilterInfo(e);if(i.filters.length>0){a=new F({filters:i.filters,and:true})}if(i.bindingPath){t.path=i.bindingPath}const o=e.getDataStateIndicator();if(o&&o.isFiltering()){if(t.filters.length>0){a=new F({filters:t.filters.concat(i.filters),and:true});this.updateBindingInfoWithSearchQuery(t,i,a)}}else{this.updateBindingInfoWithSearchQuery(t,i,a)}},updateBindingInfoWithSearchQuery:function(e,t,n){e.filters=n;if(t.search){e.parameters.$search=o.normalizeSearchTerm(t.search)}else{e.parameters.$search=undefined}},_templateCustomColumnFragment:function(e,t,n,a){const i=new T(e),o=new T({id:a}),r={bindingContexts:{this:o.createBindingContext("/"),column:i.createBindingContext("/")},models:{this:o,column:i}};return y.templateControlFragment("sap.fe.macros.table.CustomColumn",r,{view:t},n).then(function(e){i.destroy();return e})},_templateSlotColumnFragment:async function(t,n,a,i){const o=new T(t),r=new T({id:i}),s={bindingContexts:{this:r.createBindingContext("/"),column:o.createBindingContext("/")},models:{this:r,column:o}};const l=await y.templateControlFragment("sap.fe.macros.table.SlotColumn",s,{isXML:true});if(!l){return Promise.resolve(null)}const c=l.getElementsByTagName("slot")[0],d=l.getElementsByTagName("mdcTable:template")[0];d.removeChild(c);if(t.template){const e=(new DOMParser).parseFromString(t.template,"text/xml");d.appendChild(e.firstElementChild)}else{e.error(`Please provide content inside this Building Block Column: ${t.header}`);return Promise.resolve(null)}if(a.targets!=="jsControlTree"){return l}return C.load({type:"XML",definition:l})},_getExportFormat:function(e){switch(e){case"Edm.Date":return c.getExcelDatefromJSDate();case"Edm.DateTimeOffset":return c.getExcelDateTimefromJSDateTime();case"Edm.TimeOfDay":return c.getExcelTimefromJSTime();default:return undefined}},_getVHRelevantFields:function(e,t,n){let a=[],i=e.getObject(t);if(i.$kind&&i.$kind==="Property"){i=e.getObject(`${t}@com.sap.vocabularies.UI.v1.DataFieldDefault`);t=`${t}@com.sap.vocabularies.UI.v1.DataFieldDefault`}switch(i.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if(e.getObject(`${t}/Target/$AnnotationPath`).includes("com.sap.vocabularies.UI.v1.FieldGroup")){e.getObject(`${t}/Target/$AnnotationPath/Data`).forEach((n,i)=>{a=a.concat(this._getVHRelevantFields(e,`${t}/Target/$AnnotationPath/Data/${i}`))})}break;case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":a.push(e.getObject(`${t}/Value/$Path`));break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":break;default:if(t.indexOf(n)===0){a.push(t.substring(n.length+1));break}a.push(h.getNavigationPath(t,true));break}return a},_setDraftIndicatorOnVisibleColumn:function(e,t,n){const a=e.getBindingContext("internal");if(!a){return}const i=a.getPath();const o=t.filter(e=>this._bColumnHasPropertyWithDraftIndicator(e));const r=e.getColumns();let s,l,c,d;for(const e in r){l=r[e].getDataProperty();for(const e in o){d=o[e].name;if(l===d){c=true;break}if(n&&n.name===d){s=n.name}}if(c){a.setProperty(i+w,l);break}}if(!c&&s){a.setProperty(i+w,s)}},removeItem:function(e,t,n){let a=true;if(!t){return Promise.resolve(a)}const i=n.modifier;const o=i.getProperty(t,"dataProperty");if(o&&o.indexOf&&o.indexOf("InlineXML")!==-1){i.insertAggregation(e,"dependents",t);a=false}if(e.isA&&i.targets==="jsControlTree"){this._setDraftIndicatorStatus(i,e,this.getColumnsFor(e))}return Promise.resolve(a)},_getMetaModel:function(e){return e.appComponent&&e.appComponent.getModel().getMetaModel()},_setDraftIndicatorStatus:function(e,t,n,a){if(e.targets==="jsControlTree"){this._setDraftIndicatorOnVisibleColumn(t,n,a)}},_getGroupId:function(e){return e||undefined},_getDependent:function(e,t,n){if(t===n){return e}return undefined},_fnTemplateValueHelp:function(e,t,n){if(t&&!n){return e("sap.fe.macros.table.ValueHelp")}return Promise.resolve()},_getDisplayMode:function(e){let t;if(e!==undefined){e=typeof e==="boolean"?e:e==="true";t=e?"Display":"Editable";return{displaymode:e,columnEditMode:t}}return{displaymode:undefined,columnEditMode:undefined}},_insertAggregation:function(e,t,n){if(e){return t.insertAggregation(n,"dependents",e,0)}return undefined},addItem:async function(t,n,a){const i=this._getMetaModel(a),r=a.modifier,s=r.getId(t),l=t.isA?this.getColumnsFor(t):null;if(!l){return Promise.resolve(null)}const c=l.find(function(e){return e.name===n});if(!c){e.error(`${n} not found while adding column`);return Promise.resolve(null)}this._setDraftIndicatorStatus(r,t,l,c);if(c.type==="Default"){return this._templateCustomColumnFragment(c,a.view,r,s)}if(c.type==="Slot"){return this._templateSlotColumnFragment(c,a.view,r,s)}if(!i){return Promise.resolve(null)}const d=await y.getCustomData(t,"metaPath",r);const u=await y.getCustomData(t,"entityType",r);const p=await y.getCustomData(t,"requestGroupId",r);const g=this._getGroupId(p);const f=i.createBindingContext(d);const m=await this._getCachedOrFetchPropertiesForEntity(t,u,i,a.appComponent);const h=m.find(function(e){return e.name===n});const v=i.createBindingContext(h.metadataPath);const b=this._getVHRelevantFields(i,h.metadataPath,d);const P={sBindingPath:d,sValueHelpType:"TableValueHelp",oControl:t,oMetaModel:i,oModifier:r,oPropertyInfo:h};const C=async n=>{const a=new T({id:s,requestGroupId:g}),o={bindingContexts:{this:a.createBindingContext("/"),dataField:v,contextPath:f},models:{this:a,dataField:i,metaModel:i,contextPath:i}};try{const e=await y.templateControlFragment(n,o,{},r);return await this._insertAggregation(e,r,t)}catch(t){e.error(`ValueHelp not loaded : ${t.message}`);return null}finally{a.destroy()}};const D=(e,o)=>{const l="sap.fe.macros.table.Column";let u;let p;let g;let m;return Promise.all([y.getCustomData(t,"displayModePropertyBinding",r),y.getCustomData(t,"tableType",r),y.getCustomData(t,"onChange",r),y.getCustomData(t,"creationMode",r)]).then(e=>{u=e[0];p=e[1];g=e[2];m=e[3];const h=this._getDisplayMode(u);u=h.displaymode;const b=h.columnEditMode;const P=new T({enableAutoColumnWidth:t.getParent().enableAutoColumnWidth,isOptimizedForSmallDevice:t.getParent().isOptimizedForSmallDevice,readOnly:u,columnEditMode:b,tableType:p,onChange:g,id:s,navigationPropertyPath:n,columnInfo:c,collection:{sPath:d,oModel:i},creationMode:m}),C={bindingContexts:{entitySet:f,collection:f,dataField:v,this:P.createBindingContext("/"),column:P.createBindingContext("/columnInfo")},models:{this:P,entitySet:i,collection:i,dataField:i,metaModel:i,column:P},appComponent:a.appComponent};return y.templateControlFragment(l,C,{view:o},r).finally(function(){P.destroy()})})};await Promise.all(b.map(async e=>{const t=Object.assign({},P,{sPropertyName:e});const n=await Promise.all([y.isValueHelpRequired(t),y.doesValueHelpExist(t)]);const a=n[0],i=n[1];return this._fnTemplateValueHelp(C,a,i)}));const F=a.view||o.getTargetView(t)||(a.appComponent?o.getCurrentPageView(a.appComponent):undefined);return D(h,F)},getFilterDelegate:function(){return Object.assign({apiVersion:2},v,{addItem:function(e,t){if(t.indexOf("Property::")===0){t=t.replace("Property::","")}return v.addItem(e,t)}})},getTypeUtil:function(){return m},formatGroupHeader(e,t,n){var a,i;const o=y.getCachedProperties(e),r=o&&o.filter(e=>e.name===n)[0],l=(r===null||r===void 0?void 0:(a=r.typeConfig)===null||a===void 0?void 0:a.baseType)==="DateTime"||(r===null||r===void 0?void 0:(i=r.typeConfig)===null||i===void 0?void 0:i.baseType)==="Date";let c;if(r&&r.mode){switch(r.mode){case"Description":c=t.getProperty(r.descriptionProperty,l);break;case"DescriptionValue":c=s.formatWithBrackets(t.getProperty(r.descriptionProperty,l),t.getProperty(r.valueProperty,l));break;case"ValueDescription":c=s.formatWithBrackets(t.getProperty(r.valueProperty,l),t.getProperty(r.descriptionProperty,l));break;default:break}}else{c=t.getProperty(r===null||r===void 0?void 0:r.path,l)}return S(e).getText("M_TABLE_GROUP_HEADER_TITLE",[r===null||r===void 0?void 0:r.label,c])}})},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/TreeTableDelegate-dbg", ["sap/fe/core/CommonUtils", "sap/fe/macros/table/delegates/TableDelegate"], function (CommonUtils, TableDelegate) {
  "use strict";

  /**
   * Helper class for sap.ui.mdc.Table.
   * <h3><b>Note:</b></h3>
   * This class is experimental and not intended for productive usage, since the API/behavior has not been finalized.
   *
   * @author SAP SE
   * @private
   * @experimental
   * @since 1.69.0
   * @alias sap.fe.macros.TableDelegate
   */
  const TreeTableDelegate = Object.assign({}, TableDelegate, {
    apiVersion: 2,
    _internalUpdateBindingInfo: function (table, bindingInfo) {
      var _bindingInfo$paramete;
      TableDelegate._internalUpdateBindingInfo.apply(this, [table, bindingInfo]);
      const payload = table.getPayload();
      bindingInfo.parameters.$$aggregation = {
        ...bindingInfo.parameters.$$aggregation,
        ...{
          hierarchyQualifier: payload === null || payload === void 0 ? void 0 : payload.hierarchyQualifier
        },
        // Setting the expandTo parameter to a high value forces the treeTable to expand all nodes when the search is applied
        ...{
          expandTo: (_bindingInfo$paramete = bindingInfo.parameters.$$aggregation) !== null && _bindingInfo$paramete !== void 0 && _bindingInfo$paramete.search ? 100 : payload === null || payload === void 0 ? void 0 : payload.initialExpansionLevel
        }
      };
    },
    updateBindingInfoWithSearchQuery: function (bindingInfo, filterInfo, filter) {
      bindingInfo.filters = filter;
      if (filterInfo.search) {
        bindingInfo.parameters.$$aggregation = {
          ...bindingInfo.parameters.$$aggregation,
          ...{
            search: CommonUtils.normalizeSearchTerm(filterInfo.search)
          }
        };
      } else {
        var _bindingInfo$paramete2, _bindingInfo$paramete3;
        (_bindingInfo$paramete2 = bindingInfo.parameters) === null || _bindingInfo$paramete2 === void 0 ? true : (_bindingInfo$paramete3 = _bindingInfo$paramete2.$$aggregation) === null || _bindingInfo$paramete3 === void 0 ? true : delete _bindingInfo$paramete3.search;
      }
    }
  });
  return TreeTableDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/table/delegates/TreeTableDelegate", ["sap/fe/core/CommonUtils","sap/fe/macros/table/delegates/TableDelegate"],function(e,a){"use strict";const r=Object.assign({},a,{apiVersion:2,_internalUpdateBindingInfo:function(e,r){var i;a._internalUpdateBindingInfo.apply(this,[e,r]);const n=e.getPayload();r.parameters.$$aggregation={...r.parameters.$$aggregation,...{hierarchyQualifier:n===null||n===void 0?void 0:n.hierarchyQualifier},...{expandTo:(i=r.parameters.$$aggregation)!==null&&i!==void 0&&i.search?100:n===null||n===void 0?void 0:n.initialExpansionLevel}}},updateBindingInfoWithSearchQuery:function(a,r,i){a.filters=i;if(r.search){a.parameters.$$aggregation={...a.parameters.$$aggregation,...{search:e.normalizeSearchTerm(r.search)}}}else{var n,t;(n=a.parameters)===null||n===void 0?true:(t=n.$$aggregation)===null||t===void 0?true:delete t.search}}});return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelp.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards"], function (BuildingBlockBase, BuildingBlockSupport, MetaModelConverter, ModelHelper, TypeGuards) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;
  var _exports = {};
  var isEntitySet = TypeGuards.isEntitySet;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ValueHelpBlock = (
  /**
   * Building block for creating a ValueHelp based on the provided OData V4 metadata.
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:ValueHelp
   *   idPrefix="SomePrefix"
   *   property="{someProperty&gt;}"
   *   conditionModel="$filters"
   * /&gt;
   * </pre>
   *
   * @private
   */
  _dec = defineBuildingBlock({
    name: "ValueHelp",
    namespace: "sap.fe.macros",
    fragment: "sap.fe.macros.internal.valuehelp.ValueHelp"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["Property"]
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec5 = blockAttribute({
    type: "string"
  }), _dec6 = blockAttribute({
    type: "boolean"
  }), _dec7 = blockAttribute({
    type: "boolean"
  }), _dec8 = blockAttribute({
    type: "boolean"
  }), _dec9 = blockAttribute({
    type: "string"
  }), _dec10 = blockAttribute({
    type: "boolean"
  }), _dec11 = blockAttribute({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(ValueHelpBlock, _BuildingBlockBase);
    /**
     * A prefix that is added to the generated ID of the value help.
     */

    /**
     * Defines the metadata path to the property.
     */

    /**
     * Indicator whether the value help is for a filter field.
     */

    /**
     * Indicates that this is a value help of a filter field. Necessary to decide if a
     * validation should occur on the back end or already on the client.
     */

    /**
     * Specifies the Sematic Date Range option for the filter field.
     */

    /**
     * Specifies whether the ValueHelp can be used with a MultiValueField
     */

    function ValueHelpBlock(props, _controlConfiguration, settings) {
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "idPrefix", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "property", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "conditionModel", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterFieldValueHelp", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useSemanticDateRange", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useMultiValueField", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigationPrefix", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "requiresValidation", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_flexId", _descriptor10, _assertThisInitialized(_this));
      _this.requestGroupId = "$auto.Workers";
      _this.collaborationEnabled = false;
      const contextObject = getInvolvedDataModelObjects(_this.contextPath);
      const entitySetOrSingleton = contextObject.targetEntitySet;
      if (isEntitySet(entitySetOrSingleton)) {
        _this.collaborationEnabled = ModelHelper.isCollaborationDraftSupported(settings.models.metaModel);
      }
      return _this;
    }
    _exports = ValueHelpBlock;
    return ValueHelpBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "idPrefix", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "ValueHelp";
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "property", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "conditionModel", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "filterFieldValueHelp", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "useSemanticDateRange", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "useMultiValueField", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "navigationPrefix", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "requiresValidation", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "_flexId", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ValueHelpBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelp.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/TypeGuards"],function(e,t,r,i,n){"use strict";var a,l,o,u,c,p,f,s,b,d,y,g,m,v,z,w,h,P,x,B,M,O,V;var k={};var j=n.isEntitySet;var E=r.getInvolvedDataModelObjects;var H=t.defineBuildingBlock;var S=t.blockAttribute;function _(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function q(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function D(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;C(e,t)}function C(e,t){C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return C(e,t)}function F(e,t,r,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function I(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let R=(a=H({name:"ValueHelp",namespace:"sap.fe.macros",fragment:"sap.fe.macros.internal.valuehelp.ValueHelp"}),l=S({type:"string"}),o=S({type:"sap.ui.model.Context",required:true,expectedTypes:["Property"]}),u=S({type:"sap.ui.model.Context",required:true}),c=S({type:"string"}),p=S({type:"boolean"}),f=S({type:"boolean"}),s=S({type:"boolean"}),b=S({type:"string"}),d=S({type:"boolean"}),y=S({type:"string"}),a(g=(m=function(e){D(t,e);function t(t,r,n){var a;a=e.call(this,t)||this;_(a,"idPrefix",v,q(a));_(a,"property",z,q(a));_(a,"contextPath",w,q(a));_(a,"conditionModel",h,q(a));_(a,"filterFieldValueHelp",P,q(a));_(a,"useSemanticDateRange",x,q(a));_(a,"useMultiValueField",B,q(a));_(a,"navigationPrefix",M,q(a));_(a,"requiresValidation",O,q(a));_(a,"_flexId",V,q(a));a.requestGroupId="$auto.Workers";a.collaborationEnabled=false;const l=E(a.contextPath);const o=l.targetEntitySet;if(j(o)){a.collaborationEnabled=i.isCollaborationDraftSupported(n.models.metaModel)}return a}k=t;return t}(e),v=F(m.prototype,"idPrefix",[l],{configurable:true,enumerable:true,writable:true,initializer:function(){return"ValueHelp"}}),z=F(m.prototype,"property",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),w=F(m.prototype,"contextPath",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),h=F(m.prototype,"conditionModel",[c],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),P=F(m.prototype,"filterFieldValueHelp",[p],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),x=F(m.prototype,"useSemanticDateRange",[f],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),B=F(m.prototype,"useMultiValueField",[s],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),M=F(m.prototype,"navigationPrefix",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),O=F(m.prototype,"requiresValidation",[d],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),V=F(m.prototype,"_flexId",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),m))||g);k=R;return k},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelpDelegate-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/type/TypeUtil", "sap/fe/macros/internal/valuehelp/ValueListHelper", "sap/m/inputUtils/highlightDOMElements", "sap/ui/mdc/condition/Condition", "sap/ui/mdc/enum/ConditionValidated", "sap/ui/mdc/p13n/StateUtil", "sap/ui/mdc/ValueHelpDelegate", "sap/ui/model/FilterType", "../internal/valuehelp/AdditionalValueHelper"], function (Log, CommonUtils, MetaModelConverter, TypeGuards, TypeUtil, ValueListHelper, highlightDOMElements, Condition, ConditionValidated, StateUtil, ValueHelpDelegate, FilterType, AdditionalValueHelper) {
  "use strict";

  var additionalValueHelper = AdditionalValueHelper.additionalValueHelper;
  var AdditionalValueGroupKey = AdditionalValueHelper.AdditionalValueGroupKey;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var convertTypes = MetaModelConverter.convertTypes;
  const FeCoreControlsFilterBar = "sap.fe.core.controls.FilterBar";
  const MdcFilterbarFilterBarBase = "sap.ui.mdc.filterbar.FilterBarBase";
  return Object.assign({}, ValueHelpDelegate, {
    apiVersion: 2,
    /**
     * Checks if a <code>ListBinding</code> supports $Search.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content Content element
     * @param _listBinding
     * @returns True if $search is supported
     */
    isSearchSupported: function (valueHelp, content, _listBinding) {
      return content.getFilterFields() === "$search";
    },
    /**
     * Adjustable filtering for list-based contents.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content ValueHelp content requesting conditions configuration
     * @param bindingInfo The binding info object to be used to bind the list to the model
     */
    updateBindingInfo: function (valueHelp, content, bindingInfo) {
      ValueHelpDelegate.updateBindingInfo(valueHelp, content, bindingInfo);
      if (content.getFilterFields() === "$search") {
        const search = content.getFilterValue();
        const normalizedSearch = CommonUtils.normalizeSearchTerm(search); // adjustSearch

        if (bindingInfo.parameters) {
          bindingInfo.parameters.$search = normalizedSearch || undefined;
        }
      }
    },
    /**
     * Checks if field is recommendation relevant and calls either _updateBinding or _updateBindingForRecommendations.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param listBinding List binding
     * @param bindingInfo The binding info object to be used to bind the list to the model
     * @param content Filterable List Content
     */
    updateBinding: async function (valueHelp, listBinding, bindingInfo, content) {
      //We fetch the valuelist property from the payload to make sure we pass the right property while making a call on valuelist entity set
      const payload = valueHelp.getPayload();
      const valueListProperty = this._getValueListPropertyFromPayloadQualifier(payload);
      if (content.isTypeahead()) {
        const bindingContext = content.getBindingContext();
        const additionalValues = [];
        //get the recommendation data from the internal model
        const inputValues = content.getModel("internal").getProperty("/recommendationsData") || {};
        //Fetch the relevant recommendations based on the inputvalues and bindingcontext
        const values = additionalValueHelper.getRelevantRecommendations(inputValues, bindingContext, payload.propertyPath) || [];
        //if there are relevant recommendations then create additionalvalue structure and call _updateBindingForRecommendations
        if ((values === null || values === void 0 ? void 0 : values.length) > 0) {
          additionalValues.push({
            propertyPath: valueListProperty,
            values,
            groupKey: AdditionalValueGroupKey.recommendation
          });
          this._updateBindingForRecommendations(payload, listBinding, bindingInfo, additionalValues);
        } else {
          //call _updateBinding if there are no relevant recommendations
          this._updateBinding(listBinding, bindingInfo);
        }
      } else {
        //call _updateBinding if there are no relevant recommendations
        this._updateBinding(listBinding, bindingInfo);
      }
    },
    /**
     * Executes a filter in a <code>ListBinding</code>.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param listBinding List binding
     * @param _filter Filter
     * @param requestedItems Number of requested items
     * @returns Promise that is resolved if search is executed
     */
    executeFilter: async function (valueHelp, listBinding, _filter, requestedItems) {
      listBinding.getContexts(0, requestedItems);
      await this.checkListBindingPending(valueHelp, listBinding, requestedItems);
      return listBinding;
    },
    /**
     * Checks if the <code>ListBinding</code> is waiting for an update.
     * As long as the context has not been set for <code>ListBinding</code>,
     * <code>ValueHelp</code> needs to wait.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param listBinding ListBinding to check
     * @param requestedItems Number of requested items
     * @returns Promise that is resolved once ListBinding has been updated
     */
    checkListBindingPending: async function (valueHelp, listBinding, requestedItems) {
      const payload = valueHelp.getPayload();
      if (payload.updateBindingDonePromise) {
        return payload.updateBindingDonePromise;
      } else {
        if (!listBinding || listBinding.isSuspended()) {
          return false;
        }
        const contexts = await listBinding.requestContexts(0, requestedItems);
        return contexts.length === 0;
      }
    },
    getTypeUtil: function (valueHelp) {
      return TypeUtil;
    },
    /**
     * Requests the content of the value help.
     *
     * This function is called when the value help is opened or a key or description is requested.
     *
     * So, depending on the value help content used, all content controls and data need to be assigned.
     * Once they are assigned and the data is set, the returned <code>Promise</code> needs to be resolved.
     * Only then does the value help continue opening or reading data.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param container Container instance
     * @param contentId Id of the content shown after this call to retrieveContent
     * @returns Promise that is resolved if all content is available
     */
    retrieveContent: function (valueHelp, container, contentId) {
      const payload = valueHelp.getPayload();
      return ValueListHelper.showValueList(payload, container, contentId);
    },
    _getConditionPayloadList: function (condition) {
      const conditionPayloadMap = condition.payload || {},
        valueHelpQualifiers = Object.keys(conditionPayloadMap),
        conditionPayloadList = valueHelpQualifiers.length ? conditionPayloadMap[valueHelpQualifiers[0]] : [];
      return conditionPayloadList;
    },
    /**
     * Returns ValueListProperty from Payload based on data from payload keys and parameters.
     *
     * @param payload Payload for delegate
     * @returns ValueListProperty
     */
    _getValueListPropertyFromPayloadQualifier: function (payload) {
      const params = payload.qualifiers[payload.valueHelpQualifier].vhParameters || [];
      const keys = payload.qualifiers[payload.valueHelpQualifier].vhKeys || [];
      const propertyKeyPath = payload.valueHelpKeyPath;
      let filteredKeys = [...keys];
      const helpPaths = [];
      if (params.length > 0) {
        //create helpPaths array which will only consist of params helppath
        params.forEach(function (param) {
          helpPaths.push(param.helpPath);
        });
        //filter the keys based on helpPaths. If key is not present in helpPath then it is valuelistproperty
        filteredKeys = keys.filter(key => {
          return !helpPaths.includes(key);
        });
      }

      // from filteredKeys return the key that matches the property name
      return propertyKeyPath && filteredKeys.includes(propertyKeyPath) ? propertyKeyPath : "";
    },
    _onConditionPropagationToFilterBar: async function (filterBarVH, conditions, outParameters, filterBar) {
      try {
        const state = await StateUtil.retrieveExternalState(filterBar);
        const filterItemsVH = filterBarVH.getFilterItems();
        for (const condition of conditions) {
          const conditionPayloadList = this._getConditionPayloadList(condition);
          for (const outParameter of outParameters) {
            const filterTarget = outParameter.source.split("/").pop() || "";
            // propagate OUT parameter only if the filter field is visible in the LR filterbar
            if (
            // LR FilterBar or LR AdaptFilter
            filterItemsVH.find(item => item.getId().split("::").pop() === filterTarget)) {
              for (const conditionPayload of conditionPayloadList) {
                const newCondition = Condition.createCondition("EQ", [conditionPayload[outParameter.helpPath]], null, null, ConditionValidated.Validated);
                state.filter[filterTarget] ||= [];
                state.filter[filterTarget].push(newCondition);
              }
            }
          }
        }
        StateUtil.applyExternalState(filterBar, state);
      } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
        Log.error(`ValueHelpDelegate: ${message}`);
      }
    },
    _onConditionPropagationToBindingContext: function (conditions, outParameters, context) {
      const metaModel = context.getModel().getMetaModel();
      for (const condition of conditions) {
        const conditionPayloadList = this._getConditionPayloadList(condition),
          outValues = conditionPayloadList.length === 1 ? conditionPayloadList[0] : undefined;
        if (conditionPayloadList.length > 1) {
          Log.warning("ValueHelpDelegate: ParameterOut in multi-value-field not supported");
        }
        if (outValues) {
          this._onConditionPropagationUpdateProperty(metaModel, outValues, outParameters, context);
        }
      }
    },
    _onConditionPropagationUpdateProperty: function (metaModel, outValues, outParameters, context) {
      const convertedMetadata = convertTypes(metaModel);
      const rootPath = metaModel.getMetaContext(context.getPath()).getPath();
      const contextCanRequestSideEffects = context.isTransient() !== true && context.isInactive() !== true;
      for (const outParameter of outParameters) {
        /* Updated property via out-parameter if value changed */
        if (context.getProperty(outParameter.source) !== outValues[outParameter.helpPath]) {
          this._updatePropertyViaOutParameter(convertedMetadata, rootPath, outValues, outParameter, context, contextCanRequestSideEffects);
        }
      }
    },
    _updatePropertyViaOutParameter: function (convertedMetadata, rootPath, outValues, outParameter, context, contextCanRequestSideEffects) {
      var _targetProperty$annot, _targetProperty$annot2, _targetProperty$annot3, _targetProperty$annot4, _targetProperty$annot5, _targetProperty$annot6;
      /* Updated property via out-parameter if value changed */
      const propertyPath = `${rootPath}/${outParameter.source}`;
      const targetProperty = convertedMetadata.resolvePath(propertyPath).target;
      const fieldControl = targetProperty === null || targetProperty === void 0 ? void 0 : (_targetProperty$annot = targetProperty.annotations) === null || _targetProperty$annot === void 0 ? void 0 : (_targetProperty$annot2 = _targetProperty$annot.Common) === null || _targetProperty$annot2 === void 0 ? void 0 : _targetProperty$annot2.FieldControl;
      const dynamicReadOnly = isPathAnnotationExpression(fieldControl) ? context.getProperty(fieldControl.path) === 1 : false;
      if (dynamicReadOnly && contextCanRequestSideEffects) {
        /* Non-Transient and active context */
        const lastIndex = outParameter.source.lastIndexOf("/");
        const sideEffectPath = lastIndex > 0 ? outParameter.source.substring(0, lastIndex) : outParameter.source;
        /* We send [<propertyName>] in case of a property path without any navigation involved */
        /* In case of a path involving navigations, we send [<navigationPath>] ending with a navigation property and not with a property */
        context.requestSideEffects([sideEffectPath]);
      } else {
        /* The fast creation row (transient context) can´t have instant specific (dynamic) read-only fields, therefore we don´t need to handle/consider this case specifically */
        /* Additional infos: */
        /* The fast creation row is only used by SD */
        /* The group ID (third argument of setProperty described api documentation of the Context) is used for the PATCH request, if not specified, the update group ID for the context's binding is used, 'null' to prevent the PATCH request */
        /* The Transient context cannot request SideEffects and  cannot patch via group 'null' */
        context.setProperty(outParameter.source, outValues[outParameter.helpPath]);
      }
      /* If the key gets updated via out-parameter, then the description needs also retrieved with requestSideEffects */
      const textPath = isPathAnnotationExpression(targetProperty === null || targetProperty === void 0 ? void 0 : (_targetProperty$annot3 = targetProperty.annotations) === null || _targetProperty$annot3 === void 0 ? void 0 : (_targetProperty$annot4 = _targetProperty$annot3.Common) === null || _targetProperty$annot4 === void 0 ? void 0 : _targetProperty$annot4.Text) ? targetProperty === null || targetProperty === void 0 ? void 0 : (_targetProperty$annot5 = targetProperty.annotations) === null || _targetProperty$annot5 === void 0 ? void 0 : (_targetProperty$annot6 = _targetProperty$annot5.Common) === null || _targetProperty$annot6 === void 0 ? void 0 : _targetProperty$annot6.Text.path : undefined;
      if (textPath !== undefined && contextCanRequestSideEffects) {
        const lastIndex = textPath.lastIndexOf("/");
        const sideEffectPath = lastIndex > 0 ? textPath.substring(0, lastIndex) : textPath;
        /* The sideEffectPath can be [<propertyName>] or [<navigationPath>] */
        context.requestSideEffects([sideEffectPath]);
      }
    },
    getFilterConditions: function (valueHelp, content, _config) {
      if (this.getInitialFilterConditions) {
        return this.getInitialFilterConditions(valueHelp, content, _config && _config.control || content && content.getControl());
      }
      return {};
    },
    /**
     * Callback invoked every time a {@link sap.ui.mdc.ValueHelp ValueHelp} fires a select event or the value of the corresponding field changes
     * This callback may be used to update external fields.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param valueHelp ValueHelp control instance receiving the <code>controlChange</code>
     * @param reason Reason why the method was invoked
     * @param _config Current configuration provided by the calling control
     * @since 1.101.0
     */
    onConditionPropagation: async function (valueHelp, reason, _config) {
      if (reason !== "ControlChange") {
        // handle only ControlChange reason
        return;
      }
      const payload = valueHelp.getPayload();
      const qualifier = payload.qualifiers[payload.valueHelpQualifier];
      const outParameters = (qualifier === null || qualifier === void 0 ? void 0 : qualifier.vhParameters) !== undefined ? ValueListHelper.getOutParameters(qualifier.vhParameters) : [],
        field = valueHelp.getControl(),
        fieldParent = field.getParent();
      let conditions = field.getConditions();
      conditions = conditions.filter(function (condition) {
        const conditionPayloadMap = condition.payload || {};
        return conditionPayloadMap[payload.valueHelpQualifier];
      });
      if (fieldParent.isA(MdcFilterbarFilterBarBase)) {
        // field inside a FilterBar or AdaptationFilterBar (Settings Dialog)?
        const filterBarVH = valueHelp.getParent(); // Control e.g. FormContainer
        if (filterBarVH.isA(FeCoreControlsFilterBar)) {
          // only for LR FilterBar
          await this._onConditionPropagationToFilterBar(filterBarVH, conditions, outParameters, fieldParent);
        }
        // LR Settings Dialog or OP Settings Dialog shall not propagate value to the dialog filterfields or context
      } else {
        // Object Page
        const context = valueHelp.getBindingContext();
        if (context) {
          this._onConditionPropagationToBindingContext(conditions, outParameters, context);
        }
      }
    },
    _createInitialFilterCondition: function (value, initialValueFilterEmpty) {
      let condition;
      if (value === undefined || value === null) {
        Log.error("ValueHelpDelegate: value of the property could not be requested");
      } else if (value === "") {
        if (initialValueFilterEmpty) {
          condition = Condition.createCondition("Empty", [], null, null, ConditionValidated.Validated);
        }
      } else {
        condition = Condition.createCondition("EQ", [value], null, null, ConditionValidated.Validated);
      }
      return condition;
    },
    _getInitialFilterConditionsFromBinding: async function (inConditions, control, inParameters) {
      const propertiesToRequest = inParameters.map(inParameter => inParameter.source);
      const bindingContext = control.getBindingContext();
      if (!bindingContext) {
        Log.error("ValueHelpDelegate: No BindingContext");
        return inConditions;
      }

      // According to odata v4 api documentation for requestProperty: Property values that are not cached yet are requested from the back end
      const values = await bindingContext.requestProperty(propertiesToRequest);
      for (let i = 0; i < inParameters.length; i++) {
        const inParameter = inParameters[i];
        const condition = this._createInitialFilterCondition(values[i], inParameter.initialValueFilterEmpty);
        if (condition) {
          inConditions[inParameter.helpPath] = [condition];
        }
      }
      return inConditions;
    },
    _getInitialFilterConditionsFromFilterBar: async function (inConditions, control, inParameters) {
      const filterBar = control.getParent();
      const state = await StateUtil.retrieveExternalState(filterBar);
      for (const inParameter of inParameters) {
        const conditions = this._getConditionsFromInParameter(inParameter, state);
        if (conditions) {
          inConditions[inParameter.helpPath] = conditions;
        }
      }
      return inConditions;
    },
    /**
     * Returns the filter conditions.
     * Regarding a navigation path in the InOut parameters and disregarding prefixes in the navigation path like e.g. '$filters>/conditions/' or 'owner'.
     *
     * @param inParameter InParmeter of the filter field value help
     * @param state The external filter state
     * @returns The filter conditions
     * @since 1.114.0
     */
    _getConditionsFromInParameter: function (inParameter, state) {
      const sourceField = inParameter.source;
      const key = Object.keys(state.filter).find(key => ("/" + sourceField).endsWith("/" + key)); //additional '/' to handle heading characters in the source name if there is no path
      return key && state.filter[key];
    },
    _partitionInParameters: function (inParameters) {
      const inParameterMap = {
        constant: [],
        binding: [],
        filter: []
      };
      for (const inParameter of inParameters) {
        if (inParameter.constantValue !== undefined) {
          inParameterMap.constant.push(inParameter);
        } else if (inParameter.source.indexOf("$filter") === 0) {
          inParameterMap.filter.push(inParameter);
        } else {
          inParameterMap.binding.push(inParameter);
        }
      }
      return inParameterMap;
    },
    _tableAfterRenderDelegate: {
      onAfterRendering: function (event) {
        const table = event.srcControl,
          // m.Table
          tableCellsDomRefs = table.$().find("tbody .sapMText"),
          mdcMTable = table.getParent();
        highlightDOMElements(tableCellsDomRefs, mdcMTable.getFilterValue(), true);
      }
    },
    /**
     * Provides an initial condition configuration everytime a value help content is shown.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content ValueHelp content requesting conditions configuration
     * @param control Instance of the calling control
     * @returns Returns a map of conditions suitable for a sap.ui.mdc.FilterBar control
     * @since 1.101.0
     */
    getInitialFilterConditions: async function (valueHelp, content, control) {
      // highlight text in ValueHelp popover
      if (content !== null && content !== void 0 && content.isA("sap.ui.mdc.valuehelp.content.MTable")) {
        const popoverTable = content.getTable();
        popoverTable === null || popoverTable === void 0 ? void 0 : popoverTable.removeEventDelegate(this._tableAfterRenderDelegate);
        popoverTable === null || popoverTable === void 0 ? void 0 : popoverTable.addEventDelegate(this._tableAfterRenderDelegate, this);
      }
      const inConditions = {};
      if (!control) {
        Log.error("ValueHelpDelegate: Control undefined");
        return inConditions;
      }
      const payload = valueHelp.getPayload();
      const qualifier = payload.qualifiers[payload.valueHelpQualifier];
      const inParameters = (qualifier === null || qualifier === void 0 ? void 0 : qualifier.vhParameters) !== undefined ? ValueListHelper.getInParameters(qualifier.vhParameters) : [];
      const inParameterMap = this._partitionInParameters(inParameters);
      const isObjectPage = control.getBindingContext();
      for (const inParameter of inParameterMap.constant) {
        const condition = this._createInitialFilterCondition(inParameter.constantValue, isObjectPage ? inParameter.initialValueFilterEmpty : false // no filter with "empty" on ListReport
        );

        if (condition) {
          inConditions[inParameter.helpPath] = [condition];
        }
      }
      if (inParameterMap.binding.length) {
        await this._getInitialFilterConditionsFromBinding(inConditions, control, inParameterMap.binding);
      }
      if (inParameterMap.filter.length) {
        await this._getInitialFilterConditionsFromFilterBar(inConditions, control, inParameterMap.filter);
      }
      return inConditions;
    },
    /**
     * Provides the possibility to convey custom data in conditions.
     * This enables an application to enhance conditions with data relevant for combined key or outparameter scenarios.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content ValueHelp content instance
     * @param _values Description pair for the condition which is to be created
     * @param context Optional additional context
     * @returns Optionally returns a serializable object to be stored in the condition payload field
     * @since 1.101.0
     */
    createConditionPayload: function (valueHelp, content, _values, context) {
      const payload = valueHelp.getPayload();
      const qualifier = payload.qualifiers[payload.valueHelpQualifier],
        entry = {},
        conditionPayload = {};
      const control = content.getControl();
      const isMultiValueField = control === null || control === void 0 ? void 0 : control.isA("sap.ui.mdc.MultiValueField");
      if (!qualifier.vhKeys || qualifier.vhKeys.length === 1 || isMultiValueField) {
        return undefined;
      }
      qualifier.vhKeys.forEach(function (vhKey) {
        const value = context.getObject(vhKey);
        if (value != null) {
          entry[vhKey] = (value === null || value === void 0 ? void 0 : value.length) === 0 ? "" : value;
        }
      });
      if (Object.keys(entry).length) {
        /* vh qualifier as key for relevant condition */
        conditionPayload[payload.valueHelpQualifier] = [entry];
      }
      return conditionPayload;
    },
    /**
     * Provides the possibility to customize selections in 'Select from list' scenarios.
     * By default, only condition keys are considered. This may be extended with payload dependent filters.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content ValueHelp content instance
     * @param item Entry of a given list
     * @param conditions Current conditions
     * @returns True, if item is selected
     * @since 1.101.0
     */
    isFilterableListItemSelected: function (valueHelp, content, item, conditions) {
      var _content$getConfig;
      //In value help dialogs of single value fields the row for the key shouldn´t be selected/highlight anymore BCP: 2270175246
      const payload = valueHelp.getPayload();
      if (payload.isValueListWithFixedValues !== true && ((_content$getConfig = content.getConfig()) === null || _content$getConfig === void 0 ? void 0 : _content$getConfig.maxConditions) === 1) {
        return false;
      }
      const context = item.getBindingContext();

      /* Do not consider "NotValidated" conditions */
      conditions = conditions.filter(condition => condition.validated === ConditionValidated.Validated);
      const selectedCondition = conditions.find(function (condition) {
        var _conditionPayloadMap$;
        const conditionPayloadMap = condition.payload,
          valueHelpQualifier = payload.valueHelpQualifier || "";
        if (!conditionPayloadMap && Object.keys(payload.qualifiers)[0] === valueHelpQualifier) {
          const keyPath = content.getKeyPath();
          return (context === null || context === void 0 ? void 0 : context.getObject(keyPath)) === (condition === null || condition === void 0 ? void 0 : condition.values[0]);
        }
        const conditionSelectedRow = (conditionPayloadMap === null || conditionPayloadMap === void 0 ? void 0 : (_conditionPayloadMap$ = conditionPayloadMap[valueHelpQualifier]) === null || _conditionPayloadMap$ === void 0 ? void 0 : _conditionPayloadMap$[0]) || {},
          selectedKeys = Object.keys(conditionSelectedRow);
        if (selectedKeys.length) {
          return selectedKeys.every(function (key) {
            return conditionSelectedRow[key] === (context === null || context === void 0 ? void 0 : context.getObject(key));
          });
        }
        return false;
      });
      return selectedCondition ? true : false;
    },
    /**
     * Creates contexts for additional values and resumes the list binding.
     *
     * @param payload Payload for delegate
     * @param listBinding List binding
     * @param bindingInfo The binding info object to be used to bind the list to the model
     * @param additionalValues Array of AdditionalValues
     */
    _updateBindingForRecommendations: async function (payload, listBinding, bindingInfo, additionalValues) {
      let updateBindingDonePromiseResolve;
      //create a promise to make sure checkListBindingPending is only completed once this promise is resolved
      payload.updateBindingDonePromise = new Promise(function (resolve) {
        updateBindingDonePromiseResolve = resolve;
      });
      try {
        //fetch the contexts of additionalvalues
        const additionalValueContextData = await additionalValueHelper.requestForAdditionalValueContextData(additionalValues, listBinding, bindingInfo);
        //remove duplicate values from different groups of additionalvalues
        const uniqueAdditionalValues = additionalValueHelper.removeDuplicateAdditionalValues(additionalValueContextData, [...additionalValues]);
        //sort and filter valuehelpbinding to make sure we render others group
        additionalValueHelper.sortAndFilterOthers(listBinding, bindingInfo, uniqueAdditionalValues);
        //resume the list binding and then reset the changes
        await additionalValueHelper.resumeValueListBindingAndResetChanges(listBinding);
        if (!additionalValueHelper.doesTransientContextsAlreadyExist(listBinding, uniqueAdditionalValues)) {
          // add transient context to list binding after backend query is done
          additionalValueHelper.createAdditionalValueTransientContexts(additionalValueContextData, uniqueAdditionalValues.reverse(), listBinding);
        }
      } catch (error) {
        //Do nothing as we know that reset changes would throw an error in console and this will pile up a lot of console errors
      }
      if (updateBindingDonePromiseResolve) {
        //resolve the promise as everything is completed
        updateBindingDonePromiseResolve(true);
      }
    },
    /**
     * Executes a filter in a <code>ListBinding</code> and resumes it, if suspended.
     *
     * @param listBinding List binding
     * @param bindingInfo The binding info object to be used to bind the list to the model
     */
    _updateBinding: async function (listBinding, bindingInfo) {
      const rootBinding = listBinding.getRootBinding() || listBinding;
      if (!rootBinding.isSuspended()) {
        rootBinding.suspend();
      }
      if (bindingInfo.parameters) {
        listBinding.changeParameters(bindingInfo.parameters);
      }
      listBinding.filter(bindingInfo.filters, FilterType.Application);
      listBinding.sort(bindingInfo.sorter);
      if (rootBinding.isSuspended()) {
        rootBinding.resume();
        rootBinding.resetChanges();
      }
    },
    /**
     * Returns an boolean value if additionalvalues exists which will contain different groups like recommendations.
     *
     * @param content Filterable List Content
     * @param payload Payload for delegate
     * @returns Boolean value
     */
    checkIfAdditionalValuesExists: function (content, payload) {
      const bindingContext = content.getBindingContext();
      //get the recommendation data from the internal model
      const inputValues = content.getModel("internal").getProperty("/recommendationsData") || {};
      //Fetch the relevant recommendations based on the inputvalues and bindingcontext
      const values = additionalValueHelper.getRelevantRecommendations(inputValues, bindingContext, payload.propertyPath) || [];
      if ((values === null || values === void 0 ? void 0 : values.length) > 0) {
        //if there are relevant recommendations then return true
        return true;
      }
      return false;
    },
    /**
     * Returns a boolean value which will tell whether typeahead should be opened or not.
     *
     * @param valueHelp The <code>ValueHelp</code> instance
     * @param content Filterable List Content
     * @returns Boolean value whether to show typeahead or not
     */
    showTypeahead: function (control, content) {
      if (!content.getControl().isA("sap.ui.mdc.FilterField") && !content.getControl().isA("sap.ui.mdc.MultiValueField")) {
        var _content$getControl;
        const filterValue = content === null || content === void 0 ? void 0 : content.getFilterValue();
        const vhValue = content === null || content === void 0 ? void 0 : (_content$getControl = content.getControl()) === null || _content$getControl === void 0 ? void 0 : _content$getControl.getValue();
        if (vhValue) {
          // valuehelp had some value, but user cleared the value
          // in such case we get input value as '' and we will return false
          //Note: In SDs usecase we wanted to open the typeAhead if there are recommendations and value is blank, they should pass us a flag so that we can handle this accordingly
          if (filterValue === "") {
            return false;
          } else {
            return true;
          }
        } else {
          //if valuehelp value is not there and there is filter value then user is typing and we return true else we would only open
          //if it is recommendation relevant field
          if (filterValue) {
            return true;
          }
          return this.checkIfAdditionalValuesExists(content, control.getPayload());
        }
      }
      return true;
    }
  });
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelpDelegate", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/TypeGuards","sap/fe/core/type/TypeUtil","sap/fe/macros/internal/valuehelp/ValueListHelper","sap/m/inputUtils/highlightDOMElements","sap/ui/mdc/condition/Condition","sap/ui/mdc/enum/ConditionValidated","sap/ui/mdc/p13n/StateUtil","sap/ui/mdc/ValueHelpDelegate","sap/ui/model/FilterType","../internal/valuehelp/AdditionalValueHelper"],function(e,t,n,i,o,a,r,l,s,d,u,c,f){"use strict";var g=f.additionalValueHelper;var p=f.AdditionalValueGroupKey;var h=i.isPathAnnotationExpression;var v=n.convertTypes;const m="sap.fe.core.controls.FilterBar";const P="sap.ui.mdc.filterbar.FilterBarBase";return Object.assign({},u,{apiVersion:2,isSearchSupported:function(e,t,n){return t.getFilterFields()==="$search"},updateBindingInfo:function(e,n,i){u.updateBindingInfo(e,n,i);if(n.getFilterFields()==="$search"){const e=n.getFilterValue();const o=t.normalizeSearchTerm(e);if(i.parameters){i.parameters.$search=o||undefined}}},updateBinding:async function(e,t,n,i){const o=e.getPayload();const a=this._getValueListPropertyFromPayloadQualifier(o);if(i.isTypeahead()){const e=i.getBindingContext();const r=[];const l=i.getModel("internal").getProperty("/recommendationsData")||{};const s=g.getRelevantRecommendations(l,e,o.propertyPath)||[];if((s===null||s===void 0?void 0:s.length)>0){r.push({propertyPath:a,values:s,groupKey:p.recommendation});this._updateBindingForRecommendations(o,t,n,r)}else{this._updateBinding(t,n)}}else{this._updateBinding(t,n)}},executeFilter:async function(e,t,n,i){t.getContexts(0,i);await this.checkListBindingPending(e,t,i);return t},checkListBindingPending:async function(e,t,n){const i=e.getPayload();if(i.updateBindingDonePromise){return i.updateBindingDonePromise}else{if(!t||t.isSuspended()){return false}const e=await t.requestContexts(0,n);return e.length===0}},getTypeUtil:function(e){return o},retrieveContent:function(e,t,n){const i=e.getPayload();return a.showValueList(i,t,n)},_getConditionPayloadList:function(e){const t=e.payload||{},n=Object.keys(t),i=n.length?t[n[0]]:[];return i},_getValueListPropertyFromPayloadQualifier:function(e){const t=e.qualifiers[e.valueHelpQualifier].vhParameters||[];const n=e.qualifiers[e.valueHelpQualifier].vhKeys||[];const i=e.valueHelpKeyPath;let o=[...n];const a=[];if(t.length>0){t.forEach(function(e){a.push(e.helpPath)});o=n.filter(e=>!a.includes(e))}return i&&o.includes(i)?i:""},_onConditionPropagationToFilterBar:async function(t,n,i,o){try{const e=await d.retrieveExternalState(o);const a=t.getFilterItems();for(const t of n){const n=this._getConditionPayloadList(t);for(const t of i){const i=t.source.split("/").pop()||"";if(a.find(e=>e.getId().split("::").pop()===i)){for(const o of n){const n=l.createCondition("EQ",[o[t.helpPath]],null,null,s.Validated);e.filter[i]||=[];e.filter[i].push(n)}}}}d.applyExternalState(o,e)}catch(t){const n=t instanceof Error?t.message:String(t);e.error(`ValueHelpDelegate: ${n}`)}},_onConditionPropagationToBindingContext:function(t,n,i){const o=i.getModel().getMetaModel();for(const a of t){const t=this._getConditionPayloadList(a),r=t.length===1?t[0]:undefined;if(t.length>1){e.warning("ValueHelpDelegate: ParameterOut in multi-value-field not supported")}if(r){this._onConditionPropagationUpdateProperty(o,r,n,i)}}},_onConditionPropagationUpdateProperty:function(e,t,n,i){const o=v(e);const a=e.getMetaContext(i.getPath()).getPath();const r=i.isTransient()!==true&&i.isInactive()!==true;for(const e of n){if(i.getProperty(e.source)!==t[e.helpPath]){this._updatePropertyViaOutParameter(o,a,t,e,i,r)}}},_updatePropertyViaOutParameter:function(e,t,n,i,o,a){var r,l,s,d,u,c;const f=`${t}/${i.source}`;const g=e.resolvePath(f).target;const p=g===null||g===void 0?void 0:(r=g.annotations)===null||r===void 0?void 0:(l=r.Common)===null||l===void 0?void 0:l.FieldControl;const v=h(p)?o.getProperty(p.path)===1:false;if(v&&a){const e=i.source.lastIndexOf("/");const t=e>0?i.source.substring(0,e):i.source;o.requestSideEffects([t])}else{o.setProperty(i.source,n[i.helpPath])}const m=h(g===null||g===void 0?void 0:(s=g.annotations)===null||s===void 0?void 0:(d=s.Common)===null||d===void 0?void 0:d.Text)?g===null||g===void 0?void 0:(u=g.annotations)===null||u===void 0?void 0:(c=u.Common)===null||c===void 0?void 0:c.Text.path:undefined;if(m!==undefined&&a){const e=m.lastIndexOf("/");const t=e>0?m.substring(0,e):m;o.requestSideEffects([t])}},getFilterConditions:function(e,t,n){if(this.getInitialFilterConditions){return this.getInitialFilterConditions(e,t,n&&n.control||t&&t.getControl())}return{}},onConditionPropagation:async function(e,t,n){if(t!=="ControlChange"){return}const i=e.getPayload();const o=i.qualifiers[i.valueHelpQualifier];const r=(o===null||o===void 0?void 0:o.vhParameters)!==undefined?a.getOutParameters(o.vhParameters):[],l=e.getControl(),s=l.getParent();let d=l.getConditions();d=d.filter(function(e){const t=e.payload||{};return t[i.valueHelpQualifier]});if(s.isA(P)){const t=e.getParent();if(t.isA(m)){await this._onConditionPropagationToFilterBar(t,d,r,s)}}else{const t=e.getBindingContext();if(t){this._onConditionPropagationToBindingContext(d,r,t)}}},_createInitialFilterCondition:function(t,n){let i;if(t===undefined||t===null){e.error("ValueHelpDelegate: value of the property could not be requested")}else if(t===""){if(n){i=l.createCondition("Empty",[],null,null,s.Validated)}}else{i=l.createCondition("EQ",[t],null,null,s.Validated)}return i},_getInitialFilterConditionsFromBinding:async function(t,n,i){const o=i.map(e=>e.source);const a=n.getBindingContext();if(!a){e.error("ValueHelpDelegate: No BindingContext");return t}const r=await a.requestProperty(o);for(let e=0;e<i.length;e++){const n=i[e];const o=this._createInitialFilterCondition(r[e],n.initialValueFilterEmpty);if(o){t[n.helpPath]=[o]}}return t},_getInitialFilterConditionsFromFilterBar:async function(e,t,n){const i=t.getParent();const o=await d.retrieveExternalState(i);for(const t of n){const n=this._getConditionsFromInParameter(t,o);if(n){e[t.helpPath]=n}}return e},_getConditionsFromInParameter:function(e,t){const n=e.source;const i=Object.keys(t.filter).find(e=>("/"+n).endsWith("/"+e));return i&&t.filter[i]},_partitionInParameters:function(e){const t={constant:[],binding:[],filter:[]};for(const n of e){if(n.constantValue!==undefined){t.constant.push(n)}else if(n.source.indexOf("$filter")===0){t.filter.push(n)}else{t.binding.push(n)}}return t},_tableAfterRenderDelegate:{onAfterRendering:function(e){const t=e.srcControl,n=t.$().find("tbody .sapMText"),i=t.getParent();r(n,i.getFilterValue(),true)}},getInitialFilterConditions:async function(t,n,i){if(n!==null&&n!==void 0&&n.isA("sap.ui.mdc.valuehelp.content.MTable")){const e=n.getTable();e===null||e===void 0?void 0:e.removeEventDelegate(this._tableAfterRenderDelegate);e===null||e===void 0?void 0:e.addEventDelegate(this._tableAfterRenderDelegate,this)}const o={};if(!i){e.error("ValueHelpDelegate: Control undefined");return o}const r=t.getPayload();const l=r.qualifiers[r.valueHelpQualifier];const s=(l===null||l===void 0?void 0:l.vhParameters)!==undefined?a.getInParameters(l.vhParameters):[];const d=this._partitionInParameters(s);const u=i.getBindingContext();for(const e of d.constant){const t=this._createInitialFilterCondition(e.constantValue,u?e.initialValueFilterEmpty:false);if(t){o[e.helpPath]=[t]}}if(d.binding.length){await this._getInitialFilterConditionsFromBinding(o,i,d.binding)}if(d.filter.length){await this._getInitialFilterConditionsFromFilterBar(o,i,d.filter)}return o},createConditionPayload:function(e,t,n,i){const o=e.getPayload();const a=o.qualifiers[o.valueHelpQualifier],r={},l={};const s=t.getControl();const d=s===null||s===void 0?void 0:s.isA("sap.ui.mdc.MultiValueField");if(!a.vhKeys||a.vhKeys.length===1||d){return undefined}a.vhKeys.forEach(function(e){const t=i.getObject(e);if(t!=null){r[e]=(t===null||t===void 0?void 0:t.length)===0?"":t}});if(Object.keys(r).length){l[o.valueHelpQualifier]=[r]}return l},isFilterableListItemSelected:function(e,t,n,i){var o;const a=e.getPayload();if(a.isValueListWithFixedValues!==true&&((o=t.getConfig())===null||o===void 0?void 0:o.maxConditions)===1){return false}const r=n.getBindingContext();i=i.filter(e=>e.validated===s.Validated);const l=i.find(function(e){var n;const i=e.payload,o=a.valueHelpQualifier||"";if(!i&&Object.keys(a.qualifiers)[0]===o){const n=t.getKeyPath();return(r===null||r===void 0?void 0:r.getObject(n))===(e===null||e===void 0?void 0:e.values[0])}const l=(i===null||i===void 0?void 0:(n=i[o])===null||n===void 0?void 0:n[0])||{},s=Object.keys(l);if(s.length){return s.every(function(e){return l[e]===(r===null||r===void 0?void 0:r.getObject(e))})}return false});return l?true:false},_updateBindingForRecommendations:async function(e,t,n,i){let o;e.updateBindingDonePromise=new Promise(function(e){o=e});try{const e=await g.requestForAdditionalValueContextData(i,t,n);const o=g.removeDuplicateAdditionalValues(e,[...i]);g.sortAndFilterOthers(t,n,o);await g.resumeValueListBindingAndResetChanges(t);if(!g.doesTransientContextsAlreadyExist(t,o)){g.createAdditionalValueTransientContexts(e,o.reverse(),t)}}catch(e){}if(o){o(true)}},_updateBinding:async function(e,t){const n=e.getRootBinding()||e;if(!n.isSuspended()){n.suspend()}if(t.parameters){e.changeParameters(t.parameters)}e.filter(t.filters,c.Application);e.sort(t.sorter);if(n.isSuspended()){n.resume();n.resetChanges()}},checkIfAdditionalValuesExists:function(e,t){const n=e.getBindingContext();const i=e.getModel("internal").getProperty("/recommendationsData")||{};const o=g.getRelevantRecommendations(i,n,t.propertyPath)||[];if((o===null||o===void 0?void 0:o.length)>0){return true}return false},showTypeahead:function(e,t){if(!t.getControl().isA("sap.ui.mdc.FilterField")&&!t.getControl().isA("sap.ui.mdc.MultiValueField")){var n;const i=t===null||t===void 0?void 0:t.getFilterValue();const o=t===null||t===void 0?void 0:(n=t.getControl())===null||n===void 0?void 0:n.getValue();if(o){if(i===""){return false}else{return true}}else{if(i){return true}return this.checkIfAdditionalValuesExists(t,e.getPayload())}}return true}})},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelpFilterBar.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/TemplateModel"], function (BuildingBlockBase, BuildingBlockSupport, FilterBar, MetaModelConverter, TemplateModel) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15;
  var _exports = {};
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var getSelectionFields = FilterBar.getSelectionFields;
  var getExpandFilterFields = FilterBar.getExpandFilterFields;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockEvent = BuildingBlockSupport.blockEvent;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ValueHelpFilterBarBlock = (
  /**
   * Building block for creating a FilterBar based on the metadata provided by OData V4 for the value help dialog.
   *
   * @private
   */
  _dec = defineBuildingBlock({
    name: "ValueHelpFilterBar",
    namespace: "sap.fe.macros.valuehelp",
    fragment: "sap.fe.macros.valuehelp.ValueHelpFilterBar"
  }), _dec2 = blockAttribute({
    type: "string"
  }), _dec3 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec5 = blockAttribute({
    type: "boolean"
  }), _dec6 = blockAttribute({
    type: "boolean"
  }), _dec7 = blockAttribute({
    type: "sap.ui.mdc.FilterBarP13nMode[]"
  }), _dec8 = blockAttribute({
    type: "boolean"
  }), _dec9 = blockAttribute({
    type: "boolean"
  }), _dec10 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec11 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec12 = blockAttribute({
    type: "string"
  }), _dec13 = blockAttribute({
    type: "boolean"
  }), _dec14 = blockAttribute({
    type: "boolean"
  }), _dec15 = blockEvent(), _dec16 = blockEvent(), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(ValueHelpFilterBarBlock, _BuildingBlockBase);
    /**
     * ID of the FilterBar
     */

    /**
     * Don't show the basic search field
     */

    /**
     * Enables the fallback to show all fields of the EntityType as filter fields if com.sap.vocabularies.UI.v1.SelectionFields are not present
     */

    /**
     * Specifies the personalization options for the filter bar.
     */

    /**
     * Specifies the Sematic Date Range option for the filter bar.
     */

    /**
     * If set the search will be automatically triggered, when a filter value was changed.
     */

    /**
     * Temporary workaround only
     * path to valuelist
     */

    /**
     * selectionFields to be displayed
     */

    /**
     * Filter conditions to be applied to the filter bar
     */

    /**
     * If set to <code>true</code>, all search requests are ignored. Once it has been set to <code>false</code>,
     * a search is triggered immediately if one or more search requests have been triggered in the meantime
     * but were ignored based on the setting.
     */

    /**
     * Determines whether the Show/Hide Filters button is in the state show or hide.
     */

    /**
     * Search handler name
     */

    /**
     * Filters changed handler name
     */

    function ValueHelpFilterBarBlock(props, controlConfiguration, settings) {
      var _targetEntitySet$anno;
      var _this;
      _this = _BuildingBlockBase.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "hideBasicSearch", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enableFallback", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "p13nMode", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "useSemanticDateRange", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "liveMode", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_valueList", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionFields", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterConditions", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "suspendSelection", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "expandFilterFields", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "search", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterChanged", _descriptor15, _assertThisInitialized(_this));
      const metaModel = _this.contextPath.getModel();
      const metaPathContext = _this.metaPath;
      const metaPathPath = metaPathContext === null || metaPathContext === void 0 ? void 0 : metaPathContext.getPath();
      const dataModelObjectPath = getInvolvedDataModelObjects(_this.contextPath);
      const converterContext = _this.getConverterContext(dataModelObjectPath, undefined, settings);
      if (!_this.selectionFields) {
        const selectionFields = getSelectionFields(converterContext, [], metaPathPath).selectionFields;
        _this.selectionFields = new TemplateModel(selectionFields, metaModel).createBindingContext("/");
      }
      const targetEntitySet = dataModelObjectPath.targetEntitySet; // It could be a singleton but the annotaiton are not defined there (yet?)
      _this.expandFilterFields = getExpandFilterFields(converterContext, (_targetEntitySet$anno = targetEntitySet.annotations.Capabilities) === null || _targetEntitySet$anno === void 0 ? void 0 : _targetEntitySet$anno.FilterRestrictions, _this._valueList);
      return _this;
    }
    _exports = ValueHelpFilterBarBlock;
    return ValueHelpFilterBarBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "hideBasicSearch", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "enableFallback", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "p13nMode", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    }
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "useSemanticDateRange", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "liveMode", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "_valueList", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "selectionFields", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "filterConditions", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "suspendSelection", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "expandFilterFields", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "search", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "filterChanged", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ValueHelpFilterBarBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/valuehelp/ValueHelpFilterBar.block", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/converters/MetaModelConverter","sap/fe/core/TemplateModel"],function(e,t,r,i,n){"use strict";var l,a,o,u,c,s,p,b,f,d,g,v,y,m,h,w,z,F,B,x,P,C,k,M,O,S,j,_,E,R,D,L,q;var H={};var V=i.getInvolvedDataModelObjects;var A=r.getSelectionFields;var I=r.getExpandFilterFields;var T=t.defineBuildingBlock;var G=t.blockEvent;var J=t.blockAttribute;function K(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function N(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function Q(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;U(e,t)}function U(e,t){U=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return U(e,t)}function W(e,t,r,i,n){var l={};Object.keys(i).forEach(function(e){l[e]=i[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},l);if(n&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(n):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function X(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let Y=(l=T({name:"ValueHelpFilterBar",namespace:"sap.fe.macros.valuehelp",fragment:"sap.fe.macros.valuehelp.ValueHelpFilterBar"}),a=J({type:"string"}),o=J({type:"sap.ui.model.Context",required:true}),u=J({type:"sap.ui.model.Context"}),c=J({type:"boolean"}),s=J({type:"boolean"}),p=J({type:"sap.ui.mdc.FilterBarP13nMode[]"}),b=J({type:"boolean"}),f=J({type:"boolean"}),d=J({type:"sap.ui.model.Context",required:true}),g=J({type:"sap.ui.model.Context"}),v=J({type:"string"}),y=J({type:"boolean"}),m=J({type:"boolean"}),h=G(),w=G(),l(z=(F=function(e){Q(t,e);function t(t,r,i){var l;var a;a=e.call(this,t)||this;K(a,"id",B,N(a));K(a,"contextPath",x,N(a));K(a,"metaPath",P,N(a));K(a,"hideBasicSearch",C,N(a));K(a,"enableFallback",k,N(a));K(a,"p13nMode",M,N(a));K(a,"useSemanticDateRange",O,N(a));K(a,"liveMode",S,N(a));K(a,"_valueList",j,N(a));K(a,"selectionFields",_,N(a));K(a,"filterConditions",E,N(a));K(a,"suspendSelection",R,N(a));K(a,"expandFilterFields",D,N(a));K(a,"search",L,N(a));K(a,"filterChanged",q,N(a));const o=a.contextPath.getModel();const u=a.metaPath;const c=u===null||u===void 0?void 0:u.getPath();const s=V(a.contextPath);const p=a.getConverterContext(s,undefined,i);if(!a.selectionFields){const e=A(p,[],c).selectionFields;a.selectionFields=new n(e,o).createBindingContext("/")}const b=s.targetEntitySet;a.expandFilterFields=I(p,(l=b.annotations.Capabilities)===null||l===void 0?void 0:l.FilterRestrictions,a._valueList);return a}H=t;return t}(e),B=W(F.prototype,"id",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),x=W(F.prototype,"contextPath",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),P=W(F.prototype,"metaPath",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),C=W(F.prototype,"hideBasicSearch",[c],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),k=W(F.prototype,"enableFallback",[s],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),M=W(F.prototype,"p13nMode",[p],{configurable:true,enumerable:true,writable:true,initializer:function(){return[]}}),O=W(F.prototype,"useSemanticDateRange",[b],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),S=W(F.prototype,"liveMode",[f],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),j=W(F.prototype,"_valueList",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),_=W(F.prototype,"selectionFields",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),E=W(F.prototype,"filterConditions",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),R=W(F.prototype,"suspendSelection",[y],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),D=W(F.prototype,"expandFilterFields",[m],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),L=W(F.prototype,"search",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),q=W(F.prototype,"filterChanged",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),F))||z);H=Y;return H},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/InteractiveChartHelper-dbg", ["sap/base/util/JSTokenizer", "sap/fe/core/CommonUtils", "sap/fe/core/controls/filterbar/utils/VisualFilterUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/CriticalityFormatters", "sap/fe/core/templating/FilterHelper", "sap/fe/core/type/TypeUtil", "sap/fe/macros/CommonHelper", "sap/fe/macros/filter/FilterFieldHelper", "sap/m/library", "sap/ui/core/Core", "sap/ui/core/format/NumberFormat", "sap/ui/mdc/condition/ConditionConverter", "sap/ui/model/odata/v4/ODataUtils", "../field/FieldTemplating"], function (JSTokenizer, CommonUtils, VisualFilterUtils, MetaModelConverter, StableIdHelper, TypeGuards, CriticalityFormatters, FilterHelper, TypeUtil, CommonHelper, FilterFieldHelper, mLibrary, Core, NumberFormat, ConditionConverter, ODataUtils, FieldTemplating) {
  "use strict";

  var getTextBinding = FieldTemplating.getTextBinding;
  var formatOptions = FilterFieldHelper.formatOptions;
  var constraints = FilterFieldHelper.constraints;
  var getFiltersConditionsFromSelectionVariant = FilterHelper.getFiltersConditionsFromSelectionVariant;
  var buildExpressionForCriticalityColorMicroChart = CriticalityFormatters.buildExpressionForCriticalityColorMicroChart;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isEntitySet = TypeGuards.isEntitySet;
  var generate = StableIdHelper.generate;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const InteractiveChartHelper = {
    getChartDisplayedValue: function (value, valueFormat, metaPath) {
      const infoPath = generate([metaPath]);
      return "{parts:[{path:'" + value + "',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}" + (valueFormat && valueFormat.ScaleFactor ? ",{value:'" + valueFormat.ScaleFactor.valueOf() + "'}" : ",{path:'internal>scalefactorNumber/" + infoPath + "'}") + (valueFormat && valueFormat.NumberOfFractionalDigits ? ",{value:'" + valueFormat.NumberOfFractionalDigits + "'}" : ",{value:'0'}") + ",{path:'internal>currency/" + infoPath + "'}" + ",{path:'" + value + "',type:'sap.ui.model.odata.type.String', constraints:{'nullable':false}}" + "], formatter:'VisualFilterRuntime.scaleVisualFilterValue'}"; //+ sType.split('#').length ? sType.split('#')[1] : 'Decimal' + "}";
    },

    getChartValue: function (value) {
      return "{path:'" + value + "',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}";
    },
    _getCollectionName: function (collection, contextPath, parameters) {
      const collectionObject = collection.targetObject;
      if (isNavigationProperty(collectionObject)) {
        return parameters ? contextPath.getPath() : collectionObject.name;
      } else if (isEntitySet(collectionObject)) {
        return "/" + collectionObject.name;
      } else {
        return collectionObject.name;
      }
    },
    _getBindingPathForParameters: function (filterConditions, metaModel, collectionName, parameters, entitySetPath) {
      const params = [];
      const convertedFilterConditions = VisualFilterUtils.convertFilterCondions(filterConditions);
      const parameterProperties = CommonUtils.getParameterInfo(metaModel, collectionName).parameterProperties;
      if (parameterProperties) {
        for (const i in parameters) {
          const parameter = parameters[i];
          const property = parameterProperties[parameter];
          const entityPath = entitySetPath.split("/")[1];
          const propertyContext = metaModel.createBindingContext(`/${entityPath}/${parameter}`);
          const typeConfig = TypeUtil.getTypeConfig(property.$Type, JSTokenizer.parseJS(formatOptions(property, {
            context: propertyContext
          }) || "{}"), JSTokenizer.parseJS(constraints(property, {
            context: propertyContext
          }) || "{}"));
          const condition = convertedFilterConditions[parameter];
          const conditionInternal = condition ? condition[0] : undefined;
          if (conditionInternal) {
            const internalParameterCondition = ConditionConverter.toType(conditionInternal, typeConfig, TypeUtil);
            const edmType = property.$Type;
            let value = encodeURIComponent(ODataUtils.formatLiteral(internalParameterCondition.values[0], edmType));
            value = value.replaceAll("'", "\\'");
            params.push(`${parameter}=${value}`);
          }
        }
      }
      const parameterEntitySet = collectionName.slice(0, collectionName.lastIndexOf("/"));
      const targetNavigation = collectionName.substring(collectionName.lastIndexOf("/") + 1);
      // create parameter context
      return `${parameterEntitySet}(${params.toString()})/${targetNavigation}`;
    },
    _getUOMAggregationExpression: function (customAggregate, UoMHasCustomAggregate, UOM, aggregation) {
      let aggregationExpression, UOMExpression;
      const path = UOM && typeof UOM != "string" && UOM.path;
      if (customAggregate) {
        //custom aggregate for a currency or unit of measure corresponding to this aggregatable property
        if (UoMHasCustomAggregate) {
          aggregationExpression = path ? `{ 'unit' : '${path}' }` : "{}";
          UOMExpression = "";
        } else {
          aggregationExpression = "{}";
          UOMExpression = path ? `, '${path}' : {}` : "";
        }
      } else if (aggregation && aggregation.AggregatableProperty && aggregation.AggregatableProperty.value && aggregation.AggregationMethod) {
        aggregationExpression = "{ 'name' : '" + aggregation.AggregatableProperty.value + "', 'with' : '" + aggregation.AggregationMethod + "'}";
        UOMExpression = path ? ", '" + path + "' : {}" : "";
      }
      return {
        aggregationExpression: aggregationExpression,
        UOMExpression: UOMExpression
      };
    },
    getAggregationBinding: function (chartAnnotations, collection, contextPath, textAssociation, dimensionType, sortOrder, selectionVariant, customAggregate, aggregation, UoMHasCustomAggregate, parameters, filterBarContext, draftSupported, chartMeasure) {
      const selectionVariantAnnotation = selectionVariant === null || selectionVariant === void 0 ? void 0 : selectionVariant.targetObject;
      const entityType = filterBarContext ? filterBarContext.getPath() : "";
      const entitySetPath = contextPath.getPath();
      const dimension = chartAnnotations.Dimensions[0].value;
      const filters = [];
      let filterConditions;
      let collectionName = this._getCollectionName(collection, contextPath, parameters);
      const UOM = InteractiveChartHelper.getUoM(chartAnnotations, collection, undefined, customAggregate, aggregation);
      const metaModel = contextPath.getModel();
      if (draftSupported) {
        filters.push({
          operator: "EQ",
          value1: "true",
          value2: null,
          path: "IsActiveEntity",
          isParameter: true
        });
      }
      if (selectionVariantAnnotation) {
        filterConditions = getFiltersConditionsFromSelectionVariant(entitySetPath, metaModel, selectionVariantAnnotation, VisualFilterUtils.getCustomConditions.bind(VisualFilterUtils));
        for (const path in filterConditions) {
          const conditions = filterConditions[path];
          conditions.forEach(function (condition) {
            if (!condition.isParameter) {
              filters.push(condition);
            }
          });
        }
      }
      if (entityType !== `${collectionName}/` && parameters && parameters.length && filterConditions) {
        const bindingPath = this._getBindingPathForParameters(filterConditions, metaModel, collectionName, parameters, entitySetPath);
        collectionName = bindingPath;
      }
      const UOMAggregationExpression = this._getUOMAggregationExpression(customAggregate, UoMHasCustomAggregate, UOM, aggregation);
      const aggregationExpression = UOMAggregationExpression.aggregationExpression;
      const UOMExpression = UOMAggregationExpression.UOMExpression;
      const textAssociationExpression = textAssociation ? "' : { 'additionally' : ['" + textAssociation.path + "'] }" : "' : { }";
      const filterExpression = JSON.stringify(filters);
      return "{path: '" + collectionName + "', templateShareable: true, suspended : true, 'filters' : " + filterExpression + ",'parameters' : {" + InteractiveChartHelper.getSortOrder(chartAnnotations, dimensionType, sortOrder, chartMeasure) + ", '$$aggregation' : {'aggregate' : {'" + chartMeasure + "' : " + aggregationExpression + "},'group' : {'" + dimension + textAssociationExpression + UOMExpression + "} } }" + InteractiveChartHelper.getMaxItems(chartAnnotations) + "}";
    },
    _getOrderExpressionFromMeasure: function (sortOrder, chartMeasure) {
      let sortPropertyName;
      if (sortOrder && sortOrder.length) {
        if (sortOrder[0].DynamicProperty) {
          var _sortOrder$0$DynamicP;
          sortPropertyName = (_sortOrder$0$DynamicP = sortOrder[0].DynamicProperty.$target) === null || _sortOrder$0$DynamicP === void 0 ? void 0 : _sortOrder$0$DynamicP.Name;
        } else {
          var _sortOrder$0$Property;
          sortPropertyName = (_sortOrder$0$Property = sortOrder[0].Property) === null || _sortOrder$0$Property === void 0 ? void 0 : _sortOrder$0$Property.value;
        }
        if (sortPropertyName === chartMeasure) {
          return "'$orderby' : '" + chartMeasure + (sortOrder[0].Descending ? " desc'" : "'");
        }
        return "'$orderby' : '" + chartMeasure + " desc'";
      }
      return "'$orderby' : '" + chartMeasure + " desc'";
    },
    getSortOrder: function (chartAnnotations, dimensionType, sortOrder, chartMeasure) {
      var _sortOrder$0$Property2, _sortOrder$0$Property3;
      if (chartAnnotations.ChartType === "UI.ChartType/Donut" || chartAnnotations.ChartType === "UI.ChartType/Bar") {
        return this._getOrderExpressionFromMeasure(sortOrder, chartMeasure);
      } else if (dimensionType === "Edm.Date" || dimensionType === "Edm.Time" || dimensionType === "Edm.DateTimeOffset") {
        return "'$orderby' : '" + chartAnnotations.Dimensions[0].value + "'";
      } else if (sortOrder && sortOrder.length && ((_sortOrder$0$Property2 = sortOrder[0].Property) === null || _sortOrder$0$Property2 === void 0 ? void 0 : (_sortOrder$0$Property3 = _sortOrder$0$Property2.$target) === null || _sortOrder$0$Property3 === void 0 ? void 0 : _sortOrder$0$Property3.path) === chartAnnotations.Dimensions[0].value) {
        var _sortOrder$0$Property4, _sortOrder$0$Property5;
        return "'$orderby' : '" + ((_sortOrder$0$Property4 = sortOrder[0].Property) === null || _sortOrder$0$Property4 === void 0 ? void 0 : (_sortOrder$0$Property5 = _sortOrder$0$Property4.$target) === null || _sortOrder$0$Property5 === void 0 ? void 0 : _sortOrder$0$Property5.name) + (sortOrder[0].Descending ? " desc'" : "'");
      } else {
        var _chartAnnotations$Dim;
        return "'$orderby' : '" + ((_chartAnnotations$Dim = chartAnnotations.Dimensions[0].$target) === null || _chartAnnotations$Dim === void 0 ? void 0 : _chartAnnotations$Dim.name) + "'";
      }
    },
    getMaxItems: function (chartAnnotations) {
      if (chartAnnotations.ChartType === "UI.ChartType/Bar") {
        return ",'startIndex' : 0,'length' : 3";
      } else if (chartAnnotations.ChartType === "UI.ChartType/Line") {
        return ",'startIndex' : 0,'length' : 6";
      } else {
        return "";
      }
    },
    getColorBinding: function (dataPoint, dimension) {
      var _dimension$$target, _dimension$$target$an, _dimension$$target$an2;
      const valueCriticality = dimension === null || dimension === void 0 ? void 0 : (_dimension$$target = dimension.$target) === null || _dimension$$target === void 0 ? void 0 : (_dimension$$target$an = _dimension$$target.annotations) === null || _dimension$$target$an === void 0 ? void 0 : (_dimension$$target$an2 = _dimension$$target$an.UI) === null || _dimension$$target$an2 === void 0 ? void 0 : _dimension$$target$an2.ValueCriticality;
      if (dataPoint !== null && dataPoint !== void 0 && dataPoint.Criticality) {
        return buildExpressionForCriticalityColorMicroChart(dataPoint);
      } else if (dataPoint !== null && dataPoint !== void 0 && dataPoint.CriticalityCalculation) {
        const oDirection = dataPoint.CriticalityCalculation.ImprovementDirection;
        const oDataPointValue = dataPoint.Value;
        const oDeviationRangeLowValue = dataPoint.CriticalityCalculation.DeviationRangeLowValue.valueOf();
        const oToleranceRangeLowValue = dataPoint.CriticalityCalculation.ToleranceRangeLowValue.valueOf();
        const oAcceptanceRangeLowValue = dataPoint.CriticalityCalculation.AcceptanceRangeLowValue.valueOf();
        const oAcceptanceRangeHighValue = dataPoint.CriticalityCalculation.AcceptanceRangeHighValue.valueOf();
        const oToleranceRangeHighValue = dataPoint.CriticalityCalculation.ToleranceRangeHighValue.valueOf();
        const oDeviationRangeHighValue = dataPoint.CriticalityCalculation.DeviationRangeHighValue.valueOf();
        return CommonHelper.getCriticalityCalculationBinding(oDirection, oDataPointValue, oDeviationRangeLowValue, oToleranceRangeLowValue, oAcceptanceRangeLowValue, oAcceptanceRangeHighValue, oToleranceRangeHighValue, oDeviationRangeHighValue);
      } else if (valueCriticality && valueCriticality.length) {
        return InteractiveChartHelper.getValueCriticality(dimension.value, valueCriticality);
      } else {
        return undefined;
      }
    },
    getValueCriticality: function (dimension, valueCriticality) {
      let result;
      const values = [];
      if (valueCriticality && valueCriticality.length > 0) {
        valueCriticality.forEach(function (valueCriticalityType) {
          if (valueCriticalityType.Value && valueCriticalityType.Criticality) {
            const value = "${" + dimension + "} === '" + valueCriticalityType.Value + "' ? '" + InteractiveChartHelper._getCriticalityFromEnum(valueCriticalityType.Criticality) + "'";
            values.push(value);
          }
        });
        result = values.length > 0 && values.join(" : ") + " : undefined";
      }
      return result ? "{= " + result + " }" : undefined;
    },
    /**
     * This function returns the criticality indicator from annotations if criticality is EnumMember.
     *
     * @param criticality Criticality provided in the annotations
     * @returns Return the indicator for criticality
     * @private
     */
    _getCriticalityFromEnum: function (criticality) {
      const valueColor = mLibrary.ValueColor;
      let indicator;
      if (criticality === "UI.CriticalityType/Negative") {
        indicator = valueColor.Error;
      } else if (criticality === "UI.CriticalityType/Positive") {
        indicator = valueColor.Good;
      } else if (criticality === "UI.CriticalityType/Critical") {
        indicator = valueColor.Critical;
      } else {
        indicator = valueColor.Neutral;
      }
      return indicator;
    },
    getScaleUoMTitle: function (chartAnnotation, collection, metaPath, customAggregate, aggregation, seperator, toolTip) {
      var _chartAnnotation$Meas, _chartAnnotation$Meas2, _chartAnnotation$Meas3, _chartAnnotation$Meas4, _chartAnnotation$Meas5;
      const scaleFactor = chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.MeasureAttributes ? (_chartAnnotation$Meas = chartAnnotation.MeasureAttributes[0]) === null || _chartAnnotation$Meas === void 0 ? void 0 : (_chartAnnotation$Meas2 = _chartAnnotation$Meas.DataPoint) === null || _chartAnnotation$Meas2 === void 0 ? void 0 : (_chartAnnotation$Meas3 = _chartAnnotation$Meas2.$target) === null || _chartAnnotation$Meas3 === void 0 ? void 0 : (_chartAnnotation$Meas4 = _chartAnnotation$Meas3.ValueFormat) === null || _chartAnnotation$Meas4 === void 0 ? void 0 : (_chartAnnotation$Meas5 = _chartAnnotation$Meas4.ScaleFactor) === null || _chartAnnotation$Meas5 === void 0 ? void 0 : _chartAnnotation$Meas5.valueOf() : undefined;
      const infoPath = generate([metaPath]);
      const fixedInteger = NumberFormat.getIntegerInstance({
        style: "short",
        showScale: false,
        shortRefNumber: scaleFactor
      });
      let scale = fixedInteger.getScale();
      let UOM = InteractiveChartHelper.getUoM(chartAnnotation, collection, undefined, customAggregate, aggregation);
      UOM = UOM && (UOM.path ? "${internal>uom/" + infoPath + "}" : "'" + UOM + "'");
      scale = scale ? "'" + scale + "'" : "${internal>scalefactor/" + infoPath + "}";
      if (!seperator) {
        seperator = "|";
      }
      seperator = "' " + seperator + " ' + ";
      const expression = scale && UOM ? seperator + scale + " + ' ' + " + UOM : seperator + (scale || UOM);
      return toolTip ? expression : "{= " + expression + "}";
    },
    getMeasureDimensionTitle: function (chartAnnotation, customAggregate, aggregation) {
      var _chartAnnotation$Dime, _chartAnnotation$Dime2, _chartAnnotation$Dime3, _chartAnnotation$Dime4, _chartAnnotation$Dime5;
      let measureLabel;
      let measurePath;
      if (customAggregate) {
        var _chartAnnotation$Meas6, _chartAnnotation$Meas7;
        measurePath = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Meas6 = chartAnnotation.Measures[0]) === null || _chartAnnotation$Meas6 === void 0 ? void 0 : (_chartAnnotation$Meas7 = _chartAnnotation$Meas6.$target) === null || _chartAnnotation$Meas7 === void 0 ? void 0 : _chartAnnotation$Meas7.name;
      }
      if (chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.DynamicMeasures && chartAnnotation.DynamicMeasures.length > 0) {
        var _chartAnnotation$Dyna, _chartAnnotation$Dyna2, _chartAnnotation$Dyna3;
        measurePath = (_chartAnnotation$Dyna = chartAnnotation.DynamicMeasures[0]) === null || _chartAnnotation$Dyna === void 0 ? void 0 : (_chartAnnotation$Dyna2 = _chartAnnotation$Dyna.$target) === null || _chartAnnotation$Dyna2 === void 0 ? void 0 : (_chartAnnotation$Dyna3 = _chartAnnotation$Dyna2.AggregatableProperty) === null || _chartAnnotation$Dyna3 === void 0 ? void 0 : _chartAnnotation$Dyna3.value;
      } else if (!customAggregate && chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.Measures && (chartAnnotation === null || chartAnnotation === void 0 ? void 0 : chartAnnotation.Measures.length) > 0) {
        var _chartAnnotation$Meas8, _chartAnnotation$Meas9;
        measurePath = (_chartAnnotation$Meas8 = chartAnnotation.Measures[0]) === null || _chartAnnotation$Meas8 === void 0 ? void 0 : (_chartAnnotation$Meas9 = _chartAnnotation$Meas8.$target) === null || _chartAnnotation$Meas9 === void 0 ? void 0 : _chartAnnotation$Meas9.name;
      }
      const dimensionPath = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Dime = chartAnnotation.Dimensions[0]) === null || _chartAnnotation$Dime === void 0 ? void 0 : _chartAnnotation$Dime.value;
      let dimensionLabel = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Dime2 = chartAnnotation.Dimensions[0]) === null || _chartAnnotation$Dime2 === void 0 ? void 0 : (_chartAnnotation$Dime3 = _chartAnnotation$Dime2.$target) === null || _chartAnnotation$Dime3 === void 0 ? void 0 : (_chartAnnotation$Dime4 = _chartAnnotation$Dime3.annotations) === null || _chartAnnotation$Dime4 === void 0 ? void 0 : (_chartAnnotation$Dime5 = _chartAnnotation$Dime4.Common) === null || _chartAnnotation$Dime5 === void 0 ? void 0 : _chartAnnotation$Dime5.Label;
      if (!customAggregate && aggregation) {
        // check if the label is part of aggregated properties (Transformation aggregates)
        measureLabel = aggregation.annotations && aggregation.annotations.Common && aggregation.annotations.Common.Label;
        if (measureLabel === undefined) {
          var _chartAnnotation$Meas10, _chartAnnotation$Meas11, _chartAnnotation$Meas12, _chartAnnotation$Meas13;
          measureLabel = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Meas10 = chartAnnotation.Measures[0]) === null || _chartAnnotation$Meas10 === void 0 ? void 0 : (_chartAnnotation$Meas11 = _chartAnnotation$Meas10.$target) === null || _chartAnnotation$Meas11 === void 0 ? void 0 : (_chartAnnotation$Meas12 = _chartAnnotation$Meas11.annotations) === null || _chartAnnotation$Meas12 === void 0 ? void 0 : (_chartAnnotation$Meas13 = _chartAnnotation$Meas12.Common) === null || _chartAnnotation$Meas13 === void 0 ? void 0 : _chartAnnotation$Meas13.Label;
        }
      } else {
        var _chartAnnotation$Meas14, _chartAnnotation$Meas15, _chartAnnotation$Meas16, _chartAnnotation$Meas17;
        measureLabel = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Meas14 = chartAnnotation.Measures[0]) === null || _chartAnnotation$Meas14 === void 0 ? void 0 : (_chartAnnotation$Meas15 = _chartAnnotation$Meas14.$target) === null || _chartAnnotation$Meas15 === void 0 ? void 0 : (_chartAnnotation$Meas16 = _chartAnnotation$Meas15.annotations) === null || _chartAnnotation$Meas16 === void 0 ? void 0 : (_chartAnnotation$Meas17 = _chartAnnotation$Meas16.Common) === null || _chartAnnotation$Meas17 === void 0 ? void 0 : _chartAnnotation$Meas17.Label;
      }
      if (measureLabel === undefined) {
        measureLabel = measurePath;
      }
      if (dimensionLabel === undefined) {
        dimensionLabel = dimensionPath;
      }
      return Core.getLibraryResourceBundle("sap.fe.macros").getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_MEASURE_DIMENSION_TITLE", [measureLabel, dimensionLabel]);
    },
    getToolTip: function (chartAnnotation, collection, metaPath, customAggregate, aggregation, renderLineChart) {
      const chartType = chartAnnotation && chartAnnotation["ChartType"];
      let measureDimensionToolTip = InteractiveChartHelper.getMeasureDimensionTitle(chartAnnotation, customAggregate, aggregation);
      measureDimensionToolTip = CommonHelper.escapeSingleQuotes(measureDimensionToolTip);
      if (renderLineChart === "false" && chartType === "UI.ChartType/Line") {
        return `{= '${measureDimensionToolTip}'}`;
      }
      const seperator = Core.getLibraryResourceBundle("sap.fe.macros").getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_TOOLTIP_SEPERATOR");
      const infoPath = generate([metaPath]);
      const scaleUOMTooltip = InteractiveChartHelper.getScaleUoMTitle(chartAnnotation, collection, infoPath, customAggregate, aggregation, seperator, true);
      return "{= '" + measureDimensionToolTip + (scaleUOMTooltip ? "' + " + scaleUOMTooltip : "'") + "}";
    },
    _getUOM: function (UOMObjectPath, UOM, collection, customData, aggregatablePropertyPath) {
      const UOMObject = {};
      const collectionObject = collection === null || collection === void 0 ? void 0 : collection.targetObject;
      if (UOMObjectPath && UOM) {
        // check if the UOM is part of Measure annotations(Custom aggregates)
        UOMObject[UOM] = {
          $Path: UOMObjectPath.path
        };
        return customData && UOMObjectPath.path ? JSON.stringify(UOMObject) : UOMObjectPath;
      } else if (aggregatablePropertyPath) {
        var _collectionObject$tar, _propertyAnnotations$;
        // check if the UOM is part of base property annotations(Transformation aggregates)
        const entityProperties = collectionObject.entityType ? collectionObject.entityType.entityProperties : (_collectionObject$tar = collectionObject.targetType) === null || _collectionObject$tar === void 0 ? void 0 : _collectionObject$tar.entityProperties;
        const propertyAnnotations = entityProperties === null || entityProperties === void 0 ? void 0 : entityProperties.find(property => property.name == aggregatablePropertyPath);
        if (propertyAnnotations !== null && propertyAnnotations !== void 0 && (_propertyAnnotations$ = propertyAnnotations.annotations) !== null && _propertyAnnotations$ !== void 0 && _propertyAnnotations$.Measures && UOM) {
          var _propertyAnnotations$2, _UOMObjectPath;
          UOMObjectPath = propertyAnnotations === null || propertyAnnotations === void 0 ? void 0 : (_propertyAnnotations$2 = propertyAnnotations.annotations) === null || _propertyAnnotations$2 === void 0 ? void 0 : _propertyAnnotations$2.Measures[UOM];
          UOMObject[UOM] = {
            $Path: (_UOMObjectPath = UOMObjectPath) === null || _UOMObjectPath === void 0 ? void 0 : _UOMObjectPath.path
          };
        }
        return UOMObjectPath && customData && UOMObjectPath.path ? JSON.stringify(UOMObject) : UOMObjectPath;
      }
    },
    getUoM: function (chartAnnotation, collection, customData, customAggregate, aggregation) {
      var _measure, _measure2;
      let measure = {};
      if (customAggregate) {
        measure = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : chartAnnotation.Measures[0];
      }
      if (chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.DynamicMeasures && chartAnnotation.DynamicMeasures.length > 0) {
        var _chartAnnotation$Dyna4, _chartAnnotation$Dyna5, _chartAnnotation$Dyna6, _chartAnnotation$Dyna7, _chartAnnotation$Dyna8;
        measure = (_chartAnnotation$Dyna4 = chartAnnotation.DynamicMeasures[0]) === null || _chartAnnotation$Dyna4 === void 0 ? void 0 : (_chartAnnotation$Dyna5 = _chartAnnotation$Dyna4.$target) === null || _chartAnnotation$Dyna5 === void 0 ? void 0 : (_chartAnnotation$Dyna6 = _chartAnnotation$Dyna5.AggregatableProperty) === null || _chartAnnotation$Dyna6 === void 0 ? void 0 : (_chartAnnotation$Dyna7 = _chartAnnotation$Dyna6.$target) === null || _chartAnnotation$Dyna7 === void 0 ? void 0 : (_chartAnnotation$Dyna8 = _chartAnnotation$Dyna7.annotations) === null || _chartAnnotation$Dyna8 === void 0 ? void 0 : _chartAnnotation$Dyna8.Measures;
      } else if (!customAggregate && chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.Measures && chartAnnotation.Measures.length > 0) {
        measure = chartAnnotation.Measures[0];
      }
      const ISOCurrency = (_measure = measure) === null || _measure === void 0 ? void 0 : _measure.ISOCurrency;
      const unit = (_measure2 = measure) === null || _measure2 === void 0 ? void 0 : _measure2.Unit;
      let aggregatablePropertyPath;
      if (!customAggregate && aggregation) {
        aggregatablePropertyPath = aggregation.AggregatableProperty && aggregation.AggregatableProperty.value;
      } else {
        var _measure3;
        aggregatablePropertyPath = (_measure3 = measure) === null || _measure3 === void 0 ? void 0 : _measure3.value;
      }
      return this._getUOM(ISOCurrency, "ISOCurrency", collection, customData, aggregatablePropertyPath) || this._getUOM(unit, "Unit", collection, customData, aggregatablePropertyPath);
    },
    getScaleFactor: function (valueFormat) {
      if (valueFormat && valueFormat.ScaleFactor) {
        return valueFormat.ScaleFactor.valueOf();
      }
      return undefined;
    },
    getUoMVisiblity: function (chartAnnotation, showError) {
      const chartType = chartAnnotation && chartAnnotation["ChartType"];
      if (showError) {
        return false;
      } else if (!(chartType === "UI.ChartType/Bar" || chartType === "UI.ChartType/Line")) {
        return false;
      } else {
        return true;
      }
    },
    getInParameterFiltersBinding: function (inParameters) {
      if (inParameters.length > 0) {
        const parts = [];
        let paths = "";
        inParameters.forEach(function (inParameter) {
          if (inParameter.localDataProperty) {
            parts.push(`{path:'$filters>/conditions/${inParameter.localDataProperty}'}`);
          }
        });
        if (parts.length > 0) {
          paths = parts.join();
          return `{parts:[${paths}], formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFiltersFromConditions'}`;
        } else {
          return undefined;
        }
      } else {
        return undefined;
      }
    },
    getfilterCountBinding: function (chartAnnotation) {
      var _chartAnnotation$Dime6, _chartAnnotation$Dime7;
      const dimension = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$Dime6 = chartAnnotation.Dimensions[0]) === null || _chartAnnotation$Dime6 === void 0 ? void 0 : (_chartAnnotation$Dime7 = _chartAnnotation$Dime6.$target) === null || _chartAnnotation$Dime7 === void 0 ? void 0 : _chartAnnotation$Dime7.name;
      return "{path:'$filters>/conditions/" + dimension + "', formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFilterCounts'}";
    },
    getInteractiveChartProperties: function (visualFilter) {
      const chartAnnotation = visualFilter.chartAnnotation;
      const interactiveChartProperties = {};
      if (visualFilter.chartMeasure && chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.Dimensions && chartAnnotation.Dimensions[0]) {
        var _visualFilter$metaPat, _dimension$$target2, _dimension$$target2$a, _dimension$$target2$a2, _dataPointAnnotation, _visualFilter$metaPat2, _visualFilter$metaPat3, _dataPointAnnotation2, _visualFilter$metaPat4;
        const id = generate([(_visualFilter$metaPat = visualFilter.metaPath) === null || _visualFilter$metaPat === void 0 ? void 0 : _visualFilter$metaPat.getPath()]);
        interactiveChartProperties.showErrorExpression = "${internal>" + id + "/showError}";
        interactiveChartProperties.errorMessageExpression = "{internal>" + id + "/errorMessage}";
        interactiveChartProperties.errorMessageTitleExpression = "{internal>" + id + "/errorMessageTitle}";
        let dataPointAnnotation;
        if (chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.MeasureAttributes && chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.MeasureAttributes[0]) {
          var _chartAnnotation$Meas18;
          dataPointAnnotation = chartAnnotation !== null && chartAnnotation !== void 0 && (_chartAnnotation$Meas18 = chartAnnotation.MeasureAttributes[0]) !== null && _chartAnnotation$Meas18 !== void 0 && _chartAnnotation$Meas18.DataPoint ? chartAnnotation === null || chartAnnotation === void 0 ? void 0 : chartAnnotation.MeasureAttributes[0].DataPoint.$target : chartAnnotation === null || chartAnnotation === void 0 ? void 0 : chartAnnotation.MeasureAttributes[0];
        }
        const dimension = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : chartAnnotation.Dimensions[0];
        const parameters = CommonHelper.getParameters(visualFilter.contextPath.getObject(), {
          context: visualFilter.contextPath
        });
        const dimensionText = dimension === null || dimension === void 0 ? void 0 : (_dimension$$target2 = dimension.$target) === null || _dimension$$target2 === void 0 ? void 0 : (_dimension$$target2$a = _dimension$$target2.annotations) === null || _dimension$$target2$a === void 0 ? void 0 : (_dimension$$target2$a2 = _dimension$$target2$a.Common) === null || _dimension$$target2$a2 === void 0 ? void 0 : _dimension$$target2$a2.Text;
        const contextObjectPath = getInvolvedDataModelObjects(visualFilter.metaPath, visualFilter.contextPath).targetObject;
        const collection = getInvolvedDataModelObjects(visualFilter.contextPath);
        const selectionVariant = visualFilter.selectionVariantAnnotation ? getInvolvedDataModelObjects(visualFilter.selectionVariantAnnotation) : undefined;
        const sortOrder = contextObjectPath.SortOrder;
        interactiveChartProperties.aggregationBinding = InteractiveChartHelper.getAggregationBinding(chartAnnotation, collection, visualFilter.contextPath, dimensionText, dimension.$target.type, sortOrder, selectionVariant, visualFilter.customAggregate, visualFilter.aggregateProperties, visualFilter.UoMHasCustomAggregate, parameters, visualFilter.filterBarEntityType, visualFilter.draftSupported, visualFilter.chartMeasure);
        interactiveChartProperties.scalefactor = InteractiveChartHelper.getScaleFactor((_dataPointAnnotation = dataPointAnnotation) === null || _dataPointAnnotation === void 0 ? void 0 : _dataPointAnnotation.ValueFormat);
        interactiveChartProperties.uom = InteractiveChartHelper.getUoM(chartAnnotation, collection, true, visualFilter.customAggregate, visualFilter.aggregateProperties);
        interactiveChartProperties.inParameters = CommonHelper.stringifyCustomData(visualFilter.inParameters);
        interactiveChartProperties.inParameterFilters = visualFilter.inParameters ? InteractiveChartHelper.getInParameterFiltersBinding(visualFilter.inParameters) : undefined;
        interactiveChartProperties.selectionVariantAnnotation = visualFilter.selectionVariantAnnotation ? CommonHelper.stringifyCustomData(visualFilter.selectionVariantAnnotation) : undefined;
        interactiveChartProperties.stringifiedParameters = CommonHelper.stringifyCustomData(parameters);
        const dimensionContext = (_visualFilter$metaPat2 = visualFilter.metaPath) === null || _visualFilter$metaPat2 === void 0 ? void 0 : (_visualFilter$metaPat3 = _visualFilter$metaPat2.getModel()) === null || _visualFilter$metaPat3 === void 0 ? void 0 : _visualFilter$metaPat3.createBindingContext(visualFilter.contextPath.getPath() + "/@" + dimension.fullyQualifiedName.split("@")[1]);
        if (dimensionContext) {
          const dimensionObject = getInvolvedDataModelObjects(dimensionContext, visualFilter.contextPath);
          interactiveChartProperties.chartLabel = getTextBinding(dimensionObject, {});
        }
        interactiveChartProperties.measure = InteractiveChartHelper.getChartValue(visualFilter.chartMeasure);
        interactiveChartProperties.displayedValue = InteractiveChartHelper.getChartDisplayedValue(visualFilter.chartMeasure, (_dataPointAnnotation2 = dataPointAnnotation) === null || _dataPointAnnotation2 === void 0 ? void 0 : _dataPointAnnotation2.ValueFormat, (_visualFilter$metaPat4 = visualFilter.metaPath) === null || _visualFilter$metaPat4 === void 0 ? void 0 : _visualFilter$metaPat4.getPath());
        interactiveChartProperties.color = InteractiveChartHelper.getColorBinding(dataPointAnnotation, dimension);
      }
      return interactiveChartProperties;
    }
  };
  return InteractiveChartHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/InteractiveChartHelper", ["sap/base/util/JSTokenizer","sap/fe/core/CommonUtils","sap/fe/core/controls/filterbar/utils/VisualFilterUtils","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/CriticalityFormatters","sap/fe/core/templating/FilterHelper","sap/fe/core/type/TypeUtil","sap/fe/macros/CommonHelper","sap/fe/macros/filter/FilterFieldHelper","sap/m/library","sap/ui/core/Core","sap/ui/core/format/NumberFormat","sap/ui/mdc/condition/ConditionConverter","sap/ui/model/odata/v4/ODataUtils","../field/FieldTemplating"],function(e,t,i,n,o,a,r,l,s,u,d,c,v,g,f,p,m){"use strict";var y=m.getTextBinding;var h=d.formatOptions;var C=d.constraints;var M=l.getFiltersConditionsFromSelectionVariant;var P=r.buildExpressionForCriticalityColorMicroChart;var T=a.isNavigationProperty;var b=a.isEntitySet;var $=o.generate;var D=n.getInvolvedDataModelObjects;const E={getChartDisplayedValue:function(e,t,i){const n=$([i]);return"{parts:[{path:'"+e+"',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}"+(t&&t.ScaleFactor?",{value:'"+t.ScaleFactor.valueOf()+"'}":",{path:'internal>scalefactorNumber/"+n+"'}")+(t&&t.NumberOfFractionalDigits?",{value:'"+t.NumberOfFractionalDigits+"'}":",{value:'0'}")+",{path:'internal>currency/"+n+"'}"+",{path:'"+e+"',type:'sap.ui.model.odata.type.String', constraints:{'nullable':false}}"+"], formatter:'VisualFilterRuntime.scaleVisualFilterValue'}"},getChartValue:function(e){return"{path:'"+e+"',type:'sap.ui.model.odata.type.Decimal', constraints:{'nullable':false}}"},_getCollectionName:function(e,t,i){const n=e.targetObject;if(T(n)){return i?t.getPath():n.name}else if(b(n)){return"/"+n.name}else{return n.name}},_getBindingPathForParameters:function(n,o,a,r,l){const u=[];const d=i.convertFilterCondions(n);const c=t.getParameterInfo(o,a).parameterProperties;if(c){for(const t in r){const i=r[t];const n=c[i];const a=l.split("/")[1];const v=o.createBindingContext(`/${a}/${i}`);const g=s.getTypeConfig(n.$Type,e.parseJS(h(n,{context:v})||"{}"),e.parseJS(C(n,{context:v})||"{}"));const m=d[i];const y=m?m[0]:undefined;if(y){const e=f.toType(y,g,s);const t=n.$Type;let o=encodeURIComponent(p.formatLiteral(e.values[0],t));o=o.replaceAll("'","\\'");u.push(`${i}=${o}`)}}}const v=a.slice(0,a.lastIndexOf("/"));const g=a.substring(a.lastIndexOf("/")+1);return`${v}(${u.toString()})/${g}`},_getUOMAggregationExpression:function(e,t,i,n){let o,a;const r=i&&typeof i!="string"&&i.path;if(e){if(t){o=r?`{ 'unit' : '${r}' }`:"{}";a=""}else{o="{}";a=r?`, '${r}' : {}`:""}}else if(n&&n.AggregatableProperty&&n.AggregatableProperty.value&&n.AggregationMethod){o="{ 'name' : '"+n.AggregatableProperty.value+"', 'with' : '"+n.AggregationMethod+"'}";a=r?", '"+r+"' : {}":""}return{aggregationExpression:o,UOMExpression:a}},getAggregationBinding:function(e,t,n,o,a,r,l,s,u,d,c,v,g,f){const p=l===null||l===void 0?void 0:l.targetObject;const m=v?v.getPath():"";const y=n.getPath();const h=e.Dimensions[0].value;const C=[];let P;let T=this._getCollectionName(t,n,c);const b=E.getUoM(e,t,undefined,s,u);const $=n.getModel();if(g){C.push({operator:"EQ",value1:"true",value2:null,path:"IsActiveEntity",isParameter:true})}if(p){P=M(y,$,p,i.getCustomConditions.bind(i));for(const e in P){const t=P[e];t.forEach(function(e){if(!e.isParameter){C.push(e)}})}}if(m!==`${T}/`&&c&&c.length&&P){const e=this._getBindingPathForParameters(P,$,T,c,y);T=e}const D=this._getUOMAggregationExpression(s,d,b,u);const O=D.aggregationExpression;const I=D.UOMExpression;const A=o?"' : { 'additionally' : ['"+o.path+"'] }":"' : { }";const F=JSON.stringify(C);return"{path: '"+T+"', templateShareable: true, suspended : true, 'filters' : "+F+",'parameters' : {"+E.getSortOrder(e,a,r,f)+", '$$aggregation' : {'aggregate' : {'"+f+"' : "+O+"},'group' : {'"+h+A+I+"} } }"+E.getMaxItems(e)+"}"},_getOrderExpressionFromMeasure:function(e,t){let i;if(e&&e.length){if(e[0].DynamicProperty){var n;i=(n=e[0].DynamicProperty.$target)===null||n===void 0?void 0:n.Name}else{var o;i=(o=e[0].Property)===null||o===void 0?void 0:o.value}if(i===t){return"'$orderby' : '"+t+(e[0].Descending?" desc'":"'")}return"'$orderby' : '"+t+" desc'"}return"'$orderby' : '"+t+" desc'"},getSortOrder:function(e,t,i,n){var o,a;if(e.ChartType==="UI.ChartType/Donut"||e.ChartType==="UI.ChartType/Bar"){return this._getOrderExpressionFromMeasure(i,n)}else if(t==="Edm.Date"||t==="Edm.Time"||t==="Edm.DateTimeOffset"){return"'$orderby' : '"+e.Dimensions[0].value+"'"}else if(i&&i.length&&((o=i[0].Property)===null||o===void 0?void 0:(a=o.$target)===null||a===void 0?void 0:a.path)===e.Dimensions[0].value){var r,l;return"'$orderby' : '"+((r=i[0].Property)===null||r===void 0?void 0:(l=r.$target)===null||l===void 0?void 0:l.name)+(i[0].Descending?" desc'":"'")}else{var s;return"'$orderby' : '"+((s=e.Dimensions[0].$target)===null||s===void 0?void 0:s.name)+"'"}},getMaxItems:function(e){if(e.ChartType==="UI.ChartType/Bar"){return",'startIndex' : 0,'length' : 3"}else if(e.ChartType==="UI.ChartType/Line"){return",'startIndex' : 0,'length' : 6"}else{return""}},getColorBinding:function(e,t){var i,n,o;const a=t===null||t===void 0?void 0:(i=t.$target)===null||i===void 0?void 0:(n=i.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.ValueCriticality;if(e!==null&&e!==void 0&&e.Criticality){return P(e)}else if(e!==null&&e!==void 0&&e.CriticalityCalculation){const t=e.CriticalityCalculation.ImprovementDirection;const i=e.Value;const n=e.CriticalityCalculation.DeviationRangeLowValue.valueOf();const o=e.CriticalityCalculation.ToleranceRangeLowValue.valueOf();const a=e.CriticalityCalculation.AcceptanceRangeLowValue.valueOf();const r=e.CriticalityCalculation.AcceptanceRangeHighValue.valueOf();const l=e.CriticalityCalculation.ToleranceRangeHighValue.valueOf();const s=e.CriticalityCalculation.DeviationRangeHighValue.valueOf();return u.getCriticalityCalculationBinding(t,i,n,o,a,r,l,s)}else if(a&&a.length){return E.getValueCriticality(t.value,a)}else{return undefined}},getValueCriticality:function(e,t){let i;const n=[];if(t&&t.length>0){t.forEach(function(t){if(t.Value&&t.Criticality){const i="${"+e+"} === '"+t.Value+"' ? '"+E._getCriticalityFromEnum(t.Criticality)+"'";n.push(i)}});i=n.length>0&&n.join(" : ")+" : undefined"}return i?"{= "+i+" }":undefined},_getCriticalityFromEnum:function(e){const t=c.ValueColor;let i;if(e==="UI.CriticalityType/Negative"){i=t.Error}else if(e==="UI.CriticalityType/Positive"){i=t.Good}else if(e==="UI.CriticalityType/Critical"){i=t.Critical}else{i=t.Neutral}return i},getScaleUoMTitle:function(e,t,i,n,o,a,r){var l,s,u,d,c;const v=e!==null&&e!==void 0&&e.MeasureAttributes?(l=e.MeasureAttributes[0])===null||l===void 0?void 0:(s=l.DataPoint)===null||s===void 0?void 0:(u=s.$target)===null||u===void 0?void 0:(d=u.ValueFormat)===null||d===void 0?void 0:(c=d.ScaleFactor)===null||c===void 0?void 0:c.valueOf():undefined;const f=$([i]);const p=g.getIntegerInstance({style:"short",showScale:false,shortRefNumber:v});let m=p.getScale();let y=E.getUoM(e,t,undefined,n,o);y=y&&(y.path?"${internal>uom/"+f+"}":"'"+y+"'");m=m?"'"+m+"'":"${internal>scalefactor/"+f+"}";if(!a){a="|"}a="' "+a+" ' + ";const h=m&&y?a+m+" + ' ' + "+y:a+(m||y);return r?h:"{= "+h+"}"},getMeasureDimensionTitle:function(e,t,i){var n,o,a,r,l;let s;let u;if(t){var d,c;u=e===null||e===void 0?void 0:(d=e.Measures[0])===null||d===void 0?void 0:(c=d.$target)===null||c===void 0?void 0:c.name}if(e!==null&&e!==void 0&&e.DynamicMeasures&&e.DynamicMeasures.length>0){var g,f,p;u=(g=e.DynamicMeasures[0])===null||g===void 0?void 0:(f=g.$target)===null||f===void 0?void 0:(p=f.AggregatableProperty)===null||p===void 0?void 0:p.value}else if(!t&&e!==null&&e!==void 0&&e.Measures&&(e===null||e===void 0?void 0:e.Measures.length)>0){var m,y;u=(m=e.Measures[0])===null||m===void 0?void 0:(y=m.$target)===null||y===void 0?void 0:y.name}const h=e===null||e===void 0?void 0:(n=e.Dimensions[0])===null||n===void 0?void 0:n.value;let C=e===null||e===void 0?void 0:(o=e.Dimensions[0])===null||o===void 0?void 0:(a=o.$target)===null||a===void 0?void 0:(r=a.annotations)===null||r===void 0?void 0:(l=r.Common)===null||l===void 0?void 0:l.Label;if(!t&&i){s=i.annotations&&i.annotations.Common&&i.annotations.Common.Label;if(s===undefined){var M,P,T,b;s=e===null||e===void 0?void 0:(M=e.Measures[0])===null||M===void 0?void 0:(P=M.$target)===null||P===void 0?void 0:(T=P.annotations)===null||T===void 0?void 0:(b=T.Common)===null||b===void 0?void 0:b.Label}}else{var $,D,E,O;s=e===null||e===void 0?void 0:($=e.Measures[0])===null||$===void 0?void 0:(D=$.$target)===null||D===void 0?void 0:(E=D.annotations)===null||E===void 0?void 0:(O=E.Common)===null||O===void 0?void 0:O.Label}if(s===undefined){s=u}if(C===undefined){C=h}return v.getLibraryResourceBundle("sap.fe.macros").getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_MEASURE_DIMENSION_TITLE",[s,C])},getToolTip:function(e,t,i,n,o,a){const r=e&&e["ChartType"];let l=E.getMeasureDimensionTitle(e,n,o);l=u.escapeSingleQuotes(l);if(a==="false"&&r==="UI.ChartType/Line"){return`{= '${l}'}`}const s=v.getLibraryResourceBundle("sap.fe.macros").getText("M_INTERACTIVE_CHART_HELPER_VISUALFILTER_TOOLTIP_SEPERATOR");const d=$([i]);const c=E.getScaleUoMTitle(e,t,d,n,o,s,true);return"{= '"+l+(c?"' + "+c:"'")+"}"},_getUOM:function(e,t,i,n,o){const a={};const r=i===null||i===void 0?void 0:i.targetObject;if(e&&t){a[t]={$Path:e.path};return n&&e.path?JSON.stringify(a):e}else if(o){var l,s;const i=r.entityType?r.entityType.entityProperties:(l=r.targetType)===null||l===void 0?void 0:l.entityProperties;const c=i===null||i===void 0?void 0:i.find(e=>e.name==o);if(c!==null&&c!==void 0&&(s=c.annotations)!==null&&s!==void 0&&s.Measures&&t){var u,d;e=c===null||c===void 0?void 0:(u=c.annotations)===null||u===void 0?void 0:u.Measures[t];a[t]={$Path:(d=e)===null||d===void 0?void 0:d.path}}return e&&n&&e.path?JSON.stringify(a):e}},getUoM:function(e,t,i,n,o){var a,r;let l={};if(n){l=e===null||e===void 0?void 0:e.Measures[0]}if(e!==null&&e!==void 0&&e.DynamicMeasures&&e.DynamicMeasures.length>0){var s,u,d,c,v;l=(s=e.DynamicMeasures[0])===null||s===void 0?void 0:(u=s.$target)===null||u===void 0?void 0:(d=u.AggregatableProperty)===null||d===void 0?void 0:(c=d.$target)===null||c===void 0?void 0:(v=c.annotations)===null||v===void 0?void 0:v.Measures}else if(!n&&e!==null&&e!==void 0&&e.Measures&&e.Measures.length>0){l=e.Measures[0]}const g=(a=l)===null||a===void 0?void 0:a.ISOCurrency;const f=(r=l)===null||r===void 0?void 0:r.Unit;let p;if(!n&&o){p=o.AggregatableProperty&&o.AggregatableProperty.value}else{var m;p=(m=l)===null||m===void 0?void 0:m.value}return this._getUOM(g,"ISOCurrency",t,i,p)||this._getUOM(f,"Unit",t,i,p)},getScaleFactor:function(e){if(e&&e.ScaleFactor){return e.ScaleFactor.valueOf()}return undefined},getUoMVisiblity:function(e,t){const i=e&&e["ChartType"];if(t){return false}else if(!(i==="UI.ChartType/Bar"||i==="UI.ChartType/Line")){return false}else{return true}},getInParameterFiltersBinding:function(e){if(e.length>0){const t=[];let i="";e.forEach(function(e){if(e.localDataProperty){t.push(`{path:'$filters>/conditions/${e.localDataProperty}'}`)}});if(t.length>0){i=t.join();return`{parts:[${i}], formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFiltersFromConditions'}`}else{return undefined}}else{return undefined}},getfilterCountBinding:function(e){var t,i;const n=e===null||e===void 0?void 0:(t=e.Dimensions[0])===null||t===void 0?void 0:(i=t.$target)===null||i===void 0?void 0:i.name;return"{path:'$filters>/conditions/"+n+"', formatter:'sap.fe.macros.visualfilters.VisualFilterRuntime.getFilterCounts'}"},getInteractiveChartProperties:function(e){const t=e.chartAnnotation;const i={};if(e.chartMeasure&&t!==null&&t!==void 0&&t.Dimensions&&t.Dimensions[0]){var n,o,a,r,l,s,d,c,v;const f=$([(n=e.metaPath)===null||n===void 0?void 0:n.getPath()]);i.showErrorExpression="${internal>"+f+"/showError}";i.errorMessageExpression="{internal>"+f+"/errorMessage}";i.errorMessageTitleExpression="{internal>"+f+"/errorMessageTitle}";let p;if(t!==null&&t!==void 0&&t.MeasureAttributes&&t!==null&&t!==void 0&&t.MeasureAttributes[0]){var g;p=t!==null&&t!==void 0&&(g=t.MeasureAttributes[0])!==null&&g!==void 0&&g.DataPoint?t===null||t===void 0?void 0:t.MeasureAttributes[0].DataPoint.$target:t===null||t===void 0?void 0:t.MeasureAttributes[0]}const m=t===null||t===void 0?void 0:t.Dimensions[0];const h=u.getParameters(e.contextPath.getObject(),{context:e.contextPath});const C=m===null||m===void 0?void 0:(o=m.$target)===null||o===void 0?void 0:(a=o.annotations)===null||a===void 0?void 0:(r=a.Common)===null||r===void 0?void 0:r.Text;const M=D(e.metaPath,e.contextPath).targetObject;const P=D(e.contextPath);const T=e.selectionVariantAnnotation?D(e.selectionVariantAnnotation):undefined;const b=M.SortOrder;i.aggregationBinding=E.getAggregationBinding(t,P,e.contextPath,C,m.$target.type,b,T,e.customAggregate,e.aggregateProperties,e.UoMHasCustomAggregate,h,e.filterBarEntityType,e.draftSupported,e.chartMeasure);i.scalefactor=E.getScaleFactor((l=p)===null||l===void 0?void 0:l.ValueFormat);i.uom=E.getUoM(t,P,true,e.customAggregate,e.aggregateProperties);i.inParameters=u.stringifyCustomData(e.inParameters);i.inParameterFilters=e.inParameters?E.getInParameterFiltersBinding(e.inParameters):undefined;i.selectionVariantAnnotation=e.selectionVariantAnnotation?u.stringifyCustomData(e.selectionVariantAnnotation):undefined;i.stringifiedParameters=u.stringifyCustomData(h);const O=(s=e.metaPath)===null||s===void 0?void 0:(d=s.getModel())===null||d===void 0?void 0:d.createBindingContext(e.contextPath.getPath()+"/@"+m.fullyQualifiedName.split("@")[1]);if(O){const t=D(O,e.contextPath);i.chartLabel=y(t,{})}i.measure=E.getChartValue(e.chartMeasure);i.displayedValue=E.getChartDisplayedValue(e.chartMeasure,(c=p)===null||c===void 0?void 0:c.ValueFormat,(v=e.metaPath)===null||v===void 0?void 0:v.getPath());i.color=E.getColorBinding(p,m)}return i}};return E},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/VisualFilter.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/controls/Common/DataVisualization", "sap/fe/core/converters/helpers/Aggregation", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "./fragments/InteractiveBarChart", "./fragments/InteractiveChartWithError", "./fragments/InteractiveLineChart", "./InteractiveChartHelper"], function (Log, BuildingBlockBase, BuildingBlockSupport, BuildingBlockTemplateProcessor, DataVisualization, Aggregation, MetaModelConverter, ModelHelper, StableIdHelper, InteractiveBarChart, InteractiveChartWithError, InteractiveLineChart, InteractiveChartHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24;
  var _exports = {};
  var getInteractiveLineChartTemplate = InteractiveLineChart.getInteractiveLineChartTemplate;
  var getInteractiveChartWithErrorTemplate = InteractiveChartWithError.getInteractiveChartWithErrorTemplate;
  var getInteractiveBarChartTemplate = InteractiveBarChart.getInteractiveBarChartTemplate;
  var generate = StableIdHelper.generate;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var AggregationHelper = Aggregation.AggregationHelper;
  var getDefaultSelectionVariant = DataVisualization.getDefaultSelectionVariant;
  var xml = BuildingBlockTemplateProcessor.xml;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let VisualFilterBlock = (
  /**
   * Building block for creating a VisualFilter based on the metadata provided by OData V4.
   * <br>
   * A Chart annotation is required to bring up an interactive chart
   *
   *
   * Usage example:
   * <pre>
   * &lt;macro:VisualFilter
   *   collection="{entitySet&gt;}"
   *   chartAnnotation="{chartAnnotation&gt;}"
   *   id="someID"
   *   groupId="someGroupID"
   *   title="some Title"
   * /&gt;
   * </pre>
   *
   * @private
   * @experimental
   */
  _dec = defineBuildingBlock({
    name: "VisualFilter",
    namespace: "sap.fe.macros"
  }), _dec2 = blockAttribute({
    type: "string",
    required: true
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true,
    expectedTypes: ["EntitySet", "NavigationProperty"]
  }), _dec5 = blockAttribute({
    type: "sap.ui.model.Context",
    required: true
  }), _dec6 = blockAttribute({
    type: "string"
  }), _dec7 = blockAttribute({
    type: "string"
  }), _dec8 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec9 = blockAttribute({
    type: "array"
  }), _dec10 = blockAttribute({
    type: "boolean"
  }), _dec11 = blockAttribute({
    type: "boolean"
  }), _dec12 = blockAttribute({
    type: "boolean"
  }), _dec13 = blockAttribute({
    type: "string"
  }), _dec14 = blockAttribute({
    type: "string"
  }), _dec15 = blockAttribute({
    type: "sap.ui.model.Context"
  }), _dec16 = blockAttribute({
    type: "boolean"
  }), _dec17 = blockAttribute({
    type: "string"
  }), _dec18 = blockAttribute({
    type: "boolean"
  }), _dec19 = blockAttribute({
    type: "boolean"
  }), _dec20 = blockAttribute({
    type: "boolean"
  }), _dec21 = blockAttribute({
    type: "string"
  }), _dec22 = blockAttribute({
    type: "string"
  }), _dec23 = blockAttribute({
    type: "string"
  }), _dec24 = blockAttribute({
    type: "boolean"
  }), _dec25 = blockAttribute({
    type: "boolean"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(VisualFilterBlock, _BuildingBlockBase);
    function VisualFilterBlock(props, configuration, mSettings) {
      var _this$metaPath, _this$chartAnnotation, _this$chartAnnotation2, _this$chartAnnotation4, _this$chartAnnotation5, _this$chartAnnotation6, _this$chartAnnotation7, _visualizations$, _visualizations$$$tar, _visualizations$2, _visualizations$2$$ta, _visualizations$2$$ta2, _visualizations$2$$ta3, _aggregation$Aggregat, _aggregation$Aggregat2, _propertyAnnotations$, _aggregatableProperty, _this$chartAnnotation8, _this$contextPath;
      var _this;
      _this = _BuildingBlockBase.call(this, props, configuration, mSettings) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "metaPath", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "outParameter", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "valuelistProperty", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "selectionVariantAnnotation", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "inParameters", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "multipleSelectionAllowed", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "required", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showOverlayInitially", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "renderLineChart", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "requiredProperties", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "filterBarEntityType", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showError", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "chartMeasure", _descriptor16, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "UoMHasCustomAggregate", _descriptor17, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showValueHelp", _descriptor18, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "customAggregate", _descriptor19, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "groupId", _descriptor20, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "errorMessageTitle", _descriptor21, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "errorMessage", _descriptor22, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "draftSupported", _descriptor23, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isValueListWithFixedValues", _descriptor24, _assertThisInitialized(_this));
      _this.groupId = "$auto.visualFilters";
      _this.path = (_this$metaPath = _this.metaPath) === null || _this$metaPath === void 0 ? void 0 : _this$metaPath.getPath();
      const contextObjectPath = getInvolvedDataModelObjects(_this.metaPath, _this.contextPath);
      const converterContext = _this.getConverterContext(contextObjectPath, undefined, mSettings);
      const aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext);
      const customAggregates = aggregationHelper.getCustomAggregateDefinitions();
      const pvAnnotation = contextObjectPath.targetObject;
      let measure;
      const visualizations = pvAnnotation && pvAnnotation.Visualizations;
      _this.getChartAnnotation(visualizations, converterContext);
      let aggregations,
        custAggMeasure = [];
      if ((_this$chartAnnotation = _this.chartAnnotation) !== null && _this$chartAnnotation !== void 0 && (_this$chartAnnotation2 = _this$chartAnnotation.Measures) !== null && _this$chartAnnotation2 !== void 0 && _this$chartAnnotation2.length) {
        custAggMeasure = customAggregates.filter(custAgg => {
          var _this$chartAnnotation3;
          return custAgg.qualifier === ((_this$chartAnnotation3 = _this.chartAnnotation) === null || _this$chartAnnotation3 === void 0 ? void 0 : _this$chartAnnotation3.Measures[0].value);
        });
        measure = custAggMeasure.length > 0 ? custAggMeasure[0].qualifier : _this.chartAnnotation.Measures[0].value;
        aggregations = aggregationHelper.getAggregatedProperties("AggregatedProperties")[0];
      }
      // if there are AggregatedProperty objects but no dynamic measures, rather there are transformation aggregates found in measures
      if (aggregations && aggregations.length > 0 && !((_this$chartAnnotation4 = _this.chartAnnotation) !== null && _this$chartAnnotation4 !== void 0 && _this$chartAnnotation4.DynamicMeasures) && custAggMeasure.length === 0 && (_this$chartAnnotation5 = _this.chartAnnotation) !== null && _this$chartAnnotation5 !== void 0 && _this$chartAnnotation5.Measures && ((_this$chartAnnotation6 = _this.chartAnnotation) === null || _this$chartAnnotation6 === void 0 ? void 0 : _this$chartAnnotation6.Measures.length) > 0) {
        Log.warning("The transformational aggregate measures are configured as Chart.Measures but should be configured as Chart.DynamicMeasures instead. Please check the SAP Help documentation and correct the configuration accordingly.");
      }
      //if the chart has dynamic measures, but with no other custom aggregate measures then consider the dynamic measures
      if ((_this$chartAnnotation7 = _this.chartAnnotation) !== null && _this$chartAnnotation7 !== void 0 && _this$chartAnnotation7.DynamicMeasures) {
        if (custAggMeasure.length === 0) {
          measure = converterContext.getConverterContextFor(converterContext.getAbsoluteAnnotationPath(_this.chartAnnotation.DynamicMeasures[0].value)).getDataModelObjectPath().targetObject.Name;
          aggregations = aggregationHelper.getAggregatedProperties("AggregatedProperty");
        } else {
          Log.warning("The dynamic measures have been ignored as visual filters can deal with only 1 measure and the first (custom aggregate) measure defined under Chart.Measures is considered.");
        }
      }
      if (customAggregates.some(function (custAgg) {
        return custAgg.qualifier === measure;
      })) {
        _this.customAggregate = true;
      }
      const defaultSelectionVariant = getDefaultSelectionVariant(converterContext.getEntityType());
      _this.checkSelectionVariant(defaultSelectionVariant);
      const aggregation = _this.getAggregateProperties(aggregations, measure);
      if (aggregation) {
        _this.aggregateProperties = aggregation;
      }
      const propertyAnnotations = visualizations && ((_visualizations$ = visualizations[0]) === null || _visualizations$ === void 0 ? void 0 : (_visualizations$$$tar = _visualizations$.$target) === null || _visualizations$$$tar === void 0 ? void 0 : _visualizations$$$tar.Measures) && ((_visualizations$2 = visualizations[0]) === null || _visualizations$2 === void 0 ? void 0 : (_visualizations$2$$ta = _visualizations$2.$target) === null || _visualizations$2$$ta === void 0 ? void 0 : (_visualizations$2$$ta2 = _visualizations$2$$ta.Measures[0]) === null || _visualizations$2$$ta2 === void 0 ? void 0 : (_visualizations$2$$ta3 = _visualizations$2$$ta2.$target) === null || _visualizations$2$$ta3 === void 0 ? void 0 : _visualizations$2$$ta3.annotations);
      const aggregatablePropertyAnnotations = aggregation === null || aggregation === void 0 ? void 0 : (_aggregation$Aggregat = aggregation.AggregatableProperty) === null || _aggregation$Aggregat === void 0 ? void 0 : (_aggregation$Aggregat2 = _aggregation$Aggregat.$target) === null || _aggregation$Aggregat2 === void 0 ? void 0 : _aggregation$Aggregat2.annotations;
      _this.checkIfUOMHasCustomAggregate(customAggregates, propertyAnnotations, aggregatablePropertyAnnotations);
      const propertyHidden = propertyAnnotations === null || propertyAnnotations === void 0 ? void 0 : (_propertyAnnotations$ = propertyAnnotations.UI) === null || _propertyAnnotations$ === void 0 ? void 0 : _propertyAnnotations$.Hidden;
      const aggregatablePropertyHidden = aggregatablePropertyAnnotations === null || aggregatablePropertyAnnotations === void 0 ? void 0 : (_aggregatableProperty = aggregatablePropertyAnnotations.UI) === null || _aggregatableProperty === void 0 ? void 0 : _aggregatableProperty.Hidden;
      const hiddenMeasure = _this.getHiddenMeasure(propertyHidden, aggregatablePropertyHidden, _this.customAggregate);
      const chartType = (_this$chartAnnotation8 = _this.chartAnnotation) === null || _this$chartAnnotation8 === void 0 ? void 0 : _this$chartAnnotation8.ChartType;
      _this.chartType = chartType;
      _this.showValueHelp = _this.getShowValueHelp(chartType, hiddenMeasure);
      _this.draftSupported = ModelHelper.isDraftSupported(mSettings.models.metaModel, (_this$contextPath = _this.contextPath) === null || _this$contextPath === void 0 ? void 0 : _this$contextPath.getPath());
      /**
       * If the measure of the chart is marked as 'hidden', or if the chart type is invalid, or if the data type for the line chart is invalid,
       * the call is made to the InteractiveChartWithError fragment (using error-message related APIs, but avoiding batch calls)
       */
      _this.errorMessage = _this.getErrorMessage(hiddenMeasure, measure);
      _this.chartMeasure = measure;
      _this.measureDimensionTitle = InteractiveChartHelper.getMeasureDimensionTitle(_this.chartAnnotation, _this.customAggregate, _this.aggregateProperties);
      const collection = getInvolvedDataModelObjects(_this.contextPath);
      _this.toolTip = InteractiveChartHelper.getToolTip(_this.chartAnnotation, collection, _this.path, _this.customAggregate, _this.aggregateProperties, _this.renderLineChart);
      _this.UoMVisibility = InteractiveChartHelper.getUoMVisiblity(_this.chartAnnotation, _this.showError);
      _this.scaleUoMTitle = InteractiveChartHelper.getScaleUoMTitle(_this.chartAnnotation, collection, _this.path, _this.customAggregate, _this.aggregateProperties);
      _this.filterCountBinding = InteractiveChartHelper.getfilterCountBinding(_this.chartAnnotation);
      return _this;
    }
    _exports = VisualFilterBlock;
    var _proto = VisualFilterBlock.prototype;
    _proto.checkIfUOMHasCustomAggregate = function checkIfUOMHasCustomAggregate(customAggregates, propertyAnnotations, aggregatablePropertyAnnotations) {
      const measures = propertyAnnotations === null || propertyAnnotations === void 0 ? void 0 : propertyAnnotations.Measures;
      const aggregatablePropertyMeasures = aggregatablePropertyAnnotations === null || aggregatablePropertyAnnotations === void 0 ? void 0 : aggregatablePropertyAnnotations.Measures;
      const UOM = this.getUoM(measures, aggregatablePropertyMeasures);
      if (UOM && customAggregates.some(function (custAgg) {
        return custAgg.qualifier === UOM;
      })) {
        this.UoMHasCustomAggregate = true;
      } else {
        this.UoMHasCustomAggregate = false;
      }
    };
    _proto.getChartAnnotation = function getChartAnnotation(visualizations, converterContext) {
      if (visualizations) {
        for (let i = 0; i < visualizations.length; i++) {
          const sAnnotationPath = visualizations[i] && visualizations[i].value;
          this.chartAnnotation = converterContext.getEntityTypeAnnotation(sAnnotationPath) && converterContext.getEntityTypeAnnotation(sAnnotationPath).annotation;
        }
      }
    };
    _proto.getErrorMessage = function getErrorMessage(hiddenMeasure, measure) {
      let validChartType;
      if (this.chartAnnotation) {
        if (this.chartAnnotation.ChartType === "UI.ChartType/Line" || this.chartAnnotation.ChartType === "UI.ChartType/Bar") {
          validChartType = true;
        } else {
          validChartType = false;
        }
      }
      if (typeof hiddenMeasure === "boolean" && hiddenMeasure || !validChartType || this.renderLineChart === "false") {
        this.showError = true;
        this.errorMessageTitle = hiddenMeasure || !validChartType ? this.getTranslatedText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE") : this.getTranslatedText("M_VISUAL_FILTER_LINE_CHART_INVALID_DATATYPE");
        if (hiddenMeasure) {
          return this.getTranslatedText("M_VISUAL_FILTER_HIDDEN_MEASURE", [measure]);
        } else if (!validChartType) {
          return this.getTranslatedText("M_VISUAL_FILTER_UNSUPPORTED_CHART_TYPE");
        } else {
          return this.getTranslatedText("M_VISUAL_FILTER_LINE_CHART_UNSUPPORTED_DIMENSION");
        }
      }
    };
    _proto.getShowValueHelp = function getShowValueHelp(chartType, hiddenMeasure) {
      var _this$chartAnnotation9, _this$chartAnnotation10;
      const sDimensionType = ((_this$chartAnnotation9 = this.chartAnnotation) === null || _this$chartAnnotation9 === void 0 ? void 0 : _this$chartAnnotation9.Dimensions[0]) && ((_this$chartAnnotation10 = this.chartAnnotation) === null || _this$chartAnnotation10 === void 0 ? void 0 : _this$chartAnnotation10.Dimensions[0].$target) && this.chartAnnotation.Dimensions[0].$target.type;
      if (sDimensionType === "Edm.Date" || sDimensionType === "Edm.Time" || sDimensionType === "Edm.DateTimeOffset") {
        return false;
      } else if (typeof hiddenMeasure === "boolean" && hiddenMeasure) {
        return false;
      } else if (!(chartType === "UI.ChartType/Bar" || chartType === "UI.ChartType/Line")) {
        return false;
      } else if (this.renderLineChart === "false" && chartType === "UI.ChartType/Line") {
        return false;
      } else if (this.isValueListWithFixedValues === true) {
        return false;
      } else {
        return true;
      }
    };
    _proto.checkSelectionVariant = function checkSelectionVariant(defaultSelectionVariant) {
      let selectionVariant;
      if (this.selectionVariantAnnotation) {
        var _this$metaPath2;
        const selectionVariantContext = (_this$metaPath2 = this.metaPath) === null || _this$metaPath2 === void 0 ? void 0 : _this$metaPath2.getModel().createBindingContext(this.selectionVariantAnnotation.getPath());
        selectionVariant = selectionVariantContext && getInvolvedDataModelObjects(selectionVariantContext, this.contextPath).targetObject;
      }
      if (!selectionVariant && defaultSelectionVariant) {
        selectionVariant = defaultSelectionVariant;
      }
      if (selectionVariant && selectionVariant.SelectOptions && !this.multipleSelectionAllowed) {
        for (const selectOption of selectionVariant.SelectOptions) {
          var _this$chartAnnotation11;
          if (selectOption.PropertyName.value === ((_this$chartAnnotation11 = this.chartAnnotation) === null || _this$chartAnnotation11 === void 0 ? void 0 : _this$chartAnnotation11.Dimensions[0].value)) {
            if (selectOption.Ranges.length > 1) {
              Log.error("Multiple SelectOptions for FilterField having SingleValue Allowed Expression");
            }
          }
        }
      }
    };
    _proto.getAggregateProperties = function getAggregateProperties(aggregations, measure) {
      let matchedAggregate;
      if (!aggregations) {
        return;
      }
      aggregations.some(function (aggregate) {
        if (aggregate.Name === measure) {
          matchedAggregate = aggregate;
          return true;
        }
      });
      return matchedAggregate;
    };
    _proto.getUoM = function getUoM(measures, aggregatablePropertyMeasures) {
      var _ISOCurrency, _unit;
      let ISOCurrency = measures === null || measures === void 0 ? void 0 : measures.ISOCurrency;
      let unit = measures === null || measures === void 0 ? void 0 : measures.Unit;
      if (!ISOCurrency && !unit && aggregatablePropertyMeasures) {
        ISOCurrency = aggregatablePropertyMeasures.ISOCurrency;
        unit = aggregatablePropertyMeasures.Unit;
      }
      return ((_ISOCurrency = ISOCurrency) === null || _ISOCurrency === void 0 ? void 0 : _ISOCurrency.path) || ((_unit = unit) === null || _unit === void 0 ? void 0 : _unit.path);
    };
    _proto.getHiddenMeasure = function getHiddenMeasure(propertyHidden, aggregatablePropertyHidden, customAggregate) {
      if (!customAggregate && aggregatablePropertyHidden) {
        return aggregatablePropertyHidden.valueOf();
      } else {
        return propertyHidden === null || propertyHidden === void 0 ? void 0 : propertyHidden.valueOf();
      }
    };
    _proto.getRequired = function getRequired() {
      if (this.required) {
        return xml`<Label text="" width="0.5rem" required="true">
							<layoutData>
								<OverflowToolbarLayoutData priority="Never" />
							</layoutData>
						</Label>`;
      } else {
        return "";
      }
    };
    _proto.getUoMTitle = function getUoMTitle(showErrorExpression) {
      if (this.UoMVisibility) {
        return xml`<Title
							id="${generate([this.id, "ScaleUoMTitle"])}"
							visible="{= !${showErrorExpression}}"
							text="${this.scaleUoMTitle}"
							titleStyle="H6"
							level="H3"
							width="4.15rem"
						/>`;
      } else {
        return "";
      }
    };
    _proto.getValueHelp = function getValueHelp(showErrorExpression) {
      if (this.showValueHelp) {
        return xml`<ToolbarSpacer />
						<Button
							id="${generate([this.id, "VisualFilterValueHelpButton"])}"
							type="Transparent"
							ariaHasPopup="Dialog"
							text="${this.filterCountBinding}"
							press="VisualFilterRuntime.fireValueHelp"
							enabled="{= !${showErrorExpression}}"
							customData:multipleSelectionAllowed="${this.multipleSelectionAllowed}"
						>
							<layoutData>
								<OverflowToolbarLayoutData priority="Never" />
							</layoutData>
						</Button>`;
      } else {
        return "";
      }
    };
    _proto.getInteractiveChartFragment = function getInteractiveChartFragment() {
      if (this.showError) {
        return getInteractiveChartWithErrorTemplate(this);
      } else if (this.chartType === "UI.ChartType/Bar") {
        return getInteractiveBarChartTemplate(this);
      } else if (this.chartType === "UI.ChartType/Line") {
        return getInteractiveLineChartTemplate(this);
      }
      return "";
    };
    _proto.getTemplate = function getTemplate() {
      const id = generate([this.path]);
      const showErrorExpression = "${internal>" + id + "/showError}";
      return xml`
		<control:VisualFilter
		core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
		xmlns="sap.m"
		xmlns:control="sap.fe.core.controls.filterbar"
		xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		xmlns:core="sap.ui.core"
		id="${this.id}"
		height="13rem"
		width="20.5rem"
		class="sapUiSmallMarginBeginEnd"
		customData:infoPath="${generate([this.path])}"
	>
		<VBox height="2rem" class="sapUiSmallMarginBottom">
			<OverflowToolbar style="Clear">
				${this.getRequired()}
				<Title
					id="${generate([this.id, "MeasureDimensionTitle"])}"
					text="${this.measureDimensionTitle}"
					tooltip="${this.toolTip}"
					titleStyle="H6"
					level="H3"
					class="sapUiTinyMarginEnd sapUiNoMarginBegin"
				/>
				${this.getUoMTitle(showErrorExpression)}
				${this.getValueHelp(showErrorExpression)}
			</OverflowToolbar>
		</VBox>
		<VBox height="100%" width="100%">
			${this.getInteractiveChartFragment()}
		</VBox>
	</control:VisualFilter>`;
    };
    return VisualFilterBlock;
  }(BuildingBlockBase), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "metaPath", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "outParameter", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "valuelistProperty", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "selectionVariantAnnotation", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "inParameters", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "multipleSelectionAllowed", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "required", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "showOverlayInitially", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "renderLineChart", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "requiredProperties", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "filterBarEntityType", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "showError", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "chartMeasure", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor17 = _applyDecoratedDescriptor(_class2.prototype, "UoMHasCustomAggregate", [_dec18], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor18 = _applyDecoratedDescriptor(_class2.prototype, "showValueHelp", [_dec19], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor19 = _applyDecoratedDescriptor(_class2.prototype, "customAggregate", [_dec20], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return false;
    }
  }), _descriptor20 = _applyDecoratedDescriptor(_class2.prototype, "groupId", [_dec21], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "$auto.visualFilters";
    }
  }), _descriptor21 = _applyDecoratedDescriptor(_class2.prototype, "errorMessageTitle", [_dec22], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor22 = _applyDecoratedDescriptor(_class2.prototype, "errorMessage", [_dec23], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor23 = _applyDecoratedDescriptor(_class2.prototype, "draftSupported", [_dec24], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor24 = _applyDecoratedDescriptor(_class2.prototype, "isValueListWithFixedValues", [_dec25], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = VisualFilterBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/VisualFilter.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/controls/Common/DataVisualization","sap/fe/core/converters/helpers/Aggregation","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","./fragments/InteractiveBarChart","./fragments/InteractiveChartWithError","./fragments/InteractiveLineChart","./InteractiveChartHelper"],function(e,t,r,i,a,n,o,l,u,s,c,g,p){"use strict";var d,h,f,v,m,b,y,T,A,M,w,C,P,I,V,E,S,U,D,x,z,H,B,L,O,_,$,F,R,q,N,k,j,W,Y,G,J,K,Q,X,Z,ee,te,re,ie,ae,ne,oe,le,ue,se;var ce={};var ge=g.getInteractiveLineChartTemplate;var pe=c.getInteractiveChartWithErrorTemplate;var de=s.getInteractiveBarChartTemplate;var he=u.generate;var fe=o.getInvolvedDataModelObjects;var ve=n.AggregationHelper;var me=a.getDefaultSelectionVariant;var be=i.xml;var ye=r.defineBuildingBlock;var Te=r.blockAttribute;function Ae(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function Me(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function we(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Ce(e,t)}function Ce(e,t){Ce=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return Ce(e,t)}function Pe(e,t,r,i,a){var n={};Object.keys(i).forEach(function(e){n[e]=i[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},n);if(a&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(a):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function Ie(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let Ve=(d=ye({name:"VisualFilter",namespace:"sap.fe.macros"}),h=Te({type:"string",required:true}),f=Te({type:"string"}),v=Te({type:"sap.ui.model.Context",required:true,expectedTypes:["EntitySet","NavigationProperty"]}),m=Te({type:"sap.ui.model.Context",required:true}),b=Te({type:"string"}),y=Te({type:"string"}),T=Te({type:"sap.ui.model.Context"}),A=Te({type:"array"}),M=Te({type:"boolean"}),w=Te({type:"boolean"}),C=Te({type:"boolean"}),P=Te({type:"string"}),I=Te({type:"string"}),V=Te({type:"sap.ui.model.Context"}),E=Te({type:"boolean"}),S=Te({type:"string"}),U=Te({type:"boolean"}),D=Te({type:"boolean"}),x=Te({type:"boolean"}),z=Te({type:"string"}),H=Te({type:"string"}),B=Te({type:"string"}),L=Te({type:"boolean"}),O=Te({type:"boolean"}),d(_=($=function(t){we(r,t);function r(r,i,a){var n,o,u,s,c,g,d,h,f,v,m,b,y,T,A,M,w,C,P;var I;I=t.call(this,r,i,a)||this;Ae(I,"id",F,Me(I));Ae(I,"title",R,Me(I));Ae(I,"contextPath",q,Me(I));Ae(I,"metaPath",N,Me(I));Ae(I,"outParameter",k,Me(I));Ae(I,"valuelistProperty",j,Me(I));Ae(I,"selectionVariantAnnotation",W,Me(I));Ae(I,"inParameters",Y,Me(I));Ae(I,"multipleSelectionAllowed",G,Me(I));Ae(I,"required",J,Me(I));Ae(I,"showOverlayInitially",K,Me(I));Ae(I,"renderLineChart",Q,Me(I));Ae(I,"requiredProperties",X,Me(I));Ae(I,"filterBarEntityType",Z,Me(I));Ae(I,"showError",ee,Me(I));Ae(I,"chartMeasure",te,Me(I));Ae(I,"UoMHasCustomAggregate",re,Me(I));Ae(I,"showValueHelp",ie,Me(I));Ae(I,"customAggregate",ae,Me(I));Ae(I,"groupId",ne,Me(I));Ae(I,"errorMessageTitle",oe,Me(I));Ae(I,"errorMessage",le,Me(I));Ae(I,"draftSupported",ue,Me(I));Ae(I,"isValueListWithFixedValues",se,Me(I));I.groupId="$auto.visualFilters";I.path=(n=I.metaPath)===null||n===void 0?void 0:n.getPath();const V=fe(I.metaPath,I.contextPath);const E=I.getConverterContext(V,undefined,a);const S=new ve(E.getEntityType(),E);const U=S.getCustomAggregateDefinitions();const D=V.targetObject;let x;const z=D&&D.Visualizations;I.getChartAnnotation(z,E);let H,B=[];if((o=I.chartAnnotation)!==null&&o!==void 0&&(u=o.Measures)!==null&&u!==void 0&&u.length){B=U.filter(e=>{var t;return e.qualifier===((t=I.chartAnnotation)===null||t===void 0?void 0:t.Measures[0].value)});x=B.length>0?B[0].qualifier:I.chartAnnotation.Measures[0].value;H=S.getAggregatedProperties("AggregatedProperties")[0]}if(H&&H.length>0&&!((s=I.chartAnnotation)!==null&&s!==void 0&&s.DynamicMeasures)&&B.length===0&&(c=I.chartAnnotation)!==null&&c!==void 0&&c.Measures&&((g=I.chartAnnotation)===null||g===void 0?void 0:g.Measures.length)>0){e.warning("The transformational aggregate measures are configured as Chart.Measures but should be configured as Chart.DynamicMeasures instead. Please check the SAP Help documentation and correct the configuration accordingly.")}if((d=I.chartAnnotation)!==null&&d!==void 0&&d.DynamicMeasures){if(B.length===0){x=E.getConverterContextFor(E.getAbsoluteAnnotationPath(I.chartAnnotation.DynamicMeasures[0].value)).getDataModelObjectPath().targetObject.Name;H=S.getAggregatedProperties("AggregatedProperty")}else{e.warning("The dynamic measures have been ignored as visual filters can deal with only 1 measure and the first (custom aggregate) measure defined under Chart.Measures is considered.")}}if(U.some(function(e){return e.qualifier===x})){I.customAggregate=true}const L=me(E.getEntityType());I.checkSelectionVariant(L);const O=I.getAggregateProperties(H,x);if(O){I.aggregateProperties=O}const _=z&&((h=z[0])===null||h===void 0?void 0:(f=h.$target)===null||f===void 0?void 0:f.Measures)&&((v=z[0])===null||v===void 0?void 0:(m=v.$target)===null||m===void 0?void 0:(b=m.Measures[0])===null||b===void 0?void 0:(y=b.$target)===null||y===void 0?void 0:y.annotations);const $=O===null||O===void 0?void 0:(T=O.AggregatableProperty)===null||T===void 0?void 0:(A=T.$target)===null||A===void 0?void 0:A.annotations;I.checkIfUOMHasCustomAggregate(U,_,$);const ce=_===null||_===void 0?void 0:(M=_.UI)===null||M===void 0?void 0:M.Hidden;const ge=$===null||$===void 0?void 0:(w=$.UI)===null||w===void 0?void 0:w.Hidden;const pe=I.getHiddenMeasure(ce,ge,I.customAggregate);const de=(C=I.chartAnnotation)===null||C===void 0?void 0:C.ChartType;I.chartType=de;I.showValueHelp=I.getShowValueHelp(de,pe);I.draftSupported=l.isDraftSupported(a.models.metaModel,(P=I.contextPath)===null||P===void 0?void 0:P.getPath());I.errorMessage=I.getErrorMessage(pe,x);I.chartMeasure=x;I.measureDimensionTitle=p.getMeasureDimensionTitle(I.chartAnnotation,I.customAggregate,I.aggregateProperties);const he=fe(I.contextPath);I.toolTip=p.getToolTip(I.chartAnnotation,he,I.path,I.customAggregate,I.aggregateProperties,I.renderLineChart);I.UoMVisibility=p.getUoMVisiblity(I.chartAnnotation,I.showError);I.scaleUoMTitle=p.getScaleUoMTitle(I.chartAnnotation,he,I.path,I.customAggregate,I.aggregateProperties);I.filterCountBinding=p.getfilterCountBinding(I.chartAnnotation);return I}ce=r;var i=r.prototype;i.checkIfUOMHasCustomAggregate=function e(t,r,i){const a=r===null||r===void 0?void 0:r.Measures;const n=i===null||i===void 0?void 0:i.Measures;const o=this.getUoM(a,n);if(o&&t.some(function(e){return e.qualifier===o})){this.UoMHasCustomAggregate=true}else{this.UoMHasCustomAggregate=false}};i.getChartAnnotation=function e(t,r){if(t){for(let e=0;e<t.length;e++){const i=t[e]&&t[e].value;this.chartAnnotation=r.getEntityTypeAnnotation(i)&&r.getEntityTypeAnnotation(i).annotation}}};i.getErrorMessage=function e(t,r){let i;if(this.chartAnnotation){if(this.chartAnnotation.ChartType==="UI.ChartType/Line"||this.chartAnnotation.ChartType==="UI.ChartType/Bar"){i=true}else{i=false}}if(typeof t==="boolean"&&t||!i||this.renderLineChart==="false"){this.showError=true;this.errorMessageTitle=t||!i?this.getTranslatedText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"):this.getTranslatedText("M_VISUAL_FILTER_LINE_CHART_INVALID_DATATYPE");if(t){return this.getTranslatedText("M_VISUAL_FILTER_HIDDEN_MEASURE",[r])}else if(!i){return this.getTranslatedText("M_VISUAL_FILTER_UNSUPPORTED_CHART_TYPE")}else{return this.getTranslatedText("M_VISUAL_FILTER_LINE_CHART_UNSUPPORTED_DIMENSION")}}};i.getShowValueHelp=function e(t,r){var i,a;const n=((i=this.chartAnnotation)===null||i===void 0?void 0:i.Dimensions[0])&&((a=this.chartAnnotation)===null||a===void 0?void 0:a.Dimensions[0].$target)&&this.chartAnnotation.Dimensions[0].$target.type;if(n==="Edm.Date"||n==="Edm.Time"||n==="Edm.DateTimeOffset"){return false}else if(typeof r==="boolean"&&r){return false}else if(!(t==="UI.ChartType/Bar"||t==="UI.ChartType/Line")){return false}else if(this.renderLineChart==="false"&&t==="UI.ChartType/Line"){return false}else if(this.isValueListWithFixedValues===true){return false}else{return true}};i.checkSelectionVariant=function t(r){let i;if(this.selectionVariantAnnotation){var a;const e=(a=this.metaPath)===null||a===void 0?void 0:a.getModel().createBindingContext(this.selectionVariantAnnotation.getPath());i=e&&fe(e,this.contextPath).targetObject}if(!i&&r){i=r}if(i&&i.SelectOptions&&!this.multipleSelectionAllowed){for(const t of i.SelectOptions){var n;if(t.PropertyName.value===((n=this.chartAnnotation)===null||n===void 0?void 0:n.Dimensions[0].value)){if(t.Ranges.length>1){e.error("Multiple SelectOptions for FilterField having SingleValue Allowed Expression")}}}}};i.getAggregateProperties=function e(t,r){let i;if(!t){return}t.some(function(e){if(e.Name===r){i=e;return true}});return i};i.getUoM=function e(t,r){var i,a;let n=t===null||t===void 0?void 0:t.ISOCurrency;let o=t===null||t===void 0?void 0:t.Unit;if(!n&&!o&&r){n=r.ISOCurrency;o=r.Unit}return((i=n)===null||i===void 0?void 0:i.path)||((a=o)===null||a===void 0?void 0:a.path)};i.getHiddenMeasure=function e(t,r,i){if(!i&&r){return r.valueOf()}else{return t===null||t===void 0?void 0:t.valueOf()}};i.getRequired=function e(){if(this.required){return be`<Label text="" width="0.5rem" required="true">
							<layoutData>
								<OverflowToolbarLayoutData priority="Never" />
							</layoutData>
						</Label>`}else{return""}};i.getUoMTitle=function e(t){if(this.UoMVisibility){return be`<Title
							id="${he([this.id,"ScaleUoMTitle"])}"
							visible="{= !${t}}"
							text="${this.scaleUoMTitle}"
							titleStyle="H6"
							level="H3"
							width="4.15rem"
						/>`}else{return""}};i.getValueHelp=function e(t){if(this.showValueHelp){return be`<ToolbarSpacer />
						<Button
							id="${he([this.id,"VisualFilterValueHelpButton"])}"
							type="Transparent"
							ariaHasPopup="Dialog"
							text="${this.filterCountBinding}"
							press="VisualFilterRuntime.fireValueHelp"
							enabled="{= !${t}}"
							customData:multipleSelectionAllowed="${this.multipleSelectionAllowed}"
						>
							<layoutData>
								<OverflowToolbarLayoutData priority="Never" />
							</layoutData>
						</Button>`}else{return""}};i.getInteractiveChartFragment=function e(){if(this.showError){return pe(this)}else if(this.chartType==="UI.ChartType/Bar"){return de(this)}else if(this.chartType==="UI.ChartType/Line"){return ge(this)}return""};i.getTemplate=function e(){const t=he([this.path]);const r="${internal>"+t+"/showError}";return be`
		<control:VisualFilter
		core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
		xmlns="sap.m"
		xmlns:control="sap.fe.core.controls.filterbar"
		xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
		xmlns:core="sap.ui.core"
		id="${this.id}"
		height="13rem"
		width="20.5rem"
		class="sapUiSmallMarginBeginEnd"
		customData:infoPath="${he([this.path])}"
	>
		<VBox height="2rem" class="sapUiSmallMarginBottom">
			<OverflowToolbar style="Clear">
				${this.getRequired()}
				<Title
					id="${he([this.id,"MeasureDimensionTitle"])}"
					text="${this.measureDimensionTitle}"
					tooltip="${this.toolTip}"
					titleStyle="H6"
					level="H3"
					class="sapUiTinyMarginEnd sapUiNoMarginBegin"
				/>
				${this.getUoMTitle(r)}
				${this.getValueHelp(r)}
			</OverflowToolbar>
		</VBox>
		<VBox height="100%" width="100%">
			${this.getInteractiveChartFragment()}
		</VBox>
	</control:VisualFilter>`};return r}(t),F=Pe($.prototype,"id",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),R=Pe($.prototype,"title",[f],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),q=Pe($.prototype,"contextPath",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),N=Pe($.prototype,"metaPath",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),k=Pe($.prototype,"outParameter",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),j=Pe($.prototype,"valuelistProperty",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),W=Pe($.prototype,"selectionVariantAnnotation",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),Y=Pe($.prototype,"inParameters",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),G=Pe($.prototype,"multipleSelectionAllowed",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),J=Pe($.prototype,"required",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),K=Pe($.prototype,"showOverlayInitially",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),Q=Pe($.prototype,"renderLineChart",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),X=Pe($.prototype,"requiredProperties",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),Z=Pe($.prototype,"filterBarEntityType",[V],{configurable:true,enumerable:true,writable:true,initializer:null}),ee=Pe($.prototype,"showError",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),te=Pe($.prototype,"chartMeasure",[S],{configurable:true,enumerable:true,writable:true,initializer:null}),re=Pe($.prototype,"UoMHasCustomAggregate",[U],{configurable:true,enumerable:true,writable:true,initializer:null}),ie=Pe($.prototype,"showValueHelp",[D],{configurable:true,enumerable:true,writable:true,initializer:null}),ae=Pe($.prototype,"customAggregate",[x],{configurable:true,enumerable:true,writable:true,initializer:function(){return false}}),ne=Pe($.prototype,"groupId",[z],{configurable:true,enumerable:true,writable:true,initializer:function(){return"$auto.visualFilters"}}),oe=Pe($.prototype,"errorMessageTitle",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),le=Pe($.prototype,"errorMessage",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),ue=Pe($.prototype,"draftSupported",[L],{configurable:true,enumerable:true,writable:true,initializer:null}),se=Pe($.prototype,"isValueListWithFixedValues",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),$))||_);ce=Ve;return ce},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/VisualFilterRuntime-dbg", ["sap/base/Log", "sap/fe/core/controls/filterbar/utils/VisualFilterUtils", "sap/fe/core/templating/FilterHelper", "sap/fe/core/type/TypeUtil", "sap/fe/macros/CommonHelper", "sap/fe/macros/filter/FilterUtils", "sap/ui/core/Core", "sap/ui/mdc/condition/Condition", "sap/ui/mdc/util/FilterUtil", "sap/ui/model/Filter", "sap/ui/model/FilterOperator"], function (Log, VisualFilterUtils, FilterHelper, TypeUtil, CommonHelper, FilterUtils, Core, Condition, MdcFilterUtil, Filter, FilterOperator) {
  "use strict";

  var getFiltersConditionsFromSelectionVariant = FilterHelper.getFiltersConditionsFromSelectionVariant;
  /**
   * Static class used by Visual Filter during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const VisualFilterRuntime = {
    selectionChanged(oEvent) {
      const oInteractiveChart = oEvent.getSource();
      const sOutParameter = oInteractiveChart.data("outParameter");
      const sValueListProperty = oInteractiveChart.data("valuelistProperty");
      const sDimension = oInteractiveChart.data("dimension");
      const sDimensionText = oInteractiveChart.data("dimensionText");
      const bMultipleSelectionAllowed = oInteractiveChart.data("multipleSelectionAllowed");
      const sDimensionType = oInteractiveChart.data("dimensionType");
      const oSelectedAggregation = oEvent.getParameter("bar") || oEvent.getParameter("point") || oEvent.getParameter("segment");
      const bIsAggregationSelected = oEvent.getParameter("selected");
      const oConditionModel = oInteractiveChart.getModel("$field");
      let aConditions = oConditionModel.getProperty("/conditions");
      if (!sOutParameter || sValueListProperty !== sDimension) {
        Log.error("VisualFilter: Cannot sync values with regular filter as out parameter is not configured properly!");
      } else {
        let sSelectionChangedValue = oSelectedAggregation.getBindingContext().getObject(sValueListProperty);
        if (sSelectionChangedValue) {
          let sSelectionChangedValueText = oSelectedAggregation.getBindingContext().getObject(sDimensionText);
          if (typeof sSelectionChangedValueText !== "string" && !(sSelectionChangedValueText instanceof String)) {
            sSelectionChangedValueText = undefined;
          }
          // if selection has been done on the aggregation then add to conditions
          if (bIsAggregationSelected) {
            if (bMultipleSelectionAllowed === "false") {
              aConditions = [];
            }
            if (sDimensionType === "Edm.DateTimeOffset") {
              sSelectionChangedValue = VisualFilterUtils._parseDateTime(sSelectionChangedValue);
            }
            const oCondition = Condition.createItemCondition(sSelectionChangedValue, sSelectionChangedValueText || undefined, {}, {});
            aConditions.push(oCondition);
          } else {
            // because selection was removed on the aggregation hence remove this from conditions
            aConditions = aConditions.filter(function (oCondition) {
              if (sDimensionType === "Edm.DateTimeOffset") {
                return oCondition.operator !== "EQ" || Date.parse(oCondition.values[0]) !== Date.parse(sSelectionChangedValue);
              }
              return oCondition.operator !== "EQ" || oCondition.values[0] !== sSelectionChangedValue;
            });
          }
          oConditionModel.setProperty("/conditions", aConditions);
        } else {
          Log.error("VisualFilter: No vaue found for the outParameter");
        }
      }
    },
    // THIS IS A FORMATTER
    getAggregationSelected(aConditions) {
      var _this$getBindingConte;
      let aSelectableValues = [];
      if (!this.getBindingContext()) {
        return;
      }
      for (let i = 0; i <= aConditions.length - 1; i++) {
        const oCondition = aConditions[i];
        // 1. get conditions with EQ operator (since visual filter can only deal with EQ operators) and get their values
        if (oCondition.operator === "EQ") {
          aSelectableValues.push(oCondition.values[0]);
        }
      }

      // access the interactive chart from the control.
      const oInteractiveChart = this.getParent();
      const sDimension = oInteractiveChart.data("dimension");
      const sDimensionType = oInteractiveChart.data("dimensionType");
      let sDimensionValue = (_this$getBindingConte = this.getBindingContext()) === null || _this$getBindingConte === void 0 ? void 0 : _this$getBindingConte.getObject(sDimension);
      if (sDimensionType === "Edm.DateTimeOffset") {
        sDimensionValue = VisualFilterUtils._parseDateTime(sDimensionValue);
      }
      if (oInteractiveChart.data("multipleSelectionAllowed") === "false" && aSelectableValues.length > 1) {
        aSelectableValues = [aSelectableValues[0]];
      }
      return aSelectableValues.indexOf(sDimensionValue) > -1;
    },
    // THIS IS A FORMATTER
    getFiltersFromConditions() {
      var _oInteractiveChart$ge, _oInteractiveChart$ge2, _oInteractiveChart$ge3;
      for (var _len = arguments.length, aArguments = new Array(_len), _key = 0; _key < _len; _key++) {
        aArguments[_key] = arguments[_key];
      }
      const oInteractiveChart = this.getParent();
      const oFilterBar = (_oInteractiveChart$ge = oInteractiveChart.getParent()) === null || _oInteractiveChart$ge === void 0 ? void 0 : (_oInteractiveChart$ge2 = _oInteractiveChart$ge.getParent()) === null || _oInteractiveChart$ge2 === void 0 ? void 0 : (_oInteractiveChart$ge3 = _oInteractiveChart$ge2.getParent()) === null || _oInteractiveChart$ge3 === void 0 ? void 0 : _oInteractiveChart$ge3.getParent();
      const aInParameters = oInteractiveChart.data("inParameters").customData;
      const bIsDraftSupported = oInteractiveChart.data("draftSupported") === "true";
      const aPropertyInfoSet = oFilterBar.getPropertyInfo();
      const mConditions = {};
      const aValueListPropertyInfoSet = [];
      let oFilters;
      let aFilters = [];
      const aParameters = oInteractiveChart.data("parameters").customData;
      const oSelectionVariantAnnotation = CommonHelper.parseCustomData(oInteractiveChart.data("selectionVariantAnnotation"));
      const oInteractiveChartListBinding = oInteractiveChart.getBinding("bars") || oInteractiveChart.getBinding("points") || oInteractiveChart.getBinding("segments");
      const sPath = oInteractiveChartListBinding.getPath();
      const oMetaModel = oInteractiveChart.getModel().getMetaModel();
      const sEntitySetPath = oInteractiveChartListBinding.getPath();
      const filterConditions = getFiltersConditionsFromSelectionVariant(sEntitySetPath, oMetaModel, oSelectionVariantAnnotation, VisualFilterUtils.getCustomConditions.bind(VisualFilterUtils));
      for (const i in aPropertyInfoSet) {
        aPropertyInfoSet[i].typeConfig = TypeUtil.getTypeConfig(aPropertyInfoSet[i].dataType, {}, {});
      }
      const oSelectionVariantConditions = VisualFilterUtils.convertFilterCondions(filterConditions);
      // aInParameters and the bindings to in parameters are in the same order so we can rely on it to create our conditions
      Object.keys(oSelectionVariantConditions).forEach(function (sKey) {
        mConditions[sKey] = oSelectionVariantConditions[sKey];
        //fetch localDataProperty if selection variant key is based on vaue list property
        const inParameterForKey = aInParameters.find(function (inParameter) {
          return inParameter.valueListProperty === sKey;
        });
        const localDataProperty = inParameterForKey ? inParameterForKey.localDataProperty : sKey;
        if (!aParameters || aParameters && aParameters.indexOf(sKey) === -1) {
          for (const i in aPropertyInfoSet) {
            const propertyInfoSet = aPropertyInfoSet[i];
            if (localDataProperty === propertyInfoSet.name) {
              if (propertyInfoSet.typeConfig.baseType === "DateTime") {
                if (mConditions[sKey]) {
                  mConditions[sKey].forEach(function (condition) {
                    condition.values[0] = VisualFilterUtils._formatDateTime(condition.values[0]);
                  });
                }
              }
              aValueListPropertyInfoSet.push({
                name: sKey,
                typeConfig: propertyInfoSet.typeConfig
              });
            }
          }
        }
      });
      aInParameters.forEach(function (oInParameter, index) {
        if (aArguments[index].length > 0) {
          // store conditions with value list property since we are filtering on the value list collection path
          mConditions[oInParameter.valueListProperty] = aArguments[index];
          if (!aParameters || aParameters && aParameters.indexOf(oInParameter.valueListProperty) === -1) {
            // aPropertyInfoSet is list of properties from the filter bar but we need to create conditions for the value list
            // which could have a different collectionPath.
            // Only typeConfig from aPropertyInfoSet is required for getting the converted filters from conditions
            // so we update aPropertyInfoSet to have the valueListProperties only
            // This way conditions will be converted to sap.ui.model.Filter for the value list
            // This works because for in parameter mapping the property from the main entity type should be of the same type as the value list entity type
            // TODO: Follow up with MDC to check if they can provide a clean api to convert conditions into filters
            for (const i in aPropertyInfoSet) {
              // store conditions with value list property since we are filtering on the value list collection path
              const propertyInfoSet = aPropertyInfoSet[i];
              if (propertyInfoSet.name === oInParameter.localDataProperty) {
                if (propertyInfoSet.typeConfig.baseType === "DateTime") {
                  if (mConditions[oInParameter.valueListProperty]) {
                    mConditions[oInParameter.valueListProperty].forEach(function (condition) {
                      condition.values[0] = VisualFilterUtils._formatDateTime(condition.values[0]);
                    });
                  }
                }
                aValueListPropertyInfoSet.push({
                  name: oInParameter.valueListProperty,
                  typeConfig: propertyInfoSet.typeConfig
                });
              }
            }
          }
        }
      });
      const oInternalModelContext = oInteractiveChart.getBindingContext("internal");
      const sInfoPath = oInteractiveChart.data("infoPath");
      let bEnableBinding;
      const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      const aRequiredProperties = CommonHelper.parseCustomData(oInteractiveChart.data("requiredProperties"));
      if (aRequiredProperties.length) {
        const aConditions = Object.keys(mConditions) || [];
        const aNotMatchedConditions = [];
        aRequiredProperties.forEach(function (requiredPropertyPath) {
          if (aConditions.indexOf(requiredPropertyPath) === -1) {
            aNotMatchedConditions.push(requiredPropertyPath);
          }
        });
        if (!aNotMatchedConditions.length) {
          bEnableBinding = oInternalModelContext.getProperty(`${sInfoPath}/showError`);
          oInternalModelContext.setProperty(sInfoPath, {
            errorMessageTitle: "",
            errorMessage: "",
            showError: false
          });
        } else if (aNotMatchedConditions.length > 1) {
          oInternalModelContext.setProperty(sInfoPath, {
            errorMessageTitle: oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
            errorMessage: oResourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF"),
            showError: true
          });
          return;
        } else {
          const sLabel = oMetaModel.getObject(`${sEntitySetPath}/${aNotMatchedConditions[0]}@com.sap.vocabularies.Common.v1.Label`) || aNotMatchedConditions[0];
          oInternalModelContext.setProperty(sInfoPath, {
            errorMessageTitle: oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
            errorMessage: oResourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF", sLabel),
            showError: true
          });
          return;
        }
      } else {
        bEnableBinding = oInternalModelContext.getProperty(`${sInfoPath}/showError`);
        oInternalModelContext.setProperty(sInfoPath, {
          errorMessageTitle: "",
          errorMessage: "",
          showError: false
        });
      }
      const sFilterEntityName = oFilterBar.data("entityType").split("/")[1];
      const sChartEntityName = sPath.split("/")[1].split("(")[0];
      if (aParameters && aParameters.length && sFilterEntityName === sChartEntityName) {
        const sBindingPath = bEnableBinding ? FilterUtils.getBindingPathForParameters(oFilterBar, mConditions, aPropertyInfoSet, aParameters) : undefined;
        if (sBindingPath) {
          oInteractiveChartListBinding.sPath = sBindingPath;
        }
      }
      if (aParameters && aParameters.length) {
        //Remove parameters from mConditions since it should not be a part of $filter
        aParameters.forEach(function (parameter) {
          if (mConditions[parameter]) {
            delete mConditions[parameter];
          }
        });
      }

      //Only keep the actual value of filters and remove type informations
      Object.keys(mConditions).forEach(function (key) {
        mConditions[key].forEach(function (condition) {
          if (condition.values.length > 1) {
            condition.values = condition.values.slice(0, 1);
          }
        });
      });
      // On InitialLoad when initiallayout is visual, aPropertyInfoSet is always empty and we cannot get filters from MDCFilterUtil.
      // Also when SVQualifier is there then we should not change the listbinding filters to empty as we are not getting filters from MDCFilterUtil but
      // instead we need to not call listbinding.filter and use the template time binding itself.
      if (Object.keys(mConditions).length > 0 && aValueListPropertyInfoSet.length) {
        oFilters = MdcFilterUtil.getFilterInfo(oFilterBar, mConditions, aValueListPropertyInfoSet, []).filters;
        if (oFilters) {
          if (!oFilters.aFilters) {
            aFilters.push(oFilters);
          } else if (oFilters.aFilters) {
            aFilters = oFilters.aFilters;
          }
        }
      }
      if (bIsDraftSupported) {
        aFilters.push(new Filter("IsActiveEntity", FilterOperator.EQ, true));
      }
      if (aFilters && aFilters.length > 0) {
        oInteractiveChartListBinding.filter(aFilters);
      } else if (!Object.keys(mConditions).length) {
        oInteractiveChartListBinding.filter();
      }
      // update the interactive chart binding
      if (bEnableBinding && oInteractiveChartListBinding.isSuspended()) {
        oInteractiveChartListBinding.resume();
      }
      return aFilters;
    },
    getFilterCounts(oConditions) {
      if (this.data("multipleSelectionAllowed") === "false" && oConditions.length > 0) {
        return `(1)`;
      }
      if (oConditions.length > 0) {
        return `(${oConditions.length})`;
      } else {
        return undefined;
      }
    },
    scaleVisualFilterValue(oValue, scaleFactor, numberOfFractionalDigits, currency, oRawValue) {
      // ScaleFactor if defined is priority for formatting
      if (scaleFactor) {
        return VisualFilterUtils.getFormattedNumber(oRawValue, scaleFactor, numberOfFractionalDigits);
        // If Scale Factor is not defined, use currency formatting
      } else if (currency) {
        return VisualFilterUtils.getFormattedNumber(oRawValue, undefined, undefined, currency);
        // No ScaleFactor and no Currency, use numberOfFractionalDigits defined in DataPoint
      } else if (numberOfFractionalDigits > 0) {
        // Number of fractional digits shall not exceed 2, unless required by currency
        numberOfFractionalDigits = numberOfFractionalDigits > 2 ? 2 : numberOfFractionalDigits;
        return VisualFilterUtils.getFormattedNumber(oRawValue, undefined, numberOfFractionalDigits);
      } else {
        return oValue;
      }
    },
    fireValueHelp(oEvent) {
      oEvent.getSource().getParent().getParent().getParent().fireValueHelpRequest();
    }
  };

  /**
   * @global
   */
  return VisualFilterRuntime;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/VisualFilterRuntime", ["sap/base/Log","sap/fe/core/controls/filterbar/utils/VisualFilterUtils","sap/fe/core/templating/FilterHelper","sap/fe/core/type/TypeUtil","sap/fe/macros/CommonHelper","sap/fe/macros/filter/FilterUtils","sap/ui/core/Core","sap/ui/mdc/condition/Condition","sap/ui/mdc/util/FilterUtil","sap/ui/model/Filter","sap/ui/model/FilterOperator"],function(e,t,r,n,i,o,s,a,l,f,c){"use strict";var u=r.getFiltersConditionsFromSelectionVariant;const g={selectionChanged(r){const n=r.getSource();const i=n.data("outParameter");const o=n.data("valuelistProperty");const s=n.data("dimension");const l=n.data("dimensionText");const f=n.data("multipleSelectionAllowed");const c=n.data("dimensionType");const u=r.getParameter("bar")||r.getParameter("point")||r.getParameter("segment");const g=r.getParameter("selected");const d=n.getModel("$field");let p=d.getProperty("/conditions");if(!i||o!==s){e.error("VisualFilter: Cannot sync values with regular filter as out parameter is not configured properly!")}else{let r=u.getBindingContext().getObject(o);if(r){let e=u.getBindingContext().getObject(l);if(typeof e!=="string"&&!(e instanceof String)){e=undefined}if(g){if(f==="false"){p=[]}if(c==="Edm.DateTimeOffset"){r=t._parseDateTime(r)}const n=a.createItemCondition(r,e||undefined,{},{});p.push(n)}else{p=p.filter(function(e){if(c==="Edm.DateTimeOffset"){return e.operator!=="EQ"||Date.parse(e.values[0])!==Date.parse(r)}return e.operator!=="EQ"||e.values[0]!==r})}d.setProperty("/conditions",p)}else{e.error("VisualFilter: No vaue found for the outParameter")}}},getAggregationSelected(e){var r;let n=[];if(!this.getBindingContext()){return}for(let t=0;t<=e.length-1;t++){const r=e[t];if(r.operator==="EQ"){n.push(r.values[0])}}const i=this.getParent();const o=i.data("dimension");const s=i.data("dimensionType");let a=(r=this.getBindingContext())===null||r===void 0?void 0:r.getObject(o);if(s==="Edm.DateTimeOffset"){a=t._parseDateTime(a)}if(i.data("multipleSelectionAllowed")==="false"&&n.length>1){n=[n[0]]}return n.indexOf(a)>-1},getFiltersFromConditions(){var e,r,a;for(var g=arguments.length,d=new Array(g),p=0;p<g;p++){d[p]=arguments[p]}const m=this.getParent();const h=(e=m.getParent())===null||e===void 0?void 0:(r=e.getParent())===null||r===void 0?void 0:(a=r.getParent())===null||a===void 0?void 0:a.getParent();const y=m.data("inParameters").customData;const P=m.data("draftSupported")==="true";const E=h.getPropertyInfo();const T={};const v=[];let F;let C=[];const L=m.data("parameters").customData;const _=i.parseCustomData(m.data("selectionVariantAnnotation"));const S=m.getBinding("bars")||m.getBinding("points")||m.getBinding("segments");const b=S.getPath();const O=m.getModel().getMetaModel();const I=S.getPath();const D=u(I,O,_,t.getCustomConditions.bind(t));for(const e in E){E[e].typeConfig=n.getTypeConfig(E[e].dataType,{},{})}const M=t.convertFilterCondions(D);Object.keys(M).forEach(function(e){T[e]=M[e];const r=y.find(function(t){return t.valueListProperty===e});const n=r?r.localDataProperty:e;if(!L||L&&L.indexOf(e)===-1){for(const r in E){const i=E[r];if(n===i.name){if(i.typeConfig.baseType==="DateTime"){if(T[e]){T[e].forEach(function(e){e.values[0]=t._formatDateTime(e.values[0])})}}v.push({name:e,typeConfig:i.typeConfig})}}}});y.forEach(function(e,r){if(d[r].length>0){T[e.valueListProperty]=d[r];if(!L||L&&L.indexOf(e.valueListProperty)===-1){for(const r in E){const n=E[r];if(n.name===e.localDataProperty){if(n.typeConfig.baseType==="DateTime"){if(T[e.valueListProperty]){T[e.valueListProperty].forEach(function(e){e.values[0]=t._formatDateTime(e.values[0])})}}v.push({name:e.valueListProperty,typeConfig:n.typeConfig})}}}}});const V=m.getBindingContext("internal");const R=m.data("infoPath");let A;const x=s.getLibraryResourceBundle("sap.fe.macros");const w=i.parseCustomData(m.data("requiredProperties"));if(w.length){const e=Object.keys(T)||[];const t=[];w.forEach(function(r){if(e.indexOf(r)===-1){t.push(r)}});if(!t.length){A=V.getProperty(`${R}/showError`);V.setProperty(R,{errorMessageTitle:"",errorMessage:"",showError:false})}else if(t.length>1){V.setProperty(R,{errorMessageTitle:x.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:x.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF"),showError:true});return}else{const e=O.getObject(`${I}/${t[0]}@com.sap.vocabularies.Common.v1.Label`)||t[0];V.setProperty(R,{errorMessageTitle:x.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:x.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF",e),showError:true});return}}else{A=V.getProperty(`${R}/showError`);V.setProperty(R,{errorMessageTitle:"",errorMessage:"",showError:false})}const B=h.data("entityType").split("/")[1];const j=b.split("/")[1].split("(")[0];if(L&&L.length&&B===j){const e=A?o.getBindingPathForParameters(h,T,E,L):undefined;if(e){S.sPath=e}}if(L&&L.length){L.forEach(function(e){if(T[e]){delete T[e]}})}Object.keys(T).forEach(function(e){T[e].forEach(function(e){if(e.values.length>1){e.values=e.values.slice(0,1)}})});if(Object.keys(T).length>0&&v.length){F=l.getFilterInfo(h,T,v,[]).filters;if(F){if(!F.aFilters){C.push(F)}else if(F.aFilters){C=F.aFilters}}}if(P){C.push(new f("IsActiveEntity",c.EQ,true))}if(C&&C.length>0){S.filter(C)}else if(!Object.keys(T).length){S.filter()}if(A&&S.isSuspended()){S.resume()}return C},getFilterCounts(e){if(this.data("multipleSelectionAllowed")==="false"&&e.length>0){return`(1)`}if(e.length>0){return`(${e.length})`}else{return undefined}},scaleVisualFilterValue(e,r,n,i,o){if(r){return t.getFormattedNumber(o,r,n)}else if(i){return t.getFormattedNumber(o,undefined,undefined,i)}else if(n>0){n=n>2?2:n;return t.getFormattedNumber(o,undefined,n)}else{return e}},fireValueHelp(e){e.getSource().getParent().getParent().getParent().fireValueHelpRequest()}};return g},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveBarChart-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/StableIdHelper", "../InteractiveChartHelper"], function (BuildingBlockTemplateProcessor, StableIdHelper, InteractiveChartHelper) {
  "use strict";

  var _exports = {};
  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  function getInteractiveBarChartTemplate(visualFilter) {
    const interactiveChartProperties = InteractiveChartHelper.getInteractiveChartProperties(visualFilter);
    if (interactiveChartProperties) {
      var _visualFilter$metaPat, _visualFilter$chartAn, _dimension$$target$an, _dimension$$target$an2;
      const id = generate([(_visualFilter$metaPat = visualFilter.metaPath) === null || _visualFilter$metaPat === void 0 ? void 0 : _visualFilter$metaPat.getPath()]);
      const dimension = (_visualFilter$chartAn = visualFilter.chartAnnotation) === null || _visualFilter$chartAn === void 0 ? void 0 : _visualFilter$chartAn.Dimensions[0];
      return xml`<InteractiveBarChart
                            xmlns="sap.suite.ui.microchart"
                            xmlns:core="sap.ui.core"
                            xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                            core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                            visible="{= ${interactiveChartProperties.showErrorExpression}}"
                            selectionChanged="VisualFilterRuntime.selectionChanged"
                            showError="{= ${interactiveChartProperties.showErrorExpression}}"
                            errorMessageTitle="${interactiveChartProperties.errorMessageTitleExpression}"
                            errorMessage="${interactiveChartProperties.errorMessageExpression}"
                            bars="${interactiveChartProperties.aggregationBinding}"
                            customData:outParameter="${visualFilter.outParameter}"
                            customData:valuelistProperty="${visualFilter.valuelistProperty}"
                            customData:multipleSelectionAllowed="${visualFilter.multipleSelectionAllowed}"
                            customData:dimension="${dimension === null || dimension === void 0 ? void 0 : dimension.$target.name}"
                            customData:dimensionText="${dimension === null || dimension === void 0 ? void 0 : (_dimension$$target$an = dimension.$target.annotations.Common) === null || _dimension$$target$an === void 0 ? void 0 : (_dimension$$target$an2 = _dimension$$target$an.Text) === null || _dimension$$target$an2 === void 0 ? void 0 : _dimension$$target$an2.path}"
                            customData:scalefactor="${interactiveChartProperties.scalefactor}"
                            customData:measure="${visualFilter.chartMeasure}"
                            customData:uom="${interactiveChartProperties.uom}"
                            customData:inParameters="${interactiveChartProperties.inParameters}"
                            customData:inParameterFilters="${interactiveChartProperties.inParameterFilters}"
                            customData:dimensionType="${dimension === null || dimension === void 0 ? void 0 : dimension.$target.type}"
                            customData:selectionVariantAnnotation="${interactiveChartProperties.selectionVariantAnnotation}"
                            customData:required="${visualFilter.required}"
                            customData:showOverlayInitially="${visualFilter.showOverlayInitially}"
                            customData:requiredProperties="${visualFilter.requiredProperties}"
                            customData:infoPath="${id}"
                            customData:parameters="${interactiveChartProperties.stringifiedParameters}"
                            customData:draftSupported="${visualFilter.draftSupported}"
                        >
                            <bars>
                                <InteractiveBarChartBar
                                    core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                                    label="${interactiveChartProperties.chartLabel}"
                                    value="${interactiveChartProperties.measure}"
                                    displayedValue="${interactiveChartProperties.displayedValue}"
                                    color="${interactiveChartProperties.color}"
                                    selected="{path: '$field>/conditions', formatter: 'sap.fe.macros.visualfilters.VisualFilterRuntime.getAggregationSelected'}"
                                />
                            </bars>
                        </InteractiveBarChart>`;
    }
    return "";
  }
  _exports.getInteractiveBarChartTemplate = getInteractiveBarChartTemplate;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveBarChart", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/StableIdHelper","../InteractiveChartHelper"],function(e,t,a){"use strict";var r={};var i=t.generate;var s=e.xml;function o(e){const t=a.getInteractiveChartProperties(e);if(t){var r,o,l,n;const a=i([(r=e.metaPath)===null||r===void 0?void 0:r.getPath()]);const u=(o=e.chartAnnotation)===null||o===void 0?void 0:o.Dimensions[0];return s`<InteractiveBarChart
                            xmlns="sap.suite.ui.microchart"
                            xmlns:core="sap.ui.core"
                            xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                            core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                            visible="{= ${t.showErrorExpression}}"
                            selectionChanged="VisualFilterRuntime.selectionChanged"
                            showError="{= ${t.showErrorExpression}}"
                            errorMessageTitle="${t.errorMessageTitleExpression}"
                            errorMessage="${t.errorMessageExpression}"
                            bars="${t.aggregationBinding}"
                            customData:outParameter="${e.outParameter}"
                            customData:valuelistProperty="${e.valuelistProperty}"
                            customData:multipleSelectionAllowed="${e.multipleSelectionAllowed}"
                            customData:dimension="${u===null||u===void 0?void 0:u.$target.name}"
                            customData:dimensionText="${u===null||u===void 0?void 0:(l=u.$target.annotations.Common)===null||l===void 0?void 0:(n=l.Text)===null||n===void 0?void 0:n.path}"
                            customData:scalefactor="${t.scalefactor}"
                            customData:measure="${e.chartMeasure}"
                            customData:uom="${t.uom}"
                            customData:inParameters="${t.inParameters}"
                            customData:inParameterFilters="${t.inParameterFilters}"
                            customData:dimensionType="${u===null||u===void 0?void 0:u.$target.type}"
                            customData:selectionVariantAnnotation="${t.selectionVariantAnnotation}"
                            customData:required="${e.required}"
                            customData:showOverlayInitially="${e.showOverlayInitially}"
                            customData:requiredProperties="${e.requiredProperties}"
                            customData:infoPath="${a}"
                            customData:parameters="${t.stringifiedParameters}"
                            customData:draftSupported="${e.draftSupported}"
                        >
                            <bars>
                                <InteractiveBarChartBar
                                    core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                                    label="${t.chartLabel}"
                                    value="${t.measure}"
                                    displayedValue="${t.displayedValue}"
                                    color="${t.color}"
                                    selected="{path: '$field>/conditions', formatter: 'sap.fe.macros.visualfilters.VisualFilterRuntime.getAggregationSelected'}"
                                />
                            </bars>
                        </InteractiveBarChart>`}return""}r.getInteractiveBarChartTemplate=o;return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveChartWithError-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"], function (BuildingBlockTemplateProcessor) {
  "use strict";

  var _exports = {};
  var xml = BuildingBlockTemplateProcessor.xml;
  function getInteractiveChartWithErrorTemplate(visualFilter) {
    const chartAnnotation = visualFilter.chartAnnotation;
    if (visualFilter.chartMeasure && chartAnnotation !== null && chartAnnotation !== void 0 && chartAnnotation.Dimensions && chartAnnotation.Dimensions[0]) {
      return xml`<InteractiveLineChart
                        xmlns="sap.suite.ui.microchart"
                        xmlns:core="sap.ui.core"
                        core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                        showError="${visualFilter.showError}"
                        errorMessageTitle="${visualFilter.errorMessageTitle}"
                        errorMessage="${visualFilter.errorMessage}"
                    />`;
    }
    return "";
  }
  _exports.getInteractiveChartWithErrorTemplate = getInteractiveChartWithErrorTemplate;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveChartWithError", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor"],function(r){"use strict";var e={};var i=r.xml;function s(r){const e=r.chartAnnotation;if(r.chartMeasure&&e!==null&&e!==void 0&&e.Dimensions&&e.Dimensions[0]){return i`<InteractiveLineChart
                        xmlns="sap.suite.ui.microchart"
                        xmlns:core="sap.ui.core"
                        core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                        showError="${r.showError}"
                        errorMessageTitle="${r.errorMessageTitle}"
                        errorMessage="${r.errorMessage}"
                    />`}return""}e.getInteractiveChartWithErrorTemplate=s;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveLineChart-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/StableIdHelper", "../InteractiveChartHelper"], function (BuildingBlockTemplateProcessor, StableIdHelper, InteractiveChartHelper) {
  "use strict";

  var _exports = {};
  var generate = StableIdHelper.generate;
  var xml = BuildingBlockTemplateProcessor.xml;
  function getInteractiveLineChartTemplate(visualFilter) {
    const interactiveChartProperties = InteractiveChartHelper.getInteractiveChartProperties(visualFilter);
    if (interactiveChartProperties) {
      var _visualFilter$metaPat, _visualFilter$chartAn, _dimension$$target, _dimension$$target$an, _dimension$$target$an2;
      const id = generate([(_visualFilter$metaPat = visualFilter.metaPath) === null || _visualFilter$metaPat === void 0 ? void 0 : _visualFilter$metaPat.getPath()]);
      const dimension = (_visualFilter$chartAn = visualFilter.chartAnnotation) === null || _visualFilter$chartAn === void 0 ? void 0 : _visualFilter$chartAn.Dimensions[0];
      return xml`<InteractiveLineChart
                        xmlns="sap.suite.ui.microchart"
                        xmlns:core="sap.ui.core"
                        xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                        core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                        visible="{= ${interactiveChartProperties.showErrorExpression}}"
                        selectionChanged="VisualFilterRuntime.selectionChanged"
                        showError="{= ${interactiveChartProperties.showErrorExpression}}"
                        errorMessageTitle="${interactiveChartProperties.errorMessageTitleExpression}"
                        errorMessage="${interactiveChartProperties.errorMessageExpression}"
                        points="${interactiveChartProperties.aggregationBinding}"
                        customData:outParameter="${visualFilter.outParameter}"
                        customData:valuelistProperty="${visualFilter.valuelistProperty}"
                        customData:multipleSelectionAllowed="${visualFilter.multipleSelectionAllowed}"
                        customData:dimension="${dimension === null || dimension === void 0 ? void 0 : (_dimension$$target = dimension.$target) === null || _dimension$$target === void 0 ? void 0 : _dimension$$target.name}"
                        customData:dimensionText="${dimension === null || dimension === void 0 ? void 0 : (_dimension$$target$an = dimension.$target.annotations.Common) === null || _dimension$$target$an === void 0 ? void 0 : (_dimension$$target$an2 = _dimension$$target$an.Text) === null || _dimension$$target$an2 === void 0 ? void 0 : _dimension$$target$an2.path}"
                        customData:measure="${visualFilter.chartMeasure}"
                        customData:scalefactor="${interactiveChartProperties.scalefactor}"
                        customData:uom="${interactiveChartProperties.uom}"
                        customData:inParameters="${interactiveChartProperties.inParameters}"
                        customData:inParameterConditions="${interactiveChartProperties.inParameterFilters}"
                        customData:dimensionType="${dimension === null || dimension === void 0 ? void 0 : dimension.$target.type}"
                        customData:selectionVariantAnnotation="${interactiveChartProperties.selectionVariantAnnotation}"
                        customData:required="${visualFilter.required}"
                        customData:showOverlayInitially="${visualFilter.showOverlayInitially}"
                        customData:requiredProperties="${visualFilter.requiredProperties}"
                        customData:infoPath="${id}"
                        customData:parameters="${interactiveChartProperties.stringifiedParameters}"
                        customData:draftSupported="${visualFilter.draftSupported}"
                    >
                        <points>
                            <InteractiveLineChartPoint
                                core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                                label="${interactiveChartProperties.chartLabel}"
                                value="${interactiveChartProperties.measure}"
                                displayedValue="${interactiveChartProperties.displayedValue}"
                                color="${interactiveChartProperties.color}"
                                selected="{path: '$field>/conditions', formatter: 'sap.fe.macros.visualfilters.VisualFilterRuntime.getAggregationSelected'}"
                            />
                        </points>
             </InteractiveLineChart>`;
    }
    return "";
  }
  _exports.getInteractiveLineChartTemplate = getInteractiveLineChartTemplate;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/macros/visualfilters/fragments/InteractiveLineChart", ["sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/StableIdHelper","../InteractiveChartHelper"],function(e,t,a){"use strict";var r={};var i=t.generate;var o=e.xml;function s(e){const t=a.getInteractiveChartProperties(e);if(t){var r,s,n,l,u;const a=i([(r=e.metaPath)===null||r===void 0?void 0:r.getPath()]);const c=(s=e.chartAnnotation)===null||s===void 0?void 0:s.Dimensions[0];return o`<InteractiveLineChart
                        xmlns="sap.suite.ui.microchart"
                        xmlns:core="sap.ui.core"
                        xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"
                        core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                        visible="{= ${t.showErrorExpression}}"
                        selectionChanged="VisualFilterRuntime.selectionChanged"
                        showError="{= ${t.showErrorExpression}}"
                        errorMessageTitle="${t.errorMessageTitleExpression}"
                        errorMessage="${t.errorMessageExpression}"
                        points="${t.aggregationBinding}"
                        customData:outParameter="${e.outParameter}"
                        customData:valuelistProperty="${e.valuelistProperty}"
                        customData:multipleSelectionAllowed="${e.multipleSelectionAllowed}"
                        customData:dimension="${c===null||c===void 0?void 0:(n=c.$target)===null||n===void 0?void 0:n.name}"
                        customData:dimensionText="${c===null||c===void 0?void 0:(l=c.$target.annotations.Common)===null||l===void 0?void 0:(u=l.Text)===null||u===void 0?void 0:u.path}"
                        customData:measure="${e.chartMeasure}"
                        customData:scalefactor="${t.scalefactor}"
                        customData:uom="${t.uom}"
                        customData:inParameters="${t.inParameters}"
                        customData:inParameterConditions="${t.inParameterFilters}"
                        customData:dimensionType="${c===null||c===void 0?void 0:c.$target.type}"
                        customData:selectionVariantAnnotation="${t.selectionVariantAnnotation}"
                        customData:required="${e.required}"
                        customData:showOverlayInitially="${e.showOverlayInitially}"
                        customData:requiredProperties="${e.requiredProperties}"
                        customData:infoPath="${a}"
                        customData:parameters="${t.stringifiedParameters}"
                        customData:draftSupported="${e.draftSupported}"
                    >
                        <points>
                            <InteractiveLineChartPoint
                                core:require="{VisualFilterRuntime: 'sap/fe/macros/visualfilters/VisualFilterRuntime'}"
                                label="${t.chartLabel}"
                                value="${t.measure}"
                                displayedValue="${t.displayedValue}"
                                color="${t.color}"
                                selected="{path: '$field>/conditions', formatter: 'sap.fe.macros.visualfilters.VisualFilterRuntime.getAggregationSelected'}"
                            />
                        </points>
             </InteractiveLineChart>`}return""}r.getInteractiveLineChartTemplate=s;return r},false);
sap.ui.require.preload({
	"sap/fe/macros/contact/ContactQuickView.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:core="sap.ui.core"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\t\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\t\t\tCONTACT: \'sap/fe/macros/contact/ContactHelper\'\n\t\t\t\t}"\n><template:if test="{contact>}"><VBox class="sapFePaddingTop sapUiTinyMarginBottom"><controls:CustomQuickViewPage\n\t\t\t\tunittest:id="CustomQuickViewPageContact"\n\t\t\t\ticon="{= ${contact>photo@@MODEL.format} ? ${contact>photo@@MODEL.format} : \'sap-icon://person-placeholder\' }"\n\t\t\t\tfallbackIcon="sap-icon://person-placeholder"\n\t\t\t\ttitle="{contact>fn@@MODEL.format}"\n\t\t\t\tdescription="{contact>role@@MODEL.format}"\n\t\t\t\tcrossAppNavCallback=""\n\t\t\t><core:Fragment fragmentName="sap.fe.macros.contact.ContactQuickViewGroup" type="XML" /></controls:CustomQuickViewPage></VBox></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/contact/ContactQuickViewGroup.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\t\t\t\tCONTACT: \'sap/fe/macros/contact/ContactHelper\'\n\t}"\n><QuickViewGroup heading="{= CONTACT.getContactTitle(${contact>fn}) }"><QuickViewGroupElement\n\t\t\tlabel="{= CONTACT.computeLabel(\'title\', ${contact>title}) }"\n\t\t\tvalue="{contact>title@@MODEL.format}"\n\t\t\ttype="text"\n\t\t\tvisible="{= !!${contact>title}}"\n\t\t/><QuickViewGroupElement\n\t\t\tlabel="{= CONTACT.computeLabel(\'org\', ${contact>org}) }"\n\t\t\tvalue="{contact>org@@MODEL.format}"\n\t\t\ttype="text"\n\t\t\tvisible="{= !!${contact>org}}"\n\t\t/><template:if test="{contact>tel}"><template:with path="contact>tel" var="tels"><template:repeat\n\t\t\t\t\tlist="{path:\'tels>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'preferred\'}}"\n\t\t\t\t\tvar="tel"\n\t\t\t\t><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'phone\', ${tel>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{tel>uri/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'phone\', ${tel>uri/@@MODEL.format})}"\n\t\t\t\t\t\ttype="phone"\n\t\t\t\t\t/></template:repeat><template:repeat\n\t\t\t\t\tlist="{path:\'tels>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'work\'}}"\n\t\t\t\t\tvar="tel"\n\t\t\t\t><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'phone\', ${tel>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{tel>uri/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'phone\', ${tel>uri/@@MODEL.format})}"\n\t\t\t\t\t\ttype="phone"\n\t\t\t\t\t/></template:repeat><template:repeat\n\t\t\t\t\tlist="{path:\'tels>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'cell\'}}"\n\t\t\t\t\tvar="tel"\n\t\t\t\t><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'phone\', ${tel>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{tel>uri/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'phone\', ${tel>uri/@@MODEL.format})}"\n\t\t\t\t\t\ttype="phone"\n\t\t\t\t\t/></template:repeat><template:repeat list="{path:\'tels>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'fax\'}}" var="tel"><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'phone\', ${tel>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{tel>uri/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'phone\', ${tel>uri/@@MODEL.format})}"\n\t\t\t\t\t\ttype="phone"\n\t\t\t\t\t/></template:repeat></template:with></template:if><template:if test="{contact>email}"><template:with path="contact>email" var="emails"><template:repeat\n\t\t\t\t\tlist="{path:\'emails>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'preferred\'}}"\n\t\t\t\t\tvar="mail"\n\t\t\t\t><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'mail\', ${mail>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{mail>address/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'mail\', ${mail>address/@@MODEL.format})}"\n\t\t\t\t\t\ttype="email"\n\t\t\t\t\t/></template:repeat><template:repeat\n\t\t\t\t\tlist="{path:\'emails>\', filters: { path: \'type/$EnumMember\', operator: \'EndsWith\', value1: \'work\'}}"\n\t\t\t\t\tvar="mail"\n\t\t\t\t><QuickViewGroupElement\n\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'mail\', ${mail>type/$EnumMember})}"\n\t\t\t\t\t\tvalue="{mail>address/@@MODEL.format}"\n\t\t\t\t\t\ttarget="{= CONTACT.formatUri(\'mail\', ${mail>address/@@MODEL.format})}"\n\t\t\t\t\t\ttype="email"\n\t\t\t\t\t/></template:repeat></template:with></template:if><template:if test="{contact>adr}"><template:with path="contact>adr" var="adrs"><template:repeat list="{adrs>}" var="adr"><template:if test="{adr>label}"><template:then><QuickViewGroupElement\n\t\t\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'address\', ${adr>type/$EnumMember})}"\n\t\t\t\t\t\t\t\tvalue="{adr>label/@@MODEL.format}"\n\t\t\t\t\t\t\t/></template:then><template:else><QuickViewGroupElement\n\t\t\t\t\t\t\t\tlabel="{= CONTACT.computeLabel(\'address\', ${adr>type/$EnumMember})}"\n\t\t\t\t\t\t\t\tvalue="{= CONTACT.formatAddress(${adr>street/@@MODEL.format}, ${adr>code/@@MODEL.format}, ${adr>locality/@@MODEL.format}, ${adr>region/@@MODEL.format}, ${adr>country/@@MODEL.format})}"\n\t\t\t\t\t\t\t/></template:else></template:if></template:repeat></template:with></template:if></QuickViewGroup></core:FragmentDefinition>\n',
	"sap/fe/macros/filter/CustomFilter.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:core="sap.ui.core"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns:fpm="sap.fe.macros.fpm"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\t\tFILTERFIELD: \'sap/fe/macros/filter/FilterFieldHelper\',\n\t\t\tFILTER: \'sap/fe/macros/filter/FilterUtils\',\n\t\t\tMACRO: \'sap/fe/macros/MacroTemplating\'\n\t\t}"\n><template:with path="item>annotationPath" var="property"><mdc:FilterField\n\t\t\tid="{= ID.generate([${this>id}, \'CustomFilterField\', ${item>key}]) }"\n\t\t\tdelegate="{name: \'sap/ui/mdc/odata/v4/FieldBaseDelegate\'}"\n\t\t\tlabel="{item>label}"\n\t\t\tdataType="{= ${property>$Type} || \'Edm.String\'}"\n\t\t\tmaxConditions="{= ${property>@@FILTERFIELD.maxConditions} || -1 }"\n\t\t\tconditions="{= \'{$filters>/conditions/\' + ${item>conditionPath} + \'}\'}"\n\t\t\toperators="{parts : [{path: \'property>\'}, {path: \'item>useSemanticDateRange\'}, {path: \'item>settings\'}, {path: \'contextPath>@@MACRO.getPath\'}], formatter: \'FIELD.operators\'}"\n\t\t\tdataTypeConstraints="{item>constraints}"\n\t\t\tdataTypeFormatOptions="{item>formatOptions}"\n\t\t\tfieldHelp="undefined"\n\t\t\trequired="{item>required}"\n\t\t\tcustomData:isSlot="{= ${item>type} === \'Slot\'}"\n\t\t><controls:CustomFilterFieldContentWrapper\n\t\t\t\tcore:require="{handler: \'sap/fe/macros/filter/FilterUtils\'}"\n\t\t\t\tid="{= ID.generate([${this>id}, \'FilterFieldContentWrapper\', ${item>key}]) }"\n\t\t\t\tbinding="{= \'{filterValues>/\' + FILTER.conditionToModelPath(${item>conditionPath}) + \'}\' }"\n\t\t\t\tconditions="{path: \'$field>/conditions\'}"\n\t\t\t><template:if test="{= !!${item>template}}"><fpm:CustomFragment\n\t\t\t\t\t\tfragmentName="{item>template}"\n\t\t\t\t\t\tid="{= ID.generate([${this>id}, \'CustomFilterField\', ${item>key}]) }"\n\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t/></template:if><template:if test="{= ${item>type} === \'Slot\'}"><slot name="{item>slotName}" /></template:if></controls:CustomFilterFieldContentWrapper></mdc:FilterField></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/filter/DraftEditState.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcf="sap.ui.mdc.field"\n\txmlns:mdcv="sap.ui.mdc.valuehelp"\n\txmlns:mdcvc="sap.ui.mdc.valuehelp.content"\n\txmlns:core="sap.ui.core"\n\ttemplate:require="{\n\t\t\t\t\t\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\t\t\t\t\t\tEDITSTATE: \'sap/fe/macros/filter/DraftEditState\'\n\t\t\t\t\t\t}"\n><mdc:FilterField\n\t\tlabel="{sap.fe.i18n>FILTERBAR_EDITING_STATUS}"\n\t\tmaxConditions="1"\n\t\tid="{= ID.generate([${this>id}, \'FilterField\', \'DraftEditingStatus\' ]) }"\n\t\toperators="DRAFT_EDIT_STATE"\n\t\tdataType="sap.ui.model.odata.type.String"\n\t\tconditions="{$filters>/conditions/$editState}"\n\t\tfieldHelp="{= ID.generate([${this>id}, \'FilterFieldValueHelp\', \'DraftEditingStatus\' ]) }"\n\t\tdisplay="Description"\n\t><mdc:dependents><mdc:ValueHelp\n\t\t\t\tcore:require="{DraftEditState: \'sap/fe/macros/filter/DraftEditState\'}"\n\t\t\t\tid="{= ID.generate([${this>id}, \'FilterFieldValueHelp\', \'DraftEditingStatus\' ]) }"\n\t\t\t><mdc:typeahead><mdcv:Popover><mdcvc:FixedList useFirstMatch="true"><template:with path="this>" helper="EDITSTATE.getEditStatesContext" var="states"><template:repeat list="{states>}" var="state"><mdcf:ListFieldHelpItem key="{state>id}" text="{state>display}" /></template:repeat></template:with></mdcvc:FixedList></mdcv:Popover></mdc:typeahead></mdc:ValueHelp></mdc:dependents></mdc:FilterField></core:FragmentDefinition>\n',
	"sap/fe/macros/form/AddressSection.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns="sap.m"\n\txmlns:f="sap.ui.layout.form"\n\txmlns:core="sap.ui.core"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFORM: \'sap/fe/macros/form/FormHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:with path="facet>Target/$AnnotationPath" var="annotationPath"><f:FormContainer\n\t\t\tid="{= ${this>id} ? ID.generate([\'fe\', \'FormContainer\', ${facet>ID}]) : undefined }"\n\t\t\tunittest:id="formCAddr"\n\t\t\tbinding="{= FORM.generateBindingExpression((MODEL.getNavigationPath(${facet>Target/$AnnotationPath}) ? MODEL.getNavigationPath(${facet>Target/$AnnotationPath}) : \'\'),${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\tvisible="{= ${facet>./@com.sap.vocabularies.UI.v1.Hidden/$Path} ? (\'{= !${\' + ${facet>./@com.sap.vocabularies.UI.v1.Hidden/$Path} + \'} }\') : true }"\n\t\t\tmacrodata:navigationPath="{= MODEL.getNavigationPath(${annotationPath>}) ? MODEL.getNavigationPath(${annotationPath>}) : \'\'}"\n\t\t\tmacrodata:etName="{contextPath>./@sapui.name}"\n\t\t><template:if test="{= ${facet>@@MODEL.label} }"><f:title><core:Title level="{this>titleLevel}" text="{= ${facet>@@MODEL.label} }" /></f:title></template:if><f:formElements><f:FormElement id="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${facet>ID}]) : undefined}"><f:fields><Text text="{facet>Target/$AnnotationPath/label@@MODEL.format}" class="sapMITBFilterNeutral" /></f:fields></f:FormElement></f:formElements></f:FormContainer></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/form/FormActionButtons.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tDEFAULTACTIONHANDLER: \'sap/fe/macros/internal/helpers/DefaultActionHandler\'\n\t}"\n><template:if test="{= ${action>type} === \'Menu\'}"><template:then><MenuButton\n\t\t\t\ttext="{action>text}"\n\t\t\t\tmenuPosition="BeginBottom"\n\t\t\t\tid="{= ID.generate([\'fe\',${action>id}])}"\n\t\t\t\tvisible="{= COMMON.handleVisibilityOfMenuActions(${action>visible}) }"\n\t\t\t\tenabled="{action>enabled}"\n\t\t\t\tclass="sapUiSmallMarginBegin"\n\t\t\t\tuseDefaultActionOnly="{= DEFAULTACTIONHANDLER.getUseDefaultActionOnly(${action>})}"\n\t\t\t\tbuttonMode="{= DEFAULTACTIONHANDLER.getButtonMode(${action>})}"\n\t\t\t\tdefaultAction="{= DEFAULTACTIONHANDLER.getDefaultActionHandler(undefined, ${action>}, undefined, undefined, \'Form\')}"\n\t\t\t><menu><Menu><template:repeat list="{action>menu}" var="menuItemAction"><template:if test="{= ${menuItemAction>type} === \'Default\'}"><template:then><MenuItem\n\t\t\t\t\t\t\t\t\t\tcore:require="{FPM: \'sap/fe/core/helpers/FPMHelper\'}"\n\t\t\t\t\t\t\t\t\t\tid="{= ID.generate([\'fe\',${menuItemAction>id}])}"\n\t\t\t\t\t\t\t\t\t\ttext="{menuItemAction>text}"\n\t\t\t\t\t\t\t\t\t\tpress="{= ${menuItemAction>command} ? (\'cmd:\' + ${menuItemAction>command}) : COMMON.buildActionWrapper(${menuItemAction>})}"\n\t\t\t\t\t\t\t\t\t\tvisible="{menuItemAction>visible}"\n\t\t\t\t\t\t\t\t\t\tenabled="{menuItemAction>enabled}"\n\t\t\t\t\t\t\t\t\t/></template:then><template:else><MenuItem\n\t\t\t\t\t\t\t\t\t\tid="{menuItemAction>id}"\n\t\t\t\t\t\t\t\t\t\tbinding="{menuItemAction>binding}"\n\t\t\t\t\t\t\t\t\t\ttext="{menuItemAction>text}"\n\t\t\t\t\t\t\t\t\t\tpress="{= ${menuItemAction>command} ? (\'cmd:\' + ${menuItemAction>command}) : ${menuItemAction>press}}"\n\t\t\t\t\t\t\t\t\t\tariaHasPopup="{menuItemAction>requiresDialog}"\n\t\t\t\t\t\t\t\t\t\tvisible="{menuItemAction>visible}"\n\t\t\t\t\t\t\t\t\t\tenabled="{menuItemAction>enabled}"\n\t\t\t\t\t\t\t\t\t\tmacrodata:IBNData="{menuItemAction>customData}"\n\t\t\t\t\t\t\t\t\t/></template:else></template:if></template:repeat></Menu></menu></MenuButton></template:then><template:elseif test="{= ${action>type} === \'Default\'}"><Button\n\t\t\t\tcore:require="{FPM: \'sap/fe/core/helpers/FPMHelper\'}"\n\t\t\t\tid="{= ID.generate([\'fe\',${action>id}])}"\n\t\t\t\ttext="{action>text}"\n\t\t\t\tpress="{= ${action>command} ? (\'cmd:\' + ${action>command}) : COMMON.buildActionWrapper(${action>})}"\n\t\t\t\ttype="Transparent"\n\t\t\t\tvisible="{action>visible}"\n\t\t\t\tenabled="{action>enabled}"\n\t\t\t/></template:elseif><template:else><Button\n\t\t\t\tid="{action>id}"\n\t\t\t\tbinding="{action>binding}"\n\t\t\t\ttext="{action>text}"\n\t\t\t\tpress="{= ${action>command} ? (\'cmd:\' + ${action>command}) : ${action>press}}"\n\t\t\t\ttype="{action>buttonType}"\n\t\t\t\tariaHasPopup="{action>requiresDialog}"\n\t\t\t\tvisible="{action>visible}"\n\t\t\t\tenabled="{action>enabled}"\n\t\t\t\tmacrodata:IBNData="{action>customData}"\n\t\t\t/></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/form/FormContainer.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:f="sap.ui.layout.form"\n\txmlns:macro="sap.fe.macros"\n\txmlns:macroForm="sap.fe.macros.form"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\txmlns:core="sap.ui.core"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns:dt="sap.ui.dt"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns:fpm="sap.fe.macros.fpm"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFORM: \'sap/fe/macros/form/FormHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tDataField: \'sap/fe/core/templating/DataFieldFormatters\',\n\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\'\n\t}"\n><f:FormContainer\n\t\tcore:require="{FormContainerRuntime: \'sap/fe/macros/form/FormContainerAPI\'}"\n\t\tunittest:id="formC"\n\t\tdt:designtime="{this>designtimeSettings}"\n\t\tid="{= ${this>id} || undefined}"\n\t\tvisible="{this>visible}"\n\t\tmacrodata:navigationPath="{this>navigationPath}"\n\t\tmacrodata:etName="{contextPath>./@sapui.name}"\n\t><template:if test="{this>title}"><f:title><core:Title level="{this>titleLevel}" text="{this>title}" /></f:title></template:if><template:if test="{actions>}"><template:then><f:toolbar><OverflowToolbar\n\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'FormActionsToolbar\']) : undefined}"\n\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t><Title level="{this>titleLevel}" text="{this>title}" /><ToolbarSpacer /><template:repeat list="{actions>}" var="action"><core:Fragment fragmentName="sap.fe.macros.form.FormActionButtons" type="XML" /></template:repeat></OverflowToolbar></f:toolbar></template:then></template:if><f:dependents><macroForm:FormContainerAPI formContainerId="{this>id}" showDetails="{internal>showDetails}" /><template:repeat list="{path:\'dataFieldCollection>\'}" var="dataField"><template:with path="dataField>annotationPath" var="dataField"><template:if test="{this>id}"><macro:ValueHelp\n\t\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FieldValueHelp\']) }"\n\t\t\t\t\t\t\tproperty="{dataField>Value}"\n\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\tuseMultiValueField="true"\n\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t/></template:if></template:with><template:if test="${dataField>type} === \'Annotation\'}"><template:then><template:with path="dataField>annotationPath" var="annotationDataField"><template:if test="{annotationDataField>Target@@DataField.isSemanticallyConnectedFields}"><template:then><template:repeat list="{annotationDataField>Target/$AnnotationPath/Data}" var="data"><template:with path="data>" helper="COMMON.getDataFromTemplate" var="element"><template:if test="{this>id}"><template:if\n\t\t\t\t\t\t\t\t\t\t\t\t\ttest="{= !FIELD.isFieldPartOfForm(${dataFieldCollection>}, ${element>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\t\t\t\t><macro:ValueHelp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FieldValueHelp\']) }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tproperty="{element>Value}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tuseMultiValueField="true"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t/></template:if></template:if></template:with></template:repeat></template:then></template:if></template:with></template:then></template:if></template:repeat></f:dependents><f:formElements><template:with path="dataFieldCollection>" var="formElements"><template:if test="{= ${formElements>0/annotationPath}.indexOf(\'com.sap.vocabularies.UI.v1.DataPoint\') > -1 }"><template:then><template:with path="formElements>0/annotationPath" var="dataPoint"><f:FormElement\n\t\t\t\t\t\t\t\tdt:designtime="{= ${dataPoint>Value/$Path@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${dataPoint>@@UI.getDataModelObjectPath}]) : undefined}"\n\t\t\t\t\t\t\t\tlabel="{dataPoint>@@FIELD.computeLabelText}"\n\t\t\t\t\t\t\t\tvisible="{= FieldTemplating.getVisibleExpression(${dataPoint>@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t><f:fields><internalMacro:Field\n\t\t\t\t\t\t\t\t\t\tidPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${dataPoint>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FieldValueHelp\']) : \'\'}"\n\t\t\t\t\t\t\t\t\t\tentitySet="{contextPath>}"\n\t\t\t\t\t\t\t\t\t\tdataField="{dataPoint>}"\n\t\t\t\t\t\t\t\t\t\teditMode="{= ${this>displayMode} === \'true\' ? \'Display\' : undefined}"\n\t\t\t\t\t\t\t\t\t\tonChange="{this>onChange}"\n\t\t\t\t\t\t\t\t\t><internalMacro:formatOptions textAlignMode="Form" showEmptyIndicator="true" /></internalMacro:Field></f:fields></f:FormElement></template:with></template:then><template:elseif\n\t\t\t\t\t\ttest="{= ${formElements>0/annotationPath}.indexOf(\'com.sap.vocabularies.Communication.v1.Contact\') > -1 }"\n\t\t\t\t\t><template:with path="formElements>0/annotationPath" var="metaPath"><f:FormElement\n\t\t\t\t\t\t\t\tdt:designtime="{= ${metaPath>./@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t><f:label><Label\n\t\t\t\t\t\t\t\t\t\ttext="{metaPath>fn/$Path@com.sap.vocabularies.Common.v1.Label}"\n\t\t\t\t\t\t\t\t\t\tvisible="{= FieldTemplating.getVisibleExpression(${dataField>@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\t\t><layoutData><f:ColumnElementData cellsLarge="12" /></layoutData></Label></f:label><f:fields><macro:Contact metaPath="{metaPath>}" contextPath="{contextPath>}" visible="true" /></f:fields></f:FormElement></template:with></template:elseif><template:else><template:repeat list="{path: \'formElements>\'}" var="dataField"><template:if test="{= ${dataField>type} === \'Annotation\'}"><template:then><template:with path="dataField>annotationPath" var="annotationDataField"><template:if test="{annotationDataField>Target@@DataField.isSemanticallyConnectedFields}"><template:then><f:FormElement\n\t\t\t\t\t\t\t\t\t\t\t\t\tdt:designtime="{= ${annotationDataField>Value/$Path@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'SemanticFormElement\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible="{= (${dataField>isPartOfPreview}) ? FieldTemplating.getVisibleExpression(${annotationDataField>@@UI.getDataModelObjectPath}) : \'{= ${internal>showDetails} === true}\'}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t\t\t\t\t\t><f:label><Label\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttext="{annotationDataField>@@FIELD.computeLabelText}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'SemanticFormElementLabel\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></f:label><f:fields><controls:FieldWrapper\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trequired="{= UI.getRequiredExpressionForConnectedDataField(${annotationDataField>Target@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t><HBox wrap="Wrap"><template:repeat\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlist="{annotationDataField>Target/$AnnotationPath/Data}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar="data"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t><template:with\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpath="data>"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thelper="COMMON.getDataFromTemplate"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvar="element"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t><core:Fragment\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfragmentName="sap.fe.macros.internal.field.ConnectedDataField"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype="XML"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></template:with></template:repeat></HBox></controls:FieldWrapper></f:fields></f:FormElement></template:then><template:elseif\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{= ${annotationDataField>Value} &amp;&amp; ${annotationDataField>Value/$Path} &amp;&amp; UI.isMultiValueField(${annotationDataField>Value@@Property.getPropertyObjectPath})}"\n\t\t\t\t\t\t\t\t\t\t\t><f:FormElement\n\t\t\t\t\t\t\t\t\t\t\t\t\tdt:designtime="{= ${annotationDataField>Value/$Path@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : undefined }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel="{annotationDataField>@@FIELD.computeLabelText}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible="{= (${dataField>isPartOfPreview}) ? FieldTemplating.getVisibleExpression(${annotationDataField>@@UI.getDataModelObjectPath}) : \'{= ${internal>showDetails} === true}\'}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t\t\t\t\t\t><f:fields><internalMacro:MultiValueField\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tidPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FieldValueHelp\']) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmetaPath="{annotationDataField>}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t><internalMacro:formatOptions showEmptyIndicator="true" /></internalMacro:MultiValueField></f:fields></f:FormElement></template:elseif><template:else><f:FormElement\n\t\t\t\t\t\t\t\t\t\t\t\t\tdt:designtime="{= ${annotationDataField>Value/$Path@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : undefined }"\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabel="{annotationDataField>@@FIELD.computeLabelText}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tvisible="{= (${dataField>isPartOfPreview}) ? FieldTemplating.getVisibleExpression(${annotationDataField>@@UI.getDataModelObjectPath}) : \'{= ${internal>showDetails} === true}\'}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t\t\t\t\t\t><f:fields><internalMacro:Field\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tidPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FormElement\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FieldValueHelp\']) : \'\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tentitySet="{contextPath>}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdataField="{annotationDataField>}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonChange="{this>onChange}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t><internalMacro:formatOptions\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextLinesEdit="{dataField>formatOptions/textLinesEdit}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextMaxLines="{dataField>formatOptions/textMaxLines}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextMaxCharactersDisplay="{dataField>formatOptions/textMaxCharactersDisplay}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextExpandBehaviorDisplay="{dataField>formatOptions/textExpandBehaviorDisplay}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAlignMode="Form"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowEmptyIndicator="true"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></internalMacro:Field></f:fields></f:FormElement></template:else></template:if></template:with></template:then><template:elseif test="{= ${dataField>type} === \'Default\'}"><f:FormElement\n\t\t\t\t\t\t\t\t\t\tdt:designtime="{= ${dataField>Value/$Path@com.sap.vocabularies.UI.v1.AdaptationHidden} ? \'not-adaptable-tree\' : undefined }"\n\t\t\t\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, ${dataField>id}]) : \'\' }"\n\t\t\t\t\t\t\t\t\t\tlabel="{dataField>label}"\n\t\t\t\t\t\t\t\t\t\tvisible="{dataField>visible}"\n\t\t\t\t\t\t\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${contextPath>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t\t\t\t\t\t\t><f:fields><fpm:CustomFragment\n\t\t\t\t\t\t\t\t\t\t\t\tid="{= ID.generate([${this>id}, ${dataField>key}]) }"\n\t\t\t\t\t\t\t\t\t\t\t\tfragmentName="{dataField>template}"\n\t\t\t\t\t\t\t\t\t\t\t\tcontextPath="{entitySet>}"\n\t\t\t\t\t\t\t\t\t\t\t/></f:fields></f:FormElement></template:elseif><template:elseif test="{= ${dataField>type} === \'Slot\'}"><slot name="{dataField>key}" /></template:elseif></template:if></template:repeat></template:else></template:if></template:with></f:formElements></f:FormContainer></core:FragmentDefinition>\n',
	"sap/fe/macros/form/FormElementFlexibility.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\txmlns:f="sap.ui.layout.form"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\ttemplate:require="{\n        FIELD: \'sap/fe/macros/field/FieldHelper\',\n        FORM: \'sap/fe/macros/form/FormHelper\',\n        MODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n        COMMON: \'sap/fe/macros/CommonHelper\',\n        UI: \'sap/fe/core/templating/UIFormatters\',\n\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\'\n    }"\n><template:if test="{dataField>@com.sap.vocabularies.UI.v1.DataFieldDefault}"><template:then><template:with path="dataField>@com.sap.vocabularies.UI.v1.DataFieldDefault" var="dataField"><core:Fragment fragmentName="sap.fe.macros.form.FormElementFlexibility" type="XML" /></template:with></template:then><template:else><f:FormElement\n\t\t\t\tunittest:id="FormElement"\n\t\t\t\tid="{= ${this>_flexId} + \'_FormElement\'}"\n\t\t\t\tlabel="{= ${dataField>@com.sap.vocabularies.Common.v1.Label} || ${dataField>@@MODEL.label} || \'[LABEL_MISSING: \' + ${dataField>@@FIELD.propertyName} +\']\'}"\n\t\t\t\tvisible="{= FieldTemplating.getVisibleExpression(${dataField>@@UI.getDataModelObjectPath})}"\n\t\t\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${entitySet>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t\t\t><internalMacro:Field\n\t\t\t\t\teditMode="{= ${this>displayMode} === \'true\' ? \'Display\' : undefined}"\n\t\t\t\t\t_flexId="{this>_flexId}"\n\t\t\t\t\tentitySet="{entitySet>}"\n\t\t\t\t\tdataField="{dataField>}"\n\t\t\t\t\tonChange="{this>onChange}"\n\t\t\t\t><internalMacro:formatOptions textAlignMode="Form" showEmptyIndicator="true" /></internalMacro:Field></f:FormElement></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/form/ValueHelpWrapper.fragment.xml":'<core:FragmentDefinition\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:macro="sap.fe.macros"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{FORM: \'sap/fe/macros/form/FormHelper\'}"\n><macro:ValueHelp\n\t\t_flexId="{= ${this>idPrefix} + \'-content_FieldValueHelp\'}"\n\t\tproperty="{property>}"\n\t\tcontextPath="{contextPath>}"\n\t\tbinding="{= FORM.generateBindingExpression(${this>navigationPath},${entitySet>./@com.sap.vocabularies.Common.v1.SemanticKey})}"\n\t/></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/CollaborationAvatar.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n><Avatar\n\t\tcore:require="{FieldRuntime: \'sap/fe/macros/field/FieldRuntime\'}"\n\t\tvisible="{this>collaborationHasActivityExpression}"\n\t\tinitials="{this>collaborationInitialsExpression}"\n\t\tdisplaySize="Custom"\n\t\tcustomDisplaySize="1.75rem"\n\t\tcustomFontSize="1rem"\n\t\tbackgroundColor="{this>collaborationColorExpression}"\n\t/></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/field/ConnectedDataField.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><internalMacro:Field\n\t\tidPrefix="{= ${this>id} ? ID.generate([${this>id}, \'SemanticFormElement\', ${annotationDataField>@@UI.getDataModelObjectPath},${element>Value/$Path}]) : \'\' }"\n\t\tvhIdPrefix="{= ${this>id} ? ID.generate([${this>id}, \'FieldValueHelp\']) : \'\' }"\n\t\tentitySet="{entitySet>}"\n\t\tdataField="{element>}"\n\t\tonChange="{this>onChange}"\n\t\tariaLabelledBy="{= ${this>id} ? ID.generate([${this>id}, \'SemanticFormElementLabel\', ${annotationDataField>@@UI.getDataModelObjectPath}]) : \'\' }"\n\t><internalMacro:formatOptions\n\t\t\ttextLinesEdit="{element>formatOptions/textLinesEdit}"\n\t\t\ttextMaxLines="{element>formatOptions/textMaxLines}"\n\t\t\ttextMaxCharactersDisplay="{dataField>formatOptions/textMaxCharactersDisplay}"\n\t\t\ttextExpandBehaviorDisplay="{dataField>formatOptions/textExpandBehaviorDisplay}"\n\t\t\ttextAlignMode="Form"\n\t\t\tshowEmptyIndicator="true"\n\t\t/><internalMacro:layoutData><FlexItemData growFactor="1" /></internalMacro:layoutData></internalMacro:Field><template:if test="{= COMMON.notLastIndex(${annotationDataField>Target/$AnnotationPath/}, ${element>})}"><template:then><Text\n\t\t\t\ttext="{= COMMON.getDelimiter(${annotationDataField>Target/$AnnotationPath/Template})}"\n\t\t\t\tclass="sapUiSmallMarginBeginEnd"\n\t\t\t\twidth="100%"\n\t\t\t/></template:then></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/filterField/FilterFieldTemplate.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\ttemplate:require="{\n\t\tCOMMON_HELPER: \'sap/fe/macros/CommonHelper\'\n\t}"\n><internalMacro:FilterField\n\t\tidPrefix="{this>idPrefix}"\n\t\tvhIdPrefix="{this>vhIdPrefix}"\n\t\tproperty="{property>}"\n\t\tcontextPath="{contextPath>}"\n\t\tuseSemanticDateRange="{this>useSemanticDateRange}"\n\t\tsettings="{= COMMON_HELPER.stringifyCustomData(${this>settings}) }"\n\t\tvisualFilter="{visualFilter>}"\n\t/></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueHelp.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\'\n\t}"\n><template:with path="property>" var="originalProperty"><template:if test="{this>filterFieldValueHelp}"><template:then><template:with path="property>" helper="FIELD.valueHelpPropertyForFilterField" var="property"><core:Fragment fragmentName="sap.fe.macros.internal.valuehelp.ValueHelpContent" type="XML" /></template:with></template:then><template:else><template:with path="property>" helper="FIELD.valueHelpProperty" var="property"><core:Fragment fragmentName="sap.fe.macros.internal.valuehelp.ValueHelpContent" type="XML" /></template:with></template:else></template:if></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueHelpContent.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:fl="sap.ui.fl.variants"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcv="sap.ui.mdc.valuehelp"\n\txmlns:mdcvc="sap.ui.mdc.valuehelp.content"\n\ttemplate:require="{\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tMODEL : \'sap/ui/model/odata/v4/AnnotationHelper\'\n\t}"\n><template:if test="{property>@@Property.hasValueHelp}"><template:then><mdc:ValueHelp\n\t\t\t\tcore:require="{CollaborationHelper: \'sap/fe/macros/internal/collaborationHelper\'}"\n\t\t\t\tunittest:id="ValueHelpMacroFragment"\n\t\t\t\tdelegate="{= ValueHelpTemplating.getDelegateConfiguration(${property>@@Property.getPropertyPath},${this>conditionModel}, ${originalProperty>@@Property.getPropertyPath}, ${this>requestGroupId}, ${this>useMultiValueField})}"\n\t\t\t\tid="{= ValueHelpTemplating.generateID(${this>_flexId},${this>idPrefix},${originalProperty>@@Property.getRelativePropertyPath},${property>@@Property.getRelativePropertyPath})}"\n\t\t\t\tvalidateInput="{= (${this>filterFieldValueHelp} || ${this>requiresValidation}) ? true : ValueHelpTemplating.requiresValidation(${property>@@Property.getProperty})}"\n\t\t\t\topen="{= ${this>collaborationEnabled} ? \'CollaborationHelper.onValueHelpOpenDialog\' : undefined }"\n\t\t\t\tclosed="{= ${this>collaborationEnabled} ? \'CollaborationHelper.onValueHelpCloseDialog\' : undefined }"\n\t\t\t\tcustomData:valuelistForValidation="{property>@com.sap.vocabularies.Common.v1.ValueListForValidation@@MODEL.value}"\n\t\t\t\tcustomData:showConditionPanel="{= ${this>filterFieldValueHelp} ? ValueHelpTemplating.shouldShowConditionPanel(${property>@@Property.getPropertyObjectPath}, ${contextPath>@@UI.getDataModelObjectPath}) : false}"\n\t\t\t><mdc:typeahead><mdcv:Popover opensOnFocus="{= ${this>filterFieldValueHelp} ? false : true}"><mdcvc:MTable\n\t\t\t\t\t\t\tid="{= ValueHelpTemplating.generateID(${this>_flexId},${this>idPrefix},${originalProperty>@@Property.getRelativePropertyPath},${property>@@Property.getRelativePropertyPath})}::Popover::qualifier::"\n\t\t\t\t\t\t\tcaseSensitive="{= ValueHelpTemplating.useCaseSensitiveFilterRequests(${property>@@Property.getPropertyObjectPath}, ${property>/@Org.OData.Capabilities.V1.FilterFunctions})}"\n\t\t\t\t\t\t\tuseAsValueHelp="{= ${property>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} || false}"\n\t\t\t\t\t\t/></mdcv:Popover></mdc:typeahead><template:if\n\t\t\t\t\ttest="{= ${property>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} ? (${property>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} === \'true\') : true}"\n\t\t\t\t><mdc:dialog><mdcv:Dialog /></mdc:dialog></template:if></mdc:ValueHelp></template:then><template:elseif test="{= ${property>@@Property.hasDateType} || ${this>filterFieldValueHelp}}"><mdc:ValueHelp\n\t\t\t\tunittest:id="ValueHelpMacroFragmentWithDateTimeFilters"\n\t\t\t\tid="{= ValueHelpTemplating.generateID(${this>_flexId},${this>idPrefix},${originalProperty>@@Property.getRelativePropertyPath},${property>@@Property.getRelativePropertyPath})}"\n\t\t\t\tcustomData:requestGroupId="{this>requestGroupId}"\n\t\t\t><mdc:dialog><mdcv:Dialog title="{= ${property>@@Property.getLabel} || ${property>@@Property.getName}}"><mdcvc:Conditions label="{= ${property>@@Property.getLabel} || ${property>@@Property.getName}}" /></mdcv:Dialog></mdc:dialog></mdc:ValueHelp></template:elseif></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueListDialogTable.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tVLH: \'sap/fe/macros/internal/valuehelp/ValueListHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><template:with path="valueList>" helper="VLH.getValueListCollectionEntitySet" var="entitySet"><mdc:Table\n\t\t\tid="{source>id}::Table"\n\t\t\theight="100%"\n\t\t\tdelegate="{parts: [{path:\'valueList>\'}], formatter:\'VLH.getTableDelegate\'}"\n\t\t\tthreshold="20"\n\t\t\tp13nMode="Sort"\n\t\t\tshowRowCount="true"\n\t\t\tsortConditions="{parts: [{path:\'valueList>\'},{path:\'source>/bSuggestion\'}], formatter:\'VLH.getSortConditionsFromPresentationVariant\'}"\n\t\t\tmacrodata:columns="{= COMMON.stringifyCustomData(${viewData>/columns})}"\n\t\t\tautoBindOnInit="false"\n\t\t><mdc:columns><template:repeat list="{valueList>Parameters}" var="parameter"><template:if\n\t\t\t\t\t\ttest="{= ${parameter>$Type} !== \'com.sap.vocabularies.Common.v1.ValueListParameterIn\'  &amp;&amp; ${parameter>$Type} !== \'com.sap.vocabularies.Common.v1.ValueListParameterConstant\'}"\n\t\t\t\t\t><template:with path="parameter>ValueListProperty" var="property" helper="VLH.getValueListProperty"><template:if\n\t\t\t\t\t\t\t\ttest="{parts:[{path:\'valueList>\'}, {path:\'parameter>\'}, {path:\'source>\'}],formatter:\'VLH.getColumnVisibility\'}"\n\t\t\t\t\t\t\t><mdc:table.Column\n\t\t\t\t\t\t\t\t\twidth="{= \'{parts: [{value: \\\'getColumnWidthForValueHelpTable\\\'}, {path: \\\'internal>tablePropertiesAvailable\\\', targetType: \\\'any\\\'},{value: \\\'\' + ${parameter>ValueListProperty}+ \'\\\'} , {value: false}], formatter: \\\'sap.fe.core.formatters.TableFormatter\\\'}\' }"\n\t\t\t\t\t\t\t\t\tminWidth="{= \'{parts: [{value: \\\'getColumnWidthForValueHelpTable\\\'}, {path: \\\'internal>tablePropertiesAvailable\\\', targetType: \\\'any\\\'},{value: \\\'\' + ${parameter>ValueListProperty}+ \'\\\'} , {value: true}], formatter: \\\'sap.fe.core.formatters.TableFormatter\\\'}\' }"\n\t\t\t\t\t\t\t\t\theader="{= ${property>@com.sap.vocabularies.Common.v1.Label} || ${property>@sapui.name@@MODEL.value}}"\n\t\t\t\t\t\t\t\t\thAlign="{= ValueHelpTemplating.getColumnHAlign(${property>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\tdataProperty="{= ValueHelpTemplating.getColumnDataProperty(${parameter>ValueListProperty},${property>@@Property.getPropertyObjectPath})}"\n\t\t\t\t\t\t\t\t><internalMacro:Field editMode="Display" entitySet="{entitySet>}" dataField="{property>}" wrap="false"><internalMacro:formatOptions\n\t\t\t\t\t\t\t\t\t\t\tdisplayMode="{= ValueHelpTemplating.getValueHelpTableDisplayMode(${property>@@Property.getPropertyObjectPath})}"\n\t\t\t\t\t\t\t\t\t\t/></internalMacro:Field></mdc:table.Column></template:if></template:with></template:if></template:repeat></mdc:columns><mdc:type><mdc:table.GridTableType /></mdc:type></mdc:Table></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueListFilterBar.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros.valuehelp"\n><macro:ValueHelpFilterBar\n\t\tid="{source>id}::FilterBar"\n\t\tcontextPath="{contextPath>}"\n\t\t_valueList="{valueList>}"\n\t\tliveMode="false"\n\t\tenableFallback="true"\n\t\thideBasicSearch="true"\n\t/></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueListTable.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:customdata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tVLH: \'sap/fe/macros/internal/valuehelp/ValueListHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><Table\n\t\tid="{source>id}::SuggestTable"\n\t\titems="{parts: [{path:\'valueList>\'}, {path:\'source>/requestGroupId\'}, {path:\'source>/bSuggestion\'}, {path:\'source>/valueHelpWithFixedValues\'}], formatter:\'VLH.getTableItemsParameters\'}"\n\t\tsticky="ColumnHeaders"\n\t\tgrowing="{= ${source>/valueHelpWithFixedValues} ? true : ValueHelpTemplating.getGrowingFormatter(${source>/propertyPath})}"\n\t\tgrowingScrollToLoad="{= ${source>/valueHelpWithFixedValues} ? true : ValueHelpTemplating.getGrowingFormatter(${source>/propertyPath})}"\n\t><columns><template:repeat list="{path: \'valueList>Parameters\'}" var="parameter"><template:if\n\t\t\t\t\ttest="{= ${parameter>$Type} !== \'com.sap.vocabularies.Common.v1.ValueListParameterIn\'  &amp;&amp; ${parameter>$Type} !== \'com.sap.vocabularies.Common.v1.ValueListParameterConstant\'}"\n\t\t\t\t><template:with path="parameter>ValueListProperty" var="dataField" helper="VLH.getValueListProperty"><template:if test="{= !(${dataField>@com.sap.vocabularies.UI.v1.Hidden} === true)}"><Column\n\t\t\t\t\t\t\t\tvisible="{parts:[{path:\'valueList>\'}, {path:\'parameter>\'}, {path:\'source>\'}],formatter:\'VLH.getColumnVisibility\'}"\n\t\t\t\t\t\t\t\tminScreenWidth="{path:\'valueList>\',formatter:\'VLH.getMinScreenWidth\'}"\n\t\t\t\t\t\t\t\tdemandPopin="true"\n\t\t\t\t\t\t\t\tpopinDisplay="Inline"\n\t\t\t\t\t\t\t\thAlign="{= ValueHelpTemplating.getColumnHAlign(${dataField>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\twidth="{=VLH.getColumnWidth(${dataField>@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t><template:if test="{= !(${source>valueHelpWithFixedValues} === true)}"><core:Fragment fragmentName="sap.fe.macros.internal.valuehelp.ValueListTableColumnHeader" type="XML" /></template:if></Column></template:if></template:with></template:if></template:repeat></columns><items><ColumnListItem type="Active" customdata:ensurePropertyLoaded="{= VLH.getOutParameterPaths(${valueList>Parameters}) }"><cells><template:with path="valueList>" helper="VLH.getValueListCollectionEntitySet" var="entitySet"><template:repeat list="{valueList>Parameters}" var="parameter"><template:if test="{= ${parameter>$Type} !== \'com.sap.vocabularies.Common.v1.ValueListParameterIn\'}"><template:with path="parameter>ValueListProperty" var="property" helper="VLH.getValueListProperty"><template:if test="{= !(${property>@com.sap.vocabularies.UI.v1.Hidden} === true)}"><internalMacro:Field editMode="Display" entitySet="{entitySet>}" dataField="{property>}"><internalMacro:formatOptions\n\t\t\t\t\t\t\t\t\t\t\t\tdisplayMode="{= ValueHelpTemplating.getValueHelpTableDisplayMode(${property>@@Property.getPropertyObjectPath}, ${source>valueHelpWithFixedValues}) }"\n\t\t\t\t\t\t\t\t\t\t\t/></internalMacro:Field></template:if></template:with></template:if></template:repeat></template:with></cells></ColumnListItem></items></Table></core:FragmentDefinition>\n',
	"sap/fe/macros/internal/valuehelp/ValueListTableColumnHeader.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\'\n\t}"\n><template:if test="{dataField>Label}"><template:then><Label text="{dataField>Label@@MODEL.value}" wrapping="true" wrappingType="Hyphenated" /></template:then><template:elseif test="{dataField>@com.sap.vocabularies.Common.v1.Label}"><Label text="{dataField>@com.sap.vocabularies.Common.v1.Label@@MODEL.value}" wrapping="true" wrappingType="Hyphenated" /></template:elseif><template:else><Label text="[{dataField>@sapui.name@@MODEL.value}]" wrapping="true" wrappingType="Hyphenated" /></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/manifest.json":'{"_version":"1.21.0","sap.app":{"id":"sap.fe.macros","type":"library","embeds":[],"applicationVersion":{"version":"1.115.1"},"title":"UI5 library: sap.fe.macros","description":"UI5 library: sap.fe.macros","ach":"CA-UI5-FE","resources":"resources.json","offline":true},"sap.ui":{"technology":"UI5","supportedThemes":[]},"sap.ui5":{"dependencies":{"libs":{"sap.m":{},"sap.suite.ui.microchart":{},"sap.ui.core":{},"sap.fe.core":{},"sap.ui.layout":{},"sap.ui.unified":{},"sap.ui.mdc":{}}},"library":{"i18n":{"bundleUrl":"messagebundle.properties","supportedLocales":["","ar","bg","ca","cs","cy","da","de","el","en","en-GB","en-US-sappsd","en-US-saprigi","en-US-saptrc","es","es-MX","et","fi","fr","fr-CA","hi","hr","hu","id","it","iw","ja","kk","ko","lt","lv","ms","nl","no","pl","pt","pt-PT","ro","ru","sh","sk","sl","sv","th","tr","uk","vi","zh-CN","zh-TW"]},"content":{"controls":[],"elements":[],"types":[],"interfaces":[]}}}}',
	"sap/fe/macros/microchart/fragments/AreaMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Area\', ${DataPoint>}, ${DataPoint>Value/$Path@}, ${metaPath>})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><template:with path="metaPath>Dimensions/0/" var="Dimension"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\t\tcore:require="{MICROCHARTR: \'sap/fe/macros/microchart/MicroChartHelper\' }"\n\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'AreaMicroChart\']) : undefined }"\n\t\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\t\t\tmeasures="{DataPoint>Value/$Path}"\n\t\t\t\t\t\tdimension="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text/$Path} : ${Dimension>$PropertyPath} }"\n\t\t\t\t\t\tmeasurePrecision="{= ${DataPoint>Value/$Path/$Precision} ? ${DataPoint>Value/$Path/$Precision} : undefined }"\n\t\t\t\t\t\tmeasureScale="{= MICROCHART.getMeasureScaleForMicroChart(${DataPoint>}) }"\n\t\t\t\t\t\tdimensionPrecision="{= ${Dimension>$PropertyPath/$Precision} ? ${Dimension>$PropertyPath/$Precision} : undefined }"\n\t\t\t\t\t\tdataPointQualifiers="{= ${DataPoint>./@sapui.name}.indexOf(\'com.sap.vocabularies.UI.v1.DataPoint\') === -1 ? undefined : (${DataPoint>./@sapui.name}.indexOf(\'#\') > -1 ? ${DataPoint>./@sapui.name}.split(\'#\')[1] : \'\') }"\n\t\t\t\t\t\tbinding="{= ${this>batchGroupId} ? (\'{path:\\\'\\\', parameters : { $$groupId: \\\'\' + ${this>batchGroupId} + \'\\\'} }\') : undefined }"\n\t\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t\t\tcalendarPattern="{= MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) }"\n\t\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><AreaMicroChart hideOnNoData="{this>hideOnNoData}" size="{this>size}"><chart><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\tpoints="{= MICROCHART.getAggregationForMicrochart(\'Points\', ${contextPath>}, ${DataPoint>}, ${contextPath>@sapui.name}, ${Dimension>}, ${Measure>@}) }"\n\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\ty="{DataPoint>Value@@.MODEL.value}"\n\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></chart><target><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\ty="{DataPoint>TargetValue@@.MODEL.value}"\n\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></target><template:if test="{= ${this>showOnlyChart} !== true }"><firstXLabel><AreaMicroChartLabel /></firstXLabel><firstYLabel><AreaMicroChartLabel /></firstYLabel><lastXLabel><AreaMicroChartLabel /></lastXLabel><lastYLabel><AreaMicroChartLabel /></lastYLabel></template:if><template:if\n\t\t\t\t\t\t\t\ttest="{= ${DataPoint>CriticalityCalculation} &amp;&amp; ${DataPoint>CriticalityCalculation/ImprovementDirection/$EnumMember} }"\n\t\t\t\t\t\t\t><template:with path="DataPoint>CriticalityCalculation" var="CriticalityCalculation"><template:if\n\t\t\t\t\t\t\t\t\t\ttest="{= ${CriticalityCalculation>ImprovementDirection/$EnumMember} === \'com.sap.vocabularies.UI.v1.ImprovementDirectionType/Minimize\'}"\n\t\t\t\t\t\t\t\t\t><template:then><minThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Good"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>ToleranceRangeHighValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></minThreshold><maxThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Error"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>DeviationRangeHighValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></maxThreshold></template:then><template:elseif\n\t\t\t\t\t\t\t\t\t\t\ttest="{= ${CriticalityCalculation>ImprovementDirection/$EnumMember} === \'com.sap.vocabularies.UI.v1.ImprovementDirectionType/Maximize\'}"\n\t\t\t\t\t\t\t\t\t\t><minThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Error"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>DeviationRangeLowValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></minThreshold><maxThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Good"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>ToleranceRangeLowValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></maxThreshold></template:elseif><template:elseif\n\t\t\t\t\t\t\t\t\t\t\ttest="{= ${CriticalityCalculation>ImprovementDirection/$EnumMember} === \'com.sap.vocabularies.UI.v1.ImprovementDirectionType/Target\'}"\n\t\t\t\t\t\t\t\t\t\t><minThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Error"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>DeviationRangeLowValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></minThreshold><maxThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Error"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>DeviationRangeHighValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></maxThreshold><innerMinThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Good"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>ToleranceRangeLowValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></innerMinThreshold><innerMaxThreshold><AreaMicroChartItem\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="Good"\n\t\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= \'{path:\\\'\' + (${contextPath>$kind} === \'EntitySet\' ? \'/\' : \'\') + ${contextPath>@sapui.name} + \'\\\'}\' }"\n\t\t\t\t\t\t\t\t\t\t\t\t><points><AreaMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{CriticalityCalculation>ToleranceRangeHighValue@@.MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></AreaMicroChartItem></innerMaxThreshold></template:elseif></template:if></template:with></template:if></AreaMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:with></template:then><template:elseif\n\t\t\ttest="{= MICROCHART.logWarning(\'Area\', { DataPoint_Value : ${DataPoint>Value}, Dimension : ${metaPath>Dimensions/0/$PropertyPath}, CriticalityCalculation : (${DataPoint>CriticalityCalculation} &amp;&amp; ${DataPoint>CriticalityCalculation/ImprovementDirection/$EnumMember}) }) }"\n\t\t/></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/BulletMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Bullet\', ${DataPoint>}, ${DataPoint>Value/$Path@})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'BulletMicroChart\']) : undefined }"\n\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\t\tbinding="{= MICROCHART.getBindingExpressionForMicrochart(\'Bullet\', ${Measure>@}, ${this>}, ${contextPath>}, ${contextPath>@sapui.name}) }"\n\t\t\t\t\tvisible="{= MICROCHART.getHiddenPathExpression(${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"\n\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><BulletMicroChart\n\t\t\t\t\t\ttargetValue="{DataPoint>TargetValue@@MODEL.value}"\n\t\t\t\t\t\tforecastValue="{DataPoint>ForecastValue@@MODEL.value}"\n\t\t\t\t\t\tmaxValue="{DataPoint>MaximumValue@@MODEL.format}"\n\t\t\t\t\t\tminValue="{DataPoint>MinimumValue@@MODEL.format}"\n\t\t\t\t\t\tactualValueLabel="{= MICROCHART.formatDecimal(${DataPoint>Value/$Path}, ${DataPoint>Value/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"\n\t\t\t\t\t\ttargetValueLabel="{= MICROCHART.formatDecimal(${DataPoint>TargetValue/$Path}, ${DataPoint>TargetValue/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"\n\t\t\t\t\t\tshowDeltaValue="{= ${DataPoint>Visualization/$EnumMember} &amp;&amp; ${DataPoint>Visualization/$EnumMember}.indexOf(\'DeltaBulletChart\') > -1 }"\n\t\t\t\t\t\tmode="{= ${DataPoint>Visualization/$EnumMember} &amp;&amp; ${DataPoint>Visualization/$EnumMember}.indexOf(\'DeltaBulletChart\') > -1 ? \'Delta\' : undefined }"\n\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t><template:if\n\t\t\t\t\t\t\ttest="{= ${DataPoint>Criticality} || (!${DataPoint>Criticality} &amp;&amp; !${DataPoint>CriticalityCalculation}) }"\n\t\t\t\t\t\t><template:then><actual><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\tvalue="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\t\t\t\t\tcolor="{= ${DataPoint>Criticality} ? CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) : undefined }"\n\t\t\t\t\t\t\t\t\t/></actual></template:then><template:else><template:with path="DataPoint>CriticalityCalculation" var="CriticalityCalculation"><template:with path="DataPoint>CriticalityCalculation/ImprovementDirection/$EnumMember" var="Direction"><actual><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\tvalue="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\t\t\t\t\t\t\tcolor="{= COMMON.getCriticalityCalculationBinding(${Direction>},\n\t\t\t\t\t\t\t\t\t${DataPoint>Value@@MODEL.value},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>DeviationRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>ToleranceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>AcceptanceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>AcceptanceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>ToleranceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${CriticalityCalculation>DeviationRangeHighValue@@MODEL.format}) }"\n\t\t\t\t\t\t\t\t\t\t\t/></actual><thresholds><template:if\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{= ${Direction>}.indexOf(\'Minimize\') === -1 &amp;&amp; ${CriticalityCalculation>DeviationRangeLowValue} }"\n\t\t\t\t\t\t\t\t\t\t\t><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{CriticalityCalculation>DeviationRangeLowValue@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="{CriticalityCalculation>DeviationRangeLowValue@@MICROCHART.getThresholdColor}"\n\t\t\t\t\t\t\t\t\t\t\t\t/></template:if><template:if\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{= ${Direction>}.indexOf(\'Minimize\') === -1 &amp;&amp; ${CriticalityCalculation>ToleranceRangeLowValue} }"\n\t\t\t\t\t\t\t\t\t\t\t><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{CriticalityCalculation>ToleranceRangeLowValue@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="{CriticalityCalculation>ToleranceRangeLowValue@@MICROCHART.getThresholdColor}"\n\t\t\t\t\t\t\t\t\t\t\t\t/></template:if><template:if\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{= ${Direction>}.indexOf(\'Maximize\') === -1 &amp;&amp; ${CriticalityCalculation>ToleranceRangeHighValue} }"\n\t\t\t\t\t\t\t\t\t\t\t><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{CriticalityCalculation>ToleranceRangeHighValue@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="{CriticalityCalculation>ToleranceRangeHighValue@@MICROCHART.getThresholdColor}"\n\t\t\t\t\t\t\t\t\t\t\t\t/></template:if><template:if\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{= ${Direction>}.indexOf(\'Maximize\') === -1 &amp;&amp; ${CriticalityCalculation>DeviationRangeHighValue} }"\n\t\t\t\t\t\t\t\t\t\t\t><BulletMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{CriticalityCalculation>DeviationRangeHighValue@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="{CriticalityCalculation>DeviationRangeHighValue@@MICROCHART.getThresholdColor}"\n\t\t\t\t\t\t\t\t\t\t\t\t/></template:if></thresholds></template:with></template:with></template:else></template:if></BulletMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:then><template:elseif test="{= MICROCHART.logWarning(\'Bullet\', { DataPoint_Value : ${DataPoint>Value} }) }" /></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/ColumnMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Column\', ${DataPoint>}, ${DataPoint>Value/$Path@}, ${metaPath>})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><template:with path="metaPath>Dimensions/0/" var="Dimension"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'ColumnMicroChart\']) : undefined }"\n\t\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\t\t\tmeasures="{DataPoint>Value/$Path}"\n\t\t\t\t\t\tdimension="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text/$Path} : ${Dimension>$PropertyPath} }"\n\t\t\t\t\t\tmeasurePrecision="{= ${DataPoint>Value/$Path/$Precision} ? ${DataPoint>Value/$Path/$Precision} : undefined }"\n\t\t\t\t\t\tmeasureScale="{= MICROCHART.getMeasureScaleForMicroChart(${DataPoint>}) }"\n\t\t\t\t\t\tdimensionPrecision="{= ${Dimension>$PropertyPath/$Precision} ? ${Dimension>$PropertyPath/$Precision} : undefined }"\n\t\t\t\t\t\tdataPointQualifiers="{= MICROCHART.getDataPointQualifiersForMicroChart(${DataPoint>./@sapui.name}) }"\n\t\t\t\t\t\tbinding="{= ${this>batchGroupId} ? (\'{path:\\\'\\\', parameters : { $$groupId: \\\'\' + ${this>batchGroupId} + \'\\\'} }\') : undefined }"\n\t\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t\t\tcalendarPattern="{= MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) }"\n\t\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><ColumnMicroChart\n\t\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t\t\tcolumns="{= MICROCHART.getAggregationForMicrochart(\'Columns\', ${contextPath>}, ${DataPoint>}, ${contextPath>@sapui.name}, ${Dimension>}, ${Measure>@}) }"\n\t\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t\t><columns><template:if\n\t\t\t\t\t\t\t\t\ttest="{= ${DataPoint>Criticality} || (!${DataPoint>Criticality} &amp;&amp; !${DataPoint>CriticalityCalculation}) }"\n\t\t\t\t\t\t\t\t><template:then><ColumnMicroChartData\n\t\t\t\t\t\t\t\t\t\t\tvalue="{path:\'DataPoint>Value@@MODEL.value\', type:\'sap.ui.model.odata.type.Decimal\'}"\n\t\t\t\t\t\t\t\t\t\t\tcolor="{= ${DataPoint>Criticality} ? CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) : undefined }"\n\t\t\t\t\t\t\t\t\t\t/></template:then><template:else><template:with path="DataPoint>CriticalityCalculation" var="CriticalityCalculation"><template:with\n\t\t\t\t\t\t\t\t\t\t\t\tpath="DataPoint>CriticalityCalculation/ImprovementDirection/$EnumMember"\n\t\t\t\t\t\t\t\t\t\t\t\tvar="Direction"\n\t\t\t\t\t\t\t\t\t\t\t><ColumnMicroChartData\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{path:\'DataPoint>Value@@MODEL.value\', type:\'sap.ui.model.odata.type.Decimal\'}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcolor="{= COMMON.getCriticalityCalculationBinding(${Direction>},\n\t\t\t\t\t\t\t\t\t\t\t\t${DataPoint>Value@@MODEL.value},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>DeviationRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>ToleranceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>AcceptanceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>AcceptanceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>ToleranceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t\t\t\t${CriticalityCalculation>DeviationRangeHighValue@@MODEL.format}) }"\n\t\t\t\t\t\t\t\t\t\t\t\t/></template:with></template:with></template:else></template:if></columns><template:if test="{= ${this>showOnlyChart} !== \'true\' }"><leftBottomLabel><ColumnMicroChartLabel /></leftBottomLabel><leftTopLabel><ColumnMicroChartLabel /></leftTopLabel><rightBottomLabel><ColumnMicroChartLabel /></rightBottomLabel><rightTopLabel><ColumnMicroChartLabel /></rightTopLabel></template:if></ColumnMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:with></template:then><template:elseif\n\t\t\ttest="{= MICROCHART.logWarning(\'Column\', { DataPoint_Value : ${DataPoint>Value}, Dimension : ${metaPath>Dimensions/0/$PropertyPath} }) }"\n\t\t/></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/ComparisonMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Comparison\', ${DataPoint>}, ${DataPoint>Value/$Path@}, ${metaPath>})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><template:with path="metaPath>Dimensions/0/" var="Dimension"><template:with path="metaPath>Dimensions/0/$PropertyPath" helper="MODEL.resolve$Path" var="DimensionPath"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'ComparisonMicroChart\']) : undefined }"\n\t\t\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\t\t\t\tdataPointQualifiers="{= MICROCHART.getDataPointQualifiersForMicroChart(${DataPoint>./@sapui.name}) }"\n\t\t\t\t\t\t\tbinding="{= ${this>batchGroupId} ? (\'{path:\\\'\\\', parameters : { $$groupId: \\\'\' + ${this>batchGroupId} + \'\\\'} }\') : undefined }"\n\t\t\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><ComparisonMicroChart\n\t\t\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t\t\t\tdata="{= MICROCHART.getAggregationForMicrochart(\'Data\', ${contextPath>}, ${DataPoint>}, ${contextPath>@sapui.name}, ${Dimension>}, ${Measure>@}) }"\n\t\t\t\t\t\t\t\tcolorPalette="{= MICROCHART.getColorPaletteForMicroChart(${DataPoint>}) }"\n\t\t\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t\t\t\tmaxValue="{DataPoint>MaximumValue@@MODEL.value}"\n\t\t\t\t\t\t\t\tminValue="{DataPoint>MinimumValue@@MODEL.value}"\n\t\t\t\t\t\t\t><data><ComparisonMicroChartData\n\t\t\t\t\t\t\t\t\t\tvalue="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\t\t\t\t\ttitle="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${DimensionPath>@com.sap.vocabularies.Common.v1.Text@@MODEL.format} : ${Dimension>@@MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\tdisplayValue="{= MICROCHART.getDisplayValueForMicroChart(${DataPoint>}, ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text}, ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text/$Path/$}, ${DataPoint>Value/$Path/$}) }"\n\t\t\t\t\t\t\t\t\t\tcolor="{= CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\t/></data></ComparisonMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:with></template:with></template:then><template:elseif\n\t\t\ttest="{= MICROCHART.logWarning(\'Comparison\', { DataPoint_Value : ${DataPoint>Value}, Dimension : ${metaPath>Dimensions/0/$PropertyPath} }) }"\n\t\t/></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/HarveyBallMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if\n\t\ttest="{= MICROCHART.shouldMicroChartRender(\'Harvey\', ${DataPoint>}, ${DataPoint>Value/$Path@}, \'\', ${DataPoint>MaximumValue/$Path@})}"\n\t><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'HarveyBallMicroChart\']) : undefined }"\n\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\t\tbinding="{= MICROCHART.getBindingExpressionForMicrochart(\'Harvey\', ${Measure>@}, ${this>}, ${contextPath>}, ${contextPath>@sapui.name}, ${DataPoint>}) }"\n\t\t\t\t\tvisible="{= MICROCHART.getHiddenPathExpression(${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}, ${DataPoint>MaximumValue/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"\n\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><HarveyBallMicroChart\n\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t\tformattedLabel="true"\n\t\t\t\t\t\ttotalLabel="{= MICROCHART.formatDecimal(${DataPoint>MaximumValue/$Path}, ${DataPoint>MaximumValue/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"\n\t\t\t\t\t\ttotal="{DataPoint>MaximumValue@@MODEL.value}"\n\t\t\t\t\t\tcolorPalette="{= MICROCHART.getColorPaletteForMicroChart(${DataPoint>}) }"\n\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t><items><HarveyBallMicroChartItem\n\t\t\t\t\t\t\t\tformattedLabel="true"\n\t\t\t\t\t\t\t\tfractionLabel="{= MICROCHART.formatDecimal(${DataPoint>Value/$Path}, ${DataPoint>Value/$Path/$}, (${DataPoint>ValueFormat} &amp;&amp; ${DataPoint>ValueFormat/NumberOfFractionalDigits})) }"\n\t\t\t\t\t\t\t\tfraction="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\t\t\tcolor="{= CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t/></items></HarveyBallMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:then><template:elseif\n\t\t\ttest="{= MICROCHART.logWarning(\'HarveyBall\', { DataPoint_Value : ${DataPoint>Value}, DataPoint_MaximumValue : ${DataPoint>MaximumValue} }) }"\n\t\t/></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/LineMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\'\n\t}"\n><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><template:with path="metaPath>Dimensions/0/" var="Dimension"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\tcore:require="{MICROCHARTR: \'sap/fe/macros/microchart/MicroChartHelper\' }"\n\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'LineMicroChart\']) : undefined }"\n\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\tuomPath="{= MICROCHART.getUOMPathForMicrochart(${this>showOnlyChart}, ${Measure>@}) }"\n\t\t\t\tmeasures="{= MICROCHART.getMeasurePropertyPaths(${metaPath>}, ${contextPath>./@}, \'Line\')}"\n\t\t\t\tdimension="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text/$Path} : ${Dimension>$PropertyPath} }"\n\t\t\t\tmeasurePrecision="{= ${Measure>$Precision} ? ${Measure>$Precision} : undefined }"\n\t\t\t\tmeasureScale="{= MICROCHART.getMeasureScaleForMicroChart(${DataPoint>}) }"\n\t\t\t\tdimensionPrecision="{= ${Dimension>$PropertyPath/$Precision} ? ${Dimension>$PropertyPath/$Precision} : undefined }"\n\t\t\t\tdataPointQualifiers="{= MICROCHART.getDataPointQualifiersForMeasures(${metaPath>}, ${contextPath>./@}, \'Line\')}"\n\t\t\t\tbinding="{= ${this>batchGroupId} ? (\'{path:\\\'\\\', parameters : { $$groupId: \\\'\' + ${this>batchGroupId} + \'\\\'} }\') : undefined }"\n\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\tcalendarPattern="{= MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) }"\n\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><LineMicroChart showThresholdLine="false" hideOnNoData="{this>hideOnNoData}" size="{this>size}"><lines><template:repeat list="{metaPath>Measures}" var="Measure"><template:with path="Measure>" helper="COMMON.getMeasureAttributeForMeasure" var="DataPoint"><template:if\n\t\t\t\t\t\t\t\t\ttest="{= ${DataPoint>Value} &amp;&amp; ${Dimension>$PropertyPath} &amp;&amp; MICROCHART.isNotAlwaysHidden(\'Line\', ${DataPoint>Value}, undefined,${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"\n\t\t\t\t\t\t\t\t><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="DataPointMeasure"><LineMicroChartLine\n\t\t\t\t\t\t\t\t\t\t\t\tpoints="{= MICROCHART.getAggregationForMicrochart(\'LinePoints\', ${contextPath>}, ${DataPoint>}, ${contextPath>@sapui.name}, ${Dimension>}, ${DataPointMeasure>@}) }"\n\t\t\t\t\t\t\t\t\t\t\t><points><LineMicroChartPoint\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tx="{= (${Dimension>$PropertyPath/$Type} === \'Edm.Date\' ||  (${Dimension>$PropertyPath/$Type} === \'Edm.String\' &amp;&amp; MICROCHART.getCalendarPattern(${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}))) ? MICROCHART.getX(${Dimension>$PropertyPath}, ${Dimension>$PropertyPath/$Type}, ${Dimension>$PropertyPath@}) : ${Dimension>@@.MODEL.format} }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ty="{DataPoint>Value@@.MODEL.value}"\n\t\t\t\t\t\t\t\t\t\t\t\t\t/></points></LineMicroChartLine></template:with></template:then><template:elseif\n\t\t\t\t\t\t\t\t\t\ttest="{= MICROCHART.logWarning(\'Line\', { DataPoint_Value : ${DataPoint>Value}, Dimension : ${Dimension>$PropertyPath} }) }"\n\t\t\t\t\t\t\t\t\t/></template:if></template:with></template:repeat></lines></LineMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/MicroChartTitle.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:m="sap.m"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n        MICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n        COMMON: \'sap/fe/macros/CommonHelper\'\n\n\t}"\n><oDataV4MicroChart:microChartTitle><template:if test="{= ${this>navigationType} === \'External\'}"><template:then><core:InvisibleText\n\t\t\t\t\ttext="{sap.fe.i18n>M_MICROCHART_TITLE_FRAGMENT_HEADER_MICROCHART_LINK_ARIA}"\n\t\t\t\t\tid="{= ID.generate([${this>id}, ${metaPath>@sapui.name}, \'AriaText\']) }"\n\t\t\t\t/><m:Title\n\t\t\t\t\tlevel="H3"\n\t\t\t\t\tvisible="{= COMMON.getHeaderDataPointLinkVisibility(ID.generate([\'fe\', \'MicroChartLink\',  ${contextPath>@sapui.name}, ${metaPath>@sapui.name}]), true) }"\n\t\t\t\t><m:content><m:Link\n\t\t\t\t\t\t\tid="{= ID.generate([\'fe\', \'MicroChartLink\', ${contextPath>@sapui.name}, ${metaPath>@sapui.name}]) }"\n\t\t\t\t\t\t\ttext="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\t\t\tpress="{this>onTitlePressed}"\n\t\t\t\t\t\t\tariaDescribedBy="{= ID.generate([${this>id}, ${metaPath>@sapui.name}, \'AriaText\']) }"\n\t\t\t\t\t\t/></m:content></m:Title><m:Title\n\t\t\t\t\tid="{= ID.generate([\'fe\', ${contextPath>@sapui.name}, ${metaPath>@sapui.name}, \'microChartTitle\']) }"\n\t\t\t\t\tlevel="H3"\n\t\t\t\t\ttext="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\tclass="sapUiTinyMarginBottom"\n\t\t\t\t\tvisible="{= COMMON.getHeaderDataPointLinkVisibility(ID.generate([\'fe\',  \'MicroChartLink\',  ${contextPath>@sapui.name}, ${metaPath>@sapui.name}]), false) }"\n\t\t\t\t/></template:then><template:elseif test="{= ${this>navigationType} === \'InPage\'}"><core:InvisibleText\n\t\t\t\t\ttext="{sap.fe.i18n>T_COMMON_HEADERDP_TITLE_LINK_INPAGE_ARIA}"\n\t\t\t\t\tid="{= ID.generate([${this>id}, ${metaPath>@sapui.name}, \'AriaText\']) }"\n\t\t\t\t/><m:Title level="H3"><m:content><m:Link\n\t\t\t\t\t\t\ttext="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\t\t\tpress="{this>onTitlePressed}"\n\t\t\t\t\t\t\tariaDescribedBy="{= ID.generate([${this>id}, ${metaPath>@sapui.name}, \'AriaText\']) }"\n\t\t\t\t\t\t/></m:content></m:Title></template:elseif><template:else><m:Title level="H3" text="{= ${this>title} || ${metaPath>Title}}" /></template:else></template:if></oDataV4MicroChart:microChartTitle></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/RadialMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Radial\', ${DataPoint>}, ${DataPoint>Value/$Path@})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'RadialMicroChart\']) : undefined }"\n\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\tbinding="{= MICROCHART.getBindingExpressionForMicrochart(\'Radial\', ${Measure>@}, ${this>}, ${contextPath>}, ${contextPath>@sapui.name}) }"\n\t\t\t\t\tvisible="{= MICROCHART.getHiddenPathExpression(${DataPoint>Value/$Path@com.sap.vocabularies.UI.v1.Hidden}) }"\n\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><RadialMicroChart\n\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t\ttotal="{= ${DataPoint>TargetValue} ? ${DataPoint>TargetValue@@MODEL.value} : undefined }"\n\t\t\t\t\t\tfraction="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\tpercentage="{= !${DataPoint>TargetValue} ? ${{DataPoint>Value@@MODEL.value} : undefined }"\n\t\t\t\t\t\tvalueColor="{= ${DataPoint>Criticality} || (!${DataPoint>Criticality} &amp;&amp; !${DataPoint>CriticalityCalculation}) ?\n\t\t\t\t\t\t\t\t(${DataPoint>Criticality} ? CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) : undefined ) :\n\t\t\t\t\t\t\t\tCOMMON.getCriticalityCalculationBinding(${DataPoint>CriticalityCalculation/ImprovementDirection/$EnumMember},\n\t\t\t\t\t\t\t\t\t${DataPoint>Value@@MODEL.value},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/DeviationRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/ToleranceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/AcceptanceRangeLowValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/AcceptanceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/ToleranceRangeHighValue@@MODEL.format},\n\t\t\t\t\t\t\t\t\t${DataPoint>CriticalityCalculation/DeviationRangeHighValue@@MODEL.format}) }"\n\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t/></oDataV4MicroChart:MicroChartContainer></template:with></template:then><template:elseif test="{= MICROCHART.logWarning(\'Radial\', { DataPoint_Value : ${DataPoint>Value} }) }" /></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/microchart/fragments/StackedBarMicroChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:oDataV4MicroChart="sap.fe.macros.microchart"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tMICROCHART: \'sap/fe/macros/microchart/MicroChartHelper\',\n\t\tCRIT: \'sap/fe/core/templating/CriticalityFormatters\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if test="{= MICROCHART.shouldMicroChartRender(\'Stacked Bar\', ${DataPoint>}, ${DataPoint>Value/$Path@})}"><template:then><template:with path="DataPoint>Value/$Path" helper="MODEL.resolve$Path" var="Measure"><oDataV4MicroChart:MicroChartContainer\n\t\t\t\t\tid="{= ${this>id} ? ID.generate([${this>id}, \'StackedBarMicroChart\']) : undefined }"\n\t\t\t\t\tshowOnlyChart="{this>showOnlyChart}"\n\t\t\t\t\tchartTitle="{= ${this>title} || ${metaPath>Title}}"\n\t\t\t\t\tchartDescription="{= ${this>description} || ${metaPath>Description}}"\n\t\t\t\t\tdataPointQualifiers="{= MICROCHART.getDataPointQualifiersForMicroChart(${DataPoint>./@sapui.name}) }"\n\t\t\t\t\tbinding="{= ${this>batchGroupId} ? (\'{path:\\\'\\\', parameters : { $$groupId: \\\'\' + ${this>batchGroupId} + \'\\\'} }\') : undefined }"\n\t\t\t\t\tonTitlePressed="{this>onTitlePressed}"\n\t\t\t\t\tnavigationType="{this>navigationType}"\n\t\t\t\t><template:if test="{= !${this>showOnlyChart} || (${this>showOnlyChart} !== \'true\' ? true : false)}"><core:Fragment fragmentName="sap.fe.macros.microchart.fragments.MicroChartTitle" type="XML" /></template:if><StackedBarMicroChart\n\t\t\t\t\t\thideOnNoData="{this>hideOnNoData}"\n\t\t\t\t\t\tsize="{this>size}"\n\t\t\t\t\t\tbars="{= MICROCHART.getAggregationForMicrochart(\'Bars\', ${contextPath>}, ${DataPoint>}, ${contextPath>@sapui.name}, \'\', ${Measure>@}, ${metaPath>Dimension}) }"\n\t\t\t\t\t><bars><StackedBarMicroChartBar\n\t\t\t\t\t\t\t\tvalue="{DataPoint>Value@@MODEL.value}"\n\t\t\t\t\t\t\t\tdisplayValue="{= ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text} ? ${DataPoint>Value/$Path@com.sap.vocabularies.Common.v1.Text@@MODEL.value} : undefined }"\n\t\t\t\t\t\t\t\tvalueColor="{= ${DataPoint>Criticality} ? CRIT.buildExpressionForCriticalityColorMicroChart(${DataPoint>@@UI.getDataModelObjectPath}) : undefined }"\n\t\t\t\t\t\t\t/></bars></StackedBarMicroChart></oDataV4MicroChart:MicroChartContainer></template:with></template:then><template:elseif test="{= MICROCHART.logWarning(\'StackedBar\', { DataPoint_Value : ${DataPoint>Value} }) }" /></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/quickView/fragments/DataFieldQuickView.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns:core="sap.ui.core"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\',\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><template:if test="{dataField>}"><VBox class="sapUiTinyMarginTopBottom"><template:if test="{= ${dataField>IconUrl@@MODEL.value} !== undefined }"><template:then><controls:ConditionalWrapper\n\t\t\t\t\t\tcore:require="{FieldRuntime: \'sap/fe/macros/field/FieldRuntime\'}"\n\t\t\t\t\t\tcondition="{= FIELD.checkPrimaryActions(${semantic>}, false, ${viewData>/appComponent}) }"\n\t\t\t\t\t><controls:contentTrue><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageIconUrlTest"\n\t\t\t\t\t\t\t\ticon="{dataField>IconUrl@@MODEL.value}"\n\t\t\t\t\t\t\t\tfallbackIcon="sap-icon://product"\n\t\t\t\t\t\t\t\ttitle="{= FieldTemplating.getTextBinding(${dataField>Value@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\tmacrodata:titleLink="{= FIELD.getPrimaryAction(${semantic>}) }"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentTrue><controls:contentFalse><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageIconUrlTestNoLinkTitle"\n\t\t\t\t\t\t\t\ticon="{dataField>IconUrl@@MODEL.value}"\n\t\t\t\t\t\t\t\tfallbackIcon="sap-icon://product"\n\t\t\t\t\t\t\t\ttitle="{= FieldTemplating.getTextBinding(${dataField>Value@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentFalse></controls:ConditionalWrapper></template:then><template:elseif test="{= ${dataField>Value@@MODEL.value} !== undefined}"><controls:ConditionalWrapper\n\t\t\t\t\t\tcore:require="{FieldRuntime: \'sap/fe/macros/field/FieldRuntime\'}"\n\t\t\t\t\t\tcondition="{= FIELD.checkPrimaryActions(${semantic>}, false, ${viewData>/appComponent}) }"\n\t\t\t\t\t><controls:contentTrue><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageTest"\n\t\t\t\t\t\t\t\ttitle="{= FieldTemplating.getTextBinding(${dataField>Value@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\tmacrodata:titleLink="{= FIELD.getPrimaryAction(${semantic>}) }"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentTrue><controls:contentFalse><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageTestNoLinkTitle"\n\t\t\t\t\t\t\t\ttitle="{= FieldTemplating.getTextBinding(${dataField>Value@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentFalse></controls:ConditionalWrapper></template:elseif><template:else><controls:ConditionalWrapper\n\t\t\t\t\t\tcore:require="{FieldRuntime: \'sap/fe/macros/field/FieldRuntime\'}"\n\t\t\t\t\t\tcondition="{= FIELD.checkPrimaryActions(${semantic>}, false, ${viewData>/appComponent}) }"\n\t\t\t\t\t><controls:contentTrue><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewNoFieldValuePageTest"\n\t\t\t\t\t\t\t\ttitle="{dataField>@@MODEL.format}"\n\t\t\t\t\t\t\t\tmacrodata:titleLink="{= FIELD.getPrimaryAction(${semantic>}) }"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentTrue><controls:contentFalse><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewNoFieldValuePageTestNoLinkTitle"\n\t\t\t\t\t\t\t\ttitle="{dataField>@@MODEL.format}"\n\t\t\t\t\t\t\t\tdescription="{= (${dataField>Label}) ? ${dataField>Label} : ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Label} }"\n\t\t\t\t\t\t\t/></controls:contentFalse></controls:ConditionalWrapper></template:else></template:if></VBox></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/quickView/fragments/EntityQuickView.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns:core="sap.ui.core"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\t\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\t\t\tFIELD: \'sap/fe/macros/field/FieldHelper\'\n\t\t\t\t}"\n><template:if test="{entityType>}"><template:then><template:with path="entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo" var="headerInfo"><VBox class="sapFePaddingTop sapUiTinyMarginBottom"><controls:ConditionalWrapper\n\t\t\t\t\t\tcore:require="{FieldRuntime: \'sap/fe/macros/field/FieldRuntime\'}"\n\t\t\t\t\t\tcondition="{= FIELD.checkPrimaryActions(${semantic>}, false, ${viewData>/appComponent}) }"\n\t\t\t\t\t><controls:contentTrue><template:if test="{= (${headerInfo>ImageUrl} !== undefined) || (${headerInfo>TypeImageUrl} !== undefined) }"><template:then><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageEntity"\n\t\t\t\t\t\t\t\t\t\ticon="{= ${headerInfo>ImageUrl} !== undefined ? ${headerInfo>ImageUrl@@MODEL.value} : ${headerInfo>TypeImageUrl@@MODEL.value} }"\n\t\t\t\t\t\t\t\t\t\tfallbackIcon="{= ${headerInfo>TypeImageUrl} !== undefined ? ${headerInfo>TypeImageUrl} : (${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? \'sap-icon://person-placeholder\' : \'sap-icon://product\')}"\n\t\t\t\t\t\t\t\t\t\ttitle="{entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\tmacrodata:titleLink="{= FIELD.getPrimaryAction(${semantic>}) }"\n\t\t\t\t\t\t\t\t\t\tdescription="{= (${headerInfo>Description} !== undefined) ? ${entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value@@MODEL.format} : \'{semantic>propertyPathLabel}\' }"\n\t\t\t\t\t\t\t\t\t><core:Fragment fragmentName="sap.fe.macros.quickView.fragments.QuickViewFacets" type="XML" /></controls:CustomQuickViewPage></template:then><template:else><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageEntityNoIcon"\n\t\t\t\t\t\t\t\t\t\ttitle="{entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\tmacrodata:titleLink="{= FIELD.getPrimaryAction(${semantic>}) }"\n\t\t\t\t\t\t\t\t\t\tdescription="{= (${headerInfo>Description} !== undefined) ? ${entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value@@MODEL.format} : \'{semantic>propertyPathLabel}\' }"\n\t\t\t\t\t\t\t\t\t><core:Fragment fragmentName="sap.fe.macros.quickView.fragments.QuickViewFacets" type="XML" /></controls:CustomQuickViewPage></template:else></template:if></controls:contentTrue><controls:contentFalse><template:if test="{= (${headerInfo>ImageUrl} !== undefined) || (${headerInfo>TypeImageUrl} !== undefined) }"><template:then><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageEntityNoLinkTitle"\n\t\t\t\t\t\t\t\t\t\ticon="{= ${headerInfo>ImageUrl} !== undefined ? ${headerInfo>ImageUrl@@MODEL.value} : ${headerInfo>TypeImageUrl@@MODEL.value} }"\n\t\t\t\t\t\t\t\t\t\tfallbackIcon="{= ${headerInfo>TypeImageUrl} !== undefined ? ${headerInfo>TypeImageUrl} : (${entityType>./@com.sap.vocabularies.Common.v1.IsNaturalPerson} ? \'sap-icon://person-placeholder\' : \'sap-icon://product\')}"\n\t\t\t\t\t\t\t\t\t\ttitle="{entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\tdescription="{= (${headerInfo>Description} !== undefined) ? ${entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value@@MODEL.format} : \'{semantic>propertyPathLabel}\' }"\n\t\t\t\t\t\t\t\t\t><core:Fragment fragmentName="sap.fe.macros.quickView.fragments.QuickViewFacets" type="XML" /></controls:CustomQuickViewPage></template:then><template:else><controls:CustomQuickViewPage\n\t\t\t\t\t\t\t\t\t\tunittest:id="CustomQuickViewPageEntityNoLinkTitleNoIcon"\n\t\t\t\t\t\t\t\t\t\ttitle="{entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value@@MODEL.format}"\n\t\t\t\t\t\t\t\t\t\tdescription="{= (${headerInfo>Description} !== undefined) ? ${entityType>./@com.sap.vocabularies.UI.v1.HeaderInfo/Description/Value@@MODEL.format} : \'{semantic>propertyPathLabel}\' }"\n\t\t\t\t\t\t\t\t\t><core:Fragment fragmentName="sap.fe.macros.quickView.fragments.QuickViewFacets" type="XML" /></controls:CustomQuickViewPage></template:else></template:if></controls:contentFalse></controls:ConditionalWrapper></VBox></template:with></template:then></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/quickView/fragments/QuickViewFacets.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros"\n\txmlns:controls="sap.fe.macros.controls"\n\txmlns="sap.m"\n\ttemplate:require="{\n\t\t\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\t\t\tCONTACT: \'sap/fe/macros/contact/ContactHelper\',\n\t\t\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\t\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\'\n\t\t\t\t}"\n><template:repeat list="{entityType>./@com.sap.vocabularies.UI.v1.QuickViewFacets}" var="facet"><template:if test="{= ${facet>Target/$AnnotationPath}.indexOf(\'com.sap.vocabularies.Communication.v1.Contact\') > -1 }"><template:then><template:with path="facet>Target/$AnnotationPath" var="contact"><core:Fragment fragmentName="sap.fe.macros.contact.ContactQuickViewGroup" type="XML" /></template:with></template:then><template:elseif test="{= (${facet>Target/$AnnotationPath}.indexOf(\'com.sap.vocabularies.UI.v1.FieldGroup\') > -1)}"><template:with path="facet>Target/$AnnotationPath" var="fieldGroup"><QuickViewGroup heading="{facet>Label}"><template:repeat list="{fieldGroup>Data}" var="dataField"><QuickViewGroupElement\n\t\t\t\t\t\t\t\tlabel="{dataField>@@MODEL.label}"\n\t\t\t\t\t\t\t\turl="{= FieldTemplating.QVTextBinding(${dataField>@@UI.getDataModelObjectPath}, ${dataField>Value@@UI.getDataModelObjectPath}, \'\') }"\n\t\t\t\t\t\t\t\tvalue="{= FieldTemplating.QVTextBinding(${dataField>@@UI.getDataModelObjectPath}, ${dataField>Value@@UI.getDataModelObjectPath}, \'\') }"\n\t\t\t\t\t\t\t\ttype="{= FieldTemplating.getQuickViewType(${dataField>Value@@UI.getDataModelObjectPath} ) }"\n\t\t\t\t\t\t\t/></template:repeat></QuickViewGroup></template:with></template:elseif><template:elseif test="{= (${facet>Target/$AnnotationPath}.indexOf(\'com.sap.vocabularies.UI.v1.Identification\') > -1) }"><template:with path="facet>Target/$AnnotationPath" var="identification"><QuickViewGroup heading="{facet>Label}"><template:repeat list="{identification>}" var="dataField"><QuickViewGroupElement\n\t\t\t\t\t\t\t\tlabel="{dataField>@@MODEL.label}"\n\t\t\t\t\t\t\t\tvalue="{dataField>Value@@MODEL.format}"\n\t\t\t\t\t\t\t\ttype="{= FieldTemplating.getQuickViewType(${dataField>Value@@UI.getDataModelObjectPath} ) }"\n\t\t\t\t\t\t\t/></template:repeat></QuickViewGroup></template:with></template:elseif><template:elseif test="{= (${facet>Target/$AnnotationPath}.indexOf(\'com.sap.vocabularies.UI.v1.DataPoint\') > -1) }"><template:with path="facet>Target/$AnnotationPath" var="dataPoint"><QuickViewGroup heading="{facet>Label}"><QuickViewGroupElement\n\t\t\t\t\t\t\tlabel="{dataPoint>Title}"\n\t\t\t\t\t\t\tvalue="{= ${dataPoint>TargetValue@@MODEL.format} ? ${dataPoint>Value@@MODEL.format}+\'/\'+${dataPoint>TargetValue@@MODEL.format} : ${dataPoint>Value@@MODEL.format} }"\n\t\t\t\t\t\t\ttype="{= FieldTemplating.getQuickViewType(${dataField>Value@@UI.getDataModelObjectPath} ) }"\n\t\t\t\t\t\t/></QuickViewGroup></template:with></template:elseif></template:if></template:repeat></core:FragmentDefinition>\n',
	"sap/fe/macros/share/ShareSheet.fragment.xml":'<core:FragmentDefinition xmlns="sap.m" xmlns:core="sap.ui.core" xmlns:footerbar="sap.ushell.ui.footerbar"><ActionSheet cancelButtonPress="onCancelPressed"><buttons><Button icon="sap-icon://email" press="shareEmailPressed" text="{share>/emailButtonText}" class="sapMFlexBox" width="100%" /><Button\n\t\t\t\ticon="sap-icon://share-2"\n\t\t\t\tpress="shareJamPressed"\n\t\t\t\ttext="{share>/jamButtonText}"\n\t\t\t\tvisible="{share>/jamVisible}"\n\t\t\t\tclass="sapMFlexBox"\n\t\t\t\twidth="100%"\n\t\t\t/><Button\n\t\t\t\ticon="sap-icon://group"\n\t\t\t\tpress="shareMSTeamsPressed"\n\t\t\t\ttext="{share>/msTeamsShareButtonText}"\n\t\t\t\tvisible="{share>/msTeamsVisible}"\n\t\t\t\tclass="sapMFlexBox"\n\t\t\t\twidth="100%"\n\t\t\t/><footerbar:AddBookmarkButton\n\t\t\t\ttitle="{share>/title}"\n\t\t\t\tsubtitle="{share>/subtitle}"\n\t\t\t\ttileIcon="{share>/icon}"\n\t\t\t\tcustomUrl="{share>/url}"\n\t\t\t\tserviceUrl="{share>/queryUrl}"\n\t\t\t\tclass="sapMFlexBox"\n\t\t\t\twidth="100%"\n\t\t\t\tpress="onSaveTilePress"\n\t\t\t\tvisible="{share>/saveAsTileVisible}"\n\t\t\t/></buttons></ActionSheet></core:FragmentDefinition>\n',
	"sap/fe/macros/table/Column.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:mdcTable="sap.ui.mdc.table"\n\txmlns:core="sap.ui.core"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tTABLE: \'sap/fe/macros/table/TableHelper\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><template:with path="dataField>" helper="FIELD.getDataFieldDefault" var="dataField"><mdcTable:Column\n\t\t\tunittest:id="MDCTableColumn"\n\t\t\tid="{= TABLE.getColumnStableId(${this>id},${dataField>@@UI.getDataModelObjectPath}) }"\n\t\t\twidth="{= ${this>isOptimizedForSmallDevice} === false ? TABLE.getColumnWidth(${this>}, ${column>}, ${dataField>}, ${dataField>@@TABLE.getTextOnActionField}, ${dataField>@@UI.getDataModelObjectPath}, true, {Title: ${dataField>Target/$AnnotationPath/Title} || \'\', Description: ${dataField>Target/$AnnotationPath/Description} || \'\'}) : undefined}"\n\t\t\tminWidth="{= ${this>isOptimizedForSmallDevice} === true ? TABLE.getColumnWidth(${this>}, ${column>}, ${dataField>}, ${dataField>@@TABLE.getTextOnActionField}, ${dataField>@@UI.getDataModelObjectPath}, false, {Title: ${dataField>Target/$AnnotationPath/Title} || \'\', Description: ${dataField>Target/$AnnotationPath/Description} || \'\'}) : undefined}"\n\t\t\theader="{= ${dataField>@@MODEL.label} || ${dataField>Target/$AnnotationPath/@@MODEL.label} || ${column>name} }"\n\t\t\tdataProperty="{column>name}"\n\t\t\thAlign="{= ${column>horizontalAlign} || FIELD.getColumnAlignment(${dataField>}, ${this>}) }"\n\t\t\theaderVisible="{= TABLE.setHeaderLabelVisibility( ${dataField>}, ${dataField>Target/$AnnotationPath/Data}) }"\n\t\t\timportance="{column>importance}"\n\t\t\tcustomData:showDataFieldsLabel="{column>showDataFieldsLabel}"\n\t\t\ttooltip="{column>tooltip}"\n\t\t><core:Fragment fragmentName="sap.fe.macros.table.ColumnContent" type="XML" /></mdcTable:Column></template:with></core:FragmentDefinition>\n',
	"sap/fe/macros/table/ColumnContent.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcTable="sap.ui.mdc.table"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\txmlns:controls="sap.fe.core.controls"\n\ttemplate:require="{\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tTABLE: \'sap/fe/macros/table/TableHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n><template:if\n\t\ttest="{= (${dataField>$Type}.indexOf(\'DataFieldForAnnotation\') > -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf(\'@com.sap.vocabularies.UI.v1.Chart\') > -1)}"\n\t><template:then><template:with path="dataField>Target/$AnnotationPath" var="collection" helper="MODEL.resolve$Path"><template:with path="collection>" var="collection" helper="COMMON.getNavigationContext"><internalMacro:MicroChart\n\t\t\t\t\t\tid="{= ID.generate([${this>id}, ${dataField>@@UI.getDataModelObjectPath}]) }"\n\t\t\t\t\t\tcontextPath="{collection>}"\n\t\t\t\t\t\tmetaPath="{dataField>Target/$AnnotationPath/}"\n\t\t\t\t\t\tshowOnlyChart="{= TABLE.getShowOnlyChart(${this>}, ${column>}) }"\n\t\t\t\t\t\tsize="{= TABLE.getChartSize(${this>}, ${column>}) }"\n\t\t\t\t\t\thideOnNoData="true"\n\t\t\t\t\t\tisAnalytics="{tableDefinition>enableAnalytics}"\n\t\t\t\t\t/></template:with></template:with></template:then><template:elseif\n\t\t\ttest="{= ${dataField>Value} &amp;&amp; ${dataField>Value/$Path} &amp;&amp; UI.isMultiValueField(${dataField>Value@@Property.getPropertyObjectPath})}"\n\t\t><internalMacro:MultiValueField contextPath="{collection>}" metaPath="{dataField>}"><internalMacro:formatOptions displayOnly="true" /></internalMacro:MultiValueField></template:elseif><template:elseif\n\t\t\ttest="{= (${dataField>$Type}.indexOf(\'DataFieldForAnnotation\') > -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf(\'FieldGroup\') > -1)}"\n\t\t><template:with path="dataField>Target/$AnnotationPath/Data/" var="dataFieldCollections"><VBox\n\t\t\t\t\tvisible="{= TABLE.getVBoxVisibility( ${dataFieldCollections>}, ${column>FieldGroupHiddenExpressions}, ${dataField>} ) }"\n\t\t\t\t><template:repeat list="{dataFieldCollections>}" var="fieldGroupDataField"><template:if test="{= ${column>showDataFieldsLabel} &amp;&amp; !!${fieldGroupDataField>@@FIELD.computeLabelText} }"><template:then><HBox\n\t\t\t\t\t\t\t\t\talignItems="{= FIELD.buildExpressionForAlignItems(${fieldGroupDataField>Target/$AnnotationPath/Visualization/$EnumMember}) }"\n\t\t\t\t\t\t\t\t><Label\n\t\t\t\t\t\t\t\t\t\tid="{= TABLE.getFieldGroupLabelStableId(${this>id},${fieldGroupDataField>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\t\ttext="{= ${fieldGroupDataField>@@FIELD.computeLabelText} + \':\' }"\n\t\t\t\t\t\t\t\t\t\tclass="sapUiTinyMarginEnd"\n\t\t\t\t\t\t\t\t\t/><VBox><layoutData><FlexItemData growFactor="1" /></layoutData><internalMacro:Field\n\t\t\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\t\t\t\t\t\t\t\teditMode="{this>columnEditMode}"\n\t\t\t\t\t\t\t\t\t\t\tentitySet="{collection>}"\n\t\t\t\t\t\t\t\t\t\t\tdataField="{fieldGroupDataField>}"\n\t\t\t\t\t\t\t\t\t\t\ttextAlign="Left"\n\t\t\t\t\t\t\t\t\t\t\twrap="{= ${this>tableType} === \'ResponsiveTable\' ? true : false }"\n\t\t\t\t\t\t\t\t\t\t\tclass="{= TABLE.getMarginClass( ${dataFieldCollections>}  , ${fieldGroupDataField>} , ${fieldGroupDataField>Target/$AnnotationPath/Visualization/$EnumMember}, ${column>FieldGroupHiddenExpressions/}) }"\n\t\t\t\t\t\t\t\t\t\t\tonChange="{this>onChange}"\n\t\t\t\t\t\t\t\t\t\t\tariaLabelledBy="{= TABLE.getColumnStableId(${this>id},${dataField>@@UI.getDataModelObjectPath}) +\' \'+ TABLE.getFieldGroupLabelStableId(${this>id},${fieldGroupDataField>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\t\t\tnavigateAfterAction="{column>isNavigable}"\n\t\t\t\t\t\t\t\t\t\t\tshowErrorObjectStatus="{column>formatOptions/showErrorObjectStatus}"\n\t\t\t\t\t\t\t\t\t\t><internalMacro:formatOptions\n\t\t\t\t\t\t\t\t\t\t\t\ttextLinesEdit="{column>formatOptions/textLinesEdit}"\n\t\t\t\t\t\t\t\t\t\t\t\ttextMaxLines="{column>formatOptions/textMaxLines}"\n\t\t\t\t\t\t\t\t\t\t\t\ttextMaxCharactersDisplay="{column>formatOptions/textMaxCharactersDisplay}"\n\t\t\t\t\t\t\t\t\t\t\t\ttextExpandBehaviorDisplay="{column>formatOptions/textExpandBehaviorDisplay}"\n\t\t\t\t\t\t\t\t\t\t\t\ttextAlignMode="Table"\n\t\t\t\t\t\t\t\t\t\t\t\tshowEmptyIndicator="true"\n\t\t\t\t\t\t\t\t\t\t\t\tsemanticKeyStyle="{= ${this>tableType} === \'ResponsiveTable\' ? \'ObjectIdentifier\' : \'Label\' }"\n\t\t\t\t\t\t\t\t\t\t\t\thasDraftIndicator="{column>formatOptions/hasDraftIndicator}"\n\t\t\t\t\t\t\t\t\t\t\t\tfieldGroupDraftIndicatorPropertyPath="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"\n\t\t\t\t\t\t\t\t\t\t\t\tfieldGroupName="{column>formatOptions/fieldGroupName}"\n\t\t\t\t\t\t\t\t\t\t\t\tshowIconUrl="{= ${fieldGroupDataField>Inline} &amp;&amp; ${fieldGroupDataField>IconUrl} }"\n\t\t\t\t\t\t\t\t\t\t\t\tignoreNavigationAvailable="{= ${tableDefinition>enableAnalytics} ? true : false }"\n\t\t\t\t\t\t\t\t\t\t\t\tisAnalytics="{tableDefinition>enableAnalytics}"\n\t\t\t\t\t\t\t\t\t\t\t\tforInlineCreationRows="{= ${this>creationMode} === \'InlineCreationRows\' ? true : false}"\n\t\t\t\t\t\t\t\t\t\t\t\tisCurrencyAligned="true"\n\t\t\t\t\t\t\t\t\t\t\t\tcompactSemanticKey="{tableDefinition>control/isCompactType}"\n\t\t\t\t\t\t\t\t\t\t\t/><template:if\n\t\t\t\t\t\t\t\t\t\t\t\ttest="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t\t\t\t\t\t\t\t><internalMacro:customData><core:CustomData\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey="extraProperty"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t\t\t\t\t\t\t\t\t\t/></internalMacro:customData></template:if></internalMacro:Field></VBox></HBox></template:then><template:else><internalMacro:Field\n\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\t\t\t\t\t\teditMode="{this>columnEditMode}"\n\t\t\t\t\t\t\t\t\tentitySet="{collection>}"\n\t\t\t\t\t\t\t\t\tdataField="{fieldGroupDataField>}"\n\t\t\t\t\t\t\t\t\twrap="{= ${this>tableType} === \'ResponsiveTable\' ? true : false }"\n\t\t\t\t\t\t\t\t\tclass="{= TABLE.getMarginClass( ${dataFieldCollections>}  , ${fieldGroupDataField>} , ${fieldGroupDataField>Target/$AnnotationPath/Visualization/$EnumMember}, ${column>FieldGroupHiddenExpressions/}) }"\n\t\t\t\t\t\t\t\t\tonChange="{this>onChange}"\n\t\t\t\t\t\t\t\t\tariaLabelledBy="{= TABLE.getColumnStableId(${this>id},${dataField>@@UI.getDataModelObjectPath}) }"\n\t\t\t\t\t\t\t\t\tnavigateAfterAction="{column>isNavigable}"\n\t\t\t\t\t\t\t\t\tshowErrorObjectStatus="{column>formatOptions/showErrorObjectStatus}"\n\t\t\t\t\t\t\t\t><internalMacro:formatOptions\n\t\t\t\t\t\t\t\t\t\tfieldMode="{this>fieldMode}"\n\t\t\t\t\t\t\t\t\t\ttextLinesEdit="{column>formatOptions/textLinesEdit}"\n\t\t\t\t\t\t\t\t\t\ttextMaxLines="{column>formatOptions/textMaxLines}"\n\t\t\t\t\t\t\t\t\t\ttextMaxCharactersDisplay="{column>formatOptions/textMaxCharactersDisplay}"\n\t\t\t\t\t\t\t\t\t\ttextExpandBehaviorDisplay="{column>formatOptions/textExpandBehaviorDisplay}"\n\t\t\t\t\t\t\t\t\t\ttextAlignMode="Table"\n\t\t\t\t\t\t\t\t\t\tsemanticKeyStyle="{= ${this>tableType} === \'ResponsiveTable\' ? \'ObjectIdentifier\' : \'Label\' }"\n\t\t\t\t\t\t\t\t\t\thasDraftIndicator="{column>formatOptions/hasDraftIndicator}"\n\t\t\t\t\t\t\t\t\t\tfieldGroupDraftIndicatorPropertyPath="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"\n\t\t\t\t\t\t\t\t\t\tfieldGroupName="{column>formatOptions/fieldGroupName}"\n\t\t\t\t\t\t\t\t\t\tshowIconUrl="{= ${fieldGroupDataField>Inline} &amp;&amp; ${fieldGroupDataField>IconUrl} }"\n\t\t\t\t\t\t\t\t\t\tignoreNavigationAvailable="{= ${tableDefinition>enableAnalytics} ? true : false }"\n\t\t\t\t\t\t\t\t\t\tisAnalytics="{tableDefinition>enableAnalytics}"\n\t\t\t\t\t\t\t\t\t\tforInlineCreationRows="{= ${this>creationMode} === \'InlineCreationRows\' ? true : false}"\n\t\t\t\t\t\t\t\t\t\tisCurrencyAligned="true"\n\t\t\t\t\t\t\t\t\t\tcompactSemanticKey="{tableDefinition>control/isCompactType}"\n\t\t\t\t\t\t\t\t\t/><template:if\n\t\t\t\t\t\t\t\t\t\ttest="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t\t\t\t\t\t><internalMacro:customData><core:CustomData\n\t\t\t\t\t\t\t\t\t\t\t\tkey="extraProperty"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t\t\t\t\t\t\t\t/></internalMacro:customData></template:if></internalMacro:Field></template:else></template:if></template:repeat><template:if test="{= ${collection>@com.sap.vocabularies.Common.v1.DraftRoot} }"><template:if test="{= ${collection>./@com.sap.vocabularies.Common.v1.SemanticKey} }"><template:if test="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"><controls:FormElementWrapper><macro:DraftIndicator\n\t\t\t\t\t\t\t\t\t\tdraftIndicatorType="IconAndText"\n\t\t\t\t\t\t\t\t\t\tentitySet="{collection>}"\n\t\t\t\t\t\t\t\t\t\tisDraftIndicatorVisible="{= FieldTemplating.getDraftIndicatorVisibleBinding(${column>formatOptions/fieldGroupName}) }"\n\t\t\t\t\t\t\t\t\t\tariaLabelledBy="{this>ariaLabelledBy}"\n\t\t\t\t\t\t\t\t\t/></controls:FormElementWrapper></template:if></template:if></template:if><template:if test="{= ${collection>./@com.sap.vocabularies.Common.v1.SemanticKey} }"><template:if test="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"><ObjectStatus\n\t\t\t\t\t\t\t\tvisible="{column>formatOptions/showErrorObjectStatus}"\n\t\t\t\t\t\t\t\tclass="sapUiSmallMarginBottom"\n\t\t\t\t\t\t\t\ttext="{sap.fe.i18n>Contains_Errors}"\n\t\t\t\t\t\t\t\tstate="Error"\n\t\t\t\t\t\t\t/></template:if></template:if></VBox></template:with></template:elseif><template:else><internalMacro:Field\n\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\teditMode="{this>columnEditMode}"\n\t\t\t\tentitySet="{collection>}"\n\t\t\t\tdataField="{dataField>}"\n\t\t\t\twrap="{= ${this>tableType} === \'ResponsiveTable\' ? true : false }"\n\t\t\t\tonChange="{this>onChange}"\n\t\t\t\tariaLabelledBy="{= TABLE.getColumnStableId(${this>id},${dataField>@@UI.getDataModelObjectPath}) }"\n\t\t\t\tnavigateAfterAction="{column>isNavigable}"\n\t\t\t\tshowErrorObjectStatus="{column>formatOptions/showErrorObjectStatus}"\n\t\t\t><internalMacro:formatOptions\n\t\t\t\t\tfieldMode="{this>fieldMode}"\n\t\t\t\t\ttextLinesEdit="{column>formatOptions/textLinesEdit}"\n\t\t\t\t\ttextMaxLines="{column>formatOptions/textMaxLines}"\n\t\t\t\t\ttextMaxCharactersDisplay="{column>formatOptions/textMaxCharactersDisplay}"\n\t\t\t\t\ttextExpandBehaviorDisplay="{column>formatOptions/textExpandBehaviorDisplay}"\n\t\t\t\t\ttextAlignMode="Table"\n\t\t\t\t\tsemanticKeyStyle="{= ${this>tableType} === \'ResponsiveTable\' ? \'ObjectIdentifier\' : \'Label\' }"\n\t\t\t\t\thasDraftIndicator="{column>formatOptions/hasDraftIndicator}"\n\t\t\t\t\tfieldGroupDraftIndicatorPropertyPath="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"\n\t\t\t\t\tfieldGroupName="{column>formatOptions/fieldGroupName}"\n\t\t\t\t\tshowIconUrl="{= ${dataField>Inline} &amp;&amp; ${dataField>IconUrl} }"\n\t\t\t\t\tignoreNavigationAvailable="{= ${tableDefinition>enableAnalytics} ? true : false }"\n\t\t\t\t\tisAnalytics="{tableDefinition>enableAnalytics}"\n\t\t\t\t\tforInlineCreationRows="{= ${this>creationMode} === \'InlineCreationRows\' ? true : false}"\n\t\t\t\t\tisCurrencyAligned="true"\n\t\t\t\t\tcompactSemanticKey="{tableDefinition>control/isCompactType}"\n\t\t\t\t/><template:if\n\t\t\t\t\ttest="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t><internalMacro:customData><core:CustomData\n\t\t\t\t\t\t\tkey="extraProperty"\n\t\t\t\t\t\t\tvalue="{=FIELD.getBindingInfoForTextArrangement(${this>}, ${dataField>Value/$Path@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement}, ${dataField>}) }"\n\t\t\t\t\t\t/></internalMacro:customData></template:if></internalMacro:Field><template:if test="{= ${this>creationMode} === \'CreationRow\'}"><mdcTable:creationTemplate><internalMacro:Field\n\t\t\t\t\t\tcore:require="{TableRuntime: \'sap/fe/macros/table/TableRuntime\'}"\n\t\t\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\t\t\teditMode="{this>columnEditMode}"\n\t\t\t\t\t\tentitySet="{collection>}"\n\t\t\t\t\t\tdataField="{dataField>}"\n\t\t\t\t\t\twrap="{= ${this>tableType} === \'ResponsiveTable\' ? true : false }"\n\t\t\t\t\t\tonChange="TableRuntime.onFieldChangeInCreationRow($event, \'{this>customValidationFunction}\')}"\n\t\t\t\t\t\tshowErrorObjectStatus="{column>formatOptions/showErrorObjectStatus}"\n\t\t\t\t\t><internalMacro:formatOptions\n\t\t\t\t\t\t\ttextLinesEdit="{column>formatOptions/textLinesEdit}"\n\t\t\t\t\t\t\ttextMaxLines="{column>formatOptions/textMaxLines}"\n\t\t\t\t\t\t\ttextMaxCharactersDisplay="{column>formatOptions/textMaxCharactersDisplay}"\n\t\t\t\t\t\t\ttextExpandBehaviorDisplay="{column>formatOptions/textExpandBehaviorDisplay}"\n\t\t\t\t\t\t\ttextAlignMode="Table"\n\t\t\t\t\t\t\tsemanticKeyStyle="{= ${this>tableType} === \'ResponsiveTable\' ? \'ObjectIdentifier\' : \'Label\' }"\n\t\t\t\t\t\t\thasDraftIndicator="{column>formatOptions/hasDraftIndicator}"\n\t\t\t\t\t\t\tfieldGroupDraftIndicatorPropertyPath="{column>formatOptions/fieldGroupDraftIndicatorPropertyPath}"\n\t\t\t\t\t\t\tfieldGroupName="{column>formatOptions/fieldGroupName}"\n\t\t\t\t\t\t\tshowIconUrl="{= ${dataField>Inline} &amp;&amp; ${dataField>IconUrl} }"\n\t\t\t\t\t\t\tignoreNavigationAvailable="{= ${tableDefinition>enableAnalytics} ? true : false }"\n\t\t\t\t\t\t\tisCurrencyAligned="true"\n\t\t\t\t\t\t/></internalMacro:Field></mdcTable:creationTemplate></template:if></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/table/Columns.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:mdcTable="sap.ui.mdc.table"\n\ttemplate:require="{\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tTABLE: \'sap/fe/macros/table/TableHelper\'\n\t}"\n><template:if test="{tableDefinition>columns}"><template:repeat list="{tableDefinition>columns}" var="column"><template:if test="{= ${column>availability} === \'Default\'}"><template:if test="{= ${column>type} === \'Default\'}"><template:then><core:Fragment fragmentName="sap.fe.macros.table.CustomColumn" type="XML" /></template:then><template:elseif test="{= ${column>type} === \'Annotation\'}"><template:with path="column>annotationPath" var="dataField"><core:Fragment fragmentName="sap.fe.macros.table.Column" type="XML" /></template:with></template:elseif><template:elseif test="{= ${column>type} === \'Slot\'}"><core:Fragment fragmentName="sap.fe.macros.table.SlotColumn" type="XML" /></template:elseif></template:if></template:if></template:repeat></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/table/CustomColumn.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:mdcTable="sap.ui.mdc.table"\n\txmlns:core="sap.ui.core"\n\txmlns:fpm="sap.fe.macros.fpm"\n\ttemplate:require="{\n\t\tTABLE: \'sap/fe/macros/table/TableHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><mdcTable:Column\n\t\tid="{= ID.generate([${this>id}, \'C\', ${column>id}]) }"\n\t\tdataProperty="{column>name}"\n\t\twidth="{column>width}"\n\t\timportance="{column>importance}"\n\t\theader="{column>header}"\n\t\thAlign="{column>horizontalAlign}"\n\t\ttooltip="{column>tooltip}"\n\t><mdcTable:template><fpm:CustomFragment id="{column>key}" fragmentName="{column>template}" contextPath="{targetCollection>}" /></mdcTable:template></mdcTable:Column></core:FragmentDefinition>\n',
	"sap/fe/macros/table/SlotColumn.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:mdcTable="sap.ui.mdc.table"\n\txmlns:core="sap.ui.core"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><mdcTable:Column\n\t\tid="{= ID.generate([${this>id}, \'C\', ${column>id}]) }"\n\t\tdataProperty="{column>name}"\n\t\twidth="{column>width}"\n\t\timportance="{column>importance}"\n\t\thAlign="{column>horizontalAlign}"\n\t\theader="{column>header}"\n\t\ttooltip="{column>tooltip}"\n\t><mdcTable:template><slot name="{column>key}" /></mdcTable:template></mdcTable:Column></core:FragmentDefinition>\n',
	"sap/fe/macros/table/ValueHelp.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns:macro="sap.fe.macros"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\'\n\t}"\n><template:if\n\t\ttest="{= (${dataField>$Type}.indexOf(\'DataFieldForAnnotation\') !== -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf(\'@com.sap.vocabularies.UI.v1.Chart\') !== -1)}"\n\t><template:then></template:then><template:elseif\n\t\t\ttest="{= (${dataField>$Type}.indexOf(\'DataFieldForAnnotation\') !== -1) &amp;&amp; (${dataField>Target/$AnnotationPath}.indexOf(\'FieldGroup\') !== -1)}"\n\t\t><template:with path="dataField>Target/$AnnotationPath/Data" var="dataFields"><template:repeat list="{dataFields>}" var="dataField"><core:Fragment fragmentName="sap.fe.macros.table.ValueHelp" type="XML" /></template:repeat></template:with></template:elseif><template:elseif test="{= ${dataField>Value} }"><template:with path="dataField>Value" var="item"><macro:ValueHelp\n\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\t\tproperty="{item>}"\n\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t/></template:with></template:elseif><template:else><macro:ValueHelp\n\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'TableValueHelp\']) }"\n\t\t\t\tproperty="{dataField>}"\n\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t/></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/macros/valuehelp/ValueHelpFilterBar.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcFbVh="sap.ui.mdc.filterbar.vh"\n\txmlns="sap.m"\n\txmlns:macro="sap.fe.macros"\n\txmlns:internalMacro="sap.fe.macros.internal"\n\txmlns:log="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\txmlns:macroData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tMACRO: \'sap/fe/macros/MacroTemplating\'\n\t}"\n><mdcFbVh:FilterBar\n\t\tid="{this>id}"\n\t\tliveMode="{this>liveMode}"\n\t\tdelegate="{= \'{name:\\\'sap/fe/macros/filterBar/FilterBarDelegate\\\', payload: {entityTypePath: \\\'\' + ${contextPath>@@MACRO.getPath} + \'\\\'} }\' }"\n\t\tsearch="{this>search}"\n\t\tfilterChanged="{this>filterChanged}"\n\t\tfilterConditions="{this>filterConditions}"\n\t\tsuspendSelection="{this>suspendSelection}"\n\t\texpandFilterFields="{this>expandFilterFields}"\n\t\tmacroData:hideBasicSearch="{this>hideBasicSearch}"\n\t\tmacroData:useSemanticDateRange="{this>useSemanticDateRange}"\n\t\tmacroData:selectionFields="{= COMMON.stringifyCustomData(${this>selectionFields}) }"\n\t\tmacroData:entityType="{contextPath>@@MACRO.getPath}"\n\t><mdcFbVh:dependents><template:repeat list="{path:\'selectionFields>\'}" var="item"><template:if test="{= ${item>availability} === \'Default\' &amp;&amp; ${item>template} === undefined}"><template:with path="item>annotationPath" var="property"><macro:ValueHelp\n\t\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FilterFieldValueHelp\', COMMON.getNavigationPath(${item>annotationPath})]) }"\n\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\tconditionModel="$filters"\n\t\t\t\t\t\t\tproperty="{property>}"\n\t\t\t\t\t\t\tfilterFieldValueHelp="true"\n\t\t\t\t\t\t\tuseSemanticDateRange="{this>useSemanticDateRange}"\n\t\t\t\t\t\t/></template:with></template:if></template:repeat><template:if\n\t\t\t\ttest="{= !${path:\'contextPath>@com.sap.vocabularies.UI.v1.SelectionFields\'}  &amp;&amp; (${this>enableFallback} === true)}"\n\t\t\t><template:repeat\n\t\t\t\t\tlist="{path:\'contextPath>\', filters: {path: \'$kind\', operator: \'EQ\', value1:\'Property\'}}"\n\t\t\t\t\tvar="selectionField"\n\t\t\t\t><template:with path="selectionField>" var="item"><macro:ValueHelp\n\t\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FilterFieldValueHelp\']) }"\n\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\tconditionModel="$filters"\n\t\t\t\t\t\t\tproperty="{item>}"\n\t\t\t\t\t\t\tfilterFieldValueHelp="true"\n\t\t\t\t\t\t\tuseSemanticDateRange="{this>useSemanticDateRange}"\n\t\t\t\t\t\t/></template:with></template:repeat></template:if></mdcFbVh:dependents><template:if test="{= !${this>hideBasicSearch} }"><mdcFbVh:basicSearchField><mdc:FilterField\n\t\t\t\t\tplaceholder="{sap.fe.i18n>M_FILTERBAR_SEARCH}"\n\t\t\t\t\tconditions="{$filters>/conditions/$search}"\n\t\t\t\t\tdataType="Edm.String"\n\t\t\t\t\tmaxConditions="1"\n\t\t\t\t/></mdcFbVh:basicSearchField></template:if><mdcFbVh:filterItems><template:repeat list="{path:\'selectionFields>\'}" var="item"><template:if test="{= ${item>availability} === \'Default\'}"><template:if test="{= ${item>template} === undefined}"><template:then><template:with path="item>annotationPath" var="property"><internalMacro:FilterField\n\t\t\t\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FilterField\', COMMON.getNavigationPath(${item>annotationPath})]) }"\n\t\t\t\t\t\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'FilterFieldValueHelp\', COMMON.getNavigationPath(${item>annotationPath})]) }"\n\t\t\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\t\t\tproperty="{property>}"\n\t\t\t\t\t\t\t\t\t_valueList="{_valueList>}"\n\t\t\t\t\t\t\t\t\tuseSemanticDateRange="{this>useSemanticDateRange}"\n\t\t\t\t\t\t\t\t\tsettings="{= COMMON.stringifyCustomData(${item>settings}) }"\n\t\t\t\t\t\t\t\t/></template:with></template:then><template:else><core:Fragment fragmentName="sap.fe.macros.filter.CustomFilter" type="XML" /></template:else></template:if></template:if></template:repeat><template:if\n\t\t\t\ttest="{= !${contextPath>@com.sap.vocabularies.UI.v1.SelectionFields} &amp;&amp; (${this>enableFallback} === true) }"\n\t\t\t><template:repeat\n\t\t\t\t\tlist="{path:\'contextPath>\', filters: {path: \'$kind\', operator: \'EQ\', value1:\'Property\'}}"\n\t\t\t\t\tvar="selectionField"\n\t\t\t\t><internalMacro:FilterField\n\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\tproperty="{selectionField>}"\n\t\t\t\t\t\t_valueList="{_valueList>}"\n\t\t\t\t\t\tidPrefix="{= ID.generate([${this>id}, \'FilterField\']) }"\n\t\t\t\t\t\tvhIdPrefix="{= ID.generate([${this>id}, \'FilterFieldValueHelp\']) }"\n\t\t\t\t\t\tuseSemanticDateRange="{this>useSemanticDateRange}"\n\t\t\t\t\t\tlog:comment="Taken from Properties"\n\t\t\t\t\t\tsettings="{= COMMON.stringifyCustomData(${selectionField>settings}) }"\n\t\t\t\t\t/></template:repeat></template:if></mdcFbVh:filterItems></mdcFbVh:FilterBar></core:FragmentDefinition>\n',
	"sap/fe/macros/visualfilters/fragments/InteractiveDonutChart.fragment.xml":'<core:FragmentDefinition\n\txmlns="sap.suite.ui.microchart"\n\txmlns:core="sap.ui.core"\n\txmlns:m="sap.m"\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:macrodata="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tHELPER: \'sap/fe/macros/visualfilters/InteractiveChartHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n        FieldHelper: \'sap/fe/macros/field/FieldHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFieldTemplating: \'sap/fe/macros/field/FieldTemplating\',\n\t\tMACRO: \'sap/fe/macros/MacroTemplating\'\n\t}"\n><template:if test="{= ${chartAnnotation>Measures/0/} &amp;&amp; ${chartAnnotation>Dimensions/0/} }"><template:then><template:with path="chartAnnotation>Measures/0" helper="COMMON.getMeasureAttributeForMeasure" var="DataPoint"><template:with path="chartAnnotation>Measures/0/" var="Measure"><template:with path="chartAnnotation>Dimensions/0/" var="Dimension"><InteractiveDonutChart\n\t\t\t\t\t\t\tcore:require="{VisualFilterRuntime: \'sap/fe/macros/visualfilters/VisualFilterRuntime\'}"\n\t\t\t\t\t\t\tselectionChanged="VisualFilterRuntime.selectionChanged"\n\t\t\t\t\t\t\tvisible="{= \'{= !${internal>\' + ID.generate([${metaPath>@@MACRO.getPath}]) + \'/showOverLayForVF}}\'}"\n\t\t\t\t\t\t\tsegments="{parts:[{path:\'chartAnnotation>\'},{path:\'contextPath>\'},{path: \'Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text\'},{path:\'Dimension>$PropertyPath/$Type\'},{path:\'metaPath>SortOrder\'}, {path: \'this>selectionVariantAnnotation\'}, {path:\'this>bCustomAggregate\'}, {path:\'this>aggregateProperties\'}, {path:\'this>bUoMHasCustomAggregate\'}],formatter:\'HELPER.getAggregationBinding\'}"\n\t\t\t\t\t\t\tmacrodata:outParameter="{= ${this>outParameter}}"\n\t\t\t\t\t\t\tmacrodata:valuelistProperty="{= ${this>valuelistProperty}}"\n\t\t\t\t\t\t\tmacrodata:multipleSelectionAllowed="{= %{this>multipleSelectionAllowed}}"\n\t\t\t\t\t\t\tmacrodata:dimension="{= ${Dimension>$PropertyPath}}"\n\t\t\t\t\t\t\tmacrodata:dimensionText="{= ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text} ? ${Dimension>$PropertyPath@com.sap.vocabularies.Common.v1.Text/$Path} : undefined}"\n\t\t\t\t\t\t\tmacrodata:measure="{= ${Measure>$PropertyPath}}"\n\t\t\t\t\t\t\tmacrodata:scalefactor="{= HELPER.getScaleFactor(${DataPoint>ValueFormat})}"\n\t\t\t\t\t\t\tmacrodata:uom="{parts:[{path:\'chartAnnotation>\'},{path:\'contextPath>\'},{value:\'true\'}, {path:\'this>bCustomAggregate\'}, {path:\'this>aggregateProperties\'}],formatter:\'HELPER.getUoM\'}"\n\t\t\t\t\t\t\tmacrodata:inParameters="{= COMMON.stringifyCustomData(${this>inParameters}) }"\n\t\t\t\t\t\t\tmacrodata:inParameterConditions="{= ${this>inParameters} !== undefined ? HELPER.getInParameterFiltersBinding(${this>inParameters}) : undefined}"\n\t\t\t\t\t\t\tmacrodata:dimensionType="{= ${Dimension>$PropertyPath/$Type}}"\n\t\t\t\t\t\t\tmacrodata:selectionVariantAnnotation="{= COMMON.stringifyCustomData(${this>selectionVariantAnnotation})}"\n\t\t\t\t\t\t\tmacrodata:required="{this>required}"\n\t\t\t\t\t\t\tmacrodata:showOverlayInitially="{this>showOverlayInitially}"\n\t\t\t\t\t\t\tmacrodata:requiredProperties="{this>requiredProperties}"\n\t\t\t\t\t\t\tmacrodata:infoPath="{= ID.generate([${metaPath>@@MACRO.getPath}]) }"\n\t\t\t\t\t\t><segments><InteractiveDonutChartSegment\n\t\t\t\t\t\t\t\t\tcore:require="{VisualFilterRuntime: \'sap/fe/macros/visualfilters/VisualFilterRuntime\'}"\n\t\t\t\t\t\t\t\t\tlabel="{= FieldTemplating.getTextBinding(${Dimension>@@UI.getDataModelObjectPath})}"\n\t\t\t\t\t\t\t\t\tvalue="{= ${Measure>$PropertyPath@@HELPER.getChartValue} }"\n\t\t\t\t\t\t\t\t\tdisplayedValue="{parts:[ {path: \'Measure>$PropertyPath\'}, {path: \'DataPoint>ValueFormat\'}, {path: \'metaPath>@@MACRO.getPath\'}], formatter: \'HELPER.getChartDisplayedValue\'}"\n\t\t\t\t\t\t\t\t\tcolor="{parts:[{path:\'DataPoint>@@UI.getDataModelObjectPath\'}, {path:\'Dimension>\'}], formatter: \'HELPER.getColorBinding\'}"\n\t\t\t\t\t\t\t\t\tselected="{path: \'$field>/conditions\', formatter: \'sap.fe.macros.visualfilters.VisualFilterRuntime.getAggregationSelected\'}"\n\t\t\t\t\t\t\t\t/></segments></InteractiveDonutChart><m:VBox\n\t\t\t\t\t\t\tclass="sapUiOverlay sapUiResponsiveMargin"\n\t\t\t\t\t\t\tvisible="{= \'{internal>\' + ID.generate([${metaPath>@@MACRO.getPath}]) + \'/showOverLayForVF}\'}"\n\t\t\t\t\t\t><m:Text text="{= \'{internal>\' + ID.generate([${metaPath>@@MACRO.getPath}]) + \'/VFOverLayMessage}\'}" /></m:VBox></template:with></template:with></template:with></template:then></template:if></core:FragmentDefinition>\n'
});
//# sourceMappingURL=library-preload.js.map
