/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/fe/core/ActionRuntime", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/helpers/DeleteHelper", "sap/fe/core/library", "sap/fe/macros/field/FieldRuntime", "sap/fe/macros/table/TableHelper", "sap/fe/macros/table/Utils"], function (Log, ActionRuntime, CommonUtils, BusyLocker, deleteHelper, FELibrary, FieldRuntime, TableHelper, TableUtils) {
  "use strict";

  const CreationMode = FELibrary.CreationMode;
  /**
   * Static class used by Table building block during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  const TableRuntime = {
    displayTableSettings: function (oEvent) {
      /*
      		 Temporary solution
      		 Wait for mdc Table to provide public api to either get button 'Settings' or fire event on this button
      		 */
      const oParent = oEvent.getSource().getParent(),
        oSettingsButton = sap.ui.getCore().byId(`${oParent.getId()}-settings`);
      CommonUtils.fireButtonPress(oSettingsButton);
    },
    executeConditionalActionShortcut: function (sButtonMatcher, oSource) {
      // Get the button related to keyboard shortcut
      const oMdcTable = oSource.getParent();
      if (sButtonMatcher !== CreationMode.CreationRow) {
        const oButton = oMdcTable.getActions().reduce(function (aActionButtons, oActionToolbarAction) {
          return aActionButtons.concat(oActionToolbarAction.getAction());
        }, []).find(function (oActionButton) {
          return oActionButton.getId().endsWith(sButtonMatcher);
        });
        CommonUtils.fireButtonPress(oButton);
      } else {
        const oCreationRow = oMdcTable.getAggregation("creationRow");
        if (oCreationRow && oCreationRow.getApplyEnabled() && oCreationRow.getVisible()) {
          oCreationRow.fireApply();
        }
      }
    },
    setContexts: function (oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath) {
      BusyLocker.lock(oTable);
      return TableRuntime.setContextsAsync(oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath).then(() => {
        Log.info("Selections updated");
      }).catch(error => {
        Log.error(error);
      }).finally(() => {
        BusyLocker.unlock(oTable);
      });
    },
    setContextsAsync: async function (oTable, sDeletablePath, draft, sCollection, sNavigationAvailableMap, sActionsMultiselectDisabled, sUpdatablePath) {
      const aActionsMultiselectDisabled = sActionsMultiselectDisabled ? sActionsMultiselectDisabled.split(",") : [];
      const oActionOperationAvailableMap = JSON.parse(sCollection);
      const oNavigationAvailableMap = sNavigationAvailableMap && sNavigationAvailableMap !== "undefined" && JSON.parse(sNavigationAvailableMap);
      let aSelectedContexts = oTable.getSelectedContexts();
      const aDeletableContexts = [];
      const bReadOnlyDraftEnabled = oTable.data("displayModePropertyBinding") === "true" && draft !== "undefined";
      const aUpdatableContexts = [];
      // oDynamicActions are bound actions that are available according to some property
      // in each item
      const oDynamicActions = {};
      const oIBN = {};
      const oInternalModelContext = oTable.getBindingContext("internal");
      if (!oInternalModelContext) {
        return;
      }
      //do not consider empty rows as selected context
      aSelectedContexts = aSelectedContexts.filter(function (oContext) {
        return !oContext.isInactive();
      });
      const oModelObject = Object.assign(oInternalModelContext.getObject() || {}, {
        selectedContexts: aSelectedContexts,
        numberOfSelectedContexts: aSelectedContexts.length,
        dynamicActions: oDynamicActions,
        ibn: oIBN,
        deleteEnabled: true,
        deletableContexts: aDeletableContexts,
        unSavedContexts: [],
        lockedContexts: [],
        draftsWithNonDeletableActive: [],
        draftsWithDeletableActive: [],
        controlId: "",
        updatableContexts: aUpdatableContexts,
        semanticKeyHasDraftIndicator: oInternalModelContext.getProperty("semanticKeyHasDraftIndicator") ? oInternalModelContext.getProperty("semanticKeyHasDraftIndicator") : undefined
      });
      for (const oSelectedContext of aSelectedContexts) {
        const oContextData = oSelectedContext.getObject();
        for (const key in oContextData) {
          if (key.indexOf("#") === 0) {
            let sActionPath = key;
            sActionPath = sActionPath.substring(1, sActionPath.length);
            oModelObject.dynamicActions[sActionPath] = {
              enabled: true
            };
            oInternalModelContext.setProperty("", oModelObject);
          }
        }
        // The updatable contexts with mass edit depend on the following:
        // 1. Update is dependendent on current entity property (sUpdatablePath).
        // 2. The table is read only and draft enabled(like LR), in this case only active contexts can be mass edited(not draft contexts).
        //    So, update depends on 'IsActiveEntity' value which needs to be checked.
        const bUpdatableByPath = sUpdatablePath.length === 0 || !!oSelectedContext.getProperty(sUpdatablePath);
        const bNotDraftInReadOnlyMode = !bReadOnlyDraftEnabled || oContextData.IsActiveEntity;
        if (bUpdatableByPath && bNotDraftInReadOnlyMode) {
          aUpdatableContexts.push(oSelectedContext);
        }
      }
      deleteHelper.updateDeleteInfoForSelectedContexts(oInternalModelContext, aSelectedContexts);
      if (!oTable.data("enableAnalytics")) {
        TableHelper.setIBNEnablement(oInternalModelContext, oNavigationAvailableMap, aSelectedContexts);
      }
      if (aSelectedContexts.length > 1) {
        this.disableAction(aActionsMultiselectDisabled, oDynamicActions);
      }
      if (oModelObject) {
        oModelObject["updatableContexts"] = aUpdatableContexts;
        oModelObject["controlId"] = oTable.getId();
        oInternalModelContext.setProperty("", oModelObject);
      }
      return ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, "table");
    },
    disableAction: function (aActionsMultiselectDisabled, oDynamicActions) {
      aActionsMultiselectDisabled.forEach(function (sAction) {
        oDynamicActions[sAction] = {
          bEnabled: false
        };
      });
    },
    onFieldChangeInCreationRow: function (oEvent, oCustomValidationFunction) {
      // CREATION ROW CASE
      const mField = FieldRuntime.getFieldStateOnChange(oEvent),
        oSourceField = mField.field,
        sFieldId = oSourceField.getId();
      const oInternalModelContext = oSourceField.getBindingContext("internal"),
        mFieldValidity = oInternalModelContext.getProperty("creationRowFieldValidity"),
        mNewFieldValidity = Object.assign({}, mFieldValidity);
      mNewFieldValidity[sFieldId] = mField.state;
      oInternalModelContext.setProperty("creationRowFieldValidity", mNewFieldValidity);

      // prepare Custom Validation
      if (oCustomValidationFunction) {
        const mCustomValidity = oInternalModelContext.getProperty("creationRowCustomValidity"),
          mNewCustomValidity = Object.assign({}, mCustomValidity);
        mNewCustomValidity[oSourceField.getBinding("value").getPath()] = {
          fieldId: oSourceField.getId()
        };
        oInternalModelContext.setProperty("creationRowCustomValidity", mNewCustomValidity);
        // Remove existing CustomValidation message
        const oMessageManager = sap.ui.getCore().getMessageManager();
        const sTarget = `${oSourceField.getBindingContext().getPath()}/${oSourceField.getBindingPath("value")}`;
        oMessageManager.getMessageModel().getData().forEach(function (oMessage) {
          if (oMessage.target === sTarget) {
            oMessageManager.removeMessages(oMessage);
          }
        });
      }
    },
    onTreeTableContextChanged: function (table, initialExpansionLevel) {
      // When the context of a TreeTable changes, we want to restore its expansion state to the default:
      //   - all expanded if there's a search parameter coming from the filterBar
      //   - otherwise initial expansion state coming from the PV (stored in the payload)
      //   - otherwise no expansion at all

      const rowBinding = table.getRowBinding();
      if (!rowBinding.getContext()) {
        return;
      }
      const aggregation = rowBinding.getAggregation() ?? {};
      const filterInfo = TableUtils.getAllFilterInfo(table);
      aggregation.expandTo = filterInfo.search ? 100 : initialExpansionLevel;
      rowBinding.setAggregation(aggregation);
    }
  };
  return TableRuntime;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,