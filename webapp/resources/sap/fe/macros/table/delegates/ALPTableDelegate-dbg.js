/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/util/deepClone", "sap/fe/core/CommonUtils", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/DelegateUtil", "sap/fe/macros/table/delegates/TableDelegate", "sap/fe/macros/table/Utils", "sap/ui/model/Filter"], function (deepClone, CommonUtils, ChartUtils, DelegateUtil, TableDelegate, TableUtils, Filter) {
  "use strict";

  /**
   * Helper class for sap.ui.mdc.Table.
   * <h3><b>Note:</b></h3>
   * The class is experimental and the API/behaviour is not finalised and hence this should not be used for productive usage.
   *
   * @author SAP SE
   * @private
   * @experimental
   * @since 1.69.0
   * @alias sap.fe.macros.ALPTableDelegate
   */
  const ALPTableDelegate = Object.assign({}, TableDelegate, {
    apiVersion: 2,
    _internalUpdateBindingInfo: function (table, bindingInfo) {
      var _getChartControl, _ref;
      let filterInfo;
      let chartFilterInfo = {},
        tableFilterInfo = {};
      let chartFilters;

      // We need to deepClone the info we get from the custom data, otherwise some of its subobjects (e.g. parameters) will
      // be shared with oBindingInfo and modified later (Object.assign only does a shallow clone)
      Object.assign(bindingInfo, deepClone(DelegateUtil.getCustomData(table, "rowsBindingInfo")));
      if (table.getRowBinding()) {
        bindingInfo.suspended = false;
      }
      const view = CommonUtils.getTargetView(table);
      const mdcChart = (_getChartControl = (_ref = view.getController()).getChartControl) === null || _getChartControl === void 0 ? void 0 : _getChartControl.call(_ref);
      const chartAPI = mdcChart.getParent();
      const chartSelectionsExist = chartAPI.hasSelections();
      tableFilterInfo = TableUtils.getAllFilterInfo(table);
      const tableFilters = tableFilterInfo && tableFilterInfo.filters;
      filterInfo = tableFilterInfo;
      if (chartSelectionsExist) {
        chartFilterInfo = ChartUtils.getAllFilterInfo(mdcChart);
        chartFilters = chartFilterInfo && chartFilterInfo.filters ? CommonUtils.getChartPropertiesWithoutPrefixes(chartFilterInfo.filters) : null;
        filterInfo = chartFilterInfo;
      }
      const finalFilters = (tableFilters && chartFilters ? tableFilters.concat(chartFilters) : chartFilters || tableFilters) || [];
      const oFilter = finalFilters.length > 0 && new Filter({
        filters: finalFilters,
        and: true
      });
      if (filterInfo.bindingPath) {
        // In case of parameters
        bindingInfo.path = filterInfo.bindingPath;
      }

      // Prepare binding info with filter/search parameters
      ALPTableDelegate.updateBindingInfoWithSearchQuery(bindingInfo, filterInfo, oFilter);
    },
    rebind: function (table, bindingInfo) {
      const internalModelContext = table.getBindingContext("pageInternal");
      const templateContentView = internalModelContext === null || internalModelContext === void 0 ? void 0 : internalModelContext.getProperty(`${internalModelContext.getPath()}/alpContentView`);
      if (templateContentView !== "Chart") {
        TableDelegate.rebind(table, bindingInfo);
      }
    }
  });
  return ALPTableDelegate;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBTFBUYWJsZURlbGVnYXRlIiwiT2JqZWN0IiwiYXNzaWduIiwiVGFibGVEZWxlZ2F0ZSIsImFwaVZlcnNpb24iLCJfaW50ZXJuYWxVcGRhdGVCaW5kaW5nSW5mbyIsInRhYmxlIiwiYmluZGluZ0luZm8iLCJmaWx0ZXJJbmZvIiwiY2hhcnRGaWx0ZXJJbmZvIiwidGFibGVGaWx0ZXJJbmZvIiwiY2hhcnRGaWx0ZXJzIiwiZGVlcENsb25lIiwiRGVsZWdhdGVVdGlsIiwiZ2V0Q3VzdG9tRGF0YSIsImdldFJvd0JpbmRpbmciLCJzdXNwZW5kZWQiLCJ2aWV3IiwiQ29tbW9uVXRpbHMiLCJnZXRUYXJnZXRWaWV3IiwibWRjQ2hhcnQiLCJnZXRDb250cm9sbGVyIiwiZ2V0Q2hhcnRDb250cm9sIiwiY2hhcnRBUEkiLCJnZXRQYXJlbnQiLCJjaGFydFNlbGVjdGlvbnNFeGlzdCIsImhhc1NlbGVjdGlvbnMiLCJUYWJsZVV0aWxzIiwiZ2V0QWxsRmlsdGVySW5mbyIsInRhYmxlRmlsdGVycyIsImZpbHRlcnMiLCJDaGFydFV0aWxzIiwiZ2V0Q2hhcnRQcm9wZXJ0aWVzV2l0aG91dFByZWZpeGVzIiwiZmluYWxGaWx0ZXJzIiwiY29uY2F0Iiwib0ZpbHRlciIsImxlbmd0aCIsIkZpbHRlciIsImFuZCIsImJpbmRpbmdQYXRoIiwicGF0aCIsInVwZGF0ZUJpbmRpbmdJbmZvV2l0aFNlYXJjaFF1ZXJ5IiwicmViaW5kIiwiaW50ZXJuYWxNb2RlbENvbnRleHQiLCJnZXRCaW5kaW5nQ29udGV4dCIsInRlbXBsYXRlQ29udGVudFZpZXciLCJnZXRQcm9wZXJ0eSIsImdldFBhdGgiXSwic291cmNlUm9vdCI6Ii4iLCJzb3VyY2VzIjpbIkFMUFRhYmxlRGVsZWdhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlZXBDbG9uZSBmcm9tIFwic2FwL2Jhc2UvdXRpbC9kZWVwQ2xvbmVcIjtcbmltcG9ydCBDb21tb25VdGlscyBmcm9tIFwic2FwL2ZlL2NvcmUvQ29tbW9uVXRpbHNcIjtcbmltcG9ydCBDaGFydFV0aWxzIGZyb20gXCJzYXAvZmUvbWFjcm9zL2NoYXJ0L0NoYXJ0VXRpbHNcIjtcbmltcG9ydCBEZWxlZ2F0ZVV0aWwgZnJvbSBcInNhcC9mZS9tYWNyb3MvRGVsZWdhdGVVdGlsXCI7XG5pbXBvcnQgVGFibGVEZWxlZ2F0ZSBmcm9tIFwic2FwL2ZlL21hY3Jvcy90YWJsZS9kZWxlZ2F0ZXMvVGFibGVEZWxlZ2F0ZVwiO1xuaW1wb3J0IFRhYmxlVXRpbHMgZnJvbSBcInNhcC9mZS9tYWNyb3MvdGFibGUvVXRpbHNcIjtcbmltcG9ydCB0eXBlIHsgQmFzZVByb3BlcnR5SW5mbyB9IGZyb20gXCJzYXAvdWkvYmFzZS9NYW5hZ2VkT2JqZWN0XCI7XG5pbXBvcnQgdHlwZSBUYWJsZSBmcm9tIFwic2FwL3VpL21kYy9UYWJsZVwiO1xuaW1wb3J0IEZpbHRlciBmcm9tIFwic2FwL3VpL21vZGVsL0ZpbHRlclwiO1xuXG4vKipcbiAqIEhlbHBlciBjbGFzcyBmb3Igc2FwLnVpLm1kYy5UYWJsZS5cbiAqIDxoMz48Yj5Ob3RlOjwvYj48L2gzPlxuICogVGhlIGNsYXNzIGlzIGV4cGVyaW1lbnRhbCBhbmQgdGhlIEFQSS9iZWhhdmlvdXIgaXMgbm90IGZpbmFsaXNlZCBhbmQgaGVuY2UgdGhpcyBzaG91bGQgbm90IGJlIHVzZWQgZm9yIHByb2R1Y3RpdmUgdXNhZ2UuXG4gKlxuICogQGF1dGhvciBTQVAgU0VcbiAqIEBwcml2YXRlXG4gKiBAZXhwZXJpbWVudGFsXG4gKiBAc2luY2UgMS42OS4wXG4gKiBAYWxpYXMgc2FwLmZlLm1hY3Jvcy5BTFBUYWJsZURlbGVnYXRlXG4gKi9cbmNvbnN0IEFMUFRhYmxlRGVsZWdhdGUgPSBPYmplY3QuYXNzaWduKHt9LCBUYWJsZURlbGVnYXRlLCB7XG5cdGFwaVZlcnNpb246IDIsXG5cdF9pbnRlcm5hbFVwZGF0ZUJpbmRpbmdJbmZvOiBmdW5jdGlvbiAodGFibGU6IFRhYmxlLCBiaW5kaW5nSW5mbzogQmFzZVByb3BlcnR5SW5mbykge1xuXHRcdGxldCBmaWx0ZXJJbmZvO1xuXHRcdGxldCBjaGFydEZpbHRlckluZm86IGFueSA9IHt9LFxuXHRcdFx0dGFibGVGaWx0ZXJJbmZvOiBhbnkgPSB7fTtcblx0XHRsZXQgY2hhcnRGaWx0ZXJzO1xuXG5cdFx0Ly8gV2UgbmVlZCB0byBkZWVwQ2xvbmUgdGhlIGluZm8gd2UgZ2V0IGZyb20gdGhlIGN1c3RvbSBkYXRhLCBvdGhlcndpc2Ugc29tZSBvZiBpdHMgc3Vib2JqZWN0cyAoZS5nLiBwYXJhbWV0ZXJzKSB3aWxsXG5cdFx0Ly8gYmUgc2hhcmVkIHdpdGggb0JpbmRpbmdJbmZvIGFuZCBtb2RpZmllZCBsYXRlciAoT2JqZWN0LmFzc2lnbiBvbmx5IGRvZXMgYSBzaGFsbG93IGNsb25lKVxuXHRcdE9iamVjdC5hc3NpZ24oYmluZGluZ0luZm8sIGRlZXBDbG9uZShEZWxlZ2F0ZVV0aWwuZ2V0Q3VzdG9tRGF0YSh0YWJsZSwgXCJyb3dzQmluZGluZ0luZm9cIikpKTtcblx0XHRpZiAodGFibGUuZ2V0Um93QmluZGluZygpKSB7XG5cdFx0XHRiaW5kaW5nSW5mby5zdXNwZW5kZWQgPSBmYWxzZTtcblx0XHR9XG5cdFx0Y29uc3QgdmlldyA9IENvbW1vblV0aWxzLmdldFRhcmdldFZpZXcodGFibGUpO1xuXHRcdGNvbnN0IG1kY0NoYXJ0ID0gKHZpZXcuZ2V0Q29udHJvbGxlcigpIGFzIGFueSkuZ2V0Q2hhcnRDb250cm9sPy4oKTtcblx0XHRjb25zdCBjaGFydEFQSSA9IG1kY0NoYXJ0LmdldFBhcmVudCgpO1xuXHRcdGNvbnN0IGNoYXJ0U2VsZWN0aW9uc0V4aXN0ID0gY2hhcnRBUEkuaGFzU2VsZWN0aW9ucygpO1xuXHRcdHRhYmxlRmlsdGVySW5mbyA9IFRhYmxlVXRpbHMuZ2V0QWxsRmlsdGVySW5mbyh0YWJsZSk7XG5cdFx0Y29uc3QgdGFibGVGaWx0ZXJzID0gdGFibGVGaWx0ZXJJbmZvICYmIHRhYmxlRmlsdGVySW5mby5maWx0ZXJzO1xuXHRcdGZpbHRlckluZm8gPSB0YWJsZUZpbHRlckluZm87XG5cdFx0aWYgKGNoYXJ0U2VsZWN0aW9uc0V4aXN0KSB7XG5cdFx0XHRjaGFydEZpbHRlckluZm8gPSBDaGFydFV0aWxzLmdldEFsbEZpbHRlckluZm8obWRjQ2hhcnQpO1xuXHRcdFx0Y2hhcnRGaWx0ZXJzID1cblx0XHRcdFx0Y2hhcnRGaWx0ZXJJbmZvICYmIGNoYXJ0RmlsdGVySW5mby5maWx0ZXJzID8gQ29tbW9uVXRpbHMuZ2V0Q2hhcnRQcm9wZXJ0aWVzV2l0aG91dFByZWZpeGVzKGNoYXJ0RmlsdGVySW5mby5maWx0ZXJzKSA6IG51bGw7XG5cdFx0XHRmaWx0ZXJJbmZvID0gY2hhcnRGaWx0ZXJJbmZvO1xuXHRcdH1cblx0XHRjb25zdCBmaW5hbEZpbHRlcnMgPSAodGFibGVGaWx0ZXJzICYmIGNoYXJ0RmlsdGVycyA/IHRhYmxlRmlsdGVycy5jb25jYXQoY2hhcnRGaWx0ZXJzKSA6IGNoYXJ0RmlsdGVycyB8fCB0YWJsZUZpbHRlcnMpIHx8IFtdO1xuXHRcdGNvbnN0IG9GaWx0ZXIgPVxuXHRcdFx0ZmluYWxGaWx0ZXJzLmxlbmd0aCA+IDAgJiZcblx0XHRcdG5ldyBGaWx0ZXIoe1xuXHRcdFx0XHRmaWx0ZXJzOiBmaW5hbEZpbHRlcnMsXG5cdFx0XHRcdGFuZDogdHJ1ZVxuXHRcdFx0fSk7XG5cblx0XHRpZiAoZmlsdGVySW5mby5iaW5kaW5nUGF0aCkge1xuXHRcdFx0Ly8gSW4gY2FzZSBvZiBwYXJhbWV0ZXJzXG5cdFx0XHRiaW5kaW5nSW5mby5wYXRoID0gZmlsdGVySW5mby5iaW5kaW5nUGF0aDtcblx0XHR9XG5cblx0XHQvLyBQcmVwYXJlIGJpbmRpbmcgaW5mbyB3aXRoIGZpbHRlci9zZWFyY2ggcGFyYW1ldGVyc1xuXHRcdEFMUFRhYmxlRGVsZWdhdGUudXBkYXRlQmluZGluZ0luZm9XaXRoU2VhcmNoUXVlcnkoYmluZGluZ0luZm8sIGZpbHRlckluZm8sIG9GaWx0ZXIpO1xuXHR9LFxuXHRyZWJpbmQ6IGZ1bmN0aW9uICh0YWJsZTogVGFibGUsIGJpbmRpbmdJbmZvOiBhbnkpIHtcblx0XHRjb25zdCBpbnRlcm5hbE1vZGVsQ29udGV4dCA9IHRhYmxlLmdldEJpbmRpbmdDb250ZXh0KFwicGFnZUludGVybmFsXCIpO1xuXHRcdGNvbnN0IHRlbXBsYXRlQ29udGVudFZpZXcgPSBpbnRlcm5hbE1vZGVsQ29udGV4dD8uZ2V0UHJvcGVydHkoYCR7aW50ZXJuYWxNb2RlbENvbnRleHQuZ2V0UGF0aCgpfS9hbHBDb250ZW50Vmlld2ApO1xuXHRcdGlmICh0ZW1wbGF0ZUNvbnRlbnRWaWV3ICE9PSBcIkNoYXJ0XCIpIHtcblx0XHRcdFRhYmxlRGVsZWdhdGUucmViaW5kKHRhYmxlLCBiaW5kaW5nSW5mbyk7XG5cdFx0fVxuXHR9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQUxQVGFibGVEZWxlZ2F0ZTtcbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFBQTs7OztFQVVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDQSxNQUFNQSxnQkFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVDLGFBQWEsRUFBRTtJQUN6REMsVUFBVSxFQUFFLENBQUM7SUFDYkMsMEJBQTBCLEVBQUUsVUFBVUMsS0FBWSxFQUFFQyxXQUE2QixFQUFFO01BQUE7TUFDbEYsSUFBSUMsVUFBVTtNQUNkLElBQUlDLGVBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQzVCQyxlQUFvQixHQUFHLENBQUMsQ0FBQztNQUMxQixJQUFJQyxZQUFZOztNQUVoQjtNQUNBO01BQ0FWLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSyxXQUFXLEVBQUVLLFNBQVMsQ0FBQ0MsWUFBWSxDQUFDQyxhQUFhLENBQUNSLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7TUFDM0YsSUFBSUEsS0FBSyxDQUFDUyxhQUFhLEVBQUUsRUFBRTtRQUMxQlIsV0FBVyxDQUFDUyxTQUFTLEdBQUcsS0FBSztNQUM5QjtNQUNBLE1BQU1DLElBQUksR0FBR0MsV0FBVyxDQUFDQyxhQUFhLENBQUNiLEtBQUssQ0FBQztNQUM3QyxNQUFNYyxRQUFRLHVCQUFHLFFBQUNILElBQUksQ0FBQ0ksYUFBYSxFQUFFLEVBQVNDLGVBQWUscURBQTdDLDJCQUFpRDtNQUNsRSxNQUFNQyxRQUFRLEdBQUdILFFBQVEsQ0FBQ0ksU0FBUyxFQUFFO01BQ3JDLE1BQU1DLG9CQUFvQixHQUFHRixRQUFRLENBQUNHLGFBQWEsRUFBRTtNQUNyRGhCLGVBQWUsR0FBR2lCLFVBQVUsQ0FBQ0MsZ0JBQWdCLENBQUN0QixLQUFLLENBQUM7TUFDcEQsTUFBTXVCLFlBQVksR0FBR25CLGVBQWUsSUFBSUEsZUFBZSxDQUFDb0IsT0FBTztNQUMvRHRCLFVBQVUsR0FBR0UsZUFBZTtNQUM1QixJQUFJZSxvQkFBb0IsRUFBRTtRQUN6QmhCLGVBQWUsR0FBR3NCLFVBQVUsQ0FBQ0gsZ0JBQWdCLENBQUNSLFFBQVEsQ0FBQztRQUN2RFQsWUFBWSxHQUNYRixlQUFlLElBQUlBLGVBQWUsQ0FBQ3FCLE9BQU8sR0FBR1osV0FBVyxDQUFDYyxpQ0FBaUMsQ0FBQ3ZCLGVBQWUsQ0FBQ3FCLE9BQU8sQ0FBQyxHQUFHLElBQUk7UUFDM0h0QixVQUFVLEdBQUdDLGVBQWU7TUFDN0I7TUFDQSxNQUFNd0IsWUFBWSxHQUFHLENBQUNKLFlBQVksSUFBSWxCLFlBQVksR0FBR2tCLFlBQVksQ0FBQ0ssTUFBTSxDQUFDdkIsWUFBWSxDQUFDLEdBQUdBLFlBQVksSUFBSWtCLFlBQVksS0FBSyxFQUFFO01BQzVILE1BQU1NLE9BQU8sR0FDWkYsWUFBWSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxJQUN2QixJQUFJQyxNQUFNLENBQUM7UUFDVlAsT0FBTyxFQUFFRyxZQUFZO1FBQ3JCSyxHQUFHLEVBQUU7TUFDTixDQUFDLENBQUM7TUFFSCxJQUFJOUIsVUFBVSxDQUFDK0IsV0FBVyxFQUFFO1FBQzNCO1FBQ0FoQyxXQUFXLENBQUNpQyxJQUFJLEdBQUdoQyxVQUFVLENBQUMrQixXQUFXO01BQzFDOztNQUVBO01BQ0F2QyxnQkFBZ0IsQ0FBQ3lDLGdDQUFnQyxDQUFDbEMsV0FBVyxFQUFFQyxVQUFVLEVBQUUyQixPQUFPLENBQUM7SUFDcEYsQ0FBQztJQUNETyxNQUFNLEVBQUUsVUFBVXBDLEtBQVksRUFBRUMsV0FBZ0IsRUFBRTtNQUNqRCxNQUFNb0Msb0JBQW9CLEdBQUdyQyxLQUFLLENBQUNzQyxpQkFBaUIsQ0FBQyxjQUFjLENBQUM7TUFDcEUsTUFBTUMsbUJBQW1CLEdBQUdGLG9CQUFvQixhQUFwQkEsb0JBQW9CLHVCQUFwQkEsb0JBQW9CLENBQUVHLFdBQVcsQ0FBRSxHQUFFSCxvQkFBb0IsQ0FBQ0ksT0FBTyxFQUFHLGlCQUFnQixDQUFDO01BQ2pILElBQUlGLG1CQUFtQixLQUFLLE9BQU8sRUFBRTtRQUNwQzFDLGFBQWEsQ0FBQ3VDLE1BQU0sQ0FBQ3BDLEtBQUssRUFBRUMsV0FBVyxDQUFDO01BQ3pDO0lBQ0Q7RUFDRCxDQUFDLENBQUM7RUFBQyxPQUVZUCxnQkFBZ0I7QUFBQSJ9