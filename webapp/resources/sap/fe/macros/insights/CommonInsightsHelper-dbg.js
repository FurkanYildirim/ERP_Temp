/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/CommonUtils", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ResourceModelHelper", "sap/ui/core/Core", "sap/ui/mdc/p13n/StateUtil", "./AnalyticalInsightsHelper", "./InsightsCardHelper"], function (CommonUtils, MetaModelConverter, BindingToolkit, ResourceModelHelper, Core, StateUtil, AnalyticalInsightsHelper, InsightsCardHelper) {
  "use strict";

  var _exports = {};
  var showErrorMessageForInsightsCard = InsightsCardHelper.showErrorMessageForInsightsCard;
  var IntegrationCardType = InsightsCardHelper.IntegrationCardType;
  var getMeasures = AnalyticalInsightsHelper.getMeasures;
  var getFeeds = AnalyticalInsightsHelper.getFeeds;
  var getDimensions = AnalyticalInsightsHelper.getDimensions;
  var getChartProperties = AnalyticalInsightsHelper.getChartProperties;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  /**
   * Checks if the insights card creation is possible.
   *
   * @param control
   * @param insightsRelevantColumns
   * @returns True if the insights card can be created.
   */
  async function isInsightsCardCreationPossible(control, insightsRelevantColumns) {
    try {
      const filterBar = Core.byId(control.getFilter());
      const controlState = await StateUtil.retrieveExternalState(control);
      let isSemanticDateFilterApplied = false;
      let isControlLevelFilterApplied = false;
      if (filterBar !== undefined) {
        isSemanticDateFilterApplied = filterBar.getParent().isSemanticDateFilterApplied();
      }
      if (controlState.filter) {
        const controlLevelFilterKeys = Object.keys(controlState.filter);
        for (const key of controlLevelFilterKeys) {
          const controlStateFilter = controlState.filter[key];
          if (Array.isArray(controlStateFilter) && controlStateFilter.length) {
            isControlLevelFilterApplied = true;
            break;
          }
        }
      }
      if (isControlLevelFilterApplied || isSemanticDateFilterApplied || (insightsRelevantColumns ? insightsRelevantColumns.length === 0 : false)) {
        return false;
      }
      return true;
    } catch {
      throw Error("Error retrieving control states");
    }
  }

  /**
   * Filters the columns that can be shown on the insights card from the visible columns on the table.
   *
   * @param tableAPI
   * @returns A list of columns that can be shown on the insightsCard.
   */
  function getInsightsRelevantColumns(tableAPI) {
    var _table$getModel;
    const table = tableAPI.content;
    const visibleColumns = table.getColumns();
    const supportedColumnNames = [];
    const metaModel = (_table$getModel = table.getModel()) === null || _table$getModel === void 0 ? void 0 : _table$getModel.getMetaModel();
    const metaPath = table.data("metaPath");
    tableAPI.getTableDefinition().columns.forEach(function (column) {
      if (column.isInsightsSupported === true) {
        supportedColumnNames.push(column.name);
      }
    });
    return visibleColumns.filter(function (column) {
      return supportedColumnNames.includes(column.getDataProperty());
    }).map(function (supportedColumn) {
      const dataProperty = supportedColumn.getDataProperty(),
        propertyContext = metaModel === null || metaModel === void 0 ? void 0 : metaModel.getContext(metaPath + "/" + dataProperty),
        dataModel = getInvolvedDataModelObjects(propertyContext),
        propertyTargetObject = dataModel.targetObject,
        uomBinding = getUomBinding(propertyTargetObject, dataProperty),
        columnText = uomBinding ? uomBinding : getTextArrangementForColumn(propertyTargetObject, dataProperty);
      return {
        visible: false,
        name: columnText,
        label: supportedColumn.getProperty("header")
      };
    });
  }

  /**
   * Constructs the insights parameters from the table that is required to create the insights card.
   *
   * @param controlAPI
   * @param cardType
   * @param insightsRelevantColumns
   * @returns The insights parameters from the table.
   */
  _exports.getInsightsRelevantColumns = getInsightsRelevantColumns;
  async function createInsightsParams(controlAPI, cardType, insightsRelevantColumns) {
    let controlState;
    const control = controlAPI.content;
    const filterbarID = control.getFilter() !== "" ? control.getFilter() : undefined;
    const isCardCreationSupported = await isInsightsCardCreationPossible(control, insightsRelevantColumns);
    if (!isCardCreationSupported) {
      showErrorMessageForInsightsCard(cardType, getResourceModel(controlAPI));
      return;
    }
    try {
      controlState = await StateUtil.retrieveExternalState(control);
    } catch {
      throw Error("Error retrieving control states");
    }
    const entitySetPath = cardType === IntegrationCardType.table ? control.data("metaPath") : control.data("targetCollectionPath");
    const appComponent = CommonUtils.getAppComponent(control);
    const appManifest = appComponent.getManifestEntry("sap.app");
    const serviceUrl = control.getModel().getServiceUrl();
    let queryUrl = "";
    const insightsParams = {
      appComponent: appComponent,
      type: cardType,
      requestParameters: {
        serviceUrl: "",
        queryUrl: "",
        groupBy: undefined
      },
      content: {
        cardTitle: "",
        insightsRelevantColumns: []
      },
      parentAppId: appManifest.id,
      parameters: {
        filterbarID: filterbarID
      },
      entitySetPath: entitySetPath
    };
    if (cardType === IntegrationCardType.table) {
      insightsParams.content = {
        cardTitle: control.getHeader(),
        insightsRelevantColumns: insightsRelevantColumns ?? []
      };
      queryUrl = control.getRowBinding().getDownloadUrl();
      insightsParams.content.cardTitle = control.getHeader();
      insightsParams.parentAppId = appManifest.id;
      const groupProperty = Array.isArray(controlState.groupLevels) && controlState.groupLevels.length ? controlState.groupLevels[0].name : undefined;
      if (groupProperty !== undefined) {
        const groupPropertyName = groupProperty.includes("::") ? groupProperty.split("::")[1] : groupProperty;
        insightsParams.requestParameters.groupBy = {
          property: groupPropertyName
        };
      }
    } else {
      const chart = control;
      const innerChart = chart.getControlDelegate().getInnerChart(chart);
      const chartContent = {
        cardTitle: chart.getHeader(),
        legendVisible: false,
        chartType: chart.getChartType(),
        measures: getMeasures(innerChart),
        dimensions: getDimensions(innerChart),
        feeds: getFeeds(innerChart),
        allowedChartTypes: innerChart.getAvailableChartTypes().available,
        chartProperties: getChartProperties(innerChart)
      };
      insightsParams.content = chartContent;
      queryUrl = innerChart.getBindingInfo("data").binding.getDownloadUrl();
    }
    insightsParams.requestParameters.serviceUrl = serviceUrl;
    insightsParams.requestParameters.queryUrl = queryUrl.includes(serviceUrl) ? queryUrl.split(serviceUrl)[1] : queryUrl;
    return insightsParams;
  }
  _exports.createInsightsParams = createInsightsParams;
  function getTextArrangementForColumn(propertyTargetObject, property) {
    var _propertyTargetObject, _text$annotations, _text$annotations$UI, _text$annotations$UI$;
    const propertyParts = property.split("/");
    let navigationPath;
    if (propertyParts.length > 1) {
      propertyParts.pop();
      navigationPath = propertyParts.join();
    }
    const text = (_propertyTargetObject = propertyTargetObject.annotations.Common) === null || _propertyTargetObject === void 0 ? void 0 : _propertyTargetObject.Text;
    const textArrangement = text === null || text === void 0 ? void 0 : (_text$annotations = text.annotations) === null || _text$annotations === void 0 ? void 0 : (_text$annotations$UI = _text$annotations.UI) === null || _text$annotations$UI === void 0 ? void 0 : (_text$annotations$UI$ = _text$annotations$UI.TextArrangement) === null || _text$annotations$UI$ === void 0 ? void 0 : _text$annotations$UI$.valueOf();
    const propertyBinding = pathInModel(property);
    let columnBindingValue;
    if (text) {
      const textBinding = getExpressionFromAnnotation(text, navigationPath ? [navigationPath] : []);
      if (textArrangement === "UI.TextArrangementType/TextLast") {
        columnBindingValue = concat(propertyBinding, " (", textBinding, ")");
      } else if (textArrangement === "UI.TextArrangementType/TextOnly") {
        columnBindingValue = textBinding;
      } else if (textArrangement === "UI.TextArrangementType/TextSeparate") {
        columnBindingValue = propertyBinding;
      } else {
        columnBindingValue = concat(textBinding, " (", propertyBinding, ")");
      }
    } else {
      columnBindingValue = propertyBinding;
    }
    return compileExpression(columnBindingValue);
  }
  function getUomBinding(propertyTargetObject, property) {
    var _propertyTargetObject2, _propertyTargetObject3;
    const uom = ((_propertyTargetObject2 = propertyTargetObject.annotations.Measures) === null || _propertyTargetObject2 === void 0 ? void 0 : _propertyTargetObject2.ISOCurrency) || ((_propertyTargetObject3 = propertyTargetObject.annotations.Measures) === null || _propertyTargetObject3 === void 0 ? void 0 : _propertyTargetObject3.Unit);
    if (!uom) {
      return;
    } else {
      const propertyBinding = pathInModel(property);
      return compileExpression(concat(propertyBinding, " ", getExpressionFromAnnotation(uom)));
    }
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,