/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/macros/internal/valuehelp/AdditionalValueHelper", "sap/ui/core/library"], function (AdditionalValueHelper, library) {
  "use strict";

  var ValueState = library.ValueState;
  var additionalValueHelper = AdditionalValueHelper.additionalValueHelper;
  /**
   * Growing formatter used for growing and growingThreshold.
   *
   * @param this Valuehelp Table
   * @param recommendationData Data fetched from recommendation model
   * @param propertyPath Property Path of the Field
   * @returns Boolean value for growing and growingThreshold properties
   */
  function getGrowing(recommendationData, propertyPath) {
    const values = additionalValueHelper.getRelevantRecommendations(recommendationData || {}, this.getBindingContext(), propertyPath) || [];
    if (values.length > 0) {
      //if there are relevant recommendations then return true
      return true;
    }
    return false;
  }
  getGrowing.__functionName = "sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#getGrowing";
  function formatValueState(all_recommendations, currentPageContext, sourcepath, fieldContainerType) {
    let valueStateTypeData = ValueState.None;
    if (!this.getValue()) {
      // only if the existing state is none, we will override state based on recommendations data, else we keep it as is

      if (this.getValueState() == "None" || this.data("hasRecommendations") && this.getValueState() == "Information") {
        // currentPageContext - refers to binding context of view, so this may not be correct data for table, in case of OP.
        // so we use this.getBindingContext
        // for other cases like form, we can still use page context data, this will give correct context for both OP and SubOP.
        let bindingContext;
        if (fieldContainerType === "Table") {
          bindingContext = this.getBindingContext();
        } else {
          bindingContext = currentPageContext;
        }
        if (bindingContext && sourcepath) {
          const values = additionalValueHelper.getRelevantRecommendations(all_recommendations || {}, this.getBindingContext(), sourcepath) || [];
          if (values.length) {
            this.data("hasRecommendations", true);
            valueStateTypeData = ValueState.Information;
          }
        }
      } else {
        valueStateTypeData = this.getValueState();
      }
      if (valueStateTypeData === "Information") {
        this.setValueStateText(" ");
      }
    }
    return valueStateTypeData;
  }
  formatValueState.__functionName = "sap.fe.macros.internal.valuehelp.AdditionalValueFormatter#formatValueState";

  // See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax
  /**
   * Collection of AdditionalValue formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const additionalValueFormatter = function (sName) {
    if (additionalValueFormatter.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return additionalValueFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  additionalValueFormatter.getGrowing = getGrowing;
  additionalValueFormatter.formatValueState = formatValueState;

  /**
   * @global
   */
  return additionalValueFormatter;
}, true);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,