/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/ui/model/odata/v4/AnnotationHelper"], function (valueFormatters, BindingToolkit, TypeGuards, DataModelPathHelper, PropertyHelper, UIFormatters, AnnotationHelper) {
  "use strict";

  var _exports = {};
  var getDisplayMode = UIFormatters.getDisplayMode;
  var getBindingWithUnitOrCurrency = UIFormatters.getBindingWithUnitOrCurrency;
  var getBindingWithTimezone = UIFormatters.getBindingWithTimezone;
  var hasStaticPercentUnit = PropertyHelper.hasStaticPercentUnit;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isProperty = TypeGuards.isProperty;
  var unresolvableExpression = BindingToolkit.unresolvableExpression;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  var compileExpression = BindingToolkit.compileExpression;
  const getDataPointTargetExpression = oDataModelPath => {
    return oDataModelPath !== null && oDataModelPath !== void 0 && oDataModelPath.TargetValue ? getExpressionFromAnnotation(oDataModelPath.TargetValue) : unresolvableExpression;
  };
  const oResourceModel = sap.ui.getCore().getLibraryResourceBundle("sap.fe.macros");
  const buildExpressionForProgressIndicatorDisplayValue = oPropertyDataModelObjectPath => {
    var _oPropertyDataModelOb;
    const fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb === void 0 ? void 0 : _oPropertyDataModelOb.Value) || "";
    const relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);
    let fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);
    if (fieldValueExpression && TargetExpression) {
      var _targetObject$annotat, _targetObject$annotat2, _targetObject$annotat3, _targetObject$annotat4;
      let targetObject = oPropertyDataModelObjectPath.targetObject.Value;
      if (!isProperty(targetObject)) {
        targetObject = oPropertyDataModelObjectPath.targetObject.Value.$target;
      }
      const unit = ((_targetObject$annotat = targetObject.annotations) === null || _targetObject$annotat === void 0 ? void 0 : (_targetObject$annotat2 = _targetObject$annotat.Measures) === null || _targetObject$annotat2 === void 0 ? void 0 : _targetObject$annotat2.Unit) || ((_targetObject$annotat3 = targetObject.annotations) === null || _targetObject$annotat3 === void 0 ? void 0 : (_targetObject$annotat4 = _targetObject$annotat3.Measures) === null || _targetObject$annotat4 === void 0 ? void 0 : _targetObject$annotat4.ISOCurrency);
      if (!unit) {
        return oResourceModel.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_NO_UOM", [compileExpression(fieldValueExpression), compileExpression(TargetExpression)]);
      }
      // If the unit isn't a path, we check for a % sign as it is a special case.
      if (hasStaticPercentUnit(fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.$target)) {
        return `${compileExpression(fieldValueExpression)} %`;
      }
      fieldValueExpression = formatWithTypeInformation(targetObject, fieldValueExpression);
      const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
      return compileExpression(formatResult([fieldValueExpression, TargetExpression, unitBindingExpression], valueFormatters.formatProgressIndicatorText));
    }
    return undefined;
  };
  _exports.buildExpressionForProgressIndicatorDisplayValue = buildExpressionForProgressIndicatorDisplayValue;
  const buildUnitBindingExpression = dataPoint => {
    var _dataPoint$targetObje, _dataPoint$targetObje2, _targetObject$annotat5, _targetObject$annotat6, _targetObject$annotat7, _targetObject$annotat8;
    const relativeLocation = getRelativePaths(dataPoint);
    const targetObject = dataPoint === null || dataPoint === void 0 ? void 0 : (_dataPoint$targetObje = dataPoint.targetObject) === null || _dataPoint$targetObje === void 0 ? void 0 : (_dataPoint$targetObje2 = _dataPoint$targetObje.Value) === null || _dataPoint$targetObje2 === void 0 ? void 0 : _dataPoint$targetObje2.$target;
    if (!isProperty(targetObject)) {
      return "";
    }
    const unit = ((_targetObject$annotat5 = targetObject.annotations) === null || _targetObject$annotat5 === void 0 ? void 0 : (_targetObject$annotat6 = _targetObject$annotat5.Measures) === null || _targetObject$annotat6 === void 0 ? void 0 : _targetObject$annotat6.Unit) || ((_targetObject$annotat7 = targetObject.annotations) === null || _targetObject$annotat7 === void 0 ? void 0 : (_targetObject$annotat8 = _targetObject$annotat7.Measures) === null || _targetObject$annotat8 === void 0 ? void 0 : _targetObject$annotat8.ISOCurrency);
    return unit ? compileExpression(getExpressionFromAnnotation(unit, relativeLocation)) : "";
  };
  _exports.buildUnitBindingExpression = buildUnitBindingExpression;
  const buildRatingIndicatorSubtitleExpression = (oContext, mSampleSize) => {
    if (mSampleSize) {
      return formatRatingIndicatorSubTitle(AnnotationHelper.value(mSampleSize, {
        context: oContext
      }));
    }
  };
  // returns the text for the Rating Indicator Subtitle (e.g. '7 reviews')
  const formatRatingIndicatorSubTitle = iSampleSizeValue => {
    if (iSampleSizeValue) {
      const sSubTitleLabel = iSampleSizeValue > 1 ? oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL_PLURAL") : oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE_LABEL");
      return oResourceModel.getText("T_ANNOTATION_HELPER_RATING_INDICATOR_SUBTITLE", [String(iSampleSizeValue), sSubTitleLabel]);
    }
  };

  /**
   * This function is used to get the header text of rating indicator.
   *
   * @param oContext Context of interface
   * @param oDataPoint Data point object
   * @returns {string | undefined} Expression binding for rating indicator text
   */
  const getHeaderRatingIndicatorText = (oContext, oDataPoint) => {
    let result;
    if (oDataPoint && oDataPoint.SampleSize) {
      result = buildRatingIndicatorSubtitleExpression(oContext, oDataPoint.SampleSize);
    } else if (oDataPoint && oDataPoint.Description) {
      const sModelValue = AnnotationHelper.value(oDataPoint.Description, {
        context: oContext
      });
      result = "${path:" + sModelValue + "}";
    }
    return result;
  };
  getHeaderRatingIndicatorText.requiresIContext = true;
  _exports.getHeaderRatingIndicatorText = getHeaderRatingIndicatorText;
  const buildExpressionForDescription = fieldValue => {
    var _fieldValue$targetObj, _fieldValue$targetObj2, _fieldValue$targetObj3;
    const relativeLocation = getRelativePaths(fieldValue);
    if (fieldValue !== null && fieldValue !== void 0 && (_fieldValue$targetObj = fieldValue.targetObject) !== null && _fieldValue$targetObj !== void 0 && (_fieldValue$targetObj2 = _fieldValue$targetObj.annotations) !== null && _fieldValue$targetObj2 !== void 0 && (_fieldValue$targetObj3 = _fieldValue$targetObj2.Common) !== null && _fieldValue$targetObj3 !== void 0 && _fieldValue$targetObj3.Text) {
      var _fieldValue$targetObj4, _fieldValue$targetObj5;
      const oTextExpression = getExpressionFromAnnotation(fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$targetObj4 = fieldValue.targetObject.annotations) === null || _fieldValue$targetObj4 === void 0 ? void 0 : (_fieldValue$targetObj5 = _fieldValue$targetObj4.Common) === null || _fieldValue$targetObj5 === void 0 ? void 0 : _fieldValue$targetObj5.Text, relativeLocation);
      if (isPathInModelExpression(oTextExpression)) {
        oTextExpression.parameters = {
          $$noPatch: true
        };
      }
      return oTextExpression;
    }
    return undefined;
  };
  const getDecimalFormat = (outExpression, fieldValue, sNumberOfFractionalDigits) => {
    if (!outExpression.constraints) {
      outExpression.constraints = {};
    }
    outExpression.constraints = Object.assign(outExpression.constraints, {
      precision: fieldValue.$target.precision,
      scale: sNumberOfFractionalDigits ? sNumberOfFractionalDigits : fieldValue.$target.scale
    });
    // sNumberOfFractionalDigits is only defined in getValueFormatted when NumberOfFractionalDigits is defined.
    // In that case, we need to instance the preserveDecimals parameter because of a change MDC side
    if (sNumberOfFractionalDigits) {
      if (!outExpression.formatOptions) {
        outExpression.formatOptions = {};
      }
      outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
        preserveDecimals: false
      });
    }
    return outExpression;
  };
  const getValueFormatted = (oPropertyDataModelPath, fieldValue, sPropertyType, sNumberOfFractionalDigits) => {
    var _fieldValue$path;
    let outExpression;
    const relativeLocation = (fieldValue === null || fieldValue === void 0 ? void 0 : (_fieldValue$path = fieldValue.path) === null || _fieldValue$path === void 0 ? void 0 : _fieldValue$path.indexOf("/")) === -1 ? getRelativePaths(oPropertyDataModelPath) : [];
    outExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const oPropertyDefinition = oPropertyDataModelPath.targetObject;
    if (sPropertyType && isPathInModelExpression(outExpression)) {
      var _EDM_TYPE_MAPPING$sPr;
      formatWithTypeInformation(oPropertyDefinition, outExpression);
      outExpression.type = (_EDM_TYPE_MAPPING$sPr = EDM_TYPE_MAPPING[sPropertyType]) === null || _EDM_TYPE_MAPPING$sPr === void 0 ? void 0 : _EDM_TYPE_MAPPING$sPr.type;
      switch (sPropertyType) {
        case "Edm.Decimal":
          // for the listReport, the decimal fields are formatted by returning a string
          // for the facets of the OP, the decimal fields are formatted by returning a promise, so we manage all the cases
          outExpression = getDecimalFormat(outExpression, fieldValue, sNumberOfFractionalDigits);
          break;
        default:
      }
    }
    return outExpression;
  };
  _exports.getValueFormatted = getValueFormatted;
  const buildFieldBindingExpression = (oDataModelPath, dataPointFormatOptions, bHideMeasure) => {
    var _oDataPointValue$$tar, _oPropertyDataModelOb2, _oPropertyDataModelOb3, _oPropertyDataModelOb4;
    const oDataPoint = oDataModelPath.targetObject;
    const oDataPointValue = (oDataPoint === null || oDataPoint === void 0 ? void 0 : oDataPoint.Value) || "";
    const sPropertyType = oDataPointValue === null || oDataPointValue === void 0 ? void 0 : (_oDataPointValue$$tar = oDataPointValue.$target) === null || _oDataPointValue$$tar === void 0 ? void 0 : _oDataPointValue$$tar.type;
    let sNumberOfFractionalDigits;
    if (sPropertyType === "Edm.Decimal" && oDataPoint.ValueFormat) {
      if (oDataPoint.ValueFormat.NumberOfFractionalDigits) {
        sNumberOfFractionalDigits = oDataPoint.ValueFormat.NumberOfFractionalDigits;
      }
    }
    const oPropertyDataModelObjectPath = enhanceDataModelPath(oDataModelPath, oDataPointValue.path);
    const oDescription = oPropertyDataModelObjectPath ? buildExpressionForDescription(oPropertyDataModelObjectPath) : undefined;
    const oFormattedValue = getValueFormatted(oPropertyDataModelObjectPath, oDataPointValue, sPropertyType, sNumberOfFractionalDigits);
    const sDisplayMode = oDescription ? dataPointFormatOptions.displayMode || getDisplayMode(oPropertyDataModelObjectPath) : "Value";
    let oBindingExpression;
    switch (sDisplayMode) {
      case "Description":
        oBindingExpression = oDescription;
        break;
      case "ValueDescription":
        oBindingExpression = formatResult([oFormattedValue, oDescription], valueFormatters.formatWithBrackets);
        break;
      case "DescriptionValue":
        oBindingExpression = formatResult([oDescription, oFormattedValue], valueFormatters.formatWithBrackets);
        break;
      default:
        if ((_oPropertyDataModelOb2 = oPropertyDataModelObjectPath.targetObject) !== null && _oPropertyDataModelOb2 !== void 0 && (_oPropertyDataModelOb3 = _oPropertyDataModelOb2.annotations) !== null && _oPropertyDataModelOb3 !== void 0 && (_oPropertyDataModelOb4 = _oPropertyDataModelOb3.Common) !== null && _oPropertyDataModelOb4 !== void 0 && _oPropertyDataModelOb4.Timezone) {
          oBindingExpression = getBindingWithTimezone(oPropertyDataModelObjectPath, oFormattedValue);
        } else {
          oBindingExpression = _computeBindingWithUnitOrCurrency(oPropertyDataModelObjectPath, oFormattedValue, bHideMeasure || (dataPointFormatOptions === null || dataPointFormatOptions === void 0 ? void 0 : dataPointFormatOptions.measureDisplayMode) === "Hidden");
        }
    }
    return compileExpression(oBindingExpression);
  };
  _exports.buildFieldBindingExpression = buildFieldBindingExpression;
  const _computeBindingWithUnitOrCurrency = (propertyDataModelObjectPath, formattedValue, hideMeasure) => {
    var _propertyDataModelObj, _propertyDataModelObj2, _propertyDataModelObj3, _propertyDataModelObj4, _propertyDataModelObj5, _propertyDataModelObj6;
    if ((_propertyDataModelObj = propertyDataModelObjectPath.targetObject) !== null && _propertyDataModelObj !== void 0 && (_propertyDataModelObj2 = _propertyDataModelObj.annotations) !== null && _propertyDataModelObj2 !== void 0 && (_propertyDataModelObj3 = _propertyDataModelObj2.Measures) !== null && _propertyDataModelObj3 !== void 0 && _propertyDataModelObj3.Unit || (_propertyDataModelObj4 = propertyDataModelObjectPath.targetObject) !== null && _propertyDataModelObj4 !== void 0 && (_propertyDataModelObj5 = _propertyDataModelObj4.annotations) !== null && _propertyDataModelObj5 !== void 0 && (_propertyDataModelObj6 = _propertyDataModelObj5.Measures) !== null && _propertyDataModelObj6 !== void 0 && _propertyDataModelObj6.ISOCurrency) {
      if (hideMeasure && hasStaticPercentUnit(propertyDataModelObjectPath.targetObject)) {
        return formattedValue;
      }
      return getBindingWithUnitOrCurrency(propertyDataModelObjectPath, formattedValue, undefined, hideMeasure ? {
        showMeasure: false
      } : undefined);
    }
    return formattedValue;
  };

  /**
   * Method to calculate the percentage value of Progress Indicator. Basic formula is Value/Target * 100.
   *
   * @param oPropertyDataModelObjectPath
   * @returns The expression binding used to calculate the percentage value, which is shown in the progress indicator based on the formula given above.
   */
  _exports._computeBindingWithUnitOrCurrency = _computeBindingWithUnitOrCurrency;
  const buildExpressionForProgressIndicatorPercentValue = oPropertyDataModelObjectPath => {
    var _oPropertyDataModelOb5, _oPropertyDefinition$, _oPropertyDefinition$2, _oPropertyDefinition$3, _oPropertyDefinition$4;
    const fieldValue = (oPropertyDataModelObjectPath === null || oPropertyDataModelObjectPath === void 0 ? void 0 : (_oPropertyDataModelOb5 = oPropertyDataModelObjectPath.targetObject) === null || _oPropertyDataModelOb5 === void 0 ? void 0 : _oPropertyDataModelOb5.Value) || "";
    const relativeLocation = getRelativePaths(oPropertyDataModelObjectPath);
    const fieldValueExpression = getExpressionFromAnnotation(fieldValue, relativeLocation);
    const TargetExpression = getDataPointTargetExpression(oPropertyDataModelObjectPath.targetObject);
    const oPropertyDefinition = fieldValue.$target;
    const unit = ((_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Measures) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.Unit) || ((_oPropertyDefinition$3 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$3 === void 0 ? void 0 : (_oPropertyDefinition$4 = _oPropertyDefinition$3.Measures) === null || _oPropertyDefinition$4 === void 0 ? void 0 : _oPropertyDefinition$4.ISOCurrency);
    if (unit) {
      const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
      return compileExpression(formatResult([fieldValueExpression, TargetExpression, unitBindingExpression], valueFormatters.computePercentage));
    }
    return compileExpression(formatResult([fieldValueExpression, TargetExpression, ""], valueFormatters.computePercentage));
  };
  _exports.buildExpressionForProgressIndicatorPercentValue = buildExpressionForProgressIndicatorPercentValue;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXREYXRhUG9pbnRUYXJnZXRFeHByZXNzaW9uIiwib0RhdGFNb2RlbFBhdGgiLCJUYXJnZXRWYWx1ZSIsImdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbiIsInVucmVzb2x2YWJsZUV4cHJlc3Npb24iLCJvUmVzb3VyY2VNb2RlbCIsInNhcCIsInVpIiwiZ2V0Q29yZSIsImdldExpYnJhcnlSZXNvdXJjZUJ1bmRsZSIsImJ1aWxkRXhwcmVzc2lvbkZvclByb2dyZXNzSW5kaWNhdG9yRGlzcGxheVZhbHVlIiwib1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aCIsImZpZWxkVmFsdWUiLCJ0YXJnZXRPYmplY3QiLCJWYWx1ZSIsInJlbGF0aXZlTG9jYXRpb24iLCJnZXRSZWxhdGl2ZVBhdGhzIiwiZmllbGRWYWx1ZUV4cHJlc3Npb24iLCJUYXJnZXRFeHByZXNzaW9uIiwiaXNQcm9wZXJ0eSIsIiR0YXJnZXQiLCJ1bml0IiwiYW5ub3RhdGlvbnMiLCJNZWFzdXJlcyIsIlVuaXQiLCJJU09DdXJyZW5jeSIsImdldFRleHQiLCJjb21waWxlRXhwcmVzc2lvbiIsImhhc1N0YXRpY1BlcmNlbnRVbml0IiwiZm9ybWF0V2l0aFR5cGVJbmZvcm1hdGlvbiIsInVuaXRCaW5kaW5nRXhwcmVzc2lvbiIsImZvcm1hdFJlc3VsdCIsInZhbHVlRm9ybWF0dGVycyIsImZvcm1hdFByb2dyZXNzSW5kaWNhdG9yVGV4dCIsInVuZGVmaW5lZCIsImJ1aWxkVW5pdEJpbmRpbmdFeHByZXNzaW9uIiwiZGF0YVBvaW50IiwiYnVpbGRSYXRpbmdJbmRpY2F0b3JTdWJ0aXRsZUV4cHJlc3Npb24iLCJvQ29udGV4dCIsIm1TYW1wbGVTaXplIiwiZm9ybWF0UmF0aW5nSW5kaWNhdG9yU3ViVGl0bGUiLCJBbm5vdGF0aW9uSGVscGVyIiwidmFsdWUiLCJjb250ZXh0IiwiaVNhbXBsZVNpemVWYWx1ZSIsInNTdWJUaXRsZUxhYmVsIiwiU3RyaW5nIiwiZ2V0SGVhZGVyUmF0aW5nSW5kaWNhdG9yVGV4dCIsIm9EYXRhUG9pbnQiLCJyZXN1bHQiLCJTYW1wbGVTaXplIiwiRGVzY3JpcHRpb24iLCJzTW9kZWxWYWx1ZSIsInJlcXVpcmVzSUNvbnRleHQiLCJidWlsZEV4cHJlc3Npb25Gb3JEZXNjcmlwdGlvbiIsIkNvbW1vbiIsIlRleHQiLCJvVGV4dEV4cHJlc3Npb24iLCJpc1BhdGhJbk1vZGVsRXhwcmVzc2lvbiIsInBhcmFtZXRlcnMiLCIkJG5vUGF0Y2giLCJnZXREZWNpbWFsRm9ybWF0Iiwib3V0RXhwcmVzc2lvbiIsInNOdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHMiLCJjb25zdHJhaW50cyIsIk9iamVjdCIsImFzc2lnbiIsInByZWNpc2lvbiIsInNjYWxlIiwiZm9ybWF0T3B0aW9ucyIsInByZXNlcnZlRGVjaW1hbHMiLCJnZXRWYWx1ZUZvcm1hdHRlZCIsIm9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgiLCJzUHJvcGVydHlUeXBlIiwicGF0aCIsImluZGV4T2YiLCJvUHJvcGVydHlEZWZpbml0aW9uIiwidHlwZSIsIkVETV9UWVBFX01BUFBJTkciLCJidWlsZEZpZWxkQmluZGluZ0V4cHJlc3Npb24iLCJkYXRhUG9pbnRGb3JtYXRPcHRpb25zIiwiYkhpZGVNZWFzdXJlIiwib0RhdGFQb2ludFZhbHVlIiwiVmFsdWVGb3JtYXQiLCJOdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHMiLCJlbmhhbmNlRGF0YU1vZGVsUGF0aCIsIm9EZXNjcmlwdGlvbiIsIm9Gb3JtYXR0ZWRWYWx1ZSIsInNEaXNwbGF5TW9kZSIsImRpc3BsYXlNb2RlIiwiZ2V0RGlzcGxheU1vZGUiLCJvQmluZGluZ0V4cHJlc3Npb24iLCJmb3JtYXRXaXRoQnJhY2tldHMiLCJUaW1lem9uZSIsImdldEJpbmRpbmdXaXRoVGltZXpvbmUiLCJfY29tcHV0ZUJpbmRpbmdXaXRoVW5pdE9yQ3VycmVuY3kiLCJtZWFzdXJlRGlzcGxheU1vZGUiLCJwcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgiLCJmb3JtYXR0ZWRWYWx1ZSIsImhpZGVNZWFzdXJlIiwiZ2V0QmluZGluZ1dpdGhVbml0T3JDdXJyZW5jeSIsInNob3dNZWFzdXJlIiwiYnVpbGRFeHByZXNzaW9uRm9yUHJvZ3Jlc3NJbmRpY2F0b3JQZXJjZW50VmFsdWUiLCJjb21wdXRlUGVyY2VudGFnZSJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiRGF0YVBvaW50VGVtcGxhdGluZy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFByb3BlcnR5IH0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzXCI7XG5pbXBvcnQgdmFsdWVGb3JtYXR0ZXJzIGZyb20gXCJzYXAvZmUvY29yZS9mb3JtYXR0ZXJzL1ZhbHVlRm9ybWF0dGVyXCI7XG5pbXBvcnQgdHlwZSB7IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbiwgQ29tcGlsZWRCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb24sIFBhdGhJbk1vZGVsRXhwcmVzc2lvbiB9IGZyb20gXCJzYXAvZmUvY29yZS9oZWxwZXJzL0JpbmRpbmdUb29sa2l0XCI7XG5pbXBvcnQge1xuXHRjb21waWxlRXhwcmVzc2lvbixcblx0RURNX1RZUEVfTUFQUElORyxcblx0Zm9ybWF0UmVzdWx0LFxuXHRmb3JtYXRXaXRoVHlwZUluZm9ybWF0aW9uLFxuXHRnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24sXG5cdGlzUGF0aEluTW9kZWxFeHByZXNzaW9uLFxuXHR1bnJlc29sdmFibGVFeHByZXNzaW9uXG59IGZyb20gXCJzYXAvZmUvY29yZS9oZWxwZXJzL0JpbmRpbmdUb29sa2l0XCI7XG5pbXBvcnQgeyBpc1Byb3BlcnR5IH0gZnJvbSBcInNhcC9mZS9jb3JlL2hlbHBlcnMvVHlwZUd1YXJkc1wiO1xuaW1wb3J0IHR5cGUgeyBEYXRhTW9kZWxPYmplY3RQYXRoIH0gZnJvbSBcInNhcC9mZS9jb3JlL3RlbXBsYXRpbmcvRGF0YU1vZGVsUGF0aEhlbHBlclwiO1xuaW1wb3J0IHsgZW5oYW5jZURhdGFNb2RlbFBhdGgsIGdldFJlbGF0aXZlUGF0aHMgfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9EYXRhTW9kZWxQYXRoSGVscGVyXCI7XG5pbXBvcnQgeyBoYXNTdGF0aWNQZXJjZW50VW5pdCB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL1Byb3BlcnR5SGVscGVyXCI7XG5pbXBvcnQgeyBnZXRCaW5kaW5nV2l0aFRpbWV6b25lLCBnZXRCaW5kaW5nV2l0aFVuaXRPckN1cnJlbmN5LCBnZXREaXNwbGF5TW9kZSB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL1VJRm9ybWF0dGVyc1wiO1xuaW1wb3J0IEFubm90YXRpb25IZWxwZXIgZnJvbSBcInNhcC91aS9tb2RlbC9vZGF0YS92NC9Bbm5vdGF0aW9uSGVscGVyXCI7XG5cbmV4cG9ydCB0eXBlIERhdGFQb2ludEZvcm1hdE9wdGlvbnMgPSBQYXJ0aWFsPHtcblx0bWVhc3VyZURpc3BsYXlNb2RlOiBzdHJpbmc7XG5cdGRpc3BsYXlNb2RlOiBzdHJpbmc7XG59PjtcblxuY29uc3QgZ2V0RGF0YVBvaW50VGFyZ2V0RXhwcmVzc2lvbiA9IChvRGF0YU1vZGVsUGF0aDogYW55KTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4gPT4ge1xuXHRyZXR1cm4gb0RhdGFNb2RlbFBhdGg/LlRhcmdldFZhbHVlID8gZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKG9EYXRhTW9kZWxQYXRoLlRhcmdldFZhbHVlKSA6IHVucmVzb2x2YWJsZUV4cHJlc3Npb247XG59O1xuXG5jb25zdCBvUmVzb3VyY2VNb2RlbCA9IHNhcC51aS5nZXRDb3JlKCkuZ2V0TGlicmFyeVJlc291cmNlQnVuZGxlKFwic2FwLmZlLm1hY3Jvc1wiKTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkRXhwcmVzc2lvbkZvclByb2dyZXNzSW5kaWNhdG9yRGlzcGxheVZhbHVlID0gKFxuXHRvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoOiBEYXRhTW9kZWxPYmplY3RQYXRoXG4pOiBDb21waWxlZEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbiA9PiB7XG5cdGNvbnN0IGZpZWxkVmFsdWUgPSBvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoPy50YXJnZXRPYmplY3Q/LlZhbHVlIHx8IFwiXCI7XG5cdGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBnZXRSZWxhdGl2ZVBhdGhzKG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgpO1xuXHRsZXQgZmllbGRWYWx1ZUV4cHJlc3Npb24gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oZmllbGRWYWx1ZSwgcmVsYXRpdmVMb2NhdGlvbikgYXMgYW55O1xuXHRjb25zdCBUYXJnZXRFeHByZXNzaW9uID0gZ2V0RGF0YVBvaW50VGFyZ2V0RXhwcmVzc2lvbihvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoLnRhcmdldE9iamVjdCkgYXMgYW55O1xuXG5cdGlmIChmaWVsZFZhbHVlRXhwcmVzc2lvbiAmJiBUYXJnZXRFeHByZXNzaW9uKSB7XG5cdFx0bGV0IHRhcmdldE9iamVjdCA9IG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0LlZhbHVlO1xuXHRcdGlmICghaXNQcm9wZXJ0eSh0YXJnZXRPYmplY3QpKSB7XG5cdFx0XHR0YXJnZXRPYmplY3QgPSBvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoLnRhcmdldE9iamVjdC5WYWx1ZS4kdGFyZ2V0O1xuXHRcdH1cblx0XHRjb25zdCB1bml0ID0gdGFyZ2V0T2JqZWN0LmFubm90YXRpb25zPy5NZWFzdXJlcz8uVW5pdCB8fCB0YXJnZXRPYmplY3QuYW5ub3RhdGlvbnM/Lk1lYXN1cmVzPy5JU09DdXJyZW5jeTtcblxuXHRcdGlmICghdW5pdCkge1xuXHRcdFx0cmV0dXJuIG9SZXNvdXJjZU1vZGVsLmdldFRleHQoXCJUX0NPTU1PTl9QUk9HUkVTU19JTkRJQ0FUT1JfRElTUExBWV9WQUxVRV9OT19VT01cIiwgW1xuXHRcdFx0XHRjb21waWxlRXhwcmVzc2lvbihmaWVsZFZhbHVlRXhwcmVzc2lvbikgYXMgc3RyaW5nLFxuXHRcdFx0XHRjb21waWxlRXhwcmVzc2lvbihUYXJnZXRFeHByZXNzaW9uKSBhcyBzdHJpbmdcblx0XHRcdF0pO1xuXHRcdH1cblx0XHQvLyBJZiB0aGUgdW5pdCBpc24ndCBhIHBhdGgsIHdlIGNoZWNrIGZvciBhICUgc2lnbiBhcyBpdCBpcyBhIHNwZWNpYWwgY2FzZS5cblx0XHRpZiAoaGFzU3RhdGljUGVyY2VudFVuaXQoZmllbGRWYWx1ZT8uJHRhcmdldCkpIHtcblx0XHRcdHJldHVybiBgJHtjb21waWxlRXhwcmVzc2lvbihmaWVsZFZhbHVlRXhwcmVzc2lvbikgYXMgc3RyaW5nfSAlYDtcblx0XHR9XG5cblx0XHRmaWVsZFZhbHVlRXhwcmVzc2lvbiA9IGZvcm1hdFdpdGhUeXBlSW5mb3JtYXRpb24odGFyZ2V0T2JqZWN0LCBmaWVsZFZhbHVlRXhwcmVzc2lvbik7XG5cdFx0Y29uc3QgdW5pdEJpbmRpbmdFeHByZXNzaW9uID0gdW5pdC4kdGFyZ2V0XG5cdFx0XHQ/IGZvcm1hdFdpdGhUeXBlSW5mb3JtYXRpb24odW5pdC4kdGFyZ2V0LCBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24odW5pdCwgcmVsYXRpdmVMb2NhdGlvbikpXG5cdFx0XHQ6IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbih1bml0LCByZWxhdGl2ZUxvY2F0aW9uKTtcblxuXHRcdHJldHVybiBjb21waWxlRXhwcmVzc2lvbihcblx0XHRcdGZvcm1hdFJlc3VsdChbZmllbGRWYWx1ZUV4cHJlc3Npb24sIFRhcmdldEV4cHJlc3Npb24sIHVuaXRCaW5kaW5nRXhwcmVzc2lvbl0sIHZhbHVlRm9ybWF0dGVycy5mb3JtYXRQcm9ncmVzc0luZGljYXRvclRleHQpXG5cdFx0KTtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkVW5pdEJpbmRpbmdFeHByZXNzaW9uID0gKGRhdGFQb2ludDogRGF0YU1vZGVsT2JqZWN0UGF0aCk6IENvbXBpbGVkQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uID0+IHtcblx0Y29uc3QgcmVsYXRpdmVMb2NhdGlvbiA9IGdldFJlbGF0aXZlUGF0aHMoZGF0YVBvaW50KTtcblxuXHRjb25zdCB0YXJnZXRPYmplY3QgPSBkYXRhUG9pbnQ/LnRhcmdldE9iamVjdD8uVmFsdWU/LiR0YXJnZXQ7XG5cdGlmICghaXNQcm9wZXJ0eSh0YXJnZXRPYmplY3QpKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblx0Y29uc3QgdW5pdCA9IHRhcmdldE9iamVjdC5hbm5vdGF0aW9ucz8uTWVhc3VyZXM/LlVuaXQgfHwgdGFyZ2V0T2JqZWN0LmFubm90YXRpb25zPy5NZWFzdXJlcz8uSVNPQ3VycmVuY3k7XG5cdHJldHVybiB1bml0ID8gY29tcGlsZUV4cHJlc3Npb24oZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKHVuaXQsIHJlbGF0aXZlTG9jYXRpb24pKSA6IFwiXCI7XG59O1xuXG5jb25zdCBidWlsZFJhdGluZ0luZGljYXRvclN1YnRpdGxlRXhwcmVzc2lvbiA9IChvQ29udGV4dDogYW55LCBtU2FtcGxlU2l6ZTogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcblx0aWYgKG1TYW1wbGVTaXplKSB7XG5cdFx0cmV0dXJuIGZvcm1hdFJhdGluZ0luZGljYXRvclN1YlRpdGxlKEFubm90YXRpb25IZWxwZXIudmFsdWUobVNhbXBsZVNpemUsIHsgY29udGV4dDogb0NvbnRleHQgfSkgYXMgYW55KTtcblx0fVxufTtcbi8vIHJldHVybnMgdGhlIHRleHQgZm9yIHRoZSBSYXRpbmcgSW5kaWNhdG9yIFN1YnRpdGxlIChlLmcuICc3IHJldmlld3MnKVxuY29uc3QgZm9ybWF0UmF0aW5nSW5kaWNhdG9yU3ViVGl0bGUgPSAoaVNhbXBsZVNpemVWYWx1ZTogbnVtYmVyKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcblx0aWYgKGlTYW1wbGVTaXplVmFsdWUpIHtcblx0XHRjb25zdCBzU3ViVGl0bGVMYWJlbCA9XG5cdFx0XHRpU2FtcGxlU2l6ZVZhbHVlID4gMVxuXHRcdFx0XHQ/IG9SZXNvdXJjZU1vZGVsLmdldFRleHQoXCJUX0FOTk9UQVRJT05fSEVMUEVSX1JBVElOR19JTkRJQ0FUT1JfU1VCVElUTEVfTEFCRUxfUExVUkFMXCIpXG5cdFx0XHRcdDogb1Jlc291cmNlTW9kZWwuZ2V0VGV4dChcIlRfQU5OT1RBVElPTl9IRUxQRVJfUkFUSU5HX0lORElDQVRPUl9TVUJUSVRMRV9MQUJFTFwiKTtcblx0XHRyZXR1cm4gb1Jlc291cmNlTW9kZWwuZ2V0VGV4dChcIlRfQU5OT1RBVElPTl9IRUxQRVJfUkFUSU5HX0lORElDQVRPUl9TVUJUSVRMRVwiLCBbU3RyaW5nKGlTYW1wbGVTaXplVmFsdWUpLCBzU3ViVGl0bGVMYWJlbF0pO1xuXHR9XG59O1xuXG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byBnZXQgdGhlIGhlYWRlciB0ZXh0IG9mIHJhdGluZyBpbmRpY2F0b3IuXG4gKlxuICogQHBhcmFtIG9Db250ZXh0IENvbnRleHQgb2YgaW50ZXJmYWNlXG4gKiBAcGFyYW0gb0RhdGFQb2ludCBEYXRhIHBvaW50IG9iamVjdFxuICogQHJldHVybnMge3N0cmluZyB8IHVuZGVmaW5lZH0gRXhwcmVzc2lvbiBiaW5kaW5nIGZvciByYXRpbmcgaW5kaWNhdG9yIHRleHRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEhlYWRlclJhdGluZ0luZGljYXRvclRleHQgPSAob0NvbnRleHQ6IGFueSwgb0RhdGFQb2ludDogYW55KTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcblx0bGV0IHJlc3VsdDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXHRpZiAob0RhdGFQb2ludCAmJiBvRGF0YVBvaW50LlNhbXBsZVNpemUpIHtcblx0XHRyZXN1bHQgPSBidWlsZFJhdGluZ0luZGljYXRvclN1YnRpdGxlRXhwcmVzc2lvbihvQ29udGV4dCwgb0RhdGFQb2ludC5TYW1wbGVTaXplKTtcblx0fSBlbHNlIGlmIChvRGF0YVBvaW50ICYmIG9EYXRhUG9pbnQuRGVzY3JpcHRpb24pIHtcblx0XHRjb25zdCBzTW9kZWxWYWx1ZSA9IEFubm90YXRpb25IZWxwZXIudmFsdWUob0RhdGFQb2ludC5EZXNjcmlwdGlvbiwgeyBjb250ZXh0OiBvQ29udGV4dCB9KTtcblx0XHRyZXN1bHQgPSBcIiR7cGF0aDpcIiArIHNNb2RlbFZhbHVlICsgXCJ9XCI7XG5cdH1cblx0cmV0dXJuIHJlc3VsdDtcbn07XG5nZXRIZWFkZXJSYXRpbmdJbmRpY2F0b3JUZXh0LnJlcXVpcmVzSUNvbnRleHQgPSB0cnVlO1xuXG5jb25zdCBidWlsZEV4cHJlc3Npb25Gb3JEZXNjcmlwdGlvbiA9IChmaWVsZFZhbHVlOiBEYXRhTW9kZWxPYmplY3RQYXRoKTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGFueT4gfCB1bmRlZmluZWQgPT4ge1xuXHRjb25zdCByZWxhdGl2ZUxvY2F0aW9uID0gZ2V0UmVsYXRpdmVQYXRocyhmaWVsZFZhbHVlKTtcblx0aWYgKGZpZWxkVmFsdWU/LnRhcmdldE9iamVjdD8uYW5ub3RhdGlvbnM/LkNvbW1vbj8uVGV4dCkge1xuXHRcdGNvbnN0IG9UZXh0RXhwcmVzc2lvbiA9IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihmaWVsZFZhbHVlPy50YXJnZXRPYmplY3QuYW5ub3RhdGlvbnM/LkNvbW1vbj8uVGV4dCwgcmVsYXRpdmVMb2NhdGlvbik7XG5cdFx0aWYgKGlzUGF0aEluTW9kZWxFeHByZXNzaW9uKG9UZXh0RXhwcmVzc2lvbikpIHtcblx0XHRcdG9UZXh0RXhwcmVzc2lvbi5wYXJhbWV0ZXJzID0geyAkJG5vUGF0Y2g6IHRydWUgfTtcblx0XHR9XG5cdFx0cmV0dXJuIG9UZXh0RXhwcmVzc2lvbjtcblx0fVxuXHRyZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29uc3QgZ2V0RGVjaW1hbEZvcm1hdCA9IChcblx0b3V0RXhwcmVzc2lvbjogUGF0aEluTW9kZWxFeHByZXNzaW9uPGFueT4sXG5cdGZpZWxkVmFsdWU6IGFueSxcblx0c051bWJlck9mRnJhY3Rpb25hbERpZ2l0czogc3RyaW5nXG4pOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248YW55PiA9PiB7XG5cdGlmICghb3V0RXhwcmVzc2lvbi5jb25zdHJhaW50cykge1xuXHRcdG91dEV4cHJlc3Npb24uY29uc3RyYWludHMgPSB7fTtcblx0fVxuXHRvdXRFeHByZXNzaW9uLmNvbnN0cmFpbnRzID0gT2JqZWN0LmFzc2lnbihvdXRFeHByZXNzaW9uLmNvbnN0cmFpbnRzLCB7XG5cdFx0cHJlY2lzaW9uOiBmaWVsZFZhbHVlLiR0YXJnZXQucHJlY2lzaW9uLFxuXHRcdHNjYWxlOiBzTnVtYmVyT2ZGcmFjdGlvbmFsRGlnaXRzID8gc051bWJlck9mRnJhY3Rpb25hbERpZ2l0cyA6IGZpZWxkVmFsdWUuJHRhcmdldC5zY2FsZVxuXHR9KTtcblx0Ly8gc051bWJlck9mRnJhY3Rpb25hbERpZ2l0cyBpcyBvbmx5IGRlZmluZWQgaW4gZ2V0VmFsdWVGb3JtYXR0ZWQgd2hlbiBOdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHMgaXMgZGVmaW5lZC5cblx0Ly8gSW4gdGhhdCBjYXNlLCB3ZSBuZWVkIHRvIGluc3RhbmNlIHRoZSBwcmVzZXJ2ZURlY2ltYWxzIHBhcmFtZXRlciBiZWNhdXNlIG9mIGEgY2hhbmdlIE1EQyBzaWRlXG5cdGlmIChzTnVtYmVyT2ZGcmFjdGlvbmFsRGlnaXRzKSB7XG5cdFx0aWYgKCFvdXRFeHByZXNzaW9uLmZvcm1hdE9wdGlvbnMpIHtcblx0XHRcdG91dEV4cHJlc3Npb24uZm9ybWF0T3B0aW9ucyA9IHt9O1xuXHRcdH1cblx0XHRvdXRFeHByZXNzaW9uLmZvcm1hdE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG91dEV4cHJlc3Npb24uZm9ybWF0T3B0aW9ucywge1xuXHRcdFx0cHJlc2VydmVEZWNpbWFsczogZmFsc2Vcblx0XHR9KTtcblx0fVxuXHRyZXR1cm4gb3V0RXhwcmVzc2lvbjtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRWYWx1ZUZvcm1hdHRlZCA9IChcblx0b1Byb3BlcnR5RGF0YU1vZGVsUGF0aDogRGF0YU1vZGVsT2JqZWN0UGF0aCxcblx0ZmllbGRWYWx1ZTogYW55LFxuXHRzUHJvcGVydHlUeXBlOiBzdHJpbmcsXG5cdHNOdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHM6IHN0cmluZ1xuKTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4gPT4ge1xuXHRsZXQgb3V0RXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGFueT47XG5cdGNvbnN0IHJlbGF0aXZlTG9jYXRpb24gPSBmaWVsZFZhbHVlPy5wYXRoPy5pbmRleE9mKFwiL1wiKSA9PT0gLTEgPyBnZXRSZWxhdGl2ZVBhdGhzKG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGgpIDogW107XG5cdG91dEV4cHJlc3Npb24gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oZmllbGRWYWx1ZSwgcmVsYXRpdmVMb2NhdGlvbik7XG5cdGNvbnN0IG9Qcm9wZXJ0eURlZmluaXRpb24gPSBvUHJvcGVydHlEYXRhTW9kZWxQYXRoLnRhcmdldE9iamVjdCBhcyBQcm9wZXJ0eTtcblx0aWYgKHNQcm9wZXJ0eVR5cGUgJiYgaXNQYXRoSW5Nb2RlbEV4cHJlc3Npb24ob3V0RXhwcmVzc2lvbikpIHtcblx0XHRmb3JtYXRXaXRoVHlwZUluZm9ybWF0aW9uKG9Qcm9wZXJ0eURlZmluaXRpb24sIG91dEV4cHJlc3Npb24pO1xuXHRcdG91dEV4cHJlc3Npb24udHlwZSA9IEVETV9UWVBFX01BUFBJTkdbc1Byb3BlcnR5VHlwZV0/LnR5cGU7XG5cdFx0c3dpdGNoIChzUHJvcGVydHlUeXBlKSB7XG5cdFx0XHRjYXNlIFwiRWRtLkRlY2ltYWxcIjpcblx0XHRcdFx0Ly8gZm9yIHRoZSBsaXN0UmVwb3J0LCB0aGUgZGVjaW1hbCBmaWVsZHMgYXJlIGZvcm1hdHRlZCBieSByZXR1cm5pbmcgYSBzdHJpbmdcblx0XHRcdFx0Ly8gZm9yIHRoZSBmYWNldHMgb2YgdGhlIE9QLCB0aGUgZGVjaW1hbCBmaWVsZHMgYXJlIGZvcm1hdHRlZCBieSByZXR1cm5pbmcgYSBwcm9taXNlLCBzbyB3ZSBtYW5hZ2UgYWxsIHRoZSBjYXNlc1xuXHRcdFx0XHRvdXRFeHByZXNzaW9uID0gZ2V0RGVjaW1hbEZvcm1hdChvdXRFeHByZXNzaW9uLCBmaWVsZFZhbHVlLCBzTnVtYmVyT2ZGcmFjdGlvbmFsRGlnaXRzKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRkZWZhdWx0OlxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBvdXRFeHByZXNzaW9uO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkRmllbGRCaW5kaW5nRXhwcmVzc2lvbiA9IChcblx0b0RhdGFNb2RlbFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGgsXG5cdGRhdGFQb2ludEZvcm1hdE9wdGlvbnM6IERhdGFQb2ludEZvcm1hdE9wdGlvbnMsXG5cdGJIaWRlTWVhc3VyZTogYm9vbGVhblxuKTogQ29tcGlsZWRCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb24gPT4ge1xuXHRjb25zdCBvRGF0YVBvaW50ID0gb0RhdGFNb2RlbFBhdGgudGFyZ2V0T2JqZWN0O1xuXHRjb25zdCBvRGF0YVBvaW50VmFsdWUgPSBvRGF0YVBvaW50Py5WYWx1ZSB8fCBcIlwiO1xuXHRjb25zdCBzUHJvcGVydHlUeXBlID0gb0RhdGFQb2ludFZhbHVlPy4kdGFyZ2V0Py50eXBlO1xuXHRsZXQgc051bWJlck9mRnJhY3Rpb25hbERpZ2l0cztcblxuXHRpZiAoc1Byb3BlcnR5VHlwZSA9PT0gXCJFZG0uRGVjaW1hbFwiICYmIG9EYXRhUG9pbnQuVmFsdWVGb3JtYXQpIHtcblx0XHRpZiAob0RhdGFQb2ludC5WYWx1ZUZvcm1hdC5OdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHMpIHtcblx0XHRcdHNOdW1iZXJPZkZyYWN0aW9uYWxEaWdpdHMgPSBvRGF0YVBvaW50LlZhbHVlRm9ybWF0Lk51bWJlck9mRnJhY3Rpb25hbERpZ2l0cztcblx0XHR9XG5cdH1cblx0Y29uc3Qgb1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aCA9IGVuaGFuY2VEYXRhTW9kZWxQYXRoKG9EYXRhTW9kZWxQYXRoLCBvRGF0YVBvaW50VmFsdWUucGF0aCk7XG5cdGNvbnN0IG9EZXNjcmlwdGlvbiA9IG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGggPyBidWlsZEV4cHJlc3Npb25Gb3JEZXNjcmlwdGlvbihvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoKSA6IHVuZGVmaW5lZDtcblx0Y29uc3Qgb0Zvcm1hdHRlZFZhbHVlID0gZ2V0VmFsdWVGb3JtYXR0ZWQob1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aCwgb0RhdGFQb2ludFZhbHVlLCBzUHJvcGVydHlUeXBlLCBzTnVtYmVyT2ZGcmFjdGlvbmFsRGlnaXRzKTtcblx0Y29uc3Qgc0Rpc3BsYXlNb2RlID0gb0Rlc2NyaXB0aW9uID8gZGF0YVBvaW50Rm9ybWF0T3B0aW9ucy5kaXNwbGF5TW9kZSB8fCBnZXREaXNwbGF5TW9kZShvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoKSA6IFwiVmFsdWVcIjtcblx0bGV0IG9CaW5kaW5nRXhwcmVzc2lvbjogYW55O1xuXHRzd2l0Y2ggKHNEaXNwbGF5TW9kZSkge1xuXHRcdGNhc2UgXCJEZXNjcmlwdGlvblwiOlxuXHRcdFx0b0JpbmRpbmdFeHByZXNzaW9uID0gb0Rlc2NyaXB0aW9uO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSBcIlZhbHVlRGVzY3JpcHRpb25cIjpcblx0XHRcdG9CaW5kaW5nRXhwcmVzc2lvbiA9IGZvcm1hdFJlc3VsdChbb0Zvcm1hdHRlZFZhbHVlLCBvRGVzY3JpcHRpb25dLCB2YWx1ZUZvcm1hdHRlcnMuZm9ybWF0V2l0aEJyYWNrZXRzKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgXCJEZXNjcmlwdGlvblZhbHVlXCI6XG5cdFx0XHRvQmluZGluZ0V4cHJlc3Npb24gPSBmb3JtYXRSZXN1bHQoW29EZXNjcmlwdGlvbiwgb0Zvcm1hdHRlZFZhbHVlXSwgdmFsdWVGb3JtYXR0ZXJzLmZvcm1hdFdpdGhCcmFja2V0cyk7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0aWYgKG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0Py5hbm5vdGF0aW9ucz8uQ29tbW9uPy5UaW1lem9uZSkge1xuXHRcdFx0XHRvQmluZGluZ0V4cHJlc3Npb24gPSBnZXRCaW5kaW5nV2l0aFRpbWV6b25lKG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgsIG9Gb3JtYXR0ZWRWYWx1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvQmluZGluZ0V4cHJlc3Npb24gPSBfY29tcHV0ZUJpbmRpbmdXaXRoVW5pdE9yQ3VycmVuY3koXG5cdFx0XHRcdFx0b1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aCxcblx0XHRcdFx0XHRvRm9ybWF0dGVkVmFsdWUsXG5cdFx0XHRcdFx0YkhpZGVNZWFzdXJlIHx8IGRhdGFQb2ludEZvcm1hdE9wdGlvbnM/Lm1lYXN1cmVEaXNwbGF5TW9kZSA9PT0gXCJIaWRkZW5cIlxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHR9XG5cdHJldHVybiBjb21waWxlRXhwcmVzc2lvbihvQmluZGluZ0V4cHJlc3Npb24pO1xufTtcblxuZXhwb3J0IGNvbnN0IF9jb21wdXRlQmluZGluZ1dpdGhVbml0T3JDdXJyZW5jeSA9IChcblx0cHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoOiBEYXRhTW9kZWxPYmplY3RQYXRoLFxuXHRmb3JtYXR0ZWRWYWx1ZTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz4sXG5cdGhpZGVNZWFzdXJlOiBib29sZWFuXG4pOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPiA9PiB7XG5cdGlmIChcblx0XHRwcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0Py5hbm5vdGF0aW9ucz8uTWVhc3VyZXM/LlVuaXQgfHxcblx0XHRwcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0Py5hbm5vdGF0aW9ucz8uTWVhc3VyZXM/LklTT0N1cnJlbmN5XG5cdCkge1xuXHRcdGlmIChoaWRlTWVhc3VyZSAmJiBoYXNTdGF0aWNQZXJjZW50VW5pdChwcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0KSkge1xuXHRcdFx0cmV0dXJuIGZvcm1hdHRlZFZhbHVlO1xuXHRcdH1cblx0XHRyZXR1cm4gZ2V0QmluZGluZ1dpdGhVbml0T3JDdXJyZW5jeShcblx0XHRcdHByb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aCxcblx0XHRcdGZvcm1hdHRlZFZhbHVlLFxuXHRcdFx0dW5kZWZpbmVkLFxuXHRcdFx0aGlkZU1lYXN1cmUgPyB7IHNob3dNZWFzdXJlOiBmYWxzZSB9IDogdW5kZWZpbmVkXG5cdFx0KTtcblx0fVxuXHRyZXR1cm4gZm9ybWF0dGVkVmFsdWU7XG59O1xuXG4vKipcbiAqIE1ldGhvZCB0byBjYWxjdWxhdGUgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgb2YgUHJvZ3Jlc3MgSW5kaWNhdG9yLiBCYXNpYyBmb3JtdWxhIGlzIFZhbHVlL1RhcmdldCAqIDEwMC5cbiAqXG4gKiBAcGFyYW0gb1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aFxuICogQHJldHVybnMgVGhlIGV4cHJlc3Npb24gYmluZGluZyB1c2VkIHRvIGNhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSB2YWx1ZSwgd2hpY2ggaXMgc2hvd24gaW4gdGhlIHByb2dyZXNzIGluZGljYXRvciBiYXNlZCBvbiB0aGUgZm9ybXVsYSBnaXZlbiBhYm92ZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGJ1aWxkRXhwcmVzc2lvbkZvclByb2dyZXNzSW5kaWNhdG9yUGVyY2VudFZhbHVlID0gKG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGgpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuXHRjb25zdCBmaWVsZFZhbHVlID0gb1Byb3BlcnR5RGF0YU1vZGVsT2JqZWN0UGF0aD8udGFyZ2V0T2JqZWN0Py5WYWx1ZSB8fCBcIlwiO1xuXHRjb25zdCByZWxhdGl2ZUxvY2F0aW9uID0gZ2V0UmVsYXRpdmVQYXRocyhvUHJvcGVydHlEYXRhTW9kZWxPYmplY3RQYXRoKTtcblx0Y29uc3QgZmllbGRWYWx1ZUV4cHJlc3Npb24gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oZmllbGRWYWx1ZSwgcmVsYXRpdmVMb2NhdGlvbik7XG5cdGNvbnN0IFRhcmdldEV4cHJlc3Npb24gPSBnZXREYXRhUG9pbnRUYXJnZXRFeHByZXNzaW9uKG9Qcm9wZXJ0eURhdGFNb2RlbE9iamVjdFBhdGgudGFyZ2V0T2JqZWN0KTtcblxuXHRjb25zdCBvUHJvcGVydHlEZWZpbml0aW9uID0gZmllbGRWYWx1ZS4kdGFyZ2V0IGFzIFByb3BlcnR5O1xuXHRjb25zdCB1bml0ID0gb1Byb3BlcnR5RGVmaW5pdGlvbi5hbm5vdGF0aW9ucz8uTWVhc3VyZXM/LlVuaXQgfHwgb1Byb3BlcnR5RGVmaW5pdGlvbi5hbm5vdGF0aW9ucz8uTWVhc3VyZXM/LklTT0N1cnJlbmN5O1xuXHRpZiAodW5pdCkge1xuXHRcdGNvbnN0IHVuaXRCaW5kaW5nRXhwcmVzc2lvbiA9ICh1bml0IGFzIGFueSkuJHRhcmdldFxuXHRcdFx0PyBmb3JtYXRXaXRoVHlwZUluZm9ybWF0aW9uKFxuXHRcdFx0XHRcdCh1bml0IGFzIGFueSkuJHRhcmdldCxcblx0XHRcdFx0XHRnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24odW5pdCwgcmVsYXRpdmVMb2NhdGlvbikgYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz5cblx0XHRcdCAgKVxuXHRcdFx0OiAoZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKHVuaXQsIHJlbGF0aXZlTG9jYXRpb24pIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+KTtcblxuXHRcdHJldHVybiBjb21waWxlRXhwcmVzc2lvbihcblx0XHRcdGZvcm1hdFJlc3VsdChbZmllbGRWYWx1ZUV4cHJlc3Npb24sIFRhcmdldEV4cHJlc3Npb24sIHVuaXRCaW5kaW5nRXhwcmVzc2lvbl0sIHZhbHVlRm9ybWF0dGVycy5jb21wdXRlUGVyY2VudGFnZSlcblx0XHQpO1xuXHR9XG5cblx0cmV0dXJuIGNvbXBpbGVFeHByZXNzaW9uKGZvcm1hdFJlc3VsdChbZmllbGRWYWx1ZUV4cHJlc3Npb24sIFRhcmdldEV4cHJlc3Npb24sIFwiXCJdLCB2YWx1ZUZvcm1hdHRlcnMuY29tcHV0ZVBlcmNlbnRhZ2UpKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUF3QkEsTUFBTUEsNEJBQTRCLEdBQUlDLGNBQW1CLElBQXVDO0lBQy9GLE9BQU9BLGNBQWMsYUFBZEEsY0FBYyxlQUFkQSxjQUFjLENBQUVDLFdBQVcsR0FBR0MsMkJBQTJCLENBQUNGLGNBQWMsQ0FBQ0MsV0FBVyxDQUFDLEdBQUdFLHNCQUFzQjtFQUN0SCxDQUFDO0VBRUQsTUFBTUMsY0FBYyxHQUFHQyxHQUFHLENBQUNDLEVBQUUsQ0FBQ0MsT0FBTyxFQUFFLENBQUNDLHdCQUF3QixDQUFDLGVBQWUsQ0FBQztFQUUxRSxNQUFNQywrQ0FBK0MsR0FDM0RDLDRCQUFpRCxJQUNYO0lBQUE7SUFDdEMsTUFBTUMsVUFBVSxHQUFHLENBQUFELDRCQUE0QixhQUE1QkEsNEJBQTRCLGdEQUE1QkEsNEJBQTRCLENBQUVFLFlBQVksMERBQTFDLHNCQUE0Q0MsS0FBSyxLQUFJLEVBQUU7SUFDMUUsTUFBTUMsZ0JBQWdCLEdBQUdDLGdCQUFnQixDQUFDTCw0QkFBNEIsQ0FBQztJQUN2RSxJQUFJTSxvQkFBb0IsR0FBR2QsMkJBQTJCLENBQUNTLFVBQVUsRUFBRUcsZ0JBQWdCLENBQVE7SUFDM0YsTUFBTUcsZ0JBQWdCLEdBQUdsQiw0QkFBNEIsQ0FBQ1csNEJBQTRCLENBQUNFLFlBQVksQ0FBUTtJQUV2RyxJQUFJSSxvQkFBb0IsSUFBSUMsZ0JBQWdCLEVBQUU7TUFBQTtNQUM3QyxJQUFJTCxZQUFZLEdB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