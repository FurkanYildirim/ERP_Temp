/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/ui/core/Core", "../helpers/BindingHelper", "../ManifestSettings"], function (Action, ConfigurableObject, Key, BindingToolkit, ModelHelper, TypeGuards, DataModelPathHelper, Core, BindingHelper, ManifestSettings) {
  "use strict";

  var _exports = {};
  var ActionType = ManifestSettings.ActionType;
  var UI = BindingHelper.UI;
  var singletonPathVisitor = BindingHelper.singletonPathVisitor;
  var Draft = BindingHelper.Draft;
  var isPathDeletable = DataModelPathHelper.isPathDeletable;
  var isEntitySet = TypeGuards.isEntitySet;
  var pathInModel = BindingToolkit.pathInModel;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var fn = BindingToolkit.fn;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var KeyHelper = Key.KeyHelper;
  var Placement = ConfigurableObject.Placement;
  var getSemanticObjectMapping = Action.getSemanticObjectMapping;
  var getEnabledForAnnotationAction = Action.getEnabledForAnnotationAction;
  var getCopyAction = Action.getCopyAction;
  var dataFieldIsCopyAction = Action.dataFieldIsCopyAction;
  var ButtonType = Action.ButtonType;
  /**
   * Retrieves all the data field for actions for the identification annotation
   * They must be
   * - Not statically hidden
   * - Either linked to an Unbound action or to an action which has an OperationAvailable that is not set to false statically.
   *
   * @param entityType The current entity type
   * @param isDeterminingAction The flag which denotes whether or not the action is a determining action
   * @returns An array of DataField for action respecting the input parameter 'isDeterminingAction'
   */
  function getIdentificationDataFieldForActions(entityType, isDeterminingAction) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;
    return ((_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.Identification) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.filter(identificationDataField => {
      var _identificationDataFi, _identificationDataFi2, _identificationDataFi3, _identificationDataFi4, _identificationDataFi5, _identificationDataFi6, _identificationDataFi7, _identificationDataFi8, _identificationDataFi9, _identificationDataFi10;
      return ((_identificationDataFi = identificationDataField.annotations) === null || _identificationDataFi === void 0 ? void 0 : (_identificationDataFi2 = _identificationDataFi.UI) === null || _identificationDataFi2 === void 0 ? void 0 : (_identificationDataFi3 = _identificationDataFi2.Hidden) === null || _identificationDataFi3 === void 0 ? void 0 : _identificationDataFi3.valueOf()) !== true && identificationDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && Boolean((_identificationDataFi4 = identificationDataField.Determining) === null || _identificationDataFi4 === void 0 ? void 0 : _identificationDataFi4.valueOf()) === isDeterminingAction && (((_identificationDataFi5 = identificationDataField.ActionTarget) === null || _identificationDataFi5 === void 0 ? void 0 : (_identificationDataFi6 = _identificationDataFi5.isBound) === null || _identificationDataFi6 === void 0 ? void 0 : _identificationDataFi6.valueOf()) !== true || (identificationDataField === null || identificationDataField === void 0 ? void 0 : (_identificationDataFi7 = identificationDataField.ActionTarget) === null || _identificationDataFi7 === void 0 ? void 0 : (_identificationDataFi8 = _identificationDataFi7.annotations) === null || _identificationDataFi8 === void 0 ? void 0 : (_identificationDataFi9 = _identificationDataFi8.Core) === null || _identificationDataFi9 === void 0 ? void 0 : (_identificationDataFi10 = _identificationDataFi9.OperationAvailable) === null || _identificationDataFi10 === void 0 ? void 0 : _identificationDataFi10.valueOf()) !== false) ? true : false;
    })) || [];
  }

  /**
   * Retrieve all the IBN actions for the identification annotation.
   * They must be
   * - Not statically hidden.
   *
   * @param entityType The current entitytype
   * @param isDeterminingAction Whether or not the action should be determining
   * @returns An array of data field for action respecting the isDeterminingAction property.
   */
  _exports.getIdentificationDataFieldForActions = getIdentificationDataFieldForActions;
  function getIdentificationDataFieldForIBNActions(entityType, isDeterminingAction) {
    var _entityType$annotatio4, _entityType$annotatio5, _entityType$annotatio6;
    return ((_entityType$annotatio4 = entityType.annotations) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.Identification) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.filter(identificationDataField => {
      var _identificationDataFi11, _identificationDataFi12, _identificationDataFi13, _identificationDataFi14;
      return ((_identificationDataFi11 = identificationDataField.annotations) === null || _identificationDataFi11 === void 0 ? void 0 : (_identificationDataFi12 = _identificationDataFi11.UI) === null || _identificationDataFi12 === void 0 ? void 0 : (_identificationDataFi13 = _identificationDataFi12.Hidden) === null || _identificationDataFi13 === void 0 ? void 0 : _identificationDataFi13.valueOf()) !== true && identificationDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && Boolean((_identificationDataFi14 = identificationDataField.Determining) === null || _identificationDataFi14 === void 0 ? void 0 : _identificationDataFi14.valueOf()) === isDeterminingAction ? true : false;
    })) || [];
  }
  const IMPORTANT_CRITICALITIES = ["UI.CriticalityType/VeryPositive", "UI.CriticalityType/Positive", "UI.CriticalityType/Negative", "UI.CriticalityType/VeryNegative"];

  /**
   * Method to determine the 'visible' property binding for the Delete button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param deleteHidden The value of the UI.DeleteHidden annotation on the entity set / type.
   * @returns The binding expression for the 'visible' property of the Delete button.
   */
  _exports.IMPORTANT_CRITICALITIES = IMPORTANT_CRITICALITIES;
  function getDeleteButtonVisibility(converterContext, deleteHidden) {
    const dataModelObjectPath = converterContext.getDataModelObjectPath(),
      visitedNavigationPaths = dataModelObjectPath.navigationProperties.map(navProp => navProp.name),
      // Set absolute binding path for Singleton references, otherwise the configured annotation path itself.
      // For e.g. /com.sap.namespace.EntityContainer/Singleton/Property to /Singleton/Property
      deleteHiddenExpression = getExpressionFromAnnotation(deleteHidden, visitedNavigationPaths, undefined, path => singletonPathVisitor(path, converterContext.getConvertedTypes(), [])),
      manifestWrapper = converterContext.getManifestWrapper(),
      viewLevel = manifestWrapper.getViewLevel(),
      // Delete button is visible
      // In OP 		-->  when not in edit mode
      // In sub-OP 	-->  when in edit mode
      editableExpression = viewLevel > 1 ? UI.IsEditable : not(UI.IsEditable);

    // If UI.DeleteHidden annotation on entity set or type is either not defined or explicitly set to false,
    // Delete button is visible based on editableExpression.
    // else,
    // Delete button is visible based on both annotation path and editableExpression.
    return ifElse(deleteHidden === undefined || deleteHidden.valueOf() === false, editableExpression, and(editableExpression, equal(deleteHiddenExpression, false)));
  }

  /**
   * Method to determine the 'enabled' property binding for the Delete button on an object page.
   *
   * @param isDeletable The delete restriction configured
   * @param isParentDeletable The delete restriction configured on the parent entity
   * @param converterContext
   * @returns The binding expression for the 'enabled' property of the Delete button
   */
  _exports.getDeleteButtonVisibility = getDeleteButtonVisibility;
  function getDeleteButtonEnabled(isDeletable, isParentDeletable, converterContext) {
    const entitySet = converterContext.getEntitySet(),
      isDraftRoot = ModelHelper.isDraftRoot(entitySet);
    let ret = ifElse(isParentDeletable !== undefined, isParentDeletable, ifElse(isDeletable !== undefined, equal(getExpressionFromAnnotation(isDeletable), true), constant(true)));

    // delete should be disabled for Locked objects
    ret = isDraftRoot ? and(ret, not(pathInModel("DraftAdministrativeData/InProcessByUser"))) : ret;
    return ret;
  }

  /**
   * Method to determine the 'visible' property binding for the Edit button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param rootUpdateHidden The value of the UI.UpdateHidden annotation on the entity set / type.
   * @param rootConverterContext
   * @param updateHidden
   * @param viewLevel
   * @returns The binding expression for the 'visible' property of the Edit button.
   */
  _exports.getDeleteButtonEnabled = getDeleteButtonEnabled;
  function getEditButtonVisibility(converterContext, rootUpdateHidden, rootConverterContext, updateHidden, viewLevel) {
    const rootEntitySet = rootConverterContext === null || rootConverterContext === void 0 ? void 0 : rootConverterContext.getEntitySet(),
      entitySet = converterContext.getEntitySet(),
      isFCLEnabled = converterContext.getManifestWrapper().isFclEnabled();
    let isDraftEnabled;
    const rootUpdateHiddenExpression = getHiddenExpression(rootConverterContext, rootUpdateHidden);
    if (viewLevel && viewLevel > 1) {
      // if viewlevel > 1 check if node is draft enabled
      isDraftEnabled = ModelHelper.isDraftNode(entitySet);
    } else {
      isDraftEnabled = ModelHelper.isDraftRoot(rootEntitySet);
    }
    const updateHiddenExpression = getHiddenExpression(rootConverterContext, updateHidden);
    const notEditableExpression = not(UI.IsEditable);

    // If UI.UpdateHidden annotation on entity set or type is either not defined or explicitly set to false,
    // Edit button is visible in display mode.
    // else,
    // Edit button is visible based on both annotation path and in display mode.
    const resultantExpression = ifElse(viewLevel > 1, ifElse(updateHidden === undefined || updateHidden.valueOf() === false, and(notEditableExpression, equal(pathInModel("rootEditVisible", "internal"), true), ifElse(isFCLEnabled, equal(pathInModel("/showEditButton", "fclhelper"), true), true)), and(notEditableExpression, equal(updateHiddenExpression, false), equal(pathInModel("rootEditVisible", "internal"), true), ifElse(isFCLEnabled, equal(pathInModel("/showEditButton", "fclhelper"), true), true))), ifElse(rootUpdateHidden === undefined || rootUpdateHidden.valueOf() === false, notEditableExpression, and(notEditableExpression, equal(rootUpdateHiddenExpression, false))));
    return ifElse(isDraftEnabled, and(resultantExpression, Draft.HasNoDraftForCurrentUser), resultantExpression);
  }
  _exports.getEditButtonVisibility = getEditButtonVisibility;
  function getHiddenExpression(converterContext, updateHidden) {
    const dataModelObjectPath = converterContext.getDataModelObjectPath(),
      visitedNavigationPaths = dataModelObjectPath.navigationProperties.map(navProp => navProp.name),
      // Set absolute binding path for Singleton references, otherwise the configured annotation path itself.
      // For e.g. /com.sap.namespace.EntityContainer/Singleton/Property to /Singleton/Property
      updateHiddenExpression = getExpressionFromAnnotation(updateHidden, visitedNavigationPaths, undefined, path => singletonPathVisitor(path, converterContext.getConvertedTypes(), visitedNavigationPaths));
    return updateHiddenExpression;
  }
  /**
   * Method to determine the 'enabled' property binding for the Edit button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param updateRestrictions
   * @param viewLevel
   * @returns The binding expression for the 'enabled' property of the Edit button.
   */
  _exports.getHiddenExpression = getHiddenExpression;
  function getEditButtonEnabled(converterContext, updateRestrictions, viewLevel) {
    const entitySet = converterContext.getEntitySet(),
      isDraftRoot = ModelHelper.isDraftRoot(entitySet),
      isSticky = ModelHelper.isSticky(entitySet);
    let editActionName;
    if (isDraftRoot && isEntitySet(entitySet)) {
      var _entitySet$annotation, _entitySet$annotation2;
      editActionName = (_entitySet$annotation = entitySet.annotations.Common) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.DraftRoot) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.EditAction;
    } else if (isSticky && isEntitySet(entitySet)) {
      var _entitySet$annotation3, _entitySet$annotation4;
      editActionName = (_entitySet$annotation3 = entitySet.annotations.Session) === null || _entitySet$annotation3 === void 0 ? void 0 : (_entitySet$annotation4 = _entitySet$annotation3.StickySessionSupported) === null || _entitySet$annotation4 === void 0 ? void 0 : _entitySet$annotation4.EditAction;
    }
    if (editActionName) {
      var _editAction$annotatio, _editAction$annotatio2;
      const editActionAnnotationPath = converterContext.getAbsoluteAnnotationPath(editActionName);
      const editAction = converterContext.resolveAbsolutePath(editActionAnnotationPath).target;
      if ((editAction === null || editAction === void 0 ? void 0 : (_editAction$annotatio = editAction.annotations) === null || _editAction$annotatio === void 0 ? void 0 : (_editAction$annotatio2 = _editAction$annotatio.Core) === null || _editAction$annotatio2 === void 0 ? void 0 : _editAction$annotatio2.OperationAvailable) === null) {
        // We disabled action advertisement but kept it in the code for the time being
        //return "{= ${#" + editActionName + "} ? true : false }";
      } else if (viewLevel > 1) {
        // Edit button is enabled based on the update restrictions of the sub-OP
        if (updateRestrictions !== undefined) {
          return compileExpression(and(equal(getExpressionFromAnnotation(updateRestrictions), true), equal(pathInModel("rootEditEnabled", "internal"), true)));
        } else {
          return compileExpression(equal(pathInModel("rootEditEnabled", "internal"), true));
        }
      } else {
        return getEnabledForAnnotationAction(converterContext, editAction ?? undefined);
      }
    }
    return "true";
  }
  _exports.getEditButtonEnabled = getEditButtonEnabled;
  function getHeaderDefaultActions(converterContext) {
    var _entitySet$annotation5, _entitySet$annotation6, _entitySet$annotation7, _entitySet$annotation8, _entityDeleteRestrict;
    const sContextPath = converterContext.getContextPath();
    const rootEntitySetPath = ModelHelper.getRootEntitySetPath(sContextPath);
    const rootConverterContext = converterContext.getConverterContextFor("/" + rootEntitySetPath);
    const entitySet = converterContext.getEntitySet(),
      entityType = converterContext.getEntityType(),
      rootEntitySet = rootConverterContext.getEntitySet(),
      rootEntityType = rootConverterContext.getEntityType(),
      stickySessionSupported = ModelHelper.getStickySession(rootEntitySet),
      //for sticky app
      draftRoot = ModelHelper.getDraftRoot(rootEntitySet),
      //entitySet && entitySet.annotations.Common?.DraftRoot,
      draftNode = ModelHelper.getDraftNode(rootEntitySet),
      entityDeleteRestrictions = entitySet && ((_entitySet$annotation5 = entitySet.annotations) === null || _entitySet$annotation5 === void 0 ? void 0 : (_entitySet$annotation6 = _entitySet$annotation5.Capabilities) === null || _entitySet$annotation6 === void 0 ? void 0 : _entitySet$annotation6.DeleteRestrictions),
      rootUpdateHidden = ModelHelper.isUpdateHidden(rootEntitySet, rootEntityType),
      updateHidden = rootEntitySet && isEntitySet(rootEntitySet) && (rootUpdateHidden === null || rootUpdateHidden === void 0 ? void 0 : rootUpdateHidden.valueOf()),
      dataModelObjectPath = converterContext.getDataModelObjectPath(),
      isParentDeletable = isPathDeletable(dataModelObjectPath, {
        pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)
      }),
      parentEntitySetDeletable = isParentDeletable ? compileExpression(isParentDeletable) : isParentDeletable,
      identificationFieldForActions = getIdentificationDataFieldForActions(converterContext.getEntityType(), false);
    const copyDataField = converterContext.getManifestWrapper().getViewLevel() === 1 ? getCopyAction(identificationFieldForActions.filter(dataField => {
      return dataFieldIsCopyAction(dataField);
    })) : undefined;
    const headerDataFieldForActions = identificationFieldForActions.filter(dataField => {
      return !dataFieldIsCopyAction(dataField);
    });

    // Initialize actions and start with draft actions if available since they should appear in the first
    // leftmost position in the actions area of the OP header
    // This is more like a placeholder than a single action, since this controls not only the templating of
    // the button for switching between draft and active document versions but also the controls for
    // the collaborative draft fragment.
    const headerActions = [];
    if (isEntitySet(entitySet) && draftRoot !== null && draftRoot !== void 0 && draftRoot.EditAction && updateHidden !== true) {
      headerActions.push({
        type: ActionType.DraftActions,
        key: "DraftActions"
      });
    }
    const viewLevel = converterContext.getManifestWrapper().getViewLevel();
    const updatablePropertyPath = viewLevel > 1 ? entitySet === null || entitySet === void 0 ? void 0 : (_entitySet$annotation7 = entitySet.annotations.Capabilities) === null || _entitySet$annotation7 === void 0 ? void 0 : (_entitySet$annotation8 = _entitySet$annotation7.UpdateRestrictions) === null || _entitySet$annotation8 === void 0 ? void 0 : _entitySet$annotation8.Updatable : undefined;
    if (draftRoot || draftNode) {
      headerActions.push({
        type: ActionType.CollaborationAvatars,
        key: "CollaborationAvatars"
      });
    }
    // Then add the "Critical" DataFieldForActions
    headerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) > -1;
    }).forEach(dataField => {
      headerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });

    // Then the edit action if it exists
    if ((draftRoot !== null && draftRoot !== void 0 && draftRoot.EditAction || stickySessionSupported !== null && stickySessionSupported !== void 0 && stickySessionSupported.EditAction) && updateHidden !== true) {
      headerActions.push({
        type: ActionType.Primary,
        key: "EditAction",
        visible: compileExpression(getEditButtonVisibility(converterContext, rootUpdateHidden, rootConverterContext, ModelHelper.isUpdateHidden(entitySet, entityType), viewLevel)),
        enabled: getEditButtonEnabled(rootConverterContext, updatablePropertyPath, viewLevel)
      });
    }
    // Then the delete action if we're not statically not deletable
    if (parentEntitySetDeletable && parentEntitySetDeletable !== "false" || (entityDeleteRestrictions === null || entityDeleteRestrictions === void 0 ? void 0 : (_entityDeleteRestrict = entityDeleteRestrictions.Deletable) === null || _entityDeleteRestrict === void 0 ? void 0 : _entityDeleteRestrict.valueOf()) !== false && parentEntitySetDeletable !== "false") {
      const deleteHidden = ModelHelper.getDeleteHidden(entitySet, entityType);
      headerActions.push({
        type: ActionType.Secondary,
        key: "DeleteAction",
        visible: compileExpression(getDeleteButtonVisibility(converterContext, deleteHidden)),
        enabled: compileExpression(getDeleteButtonEnabled(entityDeleteRestrictions === null || entityDeleteRestrictions === void 0 ? void 0 : entityDeleteRestrictions.Deletable, isParentDeletable, converterContext)),
        parentEntityDeleteEnabled: parentEntitySetDeletable
      });
    }
    if (copyDataField) {
      var _copyDataField$Label;
      headerActions.push({
        ...getDataFieldAnnotationAction(copyDataField, converterContext),
        type: ActionType.Copy,
        text: ((_copyDataField$Label = copyDataField.Label) === null || _copyDataField$Label === void 0 ? void 0 : _copyDataField$Label.toString()) ?? Core.getLibraryResourceBundle("sap.fe.core").getText("C_COMMON_COPY")
      });
    }
    const headerDataFieldForIBNActions = getIdentificationDataFieldForIBNActions(converterContext.getEntityType(), false);
    headerDataFieldForIBNActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      var _dataField$RequiresCo, _dataField$Inline, _dataField$Label, _dataField$annotation, _dataField$annotation2, _dataField$Navigation;
      if (((_dataField$RequiresCo = dataField.RequiresContext) === null || _dataField$RequiresCo === void 0 ? void 0 : _dataField$RequiresCo.valueOf()) === true) {
        throw new Error(`RequiresContext property should not be true for header IBN action : ${dataField.Label}`);
      }
      if (((_dataField$Inline = dataField.Inline) === null || _dataField$Inline === void 0 ? void 0 : _dataField$Inline.valueOf()) === true) {
        throw new Error(`Inline property should not be true for header IBN action : ${dataField.Label}`);
      }
      const oNavigationParams = {
        semanticObjectMapping: getSemanticObjectMapping(dataField.Mapping)
      };
      headerActions.push({
        type: ActionType.DataFieldForIntentBasedNavigation,
        text: (_dataField$Label = dataField.Label) === null || _dataField$Label === void 0 ? void 0 : _dataField$Label.toString(),
        annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
        buttonType: ButtonType.Ghost,
        visible: compileExpression(and(not(equal(getExpressionFromAnnotation((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : _dataField$annotation2.Hidden), true)), not(equal(pathInModel("shellNavigationNotAvailable", "internal"), true)))),
        enabled: dataField.NavigationAvailable !== undefined ? compileExpression(equal(getExpressionFromAnnotation((_dataField$Navigation = dataField.NavigationAvailable) === null || _dataField$Navigation === void 0 ? void 0 : _dataField$Navigation.valueOf()), true)) : true,
        key: KeyHelper.generateKeyFromDataField(dataField),
        isNavigable: true,
        press: compileExpression(fn("._intentBasedNavigation.navigate", [getExpressionFromAnnotation(dataField.SemanticObject), getExpressionFromAnnotation(dataField.Action), oNavigationParams])),
        customData: compileExpression({
          semanticObject: getExpressionFromAnnotation(dataField.SemanticObject),
          action: getExpressionFromAnnotation(dataField.Action)
        })
      });
    });
    // Finally the non critical DataFieldForActions
    headerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      headerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });
    return headerActions;
  }
  _exports.getHeaderDefaultActions = getHeaderDefaultActions;
  function getHiddenHeaderActions(converterContext) {
    var _entityType$annotatio7, _entityType$annotatio8, _entityType$annotatio9;
    const entityType = converterContext.getEntityType();
    const hiddenActions = ((_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : (_entityType$annotatio9 = _entityType$annotatio8.Identification) === null || _entityType$annotatio9 === void 0 ? void 0 : _entityType$annotatio9.filter(identificationDataField => {
      var _identificationDataFi15, _identificationDataFi16, _identificationDataFi17;
      return (identificationDataField === null || identificationDataField === void 0 ? void 0 : (_identificationDataFi15 = identificationDataField.annotations) === null || _identificationDataFi15 === void 0 ? void 0 : (_identificationDataFi16 = _identificationDataFi15.UI) === null || _identificationDataFi16 === void 0 ? void 0 : (_identificationDataFi17 = _identificationDataFi16.Hidden) === null || _identificationDataFi17 === void 0 ? void 0 : _identificationDataFi17.valueOf()) === true;
    })) || [];
    return hiddenActions.map(dataField => {
      return {
        type: ActionType.Default,
        key: KeyHelper.generateKeyFromDataField(dataField)
      };
    });
  }
  _exports.getHiddenHeaderActions = getHiddenHeaderActions;
  function getFooterDefaultActions(viewLevel, converterContext) {
    var _entitySet$annotation9, _entitySet$annotation10, _entitySet$annotation11, _entitySet$annotation12;
    const entitySet = converterContext.getEntitySet();
    const entityType = converterContext.getEntityType();
    const stickySessionSupported = ModelHelper.getStickySession(entitySet),
      //for sticky app
      entitySetDraftRoot = isEntitySet(entitySet) && (((_entitySet$annotation9 = entitySet.annotations.Common) === null || _entitySet$annotation9 === void 0 ? void 0 : (_entitySet$annotation10 = _entitySet$annotation9.DraftRoot) === null || _entitySet$annotation10 === void 0 ? void 0 : _entitySet$annotation10.term) ?? ((_entitySet$annotation11 = entitySet.annotations.Session) === null || _entitySet$annotation11 === void 0 ? void 0 : (_entitySet$annotation12 = _entitySet$annotation11.StickySessionSupported) === null || _entitySet$annotation12 === void 0 ? void 0 : _entitySet$annotation12.term)),
      conditionSave = Boolean(entitySetDraftRoot === "com.sap.vocabularies.Common.v1.DraftRoot" || stickySessionSupported && (stickySessionSupported === null || stickySessionSupported === void 0 ? void 0 : stickySessionSupported.SaveAction)),
      conditionApply = viewLevel > 1,
      conditionCancel = Boolean(entitySetDraftRoot === "com.sap.vocabularies.Common.v1.DraftRoot" || stickySessionSupported && (stickySessionSupported === null || stickySessionSupported === void 0 ? void 0 : stickySessionSupported.DiscardAction));

    // Retrieve all determining actions
    const footerDataFieldForActions = getIdentificationDataFieldForActions(converterContext.getEntityType(), true);

    // First add the "Critical" DataFieldForActions
    const footerActions = footerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) > -1;
    }).map(dataField => {
      return getDataFieldAnnotationAction(dataField, converterContext);
    });

    // Then the save action if it exists
    if ((entitySet === null || entitySet === void 0 ? void 0 : entitySet.entityTypeName) === (entityType === null || entityType === void 0 ? void 0 : entityType.fullyQualifiedName) && conditionSave) {
      footerActions.push({
        type: ActionType.Primary,
        key: "SaveAction"
      });
    }

    // Then the apply action if it exists
    if (conditionApply) {
      footerActions.push({
        type: ActionType.DefaultApply,
        key: "ApplyAction"
      });
    }

    // Then the non critical DataFieldForActions
    footerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      footerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });

    // Then the cancel action if it exists
    if (conditionCancel) {
      footerActions.push({
        type: ActionType.Secondary,
        key: "CancelAction",
        position: {
          placement: Placement.End
        }
      });
    }
    return footerActions;
  }
  _exports.getFooterDefaultActions = getFooterDefaultActions;
  function getDataFieldAnnotationAction(dataField, converterContext) {
    var _dataField$annotation3, _dataField$annotation4;
    return {
      type: ActionType.DataFieldForAction,
      annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
      key: KeyHelper.generateKeyFromDataField(dataField),
      visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation3 = dataField.annotations) === null || _dataField$annotation3 === void 0 ? void 0 : (_dataField$annotation4 = _dataField$annotation3.UI) === null || _dataField$annotation4 === void 0 ? void 0 : _dataField$annotation4.Hidden), true))),
      enabled: getEnabledForAnnotationAction(converterContext, dataField.ActionTarget),
      isNavigable: true
    };
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRJZGVudGlmaWNhdGlvbkRhdGFGaWVsZEZvckFjdGlvbnMiLCJlbnRpdHlUeXBlIiwiaXNEZXRlcm1pbmluZ0FjdGlvbiIsImFubm90YXRpb25zIiwiVUkiLCJJZGVudGlmaWNhdGlvbiIsImZpbHRlciIsImlkZW50aWZpY2F0aW9uRGF0YUZpZWxkIiwiSGlkZGVuIiwidmFsdWVPZiIsIiRUeXBlIiwiQm9vbGVhbiIsIkRldGVybWluaW5nIiwiQWN0aW9uVGFyZ2V0IiwiaXNCb3VuZCIsIkNvcmUiLCJPcGVyYXRpb25BdmFpbGFibGUiLCJnZXRJZGVudGlmaWNhdGlvbkRhdGFGaWVsZEZvcklCTkFjdGlvbnMiLCJJTVBPUlRBTlRfQ1JJVElDQUxJVElFUyIsImdldERlbGV0ZUJ1dHRvblZpc2liaWxpdHkiLCJjb252ZXJ0ZXJDb250ZXh0IiwiZGVsZXRlSGlkZGVuIiwiZGF0YU1vZGVsT2JqZWN0UGF0aCIsImdldERhdGFNb2RlbE9iamVjdFBhdGgiLCJ2aXNpdGVkTmF2aWdhdGlvblBhdGhzIiwibmF2aWdhdGlvblByb3BlcnRpZXMiLCJtYXAiLCJuYXZQcm9wIiwibmFtZSIsImRlbGV0ZUhpZGRlbkV4cHJlc3Npb24iLCJnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24iLCJ1bmRlZmluZWQiLCJwYXRoIiwic2luZ2xldG9uUGF0aFZpc2l0b3IiLCJnZXRDb252ZXJ0ZWRUeXBlcyIsIm1hbmlmZXN0V3JhcHBlciIsImdldE1hbmlmZXN0V3JhcHBlciIsInZpZXdMZXZlbCIsImdldFZpZXdMZXZlbCIsImVkaXRhYmxlRXhwcmVzc2lvbiIsIklzRWRpdGFibGUiLCJub3QiLCJpZkVsc2UiLCJhbmQiLCJlcXVhbCIsImdldERlbGV0ZUJ1dHRvbkVuYWJsZWQiLCJpc0RlbGV0YWJsZSIsImlzUGFyZW50RGVsZXRhYmxlIiwiZW50aXR5U2V0IiwiZ2V0RW50aXR5U2V0IiwiaXNEcmFmdFJvb3QiLCJNb2RlbEhlbHBlciIsInJldCIsImNvbnN0YW50IiwicGF0aEluTW9kZWwiLCJnZXRFZGl0QnV0dG9uVmlzaWJpbGl0eSIsInJvb3RVcGRhdGVIaWRkZW4iLCJyb290Q29udmVydGVyQ29udGV4dCIsInVwZGF0ZUhpZGRlbiIsInJvb3RFbnRpdHlTZXQiLCJpc0ZDTEVuYWJsZWQiLCJpc0ZjbEVuYWJsZWQiLCJpc0RyYWZ0RW5hYmxlZCIsInJvb3RVcGRhdGVIaWRkZW5FeHByZXNzaW9uIiwiZ2V0SGlkZGVuRXhwcmVzc2lvbiIsImlzRHJhZnROb2RlIiwidXBkYXRlSGlkZGVuRXhwcmVzc2lvbiIsIm5vdEVkaXRhYmxlRXhwcmVzc2lvbiIsInJlc3VsdGFudEV4cHJlc3Npb24iLCJEcmFmdCIsIkhhc05vRHJhZnRGb3JDdXJyZW50VXNlciIsImdldEVkaXRCdXR0b25FbmFibGVkIiwidXBkYXRlUmVzdHJpY3Rpb25zIiwiaXNTdGlja3kiLCJlZGl0QWN0aW9uTmFtZSIsImlzRW50aXR5U2V0IiwiQ29tbW9uIiwiRHJhZnRSb290IiwiRWRpdEFjdGlvbiIsIlNlc3Npb24iLCJTdGlja3lTZXNzaW9uU3VwcG9ydGVkIiwiZWRpdEFjdGlvbkFubm90YXRpb25QYXRoIiwiZ2V0QWJzb2x1dGVBbm5vdGF0aW9uUGF0aCIsImVkaXRBY3Rpb24iLCJyZXNvbHZlQWJzb2x1dGVQYXRoIiwidGFyZ2V0IiwiY29tcGlsZUV4cHJlc3Npb24iLCJnZXRFbmFibGVkRm9yQW5ub3RhdGlvbkFjdGlvbiIsImdldEhlYWRlckRlZmF1bHRBY3Rpb25zIiwic0NvbnRleHRQYXRoIiwiZ2V0Q29udGV4dFBhdGgiLCJyb290RW50aXR5U2V0UGF0aCIsImdldFJvb3RFbnRpdHlTZXRQYXRoIiwiZ2V0Q29udmVydGVyQ29udGV4dEZvciIsImdldEVudGl0eVR5cGUiLCJyb290RW50aXR5VHlwZSIsInN0aWNreVNlc3Npb25TdXBwb3J0ZWQiLCJnZXRTdGlja3lTZXNzaW9uIiwiZHJhZnRSb290IiwiZ2V0RHJhZnRSb290IiwiZHJhZnROb2RlIiwiZ2V0RHJhZnROb2RlIiwiZW50aXR5RGVsZXRlUmVzdHJpY3Rpb25zIiwiQ2FwYWJpbGl0aWVzIiwiRGVsZXRlUmVzdHJpY3Rpb25zIiwiaXNVcGRhdGVIaWRkZW4iLCJpc1BhdGhEZWxldGFibGUiLCJwYXRoVmlzaXRvciIsIm5hdmlnYXRpb25QYXRocyIsInBhcmVudEVudGl0eVNldERlbGV0YWJsZSIsImlkZW50aWZpY2F0aW9uRmllbGRGb3JBY3Rpb25zIiwiY29weURhdGFGaWVsZCIsImdldENvcHlBY3Rpb24iLCJkYXRhRmllbGQiLCJkYXRhRmllbGRJc0NvcHlBY3Rpb24iLCJoZWFkZXJEYXRhRmllbGRGb3JBY3Rpb25zIiwiaGVhZGVyQWN0aW9ucyIsInB1c2giLCJ0eXBlIiwiQWN0aW9uVHlwZSIsIkRyYWZ0QWN0aW9ucyIsImtleSIsInVwZGF0YWJsZVByb3BlcnR5UGF0aCIsIlVwZGF0ZVJlc3RyaWN0aW9ucyIsIlVwZGF0YWJsZSIsIkNvbGxhYm9yYXRpb25BdmF0YXJzIiwiaW5kZXhPZiIsIkNyaXRpY2FsaXR5IiwiZm9yRWFjaCIsImdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24iLCJQcmltYXJ5IiwidmlzaWJsZSIsImVuYWJsZWQiLCJEZWxldGFibGUiLCJnZXREZWxldGVIaWRkZW4iLCJTZWNvbmRhcnkiLCJwYXJlbnRFbnRpdHlEZWxldGVFbmFibGVkIiwiQ29weSIsInRleHQiLCJMYWJlbCIsInRvU3RyaW5nIiwiZ2V0TGlicmFyeVJlc291cmNlQnVuZGxlIiwiZ2V0VGV4dCIsImhlYWRlckRhdGFGaWVsZEZvcklCTkFjdGlvbnMiLCJSZXF1aXJlc0NvbnRleHQiLCJFcnJvciIsIklubGluZSIsIm9OYXZpZ2F0aW9uUGFyYW1zIiwic2VtYW50aWNPYmplY3RNYXBwaW5nIiwiZ2V0U2VtYW50aWNPYmplY3RNYXBwaW5nIiwiTWFwcGluZyIsIkRhdGFGaWVsZEZvckludGVudEJhc2VkTmF2aWdhdGlvbiIsImFubm90YXRpb25QYXRoIiwiZ2V0RW50aXR5U2V0QmFzZWRBbm5vdGF0aW9uUGF0aCIsImZ1bGx5UXVhbGlmaWVkTmFtZSIsImJ1dHRvblR5cGUiLCJCdXR0b25UeXBlIiwiR2hvc3QiLCJOYXZpZ2F0aW9uQXZhaWxhYmxlIiwiS2V5SGVscGVyIiwiZ2VuZXJhdGVLZXlGcm9tRGF0YUZpZWxkIiwiaXNOYXZpZ2FibGUiLCJwcmVzcyIsImZuIiwiU2VtYW50aWNPYmplY3QiLCJBY3Rpb24iLCJjdXN0b21EYXRhIiwic2VtYW50aWNPYmplY3QiLCJhY3Rpb24iLCJnZXRIaWRkZW5IZWFkZXJBY3Rpb25zIiwiaGlkZGVuQWN0aW9ucyIsIkRlZmF1bHQiLCJnZXRGb290ZXJEZWZhdWx0QWN0aW9ucyIsImVudGl0eVNldERyYWZ0Um9vdCIsInRlcm0iLCJjb25kaXRpb25TYXZlIiwiU2F2ZUFjdGlvbiIsImNvbmRpdGlvbkFwcGx5IiwiY29uZGl0aW9uQ2FuY2VsIiwiRGlzY2FyZEFjdGlvbiIsImZvb3RlckRhdGFGaWVsZEZvckFjdGlvbnMiLCJmb290ZXJBY3Rpb25zIiwiZW50aXR5VHlwZU5hbWUiLCJEZWZhdWx0QXBwbHkiLCJwb3NpdGlvbiIsInBsYWNlbWVudCIsIlBsYWNlbWVudCIsIkVuZCIsIkRhdGFGaWVsZEZvckFjdGlvbiJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiSGVhZGVyQW5kRm9vdGVyQWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQWN0aW9uLCBFbnRpdHlUeXBlLCBQcm9wZXJ0eUFubm90YXRpb25WYWx1ZSB9IGZyb20gXCJAc2FwLXV4L3ZvY2FidWxhcmllcy10eXBlc1wiO1xuaW1wb3J0IHsgQ29tbW9uQW5ub3RhdGlvblRlcm1zIH0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzL3ZvY2FidWxhcmllcy9Db21tb25cIjtcbmltcG9ydCB0eXBlIHsgRGF0YUZpZWxkRm9yQWN0aW9uVHlwZXMsIERhdGFGaWVsZEZvckludGVudEJhc2VkTmF2aWdhdGlvblR5cGVzIH0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzL3ZvY2FidWxhcmllcy9VSVwiO1xuaW1wb3J0IHsgVUlBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXMvdm9jYWJ1bGFyaWVzL1VJXCI7XG5pbXBvcnQgdHlwZSB7IEFubm90YXRpb25BY3Rpb24sIEJhc2VBY3Rpb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvY29udmVydGVycy9jb250cm9scy9Db21tb24vQWN0aW9uXCI7XG5pbXBvcnQge1xuXHRCdXR0b25UeXBlLFxuXHRkYXRhRmllbGRJc0NvcHlBY3Rpb24sXG5cdGdldENvcHlBY3Rpb24sXG5cdGdldEVuYWJsZWRGb3JBbm5vdGF0aW9uQWN0aW9uLFxuXHRnZXRTZW1hbnRpY09iamVjdE1hcHBpbmdcbn0gZnJvbSBcInNhcC9mZS9jb3JlL2NvbnZlcnRlcnMvY29udHJvbHMvQ29tbW9uL0FjdGlvblwiO1xuaW1wb3J0IHsgUGxhY2VtZW50IH0gZnJvbSBcInNhcC9mZS9jb3JlL2NvbnZlcnRlcnMvaGVscGVycy9Db25maWd1cmFibGVPYmplY3RcIjtcbmltcG9ydCB7IEtleUhlbHBlciB9IGZyb20gXCJzYXAvZmUvY29yZS9jb252ZXJ0ZXJzL2hlbHBlcnMvS2V5XCI7XG5pbXBvcnQge1xuXHRhbmQsXG5cdEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbixcblx0Q29tcGlsZWRCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb24sXG5cdGNvbXBpbGVFeHByZXNzaW9uLFxuXHRjb25zdGFudCxcblx0ZXF1YWwsXG5cdGZuLFxuXHRnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24sXG5cdGlmRWxzZSxcblx0bm90LFxuXHRwYXRoSW5Nb2RlbFxufSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9CaW5kaW5nVG9vbGtpdFwiO1xuaW1wb3J0IE1vZGVsSGVscGVyIGZyb20gXCJzYXAvZmUvY29yZS9oZWxwZXJzL01vZGVsSGVscGVyXCI7XG5pbXBvcnQgeyBpc0VudGl0eVNldCB9IGZyb20gXCJzYXAvZmUvY29yZS9oZWxwZXJzL1R5cGVHdWFyZHNcIjtcbmltcG9ydCB7IGlzUGF0aERlbGV0YWJsZSB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL0RhdGFNb2RlbFBhdGhIZWxwZXJcIjtcbmltcG9ydCBDb3JlIGZyb20gXCJzYXAvdWkvY29yZS9Db3JlXCI7XG5pbXBvcnQgdHlwZSBDb252ZXJ0ZXJDb250ZXh0IGZyb20gXCIuLi9Db252ZXJ0ZXJDb250ZXh0XCI7XG5pbXBvcnQgeyBEcmFmdCwgc2luZ2xldG9uUGF0aFZpc2l0b3IsIFVJIH0gZnJvbSBcIi4uL2hlbHBlcnMvQmluZGluZ0hlbHBlclwiO1xuaW1wb3J0IHsgQWN0aW9uVHlwZSB9IGZyb20gXCIuLi9NYW5pZmVzdFNldHRpbmdzXCI7XG5cbi8qKlxuICogUmV0cmlldmVzIGFsbCB0aGUgZGF0YSBmaWVsZCBmb3IgYWN0aW9ucyBmb3IgdGhlIGlkZW50aWZpY2F0aW9uIGFubm90YXRpb25cbiAqIFRoZXkgbXVzdCBiZVxuICogLSBOb3Qgc3RhdGljYWxseSBoaWRkZW5cbiAqIC0gRWl0aGVyIGxpbmtlZCB0byBhbiBVbmJvdW5kIGFjdGlvbiBvciB0byBhbiBhY3Rpb24gd2hpY2ggaGFzIGFuIE9wZXJhdGlvbkF2YWlsYWJsZSB0aGF0IGlzIG5vdCBzZXQgdG8gZmFsc2Ugc3RhdGljYWxseS5cbiAqXG4gKiBAcGFyYW0gZW50aXR5VHlwZSBUaGUgY3VycmVudCBlbnRpdHkgdHlwZVxuICogQHBhcmFtIGlzRGV0ZXJtaW5pbmdBY3Rpb24gVGhlIGZsYWcgd2hpY2ggZGVub3RlcyB3aGV0aGVyIG9yIG5vdCB0aGUgYWN0aW9uIGlzIGEgZGV0ZXJtaW5pbmcgYWN0aW9uXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBEYXRhRmllbGQgZm9yIGFjdGlvbiByZXNwZWN0aW5nIHRoZSBpbnB1dCBwYXJhbWV0ZXIgJ2lzRGV0ZXJtaW5pbmdBY3Rpb24nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJZGVudGlmaWNhdGlvbkRhdGFGaWVsZEZvckFjdGlvbnMoZW50aXR5VHlwZTogRW50aXR5VHlwZSwgaXNEZXRlcm1pbmluZ0FjdGlvbjogYm9vbGVhbik6IERhdGFGaWVsZEZvckFjdGlvblR5cGVzW10ge1xuXHRyZXR1cm4gKGVudGl0eVR5cGUuYW5ub3RhdGlvbnM/LlVJPy5JZGVudGlmaWNhdGlvbj8uZmlsdGVyKChpZGVudGlmaWNhdGlvbkRhdGFGaWVsZCkgPT4ge1xuXHRcdHJldHVybiBpZGVudGlmaWNhdGlvbkRhdGFGaWVsZC5hbm5vdGF0aW9ucz8uVUk/LkhpZGRlbj8udmFsdWVPZigpICE9PSB0cnVlICYmXG5cdFx0XHRpZGVudGlmaWNhdGlvbkRhdGFGaWVsZC4kVHlwZSA9PT0gVUlBbm5vdGF0aW9uVHlwZXMuRGF0YUZpZWxkRm9yQWN0aW9uICYmXG5cdFx0XHRCb29sZWFuKGlkZW50aWZpY2F0aW9uRGF0YUZpZWxkLkRldGVybWluaW5nPy52YWx1ZU9mKCkpID09PSBpc0RldGVybWluaW5nQWN0aW9uICYmXG5cdFx0XHQoaWRlbnRpZmljYXRpb25EYXRhRmllbGQuQWN0aW9uVGFyZ2V0Py5pc0JvdW5kPy52YWx1ZU9mKCkgIT09IHRydWUgfHxcblx0XHRcdFx0aWRlbnRpZmljYXRpb25EYXRhRmllbGQ/LkFjdGlvblRhcmdldD8uYW5ub3RhdGlvbnM/LkNvcmU/Lk9wZXJhdGlvbkF2YWlsYWJsZT8udmFsdWVPZigpICE9PSBmYWxzZSlcblx0XHRcdD8gdHJ1ZVxuXHRcdFx0OiBmYWxzZTtcblx0fSkgfHwgW10pIGFzIERhdGFGaWVsZEZvckFjdGlvblR5cGVzW107XG59XG5cbi8qKlxuICogUmV0cmlldmUgYWxsIHRoZSBJQk4gYWN0aW9ucyBmb3IgdGhlIGlkZW50aWZpY2F0aW9uIGFubm90YXRpb24uXG4gKiBUaGV5IG11c3QgYmVcbiAqIC0gTm90IHN0YXRpY2FsbHkgaGlkZGVuLlxuICpcbiAqIEBwYXJhbSBlbnRpdHlUeXBlIFRoZSBjdXJyZW50IGVudGl0eXR5cGVcbiAqIEBwYXJhbSBpc0RldGVybWluaW5nQWN0aW9uIFdoZXRoZXIgb3Igbm90IHRoZSBhY3Rpb24gc2hvdWxkIGJlIGRldGVybWluaW5nXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBkYXRhIGZpZWxkIGZvciBhY3Rpb24gcmVzcGVjdGluZyB0aGUgaXNEZXRlcm1pbmluZ0FjdGlvbiBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0SWRlbnRpZmljYXRpb25EYXRhRmllbGRGb3JJQk5BY3Rpb25zKFxuXHRlbnRpdHlUeXBlOiBFbnRpdHlUeXBlLFxuXHRpc0RldGVybWluaW5nQWN0aW9uOiBib29sZWFuXG4pOiBEYXRhRmllbGRGb3JJbnRlbnRCYXNlZE5hdmlnYXRpb25UeXBlc1tdIHtcblx0cmV0dXJuIChlbnRpdHlUeXBlLmFubm90YXRpb25zPy5VST8uSWRlbnRpZmljYXRpb24/LmZpbHRlcigoaWRlbnRpZmljYXRpb25EYXRhRmllbGQpID0+IHtcblx0XHRyZXR1cm4gaWRlbnRpZmljYXRpb25EYXRhRmllbGQuYW5ub3RhdGlvbnM/LlVJPy5IaWRkZW4/LnZhbHVlT2YoKSAhPT0gdHJ1ZSAmJlxuXHRcdFx0aWRlbnRpZmljYXRpb25EYXRhRmllbGQuJFR5cGUgPT09IFVJQW5ub3RhdGlvblR5cGVzLkRhdGFGaWVsZEZvckludGVudEJhc2VkTmF2aWdhdGlvbiAmJlxuXHRcdFx0Qm9vbGVhbihpZGVudGlmaWNhdGlvbkRhdGFGaWVsZC5EZXRlcm1pbmluZz8udmFsdWVPZigpKSA9PT0gaXNEZXRlcm1pbmluZ0FjdGlvblxuXHRcdFx0PyB0cnVlXG5cdFx0XHQ6IGZhbHNlO1xuXHR9KSB8fCBbXSkgYXMgRGF0YUZpZWxkRm9ySW50ZW50QmFzZWROYXZpZ2F0aW9uVHlwZXNbXTtcbn1cblxuZXhwb3J0IGNvbnN0IElNUE9SVEFOVF9DUklUSUNBTElUSUVTID0gW1xuXHRcIlVJLkNyaXRpY2FsaXR5VHlwZS9WZXJ5UG9zaXRpdmVcIixcblx0XCJVSS5Dcml0aWNhbGl0eVR5cGUvUG9zaXRpdmVcIixcblx0XCJVSS5Dcml0aWNhbGl0eVR5cGUvTmVnYXRpdmVcIixcblx0XCJVSS5Dcml0aWNhbGl0eVR5cGUvVmVyeU5lZ2F0aXZlXCJcbl07XG5cbi8qKlxuICogTWV0aG9kIHRvIGRldGVybWluZSB0aGUgJ3Zpc2libGUnIHByb3BlcnR5IGJpbmRpbmcgZm9yIHRoZSBEZWxldGUgYnV0dG9uIG9uIGFuIG9iamVjdCBwYWdlLlxuICpcbiAqIEBwYXJhbSBjb252ZXJ0ZXJDb250ZXh0IEluc3RhbmNlIG9mIHRoZSBjb252ZXJ0ZXIgY29udGV4dC5cbiAqIEBwYXJhbSBkZWxldGVIaWRkZW4gVGhlIHZhbHVlIG9mIHRoZSBVSS5EZWxldGVIaWRkZW4gYW5ub3RhdGlvbiBvbiB0aGUgZW50aXR5IHNldCAvIHR5cGUuXG4gKiBAcmV0dXJucyBUaGUgYmluZGluZyBleHByZXNzaW9uIGZvciB0aGUgJ3Zpc2libGUnIHByb3BlcnR5IG9mIHRoZSBEZWxldGUgYnV0dG9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVsZXRlQnV0dG9uVmlzaWJpbGl0eShcblx0Y29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCxcblx0ZGVsZXRlSGlkZGVuOiBQcm9wZXJ0eUFubm90YXRpb25WYWx1ZTxib29sZWFuPiB8IHVuZGVmaW5lZFxuKTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGJvb2xlYW4+IHtcblx0Y29uc3QgZGF0YU1vZGVsT2JqZWN0UGF0aCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0RGF0YU1vZGVsT2JqZWN0UGF0aCgpLFxuXHRcdHZpc2l0ZWROYXZpZ2F0aW9uUGF0aHMgPSBkYXRhTW9kZWxPYmplY3RQYXRoLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLm1hcCgobmF2UHJvcCkgPT4gbmF2UHJvcC5uYW1lKSxcblx0XHQvLyBTZXQgYWJzb2x1dGUgYmluZGluZyBwYXRoIGZvciBTaW5nbGV0b24gcmVmZXJlbmNlcywgb3RoZXJ3aXNlIHRoZSBjb25maWd1cmVkIGFubm90YXRpb24gcGF0aCBpdHNlbGYuXG5cdFx0Ly8gRm9yIGUuZy4gL2NvbS5zYXAubmFtZXNwYWNlLkVudGl0eUNvbnRhaW5lci9TaW5nbGV0b24vUHJvcGVydHkgdG8gL1NpbmdsZXRvbi9Qcm9wZXJ0eVxuXHRcdGRlbGV0ZUhpZGRlbkV4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxib29sZWFuIHwgdW5kZWZpbmVkPiA9IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihcblx0XHRcdGRlbGV0ZUhpZGRlbixcblx0XHRcdHZpc2l0ZWROYXZpZ2F0aW9uUGF0aHMsXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHQocGF0aDogc3RyaW5nKSA9PiBzaW5nbGV0b25QYXRoVmlzaXRvcihwYXRoLCBjb252ZXJ0ZXJDb250ZXh0LmdldENvbnZlcnRlZFR5cGVzKCksIFtdKVxuXHRcdCksXG5cdFx0bWFuaWZlc3RXcmFwcGVyID0gY29udmVydGVyQ29udGV4dC5nZXRNYW5pZmVzdFdyYXBwZXIoKSxcblx0XHR2aWV3TGV2ZWwgPSBtYW5pZmVzdFdyYXBwZXIuZ2V0Vmlld0xldmVsKCksXG5cdFx0Ly8gRGVsZXRlIGJ1dHRvbiBpcyB2aXNpYmxlXG5cdFx0Ly8gSW4gT1AgXHRcdC0tPiAgd2hlbiBub3QgaW4gZWRpdCBtb2RlXG5cdFx0Ly8gSW4gc3ViLU9QIFx0LS0+ICB3aGVuIGluIGVkaXQgbW9kZVxuXHRcdGVkaXRhYmxlRXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGJvb2xlYW4+ID0gdmlld0xldmVsID4gMSA/IFVJLklzRWRpdGFibGUgOiBub3QoVUkuSXNFZGl0YWJsZSk7XG5cblx0Ly8gSWYgVUkuRGVsZXRlSGlkZGVuIGFubm90YXRpb24gb24gZW50aXR5IHNldCBvciB0eXBlIGlzIGVpdGhlciBub3QgZGVmaW5lZCBvciBleHBsaWNpdGx5IHNldCB0byBmYWxzZSxcblx0Ly8gRGVsZXRlIGJ1dHRvbiBpcyB2aXNpYmxlIGJhc2VkIG9uIGVkaXRhYmxlRXhwcmVzc2lvbi5cblx0Ly8gZWxzZSxcblx0Ly8gRGVsZXRlIGJ1dHRvbiBpcyB2aXNpYmxlIGJhc2VkIG9uIGJvdGggYW5ub3RhdGlvbiBwYXRoIGFuZCBlZGl0YWJsZUV4cHJlc3Npb24uXG5cdHJldHVybiBpZkVsc2UoXG5cdFx0ZGVsZXRlSGlkZGVuID09PSB1bmRlZmluZWQgfHwgZGVsZXRlSGlkZGVuLnZhbHVlT2YoKSA9PT0gZmFsc2UsXG5cdFx0ZWRpdGFibGVFeHByZXNzaW9uLFxuXHRcdGFuZChlZGl0YWJsZUV4cHJlc3Npb24sIGVxdWFsKGRlbGV0ZUhpZGRlbkV4cHJlc3Npb24sIGZhbHNlKSlcblx0KTtcbn1cblxuLyoqXG4gKiBNZXRob2QgdG8gZGV0ZXJtaW5lIHRoZSAnZW5hYmxlZCcgcHJvcGVydHkgYmluZGluZyBmb3IgdGhlIERlbGV0ZSBidXR0b24gb24gYW4gb2JqZWN0IHBhZ2UuXG4gKlxuICogQHBhcmFtIGlzRGVsZXRhYmxlIFRoZSBkZWxldGUgcmVzdHJpY3Rpb24gY29uZmlndXJlZFxuICogQHBhcmFtIGlzUGFyZW50RGVsZXRhYmxlIFRoZSBkZWxldGUgcmVzdHJpY3Rpb24gY29uZmlndXJlZCBvbiB0aGUgcGFyZW50IGVudGl0eVxuICogQHBhcmFtIGNvbnZlcnRlckNvbnRleHRcbiAqIEByZXR1cm5zIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gZm9yIHRoZSAnZW5hYmxlZCcgcHJvcGVydHkgb2YgdGhlIERlbGV0ZSBidXR0b25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlbGV0ZUJ1dHRvbkVuYWJsZWQoXG5cdGlzRGVsZXRhYmxlOiBQcm9wZXJ0eUFubm90YXRpb25WYWx1ZTxCb29sZWFuPiB8IHVuZGVmaW5lZCxcblx0aXNQYXJlbnREZWxldGFibGU6IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxib29sZWFuPixcblx0Y29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dFxuKTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGJvb2xlYW4+IHtcblx0Y29uc3QgZW50aXR5U2V0ID0gY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlTZXQoKSxcblx0XHRpc0RyYWZ0Um9vdCA9IE1vZGVsSGVscGVyLmlzRHJhZnRSb290KGVudGl0eVNldCk7XG5cblx0bGV0IHJldCA9IGlmRWxzZShcblx0XHRpc1BhcmVudERlbGV0YWJsZSAhPT0gdW5kZWZpbmVkLFxuXHRcdGlzUGFyZW50RGVsZXRhYmxlLFxuXHRcdGlmRWxzZShpc0RlbGV0YWJsZSAhPT0gdW5kZWZpbmVkLCBlcXVhbChnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oaXNEZWxldGFibGUpLCB0cnVlKSwgY29uc3RhbnQodHJ1ZSkpXG5cdCk7XG5cblx0Ly8gZGVsZXRlIHNob3VsZCBiZSBkaXNhYmxlZCBmb3IgTG9ja2VkIG9iamVjdHNcblx0cmV0ID0gaXNEcmFmdFJvb3QgPyBhbmQocmV0LCBub3QocGF0aEluTW9kZWwoXCJEcmFmdEFkbWluaXN0cmF0aXZlRGF0YS9JblByb2Nlc3NCeVVzZXJcIikpKSA6IHJldDtcblxuXHRyZXR1cm4gcmV0O1xufVxuXG4vKipcbiAqIE1ldGhvZCB0byBkZXRlcm1pbmUgdGhlICd2aXNpYmxlJyBwcm9wZXJ0eSBiaW5kaW5nIGZvciB0aGUgRWRpdCBidXR0b24gb24gYW4gb2JqZWN0IHBhZ2UuXG4gKlxuICogQHBhcmFtIGNvbnZlcnRlckNvbnRleHQgSW5zdGFuY2Ugb2YgdGhlIGNvbnZlcnRlciBjb250ZXh0LlxuICogQHBhcmFtIHJvb3RVcGRhdGVIaWRkZW4gVGhlIHZhbHVlIG9mIHRoZSBVSS5VcGRhdGVIaWRkZW4gYW5ub3RhdGlvbiBvbiB0aGUgZW50aXR5IHNldCAvIHR5cGUuXG4gKiBAcGFyYW0gcm9vdENvbnZlcnRlckNvbnRleHRcbiAqIEBwYXJhbSB1cGRhdGVIaWRkZW5cbiAqIEBwYXJhbSB2aWV3TGV2ZWxcbiAqIEByZXR1cm5zIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gZm9yIHRoZSAndmlzaWJsZScgcHJvcGVydHkgb2YgdGhlIEVkaXQgYnV0dG9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RWRpdEJ1dHRvblZpc2liaWxpdHkoXG5cdGNvbnZlcnRlckNvbnRleHQ6IENvbnZlcnRlckNvbnRleHQsXG5cdHJvb3RVcGRhdGVIaWRkZW46IFByb3BlcnR5QW5ub3RhdGlvblZhbHVlPGJvb2xlYW4+IHwgdW5kZWZpbmVkLFxuXHRyb290Q29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCxcblx0dXBkYXRlSGlkZGVuPzogUHJvcGVydHlBbm5vdGF0aW9uVmFsdWU8Ym9vbGVhbj4gfCB1bmRlZmluZWQsXG5cdHZpZXdMZXZlbD86IG51bWJlciB8IHVuZGVmaW5lZFxuKTogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGJvb2xlYW4+IHtcblx0Y29uc3Qgcm9vdEVudGl0eVNldCA9IHJvb3RDb252ZXJ0ZXJDb250ZXh0Py5nZXRFbnRpdHlTZXQoKSxcblx0XHRlbnRpdHlTZXQgPSBjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVNldCgpLFxuXHRcdGlzRkNMRW5hYmxlZCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0TWFuaWZlc3RXcmFwcGVyKCkuaXNGY2xFbmFibGVkKCk7XG5cdGxldCBpc0RyYWZ0RW5hYmxlZDtcblx0Y29uc3Qgcm9vdFVwZGF0ZUhpZGRlbkV4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxib29sZWFuIHwgdW5kZWZpbmVkPiA9IGdldEhpZGRlbkV4cHJlc3Npb24oXG5cdFx0cm9vdENvbnZlcnRlckNvbnRleHQsXG5cdFx0cm9vdFVwZGF0ZUhpZGRlblxuXHQpO1xuXHRpZiAodmlld0xldmVsICYmIHZpZXdMZXZlbCA+IDEpIHtcblx0XHQvLyBpZiB2aWV3bGV2ZWwgPiAxIGNoZWNrIGlmIG5vZGUgaXMgZHJhZnQgZW5hYmxlZFxuXHRcdGlzRHJhZnRFbmFibGVkID0gTW9kZWxIZWxwZXIuaXNEcmFmdE5vZGUoZW50aXR5U2V0KTtcblx0fSBlbHNlIHtcblx0XHRpc0RyYWZ0RW5hYmxlZCA9IE1vZGVsSGVscGVyLmlzRHJhZnRSb290KHJvb3RFbnRpdHlTZXQpO1xuXHR9XG5cdGNvbnN0IHVwZGF0ZUhpZGRlbkV4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxib29sZWFuIHwgdW5kZWZpbmVkPiA9IGdldEhpZGRlbkV4cHJlc3Npb24ocm9vdENvbnZlcnRlckNvbnRleHQsIHVwZGF0ZUhpZGRlbik7XG5cblx0Y29uc3Qgbm90RWRpdGFibGVFeHByZXNzaW9uOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248Ym9vbGVhbj4gPSBub3QoVUkuSXNFZGl0YWJsZSk7XG5cblx0Ly8gSWYgVUkuVXBkYXRlSGlkZGVuIGFubm90YXRpb24gb24gZW50aXR5IHNldCBvciB0eXBlIGlzIGVpdGhlciBub3QgZGVmaW5lZCBvciBleHBsaWNpdGx5IHNldCB0byBmYWxzZSxcblx0Ly8gRWRpdCBidXR0b24gaXMgdmlzaWJsZSBpbiBkaXNwbGF5IG1vZGUuXG5cdC8vIGVsc2UsXG5cdC8vIEVkaXQgYnV0dG9uIGlzIHZpc2libGUgYmFzZWQgb24gYm90aCBhbm5vdGF0aW9uIHBhdGggYW5kIGluIGRpc3BsYXkgbW9kZS5cblx0Y29uc3QgcmVzdWx0YW50RXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGJvb2xlYW4+ID0gaWZFbHNlKFxuXHRcdCh2aWV3TGV2ZWwgYXMgbnVtYmVyKSA+IDEsXG5cdFx0aWZFbHNlKFxuXHRcdFx0dXBkYXRlSGlkZGVuID09PSB1bmRlZmluZWQgfHwgdXBkYXRlSGlkZGVuLnZhbHVlT2YoKSA9PT0gZmFsc2UsXG5cdFx0XHRhbmQoXG5cdFx0XHRcdG5vdEVkaXRhYmxlRXhwcmVzc2lvbixcblx0XHRcdFx0ZXF1YWwocGF0aEluTW9kZWwoXCJyb290RWRpdFZpc2libGVcIiwgXCJpbnRlcm5hbFwiKSwgdHJ1ZSksXG5cdFx0XHRcdGlmRWxzZShpc0ZDTEVuYWJsZWQsIGVxdWFsKHBhdGhJbk1vZGVsKFwiL3Nob3dFZGl0QnV0dG9uXCIsIFwiZmNsaGVscGVyXCIpLCB0cnVlKSwgdHJ1ZSlcblx0XHRcdCksXG5cdFx0XHRhbmQoXG5cdFx0XHRcdG5vdEVkaXRhYmxlRXhwcmVzc2lvbixcblx0XHRcdFx0ZXF1YWwodXBkYXRlSGlkZGVuRXhwcmVzc2lvbiwgZmFsc2UpLFxuXHRcdFx0XHRlcXVhbChwYXRoSW5Nb2RlbChcInJvb3RFZGl0VmlzaWJsZVwiLCBcImludGVybmFsXCIpLCB0cnVlKSxcblx0XHRcdFx0aWZFbHNlKGlzRkNMRW5hYmxlZCwgZXF1YWwocGF0aEluTW9kZWwoXCIvc2hvd0VkaXRCdXR0b25cIiwgXCJmY2xoZWxwZXJcIiksIHRydWUpLCB0cnVlKVxuXHRcdFx0KVxuXHRcdCksXG5cdFx0aWZFbHNlKFxuXHRcdFx0cm9vdFVwZGF0ZUhpZGRlbiA9PT0gdW5kZWZpbmVkIHx8IHJvb3RVcGRhdGVIaWRkZW4udmFsdWVPZigpID09PSBmYWxzZSxcblx0XHRcdG5vdEVkaXRhYmxlRXhwcmVzc2lvbixcblx0XHRcdGFuZChub3RFZGl0YWJsZUV4cHJlc3Npb24sIGVxdWFsKHJvb3RVcGRhdGVIaWRkZW5FeHByZXNzaW9uLCBmYWxzZSkpXG5cdFx0KVxuXHQpO1xuXHRyZXR1cm4gaWZFbHNlKGlzRHJhZnRFbmFibGVkLCBhbmQocmVzdWx0YW50RXhwcmVzc2lvbiwgRHJhZnQuSGFzTm9EcmFmdEZvckN1cnJlbnRVc2VyKSwgcmVzdWx0YW50RXhwcmVzc2lvbik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIaWRkZW5FeHByZXNzaW9uKGNvbnZlcnRlckNvbnRleHQ6IENvbnZlcnRlckNvbnRleHQsIHVwZGF0ZUhpZGRlbjogUHJvcGVydHlBbm5vdGF0aW9uVmFsdWU8Ym9vbGVhbj4gfCB1bmRlZmluZWQpIHtcblx0Y29uc3QgZGF0YU1vZGVsT2JqZWN0UGF0aCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0RGF0YU1vZGVsT2JqZWN0UGF0aCgpLFxuXHRcdHZpc2l0ZWROYXZpZ2F0aW9uUGF0aHMgPSBkYXRhTW9kZWxPYmplY3RQYXRoLm5hdmlnYXRpb25Qcm9wZXJ0aWVzLm1hcCgobmF2UHJvcCkgPT4gbmF2UHJvcC5uYW1lKSxcblx0XHQvLyBTZXQgYWJzb2x1dGUgYmluZGluZyBwYXRoIGZvciBTaW5nbGV0b24gcmVmZXJlbmNlcywgb3RoZXJ3aXNlIHRoZSBjb25maWd1cmVkIGFubm90YXRpb24gcGF0aCBpdHNlbGYuXG5cdFx0Ly8gRm9yIGUuZy4gL2NvbS5zYXAubmFtZXNwYWNlLkVudGl0eUNvbnRhaW5lci9TaW5nbGV0b24vUHJvcGVydHkgdG8gL1NpbmdsZXRvbi9Qcm9wZXJ0eVxuXHRcdHVwZGF0ZUhpZGRlbkV4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxib29sZWFuIHwgdW5kZWZpbmVkPiA9IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihcblx0XHRcdHVwZGF0ZUhpZGRlbixcblx0XHRcdHZpc2l0ZWROYXZpZ2F0aW9uUGF0aHMsXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHQocGF0aDogc3RyaW5nKSA9PiBzaW5nbGV0b25QYXRoVmlzaXRvcihwYXRoLCBjb252ZXJ0ZXJDb250ZXh0LmdldENvbnZlcnRlZFR5cGVzKCksIHZpc2l0ZWROYXZpZ2F0aW9uUGF0aHMpXG5cdFx0KTtcblx0cmV0dXJuIHVwZGF0ZUhpZGRlbkV4cHJlc3Npb247XG59XG4vKipcbiAqIE1ldGhvZCB0byBkZXRlcm1pbmUgdGhlICdlbmFibGVkJyBwcm9wZXJ0eSBiaW5kaW5nIGZvciB0aGUgRWRpdCBidXR0b24gb24gYW4gb2JqZWN0IHBhZ2UuXG4gKlxuICogQHBhcmFtIGNvbnZlcnRlckNvbnRleHQgSW5zdGFuY2Ugb2YgdGhlIGNvbnZlcnRlciBjb250ZXh0LlxuICogQHBhcmFtIHVwZGF0ZVJlc3RyaWN0aW9uc1xuICogQHBhcmFtIHZpZXdMZXZlbFxuICogQHJldHVybnMgVGhlIGJpbmRpbmcgZXhwcmVzc2lvbiBmb3IgdGhlICdlbmFibGVkJyBwcm9wZXJ0eSBvZiB0aGUgRWRpdCBidXR0b24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRFZGl0QnV0dG9uRW5hYmxlZChcblx0Y29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCxcblx0dXBkYXRlUmVzdHJpY3Rpb25zPzogYW55LFxuXHR2aWV3TGV2ZWw/OiBudW1iZXIgfCB1bmRlZmluZWRcbik6IENvbXBpbGVkQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uIHtcblx0Y29uc3QgZW50aXR5U2V0ID0gY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlTZXQoKSxcblx0XHRpc0RyYWZ0Um9vdCA9IE1vZGVsSGVscGVyLmlzRHJhZnRSb290KGVudGl0eVNldCksXG5cdFx0aXNTdGlja3kgPSBNb2RlbEhlbHBlci5pc1N0aWNreShlbnRpdHlTZXQpO1xuXHRsZXQgZWRpdEFjdGlvbk5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcblx0aWYgKGlzRHJhZnRSb290ICYmIGlzRW50aXR5U2V0KGVudGl0eVNldCkpIHtcblx0XHRlZGl0QWN0aW9uTmFtZSA9IGVudGl0eVNldC5hbm5vdGF0aW9ucy5Db21tb24/LkRyYWZ0Um9vdD8uRWRpdEFjdGlvbiBhcyBzdHJpbmc7XG5cdH0gZWxzZSBpZiAoaXNTdGlja3kgJiYgaXNFbnRpdHlTZXQoZW50aXR5U2V0KSkge1xuXHRcdGVkaXRBY3Rpb25OYW1lID0gZW50aXR5U2V0LmFubm90YXRpb25zLlNlc3Npb24/LlN0aWNreVNlc3Npb25TdXBwb3J0ZWQ/LkVkaXRBY3Rpb24gYXMgc3RyaW5nO1xuXHR9XG5cdGlmIChlZGl0QWN0aW9uTmFtZSkge1xuXHRcdGNvbnN0IGVkaXRBY3Rpb25Bbm5vdGF0aW9uUGF0aCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0QWJzb2x1dGVBbm5vdGF0aW9uUGF0aChlZGl0QWN0aW9uTmFtZSk7XG5cdFx0Y29uc3QgZWRpdEFjdGlvbiA9IGNvbnZlcnRlckNvbnRleHQucmVzb2x2ZUFic29sdXRlUGF0aChlZGl0QWN0aW9uQW5ub3RhdGlvblBhdGgpLnRhcmdldCBhcyBBY3Rpb24gfCBudWxsO1xuXHRcdGlmIChlZGl0QWN0aW9uPy5hbm5vdGF0aW9ucz8uQ29yZT8uT3BlcmF0aW9uQXZhaWxhYmxlID09PSBudWxsKSB7XG5cdFx0XHQvLyBXZSBkaXNhYmxlZCBhY3Rpb24gYWR2ZXJ0aXNlbWVudCBidXQga2VwdCBpdCBpbiB0aGUgY29kZSBmb3IgdGhlIHRpbWUgYmVpbmdcblx0XHRcdC8vcmV0dXJuIFwiez0gJHsjXCIgKyBlZGl0QWN0aW9uTmFtZSArIFwifSA/IHRydWUgOiBmYWxzZSB9XCI7XG5cdFx0fSBlbHNlIGlmICgodmlld0xldmVsIGFzIG51bWJlcikgPiAxKSB7XG5cdFx0XHQvLyBFZGl0IGJ1dHRvbiBpcyBlbmFibGVkIGJhc2VkIG9uIHRoZSB1cGRhdGUgcmVzdHJpY3Rpb25zIG9mIHRoZSBzdWItT1Bcblx0XHRcdGlmICh1cGRhdGVSZXN0cmljdGlvbnMgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gY29tcGlsZUV4cHJlc3Npb24oXG5cdFx0XHRcdFx0YW5kKFxuXHRcdFx0XHRcdFx0ZXF1YWwoZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKHVwZGF0ZVJlc3RyaWN0aW9ucyksIHRydWUpLFxuXHRcdFx0XHRcdFx0ZXF1YWwocGF0aEluTW9kZWwoXCJyb290RWRpdEVuYWJsZWRcIiwgXCJpbnRlcm5hbFwiKSwgdHJ1ZSlcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29tcGlsZUV4cHJlc3Npb24oZXF1YWwocGF0aEluTW9kZWwoXCJyb290RWRpdEVuYWJsZWRcIiwgXCJpbnRlcm5hbFwiKSwgdHJ1ZSkpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZ2V0RW5hYmxlZEZvckFubm90YXRpb25BY3Rpb24oY29udmVydGVyQ29udGV4dCwgZWRpdEFjdGlvbiA/PyB1bmRlZmluZWQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gXCJ0cnVlXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIZWFkZXJEZWZhdWx0QWN0aW9ucyhjb252ZXJ0ZXJDb250ZXh0OiBDb252ZXJ0ZXJDb250ZXh0KTogQmFzZUFjdGlvbltdIHtcblx0Y29uc3Qgc0NvbnRleHRQYXRoID0gY29udmVydGVyQ29udGV4dC5nZXRDb250ZXh0UGF0aCgpO1xuXHRjb25zdCByb290RW50aXR5U2V0UGF0aCA9IE1vZGVsSGVscGVyLmdldFJvb3RFbnRpdHlTZXRQYXRoKHNDb250ZXh0UGF0aCk7XG5cdGNvbnN0IHJvb3RDb252ZXJ0ZXJDb250ZXh0ID0gY29udmVydGVyQ29udGV4dC5nZXRDb252ZXJ0ZXJDb250ZXh0Rm9yKFwiL1wiICsgcm9vdEVudGl0eVNldFBhdGgpO1xuXHRjb25zdCBlbnRpdHlTZXQgPSBjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVNldCgpLFxuXHRcdGVudGl0eVR5cGUgPSBjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVR5cGUoKSxcblx0XHRyb290RW50aXR5U2V0ID0gcm9vdENvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5U2V0KCksXG5cdFx0cm9vdEVudGl0eVR5cGUgPSByb290Q29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlUeXBlKCksXG5cdFx0c3RpY2t5U2Vzc2lvblN1cHBvcnRlZCA9IE1vZGVsSGVscGVyLmdldFN0aWNreVNlc3Npb24ocm9vdEVudGl0eVNldCksIC8vZm9yIHN0aWNreSBhcHBcblx0XHRkcmFmdFJvb3QgPSBNb2RlbEhlbHBlci5nZXREcmFmdFJvb3Qocm9vdEVudGl0eVNldCksIC8vZW50aXR5U2V0ICYmIGVudGl0eVNldC5hbm5vdGF0aW9ucy5Db21tb24/LkRyYWZ0Um9vdCxcblx0XHRkcmFmdE5vZGUgPSBNb2RlbEhlbHBlci5nZXREcmFmdE5vZGUocm9vdEVudGl0eVNldCksXG5cdFx0ZW50aXR5RGVsZXRlUmVzdHJpY3Rpb25zID0gZW50aXR5U2V0ICYmIGVudGl0eVNldC5hbm5vdGF0aW9ucz8uQ2FwYWJpbGl0aWVzPy5EZWxldGVSZXN0cmljdGlvbnMsXG5cdFx0cm9vdFVwZGF0ZUhpZGRlbiA9IE1vZGVsSGVscGVyLmlzVXBkYXRlSGlkZGVuKHJvb3RFbnRpdHlTZXQsIHJvb3RFbnRpdHlUeXBlKSxcblx0XHR1cGRhdGVIaWRkZW4gPSByb290RW50aXR5U2V0ICYmIGlzRW50aXR5U2V0KHJvb3RFbnRpdHlTZXQpICYmIHJvb3RVcGRhdGVIaWRkZW4/LnZhbHVlT2YoKSxcblx0XHRkYXRhTW9kZWxPYmplY3RQYXRoID0gY29udmVydGVyQ29udGV4dC5nZXREYXRhTW9kZWxPYmplY3RQYXRoKCksXG5cdFx0aXNQYXJlbnREZWxldGFibGUgPSBpc1BhdGhEZWxldGFibGUoZGF0YU1vZGVsT2JqZWN0UGF0aCwge1xuXHRcdFx0cGF0aFZpc2l0b3I6IChwYXRoOiBzdHJpbmcsIG5hdmlnYXRpb25QYXRoczogc3RyaW5nW10pID0+XG5cdFx0XHRcdHNpbmdsZXRvblBhdGhWaXNpdG9yKHBhdGgsIGNvbnZlcnRlckNvbnRleHQuZ2V0Q29udmVydGVkVHlwZXMoKSwgbmF2aWdhdGlvblBhdGhzKVxuXHRcdH0pLFxuXHRcdHBhcmVudEVudGl0eVNldERlbGV0YWJsZSA9IGlzUGFyZW50RGVsZXRhYmxlID8gY29tcGlsZUV4cHJlc3Npb24oaXNQYXJlbnREZWxldGFibGUpIDogaXNQYXJlbnREZWxldGFibGUsXG5cdFx0aWRlbnRpZmljYXRpb25GaWVsZEZvckFjdGlvbnMgPSBnZXRJZGVudGlmaWNhdGlvbkRhdGFGaWVsZEZvckFjdGlvbnMoY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlUeXBlKCksIGZhbHNlKTtcblxuXHRjb25zdCBjb3B5RGF0YUZpZWxkID1cblx0XHRjb252ZXJ0ZXJDb250ZXh0LmdldE1hbmlmZXN0V3JhcHBlcigpLmdldFZpZXdMZXZlbCgpID09PSAxXG5cdFx0XHQ/IGdldENvcHlBY3Rpb24oXG5cdFx0XHRcdFx0aWRlbnRpZmljYXRpb25GaWVsZEZvckFjdGlvbnMuZmlsdGVyKChkYXRhRmllbGQpID0+IHtcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhRmllbGRJc0NvcHlBY3Rpb24oZGF0YUZpZWxkKTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0ICApXG5cdFx0XHQ6IHVuZGVmaW5lZDtcblxuXHRjb25zdCBoZWFkZXJEYXRhRmllbGRGb3JBY3Rpb25zID0gaWRlbnRpZmljYXRpb25GaWVsZEZvckFjdGlvbnMuZmlsdGVyKChkYXRhRmllbGQpID0+IHtcblx0XHRyZXR1cm4gIWRhdGFGaWVsZElzQ29weUFjdGlvbihkYXRhRmllbGQpO1xuXHR9KTtcblxuXHQvLyBJbml0aWFsaXplIGFjdGlvbnMgYW5kIHN0YXJ0IHdpdGggZHJhZnQgYWN0aW9ucyBpZiBhdmFpbGFibGUgc2luY2UgdGhleSBzaG91bGQgYXBwZWFyIGluIHRoZSBmaXJzdFxuXHQvLyBsZWZ0bW9zdCBwb3NpdGlvbiBpbiB0aGUgYWN0aW9ucyBhcmVhIG9mIHRoZSBPUCBoZWFkZXJcblx0Ly8gVGhpcyBpcyBtb3JlIGxpa2UgYSBwbGFjZWhvbGRlciB0aGFuIGEgc2luZ2xlIGFjdGlvbiwgc2luY2UgdGhpcyBjb250cm9scyBub3Qgb25seSB0aGUgdGVtcGxhdGluZyBvZlxuXHQvLyB0aGUgYnV0dG9uIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiBkcmFmdCBhbmQgYWN0aXZlIGRvY3VtZW50IHZlcnNpb25zIGJ1dCBhbHNvIHRoZSBjb250cm9scyBmb3Jcblx0Ly8gdGhlIGNvbGxhYm9yYXRpdmUgZHJhZnQgZnJhZ21lbnQuXG5cdGNvbnN0IGhlYWRlckFjdGlvbnM6IEJhc2VBY3Rpb25bXSA9IFtdO1xuXHRpZiAoaXNFbnRpdHlTZXQoZW50aXR5U2V0KSAmJiBkcmFmdFJvb3Q/LkVkaXRBY3Rpb24gJiYgdXBkYXRlSGlkZGVuICE9PSB0cnVlKSB7XG5cdFx0aGVhZGVyQWN0aW9ucy5wdXNoKHsgdHlwZTogQWN0aW9uVHlwZS5EcmFmdEFjdGlvbnMsIGtleTogXCJEcmFmdEFjdGlvbnNcIiB9KTtcblx0fVxuXG5cdGNvbnN0IHZpZXdMZXZlbCA9IGNvbnZlcnRlckNvbnRleHQuZ2V0TWFuaWZlc3RXcmFwcGVyKCkuZ2V0Vmlld0xldmVsKCk7XG5cdGNvbnN0IHVwZGF0YWJsZVByb3BlcnR5UGF0aCA9IHZpZXdMZXZlbCA+IDEgPyBlbnRpdHlTZXQ/LmFubm90YXRpb25zLkNhcGFiaWxpdGllcz8uVXBkYXRlUmVzdHJpY3Rpb25zPy5VcGRhdGFibGUgOiB1bmRlZmluZWQ7XG5cdGlmIChkcmFmdFJvb3QgfHwgZHJhZnROb2RlKSB7XG5cdFx0aGVhZGVyQWN0aW9ucy5wdXNoKHsgdHlwZTogQWN0aW9uVHlwZS5Db2xsYWJvcmF0aW9uQXZhdGFycywga2V5OiBcIkNvbGxhYm9yYXRpb25BdmF0YXJzXCIgfSk7XG5cdH1cblx0Ly8gVGhlbiBhZGQgdGhlIFwiQ3JpdGljYWxcIiBEYXRhRmllbGRGb3JBY3Rpb25zXG5cdGhlYWRlckRhdGFGaWVsZEZvckFjdGlvbnNcblx0XHQuZmlsdGVyKChkYXRhRmllbGQpID0+IHtcblx0XHRcdHJldHVybiBJTVBPUlRBTlRfQ1JJVElDQUxJVElFUy5pbmRleE9mKGRhdGFGaWVsZD8uQ3JpdGljYWxpdHkgYXMgc3RyaW5nKSA+IC0xO1xuXHRcdH0pXG5cdFx0LmZvckVhY2goKGRhdGFGaWVsZCkgPT4ge1xuXHRcdFx0aGVhZGVyQWN0aW9ucy5wdXNoKGdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24oZGF0YUZpZWxkLCBjb252ZXJ0ZXJDb250ZXh0KSk7XG5cdFx0fSk7XG5cblx0Ly8gVGhlbiB0aGUgZWRpdCBhY3Rpb24gaWYgaXQgZXhpc3RzXG5cdGlmICgoZHJhZnRSb290Py5FZGl0QWN0aW9uIHx8IHN0aWNreVNlc3Npb25TdXBwb3J0ZWQ/LkVkaXRBY3Rpb24pICYmIHVwZGF0ZUhpZGRlbiAhPT0gdHJ1ZSkge1xuXHRcdGhlYWRlckFjdGlvbnMucHVzaCh7XG5cdFx0XHR0eXBlOiBBY3Rpb25UeXBlLlByaW1hcnksXG5cdFx0XHRrZXk6IFwiRWRpdEFjdGlvblwiLFxuXHRcdFx0dmlzaWJsZTogY29tcGlsZUV4cHJlc3Npb24oXG5cdFx0XHRcdGdldEVkaXRCdXR0b25WaXNpYmlsaXR5KFxuXHRcdFx0XHRcdGNvbnZlcnRlckNvbnRleHQsXG5cdFx0XHRcdFx0cm9vdFVwZGF0ZUhpZGRlbixcblx0XHRcdFx0XHRyb290Q29udmVydGVyQ29udGV4dCxcblx0XHRcdFx0XHRNb2RlbEhlbHBlci5pc1VwZGF0ZUhpZGRlbihlbnRpdHlTZXQsIGVudGl0eVR5cGUpLFxuXHRcdFx0XHRcdHZpZXdMZXZlbFxuXHRcdFx0XHQpXG5cdFx0XHQpLFxuXHRcdFx0ZW5hYmxlZDogZ2V0RWRpdEJ1dHRvbkVuYWJsZWQocm9vdENvbnZlcnRlckNvbnRleHQsIHVwZGF0YWJsZVByb3BlcnR5UGF0aCwgdmlld0xldmVsKVxuXHRcdH0pO1xuXHR9XG5cdC8vIFRoZW4gdGhlIGRlbGV0ZSBhY3Rpb24gaWYgd2UncmUgbm90IHN0YXRpY2FsbHkgbm90IGRlbGV0YWJsZVxuXHRpZiAoXG5cdFx0KHBhcmVudEVudGl0eVNldERlbGV0YWJsZSAmJiBwYXJlbnRFbnRpdHlTZXREZWxldGFibGUgIT09IFwiZmFsc2VcIikgfHxcblx0XHQoZW50aXR5RGVsZXRlUmVzdHJpY3Rpb25zPy5EZWxldGFibGU/LnZhbHVlT2YoKSAhPT0gZmFsc2UgJiYgcGFyZW50RW50aXR5U2V0RGVsZXRhYmxlICE9PSBcImZhbHNlXCIpXG5cdCkge1xuXHRcdGNvbnN0IGRlbGV0ZUhpZGRlbiA9IE1vZGVsSGVscGVyLmdldERlbGV0ZUhpZGRlbihlbnRpdHlTZXQsIGVudGl0eVR5cGUpIGFzIFByb3BlcnR5QW5ub3RhdGlvblZhbHVlPGJvb2xlYW4+O1xuXHRcdGhlYWRlckFjdGlvbnMucHVzaCh7XG5cdFx0XHR0eXBlOiBBY3Rpb25UeXBlLlNlY29uZGFyeSxcblx0XHRcdGtleTogXCJEZWxldGVBY3Rpb25cIixcblx0XHRcdHZpc2libGU6IGNvbXBpbGVFeHByZXNzaW9uKGdldERlbGV0ZUJ1dHRvblZpc2liaWxpdHkoY29udmVydGVyQ29udGV4dCwgZGVsZXRlSGlkZGVuKSksXG5cdFx0XHRlbmFibGVkOiBjb21waWxlRXhwcmVzc2lvbihnZXREZWxldGVCdXR0b25FbmFibGVkKGVudGl0eURlbGV0ZVJlc3RyaWN0aW9ucz8uRGVsZXRhYmxlLCBpc1BhcmVudERlbGV0YWJsZSwgY29udmVydGVyQ29udGV4dCkpLFxuXHRcdFx0cGFyZW50RW50aXR5RGVsZXRlRW5hYmxlZDogcGFyZW50RW50aXR5U2V0RGVsZXRhYmxlXG5cdFx0fSk7XG5cdH1cblxuXHRpZiAoY29weURhdGFGaWVsZCkge1xuXHRcdGhlYWRlckFjdGlvbnMucHVzaCh7XG5cdFx0XHQuLi5nZXREYXRhRmllbGRBbm5vdGF0aW9uQWN0aW9uKGNvcHlEYXRhRmllbGQsIGNvbnZlcnRlckNvbnRleHQpLFxuXHRcdFx0dHlwZTogQWN0aW9uVHlwZS5Db3B5LFxuXHRcdFx0dGV4dDogY29weURhdGFGaWVsZC5MYWJlbD8udG9TdHJpbmcoKSA/PyBDb3JlLmdldExpYnJhcnlSZXNvdXJjZUJ1bmRsZShcInNhcC5mZS5jb3JlXCIpLmdldFRleHQoXCJDX0NPTU1PTl9DT1BZXCIpXG5cdFx0fSk7XG5cdH1cblxuXHRjb25zdCBoZWFkZXJEYXRhRmllbGRGb3JJQk5BY3Rpb25zID0gZ2V0SWRlbnRpZmljYXRpb25EYXRhRmllbGRGb3JJQk5BY3Rpb25zKGNvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5VHlwZSgpLCBmYWxzZSk7XG5cblx0aGVhZGVyRGF0YUZpZWxkRm9ySUJOQWN0aW9uc1xuXHRcdC5maWx0ZXIoKGRhdGFGaWVsZCkgPT4ge1xuXHRcdFx0cmV0dXJuIElNUE9SVEFOVF9DUklUSUNBTElUSUVTLmluZGV4T2YoZGF0YUZpZWxkPy5Dcml0aWNhbGl0eSBhcyBzdHJpbmcpID09PSAtMTtcblx0XHR9KVxuXHRcdC5mb3JFYWNoKChkYXRhRmllbGQpID0+IHtcblx0XHRcdGlmIChkYXRhRmllbGQuUmVxdWlyZXNDb250ZXh0Py52YWx1ZU9mKCkgPT09IHRydWUpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBSZXF1aXJlc0NvbnRleHQgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSB0cnVlIGZvciBoZWFkZXIgSUJOIGFjdGlvbiA6ICR7ZGF0YUZpZWxkLkxhYmVsfWApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRhdGFGaWVsZC5JbmxpbmU/LnZhbHVlT2YoKSA9PT0gdHJ1ZSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYElubGluZSBwcm9wZXJ0eSBzaG91bGQgbm90IGJlIHRydWUgZm9yIGhlYWRlciBJQk4gYWN0aW9uIDogJHtkYXRhRmllbGQuTGFiZWx9YCk7XG5cdFx0XHR9XG5cdFx0XHRjb25zdCBvTmF2aWdhdGlvblBhcmFtcyA9IHtcblx0XHRcdFx0c2VtYW50aWNPYmplY3RNYXBwaW5nOiBnZXRTZW1hbnRpY09iamVjdE1hcHBpbmcoZGF0YUZpZWxkLk1hcHBpbmcpXG5cdFx0XHR9O1xuXG5cdFx0XHRoZWFkZXJBY3Rpb25zLnB1c2goe1xuXHRcdFx0XHR0eXBlOiBBY3Rpb25UeXBlLkRhdGFGaWVsZEZvckludGVudEJhc2VkTmF2aWdhdGlvbixcblx0XHRcdFx0dGV4dDogZGF0YUZpZWxkLkxhYmVsPy50b1N0cmluZygpLFxuXHRcdFx0XHRhbm5vdGF0aW9uUGF0aDogY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlTZXRCYXNlZEFubm90YXRpb25QYXRoKGRhdGFGaWVsZC5mdWxseVF1YWxpZmllZE5hbWUpLFxuXHRcdFx0XHRidXR0b25UeXBlOiBCdXR0b25UeXBlLkdob3N0LFxuXHRcdFx0XHR2aXNpYmxlOiBjb21waWxlRXhwcmVzc2lvbihcblx0XHRcdFx0XHRhbmQoXG5cdFx0XHRcdFx0XHRub3QoZXF1YWwoZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKGRhdGFGaWVsZC5hbm5vdGF0aW9ucz8uVUk/LkhpZGRlbiksIHRydWUpKSxcblx0XHRcdFx0XHRcdG5vdChlcXVhbChwYXRoSW5Nb2RlbChcInNoZWxsTmF2aWdhdGlvbk5vdEF2YWlsYWJsZVwiLCBcImludGVybmFsXCIpLCB0cnVlKSlcblx0XHRcdFx0XHQpXG5cdFx0XHRcdCksXG5cdFx0XHRcdGVuYWJsZWQ6XG5cdFx0XHRcdFx0ZGF0YUZpZWxkLk5hdmlnYXRpb25BdmFpbGFibGUgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHRcdFx0PyBjb21waWxlRXhwcmVzc2lvbihlcXVhbChnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oZGF0YUZpZWxkLk5hdmlnYXRpb25BdmFpbGFibGU/LnZhbHVlT2YoKSksIHRydWUpKVxuXHRcdFx0XHRcdFx0OiB0cnVlLFxuXHRcdFx0XHRrZXk6IEtleUhlbHBlci5nZW5lcmF0ZUtleUZyb21EYXRhRmllbGQoZGF0YUZpZWxkKSxcblx0XHRcdFx0aXNOYXZpZ2FibGU6IHRydWUsXG5cdFx0XHRcdHByZXNzOiBjb21waWxlRXhwcmVzc2lvbihcblx0XHRcdFx0XHRmbihcIi5faW50ZW50QmFzZWROYXZpZ2F0aW9uLm5hdmlnYXRlXCIsIFtcblx0XHRcdFx0XHRcdGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihkYXRhRmllbGQuU2VtYW50aWNPYmplY3QpLFxuXHRcdFx0XHRcdFx0Z2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKGRhdGFGaWVsZC5BY3Rpb24pLFxuXHRcdFx0XHRcdFx0b05hdmlnYXRpb25QYXJhbXNcblx0XHRcdFx0XHRdKVxuXHRcdFx0XHQpLFxuXHRcdFx0XHRjdXN0b21EYXRhOiBjb21waWxlRXhwcmVzc2lvbih7XG5cdFx0XHRcdFx0c2VtYW50aWNPYmplY3Q6IGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihkYXRhRmllbGQuU2VtYW50aWNPYmplY3QpLFxuXHRcdFx0XHRcdGFjdGlvbjogZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKGRhdGFGaWVsZC5BY3Rpb24pXG5cdFx0XHRcdH0pXG5cdFx0XHR9IGFzIEFubm90YXRpb25BY3Rpb24pO1xuXHRcdH0pO1xuXHQvLyBGaW5hbGx5IHRoZSBub24gY3JpdGljYWwgRGF0YUZpZWxkRm9yQWN0aW9uc1xuXHRoZWFkZXJEYXRhRmllbGRGb3JBY3Rpb25zXG5cdFx0LmZpbHRlcigoZGF0YUZpZWxkKSA9PiB7XG5cdFx0XHRyZXR1cm4gSU1QT1JUQU5UX0NSSVRJQ0FMSVRJRVMuaW5kZXhPZihkYXRhRmllbGQ/LkNyaXRpY2FsaXR5IGFzIHN0cmluZykgPT09IC0xO1xuXHRcdH0pXG5cdFx0LmZvckVhY2goKGRhdGFGaWVsZCkgPT4ge1xuXHRcdFx0aGVhZGVyQWN0aW9ucy5wdXNoKGdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24oZGF0YUZpZWxkLCBjb252ZXJ0ZXJDb250ZXh0KSk7XG5cdFx0fSk7XG5cblx0cmV0dXJuIGhlYWRlckFjdGlvbnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRIaWRkZW5IZWFkZXJBY3Rpb25zKGNvbnZlcnRlckNvbnRleHQ6IENvbnZlcnRlckNvbnRleHQpOiBCYXNlQWN0aW9uW10ge1xuXHRjb25zdCBlbnRpdHlUeXBlID0gY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlUeXBlKCk7XG5cdGNvbnN0IGhpZGRlbkFjdGlvbnMgPSAoZW50aXR5VHlwZS5hbm5vdGF0aW9ucz8uVUk/LklkZW50aWZpY2F0aW9uPy5maWx0ZXIoKGlkZW50aWZpY2F0aW9uRGF0YUZpZWxkKSA9PiB7XG5cdFx0cmV0dXJuIGlkZW50aWZpY2F0aW9uRGF0YUZpZWxkPy5hbm5vdGF0aW9ucz8uVUk/LkhpZGRlbj8udmFsdWVPZigpID09PSB0cnVlO1xuXHR9KSB8fCBbXSkgYXMgRGF0YUZpZWxkRm9yQWN0aW9uVHlwZXNbXTtcblx0cmV0dXJuIGhpZGRlbkFjdGlvbnMubWFwKChkYXRhRmllbGQpID0+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0dHlwZTogQWN0aW9uVHlwZS5EZWZhdWx0LFxuXHRcdFx0a2V5OiBLZXlIZWxwZXIuZ2VuZXJhdGVLZXlGcm9tRGF0YUZpZWxkKGRhdGFGaWVsZClcblx0XHR9O1xuXHR9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvb3RlckRlZmF1bHRBY3Rpb25zKHZpZXdMZXZlbDogbnVtYmVyLCBjb252ZXJ0ZXJDb250ZXh0OiBDb252ZXJ0ZXJDb250ZXh0KTogQmFzZUFjdGlvbltdIHtcblx0Y29uc3QgZW50aXR5U2V0ID0gY29udmVydGVyQ29udGV4dC5nZXRFbnRpdHlTZXQoKTtcblx0Y29uc3QgZW50aXR5VHlwZSA9IGNvbnZlcnRlckNvbnRleHQuZ2V0RW50aXR5VHlwZSgpO1xuXHRjb25zdCBzdGlja3lTZXNzaW9uU3VwcG9ydGVkID0gTW9kZWxIZWxwZXIuZ2V0U3RpY2t5U2Vzc2lvbihlbnRpdHlTZXQpLCAvL2ZvciBzdGlja3kgYXBwXG5cdFx0ZW50aXR5U2V0RHJhZnRSb290ID1cblx0XHRcdGlzRW50aXR5U2V0KGVudGl0eVNldCkgJiZcblx0XHRcdChlbnRpdHlTZXQuYW5ub3RhdGlvbnMuQ29tbW9uPy5EcmFmdFJvb3Q/LnRlcm0gPz8gZW50aXR5U2V0LmFubm90YXRpb25zLlNlc3Npb24/LlN0aWNreVNlc3Npb25TdXBwb3J0ZWQ/LnRlcm0pLFxuXHRcdGNvbmRpdGlvblNhdmUgPSBCb29sZWFuKFxuXHRcdFx0ZW50aXR5U2V0RHJhZnRSb290ID09PSBDb21tb25Bbm5vdGF0aW9uVGVybXMuRHJhZnRSb290IHx8IChzdGlja3lTZXNzaW9uU3VwcG9ydGVkICYmIHN0aWNreVNlc3Npb25TdXBwb3J0ZWQ/LlNhdmVBY3Rpb24pXG5cdFx0KSxcblx0XHRjb25kaXRpb25BcHBseSA9IHZpZXdMZXZlbCA+IDEsXG5cdFx0Y29uZGl0aW9uQ2FuY2VsID0gQm9vbGVhbihcblx0XHRcdGVudGl0eVNldERyYWZ0Um9vdCA9PT0gQ29tbW9uQW5ub3RhdGlvblRlcm1zLkRyYWZ0Um9vdCB8fCAoc3RpY2t5U2Vzc2lvblN1cHBvcnRlZCAmJiBzdGlja3lTZXNzaW9uU3VwcG9ydGVkPy5EaXNjYXJkQWN0aW9uKVxuXHRcdCk7XG5cblx0Ly8gUmV0cmlldmUgYWxsIGRldGVybWluaW5nIGFjdGlvbnNcblx0Y29uc3QgZm9vdGVyRGF0YUZpZWxkRm9yQWN0aW9ucyA9IGdldElkZW50aWZpY2F0aW9uRGF0YUZpZWxkRm9yQWN0aW9ucyhjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVR5cGUoKSwgdHJ1ZSk7XG5cblx0Ly8gRmlyc3QgYWRkIHRoZSBcIkNyaXRpY2FsXCIgRGF0YUZpZWxkRm9yQWN0aW9uc1xuXHRjb25zdCBmb290ZXJBY3Rpb25zOiBCYXNlQWN0aW9uW10gPSBmb290ZXJEYXRhRmllbGRGb3JBY3Rpb25zXG5cdFx0LmZpbHRlcigoZGF0YUZpZWxkKSA9PiB7XG5cdFx0XHRyZXR1cm4gSU1QT1JUQU5UX0NSSVRJQ0FMSVRJRVMuaW5kZXhPZihkYXRhRmllbGQ/LkNyaXRpY2FsaXR5IGFzIHN0cmluZykgPiAtMTtcblx0XHR9KVxuXHRcdC5tYXAoKGRhdGFGaWVsZCkgPT4ge1xuXHRcdFx0cmV0dXJuIGdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24oZGF0YUZpZWxkLCBjb252ZXJ0ZXJDb250ZXh0KTtcblx0XHR9KTtcblxuXHQvLyBUaGVuIHRoZSBzYXZlIGFjdGlvbiBpZiBpdCBleGlzdHNcblx0aWYgKGVudGl0eVNldD8uZW50aXR5VHlwZU5hbWUgPT09IGVudGl0eVR5cGU/LmZ1bGx5UXVhbGlmaWVkTmFtZSAmJiBjb25kaXRpb25TYXZlKSB7XG5cdFx0Zm9vdGVyQWN0aW9ucy5wdXNoKHsgdHlwZTogQWN0aW9uVHlwZS5QcmltYXJ5LCBrZXk6IFwiU2F2ZUFjdGlvblwiIH0pO1xuXHR9XG5cblx0Ly8gVGhlbiB0aGUgYXBwbHkgYWN0aW9uIGlmIGl0IGV4aXN0c1xuXHRpZiAoY29uZGl0aW9uQXBwbHkpIHtcblx0XHRmb290ZXJBY3Rpb25zLnB1c2goeyB0eXBlOiBBY3Rpb25UeXBlLkRlZmF1bHRBcHBseSwga2V5OiBcIkFwcGx5QWN0aW9uXCIgfSk7XG5cdH1cblxuXHQvLyBUaGVuIHRoZSBub24gY3JpdGljYWwgRGF0YUZpZWxkRm9yQWN0aW9uc1xuXHRmb290ZXJEYXRhRmllbGRGb3JBY3Rpb25zXG5cdFx0LmZpbHRlcigoZGF0YUZpZWxkKSA9PiB7XG5cdFx0XHRyZXR1cm4gSU1QT1JUQU5UX0NSSVRJQ0FMSVRJRVMuaW5kZXhPZihkYXRhRmllbGQ/LkNyaXRpY2FsaXR5IGFzIHN0cmluZykgPT09IC0xO1xuXHRcdH0pXG5cdFx0LmZvckVhY2goKGRhdGFGaWVsZCkgPT4ge1xuXHRcdFx0Zm9vdGVyQWN0aW9ucy5wdXNoKGdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24oZGF0YUZpZWxkLCBjb252ZXJ0ZXJDb250ZXh0KSk7XG5cdFx0fSk7XG5cblx0Ly8gVGhlbiB0aGUgY2FuY2VsIGFjdGlvbiBpZiBpdCBleGlzdHNcblx0aWYgKGNvbmRpdGlvbkNhbmNlbCkge1xuXHRcdGZvb3RlckFjdGlvbnMucHVzaCh7XG5cdFx0XHR0eXBlOiBBY3Rpb25UeXBlLlNlY29uZGFyeSxcblx0XHRcdGtleTogXCJDYW5jZWxBY3Rpb25cIixcblx0XHRcdHBvc2l0aW9uOiB7IHBsYWNlbWVudDogUGxhY2VtZW50LkVuZCB9XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGZvb3RlckFjdGlvbnM7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFGaWVsZEFubm90YXRpb25BY3Rpb24oZGF0YUZpZWxkOiBEYXRhRmllbGRGb3JBY3Rpb25UeXBlcywgY29udmVydGVyQ29udGV4dDogQ29udmVydGVyQ29udGV4dCk6IEFubm90YXRpb25BY3Rpb24ge1xuXHRyZXR1cm4ge1xuXHRcdHR5cGU6IEFjdGlvblR5cGUuRGF0YUZpZWxkRm9yQWN0aW9uLFxuXHRcdGFubm90YXRpb25QYXRoOiBjb252ZXJ0ZXJDb250ZXh0LmdldEVudGl0eVNldEJhc2VkQW5ub3RhdGlvblBhdGgoZGF0YUZpZWxkLmZ1bGx5UXVhbGlmaWVkTmFtZSksXG5cdFx0a2V5OiBLZXlIZWxwZXIuZ2VuZXJhdGVLZXlGcm9tRGF0YUZpZWxkKGRhdGFGaWVsZCksXG5cdFx0dmlzaWJsZTogY29tcGlsZUV4cHJlc3Npb24obm90KGVxdWFsKGdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbihkYXRhRmllbGQuYW5ub3RhdGlvbnM/LlVJPy5IaWRkZW4pLCB0cnVlKSkpLFxuXHRcdGVuYWJsZWQ6IGdldEVuYWJsZWRGb3JBbm5vdGF0aW9uQWN0aW9uKGNvbnZlcnRlckNvbnRleHQsIGRhdGFGaWVsZC5BY3Rpb25UYXJnZXQpLFxuXHRcdGlzTmF2aWdhYmxlOiB0cnVlXG5cdH0gYXMgQW5ub3RhdGlvbkFjdGlvbjtcbn1cbiJdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBbUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ08sU0FBU0Esb0NBQW9DLENBQUNDLFVBQXNCLEVBQUVDLG1CQUE0QixFQUE2QjtJQUFBO0lBQ3JJLE9BQVEsMEJBQUFELFVBQVUsQ0FBQ0UsV0FBVyxvRkFBdEIsc0JBQXdCQyxFQUFFLHFGQUExQix1QkFBNEJDLGNBQWMsMkRBQTFDLHVCQUE0Q0MsTUFBTSxDQUFFQyx1QkFBdUIsSUFBSztNQUFBO01BQ3ZGLE9BQU8sMEJBQUFBLHVCQUF1QixDQUFDSixXQUFXLG9GQUFuQyxzQkFBcUNDLEVBQUUscUZBQXZDLHVCQUF5Q0ksTUFBTSwyREFBL0MsdUJBQWlEQyxPQUFPLEVBQUUsTUFBSyxJQUFJLElBQ3pFRix1QkFBdUIsQ0FBQ0csS0FBSyxvREFBeUMsSUFDdEVDLE9BQU8sMkJBQUNKLHVCQUF1QixDQUFDSyxXQUFXLDJEQUFuQyx1QkFBcUNILE9BQU8sRUFBRSxDQUFDLEtBQUtQLG1CQUFtQixLQUM5RSwyQkFBQUssdUJBQXVCLENBQUNNLFlBQVkscUZBQXBDLHVCQUFzQ0MsT0FBTywyREFBN0MsdUJBQStDTCxPQUFPLEVBQUUsTUFBSyxJQUFJLElBQ2pFLENBQUFGLHVCQUF1QixhQUF2QkEsdUJBQXVCLGlEQUF2QkEsdUJBQXVCLENBQUVNLFlBQVkscUZBQXJDLHVCQUF1Q1YsV0FBVyxxRkFBbEQsdUJBQW9EWSxJQUFJLHNGQUF4RCx1QkFBMERDLGtCQUFrQiw0REFBNUUsd0JBQThFUCxPQUFPLEVBQUUsTUFBSyxLQUFLLENBQUMsR0FDakcsSUFBSSxHQUNKLEtBQUs7SUFDVCxDQUFDLENBQUMs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