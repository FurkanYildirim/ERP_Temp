/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/base/util/UriParameters", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/ui/core/ws/SapPcpWebSocket"], function (Log, UriParameters, CollaborationCommon, SapPcpWebSocket) {
  "use strict";

  var _exports = {};
  var SUPPORTED_PROTOCOLS = SapPcpWebSocket.SUPPORTED_PROTOCOLS;
  var Activity = CollaborationCommon.Activity;
  const COLLABORATION = "/collaboration";
  const CONNECTED = "/collaboration/connected";
  const CONNECTION = "/collaboration/connection";
  const CURRENTDRAFTID = "/collaboration/DraftID";
  function isCollaborationConnected(internalModel) {
    return !!internalModel.getProperty(CONNECTED);
  }
  _exports.isCollaborationConnected = isCollaborationConnected;
  function initializeCollaboration(user, webSocketBaseURL, draftUUID, serviceUrl, internalModel, receiveCallback) {
    let sendUserInfo = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    if (internalModel.getProperty(CONNECTION)) {
      // A connection is already established
      if (internalModel.getProperty(CURRENTDRAFTID) === draftUUID) {
        // Connection corresponds to the same draft -> nothing to do
        return;
      } else {
        // There was a connection to another draft -> we close it before creating a new one
        // This can happen e.g. when switching between items in FCL
        endCollaboration(internalModel);
      }
    }
    const activeUsers = [user];
    internalModel.setProperty(COLLABORATION, {
      activeUsers: activeUsers,
      activities: {}
    });
    sendUserInfo = sendUserInfo || UriParameters.fromQuery(window.location.search).get("useFLPUser") === "true";
    const webSocket = createWebSocket(user, webSocketBaseURL, draftUUID, serviceUrl, sendUserInfo);
    internalModel.setProperty(CONNECTION, webSocket);
    internalModel.setProperty(CURRENTDRAFTID, draftUUID);
    webSocket.attachMessage(function (event) {
      const message = event.getParameter("pcpFields");
      receiveCallback(message);
    });
    webSocket.attachOpen(function () {
      internalModel.setProperty(CONNECTED, true);
    });
    webSocket.attachError(function () {
      Log.error(`The connection to the websocket channel ${webSocketBaseURL} could not be established`);
      internalModel.setProperty(CONNECTED, false);
    });
    webSocket.attachClose(function () {
      internalModel.setProperty(CONNECTED, false);
    });
  }
  _exports.initializeCollaboration = initializeCollaboration;
  function broadcastCollaborationMessage(action, content, internalModel, triggeredActionName, refreshListBinding, requestedProperties) {
    if (isCollaborationConnected(internalModel)) {
      const webSocket = internalModel.getProperty(CONNECTION);
      webSocket.send("", {
        clientAction: action,
        clientContent: content,
        clientTriggeredActionName: triggeredActionName,
        clientRefreshListBinding: refreshListBinding,
        clientRequestedProperties: requestedProperties
      });
      if (action === Activity.Activate || action === Activity.Discard) {
        endCollaboration(internalModel);
      }
    }
  }
  _exports.broadcastCollaborationMessage = broadcastCollaborationMessage;
  function endCollaboration(internalModel) {
    const webSocket = internalModel.getProperty(CONNECTION);
    webSocket === null || webSocket === void 0 ? void 0 : webSocket.close();
    internalModel.setProperty(COLLABORATION, {});
  }
  _exports.endCollaboration = endCollaboration;
  function createWebSocket(user, socketBaseURL, draftUUID, serviceUrl) {
    let sendUserInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    const hostLocation = window.location;
    let socketURI;

    // Support useBackendUrl for local testing
    const useBackendUrl = UriParameters.fromQuery(window.location.search).get("useBackendUrl");
    if (useBackendUrl) {
      socketURI = useBackendUrl.replace("https", "wss");
    } else {
      socketURI = hostLocation.protocol === "https:" ? "wss:" : "ws:";
      socketURI += `//${hostLocation.host}`;
    }
    socketURI += `${(socketBaseURL.startsWith("/") ? "" : "/") + socketBaseURL}?draft=${draftUUID}&relatedService=${serviceUrl}`;
    if (sendUserInfo) {
      socketURI += `&userID=${encodeURI(user.id)}&userName=${encodeURI(user.initialName || "")}`;
    }
    return new SapPcpWebSocket(socketURI, [SUPPORTED_PROTOCOLS.v10]);
  }
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,