/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define([], function () {
  "use strict";

  var _exports = {};
  /**
   * Indicates that the property shall be declared as an xml attribute that can be used from the outside of the building block.
   *
   * If defining a runtime Building Block, please make sure to use the correct typings: Depending on its metadata,
   * a property can either be a {@link sap.ui.model.Context} (<code>type: 'sap.ui.model.Context'</code>),
   * a constant (<code>bindable: false</code>), or a {@link BindingToolkitExpression} (<code>bindable: true</code>).
   *
   * This decorator should only be used for properties that are to be set from outside or are used in inner XML templating.
   * If you just need simple computed properties, use undecorated, private TypeScript properties.
   *
   * @param attributeDefinition
   * @returns The decorated property
   */
  function blockAttribute(attributeDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = target.constructor.metadata;
      if (attributeDefinition.defaultValue === undefined) {
        var _propertyDescriptor$i;
        // If there is no defaultValue we can take the value from the initializer (natural way of defining defaults)
        attributeDefinition.defaultValue = (_propertyDescriptor$i = propertyDescriptor.initializer) === null || _propertyDescriptor$i === void 0 ? void 0 : _propertyDescriptor$i.call(propertyDescriptor);
      }
      delete propertyDescriptor.initializer;
      if (metadata.properties[propertyKey.toString()] === undefined) {
        metadata.properties[propertyKey.toString()] = attributeDefinition;
      }
      return propertyDescriptor;
    }; // Needed to make TS happy with those decorators;
  }

  /**
   * Decorator for building blocks.
   *
   * This is an alias for @blockAttribute({ type: "function" }).
   *
   * @returns The decorated property
   */
  _exports.blockAttribute = blockAttribute;
  function blockEvent() {
    return blockAttribute({
      type: "function"
    });
  }

  /**
   * Indicates that the property shall be declared as an xml aggregation that can be used from the outside of the building block.
   *
   * @param aggregationDefinition
   * @returns The decorated property
   */
  _exports.blockEvent = blockEvent;
  function blockAggregation(aggregationDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = target.constructor.metadata;
      delete propertyDescriptor.initializer;
      if (metadata.aggregations[propertyKey] === undefined) {
        metadata.aggregations[propertyKey] = aggregationDefinition;
      }
      if (aggregationDefinition.isDefault === true) {
        metadata.defaultAggregation = propertyKey;
      }
      return propertyDescriptor;
    };
  }
  _exports.blockAggregation = blockAggregation;
  function defineBuildingBlock(oBuildingBlockDefinition) {
    return function (classDefinition) {
      const metadata = classDefinition.metadata;
      metadata.namespace = oBuildingBlockDefinition.namespace;
      metadata.publicNamespace = oBuildingBlockDefinition.publicNamespace;
      metadata.name = oBuildingBlockDefinition.name;
      metadata.xmlTag = oBuildingBlockDefinition.xmlTag;
      metadata.fragment = oBuildingBlockDefinition.fragment;
      metadata.designtime = oBuildingBlockDefinition.designtime;
      metadata.isOpen = oBuildingBlockDefinition.isOpen;
    };
  }
  _exports.defineBuildingBlock = defineBuildingBlock;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,