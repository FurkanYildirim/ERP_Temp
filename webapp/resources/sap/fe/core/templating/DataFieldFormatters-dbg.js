/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters"], function (MetaModelConverter, BindingToolkit, DataModelPathHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getConverterContext = UIFormatters.getConverterContext;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var constant = BindingToolkit.constant;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const getDataField = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    let isPath = false;
    if (typeof oContext === "object" && (oContext.hasOwnProperty("$Path") || oContext.hasOwnProperty("$AnnotationPath"))) {
      isPath = true;
    } else if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a DataField object but to a ${oContext.$kind}`);
    }
    let oConverterContext = getConverterContext(oContext, oInterface);
    if (isPath) {
      oConverterContext = oConverterContext.$target;
    }
    return oConverterContext;
  };
  _exports.getDataField = getDataField;
  const getDataFieldObjectPath = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a Property object but to a ${oContext.$kind}`);
    }
    let involvedDataModelObjects = getInvolvedDataModelObjects(oInterface.context);
    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "Path") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject.path);
    }
    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "AnnotationPath") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject);
    }
    if (sPath.endsWith("$Path") || sPath.endsWith("$AnnotationPath")) {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, oContext);
    }
    return involvedDataModelObjects;
  };
  _exports.getDataFieldObjectPath = getDataFieldObjectPath;
  const isSemanticallyConnectedFields = function (oContext, oInterface) {
    const oDataField = getDataField(oContext, oInterface);
    return oDataField.$Type === "com.sap.vocabularies.UI.v1.ConnectedFieldsType";
  };
  _exports.isSemanticallyConnectedFields = isSemanticallyConnectedFields;
  const connectedFieldsTemplateRegex = /(?:({[^}]+})[^{]*)/g;
  const connectedFieldsTemplateSubRegex = /{([^}]+)}(.*)/;
  const getLabelForConnectedFields = function (connectedFieldsPath, getTextBindingExpression) {
    let compileBindingExpression = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const connectedFields = connectedFieldsPath.targetObject;
    // First we separate each group of `{TemplatePart} xxx`
    const templateMatches = connectedFields.Template.toString().match(connectedFieldsTemplateRegex);
    if (!templateMatches) {
      return "";
    }
    const partsToConcat = templateMatches.reduce((subPartsToConcat, match) => {
      // Then for each sub-group, we retrieve the name of the data object and the remaining text, if it exists
      const subMatch = match.match(connectedFieldsTemplateSubRegex);
      if (subMatch && subMatch.length > 1) {
        const targetValue = subMatch[1];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const targetData = connectedFields.Data[targetValue];
        if (targetData) {
          const dataFieldPath = enhanceDataModelPath(connectedFieldsPath,
          // TODO Better type for the Edm.Dictionary
          targetData.fullyQualifiedName.replace(connectedFieldsPath.targetEntityType.fullyQualifiedName, ""));
          dataFieldPath.targetObject = dataFieldPath.targetObject.Value;
          subPartsToConcat.push(getTextBindingExpression(dataFieldPath, {}));
          if (subMatch.length > 2) {
            subPartsToConcat.push(constant(subMatch[2]));
          }
        }
      }
      return subPartsToConcat;
    }, []);
    return compileBindingExpression ? compileExpression(concat(...partsToConcat)) : concat(...partsToConcat);
  };
  _exports.getLabelForConnectedFields = getLabelForConnectedFields;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,