/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/helpers/BindingToolkit", "sap/m/Text", "sap/ui/base/DataType", "sap/ui/core/mvc/EventHandlerResolver"], function (BindingToolkit, Text, DataType, EventHandlerResolver) {
  "use strict";

  var isConstant = BindingToolkit.isConstant;
  var isBindingToolkitExpression = BindingToolkit.isBindingToolkitExpression;
  var compileExpression = BindingToolkit.compileExpression;
  var compileConstant = BindingToolkit.compileConstant;
  const addChildAggregation = function (aggregationChildren, aggregationName, child) {
    if (child === undefined || typeof child === "string") {
      return;
    }
    if (!aggregationChildren[aggregationName]) {
      aggregationChildren[aggregationName] = [];
    }
    if (isChildAnElement(child)) {
      aggregationChildren[aggregationName].push(child);
    } else if (Array.isArray(child)) {
      child.forEach(subChild => {
        addChildAggregation(aggregationChildren, aggregationName, subChild);
      });
    } else {
      Object.keys(child).forEach(childKey => {
        addChildAggregation(aggregationChildren, childKey, child[childKey]);
      });
    }
  };
  const isChildAnElement = function (children) {
    var _isA, _ref;
    return children === null || children === void 0 ? void 0 : (_isA = (_ref = children).isA) === null || _isA === void 0 ? void 0 : _isA.call(_ref, "sap.ui.core.Element");
  };
  const isAControl = function (children) {
    return !!(children !== null && children !== void 0 && children.getMetadata);
  };
  function processAggregations(metadata, mSettings) {
    const metadataAggregations = metadata.getAllAggregations();
    const defaultAggregationName = metadata.getDefaultAggregationName();
    const aggregationChildren = {};
    addChildAggregation(aggregationChildren, defaultAggregationName, mSettings.children);
    delete mSettings.children;
    // find out which aggregation are bound (both in children and directly under it)
    Object.keys(metadataAggregations).forEach(aggregationName => {
      if (aggregationChildren[aggregationName] !== undefined) {
        if (mSettings.hasOwnProperty(aggregationName)) {
          // always use the first item as template according to UI5 logic
          mSettings[aggregationName].template = aggregationChildren[aggregationName][0];
        } else {
          mSettings[aggregationName] = aggregationChildren[aggregationName];
        }
      }
    });
  }

  /**
   * Processes the properties.
   *
   * If the property is a bindingToolkit expression we need to compile it.
   * Else if the property is set as string (compiled binding expression returns string by default even if it's a boolean, int, etc.) and it doesn't match with expected
   * format the value is parsed to provide expected format.
   *
   * @param metadata Metadata of the control
   * @param settings Settings of the control
   * @returns {void}
   */
  function processProperties(metadata, settings) {
    let settingsKey;
    for (settingsKey in settings) {
      const value = settings[settingsKey];
      if (isBindingToolkitExpression(value)) {
        const bindingToolkitExpression = value;
        if (isConstant(bindingToolkitExpression)) {
          settings[settingsKey] = compileConstant(bindingToolkitExpression, false, true, true);
        } else {
          settings[settingsKey] = compileExpression(bindingToolkitExpression);
        }
      } else if (typeof value === "string" && !value.startsWith("{")) {
        var _metadata$getAllPrope, _metadata$getAllPrope2, _metadata$getAllPrope3;
        const propertyType = (_metadata$getAllPrope = metadata.getAllProperties()[settingsKey]) === null || _metadata$getAllPrope === void 0 ? void 0 : (_metadata$getAllPrope2 = (_metadata$getAllPrope3 = _metadata$getAllPrope).getType) === null || _metadata$getAllPrope2 === void 0 ? void 0 : _metadata$getAllPrope2.call(_metadata$getAllPrope3);
        if (propertyType && propertyType instanceof DataType && ["boolean", "int", "float"].indexOf(propertyType.getName()) > -1) {
          settings[settingsKey] = propertyType.parseValue(value);
        }
      }
    }
  }

  /**
   * Processes the command.
   *
   * Resolves the command set on the control via the intrinsic class attribute "jsx:command".
   * If no command has been set or the targeted event doesn't exist, no configuration is set.
   *
   * @param metadata Metadata of the control
   * @param settings Settings of the control
   * @returns {void}
   */
  function processCommand(metadata, settings) {
    const commandProperty = settings["jsx:command"];
    if (commandProperty) {
      const [command, eventName] = commandProperty.split("|");
      const event = metadata.getAllEvents()[eventName];
      if (event && command.startsWith("cmd:")) {
        settings[event.name] = EventHandlerResolver.resolveEventHandler(command);
      }
    }
    delete settings["jsx:command"];
  }
  const jsxControl = function (ControlType, settings, key, jsxContext) {
    let targetControl;
    if (ControlType !== null && ControlType !== void 0 && ControlType.isFragment) {
      targetControl = settings.children;
    } else if (ControlType !== null && ControlType !== void 0 && ControlType.isRuntime) {
      const runtimeBuildingBlock = new ControlType(settings);
      targetControl = runtimeBuildingBlock.getContent(jsxContext.view, jsxContext.appComponent);
    } else if (isAControl(ControlType)) {
      const metadata = ControlType.getMetadata();
      if (key !== undefined) {
        settings["key"] = key;
      }
      processCommand(metadata, settings);
      processAggregations(metadata, settings);
      const classDef = settings.class;
      const refDef = settings.ref;
      delete settings.ref;
      delete settings.class;
      processProperties(metadata, settings);
      targetControl = new ControlType(settings);
      if (classDef) {
        targetControl.addStyleClass(classDef);
      }
      if (refDef) {
        refDef.setCurrent(targetControl);
      }
    } else if (typeof ControlType === "function") {
      const controlTypeFn = ControlType;
      targetControl = controlTypeFn(settings);
    } else {
      targetControl = new Text({
        text: "Missing component " + ControlType
      });
    }
    return targetControl;
  };
  return jsxControl;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,