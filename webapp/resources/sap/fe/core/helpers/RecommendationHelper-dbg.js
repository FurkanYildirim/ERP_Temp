/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define([], function () {
  "use strict";

  var _exports = {};
  const recommendationHelper = {
    /**
     * This function will take recommendation data for a field and sort it in descending order based on probability of the value.
     *
     * @param incompletenessInfo The set of recommended data for a field
     */
    sortRecommendationsData(incompletenessInfo) {
      const recommendationDataSorted = incompletenessInfo.recommendations;
      recommendationDataSorted.sort((param1, param2) => {
        if (param1.probability < param2.probability) {
          return 1;
        } else if (param1.probability > param2.probability) {
          return -1;
        } else {
          return 0;
        }
      });
      const info = incompletenessInfo;
      delete info["recommendations"];
      info.additionalValues = recommendationDataSorted;
    },
    // The incompletenessinfo can be either for direct fields or fields through navigation property.
    // If the property is from the 1:n navigation then the information will be in the form of array of objects, where each object will be data
    // for a specific context in 1:n. The format of data for each object would be similar to that of fields at first level.
    // This may be the scenario for multiple levels i.e. 1:n navigation data inside another 1:n navigation and so on.
    // As we do not know the definite number of levels we use recursion to update data for all properties(for navigation properties as well, the data will
    // be nested but will follow same structure for each field info).
    // For reference of how data will look like, check CustomAction.js -> function setCustomRecommendation
    /**
     * This function will go through entire recommendation data for both direct fields and fields from navigation property and for each field update the recommendation info in descending order.
     * As with our use case we want recommendations that are in the order of probability for given value.
     *
     * @param data Incompleteness info data
     */
    transformRecommendationsForInternalStorage(data) {
      if (data.hasOwnProperty("recommendations")) {
        this.sortRecommendationsData(data);
        return;
      } else if (Array.isArray(data)) {
        // we expect the data in array format for fields from 1:n navigation paths
        data.forEach(dataObj => {
          // for each entry in 1:n navigation we update the 'recommendations' object to sort in descending order of proability
          Object.values(dataObj).forEach(valObj => {
            if (typeof valObj === "object") {
              this.transformRecommendationsForInternalStorage(valObj);
            }
          });
        });
      } else {
        // for direct fields we check for the data value against the given Field and sort its recommendation data
        // from the given information
        Object.values(data).forEach(valObj => {
          if (typeof valObj === "object") {
            this.transformRecommendationsForInternalStorage(valObj);
          }
        });
      }
    }
  };
  _exports.recommendationHelper = recommendationHelper;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWNvbW1lbmRhdGlvbkhlbHBlciIsInNvcnRSZWNvbW1lbmRhdGlvbnNEYXRhIiwiaW5jb21wbGV0ZW5lc3NJbmZvIiwicmVjb21tZW5kYXRpb25EYXRhU29ydGVkIiwicmVjb21tZW5kYXRpb25zIiwic29ydCIsInBhcmFtMSIsInBhcmFtMiIsInByb2JhYmlsaXR5IiwiaW5mbyIsImFkZGl0aW9uYWxWYWx1ZXMiLCJ0cmFuc2Zvcm1SZWNvbW1lbmRhdGlvbnNGb3JJbnRlcm5hbFN0b3JhZ2UiLCJkYXRhIiwiaGFzT3duUHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiZGF0YU9iaiIsIk9iamVjdCIsInZhbHVlcyIsInZhbE9iaiJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiUmVjb21tZW5kYXRpb25IZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgUmVjb21tZW5kYXRpb25EYXRhSW5uZXJPYmplY3RUeXBlID0ge1xuXHR2YWx1ZTogc3RyaW5nIHwgbnVtYmVyO1xuXHRwcm9iYWJpbGl0eTogc3RyaW5nIHwgbnVtYmVyO1xufTtcblxuZXhwb3J0IHR5cGUgUmVjb21tZW5kYXRpb25EYXRhRm9yTmF2UHJvcGVydHlUeXBlID0ge1xuXHRba2V5OiBzdHJpbmddOiBQcm9wZXJ0eUluY29tcGxldGVuZXNzSW5mb1R5cGUgfCBJbnRlcm5hbFByb3BlcnR5QWRkaXRpb25hbFZhbHVlIHwgS2V5UHJvcGVydGllc0RhdGFUeXBlO1xufTtcblxuZXhwb3J0IHR5cGUgS2V5UHJvcGVydGllc0RhdGFUeXBlID0ge1xuXHRba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXI7XG59O1xuXG50eXBlIFByb3BlcnR5SW5jb21wbGV0ZW5lc3NJbmZvVHlwZSA9IHtcblx0cmVjb21tZW5kYXRpb25zOiBSZWNvbW1lbmRhdGlvbkRhdGFJbm5lck9iamVjdFR5cGVbXTtcbn07XG5cbmV4cG9ydCB0eXBlIEludGVybmFsUHJvcGVydHlBZGRpdGlvbmFsVmFsdWUgPSB7XG5cdGFkZGl0aW9uYWxWYWx1ZXM6IFJlY29tbWVuZGF0aW9uRGF0YUlubmVyT2JqZWN0VHlwZVtdO1xuXHRyZWNvbW1lbmRhdGlvbnM/OiBSZWNvbW1lbmRhdGlvbkRhdGFJbm5lck9iamVjdFR5cGVbXTtcbn07XG5cbnR5cGUgQmFzZVN0YXRpY0luY29tcGxldGVuZXNzSW5mbyA9IHtcblx0a2V5UHJvcGVydGllczogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG59O1xuXG50eXBlIEJhc2VEeW5hbWljSW5jb21wbGV0ZW5lc3NJbmZvVHlwZSA9IFJlY29yZDxzdHJpbmcsIFByb3BlcnR5SW5jb21wbGV0ZW5lc3NJbmZvVHlwZSB8IFJlY29tbWVuZGF0aW9uRGF0YUZvck5hdlByb3BlcnR5VHlwZVtdPjtcblxuZXhwb3J0IHR5cGUgSW5Db21wbGV0ZW5lc3NJbmZvVHlwZSA9IEJhc2VTdGF0aWNJbmNvbXBsZXRlbmVzc0luZm8gJiBCYXNlRHluYW1pY0luY29tcGxldGVuZXNzSW5mb1R5cGU7XG5cbmV4cG9ydCBjb25zdCByZWNvbW1lbmRhdGlvbkhlbHBlciA9IHtcblx0LyoqXG5cdCAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0YWtlIHJlY29tbWVuZGF0aW9uIGRhdGEgZm9yIGEgZmllbGQgYW5kIHNvcnQgaXQgaW4gZGVzY2VuZGluZyBvcmRlciBiYXNlZCBvbiBwcm9iYWJpbGl0eSBvZiB0aGUgdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSBpbmNvbXBsZXRlbmVzc0luZm8gVGhlIHNldCBvZiByZWNvbW1lbmRlZCBkYXRhIGZvciBhIGZpZWxkXG5cdCAqL1xuXHRzb3J0UmVjb21tZW5kYXRpb25zRGF0YShpbmNvbXBsZXRlbmVzc0luZm86IFByb3BlcnR5SW5jb21wbGV0ZW5lc3NJbmZvVHlwZSkge1xuXHRcdGNvbnN0IHJlY29tbWVuZGF0aW9uRGF0YVNvcnRlZDogUmVjb21tZW5kYXRpb25EYXRhSW5uZXJPYmplY3RUeXBlW10gPSBpbmNvbXBsZXRlbmVzc0luZm8ucmVjb21tZW5kYXRpb25zO1xuXHRcdHJlY29tbWVuZGF0aW9uRGF0YVNvcnRlZC5zb3J0KChwYXJhbTE6IFJlY29tbWVuZGF0aW9uRGF0YUlubmVyT2JqZWN0VHlwZSwgcGFyYW0yOiBSZWNvbW1lbmRhdGlvbkRhdGFJbm5lck9iamVjdFR5cGUpID0+IHtcblx0XHRcdGlmIChwYXJhbTEucHJvYmFiaWxpdHkgPCBwYXJhbTIucHJvYmFiaWxpdHkpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9IGVsc2UgaWYgKHBhcmFtMS5wcm9iYWJpbGl0eSA+IHBhcmFtMi5wcm9iYWJpbGl0eSkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGNvbnN0IGluZm86IEludGVybmFsUHJvcGVydHlBZGRpdGlvbmFsVmFsdWUgfCBQcm9wZXJ0eUluY29tcGxldGVuZXNzSW5mb1R5cGUgPVxuXHRcdFx0aW5jb21wbGV0ZW5lc3NJbmZvIGFzIEludGVybmFsUHJvcGVydHlBZGRpdGlvbmFsVmFsdWU7XG5cdFx0ZGVsZXRlIGluZm9bXCJyZWNvbW1lbmRhdGlvbnNcIl07XG5cdFx0aW5mby5hZGRpdGlvbmFsVmFsdWVzID0gcmVjb21tZW5kYXRpb25EYXRhU29ydGVkO1xuXHR9LFxuXG5cdC8vIFRoZSBpbmNvbXBsZXRlbmVzc2luZm8gY2FuIGJlIGVpdGhlciBmb3IgZGlyZWN0IGZpZWxkcyBvciBmaWVsZHMgdGhyb3VnaCBuYXZpZ2F0aW9uIHByb3BlcnR5LlxuXHQvLyBJZiB0aGUgcHJvcGVydHkgaXMgZnJvbSB0aGUgMTpuIG5hdmlnYXRpb24gdGhlbiB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSBpbiB0aGUgZm9ybSBvZiBhcnJheSBvZiBvYmplY3RzLCB3aGVyZSBlYWNoIG9iamVjdCB3aWxsIGJlIGRhdGFcblx0Ly8gZm9yIGEgc3BlY2lmaWMgY29udGV4dCBpbiAxOm4uIFRoZSBmb3JtYXQgb2YgZGF0YSBmb3IgZWFjaCBvYmplY3Qgd291bGQgYmUgc2ltaWxhciB0byB0aGF0IG9mIGZpZWxkcyBhdCBmaXJzdCBsZXZlbC5cblx0Ly8gVGhpcyBtYXkgYmUgdGhlIHNjZW5hcmlvIGZvciBtdWx0aXBsZSBsZXZlbHMgaS5lLiAxOm4gbmF2aWdhdGlvbiBkYXRhIGluc2lkZSBhbm90aGVyIDE6biBuYXZpZ2F0aW9uIGFuZCBzbyBvbi5cblx0Ly8gQXMgd2UgZG8gbm90IGtub3cgdGhlIGRlZmluaXRlIG51bWJlciBvZiBsZXZlbHMgd2UgdXNlIHJlY3Vyc2lvbiB0byB1cGRhdGUgZGF0YSBmb3IgYWxsIHByb3BlcnRpZXMoZm9yIG5hdmlnYXRpb24gcHJvcGVydGllcyBhcyB3ZWxsLCB0aGUgZGF0YSB3aWxsXG5cdC8vIGJlIG5lc3RlZCBidXQgd2lsbCBmb2xsb3cgc2FtZSBzdHJ1Y3R1cmUgZm9yIGVhY2ggZmllbGQgaW5mbykuXG5cdC8vIEZvciByZWZlcmVuY2Ugb2YgaG93IGRhdGEgd2lsbCBsb29rIGxpa2UsIGNoZWNrIEN1c3RvbUFjdGlvbi5qcyAtPiBmdW5jdGlvbiBzZXRDdXN0b21SZWNvbW1lbmRhdGlvblxuXHQvKipcblx0ICogVGhpcyBmdW5jdGlvbiB3aWxsIGdvIHRocm91Z2ggZW50aXJlIHJlY29tbWVuZGF0aW9uIGRhdGEgZm9yIGJvdGggZGlyZWN0IGZpZWxkcyBhbmQgZmllbGRzIGZyb20gbmF2aWdhdGlvbiBwcm9wZXJ0eSBhbmQgZm9yIGVhY2ggZmllbGQgdXBkYXRlIHRoZSByZWNvbW1lbmRhdGlvbiBpbmZvIGluIGRlc2NlbmRpbmcgb3JkZXIuXG5cdCAqIEFzIHdpdGggb3VyIHVzZSBjYXNlIHdlIHdhbnQgcmVjb21tZW5kYXRpb25zIHRoYXQgYXJlIGluIHRoZSBvcmRlciBvZiBwcm9iYWJpbGl0eSBmb3IgZ2l2ZW4gdmFsdWUuXG5cdCAqXG5cdCAqIEBwYXJhbSBkYXRhIEluY29tcGxldGVuZXNzIGluZm8gZGF0YVxuXHQgKi9cblx0dHJhbnNmb3JtUmVjb21tZW5kYXRpb25zRm9ySW50ZXJuYWxTdG9yYWdlKGRhdGE6IEluQ29tcGxldGVuZXNzSW5mb1R5cGUgfCBQcm9wZXJ0eUluY29tcGxldGVuZXNzSW5mb1R5cGUpIHtcblx0XHRpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcInJlY29tbWVuZGF0aW9uc1wiKSkge1xuXHRcdFx0dGhpcy5zb3J0UmVjb21tZW5kYXRpb25zRGF0YShkYXRhIGFzIFByb3BlcnR5SW5jb21wbGV0ZW5lc3NJbmZvVHlwZSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG5cdFx0XHQvLyB3ZSBleHBlY3QgdGhlIGRhdGEgaW4gYXJyYXkgZm9ybWF0IGZvciBmaWVsZHMgZnJvbSAxOm4gbmF2aWdhdGlvbiBwYXRoc1xuXHRcdFx0KGRhdGEgYXMgUmVjb21tZW5kYXRpb25EYXRhRm9yTmF2UHJvcGVydHlUeXBlW10pLmZvckVhY2goKGRhdGFPYmo6IFJlY29tbWVuZGF0aW9uRGF0YUZvck5hdlByb3BlcnR5VHlwZSkgPT4ge1xuXHRcdFx0XHQvLyBmb3IgZWFjaCBlbnRyeSBpbiAxOm4gbmF2aWdhdGlvbiB3ZSB1cGRhdGUgdGhlICdyZWNvbW1lbmRhdGlvbnMnIG9iamVjdCB0byBzb3J0IGluIGRlc2NlbmRpbmcgb3JkZXIgb2YgcHJvYWJpbGl0eVxuXHRcdFx0XHRPYmplY3QudmFsdWVzKGRhdGFPYmopLmZvckVhY2goXG5cdFx0XHRcdFx0KHZhbE9iajogUHJvcGVydHlJbmNvbXBsZXRlbmVzc0luZm9UeXBlIHwgSW50ZXJuYWxQcm9wZXJ0eUFkZGl0aW9uYWxWYWx1ZSB8IEtleVByb3BlcnRpZXNEYXRhVHlwZSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiB2YWxPYmogPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy50cmFuc2Zvcm1SZWNvbW1lbmRhdGlvbnNGb3JJbnRlcm5hbFN0b3JhZ2UodmFsT2JqIGFzIFByb3BlcnR5SW5jb21wbGV0ZW5lc3NJbmZvVHlwZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGZvciBkaXJlY3QgZmllbGRzIHdlIGNoZWNrIGZvciB0aGUgZGF0YSB2YWx1ZSBhZ2FpbnN0IHRoZSBnaXZlbiBGaWVsZCBhbmQgc29ydCBpdHMgcmVjb21tZW5kYXRpb24gZGF0YVxuXHRcdFx0Ly8gZnJvbSB0aGUgZ2l2ZW4gaW5mb3JtYXRpb25cblx0XHRcdE9iamVjdC52YWx1ZXMoZGF0YSkuZm9yRWFjaCgodmFsT2JqOiBQcm9wZXJ0eUluY29tcGxldGVuZXNzSW5mb1R5cGUpID0+IHtcblx0XHRcdFx0aWYgKHR5cGVvZiB2YWxPYmogPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0XHR0aGlzLnRyYW5zZm9ybVJlY29tbWVuZGF0aW9uc0ZvckludGVybmFsU3RvcmFnZSh2YWxPYmopO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn07XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQUE7Ozs7O0VBOEJPLE1BQU1BLG9CQUFvQixHQUFHO0lBQ25DO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7SUFDQ0MsdUJBQXVCLENBQUNDLGtCQUFrRCxFQUFFO01BQzNFLE1BQU1DLHdCQUE2RCxHQUFHRCxrQkFBa0IsQ0FBQ0UsZUFBZTtNQUN4R0Qsd0JBQXdCLENBQUNFLElBQUksQ0FBQyxDQUFDQyxNQUF5QyxFQUFFQyxNQUF5QyxLQUFLO1FBQ3ZILElBQUlELE1BQU0sQ0FBQ0UsV0FBVyxHQUFHRCxNQUFNLENBQUNDLFdBQVcsRUFBRTtVQUM1QyxPQUFPLENBQUM7UUFDVCxDQUFDLE1BQU0sSUFBSUYsTUFBTSxDQUFDRSxXQUFXLEdBQUdELE1BQU0sQ0FBQ0MsV0FBVyxFQUFFO1VBQ25ELE9BQU8sQ0FBQyxDQUFDO1FBQ1YsQ0FBQyxNQUFNO1VBQ04sT0FBTyxDQUFDO1FBQ1Q7TUFDRCxDQUFDLENBQUM7TUFFRixNQUFNQyxJQUFzRSxHQUMzRVAsa0JBQXFEO01BQ3RELE9BQU9PLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztNQUM5QkEsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBR1Asd0JBQXdCO0lBQ2pELENBQUM7SUFFRDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtJQUNDUSwwQ0FBMEMsQ0FBQ0MsSUFBNkQsRUFBRTtNQUN6RyxJQUFJQSxJQUFJLENBQUNDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQzNDLElBQUksQ0FBQ1osdUJBQXVCLENBQUNXLElBQUksQ0FBbUM7UUFDcEU7TUFDRCxDQUFDLE1BQU0sSUFBSUUsS0FBSyxDQUFDQyxPQUFPLENBQUNILElBQUksQ0FBQyxFQUFFO1FBQy9CO1FBQ0NBLElBQUksQ0FBNENJLE9BQU8sQ0FBRUMsT0FBNkMsSUFBSztVQUMzRztVQUNBQyxNQUFNLENBQUNDLE1BQU0sQ0FBQ0YsT0FBTyxDQUFDLENBQUNELE9BQU8sQ0FDNUJJLE1BQWdHLElBQUs7WUFDckcsSUFBSSxPQUFPQSxNQUFNLEtBQUssUUFBUSxFQUFFO2NBQy9CLElBQUksQ0FBQ1QsMENBQTBDLENBQUNTLE1BQU0sQ0FBbUM7WUFDMUY7VUFDRCxDQUFDLENBQ0Q7UUFDRixDQUFDLENBQUM7TUFDSCxDQUFDLE1BQU07UUFDTjtRQUNBO1FBQ0FGLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDUCxJQUFJLENBQUMsQ0FBQ0ksT0FBTyxDQUFFSSxNQUFzQyxJQUFLO1VBQ3ZFLElBQUksT0FBT0EsTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJLENBQUNULDBDQUEwQyxDQUFDUyxNQUFNLENBQUM7VUFDeEQ7UUFDRCxDQUFDLENBQUM7TUFDSDtJQUNEO0VBQ0QsQ0FBQztFQUFDO0VBQUE7QUFBQSJ9