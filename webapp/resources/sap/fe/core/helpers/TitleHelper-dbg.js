/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataFieldFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters"], function (BindingHelper, valueFormatters, BindingToolkit, TypeGuards, DataFieldFormatters, DataModelPathHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getLabelForConnectedFields = DataFieldFormatters.getLabelForConnectedFields;
  var isPropertyPathExpression = TypeGuards.isPropertyPathExpression;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var transformRecursively = BindingToolkit.transformRecursively;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isEmpty = BindingToolkit.isEmpty;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var constant = BindingToolkit.constant;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var UI = BindingHelper.UI;
  var Draft = BindingHelper.Draft;
  const formatValueRecursively = function (bindingExpressionToEnhance, fullContextPath) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      let outExpression = expression;
      if (expression.modelName === undefined) {
        // In case of default model we then need to resolve the text arrangement property
        const oPropertyDataModelPath = enhanceDataModelPath(fullContextPath, expression.path);
        outExpression = formatWithTypeInformation(oPropertyDataModelPath.targetObject, expression);
      }
      return outExpression;
    });
  };

  /**
   * Get property definition from data model object path.
   *
   * @param propertyDataModelObject The property data model object
   * @returns The property
   */
  _exports.formatValueRecursively = formatValueRecursively;
  const getPropertyDefinition = propertyDataModelObject => {
    const propertyPathOrProperty = propertyDataModelObject.targetObject;
    return isPropertyPathExpression(propertyPathOrProperty) ? propertyPathOrProperty.$target : propertyPathOrProperty;
  };

  /**
   * Checks whether an associated active entity exists.
   *
   * @param fullContextPath The full path to the context
   * @returns The expression-binding string
   */
  const isOrHasActiveEntity = fullContextPath => {
    var _fullContextPath$targ, _fullContextPath$targ2, _fullContextPath$targ3, _fullContextPath$targ4, _fullContextPath$targ5, _fullContextPath$targ6;
    const draftRoot = (_fullContextPath$targ = fullContextPath.targetEntitySet) === null || _fullContextPath$targ === void 0 ? void 0 : (_fullContextPath$targ2 = _fullContextPath$targ.annotations) === null || _fullContextPath$targ2 === void 0 ? void 0 : (_fullContextPath$targ3 = _fullContextPath$targ2.Common) === null || _fullContextPath$targ3 === void 0 ? void 0 : _fullContextPath$targ3.DraftRoot;
    const draftNode = (_fullContextPath$targ4 = fullContextPath.targetEntitySet) === null || _fullContextPath$targ4 === void 0 ? void 0 : (_fullContextPath$targ5 = _fullContextPath$targ4.annotations) === null || _fullContextPath$targ5 === void 0 ? void 0 : (_fullContextPath$targ6 = _fullContextPath$targ5.Common) === null || _fullContextPath$targ6 === void 0 ? void 0 : _fullContextPath$targ6.DraftNode;
    if (!!draftRoot || !!draftNode) {
      return not(Draft.IsNewObject);
    }
    return false;
  };

  /**
   * Checks if title value expression is empty.
   *
   * @param titleValueExpression The title value expression
   * @returns The expression-binding string
   */
  const isTitleEmptyBooleanExpression = titleValueExpression => titleValueExpression._type === "Constant" ? constant(!titleValueExpression.value) : isEmpty(titleValueExpression);

  /**
   * Retrieves the title expression binding.
   *
   * @param propertyDataModelPath The full path to the property context
   * @param propertyBindingExpression The binding expression of the property above
   * @param [fieldFormatOptions] The format options of the field
   * @param fieldFormatOptions.displayMode
   * @param [alwaysShowDescriptionAndValue] The flag to always display description
   * @returns The expression-binding parameters
   */
  const getTitleBindingWithTextArrangement = function (propertyDataModelPath, propertyBindingExpression, fieldFormatOptions, alwaysShowDescriptionAndValue) {
    var _propertyDefinition$a, _propertyDataModelPat, _propertyDataModelPat2, _propertyDataModelPat3, _commonText$annotatio, _commonText$annotatio2;
    const targetDisplayModeOverride = fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.displayMode;
    const propertyDefinition = getPropertyDefinition(propertyDataModelPath);
    const targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(propertyDataModelPath);
    const commonText = (_propertyDefinition$a = propertyDefinition.annotations.Common) === null || _propertyDefinition$a === void 0 ? void 0 : _propertyDefinition$a.Text;
    const relativeLocation = getRelativePaths(propertyDataModelPath);
    const showDescriptionAndValue = alwaysShowDescriptionAndValue ?? !!((_propertyDataModelPat = propertyDataModelPath.targetObject) !== null && _propertyDataModelPat !== void 0 && (_propertyDataModelPat2 = _propertyDataModelPat.annotations) !== null && _propertyDataModelPat2 !== void 0 && (_propertyDataModelPat3 = _propertyDataModelPat2.Common) !== null && _propertyDataModelPat3 !== void 0 && _propertyDataModelPat3.SemanticObject);
    propertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);
    let params = [propertyBindingExpression];
    if (targetDisplayMode !== "Value" && commonText) {
      switch (targetDisplayMode) {
        case "Description":
          params = [getExpressionFromAnnotation(commonText, relativeLocation)];
          break;
        case "DescriptionValue":
          params = [getExpressionFromAnnotation(commonText, relativeLocation), ifElse(!!((_commonText$annotatio = commonText.annotations) !== null && _commonText$annotatio !== void 0 && (_commonText$annotatio2 = _commonText$annotatio.UI) !== null && _commonText$annotatio2 !== void 0 && _commonText$annotatio2.TextArrangement), propertyBindingExpression, ifElse(showDescriptionAndValue, propertyBindingExpression, constant("")))];
          break;
        case "ValueDescription":
          params = [propertyBindingExpression, getExpressionFromAnnotation(commonText, relativeLocation)];
          break;
      }
    }
    return params;
  };

  /**
   * Recursively add the text arrangement to a title binding expression.
   *
   * @param bindingExpressionToEnhance The binding expression to be enhanced
   * @param path The data field data model object path
   * @returns An updated expression containing the text arrangement binding parameters
   */
  const addTextArrangementToTitleBindingExpression = function (bindingExpressionToEnhance, path) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      if (expression.modelName !== undefined) return expression;
      // In case of default model we then need to resolve the text arrangement property
      const propertyDataModelPath = enhanceDataModelPath(path, expression.path);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return getTitleBindingWithTextArrangement(propertyDataModelPath, expression);
    });
  };

  /**
   * Gets binding expression for create mode title.
   *
   * @param viewData The associated view data
   * @param [typeName] The type name from the object page header info
   * @param typeName.TypeName
   * @returns The expression-binding string
   */
  const getCreateModeTitle = function (viewData, _ref) {
    let {
      TypeName: typeName
    } = _ref;
    const titleNoHeaderInfo = pathInModel("T_NEW_OBJECT", "sap.fe.i18n");
    let createModeTitle = titleNoHeaderInfo;
    if (viewData.resourceModel.getText("T_NEW_OBJECT", undefined, viewData.entitySet) === viewData.resourceModel.getText("T_NEW_OBJECT_DEFAULT", undefined, viewData.entitySet)) {
      //T_NEW_OBJECT has not been customized
      const titleWithHeaderInfo = viewData.resourceModel.getText("T_ANNOTATION_HELPER_DEFAULT_OBJECT_PAGE_HEADER_TITLE", undefined, viewData.entitySet);
      createModeTitle = typeName ? concat(titleWithHeaderInfo, ": ", resolveBindingString(typeName.toString())) : titleNoHeaderInfo;
    }
    return formatResult([createModeTitle], valueFormatters.formatTitle);
  };

  /**
   * Checks whether an empty string should be used.
   *
   * @param path The meta path pointing to the property used for the title
   * @returns The expression-binding string
   */
  const shouldForceEmptyString = path => {
    var _propertyDefinition$a2, _propertyDefinition$a3;
    const propertyDefinition = getPropertyDefinition(path);
    if (propertyDefinition && (_propertyDefinition$a2 = propertyDefinition.annotations) !== null && _propertyDefinition$a2 !== void 0 && (_propertyDefinition$a3 = _propertyDefinition$a2.Core) !== null && _propertyDefinition$a3 !== void 0 && _propertyDefinition$a3.Computed) {
      return UI.IsInactive;
    } else {
      return constant(false);
    }
  };

  /**
   * Gets title value expression from object page header info.
   *
   * @param fullContextPath The full path to the context
   * @param headerInfoTitle The title value from the object page header info
   * @param getTextBindingExpression The function to get the text binding expression
   * @returns The expression-binding string
   */
  const getTitleValueExpressionFromHeaderInfo = function (fullContextPath, headerInfoTitle, getTextBindingExpression) {
    let titleValueExpression;
    if (headerInfoTitle.$Type === "com.sap.vocabularies.UI.v1.DataField") {
      var _Value, _Value$$target, _Value$$target$annota, _Value$$target$annota2, _Value$$target$annota3, _Value$$target$annota4;
      titleValueExpression = getExpressionFromAnnotation(headerInfoTitle.Value);
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      if ((_Value = headerInfoTitle.Value) !== null && _Value !== void 0 && (_Value$$target = _Value.$target) !== null && _Value$$target !== void 0 && (_Value$$target$annota = _Value$$target.annotations.Common) !== null && _Value$$target$annota !== void 0 && (_Value$$target$annota2 = _Value$$target$annota.Text) !== null && _Value$$target$annota2 !== void 0 && (_Value$$target$annota3 = _Value$$target$annota2.annotations) !== null && _Value$$target$annota3 !== void 0 && (_Value$$target$annota4 = _Value$$target$annota3.UI) !== null && _Value$$target$annota4 !== void 0 && _Value$$target$annota4.TextArrangement) {
        // In case an explicit text arrangement was set we make use of it in the description as well
        titleValueExpression = addTextArrangementToTitleBindingExpression(titleValueExpression, fullContextPath);
      }
      titleValueExpression = formatValueRecursively(titleValueExpression, fullContextPath);
    }
    if (headerInfoTitle.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && headerInfoTitle.Target.$target.$Type === "com.sap.vocabularies.UI.v1.ConnectedFieldsType") {
      const connectedFieldsPath = enhanceDataModelPath(fullContextPath, "$Type/@UI.HeaderInfo/Title/Target/$AnnotationPath");
      titleValueExpression = getLabelForConnectedFields(connectedFieldsPath, getTextBindingExpression, false);
    }
    return titleValueExpression;
  };

  /**
   * Creates binding expression for Object Page, List Report, Quick View and other titles.
   *
   * @param path The data model object path
   * @param getTextBindingExpression The function to get the text binding expression
   * @param [fieldFormatOptions] The format options of the field
   * @param fieldFormatOptions.displayMode
   * @param [headerInfo] The object page header info
   * @param [viewData] The associated view data
   * @param [alwaysShowDescriptionAndValue] The flag to always display description
   * @returns The compiled expression-binding string
   */
  const getTitleBindingExpression = function (path, getTextBindingExpression, fieldFormatOptions, headerInfo, viewData, alwaysShowDescriptionAndValue) {
    var _headerInfo$Title;
    let createModeTitle = pathInModel("T_NEW_OBJECT", "sap.fe.i18n");
    let titleValueExpression;

    // received header info for object page
    if (headerInfo !== null && headerInfo !== void 0 && (_headerInfo$Title = headerInfo.Title) !== null && _headerInfo$Title !== void 0 && _headerInfo$Title.$Type && viewData) {
      titleValueExpression = getTitleValueExpressionFromHeaderInfo(path, headerInfo.Title, getTextBindingExpression);
      createModeTitle = getCreateModeTitle(viewData, headerInfo);
    }

    // needed for quickview
    if (isPathAnnotationExpression(path.targetObject)) {
      path = enhanceDataModelPath(path, path.targetObject.path);
    }
    const propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(path));
    let params;
    if (titleValueExpression) {
      params = Array.isArray(titleValueExpression) ? titleValueExpression : [titleValueExpression];
    } else {
      params = getTitleBindingWithTextArrangement(path, propertyBindingExpression, fieldFormatOptions, alwaysShowDescriptionAndValue);
    }
    const isTitleEmpty = isTitleEmptyBooleanExpression(params[0]);
    const forceEmptyString = shouldForceEmptyString(path);
    const formattedExpression = formatResult(params, valueFormatters.formatTitle);
    titleValueExpression = ifElse(isTitleEmpty, ifElse(forceEmptyString, "", ifElse(or(UI.IsCreateMode, not(isOrHasActiveEntity(path))), createModeTitle, pathInModel("T_ANNOTATION_HELPER_DEFAULT_HEADER_TITLE_NO_HEADER_INFO", "sap.fe.i18n"))), formattedExpression);
    return compileExpression(titleValueExpression);
  };
  _exports.getTitleBindingExpression = getTitleBindingExpression;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmb3JtYXRWYWx1ZVJlY3Vyc2l2ZWx5IiwiYmluZGluZ0V4cHJlc3Npb25Ub0VuaGFuY2UiLCJmdWxsQ29udGV4dFBhdGgiLCJ0cmFuc2Zvcm1SZWN1cnNpdmVseSIsImV4cHJlc3Npb24iLCJvdXRFeHByZXNzaW9uIiwibW9kZWxOYW1lIiwidW5kZWZpbmVkIiwib1Byb3BlcnR5RGF0YU1vZGVsUGF0aCIsImVuaGFuY2VEYXRhTW9kZWxQYXRoIiwicGF0aCIsImZvcm1hdFdpdGhUeXBlSW5mb3JtYXRpb24iLCJ0YXJnZXRPYmplY3QiLCJnZXRQcm9wZXJ0eURlZmluaXRpb24iLCJwcm9wZXJ0eURhdGFNb2RlbE9iamVjdCIsInByb3BlcnR5UGF0aE9yUHJvcGVydHkiLCJpc1Byb3BlcnR5UGF0aEV4cHJlc3Npb24iLCIkdGFyZ2V0IiwiaXNPckhhc0FjdGl2ZUVudGl0eSIsImRyYWZ0Um9vdCIsInRhcmdldEVudGl0eVNldCIsImFubm90YXRpb25zIiwiQ29tbW9uIiwiRHJhZnRSb290IiwiZHJhZnROb2RlIiwiRHJhZnROb2RlIiwibm90IiwiRHJhZnQiLCJJc05ld09iamVjdCIsImlzVGl0bGVFbXB0eUJvb2xlYW5FeHByZXNzaW9uIiwidGl0bGVWYWx1ZUV4cHJlc3Npb24iLCJfdHlwZSIsImNvbnN0YW50IiwidmFsdWUiLCJpc0VtcHR5IiwiZ2V0VGl0bGVCaW5kaW5nV2l0aFRleHRBcnJhbmdlbWVudCIsInByb3BlcnR5RGF0YU1vZGVsUGF0aCIsInByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24iLCJmaWVsZEZvcm1hdE9wdGlvbnMiLCJhbHdheXNTaG93RGVzY3JpcHRpb25BbmRWYWx1ZSIsInRhcmdldERpc3BsYXlNb2RlT3ZlcnJpZGUiLCJkaXNwbGF5TW9kZSIsInByb3BlcnR5RGVmaW5pdGlvbiIsInRhcmdldERpc3BsYXlNb2RlIiwiVUlGb3JtYXR0ZXJzIiwiZ2V0RGlzcGxheU1vZGUiLCJjb21tb25UZXh0IiwiVGV4dCIsInJlbGF0aXZlTG9jYXRpb24iLCJnZXRSZWxhdGl2ZVBhdGhzIiwic2hvd0Rlc2NyaXB0aW9uQW5kVmFsdWUiLCJTZW1hbnRpY09iamVjdCIsInBhcmFtcyIsImdldEV4cHJlc3Npb25Gcm9tQW5ub3RhdGlvbiIsImlmRWxzZSIsIlVJIiwiVGV4dEFycmFuZ2VtZW50IiwiYWRkVGV4dEFycmFuZ2VtZW50VG9UaXRsZUJpbmRpbmdFeHByZXNzaW9uIiwiZ2V0Q3JlYXRlTW9kZVRpdGxlIiwidmlld0RhdGEiLCJUeXBlTmFtZSIsInR5cGVOYW1lIiwidGl0bGVOb0hlYWRlckluZm8iLCJwYXRoSW5Nb2RlbCIsImNyZWF0ZU1vZGVUaXRsZSIsInJlc291cmNlTW9kZWwiLCJnZXRUZXh0IiwiZW50aXR5U2V0IiwidGl0bGVXaXRoSGVhZGVySW5mbyIsImNvbmNhdCIsInJlc29sdmVCaW5kaW5nU3RyaW5nIiwidG9TdHJpbmciLCJmb3JtYXRSZXN1bHQiLCJ2YWx1ZUZvcm1hdHRlcnMiLCJmb3JtYXRUaXRsZSIsInNob3VsZEZvcmNlRW1wdHlTdHJpbmciLCJDb3JlIiwiQ29tcHV0ZWQiLCJJc0luYWN0aXZlIiwiZ2V0VGl0bGVWYWx1ZUV4cHJlc3Npb25Gcm9tSGVhZGVySW5mbyIsImhlYWRlckluZm9UaXRsZSIsImdldFRleHRCaW5kaW5nRXhwcmVzc2lvbiIsIiRUeXBlIiwiVmFsdWUiLCJUYXJnZXQiLCJjb25uZWN0ZWRGaWVsZHNQYXRoIiwiZ2V0TGFiZWxGb3JDb25uZWN0ZWRGaWVsZHMiLCJnZXRUaXRsZUJpbmRpbmdFeHByZXNzaW9uIiwiaGVhZGVySW5mbyIsIlRpdGxlIiwiaXNQYXRoQW5ub3RhdGlvbkV4cHJlc3Npb24iLCJnZXRDb250ZXh0UmVsYXRpdmVUYXJnZXRPYmplY3RQYXRoIiwiQXJyYXkiLCJpc0FycmF5IiwiaXNUaXRsZUVtcHR5IiwiZm9yY2VFbXB0eVN0cmluZyIsImZvcm1hdHRlZEV4cHJlc3Npb24iLCJvciIsIklzQ3JlYXRlTW9kZSIsImNvbXBpbGVFeHByZXNzaW9uIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJUaXRsZUhlbHBlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEVudGl0eVNldCwgUHJvcGVydHksIFByb3BlcnR5QW5ub3RhdGlvblZhbHVlLCBQcm9wZXJ0eVBhdGggfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXNcIjtcbmltcG9ydCB0eXBlIHsgRGF0YUZpZWxkQWJzdHJhY3RUeXBlcywgRGF0YUZpZWxkVHlwZXMsIEhlYWRlckluZm9UeXBlIH0gZnJvbSBcIkBzYXAtdXgvdm9jYWJ1bGFyaWVzLXR5cGVzL3ZvY2FidWxhcmllcy9VSVwiO1xuaW1wb3J0IHsgVUlBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiQHNhcC11eC92b2NhYnVsYXJpZXMtdHlwZXMvdm9jYWJ1bGFyaWVzL1VJXCI7XG5pbXBvcnQgeyBEcmFmdCwgVUkgfSBmcm9tIFwic2FwL2ZlL2NvcmUvY29udmVydGVycy9oZWxwZXJzL0JpbmRpbmdIZWxwZXJcIjtcbmltcG9ydCB2YWx1ZUZvcm1hdHRlcnMgZnJvbSBcInNhcC9mZS9jb3JlL2Zvcm1hdHRlcnMvVmFsdWVGb3JtYXR0ZXJcIjtcbmltcG9ydCB0eXBlIHsgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uLCBQYXRoSW5Nb2RlbEV4cHJlc3Npb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9CaW5kaW5nVG9vbGtpdFwiO1xuaW1wb3J0IHtcblx0Y29tcGlsZUV4cHJlc3Npb24sXG5cdGNvbmNhdCxcblx0Y29uc3RhbnQsXG5cdGZvcm1hdFJlc3VsdCxcblx0Zm9ybWF0V2l0aFR5cGVJbmZvcm1hdGlvbixcblx0Z2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uLFxuXHRpZkVsc2UsXG5cdGlzRW1wdHksXG5cdG5vdCxcblx0b3IsXG5cdHBhdGhJbk1vZGVsLFxuXHRyZXNvbHZlQmluZGluZ1N0cmluZyxcblx0dHJhbnNmb3JtUmVjdXJzaXZlbHlcbn0gZnJvbSBcInNhcC9mZS9jb3JlL2hlbHBlcnMvQmluZGluZ1Rvb2xraXRcIjtcbmltcG9ydCB7IGlzUGF0aEFubm90YXRpb25FeHByZXNzaW9uLCBpc1Byb3BlcnR5UGF0aEV4cHJlc3Npb24gfSBmcm9tIFwic2FwL2ZlL2NvcmUvaGVscGVycy9UeXBlR3VhcmRzXCI7XG5pbXBvcnQgdHlwZSB7IFZpZXdEYXRhIH0gZnJvbSBcInNhcC9mZS9jb3JlL3NlcnZpY2VzL1RlbXBsYXRlZFZpZXdTZXJ2aWNlRmFjdG9yeVwiO1xuaW1wb3J0IHsgZ2V0TGFiZWxGb3JDb25uZWN0ZWRGaWVsZHMgfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9EYXRhRmllbGRGb3JtYXR0ZXJzXCI7XG5pbXBvcnQgdHlwZSB7IERhdGFNb2RlbE9iamVjdFBhdGggfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9EYXRhTW9kZWxQYXRoSGVscGVyXCI7XG5pbXBvcnQgeyBlbmhhbmNlRGF0YU1vZGVsUGF0aCwgZ2V0Q29udGV4dFJlbGF0aXZlVGFyZ2V0T2JqZWN0UGF0aCwgZ2V0UmVsYXRpdmVQYXRocyB9IGZyb20gXCJzYXAvZmUvY29yZS90ZW1wbGF0aW5nL0RhdGFNb2RlbFBhdGhIZWxwZXJcIjtcbmltcG9ydCB0eXBlIHsgRGlzcGxheU1vZGUgfSBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9VSUZvcm1hdHRlcnNcIjtcbmltcG9ydCAqIGFzIFVJRm9ybWF0dGVycyBmcm9tIFwic2FwL2ZlL2NvcmUvdGVtcGxhdGluZy9VSUZvcm1hdHRlcnNcIjtcblxudHlwZSBCaW5kaW5nRXhwcmVzc2lvblR1cGxlID0gW0JpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+LCBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPl0gfCBbQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz5dO1xuXG5leHBvcnQgY29uc3QgZm9ybWF0VmFsdWVSZWN1cnNpdmVseSA9IGZ1bmN0aW9uIChcblx0YmluZGluZ0V4cHJlc3Npb25Ub0VuaGFuY2U6IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+LFxuXHRmdWxsQ29udGV4dFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGhcbik6IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+IHtcblx0cmV0dXJuIHRyYW5zZm9ybVJlY3Vyc2l2ZWx5KGJpbmRpbmdFeHByZXNzaW9uVG9FbmhhbmNlLCBcIlBhdGhJbk1vZGVsXCIsIChleHByZXNzaW9uKSA9PiB7XG5cdFx0bGV0IG91dEV4cHJlc3Npb24gPSBleHByZXNzaW9uO1xuXHRcdGlmIChleHByZXNzaW9uLm1vZGVsTmFtZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHQvLyBJbiBjYXNlIG9mIGRlZmF1bHQgbW9kZWwgd2UgdGhlbiBuZWVkIHRvIHJlc29sdmUgdGhlIHRleHQgYXJyYW5nZW1lbnQgcHJvcGVydHlcblx0XHRcdGNvbnN0IG9Qcm9wZXJ0eURhdGFNb2RlbFBhdGggPSBlbmhhbmNlRGF0YU1vZGVsUGF0aChmdWxsQ29udGV4dFBhdGgsIGV4cHJlc3Npb24ucGF0aCk7XG5cdFx0XHRvdXRFeHByZXNzaW9uID0gZm9ybWF0V2l0aFR5cGVJbmZvcm1hdGlvbihvUHJvcGVydHlEYXRhTW9kZWxQYXRoLnRhcmdldE9iamVjdCwgZXhwcmVzc2lvbik7XG5cdFx0fVxuXHRcdHJldHVybiBvdXRFeHByZXNzaW9uO1xuXHR9KTtcbn07XG5cbi8qKlxuICogR2V0IHByb3BlcnR5IGRlZmluaXRpb24gZnJvbSBkYXRhIG1vZGVsIG9iamVjdCBwYXRoLlxuICpcbiAqIEBwYXJhbSBwcm9wZXJ0eURhdGFNb2RlbE9iamVjdCBUaGUgcHJvcGVydHkgZGF0YSBtb2RlbCBvYmplY3RcbiAqIEByZXR1cm5zIFRoZSBwcm9wZXJ0eVxuICovXG5jb25zdCBnZXRQcm9wZXJ0eURlZmluaXRpb24gPSAocHJvcGVydHlEYXRhTW9kZWxPYmplY3Q6IERhdGFNb2RlbE9iamVjdFBhdGgpID0+IHtcblx0Y29uc3QgcHJvcGVydHlQYXRoT3JQcm9wZXJ0eSA9IHByb3BlcnR5RGF0YU1vZGVsT2JqZWN0LnRhcmdldE9iamVjdCBhcyBQcm9wZXJ0eVBhdGggfCBQcm9wZXJ0eTtcblx0cmV0dXJuIGlzUHJvcGVydHlQYXRoRXhwcmVzc2lvbihwcm9wZXJ0eVBhdGhPclByb3BlcnR5KSA/IHByb3BlcnR5UGF0aE9yUHJvcGVydHkuJHRhcmdldCA6IHByb3BlcnR5UGF0aE9yUHJvcGVydHk7XG59O1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGFuIGFzc29jaWF0ZWQgYWN0aXZlIGVudGl0eSBleGlzdHMuXG4gKlxuICogQHBhcmFtIGZ1bGxDb250ZXh0UGF0aCBUaGUgZnVsbCBwYXRoIHRvIHRoZSBjb250ZXh0XG4gKiBAcmV0dXJucyBUaGUgZXhwcmVzc2lvbi1iaW5kaW5nIHN0cmluZ1xuICovXG5jb25zdCBpc09ySGFzQWN0aXZlRW50aXR5ID0gKGZ1bGxDb250ZXh0UGF0aDogRGF0YU1vZGVsT2JqZWN0UGF0aCkgPT4ge1xuXHRjb25zdCBkcmFmdFJvb3QgPSAoZnVsbENvbnRleHRQYXRoLnRhcmdldEVudGl0eVNldCBhcyBFbnRpdHlTZXQgfCB1bmRlZmluZWQpPy5hbm5vdGF0aW9ucz8uQ29tbW9uPy5EcmFmdFJvb3Q7XG5cdGNvbnN0IGRyYWZ0Tm9kZSA9IChmdWxsQ29udGV4dFBhdGgudGFyZ2V0RW50aXR5U2V0IGFzIEVudGl0eVNldCB8IHVuZGVmaW5lZCk/LmFubm90YXRpb25zPy5Db21tb24/LkRyYWZ0Tm9kZTtcblx0aWYgKCEhZHJhZnRSb290IHx8ICEhZHJhZnROb2RlKSB7XG5cdFx0cmV0dXJuIG5vdChEcmFmdC5Jc05ld09iamVjdCk7XG5cdH1cblx0cmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGl0bGUgdmFsdWUgZXhwcmVzc2lvbiBpcyBlbXB0eS5cbiAqXG4gKiBAcGFyYW0gdGl0bGVWYWx1ZUV4cHJlc3Npb24gVGhlIHRpdGxlIHZhbHVlIGV4cHJlc3Npb25cbiAqIEByZXR1cm5zIFRoZSBleHByZXNzaW9uLWJpbmRpbmcgc3RyaW5nXG4gKi9cbmNvbnN0IGlzVGl0bGVFbXB0eUJvb2xlYW5FeHByZXNzaW9uID0gKHRpdGxlVmFsdWVFeHByZXNzaW9uOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPikgPT5cblx0dGl0bGVWYWx1ZUV4cHJlc3Npb24uX3R5cGUgPT09IFwiQ29uc3RhbnRcIiA/IGNvbnN0YW50KCF0aXRsZVZhbHVlRXhwcmVzc2lvbi52YWx1ZSkgOiBpc0VtcHR5KHRpdGxlVmFsdWVFeHByZXNzaW9uKTtcblxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIHRpdGxlIGV4cHJlc3Npb24gYmluZGluZy5cbiAqXG4gKiBAcGFyYW0gcHJvcGVydHlEYXRhTW9kZWxQYXRoIFRoZSBmdWxsIHBhdGggdG8gdGhlIHByb3BlcnR5IGNvbnRleHRcbiAqIEBwYXJhbSBwcm9wZXJ0eUJpbmRpbmdFeHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gb2YgdGhlIHByb3BlcnR5IGFib3ZlXG4gKiBAcGFyYW0gW2ZpZWxkRm9ybWF0T3B0aW9uc10gVGhlIGZvcm1hdCBvcHRpb25zIG9mIHRoZSBmaWVsZFxuICogQHBhcmFtIGZpZWxkRm9ybWF0T3B0aW9ucy5kaXNwbGF5TW9kZVxuICogQHBhcmFtIFthbHdheXNTaG93RGVzY3JpcHRpb25BbmRWYWx1ZV0gVGhlIGZsYWcgdG8gYWx3YXlzIGRpc3BsYXkgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIFRoZSBleHByZXNzaW9uLWJpbmRpbmcgcGFyYW1ldGVyc1xuICovXG5jb25zdCBnZXRUaXRsZUJpbmRpbmdXaXRoVGV4dEFycmFuZ2VtZW50ID0gZnVuY3Rpb24gKFxuXHRwcm9wZXJ0eURhdGFNb2RlbFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGgsXG5cdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb246IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+LFxuXHRmaWVsZEZvcm1hdE9wdGlvbnM/OiB7IGRpc3BsYXlNb2RlPzogRGlzcGxheU1vZGUgfSxcblx0YWx3YXlzU2hvd0Rlc2NyaXB0aW9uQW5kVmFsdWU/OiBib29sZWFuXG4pOiBCaW5kaW5nRXhwcmVzc2lvblR1cGxlIHtcblx0Y29uc3QgdGFyZ2V0RGlzcGxheU1vZGVPdmVycmlkZSA9IGZpZWxkRm9ybWF0T3B0aW9ucz8uZGlzcGxheU1vZGU7XG5cdGNvbnN0IHByb3BlcnR5RGVmaW5pdGlvbiA9IGdldFByb3BlcnR5RGVmaW5pdGlvbihwcm9wZXJ0eURhdGFNb2RlbFBhdGgpO1xuXHRjb25zdCB0YXJnZXREaXNwbGF5TW9kZSA9IHRhcmdldERpc3BsYXlNb2RlT3ZlcnJpZGUgfHwgVUlGb3JtYXR0ZXJzLmdldERpc3BsYXlNb2RlKHByb3BlcnR5RGF0YU1vZGVsUGF0aCk7XG5cdGNvbnN0IGNvbW1vblRleHQgPSBwcm9wZXJ0eURlZmluaXRpb24uYW5ub3RhdGlvbnMuQ29tbW9uPy5UZXh0O1xuXHRjb25zdCByZWxhdGl2ZUxvY2F0aW9uID0gZ2V0UmVsYXRpdmVQYXRocyhwcm9wZXJ0eURhdGFNb2RlbFBhdGgpO1xuXHRjb25zdCBzaG93RGVzY3JpcHRpb25BbmRWYWx1ZSA9XG5cdFx0YWx3YXlzU2hvd0Rlc2NyaXB0aW9uQW5kVmFsdWUgPz9cblx0XHQhIShwcm9wZXJ0eURhdGFNb2RlbFBhdGgudGFyZ2V0T2JqZWN0IGFzIFByb3BlcnR5IHwgdW5kZWZpbmVkKT8uYW5ub3RhdGlvbnM/LkNvbW1vbj8uU2VtYW50aWNPYmplY3Q7XG5cdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24gPSBmb3JtYXRXaXRoVHlwZUluZm9ybWF0aW9uKHByb3BlcnR5RGVmaW5pdGlvbiwgcHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbik7XG5cblx0bGV0IHBhcmFtczogQmluZGluZ0V4cHJlc3Npb25UdXBsZSA9IFtwcm9wZXJ0eUJpbmRpbmdFeHByZXNzaW9uXTtcblx0aWYgKHRhcmdldERpc3BsYXlNb2RlICE9PSBcIlZhbHVlXCIgJiYgY29tbW9uVGV4dCkge1xuXHRcdHN3aXRjaCAodGFyZ2V0RGlzcGxheU1vZGUpIHtcblx0XHRcdGNhc2UgXCJEZXNjcmlwdGlvblwiOlxuXHRcdFx0XHRwYXJhbXMgPSBbZ2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKGNvbW1vblRleHQsIHJlbGF0aXZlTG9jYXRpb24pIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiRGVzY3JpcHRpb25WYWx1ZVwiOlxuXHRcdFx0XHRwYXJhbXMgPSBbXG5cdFx0XHRcdFx0Z2V0RXhwcmVzc2lvbkZyb21Bbm5vdGF0aW9uKGNvbW1vblRleHQsIHJlbGF0aXZlTG9jYXRpb24pIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+LFxuXHRcdFx0XHRcdGlmRWxzZShcblx0XHRcdFx0XHRcdCEhY29tbW9uVGV4dC5hbm5vdGF0aW9ucz8uVUk/LlRleHRBcnJhbmdlbWVudCxcblx0XHRcdFx0XHRcdHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24sXG5cdFx0XHRcdFx0XHRpZkVsc2Uoc2hvd0Rlc2NyaXB0aW9uQW5kVmFsdWUsIHByb3BlcnR5QmluZGluZ0V4cHJlc3Npb24sIGNvbnN0YW50KFwiXCIpKVxuXHRcdFx0XHRcdClcblx0XHRcdFx0XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlIFwiVmFsdWVEZXNjcmlwdGlvblwiOlxuXHRcdFx0XHRwYXJhbXMgPSBbXG5cdFx0XHRcdFx0cHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbixcblx0XHRcdFx0XHRnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oY29tbW9uVGV4dCwgcmVsYXRpdmVMb2NhdGlvbikgYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHN0cmluZz5cblx0XHRcdFx0XTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBwYXJhbXM7XG59O1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGFkZCB0aGUgdGV4dCBhcnJhbmdlbWVudCB0byBhIHRpdGxlIGJpbmRpbmcgZXhwcmVzc2lvbi5cbiAqXG4gKiBAcGFyYW0gYmluZGluZ0V4cHJlc3Npb25Ub0VuaGFuY2UgVGhlIGJpbmRpbmcgZXhwcmVzc2lvbiB0byBiZSBlbmhhbmNlZFxuICogQHBhcmFtIHBhdGggVGhlIGRhdGEgZmllbGQgZGF0YSBtb2RlbCBvYmplY3QgcGF0aFxuICogQHJldHVybnMgQW4gdXBkYXRlZCBleHByZXNzaW9uIGNvbnRhaW5pbmcgdGhlIHRleHQgYXJyYW5nZW1lbnQgYmluZGluZyBwYXJhbWV0ZXJzXG4gKi9cbmNvbnN0IGFkZFRleHRBcnJhbmdlbWVudFRvVGl0bGVCaW5kaW5nRXhwcmVzc2lvbiA9IGZ1bmN0aW9uIChcblx0YmluZGluZ0V4cHJlc3Npb25Ub0VuaGFuY2U6IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjx1bmtub3duPixcblx0cGF0aDogRGF0YU1vZGVsT2JqZWN0UGF0aFxuKSB7XG5cdHJldHVybiB0cmFuc2Zvcm1SZWN1cnNpdmVseShiaW5kaW5nRXhwcmVzc2lvblRvRW5oYW5jZSwgXCJQYXRoSW5Nb2RlbFwiLCAoZXhwcmVzc2lvbjogUGF0aEluTW9kZWxFeHByZXNzaW9uPHVua25vd24+KSA9PiB7XG5cdFx0aWYgKGV4cHJlc3Npb24ubW9kZWxOYW1lICE9PSB1bmRlZmluZWQpIHJldHVybiBleHByZXNzaW9uO1xuXHRcdC8vIEluIGNhc2Ugb2YgZGVmYXVsdCBtb2RlbCB3ZSB0aGVuIG5lZWQgdG8gcmVzb2x2ZSB0aGUgdGV4dCBhcnJhbmdlbWVudCBwcm9wZXJ0eVxuXHRcdGNvbnN0IHByb3BlcnR5RGF0YU1vZGVsUGF0aCA9IGVuaGFuY2VEYXRhTW9kZWxQYXRoKHBhdGgsIGV4cHJlc3Npb24ucGF0aCk7XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0XHRyZXR1cm4gZ2V0VGl0bGVCaW5kaW5nV2l0aFRleHRBcnJhbmdlbWVudChwcm9wZXJ0eURhdGFNb2RlbFBhdGgsIGV4cHJlc3Npb24pIGFzIHVua25vd24gYXMgQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPGFueT47XG5cdH0pO1xufTtcblxuLyoqXG4gKiBHZXRzIGJpbmRpbmcgZXhwcmVzc2lvbiBmb3IgY3JlYXRlIG1vZGUgdGl0bGUuXG4gKlxuICogQHBhcmFtIHZpZXdEYXRhIFRoZSBhc3NvY2lhdGVkIHZpZXcgZGF0YVxuICogQHBhcmFtIFt0eXBlTmFtZV0gVGhlIHR5cGUgbmFtZSBmcm9tIHRoZSBvYmplY3QgcGFnZSBoZWFkZXIgaW5mb1xuICogQHBhcmFtIHR5cGVOYW1lLlR5cGVOYW1lXG4gKiBAcmV0dXJucyBUaGUgZXhwcmVzc2lvbi1iaW5kaW5nIHN0cmluZ1xuICovXG5jb25zdCBnZXRDcmVhdGVNb2RlVGl0bGUgPSBmdW5jdGlvbiAodmlld0RhdGE6IFZpZXdEYXRhLCB7IFR5cGVOYW1lOiB0eXBlTmFtZSB9OiBIZWFkZXJJbmZvVHlwZSk6IEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+IHtcblx0Y29uc3QgdGl0bGVOb0hlYWRlckluZm8gPSBwYXRoSW5Nb2RlbChcIlRfTkVXX09CSkVDVFwiLCBcInNhcC5mZS5pMThuXCIpO1xuXHRsZXQgY3JlYXRlTW9kZVRpdGxlOiBzdHJpbmcgfCBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPiA9IHRpdGxlTm9IZWFkZXJJbmZvO1xuXHRpZiAoXG5cdFx0dmlld0RhdGEucmVzb3VyY2VNb2RlbC5nZXRUZXh0KFwiVF9ORVdfT0JKRUNUXCIsIHVuZGVmaW5lZCwgdmlld0RhdGEuZW50aXR5U2V0KSA9PT1cblx0XHR2aWV3RGF0YS5yZXNvdXJjZU1vZGVsLmdldFRleHQoXCJUX05FV19PQkpFQ1RfREVGQVVMVFwiLCB1bmRlZmluZWQsIHZpZXdEYXRhLmVudGl0eVNldClcblx0KSB7XG5cdFx0Ly9UX05FV19PQkpFQ1QgaGFzIG5vdCBiZWVuIGN1c3RvbWl6ZWRcblx0XHRjb25zdCB0aXRsZVdpdGhIZWFkZXJJbmZvID0gdmlld0RhdGEucmVzb3VyY2VNb2RlbC5nZXRUZXh0KFxuXHRcdFx0XCJUX0FOTk9UQVRJT05fSEVMUEVSX0RFRkFVTFRfT0JKRUNUX1BBR0VfSEVBREVSX1RJVExFXCIsXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHR2aWV3RGF0YS5lbnRpdHlTZXRcblx0XHQpO1xuXHRcdGNyZWF0ZU1vZGVUaXRsZSA9ICh0eXBlTmFtZSBhcyBzdHJpbmcgfCBQcm9wZXJ0eUFubm90YXRpb25WYWx1ZTxzdHJpbmc+KVxuXHRcdFx0PyBjb25jYXQodGl0bGVXaXRoSGVhZGVySW5mbywgXCI6IFwiLCByZXNvbHZlQmluZGluZ1N0cmluZyh0eXBlTmFtZS50b1N0cmluZygpKSlcblx0XHRcdDogdGl0bGVOb0hlYWRlckluZm87XG5cdH1cblx0cmV0dXJuIGZvcm1hdFJlc3VsdChbY3JlYXRlTW9kZVRpdGxlXSwgdmFsdWVGb3JtYXR0ZXJzLmZvcm1hdFRpdGxlKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYW4gZW1wdHkgc3RyaW5nIHNob3VsZCBiZSB1c2VkLlxuICpcbiAqIEBwYXJhbSBwYXRoIFRoZSBtZXRhIHBhdGggcG9pbnRpbmcgdG8gdGhlIHByb3BlcnR5IHVzZWQgZm9yIHRoZSB0aXRsZVxuICogQHJldHVybnMgVGhlIGV4cHJlc3Npb24tYmluZGluZyBzdHJpbmdcbiAqL1xuY29uc3Qgc2hvdWxkRm9yY2VFbXB0eVN0cmluZyA9IChwYXRoOiBEYXRhTW9kZWxPYmplY3RQYXRoKSA9PiB7XG5cdGNvbnN0IHByb3BlcnR5RGVmaW5pdGlvbiA9IGdldFByb3BlcnR5RGVmaW5pdGlvbihwYXRoKTtcblx0aWYgKHByb3BlcnR5RGVmaW5pdGlvbiAmJiBwcm9wZXJ0eURlZmluaXRpb24uYW5ub3RhdGlvbnM/LkNvcmU/LkNvbXB1dGVkKSB7XG5cdFx0cmV0dXJuIFVJLklzSW5hY3RpdmU7XG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIGNvbnN0YW50KGZhbHNlKTtcblx0fVxufTtcblxuLyoqXG4gKiBHZXRzIHRpdGxlIHZhbHVlIGV4cHJlc3Npb24gZnJvbSBvYmplY3QgcGFnZSBoZWFkZXIgaW5mby5cbiAqXG4gKiBAcGFyYW0gZnVsbENvbnRleHRQYXRoIFRoZSBmdWxsIHBhdGggdG8gdGhlIGNvbnRleHRcbiAqIEBwYXJhbSBoZWFkZXJJbmZvVGl0bGUgVGhlIHRpdGxlIHZhbHVlIGZyb20gdGhlIG9iamVjdCBwYWdlIGhlYWRlciBpbmZvXG4gKiBAcGFyYW0gZ2V0VGV4dEJpbmRpbmdFeHByZXNzaW9uIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHRleHQgYmluZGluZyBleHByZXNzaW9uXG4gKiBAcmV0dXJucyBUaGUgZXhwcmVzc2lvbi1iaW5kaW5nIHN0cmluZ1xuICovXG5jb25zdCBnZXRUaXRsZVZhbHVlRXhwcmVzc2lvbkZyb21IZWFkZXJJbmZvID0gZnVuY3Rpb24gKFxuXHRmdWxsQ29udGV4dFBhdGg6IERhdGFNb2RlbE9iamVjdFBhdGgsXG5cdGhlYWRlckluZm9UaXRsZTogRGF0YUZpZWxkQWJzdHJhY3RUeXBlcyxcblx0Z2V0VGV4dEJpbmRpbmdFeHByZXNzaW9uOiBGdW5jdGlvblxuKSB7XG5cdGxldCB0aXRsZVZhbHVlRXhwcmVzc2lvbjtcblx0aWYgKGhlYWRlckluZm9UaXRsZS4kVHlwZSA9PT0gVUlBbm5vdGF0aW9uVHlwZXMuRGF0YUZpZWxkKSB7XG5cdFx0dGl0bGVWYWx1ZUV4cHJlc3Npb24gPSBnZXRFeHByZXNzaW9uRnJvbUFubm90YXRpb24oKGhlYWRlckluZm9UaXRsZSBhcyBEYXRhRmllbGRUeXBlcykuVmFsdWUpO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3Ncblx0XHRpZiAoKGhlYWRlckluZm9UaXRsZSBhcyBEYXRhRmllbGRUeXBlcykuVmFsdWU/LiR0YXJnZXQ/LmFubm90YXRpb25zLkNvbW1vbj8uVGV4dD8uYW5ub3RhdGlvbnM/LlVJPy5UZXh0QXJyYW5nZW1lbnQpIHtcblx0XHRcdC8vIEluIGNhc2UgYW4gZXhwbGljaXQgdGV4dCBhcnJhbmdlbWVudCB3YXMgc2V0IHdlIG1ha2UgdXNlIG9mIGl0IGluIHRoZSBkZXNjcmlwdGlvbiBhcyB3ZWxsXG5cdFx0XHR0aXRsZVZhbHVlRXhwcmVzc2lvbiA9IGFkZFRleHRBcnJhbmdlbWVudFRvVGl0bGVCaW5kaW5nRXhwcmVzc2lvbih0aXRsZVZhbHVlRXhwcmVzc2lvbiwgZnVsbENvbnRleHRQYXRoKTtcblx0XHR9XG5cdFx0dGl0bGVWYWx1ZUV4cHJlc3Npb24gPSBmb3JtYXRWYWx1ZVJlY3Vyc2l2ZWx5KHRpdGxlVmFsdWVFeHByZXNzaW9uIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+LCBmdWxsQ29udGV4dFBhdGgpO1xuXHR9XG5cdGlmIChcblx0XHRoZWFkZXJJbmZvVGl0bGUuJFR5cGUgPT09IFVJQW5ub3RhdGlvblR5cGVzLkRhdGFGaWVsZEZvckFubm90YXRpb24gJiZcblx0XHRoZWFkZXJJbmZvVGl0bGUuVGFyZ2V0LiR0YXJnZXQuJFR5cGUgPT09IFVJQW5ub3RhdGlvblR5cGVzLkNvbm5lY3RlZEZpZWxkc1R5cGVcblx0KSB7XG5cdFx0Y29uc3QgY29ubmVjdGVkRmllbGRzUGF0aCA9IGVuaGFuY2VEYXRhTW9kZWxQYXRoKGZ1bGxDb250ZXh0UGF0aCwgXCIkVHlwZS9AVUkuSGVhZGVySW5mby9UaXRsZS9UYXJnZXQvJEFubm90YXRpb25QYXRoXCIpO1xuXHRcdHRpdGxlVmFsdWVFeHByZXNzaW9uID0gZ2V0TGFiZWxGb3JDb25uZWN0ZWRGaWVsZHMoXG5cdFx0XHRjb25uZWN0ZWRGaWVsZHNQYXRoLFxuXHRcdFx0Z2V0VGV4dEJpbmRpbmdFeHByZXNzaW9uLFxuXHRcdFx0ZmFsc2Vcblx0XHQpIGFzIEJpbmRpbmdUb29sa2l0RXhwcmVzc2lvbjxzdHJpbmc+O1xuXHR9XG5cdHJldHVybiB0aXRsZVZhbHVlRXhwcmVzc2lvbjtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBiaW5kaW5nIGV4cHJlc3Npb24gZm9yIE9iamVjdCBQYWdlLCBMaXN0IFJlcG9ydCwgUXVpY2sgVmlldyBhbmQgb3RoZXIgdGl0bGVzLlxuICpcbiAqIEBwYXJhbSBwYXRoIFRoZSBkYXRhIG1vZGVsIG9iamVjdCBwYXRoXG4gKiBAcGFyYW0gZ2V0VGV4dEJpbmRpbmdFeHByZXNzaW9uIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHRleHQgYmluZGluZyBleHByZXNzaW9uXG4gKiBAcGFyYW0gW2ZpZWxkRm9ybWF0T3B0aW9uc10gVGhlIGZvcm1hdCBvcHRpb25zIG9mIHRoZSBmaWVsZFxuICogQHBhcmFtIGZpZWxkRm9ybWF0T3B0aW9ucy5kaXNwbGF5TW9kZVxuICogQHBhcmFtIFtoZWFkZXJJbmZvXSBUaGUgb2JqZWN0IHBhZ2UgaGVhZGVyIGluZm9cbiAqIEBwYXJhbSBbdmlld0RhdGFdIFRoZSBhc3NvY2lhdGVkIHZpZXcgZGF0YVxuICogQHBhcmFtIFthbHdheXNTaG93RGVzY3JpcHRpb25BbmRWYWx1ZV0gVGhlIGZsYWcgdG8gYWx3YXlzIGRpc3BsYXkgZGVzY3JpcHRpb25cbiAqIEByZXR1cm5zIFRoZSBjb21waWxlZCBleHByZXNzaW9uLWJpbmRpbmcgc3RyaW5nXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRUaXRsZUJpbmRpbmdFeHByZXNzaW9uID0gZnVuY3Rpb24gKFxuXHRwYXRoOiBEYXRhTW9kZWxPYmplY3RQYXRoLFxuXHRnZXRUZXh0QmluZGluZ0V4cHJlc3Npb246IEZ1bmN0aW9uLFxuXHRmaWVsZEZvcm1hdE9wdGlvbnM/OiB7IGRpc3BsYXlNb2RlPzogRGlzcGxheU1vZGUgfSxcblx0aGVhZGVySW5mbz86IEhlYWRlckluZm9UeXBlLFxuXHR2aWV3RGF0YT86IFZpZXdEYXRhLFxuXHRhbHdheXNTaG93RGVzY3JpcHRpb25BbmRWYWx1ZT86IGJvb2xlYW5cbikge1xuXHRsZXQgY3JlYXRlTW9kZVRpdGxlOiBCaW5kaW5nVG9vbGtpdEV4cHJlc3Npb248c3RyaW5nPiB8IHN0cmluZyA9IHBhdGhJbk1vZGVsKFwiVF9ORVdfT0JKRUNUXCIsIFwic2FwLmZlLmkxOG5cIik7XG5cdGxldCB0aXRsZVZhbHVlRXhwcmVzc2lvbjtcblxuXHQvLyByZWNlaXZlZCBoZWFkZXIgaW5mbyBmb3Igb2JqZWN0IHBhZ2Vcblx0aWYgKGhlYWRlckluZm8/LlRpdGxlPy4kVHlwZSAmJiB2aWV3RGF0YSkge1xuXHRcdHRpdGxlVmFsdWVFeHByZXNzaW9uID0gZ2V0VGl0bGVWYWx1ZUV4cHJlc3Npb25Gcm9tSGVhZGVySW5mbyhwYXRoLCBoZWFkZXJJbmZvLlRpdGxlLCBnZXRUZXh0QmluZGluZ0V4cHJlc3Npb24pO1xuXHRcdGNyZWF0ZU1vZGVUaXRsZSA9IGdldENyZWF0ZU1vZGVUaXRsZSh2aWV3RGF0YSwgaGVhZGVySW5mbyk7XG5cdH1cblxuXHQvLyBuZWVkZWQgZm9yIHF1aWNrdmlld1xuXHRpZiAoaXNQYXRoQW5ub3RhdGlvbkV4cHJlc3Npb24ocGF0aC50YXJnZXRPYmplY3QpKSB7XG5cdFx0cGF0aCA9IGVuaGFuY2VEYXRhTW9kZWxQYXRoKHBhdGgsIHBhdGgudGFyZ2V0T2JqZWN0LnBhdGgpO1xuXHR9XG5cblx0Y29uc3QgcHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbjogQmluZGluZ1Rvb2xraXRFeHByZXNzaW9uPHVua25vd24+ID0gcGF0aEluTW9kZWwoZ2V0Q29udGV4dFJlbGF0aXZlVGFyZ2V0T2JqZWN0UGF0aChwYXRoKSk7XG5cdGxldCBwYXJhbXM6IEJpbmRpbmdFeHByZXNzaW9uVHVwbGU7XG5cdGlmICh0aXRsZVZhbHVlRXhwcmVzc2lvbikge1xuXHRcdHBhcmFtcyA9IEFycmF5LmlzQXJyYXkodGl0bGVWYWx1ZUV4cHJlc3Npb24pID8gKHRpdGxlVmFsdWVFeHByZXNzaW9uIGFzIHVua25vd24gYXMgQmluZGluZ0V4cHJlc3Npb25UdXBsZSkgOiBbdGl0bGVWYWx1ZUV4cHJlc3Npb25dO1xuXHR9IGVsc2Uge1xuXHRcdHBhcmFtcyA9IGdldFRpdGxlQmluZGluZ1dpdGhUZXh0QXJyYW5nZW1lbnQocGF0aCwgcHJvcGVydHlCaW5kaW5nRXhwcmVzc2lvbiwgZmllbGRGb3JtYXRPcHRpb25zLCBhbHdheXNTaG93RGVzY3JpcHRpb25BbmRWYWx1ZSk7XG5cdH1cblx0Y29uc3QgaXNUaXRsZUVtcHR5ID0gaXNUaXRsZUVtcHR5Qm9vbGVhbkV4cHJlc3Npb24ocGFyYW1zWzBdKTtcblx0Y29uc3QgZm9yY2VFbXB0eVN0cmluZyA9IHNob3VsZEZvcmNlRW1wdHlTdHJpbmcocGF0aCk7XG5cdGNvbnN0IGZvcm1hdHRlZEV4cHJlc3Npb24gPSBmb3JtYXRSZXN1bHQocGFyYW1zLCB2YWx1ZUZvcm1hdHRlcnMuZm9ybWF0VGl0bGUpO1xuXG5cdHRpdGxlVmFsdWVFeHByZXNzaW9uID0gaWZFbHNlKFxuXHRcdGlzVGl0bGVFbXB0eSxcblx0XHRpZkVsc2UoXG5cdFx0XHRmb3JjZUVtcHR5U3RyaW5nLFxuXHRcdFx0XCJcIixcblx0XHRcdGlmRWxzZShcblx0XHRcdFx0b3IoVUkuSXNDcmVhdGVNb2RlLCBub3QoaXNPckhhc0FjdGl2ZUVudGl0eShwYXRoKSkpLFxuXHRcdFx0XHRjcmVhdGVNb2RlVGl0bGUsXG5cdFx0XHRcdHBhdGhJbk1vZGVsKFwiVF9BTk5PVEFUSU9OX0hFTFBFUl9ERUZBVUxUX0hFQURFUl9USVRMRV9OT19IRUFERVJfSU5GT1wiLCBcInNhcC5mZS5pMThuXCIpXG5cdFx0XHQpXG5cdFx0KSxcblx0XHRmb3JtYXR0ZWRFeHByZXNzaW9uXG5cdCk7XG5cblx0cmV0dXJuIGNvbXBpbGVFeHByZXNzaW9uKHRpdGxlVmFsdWVFeHByZXNzaW9uKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBK0JPLE1BQU1BLHNCQUFzQixHQUFHLFVBQ3JDQywwQkFBNEQsRUFDNURDLGVBQW9DLEVBQ0Q7SUFDbkMsT0FBT0Msb0JBQW9CLENBQUNGLDBCQUEwQixFQUFFLGFBQWEsRUFBR0csVUFBVSxJQUFLO01BQ3RGLElBQUlDLGFBQWEsR0FB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