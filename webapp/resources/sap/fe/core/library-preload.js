//@ui5-bundle sap/fe/core/library-preload.js
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ActionRuntime-dbg", ["sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards", "sap/ui/core/message/Message", "./controls/AnyElement", "./converters/ConverterContext", "./converters/objectPage/HeaderAndFooterAction"], function (merge, CommonUtils, BindingToolkit, ModelHelper, TypeGuards, Message, AnyElement, ConverterContext, HeaderAndFooterAction) {
  "use strict";

  var getHiddenExpression = HeaderAndFooterAction.getHiddenExpression;
  var getEditButtonEnabled = HeaderAndFooterAction.getEditButtonEnabled;
  var isEntitySet = TypeGuards.isEntitySet;
  var transformRecursively = BindingToolkit.transformRecursively;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  const ActionRuntime = {
    /**
     * Adds error messages for an action parameter field to the message manager.
     *
     * @param messageManager The active MessageManager instance
     * @param messageParameters Information identifying an action parameter and messages referring to this parameter
     */
    _addMessageForActionParameter: function (messageManager, messageParameters) {
      messageManager.addMessages(messageParameters.map(messageParameter => {
        const binding = messageParameter.actionParameterInfo.field.getBinding(messageParameter.actionParameterInfo.isMultiValue ? "items" : "value");
        return new Message({
          message: messageParameter.message,
          type: "Error",
          processor: binding === null || binding === void 0 ? void 0 : binding.getModel(),
          persistent: true,
          target: binding === null || binding === void 0 ? void 0 : binding.getResolvedPath()
        });
      }));
    },
    /**
     * Checks if all required action parameters contain data and checks for all action parameters if the
     * contained data is valid.
     *
     *
     * @param messageManager The active MessageManager instance
     * @param actionParameterInfos Information identifying an action parameter
     * @param resourceModel The model to load text resources
     * @returns The validation result can be true or false
     */
    validateProperties: async function (messageManager, actionParameterInfos, resourceModel) {
      await Promise.allSettled(actionParameterInfos.map(actionParameterInfo => actionParameterInfo.validationPromise));
      const requiredParameterInfos = actionParameterInfos.filter(parameterInfo => parameterInfo.field.getRequired());
      const allMessages = messageManager.getMessageModel().getData();
      const emptyRequiredFields = requiredParameterInfos.filter(requiredParameterInfo => {
        const fieldId = requiredParameterInfo.field.getId();
        const relevantMessages = allMessages.filter(msg => msg.getControlIds().some(controlId => controlId.includes(fieldId)));
        if (relevantMessages.length > 0) {
          return false;
        } else if (requiredParameterInfo.isMultiValue) {
          return requiredParameterInfo.value === undefined || !requiredParameterInfo.value.length;
        } else {
          return requiredParameterInfo.value === undefined || requiredParameterInfo.value === null || requiredParameterInfo.value === "";
        }
      });
      /* Message for missing mandatory value of the action parameter */
      if (emptyRequiredFields.length) {
        this._addMessageForActionParameter(messageManager, emptyRequiredFields.map(actionParameterInfo => {
          var _actionParameterInfo$;
          return {
            actionParameterInfo: actionParameterInfo,
            message: resourceModel.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_MISSING_MANDATORY_MSG", [((_actionParameterInfo$ = actionParameterInfo.field.getParent()) === null || _actionParameterInfo$ === void 0 ? void 0 : _actionParameterInfo$.getAggregation("label")).getText()])
          };
        }));
      }
      /* Check value state of all parameters */
      const firstInvalidParameter = actionParameterInfos.find(parameterInfo => parameterInfo.hasError || parameterInfo.field.getValueState() === "Error" || emptyRequiredFields.includes(parameterInfo));
      if (firstInvalidParameter) {
        firstInvalidParameter.field.focus();
        return false;
      } else {
        return true;
      }
    },
    /**
     * Sets the action enablement.
     *
     * @function
     * @name setActionEnablement
     * @param oInternalModelContext Object containing the context model
     * @param oActionOperationAvailableMap Map containing the operation availability of actions
     * @param aSelectedContexts Array containing selected contexts of the chart
     * @param sControl Control name
     * @returns The action enablement promises
     * @ui5-restricted
     */
    setActionEnablement: async function (oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, sControl) {
      const aPromises = [];
      for (const sAction in oActionOperationAvailableMap) {
        let aRequestPromises = [];
        oInternalModelContext.setProperty(sAction, false);
        const sProperty = oActionOperationAvailableMap[sAction];
        for (let i = 0; i < aSelectedContexts.length; i++) {
          const oSelectedContext = aSelectedContexts[i];
          if (oSelectedContext) {
            const oContextData = oSelectedContext.getObject();
            if (sControl === "chart") {
              if (sProperty === null && !!oContextData[`#${sAction}`] || oSelectedContext.getObject(sProperty)) {
                //look for action advertisement if present and its value is not null
                oInternalModelContext.setProperty(sAction, true);
                break;
              }
            } else if (sControl === "table") {
              aRequestPromises = this._setActionEnablementForTable(oSelectedContext, oInternalModelContext, sAction, sProperty, aRequestPromises);
            }
          }
        }
        if (sControl === "table") {
          if (!aSelectedContexts.length) {
            oInternalModelContext.setProperty(`dynamicActions/${sAction}`, {
              bEnabled: false,
              aApplicable: [],
              aNotApplicable: []
            });
            aPromises.push(CommonUtils.setContextsBasedOnOperationAvailable(oInternalModelContext, []));
          } else if (aSelectedContexts.length && typeof sProperty === "string") {
            // When all property values have been retrieved, set
            // The applicable and not-applicable selected contexts for each action and
            // The enabled property of the dynamic action in internal model context.
            aPromises.push(CommonUtils.setContextsBasedOnOperationAvailable(oInternalModelContext, aRequestPromises));
          }
        }
      }
      return Promise.all(aPromises);
    },
    setActionEnablementAfterPatch: function (oView, oListBinding, oInternalModelContext) {
      const oInternalModelContextData = oInternalModelContext === null || oInternalModelContext === void 0 ? void 0 : oInternalModelContext.getObject();
      const oControls = (oInternalModelContextData === null || oInternalModelContextData === void 0 ? void 0 : oInternalModelContextData.controls) || {};
      for (const sKey in oControls) {
        if (oControls[sKey] && oControls[sKey].controlId) {
          const oTable = oView.byId(sKey);
          if (oTable && oTable.isA("sap.ui.mdc.Table")) {
            const oRowBinding = oTable.getRowBinding();
            if (oRowBinding == oListBinding) {
              ActionRuntime.setActionEnablement(oTable.getBindingContext("internal"), JSON.parse(oTable.data("operationAvailableMap").customData), oTable.getSelectedContexts(), "table");
            }
          }
        }
      }
    },
    updateEditButtonVisibilityAndEnablement(oView) {
      var _oView$getViewData, _oView$getModel;
      const iViewLevel = (_oView$getViewData = oView.getViewData()) === null || _oView$getViewData === void 0 ? void 0 : _oView$getViewData.viewLevel,
        isEditable = (_oView$getModel = oView.getModel("ui")) === null || _oView$getModel === void 0 ? void 0 : _oView$getModel.getProperty("/isEditable");
      if (iViewLevel > 1 && isEditable !== true) {
        var _oContext$getModel, _oContext$getModel$ge, _entitySet$annotation, _entitySet$annotation2;
        const oContext = oView.getBindingContext();
        const oAppComponent = CommonUtils.getAppComponent(oView);
        const sMetaPath = ModelHelper.getMetaPathForContext(oContext);
        const sEntitySet = ModelHelper.getRootEntitySetPath(sMetaPath);
        const metaContext = oContext === null || oContext === void 0 ? void 0 : (_oContext$getModel = oContext.getModel()) === null || _oContext$getModel === void 0 ? void 0 : (_oContext$getModel$ge = _oContext$getModel.getMetaModel()) === null || _oContext$getModel$ge === void 0 ? void 0 : _oContext$getModel$ge.getContext(oContext === null || oContext === void 0 ? void 0 : oContext.getPath());
        const converterContext = ConverterContext === null || ConverterContext === void 0 ? void 0 : ConverterContext.createConverterContextForMacro(sEntitySet, metaContext, oAppComponent.getDiagnostics(), merge, undefined);
        const entitySet = converterContext.getEntitySet();
        const entityType = converterContext.getEntityType();
        let updateHidden;
        //Find the Update Hidden of the root entity set and bind the property to AnyElement, any changes in the path of the root UpdateHidden will be updated via the property, internal model context is updated based on the property
        const bUpdateHidden = isEntitySet(entitySet) && ((_entitySet$annotation = entitySet.annotations.UI) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.UpdateHidden) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.valueOf());
        if (bUpdateHidden !== true) {
          updateHidden = ModelHelper.isUpdateHidden(entitySet, entityType);
        }
        //Find the operation available property of the root edit configuration and fetch the property using AnyElement
        const sEditEnableBinding = getEditButtonEnabled(converterContext, undefined);
        const draftRootPath = ModelHelper.getDraftRootPath(oContext);
        const sStickyRootPath = ModelHelper.getStickyRootPath(oContext);
        const sPath = draftRootPath || sStickyRootPath;
        const oInternalModelContext = oView.getBindingContext("internal");
        if (sPath) {
          const oRootContext = oView.getModel().bindContext(sPath).getBoundContext();
          if (updateHidden !== undefined) {
            const sHiddenExpression = compileExpression(equal(getHiddenExpression(converterContext, updateHidden), false));
            this.updateEditModelContext(sHiddenExpression, oView, oRootContext, "rootEditVisible", oInternalModelContext);
          }
          if (sEditEnableBinding) {
            this.updateEditModelContext(sEditEnableBinding, oView, oRootContext, "rootEditEnabled", oInternalModelContext);
          }
        }
      }
    },
    updateEditModelContext: function (sBindingExpression, oView, oRootContext, sProperty, oInternalModelContext) {
      if (sBindingExpression) {
        var _oHiddenElement$getMo, _oHiddenElement$getMo2, _oHiddenElement$getBi;
        const oHiddenElement = new AnyElement({
          anyText: sBindingExpression
        });
        oHiddenElement.setBindingContext(null);
        oView.addDependent(oHiddenElement);
        oHiddenElement.getBinding("anyText");
        const oContext = (_oHiddenElement$getMo = oHiddenElement.getModel()) === null || _oHiddenElement$getMo === void 0 ? void 0 : (_oHiddenElement$getMo2 = _oHiddenElement$getMo.bindContext(oRootContext.getPath(), oRootContext, {
          $$groupId: "$auto.Heroes"
        })) === null || _oHiddenElement$getMo2 === void 0 ? void 0 : _oHiddenElement$getMo2.getBoundContext();
        oHiddenElement.setBindingContext(oContext);
        oHiddenElement === null || oHiddenElement === void 0 ? void 0 : (_oHiddenElement$getBi = oHiddenElement.getBinding("anyText")) === null || _oHiddenElement$getBi === void 0 ? void 0 : _oHiddenElement$getBi.attachChange(oEvent => {
          const oNewValue = oEvent.getSource().getExternalValue();
          oInternalModelContext.setProperty(sProperty, oNewValue);
        });
      }
    },
    _setActionEnablementForTable: function (oSelectedContext, oInternalModelContext, sAction, sProperty, aRequestPromises) {
      // Reset all properties before computation
      oInternalModelContext.setProperty(`dynamicActions/${sAction}`, {
        bEnabled: false,
        aApplicable: [],
        aNotApplicable: []
      });
      // Note that non dynamic actions are not processed here. They are enabled because
      // one or more are selected and the second part of the condition in the templating
      // is then undefined and thus the button takes the default enabling, which is true!
      const aApplicable = [],
        aNotApplicable = [],
        sDynamicActionEnabledPath = `${oInternalModelContext.getPath()}/dynamicActions/${sAction}/bEnabled`;
      if (typeof sProperty === "object" && sProperty !== null && sProperty !== undefined) {
        if (oSelectedContext) {
          const oContextData = oSelectedContext.getObject();
          const oTransformedBinding = transformRecursively(sProperty, "PathInModel",
          // eslint-disable-next-line no-loop-func
          function (oBindingExpression) {
            return oContextData ? constant(oContextData[oBindingExpression.path]) : constant(false);
          }, true);
          const sResult = compileExpression(oTransformedBinding);
          if (sResult === "true") {
            oInternalModelContext.getModel().setProperty(sDynamicActionEnabledPath, true);
            aApplicable.push(oSelectedContext);
          } else {
            aNotApplicable.push(oSelectedContext);
          }
        }
        CommonUtils.setDynamicActionContexts(oInternalModelContext, sAction, aApplicable, aNotApplicable);
      } else {
        const oContextData = oSelectedContext === null || oSelectedContext === void 0 ? void 0 : oSelectedContext.getObject();
        if (sProperty === null && !!oContextData[`#${sAction}`]) {
          //look for action advertisement if present and its value is not null
          oInternalModelContext.getModel().setProperty(sDynamicActionEnabledPath, true);
        } else if (oSelectedContext !== undefined) {
          // Collect promises to retrieve singleton or normal property value asynchronously
          aRequestPromises.push(CommonUtils.requestProperty(oSelectedContext, sAction, sProperty, sDynamicActionEnabledPath));
        }
      }
      return aRequestPromises;
    }
  };
  return ActionRuntime;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ActionRuntime", ["sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/TypeGuards","sap/ui/core/message/Message","./controls/AnyElement","./converters/ConverterContext","./converters/objectPage/HeaderAndFooterAction"],function(e,t,n,o,i,a,l,s,r){"use strict";var d=r.getHiddenExpression;var c=r.getEditButtonEnabled;var u=i.isEntitySet;var g=n.transformRecursively;var f=n.equal;var v=n.constant;var p=n.compileExpression;const b={_addMessageForActionParameter:function(e,t){e.addMessages(t.map(e=>{const t=e.actionParameterInfo.field.getBinding(e.actionParameterInfo.isMultiValue?"items":"value");return new a({message:e.message,type:"Error",processor:t===null||t===void 0?void 0:t.getModel(),persistent:true,target:t===null||t===void 0?void 0:t.getResolvedPath()})}))},validateProperties:async function(e,t,n){await Promise.allSettled(t.map(e=>e.validationPromise));const o=t.filter(e=>e.field.getRequired());const i=e.getMessageModel().getData();const a=o.filter(e=>{const t=e.field.getId();const n=i.filter(e=>e.getControlIds().some(e=>e.includes(t)));if(n.length>0){return false}else if(e.isMultiValue){return e.value===undefined||!e.value.length}else{return e.value===undefined||e.value===null||e.value===""}});if(a.length){this._addMessageForActionParameter(e,a.map(e=>{var t;return{actionParameterInfo:e,message:n.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_MISSING_MANDATORY_MSG",[((t=e.field.getParent())===null||t===void 0?void 0:t.getAggregation("label")).getText()])}}))}const l=t.find(e=>e.hasError||e.field.getValueState()==="Error"||a.includes(e));if(l){l.field.focus();return false}else{return true}},setActionEnablement:async function(e,n,o,i){const a=[];for(const l in n){let s=[];e.setProperty(l,false);const r=n[l];for(let t=0;t<o.length;t++){const n=o[t];if(n){const t=n.getObject();if(i==="chart"){if(r===null&&!!t[`#${l}`]||n.getObject(r)){e.setProperty(l,true);break}}else if(i==="table"){s=this._setActionEnablementForTable(n,e,l,r,s)}}}if(i==="table"){if(!o.length){e.setProperty(`dynamicActions/${l}`,{bEnabled:false,aApplicable:[],aNotApplicable:[]});a.push(t.setContextsBasedOnOperationAvailable(e,[]))}else if(o.length&&typeof r==="string"){a.push(t.setContextsBasedOnOperationAvailable(e,s))}}}return Promise.all(a)},setActionEnablementAfterPatch:function(e,t,n){const o=n===null||n===void 0?void 0:n.getObject();const i=(o===null||o===void 0?void 0:o.controls)||{};for(const n in i){if(i[n]&&i[n].controlId){const o=e.byId(n);if(o&&o.isA("sap.ui.mdc.Table")){const e=o.getRowBinding();if(e==t){b.setActionEnablement(o.getBindingContext("internal"),JSON.parse(o.data("operationAvailableMap").customData),o.getSelectedContexts(),"table")}}}}},updateEditButtonVisibilityAndEnablement(n){var i,a;const l=(i=n.getViewData())===null||i===void 0?void 0:i.viewLevel,r=(a=n.getModel("ui"))===null||a===void 0?void 0:a.getProperty("/isEditable");if(l>1&&r!==true){var g,v,b,m;const i=n.getBindingContext();const a=t.getAppComponent(n);const l=o.getMetaPathForContext(i);const r=o.getRootEntitySetPath(l);const h=i===null||i===void 0?void 0:(g=i.getModel())===null||g===void 0?void 0:(v=g.getMetaModel())===null||v===void 0?void 0:v.getContext(i===null||i===void 0?void 0:i.getPath());const A=s===null||s===void 0?void 0:s.createConverterContextForMacro(r,h,a.getDiagnostics(),e,undefined);const E=A.getEntitySet();const y=A.getEntityType();let P;const M=u(E)&&((b=E.annotations.UI)===null||b===void 0?void 0:(m=b.UpdateHidden)===null||m===void 0?void 0:m.valueOf());if(M!==true){P=o.isUpdateHidden(E,y)}const x=c(A,undefined);const C=o.getDraftRootPath(i);const B=o.getStickyRootPath(i);const O=C||B;const I=n.getBindingContext("internal");if(O){const e=n.getModel().bindContext(O).getBoundContext();if(P!==undefined){const t=p(f(d(A,P),false));this.updateEditModelContext(t,n,e,"rootEditVisible",I)}if(x){this.updateEditModelContext(x,n,e,"rootEditEnabled",I)}}}},updateEditModelContext:function(e,t,n,o,i){if(e){var a,s,r;const d=new l({anyText:e});d.setBindingContext(null);t.addDependent(d);d.getBinding("anyText");const c=(a=d.getModel())===null||a===void 0?void 0:(s=a.bindContext(n.getPath(),n,{$$groupId:"$auto.Heroes"}))===null||s===void 0?void 0:s.getBoundContext();d.setBindingContext(c);d===null||d===void 0?void 0:(r=d.getBinding("anyText"))===null||r===void 0?void 0:r.attachChange(e=>{const t=e.getSource().getExternalValue();i.setProperty(o,t)})}},_setActionEnablementForTable:function(e,n,o,i,a){n.setProperty(`dynamicActions/${o}`,{bEnabled:false,aApplicable:[],aNotApplicable:[]});const l=[],s=[],r=`${n.getPath()}/dynamicActions/${o}/bEnabled`;if(typeof i==="object"&&i!==null&&i!==undefined){if(e){const t=e.getObject();const o=g(i,"PathInModel",function(e){return t?v(t[e.path]):v(false)},true);const a=p(o);if(a==="true"){n.getModel().setProperty(r,true);l.push(e)}else{s.push(e)}}t.setDynamicActionContexts(n,o,l,s)}else{const l=e===null||e===void 0?void 0:e.getObject();if(i===null&&!!l[`#${o}`]){n.getModel().setProperty(r,true)}else if(e!==undefined){a.push(t.requestProperty(e,o,i,r))}}return a}};return b},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/AppComponent-dbg", ["sap/base/Log", "sap/fe/core/AppStateHandler", "sap/fe/core/controllerextensions/routing/RouterProxy", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/library", "sap/fe/core/manifestMerger/ChangePageConfiguration", "sap/fe/core/support/Diagnostics", "sap/ui/core/Core", "sap/ui/core/Element", "sap/ui/core/UIComponent", "sap/ui/mdc/table/TableTypeBase", "sap/ui/model/json/JSONModel", "./controllerextensions/BusyLocker", "./converters/MetaModelConverter", "./helpers/SemanticDateOperators"], function (Log, AppStateHandler, RouterProxy, ClassSupport, ModelHelper, library, ChangePageConfiguration, Diagnostics, Core, UI5Element, UIComponent, TableTypeBase, JSONModel, BusyLocker, MetaModelConverter, SemanticDateOperators) {
  "use strict";

  var _dec, _class, _class2;
  var deleteModelCacheData = MetaModelConverter.deleteModelCacheData;
  var cleanPageConfigurationChanges = ChangePageConfiguration.cleanPageConfigurationChanges;
  var changeConfiguration = ChangePageConfiguration.changeConfiguration;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  const StartupMode = library.StartupMode;
  TableTypeBase.prototype.exit = function () {
    var _this$_oManagedObject;
    (_this$_oManagedObject = this._oManagedObjectModel) === null || _this$_oManagedObject === void 0 ? void 0 : _this$_oManagedObject.destroy();
    delete this._oManagedObjectModel;
    UI5Element.prototype.exit.apply(this, []);
  };
  const NAVCONF = {
    FCL: {
      VIEWNAME: "sap.fe.core.rootView.Fcl",
      VIEWNAME_COMPATIBILITY: "sap.fe.templates.RootContainer.view.Fcl",
      ROUTERCLASS: "sap.f.routing.Router"
    },
    NAVCONTAINER: {
      VIEWNAME: "sap.fe.core.rootView.NavContainer",
      VIEWNAME_COMPATIBILITY: "sap.fe.templates.RootContainer.view.NavContainer",
      ROUTERCLASS: "sap.m.routing.Router"
    }
  };
  /**
   * Main class for components used for an application in SAP Fiori elements.
   *
   * Application developers using the templates and building blocks provided by SAP Fiori elements should create their apps by extending this component.
   * This ensures that all the necessary services that you need for the building blocks and templates to work properly are started.
   *
   * When you use sap.fe.core.AppComponent as the base component, you also need to use a rootView. SAP Fiori elements provides two options: <br/>
   *  - sap.fe.core.rootView.NavContainer when using sap.m.routing.Router <br/>
   *  - sap.fe.core.rootView.Fcl when using sap.f.routing.Router (FCL use case) <br/>
   *
   * @hideconstructor
   * @public
   * @name sap.fe.core.AppComponent
   */
  let AppComponent = (_dec = defineUI5Class("sap.fe.core.AppComponent", {
    interfaces: ["sap.ui.core.IAsyncContentCreation"],
    config: {
      fullWidth: true
    },
    manifest: {
      "sap.ui5": {
        services: {
          resourceModel: {
            factoryName: "sap.fe.core.services.ResourceModelService",
            startup: "waitFor",
            settings: {
              bundles: ["sap.fe.core.messagebundle"],
              modelName: "sap.fe.i18n"
            }
          },
          routingService: {
            factoryName: "sap.fe.core.services.RoutingService",
            startup: "waitFor"
          },
          shellServices: {
            factoryName: "sap.fe.core.services.ShellServices",
            startup: "waitFor"
          },
          ShellUIService: {
            factoryName: "sap.ushell.ui5service.ShellUIService"
          },
          navigationService: {
            factoryName: "sap.fe.core.services.NavigationService",
            startup: "waitFor"
          },
          environmentCapabilities: {
            factoryName: "sap.fe.core.services.EnvironmentService",
            startup: "waitFor"
          },
          sideEffectsService: {
            factoryName: "sap.fe.core.services.SideEffectsService",
            startup: "waitFor"
          },
          asyncComponentService: {
            factoryName: "sap.fe.core.services.AsyncComponentService",
            startup: "waitFor"
          }
        },
        rootView: {
          viewName: NAVCONF.NAVCONTAINER.VIEWNAME,
          type: "XML",
          async: true,
          id: "appRootView"
        },
        routing: {
          config: {
            controlId: "appContent",
            routerClass: NAVCONF.NAVCONTAINER.ROUTERCLASS,
            viewType: "XML",
            controlAggregation: "pages",
            async: true,
            containerOptions: {
              propagateModel: true
            }
          }
        }
      }
    },
    designtime: "sap/fe/core/designtime/AppComponent.designtime",
    library: "sap.fe.core"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_UIComponent) {
    _inheritsLoose(AppComponent, _UIComponent);
    function AppComponent() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _UIComponent.call(this, ...args) || this;
      _this.startupMode = StartupMode.Normal;
      return _this;
    }
    var _proto = AppComponent.prototype;
    /**
     * @private
     * @name sap.fe.core.AppComponent.getMetadata
     * @function
     */
    _proto._isFclEnabled = function _isFclEnabled() {
      var _oManifestUI5$routing, _oManifestUI5$routing2;
      const oManifestUI5 = this.getManifestEntry("sap.ui5");
      return (oManifestUI5 === null || oManifestUI5 === void 0 ? void 0 : (_oManifestUI5$routing = oManifestUI5.routing) === null || _oManifestUI5$routing === void 0 ? void 0 : (_oManifestUI5$routing2 = _oManifestUI5$routing.config) === null || _oManifestUI5$routing2 === void 0 ? void 0 : _oManifestUI5$routing2.routerClass) === NAVCONF.FCL.ROUTERCLASS;
    }

    /**
     * Provides a hook to initialize feature toggles.
     *
     * This hook is being called by the SAP Fiori elements AppComponent at the time feature toggles can be initialized.
     * To change page configuration use the {@link sap.fe.core.AppComponent#changePageConfiguration} method.
     *
     * @function
     * @name sap.fe.core.AppComponent#initializeFeatureToggles
     * @memberof sap.fe.core.AppComponent
     * @public
     */;
    _proto.initializeFeatureToggles = async function initializeFeatureToggles() {
      // this method can be overridden by applications
      return Promise.resolve();
    }

    /**
     * Changes the page configuration of SAP Fiori elements.
     *
     * This method enables you to change the page configuration of SAP Fiori elements.
     *
     * @function
     * @name sap.fe.core.AppComponent#changePageConfiguration
     * @memberof sap.fe.core.AppComponent
     * @param pageId The ID of the page for which the configuration is to be changed.
     * @param path The path in the page settings for which the configuration is to be changed.
     * @param value The new value of the configuration. This could be a plain value like a string, or a Boolean, or a structured object.
     * @public
     */;
    _proto.changePageConfiguration = function changePageConfiguration(pageId, path, value) {
      changeConfiguration(this.getManifest(), pageId, path, value, true);
    }

    /**
     * Get a reference to the RouterProxy.
     *
     * @function
     * @name sap.fe.core.AppComponent#getRouterProxy
     * @memberof sap.fe.core.AppComponent
     * @returns A Reference to the RouterProxy
     * @ui5-restricted
     * @final
     */;
    _proto.getRouterProxy = function getRouterProxy() {
      return this._oRouterProxy;
    }

    /**
     * Get a reference to the AppStateHandler.
     *
     * @function
     * @name sap.fe.core.AppComponent#getAppStateHandler
     * @memberof sap.fe.core.AppComponent
     * @returns A reference to the AppStateHandler
     * @ui5-restricted
     * @final
     */;
    _proto.getAppStateHandler = function getAppStateHandler() {
      return this._oAppStateHandler;
    }

    /**
     * Get a reference to the nav/FCL Controller.
     *
     * @function
     * @name sap.fe.core.AppComponent#getRootViewController
     * @memberof sap.fe.core.AppComponent
     * @returns  A reference to the FCL Controller
     * @ui5-restricted
     * @final
     */;
    _proto.getRootViewController = function getRootViewController() {
      return this.getRootControl().getController();
    }

    /**
     * Get the NavContainer control or the FCL control.
     *
     * @function
     * @name sap.fe.core.AppComponent#getRootContainer
     * @memberof sap.fe.core.AppComponent
     * @returns  A reference to NavContainer control or the FCL control
     * @ui5-restricted
     * @final
     */;
    _proto.getRootContainer = function getRootContainer() {
      return this.getRootControl().getContent()[0];
    }

    /**
     * Get the startup mode of the app.
     *
     * @returns The startup mode
     * @private
     */;
    _proto.getStartupMode = function getStartupMode() {
      return this.startupMode;
    }

    /**
     * Set the startup mode for the app to 'Create'.
     *
     * @private
     */;
    _proto.setStartupModeCreate = function setStartupModeCreate() {
      this.startupMode = StartupMode.Create;
    }

    /**
     * Set the startup mode for the app to 'AutoCreate'.
     *
     * @private
     */;
    _proto.setStartupModeAutoCreate = function setStartupModeAutoCreate() {
      this.startupMode = StartupMode.AutoCreate;
    }

    /**
     * Set the startup mode for the app to 'Deeplink'.
     *
     * @private
     */;
    _proto.setStartupModeDeeplink = function setStartupModeDeeplink() {
      this.startupMode = StartupMode.Deeplink;
    };
    _proto.init = function init() {
      var _oModel$isA, _oManifestUI5$rootVie;
      const uiModel = new JSONModel({
        editMode: library.EditMode.Display,
        isEditable: false,
        draftStatus: library.DraftStatus.Clear,
        busy: false,
        busyLocal: {},
        pages: {}
      });
      const oInternalModel = new JSONModel({
        pages: {}
      });
      // set the binding OneWay for uiModel to prevent changes if controller extensions modify a bound property of a control
      uiModel.setDefaultBindingMode("OneWay");
      // for internal model binding needs to be two way
      ModelHelper.enhanceUiJSONModel(uiModel, library);
      ModelHelper.enhanceInternalJSONModel(oInternalModel);
      this.setModel(uiModel, "ui");
      this.setModel(oInternalModel, "internal");
      this.bInitializeRouting = this.bInitializeRouting !== undefined ? this.bInitializeRouting : true;
      this._oRouterProxy = new RouterProxy();
      this._oAppStateHandler = new AppStateHandler(this);
      this._oDiagnostics = new Diagnostics();
      const oModel = this.getModel();
      if (oModel !== null && oModel !== void 0 && (_oModel$isA = oModel.isA) !== null && _oModel$isA !== void 0 && _oModel$isA.call(oModel, "sap.ui.model.odata.v4.ODataModel")) {
        this.entityContainer = oModel.getMetaModel().requestObject("/$EntityContainer/");
      } else {
        // not an OData v4 service
        this.entityContainer = Promise.resolve();
      }
      const oManifestUI5 = this.getManifest()["sap.ui5"];
      if (oManifestUI5 !== null && oManifestUI5 !== void 0 && (_oManifestUI5$rootVie = oManifestUI5.rootView) !== null && _oManifestUI5$rootVie !== void 0 && _oManifestUI5$rootVie.viewName) {
        var _oManifestUI5$routing3, _oManifestUI5$routing4, _oManifestUI5$routing5, _oManifestUI5$routing6, _oManifestUI5$rootVie2, _oManifestUI5$rootVie3;
        // The application specified an own root view in the manifest

        // Root View was moved from sap.fe.templates to sap.fe.core - keep it compatible
        if (oManifestUI5.rootView.viewName === NAVCONF.FCL.VIEWNAME_COMPATIBILITY) {
          oManifestUI5.rootView.viewName = NAVCONF.FCL.VIEWNAME;
        } else if (oManifestUI5.rootView.viewName === NAVCONF.NAVCONTAINER.VIEWNAME_COMPATIBILITY) {
          oManifestUI5.rootView.viewName = NAVCONF.NAVCONTAINER.VIEWNAME;
        }
        if (oManifestUI5.rootView.viewName === NAVCONF.FCL.VIEWNAME && ((_oManifestUI5$routing3 = oManifestUI5.routing) === null || _oManifestUI5$routing3 === void 0 ? void 0 : (_oManifestUI5$routing4 = _oManifestUI5$routing3.config) === null || _oManifestUI5$routing4 === void 0 ? void 0 : _oManifestUI5$routing4.routerClass) === NAVCONF.FCL.ROUTERCLASS) {
          Log.info(`Rootcontainer: "${NAVCONF.FCL.VIEWNAME}" - Routerclass: "${NAVCONF.FCL.ROUTERCLASS}"`);
        } else if (oManifestUI5.rootView.viewName === NAVCONF.NAVCONTAINER.VIEWNAME && ((_oManifestUI5$routing5 = oManifestUI5.routing) === null || _oManifestUI5$routing5 === void 0 ? void 0 : (_oManifestUI5$routing6 = _oManifestUI5$routing5.config) === null || _oManifestUI5$routing6 === void 0 ? void 0 : _oManifestUI5$routing6.routerClass) === NAVCONF.NAVCONTAINER.ROUTERCLASS) {
          Log.info(`Rootcontainer: "${NAVCONF.NAVCONTAINER.VIEWNAME}" - Routerclass: "${NAVCONF.NAVCONTAINER.ROUTERCLASS}"`);
        } else if (((_oManifestUI5$rootVie2 = oManifestUI5.rootView) === null || _oManifestUI5$rootVie2 === void 0 ? void 0 : (_oManifestUI5$rootVie3 = _oManifestUI5$rootVie2.viewName) === null || _oManifestUI5$rootVie3 === void 0 ? void 0 : _oManifestUI5$rootVie3.indexOf("sap.fe.core.rootView")) !== -1) {
          var _oManifestUI5$routing7, _oManifestUI5$routing8;
          throw Error(`\nWrong configuration for the couple (rootView/routerClass) in manifest file.\n` + `Current values are :(${oManifestUI5.rootView.viewName}/${((_oManifestUI5$routing7 = oManifestUI5.routing) === null || _oManifestUI5$routing7 === void 0 ? void 0 : (_oManifestUI5$routing8 = _oManifestUI5$routing7.config) === null || _oManifestUI5$routing8 === void 0 ? void 0 : _oManifestUI5$routing8.routerClass) || "<missing router class>"})\n` + `Expected values are \n` + `\t - (${NAVCONF.NAVCONTAINER.VIEWNAME}/${NAVCONF.NAVCONTAINER.ROUTERCLASS})\n` + `\t - (${NAVCONF.FCL.VIEWNAME}/${NAVCONF.FCL.ROUTERCLASS})`);
        } else {
          Log.info(`Rootcontainer: "${oManifestUI5.rootView.viewName}" - Routerclass: "${NAVCONF.NAVCONTAINER.ROUTERCLASS}"`);
        }
      }

      // Adding Semantic Date Operators
      // Commenting since it is not needed for SingleRange
      SemanticDateOperators.addSemanticDateOperators();

      // the init function configures the routing according to the settings above
      // it will call the createContent function to instantiate the RootView and add it to the UIComponent aggregations

      _UIComponent.prototype.init.call(this);
      AppComponent.instanceMap[this.getId()] = this;
    };
    _proto.onServicesStarted = async function onServicesStarted() {
      await this.initializeFeatureToggles();

      //router must be started once the rootcontainer is initialized
      //starting of the router
      const finalizedRoutingInitialization = () => {
        this.entityContainer.then(() => {
          if (this.getRootViewController().attachRouteMatchers) {
            this.getRootViewController().attachRouteMatchers();
          }
          this.getRouter().initialize();
          this.getRouterProxy().init(this, this._isFclEnabled());
          return;
        }).catch(error => {
          const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
          this.getRootViewController().displayErrorPage(oResourceBundle.getText("C_APP_COMPONENT_SAPFE_APPSTART_TECHNICAL_ISSUES"), {
            title: oResourceBundle.getText("C_COMMON_SAPFE_ERROR"),
            description: error.message,
            FCLLevel: 0
          });
        });
      };
      if (this.bInitializeRouting) {
        return this.getRoutingService().initializeRouting().then(() => {
          if (this.getRootViewController()) {
            finalizedRoutingInitialization();
          } else {
            this.getRootControl().attachAfterInit(function () {
              finalizedRoutingInitialization();
            });
          }
          return;
        }).catch(function (err) {
          Log.error(`cannot cannot initialize routing: ${err.toString()}`);
        });
      }
    };
    _proto.exit = function exit() {
      this._oAppStateHandler.destroy();
      this._oRouterProxy.destroy();
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      delete this._oAppStateHandler;
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      delete this._oRouterProxy;
      deleteModelCacheData(this.getMetaModel());
      this.getModel("ui").destroy();
      cleanPageConfigurationChanges();
    };
    _proto.getMetaModel = function getMetaModel() {
      return this.getModel().getMetaModel();
    };
    _proto.getDiagnostics = function getDiagnostics() {
      return this._oDiagnostics;
    };
    _proto.destroy = function destroy(bSuppressInvalidate) {
      var _this$getRoutingServi;
      // LEAKS, with workaround for some Flex / MDC issue
      try {
        // 	// This one is only a leak if you don't go back to the same component in the long run
        //delete sap.ui.fl.FlexControllerFactory._componentInstantiationPromises[this.getId()];

        delete AppComponent.instanceMap[this.getId()];

        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        delete window._routing;
      } catch (e) {
        Log.info(e);
      }

      //WORKAROUND for sticky discard request : due to async callback, request triggered by the exitApplication will be send after the UIComponent.prototype.destroy
      //so we need to copy the Requestor headers as it will be destroy

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      const oMainModel = this.oModels[undefined];
      let oHeaders;
      if (oMainModel.oRequestor) {
        oHeaders = jQuery.extend({}, oMainModel.oRequestor.mHeaders);
      }

      // As we need to cleanup the application / handle the dirty object we need to call our cleanup before the models are destroyed
      (_this$getRoutingServi = this.getRoutingService()) === null || _this$getRoutingServi === void 0 ? void 0 : _this$getRoutingServi.beforeExit();
      _UIComponent.prototype.destroy.call(this, bSuppressInvalidate);
      if (oHeaders && oMainModel.oRequestor) {
        oMainModel.oRequestor.mHeaders = oHeaders;
      }
    };
    _proto.getRoutingService = function getRoutingService() {
      return {}; // overriden at runtime
    };
    _proto.getShellServices = function getShellServices() {
      return {}; // overriden at runtime
    };
    _proto.getNavigationService = function getNavigationService() {
      return {}; // overriden at runtime
    };
    _proto.getSideEffectsService = function getSideEffectsService() {
      return {};
    };
    _proto.getEnvironmentCapabilities = function getEnvironmentCapabilities() {
      return {};
    };
    _proto.getStartupParameters = async function getStartupParameters() {
      const oComponentData = this.getComponentData();
      return Promise.resolve(oComponentData && oComponentData.startupParameters || {});
    };
    _proto.restore = function restore() {
      // called by FLP when app sap-keep-alive is enabled and app is restored
      this.getRootViewController().viewState.onRestore();
    };
    _proto.suspend = function suspend() {
      // called by FLP when app sap-keep-alive is enabled and app is suspended
      this.getRootViewController().viewState.onSuspend();
    }

    /**
     * navigateBasedOnStartupParameter function is a public api that acts as a wrapper to _manageDeepLinkStartup function. It passes the startup parameters further to _manageDeepLinkStartup function
     *
     * @param startupParameters Defines the startup parameters which is further passed to _manageDeepLinkStartup function.
     */;
    _proto.navigateBasedOnStartupParameter = async function navigateBasedOnStartupParameter(startupParameters) {
      try {
        if (!BusyLocker.isLocked(this.getModel("ui"))) {
          if (!startupParameters) {
            startupParameters = null;
          }
          const routingService = this.getRoutingService();
          await routingService._manageDeepLinkStartup(startupParameters);
        }
      } catch (exception) {
        Log.error(exception);
        BusyLocker.unlock(this.getModel("ui"));
      }
    };
    return AppComponent;
  }(UIComponent), _class2.instanceMap = {}, _class2)) || _class);
  return AppComponent;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/AppComponent", ["sap/base/Log","sap/fe/core/AppStateHandler","sap/fe/core/controllerextensions/routing/RouterProxy","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ModelHelper","sap/fe/core/library","sap/fe/core/manifestMerger/ChangePageConfiguration","sap/fe/core/support/Diagnostics","sap/ui/core/Core","sap/ui/core/Element","sap/ui/core/UIComponent","sap/ui/mdc/table/TableTypeBase","sap/ui/model/json/JSONModel","./controllerextensions/BusyLocker","./converters/MetaModelConverter","./helpers/SemanticDateOperators"],function(e,t,o,i,r,n,a,s,c,u,l,p,d,f,g,v){"use strict";var C,h,R;var N=g.deleteModelCacheData;var S=a.cleanPageConfigurationChanges;var M=a.changeConfiguration;var A=i.defineUI5Class;function E(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;y(e,t)}function y(e,t){y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return y(e,t)}const m=n.StartupMode;p.prototype.exit=function(){var e;(e=this._oManagedObjectModel)===null||e===void 0?void 0:e.destroy();delete this._oManagedObjectModel;u.prototype.exit.apply(this,[])};const w={FCL:{VIEWNAME:"sap.fe.core.rootView.Fcl",VIEWNAME_COMPATIBILITY:"sap.fe.templates.RootContainer.view.Fcl",ROUTERCLASS:"sap.f.routing.Router"},NAVCONTAINER:{VIEWNAME:"sap.fe.core.rootView.NavContainer",VIEWNAME_COMPATIBILITY:"sap.fe.templates.RootContainer.view.NavContainer",ROUTERCLASS:"sap.m.routing.Router"}};let I=(C=A("sap.fe.core.AppComponent",{interfaces:["sap.ui.core.IAsyncContentCreation"],config:{fullWidth:true},manifest:{"sap.ui5":{services:{resourceModel:{factoryName:"sap.fe.core.services.ResourceModelService",startup:"waitFor",settings:{bundles:["sap.fe.core.messagebundle"],modelName:"sap.fe.i18n"}},routingService:{factoryName:"sap.fe.core.services.RoutingService",startup:"waitFor"},shellServices:{factoryName:"sap.fe.core.services.ShellServices",startup:"waitFor"},ShellUIService:{factoryName:"sap.ushell.ui5service.ShellUIService"},navigationService:{factoryName:"sap.fe.core.services.NavigationService",startup:"waitFor"},environmentCapabilities:{factoryName:"sap.fe.core.services.EnvironmentService",startup:"waitFor"},sideEffectsService:{factoryName:"sap.fe.core.services.SideEffectsService",startup:"waitFor"},asyncComponentService:{factoryName:"sap.fe.core.services.AsyncComponentService",startup:"waitFor"}},rootView:{viewName:w.NAVCONTAINER.VIEWNAME,type:"XML",async:true,id:"appRootView"},routing:{config:{controlId:"appContent",routerClass:w.NAVCONTAINER.ROUTERCLASS,viewType:"XML",controlAggregation:"pages",async:true,containerOptions:{propagateModel:true}}}}},designtime:"sap/fe/core/designtime/AppComponent.designtime",library:"sap.fe.core"}),C(h=(R=function(i){E(a,i);function a(){var e;for(var t=arguments.length,o=new Array(t),r=0;r<t;r++){o[r]=arguments[r]}e=i.call(this,...o)||this;e.startupMode=m.Normal;return e}var u=a.prototype;u._isFclEnabled=function e(){var t,o;const i=this.getManifestEntry("sap.ui5");return(i===null||i===void 0?void 0:(t=i.routing)===null||t===void 0?void 0:(o=t.config)===null||o===void 0?void 0:o.routerClass)===w.FCL.ROUTERCLASS};u.initializeFeatureToggles=async function e(){return Promise.resolve()};u.changePageConfiguration=function e(t,o,i){M(this.getManifest(),t,o,i,true)};u.getRouterProxy=function e(){return this._oRouterProxy};u.getAppStateHandler=function e(){return this._oAppStateHandler};u.getRootViewController=function e(){return this.getRootControl().getController()};u.getRootContainer=function e(){return this.getRootControl().getContent()[0]};u.getStartupMode=function e(){return this.startupMode};u.setStartupModeCreate=function e(){this.startupMode=m.Create};u.setStartupModeAutoCreate=function e(){this.startupMode=m.AutoCreate};u.setStartupModeDeeplink=function e(){this.startupMode=m.Deeplink};u.init=function c(){var u,l;const p=new d({editMode:n.EditMode.Display,isEditable:false,draftStatus:n.DraftStatus.Clear,busy:false,busyLocal:{},pages:{}});const f=new d({pages:{}});p.setDefaultBindingMode("OneWay");r.enhanceUiJSONModel(p,n);r.enhanceInternalJSONModel(f);this.setModel(p,"ui");this.setModel(f,"internal");this.bInitializeRouting=this.bInitializeRouting!==undefined?this.bInitializeRouting:true;this._oRouterProxy=new o;this._oAppStateHandler=new t(this);this._oDiagnostics=new s;const g=this.getModel();if(g!==null&&g!==void 0&&(u=g.isA)!==null&&u!==void 0&&u.call(g,"sap.ui.model.odata.v4.ODataModel")){this.entityContainer=g.getMetaModel().requestObject("/$EntityContainer/")}else{this.entityContainer=Promise.resolve()}const C=this.getManifest()["sap.ui5"];if(C!==null&&C!==void 0&&(l=C.rootView)!==null&&l!==void 0&&l.viewName){var h,R,N,S,M,A;if(C.rootView.viewName===w.FCL.VIEWNAME_COMPATIBILITY){C.rootView.viewName=w.FCL.VIEWNAME}else if(C.rootView.viewName===w.NAVCONTAINER.VIEWNAME_COMPATIBILITY){C.rootView.viewName=w.NAVCONTAINER.VIEWNAME}if(C.rootView.viewName===w.FCL.VIEWNAME&&((h=C.routing)===null||h===void 0?void 0:(R=h.config)===null||R===void 0?void 0:R.routerClass)===w.FCL.ROUTERCLASS){e.info(`Rootcontainer: "${w.FCL.VIEWNAME}" - Routerclass: "${w.FCL.ROUTERCLASS}"`)}else if(C.rootView.viewName===w.NAVCONTAINER.VIEWNAME&&((N=C.routing)===null||N===void 0?void 0:(S=N.config)===null||S===void 0?void 0:S.routerClass)===w.NAVCONTAINER.ROUTERCLASS){e.info(`Rootcontainer: "${w.NAVCONTAINER.VIEWNAME}" - Routerclass: "${w.NAVCONTAINER.ROUTERCLASS}"`)}else if(((M=C.rootView)===null||M===void 0?void 0:(A=M.viewName)===null||A===void 0?void 0:A.indexOf("sap.fe.core.rootView"))!==-1){var E,y;throw Error(`\nWrong configuration for the couple (rootView/routerClass) in manifest file.\n`+`Current values are :(${C.rootView.viewName}/${((E=C.routing)===null||E===void 0?void 0:(y=E.config)===null||y===void 0?void 0:y.routerClass)||"<missing router class>"})\n`+`Expected values are \n`+`\t - (${w.NAVCONTAINER.VIEWNAME}/${w.NAVCONTAINER.ROUTERCLASS})\n`+`\t - (${w.FCL.VIEWNAME}/${w.FCL.ROUTERCLASS})`)}else{e.info(`Rootcontainer: "${C.rootView.viewName}" - Routerclass: "${w.NAVCONTAINER.ROUTERCLASS}"`)}}v.addSemanticDateOperators();i.prototype.init.call(this);a.instanceMap[this.getId()]=this};u.onServicesStarted=async function t(){await this.initializeFeatureToggles();const o=()=>{this.entityContainer.then(()=>{if(this.getRootViewController().attachRouteMatchers){this.getRootViewController().attachRouteMatchers()}this.getRouter().initialize();this.getRouterProxy().init(this,this._isFclEnabled());return}).catch(e=>{const t=c.getLibraryResourceBundle("sap.fe.core");this.getRootViewController().displayErrorPage(t.getText("C_APP_COMPONENT_SAPFE_APPSTART_TECHNICAL_ISSUES"),{title:t.getText("C_COMMON_SAPFE_ERROR"),description:e.message,FCLLevel:0})})};if(this.bInitializeRouting){return this.getRoutingService().initializeRouting().then(()=>{if(this.getRootViewController()){o()}else{this.getRootControl().attachAfterInit(function(){o()})}return}).catch(function(t){e.error(`cannot cannot initialize routing: ${t.toString()}`)})}};u.exit=function e(){this._oAppStateHandler.destroy();this._oRouterProxy.destroy();delete this._oAppStateHandler;delete this._oRouterProxy;N(this.getMetaModel());this.getModel("ui").destroy();S()};u.getMetaModel=function e(){return this.getModel().getMetaModel()};u.getDiagnostics=function e(){return this._oDiagnostics};u.destroy=function t(o){var r;try{delete a.instanceMap[this.getId()];delete window._routing}catch(t){e.info(t)}const n=this.oModels[undefined];let s;if(n.oRequestor){s=jQuery.extend({},n.oRequestor.mHeaders)}(r=this.getRoutingService())===null||r===void 0?void 0:r.beforeExit();i.prototype.destroy.call(this,o);if(s&&n.oRequestor){n.oRequestor.mHeaders=s}};u.getRoutingService=function e(){return{}};u.getShellServices=function e(){return{}};u.getNavigationService=function e(){return{}};u.getSideEffectsService=function e(){return{}};u.getEnvironmentCapabilities=function e(){return{}};u.getStartupParameters=async function e(){const t=this.getComponentData();return Promise.resolve(t&&t.startupParameters||{})};u.restore=function e(){this.getRootViewController().viewState.onRestore()};u.suspend=function e(){this.getRootViewController().viewState.onSuspend()};u.navigateBasedOnStartupParameter=async function t(o){try{if(!f.isLocked(this.getModel("ui"))){if(!o){o=null}const e=this.getRoutingService();await e._manageDeepLinkStartup(o)}}catch(t){e.error(t);f.unlock(this.getModel("ui"))}};return a}(l),R.instanceMap={},R))||h);return I},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/AppStateHandler-dbg", ["sap/base/Log", "sap/base/util/deepEqual", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ToES6Promise", "sap/fe/navigation/library", "sap/ui/base/Object", "./controllerextensions/BusyLocker", "./helpers/ModelHelper"], function (Log, deepEqual, ClassSupport, toES6Promise, library, BaseObject, BusyLocker, ModelHelper) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  const NavType = library.NavType;
  let AppStateHandler = (_dec = defineUI5Class("sap.fe.core.AppStateHandler"), _dec(_class = /*#__PURE__*/function (_BaseObject) {
    _inheritsLoose(AppStateHandler, _BaseObject);
    function AppStateHandler(oAppComponent) {
      var _this;
      _this = _BaseObject.call(this) || this;
      _this._mCurrentAppState = {};
      _this.oAppComponent = oAppComponent;
      _this.sId = `${oAppComponent.getId()}/AppStateHandler`;
      _this.nbSimultaneousCreateRequest = 0;
      _this.bNoRouteChange = false;
      Log.info("APPSTATE : Appstate handler initialized");
      return _this;
    }
    var _proto = AppStateHandler.prototype;
    _proto.getId = function getId() {
      return this.sId;
    }

    /**
     * Creates or updates the appstate.
     *
     * @returns A promise resolving the stored data
     * @ui5-restricted
     */;
    _proto.createAppState = async function createAppState() {
      if (!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this)) {
        return;
      }
      const oNavigationService = this.oAppComponent.getNavigationService(),
        oRouterProxy = this.oAppComponent.getRouterProxy(),
        sHash = oRouterProxy.getHash(),
        oController = this.oAppComponent.getRootControl().getController(),
        bIsStickyMode = ModelHelper.isStickySessionSupported(this.oAppComponent.getMetaModel());
      if (!oController.viewState) {
        throw new Error(`viewState controller extension not available for controller: ${oController.getMetadata().getName()}`);
      }
      const mInnerAppState = await oController.viewState.retrieveViewState();
      const oStoreData = {
        appState: mInnerAppState
      };
      if (mInnerAppState && !deepEqual(this._mCurrentAppState, mInnerAppState)) {
        this._mCurrentAppState = mInnerAppState;
        try {
          this.nbSimultaneousCreateRequest++;
          const sAppStateKey = await oNavigationService.storeInnerAppStateAsync(oStoreData, true, true);
          Log.info("APPSTATE: Appstate stored");
          const sNewHash = oNavigationService.replaceInnerAppStateKey(sHash, sAppStateKey);
          this.nbSimultaneousCreateRequest--;
          if (this.nbSimultaneousCreateRequest === 0 && sNewHash !== sHash) {
            oRouterProxy.navToHash(sNewHash, undefined, undefined, undefined, !bIsStickyMode);
            this.bNoRouteChange = true;
          }
          Log.info("APPSTATE: navToHash");
        } catch (oError) {
          Log.error(oError);
        }
      }
      return oStoreData;
    };
    _proto._createNavigationParameters = function _createNavigationParameters(oAppData, sNavType) {
      return Object.assign({}, oAppData, {
        selectionVariantDefaults: oAppData.oDefaultedSelectionVariant,
        selectionVariant: oAppData.oSelectionVariant,
        requiresStandardVariant: !oAppData.bNavSelVarHasDefaultsOnly,
        navigationType: sNavType
      });
    };
    _proto._checkIfLastSeenRecord = function _checkIfLastSeenRecord(view) {
      //getting the internal model context in order to fetch the technicalkeys of last seen record and close column flag set in the internalrouting for retaining settings in persistence mode
      const internalModelContext = view && view.getBindingContext("internal");
      if (internalModelContext && internalModelContext.getProperty("fclColumnClosed") === true) {
        const technicalKeysObject = internalModelContext && internalModelContext.getProperty("technicalKeysOfLastSeenRecord");
        const bindingContext = view === null || view === void 0 ? void 0 : view.getBindingContext();
        const path = bindingContext && bindingContext.getPath() || "";
        const metaModel = bindingContext === null || bindingContext === void 0 ? void 0 : bindingContext.getModel().getMetaModel();
        const metaPath = metaModel === null || metaModel === void 0 ? void 0 : metaModel.getMetaPath(path);
        const technicalKeys = metaModel === null || metaModel === void 0 ? void 0 : metaModel.getObject(`${metaPath}/$Type/$Key`);
        for (let i = 0; i < technicalKeys.length; i++) {
          const keyValue = bindingContext.getObject()[technicalKeys[i]];
          if (keyValue !== technicalKeysObject[technicalKeys[i]]) {
            internalModelContext.setProperty("fclColumnClosed", false);
            return true;
          }
        }
        //the record opened is not the last seen one : no need to persist the changes, reset to default instead
      }

      return false;
    };
    _proto._getAppStateData = function _getAppStateData(oAppData, viewId, navType) {
      let key = "",
        i = 0;
      const appStateData = navType === NavType.hybrid ? oAppData.iAppState : oAppData;
      if (appStateData !== null && appStateData !== void 0 && appStateData.appState) {
        for (i = 0; i < Object.keys(appStateData.appState).length; i++) {
          if (Object.keys(appStateData.appState)[i] === viewId) {
            key = Object.keys(appStateData.appState)[i];
            break;
          }
        }
      }
      if (appStateData !== null && appStateData !== void 0 && appStateData.appState) {
        return {
          [Object.keys(appStateData.appState)[i]]: appStateData.appState[key] || {}
        };
      }
    }

    /**
     * Applies an appstate by fetching appdata and passing it to _applyAppstateToPage.
     *
     * @param viewId
     * @param view
     * @function
     * @static
     * @memberof sap.fe.core.AppStateHandler
     * @returns A promise for async handling
     * @private
     * @ui5-restricted
     */;
    _proto.applyAppState = async function applyAppState(viewId, view) {
      if (!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState || BusyLocker.isLocked(this)) {
        return Promise.resolve();
      }
      const checkIfLastSeenRecord = this._checkIfLastSeenRecord(view);
      if (checkIfLastSeenRecord === true) {
        return Promise.resolve();
      }
      BusyLocker.lock(this);
      // Done for busy indicator
      BusyLocker.lock(this.oAppComponent.getRootControl());
      const oNavigationService = this.oAppComponent.getNavigationService();
      // TODO oNavigationService.parseNavigation() should return ES6 promise instead jQuery.promise
      return toES6Promise(oNavigationService.parseNavigation()).catch(function (aErrorData) {
        if (!aErrorData) {
          aErrorData = [];
        }
        Log.warning("APPSTATE: Parse Navigation failed", aErrorData[0]);
        return [{
          /* app data */
        }, aErrorData[1], aErrorData[2]];
      }).then(aResults => {
        Log.info("APPSTATE: Parse Navigation done");

        // aResults[1] => oStartupParameters (not evaluated)
        const oAppData = aResults[0] || {},
          sNavType = aResults[2] || NavType.initial,
          oRootController = this.oAppComponent.getRootControl().getController();
        // apply the appstate depending upon the view (LR/OP)
        const appStateData = this._getAppStateData(oAppData, viewId, sNavType);
        this._mCurrentAppState = sNavType === NavType.iAppState || sNavType === NavType.hybrid ? appStateData : undefined;
        if (!oRootController.viewState) {
          throw new Error(`viewState extension required for controller ${oRootController.getMetadata().getName()}`);
        }
        if ((!oAppData || Object.keys(oAppData).length === 0) && sNavType == NavType.iAppState) {
          if (!oRootController.viewState._getInitialStateApplied()) {
            oRootController.viewState._setInitialStateApplied();
          }
          return {};
        }
        return oRootController.viewState.applyViewState(this._mCurrentAppState, this._createNavigationParameters(oAppData, sNavType));
      }).catch(function (oError) {
        Log.error("appState could not be applied", oError);
        throw oError;
      }).finally(() => {
        BusyLocker.unlock(this);
        BusyLocker.unlock(this.oAppComponent.getRootControl());
      });
    }

    /**
     * To check is route is changed by change in the iAPPState.
     *
     * @returns `true` if the route has chnaged
     */;
    _proto.checkIfRouteChangedByIApp = function checkIfRouteChangedByIApp() {
      return this.bNoRouteChange;
    }

    /**
     * Reset the route changed by iAPPState.
     */;
    _proto.resetRouteChangedByIApp = function resetRouteChangedByIApp() {
      if (this.bNoRouteChange) {
        this.bNoRouteChange = false;
      }
    };
    return AppStateHandler;
  }(BaseObject)) || _class);
  /**
   * @global
   */
  return AppStateHandler;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/AppStateHandler", ["sap/base/Log","sap/base/util/deepEqual","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ToES6Promise","sap/fe/navigation/library","sap/ui/base/Object","./controllerextensions/BusyLocker","./helpers/ModelHelper"],function(t,e,n,o,a,i,r,p){"use strict";var s,l;var c=n.defineUI5Class;function u(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;f(t,e)}function f(t,e){f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,n){e.__proto__=n;return e};return f(t,e)}const h=a.NavType;let S=(s=c("sap.fe.core.AppStateHandler"),s(l=function(n){u(a,n);function a(e){var o;o=n.call(this)||this;o._mCurrentAppState={};o.oAppComponent=e;o.sId=`${e.getId()}/AppStateHandler`;o.nbSimultaneousCreateRequest=0;o.bNoRouteChange=false;t.info("APPSTATE : Appstate handler initialized");return o}var i=a.prototype;i.getId=function t(){return this.sId};i.createAppState=async function n(){if(!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState||r.isLocked(this)){return}const o=this.oAppComponent.getNavigationService(),a=this.oAppComponent.getRouterProxy(),i=a.getHash(),s=this.oAppComponent.getRootControl().getController(),l=p.isStickySessionSupported(this.oAppComponent.getMetaModel());if(!s.viewState){throw new Error(`viewState controller extension not available for controller: ${s.getMetadata().getName()}`)}const c=await s.viewState.retrieveViewState();const u={appState:c};if(c&&!e(this._mCurrentAppState,c)){this._mCurrentAppState=c;try{this.nbSimultaneousCreateRequest++;const e=await o.storeInnerAppStateAsync(u,true,true);t.info("APPSTATE: Appstate stored");const n=o.replaceInnerAppStateKey(i,e);this.nbSimultaneousCreateRequest--;if(this.nbSimultaneousCreateRequest===0&&n!==i){a.navToHash(n,undefined,undefined,undefined,!l);this.bNoRouteChange=true}t.info("APPSTATE: navToHash")}catch(e){t.error(e)}}return u};i._createNavigationParameters=function t(e,n){return Object.assign({},e,{selectionVariantDefaults:e.oDefaultedSelectionVariant,selectionVariant:e.oSelectionVariant,requiresStandardVariant:!e.bNavSelVarHasDefaultsOnly,navigationType:n})};i._checkIfLastSeenRecord=function t(e){const n=e&&e.getBindingContext("internal");if(n&&n.getProperty("fclColumnClosed")===true){const t=n&&n.getProperty("technicalKeysOfLastSeenRecord");const o=e===null||e===void 0?void 0:e.getBindingContext();const a=o&&o.getPath()||"";const i=o===null||o===void 0?void 0:o.getModel().getMetaModel();const r=i===null||i===void 0?void 0:i.getMetaPath(a);const p=i===null||i===void 0?void 0:i.getObject(`${r}/$Type/$Key`);for(let e=0;e<p.length;e++){const a=o.getObject()[p[e]];if(a!==t[p[e]]){n.setProperty("fclColumnClosed",false);return true}}}return false};i._getAppStateData=function t(e,n,o){let a="",i=0;const r=o===h.hybrid?e.iAppState:e;if(r!==null&&r!==void 0&&r.appState){for(i=0;i<Object.keys(r.appState).length;i++){if(Object.keys(r.appState)[i]===n){a=Object.keys(r.appState)[i];break}}}if(r!==null&&r!==void 0&&r.appState){return{[Object.keys(r.appState)[i]]:r.appState[a]||{}}}};i.applyAppState=async function e(n,a){if(!this.oAppComponent.getEnvironmentCapabilities().getCapabilities().AppState||r.isLocked(this)){return Promise.resolve()}const i=this._checkIfLastSeenRecord(a);if(i===true){return Promise.resolve()}r.lock(this);r.lock(this.oAppComponent.getRootControl());const p=this.oAppComponent.getNavigationService();return o(p.parseNavigation()).catch(function(e){if(!e){e=[]}t.warning("APPSTATE: Parse Navigation failed",e[0]);return[{},e[1],e[2]]}).then(e=>{t.info("APPSTATE: Parse Navigation done");const o=e[0]||{},a=e[2]||h.initial,i=this.oAppComponent.getRootControl().getController();const r=this._getAppStateData(o,n,a);this._mCurrentAppState=a===h.iAppState||a===h.hybrid?r:undefined;if(!i.viewState){throw new Error(`viewState extension required for controller ${i.getMetadata().getName()}`)}if((!o||Object.keys(o).length===0)&&a==h.iAppState){if(!i.viewState._getInitialStateApplied()){i.viewState._setInitialStateApplied()}return{}}return i.viewState.applyViewState(this._mCurrentAppState,this._createNavigationParameters(o,a))}).catch(function(e){t.error("appState could not be applied",e);throw e}).finally(()=>{r.unlock(this);r.unlock(this.oAppComponent.getRootControl())})};i.checkIfRouteChangedByIApp=function t(){return this.bNoRouteChange};i.resetRouteChangedByIApp=function t(){if(this.bNoRouteChange){this.bNoRouteChange=false}};return a}(i))||l);return S},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/BaseController-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/mvc/Controller"], function (CommonUtils, ClassSupport, Controller) {
  "use strict";

  var _dec, _dec2, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * Internal base controller class for SAP Fiori elements application.
   *
   * If you want to extend a base controller for your custom page, please use for sap.fe.core.PageController.
   *
   * @hideconstructor
   * @public
   * @since 1.90.0
   */
  let BaseController = (_dec = defineUI5Class("sap.fe.core.BaseController"), _dec2 = publicExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_Controller) {
    _inheritsLoose(BaseController, _Controller);
    function BaseController() {
      return _Controller.apply(this, arguments) || this;
    }
    var _proto = BaseController.prototype;
    /**
     * Returns the current app component.
     *
     * @returns The app component or, if not found, null
     * @alias sap.fe.core.BaseController#getAppComponent
     * @public
     * @since 1.91.0
     */
    _proto.getAppComponent = function getAppComponent() {
      if (!this._oAppComponent) {
        this._oAppComponent = CommonUtils.getAppComponent(this.getView());
      }
      return this._oAppComponent;
    }

    /**
     * Convenience method provided by SAP Fiori elements to enable applications to include the view model by name into each controller.
     *
     * @public
     * @param sName The model name
     * @returns The model instance
     */;
    _proto.getModel = function getModel(sName) {
      return this.getView().getModel(sName);
    }

    /**
     * Convenience method for setting the view model in every controller of the application.
     *
     * @public
     * @param oModel The model instance
     * @param sName The model name
     * @returns The view instance
     */;
    _proto.setModel = function setModel(oModel, sName) {
      return this.getView().setModel(oModel, sName);
    };
    _proto.getResourceBundle = function getResourceBundle(sI18nModelName) {
      if (!sI18nModelName) {
        sI18nModelName = "i18n";
      }
      return this.getAppComponent().getModel(sI18nModelName).getResourceBundle();
    };
    return BaseController;
  }(Controller), (_applyDecoratedDescriptor(_class2.prototype, "getAppComponent", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "getAppComponent"), _class2.prototype)), _class2)) || _class);
  return BaseController;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/BaseController", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/ClassSupport","sap/ui/core/mvc/Controller"],function(e,t,o){"use strict";var n,i,r,p;var u=t.publicExtension;var c=t.defineUI5Class;function l(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;s(e,t)}function s(e,t){s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return s(e,t)}function a(e,t,o,n,i){var r={};Object.keys(n).forEach(function(e){r[e]=n[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(e,t,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}let f=(n=c("sap.fe.core.BaseController"),i=u(),n(r=(p=function(t){l(o,t);function o(){return t.apply(this,arguments)||this}var n=o.prototype;n.getAppComponent=function t(){if(!this._oAppComponent){this._oAppComponent=e.getAppComponent(this.getView())}return this._oAppComponent};n.getModel=function e(t){return this.getView().getModel(t)};n.setModel=function e(t,o){return this.getView().setModel(t,o)};n.getResourceBundle=function e(t){if(!t){t="i18n"}return this.getAppComponent().getModel(t).getResourceBundle()};return o}(o),a(p.prototype,"getAppComponent",[i],Object.getOwnPropertyDescriptor(p.prototype,"getAppComponent"),p.prototype),p))||r);return f},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/CommonUtils-dbg", ["sap/base/Log", "sap/base/util/array/uniqueSort", "sap/base/util/merge", "sap/fe/core/converters/ConverterContext", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/SemanticDateOperators", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/library", "sap/fe/core/StateFilterToSelectionVariant", "sap/fe/core/type/TypeUtil", "sap/ui/core/Component", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/Device", "sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/model/Filter", "./controls/AnyElement", "./helpers/MetaModelFunction", "./templating/FilterHelper"], function (Log, uniqueSort, mergeObjects, ConverterContext, MetaModelConverter, BindingToolkit, ModelHelper, SemanticDateOperators, StableIdHelper, FELibrary, StateFilterToSelectionVariant, TypeUtil, Component, Fragment, XMLPreprocessor, XMLTemplateProcessor, Device, FilterOperatorUtil, Filter, AnyElement, MetaModelFunction, FilterHelper) {
  "use strict";

  var _exports = {};
  var getConditions = FilterHelper.getConditions;
  var system = Device.system;
  var generate = StableIdHelper.generate;
  var pathInModel = BindingToolkit.pathInModel;
  var compileExpression = BindingToolkit.compileExpression;
  const ProgrammingModel = FELibrary.ProgrammingModel;
  function normalizeSearchTerm(sSearchTerm) {
    if (!sSearchTerm) {
      return undefined;
    }
    return sSearchTerm.replace(/"/g, " ").replace(/\\/g, "\\\\") //escape backslash characters. Can be removed if odata/binding handles backend errors responds.
    .split(/\s+/).reduce(function (sNormalized, sCurrentWord) {
      if (sCurrentWord !== "") {
        sNormalized = `${sNormalized ? `${sNormalized} ` : ""}"${sCurrentWord}"`;
      }
      return sNormalized;
    }, undefined);
  }
  async function waitForContextRequested(bindingContext) {
    var _dataModel$targetEnti;
    const model = bindingContext.getModel();
    const metaModel = model.getMetaModel();
    const entityPath = metaModel.getMetaPath(bindingContext.getPath());
    const dataModel = MetaModelConverter.getInvolvedDataModelObjects(metaModel.getContext(entityPath));
    await bindingContext.requestProperty((_dataModel$targetEnti = dataModel.targetEntityType.keys[0]) === null || _dataModel$targetEnti === void 0 ? void 0 : _dataModel$targetEnti.name);
  }
  function fnHasTransientContexts(oListBinding) {
    let bHasTransientContexts = false;
    if (oListBinding) {
      oListBinding.getCurrentContexts().forEach(function (oContext) {
        if (oContext && oContext.isTransient()) {
          bHasTransientContexts = true;
        }
      });
    }
    return bHasTransientContexts;
  }

  // there is no navigation in entitySet path and property path

  async function _getSOIntents(oShellServiceHelper, oObjectPageLayout, oSemanticObject, oParam) {
    return oShellServiceHelper.getLinks({
      semanticObject: oSemanticObject,
      params: oParam
    });
  }

  // TO-DO add this as part of applySemanticObjectmappings logic in IntentBasednavigation controller extension
  function _createMappings(oMapping) {
    const aSOMappings = [];
    const aMappingKeys = Object.keys(oMapping);
    let oSemanticMapping;
    for (let i = 0; i < aMappingKeys.length; i++) {
      oSemanticMapping = {
        LocalProperty: {
          $PropertyPath: aMappingKeys[i]
        },
        SemanticObjectProperty: oMapping[aMappingKeys[i]]
      };
      aSOMappings.push(oSemanticMapping);
    }
    return aSOMappings;
  }
  /**
   * @param aLinks
   * @param aExcludedActions
   * @param oTargetParams
   * @param aItems
   * @param aAllowedActions
   */
  function _getRelatedAppsMenuItems(aLinks, aExcludedActions, oTargetParams, aItems, aAllowedActions) {
    for (let i = 0; i < aLinks.length; i++) {
      const oLink = aLinks[i];
      const sIntent = oLink.intent;
      const sAction = sIntent.split("-")[1].split("?")[0];
      if (aAllowedActions && aAllowedActions.includes(sAction)) {
        aItems.push({
          text: oLink.text,
          targetSemObject: sIntent.split("#")[1].split("-")[0],
          targetAction: sAction.split("~")[0],
          targetParams: oTargetParams
        });
      } else if (!aAllowedActions && aExcludedActions && aExcludedActions.indexOf(sAction) === -1) {
        aItems.push({
          text: oLink.text,
          targetSemObject: sIntent.split("#")[1].split("-")[0],
          targetAction: sAction.split("~")[0],
          targetParams: oTargetParams
        });
      }
    }
  }
  function _getRelatedIntents(oAdditionalSemanticObjects, oBindingContext, aManifestSOItems, aLinks) {
    if (aLinks && aLinks.length > 0) {
      const aAllowedActions = oAdditionalSemanticObjects.allowedActions || undefined;
      const aExcludedActions = oAdditionalSemanticObjects.unavailableActions ? oAdditionalSemanticObjects.unavailableActions : [];
      const aSOMappings = oAdditionalSemanticObjects.mapping ? _createMappings(oAdditionalSemanticObjects.mapping) : [];
      const oTargetParams = {
        navigationContexts: oBindingContext,
        semanticObjectMapping: aSOMappings
      };
      _getRelatedAppsMenuItems(aLinks, aExcludedActions, oTargetParams, aManifestSOItems, aAllowedActions);
    }
  }

  /**
   * @description This function fetches the related intents when semantic object and action are passed from feEnvironment.getIntent() only in case of My Inbox integration
   * @param semanticObjectAndAction This specifies the semantic object and action for fetching the intents
   * @param oBindingContext This sepcifies the binding context for updating related apps
   * @param appComponentSOItems This is a list of semantic items used for updating the related apps button
   * @param aLinks This is an array comprising of related intents
   */

  function _getRelatedIntentsWithSemanticObjectsAndAction(semanticObjectAndAction, oBindingContext, appComponentSOItems, aLinks) {
    if (aLinks.length > 0) {
      const actions = [semanticObjectAndAction.action];
      const excludedActions = [];
      const soMappings = [];
      const targetParams = {
        navigationContexts: oBindingContext,
        semanticObjectMapping: soMappings
      };
      _getRelatedAppsMenuItems(aLinks, excludedActions, targetParams, appComponentSOItems, actions);
    }
  }
  async function updateRelateAppsModel(oBindingContext, oEntry, oObjectPageLayout, aSemKeys, oMetaModel, oMetaPath, appComponent) {
    const oShellServiceHelper = appComponent.getShellServices();
    const oParam = {};
    let sCurrentSemObj = "",
      sCurrentAction = "";
    let oSemanticObjectAnnotations;
    let aRelatedAppsMenuItems = [];
    let aExcludedActions = [];
    let aManifestSOKeys;
    async function fnGetParseShellHashAndGetLinks() {
      const oParsedUrl = oShellServiceHelper.parseShellHash(document.location.hash);
      sCurrentSemObj = oParsedUrl.semanticObject; // Current Semantic Object
      sCurrentAction = oParsedUrl.action;
      return _getSOIntents(oShellServiceHelper, oObjectPageLayout, sCurrentSemObj, oParam);
    }
    try {
      if (oEntry) {
        if (aSemKeys && aSemKeys.length > 0) {
          for (let j = 0; j < aSemKeys.length; j++) {
            const sSemKey = aSemKeys[j].$PropertyPath;
            if (!oParam[sSemKey]) {
              oParam[sSemKey] = {
                value: oEntry[sSemKey]
              };
            }
          }
        } else {
          // fallback to Technical Keys if no Semantic Key is present
          const aTechnicalKeys = oMetaModel.getObject(`${oMetaPath}/$Type/$Key`);
          for (const key in aTechnicalKeys) {
            const sObjKey = aTechnicalKeys[key];
            if (!oParam[sObjKey]) {
              oParam[sObjKey] = {
                value: oEntry[sObjKey]
              };
            }
          }
        }
      }
      // Logic to read additional SO from manifest and updated relatedapps model

      const oManifestData = getTargetView(oObjectPageLayout).getViewData();
      const aManifestSOItems = [];
      let semanticObjectIntents;
      if (oManifestData.additionalSemanticObjects) {
        aManifestSOKeys = Object.keys(oManifestData.additionalSemanticObjects);
        for (let key = 0; key < aManifestSOKeys.length; key++) {
          semanticObjectIntents = await Promise.resolve(_getSOIntents(oShellServiceHelper, oObjectPageLayout, aManifestSOKeys[key], oParam));
          _getRelatedIntents(oManifestData.additionalSemanticObjects[aManifestSOKeys[key]], oBindingContext, aManifestSOItems, semanticObjectIntents);
        }
      }

      // appComponentSOItems is updated in case of My Inbox integration when semantic object and action are passed from feEnvironment.getIntent() method
      // In other cases it remains as an empty list
      // We concat this list towards the end with aManifestSOItems

      const appComponentSOItems = [];
      const componentData = appComponent.getComponentData();
      if (componentData.feEnvironment && componentData.feEnvironment.getIntent()) {
        const intent = componentData.feEnvironment.getIntent();
        semanticObjectIntents = await Promise.resolve(_getSOIntents(oShellServiceHelper, oObjectPageLayout, intent.semanticObject, oParam));
        _getRelatedIntentsWithSemanticObjectsAndAction(intent, oBindingContext, appComponentSOItems, semanticObjectIntents);
      }
      const internalModelContext = oObjectPageLayout.getBindingContext("internal");
      const aLinks = await fnGetParseShellHashAndGetLinks();
      if (aLinks) {
        if (aLinks.length > 0) {
          let isSemanticObjectHasSameTargetInManifest = false;
          const oTargetParams = {};
          const aAnnotationsSOItems = [];
          const sEntitySetPath = `${oMetaPath}@`;
          const sEntityTypePath = `${oMetaPath}/@`;
          const oEntitySetAnnotations = oMetaModel.getObject(sEntitySetPath);
          oSemanticObjectAnnotations = CommonUtils.getSemanticObjectAnnotations(oEntitySetAnnotations, sCurrentSemObj);
          if (!oSemanticObjectAnnotations.bHasEntitySetSO) {
            const oEntityTypeAnnotations = oMetaModel.getObject(sEntityTypePath);
            oSemanticObjectAnnotations = CommonUtils.getSemanticObjectAnnotations(oEntityTypeAnnotations, sCurrentSemObj);
          }
          aExcludedActions = oSemanticObjectAnnotations.aUnavailableActions;
          //Skip same application from Related Apps
          aExcludedActions.push(sCurrentAction);
          oTargetParams.navigationContexts = oBindingContext;
          oTargetParams.semanticObjectMapping = oSemanticObjectAnnotations.aMappings;
          _getRelatedAppsMenuItems(aLinks, aExcludedActions, oTargetParams, aAnnotationsSOItems);
          aManifestSOItems.forEach(function (_ref) {
            var _aAnnotationsSOItems$;
            let {
              targetSemObject
            } = _ref;
            if (((_aAnnotationsSOItems$ = aAnnotationsSOItems[0]) === null || _aAnnotationsSOItems$ === void 0 ? void 0 : _aAnnotationsSOItems$.targetSemObject) === targetSemObject) {
              isSemanticObjectHasSameTargetInManifest = true;
            }
          });

          // remove all actions from current hash application if manifest contains empty allowedActions
          if (oManifestData.additionalSemanticObjects && aAnnotationsSOItems[0] && oManifestData.additionalSemanticObjects[aAnnotationsSOItems[0].targetSemObject] && !!oManifestData.additionalSemanticObjects[aAnnotationsSOItems[0].targetSemObject].allowedActions) {
            isSemanticObjectHasSameTargetInManifest = true;
          }
          const soItems = aManifestSOItems.concat(appComponentSOItems);
          aRelatedAppsMenuItems = isSemanticObjectHasSameTargetInManifest ? soItems : soItems.concat(aAnnotationsSOItems);
          // If no app in list, related apps button will be hidden
          internalModelContext.setProperty("relatedApps/visibility", aRelatedAppsMenuItems.length > 0);
          internalModelContext.setProperty("relatedApps/items", aRelatedAppsMenuItems);
        } else {
          internalModelContext.setProperty("relatedApps/visibility", false);
        }
      } else {
        internalModelContext.setProperty("relatedApps/visibility", false);
      }
    } catch (error) {
      Log.error("Cannot read links", error);
    }
    return aRelatedAppsMenuItems;
  }
  function _getSemanticObjectAnnotations(oEntityAnnotations, sCurrentSemObj) {
    const oSemanticObjectAnnotations = {
      bHasEntitySetSO: false,
      aAllowedActions: [],
      aUnavailableActions: [],
      aMappings: []
    };
    let sAnnotationMappingTerm, sAnnotationActionTerm;
    let sQualifier;
    for (const key in oEntityAnnotations) {
      if (key.indexOf("com.sap.vocabularies.Common.v1.SemanticObject") > -1 && oEntityAnnotations[key] === sCurrentSemObj) {
        oSemanticObjectAnnotations.bHasEntitySetSO = true;
        sAnnotationMappingTerm = `@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`;
        sAnnotationActionTerm = `@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`;
        if (key.indexOf("#") > -1) {
          sQualifier = key.split("#")[1];
          sAnnotationMappingTerm = `${sAnnotationMappingTerm}#${sQualifier}`;
          sAnnotationActionTerm = `${sAnnotationActionTerm}#${sQualifier}`;
        }
        if (oEntityAnnotations[sAnnotationMappingTerm]) {
          oSemanticObjectAnnotations.aMappings = oSemanticObjectAnnotations.aMappings.concat(oEntityAnnotations[sAnnotationMappingTerm]);
        }
        if (oEntityAnnotations[sAnnotationActionTerm]) {
          oSemanticObjectAnnotations.aUnavailableActions = oSemanticObjectAnnotations.aUnavailableActions.concat(oEntityAnnotations[sAnnotationActionTerm]);
        }
        break;
      }
    }
    return oSemanticObjectAnnotations;
  }
  function fnUpdateRelatedAppsDetails(oObjectPageLayout, appComponent) {
    const oMetaModel = oObjectPageLayout.getModel().getMetaModel();
    const oBindingContext = oObjectPageLayout.getBindingContext();
    const path = oBindingContext && oBindingContext.getPath() || "";
    const oMetaPath = oMetaModel.getMetaPath(path);
    // Semantic Key Vocabulary
    const sSemanticKeyVocabulary = `${oMetaPath}/` + `@com.sap.vocabularies.Common.v1.SemanticKey`;
    //Semantic Keys
    const aSemKeys = oMetaModel.getObject(sSemanticKeyVocabulary);
    // Unavailable Actions
    const oEntry = oBindingContext === null || oBindingContext === void 0 ? void 0 : oBindingContext.getObject();
    if (!oEntry && oBindingContext) {
      oBindingContext.requestObject().then(async function (requestedObject) {
        return CommonUtils.updateRelateAppsModel(oBindingContext, requestedObject, oObjectPageLayout, aSemKeys, oMetaModel, oMetaPath, appComponent);
      }).catch(function (oError) {
        Log.error("Cannot update the related app details", oError);
      });
    } else {
      return CommonUtils.updateRelateAppsModel(oBindingContext, oEntry, oObjectPageLayout, aSemKeys, oMetaModel, oMetaPath, appComponent);
    }
  }

  /**
   * @param oButton
   */
  function fnFireButtonPress(oButton) {
    if (oButton && oButton.isA(["sap.m.Button", "sap.m.OverflowToolbarButton"]) && oButton.getVisible() && oButton.getEnabled()) {
      oButton.firePress();
    }
  }
  function getAppComponent(oControl) {
    if (oControl.isA("sap.fe.core.AppComponent")) {
      return oControl;
    }
    const oOwner = Component.getOwnerComponentFor(oControl);
    if (!oOwner) {
      throw new Error("There should be a sap.fe.core.AppComponent as owner of the control");
    } else {
      return getAppComponent(oOwner);
    }
  }
  function getCurrentPageView(oAppComponent) {
    const rootViewController = oAppComponent.getRootViewController();
    return rootViewController.isFclEnabled() ? rootViewController.getRightmostView() : CommonUtils.getTargetView(oAppComponent.getRootContainer().getCurrentPage());
  }
  function getTargetView(oControl) {
    if (oControl && oControl.isA("sap.ui.core.ComponentContainer")) {
      const oComponent = oControl.getComponentInstance();
      oControl = oComponent && oComponent.getRootControl();
    }
    while (oControl && !oControl.isA("sap.ui.core.mvc.View")) {
      oControl = oControl.getParent();
    }
    return oControl;
  }
  function _fnCheckIsMatch(oObject, oKeysToCheck) {
    for (const sKey in oKeysToCheck) {
      if (oKeysToCheck[sKey] !== oObject[sKey]) {
        return false;
      }
    }
    return true;
  }
  function fnGetContextPathProperties(metaModelContext, sContextPath, oFilter) {
    const oEntityType = metaModelContext.getObject(`${sContextPath}/`) || {},
      oProperties = {};
    for (const sKey in oEntityType) {
      if (oEntityType.hasOwnProperty(sKey) && !/^\$/i.test(sKey) && oEntityType[sKey].$kind && _fnCheckIsMatch(oEntityType[sKey], oFilter || {
        $kind: "Property"
      })) {
        oProperties[sKey] = oEntityType[sKey];
      }
    }
    return oProperties;
  }
  function fnGetMandatoryFilterFields(oMetaModel, sContextPath) {
    let aMandatoryFilterFields = [];
    if (oMetaModel && sContextPath) {
      aMandatoryFilterFields = oMetaModel.getObject(`${sContextPath}@Org.OData.Capabilities.V1.FilterRestrictions/RequiredProperties`);
    }
    return aMandatoryFilterFields;
  }
  function fnGetIBNActions(oControl, aIBNActions) {
    const aActions = oControl && oControl.getActions();
    if (aActions) {
      aActions.forEach(function (oAction) {
        if (oAction.isA("sap.ui.mdc.actiontoolbar.ActionToolbarAction")) {
          oAction = oAction.getAction();
        }
        if (oAction.isA("sap.m.MenuButton")) {
          const oMenu = oAction.getMenu();
          const aItems = oMenu.getItems();
          aItems.forEach(oItem => {
            if (oItem.data("IBNData")) {
              aIBNActions.push(oItem);
            }
          });
        } else if (oAction.data("IBNData")) {
          aIBNActions.push(oAction);
        }
      });
    }
    return aIBNActions;
  }

  /**
   * @param aIBNActions
   * @param oView
   */
  function fnUpdateDataFieldForIBNButtonsVisibility(aIBNActions, oView) {
    const oParams = {};
    const oAppComponent = CommonUtils.getAppComponent(oView);
    const isSticky = ModelHelper.isStickySessionSupported(oView.getModel().getMetaModel());
    const fnGetLinks = function (oData) {
      if (oData) {
        const aKeys = Object.keys(oData);
        aKeys.forEach(function (sKey) {
          if (sKey.indexOf("_") !== 0 && sKey.indexOf("odata.context") === -1) {
            oParams[sKey] = {
              value: oData[sKey]
            };
          }
        });
      }
      if (aIBNActions.length) {
        aIBNActions.forEach(function (oIBNAction) {
          const sSemanticObject = oIBNAction.data("IBNData").semanticObject;
          const sAction = oIBNAction.data("IBNData").action;
          oAppComponent.getShellServices().getLinks({
            semanticObject: sSemanticObject,
            action: sAction,
            params: oParams
          }).then(function (aLink) {
            oIBNAction.setVisible(oIBNAction.getVisible() && aLink && aLink.length === 1);
            if (isSticky) {
              oIBNAction.getBindingContext("internal").setProperty(oIBNAction.getId().split("--")[1], {
                shellNavigationNotAvailable: !(aLink && aLink.length === 1)
              });
            }
            return;
          }).catch(function (oError) {
            Log.error("Cannot retrieve the links from the shell service", oError);
          });
        });
      }
    };
    if (oView && oView.getBindingContext()) {
      var _oView$getBindingCont;
      (_oView$getBindingCont = oView.getBindingContext()) === null || _oView$getBindingCont === void 0 ? void 0 : _oView$getBindingCont.requestObject().then(function (oData) {
        return fnGetLinks(oData);
      }).catch(function (oError) {
        Log.error("Cannot retrieve the links from the shell service", oError);
      });
    } else {
      fnGetLinks();
    }
  }
  function getActionPath(actionContext, bReturnOnlyPath, inActionName, bCheckStaticValue) {
    const sActionName = !inActionName ? actionContext.getObject(actionContext.getPath()).toString() : inActionName;
    let sContextPath = actionContext.getPath().split("/@")[0];
    const sEntityTypeName = actionContext.getObject(sContextPath).$Type;
    const sEntityName = getEntitySetName(actionContext.getModel(), sEntityTypeName);
    if (sEntityName) {
      sContextPath = `/${sEntityName}`;
    }
    if (bCheckStaticValue) {
      return actionContext.getObject(`${sContextPath}/${sActionName}@Org.OData.Core.V1.OperationAvailable`);
    }
    if (bReturnOnlyPath) {
      return `${sContextPath}/${sActionName}`;
    } else {
      return {
        sContextPath: sContextPath,
        sProperty: actionContext.getObject(`${sContextPath}/${sActionName}@Org.OData.Core.V1.OperationAvailable/$Path`),
        sBindingParameter: actionContext.getObject(`${sContextPath}/${sActionName}/@$ui5.overload/0/$Parameter/0/$Name`)
      };
    }
  }
  function getEntitySetName(oMetaModel, sEntityType) {
    const oEntityContainer = oMetaModel.getObject("/");
    for (const key in oEntityContainer) {
      if (typeof oEntityContainer[key] === "object" && oEntityContainer[key].$Type === sEntityType) {
        return key;
      }
    }
  }
  function computeDisplayMode(oPropertyAnnotations, oCollectionAnnotations) {
    const oTextAnnotation = oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text"],
      oTextArrangementAnnotation = oTextAnnotation && (oPropertyAnnotations && oPropertyAnnotations["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"] || oCollectionAnnotations && oCollectionAnnotations["@com.sap.vocabularies.UI.v1.TextArrangement"]);
    if (oTextArrangementAnnotation) {
      if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly") {
        return "Description";
      } else if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextLast") {
        return "ValueDescription";
      } else if (oTextArrangementAnnotation.$EnumMember === "com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate") {
        return "Value";
      }
      //Default should be TextFirst if there is a Text annotation and neither TextOnly nor TextLast are set
      return "DescriptionValue";
    }
    return oTextAnnotation ? "DescriptionValue" : "Value";
  }
  function _getEntityType(oContext) {
    const oMetaModel = oContext.getModel().getMetaModel();
    return oMetaModel.getObject(`${oMetaModel.getMetaPath(oContext.getPath())}/$Type`);
  }
  async function _requestObject(sAction, oSelectedContext, sProperty) {
    let oContext = oSelectedContext;
    const nBracketIndex = sAction.indexOf("(");
    if (nBracketIndex > -1) {
      const sTargetType = sAction.slice(nBracketIndex + 1, -1);
      let sCurrentType = _getEntityType(oContext);
      while (sCurrentType !== sTargetType) {
        // Find parent binding context and retrieve entity type
        oContext = oContext.getBinding().getContext();
        if (oContext) {
          sCurrentType = _getEntityType(oContext);
        } else {
          Log.warning("Cannot determine target type to request property value for bound action invocation");
          return Promise.resolve(undefined);
        }
      }
    }
    return oContext.requestObject(sProperty);
  }
  async function requestProperty(oSelectedContext, sAction, sProperty, sDynamicActionEnabledPath) {
    const oPromise = sProperty && sProperty.indexOf("/") === 0 ? requestSingletonProperty(sProperty, oSelectedContext.getModel()) : _requestObject(sAction, oSelectedContext, sProperty);
    return oPromise.then(function (vPropertyValue) {
      return {
        vPropertyValue: vPropertyValue,
        oSelectedContext: oSelectedContext,
        sAction: sAction,
        sDynamicActionEnabledPath: sDynamicActionEnabledPath
      };
    });
  }
  async function setContextsBasedOnOperationAvailable(oInternalModelContext, aRequestPromises) {
    return Promise.all(aRequestPromises).then(function (aResults) {
      if (aResults.length) {
        const aApplicableContexts = [],
          aNotApplicableContexts = [];
        aResults.forEach(function (aResult) {
          if (aResult) {
            if (aResult.vPropertyValue) {
              oInternalModelContext.getModel().setProperty(aResult.sDynamicActionEnabledPath, true);
              aApplicableContexts.push(aResult.oSelectedContext);
            } else {
              aNotApplicableContexts.push(aResult.oSelectedContext);
            }
          }
        });
        setDynamicActionContexts(oInternalModelContext, aResults[0].sAction, aApplicableContexts, aNotApplicableContexts);
      }
      return;
    }).catch(function (oError) {
      Log.trace("Cannot retrieve property value from path", oError);
    });
  }

  /**
   * @param oInternalModelContext
   * @param sAction
   * @param aApplicable
   * @param aNotApplicable
   */
  function setDynamicActionContexts(oInternalModelContext, sAction, aApplicable, aNotApplicable) {
    const sDynamicActionPathPrefix = `${oInternalModelContext.getPath()}/dynamicActions/${sAction}`,
      oInternalModel = oInternalModelContext.getModel();
    oInternalModel.setProperty(`${sDynamicActionPathPrefix}/aApplicable`, aApplicable);
    oInternalModel.setProperty(`${sDynamicActionPathPrefix}/aNotApplicable`, aNotApplicable);
  }
  function _getDefaultOperators(sPropertyType) {
    // mdc defines the full set of operations that are meaningful for each Edm Type
    // TODO Replace with model / internal way of retrieving the actual model type used for the property
    const oDataClass = TypeUtil.getDataTypeClassName(sPropertyType);
    // TODO need to pass proper formatOptions, constraints here
    const oBaseType = TypeUtil.getBaseType(oDataClass, {}, {});
    return FilterOperatorUtil.getOperatorsForType(oBaseType);
  }
  function _getRestrictions(aDefaultOps, aExpressionOps) {
    // From the default set of Operators for the Base Type, select those that are defined in the Allowed Value.
    // In case that no operators are found, return undefined so that the default set is used.
    return aDefaultOps.filter(function (sElement) {
      return aExpressionOps.indexOf(sElement) > -1;
    });
  }
  function getSpecificAllowedExpression(aExpressions) {
    const aAllowedExpressionsPriority = CommonUtils.AllowedExpressionsPrio;
    aExpressions.sort(function (a, b) {
      return aAllowedExpressionsPriority.indexOf(a) - aAllowedExpressionsPriority.indexOf(b);
    });
    return aExpressions[0];
  }

  /**
   * Method to fetch the correct operators based on the filter restrictions that can be annotated on an entity set or a navigation property.
   * We return the correct operators based on the specified restriction and also check for the operators defined in the manifest to include or exclude them.
   *
   * @param sProperty String name of the property
   * @param sEntitySetPath String path to the entity set
   * @param oContext Context used during templating
   * @param sType String data type od the property, for example edm.Date
   * @param bUseSemanticDateRange Boolean passed from the manifest for semantic date range
   * @param sSettings Stringified object of the property settings
   * @returns An array of strings representing operators for filtering
   */
  function getOperatorsForProperty(sProperty, sEntitySetPath, oContext, sType, bUseSemanticDateRange, sSettings) {
    const oFilterRestrictions = CommonUtils.getFilterRestrictionsByPath(sEntitySetPath, oContext);
    const aEqualsOps = ["EQ"];
    const aSingleRangeOps = ["EQ", "GE", "LE", "LT", "GT", "BT", "NOTLE", "NOTLT", "NOTGE", "NOTGT"];
    const aSingleRangeDTBasicOps = ["EQ", "BT"];
    const aSingleValueDateOps = ["TODAY", "TOMORROW", "YESTERDAY", "DATE", "FIRSTDAYWEEK", "LASTDAYWEEK", "FIRSTDAYMONTH", "LASTDAYMONTH", "FIRSTDAYQUARTER", "LASTDAYQUARTER", "FIRSTDAYYEAR", "LASTDAYYEAR"];
    const aMultiRangeOps = ["EQ", "GE", "LE", "LT", "GT", "BT", "NE", "NOTBT", "NOTLE", "NOTLT", "NOTGE", "NOTGT"];
    const aSearchExpressionOps = ["Contains", "NotContains", "StartsWith", "NotStartsWith", "EndsWith", "NotEndsWith"];
    const aSemanticDateOpsExt = SemanticDateOperators.getSupportedOperations();
    const bSemanticDateRange = bUseSemanticDateRange === "true" || bUseSemanticDateRange === true;
    let aSemanticDateOps = [];
    const oSettings = sSettings && typeof sSettings === "string" ? JSON.parse(sSettings).customData : sSettings;
    if (oContext.getObject(`${sEntitySetPath}/@com.sap.vocabularies.Common.v1.ResultContext`) === true) {
      return aEqualsOps;
    }
    if (oSettings && oSettings.operatorConfiguration && oSettings.operatorConfiguration.length > 0) {
      aSemanticDateOps = SemanticDateOperators.getFilterOperations(oSettings.operatorConfiguration, sType);
    } else {
      aSemanticDateOps = SemanticDateOperators.getSemanticDateOperations(sType);
    }
    // Get the default Operators for this Property Type
    let aDefaultOperators = _getDefaultOperators(sType);
    if (bSemanticDateRange) {
      aDefaultOperators = aSemanticDateOpsExt.concat(aDefaultOperators);
    }
    let restrictions = [];

    // Is there a Filter Restriction defined for this property?
    if (oFilterRestrictions && oFilterRestrictions.FilterAllowedExpressions && oFilterRestrictions.FilterAllowedExpressions[sProperty]) {
      // Extending the default operators list with Semantic Date options DATERANGE, DATE, FROM and TO
      const sAllowedExpression = CommonUtils.getSpecificAllowedExpression(oFilterRestrictions.FilterAllowedExpressions[sProperty]);
      // In case more than one Allowed Expressions has been defined for a property
      // choose the most restrictive Allowed Expression

      // MultiValue has same Operator as SingleValue, but there can be more than one (maxConditions)
      switch (sAllowedExpression) {
        case "SingleValue":
          const aSingleValueOps = sType === "Edm.Date" && bSemanticDateRange ? aSingleValueDateOps : aEqualsOps;
          restrictions = _getRestrictions(aDefaultOperators, aSingleValueOps);
          break;
        case "MultiValue":
          restrictions = _getRestrictions(aDefaultOperators, aEqualsOps);
          break;
        case "SingleRange":
          let aExpressionOps;
          if (bSemanticDateRange) {
            if (sType === "Edm.Date") {
              aExpressionOps = aSemanticDateOps;
            } else if (sType === "Edm.DateTimeOffset") {
              aExpressionOps = aSemanticDateOps;
            } else {
              aExpressionOps = aSingleRangeOps;
            }
          } else if (sType === "Edm.DateTimeOffset") {
            aExpressionOps = aSingleRangeDTBasicOps;
          } else {
            aExpressionOps = aSingleRangeOps;
          }
          const sOperators = _getRestrictions(aDefaultOperators, aExpressionOps);
          restrictions = sOperators;
          break;
        case "MultiRange":
          restrictions = _getRestrictions(aDefaultOperators, aMultiRangeOps);
          break;
        case "SearchExpression":
          restrictions = _getRestrictions(aDefaultOperators, aSearchExpressionOps);
          break;
        case "MultiRangeOrSearchExpression":
          restrictions = _getRestrictions(aDefaultOperators, aSearchExpressionOps.concat(aMultiRangeOps));
          break;
        default:
          break;
      }
      // In case AllowedExpressions is not recognised, undefined in return results in the default set of
      // operators for the type.
    }

    return restrictions;
  }

  /**
   * Method to return allowed operators for type Guid.
   *
   * @function
   * @name getOperatorsForGuidProperty
   * @returns Allowed operators for type Guid
   */
  _exports.getOperatorsForProperty = getOperatorsForProperty;
  function getOperatorsForGuidProperty() {
    const allowedOperatorsForGuid = ["EQ", "NE"];
    return allowedOperatorsForGuid.toString();
  }
  function getOperatorsForDateProperty(propertyType) {
    // In case AllowedExpressions is not provided for type Edm.Date then all the default
    // operators for the type should be returned excluding semantic operators from the list.
    const aDefaultOperators = _getDefaultOperators(propertyType);
    const aMultiRangeOps = ["EQ", "GE", "LE", "LT", "GT", "BT", "NE", "NOTBT", "NOTLE", "NOTLT", "NOTGE", "NOTGT"];
    return _getRestrictions(aDefaultOperators, aMultiRangeOps);
  }
  function getParameterInfo(metaModelContext, sContextPath) {
    const sParameterContextPath = sContextPath.substring(0, sContextPath.lastIndexOf("/"));
    const bResultContext = metaModelContext.getObject(`${sParameterContextPath}/@com.sap.vocabularies.Common.v1.ResultContext`);
    const oParameterInfo = {};
    if (bResultContext && sParameterContextPath !== sContextPath) {
      oParameterInfo.contextPath = sParameterContextPath;
      oParameterInfo.parameterProperties = CommonUtils.getContextPathProperties(metaModelContext, sParameterContextPath);
    }
    return oParameterInfo;
  }

  /**
   * Method to add the select Options to filter conditions.
   *
   * @function
   * @name addSelectOptionToConditions
   * @param oPropertyMetadata Property metadata information
   * @param aValidOperators Operators for all the data types
   * @param aSemanticDateOperators Operators for the Date type
   * @param aCumulativeConditions Filter conditions
   * @param oSelectOption Selectoption of selection variant
   * @returns The filter conditions
   */
  function addSelectOptionToConditions(oPropertyMetadata, aValidOperators, aSemanticDateOperators, aCumulativeConditions, oSelectOption) {
    var _oSelectOption$Semant;
    const oCondition = getConditions(oSelectOption, oPropertyMetadata);
    if (oSelectOption !== null && oSelectOption !== void 0 && oSelectOption.SemanticDates && aSemanticDateOperators && aSemanticDateOperators.indexOf(oSelectOption === null || oSelectOption === void 0 ? void 0 : (_oSelectOption$Semant = oSelectOption.SemanticDates) === null || _oSelectOption$Semant === void 0 ? void 0 : _oSelectOption$Semant.operator) > -1) {
      const semanticDates = CommonUtils.addSemanticDatesToConditions(oSelectOption === null || oSelectOption === void 0 ? void 0 : oSelectOption.SemanticDates);
      if (semanticDates && Object.keys(semanticDates).length > 0) {
        aCumulativeConditions.push(semanticDates);
      }
    } else if (oCondition) {
      if (aValidOperators.length === 0 || aValidOperators.indexOf(oCondition.operator) > -1) {
        aCumulativeConditions.push(oCondition);
      }
    }
    return aCumulativeConditions;
  }

  /**
   * Method to add the semantic dates to filter conditions
   *
   * @function
   * @name addSemanticDatesToConditions
   * @param oSemanticDates Semantic date infomation
   * @returns The filter conditions containing semantic dates
   */

  function addSemanticDatesToConditions(oSemanticDates) {
    const values = [];
    if (oSemanticDates !== null && oSemanticDates !== void 0 && oSemanticDates.high) {
      values.push(oSemanticDates === null || oSemanticDates === void 0 ? void 0 : oSemanticDates.high);
    }
    if (oSemanticDates !== null && oSemanticDates !== void 0 && oSemanticDates.low) {
      values.push(oSemanticDates === null || oSemanticDates === void 0 ? void 0 : oSemanticDates.low);
    }
    return {
      values: values,
      operator: oSemanticDates === null || oSemanticDates === void 0 ? void 0 : oSemanticDates.operator,
      isEmpty: undefined
    };
  }
  function addPageContextToSelectionVariant(oSelectionVariant, mPageContext, oView) {
    const oAppComponent = CommonUtils.getAppComponent(oView);
    const oNavigationService = oAppComponent.getNavigationService();
    return oNavigationService.mixAttributesAndSelectionVariant(mPageContext, oSelectionVariant.toJSONString());
  }

  /**
   * Get selection variant based on the filter conditions and the navigation context fields.
   *
   * @param selectionVariant SelectionVariant provided by SAP Fiori elements.
   * @param filters Retrieved filter condition for filter bar and non conflicting properties
   * @param targetInfo Object containing intent-based navigation-related info
   * @param filterBar The filterbar control
   * @returns The selection variant
   */

  function addExternalStateFiltersToSelectionVariant(inputSelectionVariant, filters, filterBar, targetInfo) {
    const filterConditions = filters.filterConditions;
    const filtersWithoutConflict = filters.filterConditionsWithoutConflict ? filters.filterConditionsWithoutConflict : {};
    const tablePropertiesWithoutConflict = targetInfo !== null && targetInfo !== void 0 && targetInfo.propertiesWithoutConflict ? targetInfo.propertiesWithoutConflict : {};
    const selectionVariantFromFilterbar = StateFilterToSelectionVariant.getSelectionVariantFromConditions(filterConditions, filterBar.getPropertyHelper());
    for (const filterkey in filterConditions) {
      // only add the filter values if it is not already present in the SV already
      const filterSelectOption = selectionVariantFromFilterbar.getSelectOption(filterkey);
      if (!inputSelectionVariant.getSelectOption(filterkey)) {
        // TODO : custom filters should be ignored more generically
        if (filterkey === "$editState") {
          continue;
        }
        if (filterSelectOption) {
          inputSelectionVariant.massAddSelectOption(filterkey, filterSelectOption);
        }
      } else {
        if (tablePropertiesWithoutConflict && filterkey in tablePropertiesWithoutConflict) {
          inputSelectionVariant.massAddSelectOption(tablePropertiesWithoutConflict[filterkey], filterSelectOption);
        }
        // if property was without conflict in page context then add path from page context to SV
        if (filterkey in filtersWithoutConflict) {
          inputSelectionVariant.massAddSelectOption(filtersWithoutConflict[filterkey], filterSelectOption);
        }
      }
    }
    return inputSelectionVariant;
  }
  function isStickyEditMode(oControl) {
    const bIsStickyMode = ModelHelper.isStickySessionSupported(oControl.getModel().getMetaModel());
    const bUIEditable = oControl.getModel("ui").getProperty("/isEditable");
    return bIsStickyMode && bUIEditable;
  }

  /**
   * @param aMandatoryFilterFields
   * @param oSelectionVariant
   * @param oSelectionVariantDefaults
   */
  function addDefaultDisplayCurrency(aMandatoryFilterFields, oSelectionVariant, oSelectionVariantDefaults) {
    if (oSelectionVariant && aMandatoryFilterFields && aMandatoryFilterFields.length) {
      for (let i = 0; i < aMandatoryFilterFields.length; i++) {
        const aSVOption = oSelectionVariant.getSelectOption("DisplayCurrency"),
          aDefaultSVOption = oSelectionVariantDefaults && oSelectionVariantDefaults.getSelectOption("DisplayCurrency");
        if (aMandatoryFilterFields[i].$PropertyPath === "DisplayCurrency" && (!aSVOption || !aSVOption.length) && aDefaultSVOption && aDefaultSVOption.length) {
          const displayCurrencySelectOption = aDefaultSVOption[0];
          const sSign = displayCurrencySelectOption["Sign"];
          const sOption = displayCurrencySelectOption["Option"];
          const sLow = displayCurrencySelectOption["Low"];
          const sHigh = displayCurrencySelectOption["High"];
          oSelectionVariant.addSelectOption("DisplayCurrency", sSign, sOption, sLow, sHigh);
        }
      }
    }
  }
  /**
   * Retrieves the user defaults from the startup app state (if available) or the startup parameter and sets them to a model.
   *
   * @param oAppComponent
   * @param aParameters
   * @param oModel
   * @param bIsAction
   * @param bIsCreate
   * @param oActionDefaultValues
   */
  async function setUserDefaults(oAppComponent, aParameters, oModel, bIsAction, bIsCreate, oActionDefaultValues) {
    const oComponentData = oAppComponent.getComponentData(),
      oStartupParameters = oComponentData && oComponentData.startupParameters || {},
      oShellServices = oAppComponent.getShellServices();
    const oStartupAppState = await oShellServices.getStartupAppState(oAppComponent);
    const oData = (oStartupAppState === null || oStartupAppState === void 0 ? void 0 : oStartupAppState.getData()) || {},
      aExtendedParameters = oData.selectionVariant && oData.selectionVariant.SelectOptions || [];
    aParameters.forEach(function (oParameter) {
      var _oParameter$getPath;
      const sPropertyName = bIsAction ? `/${oParameter.$Name}` : (_oParameter$getPath = oParameter.getPath) === null || _oParameter$getPath === void 0 ? void 0 : _oParameter$getPath.call(oParameter).slice(oParameter.getPath().lastIndexOf("/") + 1);
      const sParameterName = bIsAction ? sPropertyName.slice(1) : sPropertyName;
      if (oActionDefaultValues && bIsCreate) {
        if (oActionDefaultValues[sParameterName]) {
          oModel.setProperty(sPropertyName, oActionDefaultValues[sParameterName]);
        }
      } else if (oStartupParameters[sParameterName]) {
        oModel.setProperty(sPropertyName, oStartupParameters[sParameterName][0]);
      } else if (aExtendedParameters.length > 0) {
        for (const oExtendedParameter of aExtendedParameters) {
          if (oExtendedParameter.PropertyName === sParameterName) {
            const oRange = oExtendedParameter.Ranges.length ? oExtendedParameter.Ranges[oExtendedParameter.Ranges.length - 1] : undefined;
            if (oRange && oRange.Sign === "I" && oRange.Option === "EQ") {
              oModel.setProperty(sPropertyName, oRange.Low); // high is ignored when Option=EQ
            }
          }
        }
      }
    });
  }

  function getAdditionalParamsForCreate(oStartupParameters, oInboundParameters) {
    const oInbounds = oInboundParameters,
      aCreateParameters = oInbounds !== undefined ? Object.keys(oInbounds).filter(function (sParameter) {
        return oInbounds[sParameter].useForCreate;
      }) : [];
    let oRet;
    for (let i = 0; i < aCreateParameters.length; i++) {
      const sCreateParameter = aCreateParameters[i];
      const aValues = oStartupParameters && oStartupParameters[sCreateParameter];
      if (aValues && aValues.length === 1) {
        oRet = oRet || Object.create(null);
        oRet[sCreateParameter] = aValues[0];
      }
    }
    return oRet;
  }
  function getSemanticObjectMapping(oOutbound) {
    const aSemanticObjectMapping = [];
    if (oOutbound.parameters) {
      const aParameters = Object.keys(oOutbound.parameters) || [];
      if (aParameters.length > 0) {
        aParameters.forEach(function (sParam) {
          const oMapping = oOutbound.parameters[sParam];
          if (oMapping.value && oMapping.value.value && oMapping.value.format === "binding") {
            // using the format of UI.Mapping
            const oSemanticMapping = {
              LocalProperty: {
                $PropertyPath: oMapping.value.value
              },
              SemanticObjectProperty: sParam
            };
            if (aSemanticObjectMapping.length > 0) {
              // To check if the semanticObject Mapping is done for the same local property more that once then first one will be considered
              for (let i = 0; i < aSemanticObjectMapping.length; i++) {
                var _aSemanticObjectMappi;
                if (((_aSemanticObjectMappi = aSemanticObjectMapping[i].LocalProperty) === null || _aSemanticObjectMappi === void 0 ? void 0 : _aSemanticObjectMappi.$PropertyPath) !== oSemanticMapping.LocalProperty.$PropertyPath) {
                  aSemanticObjectMapping.push(oSemanticMapping);
                }
              }
            } else {
              aSemanticObjectMapping.push(oSemanticMapping);
            }
          }
        });
      }
    }
    return aSemanticObjectMapping;
  }
  function getHeaderFacetItemConfigForExternalNavigation(oViewData, oCrossNav) {
    const oHeaderFacetItems = {};
    let sId;
    const oControlConfig = oViewData.controlConfiguration;
    for (const config in oControlConfig) {
      if (config.indexOf("@com.sap.vocabularies.UI.v1.DataPoint") > -1 || config.indexOf("@com.sap.vocabularies.UI.v1.Chart") > -1) {
        var _oControlConfig$confi, _oControlConfig$confi2;
        const sOutbound = (_oControlConfig$confi = oControlConfig[config].navigation) === null || _oControlConfig$confi === void 0 ? void 0 : (_oControlConfig$confi2 = _oControlConfig$confi.targetOutbound) === null || _oControlConfig$confi2 === void 0 ? void 0 : _oControlConfig$confi2.outbound;
        if (sOutbound !== undefined) {
          const oOutbound = oCrossNav[sOutbound];
          if (oOutbound.semanticObject && oOutbound.action) {
            if (config.indexOf("Chart") > -1) {
              sId = generate(["fe", "MicroChartLink", config]);
            } else {
              sId = generate(["fe", "HeaderDPLink", config]);
            }
            const aSemanticObjectMapping = CommonUtils.getSemanticObjectMapping(oOutbound);
            oHeaderFacetItems[sId] = {
              semanticObject: oOutbound.semanticObject,
              action: oOutbound.action,
              semanticObjectMapping: aSemanticObjectMapping
            };
          } else {
            Log.error(`Cross navigation outbound is configured without semantic object and action for ${sOutbound}`);
          }
        }
      }
    }
    return oHeaderFacetItems;
  }
  function setSemanticObjectMappings(oSelectionVariant, vMappings) {
    const oMappings = typeof vMappings === "string" ? JSON.parse(vMappings) : vMappings;
    for (let i = 0; i < oMappings.length; i++) {
      const sLocalProperty = oMappings[i]["LocalProperty"] && oMappings[i]["LocalProperty"]["$PropertyPath"] || oMappings[i]["@com.sap.vocabularies.Common.v1.LocalProperty"] && oMappings[i]["@com.sap.vocabularies.Common.v1.LocalProperty"]["$Path"];
      const sSemanticObjectProperty = oMappings[i]["SemanticObjectProperty"] || oMappings[i]["@com.sap.vocabularies.Common.v1.SemanticObjectProperty"];
      const oSelectOption = oSelectionVariant.getSelectOption(sLocalProperty);
      if (oSelectOption) {
        //Create a new SelectOption with sSemanticObjectProperty as the property Name and remove the older one
        oSelectionVariant.removeSelectOption(sLocalProperty);
        oSelectionVariant.massAddSelectOption(sSemanticObjectProperty, oSelectOption);
      }
    }
    return oSelectionVariant;
  }
  async function fnGetSemanticObjectsFromPath(oMetaModel, sPath, sQualifier) {
    return new Promise(function (resolve) {
      let sSemanticObject, aSemanticObjectUnavailableActions;
      if (sQualifier === "") {
        sSemanticObject = oMetaModel.getObject(`${sPath}@${"com.sap.vocabularies.Common.v1.SemanticObject"}`);
        aSemanticObjectUnavailableActions = oMetaModel.getObject(`${sPath}@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`);
      } else {
        sSemanticObject = oMetaModel.getObject(`${sPath}@${"com.sap.vocabularies.Common.v1.SemanticObject"}#${sQualifier}`);
        aSemanticObjectUnavailableActions = oMetaModel.getObject(`${sPath}@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}#${sQualifier}`);
      }
      const aSemanticObjectForGetLinks = [{
        semanticObject: sSemanticObject
      }];
      const oSemanticObject = {
        semanticObject: sSemanticObject
      };
      resolve({
        semanticObjectPath: sPath,
        semanticObjectForGetLinks: aSemanticObjectForGetLinks,
        semanticObject: oSemanticObject,
        unavailableActions: aSemanticObjectUnavailableActions
      });
    });
  }
  async function fnUpdateSemanticTargetsModel(aGetLinksPromises, aSemanticObjects, oInternalModelContext, sCurrentHash) {
    return Promise.all(aGetLinksPromises).then(function (aValues) {
      let aLinks,
        _oLink,
        _sLinkIntentAction,
        aFinalLinks = [];
      let oFinalSemanticObjects = {};
      const bIntentHasActions = function (sIntent, aActions) {
        for (const intent in aActions) {
          if (intent === sIntent) {
            return true;
          } else {
            return false;
          }
        }
      };
      for (let k = 0; k < aValues.length; k++) {
        aLinks = aValues[k];
        if (aLinks && aLinks.length > 0 && aLinks[0] !== undefined) {
          const oSemanticObject = {};
          let oTmp;
          let sAlternatePath;
          for (let i = 0; i < aLinks.length; i++) {
            aFinalLinks.push([]);
            let hasTargetsNotFiltered = false;
            let hasTargets = false;
            for (let iLinkCount = 0; iLinkCount < aLinks[i][0].length; iLinkCount++) {
              _oLink = aLinks[i][0][iLinkCount];
              _sLinkIntentAction = _oLink && _oLink.intent.split("?")[0].split("-")[1];
              if (!(_oLink && _oLink.intent && _oLink.intent.indexOf(sCurrentHash) === 0)) {
                hasTargetsNotFiltered = true;
                if (!bIntentHasActions(_sLinkIntentAction, aSemanticObjects[k].unavailableActions)) {
                  aFinalLinks[i].push(_oLink);
                  hasTargets = true;
                }
              }
            }
            oTmp = {
              semanticObject: aSemanticObjects[k].semanticObject,
              path: aSemanticObjects[k].path,
              HasTargets: hasTargets,
              HasTargetsNotFiltered: hasTargetsNotFiltered
            };
            if (oSemanticObject[aSemanticObjects[k].semanticObject] === undefined) {
              oSemanticObject[aSemanticObjects[k].semanticObject] = {};
            }
            sAlternatePath = aSemanticObjects[k].path.replace(/\//g, "_");
            if (oSemanticObject[aSemanticObjects[k].semanticObject][sAlternatePath] === undefined) {
              oSemanticObject[aSemanticObjects[k].semanticObject][sAlternatePath] = {};
            }
            oSemanticObject[aSemanticObjects[k].semanticObject][sAlternatePath] = Object.assign(oSemanticObject[aSemanticObjects[k].semanticObject][sAlternatePath], oTmp);
          }
          const sSemanticObjectName = Object.keys(oSemanticObject)[0];
          if (Object.keys(oFinalSemanticObjects).includes(sSemanticObjectName)) {
            oFinalSemanticObjects[sSemanticObjectName] = Object.assign(oFinalSemanticObjects[sSemanticObjectName], oSemanticObject[sSemanticObjectName]);
          } else {
            oFinalSemanticObjects = Object.assign(oFinalSemanticObjects, oSemanticObject);
          }
          aFinalLinks = [];
        }
      }
      if (Object.keys(oFinalSemanticObjects).length > 0) {
        oInternalModelContext.setProperty("semanticsTargets", mergeObjects(oFinalSemanticObjects, oInternalModelContext.getProperty("semanticsTargets")));
        return oFinalSemanticObjects;
      }
      return;
    }).catch(function (oError) {
      Log.error("fnUpdateSemanticTargetsModel: Cannot read links", oError);
    });
  }
  async function fnGetSemanticObjectPromise(oAppComponent, oView, oMetaModel, sPath, sQualifier) {
    return CommonUtils.getSemanticObjectsFromPath(oMetaModel, sPath, sQualifier);
  }
  function fnPrepareSemanticObjectsPromises(_oAppComponent, _oView, _oMetaModel, _aSemanticObjectsFound, _aSemanticObjectsPromises) {
    let _Keys, sPath;
    let sQualifier, regexResult;
    for (let i = 0; i < _aSemanticObjectsFound.length; i++) {
      sPath = _aSemanticObjectsFound[i];
      _Keys = Object.keys(_oMetaModel.getObject(sPath + "@"));
      for (let index = 0; index < _Keys.length; index++) {
        if (_Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObject"}`) === 0 && _Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`) === -1 && _Keys[index].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`) === -1) {
          regexResult = /#(.*)/.exec(_Keys[index]);
          sQualifier = regexResult ? regexResult[1] : "";
          _aSemanticObjectsPromises.push(CommonUtils.getSemanticObjectPromise(_oAppComponent, _oView, _oMetaModel, sPath, sQualifier));
        }
      }
    }
  }
  function fnGetSemanticTargetsFromPageModel(oController, sPageModel) {
    const _fnfindValuesHelper = function (obj, key, list) {
      if (!obj) {
        return list;
      }
      if (obj instanceof Array) {
        obj.forEach(item => {
          list = list.concat(_fnfindValuesHelper(item, key, []));
        });
        return list;
      }
      if (obj[key]) {
        list.push(obj[key]);
      }
      if (typeof obj == "object" && obj !== null) {
        const children = Object.keys(obj);
        if (children.length > 0) {
          for (let i = 0; i < children.length; i++) {
            list = list.concat(_fnfindValuesHelper(obj[children[i]], key, []));
          }
        }
      }
      return list;
    };
    const _fnfindValues = function (obj, key) {
      return _fnfindValuesHelper(obj, key, []);
    };
    const _fnDeleteDuplicateSemanticObjects = function (aSemanticObjectPath) {
      return aSemanticObjectPath.filter(function (value, index) {
        return aSemanticObjectPath.indexOf(value) === index;
      });
    };
    const oView = oController.getView();
    const oInternalModelContext = oView.getBindingContext("internal");
    if (oInternalModelContext) {
      const aSemanticObjectsPromises = [];
      const oComponent = oController.getOwnerComponent();
      const oAppComponent = Component.getOwnerComponentFor(oComponent);
      const oMetaModel = oAppComponent.getMetaModel();
      let oPageModel = oComponent.getModel(sPageModel).getData();
      if (JSON.stringify(oPageModel) === "{}") {
        oPageModel = oComponent.getModel(sPageModel)._getObject("/", undefined);
      }
      let aSemanticObjectsFound = _fnfindValues(oPageModel, "semanticObjectPath");
      aSemanticObjectsFound = _fnDeleteDuplicateSemanticObjects(aSemanticObjectsFound);
      const oShellServiceHelper = oAppComponent.getShellServices();
      let sCurrentHash = oShellServiceHelper.getHash();
      const aSemanticObjectsForGetLinks = [];
      const aSemanticObjects = [];
      let _oSemanticObject;
      if (sCurrentHash && sCurrentHash.indexOf("?") !== -1) {
        // sCurrentHash can contain query string, cut it off!
        sCurrentHash = sCurrentHash.split("?")[0];
      }
      fnPrepareSemanticObjectsPromises(oAppComponent, oView, oMetaModel, aSemanticObjectsFound, aSemanticObjectsPromises);
      if (aSemanticObjectsPromises.length === 0) {
        return Promise.resolve();
      } else {
        Promise.all(aSemanticObjectsPromises).then(async function (aValues) {
          const aGetLinksPromises = [];
          let sSemObjExpression;
          const aSemanticObjectsResolved = aValues.filter(function (element) {
            if (element.semanticObject !== undefined && element.semanticObject.semanticObject && typeof element.semanticObject.semanticObject === "object") {
              sSemObjExpression = compileExpression(pathInModel(element.semanticObject.semanticObject.$Path));
              element.semanticObject.semanticObject = sSemObjExpression;
              element.semanticObjectForGetLinks[0].semanticObject = sSemObjExpression;
              return true;
            } else if (element) {
              return element.semanticObject !== undefined;
            } else {
              return false;
            }
          });
          for (let j = 0; j < aSemanticObjectsResolved.length; j++) {
            _oSemanticObject = aSemanticObjectsResolved[j];
            if (_oSemanticObject && _oSemanticObject.semanticObject && !(_oSemanticObject.semanticObject.semanticObject.indexOf("{") === 0)) {
              aSemanticObjectsForGetLinks.push(_oSemanticObject.semanticObjectForGetLinks);
              aSemanticObjects.push({
                semanticObject: _oSemanticObject.semanticObject.semanticObject,
                unavailableActions: _oSemanticObject.unavailableActions,
                path: aSemanticObjectsResolved[j].semanticObjectPath
              });
              aGetLinksPromises.push(oShellServiceHelper.getLinksWithCache([_oSemanticObject.semanticObjectForGetLinks]));
            }
          }
          return CommonUtils.updateSemanticTargets(aGetLinksPromises, aSemanticObjects, oInternalModelContext, sCurrentHash);
        }).catch(function (oError) {
          Log.error("fnGetSemanticTargetsFromTable: Cannot get Semantic Objects", oError);
        });
      }
    } else {
      return Promise.resolve();
    }
  }
  function getFilterAllowedExpression(oFilterRestrictionsAnnotation) {
    const mAllowedExpressions = {};
    if (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation.FilterExpressionRestrictions !== undefined) {
      oFilterRestrictionsAnnotation.FilterExpressionRestrictions.forEach(function (oProperty) {
        if (oProperty.Property && oProperty.AllowedExpressions !== undefined) {
          //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
          if (mAllowedExpressions[oProperty.Property.$PropertyPath] !== undefined) {
            mAllowedExpressions[oProperty.Property.$PropertyPath].push(oProperty.AllowedExpressions);
          } else {
            mAllowedExpressions[oProperty.Property.$PropertyPath] = [oProperty.AllowedExpressions];
          }
        }
      });
    }
    return mAllowedExpressions;
  }
  function getFilterRestrictions(oFilterRestrictionsAnnotation, sRestriction) {
    let aProps = [];
    if (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation[sRestriction]) {
      aProps = oFilterRestrictionsAnnotation[sRestriction].map(function (oProperty) {
        return oProperty.$PropertyPath;
      });
    }
    return aProps;
  }
  function _fetchPropertiesForNavPath(paths, navPath, props) {
    const navPathPrefix = navPath + "/";
    return paths.reduce((outPaths, pathToCheck) => {
      if (pathToCheck.startsWith(navPathPrefix)) {
        const outPath = pathToCheck.replace(navPathPrefix, "");
        if (outPaths.indexOf(outPath) === -1) {
          outPaths.push(outPath);
        }
      }
      return outPaths;
    }, props);
  }
  function getFilterRestrictionsByPath(entityPath, oContext) {
    const oRet = {
      RequiredProperties: [],
      NonFilterableProperties: [],
      FilterAllowedExpressions: {}
    };
    let oFilterRestrictions;
    const navigationText = "$NavigationPropertyBinding";
    const frTerm = "@Org.OData.Capabilities.V1.FilterRestrictions";
    const entityTypePathParts = entityPath.replaceAll("%2F", "/").split("/").filter(ModelHelper.filterOutNavPropBinding);
    const entityTypePath = `/${entityTypePathParts.join("/")}/`;
    const entitySetPath = ModelHelper.getEntitySetPath(entityPath, oContext);
    const entitySetPathParts = entitySetPath.split("/").filter(ModelHelper.filterOutNavPropBinding);
    const isContainment = oContext.getObject(`${entityTypePath}$ContainsTarget`);
    const containmentNavPath = !!isContainment && entityTypePathParts[entityTypePathParts.length - 1];

    //LEAST PRIORITY - Filter restrictions directly at Entity Set
    //e.g. FR in "NS.EntityContainer/SalesOrderManage" ContextPath: /SalesOrderManage
    if (!isContainment) {
      oFilterRestrictions = oContext.getObject(`${entitySetPath}${frTerm}`);
      oRet.RequiredProperties = getFilterRestrictions(oFilterRestrictions, "RequiredProperties") || [];
      const resultContextCheck = oContext.getObject(`${entityTypePath}@com.sap.vocabularies.Common.v1.ResultContext`);
      if (!resultContextCheck) {
        oRet.NonFilterableProperties = getFilterRestrictions(oFilterRestrictions, "NonFilterableProperties") || [];
      }
      //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
      oRet.FilterAllowedExpressions = getFilterAllowedExpression(oFilterRestrictions) || {};
    }
    if (entityTypePathParts.length > 1) {
      const navPath = isContainment ? containmentNavPath : entitySetPathParts[entitySetPathParts.length - 1];
      // In case of containment we take entitySet provided as parent. And in case of normal we would remove the last navigation from entitySetPath.
      const parentEntitySetPath = isContainment ? entitySetPath : `/${entitySetPathParts.slice(0, -1).join(`/${navigationText}/`)}`;
      //THIRD HIGHEST PRIORITY - Reading property path restrictions - Annotation at main entity but directly on navigation property path
      //e.g. Parent Customer with PropertyPath="Set/CityName" ContextPath: Customer/Set
      const oParentRet = {
        RequiredProperties: [],
        NonFilterableProperties: [],
        FilterAllowedExpressions: {}
      };
      if (!navPath.includes("%2F")) {
        const oParentFR = oContext.getObject(`${parentEntitySetPath}${frTerm}`);
        oRet.RequiredProperties = _fetchPropertiesForNavPath(getFilterRestrictions(oParentFR, "RequiredProperties") || [], navPath, oRet.RequiredProperties || []);
        oRet.NonFilterableProperties = _fetchPropertiesForNavPath(getFilterRestrictions(oParentFR, "NonFilterableProperties") || [], navPath, oRet.NonFilterableProperties || []);
        //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
        const completeAllowedExps = getFilterAllowedExpression(oParentFR) || {};
        oParentRet.FilterAllowedExpressions = Object.keys(completeAllowedExps).reduce((outProp, propPath) => {
          if (propPath.startsWith(navPath + "/")) {
            const outPropPath = propPath.replace(navPath + "/", "");
            outProp[outPropPath] = completeAllowedExps[propPath];
          }
          return outProp;
        }, {});
      }

      //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
      oRet.FilterAllowedExpressions = mergeObjects({}, oRet.FilterAllowedExpressions || {}, oParentRet.FilterAllowedExpressions || {});

      //SECOND HIGHEST priority - Navigation restrictions
      //e.g. Parent "/Customer" with NavigationPropertyPath="Set" ContextPath: Customer/Set
      const oNavRestrictions = MetaModelFunction.getNavigationRestrictions(oContext, parentEntitySetPath, navPath.replaceAll("%2F", "/"));
      const oNavFilterRest = oNavRestrictions && oNavRestrictions["FilterRestrictions"];
      const navResReqProps = getFilterRestrictions(oNavFilterRest, "RequiredProperties") || [];
      oRet.RequiredProperties = uniqueSort(oRet.RequiredProperties.concat(navResReqProps));
      const navNonFilterProps = getFilterRestrictions(oNavFilterRest, "NonFilterableProperties") || [];
      oRet.NonFilterableProperties = uniqueSort(oRet.NonFilterableProperties.concat(navNonFilterProps));
      //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
      oRet.FilterAllowedExpressions = mergeObjects({}, oRet.FilterAllowedExpressions || {}, getFilterAllowedExpression(oNavFilterRest) || {});

      //HIGHEST priority - Restrictions having target with navigation association entity
      // e.g. FR in "CustomerParameters/Set" ContextPath: "Customer/Set"
      const navAssociationEntityRest = oContext.getObject(`/${entityTypePathParts.join("/")}${frTerm}`);
      const navAssocReqProps = getFilterRestrictions(navAssociationEntityRest, "RequiredProperties") || [];
      oRet.RequiredProperties = uniqueSort(oRet.RequiredProperties.concat(navAssocReqProps));
      const navAssocNonFilterProps = getFilterRestrictions(navAssociationEntityRest, "NonFilterableProperties") || [];
      oRet.NonFilterableProperties = uniqueSort(oRet.NonFilterableProperties.concat(navAssocNonFilterProps));
      //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
      oRet.FilterAllowedExpressions = mergeObjects({}, oRet.FilterAllowedExpressions, getFilterAllowedExpression(navAssociationEntityRest) || {});
    }
    return oRet;
  }
  async function templateControlFragment(sFragmentName, oPreprocessorSettings, oOptions, oModifier) {
    oOptions = oOptions || {};
    if (oModifier) {
      return oModifier.templateControlFragment(sFragmentName, oPreprocessorSettings, oOptions.view).then(function (oFragment) {
        // This is required as Flex returns an HTMLCollection as templating result in XML time.
        return oModifier.targets === "xmlTree" && oFragment.length > 0 ? oFragment[0] : oFragment;
      });
    } else {
      const oFragment = await XMLPreprocessor.process(XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment"), {
        name: sFragmentName
      }, oPreprocessorSettings);
      const oControl = oFragment.firstElementChild;
      if (!!oOptions.isXML && oControl) {
        return oControl;
      }
      return Fragment.load({
        id: oOptions.id,
        definition: oFragment,
        controller: oOptions.controller
      });
    }
  }
  function getSingletonPath(path, metaModel) {
    const parts = path.split("/").filter(Boolean),
      propertyName = parts.pop(),
      navigationPath = parts.join("/"),
      entitySet = navigationPath && metaModel.getObject(`/${navigationPath}`);
    if ((entitySet === null || entitySet === void 0 ? void 0 : entitySet.$kind) === "Singleton") {
      const singletonName = parts[parts.length - 1];
      return `/${singletonName}/${propertyName}`;
    }
    return undefined;
  }
  async function requestSingletonProperty(path, model) {
    if (!path || !model) {
      return Promise.resolve(null);
    }
    const metaModel = model.getMetaModel();
    // Find the underlying entity set from the property path and check whether it is a singleton.
    const resolvedPath = getSingletonPath(path, metaModel);
    if (resolvedPath) {
      const propertyBinding = model.bindProperty(resolvedPath);
      return propertyBinding.requestValue();
    }
    return Promise.resolve(null);
  }

  // Get the path for action parameters that is needed to read the annotations
  function getParameterPath(sPath, sParameter) {
    let sContext;
    if (sPath.indexOf("@$ui5.overload") > -1) {
      sContext = sPath.split("@$ui5.overload")[0];
    } else {
      // For Unbound Actions in Action Parameter Dialogs
      const aAction = sPath.split("/0")[0].split(".");
      sContext = `/${aAction[aAction.length - 1]}/`;
    }
    return sContext + sParameter;
  }

  /**
   * Get resolved expression binding used for texts at runtime.
   *
   * @param expBinding
   * @param control
   * @function
   * @static
   * @memberof sap.fe.core.CommonUtils
   * @returns A string after resolution.
   * @ui5-restricted
   */
  function _fntranslatedTextFromExpBindingString(expBinding, control) {
    // The idea here is to create dummy element with the expresion binding.
    // Adding it as dependent to the view/control would propagate all the models to the dummy element and resolve the binding.
    // We remove the dummy element after that and destroy it.

    const anyResourceText = new AnyElement({
      anyText: expBinding
    });
    control.addDependent(anyResourceText);
    const resultText = anyResourceText.getAnyText();
    control.removeDependent(anyResourceText);
    anyResourceText.destroy();
    return resultText;
  }
  /**
   * Check if the current device has a small screen.
   *
   * @returns A Boolean.
   * @private
   */
  function isSmallDevice() {
    return !system.desktop || Device.resize.width <= 320;
  }
  /**
   * Get filter information for a SelectionVariant annotation.
   *
   * @param oControl The table/chart instance
   * @param selectionVariantPath Relative SelectionVariant annotation path
   * @param isChart
   * @returns Information on filters
   *  filters: array of sap.ui.model.filters
   * text: Text property of the SelectionVariant
   * @private
   * @ui5-restricted
   */

  function getFiltersInfoForSV(oControl, selectionVariantPath, isChart) {
    const sEntityTypePath = oControl.data("entityType"),
      oMetaModel = CommonUtils.getAppComponent(oControl).getMetaModel(),
      mPropertyFilters = {},
      aFilters = [],
      aPaths = [];
    let sText = "";
    let oSelectionVariant = oMetaModel.getObject(`${sEntityTypePath}${selectionVariantPath}`);
    // for chart the structure varies hence read it from main object
    if (isChart) {
      oSelectionVariant = oSelectionVariant.SelectionVariant;
    }
    if (oSelectionVariant) {
      sText = oSelectionVariant.Text;
      (oSelectionVariant.SelectOptions || []).filter(function (oSelectOption) {
        return oSelectOption && oSelectOption.PropertyName && oSelectOption.PropertyName.$PropertyPath;
      }).forEach(function (oSelectOption) {
        const sPath = oSelectOption.PropertyName.$PropertyPath;
        if (!aPaths.includes(sPath)) {
          aPaths.push(sPath);
        }
        for (const j in oSelectOption.Ranges) {
          var _oRange$Option, _oRange$Option$$EnumM;
          const oRange = oSelectOption.Ranges[j];
          mPropertyFilters[sPath] = (mPropertyFilters[sPath] || []).concat(new Filter(sPath, (_oRange$Option = oRange.Option) === null || _oRange$Option === void 0 ? void 0 : (_oRange$Option$$EnumM = _oRange$Option.$EnumMember) === null || _oRange$Option$$EnumM === void 0 ? void 0 : _oRange$Option$$EnumM.split("/").pop(), oRange.Low, oRange.High));
        }
      });
      for (const sPropertyPath in mPropertyFilters) {
        aFilters.push(new Filter({
          filters: mPropertyFilters[sPropertyPath],
          and: false
        }));
      }
    }
    return {
      properties: aPaths,
      filters: aFilters,
      text: sText
    };
  }
  function getConverterContextForPath(sMetaPath, oMetaModel, sEntitySet, oDiagnostics) {
    const oContext = oMetaModel.createBindingContext(sMetaPath);
    return ConverterContext === null || ConverterContext === void 0 ? void 0 : ConverterContext.createConverterContextForMacro(sEntitySet, oContext || oMetaModel, oDiagnostics, mergeObjects, undefined);
  }

  /**
   * This function returns an ID which should be used in the internal chart for the measure or dimension.
   * For standard cases, this is just the ID of the property.
   * If it is necessary to use another ID internally inside the chart (e.g. on duplicate property IDs) this method can be overwritten.
   * In this case, <code>getPropertyFromNameAndKind</code> needs to be overwritten as well.
   *
   * @param name ID of the property
   * @param kind Type of the property (measure or dimension)
   * @returns Internal ID for the sap.chart.Chart
   * @private
   * @ui5-restricted
   */
  function getInternalChartNameFromPropertyNameAndKind(name, kind) {
    return name.replace("_fe_" + kind + "_", "");
  }

  /**
   * This function returns an array of chart properties by remvoing _fe_groupable prefix.
   *
   * @param {Array} aFilters Chart filter properties
   * @returns Chart properties without prefixes
   * @private
   * @ui5-restricted
   */

  function getChartPropertiesWithoutPrefixes(aFilters) {
    aFilters.forEach(element => {
      if (element.sPath && element.sPath.includes("fe_groupable")) {
        element.sPath = CommonUtils.getInternalChartNameFromPropertyNameAndKind(element.sPath, "groupable");
      }
    });
    return aFilters;
  }

  /**
   * Gets the context of the DraftRoot path.
   * If a view has been created with the draft Root Path, this method returns its bindingContext.
   * Where no view is found a new created context is returned.
   * The new created context request the key of the entity in order to get the Etag of this entity.
   *
   * @function
   * @param programmingModel
   * @param view
   * @param appComponent
   * @name createRootContext
   * @returns Returns a Promise
   */
  async function createRootContext(programmingModel, view, appComponent) {
    const context = view.getBindingContext();
    if (context) {
      const rootContextPath = programmingModel === ProgrammingModel.Draft ? ModelHelper.getDraftRootPath(context) : ModelHelper.getStickyRootPath(context);
      let simpleRootContext;
      if (rootContextPath) {
        var _appComponent$getRoot, _simpleRootContext;
        // Check if a view matches with the draft root path
        const existingBindingContextOnPage = (_appComponent$getRoot = appComponent.getRootViewController().getInstancedViews().find(pageView => {
          var _pageView$getBindingC;
          return ((_pageView$getBindingC = pageView.getBindingContext()) === null || _pageView$getBindingC === void 0 ? void 0 : _pageView$getBindingC.getPath()) === rootContextPath;
        })) === null || _appComponent$getRoot === void 0 ? void 0 : _appComponent$getRoot.getBindingContext();
        if (existingBindingContextOnPage) {
          return existingBindingContextOnPage;
        }
        const internalModel = view.getModel("internal");
        simpleRootContext = internalModel.getProperty("/simpleRootContext");
        if (((_simpleRootContext = simpleRootContext) === null || _simpleRootContext === void 0 ? void 0 : _simpleRootContext.getPath()) === rootContextPath) {
          return simpleRootContext;
        }
        const model = context.getModel();
        simpleRootContext = model.bindContext(rootContextPath).getBoundContext();
        await CommonUtils.waitForContextRequested(simpleRootContext);
        // Store this new created context to use it on the next iterations
        internalModel.setProperty("/simpleRootContext", simpleRootContext);
        return simpleRootContext;
      }
    }
  }
  const CommonUtils = {
    fireButtonPress: fnFireButtonPress,
    getTargetView: getTargetView,
    getCurrentPageView: getCurrentPageView,
    hasTransientContext: fnHasTransientContexts,
    updateRelatedAppsDetails: fnUpdateRelatedAppsDetails,
    getAppComponent: getAppComponent,
    getMandatoryFilterFields: fnGetMandatoryFilterFields,
    getContextPathProperties: fnGetContextPathProperties,
    getParameterInfo: getParameterInfo,
    updateDataFieldForIBNButtonsVisibility: fnUpdateDataFieldForIBNButtonsVisibility,
    getEntitySetName: getEntitySetName,
    getActionPath: getActionPath,
    computeDisplayMode: computeDisplayMode,
    isStickyEditMode: isStickyEditMode,
    getOperatorsForProperty: getOperatorsForProperty,
    getOperatorsForDateProperty: getOperatorsForDateProperty,
    getOperatorsForGuidProperty: getOperatorsForGuidProperty,
    addExternalStateFiltersToSelectionVariant: addExternalStateFiltersToSelectionVariant,
    addPageContextToSelectionVariant: addPageContextToSelectionVariant,
    addDefaultDisplayCurrency: addDefaultDisplayCurrency,
    setUserDefaults: setUserDefaults,
    getIBNActions: fnGetIBNActions,
    getHeaderFacetItemConfigForExternalNavigation: getHeaderFacetItemConfigForExternalNavigation,
    getSemanticObjectMapping: getSemanticObjectMapping,
    setSemanticObjectMappings: setSemanticObjectMappings,
    getSemanticObjectPromise: fnGetSemanticObjectPromise,
    getSemanticTargetsFromPageModel: fnGetSemanticTargetsFromPageModel,
    getSemanticObjectsFromPath: fnGetSemanticObjectsFromPath,
    updateSemanticTargets: fnUpdateSemanticTargetsModel,
    waitForContextRequested: waitForContextRequested,
    getFilterRestrictionsByPath: getFilterRestrictionsByPath,
    getSpecificAllowedExpression: getSpecificAllowedExpression,
    getAdditionalParamsForCreate: getAdditionalParamsForCreate,
    requestSingletonProperty: requestSingletonProperty,
    templateControlFragment: templateControlFragment,
    FilterRestrictions: {
      REQUIRED_PROPERTIES: "RequiredProperties",
      NON_FILTERABLE_PROPERTIES: "NonFilterableProperties",
      ALLOWED_EXPRESSIONS: "FilterAllowedExpressions"
    },
    AllowedExpressionsPrio: ["SingleValue", "MultiValue", "SingleRange", "MultiRange", "SearchExpression", "MultiRangeOrSearchExpression"],
    normalizeSearchTerm: normalizeSearchTerm,
    setContextsBasedOnOperationAvailable: setContextsBasedOnOperationAvailable,
    setDynamicActionContexts: setDynamicActionContexts,
    requestProperty: requestProperty,
    getParameterPath: getParameterPath,
    getRelatedAppsMenuItems: _getRelatedAppsMenuItems,
    getTranslatedTextFromExpBindingString: _fntranslatedTextFromExpBindingString,
    addSemanticDatesToConditions: addSemanticDatesToConditions,
    addSelectOptionToConditions: addSelectOptionToConditions,
    updateRelateAppsModel: updateRelateAppsModel,
    getSemanticObjectAnnotations: _getSemanticObjectAnnotations,
    getFiltersInfoForSV: getFiltersInfoForSV,
    getInternalChartNameFromPropertyNameAndKind: getInternalChartNameFromPropertyNameAndKind,
    getChartPropertiesWithoutPrefixes: getChartPropertiesWithoutPrefixes,
    createRootContext: createRootContext,
    isSmallDevice,
    getConverterContextForPath
  };
  return CommonUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/CommonUtils", ["sap/base/Log","sap/base/util/array/uniqueSort","sap/base/util/merge","sap/fe/core/converters/ConverterContext","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/SemanticDateOperators","sap/fe/core/helpers/StableIdHelper","sap/fe/core/library","sap/fe/core/StateFilterToSelectionVariant","sap/fe/core/type/TypeUtil","sap/ui/core/Component","sap/ui/core/Fragment","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/Device","sap/ui/mdc/condition/FilterOperatorUtil","sap/ui/model/Filter","./controls/AnyElement","./helpers/MetaModelFunction","./templating/FilterHelper"],function(e,t,n,o,i,r,s,a,c,l,u,p,f,g,d,m,b,O,h,v,P,y){"use strict";var S={};var j=y.getConditions;var C=b.system;var A=c.generate;var x=r.pathInModel;var E=r.compileExpression;const T=l.ProgrammingModel;function $(e){if(!e){return undefined}return e.replace(/"/g," ").replace(/\\/g,"\\\\").split(/\s+/).reduce(function(e,t){if(t!==""){e=`${e?`${e} `:""}"${t}"`}return e},undefined)}async function F(e){var t;const n=e.getModel();const o=n.getMetaModel();const r=o.getMetaPath(e.getPath());const s=i.getInvolvedDataModelObjects(o.getContext(r));await e.requestProperty((t=s.targetEntityType.keys[0])===null||t===void 0?void 0:t.name)}function M(e){let t=false;if(e){e.getCurrentContexts().forEach(function(e){if(e&&e.isTransient()){t=true}})}return t}async function R(e,t,n,o){return e.getLinks({semanticObject:n,params:o})}function N(e){const t=[];const n=Object.keys(e);let o;for(let i=0;i<n.length;i++){o={LocalProperty:{$PropertyPath:n[i]},SemanticObjectProperty:e[n[i]]};t.push(o)}return t}function w(e,t,n,o,i){for(let r=0;r<e.length;r++){const s=e[r];const a=s.intent;const c=a.split("-")[1].split("?")[0];if(i&&i.includes(c)){o.push({text:s.text,targetSemObject:a.split("#")[1].split("-")[0],targetAction:c.split("~")[0],targetParams:n})}else if(!i&&t&&t.indexOf(c)===-1){o.push({text:s.text,targetSemObject:a.split("#")[1].split("-")[0],targetAction:c.split("~")[0],targetParams:n})}}}function D(e,t,n,o){if(o&&o.length>0){const i=e.allowedActions||undefined;const r=e.unavailableActions?e.unavailableActions:[];const s=e.mapping?N(e.mapping):[];const a={navigationContexts:t,semanticObjectMapping:s};w(o,r,a,n,i)}}function L(e,t,n,o){if(o.length>0){const i=[e.action];const r=[];const s=[];const a={navigationContexts:t,semanticObjectMapping:s};w(o,r,a,n,i)}}async function k(t,n,o,i,r,s,a){const c=a.getShellServices();const l={};let u="",p="";let f;let g=[];let d=[];let m;async function b(){const e=c.parseShellHash(document.location.hash);u=e.semanticObject;p=e.action;return R(c,o,u,l)}try{if(n){if(i&&i.length>0){for(let e=0;e<i.length;e++){const t=i[e].$PropertyPath;if(!l[t]){l[t]={value:n[t]}}}}else{const e=r.getObject(`${s}/$Type/$Key`);for(const t in e){const o=e[t];if(!l[o]){l[o]={value:n[o]}}}}}const e=G(o).getViewData();const O=[];let h;if(e.additionalSemanticObjects){m=Object.keys(e.additionalSemanticObjects);for(let n=0;n<m.length;n++){h=await Promise.resolve(R(c,o,m[n],l));D(e.additionalSemanticObjects[m[n]],t,O,h)}}const v=[];const P=a.getComponentData();if(P.feEnvironment&&P.feEnvironment.getIntent()){const e=P.feEnvironment.getIntent();h=await Promise.resolve(R(c,o,e.semanticObject,l));L(e,t,v,h)}const y=o.getBindingContext("internal");const S=await b();if(S){if(S.length>0){let n=false;const o={};const i=[];const a=`${s}@`;const c=`${s}/@`;const l=r.getObject(a);f=qe.getSemanticObjectAnnotations(l,u);if(!f.bHasEntitySetSO){const e=r.getObject(c);f=qe.getSemanticObjectAnnotations(e,u)}d=f.aUnavailableActions;d.push(p);o.navigationContexts=t;o.semanticObjectMapping=f.aMappings;w(S,d,o,i);O.forEach(function(e){var t;let{targetSemObject:o}=e;if(((t=i[0])===null||t===void 0?void 0:t.targetSemObject)===o){n=true}});if(e.additionalSemanticObjects&&i[0]&&e.additionalSemanticObjects[i[0].targetSemObject]&&!!e.additionalSemanticObjects[i[0].targetSemObject].allowedActions){n=true}const m=O.concat(v);g=n?m:m.concat(i);y.setProperty("relatedApps/visibility",g.length>0);y.setProperty("relatedApps/items",g)}else{y.setProperty("relatedApps/visibility",false)}}else{y.setProperty("relatedApps/visibility",false)}}catch(t){e.error("Cannot read links",t)}return g}function B(e,t){const n={bHasEntitySetSO:false,aAllowedActions:[],aUnavailableActions:[],aMappings:[]};let o,i;let r;for(const s in e){if(s.indexOf("com.sap.vocabularies.Common.v1.SemanticObject")>-1&&e[s]===t){n.bHasEntitySetSO=true;o=`@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`;i=`@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`;if(s.indexOf("#")>-1){r=s.split("#")[1];o=`${o}#${r}`;i=`${i}#${r}`}if(e[o]){n.aMappings=n.aMappings.concat(e[o])}if(e[i]){n.aUnavailableActions=n.aUnavailableActions.concat(e[i])}break}}return n}function I(t,n){const o=t.getModel().getMetaModel();const i=t.getBindingContext();const r=i&&i.getPath()||"";const s=o.getMetaPath(r);const a=`${s}/`+`@com.sap.vocabularies.Common.v1.SemanticKey`;const c=o.getObject(a);const l=i===null||i===void 0?void 0:i.getObject();if(!l&&i){i.requestObject().then(async function(e){return qe.updateRelateAppsModel(i,e,t,c,o,s,n)}).catch(function(t){e.error("Cannot update the related app details",t)})}else{return qe.updateRelateAppsModel(i,l,t,c,o,s,n)}}function V(e){if(e&&e.isA(["sap.m.Button","sap.m.OverflowToolbarButton"])&&e.getVisible()&&e.getEnabled()){e.firePress()}}function q(e){if(e.isA("sap.fe.core.AppComponent")){return e}const t=f.getOwnerComponentFor(e);if(!t){throw new Error("There should be a sap.fe.core.AppComponent as owner of the control")}else{return q(t)}}function U(e){const t=e.getRootViewController();return t.isFclEnabled()?t.getRightmostView():qe.getTargetView(e.getRootContainer().getCurrentPage())}function G(e){if(e&&e.isA("sap.ui.core.ComponentContainer")){const t=e.getComponentInstance();e=t&&t.getRootControl()}while(e&&!e.isA("sap.ui.core.mvc.View")){e=e.getParent()}return e}function H(e,t){for(const n in t){if(t[n]!==e[n]){return false}}return true}function W(e,t,n){const o=e.getObject(`${t}/`)||{},i={};for(const e in o){if(o.hasOwnProperty(e)&&!/^\$/i.test(e)&&o[e].$kind&&H(o[e],n||{$kind:"Property"})){i[e]=o[e]}}return i}function Y(e,t){let n=[];if(e&&t){n=e.getObject(`${t}@Org.OData.Capabilities.V1.FilterRestrictions/RequiredProperties`)}return n}function _(e,t){const n=e&&e.getActions();if(n){n.forEach(function(e){if(e.isA("sap.ui.mdc.actiontoolbar.ActionToolbarAction")){e=e.getAction()}if(e.isA("sap.m.MenuButton")){const n=e.getMenu();const o=n.getItems();o.forEach(e=>{if(e.data("IBNData")){t.push(e)}})}else if(e.data("IBNData")){t.push(e)}})}return t}function Q(t,n){const o={};const i=qe.getAppComponent(n);const r=s.isStickySessionSupported(n.getModel().getMetaModel());const a=function(n){if(n){const e=Object.keys(n);e.forEach(function(e){if(e.indexOf("_")!==0&&e.indexOf("odata.context")===-1){o[e]={value:n[e]}}})}if(t.length){t.forEach(function(t){const n=t.data("IBNData").semanticObject;const s=t.data("IBNData").action;i.getShellServices().getLinks({semanticObject:n,action:s,params:o}).then(function(e){t.setVisible(t.getVisible()&&e&&e.length===1);if(r){t.getBindingContext("internal").setProperty(t.getId().split("--")[1],{shellNavigationNotAvailable:!(e&&e.length===1)})}return}).catch(function(t){e.error("Cannot retrieve the links from the shell service",t)})})}};if(n&&n.getBindingContext()){var c;(c=n.getBindingContext())===null||c===void 0?void 0:c.requestObject().then(function(e){return a(e)}).catch(function(t){e.error("Cannot retrieve the links from the shell service",t)})}else{a()}}function K(e,t,n,o){const i=!n?e.getObject(e.getPath()).toString():n;let r=e.getPath().split("/@")[0];const s=e.getObject(r).$Type;const a=J(e.getModel(),s);if(a){r=`/${a}`}if(o){return e.getObject(`${r}/${i}@Org.OData.Core.V1.OperationAvailable`)}if(t){return`${r}/${i}`}else{return{sContextPath:r,sProperty:e.getObject(`${r}/${i}@Org.OData.Core.V1.OperationAvailable/$Path`),sBindingParameter:e.getObject(`${r}/${i}/@$ui5.overload/0/$Parameter/0/$Name`)}}}function J(e,t){const n=e.getObject("/");for(const e in n){if(typeof n[e]==="object"&&n[e].$Type===t){return e}}}function X(e,t){const n=e["@com.sap.vocabularies.Common.v1.Text"],o=n&&(e&&e["@com.sap.vocabularies.Common.v1.Text@com.sap.vocabularies.UI.v1.TextArrangement"]||t&&t["@com.sap.vocabularies.UI.v1.TextArrangement"]);if(o){if(o.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextOnly"){return"Description"}else if(o.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextLast"){return"ValueDescription"}else if(o.$EnumMember==="com.sap.vocabularies.UI.v1.TextArrangementType/TextSeparate"){return"Value"}return"DescriptionValue"}return n?"DescriptionValue":"Value"}function z(e){const t=e.getModel().getMetaModel();return t.getObject(`${t.getMetaPath(e.getPath())}/$Type`)}async function Z(t,n,o){let i=n;const r=t.indexOf("(");if(r>-1){const n=t.slice(r+1,-1);let o=z(i);while(o!==n){i=i.getBinding().getContext();if(i){o=z(i)}else{e.warning("Cannot determine target type to request property value for bound action invocation");return Promise.resolve(undefined)}}}return i.requestObject(o)}async function ee(e,t,n,o){const i=n&&n.indexOf("/")===0?Re(n,e.getModel()):Z(t,e,n);return i.then(function(n){return{vPropertyValue:n,oSelectedContext:e,sAction:t,sDynamicActionEnabledPath:o}})}async function te(t,n){return Promise.all(n).then(function(e){if(e.length){const n=[],o=[];e.forEach(function(e){if(e){if(e.vPropertyValue){t.getModel().setProperty(e.sDynamicActionEnabledPath,true);n.push(e.oSelectedContext)}else{o.push(e.oSelectedContext)}}});ne(t,e[0].sAction,n,o)}return}).catch(function(t){e.trace("Cannot retrieve property value from path",t)})}function ne(e,t,n,o){const i=`${e.getPath()}/dynamicActions/${t}`,r=e.getModel();r.setProperty(`${i}/aApplicable`,n);r.setProperty(`${i}/aNotApplicable`,o)}function oe(e){const t=p.getDataTypeClassName(e);const n=p.getBaseType(t,{},{});return O.getOperatorsForType(n)}function ie(e,t){return e.filter(function(e){return t.indexOf(e)>-1})}function re(e){const t=qe.AllowedExpressionsPrio;e.sort(function(e,n){return t.indexOf(e)-t.indexOf(n)});return e[0]}function se(e,t,n,o,i,r){const s=qe.getFilterRestrictionsByPath(t,n);const c=["EQ"];const l=["EQ","GE","LE","LT","GT","BT","NOTLE","NOTLT","NOTGE","NOTGT"];const u=["EQ","BT"];const p=["TODAY","TOMORROW","YESTERDAY","DATE","FIRSTDAYWEEK","LASTDAYWEEK","FIRSTDAYMONTH","LASTDAYMONTH","FIRSTDAYQUARTER","LASTDAYQUARTER","FIRSTDAYYEAR","LASTDAYYEAR"];const f=["EQ","GE","LE","LT","GT","BT","NE","NOTBT","NOTLE","NOTLT","NOTGE","NOTGT"];const g=["Contains","NotContains","StartsWith","NotStartsWith","EndsWith","NotEndsWith"];const d=a.getSupportedOperations();const m=i==="true"||i===true;let b=[];const O=r&&typeof r==="string"?JSON.parse(r).customData:r;if(n.getObject(`${t}/@com.sap.vocabularies.Common.v1.ResultContext`)===true){return c}if(O&&O.operatorConfiguration&&O.operatorConfiguration.length>0){b=a.getFilterOperations(O.operatorConfiguration,o)}else{b=a.getSemanticDateOperations(o)}let h=oe(o);if(m){h=d.concat(h)}let v=[];if(s&&s.FilterAllowedExpressions&&s.FilterAllowedExpressions[e]){const t=qe.getSpecificAllowedExpression(s.FilterAllowedExpressions[e]);switch(t){case"SingleValue":const e=o==="Edm.Date"&&m?p:c;v=ie(h,e);break;case"MultiValue":v=ie(h,c);break;case"SingleRange":let t;if(m){if(o==="Edm.Date"){t=b}else if(o==="Edm.DateTimeOffset"){t=b}else{t=l}}else if(o==="Edm.DateTimeOffset"){t=u}else{t=l}const n=ie(h,t);v=n;break;case"MultiRange":v=ie(h,f);break;case"SearchExpression":v=ie(h,g);break;case"MultiRangeOrSearchExpression":v=ie(h,g.concat(f));break;default:break}}return v}S.getOperatorsForProperty=se;function ae(){const e=["EQ","NE"];return e.toString()}function ce(e){const t=oe(e);const n=["EQ","GE","LE","LT","GT","BT","NE","NOTBT","NOTLE","NOTLT","NOTGE","NOTGT"];return ie(t,n)}function le(e,t){const n=t.substring(0,t.lastIndexOf("/"));const o=e.getObject(`${n}/@com.sap.vocabularies.Common.v1.ResultContext`);const i={};if(o&&n!==t){i.contextPath=n;i.parameterProperties=qe.getContextPathProperties(e,n)}return i}function ue(e,t,n,o,i){var r;const s=j(i,e);if(i!==null&&i!==void 0&&i.SemanticDates&&n&&n.indexOf(i===null||i===void 0?void 0:(r=i.SemanticDates)===null||r===void 0?void 0:r.operator)>-1){const e=qe.addSemanticDatesToConditions(i===null||i===void 0?void 0:i.SemanticDates);if(e&&Object.keys(e).length>0){o.push(e)}}else if(s){if(t.length===0||t.indexOf(s.operator)>-1){o.push(s)}}return o}function pe(e){const t=[];if(e!==null&&e!==void 0&&e.high){t.push(e===null||e===void 0?void 0:e.high)}if(e!==null&&e!==void 0&&e.low){t.push(e===null||e===void 0?void 0:e.low)}return{values:t,operator:e===null||e===void 0?void 0:e.operator,isEmpty:undefined}}function fe(e,t,n){const o=qe.getAppComponent(n);const i=o.getNavigationService();return i.mixAttributesAndSelectionVariant(t,e.toJSONString())}function ge(e,t,n,o){const i=t.filterConditions;const r=t.filterConditionsWithoutConflict?t.filterConditionsWithoutConflict:{};const s=o!==null&&o!==void 0&&o.propertiesWithoutConflict?o.propertiesWithoutConflict:{};const a=u.getSelectionVariantFromConditions(i,n.getPropertyHelper());for(const t in i){const n=a.getSelectOption(t);if(!e.getSelectOption(t)){if(t==="$editState"){continue}if(n){e.massAddSelectOption(t,n)}}else{if(s&&t in s){e.massAddSelectOption(s[t],n)}if(t in r){e.massAddSelectOption(r[t],n)}}}return e}function de(e){const t=s.isStickySessionSupported(e.getModel().getMetaModel());const n=e.getModel("ui").getProperty("/isEditable");return t&&n}function me(e,t,n){if(t&&e&&e.length){for(let o=0;o<e.length;o++){const i=t.getSelectOption("DisplayCurrency"),r=n&&n.getSelectOption("DisplayCurrency");if(e[o].$PropertyPath==="DisplayCurrency"&&(!i||!i.length)&&r&&r.length){const e=r[0];const n=e["Sign"];const o=e["Option"];const i=e["Low"];const s=e["High"];t.addSelectOption("DisplayCurrency",n,o,i,s)}}}}async function be(e,t,n,o,i,r){const s=e.getComponentData(),a=s&&s.startupParameters||{},c=e.getShellServices();const l=await c.getStartupAppState(e);const u=(l===null||l===void 0?void 0:l.getData())||{},p=u.selectionVariant&&u.selectionVariant.SelectOptions||[];t.forEach(function(e){var t;const s=o?`/${e.$Name}`:(t=e.getPath)===null||t===void 0?void 0:t.call(e).slice(e.getPath().lastIndexOf("/")+1);const c=o?s.slice(1):s;if(r&&i){if(r[c]){n.setProperty(s,r[c])}}else if(a[c]){n.setProperty(s,a[c][0])}else if(p.length>0){for(const e of p){if(e.PropertyName===c){const t=e.Ranges.length?e.Ranges[e.Ranges.length-1]:undefined;if(t&&t.Sign==="I"&&t.Option==="EQ"){n.setProperty(s,t.Low)}}}}})}function Oe(e,t){const n=t,o=n!==undefined?Object.keys(n).filter(function(e){return n[e].useForCreate}):[];let i;for(let t=0;t<o.length;t++){const n=o[t];const r=e&&e[n];if(r&&r.length===1){i=i||Object.create(null);i[n]=r[0]}}return i}function he(e){const t=[];if(e.parameters){const n=Object.keys(e.parameters)||[];if(n.length>0){n.forEach(function(n){const o=e.parameters[n];if(o.value&&o.value.value&&o.value.format==="binding"){const e={LocalProperty:{$PropertyPath:o.value.value},SemanticObjectProperty:n};if(t.length>0){for(let n=0;n<t.length;n++){var i;if(((i=t[n].LocalProperty)===null||i===void 0?void 0:i.$PropertyPath)!==e.LocalProperty.$PropertyPath){t.push(e)}}}else{t.push(e)}}})}}return t}function ve(t,n){const o={};let i;const r=t.controlConfiguration;for(const t in r){if(t.indexOf("@com.sap.vocabularies.UI.v1.DataPoint")>-1||t.indexOf("@com.sap.vocabularies.UI.v1.Chart")>-1){var s,a;const c=(s=r[t].navigation)===null||s===void 0?void 0:(a=s.targetOutbound)===null||a===void 0?void 0:a.outbound;if(c!==undefined){const r=n[c];if(r.semanticObject&&r.action){if(t.indexOf("Chart")>-1){i=A(["fe","MicroChartLink",t])}else{i=A(["fe","HeaderDPLink",t])}const e=qe.getSemanticObjectMapping(r);o[i]={semanticObject:r.semanticObject,action:r.action,semanticObjectMapping:e}}else{e.error(`Cross navigation outbound is configured without semantic object and action for ${c}`)}}}}return o}function Pe(e,t){const n=typeof t==="string"?JSON.parse(t):t;for(let t=0;t<n.length;t++){const o=n[t]["LocalProperty"]&&n[t]["LocalProperty"]["$PropertyPath"]||n[t]["@com.sap.vocabularies.Common.v1.LocalProperty"]&&n[t]["@com.sap.vocabularies.Common.v1.LocalProperty"]["$Path"];const i=n[t]["SemanticObjectProperty"]||n[t]["@com.sap.vocabularies.Common.v1.SemanticObjectProperty"];const r=e.getSelectOption(o);if(r){e.removeSelectOption(o);e.massAddSelectOption(i,r)}}return e}async function ye(e,t,n){return new Promise(function(o){let i,r;if(n===""){i=e.getObject(`${t}@${"com.sap.vocabularies.Common.v1.SemanticObject"}`);r=e.getObject(`${t}@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`)}else{i=e.getObject(`${t}@${"com.sap.vocabularies.Common.v1.SemanticObject"}#${n}`);r=e.getObject(`${t}@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}#${n}`)}const s=[{semanticObject:i}];const a={semanticObject:i};o({semanticObjectPath:t,semanticObjectForGetLinks:s,semanticObject:a,unavailableActions:r})})}async function Se(t,o,i,r){return Promise.all(t).then(function(e){let t,s,a,c=[];let l={};const u=function(e,t){for(const n in t){if(n===e){return true}else{return false}}};for(let n=0;n<e.length;n++){t=e[n];if(t&&t.length>0&&t[0]!==undefined){const e={};let i;let p;for(let l=0;l<t.length;l++){c.push([]);let f=false;let g=false;for(let e=0;e<t[l][0].length;e++){s=t[l][0][e];a=s&&s.intent.split("?")[0].split("-")[1];if(!(s&&s.intent&&s.intent.indexOf(r)===0)){f=true;if(!u(a,o[n].unavailableActions)){c[l].push(s);g=true}}}i={semanticObject:o[n].semanticObject,path:o[n].path,HasTargets:g,HasTargetsNotFiltered:f};if(e[o[n].semanticObject]===undefined){e[o[n].semanticObject]={}}p=o[n].path.replace(/\//g,"_");if(e[o[n].semanticObject][p]===undefined){e[o[n].semanticObject][p]={}}e[o[n].semanticObject][p]=Object.assign(e[o[n].semanticObject][p],i)}const f=Object.keys(e)[0];if(Object.keys(l).includes(f)){l[f]=Object.assign(l[f],e[f])}else{l=Object.assign(l,e)}c=[]}}if(Object.keys(l).length>0){i.setProperty("semanticsTargets",n(l,i.getProperty("semanticsTargets")));return l}return}).catch(function(t){e.error("fnUpdateSemanticTargetsModel: Cannot read links",t)})}async function je(e,t,n,o,i){return qe.getSemanticObjectsFromPath(n,o,i)}function Ce(e,t,n,o,i){let r,s;let a,c;for(let l=0;l<o.length;l++){s=o[l];r=Object.keys(n.getObject(s+"@"));for(let o=0;o<r.length;o++){if(r[o].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObject"}`)===0&&r[o].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectMapping"}`)===-1&&r[o].indexOf(`@${"com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"}`)===-1){c=/#(.*)/.exec(r[o]);a=c?c[1]:"";i.push(qe.getSemanticObjectPromise(e,t,n,s,a))}}}}function Ae(t,n){const o=function(e,t,n){if(!e){return n}if(e instanceof Array){e.forEach(e=>{n=n.concat(o(e,t,[]))});return n}if(e[t]){n.push(e[t])}if(typeof e=="object"&&e!==null){const i=Object.keys(e);if(i.length>0){for(let r=0;r<i.length;r++){n=n.concat(o(e[i[r]],t,[]))}}}return n};const i=function(e,t){return o(e,t,[])};const r=function(e){return e.filter(function(t,n){return e.indexOf(t)===n})};const s=t.getView();const a=s.getBindingContext("internal");if(a){const o=[];const c=t.getOwnerComponent();const l=f.getOwnerComponentFor(c);const u=l.getMetaModel();let p=c.getModel(n).getData();if(JSON.stringify(p)==="{}"){p=c.getModel(n)._getObject("/",undefined)}let g=i(p,"semanticObjectPath");g=r(g);const d=l.getShellServices();let m=d.getHash();const b=[];const O=[];let h;if(m&&m.indexOf("?")!==-1){m=m.split("?")[0]}Ce(l,s,u,g,o);if(o.length===0){return Promise.resolve()}else{Promise.all(o).then(async function(e){const t=[];let n;const o=e.filter(function(e){if(e.semanticObject!==undefined&&e.semanticObject.semanticObject&&typeof e.semanticObject.semanticObject==="object"){n=E(x(e.semanticObject.semanticObject.$Path));e.semanticObject.semanticObject=n;e.semanticObjectForGetLinks[0].semanticObject=n;return true}else if(e){return e.semanticObject!==undefined}else{return false}});for(let e=0;e<o.length;e++){h=o[e];if(h&&h.semanticObject&&!(h.semanticObject.semanticObject.indexOf("{")===0)){b.push(h.semanticObjectForGetLinks);O.push({semanticObject:h.semanticObject.semanticObject,unavailableActions:h.unavailableActions,path:o[e].semanticObjectPath});t.push(d.getLinksWithCache([h.semanticObjectForGetLinks]))}}return qe.updateSemanticTargets(t,O,a,m)}).catch(function(t){e.error("fnGetSemanticTargetsFromTable: Cannot get Semantic Objects",t)})}}else{return Promise.resolve()}}function xe(e){const t={};if(e&&e.FilterExpressionRestrictions!==undefined){e.FilterExpressionRestrictions.forEach(function(e){if(e.Property&&e.AllowedExpressions!==undefined){if(t[e.Property.$PropertyPath]!==undefined){t[e.Property.$PropertyPath].push(e.AllowedExpressions)}else{t[e.Property.$PropertyPath]=[e.AllowedExpressions]}}})}return t}function Ee(e,t){let n=[];if(e&&e[t]){n=e[t].map(function(e){return e.$PropertyPath})}return n}function Te(e,t,n){const o=t+"/";return e.reduce((e,t)=>{if(t.startsWith(o)){const n=t.replace(o,"");if(e.indexOf(n)===-1){e.push(n)}}return e},n)}function $e(e,o){const i={RequiredProperties:[],NonFilterableProperties:[],FilterAllowedExpressions:{}};let r;const a="$NavigationPropertyBinding";const c="@Org.OData.Capabilities.V1.FilterRestrictions";const l=e.replaceAll("%2F","/").split("/").filter(s.filterOutNavPropBinding);const u=`/${l.join("/")}/`;const p=s.getEntitySetPath(e,o);const f=p.split("/").filter(s.filterOutNavPropBinding);const g=o.getObject(`${u}$ContainsTarget`);const d=!!g&&l[l.length-1];if(!g){r=o.getObject(`${p}${c}`);i.RequiredProperties=Ee(r,"RequiredProperties")||[];const e=o.getObject(`${u}@com.sap.vocabularies.Common.v1.ResultContext`);if(!e){i.NonFilterableProperties=Ee(r,"NonFilterableProperties")||[]}i.FilterAllowedExpressions=xe(r)||{}}if(l.length>1){const e=g?d:f[f.length-1];const r=g?p:`/${f.slice(0,-1).join(`/${a}/`)}`;const s={RequiredProperties:[],NonFilterableProperties:[],FilterAllowedExpressions:{}};if(!e.includes("%2F")){const t=o.getObject(`${r}${c}`);i.RequiredProperties=Te(Ee(t,"RequiredProperties")||[],e,i.RequiredProperties||[]);i.NonFilterableProperties=Te(Ee(t,"NonFilterableProperties")||[],e,i.NonFilterableProperties||[]);const n=xe(t)||{};s.FilterAllowedExpressions=Object.keys(n).reduce((t,o)=>{if(o.startsWith(e+"/")){const i=o.replace(e+"/","");t[i]=n[o]}return t},{})}i.FilterAllowedExpressions=n({},i.FilterAllowedExpressions||{},s.FilterAllowedExpressions||{});const u=P.getNavigationRestrictions(o,r,e.replaceAll("%2F","/"));const m=u&&u["FilterRestrictions"];const b=Ee(m,"RequiredProperties")||[];i.RequiredProperties=t(i.RequiredProperties.concat(b));const O=Ee(m,"NonFilterableProperties")||[];i.NonFilterableProperties=t(i.NonFilterableProperties.concat(O));i.FilterAllowedExpressions=n({},i.FilterAllowedExpressions||{},xe(m)||{});const h=o.getObject(`/${l.join("/")}${c}`);const v=Ee(h,"RequiredProperties")||[];i.RequiredProperties=t(i.RequiredProperties.concat(v));const y=Ee(h,"NonFilterableProperties")||[];i.NonFilterableProperties=t(i.NonFilterableProperties.concat(y));i.FilterAllowedExpressions=n({},i.FilterAllowedExpressions,xe(h)||{})}return i}async function Fe(e,t,n,o){n=n||{};if(o){return o.templateControlFragment(e,t,n.view).then(function(e){return o.targets==="xmlTree"&&e.length>0?e[0]:e})}else{const o=await d.process(m.loadTemplate(e,"fragment"),{name:e},t);const i=o.firstElementChild;if(!!n.isXML&&i){return i}return g.load({id:n.id,definition:o,controller:n.controller})}}function Me(e,t){const n=e.split("/").filter(Boolean),o=n.pop(),i=n.join("/"),r=i&&t.getObject(`/${i}`);if((r===null||r===void 0?void 0:r.$kind)==="Singleton"){const e=n[n.length-1];return`/${e}/${o}`}return undefined}async function Re(e,t){if(!e||!t){return Promise.resolve(null)}const n=t.getMetaModel();const o=Me(e,n);if(o){const e=t.bindProperty(o);return e.requestValue()}return Promise.resolve(null)}function Ne(e,t){let n;if(e.indexOf("@$ui5.overload")>-1){n=e.split("@$ui5.overload")[0]}else{const t=e.split("/0")[0].split(".");n=`/${t[t.length-1]}/`}return n+t}function we(e,t){const n=new v({anyText:e});t.addDependent(n);const o=n.getAnyText();t.removeDependent(n);n.destroy();return o}function De(){return!C.desktop||b.resize.width<=320}function Le(e,t,n){const o=e.data("entityType"),i=qe.getAppComponent(e).getMetaModel(),r={},s=[],a=[];let c="";let l=i.getObject(`${o}${t}`);if(n){l=l.SelectionVariant}if(l){c=l.Text;(l.SelectOptions||[]).filter(function(e){return e&&e.PropertyName&&e.PropertyName.$PropertyPath}).forEach(function(e){const t=e.PropertyName.$PropertyPath;if(!a.includes(t)){a.push(t)}for(const i in e.Ranges){var n,o;const s=e.Ranges[i];r[t]=(r[t]||[]).concat(new h(t,(n=s.Option)===null||n===void 0?void 0:(o=n.$EnumMember)===null||o===void 0?void 0:o.split("/").pop(),s.Low,s.High))}});for(const e in r){s.push(new h({filters:r[e],and:false}))}}return{properties:a,filters:s,text:c}}function ke(e,t,i,r){const s=t.createBindingContext(e);return o===null||o===void 0?void 0:o.createConverterContextForMacro(i,s||t,r,n,undefined)}function Be(e,t){return e.replace("_fe_"+t+"_","")}function Ie(e){e.forEach(e=>{if(e.sPath&&e.sPath.includes("fe_groupable")){e.sPath=qe.getInternalChartNameFromPropertyNameAndKind(e.sPath,"groupable")}});return e}async function Ve(e,t,n){const o=t.getBindingContext();if(o){const a=e===T.Draft?s.getDraftRootPath(o):s.getStickyRootPath(o);let c;if(a){var i,r;const e=(i=n.getRootViewController().getInstancedViews().find(e=>{var t;return((t=e.getBindingContext())===null||t===void 0?void 0:t.getPath())===a}))===null||i===void 0?void 0:i.getBindingContext();if(e){return e}const s=t.getModel("internal");c=s.getProperty("/simpleRootContext");if(((r=c)===null||r===void 0?void 0:r.getPath())===a){return c}const l=o.getModel();c=l.bindContext(a).getBoundContext();await qe.waitForContextRequested(c);s.setProperty("/simpleRootContext",c);return c}}}const qe={fireButtonPress:V,getTargetView:G,getCurrentPageView:U,hasTransientContext:M,updateRelatedAppsDetails:I,getAppComponent:q,getMandatoryFilterFields:Y,getContextPathProperties:W,getParameterInfo:le,updateDataFieldForIBNButtonsVisibility:Q,getEntitySetName:J,getActionPath:K,computeDisplayMode:X,isStickyEditMode:de,getOperatorsForProperty:se,getOperatorsForDateProperty:ce,getOperatorsForGuidProperty:ae,addExternalStateFiltersToSelectionVariant:ge,addPageContextToSelectionVariant:fe,addDefaultDisplayCurrency:me,setUserDefaults:be,getIBNActions:_,getHeaderFacetItemConfigForExternalNavigation:ve,getSemanticObjectMapping:he,setSemanticObjectMappings:Pe,getSemanticObjectPromise:je,getSemanticTargetsFromPageModel:Ae,getSemanticObjectsFromPath:ye,updateSemanticTargets:Se,waitForContextRequested:F,getFilterRestrictionsByPath:$e,getSpecificAllowedExpression:re,getAdditionalParamsForCreate:Oe,requestSingletonProperty:Re,templateControlFragment:Fe,FilterRestrictions:{REQUIRED_PROPERTIES:"RequiredProperties",NON_FILTERABLE_PROPERTIES:"NonFilterableProperties",ALLOWED_EXPRESSIONS:"FilterAllowedExpressions"},AllowedExpressionsPrio:["SingleValue","MultiValue","SingleRange","MultiRange","SearchExpression","MultiRangeOrSearchExpression"],normalizeSearchTerm:$,setContextsBasedOnOperationAvailable:te,setDynamicActionContexts:ne,requestProperty:ee,getParameterPath:Ne,getRelatedAppsMenuItems:w,getTranslatedTextFromExpBindingString:we,addSemanticDatesToConditions:pe,addSelectOptionToConditions:ue,updateRelateAppsModel:k,getSemanticObjectAnnotations:B,getFiltersInfoForSV:Le,getInternalChartNameFromPropertyNameAndKind:Be,getChartPropertiesWithoutPrefixes:Ie,createRootContext:Ve,isSmallDevice:De,getConverterContextForPath:ke};return qe},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ExtensionAPI-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/ui/base/Object", "sap/ui/core/Component", "sap/ui/model/json/JSONModel", "./helpers/ClassSupport"], function (Log, CommonUtils, BaseObject, Component, JSONModel, ClassSupport) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Common Extension API for all pages of SAP Fiori elements for OData V4.
   *
   * To correctly integrate your app extension coding with SAP Fiori elements, use only the extensionAPI of SAP Fiori elements. Don't access or manipulate controls, properties, models, or other internal objects created by the SAP Fiori elements framework.
   *
   * @alias sap.fe.core.ExtensionAPI
   * @public
   * @hideconstructor
   * @extends sap.ui.base.Object
   * @since 1.79.0
   */
  let ExtensionAPI = (_dec = defineUI5Class("sap.fe.core.ExtensionAPI"), _dec2 = property({
    type: "sap/fe/core/controllerextensions/EditFlow"
  }), _dec3 = property({
    type: "sap/fe/core/controllerextensions/Routing"
  }), _dec4 = property({
    type: "sap/fe/core/controllerextensions/IntentBasedNavigation"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseObject) {
    _inheritsLoose(ExtensionAPI, _BaseObject);
    /**
     * A controller extension offering hooks into the edit flow of the application.
     *
     * @public
     */

    /**
     * A controller extension offering hooks into the routing flow of the application.
     *
     * @public
     */

    /**
     * ExtensionAPI for intent-based navigation
     *
     * @public
     */

    function ExtensionAPI(oController, sId) {
      var _this;
      _this = _BaseObject.call(this) || this;
      _initializerDefineProperty(_this, "editFlow", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "routing", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "intentBasedNavigation", _descriptor3, _assertThisInitialized(_this));
      _this._controller = oController;
      _this._view = oController.getView();
      _this.extension = _this._controller.extension;
      _this.editFlow = _this._controller.editFlow;
      _this.routing = _this._controller.routing;
      _this._routing = _this._controller._routing;
      _this.intentBasedNavigation = _this._controller.intentBasedNavigation;
      _this._prefix = sId;
      return _this;
    }
    var _proto = ExtensionAPI.prototype;
    _proto.destroy = function destroy() {
      // delete this._controller;
      // delete this._view;
      // delete this.editFlow._controller;
      // delete this.intentBasedNavigation._controller;
    }

    /**
     * Retrieves the editFlow controller extension for this page.
     *
     * @public
     * @returns The editFlow controller extension
     */;
    _proto.getEditFlow = function getEditFlow() {
      return this.editFlow;
    }

    /**
     * Retrieves the routing controller extension for this page.
     *
     * @public
     * @returns The routing controller extension
     */;
    _proto.getRouting = function getRouting() {
      return this.routing;
    }

    /**
     * Retrieves the intentBasedNavigation controller extension for this page.
     *
     * @public
     * @returns The intentBasedNavigation controller extension
     */;
    _proto.getIntentBasedNavigation = function getIntentBasedNavigation() {
      return this.intentBasedNavigation;
    }

    /**
     * Access any control by ID.
     *
     * @alias sap.fe.core.ExtensionAPI#byId
     * @param sId ID of the control without the view prefix. Either the ID prefixed by SAP Fiori elements
     * (for example with the section) or the control ID only. The latter works only for an extension running in
     * the same context (like in the same section). You can use the prefix for SAP Fiori elements to also access other controls located in different sections.
     * @returns The requested control, if found in the view.
     * @private
     */;
    _proto.byId = function byId(sId) {
      let oControl = this._view.byId(sId);
      if (!oControl && this._prefix) {
        // give it a try with the prefix
        oControl = this._view.byId(`${this._prefix}--${sId}`);
      }
      return oControl;
    }

    /**
     * Get access to models managed by SAP Fiori elements.<br>
     * The following models can be accessed:
     * <ul>
     * <li>undefined: the undefined model returns the SAPUI5 OData V4 model bound to this page</li>
     * <li>i18n / further data models defined in the manifest</li>
     * <li>ui: returns a SAPUI5 JSON model containing UI information.
     * Only the following properties are public and supported:
     * 	<ul>
     *     <li>isEditable: set to true if the application is in edit mode</li>
     *  </ul>
     * </li>
     * </ul>.
     * editMode is deprecated and should not be used anymore. Use isEditable instead.
     *
     * @alias sap.fe.core.ExtensionAPI#getModel
     * @param sModelName Name of the model
     * @returns The required model
     * @public
     */;
    _proto.getModel = function getModel(sModelName) {
      let oAppComponent;
      if (sModelName && sModelName !== "ui") {
        oAppComponent = CommonUtils.getAppComponent(this._view);
        if (!oAppComponent.getManifestEntry("sap.ui5").models[sModelName]) {
          // don't allow access to our internal models
          return undefined;
        }
      }
      return this._view.getModel(sModelName);
    }

    /**
     * Add any control as a dependent control to this SAP Fiori elements page.
     *
     * @alias sap.fe.core.ExtensionAPI#addDependent
     * @param oControl Control to be added as a dependent control
     * @public
     */;
    _proto.addDependent = function addDependent(oControl) {
      this._view.addDependent(oControl);
    }

    /**
     * Remove a dependent control from this SAP Fiori elements page.
     *
     * @alias sap.fe.core.ExtensionAPI#removeDependent
     * @param oControl Control to be added as a dependent control
     * @public
     */;
    _proto.removeDependent = function removeDependent(oControl) {
      this._view.removeDependent(oControl);
    }

    /**
     * Navigate to another target.
     *
     * @alias sap.fe.core.ExtensionAPI#navigateToTarget
     * @param sTarget Name of the target route
     * @param [oContext] Context instance
     * @public
     */;
    _proto.navigateToTarget = function navigateToTarget(sTarget, oContext) {
      this._controller._routing.navigateToTarget(oContext, sTarget);
    }

    /**
     * Load a fragment and go through the template preprocessor with the current page context.
     *
     * @alias sap.fe.core.ExtensionAPI#loadFragment
     * @param mSettings The settings object
     * @param mSettings.id The ID of the fragment itself
     * @param mSettings.name The name of the fragment to be loaded
     * @param mSettings.controller The controller to be attached to the fragment
     * @param mSettings.contextPath The contextPath to be used for the templating process
     * @param mSettings.initialBindingContext The initial binding context
     * @returns The fragment definition
     * @public
     */;
    _proto.loadFragment = async function loadFragment(mSettings) {
      var _this$getModel;
      const oTemplateComponent = Component.getOwnerComponentFor(this._view);
      const oPageModel = this._view.getModel("_pageModel");
      const oMetaModel = (_this$getModel = this.getModel()) === null || _this$getModel === void 0 ? void 0 : _this$getModel.getMetaModel();
      const mViewData = oTemplateComponent.getViewData();
      const targetContextPath = oTemplateComponent.getEntitySet() ? `/${oTemplateComponent.getEntitySet()}` : oTemplateComponent.getContextPath();
      const oViewDataModel = new JSONModel(mViewData),
        oPreprocessorSettings = {
          bindingContexts: {
            contextPath: oMetaModel === null || oMetaModel === void 0 ? void 0 : oMetaModel.createBindingContext(mSettings.contextPath || targetContextPath),
            converterContext: oPageModel.createBindingContext("/", undefined, {
              noResolve: true
            }),
            viewData: mViewData ? oViewDataModel.createBindingContext("/") : null
          },
          models: {
            contextPath: oMetaModel,
            converterContext: oPageModel,
            metaModel: oMetaModel,
            viewData: oViewDataModel
          },
          appComponent: CommonUtils.getAppComponent(this._view)
        };
      const oTemplatePromise = CommonUtils.templateControlFragment(mSettings.name, oPreprocessorSettings, {
        controller: mSettings.controller || this,
        isXML: false,
        id: mSettings.id
      });
      oTemplatePromise.then(oFragment => {
        if (mSettings.initialBindingContext !== undefined) {
          oFragment.setBindingContext(mSettings.initialBindingContext);
        }
        this.addDependent(oFragment);
        return oFragment;
      }).catch(function (oError) {
        Log.error(oError);
      });
      return oTemplatePromise;
    }

    /**
     * Triggers an update of the app state.
     * Should be called if the state of a control, or any other state-relevant information, was changed.
     *
     * @alias sap.fe.core.ExtensionAPI#updateAppState
     * @returns A promise that resolves with the new app state object.
     * @public
     */;
    _proto.updateAppState = async function updateAppState() {
      return this._controller.getAppComponent().getAppStateHandler().createAppState();
    };
    return ExtensionAPI;
  }(BaseObject), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "editFlow", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "routing", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "intentBasedNavigation", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return ExtensionAPI;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ExtensionAPI", ["sap/base/Log","sap/fe/core/CommonUtils","sap/ui/base/Object","sap/ui/core/Component","sap/ui/model/json/JSONModel","./helpers/ClassSupport"],function(e,t,n,i,o,r){"use strict";var a,l,u,s,c,d,p,f,g;var v=r.property;var b=r.defineUI5Class;function h(e,t,n,i){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(i):void 0})}function w(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function _(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;m(e,t)}function m(e,t){m=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return m(e,t)}function y(e,t,n,i,o){var r={};Object.keys(i).forEach(function(e){r[e]=i[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=n.slice().reverse().reduce(function(n,i){return i(e,t,n)||n},r);if(o&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(o):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function x(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let C=(a=b("sap.fe.core.ExtensionAPI"),l=v({type:"sap/fe/core/controllerextensions/EditFlow"}),u=v({type:"sap/fe/core/controllerextensions/Routing"}),s=v({type:"sap/fe/core/controllerextensions/IntentBasedNavigation"}),a(c=(d=function(n){_(r,n);function r(e,t){var i;i=n.call(this)||this;h(i,"editFlow",p,w(i));h(i,"routing",f,w(i));h(i,"intentBasedNavigation",g,w(i));i._controller=e;i._view=e.getView();i.extension=i._controller.extension;i.editFlow=i._controller.editFlow;i.routing=i._controller.routing;i._routing=i._controller._routing;i.intentBasedNavigation=i._controller.intentBasedNavigation;i._prefix=t;return i}var a=r.prototype;a.destroy=function e(){};a.getEditFlow=function e(){return this.editFlow};a.getRouting=function e(){return this.routing};a.getIntentBasedNavigation=function e(){return this.intentBasedNavigation};a.byId=function e(t){let n=this._view.byId(t);if(!n&&this._prefix){n=this._view.byId(`${this._prefix}--${t}`)}return n};a.getModel=function e(n){let i;if(n&&n!=="ui"){i=t.getAppComponent(this._view);if(!i.getManifestEntry("sap.ui5").models[n]){return undefined}}return this._view.getModel(n)};a.addDependent=function e(t){this._view.addDependent(t)};a.removeDependent=function e(t){this._view.removeDependent(t)};a.navigateToTarget=function e(t,n){this._controller._routing.navigateToTarget(n,t)};a.loadFragment=async function n(r){var a;const l=i.getOwnerComponentFor(this._view);const u=this._view.getModel("_pageModel");const s=(a=this.getModel())===null||a===void 0?void 0:a.getMetaModel();const c=l.getViewData();const d=l.getEntitySet()?`/${l.getEntitySet()}`:l.getContextPath();const p=new o(c),f={bindingContexts:{contextPath:s===null||s===void 0?void 0:s.createBindingContext(r.contextPath||d),converterContext:u.createBindingContext("/",undefined,{noResolve:true}),viewData:c?p.createBindingContext("/"):null},models:{contextPath:s,converterContext:u,metaModel:s,viewData:p},appComponent:t.getAppComponent(this._view)};const g=t.templateControlFragment(r.name,f,{controller:r.controller||this,isXML:false,id:r.id});g.then(e=>{if(r.initialBindingContext!==undefined){e.setBindingContext(r.initialBindingContext)}this.addDependent(e);return e}).catch(function(t){e.error(t)});return g};a.updateAppState=async function e(){return this._controller.getAppComponent().getAppStateHandler().createAppState()};return r}(n),p=y(d.prototype,"editFlow",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),f=y(d.prototype,"routing",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),g=y(d.prototype,"intentBasedNavigation",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),d))||c);return C},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/PageController-dbg", ["sap/fe/core/BaseController", "sap/fe/core/controllerextensions/EditFlow", "sap/fe/core/controllerextensions/IntentBasedNavigation", "sap/fe/core/controllerextensions/InternalIntentBasedNavigation", "sap/fe/core/controllerextensions/InternalRouting", "sap/fe/core/controllerextensions/MassEdit", "sap/fe/core/controllerextensions/MessageHandler", "sap/fe/core/controllerextensions/PageReady", "sap/fe/core/controllerextensions/Paginator", "sap/fe/core/controllerextensions/Placeholder", "sap/fe/core/controllerextensions/Routing", "sap/fe/core/controllerextensions/Share", "sap/fe/core/controllerextensions/SideEffects", "sap/fe/core/controllerextensions/ViewState", "sap/fe/core/ExtensionAPI", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/Component", "sap/ui/core/mvc/OverrideExecution"], function (BaseController, EditFlow, IntentBasedNavigation, InternalIntentBasedNavigation, InternalRouting, MassEdit, MessageHandler, PageReady, Paginator, Placeholder, Routing, Share, SideEffects, ViewState, ExtensionAPI, ClassSupport, Component, OverrideExecution) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13;
  var usingExtension = ClassSupport.usingExtension;
  var publicExtension = ClassSupport.publicExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Base controller class for your custom page used inside an SAP Fiori elements application.
   *
   * This controller provides preconfigured extensions that will ensure you have the basic functionalities required to use the building blocks.
   *
   * @hideconstructor
   * @public
   * @since 1.88.0
   */
  let PageController = (_dec = defineUI5Class("sap.fe.core.PageController"), _dec2 = usingExtension(Routing), _dec3 = usingExtension(InternalRouting), _dec4 = usingExtension(EditFlow), _dec5 = usingExtension(IntentBasedNavigation), _dec6 = usingExtension(InternalIntentBasedNavigation), _dec7 = usingExtension(PageReady), _dec8 = usingExtension(MessageHandler), _dec9 = usingExtension(Share), _dec10 = usingExtension(Paginator), _dec11 = usingExtension(ViewState), _dec12 = usingExtension(Placeholder), _dec13 = usingExtension(SideEffects), _dec14 = usingExtension(MassEdit), _dec15 = publicExtension(), _dec16 = publicExtension(), _dec17 = publicExtension(), _dec18 = publicExtension(), _dec19 = extensible(OverrideExecution.After), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseController) {
    _inheritsLoose(PageController, _BaseController);
    function PageController() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseController.call(this, ...args) || this;
      _initializerDefineProperty(_this, "routing", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_routing", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "editFlow", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "intentBasedNavigation", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_intentBasedNavigation", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "pageReady", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "messageHandler", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "share", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "paginator", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "viewState", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "placeholder", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_sideEffects", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "massEdit", _descriptor13, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = PageController.prototype;
    /**
     * @private
     * @name sap.fe.core.PageController.getMetadata
     * @function
     */
    /**
     * @private
     * @name sap.fe.core.PageController.extend
     * @function
     */
    _proto.onInit = function onInit() {
      const oUIModel = this.getAppComponent().getModel("ui"),
        oInternalModel = this.getAppComponent().getModel("internal"),
        sPath = `/pages/${this.getView().getId()}`;
      oUIModel.setProperty(sPath, {
        controls: {}
      });
      oInternalModel.setProperty(sPath, {
        controls: {},
        collaboration: {}
      });
      this.getView().bindElement({
        path: sPath,
        model: "ui"
      });
      this.getView().bindElement({
        path: sPath,
        model: "internal"
      });

      // for the time being provide it also pageInternal as some macros access it - to be removed
      this.getView().bindElement({
        path: sPath,
        model: "pageInternal"
      });
      this.getView().setModel(oInternalModel, "pageInternal");

      // as the model propagation happens after init but we actually want to access the binding context in the
      // init phase already setting the model here
      this.getView().setModel(oUIModel, "ui");
      this.getView().setModel(oInternalModel, "internal");
    };
    _proto.onBeforeRendering = function onBeforeRendering() {
      if (this.placeholder.attachHideCallback) {
        this.placeholder.attachHideCallback();
      }
    }

    /**
     * Get the extension API for the current page.
     *
     * @public
     * @returns The extension API.
     */;
    _proto.getExtensionAPI = function getExtensionAPI() {
      if (!this.extensionAPI) {
        this.extensionAPI = new ExtensionAPI(this);
      }
      return this.extensionAPI;
    }

    // We specify the extensibility here the same way as it is done in the object page controller
    // since the specification here overrides it and if we do not specify anything here, the
    // behavior defaults to an execute instead!
    // TODO This may not be ideal, since it also influences the list report controller but currently it's the best solution.
    ;
    _proto.onPageReady = function onPageReady(_mParameters) {
      // Apply app state only after the page is ready with the first section selected
      this.getAppComponent().getAppStateHandler().applyAppState();
    };
    _proto._getPageTitleInformation = function _getPageTitleInformation() {
      return {};
    };
    _proto._getPageModel = function _getPageModel() {
      const pageComponent = Component.getOwnerComponentFor(this.getView());
      return pageComponent === null || pageComponent === void 0 ? void 0 : pageComponent.getModel("_pageModel");
    };
    return PageController;
  }(BaseController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "routing", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "_routing", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "editFlow", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "intentBasedNavigation", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "_intentBasedNavigation", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "pageReady", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "messageHandler", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "share", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "paginator", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "viewState", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "placeholder", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "_sideEffects", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "massEdit", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeRendering", [_dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeRendering"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getExtensionAPI", [_dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "getExtensionAPI"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onPageReady", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "onPageReady"), _class2.prototype)), _class2)) || _class);
  return PageController;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/PageController", ["sap/fe/core/BaseController","sap/fe/core/controllerextensions/EditFlow","sap/fe/core/controllerextensions/IntentBasedNavigation","sap/fe/core/controllerextensions/InternalIntentBasedNavigation","sap/fe/core/controllerextensions/InternalRouting","sap/fe/core/controllerextensions/MassEdit","sap/fe/core/controllerextensions/MessageHandler","sap/fe/core/controllerextensions/PageReady","sap/fe/core/controllerextensions/Paginator","sap/fe/core/controllerextensions/Placeholder","sap/fe/core/controllerextensions/Routing","sap/fe/core/controllerextensions/Share","sap/fe/core/controllerextensions/SideEffects","sap/fe/core/controllerextensions/ViewState","sap/fe/core/ExtensionAPI","sap/fe/core/helpers/ClassSupport","sap/ui/core/Component","sap/ui/core/mvc/OverrideExecution"],function(e,t,r,n,i,o,a,l,s,u,p,c,f,g,b,d,y,h){"use strict";var w,m,v,P,x,z,E,I,O,A,_,R,C,j,B,M,V,S,H,N,D,F,k,T,U,$,q,G,J,K,L,Q,W,X;var Y=d.usingExtension;var Z=d.publicExtension;var ee=d.extensible;var te=d.defineUI5Class;function re(e,t,r,n){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function ne(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function ie(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;oe(e,t)}function oe(e,t){oe=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return oe(e,t)}function ae(e,t,r,n,i){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},o);if(i&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(i):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function le(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let se=(w=te("sap.fe.core.PageController"),m=Y(p),v=Y(i),P=Y(t),x=Y(r),z=Y(n),E=Y(l),I=Y(a),O=Y(c),A=Y(s),_=Y(g),R=Y(u),C=Y(f),j=Y(o),B=Z(),M=Z(),V=Z(),S=Z(),H=ee(h.After),w(N=(D=function(e){ie(t,e);function t(){var t;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++){n[i]=arguments[i]}t=e.call(this,...n)||this;re(t,"routing",F,ne(t));re(t,"_routing",k,ne(t));re(t,"editFlow",T,ne(t));re(t,"intentBasedNavigation",U,ne(t));re(t,"_intentBasedNavigation",$,ne(t));re(t,"pageReady",q,ne(t));re(t,"messageHandler",G,ne(t));re(t,"share",J,ne(t));re(t,"paginator",K,ne(t));re(t,"viewState",L,ne(t));re(t,"placeholder",Q,ne(t));re(t,"_sideEffects",W,ne(t));re(t,"massEdit",X,ne(t));return t}var r=t.prototype;r.onInit=function e(){const t=this.getAppComponent().getModel("ui"),r=this.getAppComponent().getModel("internal"),n=`/pages/${this.getView().getId()}`;t.setProperty(n,{controls:{}});r.setProperty(n,{controls:{},collaboration:{}});this.getView().bindElement({path:n,model:"ui"});this.getView().bindElement({path:n,model:"internal"});this.getView().bindElement({path:n,model:"pageInternal"});this.getView().setModel(r,"pageInternal");this.getView().setModel(t,"ui");this.getView().setModel(r,"internal")};r.onBeforeRendering=function e(){if(this.placeholder.attachHideCallback){this.placeholder.attachHideCallback()}};r.getExtensionAPI=function e(){if(!this.extensionAPI){this.extensionAPI=new b(this)}return this.extensionAPI};r.onPageReady=function e(t){this.getAppComponent().getAppStateHandler().applyAppState()};r._getPageTitleInformation=function e(){return{}};r._getPageModel=function e(){const t=y.getOwnerComponentFor(this.getView());return t===null||t===void 0?void 0:t.getModel("_pageModel")};return t}(e),F=ae(D.prototype,"routing",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),k=ae(D.prototype,"_routing",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),T=ae(D.prototype,"editFlow",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),U=ae(D.prototype,"intentBasedNavigation",[x],{configurable:true,enumerable:true,writable:true,initializer:null}),$=ae(D.prototype,"_intentBasedNavigation",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),q=ae(D.prototype,"pageReady",[E],{configurable:true,enumerable:true,writable:true,initializer:null}),G=ae(D.prototype,"messageHandler",[I],{configurable:true,enumerable:true,writable:true,initializer:null}),J=ae(D.prototype,"share",[O],{configurable:true,enumerable:true,writable:true,initializer:null}),K=ae(D.prototype,"paginator",[A],{configurable:true,enumerable:true,writable:true,initializer:null}),L=ae(D.prototype,"viewState",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),Q=ae(D.prototype,"placeholder",[R],{configurable:true,enumerable:true,writable:true,initializer:null}),W=ae(D.prototype,"_sideEffects",[C],{configurable:true,enumerable:true,writable:true,initializer:null}),X=ae(D.prototype,"massEdit",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),ae(D.prototype,"onInit",[B],Object.getOwnPropertyDescriptor(D.prototype,"onInit"),D.prototype),ae(D.prototype,"onBeforeRendering",[M],Object.getOwnPropertyDescriptor(D.prototype,"onBeforeRendering"),D.prototype),ae(D.prototype,"getExtensionAPI",[V],Object.getOwnPropertyDescriptor(D.prototype,"getExtensionAPI"),D.prototype),ae(D.prototype,"onPageReady",[S,H],Object.getOwnPropertyDescriptor(D.prototype,"onPageReady"),D.prototype),D))||N);return se},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ResourceModel-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/model/resource/ResourceModel"], function (ClassSupport, UI5ResourceModel) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let ResourceModel = (_dec = defineUI5Class("sap.fe.core.ResourceModel"), _dec(_class = /*#__PURE__*/function (_UI5ResourceModel) {
    _inheritsLoose(ResourceModel, _UI5ResourceModel);
    function ResourceModel() {
      return _UI5ResourceModel.apply(this, arguments) || this;
    }
    var _proto = ResourceModel.prototype;
    /**
     * Returns text for a given resource key.
     *
     * @param textID ID of the Text
     * @param parameters Array of parameters that are used to create the text
     * @param metaPath Entity set name or action name to overload a text
     * @returns Determined text
     */
    _proto.getText = function getText(textID, parameters, metaPath) {
      let resourceKey = textID;
      const resourceBundle = this._oResourceBundle;
      if (metaPath) {
        const resourceKeyExists = this.checkIfResourceKeyExists(`${resourceKey}|${metaPath}`);

        // if resource key with metapath (i.e. entity set name) for instance specific text overriding is provided by the application
        // then use the same key otherwise use the Framework key
        resourceKey = resourceKeyExists ? `${resourceKey}|${metaPath}` : resourceKey;
      }
      return (resourceBundle === null || resourceBundle === void 0 ? void 0 : resourceBundle.getText(resourceKey, parameters, true)) || textID;
    }

    /**
     * Check if a text exists for a given resource key.
     *
     * @param textID ID of the Text
     * @returns True in case the text exists
     */;
    _proto.checkIfResourceKeyExists = function checkIfResourceKeyExists(textID) {
      // There are console errors logged when making calls to getText for keys that are not defined in the resource bundle
      // for instance keys which are supposed to be provided by the application, e.g, <key>|<entitySet> to override instance specific text
      // hence check if text exists (using "hasText") in the resource bundle before calling "getText"

      // "hasText" only checks for the key in the immediate resource bundle and not it's custom bundles
      // hence we need to do this recurrsively to check if the key exists in any of the bundles the forms the FE resource bundle
      return this._checkIfResourceKeyExists(textID, this._oResourceBundle.aCustomBundles);
    };
    _proto._checkIfResourceKeyExists = function _checkIfResourceKeyExists(textID, bundles) {
      if (bundles !== null && bundles !== void 0 && bundles.length) {
        for (let i = bundles.length - 1; i >= 0; i--) {
          const sValue = bundles[i].hasText(textID);
          // text found return true
          if (sValue) {
            return true;
          }
          this._checkIfResourceKeyExists(textID, bundles[i].aCustomBundles);
        }
      }
      return false;
    };
    return ResourceModel;
  }(UI5ResourceModel)) || _class);
  return ResourceModel;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/ResourceModel", ["sap/fe/core/helpers/ClassSupport","sap/ui/model/resource/ResourceModel"],function(e,t){"use strict";var o,s;var r=e.defineUI5Class;function u(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;n(e,t)}function n(e,t){n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return n(e,t)}let c=(o=r("sap.fe.core.ResourceModel"),o(s=function(e){u(t,e);function t(){return e.apply(this,arguments)||this}var o=t.prototype;o.getText=function e(t,o,s){let r=t;const u=this._oResourceBundle;if(s){const e=this.checkIfResourceKeyExists(`${r}|${s}`);r=e?`${r}|${s}`:r}return(u===null||u===void 0?void 0:u.getText(r,o,true))||t};o.checkIfResourceKeyExists=function e(t){return this._checkIfResourceKeyExists(t,this._oResourceBundle.aCustomBundles)};o._checkIfResourceKeyExists=function e(t,o){if(o!==null&&o!==void 0&&o.length){for(let e=o.length-1;e>=0;e--){const s=o[e].hasText(t);if(s){return true}this._checkIfResourceKeyExists(t,o[e].aCustomBundles)}}return false};return t}(t))||s);return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/StateFilterToSelectionVariant-dbg", ["sap/base/Log", "sap/base/util/isEmptyObject", "sap/fe/core/helpers/SemanticDateOperators", "sap/fe/core/type/TypeUtil", "sap/fe/navigation/SelectionVariant", "sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/mdc/condition/RangeOperator"], function (Log, isEmptyObject, SemanticDateOperators, TypeUtil, SelectionVariant, FilterOperatorUtil, RangeOperator) {
  "use strict";

  const StateFilterToSelectionVariant = {
    /**
     * Get selection variant based on the filter conditions.
     *
     * @param filterConditions Configure filter bar control
     * @param propertyHelper PropertyHelper and filter delegate controller of filterbar
     * @param params Parameters of parametrized services
     * @returns The filter conditions are converted to selection varaint and returned
     */
    getSelectionVariantFromConditions: function (filterConditions, propertyHelper, params) {
      const selectionVariant = new SelectionVariant();
      if (!isEmptyObject(filterConditions)) {
        for (const filterKey in filterConditions) {
          const filterFieldCondition = filterConditions[filterKey];
          if (filterFieldCondition !== null && filterFieldCondition !== void 0 && filterFieldCondition.length) {
            const selectOptions = StateFilterToSelectionVariant.getSelectionOptionsFromCondition(filterFieldCondition, filterKey, propertyHelper);
            if (selectOptions.length) {
              // get parameters from filterbar
              if (params !== null && params !== void 0 && params.includes(filterKey)) {
                // trying to generate properties like $Parameter.CompanyCode if CompanyCode is a parameter
                selectionVariant.massAddSelectOption(`$Parameter.${filterKey}`, selectOptions);
              }
              selectionVariant.massAddSelectOption(filterKey, selectOptions);
            }
          }
        }
      }
      return selectionVariant;
    },
    /**
     * Method to add the filter conditions to selection variant.
     *
     * @param stateFilters Retrieved filter condition for a filter field from StateUtils
     * @param filterKey Name of the filter key
     * @param propertyHelper PropertyHelper of filterbar
     * @returns The selection option array for a particular filterkey
     */
    getSelectionOptionsFromCondition: function (stateFilters, filterKey, propertyHelper) {
      const selectOptions = [];
      for (const condition of stateFilters) {
        const selectOption = StateFilterToSelectionVariant.getSelectionOption(condition, filterKey, propertyHelper);
        if (selectOption) {
          selectOptions.push(selectOption);
        }
      }
      return selectOptions;
    },
    /**
     * Calculate the filter option for each value
     *
     * @param item
     * @param filterKey Name of the filter key
     * @param propertyHelper PropertyHelper of filterbar
     * @returns The promise of select option
     */
    getSelectionOption: function (item, filterKey, propertyHelper) {
      var _filterOption;
      let semanticDates;
      let filterOption;
      const conditionValue = item;
      const operator = conditionValue.operator && conditionValue.operator !== "" ? FilterOperatorUtil.getOperator(conditionValue.operator) : undefined;
      if (operator instanceof RangeOperator) {
        semanticDates = StateFilterToSelectionVariant.createSemanticDatesFromConditions(conditionValue);
        filterOption = StateFilterToSelectionVariant.getOptionForPropertyWithRangeOperator(operator, conditionValue, filterKey, propertyHelper);
      } else {
        const semanticDateOpsExt = SemanticDateOperators.getSupportedOperations();
        if (semanticDateOpsExt.includes(conditionValue.operator)) {
          semanticDates = StateFilterToSelectionVariant.createSemanticDatesFromConditions(conditionValue);
        }
        filterOption = StateFilterToSelectionVariant.getSelectionFormatForNonRangeOperator(conditionValue, filterKey, operator);
      }
      if ((_filterOption = filterOption) !== null && _filterOption !== void 0 && _filterOption.Option) {
        filterOption.SemanticDates = semanticDates ? semanticDates : undefined;
      }
      return filterOption;
    },
    /**
     * Calculate the Select Option  filter conditions.
     *
     * @param conditionValue Name of the filter key
     * @param filterKey Name of the filterkey
     * @param operator The `sap.ui.mdc.condition.Operator` object
     * @returns The Select Option object or undefined
     */
    getSelectionFormatForNonRangeOperator: function (conditionValue, filterKey, operator) {
      const value1 = conditionValue.values[0] ? conditionValue.values[0].toString() : "";
      const value2 = conditionValue.values[1] ? conditionValue.values[1].toString() : null;
      const filterOption = StateFilterToSelectionVariant.getSelectOption(conditionValue.operator, value1, value2, filterKey);
      if (filterOption) {
        filterOption.Sign = operator !== null && operator !== void 0 && operator.exclude ? "E" : "I";
      }
      return filterOption;
    },
    /**
     * Get the type config for filter field.
     *
     * @param filterKey Name of the filter key
     * @param propertyHelper PropertyHelper and filter delegate controller of filterbar
     * @returns The object with typeConfig and typeUtil value
     */
    getTypeInfoForFilterProperty: function (filterKey, propertyHelper) {
      // for few filter fields keys will not be present hence skip those properties
      const propertyInfo = propertyHelper.getProperty(filterKey);
      let typeConfig;
      if (propertyInfo) {
        typeConfig = propertyInfo.typeConfig;
      }
      return typeConfig;
    },
    /**
     * Calculate the options for date range values.
     *
     * @param operator Object for the given operator name
     * @param conditionValue Value object present inside filter condition values
     * @param filterKey Name of the filter key
     * @param propertyHelper PropertyHelper of filterbar
     * @returns The selectionOption for filter field
     */
    getOptionForPropertyWithRangeOperator: function (operator, conditionValue, filterKey, propertyHelper) {
      const filterOption = {
        Sign: "I",
        Option: "",
        Low: "",
        High: ""
      };
      const typeConfig = StateFilterToSelectionVariant.getTypeInfoForFilterProperty(filterKey, propertyHelper);

      // handling of Date RangeOperators
      const modelFilter = operator.getModelFilter(conditionValue, filterKey, typeConfig ? typeConfig.typeInstance : undefined, false, typeConfig ? typeConfig.baseType : undefined);
      const filters = modelFilter.getFilters();
      if (filters === undefined) {
        filterOption.Sign = operator.exclude ? "E" : "I";
        // FIXME Those are private methods from MDC
        filterOption.Low = TypeUtil.externalizeValue(modelFilter.getValue1(), typeConfig ? typeConfig.typeInstance : "string");
        filterOption.High = TypeUtil.externalizeValue(modelFilter.getValue2(), typeConfig ? typeConfig.typeInstance : "string");
        filterOption.Option = modelFilter.getOperator() ?? "";
      }
      return filterOption.Option != "" ? filterOption : undefined;
    },
    /**
     * Get sign and option of selection option
     *
     * @param operator The option of selection variant
     * @param lowValue The single value or the lower boundary of the interval; the <code>null</code> value is not allowed
     * @param highValue The High value of the range; if this value is not necessary, <code>null</code> is used</li>
     * @param filterKey The name of the filter field
     * @returns The selection state
     */
    getSelectOption: function (operator, lowValue, highValue, filterKey) {
      const selectOptionState = {
        Option: "",
        Sign: "I",
        Low: lowValue,
        High: highValue
      };
      switch (operator) {
        case "Contains":
          selectOptionState.Option = "CP";
          break;
        case "StartsWith":
          selectOptionState.Option = "CP";
          selectOptionState.Low += "*";
          break;
        case "EndsWith":
          selectOptionState.Option = "CP";
          selectOptionState.Low = `*${selectOptionState.Low}`;
          break;
        case "BT":
        case "LE":
        case "LT":
        case "GT":
        case "NE":
        case "EQ":
          selectOptionState.Option = operator;
          break;
        case "DATE":
          selectOptionState.Option = "EQ";
          break;
        case "DATERANGE":
          selectOptionState.Option = "BT";
          break;
        case "FROM":
          selectOptionState.Option = "GE";
          break;
        case "TO":
          selectOptionState.Option = "LE";
          break;
        case "EEQ":
          selectOptionState.Option = "EQ";
          break;
        case "Empty":
          selectOptionState.Option = "EQ";
          selectOptionState.Low = "";
          break;
        case "NotContains":
          selectOptionState.Option = "CP";
          selectOptionState.Sign = "E";
          break;
        case "NOTBT":
          selectOptionState.Option = "BT";
          selectOptionState.Sign = "E";
          break;
        case "NotStartsWith":
          selectOptionState.Option = "CP";
          selectOptionState.Low += "*";
          selectOptionState.Sign = "E";
          break;
        case "NotEndsWith":
          selectOptionState.Option = "CP";
          selectOptionState.Low = `*${selectOptionState.Low}`;
          selectOptionState.Sign = "E";
          break;
        case "NotEmpty":
          selectOptionState.Option = "NE";
          selectOptionState.Low = "";
          break;
        case "NOTLE":
          selectOptionState.Option = "LE";
          selectOptionState.Sign = "E";
          break;
        case "NOTGE":
          selectOptionState.Option = "GE";
          selectOptionState.Sign = "E";
          break;
        case "NOTLT":
          selectOptionState.Option = "LT";
          selectOptionState.Sign = "E";
          break;
        case "NOTGT":
          selectOptionState.Option = "GT";
          selectOptionState.Sign = "E";
          break;
        default:
          Log.warning(`${operator} is not supported. ${filterKey} could not be added to the Selection variant`);
      }
      return selectOptionState.Option !== "" ? selectOptionState : undefined;
    },
    /**
     * Create the semantic dates from filter conditions.
     *
     * @param condition Filter field condition
     * @returns The Semantic date conditions
     */
    createSemanticDatesFromConditions: function (condition) {
      if (!isEmptyObject(condition)) {
        return {
          high: condition.values[0] ? condition.values[0] : null,
          low: condition.values[1] ? condition.values[1] : null,
          operator: condition.operator
        };
      }
    }
  };
  return StateFilterToSelectionVariant;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/StateFilterToSelectionVariant", ["sap/base/Log","sap/base/util/isEmptyObject","sap/fe/core/helpers/SemanticDateOperators","sap/fe/core/type/TypeUtil","sap/fe/navigation/SelectionVariant","sap/ui/mdc/condition/FilterOperatorUtil","sap/ui/mdc/condition/RangeOperator"],function(e,t,n,o,i,a,r){"use strict";const s={getSelectionVariantFromConditions:function(e,n,o){const a=new i;if(!t(e)){for(const t in e){const i=e[t];if(i!==null&&i!==void 0&&i.length){const e=s.getSelectionOptionsFromCondition(i,t,n);if(e.length){if(o!==null&&o!==void 0&&o.includes(t)){a.massAddSelectOption(`$Parameter.${t}`,e)}a.massAddSelectOption(t,e)}}}}return a},getSelectionOptionsFromCondition:function(e,t,n){const o=[];for(const i of e){const e=s.getSelectionOption(i,t,n);if(e){o.push(e)}}return o},getSelectionOption:function(e,t,o){var i;let c;let p;const l=e;const u=l.operator&&l.operator!==""?a.getOperator(l.operator):undefined;if(u instanceof r){c=s.createSemanticDatesFromConditions(l);p=s.getOptionForPropertyWithRangeOperator(u,l,t,o)}else{const e=n.getSupportedOperations();if(e.includes(l.operator)){c=s.createSemanticDatesFromConditions(l)}p=s.getSelectionFormatForNonRangeOperator(l,t,u)}if((i=p)!==null&&i!==void 0&&i.Option){p.SemanticDates=c?c:undefined}return p},getSelectionFormatForNonRangeOperator:function(e,t,n){const o=e.values[0]?e.values[0].toString():"";const i=e.values[1]?e.values[1].toString():null;const a=s.getSelectOption(e.operator,o,i,t);if(a){a.Sign=n!==null&&n!==void 0&&n.exclude?"E":"I"}return a},getTypeInfoForFilterProperty:function(e,t){const n=t.getProperty(e);let o;if(n){o=n.typeConfig}return o},getOptionForPropertyWithRangeOperator:function(e,t,n,i){const a={Sign:"I",Option:"",Low:"",High:""};const r=s.getTypeInfoForFilterProperty(n,i);const c=e.getModelFilter(t,n,r?r.typeInstance:undefined,false,r?r.baseType:undefined);const p=c.getFilters();if(p===undefined){a.Sign=e.exclude?"E":"I";a.Low=o.externalizeValue(c.getValue1(),r?r.typeInstance:"string");a.High=o.externalizeValue(c.getValue2(),r?r.typeInstance:"string");a.Option=c.getOperator()??""}return a.Option!=""?a:undefined},getSelectOption:function(t,n,o,i){const a={Option:"",Sign:"I",Low:n,High:o};switch(t){case"Contains":a.Option="CP";break;case"StartsWith":a.Option="CP";a.Low+="*";break;case"EndsWith":a.Option="CP";a.Low=`*${a.Low}`;break;case"BT":case"LE":case"LT":case"GT":case"NE":case"EQ":a.Option=t;break;case"DATE":a.Option="EQ";break;case"DATERANGE":a.Option="BT";break;case"FROM":a.Option="GE";break;case"TO":a.Option="LE";break;case"EEQ":a.Option="EQ";break;case"Empty":a.Option="EQ";a.Low="";break;case"NotContains":a.Option="CP";a.Sign="E";break;case"NOTBT":a.Option="BT";a.Sign="E";break;case"NotStartsWith":a.Option="CP";a.Low+="*";a.Sign="E";break;case"NotEndsWith":a.Option="CP";a.Low=`*${a.Low}`;a.Sign="E";break;case"NotEmpty":a.Option="NE";a.Low="";break;case"NOTLE":a.Option="LE";a.Sign="E";break;case"NOTGE":a.Option="GE";a.Sign="E";break;case"NOTLT":a.Option="LT";a.Sign="E";break;case"NOTGT":a.Option="GT";a.Sign="E";break;default:e.warning(`${t} is not supported. ${i} could not be added to the Selection variant`)}return a.Option!==""?a:undefined},createSemanticDatesFromConditions:function(e){if(!t(e)){return{high:e.values[0]?e.values[0]:null,low:e.values[1]?e.values[1]:null,operator:e.operator}}}};return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/TemplateComponent-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/UIComponent", "sap/ui/mdc/p13n/StateUtil"], function (CommonUtils, ClassSupport, UIComponent, StateUtil) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let TemplateComponent = (_dec = defineUI5Class("sap.fe.core.TemplateComponent"), _dec2 = implementInterface("sap.ui.core.IAsyncContentCreation"), _dec3 = property({
    type: "string",
    defaultValue: null
  }), _dec4 = property({
    type: "string",
    defaultValue: null
  }), _dec5 = property({
    type: "string"
  }), _dec6 = property({
    type: "object"
  }), _dec7 = property({
    type: "string[]"
  }), _dec8 = property({
    type: "object"
  }), _dec9 = property({
    type: "object"
  }), _dec10 = property({
    type: "boolean"
  }), _dec11 = property({
    type: "object"
  }), _dec12 = property({
    type: "string"
  }), _dec13 = event(), _dec14 = event(), _dec15 = event(), _dec(_class = (_class2 = /*#__PURE__*/function (_UIComponent) {
    _inheritsLoose(TemplateComponent, _UIComponent);
    function TemplateComponent() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _UIComponent.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IAsyncContentCreation", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "entitySet", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "contextPath", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "bindingContextPattern", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "navigation", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "enhanceI18n", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "controlConfiguration", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "content", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "allowDeepLinking", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "refreshStrategyOnAppRestore", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "viewType", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "containerDefined", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "heroesBatchReceived", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "workersBatchReceived", _descriptor14, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = TemplateComponent.prototype;
    _proto.setContainer = function setContainer(oContainer) {
      _UIComponent.prototype.setContainer.call(this, oContainer);
      this.fireEvent("containerDefined", {
        container: oContainer
      });
      return this;
    };
    _proto.init = function init() {
      this.oAppComponent = CommonUtils.getAppComponent(this);
      _UIComponent.prototype.init.call(this);
      const oStateChangeHandler = function (oEvent) {
        const oControl = oEvent.getParameter("control");
        if (oControl.isA("sap.ui.mdc.Table") || oControl.isA("sap.ui.mdc.FilterBar") || oControl.isA("sap.ui.mdc.Chart")) {
          const oMacroAPI = oControl.getParent();
          if (oMacroAPI !== null && oMacroAPI !== void 0 && oMacroAPI.fireStateChange) {
            oMacroAPI.fireStateChange();
          }
        }
      };
      StateUtil.detachStateChange(oStateChangeHandler);
      StateUtil.attachStateChange(oStateChangeHandler);
    }

    // This method is called by UI5 core to access to the component containing the customizing configuration.
    // as controller extensions are defined in the manifest for the app component and not for the
    // template component we return the app component.
    ;
    _proto.getExtensionComponent = function getExtensionComponent() {
      return this.oAppComponent;
    };
    _proto.getRootController = function getRootController() {
      const rootControl = this.getRootControl();
      let rootController;
      if (rootControl && rootControl.getController) {
        rootController = rootControl.getController();
      }
      return rootController;
    };
    _proto.onPageReady = function onPageReady(mParameters) {
      const rootController = this.getRootController();
      if (rootController && rootController.onPageReady) {
        rootController.onPageReady(mParameters);
      }
    };
    _proto.getNavigationConfiguration = function getNavigationConfiguration(sTargetPath) {
      const mNavigation = this.navigation;
      return mNavigation[sTargetPath];
    };
    _proto.getViewData = function getViewData() {
      const mProperties = this.getMetadata().getAllProperties();
      const oViewData = Object.keys(mProperties).reduce((mViewData, sPropertyName) => {
        mViewData[sPropertyName] = mProperties[sPropertyName].get(this);
        return mViewData;
      }, {});

      // Access the internal _isFclEnabled which will be there
      oViewData.fclEnabled = this.oAppComponent._isFclEnabled();
      return oViewData;
    };
    _proto._getPageTitleInformation = function _getPageTitleInformation() {
      const rootControl = this.getRootControl();
      if (rootControl && rootControl.getController() && rootControl.getController()._getPageTitleInformation) {
        return rootControl.getController()._getPageTitleInformation();
      } else {
        return {};
      }
    };
    _proto.getExtensionAPI = function getExtensionAPI() {
      return this.getRootControl().getController().getExtensionAPI();
    };
    return TemplateComponent;
  }(UIComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IAsyncContentCreation", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "entitySet", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "contextPath", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return null;
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "bindingContextPattern", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "navigation", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "enhanceI18n", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "controlConfiguration", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "allowDeepLinking", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "refreshStrategyOnAppRestore", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "viewType", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "XML";
    }
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "containerDefined", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "heroesBatchReceived", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "workersBatchReceived", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return TemplateComponent;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/TemplateComponent", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/ClassSupport","sap/ui/core/UIComponent","sap/ui/mdc/p13n/StateUtil"],function(e,t,n,r){"use strict";var i,o,a,l,u,c,p,s,f,b,g,y,h,d,m,C,v,w,z,_,P,A,R,I,j,O,S,E,x,D,T;var k=t.property;var B=t.implementInterface;var U=t.event;var L=t.defineUI5Class;function V(e,t,n,r){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function F(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function M(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;N(e,t)}function N(e,t){N=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return N(e,t)}function X(e,t,n,r,i){var o={};Object.keys(r).forEach(function(e){o[e]=r[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},o);if(i&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(i):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function q(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let G=(i=L("sap.fe.core.TemplateComponent"),o=B("sap.ui.core.IAsyncContentCreation"),a=k({type:"string",defaultValue:null}),l=k({type:"string",defaultValue:null}),u=k({type:"string"}),c=k({type:"object"}),p=k({type:"string[]"}),s=k({type:"object"}),f=k({type:"object"}),b=k({type:"boolean"}),g=k({type:"object"}),y=k({type:"string"}),h=U(),d=U(),m=U(),i(C=(v=function(t){M(n,t);function n(){var e;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++){r[i]=arguments[i]}e=t.call(this,...r)||this;V(e,"__implements__sap_ui_core_IAsyncContentCreation",w,F(e));V(e,"entitySet",z,F(e));V(e,"contextPath",_,F(e));V(e,"bindingContextPattern",P,F(e));V(e,"navigation",A,F(e));V(e,"enhanceI18n",R,F(e));V(e,"controlConfiguration",I,F(e));V(e,"content",j,F(e));V(e,"allowDeepLinking",O,F(e));V(e,"refreshStrategyOnAppRestore",S,F(e));V(e,"viewType",E,F(e));V(e,"containerDefined",x,F(e));V(e,"heroesBatchReceived",D,F(e));V(e,"workersBatchReceived",T,F(e));return e}var i=n.prototype;i.setContainer=function e(n){t.prototype.setContainer.call(this,n);this.fireEvent("containerDefined",{container:n});return this};i.init=function n(){this.oAppComponent=e.getAppComponent(this);t.prototype.init.call(this);const i=function(e){const t=e.getParameter("control");if(t.isA("sap.ui.mdc.Table")||t.isA("sap.ui.mdc.FilterBar")||t.isA("sap.ui.mdc.Chart")){const e=t.getParent();if(e!==null&&e!==void 0&&e.fireStateChange){e.fireStateChange()}}};r.detachStateChange(i);r.attachStateChange(i)};i.getExtensionComponent=function e(){return this.oAppComponent};i.getRootController=function e(){const t=this.getRootControl();let n;if(t&&t.getController){n=t.getController()}return n};i.onPageReady=function e(t){const n=this.getRootController();if(n&&n.onPageReady){n.onPageReady(t)}};i.getNavigationConfiguration=function e(t){const n=this.navigation;return n[t]};i.getViewData=function e(){const t=this.getMetadata().getAllProperties();const n=Object.keys(t).reduce((e,n)=>{e[n]=t[n].get(this);return e},{});n.fclEnabled=this.oAppComponent._isFclEnabled();return n};i._getPageTitleInformation=function e(){const t=this.getRootControl();if(t&&t.getController()&&t.getController()._getPageTitleInformation){return t.getController()._getPageTitleInformation()}else{return{}}};i.getExtensionAPI=function e(){return this.getRootControl().getController().getExtensionAPI()};return n}(n),w=X(v.prototype,"__implements__sap_ui_core_IAsyncContentCreation",[o],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),z=X(v.prototype,"entitySet",[a],{configurable:true,enumerable:true,writable:true,initializer:function(){return null}}),_=X(v.prototype,"contextPath",[l],{configurable:true,enumerable:true,writable:true,initializer:function(){return null}}),P=X(v.prototype,"bindingContextPattern",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),A=X(v.prototype,"navigation",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),R=X(v.prototype,"enhanceI18n",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),I=X(v.prototype,"controlConfiguration",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),j=X(v.prototype,"content",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),O=X(v.prototype,"allowDeepLinking",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),S=X(v.prototype,"refreshStrategyOnAppRestore",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),E=X(v.prototype,"viewType",[y],{configurable:true,enumerable:true,writable:true,initializer:function(){return"XML"}}),x=X(v.prototype,"containerDefined",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),D=X(v.prototype,"heroesBatchReceived",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),T=X(v.prototype,"workersBatchReceived",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),v))||C);return G},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/TemplateModel-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/base/Object", "sap/ui/model/json/JSONModel"], function (ClassSupport, BaseObject, JSONModel) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let TemplateModel = (_dec = defineUI5Class("sap.fe.core.TemplateModel"), _dec(_class = /*#__PURE__*/function (_BaseObject) {
    _inheritsLoose(TemplateModel, _BaseObject);
    function TemplateModel(pageConfig, oMetaModel) {
      var _this;
      _this = _BaseObject.call(this) || this;
      _this.oMetaModel = oMetaModel;
      _this.oConfigModel = new JSONModel();
      // don't limit aggregation bindings
      _this.oConfigModel.setSizeLimit(Number.MAX_VALUE);
      _this.bConfigLoaded = false;
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const that = _assertThisInitialized(_this);
      if (typeof pageConfig === "function") {
        const fnGetObject = _this.oConfigModel._getObject.bind(_this.oConfigModel);
        _this.oConfigModel._getObject = function (sPath, oContext) {
          if (!that.bConfigLoaded) {
            this.setData(pageConfig());
          }
          return fnGetObject(sPath, oContext);
        };
      } else {
        _this.oConfigModel.setData(pageConfig);
      }
      _this.fnCreateMetaBindingContext = _this.oMetaModel.createBindingContext.bind(_this.oMetaModel);
      _this.fnCreateConfigBindingContext = _this.oConfigModel.createBindingContext.bind(_this.oConfigModel);
      _this.fnSetData = _this.oConfigModel.setData.bind(_this.oConfigModel);
      _this.oConfigModel.createBindingContext = _this.createBindingContext.bind(_assertThisInitialized(_this));
      _this.oConfigModel.setData = _this.setData.bind(_assertThisInitialized(_this));
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      return _this.oConfigModel || _assertThisInitialized(_this);
    }

    /**
     * Overwrite the standard setData to keep track whether the external configuration has been loaded or not.
     *
     * @param dataToSet The data to set to the json model containing the configuration
     */
    var _proto = TemplateModel.prototype;
    _proto.setData = function setData(dataToSet) {
      this.fnSetData(dataToSet);
      this.bConfigLoaded = true;
    };
    _proto.createBindingContext = function createBindingContext(sPath, oContext, mParameters, fnCallBack) {
      var _oBindingContext;
      let oBindingContext;
      const bNoResolve = mParameters && mParameters.noResolve;
      oBindingContext = this.fnCreateConfigBindingContext(sPath, oContext, mParameters, fnCallBack);
      const sResolvedPath = !bNoResolve && ((_oBindingContext = oBindingContext) === null || _oBindingContext === void 0 ? void 0 : _oBindingContext.getObject());
      if (sResolvedPath && typeof sResolvedPath === "string") {
        oBindingContext = this.fnCreateMetaBindingContext(sResolvedPath, oContext, mParameters, fnCallBack);
      }
      return oBindingContext;
    };
    _proto.destroy = function destroy() {
      this.oConfigModel.destroy();
      JSONModel.prototype.destroy.apply(this);
    };
    return TemplateModel;
  }(BaseObject)) || _class);
  return TemplateModel;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/TemplateModel", ["sap/fe/core/helpers/ClassSupport","sap/ui/base/Object","sap/ui/model/json/JSONModel"],function(e,t,o){"use strict";var n,i;var r=e.defineUI5Class;function a(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function d(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;f(e,t)}function f(e,t){f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return f(e,t)}let s=(n=r("sap.fe.core.TemplateModel"),n(i=function(e){d(t,e);function t(t,n){var i;i=e.call(this)||this;i.oMetaModel=n;i.oConfigModel=new o;i.oConfigModel.setSizeLimit(Number.MAX_VALUE);i.bConfigLoaded=false;const r=a(i);if(typeof t==="function"){const e=i.oConfigModel._getObject.bind(i.oConfigModel);i.oConfigModel._getObject=function(o,n){if(!r.bConfigLoaded){this.setData(t())}return e(o,n)}}else{i.oConfigModel.setData(t)}i.fnCreateMetaBindingContext=i.oMetaModel.createBindingContext.bind(i.oMetaModel);i.fnCreateConfigBindingContext=i.oConfigModel.createBindingContext.bind(i.oConfigModel);i.fnSetData=i.oConfigModel.setData.bind(i.oConfigModel);i.oConfigModel.createBindingContext=i.createBindingContext.bind(a(i));i.oConfigModel.setData=i.setData.bind(a(i));return i.oConfigModel||a(i)}var n=t.prototype;n.setData=function e(t){this.fnSetData(t);this.bConfigLoaded=true};n.createBindingContext=function e(t,o,n,i){var r;let a;const d=n&&n.noResolve;a=this.fnCreateConfigBindingContext(t,o,n,i);const f=!d&&((r=a)===null||r===void 0?void 0:r.getObject());if(f&&typeof f==="string"){a=this.fnCreateMetaBindingContext(f,o,n,i)}return a};n.destroy=function e(){this.oConfigModel.destroy();o.prototype.destroy.apply(this)};return t}(t))||i);return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/AttributeModel-dbg", ["sap/base/Log", "sap/base/util/ObjectPath", "sap/ui/model/json/JSONModel"], function (Log, ObjectPath, JSONModel) {
  "use strict";

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  /**
   * Special JSONModel that is used to store the attribute model for the building block.
   * It has specific handling for undefinedValue mapping
   */
  let AttributeModel = /*#__PURE__*/function (_JSONModel) {
    _inheritsLoose(AttributeModel, _JSONModel);
    function AttributeModel(oNode, oProps, BuildingBlockClass) {
      var _this;
      _this = _JSONModel.call(this) || this;
      _this.oNode = oNode;
      _this.oProps = oProps;
      _this.BuildingBlockClass = BuildingBlockClass;
      _this.$$valueAsPromise = true;
      return _this;
    }
    var _proto = AttributeModel.prototype;
    _proto._getObject = function _getObject(sPath, oContext) {
      if (sPath === undefined || sPath === "") {
        if (oContext !== undefined && oContext.getPath() !== "/") {
          return this._getObject(oContext.getPath(sPath));
        }
        return this.oProps;
      }
      if (sPath === "/undefinedValue" || sPath === "undefinedValue") {
        return undefined;
      }
      // just return the attribute - we can't validate them, and we don't support aggregations for now
      const oValue = ObjectPath.get(sPath.replace(/\//g, "."), this.oProps);
      if (oValue !== undefined) {
        return oValue;
      }
      // Deal with undefined properties
      if (this.oProps.hasOwnProperty(sPath)) {
        return this.oProps[sPath];
      }
      if (sPath.indexOf(":") === -1 && sPath.indexOf("/") === -1) {
        // Gloves are off, if you have this error you forgot to decorate your property with @blockAttribute but are still using it in underlying templating
        Log.error(`Missing property ${sPath} on building block metadata ${this.BuildingBlockClass.name}`);
      }
      return this.oNode.getAttribute(sPath);
    };
    return AttributeModel;
  }(JSONModel);
  return AttributeModel;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/AttributeModel", ["sap/base/Log","sap/base/util/ObjectPath","sap/ui/model/json/JSONModel"],function(t,e,n){"use strict";function r(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;o(t,e)}function o(t,e){o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,n){e.__proto__=n;return e};return o(t,e)}let i=function(n){r(o,n);function o(t,e,r){var o;o=n.call(this)||this;o.oNode=t;o.oProps=e;o.BuildingBlockClass=r;o.$$valueAsPromise=true;return o}var i=o.prototype;i._getObject=function n(r,o){if(r===undefined||r===""){if(o!==undefined&&o.getPath()!=="/"){return this._getObject(o.getPath(r))}return this.oProps}if(r==="/undefinedValue"||r==="undefinedValue"){return undefined}const i=e.get(r.replace(/\//g,"."),this.oProps);if(i!==undefined){return i}if(this.oProps.hasOwnProperty(r)){return this.oProps[r]}if(r.indexOf(":")===-1&&r.indexOf("/")===-1){t.error(`Missing property ${r} on building block metadata ${this.BuildingBlockClass.name}`)}return this.oNode.getAttribute(r)};return o}(n);return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockBase-dbg", ["sap/base/util/deepClone", "sap/base/util/merge", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/converters/ConverterContext", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/DataModelPathHelper"], function (deepClone, merge, BuildingBlockTemplateProcessor, ConverterContext, BindingToolkit, StableIdHelper, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var generate = StableIdHelper.generate;
  var isUndefinedExpression = BindingToolkit.isUndefinedExpression;
  var xml = BuildingBlockTemplateProcessor.xml;
  var unregisterBuildingBlock = BuildingBlockTemplateProcessor.unregisterBuildingBlock;
  var registerBuildingBlock = BuildingBlockTemplateProcessor.registerBuildingBlock;
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  /**
   * Base class for building blocks
   */
  let BuildingBlockBase = /*#__PURE__*/function () {
    function BuildingBlockBase(props, _controlConfiguration, _visitorSettings) {
      var _visitorSettings$mode;
      this.isPublic = false;
      this.getConverterContext = function (dataModelObjectPath, contextPath, settings, extraParams) {
        var _settings$models$view;
        const appComponent = settings.appComponent;
        const originalViewData = (_settings$models$view = settings.models.viewData) === null || _settings$models$view === void 0 ? void 0 : _settings$models$view.getData();
        let viewData = Object.assign({}, originalViewData);
        delete viewData.resourceModel;
        delete viewData.appComponent;
        viewData = deepClone(viewData);
        let controlConfiguration = {};
        // Only merge in page control configuration if the building block is on the same context
        const relativePath = getTargetObjectPath(dataModelObjectPath.contextLocation ?? dataModelObjectPath);
        if (relativePath === (originalViewData === null || originalViewData === void 0 ? void 0 : originalViewData.contextPath) || relativePath === `/${originalViewData === null || originalViewData === void 0 ? void 0 : originalViewData.entitySet}`) {
          controlConfiguration = viewData.controlConfiguration;
        }
        viewData.controlConfiguration = merge(controlConfiguration, extraParams || {});
        return ConverterContext.createConverterContextForMacro(dataModelObjectPath.startingEntitySet.name, settings.models.metaModel, appComponent === null || appComponent === void 0 ? void 0 : appComponent.getDiagnostics(), merge, dataModelObjectPath.contextLocation, viewData);
      };
      Object.keys(props).forEach(propName => {
        this[propName] = props[propName];
      });
      this.resourceModel = _visitorSettings === null || _visitorSettings === void 0 ? void 0 : (_visitorSettings$mode = _visitorSettings.models) === null || _visitorSettings$mode === void 0 ? void 0 : _visitorSettings$mode["sap.fe.i18n"];
    }

    /**
     * Only used internally
     *
     * @private
     */
    _exports = BuildingBlockBase;
    var _proto = BuildingBlockBase.prototype;
    /**
     * Convert the given local element ID to a globally unique ID by prefixing with the Building Block ID.
     *
     * @param stringParts
     * @returns Either the global ID or undefined if the Building Block doesn't have an ID
     * @private
     */
    _proto.createId = function createId() {
      // If the child instance has an ID property use it otherwise return undefined
      if (this.id) {
        for (var _len = arguments.length, stringParts = new Array(_len), _key = 0; _key < _len; _key++) {
          stringParts[_key] = arguments[_key];
        }
        return generate([this.id, ...stringParts]);
      }
      return undefined;
    }

    /**
     * Get the ID of the content control.
     *
     * @param buildingBlockId
     * @returns Return the ID
     * @private
     */;
    _proto.getContentId = function getContentId(buildingBlockId) {
      return `${buildingBlockId}-content`;
    }

    /**
     * Returns translated text for a given resource key.
     *
     * @param textID ID of the Text
     * @param parameters Array of parameters that are used to create the text
     * @param metaPath Entity set name or action name to overload a text
     * @returns Determined text
     */;
    _proto.getTranslatedText = function getTranslatedText(textID, parameters, metaPath) {
      var _this$resourceModel;
      return ((_this$resourceModel = this.resourceModel) === null || _this$resourceModel === void 0 ? void 0 : _this$resourceModel.getText(textID, parameters, metaPath)) || textID;
    };
    /**
     * Only used internally.
     *
     * @returns All the properties defined on the object with their values
     * @private
     */
    _proto.getProperties = function getProperties() {
      const allProperties = {};
      for (const oInstanceKey in this) {
        if (this.hasOwnProperty(oInstanceKey)) {
          allProperties[oInstanceKey] = this[oInstanceKey];
        }
      }
      return allProperties;
    };
    BuildingBlockBase.register = function register() {
      registerBuildingBlock(this);
    };
    BuildingBlockBase.unregister = function unregister() {
      unregisterBuildingBlock(this);
    }

    /**
     * Add a part of string based on the condition.
     *
     * @param condition
     * @param partToAdd
     * @returns The part to add if the condition is true, otherwise an empty string
     * @private
     */;
    _proto.addConditionally = function addConditionally(condition, partToAdd) {
      if (condition) {
        return partToAdd;
      } else {
        return "";
      }
    }

    /**
     * Add an attribute depending on the current value of the property.
     * If it's undefined the attribute is not added.
     *
     * @param attributeName
     * @param value
     * @returns The attribute to add if the value is not undefined, otherwise an empty string
     * @private
     */;
    _proto.attr = function attr(attributeName, value) {
      if (value !== undefined && !isUndefinedExpression(value)) {
        return () => xml`${attributeName}="${value}"`;
      } else {
        return () => "";
      }
    };
    _createClass(BuildingBlockBase, null, [{
      key: "metadata",
      get: function () {
        // We need to store the metadata on the actual subclass, not on BuildingBlockBase
        this.internalMetadata ??= {
          namespace: "",
          name: "",
          properties: {},
          aggregations: {},
          stereotype: "xmlmacro"
        };
        return this.internalMetadata;
      }
    }]);
    return BuildingBlockBase;
  }();
  BuildingBlockBase.isRuntime = false;
  _exports = BuildingBlockBase;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockBase", ["sap/base/util/deepClone","sap/base/util/merge","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/converters/ConverterContext","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper","sap/fe/core/templating/DataModelPathHelper"],function(e,t,n,r,i,o,a){"use strict";var l={};var s=a.getTargetObjectPath;var u=o.generate;var c=i.isUndefinedExpression;var f=n.xml;var d=n.unregisterBuildingBlock;var p=n.registerBuildingBlock;function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||false;r.configurable=true;if("value"in r)r.writable=true;Object.defineProperty(e,m(r.key),r)}}function g(e,t,n){if(t)v(e.prototype,t);if(n)v(e,n);Object.defineProperty(e,"prototype",{writable:false});return e}function m(e){var t=h(e,"string");return typeof t==="symbol"?t:String(t)}function h(e,t){if(typeof e!=="object"||e===null)return e;var n=e[Symbol.toPrimitive];if(n!==undefined){var r=n.call(e,t||"default");if(typeof r!=="object")return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return(t==="string"?String:Number)(e)}let b=function(){function n(n,i,o){var a;this.isPublic=false;this.getConverterContext=function(n,i,o,a){var l;const u=o.appComponent;const c=(l=o.models.viewData)===null||l===void 0?void 0:l.getData();let f=Object.assign({},c);delete f.resourceModel;delete f.appComponent;f=e(f);let d={};const p=s(n.contextLocation??n);if(p===(c===null||c===void 0?void 0:c.contextPath)||p===`/${c===null||c===void 0?void 0:c.entitySet}`){d=f.controlConfiguration}f.controlConfiguration=t(d,a||{});return r.createConverterContextForMacro(n.startingEntitySet.name,o.models.metaModel,u===null||u===void 0?void 0:u.getDiagnostics(),t,n.contextLocation,f)};Object.keys(n).forEach(e=>{this[e]=n[e]});this.resourceModel=o===null||o===void 0?void 0:(a=o.models)===null||a===void 0?void 0:a["sap.fe.i18n"]}l=n;var i=n.prototype;i.createId=function e(){if(this.id){for(var t=arguments.length,n=new Array(t),r=0;r<t;r++){n[r]=arguments[r]}return u([this.id,...n])}return undefined};i.getContentId=function e(t){return`${t}-content`};i.getTranslatedText=function e(t,n,r){var i;return((i=this.resourceModel)===null||i===void 0?void 0:i.getText(t,n,r))||t};i.getProperties=function e(){const t={};for(const e in this){if(this.hasOwnProperty(e)){t[e]=this[e]}}return t};n.register=function e(){p(this)};n.unregister=function e(){d(this)};i.addConditionally=function e(t,n){if(t){return n}else{return""}};i.attr=function e(t,n){if(n!==undefined&&!c(n)){return()=>f`${t}="${n}"`}else{return()=>""}};g(n,null,[{key:"metadata",get:function(){this.internalMetadata??={namespace:"",name:"",properties:{},aggregations:{},stereotype:"xmlmacro"};return this.internalMetadata}}]);return n}();b.isRuntime=false;l=b;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockFormatter-dbg", [], function () {
  "use strict";

  return {
    base64Decode: base64 => {
      return atob(base64);
    }
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockFormatter", [],function(){"use strict";return{base64Decode:e=>atob(e)}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockSupport-dbg", [], function () {
  "use strict";

  var _exports = {};
  /**
   * Indicates that the property shall be declared as an xml attribute that can be used from the outside of the building block.
   *
   * If defining a runtime Building Block, please make sure to use the correct typings: Depending on its metadata,
   * a property can either be a {@link sap.ui.model.Context} (<code>type: 'sap.ui.model.Context'</code>),
   * a constant (<code>bindable: false</code>), or a {@link BindingToolkitExpression} (<code>bindable: true</code>).
   *
   * This decorator should only be used for properties that are to be set from outside or are used in inner XML templating.
   * If you just need simple computed properties, use undecorated, private TypeScript properties.
   *
   * @param attributeDefinition
   * @returns The decorated property
   */
  function blockAttribute(attributeDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = target.constructor.metadata;
      if (attributeDefinition.defaultValue === undefined) {
        var _propertyDescriptor$i;
        // If there is no defaultValue we can take the value from the initializer (natural way of defining defaults)
        attributeDefinition.defaultValue = (_propertyDescriptor$i = propertyDescriptor.initializer) === null || _propertyDescriptor$i === void 0 ? void 0 : _propertyDescriptor$i.call(propertyDescriptor);
      }
      delete propertyDescriptor.initializer;
      if (metadata.properties[propertyKey.toString()] === undefined) {
        metadata.properties[propertyKey.toString()] = attributeDefinition;
      }
      return propertyDescriptor;
    }; // Needed to make TS happy with those decorators;
  }

  /**
   * Decorator for building blocks.
   *
   * This is an alias for @blockAttribute({ type: "function" }).
   *
   * @returns The decorated property
   */
  _exports.blockAttribute = blockAttribute;
  function blockEvent() {
    return blockAttribute({
      type: "function"
    });
  }

  /**
   * Indicates that the property shall be declared as an xml aggregation that can be used from the outside of the building block.
   *
   * @param aggregationDefinition
   * @returns The decorated property
   */
  _exports.blockEvent = blockEvent;
  function blockAggregation(aggregationDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = target.constructor.metadata;
      delete propertyDescriptor.initializer;
      if (metadata.aggregations[propertyKey] === undefined) {
        metadata.aggregations[propertyKey] = aggregationDefinition;
      }
      if (aggregationDefinition.isDefault === true) {
        metadata.defaultAggregation = propertyKey;
      }
      return propertyDescriptor;
    };
  }
  _exports.blockAggregation = blockAggregation;
  function defineBuildingBlock(oBuildingBlockDefinition) {
    return function (classDefinition) {
      const metadata = classDefinition.metadata;
      metadata.namespace = oBuildingBlockDefinition.namespace;
      metadata.publicNamespace = oBuildingBlockDefinition.publicNamespace;
      metadata.name = oBuildingBlockDefinition.name;
      metadata.xmlTag = oBuildingBlockDefinition.xmlTag;
      metadata.fragment = oBuildingBlockDefinition.fragment;
      metadata.designtime = oBuildingBlockDefinition.designtime;
      metadata.isOpen = oBuildingBlockDefinition.isOpen;
    };
  }
  _exports.defineBuildingBlock = defineBuildingBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockSupport", [],function(){"use strict";var e={};function n(e){return function(n,t,i){const a=n.constructor.metadata;if(e.defaultValue===undefined){var r;e.defaultValue=(r=i.initializer)===null||r===void 0?void 0:r.call(i)}delete i.initializer;if(a.properties[t.toString()]===undefined){a.properties[t.toString()]=e}return i}}e.blockAttribute=n;function t(){return n({type:"function"})}e.blockEvent=t;function i(e){return function(n,t,i){const a=n.constructor.metadata;delete i.initializer;if(a.aggregations[t]===undefined){a.aggregations[t]=e}if(e.isDefault===true){a.defaultAggregation=t}return i}}e.blockAggregation=i;function a(e){return function(n){const t=n.metadata;t.namespace=e.namespace;t.publicNamespace=e.publicNamespace;t.name=e.name;t.xmlTag=e.xmlTag;t.fragment=e.fragment;t.designtime=e.designtime;t.isOpen=e.isOpen}}e.defineBuildingBlock=a;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor-dbg", ["sap/base/Log", "sap/base/util/deepClone", "sap/base/util/uid", "sap/fe/core/buildingBlocks/AttributeModel", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/ui/base/BindingParser", "sap/ui/core/util/XMLPreprocessor", "sap/ui/model/json/JSONModel", "./TraceInfo"], function (Log, deepClone, uid, AttributeModel, ConfigurableObject, BindingToolkit, TypeGuards, BindingParser, XMLPreprocessor, JSONModel, TraceInfo) {
  "use strict";

  var _exports = {};
  var isFunctionArray = TypeGuards.isFunctionArray;
  var isContext = TypeGuards.isContext;
  var isBindingToolkitExpression = BindingToolkit.isBindingToolkitExpression;
  var compileExpression = BindingToolkit.compileExpression;
  var Placement = ConfigurableObject.Placement;
  const LOGGER_SCOPE = "sap.fe.core.buildingBlocks.BuildingBlockTemplateProcessor";
  const XMLTEMPLATING_NS = "http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1";
  const DOMParserInstance = new DOMParser();
  function validateMacroMetadataContext(sName, mContexts, oContextSettings, sKey) {
    const oContext = mContexts[sKey];
    const oContextObject = oContext === null || oContext === void 0 ? void 0 : oContext.getObject();
    if (oContextSettings.required === true && (!oContext || oContextObject === null)) {
      throw new Error(`${sName}: Required metadataContext '${sKey}' is missing`);
    } else if (oContextObject) {
      // If context object has $kind property, $Type should not be checked
      // Therefore remove from context settings
      if (oContextObject.hasOwnProperty("$kind") && oContextObject.$kind !== undefined && oContextSettings.expectedTypes !== undefined) {
        // Check if the $kind is part of the allowed ones
        if (oContextSettings.expectedTypes.indexOf(oContextObject.$kind) === -1) {
          throw new Error(`${sName}: '${sKey}' must be '$kind' '${oContextSettings.expectedTypes}' but is '${oContextObject.$kind}': ${oContext.getPath()}`);
        }
      } else if (oContextObject.hasOwnProperty("$Type") && oContextObject.$Type !== undefined && oContextSettings.expectedAnnotationTypes) {
        // Check only $Type
        if (oContextSettings.expectedAnnotationTypes.indexOf(oContextObject.$Type) === -1) {
          throw new Error(`${sName}: '${sKey}' must be '$Type' '${oContextSettings.expectedAnnotationTypes}' but is '${oContextObject.$Type}': ${oContext.getPath()}`);
        }
      }
    }
  }
  function validateMacroSignature(sName, oMetadata, mContexts, oNode) {
    const aMetadataContextKeys = oMetadata.metadataContexts && Object.keys(oMetadata.metadataContexts) || [],
      aProperties = oMetadata.properties && Object.keys(oMetadata.properties) || [],
      oAttributeNames = {};

    // collect all attributes to find unchecked properties
    const attributeNames = oNode.getAttributeNames();
    for (const attributeName of attributeNames) {
      oAttributeNames[attributeName] = true;
    }

    //Check metadataContexts
    aMetadataContextKeys.forEach(function (sKey) {
      const oContextSettings = oMetadata.metadataContexts[sKey];
      validateMacroMetadataContext(sName, mContexts, oContextSettings, sKey);
      delete oAttributeNames[sKey];
    });
    //Check properties
    aProperties.forEach(function (sKey) {
      const oPropertySettings = oMetadata.properties[sKey];
      if (!oNode.hasAttribute(sKey)) {
        if (oPropertySettings.required && !oPropertySettings.hasOwnProperty("defaultValue")) {
          throw new Error(`${sName}: ` + `Required property '${sKey}' is missing`);
        }
      } else {
        delete oAttributeNames[sKey];
      }
    });

    // Unchecked properties
    Object.keys(oAttributeNames).forEach(function (sKey) {
      // no check for properties which contain a colon ":" (different namespace), e.g. xmlns:trace, trace:macroID, unittest:id
      if (sKey.indexOf(":") < 0 && !sKey.startsWith("xmlns")) {
        Log.warning(`Unchecked parameter: ${sName}: ${sKey}`, undefined, LOGGER_SCOPE);
      }
    });
  }
  _exports.validateMacroSignature = validateMacroSignature;
  const SAP_UI_CORE_ELEMENT = "sap.ui.core.Element";
  const SAP_UI_MODEL_CONTEXT = "sap.ui.model.Context";

  /**
   * Transforms the metadata of a building block by adding additional aggregations,
   * and splitting properties into actual properties and metadata contexts.
   *
   * @param buildingBlockMetadata The metadata received from the input
   * @returns The transformed metadata
   */
  _exports.SAP_UI_MODEL_CONTEXT = SAP_UI_MODEL_CONTEXT;
  function transformMetadata(buildingBlockMetadata) {
    const properties = {};
    const aggregations = {
      dependents: {
        type: SAP_UI_CORE_ELEMENT,
        slot: "dependents"
      },
      customData: {
        type: SAP_UI_CORE_ELEMENT,
        slot: "customData"
      },
      layoutData: {
        type: SAP_UI_CORE_ELEMENT,
        slot: "layoutData"
      },
      ...buildingBlockMetadata.aggregations
    };
    const metadataContexts = {};
    for (const propertyName of Object.keys(buildingBlockMetadata.properties)) {
      const propertyType = buildingBlockMetadata.properties[propertyName].type;
      if (propertyType !== SAP_UI_MODEL_CONTEXT) {
        properties[propertyName] = buildingBlockMetadata.properties[propertyName];
      }
      if ([SAP_UI_MODEL_CONTEXT, "object", "array"].includes(propertyType)) {
        // Explicitly defined contexts, objects, and arrays may come from the metadataContext
        metadataContexts[propertyName] = buildingBlockMetadata.properties[propertyName];
      }
    }
    return {
      ...buildingBlockMetadata,
      properties,
      metadataContexts,
      aggregations
    };
  }

  /**
   * Checks the absolute or context paths and returns an appropriate MetaContext.
   *
   * @param oSettings Additional settings
   * @param sAttributeValue The attribute value
   * @returns The meta data context object
   */
  function _checkAbsoluteAndContextPaths(oSettings, sAttributeValue) {
    let sMetaPath;
    if (sAttributeValue && sAttributeValue.startsWith("/")) {
      // absolute path - we just use this one
      sMetaPath = sAttributeValue;
    } else {
      let sContextPath = oSettings.currentContextPath.getPath();
      if (!sContextPath.endsWith("/")) {
        sContextPath += "/";
      }
      sMetaPath = sContextPath + sAttributeValue;
    }
    return {
      model: "metaModel",
      path: sMetaPath
    };
  }

  /**
   * This method helps to create the metadata context in case it is not yet available in the store.
   *
   * @param oSettings Additional settings
   * @param sAttributeName The attribute name
   * @param sAttributeValue The attribute value
   * @returns The meta data context object
   */
  function _createInitialMetadataContext(oSettings, sAttributeName, sAttributeValue) {
    let returnContext;
    if (sAttributeValue.startsWith("/uid--") && !oSettings.models.converterContext.getProperty(sAttributeValue)) {
      const data = unstoreObjectValue(sAttributeValue);
      oSettings.models.converterContext.setProperty(sAttributeValue, data);
      returnContext = {
        model: "converterContext",
        path: sAttributeValue
      };
    } else if (sAttributeName === "metaPath" && oSettings.currentContextPath || sAttributeName === "contextPath") {
      returnContext = _checkAbsoluteAndContextPaths(oSettings, sAttributeValue);
    } else if (sAttributeValue && sAttributeValue.startsWith("/")) {
      // absolute path - we just use this one
      returnContext = {
        model: "metaModel",
        path: sAttributeValue
      };
    } else {
      returnContext = {
        model: "metaModel",
        path: oSettings.bindingContexts.entitySet ? oSettings.bindingContexts.entitySet.getPath(sAttributeValue) : sAttributeValue
      };
    }
    return returnContext;
  }
  function _getMetadataContext(oSettings, oNode, sAttributeName, oVisitor, bDoNotResolve, isOpen) {
    let oMetadataContext;
    if (!bDoNotResolve && oNode.hasAttribute(sAttributeName)) {
      const sAttributeValue = oNode.getAttribute(sAttributeName);
      oMetadataContext = BindingParser.complexParser(sAttributeValue);
      if (!oMetadataContext) {
        oMetadataContext = _createInitialMetadataContext(oSettings, sAttributeName, sAttributeValue);
      }
    } else if (oSettings.bindingContexts.hasOwnProperty(sAttributeName)) {
      oMetadataContext = {
        model: sAttributeName,
        path: ""
      };
    } else if (isOpen) {
      try {
        if (oVisitor.getContext(`${sAttributeName}>`)) {
          oMetadataContext = {
            model: sAttributeName,
            path: ""
          };
        }
      } catch (e) {
        return undefined;
      }
    }
    return oMetadataContext;
  }

  /**
   * Parse the incoming XML node and try to resolve the properties defined there.
   *
   * @param oMetadata The metadata for the building block
   * @param oNode The XML node to parse
   * @param isPublic Whether the building block is used in a public context or not
   * @param oVisitor The visitor instance
   */
  async function processProperties(oMetadata, oNode, isPublic, oVisitor) {
    const definitionProperties = oMetadata.properties;

    // Retrieve properties values
    const aDefinitionPropertiesKeys = Object.keys(definitionProperties);
    const propertyValues = {};
    for (const sKeyValue of aDefinitionPropertiesKeys) {
      if (definitionProperties[sKeyValue].type === "object") {
        propertyValues[sKeyValue] = definitionProperties[sKeyValue].defaultValue && deepClone(definitionProperties[sKeyValue].defaultValue); // To avoid values being reused across macros
      } else {
        propertyValues[sKeyValue] = definitionProperties[sKeyValue].defaultValue;
      }
      if (oNode.hasAttribute(sKeyValue) && isPublic && definitionProperties[sKeyValue].isPublic === false) {
        Log.error(`Property ${sKeyValue} was ignored as it is not intended for public usage`);
      } else if (oNode.hasAttribute(sKeyValue)) {
        await oVisitor.visitAttribute(oNode, oNode.attributes.getNamedItem(sKeyValue));
        let value = oNode.getAttribute(sKeyValue);
        if (value !== undefined && value !== null) {
          if (typeof value === "string" && !value.startsWith("{")) {
            switch (definitionProperties[sKeyValue].type) {
              case "boolean":
                value = value === "true";
                break;
              case "number":
                value = Number(value);
                break;
            }
          }
          value = value === null ? undefined : value;
          propertyValues[sKeyValue] = value;
        }
      }
    }
    return propertyValues;
  }

  /**
   * Parse the incoming XML node and try to resolve the binding contexts defined inside.
   *
   * @param oMetadata The metadata for the building block
   * @param oSettings The settings object
   * @param oNode The XML node to parse
   * @param isPublic Whether the building block is used in a public context or not
   * @param oVisitor The visitor instance
   * @param mContexts The contexts to be used
   * @param propertyValues The current property values
   * @returns The processed and missing contexts
   */
  function processContexts(oMetadata, oSettings, oNode, isPublic, oVisitor, mContexts, propertyValues) {
    oSettings.currentContextPath = oSettings.bindingContexts.contextPath;
    const mMissingContext = {};
    const oDefinitionContexts = oMetadata.metadataContexts;
    const aDefinitionContextsKeys = Object.keys(oDefinitionContexts);
    // Since the metaPath and other property can be relative to the contextPath we need to evaluate the current contextPath first
    const contextPathIndex = aDefinitionContextsKeys.indexOf("contextPath");
    if (contextPathIndex !== -1) {
      // If it is defined we extract it and reinsert it in the first position of the array
      const contextPathDefinition = aDefinitionContextsKeys.splice(contextPathIndex, 1);
      aDefinitionContextsKeys.splice(0, 0, contextPathDefinition[0]);
    }
    for (const sAttributeName of aDefinitionContextsKeys) {
      // If the context was resolved as a property (binding / xml aggregation) then we don't need to resolve it here.
      const propertyValue = propertyValues[sAttributeName];
      if (propertyValue !== undefined && typeof propertyValue === "object" && Object.keys(propertyValue).length > 0) {
        delete oMetadata.metadataContexts[sAttributeName];
        continue;
      }
      const bDoNotResolve = isPublic && oDefinitionContexts[sAttributeName].isPublic === false && oNode.hasAttribute(sAttributeName);
      const oMetadataContext = _getMetadataContext(oSettings, oNode, sAttributeName, oVisitor, bDoNotResolve, oMetadata.isOpen ?? false);
      if (oMetadataContext) {
        oMetadataContext.name = sAttributeName;
        addSingleContext(mContexts, oVisitor, oMetadataContext);
        if ((sAttributeName === "entitySet" || sAttributeName === "contextPath") && !oSettings.bindingContexts.hasOwnProperty(sAttributeName)) {
          oSettings.bindingContexts[sAttributeName] = mContexts[sAttributeName];
        }
        if (sAttributeName === "contextPath") {
          oSettings.currentContextPath = mContexts[sAttributeName];
        }
        if (mContexts[sAttributeName] !== undefined) {
          propertyValues[sAttributeName] = mContexts[sAttributeName];
        } else if (typeof propertyValues[sAttributeName] === "string") {
          // If the binding couldn't be resolved consider that there was no value here
          delete oMetadata.metadataContexts[sAttributeName];
        }
      } else {
        mMissingContext[sAttributeName] = true;
      }
    }
    return mMissingContext;
  }
  function parseAggregation(oAggregation, processAggregations) {
    const oOutObjects = {};
    if (oAggregation && oAggregation.children.length > 0) {
      const children = oAggregation.children;
      for (let childIdx = 0; childIdx < children.length; childIdx++) {
        const childDefinition = children[childIdx];
        let childKey = childDefinition.getAttribute("key") || childDefinition.getAttribute("id");
        if (childKey) {
          childKey = `InlineXML_${childKey}`;
          childDefinition.setAttribute("key", childKey);
          let aggregationObject = {
            key: childKey,
            position: {
              placement: childDefinition.getAttribute("placement") || Placement.After,
              anchor: childDefinition.getAttribute("anchor") || undefined
            },
            type: "Slot"
          };
          if (processAggregations) {
            aggregationObject = processAggregations(childDefinition, aggregationObject);
          }
          oOutObjects[aggregationObject.key] = aggregationObject;
        } else if (childDefinition.tagName !== "slot") {
          Log.error(`The aggregation ${childDefinition.nodeName} is missing a Key attribute. It is not displayed`);
        }
      }
    }
    return oOutObjects;
  }

  /**
   * Processes the child nodes of the building block and parses them as either aggregations or object-/array-based values.
   *
   * @param oNode The XML node for which to process the children
   * @param oVisitor The visitor instance
   * @param oMetadata The metadata for the building block
   * @param isPublic Whether the building block is used in a public context or not
   * @param propertyValues The values of already parsed property
   */
  async function processChildren(oNode, oVisitor, oMetadata, isPublic, propertyValues) {
    const oAggregations = {};
    if (oNode.firstElementChild !== null) {
      let oFirstElementChild = oNode.firstElementChild;
      while (oFirstElementChild !== null) {
        if (oFirstElementChild.namespaceURI === XMLTEMPLATING_NS) {
          // In case we encounter a templating tag, run the visitor on it and continue with the resulting child
          const oParent = oFirstElementChild.parentNode;
          if (oParent) {
            const iChildIndex = Array.from(oParent.children).indexOf(oFirstElementChild);
            await oVisitor.visitNode(oFirstElementChild);
            oFirstElementChild = oParent.children[iChildIndex] ? oParent.children[iChildIndex] : null;
          } else {
            // Not sure how this could happen but I also don't want to create infinite loops
            oFirstElementChild = oFirstElementChild.nextElementSibling;
          }
        } else {
          const sChildName = oFirstElementChild.localName;
          let sAggregationName = sChildName;
          if (sAggregationName[0].toUpperCase() === sAggregationName[0]) {
            // not a sub aggregation, go back to default Aggregation
            sAggregationName = oMetadata.defaultAggregation || "";
          }
          const aggregationDefinition = oMetadata.aggregations[sAggregationName];
          if (aggregationDefinition !== undefined && !aggregationDefinition.slot) {
            const parsedAggregation = parseAggregation(oFirstElementChild, aggregationDefinition.processAggregations);
            propertyValues[sAggregationName] = parsedAggregation;
            for (const parsedAggregationKey in parsedAggregation) {
              oMetadata.aggregations[parsedAggregationKey] = parsedAggregation[parsedAggregationKey];
            }
          }
          oFirstElementChild = oFirstElementChild.nextElementSibling;
        }
      }
      oFirstElementChild = oNode.firstElementChild;
      while (oFirstElementChild !== null) {
        const oNextChild = oFirstElementChild.nextElementSibling;
        const sChildName = oFirstElementChild.localName;
        let sAggregationName = sChildName;
        if (sAggregationName[0].toUpperCase() === sAggregationName[0]) {
          // not a sub aggregation, go back to default Aggregation
          sAggregationName = oMetadata.defaultAggregation || "";
        }
        if (Object.keys(oMetadata.aggregations).indexOf(sAggregationName) !== -1 && (!isPublic || oMetadata.aggregations[sAggregationName].isPublic === true)) {
          const aggregationDefinition = oMetadata.aggregations[sAggregationName];
          if (!aggregationDefinition.slot && oFirstElementChild !== null && oFirstElementChild.children.length > 0) {
            await oVisitor.visitNode(oFirstElementChild);
            let childDefinition = oFirstElementChild.firstElementChild;
            while (childDefinition) {
              const nextChild = childDefinition.nextElementSibling;
              if (!aggregationDefinition.hasVirtualNode) {
                const childWrapper = document.createElementNS(oNode.namespaceURI, childDefinition.getAttribute("key"));
                childWrapper.appendChild(childDefinition);
                oAggregations[childDefinition.getAttribute("key")] = childWrapper;
              } else {
                oAggregations[childDefinition.getAttribute("key")] = childDefinition;
              }
              childDefinition.removeAttribute("key");
              childDefinition = nextChild;
            }
          } else if (aggregationDefinition.slot) {
            await oVisitor.visitNode(oFirstElementChild);
            if (sAggregationName !== sChildName) {
              if (!oAggregations[sAggregationName]) {
                const oNewChild = document.createElementNS(oNode.namespaceURI, sAggregationName);
                oAggregations[sAggregationName] = oNewChild;
              }
              oAggregations[sAggregationName].appendChild(oFirstElementChild);
            } else {
              oAggregations[sAggregationName] = oFirstElementChild;
            }
          }
        } else if (Object.keys(oMetadata.properties).indexOf(sAggregationName) !== -1) {
          await oVisitor.visitNode(oFirstElementChild);
          if (oMetadata.properties[sAggregationName].type === "object") {
            // Object Type properties
            const aggregationPropertyValues = {};
            const attributeNames = oFirstElementChild.getAttributeNames();
            for (const attributeName of attributeNames) {
              aggregationPropertyValues[attributeName] = oFirstElementChild.getAttribute(attributeName);
            }
            if (oFirstElementChild.children.length) {
              //retrieve one level subObject properties
              for (let childIndex = 0; childIndex < oFirstElementChild.children.length; childIndex++) {
                const subChild = oFirstElementChild.children[childIndex];
                const subObjectKey = subChild.localName;
                const subObject = {};
                const subChildAttributeNames = subChild.getAttributeNames();
                for (const subChildAttributeName of subChildAttributeNames) {
                  subObject[subChildAttributeName] = subChild.getAttribute(subChildAttributeName);
                }
                aggregationPropertyValues[subObjectKey] = subObject;
              }
            }
            propertyValues[sAggregationName] = aggregationPropertyValues;
          } else if (oMetadata.properties[sAggregationName].type === "array") {
            if (oFirstElementChild !== null && oFirstElementChild.children.length > 0) {
              const children = oFirstElementChild.children;
              const oOutObjects = [];
              for (let childIdx = 0; childIdx < children.length; childIdx++) {
                const childDefinition = children[childIdx];
                // non keyed child, just add it to the aggregation
                const myChild = {};
                const attributeNames = childDefinition.getAttributeNames();
                for (const attributeName of attributeNames) {
                  myChild[attributeName] = childDefinition.getAttribute(attributeName);
                }
                oOutObjects.push(myChild);
              }
              propertyValues[sAggregationName] = oOutObjects;
            }
          }
        }
        oFirstElementChild = oNextChild;
      }
    }
    return oAggregations;
  }
  function processSlots(oAggregations, oMetadataAggregations, oNode) {
    let processCustomData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (Object.keys(oAggregations).length > 0) {
      Object.keys(oAggregations).forEach(function (sAggregationName) {
        const oAggregationElement = oAggregations[sAggregationName];
        if (oNode !== null && oNode !== undefined && oAggregationElement) {
          // slots can have :: as keys which is not a valid aggregation name therefore replacing them
          const oElementChild = oAggregationElement.firstElementChild;
          if (!["dependents", "customData", "layoutData"].includes(sAggregationName)) {
            const sSlotName = oMetadataAggregations[sAggregationName] !== undefined && oMetadataAggregations[sAggregationName].slot || sAggregationName;
            const oTargetElement = oNode.querySelector(`slot[name='${sSlotName}']`);
            if (oTargetElement !== null) {
              const oNewChild = prepareAggregationElement(oNode, sAggregationName, oElementChild);
              oTargetElement.replaceWith(...oNewChild.children); // Somehow TS doesn't like this but the documentation says is should work
            }
          } else if (processCustomData && oElementChild !== null) {
            const oNewChild = prepareAggregationElement(oNode, sAggregationName, oElementChild);
            oNode.appendChild(oNewChild);
          }
        }
      });
    }
  }
  function prepareAggregationElement(oNode, sAggregationName, oElementChild) {
    const oNewChild = document.createElementNS(oNode.namespaceURI, sAggregationName.replace(/:/gi, "_"));
    while (oElementChild) {
      const oNextChild = oElementChild.nextElementSibling;
      oNewChild.appendChild(oElementChild);
      oElementChild = oNextChild;
    }
    return oNewChild;
  }
  async function processBuildingBlock(BuildingBlockClass, oNode, oVisitor) {
    let isPublic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const oMetadata = transformMetadata(BuildingBlockClass.metadata);
    const sFragmentName = oMetadata.fragment ?? `${oMetadata.namespace ?? oMetadata.publicNamespace}.${oMetadata.xmlTag ?? oMetadata.name}`;
    const mContexts = {};
    const oSettings = oVisitor.getSettings();

    // Add an empty converter context if there is none in order to have a place to store object values
    oSettings.models.converterContext ??= new JSONModel();

    //Inject storage for macros
    if (!oSettings[sFragmentName]) {
      oSettings[sFragmentName] = {};
    }

    // First of all we need to visit the attributes to resolve the properties and the metadata contexts
    const propertyValues = await processProperties(oMetadata, oNode, isPublic, oVisitor);
    const initialKeys = Object.keys(propertyValues);
    const mMissingContext = processContexts(oMetadata, oSettings, oNode, isPublic, oVisitor, mContexts, propertyValues);
    try {
      // Aggregation and complex type support
      const oAggregations = await processChildren(oNode, oVisitor, oMetadata, isPublic, propertyValues);
      let oControlConfig = {};
      if (oSettings.models.viewData) {
        // Only used in the Field macro and even then maybe not really useful
        oControlConfig = oSettings.models.viewData.getProperty("/controlConfiguration");
      }
      let processedPropertyValues = propertyValues;
      Object.keys(propertyValues).forEach(propName => {
        var _BuildingBlockClass$m, _oData, _oData$isA;
        let oData = propertyValues[propName];
        //check for additional processing function to validate / overwrite parameters
        const originalDefinition = BuildingBlockClass === null || BuildingBlockClass === void 0 ? void 0 : (_BuildingBlockClass$m = BuildingBlockClass.metadata) === null || _BuildingBlockClass$m === void 0 ? void 0 : _BuildingBlockClass$m.properties[propName];
        if (originalDefinition !== null && originalDefinition !== void 0 && originalDefinition.validate) {
          oData = originalDefinition.validate(oData) || oData;
        }
        if ((_oData = oData) !== null && _oData !== void 0 && (_oData$isA = _oData.isA) !== null && _oData$isA !== void 0 && _oData$isA.call(_oData, SAP_UI_MODEL_CONTEXT) && !oData.getModel().isA("sap.ui.model.odata.v4.ODataMetaModel")) {
          propertyValues[propName] = oData.getObject();
        }
      });
      propertyValues.isPublic = isPublic;
      const oInstance = new BuildingBlockClass({
        ...propertyValues,
        ...oAggregations
      }, oControlConfig, oSettings);
      processedPropertyValues = oInstance.getProperties();
      Object.keys(oMetadata.metadataContexts).forEach(function (sContextName) {
        if (processedPropertyValues.hasOwnProperty(sContextName)) {
          const targetObject = processedPropertyValues[sContextName];
          if (isContext(targetObject)) {
            mContexts[sContextName] = targetObject;
          } else if (typeof targetObject === "object") {
            const attributeValue = storeObjectValue(targetObject);
            oSettings.models.converterContext.setProperty(attributeValue, targetObject);
            const newContext = oSettings.models.converterContext.createBindingContext(attributeValue);
            unstoreObjectValue(attributeValue);
            mContexts[sContextName] = newContext;
          }
        }
      });
      const oAttributesModel = new AttributeModel(oNode, processedPropertyValues, BuildingBlockClass);
      mContexts["this"] = oAttributesModel.createBindingContext("/");
      let oPreviousMacroInfo;

      // Keep track
      if (TraceInfo.isTraceInfoActive()) {
        const oTraceInfo = TraceInfo.traceMacroCalls(sFragmentName, oMetadata, mContexts, oNode, oVisitor);
        if (oTraceInfo !== null && oTraceInfo !== void 0 && oTraceInfo.macroInfo) {
          oPreviousMacroInfo = oSettings["_macroInfo"];
          oSettings["_macroInfo"] = oTraceInfo.macroInfo;
        }
      }
      validateMacroSignature(sFragmentName, oMetadata, mContexts, oNode);
      const oContextVisitor = oVisitor.with(mContexts, oMetadata.isOpen !== undefined ? !oMetadata.isOpen : true);
      const oParent = oNode.parentNode;
      let iChildIndex;
      let oPromise;
      if (oParent) {
        iChildIndex = Array.from(oParent.children).indexOf(oNode);
        if (oMetadata.fragment) {
          oPromise = oContextVisitor.insertFragment(sFragmentName, oNode);
        } else {
          const templateString = await oInstance.getTemplate(oNode);
          if (BuildingBlockClass.isRuntime) {
            // For runtime building blocks, we need to attach all objects to the converterContext directly, as the actual rendering takes place at runtime
            for (const storeKey in temporaryObjectStore) {
              const data = unstoreObjectValue(storeKey);
              oSettings.models.converterContext.setProperty(storeKey, data);
            }
          }
          let hasError = "";
          if (templateString) {
            let hasParseError = false;
            let parsedTemplate = parseXMLString(templateString, true);
            // For safety purpose we try to detect trailing text in between XML Tags
            for (const element of parsedTemplate) {
              const iter = document.createNodeIterator(element, NodeFilter.SHOW_TEXT);
              let textnode = iter.nextNode();
              if (element.localName === "parsererror") {
                hasParseError = true;
              }
              while (textnode) {
                if (textnode.textContent && textnode.textContent.trim().length > 0) {
                  hasError = textnode.textContent;
                }
                textnode = iter.nextNode();
              }
            }
            if (hasParseError) {
              // If there is a parseerror while processing the XML it means the XML itself is malformed, as such we rerun the template process
              // Setting isTraceMode true will make it so that each xml` expression is checked for validity from XML perspective
              // If an error is found it's returned instead of the normal fragment
              Log.error(`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`);
              parsedTemplate = await processXmlInTrace(async () => {
                var _oInstance$getTemplat;
                const initialTemplate = await ((_oInstance$getTemplat = oInstance.getTemplate) === null || _oInstance$getTemplat === void 0 ? void 0 : _oInstance$getTemplat.call(oInstance, oNode));
                return parseXMLString(initialTemplate ?? "", true);
              });
            } else if (hasError.length > 0) {
              // If there is trailing text we create a standard error and display it.
              Log.error(`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`);
              const oErrorText = createErrorXML([`Error while processing building block ${oMetadata.xmlTag || oMetadata.name}`, `Trailing text was found in the XML: ${hasError}`], parsedTemplate.map(template => template.outerHTML).join("\n"));
              parsedTemplate = parseXMLString(oErrorText, true);
            }
            oNode.replaceWith(...parsedTemplate);
            const visitedNodes = parsedTemplate.map(async internalNode => {
              processSlots(oAggregations, oMetadata.aggregations, internalNode, false);
              return oContextVisitor.visitNode(internalNode);
            });
            oPromise = Promise.all(visitedNodes);
          } else {
            oNode.remove();
            oPromise = Promise.resolve();
          }
        }
        await oPromise;
        const oMacroElement = oParent.children[iChildIndex];
        processSlots(oAggregations, oMetadata.aggregations, oMacroElement, true);
        if (oMacroElement !== undefined) {
          const oRemainingSlots = oMacroElement.querySelectorAll("slot");
          oRemainingSlots.forEach(function (oSlotElement) {
            oSlotElement.remove();
          });
        }
      }
      if (oPreviousMacroInfo) {
        //restore macro info if available
        oSettings["_macroInfo"] = oPreviousMacroInfo;
      } else {
        delete oSettings["_macroInfo"];
      }
    } catch (e) {
      // In case there is a generic error (usually code error), we retrieve the current context information and create a dedicated error message
      const traceDetails = {
        initialProperties: {},
        resolvedProperties: {},
        missingContexts: mMissingContext
      };
      for (const propertyName of initialKeys) {
        const propertyValue = propertyValues[propertyName];
        if (isContext(propertyValue)) {
          traceDetails.initialProperties[propertyName] = {
            path: propertyValue.getPath(),
            value: propertyValue.getObject()
          };
        } else {
          traceDetails.initialProperties[propertyName] = propertyValue;
        }
      }
      for (const propertyName in propertyValues) {
        const propertyValue = propertyValues[propertyName];
        if (!initialKeys.includes(propertyName)) {
          if (isContext(propertyValue)) {
            traceDetails.resolvedProperties[propertyName] = {
              path: propertyValue.getPath(),
              value: propertyValue.getObject()
            };
          } else {
            traceDetails.resolvedProperties[propertyName] = propertyValue;
          }
        }
      }
      Log.error(e);
      const oError = createErrorXML([`Error while processing building block ${oMetadata.name}`], oNode.outerHTML, traceDetails, e.stack);
      const oTemplate = parseXMLString(oError, true);
      oNode.replaceWith(...oTemplate);
    }
  }
  function addSingleContext(mContexts, oVisitor, oCtx) {
    const sKey = oCtx.name || oCtx.model || undefined;
    if (mContexts[sKey]) {
      return; // do not add twice
    }

    try {
      let sContextPath = oCtx.path;
      if (oCtx.model !== null) {
        sContextPath = `${oCtx.model}>${sContextPath}`;
      }
      const mSetting = oVisitor.getSettings();
      if (oCtx.model === "converterContext" && oCtx.path.length > 0) {
        mContexts[sKey] = mSetting.models[oCtx.model].getContext(oCtx.path /*, mSetting.bindingContexts[oCtx.model]*/); // add the context to the visitor
      } else if (!mSetting.bindingContexts[oCtx.model] && mSetting.models[oCtx.model]) {
        mContexts[sKey] = mSetting.models[oCtx.model].getContext(oCtx.path); // add the context to the visitor
      } else {
        mContexts[sKey] = oVisitor.getContext(sContextPath); // add the context to the visitor
      }
    } catch (ex) {
      // ignore the context as this can only be the case if the model is not ready,
      // i.e. not a preprocessing model but maybe a model for providing afterwards
    }
  }

  /**
   * Register a building block definition to be used inside the xml template processor.
   *
   * @param BuildingBlockClass The building block definition
   */
  function registerBuildingBlock(BuildingBlockClass) {
    if (BuildingBlockClass.metadata.namespace !== undefined) {
      XMLPreprocessor.plugIn(async (oNode, oVisitor) => processBuildingBlock(BuildingBlockClass, oNode, oVisitor), BuildingBlockClass.metadata.namespace, BuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name);
    }
    if (BuildingBlockClass.metadata.publicNamespace !== undefined) {
      XMLPreprocessor.plugIn(async (oNode, oVisitor) => processBuildingBlock(BuildingBlockClass, oNode, oVisitor, true), BuildingBlockClass.metadata.publicNamespace, BuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name);
    }
  }

  /**
   * UnRegister a building block definition so that it is no longer used inside the xml template processor.
   *
   * @param BuildingBlockClass The building block definition
   */
  _exports.registerBuildingBlock = registerBuildingBlock;
  function unregisterBuildingBlock(BuildingBlockClass) {
    if (BuildingBlockClass.metadata.namespace !== undefined) {
      XMLPreprocessor.plugIn(null, BuildingBlockClass.metadata.namespace, BuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name);
    }
    if (BuildingBlockClass.metadata.publicNamespace !== undefined) {
      XMLPreprocessor.plugIn(null, BuildingBlockClass.metadata.publicNamespace, BuildingBlockClass.metadata.xmlTag || BuildingBlockClass.metadata.name);
    }
  }
  _exports.unregisterBuildingBlock = unregisterBuildingBlock;
  function createErrorXML(errorMessages, xmlFragment, additionalData, stack) {
    const errorLabels = errorMessages.map(errorMessage => xml`<m:Label text="${escapeXMLAttributeValue(errorMessage)}"/>`);
    let errorStack = "";
    if (stack) {
      const stackFormatted = btoa(`<pre>${stack}</pre>`);
      errorStack = xml`<m:FormattedText htmlText="${`{= BBF.base64Decode('${stackFormatted}') }`}" />`;
    }
    let additionalText = "";
    if (additionalData) {
      additionalText = xml`<m:VBox>
						<m:Label text="Trace Info"/>
						<code:CodeEditor type="json"  value="${`{= BBF.base64Decode('${btoa(JSON.stringify(additionalData, null, 4))}') }`}" height="300px" />
					</m:VBox>`;
    }
    return xml`<controls:FormElementWrapper xmlns:controls="sap.fe.core.controls">
					<m:VBox xmlns:m="sap.m" xmlns:code="sap.ui.codeeditor" core:require="{BBF:'sap/fe/core/buildingBlocks/BuildingBlockFormatter'}">
					${errorLabels}
					${errorStack}
						<grid:CSSGrid gridTemplateRows="fr" gridTemplateColumns="repeat(2,1fr)" gridGap="1rem" xmlns:grid="sap.ui.layout.cssgrid" >
							<m:VBox>
								<m:Label text="How the building block was called"/>
								<code:CodeEditor type="xml" value="${`{= BBF.base64Decode('${btoa(xmlFragment.replaceAll("&gt;", ">"))}') }`}" height="300px" />
							</m:VBox>
							${additionalText}
						</grid:CSSGrid>
					</m:VBox>
				</controls:FormElementWrapper>`;
  }
  const temporaryObjectStore = {};

  /**
   * Stores an object value in a temporary storage and returns an ID used to retrieve this value at a later point in time.
   *
   * Required as there is functionality like the xml` function, which might take objects as parameters but needs to return a serialized string.
   *
   * @param value Value to store
   * @returns ID to retrieve this value
   */
  function storeObjectValue(value) {
    const propertyUID = `/uid--${uid()}`;
    temporaryObjectStore[propertyUID] = value;
    return propertyUID;
  }

  /**
   * Unstores an object from a temporary store by removing it and returning its object value.
   *
   * @param propertyUID ID to retrieve this value
   * @returns Object value
   */
  function unstoreObjectValue(propertyUID) {
    const value = temporaryObjectStore[propertyUID];
    delete temporaryObjectStore[propertyUID];
    return value;
  }
  let processNextXmlInTrace = false;
  /**
   * Makes sure that all xml` calls inside the given method are processed in trace mode.
   *
   * @param method The method to execute
   * @returns The return value of the given method
   */
  const processXmlInTrace = function (method) {
    processNextXmlInTrace = true;
    let returnValue;
    try {
      returnValue = method();
    } finally {
      processNextXmlInTrace = false;
    }
    return returnValue;
  };

  /**
   * Parse an XML string and return the associated document.
   *
   * @param xmlString The xml string
   * @param [addDefaultNamespaces] Whether or not default namespaces should be added
   * @returns The XML document.
   */
  function parseXMLString(xmlString) {
    var _output2, _output3;
    let addDefaultNamespaces = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (addDefaultNamespaces) {
      xmlString = `<template
						xmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"
						xmlns:m="sap.m"
						xmlns:macros="sap.fe.macros"
						xmlns:core="sap.ui.core"
						xmlns:mdc="sap.ui.mdc"
						xmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">${xmlString}</template>`;
    }
    const xmlDocument = DOMParserInstance.parseFromString(xmlString, "text/xml");
    let output = xmlDocument.firstElementChild;
    while (((_output = output) === null || _output === void 0 ? void 0 : _output.localName) === "template") {
      var _output;
      output = output.firstElementChild;
    }
    const children = (_output2 = output) !== null && _output2 !== void 0 && _output2.parentElement ? (_output3 = output) === null || _output3 === void 0 ? void 0 : _output3.parentElement.children : [output];
    return Array.from(children);
  }

  /**
   * Escape an XML attribute value.
   *
   * @param value The attribute value to escape.
   * @returns The escaped string.
   */
  _exports.parseXMLString = parseXMLString;
  function escapeXMLAttributeValue(value) {
    return value === null || value === void 0 ? void 0 : value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
  }
  _exports.escapeXMLAttributeValue = escapeXMLAttributeValue;
  function renderInTraceMode(outStr) {
    var _xmlResult$;
    const xmlResult = parseXMLString(outStr, true);
    if ((xmlResult === null || xmlResult === void 0 ? void 0 : xmlResult.length) > 0 && ((_xmlResult$ = xmlResult[0]) === null || _xmlResult$ === void 0 ? void 0 : _xmlResult$.localName) === "parsererror") {
      const errorMessage = xmlResult[0].innerText || xmlResult[0].innerHTML;
      return createErrorXML([errorMessage.split("\n")[0]], outStr);
    } else {
      return outStr;
    }
  }
  /**
   * Create a string representation of the template literal while handling special object case.
   *
   * @param strings The string parts of the template literal
   * @param values The values part of the template literal
   * @returns The XML string document representing the string that was used.
   */
  const xml = function (strings) {
    let outStr = "";
    let i;
    for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      values[_key - 1] = arguments[_key];
    }
    for (i = 0; i < values.length; i++) {
      outStr += strings[i];

      // Handle the different case of object, if it's an array we join them, if it's a binding expression then we compile it.
      const value = values[i];
      if (Array.isArray(value) && value.length > 0 && typeof value[0] === "string") {
        outStr += value.flat(5).join("\n").trim();
      } else if (isFunctionArray(value)) {
        outStr += value.map(valuefn => valuefn()).join("\n");
      } else if (isBindingToolkitExpression(value)) {
        const compiledExpression = compileExpression(value);
        outStr += escapeXMLAttributeValue(compiledExpression);
      } else if (typeof value === "undefined") {
        outStr += "{this>undefinedValue}";
      } else if (typeof value === "function") {
        outStr += value();
      } else if (typeof value === "object" && value !== null) {
        if (isContext(value)) {
          outStr += value.getPath();
        } else {
          const propertyUId = storeObjectValue(value);
          outStr += `${propertyUId}`;
        }
      } else if (value && typeof value === "string" && !value.startsWith("<") && !value.startsWith("&lt;")) {
        outStr += escapeXMLAttributeValue(value);
      } else {
        outStr += value;
      }
    }
    outStr += strings[i];
    outStr = outStr.trim();
    if (processNextXmlInTrace) {
      return renderInTraceMode(outStr);
    }
    return outStr;
  };
  _exports.xml = xml;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", ["sap/base/Log","sap/base/util/deepClone","sap/base/util/uid","sap/fe/core/buildingBlocks/AttributeModel","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/ui/base/BindingParser","sap/ui/core/util/XMLPreprocessor","sap/ui/model/json/JSONModel","./TraceInfo"],function(e,t,n,o,i,s,a,r,l,c,d){"use strict";var u={};var f=a.isFunctionArray;var p=a.isContext;var m=s.isBindingToolkitExpression;var g=s.compileExpression;var h=i.Placement;const b="sap.fe.core.buildingBlocks.BuildingBlockTemplateProcessor";const x="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1";const y=new DOMParser;function v(e,t,n,o){const i=t[o];const s=i===null||i===void 0?void 0:i.getObject();if(n.required===true&&(!i||s===null)){throw new Error(`${e}: Required metadataContext '${o}' is missing`)}else if(s){if(s.hasOwnProperty("$kind")&&s.$kind!==undefined&&n.expectedTypes!==undefined){if(n.expectedTypes.indexOf(s.$kind)===-1){throw new Error(`${e}: '${o}' must be '$kind' '${n.expectedTypes}' but is '${s.$kind}': ${i.getPath()}`)}}else if(s.hasOwnProperty("$Type")&&s.$Type!==undefined&&n.expectedAnnotationTypes){if(n.expectedAnnotationTypes.indexOf(s.$Type)===-1){throw new Error(`${e}: '${o}' must be '$Type' '${n.expectedAnnotationTypes}' but is '${s.$Type}': ${i.getPath()}`)}}}}function C(t,n,o,i){const s=n.metadataContexts&&Object.keys(n.metadataContexts)||[],a=n.properties&&Object.keys(n.properties)||[],r={};const l=i.getAttributeNames();for(const e of l){r[e]=true}s.forEach(function(e){const i=n.metadataContexts[e];v(t,o,i,e);delete r[e]});a.forEach(function(e){const o=n.properties[e];if(!i.hasAttribute(e)){if(o.required&&!o.hasOwnProperty("defaultValue")){throw new Error(`${t}: `+`Required property '${e}' is missing`)}}else{delete r[e]}});Object.keys(r).forEach(function(n){if(n.indexOf(":")<0&&!n.startsWith("xmlns")){e.warning(`Unchecked parameter: ${t}: ${n}`,undefined,b)}})}u.validateMacroSignature=C;const $="sap.ui.core.Element";const w="sap.ui.model.Context";u.SAP_UI_MODEL_CONTEXT=w;function P(e){const t={};const n={dependents:{type:$,slot:"dependents"},customData:{type:$,slot:"customData"},layoutData:{type:$,slot:"layoutData"},...e.aggregations};const o={};for(const n of Object.keys(e.properties)){const i=e.properties[n].type;if(i!==w){t[n]=e.properties[n]}if([w,"object","array"].includes(i)){o[n]=e.properties[n]}}return{...e,properties:t,metadataContexts:o,aggregations:n}}function A(e,t){let n;if(t&&t.startsWith("/")){n=t}else{let o=e.currentContextPath.getPath();if(!o.endsWith("/")){o+="/"}n=o+t}return{model:"metaModel",path:n}}function k(e,t,n){let o;if(n.startsWith("/uid--")&&!e.models.converterContext.getProperty(n)){const t=_(n);e.models.converterContext.setProperty(n,t);o={model:"converterContext",path:n}}else if(t==="metaPath"&&e.currentContextPath||t==="contextPath"){o=A(e,n)}else if(n&&n.startsWith("/")){o={model:"metaModel",path:n}}else{o={model:"metaModel",path:e.bindingContexts.entitySet?e.bindingContexts.entitySet.getPath(n):n}}return o}function O(e,t,n,o,i,s){let a;if(!i&&t.hasAttribute(n)){const o=t.getAttribute(n);a=r.complexParser(o);if(!a){a=k(e,n,o)}}else if(e.bindingContexts.hasOwnProperty(n)){a={model:n,path:""}}else if(s){try{if(o.getContext(`${n}>`)){a={model:n,path:""}}}catch(e){return undefined}}return a}async function E(n,o,i,s){const a=n.properties;const r=Object.keys(a);const l={};for(const n of r){if(a[n].type==="object"){l[n]=a[n].defaultValue&&t(a[n].defaultValue)}else{l[n]=a[n].defaultValue}if(o.hasAttribute(n)&&i&&a[n].isPublic===false){e.error(`Property ${n} was ignored as it is not intended for public usage`)}else if(o.hasAttribute(n)){await s.visitAttribute(o,o.attributes.getNamedItem(n));let e=o.getAttribute(n);if(e!==undefined&&e!==null){if(typeof e==="string"&&!e.startsWith("{")){switch(a[n].type){case"boolean":e=e==="true";break;case"number":e=Number(e);break}}e=e===null?undefined:e;l[n]=e}}}return l}function T(e,t,n,o,i,s,a){t.currentContextPath=t.bindingContexts.contextPath;const r={};const l=e.metadataContexts;const c=Object.keys(l);const d=c.indexOf("contextPath");if(d!==-1){const e=c.splice(d,1);c.splice(0,0,e[0])}for(const d of c){const c=a[d];if(c!==undefined&&typeof c==="object"&&Object.keys(c).length>0){delete e.metadataContexts[d];continue}const u=o&&l[d].isPublic===false&&n.hasAttribute(d);const f=O(t,n,d,i,u,e.isOpen??false);if(f){f.name=d;M(s,i,f);if((d==="entitySet"||d==="contextPath")&&!t.bindingContexts.hasOwnProperty(d)){t.bindingContexts[d]=s[d]}if(d==="contextPath"){t.currentContextPath=s[d]}if(s[d]!==undefined){a[d]=s[d]}else if(typeof a[d]==="string"){delete e.metadataContexts[d]}}else{r[d]=true}}return r}function N(t,n){const o={};if(t&&t.children.length>0){const i=t.children;for(let t=0;t<i.length;t++){const s=i[t];let a=s.getAttribute("key")||s.getAttribute("id");if(a){a=`InlineXML_${a}`;s.setAttribute("key",a);let e={key:a,position:{placement:s.getAttribute("placement")||h.After,anchor:s.getAttribute("anchor")||undefined},type:"Slot"};if(n){e=n(s,e)}o[e.key]=e}else if(s.tagName!=="slot"){e.error(`The aggregation ${s.nodeName} is missing a Key attribute. It is not displayed`)}}}return o}async function j(e,t,n,o,i){const s={};if(e.firstElementChild!==null){let a=e.firstElementChild;while(a!==null){if(a.namespaceURI===x){const e=a.parentNode;if(e){const n=Array.from(e.children).indexOf(a);await t.visitNode(a);a=e.children[n]?e.children[n]:null}else{a=a.nextElementSibling}}else{const e=a.localName;let t=e;if(t[0].toUpperCase()===t[0]){t=n.defaultAggregation||""}const o=n.aggregations[t];if(o!==undefined&&!o.slot){const e=N(a,o.processAggregations);i[t]=e;for(const t in e){n.aggregations[t]=e[t]}}a=a.nextElementSibling}}a=e.firstElementChild;while(a!==null){const r=a.nextElementSibling;const l=a.localName;let c=l;if(c[0].toUpperCase()===c[0]){c=n.defaultAggregation||""}if(Object.keys(n.aggregations).indexOf(c)!==-1&&(!o||n.aggregations[c].isPublic===true)){const o=n.aggregations[c];if(!o.slot&&a!==null&&a.children.length>0){await t.visitNode(a);let n=a.firstElementChild;while(n){const t=n.nextElementSibling;if(!o.hasVirtualNode){const t=document.createElementNS(e.namespaceURI,n.getAttribute("key"));t.appendChild(n);s[n.getAttribute("key")]=t}else{s[n.getAttribute("key")]=n}n.removeAttribute("key");n=t}}else if(o.slot){await t.visitNode(a);if(c!==l){if(!s[c]){const t=document.createElementNS(e.namespaceURI,c);s[c]=t}s[c].appendChild(a)}else{s[c]=a}}}else if(Object.keys(n.properties).indexOf(c)!==-1){await t.visitNode(a);if(n.properties[c].type==="object"){const e={};const t=a.getAttributeNames();for(const n of t){e[n]=a.getAttribute(n)}if(a.children.length){for(let t=0;t<a.children.length;t++){const n=a.children[t];const o=n.localName;const i={};const s=n.getAttributeNames();for(const e of s){i[e]=n.getAttribute(e)}e[o]=i}}i[c]=e}else if(n.properties[c].type==="array"){if(a!==null&&a.children.length>0){const e=a.children;const t=[];for(let n=0;n<e.length;n++){const o=e[n];const i={};const s=o.getAttributeNames();for(const e of s){i[e]=o.getAttribute(e)}t.push(i)}i[c]=t}}}a=r}}return s}function B(e,t,n){let o=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;if(Object.keys(e).length>0){Object.keys(e).forEach(function(i){const s=e[i];if(n!==null&&n!==undefined&&s){const e=s.firstElementChild;if(!["dependents","customData","layoutData"].includes(i)){const o=t[i]!==undefined&&t[i].slot||i;const s=n.querySelector(`slot[name='${o}']`);if(s!==null){const t=S(n,i,e);s.replaceWith(...t.children)}}else if(o&&e!==null){const t=S(n,i,e);n.appendChild(t)}}})}}function S(e,t,n){const o=document.createElementNS(e.namespaceURI,t.replace(/:/gi,"_"));while(n){const e=n.nextElementSibling;o.appendChild(n);n=e}return o}async function I(t,n,i){let s=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const a=P(t.metadata);const r=a.fragment??`${a.namespace??a.publicNamespace}.${a.xmlTag??a.name}`;const l={};const u=i.getSettings();u.models.converterContext??=new c;if(!u[r]){u[r]={}}const f=await E(a,n,s,i);const m=Object.keys(f);const g=T(a,u,n,s,i,l,f);try{const c=await j(n,i,a,s,f);let m={};if(u.models.viewData){m=u.models.viewData.getProperty("/controlConfiguration")}let g=f;Object.keys(f).forEach(e=>{var n,o,i;let s=f[e];const a=t===null||t===void 0?void 0:(n=t.metadata)===null||n===void 0?void 0:n.properties[e];if(a!==null&&a!==void 0&&a.validate){s=a.validate(s)||s}if((o=s)!==null&&o!==void 0&&(i=o.isA)!==null&&i!==void 0&&i.call(o,w)&&!s.getModel().isA("sap.ui.model.odata.v4.ODataMetaModel")){f[e]=s.getObject()}});f.isPublic=s;const h=new t({...f,...c},m,u);g=h.getProperties();Object.keys(a.metadataContexts).forEach(function(e){if(g.hasOwnProperty(e)){const t=g[e];if(p(t)){l[e]=t}else if(typeof t==="object"){const n=F(t);u.models.converterContext.setProperty(n,t);const o=u.models.converterContext.createBindingContext(n);_(n);l[e]=o}}});const b=new o(n,g,t);l["this"]=b.createBindingContext("/");let x;if(d.isTraceInfoActive()){const e=d.traceMacroCalls(r,a,l,n,i);if(e!==null&&e!==void 0&&e.macroInfo){x=u["_macroInfo"];u["_macroInfo"]=e.macroInfo}}C(r,a,l,n);const y=i.with(l,a.isOpen!==undefined?!a.isOpen:true);const v=n.parentNode;let $;let P;if(v){$=Array.from(v.children).indexOf(n);if(a.fragment){P=y.insertFragment(r,n)}else{const o=await h.getTemplate(n);if(t.isRuntime){for(const e in V){const t=_(e);u.models.converterContext.setProperty(e,t)}}let i="";if(o){let t=false;let s=U(o,true);for(const e of s){const n=document.createNodeIterator(e,NodeFilter.SHOW_TEXT);let o=n.nextNode();if(e.localName==="parsererror"){t=true}while(o){if(o.textContent&&o.textContent.trim().length>0){i=o.textContent}o=n.nextNode()}}if(t){e.error(`Error while processing building block ${a.xmlTag||a.name}`);s=await R(async()=>{var e;const t=await((e=h.getTemplate)===null||e===void 0?void 0:e.call(h,n));return U(t??"",true)})}else if(i.length>0){e.error(`Error while processing building block ${a.xmlTag||a.name}`);const t=L([`Error while processing building block ${a.xmlTag||a.name}`,`Trailing text was found in the XML: ${i}`],s.map(e=>e.outerHTML).join("\n"));s=U(t,true)}n.replaceWith(...s);const r=s.map(async e=>{B(c,a.aggregations,e,false);return y.visitNode(e)});P=Promise.all(r)}else{n.remove();P=Promise.resolve()}}await P;const o=v.children[$];B(c,a.aggregations,o,true);if(o!==undefined){const e=o.querySelectorAll("slot");e.forEach(function(e){e.remove()})}}if(x){u["_macroInfo"]=x}else{delete u["_macroInfo"]}}catch(t){const o={initialProperties:{},resolvedProperties:{},missingContexts:g};for(const e of m){const t=f[e];if(p(t)){o.initialProperties[e]={path:t.getPath(),value:t.getObject()}}else{o.initialProperties[e]=t}}for(const e in f){const t=f[e];if(!m.includes(e)){if(p(t)){o.resolvedProperties[e]={path:t.getPath(),value:t.getObject()}}else{o.resolvedProperties[e]=t}}}e.error(t);const i=L([`Error while processing building block ${a.name}`],n.outerHTML,o,t.stack);const s=U(i,true);n.replaceWith(...s)}}function M(e,t,n){const o=n.name||n.model||undefined;if(e[o]){return}try{let i=n.path;if(n.model!==null){i=`${n.model}>${i}`}const s=t.getSettings();if(n.model==="converterContext"&&n.path.length>0){e[o]=s.models[n.model].getContext(n.path)}else if(!s.bindingContexts[n.model]&&s.models[n.model]){e[o]=s.models[n.model].getContext(n.path)}else{e[o]=t.getContext(i)}}catch(e){}}function D(e){if(e.metadata.namespace!==undefined){l.plugIn(async(t,n)=>I(e,t,n),e.metadata.namespace,e.metadata.xmlTag||e.metadata.name)}if(e.metadata.publicNamespace!==undefined){l.plugIn(async(t,n)=>I(e,t,n,true),e.metadata.publicNamespace,e.metadata.xmlTag||e.metadata.name)}}u.registerBuildingBlock=D;function W(e){if(e.metadata.namespace!==undefined){l.plugIn(null,e.metadata.namespace,e.metadata.xmlTag||e.metadata.name)}if(e.metadata.publicNamespace!==undefined){l.plugIn(null,e.metadata.publicNamespace,e.metadata.xmlTag||e.metadata.name)}}u.unregisterBuildingBlock=W;function L(e,t,n,o){const i=e.map(e=>G`<m:Label text="${X(e)}"/>`);let s="";if(o){const e=btoa(`<pre>${o}</pre>`);s=G`<m:FormattedText htmlText="${`{= BBF.base64Decode('${e}') }`}" />`}let a="";if(n){a=G`<m:VBox>
						<m:Label text="Trace Info"/>
						<code:CodeEditor type="json"  value="${`{= BBF.base64Decode('${btoa(JSON.stringify(n,null,4))}') }`}" height="300px" />
					</m:VBox>`}return G`<controls:FormElementWrapper xmlns:controls="sap.fe.core.controls">
					<m:VBox xmlns:m="sap.m" xmlns:code="sap.ui.codeeditor" core:require="{BBF:'sap/fe/core/buildingBlocks/BuildingBlockFormatter'}">
					${i}
					${s}
						<grid:CSSGrid gridTemplateRows="fr" gridTemplateColumns="repeat(2,1fr)" gridGap="1rem" xmlns:grid="sap.ui.layout.cssgrid" >
							<m:VBox>
								<m:Label text="How the building block was called"/>
								<code:CodeEditor type="xml" value="${`{= BBF.base64Decode('${btoa(t.replaceAll("&gt;",">"))}') }`}" height="300px" />
							</m:VBox>
							${a}
						</grid:CSSGrid>
					</m:VBox>
				</controls:FormElementWrapper>`}const V={};function F(e){const t=`/uid--${n()}`;V[t]=e;return t}function _(e){const t=V[e];delete V[e];return t}let q=false;const R=function(e){q=true;let t;try{t=e()}finally{q=false}return t};function U(e){var t,n;let o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(o){e=`<template\n\t\t\t\t\t\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\t\t\t\t\t\txmlns:m="sap.m"\n\t\t\t\t\t\txmlns:macros="sap.fe.macros"\n\t\t\t\t\t\txmlns:core="sap.ui.core"\n\t\t\t\t\t\txmlns:mdc="sap.ui.mdc"\n\t\t\t\t\t\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1">${e}</template>`}const i=y.parseFromString(e,"text/xml");let s=i.firstElementChild;while(((a=s)===null||a===void 0?void 0:a.localName)==="template"){var a;s=s.firstElementChild}const r=(t=s)!==null&&t!==void 0&&t.parentElement?(n=s)===null||n===void 0?void 0:n.parentElement.children:[s];return Array.from(r)}u.parseXMLString=U;function X(e){return e===null||e===void 0?void 0:e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}u.escapeXMLAttributeValue=X;function H(e){var t;const n=U(e,true);if((n===null||n===void 0?void 0:n.length)>0&&((t=n[0])===null||t===void 0?void 0:t.localName)==="parsererror"){const t=n[0].innerText||n[0].innerHTML;return L([t.split("\n")[0]],e)}else{return e}}const G=function(e){let t="";let n;for(var o=arguments.length,i=new Array(o>1?o-1:0),s=1;s<o;s++){i[s-1]=arguments[s]}for(n=0;n<i.length;n++){t+=e[n];const o=i[n];if(Array.isArray(o)&&o.length>0&&typeof o[0]==="string"){t+=o.flat(5).join("\n").trim()}else if(f(o)){t+=o.map(e=>e()).join("\n")}else if(m(o)){const e=g(o);t+=X(e)}else if(typeof o==="undefined"){t+="{this>undefinedValue}"}else if(typeof o==="function"){t+=o()}else if(typeof o==="object"&&o!==null){if(p(o)){t+=o.getPath()}else{const e=F(o);t+=`${e}`}}else if(o&&typeof o==="string"&&!o.startsWith("<")&&!o.startsWith("&lt;")){t+=X(o)}else{t+=o}}t+=e[n];t=t.trim();if(q){return H(t)}return t};u.xml=G;return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/RuntimeBuildingBlock-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockBase", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/buildingBlocks/RuntimeBuildingBlockFragment", "sap/fe/core/helpers/TypeGuards"], function (BuildingBlockBase, BuildingBlockTemplateProcessor, RuntimeBuildingBlockFragment, TypeGuards) {
  "use strict";

  var _exports = {};
  var isContext = TypeGuards.isContext;
  var storeRuntimeBlock = RuntimeBuildingBlockFragment.storeRuntimeBlock;
  var xml = BuildingBlockTemplateProcessor.xml;
  var registerBuildingBlock = BuildingBlockTemplateProcessor.registerBuildingBlock;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  /**
   * Base class for runtime building blocks
   */
  let RuntimeBuildingBlock = /*#__PURE__*/function (_BuildingBlockBase) {
    _inheritsLoose(RuntimeBuildingBlock, _BuildingBlockBase);
    function RuntimeBuildingBlock() {
      return _BuildingBlockBase.apply(this, arguments) || this;
    }
    _exports = RuntimeBuildingBlock;
    RuntimeBuildingBlock.register = function register() {
      registerBuildingBlock(this);
      storeRuntimeBlock(this);
    };
    var _proto = RuntimeBuildingBlock.prototype;
    _proto.getTemplate = function getTemplate(oNode) {
      const metadata = this.constructor.metadata;
      const className = `${metadata.namespace ?? metadata.publicNamespace}.${metadata.name}`;
      const extraProps = [];
      // Function are defined as string but need to be resolved by UI5, as such we store them in an `event` property and will redispatch them later
      const functionHolderDefinition = [];
      const propertiesAssignedToFunction = [];
      const functionStringInOrder = [];
      for (const propertiesKey in metadata.properties) {
        let propertyValue = this[propertiesKey];
        if (propertyValue !== undefined && propertyValue !== null) {
          if (isContext(propertyValue)) {
            propertyValue = propertyValue.getPath();
          }
          if (metadata.properties[propertiesKey].type === "function") {
            functionHolderDefinition.push(propertyValue);
            functionStringInOrder.push(propertyValue);
            propertiesAssignedToFunction.push(propertiesKey);
          } else {
            extraProps.push(xml`feBB:${propertiesKey}="${propertyValue}"`);
          }
        }
      }
      if (functionHolderDefinition.length > 0) {
        extraProps.push(xml`functionHolder="${functionHolderDefinition.join(";")}"`);
        extraProps.push(xml`feBB:functionStringInOrder="${functionStringInOrder.join(",")}"`);
        extraProps.push(xml`feBB:propertiesAssignedToFunction="${propertiesAssignedToFunction.join(",")}"`);
      }
      // core:require need to be defined on the node itself to be picked up due to the templating step
      const coreRequire = (oNode === null || oNode === void 0 ? void 0 : oNode.getAttribute("core:require")) || undefined;
      if (coreRequire) {
        extraProps.push(xml`core:require="${coreRequire}"`);
      }
      return xml`<feBB:RuntimeBuildingBlockFragment
					xmlns:core="sap.ui.core"
					xmlns:feBB="sap.fe.core.buildingBlocks"
					fragmentName="${className}"

					id="{this>id}"
					type="FE_COMPONENTS"
					${extraProps}
				>
				</feBB:RuntimeBuildingBlockFragment>`;
    };
    return RuntimeBuildingBlock;
  }(BuildingBlockBase);
  RuntimeBuildingBlock.isRuntime = true;
  _exports = RuntimeBuildingBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/RuntimeBuildingBlock", ["sap/fe/core/buildingBlocks/BuildingBlockBase","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/buildingBlocks/RuntimeBuildingBlockFragment","sap/fe/core/helpers/TypeGuards"],function(e,t,n,i){"use strict";var o={};var r=i.isContext;var s=n.storeRuntimeBlock;var u=t.xml;var c=t.registerBuildingBlock;function p(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;l(e,t)}function l(e,t){l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return l(e,t)}let f=function(e){p(t,e);function t(){return e.apply(this,arguments)||this}o=t;t.register=function e(){c(this);s(this)};var n=t.prototype;n.getTemplate=function e(t){const n=this.constructor.metadata;const i=`${n.namespace??n.publicNamespace}.${n.name}`;const o=[];const s=[];const c=[];const p=[];for(const e in n.properties){let t=this[e];if(t!==undefined&&t!==null){if(r(t)){t=t.getPath()}if(n.properties[e].type==="function"){s.push(t);p.push(t);c.push(e)}else{o.push(u`feBB:${e}="${t}"`)}}}if(s.length>0){o.push(u`functionHolder="${s.join(";")}"`);o.push(u`feBB:functionStringInOrder="${p.join(",")}"`);o.push(u`feBB:propertiesAssignedToFunction="${c.join(",")}"`)}const l=(t===null||t===void 0?void 0:t.getAttribute("core:require"))||undefined;if(l){o.push(u`core:require="${l}"`)}return u`<feBB:RuntimeBuildingBlockFragment
					xmlns:core="sap.ui.core"
					xmlns:feBB="sap.fe.core.buildingBlocks"
					fragmentName="${i}"

					id="{this>id}"
					type="FE_COMPONENTS"
					${o}
				>
				</feBB:RuntimeBuildingBlockFragment>`};return t}(e);f.isRuntime=true;o=f;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/RuntimeBuildingBlockFragment-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/jsx-runtime/jsx", "sap/ui/base/ManagedObject", "sap/ui/core/Component", "sap/ui/core/Fragment"], function (CommonUtils, BindingToolkit, ClassSupport, jsx, ManagedObject, Component, Fragment) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var _exports = {};
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let RuntimeBuildingBlockFragment = (
  /**
   * Internal extension to the Fragment class in order to add some place to hold functions for runtime building blocks
   */
  _dec = defineUI5Class("sap.fe.core.buildingBlocks.RuntimeBuildingBlockFragment"), _dec2 = event(), _dec(_class = (_class2 = /*#__PURE__*/function (_Fragment) {
    _inheritsLoose(RuntimeBuildingBlockFragment, _Fragment);
    function RuntimeBuildingBlockFragment() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Fragment.call(this, ...args) || this;
      _initializerDefineProperty(_this, "functionHolder", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    _exports = RuntimeBuildingBlockFragment;
    return RuntimeBuildingBlockFragment;
  }(Fragment), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "functionHolder", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = RuntimeBuildingBlockFragment;
  const RUNTIME_BLOCKS = {};
  /**
   * Stores the class of a runtime building block to be loaded whenever the building block is used at runtime.
   *
   * @param BuildingBlockClass
   */
  function storeRuntimeBlock(BuildingBlockClass) {
    RUNTIME_BLOCKS[`${BuildingBlockClass.metadata.namespace ?? BuildingBlockClass.metadata.publicNamespace}.${BuildingBlockClass.metadata.name}`] = BuildingBlockClass;
  }
  _exports.storeRuntimeBlock = storeRuntimeBlock;
  RuntimeBuildingBlockFragment.registerType("FE_COMPONENTS", {
    load: async function (mSettings) {
      return Promise.resolve(RUNTIME_BLOCKS[mSettings.fragmentName]);
    },
    init: function (mSettings) {
      var _mSettings$customData, _mSettings$customData2, _mSettings$customData3, _mSettings$customData4, _mSettings$containing, _mSettings$containing2, _mSettings$containing3, _mSettings$containing4, _feCustomData$functio, _feCustomData$propert;
      let BuildingBlockClass = mSettings.fragmentContent;
      if (BuildingBlockClass === undefined) {
        // In some case we might have been called here synchronously (unstash case for instance), which means we didn't go through the load function
        BuildingBlockClass = RUNTIME_BLOCKS[mSettings.fragmentName];
      }
      if (BuildingBlockClass === undefined) {
        throw new Error(`No building block class for runtime building block ${mSettings.fragmentName} found`);
      }
      const classSettings = {};
      const feCustomData = ((_mSettings$customData = mSettings.customData) === null || _mSettings$customData === void 0 ? void 0 : (_mSettings$customData2 = _mSettings$customData[0]) === null || _mSettings$customData2 === void 0 ? void 0 : (_mSettings$customData3 = _mSettings$customData2.mProperties) === null || _mSettings$customData3 === void 0 ? void 0 : (_mSettings$customData4 = _mSettings$customData3.value) === null || _mSettings$customData4 === void 0 ? void 0 : _mSettings$customData4["sap.fe.core.buildingBlocks"]) || {};
      delete mSettings.customData;
      const functionHolder = mSettings.functionHolder ?? [];
      delete mSettings.functionHolder;

      // containingView can also be a fragment, so we have to use the controller to be sure to get the actual view
      const containingView = ((_mSettings$containing = (_mSettings$containing2 = mSettings.containingView).getController) === null || _mSettings$containing === void 0 ? void 0 : (_mSettings$containing3 = (_mSettings$containing4 = _mSettings$containing.call(_mSettings$containing2)).getView) === null || _mSettings$containing3 === void 0 ? void 0 : _mSettings$containing3.call(_mSettings$containing4)) ?? mSettings.containingView;
      const pageComponent = Component.getOwnerComponentFor(containingView);
      const appComponent = CommonUtils.getAppComponent(containingView);
      const metaModel = appComponent.getMetaModel();
      const pageModel = pageComponent.getModel("_pageModel");
      const functionStringInOrder = (_feCustomData$functio = feCustomData.functionStringInOrder) === null || _feCustomData$functio === void 0 ? void 0 : _feCustomData$functio.split(",");
      const propertiesAssignedToFunction = (_feCustomData$propert = feCustomData.propertiesAssignedToFunction) === null || _feCustomData$propert === void 0 ? void 0 : _feCustomData$propert.split(",");
      for (const propertyName in BuildingBlockClass.metadata.properties) {
        const propertyMetadata = BuildingBlockClass.metadata.properties[propertyName];
        const pageModelContext = pageModel.createBindingContext(feCustomData[propertyName]);
        if (pageModelContext === null) {
          // value cannot be resolved, so it is either a runtime binding or a constant
          let value = feCustomData[propertyName];
          if (typeof value === "string") {
            if (propertyMetadata.bindable !== true) {
              // runtime bindings are not allowed, so convert strings into actual primitive types
              switch (propertyMetadata.type) {
                case "boolean":
                  value = value === "true";
                  break;
                case "number":
                  value = Number(value);
                  break;
              }
            } else {
              // runtime bindings are allowed, so resolve the values as BindingToolkit expressions
              value = resolveBindingString(value, propertyMetadata.type);
            }
          } else if (propertyMetadata.type === "function") {
            const functionIndex = propertiesAssignedToFunction.indexOf(propertyName);
            const functionString = functionStringInOrder[functionIndex];
            const targetFunction = functionHolder === null || functionHolder === void 0 ? void 0 : functionHolder.find(functionDef => {
              var _functionDef$;
              return ((_functionDef$ = functionDef[0]) === null || _functionDef$ === void 0 ? void 0 : _functionDef$._sapui_handlerName) === functionString;
            });
            // We use the _sapui_handlerName to identify which function is the one we want to bind here
            if (targetFunction && targetFunction.length > 1) {
              value = targetFunction[0].bind(targetFunction[1]);
            }
          }
          classSettings[propertyName] = value;
        } else if (pageModelContext.getObject() !== undefined) {
          // get value from page model
          classSettings[propertyName] = pageModelContext.getObject();
        } else {
          // bind to metamodel
          classSettings[propertyName] = metaModel.createBindingContext(feCustomData[propertyName]);
        }
      }
      return ManagedObject.runWithPreprocessors(() => {
        const renderedControl = jsx.withContext({
          view: containingView,
          appComponent: appComponent
        }, () => {
          var _getContent, _ref;
          const templateProcessingSettings = {
            models: {
              "sap.fe.i18n": containingView.getModel("sap.fe.i18n")
            }
          };
          return (_getContent = (_ref = new BuildingBlockClass(classSettings, {}, templateProcessingSettings)).getContent) === null || _getContent === void 0 ? void 0 : _getContent.call(_ref, containingView, appComponent);
        });
        if (!this._bAsync) {
          this._aContent = renderedControl;
        }
        return renderedControl;
      }, {
        id: function (sId) {
          return containingView.createId(sId);
        },
        settings: function (controlSettings) {
          const allAssociations = this.getMetadata().getAssociations();
          for (const associationDetailName of Object.keys(allAssociations)) {
            if (controlSettings[associationDetailName] !== undefined) {
              // The associated elements are indicated via local IDs; we need to change the references to global ones
              const associations = Array.isArray(controlSettings[associationDetailName]) ? controlSettings[associationDetailName] : [controlSettings[associationDetailName]];

              // Create global IDs for associations given as strings, not for already resolved ManagedObjects
              controlSettings[associationDetailName] = associations.map(association => typeof association === "string" ? mSettings.containingView.createId(association) : association);
            }
          }
          return controlSettings;
        }
      });
    }
  });
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/RuntimeBuildingBlockFragment", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ClassSupport","sap/fe/core/jsx-runtime/jsx","sap/ui/base/ManagedObject","sap/ui/core/Component","sap/ui/core/Fragment"],function(e,n,t,i,r,o,a){"use strict";var l,s,c,u,d;var f={};var p=t.event;var g=t.defineUI5Class;var v=n.resolveBindingString;function b(e,n,t,i){if(!t)return;Object.defineProperty(e,n,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function m(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function h(e,n){e.prototype=Object.create(n.prototype);e.prototype.constructor=e;y(e,n)}function y(e,n){y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(n,t){n.__proto__=t;return n};return y(e,n)}function w(e,n,t,i,r){var o={};Object.keys(i).forEach(function(e){o[e]=i[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=t.slice().reverse().reduce(function(t,i){return i(e,n,t)||t},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,n,o);o=null}return o}function O(e,n){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let C=(l=g("sap.fe.core.buildingBlocks.RuntimeBuildingBlockFragment"),s=p(),l(c=(u=function(e){h(n,e);function n(){var n;for(var t=arguments.length,i=new Array(t),r=0;r<t;r++){i[r]=arguments[r]}n=e.call(this,...i)||this;b(n,"functionHolder",d,m(n));return n}f=n;return n}(a),d=w(u.prototype,"functionHolder",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),u))||c);f=C;const j={};function k(e){j[`${e.metadata.namespace??e.metadata.publicNamespace}.${e.metadata.name}`]=e}f.storeRuntimeBlock=k;C.registerType("FE_COMPONENTS",{load:async function(e){return Promise.resolve(j[e.fragmentName])},init:function(n){var t,a,l,s,c,u,d,f,p,g;let b=n.fragmentContent;if(b===undefined){b=j[n.fragmentName]}if(b===undefined){throw new Error(`No building block class for runtime building block ${n.fragmentName} found`)}const m={};const h=((t=n.customData)===null||t===void 0?void 0:(a=t[0])===null||a===void 0?void 0:(l=a.mProperties)===null||l===void 0?void 0:(s=l.value)===null||s===void 0?void 0:s["sap.fe.core.buildingBlocks"])||{};delete n.customData;const y=n.functionHolder??[];delete n.functionHolder;const w=((c=(u=n.containingView).getController)===null||c===void 0?void 0:(d=(f=c.call(u)).getView)===null||d===void 0?void 0:d.call(f))??n.containingView;const O=o.getOwnerComponentFor(w);const C=e.getAppComponent(w);const k=C.getMetaModel();const _=O.getModel("_pageModel");const z=(p=h.functionStringInOrder)===null||p===void 0?void 0:p.split(",");const B=(g=h.propertiesAssignedToFunction)===null||g===void 0?void 0:g.split(",");for(const e in b.metadata.properties){const n=b.metadata.properties[e];const t=_.createBindingContext(h[e]);if(t===null){let t=h[e];if(typeof t==="string"){if(n.bindable!==true){switch(n.type){case"boolean":t=t==="true";break;case"number":t=Number(t);break}}else{t=v(t,n.type)}}else if(n.type==="function"){const n=B.indexOf(e);const i=z[n];const r=y===null||y===void 0?void 0:y.find(e=>{var n;return((n=e[0])===null||n===void 0?void 0:n._sapui_handlerName)===i});if(r&&r.length>1){t=r[0].bind(r[1])}}m[e]=t}else if(t.getObject()!==undefined){m[e]=t.getObject()}else{m[e]=k.createBindingContext(h[e])}}return r.runWithPreprocessors(()=>{const e=i.withContext({view:w,appComponent:C},()=>{var e,n;const t={models:{"sap.fe.i18n":w.getModel("sap.fe.i18n")}};return(e=(n=new b(m,{},t)).getContent)===null||e===void 0?void 0:e.call(n,w,C)});if(!this._bAsync){this._aContent=e}return e},{id:function(e){return w.createId(e)},settings:function(e){const t=this.getMetadata().getAssociations();for(const i of Object.keys(t)){if(e[i]!==undefined){const t=Array.isArray(e[i])?e[i]:[e[i]];e[i]=t.map(e=>typeof e==="string"?n.containingView.createId(e):e)}}return e}})}});return f},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/TraceInfo-dbg", ["sap/base/Log", "sap/ui/base/ManagedObject", "sap/ui/core/util/XMLPreprocessor"], function (Log, ManagedObject, XMLPreprocessor) {
  "use strict";

  var bindingParser = ManagedObject.bindingParser;
  //Trace information
  const aTraceInfo = [
    /* Structure for a macro
    		{
    			macro: '', //name of macro
    			metaDataContexts: [ //Properties of type sap.ui.model.Context
    				{
    					name: '', //context property name / key
    					path: '', //from oContext.getPath()
    				}
    			],
    			properties: { // Other properties which become part of {this>}
    				property1: value,
    				property2: value
    			}
    			viewInfo: {
    				viewInfo: {} // As specified in view or fragment creation
    			},
    			traceID: this.index, //ID for this trace information,
    			macroInfo: {
    				macroID: index, // traceID of this macro (redundant for macros)
    				parentMacroID, index // traceID of the parent macro (if it has a parent)
    			}
    		}
    		// Structure for a control
    		{
    			control: '', //control class
    			properties: { // Other properties which become part of {this>}
    				property1: {
    					originalValue: '', //Value before templating
    					resolvedValue: '' //Value after templating
    				}
    			}
    			contexts: { //Models and Contexts used during templating
    				// Model or context name used for this control
    				modelName1: { // For ODataMetaModel
    					path1: {
    						path: '', //absolut path within metamodel
    						data: '', //data of path unless type Object
    					}
    				modelName2: {
    					// for other model types
    					{
    						property1: value,
    						property2: value
    					}
    					// In case binding cannot be resolved -> mark as runtime binding
    					// This is not always true, e.g. in case the path is metamodelpath
    					{
    						"bindingFor": "Runtime"
    					}
    				}
    			},
    			viewInfo: {
    				viewInfo: {} // As specified in view or fragment creation
    			},
    			macroInfo: {
    				macroID: index, // traceID of the macro that created this control
    				parentMacroID, index // traceID of the macro's parent macro
    			},
    			traceID: this.index //ID for this trace information
    		}
    		*/
  ];
  const traceNamespace = "http://schemas.sap.com/sapui5/extension/sap.fe.info/1",
    xmlns = "http://www.w3.org/2000/xmlns/",
    /**
     * Switch is currently based on url parameter
     */
    traceIsOn = location.search.indexOf("sap-ui-xx-feTraceInfo=true") > -1,
    /**
     * Specify all namespaces that shall be traced during templating
     */
    aNamespaces = ["sap.m", "sap.uxap", "sap.ui.unified", "sap.f", "sap.ui.table", "sap.suite.ui.microchart", "sap.ui.layout.form", "sap.ui.mdc", "sap.ui.mdc.link", "sap.ui.mdc.field", "sap.fe.fpm"],
    oCallbacks = {};
  function fnClone(oObject) {
    return JSON.parse(JSON.stringify(oObject));
  }
  async function collectContextInfo(sValue, oContexts, oVisitor, oNode) {
    let aContexts;
    const aPromises = [];
    try {
      aContexts = bindingParser(sValue, undefined, false, true) || [];
    } catch (e) {
      aContexts = [];
    }
    aContexts = Array.isArray(aContexts) ? aContexts : [aContexts];
    aContexts.filter(function (oContext) {
      return oContext.path || oContext.parts;
    }).forEach(function (oContext) {
      const aParts = oContext.parts || [oContext];
      aParts.filter(function (oPartContext) {
        return oPartContext.path;
      }).forEach(function (oPartContext) {
        const oModel = oContexts[oPartContext.model] = oContexts[oPartContext.model] || {};
        const sSimplePath = oPartContext.path.indexOf(">") < 0 ? (oPartContext.model && `${oPartContext.model}>`) + oPartContext.path : oPartContext.path;
        let oRealContext;
        let aInnerParts;
        if (typeof oPartContext.model === "undefined" && sSimplePath.indexOf(">") > -1) {
          aInnerParts = sSimplePath.split(">");
          oPartContext.model = aInnerParts[0];
          oPartContext.path = aInnerParts[1];
        }
        try {
          oRealContext = oVisitor.getContext(sSimplePath);
          const visitorResult = oVisitor.getResult(`{${sSimplePath}}`, oNode);
          aPromises.push(visitorResult.then(function (oResult) {
            var _oRealContext;
            if (((_oRealContext = oRealContext) === null || _oRealContext === void 0 ? void 0 : _oRealContext.getModel().getMetadata().getName()) === "sap.ui.model.json.JSONModel") {
              if (!oResult.getModel()) {
                oModel[oPartContext.path] = oResult; //oRealContext.getObject(oContext.path);
              } else {
                oModel[oPartContext.path] = `Context from ${oResult.getPath()}`;
              }
            } else {
              oModel[oPartContext.path] = {
                path: oRealContext.getPath(),
                data: typeof oResult === "object" ? "[ctrl/cmd-click] on path to see data" : oResult
              };
            }
            return;
          }).catch(function () {
            oModel[oPartContext.path] = {
              bindingFor: "Runtime"
            };
          }));
        } catch (exc) {
          oModel[oPartContext.path] = {
            bindingFor: "Runtime"
          };
        }
      });
    });
    return Promise.all(aPromises);
  }
  async function fillAttributes(oResults, oAttributes, sName, sValue) {
    return oResults.then(function (result) {
      oAttributes[sName] = sValue !== result ? {
        originalValue: sValue,
        resolvedValue: result
      } : sValue;
      return;
    }).catch(function (e) {
      const error = e;
      oAttributes[sName] = {
        originalValue: sValue,
        error: error.stack && error.stack.toString() || e
      };
    });
  }
  async function collectInfo(oNode, oVisitor) {
    const oAttributes = {};
    const aPromises = [];
    const oContexts = {};
    let oResults;
    for (let i = oNode.attributes.length >>> 0; i--;) {
      const oAttribute = oNode.attributes[i],
        sName = oAttribute.nodeName,
        sValue = oNode.getAttribute(sName);
      if (!["core:require"].includes(sName)) {
        aPromises.push(collectContextInfo(sValue, oContexts, oVisitor, oNode));
        oResults = oVisitor.getResult(sValue, oNode);
        if (oResults) {
          aPromises.push(fillAttributes(oResults, oAttributes, sName, sValue));
        } else {
          //What
        }
      }
    }
    return Promise.all(aPromises).then(function () {
      return {
        properties: oAttributes,
        contexts: oContexts
      };
    });
  }
  async function resolve(oNode, oVisitor) {
    try {
      const sControlName = oNode.nodeName.split(":")[1] || oNode.nodeName,
        bIsControl = /^[A-Z]/.test(sControlName),
        oTraceMetadataContext = {
          isError: false,
          control: `${oNode.namespaceURI}.${oNode.nodeName.split(":")[1] || oNode.nodeName}`,
          metaDataContexts: [],
          properties: {}
        };
      if (bIsControl) {
        const firstChild = [...oNode.ownerDocument.children].find(node => !node.nodeName.startsWith("#"));
        if (firstChild && !firstChild.getAttribute("xmlns:trace")) {
          firstChild.setAttributeNS(xmlns, "xmlns:trace", traceNamespace);
          firstChild.setAttributeNS(traceNamespace, "trace:is", "on");
        }
        return await collectInfo(oNode, oVisitor).then(async function (result) {
          const bRelevant = Object.keys(result.contexts).length > 0; //If no context was used it is not relevant so we ignore Object.keys(result.properties).length
          if (bRelevant) {
            Object.assign(oTraceMetadataContext, result);
            oTraceMetadataContext.viewInfo = oVisitor.getViewInfo();
            oTraceMetadataContext.macroInfo = oVisitor.getSettings()["_macroInfo"];
            oTraceMetadataContext.traceID = aTraceInfo.length;
            oNode.setAttributeNS(traceNamespace, "trace:traceID", oTraceMetadataContext.traceID.toString());
            aTraceInfo.push(oTraceMetadataContext);
          }
          return oVisitor.visitAttributes(oNode);
        }).then(async function () {
          return oVisitor.visitChildNodes(oNode);
        }).catch(function (exc) {
          oTraceMetadataContext.error = {
            exception: exc,
            node: new XMLSerializer().serializeToString(oNode)
          };
        });
      } else {
        await oVisitor.visitAttributes(oNode);
        await oVisitor.visitChildNodes(oNode);
      }
    } catch (exc) {
      Log.error(`Error while tracing '${oNode === null || oNode === void 0 ? void 0 : oNode.nodeName}': ${exc.message}`, "TraceInfo");
      return oVisitor.visitAttributes(oNode).then(async function () {
        return oVisitor.visitChildNodes(oNode);
      });
    }
  }
  /**
   * Register path-through XMLPreprocessor plugin for all namespaces
   * given above in aNamespaces
   */
  if (traceIsOn) {
    aNamespaces.forEach(function (namespace) {
      oCallbacks[namespace] = XMLPreprocessor.plugIn(resolve.bind(namespace), namespace);
    });
  }

  /**
   * Adds information about the processing of one macro to the collection.
   *
   * @name sap.fe.macros.TraceInfo.traceMacroCalls
   * @param sName Macro class name
   * @param oMetadata Definition from macro
   * @param mContexts Available named contexts
   * @param oNode
   * @param oVisitor
   * @returns The traced metadata context
   * @private
   * @ui5-restricted
   * @static
   */

  function traceMacroCalls(sName, oMetadata, mContexts, oNode, oVisitor) {
    try {
      let aMetadataContextKeys = oMetadata.metadataContexts && Object.keys(oMetadata.metadataContexts) || [];
      const aProperties = oMetadata.properties && Object.keys(oMetadata.properties) || [];
      const macroInfo = fnClone(oVisitor.getSettings()["_macroInfo"] || {});
      const oTraceMetadataContext = {
        isError: false,
        macro: sName,
        metaDataContexts: [],
        properties: {}
      };
      if (aMetadataContextKeys.length === 0) {
        //In case the macro has no metadata.js we take all metadataContexts except this
        aMetadataContextKeys = Object.keys(mContexts).filter(function (name) {
          return name !== "this";
        });
      }
      if (!oNode.getAttribute("xmlns:trace")) {
        oNode.setAttributeNS(xmlns, "xmlns:trace", traceNamespace);
      }
      if (aMetadataContextKeys.length > 0) {
        aMetadataContextKeys.forEach(function (sKey) {
          const oContext = mContexts[sKey],
            oMetaDataContext = oContext && {
              name: sKey,
              path: oContext.getPath()
              //data: JSON.stringify(oContext.getObject(),null,2)
            };

          if (oMetaDataContext) {
            oTraceMetadataContext.metaDataContexts.push(oMetaDataContext);
          }
        });
        aProperties.forEach(function (sKey) {
          const
          //oPropertySettings = oMetadata.properties[sKey],
          oProperty = mContexts.this.getObject(sKey);
          // (oNode.hasAttribute(sKey) && oNode.getAttribute(sKey)) ||
          // (oPropertySettings.hasOwnProperty("defaultValue") && oPropertySettings.define) ||
          // false;

          if (oProperty) {
            oTraceMetadataContext.properties[sKey] = oProperty;
          }
        });
        oTraceMetadataContext.viewInfo = oVisitor.getViewInfo();
        oTraceMetadataContext.traceID = aTraceInfo.length;
        macroInfo.parentMacroID = macroInfo.macroID;
        macroInfo.macroID = oTraceMetadataContext.traceID.toString();
        oTraceMetadataContext.macroInfo = macroInfo;
        oNode.setAttributeNS(traceNamespace, "trace:macroID", oTraceMetadataContext.traceID.toString());
        aTraceInfo.push(oTraceMetadataContext);
        return oTraceMetadataContext;
      }
    } catch (exc) {
      var _oVisitor$getContext;
      return {
        isError: true,
        error: exc,
        name: sName,
        node: new XMLSerializer().serializeToString(oNode),
        contextPath: oVisitor === null || oVisitor === void 0 ? void 0 : (_oVisitor$getContext = oVisitor.getContext()) === null || _oVisitor$getContext === void 0 ? void 0 : _oVisitor$getContext.getPath()
      };
    }
  }
  /**
   * Returns the globally stored trace information for the macro or
   * control marked with the given id.
   *
   * Returns all trace information if no id is specified
   *
   *
  <pre>Structure for a macro
  {
  	macro: '', //name of macro
  	metaDataContexts: [ //Properties of type sap.ui.model.Context
  		{
  			name: '', //context property name / key
  			path: '', //from oContext.getPath()
  		}
  	],
  	properties: { // Other properties which become part of {this>}
  		property1: value,
  		property2: value
  	}
  	viewInfo: {
  		viewInfo: {} // As specified in view or fragment creation
  	},
  	traceID: this.index, //ID for this trace information,
  	macroInfo: {
  		macroID: index, // traceID of this macro (redundant for macros)
  		parentMacroID, index // traceID of the parent macro (if it has a parent)
  	}
  }
  Structure for a control
  {
  	control: '', //control class
  	properties: { // Other properties which become part of {this>}
  		property1: {
  			originalValue: '', //Value before templating
  			resolvedValue: '' //Value after templating
  		}
  	}
  	contexts: { //Models and Contexts used during templating
  		// Model or context name used for this control
  		modelName1: { // For ODataMetaModel
  			path1: {
  				path: '', //absolut path within metamodel
  				data: '', //data of path unless type Object
  			}
  		modelName2: {
  			// for other model types
  			{
  				property1: value,
  				property2: value
  			}
  			// In case binding cannot be resolved -> mark as runtime binding
  			// This is not always true, e.g. in case the path is metamodelpath
  			{
  				"bindingFor": "Runtime"
  			}
  		}
  	},
  	viewInfo: {
  		viewInfo: {} // As specified in view or fragment creation
  	},
  	macroInfo: {
  		macroID: index, // traceID of the macro that created this control
  		parentMacroID, index // traceID of the macro's parent macro
  	},
  	traceID: this.index //ID for this trace information
  }</pre>.
   *
   * @function
   * @name sap.fe.macros.TraceInfo.getTraceInfo
   * @param id TraceInfo id
   * @returns Object / Array for TraceInfo
   * @private
   * @static
   */
  function getTraceInfo(id) {
    if (id) {
      return aTraceInfo[id];
    }
    const aErrors = aTraceInfo.filter(function (traceInfo) {
      return traceInfo.error;
    });
    return aErrors.length > 0 && aErrors || aTraceInfo;
  }
  /**
   * Returns true if TraceInfo is active.
   *
   * @function
   * @name sap.fe.macros.TraceInfo.isTraceInfoActive
   * @returns `true` when active
   * @private
   * @static
   */
  function isTraceInfoActive() {
    return traceIsOn;
  }
  /**
   * @typedef sap.fe.macros.TraceInfo
   * TraceInfo for SAP Fiori elements
   *
   * Once traces is switched, information about macros and controls
   * that are processed during xml preprocessing ( @see {@link sap.ui.core.util.XMLPreprocessor})
   * will be collected within this singleton
   * @namespace
   * @private
   * @global
   * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
   * @since 1.74.0
   */
  return {
    isTraceInfoActive: isTraceInfoActive,
    traceMacroCalls: traceMacroCalls,
    getTraceInfo: getTraceInfo
  };
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/buildingBlocks/TraceInfo", ["sap/base/Log","sap/ui/base/ManagedObject","sap/ui/core/util/XMLPreprocessor"],function(t,e,n){"use strict";var r=e.bindingParser;const i=[];const o="http://schemas.sap.com/sapui5/extension/sap.fe.info/1",a="http://www.w3.org/2000/xmlns/",s=location.search.indexOf("sap-ui-xx-feTraceInfo=true")>-1,c=["sap.m","sap.uxap","sap.ui.unified","sap.f","sap.ui.table","sap.suite.ui.microchart","sap.ui.layout.form","sap.ui.mdc","sap.ui.mdc.link","sap.ui.mdc.field","sap.fe.fpm"],u={};function f(t){return JSON.parse(JSON.stringify(t))}async function l(t,e,n,i){let o;const a=[];try{o=r(t,undefined,false,true)||[]}catch(t){o=[]}o=Array.isArray(o)?o:[o];o.filter(function(t){return t.path||t.parts}).forEach(function(t){const r=t.parts||[t];r.filter(function(t){return t.path}).forEach(function(t){const r=e[t.model]=e[t.model]||{};const o=t.path.indexOf(">")<0?(t.model&&`${t.model}>`)+t.path:t.path;let s;let c;if(typeof t.model==="undefined"&&o.indexOf(">")>-1){c=o.split(">");t.model=c[0];t.path=c[1]}try{s=n.getContext(o);const e=n.getResult(`{${o}}`,i);a.push(e.then(function(e){var n;if(((n=s)===null||n===void 0?void 0:n.getModel().getMetadata().getName())==="sap.ui.model.json.JSONModel"){if(!e.getModel()){r[t.path]=e}else{r[t.path]=`Context from ${e.getPath()}`}}else{r[t.path]={path:s.getPath(),data:typeof e==="object"?"[ctrl/cmd-click] on path to see data":e}}return}).catch(function(){r[t.path]={bindingFor:"Runtime"}}))}catch(e){r[t.path]={bindingFor:"Runtime"}}})});return Promise.all(a)}async function p(t,e,n,r){return t.then(function(t){e[n]=r!==t?{originalValue:r,resolvedValue:t}:r;return}).catch(function(t){const i=t;e[n]={originalValue:r,error:i.stack&&i.stack.toString()||t}})}async function h(t,e){const n={};const r=[];const i={};let o;for(let a=t.attributes.length>>>0;a--;){const s=t.attributes[a],c=s.nodeName,u=t.getAttribute(c);if(!["core:require"].includes(c)){r.push(l(u,i,e,t));o=e.getResult(u,t);if(o){r.push(p(o,n,c,u))}else{}}}return Promise.all(r).then(function(){return{properties:n,contexts:i}})}async function d(e,n){try{const t=e.nodeName.split(":")[1]||e.nodeName,r=/^[A-Z]/.test(t),s={isError:false,control:`${e.namespaceURI}.${e.nodeName.split(":")[1]||e.nodeName}`,metaDataContexts:[],properties:{}};if(r){const t=[...e.ownerDocument.children].find(t=>!t.nodeName.startsWith("#"));if(t&&!t.getAttribute("xmlns:trace")){t.setAttributeNS(a,"xmlns:trace",o);t.setAttributeNS(o,"trace:is","on")}return await h(e,n).then(async function(t){const r=Object.keys(t.contexts).length>0;if(r){Object.assign(s,t);s.viewInfo=n.getViewInfo();s.macroInfo=n.getSettings()["_macroInfo"];s.traceID=i.length;e.setAttributeNS(o,"trace:traceID",s.traceID.toString());i.push(s)}return n.visitAttributes(e)}).then(async function(){return n.visitChildNodes(e)}).catch(function(t){s.error={exception:t,node:(new XMLSerializer).serializeToString(e)}})}else{await n.visitAttributes(e);await n.visitChildNodes(e)}}catch(r){t.error(`Error while tracing '${e===null||e===void 0?void 0:e.nodeName}': ${r.message}`,"TraceInfo");return n.visitAttributes(e).then(async function(){return n.visitChildNodes(e)})}}if(s){c.forEach(function(t){u[t]=n.plugIn(d.bind(t),t)})}function m(t,e,n,r,s){try{let c=e.metadataContexts&&Object.keys(e.metadataContexts)||[];const u=e.properties&&Object.keys(e.properties)||[];const l=f(s.getSettings()["_macroInfo"]||{});const p={isError:false,macro:t,metaDataContexts:[],properties:{}};if(c.length===0){c=Object.keys(n).filter(function(t){return t!=="this"})}if(!r.getAttribute("xmlns:trace")){r.setAttributeNS(a,"xmlns:trace",o)}if(c.length>0){c.forEach(function(t){const e=n[t],r=e&&{name:t,path:e.getPath()};if(r){p.metaDataContexts.push(r)}});u.forEach(function(t){const e=n.this.getObject(t);if(e){p.properties[t]=e}});p.viewInfo=s.getViewInfo();p.traceID=i.length;l.parentMacroID=l.macroID;l.macroID=p.traceID.toString();p.macroInfo=l;r.setAttributeNS(o,"trace:macroID",p.traceID.toString());i.push(p);return p}}catch(e){var c;return{isError:true,error:e,name:t,node:(new XMLSerializer).serializeToString(r),contextPath:s===null||s===void 0?void 0:(c=s.getContext())===null||c===void 0?void 0:c.getPath()}}}function g(t){if(t){return i[t]}const e=i.filter(function(t){return t.error});return e.length>0&&e||i}function b(){return s}return{isTraceInfoActive:b,traceMacroCalls:m,getTraceInfo:g}},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/BusyLocker-dbg", ["sap/base/Log"], function (Log) {
  "use strict";

  const _iTimeoutInSeconds = 30,
    _mLockCounters = {},
    _oReferenceDummy = {
      getId: function () {
        return "BusyLocker.ReferenceDummy";
      },
      setBusy: function (bBusy) {
        Log.info(`setBusy(${bBusy}) triggered on dummy reference`);
      }
    };
  function getLockCountId(oReference, sPath) {
    return oReference.getId() + (sPath || "/busy");
  }
  function isLocked(oReference, sPath) {
    return getLockCountId(oReference, sPath) in _mLockCounters;
  }
  function getLockCountEntry(oReference, sPath) {
    if (!oReference || !oReference.getId) {
      Log.warning("No reference for BusyLocker, using dummy reference");
      oReference = _oReferenceDummy;
    }
    sPath = sPath || "/busy";
    const sId = getLockCountId(oReference, sPath);
    if (!(sId in _mLockCounters)) {
      _mLockCounters[sId] = {
        id: sId,
        path: sPath,
        reference: oReference,
        count: 0
      };
    }
    return _mLockCounters[sId];
  }
  /**
   * @param mLockCountEntry
   */
  function deleteLockCountEntry(mLockCountEntry) {
    delete _mLockCounters[mLockCountEntry.id];
  }
  function applyLockState(mLockCountEntry) {
    const bIsModel = mLockCountEntry.reference.isA && mLockCountEntry.reference.isA("sap.ui.model.Model"),
      bBusy = mLockCountEntry.count !== 0;
    if (bIsModel) {
      mLockCountEntry.reference.setProperty(mLockCountEntry.path, bBusy, undefined, true);
    } else if (mLockCountEntry.reference.setBusy) {
      mLockCountEntry.reference.setBusy(bBusy);
    }
    clearTimeout(mLockCountEntry.timeout);
    if (bBusy) {
      mLockCountEntry.timeout = setTimeout(function () {
        Log.error(`busy lock for ${mLockCountEntry.id} with value ${mLockCountEntry.count} timed out after ${_iTimeoutInSeconds} seconds!`);
      }, _iTimeoutInSeconds * 1000);
    } else {
      deleteLockCountEntry(mLockCountEntry);
    }
    return bBusy;
  }
  function changeLockCount(mLockCountEntry, iDelta) {
    if (iDelta === 0) {
      mLockCountEntry.count = 0;
      Log.info(`busy lock count '${mLockCountEntry.id}' was reset to 0`);
    } else {
      mLockCountEntry.count += iDelta;
      Log.info(`busy lock count '${mLockCountEntry.id}' is ${mLockCountEntry.count}`);
    }
  }
  const BusyLocker = {
    lock: function (oModelOrControl, sPath) {
      return this._updateLock(oModelOrControl, sPath, 1);
    },
    unlock: function (oModelOrControl, sPath) {
      return this._updateLock(oModelOrControl, sPath, -1);
    },
    isLocked: function (oModelOrControl, sPath) {
      return isLocked(oModelOrControl, sPath);
    },
    _updateLock: function (oReference, sPath, iDelta) {
      const mLockCountEntry = getLockCountEntry(oReference, sPath);
      changeLockCount(mLockCountEntry, iDelta);
      return applyLockState(mLockCountEntry);
    }
  };
  return BusyLocker;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/BusyLocker", ["sap/base/Log"],function(e){"use strict";const n=30,t={},u={getId:function(){return"BusyLocker.ReferenceDummy"},setBusy:function(n){e.info(`setBusy(${n}) triggered on dummy reference`)}};function o(e,n){return e.getId()+(n||"/busy")}function r(e,n){return o(e,n)in t}function c(n,r){if(!n||!n.getId){e.warning("No reference for BusyLocker, using dummy reference");n=u}r=r||"/busy";const c=o(n,r);if(!(c in t)){t[c]={id:c,path:r,reference:n,count:0}}return t[c]}function i(e){delete t[e.id]}function s(t){const u=t.reference.isA&&t.reference.isA("sap.ui.model.Model"),o=t.count!==0;if(u){t.reference.setProperty(t.path,o,undefined,true)}else if(t.reference.setBusy){t.reference.setBusy(o)}clearTimeout(t.timeout);if(o){t.timeout=setTimeout(function(){e.error(`busy lock for ${t.id} with value ${t.count} timed out after ${n} seconds!`)},n*1e3)}else{i(t)}return o}function f(n,t){if(t===0){n.count=0;e.info(`busy lock count '${n.id}' was reset to 0`)}else{n.count+=t;e.info(`busy lock count '${n.id}' is ${n.count}`)}}const d={lock:function(e,n){return this._updateLock(e,n,1)},unlock:function(e,n){return this._updateLock(e,n,-1)},isLocked:function(e,n){return r(e,n)},_updateLock:function(e,n,t){const u=c(e,n);f(u,t);return s(u)}};return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/EditFlow-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/controllerextensions/collaboration/ActivitySync", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/fe/core/controllerextensions/editFlow/draft", "sap/fe/core/controllerextensions/editFlow/sticky", "sap/fe/core/controllerextensions/editFlow/TransactionHelper", "sap/fe/core/controllerextensions/Feedback", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/EditState", "sap/fe/core/helpers/MetaModelFunction", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/helpers/SemanticKeyHelper", "sap/fe/core/library", "sap/m/Button", "sap/m/Dialog", "sap/m/MessageToast", "sap/m/Text", "sap/ui/core/Core", "sap/ui/core/library", "sap/ui/core/message/Message", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "sap/ui/model/odata/v4/ODataListBinding", "../ActionRuntime"], function (Log, CommonUtils, BusyLocker, ActivitySync, CollaborationCommon, draft, sticky, TransactionHelper, Feedback, MetaModelConverter, ClassSupport, EditState, MetaModelFunction, ModelHelper, ResourceModelHelper, SemanticKeyHelper, FELibrary, Button, Dialog, MessageToast, Text, Core, coreLibrary, Message, ControllerExtension, OverrideExecution, ODataListBinding, ActionRuntime) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _class, _class2;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var getNonComputedVisibleFields = MetaModelFunction.getNonComputedVisibleFields;
  var publicExtension = ClassSupport.publicExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertTypes = MetaModelConverter.convertTypes;
  var TriggerType = Feedback.TriggerType;
  var triggerConfiguredSurvey = Feedback.triggerConfiguredSurvey;
  var StandardActions = Feedback.StandardActions;
  var shareObject = CollaborationCommon.shareObject;
  var Activity = CollaborationCommon.Activity;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const CreationMode = FELibrary.CreationMode,
    ProgrammingModel = FELibrary.ProgrammingModel,
    Constants = FELibrary.Constants,
    DraftStatus = FELibrary.DraftStatus,
    EditMode = FELibrary.EditMode,
    StartupMode = FELibrary.StartupMode,
    MessageType = coreLibrary.MessageType;

  /**
   * A controller extension offering hooks into the edit flow of the application
   *
   * @hideconstructor
   * @public
   * @since 1.90.0
   */
  let EditFlow = (_dec = defineUI5Class("sap.fe.core.controllerextensions.EditFlow"), _dec2 = publicExtension(), _dec3 = finalExtension(), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = publicExtension(), _dec7 = finalExtension(), _dec8 = publicExtension(), _dec9 = extensible(OverrideExecution.After), _dec10 = publicExtension(), _dec11 = extensible(OverrideExecution.After), _dec12 = publicExtension(), _dec13 = extensible(OverrideExecution.After), _dec14 = publicExtension(), _dec15 = extensible(OverrideExecution.After), _dec16 = publicExtension(), _dec17 = extensible(OverrideExecution.After), _dec18 = publicExtension(), _dec19 = finalExtension(), _dec20 = publicExtension(), _dec21 = finalExtension(), _dec22 = publicExtension(), _dec23 = finalExtension(), _dec24 = publicExtension(), _dec25 = finalExtension(), _dec26 = publicExtension(), _dec27 = finalExtension(), _dec28 = publicExtension(), _dec29 = extensible(OverrideExecution.After), _dec30 = publicExtension(), _dec31 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(EditFlow, _ControllerExtension);
    function EditFlow() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ControllerExtension.call(this, ...args) || this;
      _this.syncTasks = Promise.resolve();
      return _this;
    }
    var _proto = EditFlow.prototype;
    //////////////////////////////////////
    // Public methods
    //////////////////////////////////////
    _proto.getAppComponent = function getAppComponent() {
      return this.base.getAppComponent();
    }

    /**
     * Creates a draft document for an existing active document.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oContext Context of the active document
     * @returns Promise resolves once the editable document is available
     * @alias sap.fe.core.controllerextensions.EditFlow#editDocument
     * @public
     * @since 1.90.0
     */;
    _proto.editDocument = async function editDocument(oContext) {
      const bDraftNavigation = true;
      const transactionHelper = this.getTransactionHelper();
      const oRootViewController = this._getRootViewController();
      const model = oContext.getModel();
      let rightmostContext, siblingInfo;
      const oViewData = this.getView().getViewData();
      const sProgrammingModel = this.getProgrammingModel(oContext);
      let oRootContext = oContext;
      const oView = this.base.getView();
      try {
        if ((oViewData === null || oViewData === void 0 ? void 0 : oViewData.viewLevel) > 1) {
          if (sProgrammingModel === ProgrammingModel.Draft || sProgrammingModel === ProgrammingModel.Sticky) {
            oRootContext = await CommonUtils.createRootContext(sProgrammingModel, oView, this.getAppComponent());
          }
        }
        await this.base.editFlow.onBeforeEdit({
          context: oRootContext
        });
        const oNewDocumentContext = await transactionHelper.editDocument(oRootContext, this.getView(), this.getAppComponent(), this.getMessageHandler());
        this._setStickySessionInternalProperties(sProgrammingModel, model);
        if (oNewDocumentContext) {
          this.setEditMode(EditMode.Editable, false);
          this.setDocumentModified(false);
          this.getMessageHandler().showMessageDialog();
          if (oNewDocumentContext !== oRootContext) {
            let contextToNavigate = oNewDocumentContext;
            if (this._isFclEnabled()) {
              rightmostContext = oRootViewController.getRightmostContext();
              siblingInfo = await this._computeSiblingInformation(oRootContext, rightmostContext, sProgrammingModel, true);
              siblingInfo = siblingInfo ?? this._createSiblingInfo(oContext, oNewDocumentContext);
              this._updatePathsInHistory(siblingInfo.pathMapping);
              if (siblingInfo.targetContext.getPath() != oNewDocumentContext.getPath()) {
                contextToNavigate = siblingInfo.targetContext;
              }
            } else if ((oViewData === null || oViewData === void 0 ? void 0 : oViewData.viewLevel) > 1) {
              const rootSiblingPath = oNewDocumentContext === null || oNewDocumentContext === void 0 ? void 0 : oNewDocumentContext.getPath();
              const rootContextInfo = {
                rootSiblingPath: rootSiblingPath,
                rootContextNotRequired: true
              };
              siblingInfo = await this._computeSiblingInformation(oRootContext, oContext, sProgrammingModel, true, rootContextInfo);
              contextToNavigate = this._getNavigationTargetForEdit(oContext, oNewDocumentContext, siblingInfo);
            }
            await this._handleNewContext(contextToNavigate, true, false, bDraftNavigation, true);
            if (sProgrammingModel === ProgrammingModel.Sticky) {
              // The stickyOn handler must be set after the navigation has been done,
              // as the URL may change in the case of FCL
              let stickyContext;
              if (this._isFclEnabled()) {
                // We need to use the kept-alive context used to bind the page
                stickyContext = oNewDocumentContext.getModel().getKeepAliveContext(oNewDocumentContext.getPath());
              } else {
                stickyContext = oNewDocumentContext;
              }
              this.handleStickyOn(stickyContext);
            } else if (ModelHelper.isCollaborationDraftSupported(model.getMetaModel())) {
              // according to UX in case of enabled collaboration draft we share the object immediately
              await shareObject(oNewDocumentContext);
            }
          }
        }
      } catch (oError) {
        Log.error("Error while editing the document", oError);
      }
    }

    /**
     * Deletes several documents.
     *
     * @param contextsToDelete The contexts of the documents to be deleted
     * @param parameters The parameters
     * @returns Promise resolved once the documents are deleted
     */;
    _proto.deleteMultipleDocuments = async function deleteMultipleDocuments(contextsToDelete, parameters) {
      if (parameters) {
        parameters.beforeDeleteCallBack = this.base.editFlow.onBeforeDelete;
        parameters.requestSideEffects = parameters.requestSideEffects !== false;
      } else {
        parameters = {
          beforeDeleteCallBack: this.base.editFlow.onBeforeDelete,
          requestSideEffects: true
        };
      }
      const lockObject = this.getGlobalUIModel();
      const parentControl = this.getView().byId(parameters.controlId);
      if (!parentControl) {
        throw new Error("parameter controlId missing or incorrect");
      } else {
        parameters.parentControl = parentControl;
      }
      const listBinding = parentControl.getBinding("items") || parentControl.getRowBinding();
      parameters.bFindActiveContexts = true;
      BusyLocker.lock(lockObject);
      try {
        await this.deleteDocumentTransaction(contextsToDelete, parameters);
        let result;

        // Multiple object deletion is triggered from a list
        // First clear the selection in the table as it's not valid any more
        if (parentControl.isA("sap.ui.mdc.Table")) {
          parentControl.clearSelection();
        }

        // Then refresh the list-binding (LR), or require side-effects (OP)
        const viewBindingContext = this.getView().getBindingContext();
        if (listBinding.isRoot()) {
          // keep promise chain pending until refresh of listbinding is completed
          result = new Promise(resolve => {
            listBinding.attachEventOnce("dataReceived", function () {
              resolve();
            });
          });
          listBinding.refresh();
        } else if (viewBindingContext) {
          // if there are transient contexts, we must avoid requesting side effects
          // this is avoid a potential list refresh, there could be a side effect that refreshes the list binding
          // if list binding is refreshed, transient contexts might be lost
          if (parameters.requestSideEffects && !CommonUtils.hasTransientContext(listBinding)) {
            this.getAppComponent().getSideEffectsService().requestSideEffectsForNavigationProperty(listBinding.getPath(), viewBindingContext);
          }
        }

        // deleting at least one object should also set the UI to dirty
        if (!this.getAppComponent()._isFclEnabled()) {
          EditState.setEditStateDirty();
        }
        ActivitySync.send(this.getView(), Activity.Delete, contextsToDelete.map(context => context.getPath()));
        return result;
      } catch (error) {
        Log.error("Error while deleting the document(s)", error);
      } finally {
        BusyLocker.unlock(lockObject);
      }
    }

    /**
     * Updates the draft status and displays the error messages if there are errors during an update.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param updatedContext Context of the updated field
     * @param updatePromise Promise to determine when the update operation is completed. The promise should be resolved when the update operation is completed, so the draft status can be updated.
     * @returns Promise resolves once draft status has been updated
     * @alias sap.fe.core.controllerextensions.EditFlow#updateDocument
     * @public
     * @since 1.90.0
     */;
    _proto.updateDocument = function updateDocument(updatedContext, updatePromise) {
      const originalBindingContext = this.getView().getBindingContext();
      const isDraft = this.getProgrammingModel(updatedContext) === ProgrammingModel.Draft;
      this.getMessageHandler().removeTransitionMessages();
      return this.syncTask(async () => {
        if (originalBindingContext) {
          this.setDocumentModified(true);
          if (!this._isFclEnabled()) {
            EditState.setEditStateDirty();
          }
          if (isDraft) {
            this.setDraftStatus(DraftStatus.Saving);
          }
        }
        try {
          await updatePromise;
          const currentBindingContext = this.getView().getBindingContext();
          if (!isDraft || !currentBindingContext || currentBindingContext !== originalBindingContext) {
            // If a navigation happened while oPromise was being resolved, the binding context of the page changed
            return;
          }

          // We're still on the same context
          const metaModel = currentBindingContext.getModel().getMetaModel();
          const entitySetName = metaModel.getMetaContext(currentBindingContext.getPath()).getObject("@sapui.name");
          const semanticKeys = SemanticKeyHelper.getSemanticKeys(metaModel, entitySetName);
          if (semanticKeys !== null && semanticKeys !== void 0 && semanticKeys.length) {
            const currentSemanticMapping = this._getSemanticMapping();
            const currentSemanticPath = currentSemanticMapping === null || currentSemanticMapping === void 0 ? void 0 : currentSemanticMapping.semanticPath,
              sChangedPath = SemanticKeyHelper.getSemanticPath(currentBindingContext, true);
            // currentSemanticPath could be null if we have navigated via deep link then there are no semanticMappings to calculate it from
            if (currentSemanticPath && currentSemanticPath !== sChangedPath) {
              await this._handleNewContext(currentBindingContext, true, false, true);
            }
          }
          this.setDraftStatus(DraftStatus.Saved);
        } catch (error) {
          Log.error("Error while updating the document", error);
          if (isDraft && originalBindingContext) {
            this.setDraftStatus(DraftStatus.Clear);
          }
        } finally {
          await this.getMessageHandler().showMessages();
        }
      });
    }

    // Internal only params ---
    // * @param {string} mParameters.creationMode The creation mode using one of the following:
    // *                    Sync - the creation is triggered and once the document is created, the navigation is done
    // *                    Async - the creation and the navigation to the instance are done in parallel
    // *                    Deferred - the creation is done on the target page
    // *                    CreationRow - The creation is done inline async so the user is not blocked
    // mParameters.creationRow Instance of the creation row - (TODO: get rid but use list bindings only)

    /**
     * Creates a new document.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param vListBinding  ODataListBinding object or the binding path for a temporary list binding
     * @param mInParameters Contains the following attributes:
     * @param mInParameters.creationMode The creation mode using one of the following:
     *                    NewPage - the created document is shown in a new page, depending on whether metadata 'Sync', 'Async' or 'Deferred' is used
     *                    Inline - The creation is done inline (in a table)
     *                    External - The creation is done in a different application specified via the parameter 'outbound'
     * @param mInParameters.tableId ID of the table
     * @param mInParameters.outbound The navigation target where the document is created in case of creationMode 'External'
     * @param mInParameters.createAtEnd Specifies if the new entry should be created at the top or bottom of a table in case of creationMode 'Inline'
     * @returns Promise resolves once the object has been created
     * @alias sap.fe.core.controllerextensions.EditFlow#createDocument
     * @public
     * @since 1.90.0
     */;
    _proto.createDocument = async function createDocument(vListBinding, mInParameters) {
      var _oCreation;
      const transactionHelper = this.getTransactionHelper(),
        oLockObject = this.getGlobalUIModel();
      let oTable; //should be Table but there are missing methods into the def
      let mParameters = mInParameters;
      let oCreation;
      const bShouldBusyLock = !mParameters || mParameters.creationMode !== CreationMode.Inline && mParameters.creationMode !== CreationMode.CreationRow && mParameters.creationMode !== CreationMode.External;
      let oExecCustomValidation = Promise.resolve([]);
      const oAppComponent = this.getAppComponent();
      oAppComponent.getRouterProxy().removeIAppStateKey();
      if (mParameters.creationMode === CreationMode.External) {
        // Create by navigating to an external target
        // TODO: Call appropriate function (currently using the same as for outbound chevron nav, and without any context - 3rd param)
        await this.syncTask();
        const oController = this.getView().getController();
        const sCreatePath = ModelHelper.getAbsoluteMetaPathForListBinding(this.base.getView(), vListBinding);
        oController.handlers.onChevronPressNavigateOutBound(oController, mParameters.outbound, undefined, sCreatePath);
        return;
      }
      if (mParameters.creationMode === CreationMode.CreationRow && mParameters.creationRow) {
        const oCreationRowObjects = mParameters.creationRow.getBindingContext().getObject();
        delete oCreationRowObjects["@$ui5.context.isTransient"];
        oTable = mParameters.creationRow.getParent();
        oExecCustomValidation = this.validateDocument(oTable.getBindingContext(), {
          data: oCreationRowObjects,
          customValidationFunction: oTable.getCreationRow().data("customValidationFunction")
        });

        // disableAddRowButtonForEmptyData is set to false in manifest converter (Table.ts) if customValidationFunction exists
        if (oTable.getCreationRow().data("disableAddRowButtonForEmptyData") === "true") {
          const oInternalModelContext = oTable.getBindingContext("internal");
          oInternalModelContext.setProperty("creationRowFieldValidity", {});
        }
      }
      if (mParameters.creationMode === CreationMode.Inline && mParameters.tableId) {
        oTable = this.getView().byId(mParameters.tableId);
      }
      if (oTable && oTable.isA("sap.ui.mdc.Table")) {
        const fnFocusOrScroll = mParameters.creationMode === CreationMode.Inline ? oTable.focusRow.bind(oTable) : oTable.scrollToIndex.bind(oTable);
        oTable.getRowBinding().attachEventOnce("change", async function () {
          await oCreation;
          fnFocusOrScroll(mParameters.createAtEnd ? oTable.getRowBinding().getLength() : 0, true);
        });
      }
      const handleSideEffects = async (oListBinding, oCreationPromise) => {
        try {
          const oNewContext = await oCreationPromise;
          // transient contexts are reliably removed once oNewContext.created() is resolved
          await oNewContext.created();
          const oBindingContext = this.getView().getBindingContext();
          // if there are transient contexts, we must avoid requesting side effects
          // this is avoid a potential list refresh, there could be a side effect that refreshes the list binding
          // if list binding is refreshed, transient contexts might be lost
          if (!CommonUtils.hasTransientContext(oListBinding)) {
            const appComponent = this.getAppComponent();
            appComponent.getSideEffectsService().requestSideEffectsForNavigationProperty(oListBinding.getPath(), oBindingContext);
          }
        } catch (oError) {
          Log.error("Error while creating the document", oError);
        }
      };

      /**
       * @param aValidationMessages Error messages from custom validation function
       */
      const createCustomValidationMessages = aValidationMessages => {
        var _oTable$getBindingCon;
        const sCustomValidationFunction = oTable && oTable.getCreationRow().data("customValidationFunction");
        const mCustomValidity = oTable && ((_oTable$getBindingCon = oTable.getBindingContext("internal")) === null || _oTable$getBindingCon === void 0 ? void 0 : _oTable$getBindingCon.getProperty("creationRowCustomValidity"));
        const oMessageManager = Core.getMessageManager();
        const aCustomMessages = [];
        let oFieldControl;
        let sTarget;

        // Remove existing CustomValidation message
        oMessageManager.getMessageModel().getData().forEach(function (oMessage) {
          if (oMessage.code === sCustomValidationFunction) {
            oMessageManager.removeMessages(oMessage);
          }
        });
        aValidationMessages.forEach(oValidationMessage => {
          // Handle Bound CustomValidation message
          if (oValidationMessage.messageTarget) {
            var _oFieldControl$getBin;
            oFieldControl = Core.getControl(mCustomValidity[oValidationMessage.messageTarget].fieldId);
            sTarget = `${(_oFieldControl$getBin = oFieldControl.getBindingContext()) === null || _oFieldControl$getBin === void 0 ? void 0 : _oFieldControl$getBin.getPath()}/${oFieldControl.getBindingPath("value")}`;
            // Add validation message if still not exists
            if (oMessageManager.getMessageModel().getData().filter(function (oMessage) {
              return oMessage.target === sTarget;
            }).length === 0) {
              oMessageManager.addMessages(new Message({
                message: oValidationMessage.messageText,
                processor: this.getView().getModel(),
                type: MessageType.Error,
                code: sCustomValidationFunction,
                technical: false,
                persistent: false,
                target: sTarget
              }));
            }
            // Add controlId in order to get the focus handling of the error popover runable
            const aExistingValidationMessages = oMessageManager.getMessageModel().getData().filter(function (oMessage) {
              return oMessage.target === sTarget;
            });
            aExistingValidationMessages[0].addControlId(mCustomValidity[oValidationMessage.messageTarget].fieldId);

            // Handle Unbound CustomValidation message
          } else {
            aCustomMessages.push({
              code: sCustomValidationFunction,
              text: oValidationMessage.messageText,
              persistent: true,
              type: MessageType.Error
            });
          }
        });
        if (aCustomMessages.length > 0) {
          this.getMessageHandler().showMessageDialog({
            customMessages: aCustomMessages
          });
        }
      };
      const resolveCreationMode = (initialCreationMode, programmingModel, oListBinding, oMetaModel) => {
        if (initialCreationMode && initialCreationMode !== CreationMode.NewPage) {
          // use the passed creation mode
          return initialCreationMode;
        } else {
          // NewAction is not yet supported for NavigationProperty collection
          if (!oListBinding.isRelative()) {
            const sPath = oListBinding.getPath(),
              // if NewAction with parameters is present, then creation is 'Deferred'
              // in the absence of NewAction or NewAction with parameters, creation is async
              sNewAction = programmingModel === ProgrammingModel.Draft ? oMetaModel.getObject(`${sPath}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction`) : oMetaModel.getObject(`${sPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction`);
            if (sNewAction) {
              const aParameters = oMetaModel.getObject(`/${sNewAction}/@$ui5.overload/0/$Parameter`) || [];
              // binding parameter (eg: _it) is not considered
              if (aParameters.length > 1) {
                return CreationMode.Deferred;
              }
            }
          }
          const sMetaPath = oMetaModel.getMetaPath(oListBinding === null || oListBinding === void 0 ? void 0 : oListBinding.getHeaderContext().getPath());
          const aNonComputedVisibleKeyFields = getNonComputedVisibleFields(oMetaModel, sMetaPath, this.getAppComponent());
          if (aNonComputedVisibleKeyFields.length > 0) {
            return CreationMode.Deferred;
          }
          return CreationMode.Async;
        }
      };
      if (bShouldBusyLock) {
        BusyLocker.lock(oLockObject);
      }
      try {
        const aValidationMessages = await this.syncTask(oExecCustomValidation);
        if (aValidationMessages.length > 0) {
          createCustomValidationMessages(aValidationMessages);
          Log.error("Custom Validation failed");
          // if custom validation fails, we leave the method immediately
          return;
        }
        let oListBinding;
        mParameters = mParameters || {};
        if (vListBinding && typeof vListBinding === "object") {
          // we already get a list binding use this one
          oListBinding = vListBinding;
        } else if (typeof vListBinding === "string") {
          oListBinding = new ODataListBinding(this.getView().getModel(), vListBinding);
          mParameters.creationMode = CreationMode.Sync;
          delete mParameters.createAtEnd;
        } else {
          throw new Error("Binding object or path expected");
        }
        const oModel = oListBinding.getModel();
        const sProgrammingModel = this.getProgrammingModel(oListBinding);
        const resolvedCreationMode = resolveCreationMode(mParameters.creationMode, sProgrammingModel, oListBinding, oModel.getMetaModel());
        let mArgs;
        const oCreationRow = mParameters.creationRow;
        let oCreationRowContext;
        let oPayload;
        let sMetaPath;
        const oMetaModel = oModel.getMetaModel();
        const oRoutingListener = this.getInternalRouting();
        if (resolvedCreationMode !== CreationMode.Deferred) {
          if (resolvedCreationMode === CreationMode.CreationRow) {
            oCreationRowContext = oCreationRow.getBindingContext();
            sMetaPath = oMetaModel.getMetaPath(oCreationRowContext.getPath());
            // prefill data from creation row
            oPayload = oCreationRowContext.getObject();
            mParameters.data = {};
            Object.keys(oPayload).forEach(function (sPropertyPath) {
              const oProperty = oMetaModel.getObject(`${sMetaPath}/${sPropertyPath}`);
              // ensure navigation properties are not part of the payload, deep create not supported
              if (oProperty && oProperty.$kind === "NavigationProperty") {
                return;
              }
              mParameters.data[sPropertyPath] = oPayload[sPropertyPath];
            });
            await this._checkForValidationErrors( /*oCreationRowContext*/);
          }
          if (resolvedCreationMode === CreationMode.CreationRow || resolvedCreationMode === CreationMode.Inline) {
            var _oTable, _oTable$getParent, _oTable$getParent$get;
            mParameters.keepTransientContextOnFailed = false; // currently not fully supported
            // busy handling shall be done locally only
            mParameters.busyMode = "Local";
            mParameters.busyId = (_oTable = oTable) === null || _oTable === void 0 ? void 0 : (_oTable$getParent = _oTable.getParent()) === null || _oTable$getParent === void 0 ? void 0 : (_oTable$getParent$get = _oTable$getParent.getTableDefinition()) === null || _oTable$getParent$get === void 0 ? void 0 : _oTable$getParent$get.annotation.id;

            // take care on message handling, draft indicator (in case of draft)
            // Attach the create sent and create completed event to the object page binding so that we can react
            this.handleCreateEvents(oListBinding);
          }
          if (!mParameters.parentControl) {
            mParameters.parentControl = this.getView();
          }
          mParameters.beforeCreateCallBack = this.onBeforeCreate;

          // In case the application was called with preferredMode=autoCreateWith, we want to skip the
          // action parameter dialog
          mParameters.skipParameterDialog = oAppComponent.getStartupMode() === StartupMode.AutoCreate;
          oCreation = transactionHelper.createDocument(oListBinding, mParameters, this.getAppComponent(), this.getMessageHandler(), false);
          // SideEffects on Create
          // if Save is pressed directly after filling the CreationRow, no SideEffects request
          if (!mParameters.bSkipSideEffects) {
            handleSideEffects(oListBinding, oCreation);
          }
        }
        let oNavigation;
        switch (resolvedCreationMode) {
          case CreationMode.Deferred:
            oNavigation = oRoutingListener.navigateForwardToContext(oListBinding, {
              bDeferredContext: true,
              editable: true,
              bForceFocus: true
            });
            break;
          case CreationMode.Async:
            oNavigation = oRoutingListener.navigateForwardToContext(oListBinding, {
              asyncContext: oCreation,
              editable: true,
              bForceFocus: true
            });
            break;
          case CreationMode.Sync:
            mArgs = {
              editable: true,
              bForceFocus: true
            };
            if (sProgrammingModel == ProgrammingModel.Sticky || mParameters.createAction) {
              mArgs.transient = true;
            }
            oNavigation = (_oCreation = oCreation) === null || _oCreation === void 0 ? void 0 : _oCreation.then(function (oNewDocumentContext) {
              if (!oNewDocumentContext) {
                const coreResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
                return oRoutingListener.navigateToMessagePage(coreResourceBundle.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR"), {
                  title: coreResourceBundle.getText("C_COMMON_SAPFE_ERROR"),
                  description: coreResourceBundle.getText("C_EDITFLOW_SAPFE_CREATION_FAILED_DESCRIPTION")
                });
              } else {
                // In case the Sync creation was triggered for a deferred creation, we don't navigate forward
                // as we're already on the corresponding ObjectPage
                return mParameters.bFromDeferred ? oRoutingListener.navigateToContext(oNewDocumentContext, mArgs) : oRoutingListener.navigateForwardToContext(oNewDocumentContext, mArgs);
              }
            });
            break;
          case CreationMode.Inline:
            this.syncTask(oCreation);
            break;
          case CreationMode.CreationRow:
            // the creation row shall be cleared once the validation check was successful and
            // therefore the POST can be sent async to the backend
            try {
              const oCreationRowListBinding = oCreationRowContext.getBinding();
              const oNewTransientContext = oCreationRowListBinding.create();
              oCreationRow.setBindingContext(oNewTransientContext);

              // this is needed to avoid console errors TO be checked with model colleagues
              oNewTransientContext.created().catch(function () {
                Log.trace("transient fast creation context deleted");
              });
              oNavigation = oCreationRowContext.delete("$direct");
            } catch (oError) {
              // Reset busy indicator after a validation error
              if (BusyLocker.isLocked(this.getView().getModel("ui"))) {
                BusyLocker.unlock(this.getView().getModel("ui"));
              }
              Log.error("CreationRow navigation error: ", oError);
            }
            break;
          default:
            oNavigation = Promise.reject(`Unhandled creationMode ${resolvedCreationMode}`);
            break;
        }
        if (oCreation) {
          try {
            const aParams = await Promise.all([oCreation, oNavigation]);
            this._setStickySessionInternalProperties(sProgrammingModel, oModel);
            this.setEditMode(EditMode.Editable); // The createMode flag will be set in computeEditMode
            if (!oListBinding.isRelative() && sProgrammingModel === ProgrammingModel.Sticky) {
              var _entitySet$annotation, _entitySet$annotation2;
              // Workaround to tell the OP that we've created a new object from the LR
              const metaModel = oListBinding.getModel().getMetaModel();
              const metaContext = metaModel.bindContext(metaModel.getMetaPath(oListBinding.getPath()));
              const entitySet = getInvolvedDataModelObjects(metaContext).startingEntitySet;
              const newAction = entitySet === null || entitySet === void 0 ? void 0 : (_entitySet$annotation = entitySet.annotations.Session) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.StickySessionSupported) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.NewAction;
              this.getInternalModel().setProperty("/lastInvokedAction", newAction);
            }
            const oNewDocumentContext = aParams[0];
            if (oNewDocumentContext) {
              this.setDocumentModifiedOnCreate(oListBinding);
              if (!this._isFclEnabled()) {
                EditState.setEditStateDirty();
              }
              this._sendActivity(Activity.Create, oNewDocumentContext);
              if (ModelHelper.isCollaborationDraftSupported(oModel.getMetaModel()) && !ActivitySync.isConnected(this.getView())) {
                // according to UX in case of enabled collaboration draft we share the object immediately
                await shareObject(oNewDocumentContext);
              }
            }
          } catch (error) {
            // TODO: currently, the only errors handled here are raised as string - should be changed to Error objects
            if (error === Constants.CancelActionDialog || error === Constants.ActionExecutionFailed || error === Constants.CreationFailed) {
              // creation has been cancelled by user or failed in backend => in case we have navigated to transient context before, navigate back
              // the switch-statement above seems to indicate that this happens in creationModes deferred and async. But in fact, in these cases after the navigation from routeMatched in OP component
              // createDeferredContext is triggerd, which calls this method (createDocument) again - this time with creationMode sync. Therefore, also in that mode we need to trigger back navigation.
              // The other cases might still be needed in case the navigation fails.
              if (resolvedCreationMode === CreationMode.Sync || resolvedCreationMode === CreationMode.Deferred || resolvedCreationMode === CreationMode.Async) {
                oRoutingListener.navigateBackFromTransientState();
              }
            }
            throw error;
          }
        }
      } finally {
        if (bShouldBusyLock) {
          BusyLocker.unlock(oLockObject);
        }
      }
    }

    /**
     * Validates a document.
     *
     * @returns Promise resolves with result of the custom validation function
     */;
    _proto.validateDocument = function validateDocument(context, parameters) {
      return this.getTransactionHelper().validateDocument(context, parameters, this.getView());
    }

    /**
     * Creates several documents.
     *
     * @param listBinding The listBinding used to create the documents
     * @param dataForCreate The initial data for the new documents
     * @param createAtEnd True if the new contexts need to be created at the end of the list binding
     * @param isFromCopyPaste True if the creation has been triggered by a paste action
     * @param beforeCreateCallBack Callback to be called before the creation
     * @param createAsInactive True if the contexts need to be created as inactive
     * @param requestSideEffects True by default, false if SideEffects should not be requested
     * @returns A Promise with the newly created contexts.
     */;
    _proto.createMultipleDocuments = async function createMultipleDocuments(listBinding, dataForCreate, createAtEnd, isFromCopyPaste, beforeCreateCallBack) {
      let createAsInactive = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      let requestSideEffects = arguments.length > 6 ? arguments[6] : undefined;
      const transactionHelper = this.getTransactionHelper();
      const lockObject = this.getGlobalUIModel();
      const targetListBinding = listBinding;
      requestSideEffects = requestSideEffects !== false;
      BusyLocker.lock(lockObject);
      try {
        await this.syncTask();
        if (beforeCreateCallBack) {
          await beforeCreateCallBack({
            contextPath: targetListBinding.getPath()
          });
        }
        const metaModel = targetListBinding.getModel().getMetaModel();
        let metaPath;
        if (targetListBinding.getContext()) {
          metaPath = metaModel.getMetaPath(`${targetListBinding.getContext().getPath()}/${targetListBinding.getPath()}`);
        } else {
          metaPath = metaModel.getMetaPath(targetListBinding.getPath());
        }
        this.handleCreateEvents(targetListBinding);

        // Iterate on all items and store the corresponding creation promise
        const creationPromises = dataForCreate.map(propertyValues => {
          const createParameters = {
            data: {}
          };
          createParameters.keepTransientContextOnFailed = false; // currently not fully supported
          createParameters.busyMode = "None";
          createParameters.creationMode = CreationMode.CreationRow;
          createParameters.parentControl = this.getView();
          createParameters.createAtEnd = createAtEnd;
          createParameters.inactive = createAsInactive;

          // Remove navigation properties as we don't support deep create
          for (const propertyPath in propertyValues) {
            const property = metaModel.getObject(`${metaPath}/${propertyPath}`);
            if (property && property.$kind !== "NavigationProperty" && propertyPath.indexOf("/") < 0 && propertyValues[propertyPath]) {
              createParameters.data[propertyPath] = propertyValues[propertyPath];
            }
          }
          return transactionHelper.createDocument(targetListBinding, createParameters, this.getAppComponent(), this.getMessageHandler(), isFromCopyPaste);
        });
        const createdContexts = await Promise.all(creationPromises);
        if (!createAsInactive) {
          this.setDocumentModifiedOnCreate(targetListBinding);
        }
        // transient contexts are reliably removed once oNewContext.created() is resolved
        await Promise.all(createdContexts.map(newContext => {
          if (!newContext.bInactive) {
            return newContext.created();
          }
        }));
        const viewBindingContext = this.getView().getBindingContext();

        // if there are transient contexts, we must avoid requesting side effects
        // this is avoid a potential list refresh, there could be a side effect that refreshes the list binding
        // if list binding is refreshed, transient contexts might be lost
        if (requestSideEffects && !CommonUtils.hasTransientContext(targetListBinding)) {
          this.getAppComponent().getSideEffectsService().requestSideEffectsForNavigationProperty(targetListBinding.getPath(), viewBindingContext);
        }
        return createdContexts;
      } catch (err) {
        Log.error("Error while creating multiple documents.");
        throw err;
      } finally {
        BusyLocker.unlock(lockObject);
      }
    }

    /**
     * This function can be used to intercept the 'Save' action. You can execute custom coding in this function.
     * The framework waits for the returned promise to be resolved before continuing the 'Save' action.
     * If you reject the promise, the 'Save' action is stopped and the user stays in edit mode.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param _mParameters Object containing the parameters passed to onBeforeSave
     * @param _mParameters.context Page context that is going to be saved.
     * @returns A promise to be returned by the overridden method. If resolved, the 'Save' action is triggered. If rejected, the 'Save' action is not triggered and the user stays in edit mode.
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @alias sap.fe.core.controllerextensions.EditFlow#onBeforeSave
     * @public
     * @since 1.90.0
     */;
    _proto.onBeforeSave = function onBeforeSave(_mParameters) {
      // to be overridden
      return Promise.resolve();
    }

    /**
     * This function can be used to intercept the 'Create' action. You can execute custom coding in this function.
     * The framework waits for the returned promise to be resolved before continuing the 'Create' action.
     * If you reject the promise, the 'Create' action is stopped.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param _mParameters Object containing the parameters passed to onBeforeCreate
     * @param _mParameters.contextPath Path pointing to the context on which Create action is triggered
     * @param _mParameters.createParameters Array of values that are filled in the Action Parameter Dialog
     * @returns A promise to be returned by the overridden method. If resolved, the 'Create' action is triggered. If rejected, the 'Create' action is not triggered.
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @alias sap.fe.core.controllerextensions.EditFlow#onBeforeCreate
     * @public
     * @since 1.98.0
     */;
    _proto.onBeforeCreate = function onBeforeCreate(_mParameters) {
      // to be overridden
      return Promise.resolve();
    }

    /**
     * This function can be used to intercept the 'Edit' action. You can execute custom coding in this function.
     * The framework waits for the returned promise to be resolved before continuing the 'Edit' action.
     * If you reject the promise, the 'Edit' action is stopped and the user stays in display mode.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param _mParameters Object containing the parameters passed to onBeforeEdit
     * @param _mParameters.context Page context that is going to be edited.
     * @returns A promise to be returned by the overridden method. If resolved, the 'Edit' action is triggered. If rejected, the 'Edit' action is not triggered and the user stays in display mode.
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @alias sap.fe.core.controllerextensions.EditFlow#onBeforeEdit
     * @public
     * @since 1.98.0
     */;
    _proto.onBeforeEdit = function onBeforeEdit(_mParameters) {
      // to be overridden
      return Promise.resolve();
    }

    /**
     * This function can be used to intercept the 'Discard' action. You can execute custom coding in this function.
     * The framework waits for the returned promise to be resolved before continuing the 'Discard' action.
     * If you reject the promise, the 'Discard' action is stopped and the user stays in edit mode.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param _mParameters Object containing the parameters passed to onBeforeDiscard
     * @param _mParameters.context Page context that is going to be discarded.
     * @returns A promise to be returned by the overridden method. If resolved, the 'Discard' action is triggered. If rejected, the 'Discard' action is not triggered and the user stays in edit mode.
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @alias sap.fe.core.controllerextensions.EditFlow#onBeforeDiscard
     * @public
     * @since 1.98.0
     */;
    _proto.onBeforeDiscard = function onBeforeDiscard(_mParameters) {
      // to be overridden
      return Promise.resolve();
    }

    /**
     * This function can be used to intercept the 'Delete' action. You can execute custom coding in this function.
     * The framework waits for the returned promise to be resolved before continuing the 'Delete' action.
     * If you reject the promise, the 'Delete' action is stopped.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param _mParameters Object containing the parameters passed to onBeforeDelete
     * @param _mParameters.contexts An array of contexts that are going to be deleted
     * @returns A promise to be returned by the overridden method. If resolved, the 'Delete' action is triggered. If rejected, the 'Delete' action is not triggered.
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @alias sap.fe.core.controllerextensions.EditFlow#onBeforeDelete
     * @public
     * @since 1.98.0
     */;
    _proto.onBeforeDelete = function onBeforeDelete(_mParameters) {
      // to be overridden
      return Promise.resolve();
    }

    // Internal only params ---
    // @param {boolean} mParameters.bExecuteSideEffectsOnError Indicates whether SideEffects need to be ignored when user clicks on Save during an Inline creation
    // @param {object} mParameters.bindings List bindings of the tables in the view.
    // Both of the above parameters are for the same purpose. User can enter some information in the creation row(s) but does not 'Add row', instead clicks Save.
    // There can be more than one in the view.

    /**
     * Saves a new document after checking it.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oContext  Context of the editable document
     * @param mParameters PRIVATE
     * @returns Promise resolves once save is complete
     * @alias sap.fe.core.controllerextensions.EditFlow#saveDocument
     * @public
     * @since 1.90.0
     */;
    _proto.saveDocument = async function saveDocument(oContext, mParameters) {
      mParameters = mParameters || {};
      const bExecuteSideEffectsOnError = mParameters.bExecuteSideEffectsOnError || undefined;
      const bDraftNavigation = true;
      const transactionHelper = this.getTransactionHelper();
      const aBindings = mParameters.bindings;
      try {
        await this.syncTask();
        // in case of saving / activating the bound transition messages shall be removed before the PATCH/POST
        // is sent to the backend
        this.getMessageHandler().removeTransitionMessages();
        await this._submitOpenChanges(oContext);
        await this._checkForValidationErrors();
        await this.base.editFlow.onBeforeSave({
          context: oContext
        });
        const sProgrammingModel = this.getProgrammingModel(oContext);
        const oRootViewController = this._getRootViewController();
        let siblingInfo;
        if ((sProgrammingModel === ProgrammingModel.Sticky || oContext.getProperty("HasActiveEntity")) && oRootViewController.isFclEnabled()) {
          // No need to try to get rightmost context in case of a new object
          siblingInfo = await this._computeSiblingInformation(oContext, oRootViewController.getRightmostContext(), sProgrammingModel, true);
        }
        const activeDocumentContext = await transactionHelper.saveDocument(oContext, this.getAppComponent(), this._getResourceModel(), bExecuteSideEffectsOnError, aBindings, this.getMessageHandler(), this.getCreationMode());
        this._removeStickySessionInternalProperties(sProgrammingModel);
        this._sendActivity(Activity.Activate, activeDocumentContext);
        ActivitySync.disconnect(this.getView());
        this._triggerConfiguredSurvey(StandardActions.save, TriggerType.standardAction);
        this.setDocumentModified(false);
        this.setEditMode(EditMode.Display, false);
        this.getMessageHandler().showMessageDialog();
        if (activeDocumentContext !== oContext) {
          let contextToNavigate = activeDocumentContext;
          if (oRootViewController.isFclEnabled()) {
            siblingInfo = siblingInfo ?? this._createSiblingInfo(oContext, activeDocumentContext);
            this._updatePathsInHistory(siblingInfo.pathMapping);
            if (siblingInfo.targetContext.getPath() !== activeDocumentContext.getPath()) {
              contextToNavigate = siblingInfo.targetContext;
            }
          }
          await this._handleNewContext(contextToNavigate, false, false, bDraftNavigation, true);
        }
      } catch (oError) {
        if (!(oError && oError.canceled)) {
          Log.error("Error while saving the document", oError);
        }
        throw oError;
      }
    }

    /**
     * Switches the UI between draft and active document.
     *
     * @param oContext The context to switch from
     * @returns Promise resolved once the switch is done
     */;
    _proto.toggleDraftActive = async function toggleDraftActive(oContext) {
      const oContextData = oContext.getObject();
      let bEditable;
      const bIsDraft = oContext && this.getProgrammingModel(oContext) === ProgrammingModel.Draft;

      //toggle between draft and active document is only available for edit drafts and active documents with draft)
      if (!bIsDraft || !(!oContextData.IsActiveEntity && oContextData.HasActiveEntity || oContextData.IsActiveEntity && oContextData.HasDraftEntity)) {
        return;
      }
      if (!oContextData.IsActiveEntity && oContextData.HasActiveEntity) {
        //start Point: edit draft
        bEditable = false;
      } else {
        // start point active document
        bEditable = true;
      }
      try {
        const oRootViewController = this._getRootViewController();
        const oRightmostContext = oRootViewController.isFclEnabled() ? oRootViewController.getRightmostContext() : oContext;
        let siblingInfo = await this._computeSiblingInformation(oContext, oRightmostContext, ProgrammingModel.Draft, false);
        if (!siblingInfo && oContext !== oRightmostContext) {
          // Try to compute sibling info for the root context if it fails for the rightmost context
          // --> In case of FCL, if we try to switch between draft and active but a child entity has no sibling, the switch will close the child column
          siblingInfo = await this._computeSiblingInformation(oContext, oContext, ProgrammingModel.Draft, false);
        }
        if (siblingInfo) {
          this.setEditMode(bEditable ? EditMode.Editable : EditMode.Display, false); //switch to edit mode only if a draft is available

          if (oRootViewController.isFclEnabled()) {
            const lastSemanticMapping = this._getSemanticMapping();
            if ((lastSemanticMapping === null || lastSemanticMapping === void 0 ? void 0 : lastSemanticMapping.technicalPath) === oContext.getPath()) {
              const targetPath = siblingInfo.pathMapping[siblingInfo.pathMapping.length - 1].newPath;
              siblingInfo.pathMapping.push({
                oldPath: lastSemanticMapping.semanticPath,
                newPath: targetPath
              });
            }
            this._updatePathsInHistory(siblingInfo.pathMapping);
          }
          await this._handleNewContext(siblingInfo.targetContext, bEditable, true, true, true);
        } else {
          throw new Error("Error in EditFlow.toggleDraftActive - Cannot find sibling");
        }
      } catch (oError) {
        throw new Error(`Error in EditFlow.toggleDraftActive:${oError}`);
      }
    }

    // Internal only params ---
    // @param {sap.m.Button} mParameters.cancelButton - Currently this is passed as cancelButton internally (replaced by mParameters.control in the JSDoc below). Currently it is also mandatory.
    // Plan - This should not be mandatory. If not provided, we should have a default that can act as reference control for the discard popover OR we can show a dialog instead of a popover.

    /**
     * Discard the editable document.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oContext  Context of the editable document
     * @param mParameters Can contain the following attributes:
     * @param mParameters.control This is the control used to open the discard popover
     * @param mParameters.skipDiscardPopover Optional, supresses the discard popover and allows custom handling
     * @returns Promise resolves once editable document has been discarded
     * @alias sap.fe.core.controllerextensions.EditFlow#cancelDocument
     * @public
     * @since 1.90.0
     */;
    _proto.cancelDocument = async function cancelDocument(oContext, mParameters) {
      const transactionHelper = this.getTransactionHelper();
      const mInParameters = mParameters;
      let siblingInfo;
      let isNewDocument = false;
      mInParameters.cancelButton = mParameters.control || mInParameters.cancelButton;
      mInParameters.beforeCancelCallBack = this.base.editFlow.onBeforeDiscard;
      try {
        await this.syncTask();
        const sProgrammingModel = this.getProgrammingModel(oContext);
        if ((sProgrammingModel === ProgrammingModel.Sticky || oContext.getProperty("HasActiveEntity")) && this._isFclEnabled()) {
          const oRootViewController = this._getRootViewController();

          // No need to try to get rightmost context in case of a new object
          siblingInfo = await this._computeSiblingInformation(oContext, oRootViewController.getRightmostContext(), sProgrammingModel, true);
        }
        const cancelResult = await transactionHelper.cancelDocument(oContext, mInParameters, this.getAppComponent(), this._getResourceModel(), this.getMessageHandler(), this.getCreationMode(), this.isDocumentModified());
        this._getRootViewController().getInstancedViews().forEach(view => {
          const context = view.getBindingContext();
          if (context && context.isKeepAlive()) {
            context.setKeepAlive(false);
          }
        });
        const bDraftNavigation = true;
        this._removeStickySessionInternalProperties(sProgrammingModel);
        this.setEditMode(EditMode.Display, false);
        this.setDocumentModified(false);
        this.setDraftStatus(DraftStatus.Clear);
        // we force the edit state even for FCL because the draft discard might not be implemented
        // and we may just delete the draft
        EditState.setEditStateDirty();
        if (!cancelResult) {
          this._sendActivity(Activity.Discard, undefined);
          ActivitySync.disconnect(this.getView());
          //in case of a new document, no activeContext is returned --> navigate back.
          if (!mInParameters.skipBackNavigation) {
            await this.getInternalRouting().navigateBackFromContext(oContext);
            isNewDocument = true;
          }
        } else {
          const oActiveDocumentContext = cancelResult;
          this._sendActivity(Activity.Discard, oActiveDocumentContext);
          ActivitySync.disconnect(this.getView());
          let contextToNavigate = oActiveDocumentContext;
          if (this._isFclEnabled()) {
            siblingInfo = siblingInfo ?? this._createSiblingInfo(oContext, oActiveDocumentContext);
            this._updatePathsInHistory(siblingInfo.pathMapping);
            if (siblingInfo.targetContext.getPath() !== oActiveDocumentContext.getPath()) {
              contextToNavigate = siblingInfo.targetContext;
            }
          }
          if (sProgrammingModel === ProgrammingModel.Draft) {
            // We need to load the semantic keys of the active context, as we need them
            // for the navigation
            await this._fetchSemanticKeyValues(oActiveDocumentContext);
            // We force the recreation of the context, so that it's created and bound in the same microtask,
            // so that all properties are loaded together by autoExpandSelect, so that when switching back to Edit mode
            // $$inheritExpandSelect takes all loaded properties into account (BCP 2070462265)
            if (!mInParameters.skipBindingToView) {
              await this._handleNewContext(contextToNavigate, false, true, bDraftNavigation, true);
            } else {
              return oActiveDocumentContext;
            }
          } else {
            //active context is returned in case of cancel of existing document
            await this._handleNewContext(contextToNavigate, false, false, bDraftNavigation, true);
          }
        }
        if (sProgrammingModel === ProgrammingModel.Draft) {
          //show Draft discarded message toast only for draft enabled apps
          this.showDocumentDiscardMessage(isNewDocument);
        }
      } catch (oError) {
        Log.error("Error while discarding the document", oError);
      }
    }

    /**
     * Brings up a message toast when a draft is discarded.
     *
     * @param isNewDocument This is a Boolean flag that determines whether the document is new or already exists.
     */;
    _proto.showDocumentDiscardMessage = function showDocumentDiscardMessage(isNewDocument) {
      const resourceModel = this._getResourceModel();
      const message = resourceModel.getText("C_TRANSACTION_HELPER_DISCARD_DRAFT_TOAST");
      if (isNewDocument == true) {
        const appComponent = this.getAppComponent();
        appComponent.getRoutingService().attachAfterRouteMatched(this.showMessageWhenNoContext, this);
      } else {
        MessageToast.show(message);
      }
    }

    /**
     * We use this function in showDocumentDiscardMessage when no context is passed.
     */;
    _proto.showMessageWhenNoContext = function showMessageWhenNoContext() {
      const resourceModel = this._getResourceModel();
      const message = resourceModel.getText("C_TRANSACTION_HELPER_DISCARD_DRAFT_TOAST");
      const appComponent = this.getAppComponent();
      MessageToast.show(message);
      appComponent.getRoutingService().detachAfterRouteMatched(this.showMessageWhenNoContext, this);
    }
    /**
     * Checks if a context corresponds to a draft root.
     *
     * @param context The context to check
     * @returns True if the context points to a draft root
     * @private
     */;
    _proto.isDraftRoot = function isDraftRoot(context) {
      const metaModel = context.getModel().getMetaModel();
      const metaContext = metaModel.getMetaContext(context.getPath());
      return ModelHelper.isDraftRoot(getInvolvedDataModelObjects(metaContext).targetEntitySet);
    }

    // Internal only params ---
    // @param {string} mParameters.entitySetName Name of the EntitySet to which the object belongs

    /**
     * Deletes the document.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oContext  Context of the document
     * @param mInParameters Can contain the following attributes:
     * @param mInParameters.title Title of the object being deleted
     * @param mInParameters.description Description of the object being deleted
     * @returns Promise resolves once document has been deleted
     * @alias sap.fe.core.controllerextensions.EditFlow#deleteDocument
     * @public
     * @since 1.90.0
     */;
    _proto.deleteDocument = async function deleteDocument(oContext, mInParameters) {
      const oAppComponent = this.getAppComponent();
      let mParameters = mInParameters;
      if (!mParameters) {
        mParameters = {
          bFindActiveContexts: false
        };
      } else {
        mParameters.bFindActiveContexts = false;
      }
      mParameters.beforeDeleteCallBack = this.base.editFlow.onBeforeDelete;
      try {
        if (this._isFclEnabled() && this.isDraftRoot(oContext) && oContext.getIndex() === undefined && oContext.getProperty("IsActiveEntity") === true && oContext.getProperty("HasDraftEntity") === true) {
          // Deleting an active entity which has a draft that could potentially be displayed in the ListReport (FCL case)
          // --> need to remove the draft from the LR and replace it with the active version, so that the ListBinding is properly refreshed
          // The condition 'oContext.getIndex() === undefined' makes sure the active version isn't already displayed in the LR
          mParameters.beforeDeleteCallBack = async parameters => {
            await this.base.editFlow.onBeforeDelete(parameters);
            try {
              const model = oContext.getModel();
              const siblingContext = model.bindContext(`${oContext.getPath()}/SiblingEntity`).getBoundContext();
              const draftPath = await siblingContext.requestCanonicalPath();
              const draftContextToRemove = model.getKeepAliveContext(draftPath);
              draftContextToRemove.replaceWith(oContext);
            } catch (error) {
              Log.error("Error while replacing the draft instance in the LR ODLB", error);
            }
          };
        }
        await this.deleteDocumentTransaction(oContext, mParameters);

        // Single objet deletion is triggered from an OP header button (not from a list)
        // --> Mark UI dirty and navigate back to dismiss the OP
        if (!this._isFclEnabled()) {
          EditState.setEditStateDirty();
        }
        this._sendActivity(Activity.Delete, oContext);

        // After delete is successfull, we need to detach the setBackNavigation Methods
        if (oAppComponent) {
          oAppComponent.getShellServices().setBackNavigation();
        }
        if ((oAppComponent === null || oAppComponent === void 0 ? void 0 : oAppComponent.getStartupMode()) === StartupMode.Deeplink && !this._isFclEnabled()) {
          // In case the app has been launched with semantic keys, deleting the object we've landed on shall navigate back
          // to the app we came from (except for FCL, where we navigate to LR as usual)
          oAppComponent.getRouterProxy().exitFromApp();
        } else {
          this.getInternalRouting().navigateBackFromContext(oContext);
        }
      } catch (error) {
        Log.error("Error while deleting the document", error);
      }
    }

    /**
     * Submit the current set of changes and navigate back.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oContext  Context of the document
     * @returns Promise resolves once the changes have been saved
     * @alias sap.fe.core.controllerextensions.EditFlow#applyDocument
     * @public
     * @since 1.90.0
     */;
    _proto.applyDocument = async function applyDocument(oContext) {
      const oLockObject = this.getGlobalUIModel();
      try {
        await this.syncTask();
        if (oContext.getModel().hasPendingChanges("$auto")) {
          BusyLocker.lock(oLockObject);
          await this._submitOpenChanges(oContext);
        }
        await this._checkForValidationErrors();
        await this.getMessageHandler().showMessageDialog();
        await this.getInternalRouting().navigateBackFromContext(oContext);
      } finally {
        if (BusyLocker.isLocked(oLockObject)) {
          BusyLocker.unlock(oLockObject);
        }
      }
    }

    // Internal only params ---
    // @param {boolean} [mParameters.bStaticAction] Boolean value for static action, undefined for other actions
    // @param {boolean} [mParameters.isNavigable] Boolean value indicating whether navigation is required after the action has been executed
    // Currently the parameter isNavigable is used internally and should be changed to requiresNavigation as it is a more apt name for this param

    /**
     * Invokes an action (bound or unbound) and tracks the changes so that other pages can be refreshed and show the updated data upon navigation.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param sActionName The name of the action to be called
     * @param mInParameters Contains the following attributes:
     * @param mInParameters.parameterValues A map of action parameter names and provided values
     * @param mInParameters.parameterValues.name Name of the parameter
     * @param mInParameters.parameterValues.value Value of the parameter
     * @param mInParameters.skipParameterDialog Skips the action parameter dialog if values are provided for all of them in parameterValues
     * @param mInParameters.contexts For a bound action, a context or an array with contexts for which the action is to be called must be provided
     * @param mInParameters.model For an unbound action, an instance of an OData V4 model must be provided
     * @param mInParameters.requiresNavigation Boolean value indicating whether navigation is required after the action has been executed. Navigation takes place to the context returned by the action
     * @param mInParameters.label A human-readable label for the action. This is needed in case the action has a parameter and a parameter dialog is shown to the user. The label will be used for the title of the dialog and for the confirmation button
     * @param mInParameters.invocationGrouping Mode how actions are to be called: 'ChangeSet' to put all action calls into one changeset, 'Isolated' to put them into separate changesets
     * @param mExtraParams PRIVATE
     * @returns A promise which resolves once the action has been executed, providing the response
     * @alias sap.fe.core.controllerextensions.EditFlow#invokeAction
     * @public
     * @since 1.90.0
     * @final
     */;
    _proto.invokeAction = async function invokeAction(sActionName, mInParameters, mExtraParams) {
      var _this$getView$getMode;
      let oControl;
      const transactionHelper = this.getTransactionHelper();
      let aParts;
      let sOverloadEntityType;
      let oCurrentActionCallBacks;
      const oView = this.base.getView();
      let mParameters = mInParameters || {};
      // Due to a mistake the invokeAction in the extensionAPI had a different API than this one.
      // The one from the extensionAPI doesn't exist anymore as we expose the full edit flow now but
      // due to compatibility reasons we still need to support the old signature
      if (mParameters.isA && mParameters.isA("sap.ui.model.odata.v4.Context") || Array.isArray(mParameters) || mExtraParams !== undefined) {
        const contexts = mParameters;
        mParameters = mExtraParams || {};
        if (contexts) {
          mParameters.contexts = contexts;
        } else {
          mParameters.model = this.getView().getModel();
        }
      }
      mParameters.isNavigable = mParameters.requiresNavigation || mParameters.isNavigable;

      // Determine if the referenced action is bound or unbound
      const convertedMetadata = convertTypes((_this$getView$getMode = this.getView().getModel()) === null || _this$getView$getMode === void 0 ? void 0 : _this$getView$getMode.getMetaModel());
      // The EntityContainer may NOT be missing, so it should not be able to be undefined, but since in our converted Metadata
      // it can be undefined, I need this workaround here of adding "" since indexOf does not accept something that's
      // undefined.
      if (sActionName.indexOf("" + convertedMetadata.entityContainer.name) > -1) {
        // Unbound actions are always referenced via the action import and we found the EntityContainer in the sActionName so
        // an unbound action is referenced!
        mParameters.isBound = false;
      } else {
        // No entity container in the sActionName, so either a bound or static action is referenced which is also bound!
        mParameters.isBound = true;
      }
      if (!mParameters.parentControl) {
        mParameters.parentControl = this.getView();
      }
      if (mParameters.controlId) {
        oControl = this.getView().byId(mParameters.controlId);
        if (oControl) {
          // TODO: currently this selected contexts update is done within the operation, should be moved out
          mParameters.internalModelContext = oControl.getBindingContext("internal");
        }
      } else {
        mParameters.internalModelContext = oView.getBindingContext("internal");
      }
      if (sActionName && sActionName.indexOf("(") > -1) {
        // get entity type of action overload and remove it from the action path
        // Example sActionName = "<ActionName>(Collection(<OverloadEntityType>))"
        // sActionName = aParts[0] --> <ActionName>
        // sOverloadEntityType = aParts[2] --> <OverloadEntityType>
        aParts = sActionName.split("(");
        sActionName = aParts[0];
        sOverloadEntityType = aParts[aParts.length - 1].replaceAll(")", "");
      }
      if (mParameters.bStaticAction) {
        if (oControl.isTableBound()) {
          mParameters.contexts = oControl.getRowBinding().getHeaderContext();
        } else {
          const sBindingPath = oControl.data("rowsBindingInfo").path,
            oListBinding = new ODataListBinding(this.getView().getModel(), sBindingPath);
          mParameters.contexts = oListBinding.getHeaderContext();
        }
        if (sOverloadEntityType && oControl.getBindingContext()) {
          mParameters.contexts = this._getActionOverloadContextFromMetadataPath(oControl.getBindingContext(), oControl.getRowBinding(), sOverloadEntityType);
        }
        if (mParameters.enableAutoScroll) {
          oCurrentActionCallBacks = this.createActionPromise(sActionName, oControl.sId);
        }
      }
      mParameters.bGetBoundContext = this._getBoundContext(oView, mParameters);
      // Need to know that the action is called from ObjectPage for changeSet Isolated workaround
      mParameters.bObjectPage = oView.getViewData().converterType === "ObjectPage";
      try {
        await this.syncTask();
        const oResponse = await transactionHelper.callAction(sActionName, mParameters, this.getView(), this.getAppComponent(), this.getMessageHandler());
        let listRefreshed;
        if (mParameters.contexts && mParameters.isBound === true) {
          listRefreshed = await this._refreshListIfRequired(this.getActionResponseDataAndKeys(sActionName, oResponse), mParameters.contexts[0]);
        }
        if (ActivitySync.isConnected(this.getView())) {
          let actionRequestedProperties = [];
          if (oResponse) {
            actionRequestedProperties = Array.isArray(oResponse) ? Object.keys(oResponse[0].value.getObject()) : Object.keys(oResponse.getObject());
          }
          this._sendActivity(Activity.Action, mParameters.contexts, sActionName, listRefreshed, actionRequestedProperties);
        }
        this._triggerConfiguredSurvey(sActionName, TriggerType.action);
        if (oCurrentActionCallBacks) {
          oCurrentActionCallBacks.fResolver(oResponse);
        }
        /*
        		We set the (upper) pages to dirty after an execution of an action
        		TODO: get rid of this workaround
        		This workaround is only needed as long as the model does not support the synchronization.
        		Once this is supported we don't need to set the pages to dirty anymore as the context itself
        		is already refreshed (it's just not reflected in the object page)
        		we explicitly don't call this method from the list report but only call it from the object page
        		as if it is called in the list report it's not needed - as we anyway will remove this logic
        		we can live with this
        		we need a context to set the upper pages to dirty - if there are more than one we use the
        		first one as they are anyway siblings
        		*/
        if (mParameters.contexts) {
          if (!this._isFclEnabled()) {
            EditState.setEditStateDirty();
          }
          this.getInternalModel().setProperty("/lastInvokedAction", sActionName);
        }
        if (mParameters.isNavigable) {
          let vContext = oResponse;
          if (Array.isArray(vContext) && vContext.length === 1) {
            vContext = vContext[0].value;
          }
          if (vContext && !Array.isArray(vContext)) {
            const oMetaModel = oView.getModel().getMetaModel();
            const sContextMetaPath = oMetaModel.getMetaPath(vContext.getPath());
            const _fnValidContexts = (contexts, applicableContexts) => {
              return contexts.filter(element => {
                if (applicableContexts) {
                  return applicableContexts.indexOf(element) > -1;
                }
                return true;
              });
            };
            const oActionContext = Array.isArray(mParameters.contexts) ? _fnValidContexts(mParameters.contexts, mParameters.applicableContexts)[0] : mParameters.contexts;
            const sActionContextMetaPath = oActionContext && oMetaModel.getMetaPath(oActionContext.getPath());
            if (sContextMetaPath != undefined && sContextMetaPath === sActionContextMetaPath) {
              if (oActionContext.getPath() !== vContext.getPath()) {
                this.getInternalRouting().navigateForwardToContext(vContext, {
                  checkNoHashChange: true,
                  noHistoryEntry: false
                });
              } else {
                Log.info("Navigation to the same context is not allowed");
              }
            }
          }
        }
        this.base.editFlow.onAfterActionExecution(sActionName);
        return oResponse;
      } catch (err) {
        if (oCurrentActionCallBacks) {
          oCurrentActionCallBacks.fRejector();
        }
        // FIXME: in most situations there is no handler for the rejected promises returnedq
        if (err === Constants.CancelActionDialog) {
          // This leads to console error. Actually the error is already handled (currently directly in press handler of end button in dialog), so it should not be forwarded
          // up to here. However, when dialog handling and backend execution are separated, information whether dialog was cancelled, or backend execution has failed needs
          // to be transported to the place responsible for connecting these two things.
          // TODO: remove special handling one dialog handling and backend execution are separated
          throw new Error("Dialog cancelled");
        } else if (!(err && (err.canceled || err.rejectedItems && err.rejectedItems[0].canceled))) {
          // TODO: analyze, whether this is of the same category as above
          throw new Error(`Error in EditFlow.invokeAction:${err}`);
        }
        // TODO: Any unexpected errors probably should not be ignored!
      }
    }

    /**
     * Hook which can be overridden after the action execution.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param _actionName Name of the action
     * @alias sap.fe.core.controllerextensions.EditFlow#onAfterActionExecution
     * @private
     * @since 1.114.0
     */;
    _proto.onAfterActionExecution = async function onAfterActionExecution(_actionName) {
      //to be overridden
    }

    /**
     * Secured execution of the given function. Ensures that the function is only executed when certain conditions are fulfilled.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param fnFunction The function to be executed. Should return a promise that is settled after completion of the execution. If nothing is returned, immediate completion is assumed.
     * @param mParameters Definitions of the preconditions to be checked before execution
     * @param mParameters.busy Defines the busy indicator
     * @param mParameters.busy.set Triggers a busy indicator when the function is executed.
     * @param mParameters.busy.check Executes function only if application isn't busy.
     * @param mParameters.updatesDocument This operation updates the current document without using the bound model and context. As a result, the draft status is updated if a draft document exists, and the user has to confirm the cancellation of the editing process.
     * @returns A promise that is rejected if the execution is prohibited and resolved by the promise returned by the fnFunction.
     * @alias sap.fe.core.controllerextensions.EditFlow#securedExecution
     * @public
     * @since 1.90.0
     */;
    _proto.securedExecution = function securedExecution(fnFunction, mParameters) {
      var _mParameters$busy, _mParameters$busy2;
      const bBusySet = (mParameters === null || mParameters === void 0 ? void 0 : (_mParameters$busy = mParameters.busy) === null || _mParameters$busy === void 0 ? void 0 : _mParameters$busy.set) ?? true,
        bBusyCheck = (mParameters === null || mParameters === void 0 ? void 0 : (_mParameters$busy2 = mParameters.busy) === null || _mParameters$busy2 === void 0 ? void 0 : _mParameters$busy2.check) ?? true,
        bUpdatesDocument = (mParameters === null || mParameters === void 0 ? void 0 : mParameters.updatesDocument) ?? false,
        oLockObject = this.getGlobalUIModel(),
        oContext = this.getView().getBindingContext(),
        bIsDraft = oContext && this.getProgrammingModel(oContext) === ProgrammingModel.Draft;
      if (bBusyCheck && BusyLocker.isLocked(oLockObject)) {
        return Promise.reject("Application already busy therefore execution rejected");
      }

      // we have to set busy and draft indicator immediately also the function might be executed later in queue
      if (bBusySet) {
        BusyLocker.lock(oLockObject);
      }
      if (bUpdatesDocument && bIsDraft) {
        this.setDraftStatus(DraftStatus.Saving);
      }
      this.getMessageHandler().removeTransitionMessages();
      return this.syncTask(fnFunction).then(() => {
        if (bUpdatesDocument) {
          this.setDocumentModified(true);
          if (!this._isFclEnabled()) {
            EditState.setEditStateDirty();
          }
          if (bIsDraft) {
            this.setDraftStatus(DraftStatus.Saved);
          }
        }
      }).catch(oError => {
        if (bUpdatesDocument && bIsDraft) {
          this.setDraftStatus(DraftStatus.Clear);
        }
        return Promise.reject(oError);
      }).finally(() => {
        if (bBusySet) {
          BusyLocker.unlock(oLockObject);
        }
        this.getMessageHandler().showMessageDialog();
      });
    }

    /**
     * Handles the patchSent event: register document modification.
     *
     * @param oEvent The event sent by the binding
     */;
    _proto.handlePatchSent = function handlePatchSent(oEvent) {
      var _this$getView, _this$getView$getBind;
      // In collaborative draft, disable ETag check for PATCH requests
      const isInCollaborativeDraft = ActivitySync.isConnected(this.getView());
      if (isInCollaborativeDraft) {
        oEvent.getSource().getModel().setIgnoreETag(true);
      }
      if (!((_this$getView = this.getView()) !== null && _this$getView !== void 0 && (_this$getView$getBind = _this$getView.getBindingContext("internal")) !== null && _this$getView$getBind !== void 0 && _this$getView$getBind.getProperty("skipPatchHandlers"))) {
        const sourceBinding = oEvent.getSource();
        // Create a promise that will be resolved or rejected when the path is completed
        const oPatchPromise = new Promise((resolve, reject) => {
          oEvent.getSource().attachEventOnce("patchCompleted", patchCompletedEvent => {
            // Re-enable ETag checks
            if (isInCollaborativeDraft) {
              oEvent.getSource().getModel().setIgnoreETag(false);
            }
            if (oEvent.getSource().isA("sap.ui.model.odata.v4.ODataListBinding")) {
              var _this$getView2;
              ActionRuntime.setActionEnablementAfterPatch(this.getView(), sourceBinding, (_this$getView2 = this.getView()) === null || _this$getView2 === void 0 ? void 0 : _this$getView2.getBindingContext("internal"));
            }
            const bSuccess = patchCompletedEvent.getParameter("success");
            if (bSuccess) {
              resolve();
            } else {
              reject();
            }
          });
        });
        this.updateDocument(sourceBinding, oPatchPromise);
      }
    }

    /**
     * Handles the CreateActivate event.
     *
     * @param oEvent The event sent by the binding
     */;
    _proto.handleCreateActivate = async function handleCreateActivate(oEvent) {
      const oBinding = oEvent.getSource();
      const transactionHelper = this.getTransactionHelper();
      const bAtEnd = true;
      const bInactive = true;
      const oParams = {
        creationMode: CreationMode.Inline,
        createAtEnd: bAtEnd,
        inactive: bInactive,
        keepTransientContextOnFailed: false,
        // currently not fully supported
        busyMode: "None"
      };
      try {
        var _activatedContext$cre;
        // Send notification to other users only after the creation has been finalized
        const activatedContext = oEvent.getParameter("context");
        (_activatedContext$cre = activatedContext.created()) === null || _activatedContext$cre === void 0 ? void 0 : _activatedContext$cre.then(() => {
          this._sendActivity(Activity.Create, activatedContext);
        }).catch(() => {
          Log.warning(`Failed to activate context ${activatedContext.getPath()}`);
        });

        // Create a new inactive context (empty row in the table)
        const newInactiveContext = await transactionHelper.createDocument(oBinding, oParams, this.getAppComponent(), this.getMessageHandler(), false);
        if (newInactiveContext) {
          if (!this._isFclEnabled()) {
            EditState.setEditStateDirty();
          }
        }
      } catch (error) {
        Log.error("Failed to activate new row -", error);
      }
    }

    /**
     * Performs a task in sync with other tasks created via this function.
     * Returns the promise chain of the task.
     *
     * @param [newTask] Optional, a promise or function to be executed synchronously
     * @returns Promise resolves once the task is completed
     * @private
     */;
    _proto.syncTask = function syncTask(newTask) {
      if (newTask) {
        if (typeof newTask === "function") {
          this.syncTasks = this.syncTasks.then(newTask).catch(function () {
            return Promise.resolve();
          });
        } else {
          this.syncTasks = this.syncTasks.then(() => newTask).catch(function () {
            return Promise.resolve();
          });
        }
      }
      return this.syncTasks;
    }

    /**
     * Decides if a document is to be shown in display or edit mode.
     *
     * @param {sap.ui.model.odata.v4.Context} oContext The context to be displayed or edited
     * @returns {Promise} Promise resolves once the edit mode is computed
     */;
    _proto.computeEditMode = async function computeEditMode(context) {
      const programmingModel = this.getProgrammingModel(context);
      if (programmingModel === ProgrammingModel.Draft) {
        try {
          this.setDraftStatus(DraftStatus.Clear);
          const globalModel = this.getGlobalUIModel();
          globalModel.setProperty("/isEditablePending", true, undefined, true);
          const isActiveEntity = await context.requestObject("IsActiveEntity");
          if (isActiveEntity === false) {
            // in case the document is draft set it in edit mode
            this.setEditMode(EditMode.Editable);
            const hasActiveEntity = await context.requestObject("HasActiveEntity");
            this.setEditMode(undefined, !hasActiveEntity);
          } else {
            // active document, stay on display mode
            this.setEditMode(EditMode.Display, false);
          }
          globalModel.setProperty("/isEditablePending", false, undefined, true);
        } catch (error) {
          Log.error("Error while determining the editMode for draft", error);
          throw error;
        }
      } else if (programmingModel === ProgrammingModel.Sticky) {
        const lastInvokedActionName = this.getInternalModel().getProperty("/lastInvokedAction");
        if (lastInvokedActionName && this.isNewActionForSticky(lastInvokedActionName, context)) {
          this.setEditMode(EditMode.Editable, true);
          if (!this.getAppComponent()._isFclEnabled()) {
            EditState.setEditStateDirty();
          }
          this.handleStickyOn(context);
          this.getInternalModel().setProperty("/lastInvokedAction", undefined);
        }
      }
    }

    //////////////////////////////////////
    // Private methods
    //////////////////////////////////////

    /**
     * Internal method to delete a context or an array of contexts.
     *
     * @param contexts The context(s) to be deleted
     * @param parameters Parameters for deletion
     */;
    _proto.deleteDocumentTransaction = async function deleteDocumentTransaction(contexts, parameters) {
      var _sap$ui$getCore$byId;
      const resourceModel = getResourceModel(this);
      const transactionHelper = this.getTransactionHelper();

      // TODO: this setting and removing of contexts shouldn't be in the transaction helper at all
      // for the time being I kept it and provide the internal model context to not break something
      parameters.internalModelContext = parameters.controlId ? (_sap$ui$getCore$byId = sap.ui.getCore().byId(parameters.controlId)) === null || _sap$ui$getCore$byId === void 0 ? void 0 : _sap$ui$getCore$byId.getBindingContext("internal") : null;
      await this.syncTask();
      await transactionHelper.deleteDocument(contexts, parameters, this.getAppComponent(), resourceModel, this.getMessageHandler());
    };
    _proto._getResourceModel = function _getResourceModel() {
      return getResourceModel(this.getView());
    };
    _proto.getTransactionHelper = function getTransactionHelper() {
      return TransactionHelper;
    };
    _proto.getMessageHandler = function getMessageHandler() {
      if (this.base.messageHandler) {
        return this.base.messageHandler;
      } else {
        throw new Error("Edit Flow works only with a given message handler");
      }
    };
    _proto.getInternalModel = function getInternalModel() {
      return this.getView().getModel("internal");
    };
    _proto.getGlobalUIModel = function getGlobalUIModel() {
      return this.getView().getModel("ui");
    }

    /**
     * Sets that the current page contains a newly created object.
     *
     * @param bCreationMode True if the object is new
     */;
    _proto.setCreationMode = function setCreationMode(bCreationMode) {
      const uiModelContext = this.getView().getBindingContext("ui");
      this.getGlobalUIModel().setProperty("createMode", bCreationMode, uiModelContext, true);
    }

    /**
     * Indicates whether the current page contains a newly created object or not.
     *
     * @returns True if the object is new
     */;
    _proto.getCreationMode = function getCreationMode() {
      const uiModelContext = this.getView().getBindingContext("ui");
      return !!this.getGlobalUIModel().getProperty("createMode", uiModelContext);
    }

    /**
     * Indicates whether the object being edited (or one of its sub-objects) has been modified or not.
     *
     * @returns True if the object has been modified
     */;
    _proto.isDocumentModified = function isDocumentModified() {
      return !!this.getGlobalUIModel().getProperty("/isDocumentModified");
    }

    /**
     * Sets that the object being edited (or one of its sub-objects) has been modified.
     *
     * @param modified True if the object has been modified
     */;
    _proto.setDocumentModified = function setDocumentModified(modified) {
      this.getGlobalUIModel().setProperty("/isDocumentModified", modified);
    }

    /**
     * Sets that the object being edited has been modified by creating a sub-object.
     *
     * @param listBinding The list binding on which the object has been created
     */;
    _proto.setDocumentModifiedOnCreate = function setDocumentModifiedOnCreate(listBinding) {
      // Set the modified flag only on relative listBindings, i.e. when creating a sub-object
      // If the listBinding is not relative, then it's a creation from the ListReport, and by default a newly created root object isn't considered as modified
      if (listBinding.isRelative()) {
        this.setDocumentModified(true);
      }
    }

    /**
     * Handles the create event: shows messages and in case of a draft, updates the draft indicator.
     *
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param binding OData list binding object
     */;
    _proto.handleCreateEvents = function handleCreateEvents(binding) {
      this.setDraftStatus(DraftStatus.Clear);
      const programmingModel = this.getProgrammingModel(binding);
      binding.attachEvent("createSent", () => {
        if (programmingModel === ProgrammingModel.Draft) {
          this.setDraftStatus(DraftStatus.Saving);
        }
      });
      binding.attachEvent("createCompleted", oEvent => {
        const success = oEvent.getParameter("success");
        if (programmingModel === ProgrammingModel.Draft) {
          this.setDraftStatus(success ? DraftStatus.Saved : DraftStatus.Clear);
        }
        this.getMessageHandler().showMessageDialog();
      });
    }

    /**
     * Updates the draft status message (displayed at the bottom of the page).
     *
     * @param draftStatus The draft status message
     */;
    _proto.setDraftStatus = function setDraftStatus(draftStatus) {
      this.getView().getModel("ui").setProperty("/draftStatus", draftStatus, undefined, true);
    }

    /**
     * Gets the programming model from a binding or a context.
     *
     * @param source The binding or context
     * @returns The programming model
     */;
    _proto.getProgrammingModel = function getProgrammingModel(source) {
      return this.getTransactionHelper().getProgrammingModel(source);
    }

    /**
     * Sets the edit mode.
     *
     * @param editMode The edit mode
     * @param isCreation True if the object has been newly created
     */;
    _proto.setEditMode = function setEditMode(editMode, isCreation) {
      // at this point of time it's not meant to release the edit flow for freestyle usage therefore we can
      // rely on the global UI model to exist
      const globalModel = this.getGlobalUIModel();
      if (editMode) {
        globalModel.setProperty("/isEditable", editMode === "Editable", undefined, true);
      }
      if (isCreation !== undefined) {
        // Since setCreationMode is public in EditFlow and can be overriden, make sure to call it via the controller
        // to ensure any overrides are taken into account
        this.setCreationMode(isCreation);
      }
    }

    /**
     * Checks if an action corresponds to a create action for a sticky session.
     *
     * @param actionName The name of the action
     * @param context Context for the sticky session
     * @returns True if the action is a create action
     */;
    _proto.isNewActionForSticky = function isNewActionForSticky(actionName, context) {
      try {
        var _entitySet$annotation3;
        const metaModel = context.getModel().getMetaModel();
        const metaContext = metaModel.getMetaContext(context.getPath());
        const entitySet = getInvolvedDataModelObjects(metaContext).startingEntitySet;
        const stickySession = (_entitySet$annotation3 = entitySet.annotations.Session) === null || _entitySet$annotation3 === void 0 ? void 0 : _entitySet$annotation3.StickySessionSupported;
        if ((stickySession === null || stickySession === void 0 ? void 0 : stickySession.NewAction) === actionName) {
          return true;
        }
        if (stickySession !== null && stickySession !== void 0 && stickySession.AdditionalNewActions && (stickySession === null || stickySession === void 0 ? void 0 : stickySession.AdditionalNewActions.indexOf(actionName)) !== -1) {
          return true;
        }
        return false;
      } catch (error) {
        Log.info(error);
        return false;
      }
    }

    // TODO Move all sticky-related below to a sticky session manager class

    /**
     * Enables the sticky edit session.
     *
     * @param context The context being edited
     * @returns True in case of success, false otherwise
     */;
    _proto.handleStickyOn = function handleStickyOn(context) {
      const appComponent = this.getAppComponent();
      try {
        if (appComponent === undefined) {
          throw new Error("undefined AppComponent for function handleStickyOn");
        }
        if (!appComponent.getRouterProxy().hasNavigationGuard()) {
          const hashTracker = appComponent.getRouterProxy().getHash();
          const internalModel = this.getInternalModel();

          // Set a guard in the RouterProxy
          // A timeout is necessary, as with deferred creation the hashChanger is not updated yet with
          // the new hash, and the guard cannot be found in the managed history of the router proxy
          setTimeout(function () {
            appComponent.getRouterProxy().setNavigationGuard(context.getPath().substring(1));
          }, 0);

          // Setting back navigation on shell service, to get the dicard message box in case of sticky
          appComponent.getShellServices().setBackNavigation(this.onBackNavigationInSession.bind(this));
          this.dirtyStateProviderFunction = this.getDirtyStateProvider(appComponent, internalModel, hashTracker);
          appComponent.getShellServices().registerDirtyStateProvider(this.dirtyStateProviderFunction);

          // handle session timeout
          const i18nModel = this.base.getView().getModel("sap.fe.i18n");
          this.sessionTimeoutFunction = this.getSessionTimeoutFunction(context, i18nModel);
          this.getView().getModel().attachSessionTimeout(this.sessionTimeoutFunction);
          this.stickyDiscardAfterNavigationFunction = this.getRouteMatchedFunction(context, appComponent);
          appComponent.getRoutingService().attachRouteMatched(this.stickyDiscardAfterNavigationFunction);
        }
      } catch (error) {
        Log.info(error);
        return false;
      }
      return true;
    }

    /**
     * Disables the sticky edit session.
     *
     * @returns True in case of success, false otherwise
     */;
    _proto.handleStickyOff = function handleStickyOff() {
      const appComponent = this.getAppComponent();
      try {
        if (appComponent === undefined) {
          throw new Error("undefined AppComponent for function handleStickyOff");
        }
        if (appComponent.getRouterProxy) {
          // If we have exited from the app, CommonUtils.getAppComponent doesn't return a
          // sap.fe.core.AppComponent, hence the 'if' above
          appComponent.getRouterProxy().discardNavigationGuard();
        }
        if (this.dirtyStateProviderFunction) {
          appComponent.getShellServices().deregisterDirtyStateProvider(this.dirtyStateProviderFunction);
          this.dirtyStateProviderFunction = undefined;
        }
        const model = this.getView().getModel();
        if (model && this.sessionTimeoutFunction) {
          model.detachSessionTimeout(this.sessionTimeoutFunction);
        }
        appComponent.getRoutingService().detachRouteMatched(this.stickyDiscardAfterNavigationFunction);
        this.stickyDiscardAfterNavigationFunction = undefined;
        this.setEditMode(EditMode.Display, false);
        if (appComponent.getShellServices) {
          // If we have exited from the app, CommonUtils.getAppComponent doesn't return a
          // sap.fe.core.AppComponent, hence the 'if' above
          appComponent.getShellServices().setBackNavigation();
        }
      } catch (error) {
        Log.info(error);
        return false;
      }
      return true;
    };
    _proto._setStickySessionInternalProperties = function _setStickySessionInternalProperties(programmingModel, model) {
      if (programmingModel === ProgrammingModel.Sticky) {
        const internalModel = this.getInternalModel();
        internalModel.setProperty("/sessionOn", true);
        internalModel.setProperty("/stickySessionToken", model.getHttpHeaders(true)["SAP-ContextId"]);
      }
    }

    /**
     * Returns a callback function to be used as a DirtyStateProvider in the Shell.
     *
     * @param appComponent The app component
     * @param internalModel The model "internal"
     * @param hashTracker Hash tracker
     * @returns The callback function
     */;
    _proto.getDirtyStateProvider = function getDirtyStateProvider(appComponent, internalModel, hashTracker) {
      return navigationContext => {
        try {
          if (navigationContext === undefined) {
            throw new Error("Invalid input parameters for DirtyStateProvider function");
          }
          const targetHash = navigationContext.innerAppRoute;
          const routerProxy = appComponent.getRouterProxy();
          let lclHashTracker = "";
          let isDirty;
          const isSessionOn = internalModel.getProperty("/sessionOn");
          if (!isSessionOn) {
            // If the sticky session was terminated before hand.
            // Example in case of navigating away from application using IBN.
            return undefined;
          }
          if (!routerProxy.isNavigationFinalized()) {
            // If navigation is currently happening in RouterProxy, it's a transient state
            // (not dirty)
            isDirty = false;
            lclHashTracker = targetHash;
          } else if (hashTracker === targetHash) {
            // the hash didn't change so either the user attempts to refresh or to leave the app
            isDirty = true;
          } else if (routerProxy.checkHashWithGuard(targetHash) || routerProxy.isGuardCrossAllowedByUser()) {
            // the user attempts to navigate within the root object
            // or crossing the guard has already been allowed by the RouterProxy
            lclHashTracker = targetHash;
            isDirty = false;
          } else {
            // the user attempts to navigate within the app, for example back to the list report
            isDirty = true;
          }
          if (isDirty) {
            // the FLP doesn't call the dirty state provider anymore once it's dirty, as they can't
            // change this due to compatibility reasons we set it back to not-dirty
            setTimeout(function () {
              appComponent.getShellServices().setDirtyFlag(false);
            }, 0);
          } else {
            hashTracker = lclHashTracker;
          }
          return isDirty;
        } catch (error) {
          Log.info(error);
          return undefined;
        }
      };
    }

    /**
     * Returns a callback function to be used when a sticky session times out.
     *
     * @param stickyContext The context for the sticky session
     * @param i18nModel
     * @returns The callback function
     */;
    _proto.getSessionTimeoutFunction = function getSessionTimeoutFunction(stickyContext, i18nModel) {
      return () => {
        try {
          if (stickyContext === undefined) {
            throw new Error("Context missing for SessionTimeout function");
          }
          // remove transient messages since we will showing our own message
          this.getMessageHandler().removeTransitionMessages();
          const warningDialog = new Dialog({
            title: "{sap.fe.i18n>C_EDITFLOW_OBJECT_PAGE_SESSION_EXPIRED_DIALOG_TITLE}",
            state: "Warning",
            content: new Text({
              text: "{sap.fe.i18n>C_EDITFLOW_OBJECT_PAGE_SESSION_EXPIRED_DIALOG_MESSAGE}"
            }),
            beginButton: new Button({
              text: "{sap.fe.i18n>C_COMMON_DIALOG_OK}",
              type: "Emphasized",
              press: () => {
                // remove sticky handling after navigation since session has already been terminated
                this.handleStickyOff();
                this.getInternalRouting().navigateBackFromContext(stickyContext);
              }
            }),
            afterClose: function () {
              warningDialog.destroy();
            }
          });
          warningDialog.addStyleClass("sapUiContentPadding");
          warningDialog.setModel(i18nModel, "sap.fe.i18n");
          this.getView().addDependent(warningDialog);
          warningDialog.open();
        } catch (error) {
          Log.info(error);
          return undefined;
        }
        return true;
      };
    }

    /**
     * Returns a callback function for the onRouteMatched event in case of sticky edition.
     *
     * @param context The context being edited (root of the sticky session)
     * @param appComponent The app component
     * @returns The callback function
     */;
    _proto.getRouteMatchedFunction = function getRouteMatchedFunction(context, appComponent) {
      return () => {
        const currentHash = appComponent.getRouterProxy().getHash();
        // either current hash is empty so the user left the app or he navigated away from the object
        if (!currentHash || !appComponent.getRouterProxy().checkHashWithGuard(currentHash)) {
          this.discardStickySession(context);
          context.getModel().clearSessionContext();
        }
      };
    }

    /**
     * Ends a sticky session by discarding changes.
     *
     * @param context The context being edited (root of the sticky session)
     */;
    _proto.discardStickySession = async function discardStickySession(context) {
      const discardedContext = await sticky.discardDocument(context);
      if (discardedContext !== null && discardedContext !== void 0 && discardedContext.hasPendingChanges()) {
        discardedContext.getBinding().resetChanges();
      }
      if (!this.getCreationMode()) {
        discardedContext === null || discardedContext === void 0 ? void 0 : discardedContext.refresh();
      }
      this.handleStickyOff();
    }

    /**
     * Gets the internal routing extension.
     *
     * @returns The internal routing extension
     */;
    _proto.getInternalRouting = function getInternalRouting() {
      if (this.base._routing) {
        return this.base._routing;
      } else {
        throw new Error("Edit Flow works only with a given routing listener");
      }
    };
    _proto._getRootViewController = function _getRootViewController() {
      return this.getAppComponent().getRootViewController();
    };
    _proto._getSemanticMapping = function _getSemanticMapping() {
      return this.getAppComponent().getRoutingService().getLastSemanticMapping();
    }

    /**
     * Creates a new promise to wait for an action to be executed.
     *
     * @param actionName The name of the action
     * @param controlId The ID of the control
     * @returns {Function} The resolver function which can be used to externally resolve the promise
     */;
    _proto.createActionPromise = function createActionPromise(actionName, controlId) {
      let resolveFunction, rejectFunction;
      this.actionPromise = new Promise((resolve, reject) => {
        resolveFunction = resolve;
        rejectFunction = reject;
      }).then(oResponse => {
        return Object.assign({
          controlId
        }, this.getActionResponseDataAndKeys(actionName, oResponse));
      });
      return {
        fResolver: resolveFunction,
        fRejector: rejectFunction
      };
    }

    /**
     *
     * @param actionName The name of the action that is executed
     * @param response The bound action's response data or response context
     * @returns Object with data and names of the key fields of the response
     */;
    _proto.getActionResponseDataAndKeys = function getActionResponseDataAndKeys(actionName, response) {
      if (Array.isArray(response)) {
        if (response.length === 1) {
          response = response[0].value;
        } else {
          return null;
        }
      }
      if (!response) {
        return null;
      }
      const currentView = this.base.getView();
      const metaModelData = currentView.getModel().getMetaModel().getData();
      const actionReturnType = metaModelData && metaModelData[actionName] && metaModelData[actionName][0] && metaModelData[actionName][0].$ReturnType ? metaModelData[actionName][0].$ReturnType.$Type : null;
      const keys = actionReturnType && metaModelData[actionReturnType] ? metaModelData[actionReturnType].$Key : null;
      return {
        oData: response.getObject(),
        keys
      };
    };
    _proto.getCurrentActionPromise = function getCurrentActionPromise() {
      return this.actionPromise;
    };
    _proto.deleteCurrentActionPromise = function deleteCurrentActionPromise() {
      this.actionPromise = undefined;
    };
    _proto._scrollAndFocusOnInactiveRow = function _scrollAndFocusOnInactiveRow(table) {
      const rowBinding = table.getRowBinding();
      const activeRowIndex = rowBinding.getCount() || 0;
      if (table.data("tableType") !== "ResponsiveTable") {
        if (activeRowIndex > 0) {
          table.scrollToIndex(activeRowIndex - 1);
        }
        table.focusRow(activeRowIndex, true);
      } else {
        /* In a responsive table, the empty rows appear at the beginning of the table. But when we create more, they appear below the new line.
         * So we check the first inactive row first, then we set the focus on it when we press the button.
         * This doesn't impact the GridTable because they appear at the end, and we already focus the before-the-last row (because 2 empty rows exist)
         */
        const allRowContexts = rowBinding.getContexts();
        if (!(allRowContexts !== null && allRowContexts !== void 0 && allRowContexts.length)) {
          table.focusRow(activeRowIndex, true);
          return;
        }
        let focusRow = activeRowIndex,
          index = 0;
        for (const singleContext of allRowContexts) {
          if (singleContext.isInactive() && index < focusRow) {
            focusRow = index;
          }
          index++;
        }
        if (focusRow > 0) {
          table.scrollToIndex(focusRow);
        }
        table.focusRow(focusRow, true);
      }
    };
    _proto.createEmptyRowsAndFocus = async function createEmptyRowsAndFocus(table) {
      var _tableAPI$tableDefini, _tableAPI$tableDefini2, _table$getBindingCont;
      const tableAPI = table.getParent();
      if (tableAPI !== null && tableAPI !== void 0 && (_tableAPI$tableDefini = tableAPI.tableDefinition) !== null && _tableAPI$tableDefini !== void 0 && (_tableAPI$tableDefini2 = _tableAPI$tableDefini.control) !== null && _tableAPI$tableDefini2 !== void 0 && _tableAPI$tableDefini2.inlineCreationRowsHiddenInEditMode && !((_table$getBindingCont = table.getBindingContext("ui")) !== null && _table$getBindingCont !== void 0 && _table$getBindingCont.getProperty("createMode"))) {
        // With the parameter, we don't have empty rows in Edit mode, so we need to create them before setting the focus on them
        await tableAPI.setUpEmptyRows(table, true);
      }
      this._scrollAndFocusOnInactiveRow(table);
    };
    _proto._sendActivity = function _sendActivity(action, relatedContexts, actionName, refreshListBinding, actionRequestedProperties) {
      const content = Array.isArray(relatedContexts) ? relatedContexts.map(context => context.getPath()) : relatedContexts === null || relatedContexts === void 0 ? void 0 : relatedContexts.getPath();
      ActivitySync.send(this.getView(), action, content, actionName, refreshListBinding, actionRequestedProperties);
    };
    _proto._triggerConfiguredSurvey = function _triggerConfiguredSurvey(sActionName, triggerType) {
      triggerConfiguredSurvey(this.getView(), sActionName, triggerType);
    };
    _proto._submitOpenChanges = async function _submitOpenChanges(oContext) {
      const oModel = oContext.getModel(),
        oLockObject = this.getGlobalUIModel();
      try {
        // Submit any leftover changes that are not yet submitted
        // Currently we are using only 1 updateGroupId, hence submitting the batch directly here
        await oModel.submitBatch("$auto");

        // Wait for all currently running changes
        // For the time being we agreed with the v4 model team to use an internal method. We'll replace it once
        // a public or restricted method was provided
        await oModel.oRequestor.waitForRunningChangeRequests("$auto");

        // Check if all changes were submitted successfully
        if (oModel.hasPendingChanges("$auto")) {
          throw new Error("submit of open changes failed");
        }
      } finally {
        if (BusyLocker.isLocked(oLockObject)) {
          BusyLocker.unlock(oLockObject);
        }
      }
    };
    _proto._removeStickySessionInternalProperties = function _removeStickySessionInternalProperties(programmingModel) {
      if (programmingModel === ProgrammingModel.Sticky) {
        const internalModel = this.getInternalModel();
        internalModel.setProperty("/sessionOn", false);
        internalModel.setProperty("/stickySessionToken", undefined);
        this.handleStickyOff();
      }
    }

    /**
     * Method to display a 'discard' popover when exiting a sticky session.
     */;
    _proto.onBackNavigationInSession = function onBackNavigationInSession() {
      const view = this.base.getView();
      const routerProxy = this.getAppComponent().getRouterProxy();
      if (routerProxy.checkIfBackIsOutOfGuard()) {
        const bindingContext = view.getBindingContext();
        const programmingModel = this.getProgrammingModel(bindingContext);
        sticky.processDataLossConfirmation(async () => {
          await this.discardStickySession(bindingContext);
          this._removeStickySessionInternalProperties(programmingModel);
          history.back();
        }, view, programmingModel);
        return;
      }
      history.back();
    };
    _proto._handleNewContext = async function _handleNewContext(oContext, bEditable, bRecreateContext, bDraftNavigation) {
      let bForceFocus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      if (!this._isFclEnabled()) {
        EditState.setEditStateDirty();
      }
      await this.getInternalRouting().navigateToContext(oContext, {
        checkNoHashChange: true,
        editable: bEditable,
        bPersistOPScroll: true,
        bRecreateContext: bRecreateContext,
        bDraftNavigation: bDraftNavigation,
        showPlaceholder: false,
        bForceFocus: bForceFocus,
        keepCurrentLayout: true
      });
    };
    _proto._getBoundContext = function _getBoundContext(view, params) {
      const viewLevel = view.getViewData().viewLevel;
      const bRefreshAfterAction = viewLevel > 1 || viewLevel === 1 && params.controlId;
      return !params.isNavigable || !!bRefreshAfterAction;
    }

    /**
     * Checks if there are validation (parse) errors for controls bound to a given context
     *
     * @function
     * @name _checkForValidationErrors
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @returns {Promise} Promise resolves if there are no validation errors, and rejects if there are validation errors
     */;
    _proto._checkForValidationErrors = function _checkForValidationErrors() {
      return this.syncTask().then(() => {
        const sViewId = this.getView().getId();
        const aMessages = sap.ui.getCore().getMessageManager().getMessageModel().getData();
        let oControl;
        let oMessage;
        if (!aMessages.length) {
          return Promise.resolve("No validation errors found");
        }
        for (let i = 0; i < aMessages.length; i++) {
          oMessage = aMessages[i];
          if (oMessage.validation) {
            oControl = Core.byId(oMessage.getControlId());
            while (oControl) {
              if (oControl.getId() === sViewId) {
                return Promise.reject("validation errors exist");
              }
              oControl = oControl.getParent();
            }
          }
        }
      });
    }

    /**
     * @function
     * @name _refreshListIfRequired
     * @memberof sap.fe.core.controllerextensions.EditFlow
     * @param oResponse The response of the bound action and the names of the key fields
     * @param oContext The bound context on which the action was executed
     * @returns Always resolves to param oResponse
     */;
    _proto._refreshListIfRequired = function _refreshListIfRequired(oResponse, oContext) {
      if (!oContext || !oResponse || !oResponse.oData) {
        return Promise.resolve(undefined);
      }
      const oBinding = oContext.getBinding();
      // refresh only lists
      if (oBinding && oBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
        const oContextData = oResponse.oData;
        const aKeys = oResponse.keys;
        const oCurrentData = oContext.getObject();
        let bReturnedContextIsSame = true;
        // ensure context is in the response
        if (Object.keys(oContextData).length) {
          // check if context in response is different than the bound context
          bReturnedContextIsSame = aKeys.every(function (sKey) {
            return oCurrentData[sKey] === oContextData[sKey];
          });
          if (!bReturnedContextIsSame) {
            return new Promise(resolve => {
              if (oBinding.isRoot()) {
                oBinding.attachEventOnce("dataReceived", function () {
                  resolve(!bReturnedContextIsSame);
                });
                oBinding.refresh();
              } else {
                const oAppComponent = this.getAppComponent();
                oAppComponent.getSideEffectsService().requestSideEffects([{
                  $NavigationPropertyPath: oBinding.getPath()
                }], oBinding.getContext()).then(function () {
                  resolve(!bReturnedContextIsSame);
                }, function () {
                  Log.error("Error while refreshing the table");
                  resolve(!bReturnedContextIsSame);
                }).catch(function (e) {
                  Log.error("Error while refreshing the table", e);
                });
              }
            });
          }
        }
      }
      // resolve with oResponse to not disturb the promise chain afterwards
      return Promise.resolve(undefined);
    };
    _proto._fetchSemanticKeyValues = function _fetchSemanticKeyValues(oContext) {
      const oMetaModel = oContext.getModel().getMetaModel(),
        sEntitySetName = oMetaModel.getMetaContext(oContext.getPath()).getObject("@sapui.name"),
        aSemanticKeys = SemanticKeyHelper.getSemanticKeys(oMetaModel, sEntitySetName);
      if (aSemanticKeys && aSemanticKeys.length) {
        const aRequestPromises = aSemanticKeys.map(function (oKey) {
          return oContext.requestObject(oKey.$PropertyPath);
        });
        return Promise.all(aRequestPromises);
      } else {
        return Promise.resolve();
      }
    }

    /**
     * Provides the latest context in the metadata hierarchy from rootBinding to given context pointing to given entityType
     * if any such context exists. Otherwise, it returns the original context.
     * Note: It is only needed as work-around for incorrect modelling. Correct modelling would imply a DataFieldForAction in a LineItem
     * to point to an overload defined either on the corresponding EntityType or a collection of the same.
     *
     * @param rootContext The context to start searching from
     * @param listBinding The listBinding of the table
     * @param overloadEntityType The ActionOverload entity type to search for
     * @returns Returns the context of the ActionOverload entity
     */;
    _proto._getActionOverloadContextFromMetadataPath = function _getActionOverloadContextFromMetadataPath(rootContext, listBinding, overloadEntityType) {
      const model = rootContext.getModel();
      const metaModel = model.getMetaModel();
      let contextSegments = listBinding.getPath().split("/");
      let currentContext = rootContext;

      // We expect that the last segment of the listBinding is the ListBinding of the table. Remove this from contextSegments
      // because it is incorrect to execute bindContext on a list. We do not anyway need to search this context for the overload.
      contextSegments.pop();
      if (contextSegments.length === 0) {
        contextSegments = [""]; // Don't leave contextSegments undefined
      }

      if (contextSegments[0] !== "") {
        contextSegments.unshift(""); // to also get the root context, i.e. the bindingContext of the table
      }
      // load all the parent contexts into an array
      const parentContexts = contextSegments.map(pathSegment => {
        if (pathSegment !== "") {
          currentContext = model.bindContext(pathSegment, currentContext).getBoundContext();
        } else {
          // Creating a new context using bindContext(...).getBoundContext() does not work if the etag is needed. According to model colleagues,
          // we should always use an existing context if possible.
          // Currently, the only example we know about is using the rootContext - and in this case, we can obviously reuse that existing context.
          // If other examples should come up, the best possible work around would be to request some data to get an existing context. To keep the
          // request as small and fast as possible, we should request only the first key property. As this would introduce asynchronism, and anyway
          // the whole logic is only part of work-around for incorrect modelling, we wait until we have an example needing it before implementing this.
          currentContext = rootContext;
        }
        return currentContext;
      }).reverse();
      // search for context backwards
      const overloadContext = parentContexts.find(parentContext => metaModel.getMetaContext(parentContext.getPath()).getObject("$Type") === overloadEntityType);
      return overloadContext || listBinding.getHeaderContext();
    };
    _proto._createSiblingInfo = function _createSiblingInfo(currentContext, newContext) {
      return {
        targetContext: newContext,
        pathMapping: [{
          oldPath: currentContext.getPath(),
          newPath: newContext.getPath()
        }]
      };
    };
    _proto._updatePathsInHistory = function _updatePathsInHistory(mappings) {
      const oAppComponent = this.getAppComponent();
      oAppComponent.getRouterProxy().setPathMapping(mappings);

      // Also update the semantic mapping in the routing service
      const lastSemanticMapping = this._getSemanticMapping();
      if (mappings.length && (lastSemanticMapping === null || lastSemanticMapping === void 0 ? void 0 : lastSemanticMapping.technicalPath) === mappings[mappings.length - 1].oldPath) {
        lastSemanticMapping.technicalPath = mappings[mappings.length - 1].newPath;
      }
    };
    _proto._getNavigationTargetForEdit = function _getNavigationTargetForEdit(context, newDocumentContext, siblingInfo) {
      let contextToNavigate;
      siblingInfo = siblingInfo ?? this._createSiblingInfo(context, newDocumentContext);
      this._updatePathsInHistory(siblingInfo.pathMapping);
      if (siblingInfo.targetContext.getPath() != newDocumentContext.getPath()) {
        contextToNavigate = siblingInfo.targetContext;
      }
      return contextToNavigate;
    }

    /**
     * This method creates a sibling context for a subobject page, and calculates a sibling path
     * for all intermediate paths between the object page and the subobject page.
     *
     * @param rootCurrentContext The context for the root of the draft
     * @param rightmostCurrentContext The context of the subobject
     * @param sProgrammingModel The programming model
     * @param doNotComputeIfRoot If true, we don't compute siblingInfo if the root and the rightmost contexts are the same
     * @param rootContextInfo The root context information of root of the draft
     * @returns Returns the siblingInformation object
     */;
    _proto._computeSiblingInformation = async function _computeSiblingInformation(rootCurrentContext, rightmostCurrentContext, sProgrammingModel, doNotComputeIfRoot, rootContextInfo) {
      rightmostCurrentContext = rightmostCurrentContext ?? rootCurrentContext;
      if (!rightmostCurrentContext.getPath().startsWith(rootCurrentContext.getPath())) {
        // Wrong usage !!
        Log.error("Cannot compute rightmost sibling context");
        throw new Error("Cannot compute rightmost sibling context");
      }
      if (doNotComputeIfRoot && rightmostCurrentContext.getPath() === rootCurrentContext.getPath()) {
        return Promise.resolve(undefined);
      }
      const model = rootCurrentContext.getModel();
      if (sProgrammingModel === ProgrammingModel.Draft) {
        return draft.computeSiblingInformation(rootCurrentContext, rightmostCurrentContext, rootContextInfo);
      } else {
        // If not in draft mode, we just recreate a context from the path of the rightmost context
        // No path mapping is needed
        return {
          targetContext: model.bindContext(rightmostCurrentContext.getPath()).getBoundContext(),
          pathMapping: []
        };
      }
    };
    _proto._isFclEnabled = function _isFclEnabled() {
      return this.getAppComponent()._isFclEnabled();
    };
    return EditFlow;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "editDocument", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "editDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateDocument", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "updateDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "createDocument", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "createDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeSave", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeSave"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeCreate", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeCreate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeEdit", [_dec12, _dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeEdit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeDiscard", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeDiscard"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeDelete", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeDelete"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "saveDocument", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "saveDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "cancelDocument", [_dec20, _dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "cancelDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deleteDocument", [_dec22, _dec23], Object.getOwnPropertyDescriptor(_class2.prototype, "deleteDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyDocument", [_dec24, _dec25], Object.getOwnPropertyDescriptor(_class2.prototype, "applyDocument"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "invokeAction", [_dec26, _dec27], Object.getOwnPropertyDescriptor(_class2.prototype, "invokeAction"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAfterActionExecution", [_dec28, _dec29], Object.getOwnPropertyDescriptor(_class2.prototype, "onAfterActionExecution"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "securedExecution", [_dec30, _dec31], Object.getOwnPropertyDescriptor(_class2.prototype, "securedExecution"), _class2.prototype)), _class2)) || _class);
  return EditFlow;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/EditFlow", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/controllerextensions/collaboration/ActivitySync","sap/fe/core/controllerextensions/collaboration/CollaborationCommon","sap/fe/core/controllerextensions/editFlow/draft","sap/fe/core/controllerextensions/editFlow/sticky","sap/fe/core/controllerextensions/editFlow/TransactionHelper","sap/fe/core/controllerextensions/Feedback","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/EditState","sap/fe/core/helpers/MetaModelFunction","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/helpers/SemanticKeyHelper","sap/fe/core/library","sap/m/Button","sap/m/Dialog","sap/m/MessageToast","sap/m/Text","sap/ui/core/Core","sap/ui/core/library","sap/ui/core/message/Message","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","sap/ui/model/odata/v4/ODataListBinding","../ActionRuntime"],function(t,e,i,n,o,r,s,a,c,l,d,g,u,h,f,p,y,v,w,m,C,M,P,b,S,D,E,x){"use strict";var A,k,_,I,O,R,F,T,B,V,H,N,j,L,$,G,U,q,K,W,z,J,X,Q,Y,Z,tt,et,it,nt,ot,rt,st;var at=f.getResourceModel;var ct=u.getNonComputedVisibleFields;var lt=d.publicExtension;var dt=d.finalExtension;var gt=d.extensible;var ut=d.defineUI5Class;var ht=l.getInvolvedDataModelObjects;var ft=l.convertTypes;var pt=c.TriggerType;var yt=c.triggerConfiguredSurvey;var vt=c.StandardActions;var wt=o.shareObject;var mt=o.Activity;function Ct(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;Mt(t,e)}function Mt(t,e){Mt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,i){e.__proto__=i;return e};return Mt(t,e)}function Pt(t,e,i,n,o){var r={};Object.keys(n).forEach(function(t){r[t]=n[t]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=i.slice().reverse().reduce(function(i,n){return n(t,e,i)||i},r);if(o&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(o):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(t,e,r);r=null}return r}const bt=y.CreationMode,St=y.ProgrammingModel,Dt=y.Constants,Et=y.DraftStatus,xt=y.EditMode,At=y.StartupMode,kt=P.MessageType;let _t=(A=ut("sap.fe.core.controllerextensions.EditFlow"),k=lt(),_=dt(),I=lt(),O=dt(),R=lt(),F=dt(),T=lt(),B=gt(D.After),V=lt(),H=gt(D.After),N=lt(),j=gt(D.After),L=lt(),$=gt(D.After),G=lt(),U=gt(D.After),q=lt(),K=dt(),W=lt(),z=dt(),J=lt(),X=dt(),Q=lt(),Y=dt(),Z=lt(),tt=dt(),et=lt(),it=gt(D.After),nt=lt(),ot=dt(),A(rt=(st=function(o){Ct(c,o);function c(){var t;for(var e=arguments.length,i=new Array(e),n=0;n<e;n++){i[n]=arguments[n]}t=o.call(this,...i)||this;t.syncTasks=Promise.resolve();return t}var l=c.prototype;l.getAppComponent=function t(){return this.base.getAppComponent()};l.editDocument=async function i(n){const o=true;const r=this.getTransactionHelper();const s=this._getRootViewController();const a=n.getModel();let c,l;const d=this.getView().getViewData();const g=this.getProgrammingModel(n);let u=n;const f=this.base.getView();try{if((d===null||d===void 0?void 0:d.viewLevel)>1){if(g===St.Draft||g===St.Sticky){u=await e.createRootContext(g,f,this.getAppComponent())}}await this.base.editFlow.onBeforeEdit({context:u});const t=await r.editDocument(u,this.getView(),this.getAppComponent(),this.getMessageHandler());this._setStickySessionInternalProperties(g,a);if(t){this.setEditMode(xt.Editable,false);this.setDocumentModified(false);this.getMessageHandler().showMessageDialog();if(t!==u){let e=t;if(this._isFclEnabled()){c=s.getRightmostContext();l=await this._computeSiblingInformation(u,c,g,true);l=l??this._createSiblingInfo(n,t);this._updatePathsInHistory(l.pathMapping);if(l.targetContext.getPath()!=t.getPath()){e=l.targetContext}}else if((d===null||d===void 0?void 0:d.viewLevel)>1){const i=t===null||t===void 0?void 0:t.getPath();const o={rootSiblingPath:i,rootContextNotRequired:true};l=await this._computeSiblingInformation(u,n,g,true,o);e=this._getNavigationTargetForEdit(n,t,l)}await this._handleNewContext(e,true,false,o,true);if(g===St.Sticky){let e;if(this._isFclEnabled()){e=t.getModel().getKeepAliveContext(t.getPath())}else{e=t}this.handleStickyOn(e)}else if(h.isCollaborationDraftSupported(a.getMetaModel())){await wt(t)}}}}catch(e){t.error("Error while editing the document",e)}};l.deleteMultipleDocuments=async function o(r,s){if(s){s.beforeDeleteCallBack=this.base.editFlow.onBeforeDelete;s.requestSideEffects=s.requestSideEffects!==false}else{s={beforeDeleteCallBack:this.base.editFlow.onBeforeDelete,requestSideEffects:true}}const a=this.getGlobalUIModel();const c=this.getView().byId(s.controlId);if(!c){throw new Error("parameter controlId missing or incorrect")}else{s.parentControl=c}const l=c.getBinding("items")||c.getRowBinding();s.bFindActiveContexts=true;i.lock(a);try{await this.deleteDocumentTransaction(r,s);let t;if(c.isA("sap.ui.mdc.Table")){c.clearSelection()}const i=this.getView().getBindingContext();if(l.isRoot()){t=new Promise(t=>{l.attachEventOnce("dataReceived",function(){t()})});l.refresh()}else if(i){if(s.requestSideEffects&&!e.hasTransientContext(l)){this.getAppComponent().getSideEffectsService().requestSideEffectsForNavigationProperty(l.getPath(),i)}}if(!this.getAppComponent()._isFclEnabled()){g.setEditStateDirty()}n.send(this.getView(),mt.Delete,r.map(t=>t.getPath()));return t}catch(e){t.error("Error while deleting the document(s)",e)}finally{i.unlock(a)}};l.updateDocument=function e(i,n){const o=this.getView().getBindingContext();const r=this.getProgrammingModel(i)===St.Draft;this.getMessageHandler().removeTransitionMessages();return this.syncTask(async()=>{if(o){this.setDocumentModified(true);if(!this._isFclEnabled()){g.setEditStateDirty()}if(r){this.setDraftStatus(Et.Saving)}}try{await n;const t=this.getView().getBindingContext();if(!r||!t||t!==o){return}const e=t.getModel().getMetaModel();const i=e.getMetaContext(t.getPath()).getObject("@sapui.name");const s=p.getSemanticKeys(e,i);if(s!==null&&s!==void 0&&s.length){const e=this._getSemanticMapping();const i=e===null||e===void 0?void 0:e.semanticPath,n=p.getSemanticPath(t,true);if(i&&i!==n){await this._handleNewContext(t,true,false,true)}}this.setDraftStatus(Et.Saved)}catch(e){t.error("Error while updating the document",e);if(r&&o){this.setDraftStatus(Et.Clear)}}finally{await this.getMessageHandler().showMessages()}})};l.createDocument=async function o(r,s){var a;const c=this.getTransactionHelper(),l=this.getGlobalUIModel();let d;let u=s;let f;const p=!u||u.creationMode!==bt.Inline&&u.creationMode!==bt.CreationRow&&u.creationMode!==bt.External;let y=Promise.resolve([]);const v=this.getAppComponent();v.getRouterProxy().removeIAppStateKey();if(u.creationMode===bt.External){await this.syncTask();const t=this.getView().getController();const e=h.getAbsoluteMetaPathForListBinding(this.base.getView(),r);t.handlers.onChevronPressNavigateOutBound(t,u.outbound,undefined,e);return}if(u.creationMode===bt.CreationRow&&u.creationRow){const t=u.creationRow.getBindingContext().getObject();delete t["@$ui5.context.isTransient"];d=u.creationRow.getParent();y=this.validateDocument(d.getBindingContext(),{data:t,customValidationFunction:d.getCreationRow().data("customValidationFunction")});if(d.getCreationRow().data("disableAddRowButtonForEmptyData")==="true"){const t=d.getBindingContext("internal");t.setProperty("creationRowFieldValidity",{})}}if(u.creationMode===bt.Inline&&u.tableId){d=this.getView().byId(u.tableId)}if(d&&d.isA("sap.ui.mdc.Table")){const t=u.creationMode===bt.Inline?d.focusRow.bind(d):d.scrollToIndex.bind(d);d.getRowBinding().attachEventOnce("change",async function(){await f;t(u.createAtEnd?d.getRowBinding().getLength():0,true)})}const w=async(i,n)=>{try{const t=await n;await t.created();const o=this.getView().getBindingContext();if(!e.hasTransientContext(i)){const t=this.getAppComponent();t.getSideEffectsService().requestSideEffectsForNavigationProperty(i.getPath(),o)}}catch(e){t.error("Error while creating the document",e)}};const m=t=>{var e;const i=d&&d.getCreationRow().data("customValidationFunction");const n=d&&((e=d.getBindingContext("internal"))===null||e===void 0?void 0:e.getProperty("creationRowCustomValidity"));const o=M.getMessageManager();const r=[];let s;let a;o.getMessageModel().getData().forEach(function(t){if(t.code===i){o.removeMessages(t)}});t.forEach(t=>{if(t.messageTarget){var e;s=M.getControl(n[t.messageTarget].fieldId);a=`${(e=s.getBindingContext())===null||e===void 0?void 0:e.getPath()}/${s.getBindingPath("value")}`;if(o.getMessageModel().getData().filter(function(t){return t.target===a}).length===0){o.addMessages(new b({message:t.messageText,processor:this.getView().getModel(),type:kt.Error,code:i,technical:false,persistent:false,target:a}))}const r=o.getMessageModel().getData().filter(function(t){return t.target===a});r[0].addControlId(n[t.messageTarget].fieldId)}else{r.push({code:i,text:t.messageText,persistent:true,type:kt.Error})}});if(r.length>0){this.getMessageHandler().showMessageDialog({customMessages:r})}};const C=(t,e,i,n)=>{if(t&&t!==bt.NewPage){return t}else{if(!i.isRelative()){const t=i.getPath(),o=e===St.Draft?n.getObject(`${t}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction`):n.getObject(`${t}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction`);if(o){const t=n.getObject(`/${o}/@$ui5.overload/0/$Parameter`)||[];if(t.length>1){return bt.Deferred}}}const t=n.getMetaPath(i===null||i===void 0?void 0:i.getHeaderContext().getPath());const o=ct(n,t,this.getAppComponent());if(o.length>0){return bt.Deferred}return bt.Async}};if(p){i.lock(l)}try{const e=await this.syncTask(y);if(e.length>0){m(e);t.error("Custom Validation failed");return}let o;u=u||{};if(r&&typeof r==="object"){o=r}else if(typeof r==="string"){o=new E(this.getView().getModel(),r);u.creationMode=bt.Sync;delete u.createAtEnd}else{throw new Error("Binding object or path expected")}const s=o.getModel();const l=this.getProgrammingModel(o);const p=C(u.creationMode,l,o,s.getMetaModel());let b;const k=u.creationRow;let _;let I;let O;const R=s.getMetaModel();const F=this.getInternalRouting();if(p!==bt.Deferred){if(p===bt.CreationRow){_=k.getBindingContext();O=R.getMetaPath(_.getPath());I=_.getObject();u.data={};Object.keys(I).forEach(function(t){const e=R.getObject(`${O}/${t}`);if(e&&e.$kind==="NavigationProperty"){return}u.data[t]=I[t]});await this._checkForValidationErrors()}if(p===bt.CreationRow||p===bt.Inline){var P,S,D;u.keepTransientContextOnFailed=false;u.busyMode="Local";u.busyId=(P=d)===null||P===void 0?void 0:(S=P.getParent())===null||S===void 0?void 0:(D=S.getTableDefinition())===null||D===void 0?void 0:D.annotation.id;this.handleCreateEvents(o)}if(!u.parentControl){u.parentControl=this.getView()}u.beforeCreateCallBack=this.onBeforeCreate;u.skipParameterDialog=v.getStartupMode()===At.AutoCreate;f=c.createDocument(o,u,this.getAppComponent(),this.getMessageHandler(),false);if(!u.bSkipSideEffects){w(o,f)}}let T;switch(p){case bt.Deferred:T=F.navigateForwardToContext(o,{bDeferredContext:true,editable:true,bForceFocus:true});break;case bt.Async:T=F.navigateForwardToContext(o,{asyncContext:f,editable:true,bForceFocus:true});break;case bt.Sync:b={editable:true,bForceFocus:true};if(l==St.Sticky||u.createAction){b.transient=true}T=(a=f)===null||a===void 0?void 0:a.then(function(t){if(!t){const t=M.getLibraryResourceBundle("sap.fe.core");return F.navigateToMessagePage(t.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR"),{title:t.getText("C_COMMON_SAPFE_ERROR"),description:t.getText("C_EDITFLOW_SAPFE_CREATION_FAILED_DESCRIPTION")})}else{return u.bFromDeferred?F.navigateToContext(t,b):F.navigateForwardToContext(t,b)}});break;case bt.Inline:this.syncTask(f);break;case bt.CreationRow:try{const e=_.getBinding();const i=e.create();k.setBindingContext(i);i.created().catch(function(){t.trace("transient fast creation context deleted")});T=_.delete("$direct")}catch(e){if(i.isLocked(this.getView().getModel("ui"))){i.unlock(this.getView().getModel("ui"))}t.error("CreationRow navigation error: ",e)}break;default:T=Promise.reject(`Unhandled creationMode ${p}`);break}if(f){try{const t=await Promise.all([f,T]);this._setStickySessionInternalProperties(l,s);this.setEditMode(xt.Editable);if(!o.isRelative()&&l===St.Sticky){var x,A;const t=o.getModel().getMetaModel();const e=t.bindContext(t.getMetaPath(o.getPath()));const i=ht(e).startingEntitySet;const n=i===null||i===void 0?void 0:(x=i.annotations.Session)===null||x===void 0?void 0:(A=x.StickySessionSupported)===null||A===void 0?void 0:A.NewAction;this.getInternalModel().setProperty("/lastInvokedAction",n)}const e=t[0];if(e){this.setDocumentModifiedOnCreate(o);if(!this._isFclEnabled()){g.setEditStateDirty()}this._sendActivity(mt.Create,e);if(h.isCollaborationDraftSupported(s.getMetaModel())&&!n.isConnected(this.getView())){await wt(e)}}}catch(t){if(t===Dt.CancelActionDialog||t===Dt.ActionExecutionFailed||t===Dt.CreationFailed){if(p===bt.Sync||p===bt.Deferred||p===bt.Async){F.navigateBackFromTransientState()}}throw t}}}finally{if(p){i.unlock(l)}}};l.validateDocument=function t(e,i){return this.getTransactionHelper().validateDocument(e,i,this.getView())};l.createMultipleDocuments=async function n(o,r,s,a,c){let l=arguments.length>5&&arguments[5]!==undefined?arguments[5]:false;let d=arguments.length>6?arguments[6]:undefined;const g=this.getTransactionHelper();const u=this.getGlobalUIModel();const h=o;d=d!==false;i.lock(u);try{await this.syncTask();if(c){await c({contextPath:h.getPath()})}const t=h.getModel().getMetaModel();let i;if(h.getContext()){i=t.getMetaPath(`${h.getContext().getPath()}/${h.getPath()}`)}else{i=t.getMetaPath(h.getPath())}this.handleCreateEvents(h);const n=r.map(e=>{const n={data:{}};n.keepTransientContextOnFailed=false;n.busyMode="None";n.creationMode=bt.CreationRow;n.parentControl=this.getView();n.createAtEnd=s;n.inactive=l;for(const o in e){const r=t.getObject(`${i}/${o}`);if(r&&r.$kind!=="NavigationProperty"&&o.indexOf("/")<0&&e[o]){n.data[o]=e[o]}}return g.createDocument(h,n,this.getAppComponent(),this.getMessageHandler(),a)});const o=await Promise.all(n);if(!l){this.setDocumentModifiedOnCreate(h)}await Promise.all(o.map(t=>{if(!t.bInactive){return t.created()}}));const u=this.getView().getBindingContext();if(d&&!e.hasTransientContext(h)){this.getAppComponent().getSideEffectsService().requestSideEffectsForNavigationProperty(h.getPath(),u)}return o}catch(e){t.error("Error while creating multiple documents.");throw e}finally{i.unlock(u)}};l.onBeforeSave=function t(e){return Promise.resolve()};l.onBeforeCreate=function t(e){return Promise.resolve()};l.onBeforeEdit=function t(e){return Promise.resolve()};l.onBeforeDiscard=function t(e){return Promise.resolve()};l.onBeforeDelete=function t(e){return Promise.resolve()};l.saveDocument=async function e(i,o){o=o||{};const r=o.bExecuteSideEffectsOnError||undefined;const s=true;const a=this.getTransactionHelper();const c=o.bindings;try{await this.syncTask();this.getMessageHandler().removeTransitionMessages();await this._submitOpenChanges(i);await this._checkForValidationErrors();await this.base.editFlow.onBeforeSave({context:i});const t=this.getProgrammingModel(i);const e=this._getRootViewController();let o;if((t===St.Sticky||i.getProperty("HasActiveEntity"))&&e.isFclEnabled()){o=await this._computeSiblingInformation(i,e.getRightmostContext(),t,true)}const l=await a.saveDocument(i,this.getAppComponent(),this._getResourceModel(),r,c,this.getMessageHandler(),this.getCreationMode());this._removeStickySessionInternalProperties(t);this._sendActivity(mt.Activate,l);n.disconnect(this.getView());this._triggerConfiguredSurvey(vt.save,pt.standardAction);this.setDocumentModified(false);this.setEditMode(xt.Display,false);this.getMessageHandler().showMessageDialog();if(l!==i){let t=l;if(e.isFclEnabled()){o=o??this._createSiblingInfo(i,l);this._updatePathsInHistory(o.pathMapping);if(o.targetContext.getPath()!==l.getPath()){t=o.targetContext}}await this._handleNewContext(t,false,false,s,true)}}catch(e){if(!(e&&e.canceled)){t.error("Error while saving the document",e)}throw e}};l.toggleDraftActive=async function t(e){const i=e.getObject();let n;const o=e&&this.getProgrammingModel(e)===St.Draft;if(!o||!(!i.IsActiveEntity&&i.HasActiveEntity||i.IsActiveEntity&&i.HasDraftEntity)){return}if(!i.IsActiveEntity&&i.HasActiveEntity){n=false}else{n=true}try{const t=this._getRootViewController();const i=t.isFclEnabled()?t.getRightmostContext():e;let o=await this._computeSiblingInformation(e,i,St.Draft,false);if(!o&&e!==i){o=await this._computeSiblingInformation(e,e,St.Draft,false)}if(o){this.setEditMode(n?xt.Editable:xt.Display,false);if(t.isFclEnabled()){const t=this._getSemanticMapping();if((t===null||t===void 0?void 0:t.technicalPath)===e.getPath()){const e=o.pathMapping[o.pathMapping.length-1].newPath;o.pathMapping.push({oldPath:t.semanticPath,newPath:e})}this._updatePathsInHistory(o.pathMapping)}await this._handleNewContext(o.targetContext,n,true,true,true)}else{throw new Error("Error in EditFlow.toggleDraftActive - Cannot find sibling")}}catch(t){throw new Error(`Error in EditFlow.toggleDraftActive:${t}`)}};l.cancelDocument=async function e(i,o){const r=this.getTransactionHelper();const s=o;let a;let c=false;s.cancelButton=o.control||s.cancelButton;s.beforeCancelCallBack=this.base.editFlow.onBeforeDiscard;try{await this.syncTask();const t=this.getProgrammingModel(i);if((t===St.Sticky||i.getProperty("HasActiveEntity"))&&this._isFclEnabled()){const e=this._getRootViewController();a=await this._computeSiblingInformation(i,e.getRightmostContext(),t,true)}const e=await r.cancelDocument(i,s,this.getAppComponent(),this._getResourceModel(),this.getMessageHandler(),this.getCreationMode(),this.isDocumentModified());this._getRootViewController().getInstancedViews().forEach(t=>{const e=t.getBindingContext();if(e&&e.isKeepAlive()){e.setKeepAlive(false)}});const o=true;this._removeStickySessionInternalProperties(t);this.setEditMode(xt.Display,false);this.setDocumentModified(false);this.setDraftStatus(Et.Clear);g.setEditStateDirty();if(!e){this._sendActivity(mt.Discard,undefined);n.disconnect(this.getView());if(!s.skipBackNavigation){await this.getInternalRouting().navigateBackFromContext(i);c=true}}else{const r=e;this._sendActivity(mt.Discard,r);n.disconnect(this.getView());let c=r;if(this._isFclEnabled()){a=a??this._createSiblingInfo(i,r);this._updatePathsInHistory(a.pathMapping);if(a.targetContext.getPath()!==r.getPath()){c=a.targetContext}}if(t===St.Draft){await this._fetchSemanticKeyValues(r);if(!s.skipBindingToView){await this._handleNewContext(c,false,true,o,true)}else{return r}}else{await this._handleNewContext(c,false,false,o,true)}}if(t===St.Draft){this.showDocumentDiscardMessage(c)}}catch(e){t.error("Error while discarding the document",e)}};l.showDocumentDiscardMessage=function t(e){const i=this._getResourceModel();const n=i.getText("C_TRANSACTION_HELPER_DISCARD_DRAFT_TOAST");if(e==true){const t=this.getAppComponent();t.getRoutingService().attachAfterRouteMatched(this.showMessageWhenNoContext,this)}else{m.show(n)}};l.showMessageWhenNoContext=function t(){const e=this._getResourceModel();const i=e.getText("C_TRANSACTION_HELPER_DISCARD_DRAFT_TOAST");const n=this.getAppComponent();m.show(i);n.getRoutingService().detachAfterRouteMatched(this.showMessageWhenNoContext,this)};l.isDraftRoot=function t(e){const i=e.getModel().getMetaModel();const n=i.getMetaContext(e.getPath());return h.isDraftRoot(ht(n).targetEntitySet)};l.deleteDocument=async function e(i,n){const o=this.getAppComponent();let r=n;if(!r){r={bFindActiveContexts:false}}else{r.bFindActiveContexts=false}r.beforeDeleteCallBack=this.base.editFlow.onBeforeDelete;try{if(this._isFclEnabled()&&this.isDraftRoot(i)&&i.getIndex()===undefined&&i.getProperty("IsActiveEntity")===true&&i.getProperty("HasDraftEntity")===true){r.beforeDeleteCallBack=async e=>{await this.base.editFlow.onBeforeDelete(e);try{const t=i.getModel();const e=t.bindContext(`${i.getPath()}/SiblingEntity`).getBoundContext();const n=await e.requestCanonicalPath();const o=t.getKeepAliveContext(n);o.replaceWith(i)}catch(e){t.error("Error while replacing the draft instance in the LR ODLB",e)}}}await this.deleteDocumentTransaction(i,r);if(!this._isFclEnabled()){g.setEditStateDirty()}this._sendActivity(mt.Delete,i);if(o){o.getShellServices().setBackNavigation()}if((o===null||o===void 0?void 0:o.getStartupMode())===At.Deeplink&&!this._isFclEnabled()){o.getRouterProxy().exitFromApp()}else{this.getInternalRouting().navigateBackFromContext(i)}}catch(e){t.error("Error while deleting the document",e)}};l.applyDocument=async function t(e){const n=this.getGlobalUIModel();try{await this.syncTask();if(e.getModel().hasPendingChanges("$auto")){i.lock(n);await this._submitOpenChanges(e)}await this._checkForValidationErrors();await this.getMessageHandler().showMessageDialog();await this.getInternalRouting().navigateBackFromContext(e)}finally{if(i.isLocked(n)){i.unlock(n)}}};l.invokeAction=async function e(i,o,r){var s;let a;const c=this.getTransactionHelper();let l;let d;let u;const h=this.base.getView();let f=o||{};if(f.isA&&f.isA("sap.ui.model.odata.v4.Context")||Array.isArray(f)||r!==undefined){const t=f;f=r||{};if(t){f.contexts=t}else{f.model=this.getView().getModel()}}f.isNavigable=f.requiresNavigation||f.isNavigable;const p=ft((s=this.getView().getModel())===null||s===void 0?void 0:s.getMetaModel());if(i.indexOf(""+p.entityContainer.name)>-1){f.isBound=false}else{f.isBound=true}if(!f.parentControl){f.parentControl=this.getView()}if(f.controlId){a=this.getView().byId(f.controlId);if(a){f.internalModelContext=a.getBindingContext("internal")}}else{f.internalModelContext=h.getBindingContext("internal")}if(i&&i.indexOf("(")>-1){l=i.split("(");i=l[0];d=l[l.length-1].replaceAll(")","")}if(f.bStaticAction){if(a.isTableBound()){f.contexts=a.getRowBinding().getHeaderContext()}else{const t=a.data("rowsBindingInfo").path,e=new E(this.getView().getModel(),t);f.contexts=e.getHeaderContext()}if(d&&a.getBindingContext()){f.contexts=this._getActionOverloadContextFromMetadataPath(a.getBindingContext(),a.getRowBinding(),d)}if(f.enableAutoScroll){u=this.createActionPromise(i,a.sId)}}f.bGetBoundContext=this._getBoundContext(h,f);f.bObjectPage=h.getViewData().converterType==="ObjectPage";try{await this.syncTask();const e=await c.callAction(i,f,this.getView(),this.getAppComponent(),this.getMessageHandler());let o;if(f.contexts&&f.isBound===true){o=await this._refreshListIfRequired(this.getActionResponseDataAndKeys(i,e),f.contexts[0])}if(n.isConnected(this.getView())){let t=[];if(e){t=Array.isArray(e)?Object.keys(e[0].value.getObject()):Object.keys(e.getObject())}this._sendActivity(mt.Action,f.contexts,i,o,t)}this._triggerConfiguredSurvey(i,pt.action);if(u){u.fResolver(e)}if(f.contexts){if(!this._isFclEnabled()){g.setEditStateDirty()}this.getInternalModel().setProperty("/lastInvokedAction",i)}if(f.isNavigable){let i=e;if(Array.isArray(i)&&i.length===1){i=i[0].value}if(i&&!Array.isArray(i)){const e=h.getModel().getMetaModel();const n=e.getMetaPath(i.getPath());const o=(t,e)=>t.filter(t=>{if(e){return e.indexOf(t)>-1}return true});const r=Array.isArray(f.contexts)?o(f.contexts,f.applicableContexts)[0]:f.contexts;const s=r&&e.getMetaPath(r.getPath());if(n!=undefined&&n===s){if(r.getPath()!==i.getPath()){this.getInternalRouting().navigateForwardToContext(i,{checkNoHashChange:true,noHistoryEntry:false})}else{t.info("Navigation to the same context is not allowed")}}}}this.base.editFlow.onAfterActionExecution(i);return e}catch(t){if(u){u.fRejector()}if(t===Dt.CancelActionDialog){throw new Error("Dialog cancelled")}else if(!(t&&(t.canceled||t.rejectedItems&&t.rejectedItems[0].canceled))){throw new Error(`Error in EditFlow.invokeAction:${t}`)}}};l.onAfterActionExecution=async function t(e){};l.securedExecution=function t(e,n){var o,r;const s=(n===null||n===void 0?void 0:(o=n.busy)===null||o===void 0?void 0:o.set)??true,a=(n===null||n===void 0?void 0:(r=n.busy)===null||r===void 0?void 0:r.check)??true,c=(n===null||n===void 0?void 0:n.updatesDocument)??false,l=this.getGlobalUIModel(),d=this.getView().getBindingContext(),u=d&&this.getProgrammingModel(d)===St.Draft;if(a&&i.isLocked(l)){return Promise.reject("Application already busy therefore execution rejected")}if(s){i.lock(l)}if(c&&u){this.setDraftStatus(Et.Saving)}this.getMessageHandler().removeTransitionMessages();return this.syncTask(e).then(()=>{if(c){this.setDocumentModified(true);if(!this._isFclEnabled()){g.setEditStateDirty()}if(u){this.setDraftStatus(Et.Saved)}}}).catch(t=>{if(c&&u){this.setDraftStatus(Et.Clear)}return Promise.reject(t)}).finally(()=>{if(s){i.unlock(l)}this.getMessageHandler().showMessageDialog()})};l.handlePatchSent=function t(e){var i,o;const r=n.isConnected(this.getView());if(r){e.getSource().getModel().setIgnoreETag(true)}if(!((i=this.getView())!==null&&i!==void 0&&(o=i.getBindingContext("internal"))!==null&&o!==void 0&&o.getProperty("skipPatchHandlers"))){const t=e.getSource();const i=new Promise((i,n)=>{e.getSource().attachEventOnce("patchCompleted",o=>{if(r){e.getSource().getModel().setIgnoreETag(false)}if(e.getSource().isA("sap.ui.model.odata.v4.ODataListBinding")){var s;x.setActionEnablementAfterPatch(this.getView(),t,(s=this.getView())===null||s===void 0?void 0:s.getBindingContext("internal"))}const a=o.getParameter("success");if(a){i()}else{n()}})});this.updateDocument(t,i)}};l.handleCreateActivate=async function e(i){const n=i.getSource();const o=this.getTransactionHelper();const r=true;const s=true;const a={creationMode:bt.Inline,createAtEnd:r,inactive:s,keepTransientContextOnFailed:false,busyMode:"None"};try{var c;const e=i.getParameter("context");(c=e.created())===null||c===void 0?void 0:c.then(()=>{this._sendActivity(mt.Create,e)}).catch(()=>{t.warning(`Failed to activate context ${e.getPath()}`)});const r=await o.createDocument(n,a,this.getAppComponent(),this.getMessageHandler(),false);if(r){if(!this._isFclEnabled()){g.setEditStateDirty()}}}catch(e){t.error("Failed to activate new row -",e)}};l.syncTask=function t(e){if(e){if(typeof e==="function"){this.syncTasks=this.syncTasks.then(e).catch(function(){return Promise.resolve()})}else{this.syncTasks=this.syncTasks.then(()=>e).catch(function(){return Promise.resolve()})}}return this.syncTasks};l.computeEditMode=async function e(i){const n=this.getProgrammingModel(i);if(n===St.Draft){try{this.setDraftStatus(Et.Clear);const t=this.getGlobalUIModel();t.setProperty("/isEditablePending",true,undefined,true);const e=await i.requestObject("IsActiveEntity");if(e===false){this.setEditMode(xt.Editable);const t=await i.requestObject("HasActiveEntity");this.setEditMode(undefined,!t)}else{this.setEditMode(xt.Display,false)}t.setProperty("/isEditablePending",false,undefined,true)}catch(e){t.error("Error while determining the editMode for draft",e);throw e}}else if(n===St.Sticky){const t=this.getInternalModel().getProperty("/lastInvokedAction");if(t&&this.isNewActionForSticky(t,i)){this.setEditMode(xt.Editable,true);if(!this.getAppComponent()._isFclEnabled()){g.setEditStateDirty()}this.handleStickyOn(i);this.getInternalModel().setProperty("/lastInvokedAction",undefined)}}};l.deleteDocumentTransaction=async function t(e,i){var n;const o=at(this);const r=this.getTransactionHelper();i.internalModelContext=i.controlId?(n=sap.ui.getCore().byId(i.controlId))===null||n===void 0?void 0:n.getBindingContext("internal"):null;await this.syncTask();await r.deleteDocument(e,i,this.getAppComponent(),o,this.getMessageHandler())};l._getResourceModel=function t(){return at(this.getView())};l.getTransactionHelper=function t(){return a};l.getMessageHandler=function t(){if(this.base.messageHandler){return this.base.messageHandler}else{throw new Error("Edit Flow works only with a given message handler")}};l.getInternalModel=function t(){return this.getView().getModel("internal")};l.getGlobalUIModel=function t(){return this.getView().getModel("ui")};l.setCreationMode=function t(e){const i=this.getView().getBindingContext("ui");this.getGlobalUIModel().setProperty("createMode",e,i,true)};l.getCreationMode=function t(){const e=this.getView().getBindingContext("ui");return!!this.getGlobalUIModel().getProperty("createMode",e)};l.isDocumentModified=function t(){return!!this.getGlobalUIModel().getProperty("/isDocumentModified")};l.setDocumentModified=function t(e){this.getGlobalUIModel().setProperty("/isDocumentModified",e)};l.setDocumentModifiedOnCreate=function t(e){if(e.isRelative()){this.setDocumentModified(true)}};l.handleCreateEvents=function t(e){this.setDraftStatus(Et.Clear);const i=this.getProgrammingModel(e);e.attachEvent("createSent",()=>{if(i===St.Draft){this.setDraftStatus(Et.Saving)}});e.attachEvent("createCompleted",t=>{const e=t.getParameter("success");if(i===St.Draft){this.setDraftStatus(e?Et.Saved:Et.Clear)}this.getMessageHandler().showMessageDialog()})};l.setDraftStatus=function t(e){this.getView().getModel("ui").setProperty("/draftStatus",e,undefined,true)};l.getProgrammingModel=function t(e){return this.getTransactionHelper().getProgrammingModel(e)};l.setEditMode=function t(e,i){const n=this.getGlobalUIModel();if(e){n.setProperty("/isEditable",e==="Editable",undefined,true)}if(i!==undefined){this.setCreationMode(i)}};l.isNewActionForSticky=function e(i,n){try{var o;const t=n.getModel().getMetaModel();const e=t.getMetaContext(n.getPath());const r=ht(e).startingEntitySet;const s=(o=r.annotations.Session)===null||o===void 0?void 0:o.StickySessionSupported;if((s===null||s===void 0?void 0:s.NewAction)===i){return true}if(s!==null&&s!==void 0&&s.AdditionalNewActions&&(s===null||s===void 0?void 0:s.AdditionalNewActions.indexOf(i))!==-1){return true}return false}catch(e){t.info(e);return false}};l.handleStickyOn=function e(i){const n=this.getAppComponent();try{if(n===undefined){throw new Error("undefined AppComponent for function handleStickyOn")}if(!n.getRouterProxy().hasNavigationGuard()){const t=n.getRouterProxy().getHash();const e=this.getInternalModel();setTimeout(function(){n.getRouterProxy().setNavigationGuard(i.getPath().substring(1))},0);n.getShellServices().setBackNavigation(this.onBackNavigationInSession.bind(this));this.dirtyStateProviderFunction=this.getDirtyStateProvider(n,e,t);n.getShellServices().registerDirtyStateProvider(this.dirtyStateProviderFunction);const o=this.base.getView().getModel("sap.fe.i18n");this.sessionTimeoutFunction=this.getSessionTimeoutFunction(i,o);this.getView().getModel().attachSessionTimeout(this.sessionTimeoutFunction);this.stickyDiscardAfterNavigationFunction=this.getRouteMatchedFunction(i,n);n.getRoutingService().attachRouteMatched(this.stickyDiscardAfterNavigationFunction)}}catch(e){t.info(e);return false}return true};l.handleStickyOff=function e(){const i=this.getAppComponent();try{if(i===undefined){throw new Error("undefined AppComponent for function handleStickyOff")}if(i.getRouterProxy){i.getRouterProxy().discardNavigationGuard()}if(this.dirtyStateProviderFunction){i.getShellServices().deregisterDirtyStateProvider(this.dirtyStateProviderFunction);this.dirtyStateProviderFunction=undefined}const t=this.getView().getModel();if(t&&this.sessionTimeoutFunction){t.detachSessionTimeout(this.sessionTimeoutFunction)}i.getRoutingService().detachRouteMatched(this.stickyDiscardAfterNavigationFunction);this.stickyDiscardAfterNavigationFunction=undefined;this.setEditMode(xt.Display,false);if(i.getShellServices){i.getShellServices().setBackNavigation()}}catch(e){t.info(e);return false}return true};l._setStickySessionInternalProperties=function t(e,i){if(e===St.Sticky){const t=this.getInternalModel();t.setProperty("/sessionOn",true);t.setProperty("/stickySessionToken",i.getHttpHeaders(true)["SAP-ContextId"])}};l.getDirtyStateProvider=function e(i,n,o){return e=>{try{if(e===undefined){throw new Error("Invalid input parameters for DirtyStateProvider function")}const t=e.innerAppRoute;const r=i.getRouterProxy();let s="";let a;const c=n.getProperty("/sessionOn");if(!c){return undefined}if(!r.isNavigationFinalized()){a=false;s=t}else if(o===t){a=true}else if(r.checkHashWithGuard(t)||r.isGuardCrossAllowedByUser()){s=t;a=false}else{a=true}if(a){setTimeout(function(){i.getShellServices().setDirtyFlag(false)},0)}else{o=s}return a}catch(e){t.info(e);return undefined}}};l.getSessionTimeoutFunction=function e(i,n){return()=>{try{if(i===undefined){throw new Error("Context missing for SessionTimeout function")}this.getMessageHandler().removeTransitionMessages();const t=new w({title:"{sap.fe.i18n>C_EDITFLOW_OBJECT_PAGE_SESSION_EXPIRED_DIALOG_TITLE}",state:"Warning",content:new C({text:"{sap.fe.i18n>C_EDITFLOW_OBJECT_PAGE_SESSION_EXPIRED_DIALOG_MESSAGE}"}),beginButton:new v({text:"{sap.fe.i18n>C_COMMON_DIALOG_OK}",type:"Emphasized",press:()=>{this.handleStickyOff();this.getInternalRouting().navigateBackFromContext(i)}}),afterClose:function(){t.destroy()}});t.addStyleClass("sapUiContentPadding");t.setModel(n,"sap.fe.i18n");this.getView().addDependent(t);t.open()}catch(e){t.info(e);return undefined}return true}};l.getRouteMatchedFunction=function t(e,i){return()=>{const t=i.getRouterProxy().getHash();if(!t||!i.getRouterProxy().checkHashWithGuard(t)){this.discardStickySession(e);e.getModel().clearSessionContext()}}};l.discardStickySession=async function t(e){const i=await s.discardDocument(e);if(i!==null&&i!==void 0&&i.hasPendingChanges()){i.getBinding().resetChanges()}if(!this.getCreationMode()){i===null||i===void 0?void 0:i.refresh()}this.handleStickyOff()};l.getInternalRouting=function t(){if(this.base._routing){return this.base._routing}else{throw new Error("Edit Flow works only with a given routing listener")}};l._getRootViewController=function t(){return this.getAppComponent().getRootViewController()};l._getSemanticMapping=function t(){return this.getAppComponent().getRoutingService().getLastSemanticMapping()};l.createActionPromise=function t(e,i){let n,o;this.actionPromise=new Promise((t,e)=>{n=t;o=e}).then(t=>Object.assign({controlId:i},this.getActionResponseDataAndKeys(e,t)));return{fResolver:n,fRejector:o}};l.getActionResponseDataAndKeys=function t(e,i){if(Array.isArray(i)){if(i.length===1){i=i[0].value}else{return null}}if(!i){return null}const n=this.base.getView();const o=n.getModel().getMetaModel().getData();const r=o&&o[e]&&o[e][0]&&o[e][0].$ReturnType?o[e][0].$ReturnType.$Type:null;const s=r&&o[r]?o[r].$Key:null;return{oData:i.getObject(),keys:s}};l.getCurrentActionPromise=function t(){return this.actionPromise};l.deleteCurrentActionPromise=function t(){this.actionPromise=undefined};l._scrollAndFocusOnInactiveRow=function t(e){const i=e.getRowBinding();const n=i.getCount()||0;if(e.data("tableType")!=="ResponsiveTable"){if(n>0){e.scrollToIndex(n-1)}e.focusRow(n,true)}else{const t=i.getContexts();if(!(t!==null&&t!==void 0&&t.length)){e.focusRow(n,true);return}let o=n,r=0;for(const e of t){if(e.isInactive()&&r<o){o=r}r++}if(o>0){e.scrollToIndex(o)}e.focusRow(o,true)}};l.createEmptyRowsAndFocus=async function t(e){var i,n,o;const r=e.getParent();if(r!==null&&r!==void 0&&(i=r.tableDefinition)!==null&&i!==void 0&&(n=i.control)!==null&&n!==void 0&&n.inlineCreationRowsHiddenInEditMode&&!((o=e.getBindingContext("ui"))!==null&&o!==void 0&&o.getProperty("createMode"))){await r.setUpEmptyRows(e,true)}this._scrollAndFocusOnInactiveRow(e)};l._sendActivity=function t(e,i,o,r,s){const a=Array.isArray(i)?i.map(t=>t.getPath()):i===null||i===void 0?void 0:i.getPath();n.send(this.getView(),e,a,o,r,s)};l._triggerConfiguredSurvey=function t(e,i){yt(this.getView(),e,i)};l._submitOpenChanges=async function t(e){const n=e.getModel(),o=this.getGlobalUIModel();try{await n.submitBatch("$auto");await n.oRequestor.waitForRunningChangeRequests("$auto");if(n.hasPendingChanges("$auto")){throw new Error("submit of open changes failed")}}finally{if(i.isLocked(o)){i.unlock(o)}}};l._removeStickySessionInternalProperties=function t(e){if(e===St.Sticky){const t=this.getInternalModel();t.setProperty("/sessionOn",false);t.setProperty("/stickySessionToken",undefined);this.handleStickyOff()}};l.onBackNavigationInSession=function t(){const e=this.base.getView();const i=this.getAppComponent().getRouterProxy();if(i.checkIfBackIsOutOfGuard()){const t=e.getBindingContext();const i=this.getProgrammingModel(t);s.processDataLossConfirmation(async()=>{await this.discardStickySession(t);this._removeStickySessionInternalProperties(i);history.back()},e,i);return}history.back()};l._handleNewContext=async function t(e,i,n,o){let r=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;if(!this._isFclEnabled()){g.setEditStateDirty()}await this.getInternalRouting().navigateToContext(e,{checkNoHashChange:true,editable:i,bPersistOPScroll:true,bRecreateContext:n,bDraftNavigation:o,showPlaceholder:false,bForceFocus:r,keepCurrentLayout:true})};l._getBoundContext=function t(e,i){const n=e.getViewData().viewLevel;const o=n>1||n===1&&i.controlId;return!i.isNavigable||!!o};l._checkForValidationErrors=function t(){return this.syncTask().then(()=>{const t=this.getView().getId();const e=sap.ui.getCore().getMessageManager().getMessageModel().getData();let i;let n;if(!e.length){return Promise.resolve("No validation errors found")}for(let o=0;o<e.length;o++){n=e[o];if(n.validation){i=M.byId(n.getControlId());while(i){if(i.getId()===t){return Promise.reject("validation errors exist")}i=i.getParent()}}}})};l._refreshListIfRequired=function e(i,n){if(!n||!i||!i.oData){return Promise.resolve(undefined)}const o=n.getBinding();if(o&&o.isA("sap.ui.model.odata.v4.ODataListBinding")){const e=i.oData;const r=i.keys;const s=n.getObject();let a=true;if(Object.keys(e).length){a=r.every(function(t){return s[t]===e[t]});if(!a){return new Promise(e=>{if(o.isRoot()){o.attachEventOnce("dataReceived",function(){e(!a)});o.refresh()}else{const i=this.getAppComponent();i.getSideEffectsService().requestSideEffects([{$NavigationPropertyPath:o.getPath()}],o.getContext()).then(function(){e(!a)},function(){t.error("Error while refreshing the table");e(!a)}).catch(function(e){t.error("Error while refreshing the table",e)})}})}}}return Promise.resolve(undefined)};l._fetchSemanticKeyValues=function t(e){const i=e.getModel().getMetaModel(),n=i.getMetaContext(e.getPath()).getObject("@sapui.name"),o=p.getSemanticKeys(i,n);if(o&&o.length){const t=o.map(function(t){return e.requestObject(t.$PropertyPath)});return Promise.all(t)}else{return Promise.resolve()}};l._getActionOverloadContextFromMetadataPath=function t(e,i,n){const o=e.getModel();const r=o.getMetaModel();let s=i.getPath().split("/");let a=e;s.pop();if(s.length===0){s=[""]}if(s[0]!==""){s.unshift("")}const c=s.map(t=>{if(t!==""){a=o.bindContext(t,a).getBoundContext()}else{a=e}return a}).reverse();const l=c.find(t=>r.getMetaContext(t.getPath()).getObject("$Type")===n);return l||i.getHeaderContext()};l._createSiblingInfo=function t(e,i){return{targetContext:i,pathMapping:[{oldPath:e.getPath(),newPath:i.getPath()}]}};l._updatePathsInHistory=function t(e){const i=this.getAppComponent();i.getRouterProxy().setPathMapping(e);const n=this._getSemanticMapping();if(e.length&&(n===null||n===void 0?void 0:n.technicalPath)===e[e.length-1].oldPath){n.technicalPath=e[e.length-1].newPath}};l._getNavigationTargetForEdit=function t(e,i,n){let o;n=n??this._createSiblingInfo(e,i);this._updatePathsInHistory(n.pathMapping);if(n.targetContext.getPath()!=i.getPath()){o=n.targetContext}return o};l._computeSiblingInformation=async function e(i,n,o,s,a){n=n??i;if(!n.getPath().startsWith(i.getPath())){t.error("Cannot compute rightmost sibling context");throw new Error("Cannot compute rightmost sibling context")}if(s&&n.getPath()===i.getPath()){return Promise.resolve(undefined)}const c=i.getModel();if(o===St.Draft){return r.computeSiblingInformation(i,n,a)}else{return{targetContext:c.bindContext(n.getPath()).getBoundContext(),pathMapping:[]}}};l._isFclEnabled=function t(){return this.getAppComponent()._isFclEnabled()};return c}(S),Pt(st.prototype,"editDocument",[k,_],Object.getOwnPropertyDescriptor(st.prototype,"editDocument"),st.prototype),Pt(st.prototype,"updateDocument",[I,O],Object.getOwnPropertyDescriptor(st.prototype,"updateDocument"),st.prototype),Pt(st.prototype,"createDocument",[R,F],Object.getOwnPropertyDescriptor(st.prototype,"createDocument"),st.prototype),Pt(st.prototype,"onBeforeSave",[T,B],Object.getOwnPropertyDescriptor(st.prototype,"onBeforeSave"),st.prototype),Pt(st.prototype,"onBeforeCreate",[V,H],Object.getOwnPropertyDescriptor(st.prototype,"onBeforeCreate"),st.prototype),Pt(st.prototype,"onBeforeEdit",[N,j],Object.getOwnPropertyDescriptor(st.prototype,"onBeforeEdit"),st.prototype),Pt(st.prototype,"onBeforeDiscard",[L,$],Object.getOwnPropertyDescriptor(st.prototype,"onBeforeDiscard"),st.prototype),Pt(st.prototype,"onBeforeDelete",[G,U],Object.getOwnPropertyDescriptor(st.prototype,"onBeforeDelete"),st.prototype),Pt(st.prototype,"saveDocument",[q,K],Object.getOwnPropertyDescriptor(st.prototype,"saveDocument"),st.prototype),Pt(st.prototype,"cancelDocument",[W,z],Object.getOwnPropertyDescriptor(st.prototype,"cancelDocument"),st.prototype),Pt(st.prototype,"deleteDocument",[J,X],Object.getOwnPropertyDescriptor(st.prototype,"deleteDocument"),st.prototype),Pt(st.prototype,"applyDocument",[Q,Y],Object.getOwnPropertyDescriptor(st.prototype,"applyDocument"),st.prototype),Pt(st.prototype,"invokeAction",[Z,tt],Object.getOwnPropertyDescriptor(st.prototype,"invokeAction"),st.prototype),Pt(st.prototype,"onAfterActionExecution",[et,it],Object.getOwnPropertyDescriptor(st.prototype,"onAfterActionExecution"),st.prototype),Pt(st.prototype,"securedExecution",[nt,ot],Object.getOwnPropertyDescriptor(st.prototype,"securedExecution"),st.prototype),st))||rt);return _t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Feedback-dbg", ["sap/ui/core/Core"], function (Core) {
  "use strict";

  var _exports = {};
  let TriggerType;
  (function (TriggerType) {
    TriggerType["action"] = "actions";
    TriggerType["standardAction"] = "standardActions";
  })(TriggerType || (TriggerType = {}));
  _exports.TriggerType = TriggerType;
  let StandardActions;
  /**
   * Asking user for feedback
   *
   * @alias sap.fe.core.controllerextensions.Feedback
   * @private
   */
  (function (StandardActions) {
    StandardActions["save"] = "save";
  })(StandardActions || (StandardActions = {}));
  _exports.StandardActions = StandardActions;
  const channel = "sap.feedback";
  const feature = "inapp.feature";

  /**
   * Triggers a feedback survey.
   *
   * @memberof sap.fe.core.controllerextensions.Feedback
   * @param areaId The area id of the application.
   * @param triggerName The name of the trigger.
   * @param payload A flat list of key/values to be passed to the survey.
   * @alias sap.fe.core.controllerextensions.Feedback#triggerSurvey
   * @private
   */
  function triggerSurvey(areaId, triggerName, payload) {
    const parameters = {
      areaId: areaId,
      triggerName: triggerName,
      payload: payload
    };
    Core.getEventBus().publish(channel, feature, parameters);
  }

  /**
   * Triggers a feedback survey configured for a given action on the current page.
   *
   * @memberof sap.fe.core.controllerextensions.Feedback
   * @param view The view which is checked for a feedback configuration.
   * @param action The name of the action.
   * @param triggerType The trigger type of the action (actions|standardActions)
   * @alias sap.fe.core.controllerextensions.Feedback#triggerConfiguredSurvey
   * @private
   */
  _exports.triggerSurvey = triggerSurvey;
  function triggerConfiguredSurvey(view, action, triggerType) {
    var _view$getViewData, _view$getViewData$con, _feedbackConfig$trigg;
    const feedbackConfig = (_view$getViewData = view.getViewData()) === null || _view$getViewData === void 0 ? void 0 : (_view$getViewData$con = _view$getViewData.content) === null || _view$getViewData$con === void 0 ? void 0 : _view$getViewData$con.feedback;
    const surveyConfig = feedbackConfig === null || feedbackConfig === void 0 ? void 0 : (_feedbackConfig$trigg = feedbackConfig[triggerType]) === null || _feedbackConfig$trigg === void 0 ? void 0 : _feedbackConfig$trigg[action];
    if (surveyConfig) {
      triggerSurvey(surveyConfig.areaId, surveyConfig.triggerName, surveyConfig.payload);
    }
  }
  _exports.triggerConfiguredSurvey = triggerConfiguredSurvey;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Feedback", ["sap/ui/core/Core"],function(e){"use strict";var n={};let t;(function(e){e["action"]="actions";e["standardAction"]="standardActions"})(t||(t={}));n.TriggerType=t;let a;(function(e){e["save"]="save"})(a||(a={}));n.StandardActions=a;const i="sap.feedback";const o="inapp.feature";function r(n,t,a){const r={areaId:n,triggerName:t,payload:a};e.getEventBus().publish(i,o,r)}n.triggerSurvey=r;function d(e,n,t){var a,i,o;const d=(a=e.getViewData())===null||a===void 0?void 0:(i=a.content)===null||i===void 0?void 0:i.feedback;const c=d===null||d===void 0?void 0:(o=d[t])===null||o===void 0?void 0:o[n];if(c){r(c.areaId,c.triggerName,c.payload)}}n.triggerConfiguredSurvey=d;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/IntentBasedNavigation-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution"], function (ClassSupport, ControllerExtension, OverrideExecution) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2;
  var _exports = {};
  var publicExtension = ClassSupport.publicExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let ContextStrategy;
  /**
   * Controller extension providing hooks for intent-based navigation
   *
   * @hideconstructor
   * @public
   * @since 1.86.0
   */
  (function (ContextStrategy) {
    ContextStrategy["Default"] = "default";
    ContextStrategy["Initiator"] = "initiator";
  })(ContextStrategy || (ContextStrategy = {}));
  _exports.ContextStrategy = ContextStrategy;
  let IntentBasedNavigation = (_dec = defineUI5Class("sap.fe.core.controllerextensions.IntentBasedNavigation"), _dec2 = publicExtension(), _dec3 = extensible(OverrideExecution.After), _dec4 = publicExtension(), _dec5 = extensible(OverrideExecution.After), _dec6 = finalExtension(), _dec7 = publicExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(IntentBasedNavigation, _ControllerExtension);
    function IntentBasedNavigation() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = IntentBasedNavigation.prototype;
    _proto.adaptContextPreparationStrategy = function adaptContextPreparationStrategy(_oNavigationInfo) {
      // to be overriden by the application
      return ContextStrategy.Default;
    }

    /**
     * Provides a hook to customize the {@link sap.fe.navigation.SelectionVariant} related to the intent-based navigation.
     *
     * @function
     * @param _oSelectionVariant SelectionVariant provided by SAP Fiori elements.
     * @param _oNavigationInfo Object containing intent-based navigation-related info
     * @param _oNavigationInfo.semanticObject Semantic object related to the intent
     * @param _oNavigationInfo.action Action related to the intent
     * @alias sap.fe.core.controllerextensions.IntentBasedNavigation#adaptNavigationContext
     * @public
     * @since 1.86.0
     */;
    _proto.adaptNavigationContext = function adaptNavigationContext(_oSelectionVariant, _oNavigationInfo) {
      // to be overriden by the application
    }

    /**
     * Navigates to an intent defined by an outbound definition in the manifest.
     *
     * @function
     * @param sOutbound Identifier to locate the outbound definition in the manifest.
     * This provides the semantic object and action for the intent-based navigation.
     * Additionally, the outbound definition can be used to provide parameters for intent-based navigation.
     * See {@link topic:be0cf40f61184b358b5faedaec98b2da Descriptor for Applications, Components, and Libraries} for more information.
     * @param mNavigationParameters Optional map containing key/value pairs to be passed to the intent.
     * If mNavigationParameters are provided, the parameters provided in the outbound definition of the manifest are ignored.
     * @alias sap.fe.core.controllerextensions.IntentBasedNavigation#navigateOutbound
     * @public
     * @since 1.86.0
     */;
    _proto.navigateOutbound = function navigateOutbound(sOutbound, mNavigationParameters) {
      var _this$base, _this$base2;
      const oInternalModelContext = (_this$base = this.base) === null || _this$base === void 0 ? void 0 : _this$base.getView().getBindingContext("internal");
      oInternalModelContext.setProperty("externalNavigationContext", {
        page: false
      });
      (_this$base2 = this.base) === null || _this$base2 === void 0 ? void 0 : _this$base2._intentBasedNavigation.navigateOutbound(sOutbound, mNavigationParameters);
    };
    return IntentBasedNavigation;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "adaptContextPreparationStrategy", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptContextPreparationStrategy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptNavigationContext", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptNavigationContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateOutbound", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateOutbound"), _class2.prototype)), _class2)) || _class);
  return IntentBasedNavigation;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/IntentBasedNavigation", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution"],function(t,e,n){"use strict";var i,r,o,a,p,u,c,l,s;var f={};var v=t.publicExtension;var d=t.finalExtension;var y=t.extensible;var g=t.defineUI5Class;function b(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;O(t,e)}function O(t,e){O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,n){e.__proto__=n;return e};return O(t,e)}function x(t,e,n,i,r){var o={};Object.keys(i).forEach(function(t){o[t]=i[t]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=n.slice().reverse().reduce(function(n,i){return i(t,e,n)||n},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(t,e,o);o=null}return o}let C;(function(t){t["Default"]="default";t["Initiator"]="initiator"})(C||(C={}));f.ContextStrategy=C;let P=(i=g("sap.fe.core.controllerextensions.IntentBasedNavigation"),r=v(),o=y(n.After),a=v(),p=y(n.After),u=d(),c=v(),i(l=(s=function(t){b(e,t);function e(){return t.apply(this,arguments)||this}var n=e.prototype;n.adaptContextPreparationStrategy=function t(e){return C.Default};n.adaptNavigationContext=function t(e,n){};n.navigateOutbound=function t(e,n){var i,r;const o=(i=this.base)===null||i===void 0?void 0:i.getView().getBindingContext("internal");o.setProperty("externalNavigationContext",{page:false});(r=this.base)===null||r===void 0?void 0:r._intentBasedNavigation.navigateOutbound(e,n)};return e}(e),x(s.prototype,"adaptContextPreparationStrategy",[r,o],Object.getOwnPropertyDescriptor(s.prototype,"adaptContextPreparationStrategy"),s.prototype),x(s.prototype,"adaptNavigationContext",[a,p],Object.getOwnPropertyDescriptor(s.prototype,"adaptNavigationContext"),s.prototype),x(s.prototype,"navigateOutbound",[u,c],Object.getOwnPropertyDescriptor(s.prototype,"navigateOutbound"),s.prototype),s))||l);return P},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/InternalIntentBasedNavigation-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/editFlow/draft", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/KeepAliveHelper", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/navigation/SelectionVariant", "sap/ui/core/Core", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "../converters/helpers/Aggregation", "./editFlow/NotApplicableContextDialog"], function (Log, mergeObjects, CommonUtils, draft, MetaModelConverter, ClassSupport, KeepAliveHelper, ModelHelper, ResourceModelHelper, SelectionVariant, Core, ControllerExtension, OverrideExecution, Aggregation, NotApplicableContextDialog) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2;
  var AggregationHelper = Aggregation.AggregationHelper;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var convertTypes = MetaModelConverter.convertTypes;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * {@link sap.ui.core.mvc.ControllerExtension Controller extension}
   *
   * @namespace
   * @alias sap.fe.core.controllerextensions.InternalInternalBasedNavigation
   * @private
   * @since 1.84.0
   */
  let InternalIntentBasedNavigation = (_dec = defineUI5Class("sap.fe.core.controllerextensions.InternalInternalBasedNavigation"), _dec2 = methodOverride(), _dec3 = publicExtension(), _dec4 = finalExtension(), _dec5 = publicExtension(), _dec6 = finalExtension(), _dec7 = publicExtension(), _dec8 = finalExtension(), _dec9 = publicExtension(), _dec10 = extensible(OverrideExecution.Instead), _dec11 = publicExtension(), _dec12 = finalExtension(), _dec13 = privateExtension(), _dec14 = publicExtension(), _dec15 = finalExtension(), _dec16 = publicExtension(), _dec17 = finalExtension(), _dec18 = publicExtension(), _dec19 = finalExtension(), _dec20 = publicExtension(), _dec21 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(InternalIntentBasedNavigation, _ControllerExtension);
    function InternalIntentBasedNavigation() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = InternalIntentBasedNavigation.prototype;
    _proto.onInit = function onInit() {
      this._oAppComponent = this.base.getAppComponent();
      this._oMetaModel = this._oAppComponent.getModel().getMetaModel();
      this._oNavigationService = this._oAppComponent.getNavigationService();
      this._oView = this.base.getView();
    }

    /**
     * Enables intent-based navigation (SemanticObject-Action) with the provided context.
     * If semantic object mapping is provided, this is also applied to the selection variant after the adaptation by a consumer.
     * This takes care of removing any technical parameters and determines if an explace or inplace navigation should take place.
     *
     * @param sSemanticObject Semantic object for the target app
     * @param sAction  Action for the target app
     * @param [mNavigationParameters] Optional parameters to be passed to the external navigation
     * @param [mNavigationParameters.navigationContexts] Uses one of the following to be passed to the intent:
     *    a single instance of {@link sap.ui.model.odata.v4.Context}
     *    multiple instances of {@link sap.ui.model.odata.v4.Context}
     *    an object or an array of objects
     *		  If an array of objects is passed, the context is used to determine the metaPath and to remove any sensitive data
     *		  If an array of objects is passed, the following format ix expected:
     *		  {
     *			data: {
     *	 			ProductID: 7634,
     *				Name: "Laptop"
     *			 },
     *			 metaPath: "/SalesOrderManage"
     *        }
     * @param [mNavigationParameters.semanticObjectMapping] String representation of the SemanticObjectMapping or SemanticObjectMapping that applies to this navigation
     * @param [mNavigationParameters.defaultRefreshStrategy] Default refresh strategy to be used in case no refresh strategy is specified for the intent in the view.
     * @param [mNavigationParameters.refreshStrategies]
     * @param [mNavigationParameters.additionalNavigationParameters] Additional navigation parameters configured in the crossAppNavigation outbound parameters.
     */;
    _proto.navigate = function navigate(sSemanticObject, sAction, mNavigationParameters) {
      const _doNavigate = oContext => {
        const vNavigationContexts = mNavigationParameters && mNavigationParameters.navigationContexts,
          aNavigationContexts = vNavigationContexts && !Array.isArray(vNavigationContexts) ? [vNavigationContexts] : vNavigationContexts,
          vSemanticObjectMapping = mNavigationParameters && mNavigationParameters.semanticObjectMapping,
          vOutboundParams = mNavigationParameters && mNavigationParameters.additionalNavigationParameters,
          oTargetInfo = {
            semanticObject: sSemanticObject,
            action: sAction
          },
          oView = this.base.getView(),
          oController = oView.getController();
        if (oContext) {
          this._oView.setBindingContext(oContext);
        }
        if (sSemanticObject && sAction) {
          let aSemanticAttributes = [],
            oSelectionVariant = new SelectionVariant();
          // 1. get SemanticAttributes for navigation
          if (aNavigationContexts && aNavigationContexts.length) {
            aNavigationContexts.forEach(oNavigationContext => {
              // 1.1.a if navigation context is instance of sap.ui.mode.odata.v4.Context
              // else check if navigation context is of type object
              if (oNavigationContext.isA && oNavigationContext.isA("sap.ui.model.odata.v4.Context")) {
                // 1.1.b remove sensitive data
                let oSemanticAttributes = oNavigationContext.getObject();
                const sMetaPath = this._oMetaModel.getMetaPath(oNavigationContext.getPath());
                // TODO: also remove sensitive data from  navigation properties
                oSemanticAttributes = this.removeSensitiveData(oSemanticAttributes, sMetaPath);
                const oNavContext = this.prepareContextForExternalNavigation(oSemanticAttributes, oNavigationContext);
                oTargetInfo["propertiesWithoutConflict"] = oNavContext.propertiesWithoutConflict;
                aSemanticAttributes.push(oNavContext.semanticAttributes);
              } else if (!(oNavigationContext && Array.isArray(oNavigationContext.data)) && typeof oNavigationContext === "object") {
                // 1.1.b remove sensitive data from object
                aSemanticAttributes.push(this.removeSensitiveData(oNavigationContext.data, oNavigationContext.metaPath));
              } else if (oNavigationContext && Array.isArray(oNavigationContext.data)) {
                // oNavigationContext.data can be array already ex : [{Customer: "10001"}, {Customer: "10091"}]
                // hence assigning it to the aSemanticAttributes
                aSemanticAttributes = this.removeSensitiveData(oNavigationContext.data, oNavigationContext.metaPath);
              }
            });
          }
          // 2.1 Merge base selection variant and sanitized semantic attributes into one SelectionVariant
          if (aSemanticAttributes && aSemanticAttributes.length) {
            oSelectionVariant = this._oNavigationService.mixAttributesAndSelectionVariant(aSemanticAttributes, oSelectionVariant.toJSONString());
          }

          // 3. Add filterContextUrl to SV so the NavigationHandler can remove any sensitive data based on view entitySet
          const oModel = this._oView.getModel(),
            sEntitySet = this.getEntitySet(),
            sContextUrl = sEntitySet ? this._oNavigationService.constructContextUrl(sEntitySet, oModel) : undefined;
          if (sContextUrl) {
            oSelectionVariant.setFilterContextUrl(sContextUrl);
          }

          // Apply Outbound Parameters to the SV
          if (vOutboundParams) {
            this._applyOutboundParams(oSelectionVariant, vOutboundParams);
          }

          // 4. give an opportunity for the application to influence the SelectionVariant
          oController.intentBasedNavigation.adaptNavigationContext(oSelectionVariant, oTargetInfo);

          // 5. Apply semantic object mappings to the SV
          if (vSemanticObjectMapping) {
            this._applySemanticObjectMappings(oSelectionVariant, vSemanticObjectMapping);
          }

          // 6. remove technical parameters from Selection Variant
          this._removeTechnicalParameters(oSelectionVariant);

          // 7. check if programming model is sticky and page is editable
          const sNavMode = oController._intentBasedNavigation.getNavigationMode();

          // 8. Updating refresh strategy in internal model
          const mRefreshStrategies = mNavigationParameters && mNavigationParameters.refreshStrategies || {},
            oInternalModel = oView.getModel("internal");
          if (oInternalModel) {
            if ((oView && oView.getViewData()).refreshStrategyOnAppRestore) {
              const mViewRefreshStrategies = oView.getViewData().refreshStrategyOnAppRestore || {};
              mergeObjects(mRefreshStrategies, mViewRefreshStrategies);
            }
            const mRefreshStrategy = KeepAliveHelper.getRefreshStrategyForIntent(mRefreshStrategies, sSemanticObject, sAction);
            if (mRefreshStrategy) {
              oInternalModel.setProperty("/refreshStrategyOnAppRestore", mRefreshStrategy);
            }
          }

          // 9. Navigate via NavigationHandler
          const onError = function () {
            sap.ui.require(["sap/m/MessageBox"], function (MessageBox) {
              const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
              MessageBox.error(oResourceBundle.getText("C_COMMON_HELPER_NAVIGATION_ERROR_MESSAGE"), {
                title: oResourceBundle.getText("C_COMMON_SAPFE_ERROR")
              });
            });
          };
          this._oNavigationService.navigate(sSemanticObject, sAction, oSelectionVariant.toJSONString(), undefined, onError, undefined, sNavMode);
        } else {
          throw new Error("Semantic Object/action is not provided");
        }
      };
      const oBindingContext = this.base.getView().getBindingContext();
      const oMetaModel = oBindingContext && oBindingContext.getModel().getMetaModel();
      if (this.getView().getViewData().converterType === "ObjectPage" && oMetaModel && !ModelHelper.isStickySessionSupported(oMetaModel)) {
        draft.processDataLossOrDraftDiscardConfirmation(_doNavigate.bind(this), Function.prototype, this.base.getView().getBindingContext(), this.base.getView().getController(), true, draft.NavigationType.ForwardNavigation);
      } else {
        _doNavigate();
      }
    }

    /**
     * Prepare attributes to be passed to external navigation.
     *
     * @param oSemanticAttributes Context data after removing all sensitive information.
     * @param oContext Actual context from which the semanticAttributes were derived.
     * @returns Object of prepared attributes for external navigation and no conflict properties.
     */;
    _proto.prepareContextForExternalNavigation = function prepareContextForExternalNavigation(oSemanticAttributes, oContext) {
      // 1. Find all distinct keys in the object SemanticAttributes
      // Store meta path for each occurence of the key
      const oDistinctKeys = {},
        sContextPath = oContext.getPath(),
        oMetaModel = oContext.getModel().getMetaModel(),
        sMetaPath = oMetaModel.getMetaPath(sContextPath),
        aMetaPathParts = sMetaPath.split("/").filter(Boolean);
      function _findDistinctKeysInObject(LookUpObject, sLookUpObjectMetaPath) {
        for (const sKey in LookUpObject) {
          // null case??
          if (LookUpObject[sKey] === null || typeof LookUpObject[sKey] !== "object") {
            if (!oDistinctKeys[sKey]) {
              // if key is found for the first time then create array
              oDistinctKeys[sKey] = [];
            }
            // push path to array
            oDistinctKeys[sKey].push(sLookUpObjectMetaPath);
          } else {
            // if a nested object is found
            const oNewLookUpObject = LookUpObject[sKey];
            _findDistinctKeysInObject(oNewLookUpObject, `${sLookUpObjectMetaPath}/${sKey}`);
          }
        }
      }
      _findDistinctKeysInObject(oSemanticAttributes, sMetaPath);

      // 2. Determine distinct key value and add conflicted paths to semantic attributes
      const sMainEntitySetName = aMetaPathParts[0],
        sMainEntityTypeName = oMetaModel.getObject(`/${sMainEntitySetName}/@sapui.name`),
        oPropertiesWithoutConflict = {};
      let sMainEntityValuePath, sCurrentValuePath, sLastValuePath;
      for (const sDistinctKey in oDistinctKeys) {
        const aConflictingPaths = oDistinctKeys[sDistinctKey];
        let sWinnerValuePath;
        // Find winner value for each distinct key in case of conflict by the following rule:

        // -> A. if any meta path for a distinct key is the same as main entity take that as the value
        // -> B. if A is not met keep the value from the current context (sMetaPath === path of distince key)
        // -> C. if A, B or C are not met take the last path for value
        if (aConflictingPaths.length > 1) {
          // conflict
          for (let i = 0; i <= aConflictingPaths.length - 1; i++) {
            const sPath = aConflictingPaths[i];
            let sPathInContext = sPath.replace(sPath === sMetaPath ? sMetaPath : `${sMetaPath}/`, "");
            sPathInContext = (sPathInContext === "" ? sPathInContext : `${sPathInContext}/`) + sDistinctKey;
            const sEntityTypeName = oMetaModel.getObject(`${sPath}/@sapui.name`);
            // rule A

            // rule A
            if (sEntityTypeName === sMainEntityTypeName) {
              sMainEntityValuePath = sPathInContext;
            }

            // rule B
            if (sPath === sMetaPath) {
              sCurrentValuePath = sPathInContext;
            }

            // rule C
            sLastValuePath = sPathInContext;

            // add conflicted path to semantic attributes
            // check if the current path points to main entity and prefix attribute names accordingly
            oSemanticAttributes[`${sMetaPath}/${sPathInContext}`.split("/").filter(function (sValue) {
              return sValue != "";
            }).join(".")] = oContext.getProperty(sPathInContext);
          }
          // A || B || C
          sWinnerValuePath = sMainEntityValuePath || sCurrentValuePath || sLastValuePath;
          oSemanticAttributes[sDistinctKey] = oContext.getProperty(sWinnerValuePath);
          sMainEntityValuePath = undefined;
          sCurrentValuePath = undefined;
          sLastValuePath = undefined;
        } else {
          // no conflict, add distinct key without adding paths
          const sPath = aConflictingPaths[0]; // because there is only one and hence no conflict
          let sPathInContext = sPath.replace(sPath === sMetaPath ? sMetaPath : `${sMetaPath}/`, "");
          sPathInContext = (sPathInContext === "" ? sPathInContext : `${sPathInContext}/`) + sDistinctKey;
          oSemanticAttributes[sDistinctKey] = oContext.getProperty(sPathInContext);
          oPropertiesWithoutConflict[sDistinctKey] = `${sMetaPath}/${sPathInContext}`.split("/").filter(function (sValue) {
            return sValue != "";
          }).join(".");
        }
      }
      // 3. Remove all Navigation properties
      for (const sProperty in oSemanticAttributes) {
        if (oSemanticAttributes[sProperty] !== null && typeof oSemanticAttributes[sProperty] === "object") {
          delete oSemanticAttributes[sProperty];
        }
      }
      return {
        semanticAttributes: oSemanticAttributes,
        propertiesWithoutConflict: oPropertiesWithoutConflict
      };
    }

    /**
     * Prepare filter conditions to be passed to external navigation.
     *
     * @param oFilterBarConditions Filter conditions.
     * @param sRootPath Root path of the application.
     * @param aParameters Names of parameters to be considered.
     * @returns Object of prepared filter conditions for external navigation and no conflict filters.
     */;
    _proto.prepareFiltersForExternalNavigation = function prepareFiltersForExternalNavigation(oFilterBarConditions, sRootPath, aParameters) {
      let sPath;
      const oDistinctKeys = {};
      const oFilterConditionsWithoutConflict = {};
      let sMainEntityValuePath, sCurrentValuePath, sFullContextPath, sWinnerValuePath, sPathInContext;
      function _findDistinctKeysInObject(LookUpObject) {
        let sLookUpObjectMetaPath;
        for (const sKey in LookUpObject) {
          let keyInContext = sKey;
          if (LookUpObject[keyInContext]) {
            if (keyInContext.includes("/")) {
              sLookUpObjectMetaPath = keyInContext; // "/SalesOrdermanage/_Item/Material"
              const aPathParts = keyInContext.split("/");
              keyInContext = aPathParts[aPathParts.length - 1];
            } else {
              sLookUpObjectMetaPath = sRootPath;
            }
            if (!oDistinctKeys[keyInContext]) {
              // if key is found for the first time then create array
              oDistinctKeys[keyInContext] = [];
            }

            // push path to array
            oDistinctKeys[keyInContext].push(sLookUpObjectMetaPath);
          }
        }
      }
      _findDistinctKeysInObject(oFilterBarConditions);
      for (const sDistinctKey in oDistinctKeys) {
        const aConflictingPaths = oDistinctKeys[sDistinctKey];
        if (aConflictingPaths.length > 1) {
          // conflict
          for (let i = 0; i <= aConflictingPaths.length - 1; i++) {
            sPath = aConflictingPaths[i];
            if (sPath === sRootPath) {
              sFullContextPath = `${sRootPath}/${sDistinctKey}`;
              sPathInContext = sDistinctKey;
              sMainEntityValuePath = sDistinctKey;
              if (aParameters && aParameters.includes(sDistinctKey)) {
                oFilterBarConditions[`$Parameter.${sDistinctKey}`] = oFilterBarConditions[sDistinctKey];
              }
            } else {
              sPathInContext = sPath;
              sFullContextPath = `${sRootPath}/${sPath}`.replaceAll(/\*/g, "");
              sCurrentValuePath = sPath;
            }
            oFilterBarConditions[sFullContextPath.split("/").filter(function (sValue) {
              return sValue != "";
            }).join(".")] = oFilterBarConditions[sPathInContext];
            delete oFilterBarConditions[sPath];
          }
          sWinnerValuePath = sMainEntityValuePath || sCurrentValuePath;
          oFilterBarConditions[sDistinctKey] = oFilterBarConditions[sWinnerValuePath];
        } else {
          // no conflict, add distinct key without adding paths
          sPath = aConflictingPaths[0];
          sFullContextPath = sPath === sRootPath ? `${sRootPath}/${sDistinctKey}` : `${sRootPath}/${sPath}`.replaceAll("*", "");
          oFilterConditionsWithoutConflict[sDistinctKey] = sFullContextPath.split("/").filter(function (sValue) {
            return sValue != "";
          }).join(".");
          if (aParameters && aParameters.includes(sDistinctKey)) {
            oFilterBarConditions[`$Parameter.${sDistinctKey}`] = oFilterBarConditions[sDistinctKey];
          }
        }
      }
      return {
        filterConditions: oFilterBarConditions,
        filterConditionsWithoutConflict: oFilterConditionsWithoutConflict
      };
    }

    /**
     * Get Navigation mode.
     *
     * @returns The navigation mode
     */;
    _proto.getNavigationMode = function getNavigationMode() {
      return undefined;
    }

    /**
     * Allows for navigation to a given intent (SemanticObject-Action) with the provided context, using a dialog that shows the contexts which cannot be passed
     * If semantic object mapping is provided, this setting is also applied to the selection variant after adaptation by a consumer.
     * This setting also removes any technical parameters and determines if an inplace or explace navigation should take place.
     *
     * @param sSemanticObject Semantic object for the target app
     * @param sAction  Action for the target app
     * @param [mNavigationParameters] Optional parameters to be passed to the external navigation
     */;
    _proto.navigateWithConfirmationDialog = async function navigateWithConfirmationDialog(sSemanticObject, sAction, mNavigationParameters) {
      var _mNavigationParameter;
      let shouldContinue = true;
      if (mNavigationParameters !== null && mNavigationParameters !== void 0 && mNavigationParameters.notApplicableContexts && ((_mNavigationParameter = mNavigationParameters.notApplicableContexts) === null || _mNavigationParameter === void 0 ? void 0 : _mNavigationParameter.length) >= 1) {
        const metaModel = this.base.getView().getModel().getMetaModel();
        const entitySetPath = metaModel.getMetaPath(mNavigationParameters.notApplicableContexts[0].getPath());
        const convertedMetadata = convertTypes(metaModel);
        const entitySet = convertedMetadata.resolvePath(entitySetPath).target;
        // Show the contexts that are not applicable and will not therefore be processed
        const notApplicableContextsDialog = new NotApplicableContextDialog({
          title: "",
          entityType: entitySet.entityType,
          resourceModel: getResourceModel(this.getView()),
          notApplicableContexts: mNavigationParameters.notApplicableContexts
        });
        mNavigationParameters.navigationContexts = mNavigationParameters.applicableContexts;
        shouldContinue = await notApplicableContextsDialog.open(this.getView());
      }
      if (shouldContinue) {
        this.navigate(sSemanticObject, sAction, mNavigationParameters);
      }
    };
    _proto._removeTechnicalParameters = function _removeTechnicalParameters(oSelectionVariant) {
      oSelectionVariant.removeSelectOption("@odata.context");
      oSelectionVariant.removeSelectOption("@odata.metadataEtag");
      oSelectionVariant.removeSelectOption("SAP__Messages");
    }

    /**
     * Get targeted Entity set.
     *
     * @returns Entity set name
     */;
    _proto.getEntitySet = function getEntitySet() {
      return this._oView.getViewData().entitySet;
    }

    /**
     * Removes sensitive data from the semantic attribute with respect to the entitySet.
     *
     * @param oAttributes Context data
     * @param sMetaPath Meta path to reach the entitySet in the MetaModel
     * @returns Array of semantic Attributes
     * @private
     */
    // TO-DO add unit tests for this function in the controller extension qunit.
    ;
    _proto.removeSensitiveData = function removeSensitiveData(oAttributes, sMetaPath) {
      if (oAttributes) {
        const {
          transAggregations,
          customAggregates
        } = this._getAggregates(sMetaPath, this.base.getView(), this.base.getAppComponent().getDiagnostics());
        const aProperties = Object.keys(oAttributes);
        if (aProperties.length) {
          delete oAttributes["@odata.context"];
          delete oAttributes["@odata.metadataEtag"];
          delete oAttributes["SAP__Messages"];
          for (const element of aProperties) {
            if (oAttributes[element] && typeof oAttributes[element] === "object") {
              this.removeSensitiveData(oAttributes[element], `${sMetaPath}/${element}`);
            }
            if (element.indexOf("@odata.type") > -1) {
              delete oAttributes[element];
              continue;
            }
            this._deleteAggregates([...transAggregations, ...customAggregates], element, oAttributes);
            const aPropertyAnnotations = this._getPropertyAnnotations(element, sMetaPath, oAttributes, this._oMetaModel);
            if (aPropertyAnnotations) {
              var _aPropertyAnnotations, _aPropertyAnnotations2, _aPropertyAnnotations3, _aPropertyAnnotations4;
              if ((_aPropertyAnnotations = aPropertyAnnotations.PersonalData) !== null && _aPropertyAnnotations !== void 0 && _aPropertyAnnotations.IsPotentiallySensitive || (_aPropertyAnnotations2 = aPropertyAnnotations.UI) !== null && _aPropertyAnnotations2 !== void 0 && _aPropertyAnnotations2.ExcludeFromNavigationContext || (_aPropertyAnnotations3 = aPropertyAnnotations.Analytics) !== null && _aPropertyAnnotations3 !== void 0 && _aPropertyAnnotations3.Measure) {
                delete oAttributes[element];
              } else if ((_aPropertyAnnotations4 = aPropertyAnnotations.Common) !== null && _aPropertyAnnotations4 !== void 0 && _aPropertyAnnotations4.FieldControl) {
                const oFieldControl = aPropertyAnnotations.Common.FieldControl;
                if (oFieldControl["$EnumMember"] && oFieldControl["$EnumMember"].split("/")[1] === "Inapplicable" || oFieldControl["$Path"] && this._isFieldControlPathInapplicable(oFieldControl["$Path"], oAttributes)) {
                  delete oAttributes[element];
                }
              }
            }
          }
        }
      }
      return oAttributes;
    }

    /**
     * Remove the attribute from navigation data if it is a measure.
     *
     * @param aggregates Array of Aggregates
     * @param sProp Attribute name
     * @param oAttributes SemanticAttributes
     */;
    _proto._deleteAggregates = function _deleteAggregates(aggregates, sProp, oAttributes) {
      if (aggregates && aggregates.indexOf(sProp) > -1) {
        delete oAttributes[sProp];
      }
    }

    /**
     * Returns the property annotations.
     *
     * @param sProp
     * @param sMetaPath
     * @param oAttributes
     * @param oMetaModel
     * @returns - The property annotations
     */;
    _proto._getPropertyAnnotations = function _getPropertyAnnotations(sProp, sMetaPath, oAttributes, oMetaModel) {
      if (oAttributes[sProp] && sMetaPath && !sMetaPath.includes("undefined")) {
        var _oFullContext$targetO;
        const oContext = oMetaModel.createBindingContext(`${sMetaPath}/${sProp}`);
        const oFullContext = MetaModelConverter.getInvolvedDataModelObjects(oContext);
        return oFullContext === null || oFullContext === void 0 ? void 0 : (_oFullContext$targetO = oFullContext.targetObject) === null || _oFullContext$targetO === void 0 ? void 0 : _oFullContext$targetO.annotations;
      }
      return null;
    }

    /**
     * Returns the aggregates part of the EntitySet or EntityType.
     *
     * @param sMetaPath
     * @param oView
     * @param oDiagnostics
     * @returns - The aggregates
     */;
    _proto._getAggregates = function _getAggregates(sMetaPath, oView, oDiagnostics) {
      const converterContext = this._getConverterContext(sMetaPath, oView, oDiagnostics);
      const aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext);
      const isAnalyticsSupported = aggregationHelper.isAnalyticsSupported();
      let transAggregations, customAggregates;
      if (isAnalyticsSupported) {
        var _transAggregations, _customAggregates;
        transAggregations = aggregationHelper.getTransAggregations();
        if ((_transAggregations = transAggregations) !== null && _transAggregations !== void 0 && _transAggregations.length) {
          transAggregations = transAggregations.map(transAgg => {
            return transAgg.Name || transAgg.Value;
          });
        }
        customAggregates = aggregationHelper.getCustomAggregateDefinitions();
        if ((_customAggregates = customAggregates) !== null && _customAggregates !== void 0 && _customAggregates.length) {
          customAggregates = customAggregates.map(customAggregate => {
            return customAggregate.qualifier;
          });
        }
      }
      transAggregations = transAggregations ? transAggregations : [];
      customAggregates = customAggregates ? customAggregates : [];
      return {
        transAggregations,
        customAggregates
      };
    }

    /**
     * Returns converterContext.
     *
     * @param sMetaPath
     * @param oView
     * @param oDiagnostics
     * @returns - ConverterContext
     */;
    _proto._getConverterContext = function _getConverterContext(sMetaPath, oView, oDiagnostics) {
      const oViewData = oView.getViewData();
      let sEntitySet = oViewData.entitySet;
      const sContextPath = oViewData.contextPath;
      if (sContextPath && (!sEntitySet || sEntitySet.includes("/"))) {
        sEntitySet = oViewData === null || oViewData === void 0 ? void 0 : oViewData.fullContextPath.split("/")[1];
      }
      return CommonUtils.getConverterContextForPath(sMetaPath, oView.getModel().getMetaModel(), sEntitySet, oDiagnostics);
    }

    /**
     * Check if path-based FieldControl evaluates to inapplicable.
     *
     * @param sFieldControlPath Field control path
     * @param oAttribute SemanticAttributes
     * @returns `true` if inapplicable
     */;
    _proto._isFieldControlPathInapplicable = function _isFieldControlPathInapplicable(sFieldControlPath, oAttribute) {
      let bInapplicable = false;
      const aParts = sFieldControlPath.split("/");
      // sensitive data is removed only if the path has already been resolved.
      if (aParts.length > 1) {
        bInapplicable = oAttribute[aParts[0]] && oAttribute[aParts[0]].hasOwnProperty(aParts[1]) && oAttribute[aParts[0]][aParts[1]] === 0;
      } else {
        bInapplicable = oAttribute[sFieldControlPath] === 0;
      }
      return bInapplicable;
    }

    /**
     * Method to replace Local Properties with Semantic Object mappings.
     *
     * @param oSelectionVariant SelectionVariant consisting of filterbar, Table and Page Context
     * @param vMappings A string representation of semantic object mapping
     * @returns - Modified SelectionVariant with LocalProperty replaced with SemanticObjectProperties.
     */;
    _proto._applySemanticObjectMappings = function _applySemanticObjectMappings(oSelectionVariant, vMappings) {
      const oMappings = typeof vMappings === "string" ? JSON.parse(vMappings) : vMappings;
      for (let i = 0; i < oMappings.length; i++) {
        const sLocalProperty = oMappings[i]["LocalProperty"] && oMappings[i]["LocalProperty"]["$PropertyPath"] || oMappings[i]["@com.sap.vocabularies.Common.v1.LocalProperty"] && oMappings[i]["@com.sap.vocabularies.Common.v1.LocalProperty"]["$Path"];
        const sSemanticObjectProperty = oMappings[i]["SemanticObjectProperty"] || oMappings[i]["@com.sap.vocabularies.Common.v1.SemanticObjectProperty"];
        const oSelectOption = oSelectionVariant.getSelectOption(sLocalProperty);
        if (oSelectOption) {
          //Create a new SelectOption with sSemanticObjectProperty as the property Name and remove the older one
          oSelectionVariant.removeSelectOption(sLocalProperty);
          oSelectionVariant.massAddSelectOption(sSemanticObjectProperty, oSelectOption);
        }
      }
      return oSelectionVariant;
    }

    /**
     * Navigates to an Outbound provided in the manifest.
     *
     * @function
     * @param sOutbound Identifier to location the outbound in the manifest
     * @param mNavigationParameters Optional map containing key/value pairs to be passed to the intent
     * @alias sap.fe.core.controllerextensions.IntentBasedNavigation#navigateOutbound
     * @since 1.86.0
     */;
    _proto.navigateOutbound = function navigateOutbound(sOutbound, mNavigationParameters) {
      var _oManifestEntry$cross, _oManifestEntry$cross2;
      let aNavParams;
      const oManifestEntry = this.base.getAppComponent().getManifestEntry("sap.app"),
        oOutbound = (_oManifestEntry$cross = oManifestEntry.crossNavigation) === null || _oManifestEntry$cross === void 0 ? void 0 : (_oManifestEntry$cross2 = _oManifestEntry$cross.outbounds) === null || _oManifestEntry$cross2 === void 0 ? void 0 : _oManifestEntry$cross2[sOutbound];
      if (!oOutbound) {
        Log.error("Outbound is not defined in manifest!!");
        return;
      }
      const sSemanticObject = oOutbound.semanticObject,
        sAction = oOutbound.action,
        outboundParams = oOutbound.parameters && this.getOutboundParams(oOutbound.parameters);
      if (mNavigationParameters) {
        aNavParams = [];
        Object.keys(mNavigationParameters).forEach(function (key) {
          let oParams;
          if (Array.isArray(mNavigationParameters[key])) {
            const aValues = mNavigationParameters[key];
            for (let i = 0; i < aValues.length; i++) {
              var _aNavParams;
              oParams = {};
              oParams[key] = aValues[i];
              (_aNavParams = aNavParams) === null || _aNavParams === void 0 ? void 0 : _aNavParams.push(oParams);
            }
          } else {
            var _aNavParams2;
            oParams = {};
            oParams[key] = mNavigationParameters[key];
            (_aNavParams2 = aNavParams) === null || _aNavParams2 === void 0 ? void 0 : _aNavParams2.push(oParams);
          }
        });
      }
      if (aNavParams || outboundParams) {
        mNavigationParameters = {
          navigationContexts: {
            data: aNavParams || outboundParams
          }
        };
      }
      this.base._intentBasedNavigation.navigate(sSemanticObject, sAction, mNavigationParameters);
    }

    /**
     * Method to apply outbound parameters defined in the manifest.
     *
     * @param oSelectionVariant SelectionVariant consisting of a filter bar, a table, and a page context
     * @param vOutboundParams Outbound Properties defined in the manifest
     * @returns - The modified SelectionVariant with outbound parameters.
     */;
    _proto._applyOutboundParams = function _applyOutboundParams(oSelectionVariant, vOutboundParams) {
      const aParameters = Object.keys(vOutboundParams);
      const aSelectProperties = oSelectionVariant.getSelectOptionsPropertyNames();
      aParameters.forEach(function (key) {
        if (!aSelectProperties.includes(key)) {
          oSelectionVariant.addSelectOption(key, "I", "EQ", vOutboundParams[key]);
        }
      });
      return oSelectionVariant;
    }

    /**
     * Method to get the outbound parameters defined in the manifest.
     *
     * @function
     * @param oOutboundParams Parameters defined in the outbounds. Only "plain" is supported
     * @returns Parameters with the key-Value pair
     */;
    _proto.getOutboundParams = function getOutboundParams(oOutboundParams) {
      const oParamsMapping = {};
      if (oOutboundParams) {
        const aParameters = Object.keys(oOutboundParams) || [];
        if (aParameters.length > 0) {
          aParameters.forEach(function (key) {
            const oMapping = oOutboundParams[key];
            if (oMapping.value && oMapping.value.value && oMapping.value.format === "plain") {
              if (!oParamsMapping[key]) {
                oParamsMapping[key] = oMapping.value.value;
              }
            }
          });
        }
      }
      return oParamsMapping;
    }

    /**
     * Triggers an outbound navigation when a user chooses the chevron.
     *
     * @param {object} oController
     * @param {string} sOutboundTarget Name of the outbound target (needs to be defined in the manifest)
     * @param {sap.ui.model.odata.v4.Context} oContext The context that contains the data for the target app
     * @param {string} sCreatePath Create path when the chevron is created.
     * @returns {Promise} Promise which is resolved once the navigation is triggered
     */;
    _proto.onChevronPressNavigateOutBound = function onChevronPressNavigateOutBound(oController, sOutboundTarget, oContext, sCreatePath) {
      const oOutbounds = oController.getAppComponent().getRoutingService().getOutbounds();
      const oDisplayOutbound = oOutbounds[sOutboundTarget];
      let additionalNavigationParameters;
      if (oDisplayOutbound && oDisplayOutbound.semanticObject && oDisplayOutbound.action) {
        const oRefreshStrategies = {
          intents: {}
        };
        const oDefaultRefreshStrategy = {};
        let sMetaPath;
        if (oContext) {
          if (oContext.isA && oContext.isA("sap.ui.model.odata.v4.Context")) {
            sMetaPath = ModelHelper.getMetaPathForContext(oContext);
            oContext = [oContext];
          } else {
            sMetaPath = ModelHelper.getMetaPathForContext(oContext[0]);
          }
          oDefaultRefreshStrategy[sMetaPath] = "self";
          oRefreshStrategies["_feDefault"] = oDefaultRefreshStrategy;
        }
        if (sCreatePath) {
          const sKey = `${oDisplayOutbound.semanticObject}-${oDisplayOutbound.action}`;
          oRefreshStrategies.intents[sKey] = {};
          oRefreshStrategies.intents[sKey][sCreatePath] = "self";
        }
        if (oDisplayOutbound && oDisplayOutbound.parameters) {
          const oParams = oDisplayOutbound.parameters && this.getOutboundParams(oDisplayOutbound.parameters);
          if (Object.keys(oParams).length > 0) {
            additionalNavigationParameters = oParams;
          }
        }
        oController._intentBasedNavigation.navigate(oDisplayOutbound.semanticObject, oDisplayOutbound.action, {
          navigationContexts: oContext,
          refreshStrategies: oRefreshStrategies,
          additionalNavigationParameters: additionalNavigationParameters
        });

        //TODO: check why returning a promise is required
        return Promise.resolve();
      } else {
        throw new Error(`outbound target ${sOutboundTarget} not found in cross navigation definition of manifest`);
      }
    };
    return InternalIntentBasedNavigation;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigate", [_dec3, _dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "navigate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "prepareContextForExternalNavigation", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "prepareContextForExternalNavigation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "prepareFiltersForExternalNavigation", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "prepareFiltersForExternalNavigation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getNavigationMode", [_dec9, _dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "getNavigationMode"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateWithConfirmationDialog", [_dec11, _dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateWithConfirmationDialog"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getEntitySet", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "getEntitySet"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeSensitiveData", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "removeSensitiveData"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateOutbound", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateOutbound"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getOutboundParams", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "getOutboundParams"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onChevronPressNavigateOutBound", [_dec20, _dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "onChevronPressNavigateOutBound"), _class2.prototype)), _class2)) || _class);
  return InternalIntentBasedNavigation;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/InternalIntentBasedNavigation", ["sap/base/Log","sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/editFlow/draft","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/KeepAliveHelper","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/navigation/SelectionVariant","sap/ui/core/Core","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","../converters/helpers/Aggregation","./editFlow/NotApplicableContextDialog"],function(t,e,o,n,i,r,a,s,l,p,c,g,u,f,d){"use strict";var v,h,y,m,b,O,C,P,A,x,S,M,_,j,w,N,E,$,D,F,V,I,B;var R=f.AggregationHelper;var T=l.getResourceModel;var L=r.publicExtension;var k=r.privateExtension;var W=r.methodOverride;var z=r.finalExtension;var H=r.extensible;var U=r.defineUI5Class;var J=i.convertTypes;function q(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;G(t,e)}function G(t,e){G=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,o){e.__proto__=o;return e};return G(t,e)}function K(t,e,o,n,i){var r={};Object.keys(n).forEach(function(t){r[t]=n[t]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(t,e,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(t,e,r);r=null}return r}let Q=(v=U("sap.fe.core.controllerextensions.InternalInternalBasedNavigation"),h=W(),y=L(),m=z(),b=L(),O=z(),C=L(),P=z(),A=L(),x=H(u.Instead),S=L(),M=z(),_=k(),j=L(),w=z(),N=L(),E=z(),$=L(),D=z(),F=L(),V=z(),v(I=(B=function(r){q(l,r);function l(){return r.apply(this,arguments)||this}var g=l.prototype;g.onInit=function t(){this._oAppComponent=this.base.getAppComponent();this._oMetaModel=this._oAppComponent.getModel().getMetaModel();this._oNavigationService=this._oAppComponent.getNavigationService();this._oView=this.base.getView()};g.navigate=function t(o,i,r){const l=t=>{const n=r&&r.navigationContexts,s=n&&!Array.isArray(n)?[n]:n,l=r&&r.semanticObjectMapping,g=r&&r.additionalNavigationParameters,u={semanticObject:o,action:i},f=this.base.getView(),d=f.getController();if(t){this._oView.setBindingContext(t)}if(o&&i){let t=[],n=new p;if(s&&s.length){s.forEach(e=>{if(e.isA&&e.isA("sap.ui.model.odata.v4.Context")){let o=e.getObject();const n=this._oMetaModel.getMetaPath(e.getPath());o=this.removeSensitiveData(o,n);const i=this.prepareContextForExternalNavigation(o,e);u["propertiesWithoutConflict"]=i.propertiesWithoutConflict;t.push(i.semanticAttributes)}else if(!(e&&Array.isArray(e.data))&&typeof e==="object"){t.push(this.removeSensitiveData(e.data,e.metaPath))}else if(e&&Array.isArray(e.data)){t=this.removeSensitiveData(e.data,e.metaPath)}})}if(t&&t.length){n=this._oNavigationService.mixAttributesAndSelectionVariant(t,n.toJSONString())}const v=this._oView.getModel(),h=this.getEntitySet(),y=h?this._oNavigationService.constructContextUrl(h,v):undefined;if(y){n.setFilterContextUrl(y)}if(g){this._applyOutboundParams(n,g)}d.intentBasedNavigation.adaptNavigationContext(n,u);if(l){this._applySemanticObjectMappings(n,l)}this._removeTechnicalParameters(n);const m=d._intentBasedNavigation.getNavigationMode();const b=r&&r.refreshStrategies||{},O=f.getModel("internal");if(O){if((f&&f.getViewData()).refreshStrategyOnAppRestore){const t=f.getViewData().refreshStrategyOnAppRestore||{};e(b,t)}const t=a.getRefreshStrategyForIntent(b,o,i);if(t){O.setProperty("/refreshStrategyOnAppRestore",t)}}const C=function(){sap.ui.require(["sap/m/MessageBox"],function(t){const e=c.getLibraryResourceBundle("sap.fe.core");t.error(e.getText("C_COMMON_HELPER_NAVIGATION_ERROR_MESSAGE"),{title:e.getText("C_COMMON_SAPFE_ERROR")})})};this._oNavigationService.navigate(o,i,n.toJSONString(),undefined,C,undefined,m)}else{throw new Error("Semantic Object/action is not provided")}};const g=this.base.getView().getBindingContext();const u=g&&g.getModel().getMetaModel();if(this.getView().getViewData().converterType==="ObjectPage"&&u&&!s.isStickySessionSupported(u)){n.processDataLossOrDraftDiscardConfirmation(l.bind(this),Function.prototype,this.base.getView().getBindingContext(),this.base.getView().getController(),true,n.NavigationType.ForwardNavigation)}else{l()}};g.prepareContextForExternalNavigation=function t(e,o){const n={},i=o.getPath(),r=o.getModel().getMetaModel(),a=r.getMetaPath(i),s=a.split("/").filter(Boolean);function l(t,e){for(const o in t){if(t[o]===null||typeof t[o]!=="object"){if(!n[o]){n[o]=[]}n[o].push(e)}else{const n=t[o];l(n,`${e}/${o}`)}}}l(e,a);const p=s[0],c=r.getObject(`/${p}/@sapui.name`),g={};let u,f,d;for(const t in n){const i=n[t];let s;if(i.length>1){for(let n=0;n<=i.length-1;n++){const s=i[n];let l=s.replace(s===a?a:`${a}/`,"");l=(l===""?l:`${l}/`)+t;const p=r.getObject(`${s}/@sapui.name`);if(p===c){u=l}if(s===a){f=l}d=l;e[`${a}/${l}`.split("/").filter(function(t){return t!=""}).join(".")]=o.getProperty(l)}s=u||f||d;e[t]=o.getProperty(s);u=undefined;f=undefined;d=undefined}else{const n=i[0];let r=n.replace(n===a?a:`${a}/`,"");r=(r===""?r:`${r}/`)+t;e[t]=o.getProperty(r);g[t]=`${a}/${r}`.split("/").filter(function(t){return t!=""}).join(".")}}for(const t in e){if(e[t]!==null&&typeof e[t]==="object"){delete e[t]}}return{semanticAttributes:e,propertiesWithoutConflict:g}};g.prepareFiltersForExternalNavigation=function t(e,o,n){let i;const r={};const a={};let s,l,p,c,g;function u(t){let e;for(const n in t){let i=n;if(t[i]){if(i.includes("/")){e=i;const t=i.split("/");i=t[t.length-1]}else{e=o}if(!r[i]){r[i]=[]}r[i].push(e)}}}u(e);for(const t in r){const u=r[t];if(u.length>1){for(let r=0;r<=u.length-1;r++){i=u[r];if(i===o){p=`${o}/${t}`;g=t;s=t;if(n&&n.includes(t)){e[`$Parameter.${t}`]=e[t]}}else{g=i;p=`${o}/${i}`.replaceAll(/\*/g,"");l=i}e[p.split("/").filter(function(t){return t!=""}).join(".")]=e[g];delete e[i]}c=s||l;e[t]=e[c]}else{i=u[0];p=i===o?`${o}/${t}`:`${o}/${i}`.replaceAll("*","");a[t]=p.split("/").filter(function(t){return t!=""}).join(".");if(n&&n.includes(t)){e[`$Parameter.${t}`]=e[t]}}}return{filterConditions:e,filterConditionsWithoutConflict:a}};g.getNavigationMode=function t(){return undefined};g.navigateWithConfirmationDialog=async function t(e,o,n){var i;let r=true;if(n!==null&&n!==void 0&&n.notApplicableContexts&&((i=n.notApplicableContexts)===null||i===void 0?void 0:i.length)>=1){const t=this.base.getView().getModel().getMetaModel();const e=t.getMetaPath(n.notApplicableContexts[0].getPath());const o=J(t);const i=o.resolvePath(e).target;const a=new d({title:"",entityType:i.entityType,resourceModel:T(this.getView()),notApplicableContexts:n.notApplicableContexts});n.navigationContexts=n.applicableContexts;r=await a.open(this.getView())}if(r){this.navigate(e,o,n)}};g._removeTechnicalParameters=function t(e){e.removeSelectOption("@odata.context");e.removeSelectOption("@odata.metadataEtag");e.removeSelectOption("SAP__Messages")};g.getEntitySet=function t(){return this._oView.getViewData().entitySet};g.removeSensitiveData=function t(e,o){if(e){const{transAggregations:t,customAggregates:s}=this._getAggregates(o,this.base.getView(),this.base.getAppComponent().getDiagnostics());const l=Object.keys(e);if(l.length){delete e["@odata.context"];delete e["@odata.metadataEtag"];delete e["SAP__Messages"];for(const p of l){if(e[p]&&typeof e[p]==="object"){this.removeSensitiveData(e[p],`${o}/${p}`)}if(p.indexOf("@odata.type")>-1){delete e[p];continue}this._deleteAggregates([...t,...s],p,e);const l=this._getPropertyAnnotations(p,o,e,this._oMetaModel);if(l){var n,i,r,a;if((n=l.PersonalData)!==null&&n!==void 0&&n.IsPotentiallySensitive||(i=l.UI)!==null&&i!==void 0&&i.ExcludeFromNavigationContext||(r=l.Analytics)!==null&&r!==void 0&&r.Measure){delete e[p]}else if((a=l.Common)!==null&&a!==void 0&&a.FieldControl){const t=l.Common.FieldControl;if(t["$EnumMember"]&&t["$EnumMember"].split("/")[1]==="Inapplicable"||t["$Path"]&&this._isFieldControlPathInapplicable(t["$Path"],e)){delete e[p]}}}}}}return e};g._deleteAggregates=function t(e,o,n){if(e&&e.indexOf(o)>-1){delete n[o]}};g._getPropertyAnnotations=function t(e,o,n,r){if(n[e]&&o&&!o.includes("undefined")){var a;const t=r.createBindingContext(`${o}/${e}`);const n=i.getInvolvedDataModelObjects(t);return n===null||n===void 0?void 0:(a=n.targetObject)===null||a===void 0?void 0:a.annotations}return null};g._getAggregates=function t(e,o,n){const i=this._getConverterContext(e,o,n);const r=new R(i.getEntityType(),i);const a=r.isAnalyticsSupported();let s,l;if(a){var p,c;s=r.getTransAggregations();if((p=s)!==null&&p!==void 0&&p.length){s=s.map(t=>t.Name||t.Value)}l=r.getCustomAggregateDefinitions();if((c=l)!==null&&c!==void 0&&c.length){l=l.map(t=>t.qualifier)}}s=s?s:[];l=l?l:[];return{transAggregations:s,customAggregates:l}};g._getConverterContext=function t(e,n,i){const r=n.getViewData();let a=r.entitySet;const s=r.contextPath;if(s&&(!a||a.includes("/"))){a=r===null||r===void 0?void 0:r.fullContextPath.split("/")[1]}return o.getConverterContextForPath(e,n.getModel().getMetaModel(),a,i)};g._isFieldControlPathInapplicable=function t(e,o){let n=false;const i=e.split("/");if(i.length>1){n=o[i[0]]&&o[i[0]].hasOwnProperty(i[1])&&o[i[0]][i[1]]===0}else{n=o[e]===0}return n};g._applySemanticObjectMappings=function t(e,o){const n=typeof o==="string"?JSON.parse(o):o;for(let t=0;t<n.length;t++){const o=n[t]["LocalProperty"]&&n[t]["LocalProperty"]["$PropertyPath"]||n[t]["@com.sap.vocabularies.Common.v1.LocalProperty"]&&n[t]["@com.sap.vocabularies.Common.v1.LocalProperty"]["$Path"];const i=n[t]["SemanticObjectProperty"]||n[t]["@com.sap.vocabularies.Common.v1.SemanticObjectProperty"];const r=e.getSelectOption(o);if(r){e.removeSelectOption(o);e.massAddSelectOption(i,r)}}return e};g.navigateOutbound=function e(o,n){var i,r;let a;const s=this.base.getAppComponent().getManifestEntry("sap.app"),l=(i=s.crossNavigation)===null||i===void 0?void 0:(r=i.outbounds)===null||r===void 0?void 0:r[o];if(!l){t.error("Outbound is not defined in manifest!!");return}const p=l.semanticObject,c=l.action,g=l.parameters&&this.getOutboundParams(l.parameters);if(n){a=[];Object.keys(n).forEach(function(t){let e;if(Array.isArray(n[t])){const i=n[t];for(let n=0;n<i.length;n++){var o;e={};e[t]=i[n];(o=a)===null||o===void 0?void 0:o.push(e)}}else{var i;e={};e[t]=n[t];(i=a)===null||i===void 0?void 0:i.push(e)}})}if(a||g){n={navigationContexts:{data:a||g}}}this.base._intentBasedNavigation.navigate(p,c,n)};g._applyOutboundParams=function t(e,o){const n=Object.keys(o);const i=e.getSelectOptionsPropertyNames();n.forEach(function(t){if(!i.includes(t)){e.addSelectOption(t,"I","EQ",o[t])}});return e};g.getOutboundParams=function t(e){const o={};if(e){const t=Object.keys(e)||[];if(t.length>0){t.forEach(function(t){const n=e[t];if(n.value&&n.value.value&&n.value.format==="plain"){if(!o[t]){o[t]=n.value.value}}})}}return o};g.onChevronPressNavigateOutBound=function t(e,o,n,i){const r=e.getAppComponent().getRoutingService().getOutbounds();const a=r[o];let l;if(a&&a.semanticObject&&a.action){const t={intents:{}};const o={};let r;if(n){if(n.isA&&n.isA("sap.ui.model.odata.v4.Context")){r=s.getMetaPathForContext(n);n=[n]}else{r=s.getMetaPathForContext(n[0])}o[r]="self";t["_feDefault"]=o}if(i){const e=`${a.semanticObject}-${a.action}`;t.intents[e]={};t.intents[e][i]="self"}if(a&&a.parameters){const t=a.parameters&&this.getOutboundParams(a.parameters);if(Object.keys(t).length>0){l=t}}e._intentBasedNavigation.navigate(a.semanticObject,a.action,{navigationContexts:n,refreshStrategies:t,additionalNavigationParameters:l});return Promise.resolve()}else{throw new Error(`outbound target ${o} not found in cross navigation definition of manifest`)}};return l}(g),K(B.prototype,"onInit",[h],Object.getOwnPropertyDescriptor(B.prototype,"onInit"),B.prototype),K(B.prototype,"navigate",[y,m],Object.getOwnPropertyDescriptor(B.prototype,"navigate"),B.prototype),K(B.prototype,"prepareContextForExternalNavigation",[b,O],Object.getOwnPropertyDescriptor(B.prototype,"prepareContextForExternalNavigation"),B.prototype),K(B.prototype,"prepareFiltersForExternalNavigation",[C,P],Object.getOwnPropertyDescriptor(B.prototype,"prepareFiltersForExternalNavigation"),B.prototype),K(B.prototype,"getNavigationMode",[A,x],Object.getOwnPropertyDescriptor(B.prototype,"getNavigationMode"),B.prototype),K(B.prototype,"navigateWithConfirmationDialog",[S,M],Object.getOwnPropertyDescriptor(B.prototype,"navigateWithConfirmationDialog"),B.prototype),K(B.prototype,"getEntitySet",[_],Object.getOwnPropertyDescriptor(B.prototype,"getEntitySet"),B.prototype),K(B.prototype,"removeSensitiveData",[j,w],Object.getOwnPropertyDescriptor(B.prototype,"removeSensitiveData"),B.prototype),K(B.prototype,"navigateOutbound",[N,E],Object.getOwnPropertyDescriptor(B.prototype,"navigateOutbound"),B.prototype),K(B.prototype,"getOutboundParams",[$,D],Object.getOwnPropertyDescriptor(B.prototype,"getOutboundParams"),B.prototype),K(B.prototype,"onChevronPressNavigateOutBound",[F,V],Object.getOwnPropertyDescriptor(B.prototype,"onChevronPressNavigateOutBound"),B.prototype),B))||I);return Q},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/InternalRouting-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/controllerextensions/collaboration/ActivitySync", "sap/fe/core/controllerextensions/editFlow/draft", "sap/fe/core/controllerextensions/routing/NavigationReason", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/EditState", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/SemanticKeyHelper", "sap/ui/core/Component", "sap/ui/core/Core", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "sap/ui/model/Filter", "sap/ui/model/FilterOperator"], function (Log, CommonUtils, BusyLocker, ActivitySync, draft, NavigationReason, ClassSupport, EditState, ModelHelper, SemanticKeyHelper, Component, Core, ControllerExtension, OverrideExecution, Filter, FilterOperator) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * {@link sap.ui.core.mvc.ControllerExtension Controller extension}
   *
   * @namespace
   * @alias sap.fe.core.controllerextensions.InternalRouting
   * @private
   * @since 1.74.0
   */
  let InternalRouting = (_dec = defineUI5Class("sap.fe.core.controllerextensions.InternalRouting"), _dec2 = methodOverride(), _dec3 = methodOverride(), _dec4 = publicExtension(), _dec5 = extensible(OverrideExecution.After), _dec6 = publicExtension(), _dec7 = extensible(OverrideExecution.After), _dec8 = publicExtension(), _dec9 = extensible(OverrideExecution.After), _dec10 = publicExtension(), _dec11 = extensible(OverrideExecution.After), _dec12 = publicExtension(), _dec13 = publicExtension(), _dec14 = publicExtension(), _dec15 = finalExtension(), _dec16 = publicExtension(), _dec17 = finalExtension(), _dec18 = publicExtension(), _dec19 = finalExtension(), _dec20 = publicExtension(), _dec21 = finalExtension(), _dec22 = publicExtension(), _dec23 = finalExtension(), _dec24 = publicExtension(), _dec25 = finalExtension(), _dec26 = publicExtension(), _dec27 = publicExtension(), _dec28 = finalExtension(), _dec29 = publicExtension(), _dec30 = extensible(OverrideExecution.Before), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(InternalRouting, _ControllerExtension);
    function InternalRouting() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = InternalRouting.prototype;
    _proto.onExit = function onExit() {
      if (this._oRoutingService) {
        this._oRoutingService.detachRouteMatched(this._fnRouteMatchedBound);
      }
    };
    _proto.onInit = function onInit() {
      this._oView = this.base.getView();
      this._oAppComponent = CommonUtils.getAppComponent(this._oView);
      this._oPageComponent = Component.getOwnerComponentFor(this._oView);
      this._oRouter = this._oAppComponent.getRouter();
      this._oRouterProxy = this._oAppComponent.getRouterProxy();
      if (!this._oAppComponent || !this._oPageComponent) {
        throw new Error("Failed to initialize controler extension 'sap.fe.core.controllerextesions.InternalRouting");
      }

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      if (this._oAppComponent === this._oPageComponent) {
        // The view isn't hosted in a dedicated UIComponent, but directly in the app
        // --> just keep the view
        this._oPageComponent = null;
      }
      this._oAppComponent.getService("routingService").then(oRoutingService => {
        this._oRoutingService = oRoutingService;
        this._fnRouteMatchedBound = this._onRouteMatched.bind(this);
        this._oRoutingService.attachRouteMatched(this._fnRouteMatchedBound);
        this._oTargetInformation = oRoutingService.getTargetInformationFor(this._oPageComponent || this._oView);
      }).catch(function () {
        throw new Error("This controller extension cannot work without a 'routingService' on the main AppComponent");
      });
    }

    /**
     * Triggered every time this controller is a navigation target.
     */;
    _proto.onRouteMatched = function onRouteMatched() {
      /**/
    };
    _proto.onRouteMatchedFinished = function onRouteMatchedFinished() {
      /**/
    };
    _proto.onBeforeBinding = function onBeforeBinding(oBindingContext, mParameters) {
      const oRouting = this.base.getView().getController().routing;
      if (oRouting && oRouting.onBeforeBinding) {
        oRouting.onBeforeBinding(oBindingContext, mParameters);
      }
    };
    _proto.onAfterBinding = function onAfterBinding(oBindingContext, mParameters) {
      this._oAppComponent.getRootViewController().onContextBoundToView(oBindingContext);
      const oRouting = this.base.getView().getController().routing;
      if (oRouting && oRouting.onAfterBinding) {
        oRouting.onAfterBinding(oBindingContext, mParameters);
      }
    }

    ///////////////////////////////////////////////////////////
    // Methods triggering a navigation after a user action
    // (e.g. click on a table row, button, etc...)
    ///////////////////////////////////////////////////////////

    /**
     * Navigates to the specified navigation target.
     *
     * @param oContext Context instance
     * @param sNavigationTargetName Name of the navigation target
     * @param bPreserveHistory True to force the new URL to be added at the end of the browser history (no replace)
     * @ui5-restricted
     */;
    _proto.navigateToTarget = function navigateToTarget(oContext, sNavigationTargetName, bPreserveHistory) {
      const oNavigationConfiguration = this._oPageComponent && this._oPageComponent.getNavigationConfiguration && this._oPageComponent.getNavigationConfiguration(sNavigationTargetName);
      if (oNavigationConfiguration) {
        const oDetailRoute = oNavigationConfiguration.detail;
        const sRouteName = oDetailRoute.route;
        const mParameterMapping = oDetailRoute.parameters;
        this._oRoutingService.navigateTo(oContext, sRouteName, mParameterMapping, bPreserveHistory);
      } else {
        this._oRoutingService.navigateTo(oContext, null, null, bPreserveHistory);
      }
      this._oView.getViewData();
    }

    /**
     * Navigates to the specified navigation target route.
     *
     * @param sTargetRouteName Name of the target route
     * @param [oParameters] Parameters to be used with route to create the target hash
     * @returns Promise that is resolved when the navigation is finalized
     * @ui5-restricted
     */;
    _proto.navigateToRoute = function navigateToRoute(sTargetRouteName, oParameters) {
      return this._oRoutingService.navigateToRoute(sTargetRouteName, oParameters);
    }

    /**
     * Navigates to a specific context.
     *
     * @param oContext The context to be navigated to
     * @param [mParameters] Optional navigation parameters
     * @returns Promise resolved when the navigation has been triggered
     * @ui5-restricted
     */;
    _proto.navigateToContext = function navigateToContext(oContext, mParameters) {
      const oContextInfo = {};
      mParameters = mParameters || {};
      if (oContext.isA("sap.ui.model.odata.v4.ODataListBinding")) {
        if (mParameters.asyncContext) {
          // the context is either created async (Promise)
          // We need to activate the routeMatchSynchro on the RouterProxy to avoid that
          // the subsequent call to navigateToContext conflicts with the current one
          this._oRouterProxy.activateRouteMatchSynchronization();
          mParameters.asyncContext.then(asyncContext => {
            // once the context is returned we navigate into it
            this.navigateToContext(asyncContext, {
              checkNoHashChange: mParameters.checkNoHashChange,
              editable: mParameters.editable,
              bPersistOPScroll: mParameters.bPersistOPScroll,
              updateFCLLevel: mParameters.updateFCLLevel,
              bForceFocus: mParameters.bForceFocus
            });
          }).catch(function (oError) {
            Log.error("Error with the async context", oError);
          });
        } else if (!mParameters.bDeferredContext) {
          // Navigate to a list binding not yet supported
          throw "navigation to a list binding is not yet supported";
        }
      }
      if (mParameters.callExtension) {
        const oInternalModel = this._oView.getModel("internal");
        oInternalModel.setProperty("/paginatorCurrentContext", null);
        oContextInfo.sourceBindingContext = oContext.getObject();
        oContextInfo.bindingContext = oContext;
        if (mParameters.oEvent) {
          oContextInfo.oEvent = mParameters.oEvent;
        }
        // Storing the selected context to use it in internal route navigation if neccessary.
        const bOverrideNav = this.base.getView().getController().routing.onBeforeNavigation(oContextInfo);
        if (bOverrideNav) {
          oInternalModel.setProperty("/paginatorCurrentContext", oContext);
          return Promise.resolve(true);
        }
      }
      mParameters.FCLLevel = this._getFCLLevel();
      return this._oRoutingService.navigateToContext(oContext, mParameters, this._oView.getViewData(), this._oTargetInformation);
    }

    /**
     * Navigates backwards from a context.
     *
     * @param oContext Context to be navigated from
     * @param [mParameters] Optional navigation parameters
     * @returns Promise resolved when the navigation has been triggered
     * @ui5-restricted
     */;
    _proto.navigateBackFromContext = function navigateBackFromContext(oContext, mParameters) {
      mParameters = mParameters || {};
      mParameters.updateFCLLevel = -1;
      return this.navigateToContext(oContext, mParameters);
    }

    /**
     * Navigates forwards to a context.
     *
     * @param oContext Context to be navigated to
     * @param mParameters Optional navigation parameters
     * @returns Promise resolved when the navigation has been triggered
     * @ui5-restricted
     */;
    _proto.navigateForwardToContext = function navigateForwardToContext(oContext, mParameters) {
      var _this$_oView$getBindi;
      if (((_this$_oView$getBindi = this._oView.getBindingContext("internal")) === null || _this$_oView$getBindi === void 0 ? void 0 : _this$_oView$getBindi.getProperty("messageFooterContainsErrors")) === true) {
        return Promise.resolve(true);
      }
      mParameters = mParameters || {};
      mParameters.updateFCLLevel = 1;
      return this.navigateToContext(oContext, mParameters);
    }

    /**
     * Navigates back in history if the current hash corresponds to a transient state.
     */;
    _proto.navigateBackFromTransientState = function navigateBackFromTransientState() {
      const sHash = this._oRouterProxy.getHash();

      // if triggered while navigating to (...), we need to navigate back
      if (sHash.indexOf("(...)") !== -1) {
        this._oRouterProxy.navBack();
      }
    };
    _proto.navigateToMessagePage = function navigateToMessagePage(sErrorMessage, mParameters) {
      mParameters = mParameters || {};
      if (this._oRouterProxy.getHash().indexOf("i-action=create") > -1 || this._oRouterProxy.getHash().indexOf("i-action=autoCreate") > -1) {
        return this._oRouterProxy.navToHash(this._oRoutingService.getDefaultCreateHash());
      } else {
        mParameters.FCLLevel = this._getFCLLevel();
        return this._oAppComponent.getRootViewController().displayErrorPage(sErrorMessage, mParameters);
      }
    }

    /**
     * Checks if one of the current views on the screen is bound to a given context.
     *
     * @param oContext
     * @returns `true` if the state is impacted by the context
     * @ui5-restricted
     */;
    _proto.isCurrentStateImpactedBy = function isCurrentStateImpactedBy(oContext) {
      return this._oRoutingService.isCurrentStateImpactedBy(oContext);
    };
    _proto._isViewPartOfRoute = function _isViewPartOfRoute(routeInformation) {
      const aTargets = routeInformation === null || routeInformation === void 0 ? void 0 : routeInformation.targets;
      if (!aTargets || aTargets.indexOf(this._oTargetInformation.targetName) === -1) {
        // If the target for this view has a view level greater than the route level, it means this view comes "after" the route
        // in terms of navigation.
        // In such case, we remove its binding context, to avoid this view to have data if we navigate to it later on
        if ((this._oTargetInformation.viewLevel ?? 0) >= ((routeInformation === null || routeInformation === void 0 ? void 0 : routeInformation.routeLevel) ?? 0)) {
          this._setBindingContext(null); // This also call setKeepAlive(false) on the current context
        }

        return false;
      }
      return true;
    };
    _proto._buildBindingPath = function _buildBindingPath(routeArguments, bindingPattern, navigationParameters) {
      let path = bindingPattern.replace(":?query:", "");
      let deferred = false;
      for (const sKey in routeArguments) {
        const sValue = routeArguments[sKey];
        if (typeof sValue !== "string") {
          continue;
        }
        if (sValue === "..." && bindingPattern.indexOf(`{${sKey}}`) >= 0) {
          deferred = true;
          // Sometimes in preferredMode = create, the edit button is shown in background when the
          // action parameter dialog shows up, setting bTargetEditable passes editable as true
          // to onBeforeBinding in _bindTargetPage function
          navigationParameters.bTargetEditable = true;
        }
        path = path.replace(`{${sKey}}`, sValue);
      }
      if (routeArguments["?query"] && routeArguments["?query"].hasOwnProperty("i-action")) {
        navigationParameters.bActionCreate = true;
      }

      // the binding path is always absolute
      if (path && path[0] !== "/") {
        path = `/${path}`;
      }
      return {
        path,
        deferred
      };
    }

    ///////////////////////////////////////////////////////////
    // Methods to bind the page when a route is matched
    ///////////////////////////////////////////////////////////

    /**
     * Called when a route is matched.
     * Builds the binding context from the navigation parameters, and bind the page accordingly.
     *
     * @param oEvent
     * @ui5-restricted
     */;
    _proto._onRouteMatched = function _onRouteMatched(oEvent) {
      // Check if the target for this view is part of the event targets (i.e. is a target for the current route).
      // If not, we don't need to bind it --> return
      if (!this._isViewPartOfRoute(oEvent.getParameter("routeInformation"))) {
        return;
      }

      // Retrieve the binding context pattern
      let bindingPattern;
      if (this._oPageComponent && this._oPageComponent.getBindingContextPattern) {
        bindingPattern = this._oPageComponent.getBindingContextPattern();
      }
      bindingPattern = bindingPattern || this._oTargetInformation.contextPattern;
      if (bindingPattern === null || bindingPattern === undefined) {
        // Don't do this if we already got sTarget == '', which is a valid target pattern
        bindingPattern = oEvent.getParameter("routePattern");
      }

      // Replace the parameters by their values in the binding context pattern
      const mArguments = oEvent.getParameters().arguments;
      const oNavigationParameters = oEvent.getParameter("navigationInfo");
      const {
        path,
        deferred
      } = this._buildBindingPath(mArguments, bindingPattern, oNavigationParameters);
      this.onRouteMatched();
      const oModel = this._oView.getModel();
      let oOut;
      if (deferred) {
        oOut = this._bindDeferred(path, oNavigationParameters);
      } else {
        oOut = this._bindPage(path, oModel, oNavigationParameters);
      }
      // eslint-disable-next-line promise/catch-or-return
      oOut.finally(() => {
        this.onRouteMatchedFinished();
      });
      this._oAppComponent.getRootViewController().updateUIStateForView(this._oView, this._getFCLLevel());
    }

    /**
     * Deferred binding (during object creation).
     *
     * @param sTargetPath The path to the deffered context
     * @param oNavigationParameters Navigation parameters
     * @returns A Promise
     * @ui5-restricted
     */;
    _proto._bindDeferred = async function _bindDeferred(sTargetPath, oNavigationParameters) {
      this.onBeforeBinding(null, {
        editable: oNavigationParameters.bTargetEditable
      });
      if (oNavigationParameters.bDeferredContext || !oNavigationParameters.oAsyncContext) {
        // either the context shall be created in the target page (deferred Context) or it shall
        // be created async but the user refreshed the page / bookmarked this URL
        // TODO: currently the target component creates this document but we shall move this to
        // a central place
        if (this._oPageComponent && this._oPageComponent.createDeferredContext) {
          this._oPageComponent.createDeferredContext(sTargetPath, oNavigationParameters.listBindingForCreate, !!oNavigationParameters.bActionCreate);
        }
      }
      const currentBindingContext = this._getBindingContext();
      if (currentBindingContext !== null && currentBindingContext !== void 0 && currentBindingContext.hasPendingChanges()) {
        // For now remove the pending changes to avoid the model raises errors and the object page is at least bound
        // Ideally the user should be asked for
        currentBindingContext.getBinding().resetChanges();
      }

      // remove the context to avoid showing old data
      this._setBindingContext(null);
      this.onAfterBinding(null);
      return Promise.resolve();
    }

    /**
     * Sets the binding context of the page from a path.
     *
     * @param targetPath The path to the context
     * @param model The OData model
     * @param navigationParameters Navigation parameters
     * @returns A Promise resolved once the binding has been set on the page
     * @ui5-restricted
     */;
    _proto._bindPage = function _bindPage(targetPath, model, navigationParameters) {
      if (targetPath === "") {
        return Promise.resolve(this._bindPageToContext(null, model, navigationParameters));
      }
      return this.resolvePath(targetPath, model, navigationParameters).then(technicalPath => {
        this._bindPageToPath(technicalPath, model, navigationParameters);
      }).catch(error => {
        // Error handling for erroneous metadata request
        const resourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
        this.navigateToMessagePage(resourceBundle.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR"), {
          title: resourceBundle.getText("C_COMMON_SAPFE_ERROR"),
          description: error.message
        });
      });
    }

    /**
     * Creates the filter to retrieve a context corresponding to a semantic path.
     *
     * @param semanticPath The semantic or technical path
     * @param semanticKeys The semantic or technical keys for the path
     * @param metaModel The instance of the metamodel
     * @returns The filter
     * @ui5-restricted
     */;
    _proto.createFilterFromPath = function createFilterFromPath(semanticPath, semanticKeys, metaModel) {
      const unquoteAndDecode = function (value) {
        if (value.indexOf("'") === 0 && value.lastIndexOf("'") === value.length - 1) {
          // Remove the quotes from the value and decode special chars
          value = decodeURIComponent(value.substring(1, value.length - 1));
        }
        return value;
      };
      const keyValues = semanticPath.substring(semanticPath.indexOf("(") + 1, semanticPath.length - 1).split(",");
      let finalKeys = semanticKeys;
      let finalKeyValues = keyValues;
      // If we have technical keys, IsActiveEntity will be present. We need to remove it as we're already adding them at the end.
      if (semanticKeys.includes("IsActiveEntity")) {
        finalKeys = semanticKeys.filter(singleKey => singleKey.indexOf("IsActiveEntity") < 0);
        finalKeyValues = keyValues.filter(element => !element.startsWith("IsActiveEntity"));
      }
      if (finalKeys.length != finalKeyValues.length) {
        return null;
      }
      const filteringCaseSensitive = ModelHelper.isFilteringCaseSensitive(metaModel);
      let filters;
      if (finalKeys.length === 1) {
        // If this is a technical key, the equal is present because there's at least 2 parameters, a technical key and IsActiveEntity
        if (finalKeyValues[0].indexOf("=") > 0) {
          const keyPart = finalKeyValues[0].split("=");
          finalKeyValues[0] = keyPart[1];
        }
        // Take the first key value
        const keyValue = unquoteAndDecode(finalKeyValues[0]);
        filters = [new Filter({
          path: finalKeys[0],
          operator: FilterOperator.EQ,
          value1: keyValue,
          caseSensitive: filteringCaseSensitive
        })];
      } else {
        const mKeyValues = {};
        // Create a map of all key values
        finalKeyValues.forEach(function (sKeyAssignment) {
          const aParts = sKeyAssignment.split("="),
            keyValue = unquoteAndDecode(aParts[1]);
          mKeyValues[aParts[0]] = keyValue;
        });
        let failed = false;
        filters = finalKeys.map(function (semanticKey) {
          const key = semanticKey,
            value = mKeyValues[key];
          if (value !== undefined) {
            return new Filter({
              path: key,
              operator: FilterOperator.EQ,
              value1: value,
              caseSensitive: filteringCaseSensitive
            });
          } else {
            failed = true;
            return new Filter({
              path: "XX"
            }); // will be ignored anyway since we return after
          }
        });

        if (failed) {
          return null;
        }
      }

      // Add a draft filter to make sure we take the draft entity if there is one
      // Or the active entity otherwise
      const draftFilter = new Filter({
        filters: [new Filter("IsActiveEntity", "EQ", false), new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
        and: false
      });
      filters.push(draftFilter);
      return new Filter(filters, true);
    }

    /**
     * Converts a path with semantic keys to a path with technical keys.
     *
     * @param pathWithParameters The path with semantic keys
     * @param model The model for the path
     * @param keys The semantic or technical keys for the path
     * @returns A Promise containing the path with technical keys if pathWithParameters could be interpreted as a technical path, null otherwise
     * @ui5-restricted
     * @private
     */;
    _proto.getTechnicalPathFromPath = async function getTechnicalPathFromPath(pathWithParameters, model, keys) {
      var _entitySetPath;
      const metaModel = model.getMetaModel();
      let entitySetPath = metaModel.getMetaContext(pathWithParameters).getPath();
      if (!keys || keys.length === 0) {
        // No semantic/technical keys
        return null;
      }

      // Create a set of filters corresponding to all keys
      const filter = this.createFilterFromPath(pathWithParameters, keys, metaModel);
      if (filter === null) {
        // Couldn't interpret the path as a semantic one
        return null;
      }

      // Load the corresponding object
      if (!((_entitySetPath = entitySetPath) !== null && _entitySetPath !== void 0 && _entitySetPath.startsWith("/"))) {
        entitySetPath = `/${entitySetPath}`;
      }
      const listBinding = model.bindList(entitySetPath, undefined, undefined, filter, {
        $$groupId: "$auto.Heroes"
      });
      const contexts = await listBinding.requestContexts(0, 2);
      if (contexts.length) {
        return contexts[0].getPath();
      } else {
        // No data could be loaded
        return null;
      }
    }

    /**
     * Refreshes a context.
     *
     * @param model The OData model
     * @param pathToReplaceWith The path to the new context
     * @param contextToRemove The initial context that is going to be replaced
     * @private
     */;
    _proto.refreshContext = async function refreshContext(model, pathToReplaceWith, contextToRemove) {
      const rootViewController = this._oAppComponent.getRootViewController();
      if (rootViewController.isFclEnabled()) {
        const contextToReplaceWith = model.getKeepAliveContext(pathToReplaceWith);
        contextToRemove.replaceWith(contextToReplaceWith);
      } else {
        EditState.setEditStateDirty();
      }
    }

    /**
     * Checks if a path is a root draft.
     *
     * @param path The path to test
     * @param metaModel The associated metadata model
     * @returns `true` if the path is a root path
     * @ui5-restricted
     * @private
     */;
    _proto.checkDraftAvailability = function checkDraftAvailability(path, metaModel) {
      const matches = /^[/]?(\w+)\([^/]+\)$/.exec(path);
      if (!matches) {
        return false;
      }
      // Get the entitySet name
      const entitySetPath = `/${matches[1]}`;
      // Check the entity set supports draft
      const draftRoot = metaModel.getObject(`${entitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot`);
      return draftRoot ? true : false;
    }

    /**
     * Builds a path to navigate to from a path with SemanticKeys or technical keys.
     *
     * @param pathToResolve The path to be transformed
     * @param model The OData model
     * @param navigationParameter The parameter of the navigation
     * @returns String promise for the new path. If pathToResolve couldn't be interpreted as a semantic path, it is returned as is.
     * @ui5-restricted
     * @private
     */;
    _proto.resolvePath = async function resolvePath(pathToResolve, model, navigationParameter) {
      var _currentHashNoParams, _currentHashNoParams2, _currentHashNoParams3;
      const metaModel = model.getMetaModel();
      const lastSemanticMapping = this._oRoutingService.getLastSemanticMapping();
      let currentHashNoParams = this._oRouter.getHashChanger().getHash().split("?")[0];
      if (((_currentHashNoParams = currentHashNoParams) === null || _currentHashNoParams === void 0 ? void 0 : _currentHashNoParams.lastIndexOf("/")) === ((_currentHashNoParams2 = currentHashNoParams) === null || _currentHashNoParams2 === void 0 ? void 0 : _currentHashNoParams2.length) - 1) {
        // Remove trailing '/'
        currentHashNoParams = currentHashNoParams.substring(0, currentHashNoParams.length - 1);
      }
      let rootEntityName = (_currentHashNoParams3 = currentHashNoParams) === null || _currentHashNoParams3 === void 0 ? void 0 : _currentHashNoParams3.substr(0, currentHashNoParams.indexOf("("));
      if (rootEntityName.indexOf("/") === 0) {
        rootEntityName = rootEntityName.substring(1);
      }
      const isRootDraft = this.checkDraftAvailability(currentHashNoParams, metaModel),
        semanticKeys = isRootDraft ? SemanticKeyHelper.getSemanticKeys(metaModel, rootEntityName) : undefined,
        isCollaborationEnabled = ModelHelper.isCollaborationDraftSupported(metaModel);

      /**
       * If the entity is draft enabled, and we're in a collaboration application, and we're navigating to a draft, we're treating it as a new path.
       * We want to check if the draft exists first, then we navigate on it if it does exist, otherwise we navigate to the saved version.
       */
      if (isRootDraft && isCollaborationEnabled) {
        var _navigationParameter$;
        const isActiveEntity = (navigationParameter === null || navigationParameter === void 0 ? void 0 : (_navigationParameter$ = navigationParameter.useContext) === null || _navigationParameter$ === void 0 ? void 0 : _navigationParameter$.getProperty("IsActiveEntity")) ?? true;
        if (!isActiveEntity) {
          return this.resolveCollaborationPath(pathToResolve, model, navigationParameter, semanticKeys, rootEntityName);
        }
      }
      /**
       * This is the 'normal' process.
       * If we don't have semantic keys, the path we have is technical and can be used as is.
       * If the path to resolve is the same as the semantic path, then we know is has been resolved previously and we can return the technical path
       * Otherwise, we need to evaluate the technical path, to set up the semantic mapping (if it's been resolved).
       */
      if (semanticKeys === undefined) {
        return pathToResolve;
      }
      if ((lastSemanticMapping === null || lastSemanticMapping === void 0 ? void 0 : lastSemanticMapping.semanticPath) === pathToResolve) {
        // This semantic path has been resolved previously
        return lastSemanticMapping.technicalPath;
      }
      const formattedSemanticKeys = semanticKeys.map(singleKey => singleKey.$PropertyPath);

      // We need resolve the semantic path to get the technical keys
      const technicalPath = await this.getTechnicalPathFromPath(currentHashNoParams, model, formattedSemanticKeys);
      if (technicalPath && technicalPath !== pathToResolve) {
        // The semantic path was resolved (otherwise keep the original value for target)
        this._oRoutingService.setLastSemanticMapping({
          technicalPath: technicalPath,
          semanticPath: pathToResolve
        });
        return technicalPath;
      }
      return pathToResolve;
    }

    /**
     * Evaluate the path to navigate when we're in a collaboration application and navigating to a draft.
     * If the draft has been discarded, we change the path to the sibling element associated, otherwise we keep the same path.
     * We're not doing it outside of collaboration as it's adding a request during navigation!
     *
     * @param pathToResolve The path we're checking. If the draft exists, we return it as is, otherwise we return the sibling element associated
     * @param model The oData model
     * @param navigationParameter The parameter of the navigation
     * @param semanticKeys The semantic keys if we have semantic navigation, otherwise false
     * @param rootEntityName Name of the root entity
     * @returns The path to navigate to
     * @private
     */;
    _proto.resolveCollaborationPath = async function resolveCollaborationPath(pathToResolve, model, navigationParameter, semanticKeys, rootEntityName) {
      const lastSemanticMapping = this._oRoutingService.getLastSemanticMapping();
      const metaModel = model.getMetaModel();
      const currentHashNoParams = this._oRouter.getHashChanger().getHash().split("?")[0];
      let formattedKeys;
      const comparativePath = (lastSemanticMapping === null || lastSemanticMapping === void 0 ? void 0 : lastSemanticMapping.technicalPath) ?? pathToResolve;
      if (semanticKeys) {
        formattedKeys = semanticKeys.map(singleKey => singleKey.$PropertyPath);
      } else {
        formattedKeys = metaModel.getObject(`/${rootEntityName}/$Type/$Key`);
      }
      const technicalPath = await this.getTechnicalPathFromPath(currentHashNoParams, model, formattedKeys);
      if (technicalPath === null) {
        return pathToResolve;
      }
      // Comparing path that was returned from the server with the one we have. If they are different, it means the draft doesn't exist.
      if (technicalPath !== comparativePath && navigationParameter.useContext) {
        var _metaModel$getObject;
        if (lastSemanticMapping) {
          this._oRoutingService.setLastSemanticMapping({
            technicalPath: technicalPath,
            semanticPath: pathToResolve
          });
        }
        navigationParameter.redirectedToNonDraft = ((_metaModel$getObject = metaModel.getObject(`/${rootEntityName}/@com.sap.vocabularies.UI.v1.HeaderInfo`)) === null || _metaModel$getObject === void 0 ? void 0 : _metaModel$getObject.TypeName) ?? rootEntityName;
        await this.refreshContext(model, technicalPath, navigationParameter.useContext);
      }
      return technicalPath;
    }

    /**
     * Sets the binding context of the page from a path.
     *
     * @param sTargetPath The path to build the context. Needs to contain technical keys only.
     * @param oModel The OData model
     * @param oNavigationParameters Navigation parameters
     * @ui5-restricted
     */;
    _proto._bindPageToPath = function _bindPageToPath(sTargetPath, oModel, oNavigationParameters) {
      const oCurrentContext = this._getBindingContext(),
        sCurrentPath = oCurrentContext && oCurrentContext.getPath(),
        oUseContext = oNavigationParameters.useContext;

      // We set the binding context only if it's different from the current one
      // or if we have a context already selected
      if (oUseContext && oUseContext.getPath() === sTargetPath) {
        if (oUseContext !== oCurrentContext) {
          let shouldRefreshContext = false;
          // We already have the context to be used, and it's not the current one
          const oRootViewController = this._oAppComponent.getRootViewController();

          // In case of FCL, if we're reusing a context from a table (through navigation), we refresh it to avoid outdated data
          // We don't wait for the refresh to be completed (requestRefresh), so that the corresponding query goes into the same
          // batch as the ones from controls in the page.
          if (oRootViewController.isFclEnabled() && oNavigationParameters.reason === NavigationReason.RowPress) {
            const metaModel = oUseContext.getModel().getMetaModel();
            if (!oUseContext.getBinding().hasPendingChanges()) {
              shouldRefreshContext = true;
            } else if (ActivitySync.isConnected(this.getView()) || ModelHelper.isDraftSupported(metaModel, oUseContext.getPath()) && ModelHelper.isCollaborationDraftSupported(metaModel)) {
              // If there are pending changes but we're in collaboration draft, we force the refresh (discarding pending changes) as we need to have the latest version.
              // When navigating from LR to OP, the view is not connected yet --> check if we're in draft with collaboration from the metamodel
              oUseContext.getBinding().resetChanges();
              shouldRefreshContext = true;
            }
          }
          this._bindPageToContext(oUseContext, oModel, oNavigationParameters);
          if (shouldRefreshContext) {
            oUseContext.refresh();
          }
        }
      } else if (sCurrentPath !== sTargetPath) {
        // We need to create a new context for its path
        this._bindPageToContext(this._createContext(sTargetPath, oModel), oModel, oNavigationParameters);
      } else if (oNavigationParameters.reason !== NavigationReason.AppStateChanged && EditState.isEditStateDirty()) {
        this._refreshBindingContext(oCurrentContext);
      }
    }

    /**
     * Binds the page to a context.
     *
     * @param oContext Context to be bound
     * @param oModel The OData model
     * @param oNavigationParameters Navigation parameters
     * @ui5-restricted
     */;
    _proto._bindPageToContext = function _bindPageToContext(oContext, oModel, oNavigationParameters) {
      if (!oContext) {
        this.onBeforeBinding(null);
        this.onAfterBinding(null);
        return;
      }
      const oParentListBinding = oContext.getBinding();
      const oRootViewController = this._oAppComponent.getRootViewController();
      if (oRootViewController.isFclEnabled()) {
        if (!oParentListBinding || !oParentListBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
          // if the parentBinding is not a listBinding, we create a new context
          oContext = this._createContext(oContext.getPath(), oModel);
        }
        try {
          this._setKeepAlive(oContext, true, () => {
            if (oRootViewController.isContextUsedInPages(oContext)) {
              this.navigateBackFromContext(oContext);
            }
          }, true // Load messages, otherwise they don't get refreshed later, e.g. for side effects
          );
        } catch (oError) {
          // setKeepAlive throws an exception if the parent listbinding doesn't have $$ownRequest=true
          // This case for custom fragments is supported, but an error is logged to make the lack of synchronization apparent
          Log.error(`View for ${oContext.getPath()} won't be synchronized. Parent listBinding must have binding parameter $$ownRequest=true`);
        }
      } else if (!oParentListBinding || oParentListBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
        // We need to recreate the context otherwise we get errors
        oContext = this._createContext(oContext.getPath(), oModel);
      }

      // Set the binding context with the proper before/after callbacks
      this.onBeforeBinding(oContext, {
        editable: oNavigationParameters.bTargetEditable,
        listBinding: oParentListBinding,
        bPersistOPScroll: oNavigationParameters.bPersistOPScroll,
        bDraftNavigation: oNavigationParameters.bDraftNavigation,
        showPlaceholder: oNavigationParameters.bShowPlaceholder
      });
      this._setBindingContext(oContext);
      this.onAfterBinding(oContext, {
        redirectedToNonDraft: oNavigationParameters === null || oNavigationParameters === void 0 ? void 0 : oNavigationParameters.redirectedToNonDraft
      });
    }

    /**
     * Creates a context from a path.
     *
     * @param sPath The path
     * @param oModel The OData model
     * @returns The created context
     * @ui5-restricted
     */;
    _proto._createContext = function _createContext(sPath, oModel) {
      const oPageComponent = this._oPageComponent,
        sEntitySet = oPageComponent && oPageComponent.getEntitySet && oPageComponent.getEntitySet(),
        sContextPath = oPageComponent && oPageComponent.getContextPath && oPageComponent.getContextPath() || sEntitySet && `/${sEntitySet}`,
        oMetaModel = oModel.getMetaModel(),
        mParameters = {
          $$groupId: "$auto.Heroes",
          $$updateGroupId: "$auto",
          $$patchWithoutSideEffects: true
        };
      // In case of draft: $select the state flags (HasActiveEntity, HasDraftEntity, and IsActiveEntity)
      const oDraftRoot = oMetaModel.getObject(`${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot`);
      const oDraftNode = oMetaModel.getObject(`${sContextPath}@com.sap.vocabularies.Common.v1.DraftNode`);
      const oRootViewController = this._oAppComponent.getRootViewController();
      if (oRootViewController.isFclEnabled()) {
        const oContext = this._getKeepAliveContext(oModel, sPath, false, mParameters);
        if (!oContext) {
          throw new Error(`Cannot create keepAlive context ${sPath}`);
        } else if (oDraftRoot || oDraftNode) {
          if (oContext.getProperty("IsActiveEntity") === undefined) {
            oContext.requestProperty(["HasActiveEntity", "HasDraftEntity", "IsActiveEntity"]);
            if (oDraftRoot) {
              oContext.requestObject("DraftAdministrativeData");
            }
          } else {
            // when switching between draft and edit we need to ensure those properties are requested again even if they are in the binding's cache
            // otherwise when you edit and go to the saved version you have no way of switching back to the edit version
            oContext.requestSideEffects(oDraftRoot ? ["HasActiveEntity", "HasDraftEntity", "IsActiveEntity", "DraftAdministrativeData"] : ["HasActiveEntity", "HasDraftEntity", "IsActiveEntity"]);
          }
        }
        return oContext;
      } else {
        if (sEntitySet) {
          const sMessagesPath = oMetaModel.getObject(`${sContextPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
          if (sMessagesPath) {
            mParameters.$select = sMessagesPath;
          }
        }

        // In case of draft: $select the state flags (HasActiveEntity, HasDraftEntity, and IsActiveEntity)
        if (oDraftRoot || oDraftNode) {
          if (mParameters.$select === undefined) {
            mParameters.$select = "HasActiveEntity,HasDraftEntity,IsActiveEntity";
          } else {
            mParameters.$select += ",HasActiveEntity,HasDraftEntity,IsActiveEntity";
          }
        }
        if (this._oView.getBindingContext()) {
          var _this$_oView$getBindi2;
          const oPreviousBinding = (_this$_oView$getBindi2 = this._oView.getBindingContext()) === null || _this$_oView$getBindi2 === void 0 ? void 0 : _this$_oView$getBindi2.getBinding();
          oPreviousBinding === null || oPreviousBinding === void 0 ? void 0 : oPreviousBinding.resetChanges().then(() => {
            oPreviousBinding.destroy();
          }).catch(oError => {
            Log.error("Error while reseting the changes to the binding", oError);
          });
        }
        const oHiddenBinding = oModel.bindContext(sPath, undefined, mParameters);
        oHiddenBinding.attachEventOnce("dataRequested", () => {
          BusyLocker.lock(this._oView);
        });
        oHiddenBinding.attachEventOnce("dataReceived", this.onDataReceived.bind(this));
        return oHiddenBinding.getBoundContext();
      }
    };
    _proto.onDataReceived = async function onDataReceived(oEvent) {
      const sErrorDescription = oEvent && oEvent.getParameter("error");
      if (BusyLocker.isLocked(this._oView)) {
        BusyLocker.unlock(this._oView);
      }
      if (sErrorDescription) {
        // TODO: in case of 404 the text shall be different
        try {
          const oResourceBundle = await Core.getLibraryResourceBundle("sap.fe.core", true);
          const messageHandler = this.base.messageHandler;
          let mParams = {};
          if (sErrorDescription.status === 503) {
            mParams = {
              isInitialLoad503Error: true,
              shellBack: true
            };
          } else if (sErrorDescription.status === 400) {
            mParams = {
              title: oResourceBundle.getText("C_COMMON_SAPFE_ERROR"),
              description: oResourceBundle.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR_DESCRIPTION"),
              isDataReceivedError: true,
              shellBack: true
            };
          } else {
            mParams = {
              title: oResourceBundle.getText("C_COMMON_SAPFE_ERROR"),
              description: sErrorDescription,
              isDataReceivedError: true,
              shellBack: true
            };
          }
          await messageHandler.showMessages(mParams);
        } catch (oError) {
          Log.error("Error while getting the core resource bundle", oError);
        }
      }
    }

    /**
     * Requests side effects on a binding context to "refresh" it.
     * TODO: get rid of this once provided by the model
     * a refresh on the binding context does not work in case a creation row with a transient context is
     * used. also a requestSideEffects with an empty path would fail due to the transient context
     * therefore we get all dependent bindings (via private model method) to determine all paths and then
     * request them.
     *
     * @param oBindingContext Context to be refreshed
     * @ui5-restricted
     */;
    _proto._refreshBindingContext = function _refreshBindingContext(oBindingContext) {
      const oPageComponent = this._oPageComponent;
      const oSideEffectsService = this._oAppComponent.getSideEffectsService();
      const sRootContextPath = oBindingContext.getPath();
      const sEntitySet = oPageComponent && oPageComponent.getEntitySet && oPageComponent.getEntitySet();
      const sContextPath = oPageComponent && oPageComponent.getContextPath && oPageComponent.getContextPath() || sEntitySet && `/${sEntitySet}`;
      const oMetaModel = this._oView.getModel().getMetaModel();
      let sMessagesPath;
      const aNavigationPropertyPaths = [];
      const aPropertyPaths = [];
      const oSideEffects = {
        targetProperties: [],
        targetEntities: []
      };
      function getBindingPaths(oBinding) {
        let aDependentBindings;
        const sRelativePath = (oBinding.getContext() && oBinding.getContext().getPath() || "").replace(sRootContextPath, ""); // If no context, this is an absolute binding so no relative path
        const sPath = (sRelativePath ? `${sRelativePath.slice(1)}/` : sRelativePath) + oBinding.getPath();
        if (oBinding.isA("sap.ui.model.odata.v4.ODataContextBinding")) {
          // if (sPath === "") {
          // now get the dependent bindings
          aDependentBindings = oBinding.getDependentBindings();
          if (aDependentBindings) {
            // ask the dependent bindings (and only those with the specified groupId
            //if (aDependentBindings.length > 0) {
            for (let i = 0; i < aDependentBindings.length; i++) {
              getBindingPaths(aDependentBindings[i]);
            }
          } else if (aNavigationPropertyPaths.indexOf(sPath) === -1) {
            aNavigationPropertyPaths.push(sPath);
          }
        } else if (oBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
          if (aNavigationPropertyPaths.indexOf(sPath) === -1) {
            aNavigationPropertyPaths.push(sPath);
          }
        } else if (oBinding.isA("sap.ui.model.odata.v4.ODataPropertyBinding")) {
          if (aPropertyPaths.indexOf(sPath) === -1) {
            aPropertyPaths.push(sPath);
          }
        }
      }
      if (sContextPath) {
        sMessagesPath = oMetaModel.getObject(`${sContextPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
      }

      // binding of the context must have $$PatchWithoutSideEffects true, this bound context may be needed to be fetched from the dependent binding
      getBindingPaths(oBindingContext.getBinding());
      let i;
      for (i = 0; i < aNavigationPropertyPaths.length; i++) {
        oSideEffects.targetEntities.push({
          $NavigationPropertyPath: aNavigationPropertyPaths[i]
        });
      }
      oSideEffects.targetProperties = aPropertyPaths;
      if (sMessagesPath) {
        oSideEffects.targetProperties.push(sMessagesPath);
      }
      //all this logic to be replaced with a SideEffects request for an empty path (refresh everything), after testing transient contexts
      oSideEffects.targetProperties = oSideEffects.targetProperties.reduce((targets, targetProperty) => {
        if (targetProperty) {
          const index = targetProperty.indexOf("/");
          targets.push(index > 0 ? targetProperty.slice(0, index) : targetProperty);
        }
        return targets;
      }, []);
      // OData model will take care of duplicates
      oSideEffectsService.requestSideEffects([...oSideEffects.targetEntities, ...oSideEffects.targetProperties], oBindingContext);
    }

    /**
     * Gets the binding context of the page or the component.
     *
     * @returns The binding context
     * @ui5-restricted
     */;
    _proto._getBindingContext = function _getBindingContext() {
      if (this._oPageComponent) {
        return this._oPageComponent.getBindingContext();
      } else {
        return this._oView.getBindingContext();
      }
    }

    /**
     * Sets the binding context of the page or the component.
     *
     * @param oContext The binding context
     * @ui5-restricted
     */;
    _proto._setBindingContext = function _setBindingContext(oContext) {
      var _oPreviousContext;
      let oPreviousContext, oTargetControl;
      if (this._oPageComponent) {
        oPreviousContext = this._oPageComponent.getBindingContext();
        oTargetControl = this._oPageComponent;
      } else {
        oPreviousContext = this._oView.getBindingContext();
        oTargetControl = this._oView;
      }
      oTargetControl.setBindingContext(oContext);
      if ((_oPreviousContext = oPreviousContext) !== null && _oPreviousContext !== void 0 && _oPreviousContext.isKeepAlive() && oPreviousContext !== oContext) {
        this._setKeepAlive(oPreviousContext, false);
      }
    }

    /**
     * Gets the flexible column layout (FCL) level corresponding to the view (-1 if the app is not FCL).
     *
     * @returns The level
     * @ui5-restricted
     */;
    _proto._getFCLLevel = function _getFCLLevel() {
      return this._oTargetInformation.FCLLevel;
    };
    _proto._setKeepAlive = function _setKeepAlive(oContext, bKeepAlive, fnBeforeDestroy, bRequestMessages) {
      if (oContext.getPath().endsWith(")")) {
        // We keep the context alive only if they're part of a collection, i.e. if the path ends with a ')'
        const oMetaModel = oContext.getModel().getMetaModel();
        const sMetaPath = oMetaModel.getMetaPath(oContext.getPath());
        const sMessagesPath = oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
        oContext.setKeepAlive(bKeepAlive, fnBeforeDestroy, !!sMessagesPath && bRequestMessages);
      }
    };
    _proto._getKeepAliveContext = function _getKeepAliveContext(oModel, path, bRequestMessages, parameters) {
      // Get the path for the context that is really kept alive (part of a collection)
      // i.e. remove all segments not ending with a ')'
      const keptAliveSegments = path.split("/");
      const additionnalSegments = [];
      while (keptAliveSegments.length && !keptAliveSegments[keptAliveSegments.length - 1].endsWith(")")) {
        additionnalSegments.push(keptAliveSegments.pop());
      }
      if (keptAliveSegments.length === 0) {
        return undefined;
      }
      const keptAlivePath = keptAliveSegments.join("/");
      const oKeepAliveContext = oModel.getKeepAliveContext(keptAlivePath, bRequestMessages, parameters);
      if (additionnalSegments.length === 0) {
        return oKeepAliveContext;
      } else {
        additionnalSegments.reverse();
        const additionnalPath = additionnalSegments.join("/");
        return oModel.bindContext(additionnalPath, oKeepAliveContext).getBoundContext();
      }
    }

    /**
     * Switches between column and full-screen mode when FCL is used.
     *
     * @ui5-restricted
     */;
    _proto.switchFullScreen = function switchFullScreen() {
      const oSource = this.base.getView();
      const oFCLHelperModel = oSource.getModel("fclhelper"),
        bIsFullScreen = oFCLHelperModel.getProperty("/actionButtonsInfo/isFullScreen"),
        sNextLayout = oFCLHelperModel.getProperty(bIsFullScreen ? "/actionButtonsInfo/exitFullScreen" : "/actionButtonsInfo/fullScreen"),
        oRootViewController = this._oAppComponent.getRootViewController();
      const oContext = oRootViewController.getRightmostContext ? oRootViewController.getRightmostContext() : oSource.getBindingContext();
      this.base._routing.navigateToContext(oContext, {
        sLayout: sNextLayout
      }).catch(function () {
        Log.warning("cannot switch between column and fullscreen");
      });
    }

    /**
     * Closes the column for the current view in a FCL.
     *
     * @ui5-restricted
     */;
    _proto.closeColumn = function closeColumn() {
      const oViewData = this._oView.getViewData();
      const oContext = this._oView.getBindingContext();
      const oMetaModel = oContext.getModel().getMetaModel();
      const navigationParameters = {
        noPreservationCache: true,
        sLayout: this._oView.getModel("fclhelper").getProperty("/actionButtonsInfo/closeColumn")
      };
      if ((oViewData === null || oViewData === void 0 ? void 0 : oViewData.viewLevel) === 1 && ModelHelper.isDraftSupported(oMetaModel, oContext.getPath())) {
        draft.processDataLossOrDraftDiscardConfirmation(() => {
          this.navigateBackFromContext(oContext, navigationParameters);
        }, Function.prototype, oContext, this._oView.getController(), false, draft.NavigationType.BackNavigation);
      } else {
        this.navigateBackFromContext(oContext, navigationParameters);
      }
    };
    return InternalRouting;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onExit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRouteMatched", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "onRouteMatched"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRouteMatchedFinished", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onRouteMatchedFinished"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeBinding", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAfterBinding", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "onAfterBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateToTarget", [_dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateToTarget"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateToRoute", [_dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateToRoute"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateToContext", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateToContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateBackFromContext", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateBackFromContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateForwardToContext", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateForwardToContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateBackFromTransientState", [_dec20, _dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateBackFromTransientState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateToMessagePage", [_dec22, _dec23], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateToMessagePage"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isCurrentStateImpactedBy", [_dec24, _dec25], Object.getOwnPropertyDescriptor(_class2.prototype, "isCurrentStateImpactedBy"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onDataReceived", [_dec26], Object.getOwnPropertyDescriptor(_class2.prototype, "onDataReceived"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "switchFullScreen", [_dec27, _dec28], Object.getOwnPropertyDescriptor(_class2.prototype, "switchFullScreen"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "closeColumn", [_dec29, _dec30], Object.getOwnPropertyDescriptor(_class2.prototype, "closeColumn"), _class2.prototype)), _class2)) || _class);
  return InternalRouting;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/InternalRouting", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/controllerextensions/collaboration/ActivitySync","sap/fe/core/controllerextensions/editFlow/draft","sap/fe/core/controllerextensions/routing/NavigationReason","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/EditState","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/SemanticKeyHelper","sap/ui/core/Component","sap/ui/core/Core","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","sap/ui/model/Filter","sap/ui/model/FilterOperator"],function(t,e,o,n,i,r,a,s,c,l,g,p,u,h,d,f){"use strict";var v,C,y,P,_,m,x,b,w,O,B,R,E,A,D,S,T,M,F,I,V,$,L,j,H,k,N,K,q,z,U,W;var Q=a.publicExtension;var X=a.methodOverride;var G=a.finalExtension;var J=a.extensible;var Y=a.defineUI5Class;function Z(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;tt(t,e)}function tt(t,e){tt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,o){e.__proto__=o;return e};return tt(t,e)}function et(t,e,o,n,i){var r={};Object.keys(n).forEach(function(t){r[t]=n[t]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(t,e,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(t,e,r);r=null}return r}let ot=(v=Y("sap.fe.core.controllerextensions.InternalRouting"),C=X(),y=X(),P=Q(),_=J(h.After),m=Q(),x=J(h.After),b=Q(),w=J(h.After),O=Q(),B=J(h.After),R=Q(),E=Q(),A=Q(),D=G(),S=Q(),T=G(),M=Q(),F=G(),I=Q(),V=G(),$=Q(),L=G(),j=Q(),H=G(),k=Q(),N=Q(),K=G(),q=Q(),z=J(h.Before),v(U=(W=function(a){Z(u,a);function u(){return a.apply(this,arguments)||this}var h=u.prototype;h.onExit=function t(){if(this._oRoutingService){this._oRoutingService.detachRouteMatched(this._fnRouteMatchedBound)}};h.onInit=function t(){this._oView=this.base.getView();this._oAppComponent=e.getAppComponent(this._oView);this._oPageComponent=g.getOwnerComponentFor(this._oView);this._oRouter=this._oAppComponent.getRouter();this._oRouterProxy=this._oAppComponent.getRouterProxy();if(!this._oAppComponent||!this._oPageComponent){throw new Error("Failed to initialize controler extension 'sap.fe.core.controllerextesions.InternalRouting")}if(this._oAppComponent===this._oPageComponent){this._oPageComponent=null}this._oAppComponent.getService("routingService").then(t=>{this._oRoutingService=t;this._fnRouteMatchedBound=this._onRouteMatched.bind(this);this._oRoutingService.attachRouteMatched(this._fnRouteMatchedBound);this._oTargetInformation=t.getTargetInformationFor(this._oPageComponent||this._oView)}).catch(function(){throw new Error("This controller extension cannot work without a 'routingService' on the main AppComponent")})};h.onRouteMatched=function t(){};h.onRouteMatchedFinished=function t(){};h.onBeforeBinding=function t(e,o){const n=this.base.getView().getController().routing;if(n&&n.onBeforeBinding){n.onBeforeBinding(e,o)}};h.onAfterBinding=function t(e,o){this._oAppComponent.getRootViewController().onContextBoundToView(e);const n=this.base.getView().getController().routing;if(n&&n.onAfterBinding){n.onAfterBinding(e,o)}};h.navigateToTarget=function t(e,o,n){const i=this._oPageComponent&&this._oPageComponent.getNavigationConfiguration&&this._oPageComponent.getNavigationConfiguration(o);if(i){const t=i.detail;const o=t.route;const r=t.parameters;this._oRoutingService.navigateTo(e,o,r,n)}else{this._oRoutingService.navigateTo(e,null,null,n)}this._oView.getViewData()};h.navigateToRoute=function t(e,o){return this._oRoutingService.navigateToRoute(e,o)};h.navigateToContext=function e(o,n){const i={};n=n||{};if(o.isA("sap.ui.model.odata.v4.ODataListBinding")){if(n.asyncContext){this._oRouterProxy.activateRouteMatchSynchronization();n.asyncContext.then(t=>{this.navigateToContext(t,{checkNoHashChange:n.checkNoHashChange,editable:n.editable,bPersistOPScroll:n.bPersistOPScroll,updateFCLLevel:n.updateFCLLevel,bForceFocus:n.bForceFocus})}).catch(function(e){t.error("Error with the async context",e)})}else if(!n.bDeferredContext){throw"navigation to a list binding is not yet supported"}}if(n.callExtension){const t=this._oView.getModel("internal");t.setProperty("/paginatorCurrentContext",null);i.sourceBindingContext=o.getObject();i.bindingContext=o;if(n.oEvent){i.oEvent=n.oEvent}const e=this.base.getView().getController().routing.onBeforeNavigation(i);if(e){t.setProperty("/paginatorCurrentContext",o);return Promise.resolve(true)}}n.FCLLevel=this._getFCLLevel();return this._oRoutingService.navigateToContext(o,n,this._oView.getViewData(),this._oTargetInformation)};h.navigateBackFromContext=function t(e,o){o=o||{};o.updateFCLLevel=-1;return this.navigateToContext(e,o)};h.navigateForwardToContext=function t(e,o){var n;if(((n=this._oView.getBindingContext("internal"))===null||n===void 0?void 0:n.getProperty("messageFooterContainsErrors"))===true){return Promise.resolve(true)}o=o||{};o.updateFCLLevel=1;return this.navigateToContext(e,o)};h.navigateBackFromTransientState=function t(){const e=this._oRouterProxy.getHash();if(e.indexOf("(...)")!==-1){this._oRouterProxy.navBack()}};h.navigateToMessagePage=function t(e,o){o=o||{};if(this._oRouterProxy.getHash().indexOf("i-action=create")>-1||this._oRouterProxy.getHash().indexOf("i-action=autoCreate")>-1){return this._oRouterProxy.navToHash(this._oRoutingService.getDefaultCreateHash())}else{o.FCLLevel=this._getFCLLevel();return this._oAppComponent.getRootViewController().displayErrorPage(e,o)}};h.isCurrentStateImpactedBy=function t(e){return this._oRoutingService.isCurrentStateImpactedBy(e)};h._isViewPartOfRoute=function t(e){const o=e===null||e===void 0?void 0:e.targets;if(!o||o.indexOf(this._oTargetInformation.targetName)===-1){if((this._oTargetInformation.viewLevel??0)>=((e===null||e===void 0?void 0:e.routeLevel)??0)){this._setBindingContext(null)}return false}return true};h._buildBindingPath=function t(e,o,n){let i=o.replace(":?query:","");let r=false;for(const t in e){const a=e[t];if(typeof a!=="string"){continue}if(a==="..."&&o.indexOf(`{${t}}`)>=0){r=true;n.bTargetEditable=true}i=i.replace(`{${t}}`,a)}if(e["?query"]&&e["?query"].hasOwnProperty("i-action")){n.bActionCreate=true}if(i&&i[0]!=="/"){i=`/${i}`}return{path:i,deferred:r}};h._onRouteMatched=function t(e){if(!this._isViewPartOfRoute(e.getParameter("routeInformation"))){return}let o;if(this._oPageComponent&&this._oPageComponent.getBindingContextPattern){o=this._oPageComponent.getBindingContextPattern()}o=o||this._oTargetInformation.contextPattern;if(o===null||o===undefined){o=e.getParameter("routePattern")}const n=e.getParameters().arguments;const i=e.getParameter("navigationInfo");const{path:r,deferred:a}=this._buildBindingPath(n,o,i);this.onRouteMatched();const s=this._oView.getModel();let c;if(a){c=this._bindDeferred(r,i)}else{c=this._bindPage(r,s,i)}c.finally(()=>{this.onRouteMatchedFinished()});this._oAppComponent.getRootViewController().updateUIStateForView(this._oView,this._getFCLLevel())};h._bindDeferred=async function t(e,o){this.onBeforeBinding(null,{editable:o.bTargetEditable});if(o.bDeferredContext||!o.oAsyncContext){if(this._oPageComponent&&this._oPageComponent.createDeferredContext){this._oPageComponent.createDeferredContext(e,o.listBindingForCreate,!!o.bActionCreate)}}const n=this._getBindingContext();if(n!==null&&n!==void 0&&n.hasPendingChanges()){n.getBinding().resetChanges()}this._setBindingContext(null);this.onAfterBinding(null);return Promise.resolve()};h._bindPage=function t(e,o,n){if(e===""){return Promise.resolve(this._bindPageToContext(null,o,n))}return this.resolvePath(e,o,n).then(t=>{this._bindPageToPath(t,o,n)}).catch(t=>{const e=p.getLibraryResourceBundle("sap.fe.core");this.navigateToMessagePage(e.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR"),{title:e.getText("C_COMMON_SAPFE_ERROR"),description:t.message})})};h.createFilterFromPath=function t(e,o,n){const i=function(t){if(t.indexOf("'")===0&&t.lastIndexOf("'")===t.length-1){t=decodeURIComponent(t.substring(1,t.length-1))}return t};const r=e.substring(e.indexOf("(")+1,e.length-1).split(",");let a=o;let s=r;if(o.includes("IsActiveEntity")){a=o.filter(t=>t.indexOf("IsActiveEntity")<0);s=r.filter(t=>!t.startsWith("IsActiveEntity"))}if(a.length!=s.length){return null}const l=c.isFilteringCaseSensitive(n);let g;if(a.length===1){if(s[0].indexOf("=")>0){const t=s[0].split("=");s[0]=t[1]}const t=i(s[0]);g=[new d({path:a[0],operator:f.EQ,value1:t,caseSensitive:l})]}else{const t={};s.forEach(function(e){const o=e.split("="),n=i(o[1]);t[o[0]]=n});let e=false;g=a.map(function(o){const n=o,i=t[n];if(i!==undefined){return new d({path:n,operator:f.EQ,value1:i,caseSensitive:l})}else{e=true;return new d({path:"XX"})}});if(e){return null}}const p=new d({filters:[new d("IsActiveEntity","EQ",false),new d("SiblingEntity/IsActiveEntity","EQ",null)],and:false});g.push(p);return new d(g,true)};h.getTechnicalPathFromPath=async function t(e,o,n){var i;const r=o.getMetaModel();let a=r.getMetaContext(e).getPath();if(!n||n.length===0){return null}const s=this.createFilterFromPath(e,n,r);if(s===null){return null}if(!((i=a)!==null&&i!==void 0&&i.startsWith("/"))){a=`/${a}`}const c=o.bindList(a,undefined,undefined,s,{$$groupId:"$auto.Heroes"});const l=await c.requestContexts(0,2);if(l.length){return l[0].getPath()}else{return null}};h.refreshContext=async function t(e,o,n){const i=this._oAppComponent.getRootViewController();if(i.isFclEnabled()){const t=e.getKeepAliveContext(o);n.replaceWith(t)}else{s.setEditStateDirty()}};h.checkDraftAvailability=function t(e,o){const n=/^[/]?(\w+)\([^/]+\)$/.exec(e);if(!n){return false}const i=`/${n[1]}`;const r=o.getObject(`${i}@com.sap.vocabularies.Common.v1.DraftRoot`);return r?true:false};h.resolvePath=async function t(e,o,n){var i,r,a;const s=o.getMetaModel();const g=this._oRoutingService.getLastSemanticMapping();let p=this._oRouter.getHashChanger().getHash().split("?")[0];if(((i=p)===null||i===void 0?void 0:i.lastIndexOf("/"))===((r=p)===null||r===void 0?void 0:r.length)-1){p=p.substring(0,p.length-1)}let u=(a=p)===null||a===void 0?void 0:a.substr(0,p.indexOf("("));if(u.indexOf("/")===0){u=u.substring(1)}const h=this.checkDraftAvailability(p,s),d=h?l.getSemanticKeys(s,u):undefined,f=c.isCollaborationDraftSupported(s);if(h&&f){var v;const t=(n===null||n===void 0?void 0:(v=n.useContext)===null||v===void 0?void 0:v.getProperty("IsActiveEntity"))??true;if(!t){return this.resolveCollaborationPath(e,o,n,d,u)}}if(d===undefined){return e}if((g===null||g===void 0?void 0:g.semanticPath)===e){return g.technicalPath}const C=d.map(t=>t.$PropertyPath);const y=await this.getTechnicalPathFromPath(p,o,C);if(y&&y!==e){this._oRoutingService.setLastSemanticMapping({technicalPath:y,semanticPath:e});return y}return e};h.resolveCollaborationPath=async function t(e,o,n,i,r){const a=this._oRoutingService.getLastSemanticMapping();const s=o.getMetaModel();const c=this._oRouter.getHashChanger().getHash().split("?")[0];let l;const g=(a===null||a===void 0?void 0:a.technicalPath)??e;if(i){l=i.map(t=>t.$PropertyPath)}else{l=s.getObject(`/${r}/$Type/$Key`)}const p=await this.getTechnicalPathFromPath(c,o,l);if(p===null){return e}if(p!==g&&n.useContext){var u;if(a){this._oRoutingService.setLastSemanticMapping({technicalPath:p,semanticPath:e})}n.redirectedToNonDraft=((u=s.getObject(`/${r}/@com.sap.vocabularies.UI.v1.HeaderInfo`))===null||u===void 0?void 0:u.TypeName)??r;await this.refreshContext(o,p,n.useContext)}return p};h._bindPageToPath=function t(e,o,i){const a=this._getBindingContext(),l=a&&a.getPath(),g=i.useContext;if(g&&g.getPath()===e){if(g!==a){let t=false;const e=this._oAppComponent.getRootViewController();if(e.isFclEnabled()&&i.reason===r.RowPress){const e=g.getModel().getMetaModel();if(!g.getBinding().hasPendingChanges()){t=true}else if(n.isConnected(this.getView())||c.isDraftSupported(e,g.getPath())&&c.isCollaborationDraftSupported(e)){g.getBinding().resetChanges();t=true}}this._bindPageToContext(g,o,i);if(t){g.refresh()}}}else if(l!==e){this._bindPageToContext(this._createContext(e,o),o,i)}else if(i.reason!==r.AppStateChanged&&s.isEditStateDirty()){this._refreshBindingContext(a)}};h._bindPageToContext=function e(o,n,i){if(!o){this.onBeforeBinding(null);this.onAfterBinding(null);return}const r=o.getBinding();const a=this._oAppComponent.getRootViewController();if(a.isFclEnabled()){if(!r||!r.isA("sap.ui.model.odata.v4.ODataListBinding")){o=this._createContext(o.getPath(),n)}try{this._setKeepAlive(o,true,()=>{if(a.isContextUsedInPages(o)){this.navigateBackFromContext(o)}},true)}catch(e){t.error(`View for ${o.getPath()} won't be synchronized. Parent listBinding must have binding parameter $$ownRequest=true`)}}else if(!r||r.isA("sap.ui.model.odata.v4.ODataListBinding")){o=this._createContext(o.getPath(),n)}this.onBeforeBinding(o,{editable:i.bTargetEditable,listBinding:r,bPersistOPScroll:i.bPersistOPScroll,bDraftNavigation:i.bDraftNavigation,showPlaceholder:i.bShowPlaceholder});this._setBindingContext(o);this.onAfterBinding(o,{redirectedToNonDraft:i===null||i===void 0?void 0:i.redirectedToNonDraft})};h._createContext=function e(n,i){const r=this._oPageComponent,a=r&&r.getEntitySet&&r.getEntitySet(),s=r&&r.getContextPath&&r.getContextPath()||a&&`/${a}`,c=i.getMetaModel(),l={$$groupId:"$auto.Heroes",$$updateGroupId:"$auto",$$patchWithoutSideEffects:true};const g=c.getObject(`${s}@com.sap.vocabularies.Common.v1.DraftRoot`);const p=c.getObject(`${s}@com.sap.vocabularies.Common.v1.DraftNode`);const u=this._oAppComponent.getRootViewController();if(u.isFclEnabled()){const t=this._getKeepAliveContext(i,n,false,l);if(!t){throw new Error(`Cannot create keepAlive context ${n}`)}else if(g||p){if(t.getProperty("IsActiveEntity")===undefined){t.requestProperty(["HasActiveEntity","HasDraftEntity","IsActiveEntity"]);if(g){t.requestObject("DraftAdministrativeData")}}else{t.requestSideEffects(g?["HasActiveEntity","HasDraftEntity","IsActiveEntity","DraftAdministrativeData"]:["HasActiveEntity","HasDraftEntity","IsActiveEntity"])}}return t}else{if(a){const t=c.getObject(`${s}/@com.sap.vocabularies.Common.v1.Messages/$Path`);if(t){l.$select=t}}if(g||p){if(l.$select===undefined){l.$select="HasActiveEntity,HasDraftEntity,IsActiveEntity"}else{l.$select+=",HasActiveEntity,HasDraftEntity,IsActiveEntity"}}if(this._oView.getBindingContext()){var h;const e=(h=this._oView.getBindingContext())===null||h===void 0?void 0:h.getBinding();e===null||e===void 0?void 0:e.resetChanges().then(()=>{e.destroy()}).catch(e=>{t.error("Error while reseting the changes to the binding",e)})}const e=i.bindContext(n,undefined,l);e.attachEventOnce("dataRequested",()=>{o.lock(this._oView)});e.attachEventOnce("dataReceived",this.onDataReceived.bind(this));return e.getBoundContext()}};h.onDataReceived=async function e(n){const i=n&&n.getParameter("error");if(o.isLocked(this._oView)){o.unlock(this._oView)}if(i){try{const t=await p.getLibraryResourceBundle("sap.fe.core",true);const e=this.base.messageHandler;let o={};if(i.status===503){o={isInitialLoad503Error:true,shellBack:true}}else if(i.status===400){o={title:t.getText("C_COMMON_SAPFE_ERROR"),description:t.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR_DESCRIPTION"),isDataReceivedError:true,shellBack:true}}else{o={title:t.getText("C_COMMON_SAPFE_ERROR"),description:i,isDataReceivedError:true,shellBack:true}}await e.showMessages(o)}catch(e){t.error("Error while getting the core resource bundle",e)}}};h._refreshBindingContext=function t(e){const o=this._oPageComponent;const n=this._oAppComponent.getSideEffectsService();const i=e.getPath();const r=o&&o.getEntitySet&&o.getEntitySet();const a=o&&o.getContextPath&&o.getContextPath()||r&&`/${r}`;const s=this._oView.getModel().getMetaModel();let c;const l=[];const g=[];const p={targetProperties:[],targetEntities:[]};function u(t){let e;const o=(t.getContext()&&t.getContext().getPath()||"").replace(i,"");const n=(o?`${o.slice(1)}/`:o)+t.getPath();if(t.isA("sap.ui.model.odata.v4.ODataContextBinding")){e=t.getDependentBindings();if(e){for(let t=0;t<e.length;t++){u(e[t])}}else if(l.indexOf(n)===-1){l.push(n)}}else if(t.isA("sap.ui.model.odata.v4.ODataListBinding")){if(l.indexOf(n)===-1){l.push(n)}}else if(t.isA("sap.ui.model.odata.v4.ODataPropertyBinding")){if(g.indexOf(n)===-1){g.push(n)}}}if(a){c=s.getObject(`${a}/@com.sap.vocabularies.Common.v1.Messages/$Path`)}u(e.getBinding());let h;for(h=0;h<l.length;h++){p.targetEntities.push({$NavigationPropertyPath:l[h]})}p.targetProperties=g;if(c){p.targetProperties.push(c)}p.targetProperties=p.targetProperties.reduce((t,e)=>{if(e){const o=e.indexOf("/");t.push(o>0?e.slice(0,o):e)}return t},[]);n.requestSideEffects([...p.targetEntities,...p.targetProperties],e)};h._getBindingContext=function t(){if(this._oPageComponent){return this._oPageComponent.getBindingContext()}else{return this._oView.getBindingContext()}};h._setBindingContext=function t(e){var o;let n,i;if(this._oPageComponent){n=this._oPageComponent.getBindingContext();i=this._oPageComponent}else{n=this._oView.getBindingContext();i=this._oView}i.setBindingContext(e);if((o=n)!==null&&o!==void 0&&o.isKeepAlive()&&n!==e){this._setKeepAlive(n,false)}};h._getFCLLevel=function t(){return this._oTargetInformation.FCLLevel};h._setKeepAlive=function t(e,o,n,i){if(e.getPath().endsWith(")")){const t=e.getModel().getMetaModel();const r=t.getMetaPath(e.getPath());const a=t.getObject(`${r}/@com.sap.vocabularies.Common.v1.Messages/$Path`);e.setKeepAlive(o,n,!!a&&i)}};h._getKeepAliveContext=function t(e,o,n,i){const r=o.split("/");const a=[];while(r.length&&!r[r.length-1].endsWith(")")){a.push(r.pop())}if(r.length===0){return undefined}const s=r.join("/");const c=e.getKeepAliveContext(s,n,i);if(a.length===0){return c}else{a.reverse();const t=a.join("/");return e.bindContext(t,c).getBoundContext()}};h.switchFullScreen=function e(){const o=this.base.getView();const n=o.getModel("fclhelper"),i=n.getProperty("/actionButtonsInfo/isFullScreen"),r=n.getProperty(i?"/actionButtonsInfo/exitFullScreen":"/actionButtonsInfo/fullScreen"),a=this._oAppComponent.getRootViewController();const s=a.getRightmostContext?a.getRightmostContext():o.getBindingContext();this.base._routing.navigateToContext(s,{sLayout:r}).catch(function(){t.warning("cannot switch between column and fullscreen")})};h.closeColumn=function t(){const e=this._oView.getViewData();const o=this._oView.getBindingContext();const n=o.getModel().getMetaModel();const r={noPreservationCache:true,sLayout:this._oView.getModel("fclhelper").getProperty("/actionButtonsInfo/closeColumn")};if((e===null||e===void 0?void 0:e.viewLevel)===1&&c.isDraftSupported(n,o.getPath())){i.processDataLossOrDraftDiscardConfirmation(()=>{this.navigateBackFromContext(o,r)},Function.prototype,o,this._oView.getController(),false,i.NavigationType.BackNavigation)}else{this.navigateBackFromContext(o,r)}};return u}(u),et(W.prototype,"onExit",[C],Object.getOwnPropertyDescriptor(W.prototype,"onExit"),W.prototype),et(W.prototype,"onInit",[y],Object.getOwnPropertyDescriptor(W.prototype,"onInit"),W.prototype),et(W.prototype,"onRouteMatched",[P,_],Object.getOwnPropertyDescriptor(W.prototype,"onRouteMatched"),W.prototype),et(W.prototype,"onRouteMatchedFinished",[m,x],Object.getOwnPropertyDescriptor(W.prototype,"onRouteMatchedFinished"),W.prototype),et(W.prototype,"onBeforeBinding",[b,w],Object.getOwnPropertyDescriptor(W.prototype,"onBeforeBinding"),W.prototype),et(W.prototype,"onAfterBinding",[O,B],Object.getOwnPropertyDescriptor(W.prototype,"onAfterBinding"),W.prototype),et(W.prototype,"navigateToTarget",[R],Object.getOwnPropertyDescriptor(W.prototype,"navigateToTarget"),W.prototype),et(W.prototype,"navigateToRoute",[E],Object.getOwnPropertyDescriptor(W.prototype,"navigateToRoute"),W.prototype),et(W.prototype,"navigateToContext",[A,D],Object.getOwnPropertyDescriptor(W.prototype,"navigateToContext"),W.prototype),et(W.prototype,"navigateBackFromContext",[S,T],Object.getOwnPropertyDescriptor(W.prototype,"navigateBackFromContext"),W.prototype),et(W.prototype,"navigateForwardToContext",[M,F],Object.getOwnPropertyDescriptor(W.prototype,"navigateForwardToContext"),W.prototype),et(W.prototype,"navigateBackFromTransientState",[I,V],Object.getOwnPropertyDescriptor(W.prototype,"navigateBackFromTransientState"),W.prototype),et(W.prototype,"navigateToMessagePage",[$,L],Object.getOwnPropertyDescriptor(W.prototype,"navigateToMessagePage"),W.prototype),et(W.prototype,"isCurrentStateImpactedBy",[j,H],Object.getOwnPropertyDescriptor(W.prototype,"isCurrentStateImpactedBy"),W.prototype),et(W.prototype,"onDataReceived",[k],Object.getOwnPropertyDescriptor(W.prototype,"onDataReceived"),W.prototype),et(W.prototype,"switchFullScreen",[N,K],Object.getOwnPropertyDescriptor(W.prototype,"switchFullScreen"),W.prototype),et(W.prototype,"closeColumn",[q,z],Object.getOwnPropertyDescriptor(W.prototype,"closeColumn"),W.prototype),W))||U);return ot},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/KPIManagement-dbg", ["sap/base/Log", "sap/fe/core/formatters/TableFormatterTypes", "sap/m/Popover", "sap/ui/core/Core", "sap/ui/core/format/DateFormat", "sap/ui/core/format/NumberFormat", "sap/ui/core/Locale", "sap/ui/core/mvc/ControllerExtension", "sap/ui/model/Filter", "sap/ui/model/json/JSONModel", "sap/ui/model/Sorter", "../helpers/ClassSupport"], function (Log, TableFormatterTypes, Popover, Core, DateFormat, NumberFormat, Locale, ControllerExtension, Filter, JSONModel, Sorter, ClassSupport) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var methodOverride = ClassSupport.methodOverride;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var MessageType = TableFormatterTypes.MessageType;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const MessageTypeFromCriticality = {
    "1": MessageType.Error,
    "2": MessageType.Warning,
    "3": MessageType.Success,
    "5": MessageType.Information
  };
  const ValueColorFromMessageType = {
    Error: "Error",
    Warning: "Critical",
    Success: "Good",
    Information: "None",
    None: "None"
  };

  /**
   * Function to get a message state from a calculated criticality of type 'Target'.
   *
   * @param kpiValue The value of the KPI to be tested against.
   * @param aThresholds Thresholds to be used [DeviationRangeLowValue,ToleranceRangeLowValue,AcceptanceRangeLowValue,AcceptanceRangeHighValue,ToleranceRangeHighValue,DeviationRangeHighValue].
   * @returns The corresponding MessageType
   */
  function messageTypeFromTargetCalculation(kpiValue, aThresholds) {
    let criticalityProperty;
    if (aThresholds[0] !== undefined && aThresholds[0] !== null && kpiValue < aThresholds[0]) {
      criticalityProperty = MessageType.Error;
    } else if (aThresholds[1] !== undefined && aThresholds[1] !== null && kpiValue < aThresholds[1]) {
      criticalityProperty = MessageType.Warning;
    } else if (aThresholds[2] !== undefined && aThresholds[2] !== null && kpiValue < aThresholds[2]) {
      criticalityProperty = MessageType.None;
    } else if (aThresholds[5] !== undefined && aThresholds[5] !== null && kpiValue > aThresholds[5]) {
      criticalityProperty = MessageType.Error;
    } else if (aThresholds[4] !== undefined && aThresholds[4] !== null && kpiValue > aThresholds[4]) {
      criticalityProperty = MessageType.Warning;
    } else if (aThresholds[3] !== undefined && aThresholds[3] !== null && kpiValue > aThresholds[3]) {
      criticalityProperty = MessageType.None;
    } else {
      criticalityProperty = MessageType.Success;
    }
    return criticalityProperty;
  }

  /**
   * Function to get a message state from a calculated criticality of type 'Minimize'.
   *
   * @param kpiValue The value of the KPI to be tested against.
   * @param aThresholds Thresholds to be used [AcceptanceRangeHighValue,ToleranceRangeHighValue,DeviationRangeHighValue].
   * @returns The corresponding MessageType
   */
  function messageTypeFromMinimizeCalculation(kpiValue, aThresholds) {
    let criticalityProperty;
    if (aThresholds[2] !== undefined && aThresholds[2] !== null && kpiValue > aThresholds[2]) {
      criticalityProperty = MessageType.Error;
    } else if (aThresholds[1] !== undefined && aThresholds[1] !== null && kpiValue > aThresholds[1]) {
      criticalityProperty = MessageType.Warning;
    } else if (aThresholds[0] !== undefined && aThresholds[0] !== null && kpiValue > aThresholds[0]) {
      criticalityProperty = MessageType.None;
    } else {
      criticalityProperty = MessageType.Success;
    }
    return criticalityProperty;
  }

  /**
   * Function to get a message state from a calculated criticality of type 'Maximize'.
   *
   * @param kpiValue The value of the KPI to be tested against.
   * @param aThresholds Thresholds to be used [DeviationRangeLowValue,ToleranceRangeLowValue,AcceptanceRangeLowValue].
   * @returns The corresponding MessageType
   */
  function messageTypeFromMaximizeCalculation(kpiValue, aThresholds) {
    let criticalityProperty;
    if (aThresholds[0] !== undefined && aThresholds[0] !== null && kpiValue < aThresholds[0]) {
      criticalityProperty = MessageType.Error;
    } else if (aThresholds[1] !== undefined && aThresholds[1] !== null && kpiValue < aThresholds[1]) {
      criticalityProperty = MessageType.Warning;
    } else if (aThresholds[2] !== undefined && aThresholds[2] !== null && kpiValue < aThresholds[2]) {
      criticalityProperty = MessageType.None;
    } else {
      criticalityProperty = MessageType.Success;
    }
    return criticalityProperty;
  }

  /**
   * Function to calculate a DeviationIndicator value from a trend value.
   *
   * @param trendValue The criticality values.
   * @returns The corresponding DeviationIndicator value
   */
  function deviationIndicatorFromTrendType(trendValue) {
    let deviationIndicator;
    switch (trendValue) {
      case 1: // StrongUp
      case "1":
      case 2: // Up
      case "2":
        deviationIndicator = "Up";
        break;
      case 4: // Down
      case "4":
      case 5: // StrongDown
      case "5":
        deviationIndicator = "Down";
        break;
      default:
        deviationIndicator = "None";
    }
    return deviationIndicator;
  }

  /**
   * Function to calculate a DeviationIndicator from a TrendCalculation.
   *
   * @param kpiValue The value of the KPI
   * @param referenceValue The reference value to compare with
   * @param isRelative True is the comparison is relative
   * @param aThresholds Array of thresholds [StrongDownDifference, DownDifference, UpDifference, StrongUpDifference]
   * @returns The corresponding DeviationIndicator value
   */
  function deviationIndicatorFromCalculation(kpiValue, referenceValue, isRelative, aThresholds) {
    let deviationIndicator;
    if (!aThresholds || isRelative && !referenceValue) {
      return "None";
    }
    const compValue = isRelative ? (kpiValue - referenceValue) / referenceValue : kpiValue - referenceValue;
    if (aThresholds[0] !== undefined && aThresholds[0] !== null && compValue <= aThresholds[0]) {
      // StrongDown --> Down
      deviationIndicator = "Down";
    } else if (aThresholds[1] !== undefined && aThresholds[1] !== null && compValue <= aThresholds[1]) {
      // Down --> Down
      deviationIndicator = "Down";
    } else if (aThresholds[3] !== undefined && aThresholds[3] !== null && compValue >= aThresholds[3]) {
      // StrongUp --> Up
      deviationIndicator = "Up";
    } else if (aThresholds[2] !== undefined && aThresholds[2] !== null && compValue >= aThresholds[2]) {
      // Up --> Up
      deviationIndicator = "Up";
    } else {
      // Sideways --> None
      deviationIndicator = "None";
    }
    return deviationIndicator;
  }

  /**
   * Creates a sap.ui.model.Filter from a filter definition.
   *
   * @param filterDefinition The filter definition
   * @returns Returns a sap.ui.model.Filter from the definition, or undefined if the definition is empty (no ranges)
   */
  function createFilterFromDefinition(filterDefinition) {
    if (filterDefinition.ranges.length === 0) {
      return undefined;
    } else if (filterDefinition.ranges.length === 1) {
      return new Filter(filterDefinition.propertyPath, filterDefinition.ranges[0].operator, filterDefinition.ranges[0].rangeLow, filterDefinition.ranges[0].rangeHigh);
    } else {
      const aRangeFilters = filterDefinition.ranges.map(range => {
        return new Filter(filterDefinition.propertyPath, range.operator, range.rangeLow, range.rangeHigh);
      });
      return new Filter({
        filters: aRangeFilters,
        and: false
      });
    }
  }
  function getFilterStringFromDefinition(filterDefinition) {
    const currentLocale = new Locale(sap.ui.getCore().getConfiguration().getLanguage());
    const resBundle = Core.getLibraryResourceBundle("sap.fe.core");
    const dateFormat = DateFormat.getDateInstance({
      style: "medium"
    }, currentLocale);
    function formatRange(range) {
      const valueLow = filterDefinition.propertyType.indexOf("Edm.Date") === 0 ? dateFormat.format(new Date(range.rangeLow)) : range.rangeLow;
      const valueHigh = filterDefinition.propertyType.indexOf("Edm.Date") === 0 ? dateFormat.format(new Date(range.rangeHigh)) : range.rangeHigh;
      switch (range.operator) {
        case "BT":
          return `[${valueLow} - ${valueHigh}]`;
        case "Contains":
          return `*${valueLow}*`;
        case "GE":
          return `\u2265${valueLow}`;
        case "GT":
          return `>${valueLow}`;
        case "LE":
          return `\u2264${valueLow}`;
        case "LT":
          return `<${valueLow}`;
        case "NB":
          return resBundle.getText("C_KPICARD_FILTERSTRING_NOT", [`[${valueLow} - ${valueHigh}]`]);
        case "NE":
          return `\u2260${valueLow}`;
        case "NotContains":
          return resBundle.getText("C_KPICARD_FILTERSTRING_NOT", [`*${valueLow}*`]);
        case "EQ":
        default:
          return valueLow;
      }
    }
    if (filterDefinition.ranges.length === 0) {
      return "";
    } else if (filterDefinition.ranges.length === 1) {
      return formatRange(filterDefinition.ranges[0]);
    } else {
      return `(${filterDefinition.ranges.map(formatRange).join(",")})`;
    }
  }
  function formatChartTitle(kpiDef) {
    const resBundle = Core.getLibraryResourceBundle("sap.fe.core");
    function formatList(items) {
      if (items.length === 0) {
        return "";
      } else if (items.length === 1) {
        return items[0].label;
      } else {
        let res = items[0].label;
        for (let I = 1; I < items.length - 1; I++) {
          res += `, ${items[I].label}`;
        }
        return resBundle.getText("C_KPICARD_ITEMSLIST", [res, items[items.length - 1].label]);
      }
    }
    return resBundle.getText("C_KPICARD_CHARTTITLE", [formatList(kpiDef.chart.measures), formatList(kpiDef.chart.dimensions)]);
  }
  function updateChartLabelSettings(chartDefinition, oChartProperties) {
    switch (chartDefinition.chartType) {
      case "Donut":
        // Show data labels, do not show axis titles
        oChartProperties.categoryAxis = {
          title: {
            visible: false
          }
        };
        oChartProperties.valueAxis = {
          title: {
            visible: false
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.plotArea.dataLabel = {
          visible: true,
          type: "value",
          formatString: "ShortFloat_MFD2"
        };
        break;
      case "bubble":
        // Show axis title, bubble size legend, do not show data labels
        oChartProperties.valueAxis = {
          title: {
            visible: true
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.valueAxis2 = {
          title: {
            visible: true
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.legendGroup = {
          layout: {
            position: "bottom",
            alignment: "topLeft"
          }
        };
        oChartProperties.sizeLegend = {
          visible: true
        };
        oChartProperties.plotArea.dataLabel = {
          visible: false
        };
        break;
      case "scatter":
        // Do not show data labels and axis titles
        oChartProperties.valueAxis = {
          title: {
            visible: false
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.valueAxis2 = {
          title: {
            visible: false
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.plotArea.dataLabel = {
          visible: false
        };
        break;
      default:
        // Do not show data labels and axis titles
        oChartProperties.categoryAxis = {
          title: {
            visible: false
          }
        };
        oChartProperties.valueAxis = {
          title: {
            visible: false
          },
          label: {
            formatString: "ShortFloat"
          }
        };
        oChartProperties.plotArea.dataLabel = {
          visible: false
        };
    }
  }
  function filterMap(aObjects, aRoles) {
    if (aRoles && aRoles.length) {
      return aObjects.filter(dimension => {
        return aRoles.indexOf(dimension.role) >= 0;
      }).map(dimension => {
        return dimension.label;
      });
    } else {
      return aObjects.map(dimension => {
        return dimension.label;
      });
    }
  }
  function getScatterBubbleChartFeeds(chartDefinition) {
    const axis1Measures = filterMap(chartDefinition.measures, ["Axis1"]);
    const axis2Measures = filterMap(chartDefinition.measures, ["Axis2"]);
    const axis3Measures = filterMap(chartDefinition.measures, ["Axis3"]);
    const otherMeasures = filterMap(chartDefinition.measures, [undefined]);
    const seriesDimensions = filterMap(chartDefinition.dimensions, ["Series"]);

    // Get the first dimension with role "Category" for the shape
    const shapeDimension = chartDefinition.dimensions.find(dimension => {
      return dimension.role === "Category";
    });

    // Measure for the x-Axis : first measure for Axis1, or for Axis2 if not found, or for Axis3 if not found
    const xMeasure = axis1Measures.shift() || axis2Measures.shift() || axis3Measures.shift() || otherMeasures.shift() || "";
    // Measure for the y-Axis : first measure for Axis2, or second measure for Axis1 if not found, or first measure for Axis3 if not found
    const yMeasure = axis2Measures.shift() || axis1Measures.shift() || axis3Measures.shift() || otherMeasures.shift() || "";
    const res = [{
      uid: "valueAxis",
      type: "Measure",
      values: [xMeasure]
    }, {
      uid: "valueAxis2",
      type: "Measure",
      values: [yMeasure]
    }];
    if (chartDefinition.chartType === "bubble") {
      // Measure for the size of the bubble: first measure for Axis3, or remaining measure for Axis1/Axis2 if not found
      const sizeMeasure = axis3Measures.shift() || axis1Measures.shift() || axis2Measures.shift() || otherMeasures.shift() || "";
      res.push({
        uid: "bubbleWidth",
        type: "Measure",
        values: [sizeMeasure]
      });
    }

    // Color (optional)
    if (seriesDimensions.length) {
      res.push({
        uid: "color",
        type: "Dimension",
        values: seriesDimensions
      });
    }
    // Shape (optional)
    if (shapeDimension) {
      res.push({
        uid: "shape",
        type: "Dimension",
        values: [shapeDimension.label]
      });
    }
    return res;
  }
  function getChartFeeds(chartDefinition) {
    let res;
    switch (chartDefinition.chartType) {
      case "Donut":
        res = [{
          uid: "size",
          type: "Measure",
          values: filterMap(chartDefinition.measures)
        }, {
          uid: "color",
          type: "Dimension",
          values: filterMap(chartDefinition.dimensions)
        }];
        break;
      case "bubble":
      case "scatter":
        res = getScatterBubbleChartFeeds(chartDefinition);
        break;
      case "vertical_bullet":
        res = [{
          uid: "actualValues",
          type: "Measure",
          values: filterMap(chartDefinition.measures, [undefined, "Axis1"])
        }, {
          uid: "targetValues",
          type: "Measure",
          values: filterMap(chartDefinition.measures, ["Axis2"])
        }, {
          uid: "categoryAxis",
          type: "Dimension",
          values: filterMap(chartDefinition.dimensions, [undefined, "Category"])
        }, {
          uid: "color",
          type: "Dimension",
          values: filterMap(chartDefinition.dimensions, ["Series"])
        }];
        break;
      default:
        res = [{
          uid: "valueAxis",
          type: "Measure",
          values: filterMap(chartDefinition.measures)
        }, {
          uid: "categoryAxis",
          type: "Dimension",
          values: filterMap(chartDefinition.dimensions, [undefined, "Category"])
        }, {
          uid: "color",
          type: "Dimension",
          values: filterMap(chartDefinition.dimensions, ["Series"])
        }];
    }
    return res;
  }
  function getNavigationParameters(navInfo, oShellService) {
    if (navInfo.semanticObject) {
      if (navInfo.action) {
        // Action is already specified: check if it's available in the shell
        return oShellService.getLinks({
          semanticObject: navInfo.semanticObject,
          action: navInfo.action
        }).then(aLinks => {
          return aLinks.length ? {
            semanticObject: navInfo.semanticObject,
            action: navInfo.action
          } : undefined;
        });
      } else {
        // We get the primary intent from the shell
        return oShellService.getPrimaryIntent(navInfo.semanticObject).then(oLink => {
          if (!oLink) {
            // No primary intent...
            return undefined;
          }

          // Check that the primary intent is not part of the unavailable actions
          const oInfo = oShellService.parseShellHash(oLink.intent);
          return navInfo.unavailableActions && navInfo.unavailableActions.indexOf(oInfo.action) >= 0 ? undefined : {
            semanticObject: oInfo.semanticObject,
            action: oInfo.action
          };
        });
      }
    } else {
      // Outbound navigation specified in the manifest
      return navInfo.outboundNavigation ? Promise.resolve({
        outbound: navInfo.outboundNavigation
      }) : Promise.resolve(undefined);
    }
  }

  /**
   * @class A controller extension for managing the KPIs in an analytical list page
   * @name sap.fe.core.controllerextensions.KPIManagement
   * @hideconstructor
   * @private
   * @since 1.93.0
   */
  let KPIManagementControllerExtension = (_dec = defineUI5Class("sap.fe.core.controllerextensions.KPIManagement"), _dec2 = methodOverride(), _dec3 = methodOverride(), _dec4 = publicExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(KPIManagementControllerExtension, _ControllerExtension);
    function KPIManagementControllerExtension() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = KPIManagementControllerExtension.prototype;
    /**
     * Creates the card manifest for a KPI definition and stores it in a JSON model.
     *
     * @param kpiDefinition The KPI definition
     * @param oKPIModel The JSON model in which the manifest will be stored
     */
    _proto.initCardManifest = function initCardManifest(kpiDefinition, oKPIModel) {
      var _kpiDefinition$select;
      const oCardManifest = {
        "sap.app": {
          id: "sap.fe",
          type: "card"
        },
        "sap.ui": {
          technology: "UI5"
        },
        "sap.card": {
          type: "Analytical",
          data: {
            json: {}
          },
          header: {
            type: "Numeric",
            title: kpiDefinition.datapoint.title,
            subTitle: kpiDefinition.datapoint.description,
            unitOfMeasurement: "{mainUnit}",
            mainIndicator: {
              number: "{mainValueNoScale}",
              unit: "{mainValueScale}",
              state: "{mainState}",
              trend: "{trend}"
            }
          },
          content: {
            minHeight: "25rem",
            chartProperties: {
              plotArea: {},
              title: {
                visible: true,
                alignment: "left"
              }
            },
            data: {
              path: "/chartData"
            }
          }
        }
      };

      // Add side indicators in the card header if a target is defined for the KPI
      if (kpiDefinition.datapoint.targetPath || kpiDefinition.datapoint.targetValue !== undefined) {
        const resBundle = Core.getLibraryResourceBundle("sap.fe.core");
        oCardManifest["sap.card"].header.sideIndicators = [{
          title: resBundle.getText("C_KPICARD_INDICATOR_TARGET"),
          number: "{targetNumber}",
          unit: "{targetUnit}"
        }, {
          title: resBundle.getText("C_KPICARD_INDICATOR_DEVIATION"),
          number: "{deviationNumber}",
          unit: "%"
        }];
      }

      // Details of the card: filter descriptions
      if ((_kpiDefinition$select = kpiDefinition.selectionVariantFilterDefinitions) !== null && _kpiDefinition$select !== void 0 && _kpiDefinition$select.length) {
        const aDescriptions = [];
        kpiDefinition.selectionVariantFilterDefinitions.forEach(filterDefinition => {
          const desc = getFilterStringFromDefinition(filterDefinition);
          if (desc) {
            aDescriptions.push(desc);
          }
        });
        if (aDescriptions.length) {
          oCardManifest["sap.card"].header.details = aDescriptions.join(", ");
        }
      }

      // Chart settings: type, title, dimensions and measures in the manifest
      oCardManifest["sap.card"].content.chartType = kpiDefinition.chart.chartType;
      updateChartLabelSettings(kpiDefinition.chart, oCardManifest["sap.card"].content.chartProperties);
      oCardManifest["sap.card"].content.chartProperties.title.text = formatChartTitle(kpiDefinition);
      oCardManifest["sap.card"].content.dimensions = kpiDefinition.chart.dimensions.map(dimension => {
        return {
          label: dimension.label,
          value: `{${dimension.name}}`
        };
      });
      oCardManifest["sap.card"].content.measures = kpiDefinition.chart.measures.map(measure => {
        return {
          label: measure.label,
          value: `{${measure.name}}`
        };
      });
      oCardManifest["sap.card"].content.feeds = getChartFeeds(kpiDefinition.chart);
      oKPIModel.setProperty(`/${kpiDefinition.id}`, {
        manifest: oCardManifest
      });
    };
    _proto.initNavigationInfo = function initNavigationInfo(kpiDefinition, oKPIModel, oShellService) {
      // Add navigation
      if (kpiDefinition.navigation) {
        return getNavigationParameters(kpiDefinition.navigation, oShellService).then(oNavInfo => {
          if (oNavInfo) {
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/header/actions`, [{
              type: "Navigation",
              parameters: oNavInfo
            }]);
          }
        });
      } else {
        return Promise.resolve();
      }
    };
    _proto.onInit = function onInit() {
      var _getPageModel;
      this.aKPIDefinitions = (_getPageModel = this.getView().getController()._getPageModel()) === null || _getPageModel === void 0 ? void 0 : _getPageModel.getProperty("/kpiDefinitions");
      if (this.aKPIDefinitions && this.aKPIDefinitions.length) {
        const oView = this.getView();
        const oAppComponent = oView.getController().getAppComponent();

        // Create a JSON model to store KPI data
        const oKPIModel = new JSONModel();
        oView.setModel(oKPIModel, "kpiModel");
        this.aKPIDefinitions.forEach(kpiDefinition => {
          // Create the manifest for the KPI card and store it in the KPI model
          this.initCardManifest(kpiDefinition, oKPIModel);

          // Set the navigation information in the manifest
          this.initNavigationInfo(kpiDefinition, oKPIModel, oAppComponent.getShellServices()).catch(function (err) {
            Log.error(err);
          });

          // Load tag data for the KPI
          this.loadKPITagData(kpiDefinition, oAppComponent.getModel(), oKPIModel).catch(function (err) {
            Log.error(err);
          });
        });
      }
    };
    _proto.onExit = function onExit() {
      const oKPIModel = this.getView().getModel("kpiModel");
      if (oKPIModel) {
        oKPIModel.destroy();
      }
    };
    _proto.updateDatapointValueAndCurrency = function updateDatapointValueAndCurrency(kpiDefinition, kpiContext, oKPIModel) {
      var _kpiDefinition$datapo, _kpiDefinition$datapo2, _kpiDefinition$datapo3;
      const currentLocale = new Locale(sap.ui.getCore().getConfiguration().getLanguage());
      const rawUnit = (_kpiDefinition$datapo = kpiDefinition.datapoint.unit) !== null && _kpiDefinition$datapo !== void 0 && _kpiDefinition$datapo.isPath ? kpiContext.getProperty(kpiDefinition.datapoint.unit.value) : (_kpiDefinition$datapo2 = kpiDefinition.datapoint.unit) === null || _kpiDefinition$datapo2 === void 0 ? void 0 : _kpiDefinition$datapo2.value;
      const isPercentage = ((_kpiDefinition$datapo3 = kpiDefinition.datapoint.unit) === null || _kpiDefinition$datapo3 === void 0 ? void 0 : _kpiDefinition$datapo3.isCurrency) === false && rawUnit === "%";

      // /////////////////////
      // Main KPI value
      const rawValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.propertyPath));

      // Value formatted with a scale
      const kpiValue = NumberFormat.getFloatInstance({
        style: isPercentage ? undefined : "short",
        minFractionDigits: 0,
        maxFractionDigits: 1,
        showScale: !isPercentage
      }, currentLocale).format(rawValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValue`, kpiValue);

      // Value without a scale
      const kpiValueUnscaled = NumberFormat.getFloatInstance({
        maxFractionDigits: 2,
        showScale: false,
        groupingEnabled: true
      }, currentLocale).format(rawValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueUnscaled`, kpiValueUnscaled);

      // Value formatted with the scale omitted
      const kpiValueNoScale = NumberFormat.getFloatInstance({
        style: isPercentage ? undefined : "short",
        minFractionDigits: 0,
        maxFractionDigits: 1,
        showScale: false
      }, currentLocale).format(rawValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueNoScale`, kpiValueNoScale);

      // Scale of the value
      const kpiValueScale = NumberFormat.getFloatInstance({
        style: isPercentage ? undefined : "short",
        decimals: 0,
        maxIntegerDigits: 0,
        showScale: true
      }, currentLocale).format(rawValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueScale`, kpiValueScale);

      // /////////////////////
      // Unit or currency
      if (kpiDefinition.datapoint.unit && rawUnit) {
        if (kpiDefinition.datapoint.unit.isCurrency) {
          oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainUnit`, rawUnit);
        } else {
          // In case of unit of measure, we have to format it properly
          const kpiUnit = NumberFormat.getUnitInstance({
            showNumber: false
          }, currentLocale).format(rawValue, rawUnit);
          oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainUnit`, kpiUnit);
        }
      }
    };
    _proto.updateDatapointCriticality = function updateDatapointCriticality(kpiDefinition, kpiContext, oKPIModel) {
      const rawValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.propertyPath));
      let criticalityValue = MessageType.None;
      if (kpiDefinition.datapoint.criticalityValue) {
        // Criticality is a fixed value
        criticalityValue = kpiDefinition.datapoint.criticalityValue;
      } else if (kpiDefinition.datapoint.criticalityPath) {
        // Criticality comes from another property (via a path)
        criticalityValue = MessageTypeFromCriticality[kpiContext.getProperty(kpiDefinition.datapoint.criticalityPath)] || MessageType.None;
      } else if (kpiDefinition.datapoint.criticalityCalculationThresholds && kpiDefinition.datapoint.criticalityCalculationMode) {
        // Criticality calculation
        switch (kpiDefinition.datapoint.criticalityCalculationMode) {
          case "UI.ImprovementDirectionType/Target":
            criticalityValue = messageTypeFromTargetCalculation(rawValue, kpiDefinition.datapoint.criticalityCalculationThresholds);
            break;
          case "UI.ImprovementDirectionType/Minimize":
            criticalityValue = messageTypeFromMinimizeCalculation(rawValue, kpiDefinition.datapoint.criticalityCalculationThresholds);
            break;
          case "UI.ImprovementDirectionType/Maximize":
          default:
            criticalityValue = messageTypeFromMaximizeCalculation(rawValue, kpiDefinition.datapoint.criticalityCalculationThresholds);
            break;
        }
      }
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainCriticality`, criticalityValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainState`, ValueColorFromMessageType[criticalityValue] || "None");
    };
    _proto.updateDatapointTrend = function updateDatapointTrend(kpiDefinition, kpiContext, oKPIModel) {
      const rawValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.propertyPath));
      let trendValue = "None";
      if (kpiDefinition.datapoint.trendValue) {
        // Trend is a fixed value
        trendValue = kpiDefinition.datapoint.trendValue;
      } else if (kpiDefinition.datapoint.trendPath) {
        // Trend comes from another property via a path
        trendValue = deviationIndicatorFromTrendType(kpiContext.getProperty(kpiDefinition.datapoint.trendPath));
      } else if (kpiDefinition.datapoint.trendCalculationReferenceValue !== undefined || kpiDefinition.datapoint.trendCalculationReferencePath) {
        // Calculated trend
        let trendReferenceValue;
        if (kpiDefinition.datapoint.trendCalculationReferenceValue !== undefined) {
          trendReferenceValue = kpiDefinition.datapoint.trendCalculationReferenceValue;
        } else {
          trendReferenceValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.trendCalculationReferencePath || ""));
        }
        trendValue = deviationIndicatorFromCalculation(rawValue, trendReferenceValue, !!kpiDefinition.datapoint.trendCalculationIsRelative, kpiDefinition.datapoint.trendCalculationTresholds);
      }
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/trend`, trendValue);
    };
    _proto.updateTargetValue = function updateTargetValue(kpiDefinition, kpiContext, oKPIModel) {
      if (kpiDefinition.datapoint.targetValue === undefined && kpiDefinition.datapoint.targetPath === undefined) {
        return; // No target set for the KPI
      }

      const rawValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.propertyPath));
      const currentLocale = new Locale(sap.ui.getCore().getConfiguration().getLanguage());
      let targetRawValue;
      if (kpiDefinition.datapoint.targetValue !== undefined) {
        targetRawValue = kpiDefinition.datapoint.targetValue;
      } else {
        targetRawValue = Number.parseFloat(kpiContext.getProperty(kpiDefinition.datapoint.targetPath || ""));
      }
      const deviationRawValue = targetRawValue !== 0 ? (rawValue - targetRawValue) / targetRawValue * 100 : undefined;

      // Formatting
      const targetValue = NumberFormat.getFloatInstance({
        style: "short",
        minFractionDigits: 0,
        maxFractionDigits: 1,
        showScale: false
      }, currentLocale).format(targetRawValue);
      const targetScale = NumberFormat.getFloatInstance({
        style: "short",
        decimals: 0,
        maxIntegerDigits: 0,
        showScale: true
      }, currentLocale).format(targetRawValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/targetNumber`, targetValue);
      oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/targetUnit`, targetScale);
      if (deviationRawValue !== undefined) {
        const deviationValue = NumberFormat.getFloatInstance({
          minFractionDigits: 0,
          maxFractionDigits: 1,
          showScale: false
        }, currentLocale).format(deviationRawValue);
        oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/deviationNumber`, deviationValue);
      } else {
        oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/deviationNumber`, "N/A");
      }
    }

    /**
     * Loads tag data for a KPI, and stores it in the JSON KPI model.
     *
     * @param kpiDefinition The definition of the KPI.
     * @param oMainModel The model used to load the data.
     * @param oKPIModel The JSON model where the data will be stored
     * @param loadFull If not true, loads only data for the KPI tag
     * @returns The promise that is resolved when data is loaded.
     */;
    _proto.loadKPITagData = function loadKPITagData(kpiDefinition, oMainModel, oKPIModel, loadFull) {
      var _kpiDefinition$datapo4, _kpiDefinition$select2;
      // If loadFull=false, then we're just loading data for the tag and we use the "$auto.LongRunners" groupID
      // If loadFull=true, we're loading data for the whole KPI (tag + card) and we use the "$auto.Workers" groupID
      const oListBinding = loadFull ? oMainModel.bindList(`/${kpiDefinition.entitySet}`, undefined, undefined, undefined, {
        $$groupId: "$auto.Workers"
      }) : oMainModel.bindList(`/${kpiDefinition.entitySet}`, undefined, undefined, undefined, {
        $$groupId: "$auto.LongRunners"
      });
      const oAggregate = {};

      // Main value + currency/unit
      if ((_kpiDefinition$datapo4 = kpiDefinition.datapoint.unit) !== null && _kpiDefinition$datapo4 !== void 0 && _kpiDefinition$datapo4.isPath) {
        oAggregate[kpiDefinition.datapoint.propertyPath] = {
          unit: kpiDefinition.datapoint.unit.value
        };
      } else {
        oAggregate[kpiDefinition.datapoint.propertyPath] = {};
      }

      // Property for criticality
      if (kpiDefinition.datapoint.criticalityPath) {
        oAggregate[kpiDefinition.datapoint.criticalityPath] = {};
      }

      // Properties for trend and trend calculation
      if (loadFull) {
        if (kpiDefinition.datapoint.trendPath) {
          oAggregate[kpiDefinition.datapoint.trendPath] = {};
        }
        if (kpiDefinition.datapoint.trendCalculationReferencePath) {
          oAggregate[kpiDefinition.datapoint.trendCalculationReferencePath] = {};
        }
        if (kpiDefinition.datapoint.targetPath) {
          oAggregate[kpiDefinition.datapoint.targetPath] = {};
        }
      }
      oListBinding.setAggregation({
        aggregate: oAggregate
      });

      // Manage SelectionVariant filters
      if ((_kpiDefinition$select2 = kpiDefinition.selectionVariantFilterDefinitions) !== null && _kpiDefinition$select2 !== void 0 && _kpiDefinition$select2.length) {
        const aFilters = kpiDefinition.selectionVariantFilterDefinitions.map(createFilterFromDefinition).filter(filter => {
          return filter !== undefined;
        });
        oListBinding.filter(aFilters);
      }
      return oListBinding.requestContexts(0, 1).then(aContexts => {
        if (aContexts.length) {
          var _kpiDefinition$datapo5, _kpiDefinition$datapo6;
          const rawUnit = (_kpiDefinition$datapo5 = kpiDefinition.datapoint.unit) !== null && _kpiDefinition$datapo5 !== void 0 && _kpiDefinition$datapo5.isPath ? aContexts[0].getProperty(kpiDefinition.datapoint.unit.value) : (_kpiDefinition$datapo6 = kpiDefinition.datapoint.unit) === null || _kpiDefinition$datapo6 === void 0 ? void 0 : _kpiDefinition$datapo6.value;
          if (kpiDefinition.datapoint.unit && !rawUnit) {
            // A unit/currency is defined, but its value is undefined --> multi-unit situation
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValue`, "*");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueUnscaled`, "*");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueNoScale`, "*");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainValueScale`, "");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainUnit`, undefined);
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainCriticality`, MessageType.None);
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/mainState`, "None");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/trend`, "None");
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/targetNumber`, undefined);
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/targetUnit`, undefined);
            oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/deviationNumber`, undefined);
          } else {
            this.updateDatapointValueAndCurrency(kpiDefinition, aContexts[0], oKPIModel);
            this.updateDatapointCriticality(kpiDefinition, aContexts[0], oKPIModel);
            if (loadFull) {
              this.updateDatapointTrend(kpiDefinition, aContexts[0], oKPIModel);
              this.updateTargetValue(kpiDefinition, aContexts[0], oKPIModel);
            }
          }
        }
      });
    }

    /**
     * Loads card data for a KPI, and stores it in the JSON KPI model.
     *
     * @param kpiDefinition The definition of the KPI.
     * @param oMainModel The model used to load the data.
     * @param oKPIModel The JSON model where the data will be stored
     * @returns The promise that is resolved when data is loaded.
     */;
    _proto.loadKPICardData = function loadKPICardData(kpiDefinition, oMainModel, oKPIModel) {
      var _kpiDefinition$select3;
      const oListBinding = oMainModel.bindList(`/${kpiDefinition.entitySet}`, undefined, undefined, undefined, {
        $$groupId: "$auto.Workers"
      });
      const oGroup = {};
      const oAggregate = {};
      kpiDefinition.chart.dimensions.forEach(dimension => {
        oGroup[dimension.name] = {};
      });
      kpiDefinition.chart.measures.forEach(measure => {
        oAggregate[measure.name] = {};
      });
      oListBinding.setAggregation({
        group: oGroup,
        aggregate: oAggregate
      });

      // Manage SelectionVariant filters
      if ((_kpiDefinition$select3 = kpiDefinition.selectionVariantFilterDefinitions) !== null && _kpiDefinition$select3 !== void 0 && _kpiDefinition$select3.length) {
        const aFilters = kpiDefinition.selectionVariantFilterDefinitions.map(createFilterFromDefinition).filter(filter => {
          return filter !== undefined;
        });
        oListBinding.filter(aFilters);
      }

      // Sorting
      if (kpiDefinition.chart.sortOrder) {
        oListBinding.sort(kpiDefinition.chart.sortOrder.map(sortInfo => {
          return new Sorter(sortInfo.name, sortInfo.descending);
        }));
      }
      return oListBinding.requestContexts(0, kpiDefinition.chart.maxItems).then(aContexts => {
        const chartData = aContexts.map(function (oContext) {
          const oData = {};
          kpiDefinition.chart.dimensions.forEach(dimension => {
            oData[dimension.name] = oContext.getProperty(dimension.name);
          });
          kpiDefinition.chart.measures.forEach(measure => {
            oData[measure.name] = oContext.getProperty(measure.name);
          });
          return oData;
        });
        oKPIModel.setProperty(`/${kpiDefinition.id}/manifest/sap.card/data/json/chartData`, chartData);
      });
    }

    /**
     * Gets the popover to display the KPI card
     * The popover and the contained card for the KPIs are created if necessary.
     * The popover is shared between all KPIs, so it's created only once.
     *
     * @param oKPITag The tag that triggered the popover opening.
     * @returns The shared popover as a promise.
     */;
    _proto.getPopover = function getPopover(oKPITag) {
      if (!this.oPopover) {
        return new Promise((resolve, reject) => {
          Core.loadLibrary("sap/ui/integration", {
            async: true
          }).then(() => {
            sap.ui.require(["sap/ui/integration/widgets/Card", "sap/ui/integration/Host"], (Card, Host) => {
              const oHost = new Host();
              oHost.attachAction(oEvent => {
                const sType = oEvent.getParameter("type");
                const oParams = oEvent.getParameter("parameters");
                if (sType === "Navigation") {
                  if (oParams.semanticObject) {
                    this.getView().getController()._intentBasedNavigation.navigate(oParams.semanticObject, oParams.action);
                  } else {
                    this.getView().getController()._intentBasedNavigation.navigateOutbound(oParams.outbound);
                  }
                }
              });
              this.oCard = new Card({
                width: "25rem",
                height: "auto"
              });
              this.oCard.setHost(oHost);
              this.oPopover = new Popover("kpi-Popover", {
                showHeader: false,
                placement: "Auto",
                content: [this.oCard]
              });
              oKPITag.addDependent(this.oPopover); // The first clicked tag gets the popover as dependent

              resolve(this.oPopover);
            });
          }).catch(function () {
            reject();
          });
        });
      } else {
        return Promise.resolve(this.oPopover);
      }
    };
    _proto.onKPIPressed = function onKPIPressed(oKPITag, kpiID) {
      const oKPIModel = oKPITag.getModel("kpiModel");
      if (this.aKPIDefinitions && this.aKPIDefinitions.length) {
        const kpiDefinition = this.aKPIDefinitions.find(function (oDef) {
          return oDef.id === kpiID;
        });
        if (kpiDefinition) {
          const oModel = oKPITag.getModel();
          const aPromises = [this.loadKPITagData(kpiDefinition, oModel, oKPIModel, true), this.loadKPICardData(kpiDefinition, oModel, oKPIModel), this.getPopover(oKPITag)];
          Promise.all(aPromises).then(aResults => {
            this.oCard.setManifest(oKPIModel.getProperty(`/${kpiID}/manifest`));
            this.oCard.refresh();
            const oPopover = aResults[2];
            oPopover.openBy(oKPITag, false);
          }).catch(err => {
            Log.error(err);
          });
        }
      }
    };
    return KPIManagementControllerExtension;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onExit", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onKPIPressed", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "onKPIPressed"), _class2.prototype)), _class2)) || _class);
  return KPIManagementControllerExtension;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/KPIManagement", ["sap/base/Log","sap/fe/core/formatters/TableFormatterTypes","sap/m/Popover","sap/ui/core/Core","sap/ui/core/format/DateFormat","sap/ui/core/format/NumberFormat","sap/ui/core/Locale","sap/ui/core/mvc/ControllerExtension","sap/ui/model/Filter","sap/ui/model/json/JSONModel","sap/ui/model/Sorter","../helpers/ClassSupport"],function(e,t,a,n,i,r,o,s,l,d,u,c){"use strict";var p,f,g,m,h,y;var P=c.publicExtension;var b=c.methodOverride;var v=c.defineUI5Class;var D=t.MessageType;function C(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;I(e,t)}function I(e,t){I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,a){t.__proto__=a;return t};return I(e,t)}function N(e,t,a,n,i){var r={};Object.keys(n).forEach(function(e){r[e]=n[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=a.slice().reverse().reduce(function(a,n){return n(e,t,a)||a},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}const $={1:D.Error,2:D.Warning,3:D.Success,5:D.Information};const T={Error:"Error",Warning:"Critical",Success:"Good",Information:"None",None:"None"};function S(e,t){let a;if(t[0]!==undefined&&t[0]!==null&&e<t[0]){a=D.Error}else if(t[1]!==undefined&&t[1]!==null&&e<t[1]){a=D.Warning}else if(t[2]!==undefined&&t[2]!==null&&e<t[2]){a=D.None}else if(t[5]!==undefined&&t[5]!==null&&e>t[5]){a=D.Error}else if(t[4]!==undefined&&t[4]!==null&&e>t[4]){a=D.Warning}else if(t[3]!==undefined&&t[3]!==null&&e>t[3]){a=D.None}else{a=D.Success}return a}function j(e,t){let a;if(t[2]!==undefined&&t[2]!==null&&e>t[2]){a=D.Error}else if(t[1]!==undefined&&t[1]!==null&&e>t[1]){a=D.Warning}else if(t[0]!==undefined&&t[0]!==null&&e>t[0]){a=D.None}else{a=D.Success}return a}function w(e,t){let a;if(t[0]!==undefined&&t[0]!==null&&e<t[0]){a=D.Error}else if(t[1]!==undefined&&t[1]!==null&&e<t[1]){a=D.Warning}else if(t[2]!==undefined&&t[2]!==null&&e<t[2]){a=D.None}else{a=D.Success}return a}function x(e){let t;switch(e){case 1:case"1":case 2:case"2":t="Up";break;case 4:case"4":case 5:case"5":t="Down";break;default:t="None"}return t}function A(e,t,a,n){let i;if(!n||a&&!t){return"None"}const r=a?(e-t)/t:e-t;if(n[0]!==undefined&&n[0]!==null&&r<=n[0]){i="Down"}else if(n[1]!==undefined&&n[1]!==null&&r<=n[1]){i="Down"}else if(n[3]!==undefined&&n[3]!==null&&r>=n[3]){i="Up"}else if(n[2]!==undefined&&n[2]!==null&&r>=n[2]){i="Up"}else{i="None"}return i}function F(e){if(e.ranges.length===0){return undefined}else if(e.ranges.length===1){return new l(e.propertyPath,e.ranges[0].operator,e.ranges[0].rangeLow,e.ranges[0].rangeHigh)}else{const t=e.ranges.map(t=>new l(e.propertyPath,t.operator,t.rangeLow,t.rangeHigh));return new l({filters:t,and:false})}}function V(e){const t=new o(sap.ui.getCore().getConfiguration().getLanguage());const a=n.getLibraryResourceBundle("sap.fe.core");const r=i.getDateInstance({style:"medium"},t);function s(t){const n=e.propertyType.indexOf("Edm.Date")===0?r.format(new Date(t.rangeLow)):t.rangeLow;const i=e.propertyType.indexOf("Edm.Date")===0?r.format(new Date(t.rangeHigh)):t.rangeHigh;switch(t.operator){case"BT":return`[${n} - ${i}]`;case"Contains":return`*${n}*`;case"GE":return`≥${n}`;case"GT":return`>${n}`;case"LE":return`≤${n}`;case"LT":return`<${n}`;case"NB":return a.getText("C_KPICARD_FILTERSTRING_NOT",[`[${n} - ${i}]`]);case"NE":return`≠${n}`;case"NotContains":return a.getText("C_KPICARD_FILTERSTRING_NOT",[`*${n}*`]);case"EQ":default:return n}}if(e.ranges.length===0){return""}else if(e.ranges.length===1){return s(e.ranges[0])}else{return`(${e.ranges.map(s).join(",")})`}}function O(e){const t=n.getLibraryResourceBundle("sap.fe.core");function a(e){if(e.length===0){return""}else if(e.length===1){return e[0].label}else{let a=e[0].label;for(let t=1;t<e.length-1;t++){a+=`, ${e[t].label}`}return t.getText("C_KPICARD_ITEMSLIST",[a,e[e.length-1].label])}}return t.getText("C_KPICARD_CHARTTITLE",[a(e.chart.measures),a(e.chart.dimensions)])}function E(e,t){switch(e.chartType){case"Donut":t.categoryAxis={title:{visible:false}};t.valueAxis={title:{visible:false},label:{formatString:"ShortFloat"}};t.plotArea.dataLabel={visible:true,type:"value",formatString:"ShortFloat_MFD2"};break;case"bubble":t.valueAxis={title:{visible:true},label:{formatString:"ShortFloat"}};t.valueAxis2={title:{visible:true},label:{formatString:"ShortFloat"}};t.legendGroup={layout:{position:"bottom",alignment:"topLeft"}};t.sizeLegend={visible:true};t.plotArea.dataLabel={visible:false};break;case"scatter":t.valueAxis={title:{visible:false},label:{formatString:"ShortFloat"}};t.valueAxis2={title:{visible:false},label:{formatString:"ShortFloat"}};t.plotArea.dataLabel={visible:false};break;default:t.categoryAxis={title:{visible:false}};t.valueAxis={title:{visible:false},label:{formatString:"ShortFloat"}};t.plotArea.dataLabel={visible:false}}}function L(e,t){if(t&&t.length){return e.filter(e=>t.indexOf(e.role)>=0).map(e=>e.label)}else{return e.map(e=>e.label)}}function M(e){const t=L(e.measures,["Axis1"]);const a=L(e.measures,["Axis2"]);const n=L(e.measures,["Axis3"]);const i=L(e.measures,[undefined]);const r=L(e.dimensions,["Series"]);const o=e.dimensions.find(e=>e.role==="Category");const s=t.shift()||a.shift()||n.shift()||i.shift()||"";const l=a.shift()||t.shift()||n.shift()||i.shift()||"";const d=[{uid:"valueAxis",type:"Measure",values:[s]},{uid:"valueAxis2",type:"Measure",values:[l]}];if(e.chartType==="bubble"){const e=n.shift()||t.shift()||a.shift()||i.shift()||"";d.push({uid:"bubbleWidth",type:"Measure",values:[e]})}if(r.length){d.push({uid:"color",type:"Dimension",values:r})}if(o){d.push({uid:"shape",type:"Dimension",values:[o.label]})}return d}function R(e){let t;switch(e.chartType){case"Donut":t=[{uid:"size",type:"Measure",values:L(e.measures)},{uid:"color",type:"Dimension",values:L(e.dimensions)}];break;case"bubble":case"scatter":t=M(e);break;case"vertical_bullet":t=[{uid:"actualValues",type:"Measure",values:L(e.measures,[undefined,"Axis1"])},{uid:"targetValues",type:"Measure",values:L(e.measures,["Axis2"])},{uid:"categoryAxis",type:"Dimension",values:L(e.dimensions,[undefined,"Category"])},{uid:"color",type:"Dimension",values:L(e.dimensions,["Series"])}];break;default:t=[{uid:"valueAxis",type:"Measure",values:L(e.measures)},{uid:"categoryAxis",type:"Dimension",values:L(e.dimensions,[undefined,"Category"])},{uid:"color",type:"Dimension",values:L(e.dimensions,["Series"])}]}return t}function _(e,t){if(e.semanticObject){if(e.action){return t.getLinks({semanticObject:e.semanticObject,action:e.action}).then(t=>t.length?{semanticObject:e.semanticObject,action:e.action}:undefined)}else{return t.getPrimaryIntent(e.semanticObject).then(a=>{if(!a){return undefined}const n=t.parseShellHash(a.intent);return e.unavailableActions&&e.unavailableActions.indexOf(n.action)>=0?undefined:{semanticObject:n.semanticObject,action:n.action}})}}else{return e.outboundNavigation?Promise.resolve({outbound:e.outboundNavigation}):Promise.resolve(undefined)}}let K=(p=v("sap.fe.core.controllerextensions.KPIManagement"),f=b(),g=b(),m=P(),p(h=(y=function(t){C(i,t);function i(){return t.apply(this,arguments)||this}var s=i.prototype;s.initCardManifest=function e(t,a){var i;const r={"sap.app":{id:"sap.fe",type:"card"},"sap.ui":{technology:"UI5"},"sap.card":{type:"Analytical",data:{json:{}},header:{type:"Numeric",title:t.datapoint.title,subTitle:t.datapoint.description,unitOfMeasurement:"{mainUnit}",mainIndicator:{number:"{mainValueNoScale}",unit:"{mainValueScale}",state:"{mainState}",trend:"{trend}"}},content:{minHeight:"25rem",chartProperties:{plotArea:{},title:{visible:true,alignment:"left"}},data:{path:"/chartData"}}}};if(t.datapoint.targetPath||t.datapoint.targetValue!==undefined){const e=n.getLibraryResourceBundle("sap.fe.core");r["sap.card"].header.sideIndicators=[{title:e.getText("C_KPICARD_INDICATOR_TARGET"),number:"{targetNumber}",unit:"{targetUnit}"},{title:e.getText("C_KPICARD_INDICATOR_DEVIATION"),number:"{deviationNumber}",unit:"%"}]}if((i=t.selectionVariantFilterDefinitions)!==null&&i!==void 0&&i.length){const e=[];t.selectionVariantFilterDefinitions.forEach(t=>{const a=V(t);if(a){e.push(a)}});if(e.length){r["sap.card"].header.details=e.join(", ")}}r["sap.card"].content.chartType=t.chart.chartType;E(t.chart,r["sap.card"].content.chartProperties);r["sap.card"].content.chartProperties.title.text=O(t);r["sap.card"].content.dimensions=t.chart.dimensions.map(e=>({label:e.label,value:`{${e.name}}`}));r["sap.card"].content.measures=t.chart.measures.map(e=>({label:e.label,value:`{${e.name}}`}));r["sap.card"].content.feeds=R(t.chart);a.setProperty(`/${t.id}`,{manifest:r})};s.initNavigationInfo=function e(t,a,n){if(t.navigation){return _(t.navigation,n).then(e=>{if(e){a.setProperty(`/${t.id}/manifest/sap.card/header/actions`,[{type:"Navigation",parameters:e}])}})}else{return Promise.resolve()}};s.onInit=function t(){var a;this.aKPIDefinitions=(a=this.getView().getController()._getPageModel())===null||a===void 0?void 0:a.getProperty("/kpiDefinitions");if(this.aKPIDefinitions&&this.aKPIDefinitions.length){const t=this.getView();const a=t.getController().getAppComponent();const n=new d;t.setModel(n,"kpiModel");this.aKPIDefinitions.forEach(t=>{this.initCardManifest(t,n);this.initNavigationInfo(t,n,a.getShellServices()).catch(function(t){e.error(t)});this.loadKPITagData(t,a.getModel(),n).catch(function(t){e.error(t)})})}};s.onExit=function e(){const t=this.getView().getModel("kpiModel");if(t){t.destroy()}};s.updateDatapointValueAndCurrency=function e(t,a,n){var i,s,l;const d=new o(sap.ui.getCore().getConfiguration().getLanguage());const u=(i=t.datapoint.unit)!==null&&i!==void 0&&i.isPath?a.getProperty(t.datapoint.unit.value):(s=t.datapoint.unit)===null||s===void 0?void 0:s.value;const c=((l=t.datapoint.unit)===null||l===void 0?void 0:l.isCurrency)===false&&u==="%";const p=Number.parseFloat(a.getProperty(t.datapoint.propertyPath));const f=r.getFloatInstance({style:c?undefined:"short",minFractionDigits:0,maxFractionDigits:1,showScale:!c},d).format(p);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValue`,f);const g=r.getFloatInstance({maxFractionDigits:2,showScale:false,groupingEnabled:true},d).format(p);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueUnscaled`,g);const m=r.getFloatInstance({style:c?undefined:"short",minFractionDigits:0,maxFractionDigits:1,showScale:false},d).format(p);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueNoScale`,m);const h=r.getFloatInstance({style:c?undefined:"short",decimals:0,maxIntegerDigits:0,showScale:true},d).format(p);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueScale`,h);if(t.datapoint.unit&&u){if(t.datapoint.unit.isCurrency){n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainUnit`,u)}else{const e=r.getUnitInstance({showNumber:false},d).format(p,u);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainUnit`,e)}}};s.updateDatapointCriticality=function e(t,a,n){const i=Number.parseFloat(a.getProperty(t.datapoint.propertyPath));let r=D.None;if(t.datapoint.criticalityValue){r=t.datapoint.criticalityValue}else if(t.datapoint.criticalityPath){r=$[a.getProperty(t.datapoint.criticalityPath)]||D.None}else if(t.datapoint.criticalityCalculationThresholds&&t.datapoint.criticalityCalculationMode){switch(t.datapoint.criticalityCalculationMode){case"UI.ImprovementDirectionType/Target":r=S(i,t.datapoint.criticalityCalculationThresholds);break;case"UI.ImprovementDirectionType/Minimize":r=j(i,t.datapoint.criticalityCalculationThresholds);break;case"UI.ImprovementDirectionType/Maximize":default:r=w(i,t.datapoint.criticalityCalculationThresholds);break}}n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainCriticality`,r);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainState`,T[r]||"None")};s.updateDatapointTrend=function e(t,a,n){const i=Number.parseFloat(a.getProperty(t.datapoint.propertyPath));let r="None";if(t.datapoint.trendValue){r=t.datapoint.trendValue}else if(t.datapoint.trendPath){r=x(a.getProperty(t.datapoint.trendPath))}else if(t.datapoint.trendCalculationReferenceValue!==undefined||t.datapoint.trendCalculationReferencePath){let e;if(t.datapoint.trendCalculationReferenceValue!==undefined){e=t.datapoint.trendCalculationReferenceValue}else{e=Number.parseFloat(a.getProperty(t.datapoint.trendCalculationReferencePath||""))}r=A(i,e,!!t.datapoint.trendCalculationIsRelative,t.datapoint.trendCalculationTresholds)}n.setProperty(`/${t.id}/manifest/sap.card/data/json/trend`,r)};s.updateTargetValue=function e(t,a,n){if(t.datapoint.targetValue===undefined&&t.datapoint.targetPath===undefined){return}const i=Number.parseFloat(a.getProperty(t.datapoint.propertyPath));const s=new o(sap.ui.getCore().getConfiguration().getLanguage());let l;if(t.datapoint.targetValue!==undefined){l=t.datapoint.targetValue}else{l=Number.parseFloat(a.getProperty(t.datapoint.targetPath||""))}const d=l!==0?(i-l)/l*100:undefined;const u=r.getFloatInstance({style:"short",minFractionDigits:0,maxFractionDigits:1,showScale:false},s).format(l);const c=r.getFloatInstance({style:"short",decimals:0,maxIntegerDigits:0,showScale:true},s).format(l);n.setProperty(`/${t.id}/manifest/sap.card/data/json/targetNumber`,u);n.setProperty(`/${t.id}/manifest/sap.card/data/json/targetUnit`,c);if(d!==undefined){const e=r.getFloatInstance({minFractionDigits:0,maxFractionDigits:1,showScale:false},s).format(d);n.setProperty(`/${t.id}/manifest/sap.card/data/json/deviationNumber`,e)}else{n.setProperty(`/${t.id}/manifest/sap.card/data/json/deviationNumber`,"N/A")}};s.loadKPITagData=function e(t,a,n,i){var r,o;const s=i?a.bindList(`/${t.entitySet}`,undefined,undefined,undefined,{$$groupId:"$auto.Workers"}):a.bindList(`/${t.entitySet}`,undefined,undefined,undefined,{$$groupId:"$auto.LongRunners"});const l={};if((r=t.datapoint.unit)!==null&&r!==void 0&&r.isPath){l[t.datapoint.propertyPath]={unit:t.datapoint.unit.value}}else{l[t.datapoint.propertyPath]={}}if(t.datapoint.criticalityPath){l[t.datapoint.criticalityPath]={}}if(i){if(t.datapoint.trendPath){l[t.datapoint.trendPath]={}}if(t.datapoint.trendCalculationReferencePath){l[t.datapoint.trendCalculationReferencePath]={}}if(t.datapoint.targetPath){l[t.datapoint.targetPath]={}}}s.setAggregation({aggregate:l});if((o=t.selectionVariantFilterDefinitions)!==null&&o!==void 0&&o.length){const e=t.selectionVariantFilterDefinitions.map(F).filter(e=>e!==undefined);s.filter(e)}return s.requestContexts(0,1).then(e=>{if(e.length){var a,r;const o=(a=t.datapoint.unit)!==null&&a!==void 0&&a.isPath?e[0].getProperty(t.datapoint.unit.value):(r=t.datapoint.unit)===null||r===void 0?void 0:r.value;if(t.datapoint.unit&&!o){n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValue`,"*");n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueUnscaled`,"*");n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueNoScale`,"*");n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainValueScale`,"");n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainUnit`,undefined);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainCriticality`,D.None);n.setProperty(`/${t.id}/manifest/sap.card/data/json/mainState`,"None");n.setProperty(`/${t.id}/manifest/sap.card/data/json/trend`,"None");n.setProperty(`/${t.id}/manifest/sap.card/data/json/targetNumber`,undefined);n.setProperty(`/${t.id}/manifest/sap.card/data/json/targetUnit`,undefined);n.setProperty(`/${t.id}/manifest/sap.card/data/json/deviationNumber`,undefined)}else{this.updateDatapointValueAndCurrency(t,e[0],n);this.updateDatapointCriticality(t,e[0],n);if(i){this.updateDatapointTrend(t,e[0],n);this.updateTargetValue(t,e[0],n)}}}})};s.loadKPICardData=function e(t,a,n){var i;const r=a.bindList(`/${t.entitySet}`,undefined,undefined,undefined,{$$groupId:"$auto.Workers"});const o={};const s={};t.chart.dimensions.forEach(e=>{o[e.name]={}});t.chart.measures.forEach(e=>{s[e.name]={}});r.setAggregation({group:o,aggregate:s});if((i=t.selectionVariantFilterDefinitions)!==null&&i!==void 0&&i.length){const e=t.selectionVariantFilterDefinitions.map(F).filter(e=>e!==undefined);r.filter(e)}if(t.chart.sortOrder){r.sort(t.chart.sortOrder.map(e=>new u(e.name,e.descending)))}return r.requestContexts(0,t.chart.maxItems).then(e=>{const a=e.map(function(e){const a={};t.chart.dimensions.forEach(t=>{a[t.name]=e.getProperty(t.name)});t.chart.measures.forEach(t=>{a[t.name]=e.getProperty(t.name)});return a});n.setProperty(`/${t.id}/manifest/sap.card/data/json/chartData`,a)})};s.getPopover=function e(t){if(!this.oPopover){return new Promise((e,i)=>{n.loadLibrary("sap/ui/integration",{async:true}).then(()=>{sap.ui.require(["sap/ui/integration/widgets/Card","sap/ui/integration/Host"],(n,i)=>{const r=new i;r.attachAction(e=>{const t=e.getParameter("type");const a=e.getParameter("parameters");if(t==="Navigation"){if(a.semanticObject){this.getView().getController()._intentBasedNavigation.navigate(a.semanticObject,a.action)}else{this.getView().getController()._intentBasedNavigation.navigateOutbound(a.outbound)}}});this.oCard=new n({width:"25rem",height:"auto"});this.oCard.setHost(r);this.oPopover=new a("kpi-Popover",{showHeader:false,placement:"Auto",content:[this.oCard]});t.addDependent(this.oPopover);e(this.oPopover)})}).catch(function(){i()})})}else{return Promise.resolve(this.oPopover)}};s.onKPIPressed=function t(a,n){const i=a.getModel("kpiModel");if(this.aKPIDefinitions&&this.aKPIDefinitions.length){const t=this.aKPIDefinitions.find(function(e){return e.id===n});if(t){const r=a.getModel();const o=[this.loadKPITagData(t,r,i,true),this.loadKPICardData(t,r,i),this.getPopover(a)];Promise.all(o).then(e=>{this.oCard.setManifest(i.getProperty(`/${n}/manifest`));this.oCard.refresh();const t=e[2];t.openBy(a,false)}).catch(t=>{e.error(t)})}}};return i}(s),N(y.prototype,"onInit",[f],Object.getOwnPropertyDescriptor(y.prototype,"onInit"),y.prototype),N(y.prototype,"onExit",[g],Object.getOwnPropertyDescriptor(y.prototype,"onExit"),y.prototype),N(y.prototype,"onKPIPressed",[m],Object.getOwnPropertyDescriptor(y.prototype,"onKPIPressed"),y.prototype),y))||h);return K},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/MassEdit-dbg", ["sap/base/Log", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/MassEditHelper", "sap/fe/core/helpers/ModelHelper", "sap/m/MessageBox", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "../CommonUtils"], function (Log, ClassSupport, MassEditHelper, ModelHelper, MessageBox, ControllerExtension, OverrideExecution, CommonUtils) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * @class Controller extension providing hooks for the mass edit in a table
   * @name sap.fe.core.controllerextensions.MassEdit
   * @hideconstructor
   * @private
   */
  let MassEdit = (_dec = defineUI5Class("sap.fe.core.controllerextensions.MassEdit"), _dec2 = publicExtension(), _dec3 = finalExtension(), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = privateExtension(), _dec7 = extensible(OverrideExecution.After), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(MassEdit, _ControllerExtension);
    function MassEdit() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = MassEdit.prototype;
    _proto.getMessageDetailForNonEditable = function getMessageDetailForNonEditable(oResourceBundle, typeName, typeNamePlural) {
      const sHeader = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER"),
        sReasonGroup = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON", [typeNamePlural]),
        sReasonDraft = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT", [typeName]),
        sReasonNonEditable = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE", [typeName]);
      return `<p><strong>${sHeader}</strong></p>\n` + (!!sReasonGroup && `<p>${sReasonGroup}</p>\n` + `<ul>` + (!!sReasonDraft && `<li>${sReasonDraft}</li>`) + (!!sReasonNonEditable && `<li>${sReasonNonEditable}</li>`) + `</ul>`);
    };
    _proto.getResourceText = function getResourceText(exp, control) {
      const resolvedText = exp && CommonUtils.getTranslatedTextFromExpBindingString(exp, control);
      return resolvedText && resolvedText.toLocaleLowerCase();
    };
    _proto._openConfirmDialog = function _openConfirmDialog(oTable, aContexts, iSelectedContexts) {
      const iUpdatableContexts = (aContexts || []).length;
      const view = this.getView();
      return new Promise(resolve => {
        view.getModel("sap.fe.i18n").getResourceBundle().then(oResourceBundle => {
          const sEditButton = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_BUTTON_TEXT"),
            sCancelButton = oResourceBundle.getText("C_COMMON_OBJECT_PAGE_CANCEL"),
            iNonEditable = iSelectedContexts - iUpdatableContexts,
            entityTypePath = oTable.data("entityType"),
            metaModel = oTable.getModel().getMetaModel(),
            headerInfoAnno = metaModel.getObject(`${entityTypePath}@com.sap.vocabularies.UI.v1.HeaderInfo`),
            typeName = headerInfoAnno && this.getResourceText(headerInfoAnno.TypeName, view) || oResourceBundle.getText("C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME"),
            typeNamePlural = headerInfoAnno && this.getResourceText(headerInfoAnno.TypeNamePlural, view) || oResourceBundle.getText("C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL"),
            sMessage = oResourceBundle.getText("C_MASS_EDIT_CONFIRM_MESSAGE", [iNonEditable, iSelectedContexts, iUpdatableContexts, typeNamePlural]),
            sPath = oTable.data("targetCollectionPath"),
            oMetaModel = oTable.getModel().getMetaModel(),
            bIsDraft = ModelHelper.isDraftSupported(oMetaModel, sPath),
            bDisplayMode = oTable.data("displayModePropertyBinding") === "true",
            sMessageDetail = bIsDraft && bDisplayMode && this.getMessageDetailForNonEditable(oResourceBundle, typeName, typeNamePlural);
          MessageBox.warning(sMessage, {
            details: sMessageDetail,
            actions: [sEditButton, sCancelButton],
            emphasizedAction: sEditButton,
            contentWidth: "100px",
            onClose: function (sSelection) {
              let aContextsForEdit = [];
              if (sSelection === sEditButton) {
                Log.info("Mass Edit: Confirmed to edit ", iUpdatableContexts.toString(), " selections.");
                aContextsForEdit = aContexts;
              } else if (sSelection === sCancelButton) {
                Log.info("Mass Edit: Cancelled.");
              }
              resolve(aContextsForEdit);
            }
          });
        }).catch(function (error) {
          Log.error(error);
        });
      });
    };
    _proto._confirmContexts = function _confirmContexts(oTable, aContexts) {
      const oInternalModelContext = oTable.getBindingContext("internal"),
        iSelectedContexts = +oInternalModelContext.getProperty("numberOfSelectedContexts") || 0;
      aContexts = aContexts || [];
      if (aContexts.length && aContexts.length !== iSelectedContexts) {
        return this._openConfirmDialog(oTable, aContexts, iSelectedContexts);
      }
      return Promise.resolve(aContexts);
    }

    /**
     * The following operations are performed by method openMassEditDialog:
     * => Opens the mass edit dialog.
     * => Implements the save and cancel functionality.
     * => Sets the runtime model to the dialog.
     * => Sets the static model's context to the dialog.
     *
     * @param oTable Instance of the table
     * @returns A promise that resolves on open of the mass edit dialog.
     * @private
     */;
    _proto.openMassEditDialog = function openMassEditDialog(oTable) {
      const oController = this.getView().getController(),
        pContextsForEdit = this.fetchContextsForEdit(oTable);
      return pContextsForEdit.then(this._confirmContexts.bind(this, oTable)).then(function (aContexts) {
        return aContexts && aContexts.length > 0 ? MassEditHelper.createDialog(oTable, aContexts, oController) : Promise.resolve();
      }).then(function (oDialog) {
        if (oDialog) {
          oTable.addDependent(oDialog);
          oDialog.open();
        }
      }).catch(function (oError) {
        Log.error("Mass Edit: Something went wrong in mass edit dialog creation.", oError);
      });
    }

    /**
     * Returns a promise that resolves to the contexts for mass edit.
     *
     * @function
     * @param oTable Table for mass edit.
     * @alias sap.fe.core.contrllerextensions.MassEdit#fetchContextsForEdit
     * @returns A promise to be resolved with an array of context(s) which should be considered for mass edit.
     * @private
     */;
    _proto.fetchContextsForEdit = function fetchContextsForEdit(oTable) {
      //To be overridden by the application
      const oInternalModelContext = oTable.getBindingContext("internal"),
        aSelectedContexts = oInternalModelContext.getProperty("updatableContexts") || [];
      return Promise.resolve(aSelectedContexts);
    };
    return MassEdit;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "getMessageDetailForNonEditable", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "getMessageDetailForNonEditable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "openMassEditDialog", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "openMassEditDialog"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "fetchContextsForEdit", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "fetchContextsForEdit"), _class2.prototype)), _class2)) || _class);
  return MassEdit;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/MassEdit", ["sap/base/Log","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/MassEditHelper","sap/fe/core/helpers/ModelHelper","sap/m/MessageBox","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","../CommonUtils"],function(e,t,o,n,i,r,s,a){"use strict";var l,c,p,u,g,E,d,_,f;var M=t.publicExtension;var C=t.privateExtension;var T=t.finalExtension;var S=t.extensible;var A=t.defineUI5Class;function D(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;h(e,t)}function h(e,t){h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return h(e,t)}function x(e,t,o,n,i){var r={};Object.keys(n).forEach(function(e){r[e]=n[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(e,t,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}let O=(l=A("sap.fe.core.controllerextensions.MassEdit"),c=M(),p=T(),u=M(),g=T(),E=C(),d=S(s.After),l(_=(f=function(t){D(r,t);function r(){return t.apply(this,arguments)||this}var s=r.prototype;s.getMessageDetailForNonEditable=function e(t,o,n){const i=t.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_HEADER"),r=t.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON",[n]),s=t.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_DRAFT",[o]),a=t.getText("C_MASS_EDIT_CONFIRM_MESSAGE_DETAIL_REASON_NON_EDITABLE",[o]);return`<p><strong>${i}</strong></p>\n`+(!!r&&`<p>${r}</p>\n`+`<ul>`+(!!s&&`<li>${s}</li>`)+(!!a&&`<li>${a}</li>`)+`</ul>`)};s.getResourceText=function e(t,o){const n=t&&a.getTranslatedTextFromExpBindingString(t,o);return n&&n.toLocaleLowerCase()};s._openConfirmDialog=function t(o,r,s){const a=(r||[]).length;const l=this.getView();return new Promise(t=>{l.getModel("sap.fe.i18n").getResourceBundle().then(c=>{const p=c.getText("C_MASS_EDIT_CONFIRM_BUTTON_TEXT"),u=c.getText("C_COMMON_OBJECT_PAGE_CANCEL"),g=s-a,E=o.data("entityType"),d=o.getModel().getMetaModel(),_=d.getObject(`${E}@com.sap.vocabularies.UI.v1.HeaderInfo`),f=_&&this.getResourceText(_.TypeName,l)||c.getText("C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME"),M=_&&this.getResourceText(_.TypeNamePlural,l)||c.getText("C_MASS_EDIT_DIALOG_DEFAULT_TYPENAME_PLURAL"),C=c.getText("C_MASS_EDIT_CONFIRM_MESSAGE",[g,s,a,M]),T=o.data("targetCollectionPath"),S=o.getModel().getMetaModel(),A=n.isDraftSupported(S,T),D=o.data("displayModePropertyBinding")==="true",h=A&&D&&this.getMessageDetailForNonEditable(c,f,M);i.warning(C,{details:h,actions:[p,u],emphasizedAction:p,contentWidth:"100px",onClose:function(o){let n=[];if(o===p){e.info("Mass Edit: Confirmed to edit ",a.toString()," selections.");n=r}else if(o===u){e.info("Mass Edit: Cancelled.")}t(n)}})}).catch(function(t){e.error(t)})})};s._confirmContexts=function e(t,o){const n=t.getBindingContext("internal"),i=+n.getProperty("numberOfSelectedContexts")||0;o=o||[];if(o.length&&o.length!==i){return this._openConfirmDialog(t,o,i)}return Promise.resolve(o)};s.openMassEditDialog=function t(n){const i=this.getView().getController(),r=this.fetchContextsForEdit(n);return r.then(this._confirmContexts.bind(this,n)).then(function(e){return e&&e.length>0?o.createDialog(n,e,i):Promise.resolve()}).then(function(e){if(e){n.addDependent(e);e.open()}}).catch(function(t){e.error("Mass Edit: Something went wrong in mass edit dialog creation.",t)})};s.fetchContextsForEdit=function e(t){const o=t.getBindingContext("internal"),n=o.getProperty("updatableContexts")||[];return Promise.resolve(n)};return r}(r),x(f.prototype,"getMessageDetailForNonEditable",[c,p],Object.getOwnPropertyDescriptor(f.prototype,"getMessageDetailForNonEditable"),f.prototype),x(f.prototype,"openMassEditDialog",[u,g],Object.getOwnPropertyDescriptor(f.prototype,"openMassEditDialog"),f.prototype),x(f.prototype,"fetchContextsForEdit",[E,d],Object.getOwnPropertyDescriptor(f.prototype,"fetchContextsForEdit"),f.prototype),f))||_);return O},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/MessageHandler-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/Core", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution"], function (CommonUtils, messageHandling, ClassSupport, Core, ControllerExtension, OverrideExecution) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * A controller extension offering message handling.
   *
   * @hideconstructor
   * @public
   * @experimental As of version 1.90.0
   * @since 1.90.0
   */
  let MessageHandler = (_dec = defineUI5Class("sap.fe.core.controllerextensions.MessageHandler"), _dec2 = privateExtension(), _dec3 = extensible(OverrideExecution.Instead), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = publicExtension(), _dec7 = publicExtension(), _dec8 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(MessageHandler, _ControllerExtension);
    function MessageHandler() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = MessageHandler.prototype;
    /**
     * Determines whether or not bound messages are shown in the message dialog.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.
     *
     * If the bound messages are shown to the user with a different control like the (TODO:Link) MessageButton
     * this method has to be overridden.
     *
     * @returns Determines whether or not bound messages are shown in the message dialog.
     * @private
     */
    _proto.getShowBoundMessagesInMessageDialog = function getShowBoundMessagesInMessageDialog() {
      return true;
    }

    /**
     * Shows a message dialog with transition messages if there are any.
     * The message dialog is shown as a modal dialog. Once the user confirms the dialog, all transition messages
     * are removed from the message model. If there is more than one message, a list of messages is shown. The user
     * can filter on message types and can display details as well as the long text. If there is one message,
     * the dialog immediately shows the details of the message. If there is just one success message, a message
     * toast is shown instead.
     *
     * @param mParameters PRIVATE
     * @returns A promise that is resolved once the user closes the dialog. If there are no messages
     * to be shown, the promise is resolved immediately
     * @alias sap.fe.core.controllerextensions.MessageHandler#showMessageDialog
     * @public
     * @experimental As of version 1.90.0
     * @since 1.90.0
     */;
    _proto.showMessageDialog = function showMessageDialog(mParameters) {
      const customMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : undefined,
        oOPInternalBindingContext = this.base.getView().getBindingContext("internal");
      const viewType = this.base.getView().getViewData().converterType;
      // set isActionParameterDialog open so that it can be used in the controller extension to decide whether message dialog should open or not
      if (mParameters && mParameters.isActionParameterDialogOpen && oOPInternalBindingContext) {
        oOPInternalBindingContext.setProperty("isActionParameterDialogOpen", true);
      }
      const bShowBoundMessages = this.getShowBoundMessagesInMessageDialog();
      const oBindingContext = mParameters && mParameters.context ? mParameters.context : this.getView().getBindingContext();
      //const bEtagMessage = mParameters && mParameters.bHasEtagMessage;
      // reset  isActionParameterDialogOpen
      // cannot do this operations.js since it is not aware of the view
      if (oOPInternalBindingContext) {
        oOPInternalBindingContext.setProperty("isActionParameterDialogOpen", false);
      }
      return new Promise(function (resolve, reject) {
        // we have to set a timeout to be able to access the most recent messages
        setTimeout(function () {
          // TODO: great API - will be changed later
          messageHandling.showUnboundMessages(customMessages, oBindingContext, bShowBoundMessages, mParameters === null || mParameters === void 0 ? void 0 : mParameters.concurrentEditFlag, mParameters === null || mParameters === void 0 ? void 0 : mParameters.control, mParameters === null || mParameters === void 0 ? void 0 : mParameters.sActionName, undefined, mParameters === null || mParameters === void 0 ? void 0 : mParameters.onBeforeShowMessage, viewType).then(resolve).catch(reject);
        }, 0);
      });
    }

    /**
     * You can remove the existing transition message from the message model with this method.
     * With every user interaction that causes server communication (like clicking on an action, changing data),
     * this method removes the existing transition messages from the message model.
     *
     * @param [keepBoundMessage] Checks if the bound transition messages are not to be removed
     * @param keepUnboundMessage
     * @param sPathToBeRemoved
     * @alias sap.fe.core.controllerextensions.MessageHandler#removesTransitionMessages
     * @private
     */;
    _proto.removeTransitionMessages = function removeTransitionMessages(keepBoundMessage, keepUnboundMessage, sPathToBeRemoved) {
      if (!keepBoundMessage) {
        messageHandling.removeBoundTransitionMessages(sPathToBeRemoved);
      }
      if (!keepUnboundMessage) {
        messageHandling.removeUnboundTransitionMessages();
      }
    }

    /**
     * Method that returns all the parameters needed to handle the navigation to the error page.
     *
     * @param mParameters
     * @returns The parameters necessary for the navigation to the error page
     * @alias sap.fe.core.controllerextensions.MessageHandler#_checkNavigationToErrorPage
     * @private
     */;
    _proto._checkNavigationToErrorPage = function _checkNavigationToErrorPage(mParameters) {
      const aUnboundMessages = messageHandling.getMessages();
      const bShowBoundTransitionMessages = this.getShowBoundMessagesInMessageDialog();
      const aBoundTransitionMessages = bShowBoundTransitionMessages ? messageHandling.getMessages(true, true) : [];
      const aCustomMessages = mParameters && mParameters.customMessages ? mParameters.customMessages : [];
      const bIsStickyEditMode = CommonUtils.isStickyEditMode(this.base.getView());
      let mMessagePageParameters;

      // TODO: Stick mode check is okay as long as the controller extension is used with sap.fe.core and sap.fe.core.AppComponent.
      // It might be better to provide an extension to the consumer of the controller extension to provide this value.

      // The message page can only show 1 message today, so we navigate to it when :
      // 1. There are no bound transition messages to show,
      // 2. There are no custom messages to show, &
      // 3. There is exactly 1 unbound message in the message model with statusCode=503 and retry-After available
      // 4. retryAfter is greater than 120 seconds
      //
      // In Addition, navigating away from a sticky session will destroy the session so we do not navigate to message page for now.
      // TODO: check if navigation should be done in sticky edit mode.
      if (mParameters && mParameters.isDataReceivedError) {
        mMessagePageParameters = {
          title: mParameters.title,
          description: mParameters.description,
          navigateBackToOrigin: true,
          errorType: "PageNotFound"
        };
      } else if (!bIsStickyEditMode && !aBoundTransitionMessages.length && !aCustomMessages.length && (aUnboundMessages.length === 1 || mParameters && mParameters.isInitialLoad503Error)) {
        const oMessage = aUnboundMessages[0],
          oTechnicalDetails = oMessage.getTechnicalDetails();
        let sRetryAfterMessage;
        if (oTechnicalDetails && oTechnicalDetails.httpStatus === 503) {
          if (oTechnicalDetails.retryAfter) {
            const iSecondsBeforeRetry = this._getSecondsBeforeRetryAfter(oTechnicalDetails.retryAfter);
            if (iSecondsBeforeRetry > 120) {
              // TODO: For now let's keep getRetryAfterMessage in messageHandling because it is needed also by the dialog.
              // We can plan to move this and the dialog logic both to messageHandler controller extension if required.
              sRetryAfterMessage = messageHandling.getRetryAfterMessage(oMessage);
              mMessagePageParameters = {
                description: sRetryAfterMessage ? `${sRetryAfterMessage} ${oMessage.getMessage()}` : oMessage.getMessage(),
                navigateBackToOrigin: true,
                errorType: "UnableToLoad"
              };
            }
          } else {
            sRetryAfterMessage = messageHandling.getRetryAfterMessage(oMessage);
            mMessagePageParameters = {
              description: sRetryAfterMessage ? `${sRetryAfterMessage} ${oMessage.getMessage()}` : oMessage.getMessage(),
              navigateBackToOrigin: true,
              errorType: "UnableToLoad"
            };
          }
        }
      }
      return mMessagePageParameters;
    };
    _proto._getSecondsBeforeRetryAfter = function _getSecondsBeforeRetryAfter(dRetryAfter) {
      const dCurrentDateTime = new Date(),
        iCurrentDateTimeInMilliSeconds = dCurrentDateTime.getTime(),
        iRetryAfterDateTimeInMilliSeconds = dRetryAfter.getTime(),
        iSecondsBeforeRetry = (iRetryAfterDateTimeInMilliSeconds - iCurrentDateTimeInMilliSeconds) / 1000;
      return iSecondsBeforeRetry;
    }

    /**
     * Shows a message page or a message dialog based on the messages in the message dialog.
     *
     * @param [mParameters]
     * @returns A promise that is resolved once the user closes the message dialog or when navigation to the message page is complete. If there are no messages
     * to be shown, the promise is resolved immediately
     * @private
     */;
    _proto.showMessages = async function showMessages(mParameters) {
      const oAppComponent = CommonUtils.getAppComponent(this.getView());
      let mMessagePageParameters;
      if (!oAppComponent._isFclEnabled()) {
        mMessagePageParameters = this._checkNavigationToErrorPage(mParameters);
      }
      if (mMessagePageParameters) {
        // navigate to message page.
        // handler before page navigation is triggered, for example to close the action parameter dialog
        if (mParameters && mParameters.messagePageNavigationCallback) {
          mParameters.messagePageNavigationCallback();
        }
        mMessagePageParameters.handleShellBack = !(mParameters && mParameters.shellBack);
        // TODO: Use Illustrated message instead of normal message page
        // TODO: Return value needs to provided but since this function is private for now hence we can skip this.
        this.removeTransitionMessages();
        const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
        if (this.base._routing) {
          return new Promise((resolve, reject) => {
            // we have to set a timeout to be able to access the most recent messages
            setTimeout(() => {
              // TODO: great API - will be changed later
              this.base._routing.navigateToMessagePage(mParameters && mParameters.isDataReceivedError ? oResourceBundle.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR") : oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_TITLE"), mMessagePageParameters).then(resolve).catch(reject);
            }, 0);
          });
        }
      } else {
        // navigate to message dialog
        return this.showMessageDialog(mParameters);
      }
    };
    return MessageHandler;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "getShowBoundMessagesInMessageDialog", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "getShowBoundMessagesInMessageDialog"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "showMessageDialog", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "showMessageDialog"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeTransitionMessages", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "removeTransitionMessages"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "showMessages", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "showMessages"), _class2.prototype)), _class2)) || _class);
  return MessageHandler;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/MessageHandler", ["sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/helpers/ClassSupport","sap/ui/core/Core","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution"],function(e,t,o,s,i,n){"use strict";var r,a,g,c,l,u,p,f,d,h;var v=o.publicExtension;var M=o.privateExtension;var y=o.finalExtension;var m=o.extensible;var b=o.defineUI5Class;function w(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;T(e,t)}function T(e,t){T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return T(e,t)}function O(e,t,o,s,i){var n={};Object.keys(s).forEach(function(e){n[e]=s[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=o.slice().reverse().reduce(function(o,s){return s(e,t,o)||o},n);if(i&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(i):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}let D=(r=b("sap.fe.core.controllerextensions.MessageHandler"),a=M(),g=m(n.Instead),c=v(),l=y(),u=v(),p=v(),f=y(),r(d=(h=function(o){w(i,o);function i(){return o.apply(this,arguments)||this}var n=i.prototype;n.getShowBoundMessagesInMessageDialog=function e(){return true};n.showMessageDialog=function e(o){const s=o&&o.customMessages?o.customMessages:undefined,i=this.base.getView().getBindingContext("internal");const n=this.base.getView().getViewData().converterType;if(o&&o.isActionParameterDialogOpen&&i){i.setProperty("isActionParameterDialogOpen",true)}const r=this.getShowBoundMessagesInMessageDialog();const a=o&&o.context?o.context:this.getView().getBindingContext();if(i){i.setProperty("isActionParameterDialogOpen",false)}return new Promise(function(e,i){setTimeout(function(){t.showUnboundMessages(s,a,r,o===null||o===void 0?void 0:o.concurrentEditFlag,o===null||o===void 0?void 0:o.control,o===null||o===void 0?void 0:o.sActionName,undefined,o===null||o===void 0?void 0:o.onBeforeShowMessage,n).then(e).catch(i)},0)})};n.removeTransitionMessages=function e(o,s,i){if(!o){t.removeBoundTransitionMessages(i)}if(!s){t.removeUnboundTransitionMessages()}};n._checkNavigationToErrorPage=function o(s){const i=t.getMessages();const n=this.getShowBoundMessagesInMessageDialog();const r=n?t.getMessages(true,true):[];const a=s&&s.customMessages?s.customMessages:[];const g=e.isStickyEditMode(this.base.getView());let c;if(s&&s.isDataReceivedError){c={title:s.title,description:s.description,navigateBackToOrigin:true,errorType:"PageNotFound"}}else if(!g&&!r.length&&!a.length&&(i.length===1||s&&s.isInitialLoad503Error)){const e=i[0],o=e.getTechnicalDetails();let s;if(o&&o.httpStatus===503){if(o.retryAfter){const i=this._getSecondsBeforeRetryAfter(o.retryAfter);if(i>120){s=t.getRetryAfterMessage(e);c={description:s?`${s} ${e.getMessage()}`:e.getMessage(),navigateBackToOrigin:true,errorType:"UnableToLoad"}}}else{s=t.getRetryAfterMessage(e);c={description:s?`${s} ${e.getMessage()}`:e.getMessage(),navigateBackToOrigin:true,errorType:"UnableToLoad"}}}}return c};n._getSecondsBeforeRetryAfter=function e(t){const o=new Date,s=o.getTime(),i=t.getTime(),n=(i-s)/1e3;return n};n.showMessages=async function t(o){const i=e.getAppComponent(this.getView());let n;if(!i._isFclEnabled()){n=this._checkNavigationToErrorPage(o)}if(n){if(o&&o.messagePageNavigationCallback){o.messagePageNavigationCallback()}n.handleShellBack=!(o&&o.shellBack);this.removeTransitionMessages();const e=s.getLibraryResourceBundle("sap.fe.core");if(this.base._routing){return new Promise((t,s)=>{setTimeout(()=>{this.base._routing.navigateToMessagePage(o&&o.isDataReceivedError?e.getText("C_COMMON_SAPFE_DATA_RECEIVED_ERROR"):e.getText("C_MESSAGE_HANDLING_SAPFE_503_TITLE"),n).then(t).catch(s)},0)})}}else{return this.showMessageDialog(o)}};return i}(i),O(h.prototype,"getShowBoundMessagesInMessageDialog",[a,g],Object.getOwnPropertyDescriptor(h.prototype,"getShowBoundMessagesInMessageDialog"),h.prototype),O(h.prototype,"showMessageDialog",[c,l],Object.getOwnPropertyDescriptor(h.prototype,"showMessageDialog"),h.prototype),O(h.prototype,"removeTransitionMessages",[u],Object.getOwnPropertyDescriptor(h.prototype,"removeTransitionMessages"),h.prototype),O(h.prototype,"showMessages",[p,f],Object.getOwnPropertyDescriptor(h.prototype,"showMessages"),h.prototype),h))||d);return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/PageReady-dbg", ["sap/base/Log", "sap/fe/core/controllerextensions/pageReady/DataQueryWatcher", "sap/fe/core/services/TemplatedViewServiceFactory", "sap/ui/base/EventProvider", "sap/ui/core/Component", "sap/ui/core/Core", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "../CommonUtils", "../helpers/ClassSupport"], function (Log, DataQueryWatcher, TemplatedViewServiceFactory, EventProvider, Component, Core, ControllerExtension, OverrideExecution, CommonUtils, ClassSupport) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let PageReadyControllerExtension = (_dec = defineUI5Class("sap.fe.core.controllerextensions.PageReady"), _dec2 = methodOverride(), _dec3 = methodOverride(), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = methodOverride("_routing"), _dec7 = methodOverride("_routing"), _dec8 = methodOverride("_routing"), _dec9 = publicExtension(), _dec10 = finalExtension(), _dec11 = publicExtension(), _dec12 = finalExtension(), _dec13 = publicExtension(), _dec14 = finalExtension(), _dec15 = publicExtension(), _dec16 = finalExtension(), _dec17 = publicExtension(), _dec18 = finalExtension(), _dec19 = privateExtension(), _dec20 = extensible(OverrideExecution.Instead), _dec21 = publicExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(PageReadyControllerExtension, _ControllerExtension);
    function PageReadyControllerExtension() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ControllerExtension.call(this, ...args) || this;
      _this.pageReadyTimeoutDefault = 7000;
      return _this;
    }
    var _proto = PageReadyControllerExtension.prototype;
    _proto.onInit = function onInit() {
      var _manifestContent$sap, _this$pageComponent, _rootControlControlle;
      this._nbWaits = 0;
      this._oEventProvider = this._oEventProvider ? this._oEventProvider : new EventProvider();
      this.view = this.getView();
      this.appComponent = CommonUtils.getAppComponent(this.view);
      this.pageComponent = Component.getOwnerComponentFor(this.view);
      const manifestContent = this.appComponent.getManifest();
      this.pageReadyTimeout = ((_manifestContent$sap = manifestContent["sap.ui5"]) === null || _manifestContent$sap === void 0 ? void 0 : _manifestContent$sap.pageReadyTimeout) ?? this.pageReadyTimeoutDefault;
      if ((_this$pageComponent = this.pageComponent) !== null && _this$pageComponent !== void 0 && _this$pageComponent.attachContainerDefined) {
        this.pageComponent.attachContainerDefined(oEvent => this.registerContainer(oEvent.getParameter("container")));
      } else {
        this.registerContainer(this.view);
      }
      const rootControlController = this.appComponent.getRootControl().getController();
      const placeholder = rootControlController === null || rootControlController === void 0 ? void 0 : (_rootControlControlle = rootControlController.getPlaceholder) === null || _rootControlControlle === void 0 ? void 0 : _rootControlControlle.call(rootControlController);
      if (placeholder !== null && placeholder !== void 0 && placeholder.isPlaceholderDebugEnabled()) {
        this.attachEvent("pageReady", null, () => {
          placeholder.getPlaceholderDebugStats().iPageReadyEventTimestamp = Date.now();
        }, this);
        this.attachEvent("heroesBatchReceived", null, () => {
          placeholder.getPlaceholderDebugStats().iHeroesBatchReceivedEventTimestamp = Date.now();
        }, this);
      }
      this.queryWatcher = new DataQueryWatcher(this._oEventProvider, this.checkPageReadyDebounced.bind(this));
    };
    _proto.onExit = function onExit() {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      delete this._oAppComponent;
      if (this._oContainer) {
        this._oContainer.removeEventDelegate(this._fnContainerDelegate);
      }
    };
    _proto.waitFor = function waitFor(oPromise) {
      this._nbWaits++;
      oPromise.finally(() => {
        setTimeout(() => {
          this._nbWaits--;
        }, 0);
      }).catch(null);
    };
    _proto.onRouteMatched = function onRouteMatched() {
      this._bIsPageReady = false;
    };
    _proto.onRouteMatchedFinished = async function onRouteMatchedFinished() {
      await this.onAfterBindingPromise;
      this.checkPageReadyDebounced();
    };
    _proto.registerAggregatedControls = function registerAggregatedControls(mainBindingContext) {
      if (mainBindingContext) {
        const mainObjectBinding = mainBindingContext.getBinding();
        this.queryWatcher.registerBinding(mainObjectBinding);
      }
      const aPromises = [];
      const aControls = this.getView().findAggregatedObjects(true);
      aControls.forEach(oElement => {
        const oObjectBinding = oElement.getObjectBinding();
        if (oObjectBinding) {
          // Register on all object binding (mostly used on object pages)
          this.queryWatcher.registerBinding(oObjectBinding);
        } else {
          const aBindingKeys = Object.keys(oElement.mBindingInfos);
          aBindingKeys.forEach(sPropertyName => {
            const oListBinding = oElement.mBindingInfos[sPropertyName].binding;
            if (oListBinding && oListBinding.isA("sap.ui.model.odata.v4.ODataListBinding")) {
              this.queryWatcher.registerBinding(oListBinding);
            }
          });
        }
        // This is dirty but MDCTables and MDCCharts have a weird loading lifecycle
        if (oElement.isA("sap.ui.mdc.Table") || oElement.isA("sap.ui.mdc.Chart")) {
          this.bTablesChartsLoaded = false;
          aPromises.push(this.queryWatcher.registerTableOrChart(oElement));
        } else if (oElement.isA("sap.fe.core.controls.FilterBar")) {
          this.queryWatcher.registerFilterBar(oElement);
        }
      });
      return aPromises;
    };
    _proto.onAfterBinding = function onAfterBinding(oBindingContext) {
      // In case the page is rebind we need to clear the timer (eg: in FCL, the user can select 2 items successively in the list report)
      if (this.pageReadyTimeoutTimer) {
        clearTimeout(this.pageReadyTimeoutTimer);
      }
      this.pageReadyTimeoutTimer = setTimeout(() => {
        Log.error(`The PageReady Event was not fired within the ${this.pageReadyTimeout} ms timeout . It has been forced. Please contact your application developer for further analysis`);
        this._oEventProvider.fireEvent("pageReady");
      }, this.pageReadyTimeout);
      if (this._bAfterBindingAlreadyApplied) {
        return;
      }
      this._bAfterBindingAlreadyApplied = true;
      if (this.isContextExpected() && oBindingContext === undefined) {
        // Force to mention we are expecting data
        this.bHasContext = false;
        return;
      } else {
        this.bHasContext = true;
      }
      this.attachEventOnce("pageReady", null, () => {
        clearTimeout(this.pageReadyTimeoutTimer);
        this.pageReadyTimeoutTimer = undefined;
        this._bAfterBindingAlreadyApplied = false;
        this.queryWatcher.reset();
      }, null);
      this.onAfterBindingPromise = new Promise(async resolve => {
        const aTableChartInitializedPromises = this.registerAggregatedControls(oBindingContext);
        if (aTableChartInitializedPromises.length > 0) {
          await Promise.all(aTableChartInitializedPromises);
          this.bTablesChartsLoaded = true;
          this.checkPageReadyDebounced();
          resolve();
        } else {
          this.checkPageReadyDebounced();
          resolve();
        }
      });
    };
    _proto.isPageReady = function isPageReady() {
      return this._bIsPageReady;
    };
    _proto.waitPageReady = function waitPageReady() {
      return new Promise(resolve => {
        if (this.isPageReady()) {
          resolve();
        } else {
          this.attachEventOnce("pageReady", null, () => {
            resolve();
          }, this);
        }
      });
    };
    _proto.attachEventOnce = function attachEventOnce(sEventId, oData, fnFunction, oListener) {
      // eslint-disable-next-line prefer-rest-params
      return this._oEventProvider.attachEventOnce(sEventId, oData, fnFunction, oListener);
    };
    _proto.attachEvent = function attachEvent(sEventId, oData, fnFunction, oListener) {
      // eslint-disable-next-line prefer-rest-params
      return this._oEventProvider.attachEvent(sEventId, oData, fnFunction, oListener);
    };
    _proto.detachEvent = function detachEvent(sEventId, fnFunction) {
      // eslint-disable-next-line prefer-rest-params
      return this._oEventProvider.detachEvent(sEventId, fnFunction);
    };
    _proto.registerContainer = function registerContainer(oContainer) {
      this._oContainer = oContainer;
      this._fnContainerDelegate = {
        onBeforeShow: () => {
          this.bShown = false;
          this._bIsPageReady = false;
        },
        onBeforeHide: () => {
          this.bShown = false;
          this._bIsPageReady = false;
        },
        onAfterShow: () => {
          var _this$onAfterBindingP;
          this.bShown = true;
          (_this$onAfterBindingP = this.onAfterBindingPromise) === null || _this$onAfterBindingP === void 0 ? void 0 : _this$onAfterBindingP.then(() => {
            this._checkPageReady(true);
          });
        }
      };
      this._oContainer.addEventDelegate(this._fnContainerDelegate, this);
    };
    _proto.isContextExpected = function isContextExpected() {
      return false;
    };
    _proto.checkPageReadyDebounced = function checkPageReadyDebounced() {
      if (this.pageReadyTimer) {
        clearTimeout(this.pageReadyTimer);
      }
      this.pageReadyTimer = setTimeout(() => {
        this._checkPageReady();
      }, 200);
    };
    _proto._checkPageReady = function _checkPageReady() {
      let bFromNav = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      const fnUIUpdated = () => {
        // Wait until the UI is no longer dirty
        if (!Core.getUIDirty()) {
          Core.detachEvent("UIUpdated", fnUIUpdated);
          this._bWaitingForRefresh = false;
          this.checkPageReadyDebounced();
        }
      };

      // In case UIUpdate does not get called, check if UI is not dirty and then call _checkPageReady
      const checkUIUpdated = () => {
        if (Core.getUIDirty()) {
          setTimeout(checkUIUpdated, 500);
        } else if (this._bWaitingForRefresh) {
          this._bWaitingForRefresh = false;
          Core.detachEvent("UIUpdated", fnUIUpdated);
          this.checkPageReadyDebounced();
        }
      };
      if (this.bShown && this.queryWatcher.isDataReceived() !== false && this.bTablesChartsLoaded !== false && (!this.isContextExpected() || this.bHasContext) // Either no context is expected or there is one
      ) {
        if (this.queryWatcher.isDataReceived() === true && !bFromNav && !this._bWaitingForRefresh && Core.getUIDirty()) {
          // If we requested data we get notified as soon as the data arrived, so before the next rendering tick
          this.queryWatcher.resetDataReceived();
          this._bWaitingForRefresh = true;
          Core.attachEvent("UIUpdated", fnUIUpdated);
          setTimeout(checkUIUpdated, 500);
        } else if (!this._bWaitingForRefresh && Core.getUIDirty() || this._nbWaits !== 0 || TemplatedViewServiceFactory.getNumberOfViewsInCreationState() > 0 || this.queryWatcher.isSearchPending()) {
          this._bWaitingForRefresh = true;
          Core.attachEvent("UIUpdated", fnUIUpdated);
          setTimeout(checkUIUpdated, 500);
        } else if (!this._bWaitingForRefresh) {
          // In the case we're not waiting for any data (navigating back to a page we already have loaded)
          // just wait for a frame to fire the event.
          this._bIsPageReady = true;
          this._oEventProvider.fireEvent("pageReady");
        }
      }
    };
    return PageReadyControllerExtension;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onExit", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "waitFor", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "waitFor"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRouteMatched", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "onRouteMatched"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRouteMatchedFinished", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onRouteMatchedFinished"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAfterBinding", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onAfterBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isPageReady", [_dec9, _dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "isPageReady"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "waitPageReady", [_dec11, _dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "waitPageReady"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "attachEventOnce", [_dec13, _dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "attachEventOnce"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "attachEvent", [_dec15, _dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "attachEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "detachEvent", [_dec17, _dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "detachEvent"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isContextExpected", [_dec19, _dec20], Object.getOwnPropertyDescriptor(_class2.prototype, "isContextExpected"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "checkPageReadyDebounced", [_dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "checkPageReadyDebounced"), _class2.prototype)), _class2)) || _class);
  return PageReadyControllerExtension;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/PageReady", ["sap/base/Log","sap/fe/core/controllerextensions/pageReady/DataQueryWatcher","sap/fe/core/services/TemplatedViewServiceFactory","sap/ui/base/EventProvider","sap/ui/core/Component","sap/ui/core/Core","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","../CommonUtils","../helpers/ClassSupport"],function(e,t,i,o,r,n,a,s,c,h){"use strict";var p,d,u,g,l,y,f,v,b,R,m,P,E,O,_,w,C,D,T,A,x,W,B;var I=h.publicExtension;var j=h.privateExtension;var F=h.methodOverride;var k=h.finalExtension;var U=h.extensible;var S=h.defineUI5Class;function q(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;M(e,t)}function M(e,t){M=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return M(e,t)}function z(e,t,i,o,r){var n={};Object.keys(o).forEach(function(e){n[e]=o[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,o){return o(e,t,i)||i},n);if(r&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(r):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}let H=(p=S("sap.fe.core.controllerextensions.PageReady"),d=F(),u=F(),g=I(),l=k(),y=F("_routing"),f=F("_routing"),v=F("_routing"),b=I(),R=k(),m=I(),P=k(),E=I(),O=k(),_=I(),w=k(),C=I(),D=k(),T=j(),A=U(s.Instead),x=I(),p(W=(B=function(a){q(s,a);function s(){var e;for(var t=arguments.length,i=new Array(t),o=0;o<t;o++){i[o]=arguments[o]}e=a.call(this,...i)||this;e.pageReadyTimeoutDefault=7e3;return e}var h=s.prototype;h.onInit=function e(){var i,n,a;this._nbWaits=0;this._oEventProvider=this._oEventProvider?this._oEventProvider:new o;this.view=this.getView();this.appComponent=c.getAppComponent(this.view);this.pageComponent=r.getOwnerComponentFor(this.view);const s=this.appComponent.getManifest();this.pageReadyTimeout=((i=s["sap.ui5"])===null||i===void 0?void 0:i.pageReadyTimeout)??this.pageReadyTimeoutDefault;if((n=this.pageComponent)!==null&&n!==void 0&&n.attachContainerDefined){this.pageComponent.attachContainerDefined(e=>this.registerContainer(e.getParameter("container")))}else{this.registerContainer(this.view)}const h=this.appComponent.getRootControl().getController();const p=h===null||h===void 0?void 0:(a=h.getPlaceholder)===null||a===void 0?void 0:a.call(h);if(p!==null&&p!==void 0&&p.isPlaceholderDebugEnabled()){this.attachEvent("pageReady",null,()=>{p.getPlaceholderDebugStats().iPageReadyEventTimestamp=Date.now()},this);this.attachEvent("heroesBatchReceived",null,()=>{p.getPlaceholderDebugStats().iHeroesBatchReceivedEventTimestamp=Date.now()},this)}this.queryWatcher=new t(this._oEventProvider,this.checkPageReadyDebounced.bind(this))};h.onExit=function e(){delete this._oAppComponent;if(this._oContainer){this._oContainer.removeEventDelegate(this._fnContainerDelegate)}};h.waitFor=function e(t){this._nbWaits++;t.finally(()=>{setTimeout(()=>{this._nbWaits--},0)}).catch(null)};h.onRouteMatched=function e(){this._bIsPageReady=false};h.onRouteMatchedFinished=async function e(){await this.onAfterBindingPromise;this.checkPageReadyDebounced()};h.registerAggregatedControls=function e(t){if(t){const e=t.getBinding();this.queryWatcher.registerBinding(e)}const i=[];const o=this.getView().findAggregatedObjects(true);o.forEach(e=>{const t=e.getObjectBinding();if(t){this.queryWatcher.registerBinding(t)}else{const t=Object.keys(e.mBindingInfos);t.forEach(t=>{const i=e.mBindingInfos[t].binding;if(i&&i.isA("sap.ui.model.odata.v4.ODataListBinding")){this.queryWatcher.registerBinding(i)}})}if(e.isA("sap.ui.mdc.Table")||e.isA("sap.ui.mdc.Chart")){this.bTablesChartsLoaded=false;i.push(this.queryWatcher.registerTableOrChart(e))}else if(e.isA("sap.fe.core.controls.FilterBar")){this.queryWatcher.registerFilterBar(e)}});return i};h.onAfterBinding=function t(i){if(this.pageReadyTimeoutTimer){clearTimeout(this.pageReadyTimeoutTimer)}this.pageReadyTimeoutTimer=setTimeout(()=>{e.error(`The PageReady Event was not fired within the ${this.pageReadyTimeout} ms timeout . It has been forced. Please contact your application developer for further analysis`);this._oEventProvider.fireEvent("pageReady")},this.pageReadyTimeout);if(this._bAfterBindingAlreadyApplied){return}this._bAfterBindingAlreadyApplied=true;if(this.isContextExpected()&&i===undefined){this.bHasContext=false;return}else{this.bHasContext=true}this.attachEventOnce("pageReady",null,()=>{clearTimeout(this.pageReadyTimeoutTimer);this.pageReadyTimeoutTimer=undefined;this._bAfterBindingAlreadyApplied=false;this.queryWatcher.reset()},null);this.onAfterBindingPromise=new Promise(async e=>{const t=this.registerAggregatedControls(i);if(t.length>0){await Promise.all(t);this.bTablesChartsLoaded=true;this.checkPageReadyDebounced();e()}else{this.checkPageReadyDebounced();e()}})};h.isPageReady=function e(){return this._bIsPageReady};h.waitPageReady=function e(){return new Promise(e=>{if(this.isPageReady()){e()}else{this.attachEventOnce("pageReady",null,()=>{e()},this)}})};h.attachEventOnce=function e(t,i,o,r){return this._oEventProvider.attachEventOnce(t,i,o,r)};h.attachEvent=function e(t,i,o,r){return this._oEventProvider.attachEvent(t,i,o,r)};h.detachEvent=function e(t,i){return this._oEventProvider.detachEvent(t,i)};h.registerContainer=function e(t){this._oContainer=t;this._fnContainerDelegate={onBeforeShow:()=>{this.bShown=false;this._bIsPageReady=false},onBeforeHide:()=>{this.bShown=false;this._bIsPageReady=false},onAfterShow:()=>{var e;this.bShown=true;(e=this.onAfterBindingPromise)===null||e===void 0?void 0:e.then(()=>{this._checkPageReady(true)})}};this._oContainer.addEventDelegate(this._fnContainerDelegate,this)};h.isContextExpected=function e(){return false};h.checkPageReadyDebounced=function e(){if(this.pageReadyTimer){clearTimeout(this.pageReadyTimer)}this.pageReadyTimer=setTimeout(()=>{this._checkPageReady()},200)};h._checkPageReady=function e(){let t=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const o=()=>{if(!n.getUIDirty()){n.detachEvent("UIUpdated",o);this._bWaitingForRefresh=false;this.checkPageReadyDebounced()}};const r=()=>{if(n.getUIDirty()){setTimeout(r,500)}else if(this._bWaitingForRefresh){this._bWaitingForRefresh=false;n.detachEvent("UIUpdated",o);this.checkPageReadyDebounced()}};if(this.bShown&&this.queryWatcher.isDataReceived()!==false&&this.bTablesChartsLoaded!==false&&(!this.isContextExpected()||this.bHasContext)){if(this.queryWatcher.isDataReceived()===true&&!t&&!this._bWaitingForRefresh&&n.getUIDirty()){this.queryWatcher.resetDataReceived();this._bWaitingForRefresh=true;n.attachEvent("UIUpdated",o);setTimeout(r,500)}else if(!this._bWaitingForRefresh&&n.getUIDirty()||this._nbWaits!==0||i.getNumberOfViewsInCreationState()>0||this.queryWatcher.isSearchPending()){this._bWaitingForRefresh=true;n.attachEvent("UIUpdated",o);setTimeout(r,500)}else if(!this._bWaitingForRefresh){this._bIsPageReady=true;this._oEventProvider.fireEvent("pageReady")}}};return s}(a),z(B.prototype,"onInit",[d],Object.getOwnPropertyDescriptor(B.prototype,"onInit"),B.prototype),z(B.prototype,"onExit",[u],Object.getOwnPropertyDescriptor(B.prototype,"onExit"),B.prototype),z(B.prototype,"waitFor",[g,l],Object.getOwnPropertyDescriptor(B.prototype,"waitFor"),B.prototype),z(B.prototype,"onRouteMatched",[y],Object.getOwnPropertyDescriptor(B.prototype,"onRouteMatched"),B.prototype),z(B.prototype,"onRouteMatchedFinished",[f],Object.getOwnPropertyDescriptor(B.prototype,"onRouteMatchedFinished"),B.prototype),z(B.prototype,"onAfterBinding",[v],Object.getOwnPropertyDescriptor(B.prototype,"onAfterBinding"),B.prototype),z(B.prototype,"isPageReady",[b,R],Object.getOwnPropertyDescriptor(B.prototype,"isPageReady"),B.prototype),z(B.prototype,"waitPageReady",[m,P],Object.getOwnPropertyDescriptor(B.prototype,"waitPageReady"),B.prototype),z(B.prototype,"attachEventOnce",[E,O],Object.getOwnPropertyDescriptor(B.prototype,"attachEventOnce"),B.prototype),z(B.prototype,"attachEvent",[_,w],Object.getOwnPropertyDescriptor(B.prototype,"attachEvent"),B.prototype),z(B.prototype,"detachEvent",[C,D],Object.getOwnPropertyDescriptor(B.prototype,"detachEvent"),B.prototype),z(B.prototype,"isContextExpected",[T,A],Object.getOwnPropertyDescriptor(B.prototype,"isContextExpected"),B.prototype),z(B.prototype,"checkPageReadyDebounced",[x],Object.getOwnPropertyDescriptor(B.prototype,"checkPageReadyDebounced"),B.prototype),B))||W);return H},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Paginator-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "sap/ui/model/json/JSONModel"], function (ClassSupport, ControllerExtension, OverrideExecution, JSONModel) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * Controller extension providing hooks for the navigation using paginators
   *
   * @hideconstructor
   * @public
   * @since 1.94.0
   */
  let Paginator = (_dec = defineUI5Class("sap.fe.core.controllerextensions.Paginator"), _dec2 = methodOverride(), _dec3 = publicExtension(), _dec4 = finalExtension(), _dec5 = publicExtension(), _dec6 = finalExtension(), _dec7 = privateExtension(), _dec8 = extensible(OverrideExecution.After), _dec9 = privateExtension(), _dec10 = extensible(OverrideExecution.After), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(Paginator, _ControllerExtension);
    function Paginator() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ControllerExtension.call(this, ...args) || this;
      _this._iCurrentIndex = -1;
      return _this;
    }
    var _proto = Paginator.prototype;
    _proto.onInit = function onInit() {
      this._oView = this.base.getView();
      this._oView.setModel(new JSONModel({
        navUpEnabled: false,
        navDownEnabled: false
      }), "paginator");
    }

    /**
     * Initiates the paginator control.
     *
     * @function
     * @param oBinding ODataListBinding object
     * @param oContext Current context where the navigation is initiated
     * @alias sap.fe.core.controllerextensions.Paginator#initialize
     * @public
     * @since 1.94.0
     */;
    _proto.initialize = function initialize(oBinding, oContext) {
      if (oBinding && oBinding.getAllCurrentContexts) {
        this._oListBinding = oBinding;
      }
      if (oContext) {
        this._oCurrentContext = oContext;
      }
      this._updateCurrentIndexAndButtonEnablement();
    };
    _proto._updateCurrentIndexAndButtonEnablement = function _updateCurrentIndexAndButtonEnablement() {
      if (this._oCurrentContext && this._oListBinding) {
        const sPath = this._oCurrentContext.getPath();
        // Storing the currentIndex in global variable
        this._iCurrentIndex = this._oListBinding.getAllCurrentContexts().findIndex(function (oContext) {
          return oContext && oContext.getPath() === sPath;
        });
        const oCurrentIndexContext = this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex];
        if (!this._iCurrentIndex && this._iCurrentIndex !== 0 || !oCurrentIndexContext || this._oCurrentContext.getPath() !== oCurrentIndexContext.getPath()) {
          this._updateCurrentIndex();
        }
      }
      this._handleButtonEnablement();
    };
    _proto._handleButtonEnablement = function _handleButtonEnablement() {
      //Enabling and Disabling the Buttons on change of the control context
      const mButtonEnablementModel = this.base.getView().getModel("paginator");
      if (this._oListBinding && this._oListBinding.getAllCurrentContexts().length > 1 && this._iCurrentIndex > -1) {
        if (this._iCurrentIndex === this._oListBinding.getAllCurrentContexts().length - 1) {
          mButtonEnablementModel.setProperty("/navDownEnabled", false);
        } else if (this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex + 1].isInactive()) {
          //check the next context is not an inactive context
          mButtonEnablementModel.setProperty("/navDownEnabled", false);
        } else {
          mButtonEnablementModel.setProperty("/navDownEnabled", true);
        }
        if (this._iCurrentIndex === 0) {
          mButtonEnablementModel.setProperty("/navUpEnabled", false);
        } else if (this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex - 1].isInactive()) {
          mButtonEnablementModel.setProperty("/navUpEnabled", false);
        } else {
          mButtonEnablementModel.setProperty("/navUpEnabled", true);
        }
      } else {
        // Don't show the paginator buttons
        // 1. When no listbinding is available
        // 2. Only '1' or '0' context exists in the listBinding
        // 3. The current index is -ve, i.e the currentIndex is invalid.
        mButtonEnablementModel.setProperty("/navUpEnabled", false);
        mButtonEnablementModel.setProperty("/navDownEnabled", false);
      }
    };
    _proto._updateCurrentIndex = function _updateCurrentIndex() {
      if (this._oCurrentContext && this._oListBinding) {
        const sPath = this._oCurrentContext.getPath();
        // Storing the currentIndex in global variable
        this._iCurrentIndex = this._oListBinding.getAllCurrentContexts().findIndex(function (oContext) {
          return oContext && oContext.getPath() === sPath;
        });
      }
    };
    _proto.updateCurrentContext = async function updateCurrentContext(iDeltaIndex) {
      var _this$_oCurrentContex, _this$_oCurrentContex2;
      if (!this._oListBinding) {
        return;
      }
      const oModel = (_this$_oCurrentContex = this._oCurrentContext) !== null && _this$_oCurrentContex !== void 0 && _this$_oCurrentContex.getModel ? (_this$_oCurrentContex2 = this._oCurrentContext) === null || _this$_oCurrentContex2 === void 0 ? void 0 : _this$_oCurrentContex2.getModel() : undefined;
      //Submitting any pending changes that might be there before navigating to next context.
      await (oModel === null || oModel === void 0 ? void 0 : oModel.submitBatch("$auto"));
      const aCurrentContexts = this._oListBinding.getAllCurrentContexts();
      const iNewIndex = this._iCurrentIndex + iDeltaIndex;
      const oNewContext = aCurrentContexts[iNewIndex];
      if (oNewContext) {
        const bPreventIdxUpdate = this.onBeforeContextUpdate(this._oListBinding, this._iCurrentIndex, iDeltaIndex);
        if (!bPreventIdxUpdate) {
          this._iCurrentIndex = iNewIndex;
          this._oCurrentContext = oNewContext;
        }
        this.onContextUpdate(oNewContext);
      }
      this._handleButtonEnablement();
    }

    /**
     * Called before context update.
     *
     * @function
     * @param _oListBinding ODataListBinding object
     * @param _iCurrentIndex Current index of context in listBinding from where the navigation is initiated
     * @param _iIndexUpdate The delta index for update
     * @returns `true` to prevent the update of current context.
     * @alias sap.fe.core.controllerextensions.Paginator#onBeforeContextUpdate
     * @private
     */;
    _proto.onBeforeContextUpdate = function onBeforeContextUpdate(_oListBinding, _iCurrentIndex, _iIndexUpdate) {
      return false;
    }

    /**
     * Returns the updated context after the paginator operation.
     *
     * @function
     * @param oContext Final context returned after the paginator action
     * @alias sap.fe.core.controllerextensions.Paginator#onContextUpdate
     * @public
     * @since 1.94.0
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onContextUpdate = function onContextUpdate(oContext) {
      //To be overridden by the application
    };
    return Paginator;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initialize", [_dec3, _dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "initialize"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "updateCurrentContext", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "updateCurrentContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeContextUpdate", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeContextUpdate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onContextUpdate", [_dec9, _dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "onContextUpdate"), _class2.prototype)), _class2)) || _class);
  return Paginator;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Paginator", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","sap/ui/model/json/JSONModel"],function(t,e,n,i){"use strict";var r,o,s,a,u,l,p,d,C,c,f,h;var x=t.publicExtension;var _=t.privateExtension;var g=t.methodOverride;var v=t.finalExtension;var y=t.extensible;var b=t.defineUI5Class;function I(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;B(t,e)}function B(t,e){B=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,n){e.__proto__=n;return e};return B(t,e)}function P(t,e,n,i,r){var o={};Object.keys(i).forEach(function(t){o[t]=i[t]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=n.slice().reverse().reduce(function(n,i){return i(t,e,n)||n},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(t,e,o);o=null}return o}let E=(r=b("sap.fe.core.controllerextensions.Paginator"),o=g(),s=x(),a=v(),u=x(),l=v(),p=_(),d=y(n.After),C=_(),c=y(n.After),r(f=(h=function(t){I(e,t);function e(){var e;for(var n=arguments.length,i=new Array(n),r=0;r<n;r++){i[r]=arguments[r]}e=t.call(this,...i)||this;e._iCurrentIndex=-1;return e}var n=e.prototype;n.onInit=function t(){this._oView=this.base.getView();this._oView.setModel(new i({navUpEnabled:false,navDownEnabled:false}),"paginator")};n.initialize=function t(e,n){if(e&&e.getAllCurrentContexts){this._oListBinding=e}if(n){this._oCurrentContext=n}this._updateCurrentIndexAndButtonEnablement()};n._updateCurrentIndexAndButtonEnablement=function t(){if(this._oCurrentContext&&this._oListBinding){const t=this._oCurrentContext.getPath();this._iCurrentIndex=this._oListBinding.getAllCurrentContexts().findIndex(function(e){return e&&e.getPath()===t});const e=this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex];if(!this._iCurrentIndex&&this._iCurrentIndex!==0||!e||this._oCurrentContext.getPath()!==e.getPath()){this._updateCurrentIndex()}}this._handleButtonEnablement()};n._handleButtonEnablement=function t(){const e=this.base.getView().getModel("paginator");if(this._oListBinding&&this._oListBinding.getAllCurrentContexts().length>1&&this._iCurrentIndex>-1){if(this._iCurrentIndex===this._oListBinding.getAllCurrentContexts().length-1){e.setProperty("/navDownEnabled",false)}else if(this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex+1].isInactive()){e.setProperty("/navDownEnabled",false)}else{e.setProperty("/navDownEnabled",true)}if(this._iCurrentIndex===0){e.setProperty("/navUpEnabled",false)}else if(this._oListBinding.getAllCurrentContexts()[this._iCurrentIndex-1].isInactive()){e.setProperty("/navUpEnabled",false)}else{e.setProperty("/navUpEnabled",true)}}else{e.setProperty("/navUpEnabled",false);e.setProperty("/navDownEnabled",false)}};n._updateCurrentIndex=function t(){if(this._oCurrentContext&&this._oListBinding){const t=this._oCurrentContext.getPath();this._iCurrentIndex=this._oListBinding.getAllCurrentContexts().findIndex(function(e){return e&&e.getPath()===t})}};n.updateCurrentContext=async function t(e){var n,i;if(!this._oListBinding){return}const r=(n=this._oCurrentContext)!==null&&n!==void 0&&n.getModel?(i=this._oCurrentContext)===null||i===void 0?void 0:i.getModel():undefined;await(r===null||r===void 0?void 0:r.submitBatch("$auto"));const o=this._oListBinding.getAllCurrentContexts();const s=this._iCurrentIndex+e;const a=o[s];if(a){const t=this.onBeforeContextUpdate(this._oListBinding,this._iCurrentIndex,e);if(!t){this._iCurrentIndex=s;this._oCurrentContext=a}this.onContextUpdate(a)}this._handleButtonEnablement()};n.onBeforeContextUpdate=function t(e,n,i){return false};n.onContextUpdate=function t(e){};return e}(e),P(h.prototype,"onInit",[o],Object.getOwnPropertyDescriptor(h.prototype,"onInit"),h.prototype),P(h.prototype,"initialize",[s,a],Object.getOwnPropertyDescriptor(h.prototype,"initialize"),h.prototype),P(h.prototype,"updateCurrentContext",[u,l],Object.getOwnPropertyDescriptor(h.prototype,"updateCurrentContext"),h.prototype),P(h.prototype,"onBeforeContextUpdate",[p,d],Object.getOwnPropertyDescriptor(h.prototype,"onBeforeContextUpdate"),h.prototype),P(h.prototype,"onContextUpdate",[C,c],Object.getOwnPropertyDescriptor(h.prototype,"onContextUpdate"),h.prototype),h))||f);return E},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Placeholder-dbg", ["sap/base/util/ObjectPath", "sap/base/util/UriParameters", "sap/fe/core/helpers/ClassSupport", "sap/fe/placeholder/library", "sap/ui/core/Core", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/Placeholder"], function (ObjectPath, UriParameters, ClassSupport, _library, Core, ControllerExtension, Placeholder) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * {@link sap.ui.core.mvc.ControllerExtension Controller extension} for Placeholder
   *
   * @namespace
   * @alias sap.fe.core.controllerextensions.Placeholder
   */
  let PlaceholderControllerExtension = (_dec = defineUI5Class("sap.fe.core.controllerextensions.Placeholder"), _dec2 = publicExtension(), _dec3 = publicExtension(), _dec4 = publicExtension(), _dec5 = publicExtension(), _dec6 = publicExtension(), _dec7 = publicExtension(), _dec8 = publicExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(PlaceholderControllerExtension, _ControllerExtension);
    function PlaceholderControllerExtension() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = PlaceholderControllerExtension.prototype;
    _proto.attachHideCallback = function attachHideCallback() {
      if (this.isPlaceholderEnabled()) {
        const oView = this.base.getView();
        const oPage = oView.getParent() && oView.getParent().oContainer;
        const oNavContainer = oPage && oPage.getParent();
        if (!oNavContainer) {
          return;
        }
        const _fnContainerDelegate = {
          onAfterShow: function (oEvent) {
            if (oEvent.isBackToPage) {
              oNavContainer.hidePlaceholder();
            } else if (UriParameters.fromQuery(window.location.hash.replace(/#.*\?/, "")).get("restoreHistory") === "true") {
              // in case we navigate to the listreport using the shell
              oNavContainer.hidePlaceholder();
            }
          }
        };
        oPage.addEventDelegate(_fnContainerDelegate);
        const oPageReady = oView.getController().pageReady;
        //In case of objectPage, the placeholder should be hidden when heroes requests are received
        // But for some scenario like "Create item", heroes requests are not sent .
        // The pageReady event is then used as fallback

        const aAttachEvents = ["pageReady"];
        if (oView.getControllerName() === "sap.fe.templates.ObjectPage.ObjectPageController") {
          aAttachEvents.push("heroesBatchReceived");
        }
        aAttachEvents.forEach(function (sEvent) {
          oPageReady.attachEvent(sEvent, null, function () {
            oNavContainer.hidePlaceholder();
          }, null);
        });
      }
    };
    _proto.attachRouteMatchers = function attachRouteMatchers() {
      this._init();
    };
    _proto._init = function _init() {
      this.oAppComponent = this.base.getAppComponent();
      this.oRootContainer = this.oAppComponent.getRootContainer();
      this.oPlaceholders = {};

      // eslint-disable-next-line no-constant-condition
      if (this.isPlaceholderEnabled()) {
        Placeholder.registerProvider(function (oConfig) {
          switch (oConfig.name) {
            case "sap.fe.templates.ListReport":
              return {
                html: "sap/fe/placeholder/view/PlaceholderLR.fragment.html",
                autoClose: false
              };
            case "sap.fe.templates.ObjectPage":
              return {
                html: "sap/fe/placeholder/view/PlaceholderOP.fragment.html",
                autoClose: false
              };
            default:
          }
        });
      }
      if (this.isPlaceholderDebugEnabled()) {
        this.initPlaceholderDebug();
      }
    };
    _proto.initPlaceholderDebug = function initPlaceholderDebug() {
      this.resetPlaceholderDebugStats();
      const handler = {
        apply: target => {
          if (this.oRootContainer._placeholder && this.oRootContainer._placeholder.placeholder) {
            this.debugStats.iHidePlaceholderTimestamp = Date.now();
          }
          return target.bind(this.oRootContainer)();
        }
      };
      // eslint-disable-next-line no-undef
      const proxy1 = new Proxy(this.oRootContainer.hidePlaceholder, handler);
      this.oRootContainer.hidePlaceholder = proxy1;
    };
    _proto.isPlaceholderDebugEnabled = function isPlaceholderDebugEnabled() {
      if (UriParameters.fromQuery(window.location.search).get("sap-ui-xx-placeholder-debug") === "true") {
        return true;
      }
      return false;
    };
    _proto.resetPlaceholderDebugStats = function resetPlaceholderDebugStats() {
      this.debugStats = {
        iHidePlaceholderTimestamp: 0,
        iPageReadyEventTimestamp: 0,
        iHeroesBatchReceivedEventTimestamp: 0
      };
    };
    _proto.getPlaceholderDebugStats = function getPlaceholderDebugStats() {
      return this.debugStats;
    };
    _proto.isPlaceholderEnabled = function isPlaceholderEnabled() {
      const bPlaceholderEnabledInFLP = ObjectPath.get("sap-ushell-config.apps.placeholder.enabled");
      if (bPlaceholderEnabledInFLP === false) {
        return false;
      }
      return Core.getConfiguration().getPlaceholder();
    };
    return PlaceholderControllerExtension;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "attachHideCallback", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "attachHideCallback"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "attachRouteMatchers", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "attachRouteMatchers"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "initPlaceholderDebug", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "initPlaceholderDebug"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isPlaceholderDebugEnabled", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "isPlaceholderDebugEnabled"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resetPlaceholderDebugStats", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "resetPlaceholderDebugStats"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getPlaceholderDebugStats", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "getPlaceholderDebugStats"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isPlaceholderEnabled", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "isPlaceholderEnabled"), _class2.prototype)), _class2)) || _class);
  return PlaceholderControllerExtension;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Placeholder", ["sap/base/util/ObjectPath","sap/base/util/UriParameters","sap/fe/core/helpers/ClassSupport","sap/fe/placeholder/library","sap/ui/core/Core","sap/ui/core/mvc/ControllerExtension","sap/ui/core/Placeholder"],function(e,t,o,r,a,i,n){"use strict";var l,c,s,p,h,u,d,f,b,g;var P=o.publicExtension;var y=o.defineUI5Class;function m(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;O(e,t)}function O(e,t){O=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return O(e,t)}function C(e,t,o,r,a){var i={};Object.keys(r).forEach(function(e){i[e]=r[e]});i.enumerable=!!i.enumerable;i.configurable=!!i.configurable;if("value"in i||i.initializer){i.writable=true}i=o.slice().reverse().reduce(function(o,r){return r(e,t,o)||o},i);if(a&&i.initializer!==void 0){i.value=i.initializer?i.initializer.call(a):void 0;i.initializer=undefined}if(i.initializer===void 0){Object.defineProperty(e,t,i);i=null}return i}let D=(l=y("sap.fe.core.controllerextensions.Placeholder"),c=P(),s=P(),p=P(),h=P(),u=P(),d=P(),f=P(),l(b=(g=function(o){m(r,o);function r(){return o.apply(this,arguments)||this}var i=r.prototype;i.attachHideCallback=function e(){if(this.isPlaceholderEnabled()){const e=this.base.getView();const o=e.getParent()&&e.getParent().oContainer;const r=o&&o.getParent();if(!r){return}const a={onAfterShow:function(e){if(e.isBackToPage){r.hidePlaceholder()}else if(t.fromQuery(window.location.hash.replace(/#.*\?/,"")).get("restoreHistory")==="true"){r.hidePlaceholder()}}};o.addEventDelegate(a);const i=e.getController().pageReady;const n=["pageReady"];if(e.getControllerName()==="sap.fe.templates.ObjectPage.ObjectPageController"){n.push("heroesBatchReceived")}n.forEach(function(e){i.attachEvent(e,null,function(){r.hidePlaceholder()},null)})}};i.attachRouteMatchers=function e(){this._init()};i._init=function e(){this.oAppComponent=this.base.getAppComponent();this.oRootContainer=this.oAppComponent.getRootContainer();this.oPlaceholders={};if(this.isPlaceholderEnabled()){n.registerProvider(function(e){switch(e.name){case"sap.fe.templates.ListReport":return{html:"sap/fe/placeholder/view/PlaceholderLR.fragment.html",autoClose:false};case"sap.fe.templates.ObjectPage":return{html:"sap/fe/placeholder/view/PlaceholderOP.fragment.html",autoClose:false};default:}})}if(this.isPlaceholderDebugEnabled()){this.initPlaceholderDebug()}};i.initPlaceholderDebug=function e(){this.resetPlaceholderDebugStats();const t={apply:e=>{if(this.oRootContainer._placeholder&&this.oRootContainer._placeholder.placeholder){this.debugStats.iHidePlaceholderTimestamp=Date.now()}return e.bind(this.oRootContainer)()}};const o=new Proxy(this.oRootContainer.hidePlaceholder,t);this.oRootContainer.hidePlaceholder=o};i.isPlaceholderDebugEnabled=function e(){if(t.fromQuery(window.location.search).get("sap-ui-xx-placeholder-debug")==="true"){return true}return false};i.resetPlaceholderDebugStats=function e(){this.debugStats={iHidePlaceholderTimestamp:0,iPageReadyEventTimestamp:0,iHeroesBatchReceivedEventTimestamp:0}};i.getPlaceholderDebugStats=function e(){return this.debugStats};i.isPlaceholderEnabled=function t(){const o=e.get("sap-ushell-config.apps.placeholder.enabled");if(o===false){return false}return a.getConfiguration().getPlaceholder()};return r}(i),C(g.prototype,"attachHideCallback",[c],Object.getOwnPropertyDescriptor(g.prototype,"attachHideCallback"),g.prototype),C(g.prototype,"attachRouteMatchers",[s],Object.getOwnPropertyDescriptor(g.prototype,"attachRouteMatchers"),g.prototype),C(g.prototype,"initPlaceholderDebug",[p],Object.getOwnPropertyDescriptor(g.prototype,"initPlaceholderDebug"),g.prototype),C(g.prototype,"isPlaceholderDebugEnabled",[h],Object.getOwnPropertyDescriptor(g.prototype,"isPlaceholderDebugEnabled"),g.prototype),C(g.prototype,"resetPlaceholderDebugStats",[u],Object.getOwnPropertyDescriptor(g.prototype,"resetPlaceholderDebugStats"),g.prototype),C(g.prototype,"getPlaceholderDebugStats",[d],Object.getOwnPropertyDescriptor(g.prototype,"getPlaceholderDebugStats"),g.prototype),C(g.prototype,"isPlaceholderEnabled",[f],Object.getOwnPropertyDescriptor(g.prototype,"isPlaceholderEnabled"),g.prototype),g))||b);return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Routing-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ModelHelper", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution"], function (ClassSupport, ModelHelper, ControllerExtension, OverrideExecution) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  /**
   * A controller extension offering hooks into the routing flow of the application
   *
   * @hideconstructor
   * @public
   * @since 1.86.0
   */
  let Routing = (_dec = defineUI5Class("sap.fe.core.controllerextensions.Routing"), _dec2 = publicExtension(), _dec3 = extensible(OverrideExecution.After), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = publicExtension(), _dec7 = extensible(OverrideExecution.After), _dec8 = publicExtension(), _dec9 = extensible(OverrideExecution.After), _dec10 = publicExtension(), _dec11 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(Routing, _ControllerExtension);
    function Routing() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = Routing.prototype;
    /**
     * @private
     * @name sap.fe.core.controllerextensions.Routing.getMetadata
     * @function
     */
    /**
     * @private
     * @name sap.fe.core.controllerextensions.Routing.extend
     * @function
     */
    /**
     * This function can be used to intercept the routing event happening during the normal process of navigating from one page to another (like clicking on the table row to navigate, or when pagination buttons are clicked). 
     * 
     * The function is NOT called during other means of external outbound navigation (like a navigation configured via a link, or by using navigation buttons).
     * 
     * If declared as an extension, it allows you to intercept and change the normal navigation flow.
     * If you decide to do your own navigation processing, you can return `true` to prevent the default routing behavior.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param mNavigationParameters Object containing row context and page context
     * @param mNavigationParameters.bindingContext The currently selected context
     * @returns `true` to prevent the default execution, false to keep the standard behavior
     * @alias sap.fe.core.controllerextensions.Routing#onBeforeNavigation
     * @public
     * @since 1.86.0
     */
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onBeforeNavigation = function onBeforeNavigation(mNavigationParameters) {
      // to be overriden by the application
      return false;
    }

    /**
     * Allows navigation to a specific context.
     *
     * @param oContext Object containing the context to be navigated to
     * @alias sap.fe.core.controllerextensions.Routing#navigate
     * @public
     * @since 1.90.0
     */;
    _proto.navigate = function navigate(oContext) {
      const internalModel = this.base.getModel("internal");
      // We have to delete the internal model value for "paginatorCurrentContext" to ensure it is re-evaluated by the navigateToContext function
      // BCP: 2270123820
      internalModel.setProperty("/paginatorCurrentContext", null);
      this.base._routing.navigateToContext(oContext);
    }

    /**
     * This function is used to intercept the routing event before binding a page.
     *
     * If it is declared as an extension, it allows you to intercept and change the normal flow of binding.
     *
     * This function is not called directly, but overridden separately by consuming controllers.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oContext Object containing the context for the navigation
     * @alias sap.fe.core.controllerextensions.Routing#onBeforeBinding
     * @public
     * @since 1.90.0
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onBeforeBinding = function onBeforeBinding(oContext) {
      // to be overriden by the application
    }

    /**
     * This function is used to intercept the routing event after binding a page.
     *
     * If it is declared as an extension, it allows you to intercept and change the normal flow of binding.
     *
     * This function is not called directly, but overridden separately by consuming controllers.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oContext Object containing the context to be navigated
     * @alias sap.fe.core.controllerextensions.Routing#onAfterBinding
     * @public
     * @since 1.90.0
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onAfterBinding = function onAfterBinding(oContext) {
      // to be overriden by the application
    }

    /**
     * Navigate to another target.
     *
     * @alias sap.fe.core.controllerextensions.Routing#navigateToRoute
     * @param sTargetRouteName Name of the target route
     * @param oParameters Parameters to be used with route to create the target hash
     * @returns Promise that is resolved when the navigation is finalized
     * @public
     */;
    _proto.navigateToRoute = function navigateToRoute(sTargetRouteName, oParameters) {
      const oMetaModel = this.base.getModel().getMetaModel();
      const bIsStickyMode = ModelHelper.isStickySessionSupported(oMetaModel);
      if (!oParameters) {
        oParameters = {};
      }
      oParameters.bIsStickyMode = bIsStickyMode;
      return this.base._routing.navigateToRoute(sTargetRouteName, oParameters);
    };
    return Routing;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onBeforeNavigation", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeNavigation"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigate", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "navigate"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeBinding", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAfterBinding", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "onAfterBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "navigateToRoute", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "navigateToRoute"), _class2.prototype)), _class2)) || _class);
  return Routing;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Routing", ["sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ModelHelper","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution"],function(e,t,o,r){"use strict";var n,i,p,a,c,s,u,f,l,y,g,v,b;var d=e.publicExtension;var O=e.finalExtension;var B=e.extensible;var j=e.defineUI5Class;function h(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;P(e,t)}function P(e,t){P=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return P(e,t)}function x(e,t,o,r,n){var i={};Object.keys(r).forEach(function(e){i[e]=r[e]});i.enumerable=!!i.enumerable;i.configurable=!!i.configurable;if("value"in i||i.initializer){i.writable=true}i=o.slice().reverse().reduce(function(o,r){return r(e,t,o)||o},i);if(n&&i.initializer!==void 0){i.value=i.initializer?i.initializer.call(n):void 0;i.initializer=undefined}if(i.initializer===void 0){Object.defineProperty(e,t,i);i=null}return i}let w=(n=j("sap.fe.core.controllerextensions.Routing"),i=d(),p=B(r.After),a=d(),c=O(),s=d(),u=B(r.After),f=d(),l=B(r.After),y=d(),g=O(),n(v=(b=function(e){h(o,e);function o(){return e.apply(this,arguments)||this}var r=o.prototype;r.onBeforeNavigation=function e(t){return false};r.navigate=function e(t){const o=this.base.getModel("internal");o.setProperty("/paginatorCurrentContext",null);this.base._routing.navigateToContext(t)};r.onBeforeBinding=function e(t){};r.onAfterBinding=function e(t){};r.navigateToRoute=function e(o,r){const n=this.base.getModel().getMetaModel();const i=t.isStickySessionSupported(n);if(!r){r={}}r.bIsStickyMode=i;return this.base._routing.navigateToRoute(o,r)};return o}(o),x(b.prototype,"onBeforeNavigation",[i,p],Object.getOwnPropertyDescriptor(b.prototype,"onBeforeNavigation"),b.prototype),x(b.prototype,"navigate",[a,c],Object.getOwnPropertyDescriptor(b.prototype,"navigate"),b.prototype),x(b.prototype,"onBeforeBinding",[s,u],Object.getOwnPropertyDescriptor(b.prototype,"onBeforeBinding"),b.prototype),x(b.prototype,"onAfterBinding",[f,l],Object.getOwnPropertyDescriptor(b.prototype,"onAfterBinding"),b.prototype),x(b.prototype,"navigateToRoute",[y,g],Object.getOwnPropertyDescriptor(b.prototype,"navigateToRoute"),b.prototype),b))||v);return w},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/RoutingListener-dbg", ["sap/fe/core/controllerextensions/InternalRouting"], function (InternalRouting) {
  "use strict";

  return InternalRouting;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/RoutingListener", ["sap/fe/core/controllerextensions/InternalRouting"],function(e){"use strict";return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Share-dbg", ["sap/base/Log", "sap/base/util/extend", "sap/base/util/ObjectPath", "sap/fe/core/helpers/ClassSupport", "sap/m/library", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "sap/ui/core/routing/HashChanger", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/model/json/JSONModel"], function (Log, extend, ObjectPath, ClassSupport, library, Core, Fragment, ControllerExtension, OverrideExecution, HashChanger, XMLPreprocessor, XMLTemplateProcessor, JSONModel) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  let oLastFocusedControl;

  /**
   * A controller extension offering hooks into the routing flow of the application
   *
   * @hideconstructor
   * @public
   * @since 1.86.0
   */
  let ShareUtils = (_dec = defineUI5Class("sap.fe.core.controllerextensions.Share"), _dec2 = methodOverride(), _dec3 = methodOverride(), _dec4 = publicExtension(), _dec5 = finalExtension(), _dec6 = publicExtension(), _dec7 = extensible(OverrideExecution.After), _dec8 = publicExtension(), _dec9 = finalExtension(), _dec10 = publicExtension(), _dec11 = finalExtension(), _dec12 = publicExtension(), _dec13 = finalExtension(), _dec14 = publicExtension(), _dec15 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(ShareUtils, _ControllerExtension);
    function ShareUtils() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = ShareUtils.prototype;
    _proto.onInit = function onInit() {
      const collaborationInfoModel = new JSONModel({
        url: "",
        appTitle: "",
        subTitle: "",
        minifyUrlForChat: true,
        appId: ""
      });
      this.base.getView().setModel(collaborationInfoModel, "collaborationInfo");
    };
    _proto.onExit = function onExit() {
      var _this$base, _this$base$getView;
      const collaborationInfoModel = (_this$base = this.base) === null || _this$base === void 0 ? void 0 : (_this$base$getView = _this$base.getView()) === null || _this$base$getView === void 0 ? void 0 : _this$base$getView.getModel("collaborationInfo");
      if (collaborationInfoModel) {
        collaborationInfoModel.destroy();
      }
    }

    /**
     * Opens the share sheet.
     *
     * @function
     * @param oControl The control to which the ActionSheet is opened.
     * @alias sap.fe.core.controllerextensions.Share#openShareSheet
     * @public
     * @since 1.93.0
     */;
    _proto.openShareSheet = function openShareSheet(oControl) {
      this._openShareSheetImpl(oControl);
    }

    /**
     * Adapts the metadata used while sharing the page URL via 'Send Email', 'Share in SAP Jam', and 'Save as Tile'.
     *
     * @function
     * @param oShareMetadata Object containing the share metadata.
     * @param oShareMetadata.url Default URL that will be used via 'Send Email', 'Share in SAP Jam', and 'Save as Tile'
     * @param oShareMetadata.title Default title that will be used as 'email subject' in 'Send Email', 'share text' in 'Share in SAP Jam' and 'title' in 'Save as Tile'
     * @param oShareMetadata.email Email-specific metadata.
     * @param oShareMetadata.email.url URL that will be used specifically for 'Send Email'. This takes precedence over oShareMetadata.url.
     * @param oShareMetadata.email.title Title that will be used as "email subject" in 'Send Email'. This takes precedence over oShareMetadata.title.
     * @param oShareMetadata.jam SAP Jam-specific metadata.
     * @param oShareMetadata.jam.url URL that will be used specifically for 'Share in SAP Jam'. This takes precedence over oShareMetadata.url.
     * @param oShareMetadata.jam.title Title that will be used as 'share text' in 'Share in SAP Jam'. This takes precedence over oShareMetadata.title.
     * @param oShareMetadata.tile Save as Tile-specific metadata.
     * @param oShareMetadata.tile.url URL that will be used specifically for 'Save as Tile'. This takes precedence over oShareMetadata.url.
     * @param oShareMetadata.tile.title Title to be used for the tile. This takes precedence over oShareMetadata.title.
     * @param oShareMetadata.tile.subtitle Subtitle to be used for the tile.
     * @param oShareMetadata.tile.icon Icon to be used for the tile.
     * @param oShareMetadata.tile.queryUrl Query URL of an OData service from which data for a dynamic tile is read.
     * @returns Share Metadata or a Promise resolving the Share Metadata
     * @alias sap.fe.core.controllerextensions.Share#adaptShareMetadata
     * @public
     * @since 1.93.0
     */;
    _proto.adaptShareMetadata = function adaptShareMetadata(oShareMetadata) {
      return oShareMetadata;
    };
    _proto._openShareSheetImpl = async function _openShareSheetImpl(by) {
      let oShareActionSheet;
      const sHash = HashChanger.getInstance().getHash(),
        sBasePath = HashChanger.getInstance().hrefForAppSpecificHash ? HashChanger.getInstance().hrefForAppSpecificHash("") : "",
        oShareMetadata = {
          url: window.location.origin + window.location.pathname + window.location.search + (sHash ? sBasePath + sHash : window.location.hash),
          title: document.title,
          email: {
            url: "",
            title: ""
          },
          jam: {
            url: "",
            title: ""
          },
          tile: {
            url: "",
            title: "",
            subtitle: "",
            icon: "",
            queryUrl: ""
          }
        };
      oLastFocusedControl = by;
      const setShareEmailData = function (shareActionSheet, oModelData) {
        const oShareMailModel = shareActionSheet.getModel("shareData");
        const oNewMailData = extend(oShareMailModel.getData(), oModelData);
        oShareMailModel.setData(oNewMailData);
      };
      try {
        const oModelData = await Promise.resolve(this.adaptShareMetadata(oShareMetadata));
        const fragmentController = {
          shareEmailPressed: function () {
            const oMailModel = oShareActionSheet.getModel("shareData");
            const oMailData = oMailModel.getData();
            const oResource = Core.getLibraryResourceBundle("sap.fe.core");
            const sEmailSubject = oMailData.email.title ? oMailData.email.title : oResource.getText("T_SHARE_UTIL_HELPER_SAPFE_EMAIL_SUBJECT", [oMailData.title]);
            library.URLHelper.triggerEmail(undefined, sEmailSubject, oMailData.email.url ? oMailData.email.url : oMailData.url);
          },
          shareMSTeamsPressed: function () {
            const msTeamsModel = oShareActionSheet.getModel("shareData");
            const msTeamsData = msTeamsModel.getData();
            const message = msTeamsData.email.title ? msTeamsData.email.title : msTeamsData.title;
            const url = msTeamsData.email.url ? msTeamsData.email.url : msTeamsData.url;
            const newWindowOpen = window.open("", "ms-teams-share-popup", "width=700,height=600");
            newWindowOpen.opener = null;
            newWindowOpen.location = `https://teams.microsoft.com/share?msgText=${encodeURIComponent(message)}&href=${encodeURIComponent(url)}`;
          },
          onSaveTilePress: function () {
            // TODO it seems that the press event is executed before the dialog is available - adding a timeout is a cheap workaround
            setTimeout(function () {
              var _Core$byId;
              (_Core$byId = Core.byId("bookmarkDialog")) === null || _Core$byId === void 0 ? void 0 : _Core$byId.attachAfterClose(function () {
                oLastFocusedControl.focus();
              });
            }, 0);
          },
          shareJamPressed: () => {
            this._doOpenJamShareDialog(oModelData.jam.title ? oModelData.jam.title : oModelData.title, oModelData.jam.url ? oModelData.jam.url : oModelData.url);
          }
        };
        fragmentController.onCancelPressed = function () {
          oShareActionSheet.close();
        };
        fragmentController.setShareSheet = function (oShareSheet) {
          by.shareSheet = oShareSheet;
        };
        const oThis = new JSONModel({});
        const oPreprocessorSettings = {
          bindingContexts: {
            this: oThis.createBindingContext("/")
          },
          models: {
            this: oThis
          }
        };
        const oTileData = {
          title: oModelData.tile.title ? oModelData.tile.title : oModelData.title,
          subtitle: oModelData.tile.subtitle,
          icon: oModelData.tile.icon,
          url: oModelData.tile.url ? oModelData.tile.url : oModelData.url.substring(oModelData.url.indexOf("#")),
          queryUrl: oModelData.tile.queryUrl
        };
        if (by.shareSheet) {
          oShareActionSheet = by.shareSheet;
          const oShareModel = oShareActionSheet.getModel("share");
          this._setStaticShareData(oShareModel);
          const oNewData = extend(oShareModel.getData(), oTileData);
          oShareModel.setData(oNewData);
          setShareEmailData(oShareActionSheet, oModelData);
          oShareActionSheet.openBy(by);
        } else {
          const sFragmentName = "sap.fe.macros.share.ShareSheet";
          const oPopoverFragment = XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment");
          try {
            const oFragment = await Promise.resolve(XMLPreprocessor.process(oPopoverFragment, {
              name: sFragmentName
            }, oPreprocessorSettings));
            oShareActionSheet = await Fragment.load({
              definition: oFragment,
              controller: fragmentController
            });
            oShareActionSheet.setModel(new JSONModel(oTileData || {}), "share");
            const oShareModel = oShareActionSheet.getModel("share");
            this._setStaticShareData(oShareModel);
            const oNewData = extend(oShareModel.getData(), oTileData);
            oShareModel.setData(oNewData);
            oShareActionSheet.setModel(new JSONModel(oModelData || {}), "shareData");
            setShareEmailData(oShareActionSheet, oModelData);
            by.addDependent(oShareActionSheet);
            oShareActionSheet.openBy(by);
            fragmentController.setShareSheet(oShareActionSheet);
          } catch (oError) {
            Log.error("Error while opening the share fragment", oError);
          }
        }
      } catch (oError) {
        Log.error("Error while fetching the share model data", oError);
      }
    };
    _proto._setStaticShareData = function _setStaticShareData(shareModel) {
      const oResource = Core.getLibraryResourceBundle("sap.fe.core");
      shareModel.setProperty("/jamButtonText", oResource.getText("T_COMMON_SAPFE_SHARE_JAM"));
      shareModel.setProperty("/emailButtonText", oResource.getText("T_SEMANTIC_CONTROL_SEND_EMAIL"));
      shareModel.setProperty("/msTeamsShareButtonText", oResource.getText("T_COMMON_SAPFE_SHARE_MSTEAMS"));
      // Share to Microsoft Teams is feature which for now only gets enabled for selected customers.
      // The switch "sapHorizonEnabled" and check for it was aligned with the Fiori launchpad team.
      if (ObjectPath.get("sap-ushell-config.renderers.fiori2.componentData.config.sapHorizonEnabled") === true) {
        shareModel.setProperty("/msTeamsVisible", true);
      } else {
        shareModel.setProperty("/msTeamsVisible", false);
      }
      const fnGetUser = ObjectPath.get("sap.ushell.Container.getUser");
      shareModel.setProperty("/jamVisible", !!fnGetUser && fnGetUser().isJamActive());
      shareModel.setProperty("/saveAsTileVisible", !!(sap && sap.ushell && sap.ushell.Container));
    }

    //the actual opening of the JAM share dialog
    ;
    _proto._doOpenJamShareDialog = function _doOpenJamShareDialog(text, sUrl) {
      const oShareDialog = Core.createComponent({
        name: "sap.collaboration.components.fiori.sharing.dialog",
        settings: {
          object: {
            id: sUrl,
            share: text
          }
        }
      });
      oShareDialog.open();
    }

    /**
     * Triggers the email flow.
     *
     * @returns {void}
     * @private
     */;
    _proto._triggerEmail = async function _triggerEmail() {
      const shareMetadata = await this._adaptShareMetadata();
      const oResource = Core.getLibraryResourceBundle("sap.fe.core");
      const sEmailSubject = shareMetadata.email.title ? shareMetadata.email.title : oResource.getText("T_SHARE_UTIL_HELPER_SAPFE_EMAIL_SUBJECT", [shareMetadata.title]);
      library.URLHelper.triggerEmail(undefined, sEmailSubject, shareMetadata.email.url ? shareMetadata.email.url : shareMetadata.url);
    }

    /**
     * Triggers the share to jam flow.
     *
     * @returns {void}
     * @private
     */;
    _proto._triggerShareToJam = async function _triggerShareToJam() {
      const shareMetadata = await this._adaptShareMetadata();
      this._doOpenJamShareDialog(shareMetadata.jam.title ? shareMetadata.jam.title : shareMetadata.title, shareMetadata.jam.url ? shareMetadata.jam.url : window.location.origin + window.location.pathname + shareMetadata.url);
    }

    /**
     * Triggers the save as tile flow.
     *
     * @param [source]
     * @returns {void}
     * @private
     */;
    _proto._saveAsTile = async function _saveAsTile(source) {
      const shareMetadata = await this._adaptShareMetadata(),
        internalAddBookmarkButton = source.getDependents()[0],
        sHash = HashChanger.getInstance().getHash(),
        sBasePath = HashChanger.getInstance().hrefForAppSpecificHash ? HashChanger.getInstance().hrefForAppSpecificHash("") : "";
      shareMetadata.url = sHash ? sBasePath + sHash : window.location.hash;

      // set AddBookmarkButton properties
      internalAddBookmarkButton.setTitle(shareMetadata.tile.title ? shareMetadata.tile.title : shareMetadata.title);
      internalAddBookmarkButton.setSubtitle(shareMetadata.tile.subtitle);
      internalAddBookmarkButton.setTileIcon(shareMetadata.tile.icon);
      internalAddBookmarkButton.setCustomUrl(shareMetadata.tile.url ? shareMetadata.tile.url : shareMetadata.url);
      internalAddBookmarkButton.setServiceUrl(shareMetadata.tile.queryUrl);

      // addBookmarkButton fire press
      internalAddBookmarkButton.firePress();
    }

    /**
     * Call the adaptShareMetadata extension.
     *
     * @returns {object} Share Metadata
     * @private
     */;
    _proto._adaptShareMetadata = function _adaptShareMetadata() {
      const sHash = HashChanger.getInstance().getHash(),
        sBasePath = HashChanger.getInstance().hrefForAppSpecificHash ? HashChanger.getInstance().hrefForAppSpecificHash("") : "",
        oShareMetadata = {
          url: window.location.origin + window.location.pathname + window.location.search + (sHash ? sBasePath + sHash : window.location.hash),
          title: document.title,
          email: {
            url: "",
            title: ""
          },
          jam: {
            url: "",
            title: ""
          },
          tile: {
            url: "",
            title: "",
            subtitle: "",
            icon: "",
            queryUrl: ""
          }
        };
      return this.adaptShareMetadata(oShareMetadata);
    };
    return ShareUtils;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onExit", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "onExit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "openShareSheet", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "openShareSheet"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptShareMetadata", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptShareMetadata"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_triggerEmail", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "_triggerEmail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_triggerShareToJam", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "_triggerShareToJam"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_saveAsTile", [_dec12, _dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "_saveAsTile"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_adaptShareMetadata", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "_adaptShareMetadata"), _class2.prototype)), _class2)) || _class);
  return ShareUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/Share", ["sap/base/Log","sap/base/util/extend","sap/base/util/ObjectPath","sap/fe/core/helpers/ClassSupport","sap/m/library","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","sap/ui/core/routing/HashChanger","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/model/json/JSONModel"],function(e,t,o,r,a,i,n,s,l,c,p,u,h){"use strict";var d,m,g,f,S,y,b,_,w,T,E,O,v,M,P,D,j;var I=r.publicExtension;var A=r.methodOverride;var x=r.finalExtension;var C=r.extensible;var H=r.defineUI5Class;function U(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;L(e,t)}function L(e,t){L=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return L(e,t)}function R(e,t,o,r,a){var i={};Object.keys(r).forEach(function(e){i[e]=r[e]});i.enumerable=!!i.enumerable;i.configurable=!!i.configurable;if("value"in i||i.initializer){i.writable=true}i=o.slice().reverse().reduce(function(o,r){return r(e,t,o)||o},i);if(a&&i.initializer!==void 0){i.value=i.initializer?i.initializer.call(a):void 0;i.initializer=undefined}if(i.initializer===void 0){Object.defineProperty(e,t,i);i=null}return i}let F;let J=(d=H("sap.fe.core.controllerextensions.Share"),m=A(),g=A(),f=I(),S=x(),y=I(),b=C(l.After),_=I(),w=x(),T=I(),E=x(),O=I(),v=x(),M=I(),P=x(),d(D=(j=function(r){U(s,r);function s(){return r.apply(this,arguments)||this}var l=s.prototype;l.onInit=function e(){const t=new h({url:"",appTitle:"",subTitle:"",minifyUrlForChat:true,appId:""});this.base.getView().setModel(t,"collaborationInfo")};l.onExit=function e(){var t,o;const r=(t=this.base)===null||t===void 0?void 0:(o=t.getView())===null||o===void 0?void 0:o.getModel("collaborationInfo");if(r){r.destroy()}};l.openShareSheet=function e(t){this._openShareSheetImpl(t)};l.adaptShareMetadata=function e(t){return t};l._openShareSheetImpl=async function o(r){let s;const l=c.getInstance().getHash(),d=c.getInstance().hrefForAppSpecificHash?c.getInstance().hrefForAppSpecificHash(""):"",m={url:window.location.origin+window.location.pathname+window.location.search+(l?d+l:window.location.hash),title:document.title,email:{url:"",title:""},jam:{url:"",title:""},tile:{url:"",title:"",subtitle:"",icon:"",queryUrl:""}};F=r;const g=function(e,o){const r=e.getModel("shareData");const a=t(r.getData(),o);r.setData(a)};try{const o=await Promise.resolve(this.adaptShareMetadata(m));const l={shareEmailPressed:function(){const e=s.getModel("shareData");const t=e.getData();const o=i.getLibraryResourceBundle("sap.fe.core");const r=t.email.title?t.email.title:o.getText("T_SHARE_UTIL_HELPER_SAPFE_EMAIL_SUBJECT",[t.title]);a.URLHelper.triggerEmail(undefined,r,t.email.url?t.email.url:t.url)},shareMSTeamsPressed:function(){const e=s.getModel("shareData");const t=e.getData();const o=t.email.title?t.email.title:t.title;const r=t.email.url?t.email.url:t.url;const a=window.open("","ms-teams-share-popup","width=700,height=600");a.opener=null;a.location=`https://teams.microsoft.com/share?msgText=${encodeURIComponent(o)}&href=${encodeURIComponent(r)}`},onSaveTilePress:function(){setTimeout(function(){var e;(e=i.byId("bookmarkDialog"))===null||e===void 0?void 0:e.attachAfterClose(function(){F.focus()})},0)},shareJamPressed:()=>{this._doOpenJamShareDialog(o.jam.title?o.jam.title:o.title,o.jam.url?o.jam.url:o.url)}};l.onCancelPressed=function(){s.close()};l.setShareSheet=function(e){r.shareSheet=e};const c=new h({});const d={bindingContexts:{this:c.createBindingContext("/")},models:{this:c}};const f={title:o.tile.title?o.tile.title:o.title,subtitle:o.tile.subtitle,icon:o.tile.icon,url:o.tile.url?o.tile.url:o.url.substring(o.url.indexOf("#")),queryUrl:o.tile.queryUrl};if(r.shareSheet){s=r.shareSheet;const e=s.getModel("share");this._setStaticShareData(e);const a=t(e.getData(),f);e.setData(a);g(s,o);s.openBy(r)}else{const a="sap.fe.macros.share.ShareSheet";const i=u.loadTemplate(a,"fragment");try{const e=await Promise.resolve(p.process(i,{name:a},d));s=await n.load({definition:e,controller:l});s.setModel(new h(f||{}),"share");const c=s.getModel("share");this._setStaticShareData(c);const u=t(c.getData(),f);c.setData(u);s.setModel(new h(o||{}),"shareData");g(s,o);r.addDependent(s);s.openBy(r);l.setShareSheet(s)}catch(t){e.error("Error while opening the share fragment",t)}}}catch(t){e.error("Error while fetching the share model data",t)}};l._setStaticShareData=function e(t){const r=i.getLibraryResourceBundle("sap.fe.core");t.setProperty("/jamButtonText",r.getText("T_COMMON_SAPFE_SHARE_JAM"));t.setProperty("/emailButtonText",r.getText("T_SEMANTIC_CONTROL_SEND_EMAIL"));t.setProperty("/msTeamsShareButtonText",r.getText("T_COMMON_SAPFE_SHARE_MSTEAMS"));if(o.get("sap-ushell-config.renderers.fiori2.componentData.config.sapHorizonEnabled")===true){t.setProperty("/msTeamsVisible",true)}else{t.setProperty("/msTeamsVisible",false)}const a=o.get("sap.ushell.Container.getUser");t.setProperty("/jamVisible",!!a&&a().isJamActive());t.setProperty("/saveAsTileVisible",!!(sap&&sap.ushell&&sap.ushell.Container))};l._doOpenJamShareDialog=function e(t,o){const r=i.createComponent({name:"sap.collaboration.components.fiori.sharing.dialog",settings:{object:{id:o,share:t}}});r.open()};l._triggerEmail=async function e(){const t=await this._adaptShareMetadata();const o=i.getLibraryResourceBundle("sap.fe.core");const r=t.email.title?t.email.title:o.getText("T_SHARE_UTIL_HELPER_SAPFE_EMAIL_SUBJECT",[t.title]);a.URLHelper.triggerEmail(undefined,r,t.email.url?t.email.url:t.url)};l._triggerShareToJam=async function e(){const t=await this._adaptShareMetadata();this._doOpenJamShareDialog(t.jam.title?t.jam.title:t.title,t.jam.url?t.jam.url:window.location.origin+window.location.pathname+t.url)};l._saveAsTile=async function e(t){const o=await this._adaptShareMetadata(),r=t.getDependents()[0],a=c.getInstance().getHash(),i=c.getInstance().hrefForAppSpecificHash?c.getInstance().hrefForAppSpecificHash(""):"";o.url=a?i+a:window.location.hash;r.setTitle(o.tile.title?o.tile.title:o.title);r.setSubtitle(o.tile.subtitle);r.setTileIcon(o.tile.icon);r.setCustomUrl(o.tile.url?o.tile.url:o.url);r.setServiceUrl(o.tile.queryUrl);r.firePress()};l._adaptShareMetadata=function e(){const t=c.getInstance().getHash(),o=c.getInstance().hrefForAppSpecificHash?c.getInstance().hrefForAppSpecificHash(""):"",r={url:window.location.origin+window.location.pathname+window.location.search+(t?o+t:window.location.hash),title:document.title,email:{url:"",title:""},jam:{url:"",title:""},tile:{url:"",title:"",subtitle:"",icon:"",queryUrl:""}};return this.adaptShareMetadata(r)};return s}(s),R(j.prototype,"onInit",[m],Object.getOwnPropertyDescriptor(j.prototype,"onInit"),j.prototype),R(j.prototype,"onExit",[g],Object.getOwnPropertyDescriptor(j.prototype,"onExit"),j.prototype),R(j.prototype,"openShareSheet",[f,S],Object.getOwnPropertyDescriptor(j.prototype,"openShareSheet"),j.prototype),R(j.prototype,"adaptShareMetadata",[y,b],Object.getOwnPropertyDescriptor(j.prototype,"adaptShareMetadata"),j.prototype),R(j.prototype,"_triggerEmail",[_,w],Object.getOwnPropertyDescriptor(j.prototype,"_triggerEmail"),j.prototype),R(j.prototype,"_triggerShareToJam",[T,E],Object.getOwnPropertyDescriptor(j.prototype,"_triggerShareToJam"),j.prototype),R(j.prototype,"_saveAsTile",[O,v],Object.getOwnPropertyDescriptor(j.prototype,"_saveAsTile"),j.prototype),R(j.prototype,"_adaptShareMetadata",[M,P],Object.getOwnPropertyDescriptor(j.prototype,"_adaptShareMetadata"),j.prototype),j))||D);return J},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/SideEffects-dbg", ["sap/base/Log", "sap/ui/core/mvc/ControllerExtension", "../CommonUtils", "../helpers/ClassSupport"], function (Log, ControllerExtension, CommonUtils, ClassSupport) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var methodOverride = ClassSupport.methodOverride;
  var finalExtension = ClassSupport.finalExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  const IMMEDIATE_REQUEST = "$$ImmediateRequest";
  let SideEffectsControllerExtension = (_dec = defineUI5Class("sap.fe.core.controllerextensions.SideEffects"), _dec2 = methodOverride(), _dec3 = publicExtension(), _dec4 = finalExtension(), _dec5 = publicExtension(), _dec6 = finalExtension(), _dec7 = publicExtension(), _dec8 = finalExtension(), _dec9 = publicExtension(), _dec10 = finalExtension(), _dec11 = publicExtension(), _dec12 = finalExtension(), _dec13 = publicExtension(), _dec14 = finalExtension(), _dec15 = publicExtension(), _dec16 = finalExtension(), _dec17 = publicExtension(), _dec18 = finalExtension(), _dec19 = publicExtension(), _dec20 = finalExtension(), _dec21 = publicExtension(), _dec22 = finalExtension(), _dec23 = publicExtension(), _dec24 = finalExtension(), _dec25 = publicExtension(), _dec26 = finalExtension(), _dec27 = privateExtension(), _dec28 = finalExtension(), _dec29 = publicExtension(), _dec30 = finalExtension(), _dec31 = privateExtension(), _dec32 = finalExtension(), _dec33 = privateExtension(), _dec34 = finalExtension(), _dec35 = privateExtension(), _dec36 = finalExtension(), _dec37 = publicExtension(), _dec38 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(SideEffectsControllerExtension, _ControllerExtension);
    function SideEffectsControllerExtension() {
      return _ControllerExtension.apply(this, arguments) || this;
    }
    var _proto = SideEffectsControllerExtension.prototype;
    _proto.onInit = function onInit() {
      this._view = this.base.getView();
      this._sideEffectsService = CommonUtils.getAppComponent(this._view).getSideEffectsService();
      this._registeredFieldGroupMap = {};
      this._fieldGroupInvalidity = {};
      this._registeredFailedSideEffects = {};
    }

    /**
     * Adds a SideEffects control.
     *
     * @function
     * @name addControlSideEffects
     * @param entityType Name of the entity where the SideEffects control will be registered
     * @param controlSideEffects SideEffects to register. Ensure the sourceControlId matches the associated SAPUI5 control ID.
     */;
    _proto.addControlSideEffects = function addControlSideEffects(entityType, controlSideEffects) {
      this._sideEffectsService.addControlSideEffects(entityType, controlSideEffects);
    }

    /**
     * Removes SideEffects created by a control.
     *
     * @function
     * @name removeControlSideEffects
     * @param control SAPUI5 Control
     */;
    _proto.removeControlSideEffects = function removeControlSideEffects(control) {
      var _control$isA;
      const controlId = ((_control$isA = control.isA) === null || _control$isA === void 0 ? void 0 : _control$isA.call(control, "sap.ui.base.ManagedObject")) && control.getId();
      if (controlId) {
        this._sideEffectsService.removeControlSideEffects(controlId);
      }
    }

    /**
     * Gets the appropriate context on which SideEffects can be requested.
     * The correct one must have the binding parameter $$patchWithoutSideEffects.
     *
     * @function
     * @name getContextForSideEffects
     * @param bindingContext Initial binding context
     * @param sideEffectEntityType EntityType of the sideEffects
     * @returns SAPUI5 Context or undefined
     */;
    _proto.getContextForSideEffects = function getContextForSideEffects(bindingContext, sideEffectEntityType) {
      let contextForSideEffects = bindingContext,
        entityType = this._sideEffectsService.getEntityTypeFromContext(bindingContext);
      if (sideEffectEntityType !== entityType) {
        contextForSideEffects = bindingContext.getBinding().getContext();
        if (contextForSideEffects) {
          entityType = this._sideEffectsService.getEntityTypeFromContext(contextForSideEffects);
          if (sideEffectEntityType !== entityType) {
            contextForSideEffects = contextForSideEffects.getBinding().getContext();
            if (contextForSideEffects) {
              entityType = this._sideEffectsService.getEntityTypeFromContext(contextForSideEffects);
              if (sideEffectEntityType !== entityType) {
                return undefined;
              }
            }
          }
        }
      }
      return contextForSideEffects || undefined;
    }

    /**
     * Gets the SideEffects map for a field
     * These SideEffects are
     * - listed into FieldGroupIds (coming from an OData Service)
     * - generated by a control or controls and that configure this field as SourceProperties.
     *
     * @function
     * @name getFieldSideEffectsMap
     * @param field Field control
     * @returns SideEffects map
     */;
    _proto.getFieldSideEffectsMap = function getFieldSideEffectsMap(field) {
      let sideEffectsMap = {};
      const fieldGroupIds = field.getFieldGroupIds(),
        viewEntitySetSetName = this._view.getViewData().entitySet,
        viewEntitySet = this._sideEffectsService.getConvertedMetaModel().entitySets.find(entitySet => {
          return entitySet.name === viewEntitySetSetName;
        });

      // SideEffects coming from an OData Service
      sideEffectsMap = this.getSideEffectsMapForFieldGroups(fieldGroupIds, field.getBindingContext());

      // SideEffects coming from control(s)
      if (viewEntitySetSetName && viewEntitySet) {
        const viewEntityType = viewEntitySet.entityType.fullyQualifiedName,
          fieldPath = this.getTargetProperty(field),
          context = this.getContextForSideEffects(field.getBindingContext(), viewEntityType);
        if (fieldPath && context) {
          const controlSideEffectsEntityType = this._sideEffectsService.getControlEntitySideEffects(viewEntityType);
          Object.keys(controlSideEffectsEntityType).forEach(sideEffectsName => {
            const oControlSideEffects = controlSideEffectsEntityType[sideEffectsName];
            if (oControlSideEffects.sourceProperties.includes(fieldPath)) {
              const name = `${sideEffectsName}::${viewEntityType}`;
              sideEffectsMap[name] = {
                name: name,
                immediate: true,
                sideEffects: oControlSideEffects,
                context: context
              };
            }
          });
        }
      }
      return sideEffectsMap;
    }

    /**
     * Gets the sideEffects map for fieldGroups.
     *
     * @function
     * @name getSideEffectsMapForFieldGroups
     * @param fieldGroupIds Field group ids
     * @param fieldContext Field binding context
     * @returns SideEffects map
     */;
    _proto.getSideEffectsMapForFieldGroups = function getSideEffectsMapForFieldGroups(fieldGroupIds, fieldContext) {
      const mSideEffectsMap = {};
      fieldGroupIds.forEach(fieldGroupId => {
        const {
          name,
          immediate,
          sideEffects,
          sideEffectEntityType
        } = this._getSideEffectsPropertyForFieldGroup(fieldGroupId);
        const oContext = fieldContext ? this.getContextForSideEffects(fieldContext, sideEffectEntityType) : undefined;
        if (sideEffects && (!fieldContext || fieldContext && oContext)) {
          mSideEffectsMap[name] = {
            name,
            immediate,
            sideEffects
          };
          if (fieldContext) {
            mSideEffectsMap[name].context = oContext;
          }
        }
      });
      return mSideEffectsMap;
    }

    /**
     * Clear recorded validation status for all properties.
     *
     * @function
     * @name clearFieldGroupsValidity
     */;
    _proto.clearFieldGroupsValidity = function clearFieldGroupsValidity() {
      this._fieldGroupInvalidity = {};
    }

    /**
     * Clear recorded validation status for all properties.
     *
     * @function
     * @name isFieldGroupValid
     * @param fieldGroupId Field group id
     * @param context Context
     * @returns SAPUI5 Context or undefined
     */;
    _proto.isFieldGroupValid = function isFieldGroupValid(fieldGroupId, context) {
      const id = this._getFieldGroupIndex(fieldGroupId, context);
      return Object.keys(this._fieldGroupInvalidity[id] ?? {}).length === 0;
    }

    /**
     * Gets the relative target property related to the Field.
     *
     * @function
     * @name getTargetProperty
     * @param field Field control
     * @returns Relative target property
     */;
    _proto.getTargetProperty = function getTargetProperty(field) {
      var _this$_view$getBindin;
      const fieldPath = field.data("sourcePath");
      const metaModel = this._view.getModel().getMetaModel();
      const viewBindingPath = (_this$_view$getBindin = this._view.getBindingContext()) === null || _this$_view$getBindin === void 0 ? void 0 : _this$_view$getBindin.getPath();
      const viewMetaModelPath = viewBindingPath ? `${metaModel.getMetaPath(viewBindingPath)}/` : "";
      return fieldPath === null || fieldPath === void 0 ? void 0 : fieldPath.replace(viewMetaModelPath, "");
    }

    /**
     * Manages the workflow for SideEffects with related changes to a field
     * The following scenarios are managed:
     *  - Register: caches deferred SideEffects that will be executed when the FieldGroup is unfocused
     *  - Execute: triggers immediate SideEffects requests if the promise for the field event is fulfilled.
     *
     * @function
     * @name handleFieldChange
     * @param event SAPUI5 event that comes from a field change
     * @param fieldValidity
     * @param fieldGroupPreRequisite Promise to be fulfilled before executing deferred SideEffects
     * @returns  Promise on SideEffects request(s)
     */;
    _proto.handleFieldChange = async function handleFieldChange(event, fieldValidity, fieldGroupPreRequisite) {
      const field = event.getSource();
      this._saveFieldPropertiesStatus(field, fieldValidity);
      if (!fieldValidity) {
        return;
      }
      const sideEffectsMap = this.getFieldSideEffectsMap(field);

      // register field group SideEffects
      Object.keys(sideEffectsMap).filter(sideEffectsName => sideEffectsMap[sideEffectsName].immediate !== true).forEach(sideEffectsName => {
        const sideEffectsProperties = sideEffectsMap[sideEffectsName];
        this.registerFieldGroupSideEffects(sideEffectsProperties, fieldGroupPreRequisite);
      });

      // wait for field validation
      try {
        await (event.getParameter("promise") ?? Promise.resolve());
      } catch (e) {
        Log.debug("Prerequisites on Field for the SideEffects have been rejected", e);
        return;
      }
      return this._manageSideEffectsFromField(field);
    }

    /**
     * Manages SideEffects with a related 'focus out' to a field group.
     *
     * @function
     * @name handleFieldGroupChange
     * @param event SAPUI5 Event
     * @returns Promise returning true if the SideEffects have been successfully executed
     */;
    _proto.handleFieldGroupChange = function handleFieldGroupChange(event) {
      const field = event.getSource(),
        fieldGroupIds = event.getParameter("fieldGroupIds"),
        fieldGroupsSideEffects = fieldGroupIds.reduce((results, fieldGroupId) => {
          return results.concat(this.getRegisteredSideEffectsForFieldGroup(fieldGroupId));
        }, []);
      return Promise.all(fieldGroupsSideEffects.map(fieldGroupSideEffects => {
        return this._requestFieldGroupSideEffects(fieldGroupSideEffects);
      })).catch(error => {
        var _field$getBindingCont;
        const contextPath = (_field$getBindingCont = field.getBindingContext()) === null || _field$getBindingCont === void 0 ? void 0 : _field$getBindingCont.getPath();
        Log.debug(`Error while processing FieldGroup SideEffects on context ${contextPath}`, error);
      });
    }

    /**
     * Request SideEffects on a specific context.
     *
     * @function
     * @name requestSideEffects
     * @param sideEffects SideEffects to be executed
     * @param context Context where SideEffects need to be executed
     * @param groupId
     * @param fnGetTargets The callback function which will give us the targets and actions if it was coming through some specific handling.
     * @returns SideEffects request on SAPUI5 context
     */;
    _proto.requestSideEffects = async function requestSideEffects(sideEffects, context, groupId, fnGetTargets) {
      let targets, triggerAction;
      if (fnGetTargets) {
        const targetsAndActionData = await fnGetTargets(sideEffects);
        targets = targetsAndActionData["aTargets"];
        triggerAction = targetsAndActionData["TriggerAction"];
      } else {
        targets = [...(sideEffects.targetEntities ?? []), ...(sideEffects.targetProperties ?? [])];
        triggerAction = sideEffects.triggerAction;
      }
      if (triggerAction) {
        this._sideEffectsService.executeAction(triggerAction, context, groupId);
      }
      if (targets.length) {
        return this._sideEffectsService.requestSideEffects(targets, context, groupId).catch(error => {
          this.registerFailedSideEffects(sideEffects, context);
          throw error;
        });
      }
    }

    /**
     * Gets failed SideEffects.
     *
     * @function
     * @name getRegisteredFailedRequests
     * @returns Registered SideEffects requests that have failed
     */;
    _proto.getRegisteredFailedRequests = function getRegisteredFailedRequests() {
      return this._registeredFailedSideEffects;
    }

    /**
     * Adds SideEffects to the queue of the failed SideEffects
     * The SideEffects are retriggered on the next change on the same context.
     *
     * @function
     * @name registerFailedSideEffects
     * @param sideEffects SideEffects that need to be retriggered
     * @param context Context where SideEffects have failed
     */;
    _proto.registerFailedSideEffects = function registerFailedSideEffects(sideEffects, context) {
      const contextPath = context.getPath();
      this._registeredFailedSideEffects[contextPath] = this._registeredFailedSideEffects[contextPath] ?? [];
      const isNotAlreadyListed = this._registeredFailedSideEffects[contextPath].every(mFailedSideEffects => sideEffects.fullyQualifiedName !== mFailedSideEffects.fullyQualifiedName);
      if (isNotAlreadyListed) {
        this._registeredFailedSideEffects[contextPath].push(sideEffects);
      }
    }

    /**
     * Deletes SideEffects to the queue of the failed SideEffects for a context.
     *
     * @function
     * @name unregisterFailedSideEffectsForAContext
     * @param contextPath Context path where SideEffects have failed
     */;
    _proto.unregisterFailedSideEffectsForAContext = function unregisterFailedSideEffectsForAContext(contextPath) {
      delete this._registeredFailedSideEffects[contextPath];
    }

    /**
     * Deletes SideEffects to the queue of the failed SideEffects.
     *
     * @function
     * @name unregisterFailedSideEffects
     * @param sideEffectsFullyQualifiedName SideEffects that need to be retriggered
     * @param context Context where SideEffects have failed
     */;
    _proto.unregisterFailedSideEffects = function unregisterFailedSideEffects(sideEffectsFullyQualifiedName, context) {
      var _this$_registeredFail;
      const contextPath = context.getPath();
      if ((_this$_registeredFail = this._registeredFailedSideEffects[contextPath]) !== null && _this$_registeredFail !== void 0 && _this$_registeredFail.length) {
        this._registeredFailedSideEffects[contextPath] = this._registeredFailedSideEffects[contextPath].filter(sideEffects => sideEffects.fullyQualifiedName !== sideEffectsFullyQualifiedName);
      }
    }

    /**
     * Adds SideEffects to the queue of a FieldGroup
     * The SideEffects are triggered when event related to the field group change is fired.
     *
     * @function
     * @name registerFieldGroupSideEffects
     * @param sideEffectsProperties SideEffects properties
     * @param fieldGroupPreRequisite Promise to fullfil before executing the SideEffects
     */;
    _proto.registerFieldGroupSideEffects = function registerFieldGroupSideEffects(sideEffectsProperties, fieldGroupPreRequisite) {
      const id = this._getFieldGroupIndex(sideEffectsProperties.name, sideEffectsProperties.context);
      if (!this._registeredFieldGroupMap[id]) {
        this._registeredFieldGroupMap[id] = {
          promise: fieldGroupPreRequisite ?? Promise.resolve(),
          sideEffectProperty: sideEffectsProperties
        };
      }
    }

    /**
     * Deletes SideEffects to the queue of a FieldGroup.
     *
     * @function
     * @name unregisterFieldGroupSideEffects
     * @param sideEffectsProperties SideEffects properties
     */;
    _proto.unregisterFieldGroupSideEffects = function unregisterFieldGroupSideEffects(sideEffectsProperties) {
      const {
        context,
        name
      } = sideEffectsProperties;
      const id = this._getFieldGroupIndex(name, context);
      delete this._registeredFieldGroupMap[id];
    }

    /**
     * Gets the registered SideEffects into the queue for a field group id.
     *
     * @function
     * @name getRegisteredSideEffectsForFieldGroup
     * @param fieldGroupId Field group id
     * @returns Array of registered SideEffects and their promise
     */;
    _proto.getRegisteredSideEffectsForFieldGroup = function getRegisteredSideEffectsForFieldGroup(fieldGroupId) {
      const sideEffects = [];
      for (const registryIndex of Object.keys(this._registeredFieldGroupMap)) {
        if (registryIndex.startsWith(`${fieldGroupId}_`)) {
          sideEffects.push(this._registeredFieldGroupMap[registryIndex]);
        }
      }
      return sideEffects;
    }

    /**
     * Gets a status index.
     *
     * @function
     * @name _getFieldGroupIndex
     * @param fieldGroupId The field group id
     * @param context SAPUI5 Context
     * @returns Index
     */;
    _proto._getFieldGroupIndex = function _getFieldGroupIndex(fieldGroupId, context) {
      return `${fieldGroupId}_${context.getPath()}`;
    }

    /**
     * Gets sideEffects properties from a field group id
     * The properties are:
     *  - name
     *  - sideEffects definition
     *  - sideEffects entity type
     *  - immediate sideEffects.
     *
     * @function
     * @name _getSideEffectsPropertyForFieldGroup
     * @param fieldGroupId
     * @returns SideEffects properties
     */;
    _proto._getSideEffectsPropertyForFieldGroup = function _getSideEffectsPropertyForFieldGroup(fieldGroupId) {
      var _this$_sideEffectsSer;
      /**
       * string "$$ImmediateRequest" is added to the SideEffects name during templating to know
       * if this SideEffects must be immediately executed requested (on field change) or must
       * be deferred (on field group focus out)
       *
       */
      const immediate = fieldGroupId.indexOf(IMMEDIATE_REQUEST) !== -1,
        name = fieldGroupId.replace(IMMEDIATE_REQUEST, ""),
        sideEffectParts = name.split("#"),
        sideEffectEntityType = sideEffectParts[0],
        sideEffectPath = `${sideEffectEntityType}@com.sap.vocabularies.Common.v1.SideEffects${sideEffectParts.length === 2 ? `#${sideEffectParts[1]}` : ""}`,
        sideEffects = (_this$_sideEffectsSer = this._sideEffectsService.getODataEntitySideEffects(sideEffectEntityType)) === null || _this$_sideEffectsSer === void 0 ? void 0 : _this$_sideEffectsSer[sideEffectPath];
      return {
        name,
        immediate,
        sideEffects,
        sideEffectEntityType
      };
    }

    /**
     * Manages the SideEffects for a field.
     *
     * @function
     * @name _manageSideEffectsFromField
     * @param field Field control
     * @returns Promise related to the requested immediate sideEffects
     */;
    _proto._manageSideEffectsFromField = async function _manageSideEffectsFromField(field) {
      const sideEffectsMap = this.getFieldSideEffectsMap(field);
      try {
        const failedSideEffectsPromises = [];
        const sideEffectsPromises = Object.keys(sideEffectsMap).filter(sideEffectsName => sideEffectsMap[sideEffectsName].immediate === true).map(sideEffectsName => {
          const sideEffectsProperties = sideEffectsMap[sideEffectsName];
          // if this SideEffects is recorded as failed SideEffects, need to remove it.
          this.unregisterFailedSideEffects(sideEffectsProperties.sideEffects.fullyQualifiedName, sideEffectsProperties.context);
          return this.requestSideEffects(sideEffectsProperties.sideEffects, sideEffectsProperties.context);
        });

        //Replay failed SideEffects related to the view or Field
        for (const context of [field.getBindingContext(), this._view.getBindingContext()]) {
          if (context) {
            const contextPath = context.getPath();
            const failedSideEffects = this._registeredFailedSideEffects[contextPath] ?? [];
            this.unregisterFailedSideEffectsForAContext(contextPath);
            for (const failedSideEffect of failedSideEffects) {
              failedSideEffectsPromises.push(this.requestSideEffects(failedSideEffect, context));
            }
          }
        }
        await Promise.all(sideEffectsPromises.concat(failedSideEffectsPromises));
      } catch (e) {
        Log.debug(`Error while managing Field SideEffects`, e);
      }
    }

    /**
     * Requests the SideEffects for a fieldGroup.
     *
     * @function
     * @name _requestFieldGroupSideEffects
     * @param fieldGroupSideEffects Field group sideEffects with its promise
     * @returns Promise returning true if the SideEffects have been successfully executed
     */;
    _proto._requestFieldGroupSideEffects = async function _requestFieldGroupSideEffects(fieldGroupSideEffects) {
      this.unregisterFieldGroupSideEffects(fieldGroupSideEffects.sideEffectProperty);
      try {
        await fieldGroupSideEffects.promise;
      } catch (e) {
        Log.debug(`Error while processing FieldGroup SideEffects`, e);
        return;
      }
      try {
        const {
          sideEffects,
          context,
          name
        } = fieldGroupSideEffects.sideEffectProperty;
        if (this.isFieldGroupValid(name, context)) {
          await this.requestSideEffects(sideEffects, context);
        }
      } catch (e) {
        Log.debug(`Error while executing FieldGroup SideEffects`, e);
      }
    }

    /**
     * Saves the validation status of properties related to a field control.
     *
     * @param field The field control
     * @param success Status of the field validation
     */;
    _proto._saveFieldPropertiesStatus = function _saveFieldPropertiesStatus(field, success) {
      const sideEffectsMap = this.getFieldSideEffectsMap(field);
      Object.keys(sideEffectsMap).forEach(key => {
        const {
          name,
          immediate,
          context
        } = sideEffectsMap[key];
        if (!immediate) {
          const id = this._getFieldGroupIndex(name, context);
          if (success) {
            var _this$_fieldGroupInva;
            (_this$_fieldGroupInva = this._fieldGroupInvalidity[id]) === null || _this$_fieldGroupInva === void 0 ? true : delete _this$_fieldGroupInva[field.getId()];
          } else {
            this._fieldGroupInvalidity[id] = {
              ...this._fieldGroupInvalidity[id],
              ...{
                [field.getId()]: true
              }
            };
          }
        }
      });
    };
    return SideEffectsControllerExtension;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "onInit", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "onInit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "addControlSideEffects", [_dec3, _dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "addControlSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "removeControlSideEffects", [_dec5, _dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "removeControlSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getContextForSideEffects", [_dec7, _dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "getContextForSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getFieldSideEffectsMap", [_dec9, _dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "getFieldSideEffectsMap"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getSideEffectsMapForFieldGroups", [_dec11, _dec12], Object.getOwnPropertyDescriptor(_class2.prototype, "getSideEffectsMapForFieldGroups"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "clearFieldGroupsValidity", [_dec13, _dec14], Object.getOwnPropertyDescriptor(_class2.prototype, "clearFieldGroupsValidity"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "isFieldGroupValid", [_dec15, _dec16], Object.getOwnPropertyDescriptor(_class2.prototype, "isFieldGroupValid"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getTargetProperty", [_dec17, _dec18], Object.getOwnPropertyDescriptor(_class2.prototype, "getTargetProperty"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFieldChange", [_dec19, _dec20], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFieldChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "handleFieldGroupChange", [_dec21, _dec22], Object.getOwnPropertyDescriptor(_class2.prototype, "handleFieldGroupChange"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "requestSideEffects", [_dec23, _dec24], Object.getOwnPropertyDescriptor(_class2.prototype, "requestSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getRegisteredFailedRequests", [_dec25, _dec26], Object.getOwnPropertyDescriptor(_class2.prototype, "getRegisteredFailedRequests"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerFailedSideEffects", [_dec27, _dec28], Object.getOwnPropertyDescriptor(_class2.prototype, "registerFailedSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "unregisterFailedSideEffectsForAContext", [_dec29, _dec30], Object.getOwnPropertyDescriptor(_class2.prototype, "unregisterFailedSideEffectsForAContext"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "unregisterFailedSideEffects", [_dec31, _dec32], Object.getOwnPropertyDescriptor(_class2.prototype, "unregisterFailedSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "registerFieldGroupSideEffects", [_dec33, _dec34], Object.getOwnPropertyDescriptor(_class2.prototype, "registerFieldGroupSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "unregisterFieldGroupSideEffects", [_dec35, _dec36], Object.getOwnPropertyDescriptor(_class2.prototype, "unregisterFieldGroupSideEffects"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getRegisteredSideEffectsForFieldGroup", [_dec37, _dec38], Object.getOwnPropertyDescriptor(_class2.prototype, "getRegisteredSideEffectsForFieldGroup"), _class2.prototype)), _class2)) || _class);
  return SideEffectsControllerExtension;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/SideEffects", ["sap/base/Log","sap/ui/core/mvc/ControllerExtension","../CommonUtils","../helpers/ClassSupport"],function(e,t,i,r){"use strict";var o,s,n,d,f,c,p,a,l,u,g,y,E,h,F,S,v,m,_,O,G,P,b,x,C,w,j,M,D,I,q,T,$,R,A,V,B,k,z,N;var Q=r.publicExtension;var U=r.privateExtension;var L=r.methodOverride;var W=r.finalExtension;var H=r.defineUI5Class;function J(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;K(e,t)}function K(e,t){K=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return K(e,t)}function X(e,t,i,r,o){var s={};Object.keys(r).forEach(function(e){s[e]=r[e]});s.enumerable=!!s.enumerable;s.configurable=!!s.configurable;if("value"in s||s.initializer){s.writable=true}s=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},s);if(o&&s.initializer!==void 0){s.value=s.initializer?s.initializer.call(o):void 0;s.initializer=undefined}if(s.initializer===void 0){Object.defineProperty(e,t,s);s=null}return s}const Y="$$ImmediateRequest";let Z=(o=H("sap.fe.core.controllerextensions.SideEffects"),s=L(),n=Q(),d=W(),f=Q(),c=W(),p=Q(),a=W(),l=Q(),u=W(),g=Q(),y=W(),E=Q(),h=W(),F=Q(),S=W(),v=Q(),m=W(),_=Q(),O=W(),G=Q(),P=W(),b=Q(),x=W(),C=Q(),w=W(),j=U(),M=W(),D=Q(),I=W(),q=U(),T=W(),$=U(),R=W(),A=U(),V=W(),B=Q(),k=W(),o(z=(N=function(t){J(r,t);function r(){return t.apply(this,arguments)||this}var o=r.prototype;o.onInit=function e(){this._view=this.base.getView();this._sideEffectsService=i.getAppComponent(this._view).getSideEffectsService();this._registeredFieldGroupMap={};this._fieldGroupInvalidity={};this._registeredFailedSideEffects={}};o.addControlSideEffects=function e(t,i){this._sideEffectsService.addControlSideEffects(t,i)};o.removeControlSideEffects=function e(t){var i;const r=((i=t.isA)===null||i===void 0?void 0:i.call(t,"sap.ui.base.ManagedObject"))&&t.getId();if(r){this._sideEffectsService.removeControlSideEffects(r)}};o.getContextForSideEffects=function e(t,i){let r=t,o=this._sideEffectsService.getEntityTypeFromContext(t);if(i!==o){r=t.getBinding().getContext();if(r){o=this._sideEffectsService.getEntityTypeFromContext(r);if(i!==o){r=r.getBinding().getContext();if(r){o=this._sideEffectsService.getEntityTypeFromContext(r);if(i!==o){return undefined}}}}}return r||undefined};o.getFieldSideEffectsMap=function e(t){let i={};const r=t.getFieldGroupIds(),o=this._view.getViewData().entitySet,s=this._sideEffectsService.getConvertedMetaModel().entitySets.find(e=>e.name===o);i=this.getSideEffectsMapForFieldGroups(r,t.getBindingContext());if(o&&s){const e=s.entityType.fullyQualifiedName,r=this.getTargetProperty(t),o=this.getContextForSideEffects(t.getBindingContext(),e);if(r&&o){const t=this._sideEffectsService.getControlEntitySideEffects(e);Object.keys(t).forEach(s=>{const n=t[s];if(n.sourceProperties.includes(r)){const t=`${s}::${e}`;i[t]={name:t,immediate:true,sideEffects:n,context:o}}})}}return i};o.getSideEffectsMapForFieldGroups=function e(t,i){const r={};t.forEach(e=>{const{name:t,immediate:o,sideEffects:s,sideEffectEntityType:n}=this._getSideEffectsPropertyForFieldGroup(e);const d=i?this.getContextForSideEffects(i,n):undefined;if(s&&(!i||i&&d)){r[t]={name:t,immediate:o,sideEffects:s};if(i){r[t].context=d}}});return r};o.clearFieldGroupsValidity=function e(){this._fieldGroupInvalidity={}};o.isFieldGroupValid=function e(t,i){const r=this._getFieldGroupIndex(t,i);return Object.keys(this._fieldGroupInvalidity[r]??{}).length===0};o.getTargetProperty=function e(t){var i;const r=t.data("sourcePath");const o=this._view.getModel().getMetaModel();const s=(i=this._view.getBindingContext())===null||i===void 0?void 0:i.getPath();const n=s?`${o.getMetaPath(s)}/`:"";return r===null||r===void 0?void 0:r.replace(n,"")};o.handleFieldChange=async function t(i,r,o){const s=i.getSource();this._saveFieldPropertiesStatus(s,r);if(!r){return}const n=this.getFieldSideEffectsMap(s);Object.keys(n).filter(e=>n[e].immediate!==true).forEach(e=>{const t=n[e];this.registerFieldGroupSideEffects(t,o)});try{await(i.getParameter("promise")??Promise.resolve())}catch(t){e.debug("Prerequisites on Field for the SideEffects have been rejected",t);return}return this._manageSideEffectsFromField(s)};o.handleFieldGroupChange=function t(i){const r=i.getSource(),o=i.getParameter("fieldGroupIds"),s=o.reduce((e,t)=>e.concat(this.getRegisteredSideEffectsForFieldGroup(t)),[]);return Promise.all(s.map(e=>this._requestFieldGroupSideEffects(e))).catch(t=>{var i;const o=(i=r.getBindingContext())===null||i===void 0?void 0:i.getPath();e.debug(`Error while processing FieldGroup SideEffects on context ${o}`,t)})};o.requestSideEffects=async function e(t,i,r,o){let s,n;if(o){const e=await o(t);s=e["aTargets"];n=e["TriggerAction"]}else{s=[...t.targetEntities??[],...t.targetProperties??[]];n=t.triggerAction}if(n){this._sideEffectsService.executeAction(n,i,r)}if(s.length){return this._sideEffectsService.requestSideEffects(s,i,r).catch(e=>{this.registerFailedSideEffects(t,i);throw e})}};o.getRegisteredFailedRequests=function e(){return this._registeredFailedSideEffects};o.registerFailedSideEffects=function e(t,i){const r=i.getPath();this._registeredFailedSideEffects[r]=this._registeredFailedSideEffects[r]??[];const o=this._registeredFailedSideEffects[r].every(e=>t.fullyQualifiedName!==e.fullyQualifiedName);if(o){this._registeredFailedSideEffects[r].push(t)}};o.unregisterFailedSideEffectsForAContext=function e(t){delete this._registeredFailedSideEffects[t]};o.unregisterFailedSideEffects=function e(t,i){var r;const o=i.getPath();if((r=this._registeredFailedSideEffects[o])!==null&&r!==void 0&&r.length){this._registeredFailedSideEffects[o]=this._registeredFailedSideEffects[o].filter(e=>e.fullyQualifiedName!==t)}};o.registerFieldGroupSideEffects=function e(t,i){const r=this._getFieldGroupIndex(t.name,t.context);if(!this._registeredFieldGroupMap[r]){this._registeredFieldGroupMap[r]={promise:i??Promise.resolve(),sideEffectProperty:t}}};o.unregisterFieldGroupSideEffects=function e(t){const{context:i,name:r}=t;const o=this._getFieldGroupIndex(r,i);delete this._registeredFieldGroupMap[o]};o.getRegisteredSideEffectsForFieldGroup=function e(t){const i=[];for(const e of Object.keys(this._registeredFieldGroupMap)){if(e.startsWith(`${t}_`)){i.push(this._registeredFieldGroupMap[e])}}return i};o._getFieldGroupIndex=function e(t,i){return`${t}_${i.getPath()}`};o._getSideEffectsPropertyForFieldGroup=function e(t){var i;const r=t.indexOf(Y)!==-1,o=t.replace(Y,""),s=o.split("#"),n=s[0],d=`${n}@com.sap.vocabularies.Common.v1.SideEffects${s.length===2?`#${s[1]}`:""}`,f=(i=this._sideEffectsService.getODataEntitySideEffects(n))===null||i===void 0?void 0:i[d];return{name:o,immediate:r,sideEffects:f,sideEffectEntityType:n}};o._manageSideEffectsFromField=async function t(i){const r=this.getFieldSideEffectsMap(i);try{const e=[];const t=Object.keys(r).filter(e=>r[e].immediate===true).map(e=>{const t=r[e];this.unregisterFailedSideEffects(t.sideEffects.fullyQualifiedName,t.context);return this.requestSideEffects(t.sideEffects,t.context)});for(const t of[i.getBindingContext(),this._view.getBindingContext()]){if(t){const i=t.getPath();const r=this._registeredFailedSideEffects[i]??[];this.unregisterFailedSideEffectsForAContext(i);for(const i of r){e.push(this.requestSideEffects(i,t))}}}await Promise.all(t.concat(e))}catch(t){e.debug(`Error while managing Field SideEffects`,t)}};o._requestFieldGroupSideEffects=async function t(i){this.unregisterFieldGroupSideEffects(i.sideEffectProperty);try{await i.promise}catch(t){e.debug(`Error while processing FieldGroup SideEffects`,t);return}try{const{sideEffects:e,context:t,name:r}=i.sideEffectProperty;if(this.isFieldGroupValid(r,t)){await this.requestSideEffects(e,t)}}catch(t){e.debug(`Error while executing FieldGroup SideEffects`,t)}};o._saveFieldPropertiesStatus=function e(t,i){const r=this.getFieldSideEffectsMap(t);Object.keys(r).forEach(e=>{const{name:o,immediate:s,context:n}=r[e];if(!s){const e=this._getFieldGroupIndex(o,n);if(i){var d;(d=this._fieldGroupInvalidity[e])===null||d===void 0?true:delete d[t.getId()]}else{this._fieldGroupInvalidity[e]={...this._fieldGroupInvalidity[e],...{[t.getId()]:true}}}}})};return r}(t),X(N.prototype,"onInit",[s],Object.getOwnPropertyDescriptor(N.prototype,"onInit"),N.prototype),X(N.prototype,"addControlSideEffects",[n,d],Object.getOwnPropertyDescriptor(N.prototype,"addControlSideEffects"),N.prototype),X(N.prototype,"removeControlSideEffects",[f,c],Object.getOwnPropertyDescriptor(N.prototype,"removeControlSideEffects"),N.prototype),X(N.prototype,"getContextForSideEffects",[p,a],Object.getOwnPropertyDescriptor(N.prototype,"getContextForSideEffects"),N.prototype),X(N.prototype,"getFieldSideEffectsMap",[l,u],Object.getOwnPropertyDescriptor(N.prototype,"getFieldSideEffectsMap"),N.prototype),X(N.prototype,"getSideEffectsMapForFieldGroups",[g,y],Object.getOwnPropertyDescriptor(N.prototype,"getSideEffectsMapForFieldGroups"),N.prototype),X(N.prototype,"clearFieldGroupsValidity",[E,h],Object.getOwnPropertyDescriptor(N.prototype,"clearFieldGroupsValidity"),N.prototype),X(N.prototype,"isFieldGroupValid",[F,S],Object.getOwnPropertyDescriptor(N.prototype,"isFieldGroupValid"),N.prototype),X(N.prototype,"getTargetProperty",[v,m],Object.getOwnPropertyDescriptor(N.prototype,"getTargetProperty"),N.prototype),X(N.prototype,"handleFieldChange",[_,O],Object.getOwnPropertyDescriptor(N.prototype,"handleFieldChange"),N.prototype),X(N.prototype,"handleFieldGroupChange",[G,P],Object.getOwnPropertyDescriptor(N.prototype,"handleFieldGroupChange"),N.prototype),X(N.prototype,"requestSideEffects",[b,x],Object.getOwnPropertyDescriptor(N.prototype,"requestSideEffects"),N.prototype),X(N.prototype,"getRegisteredFailedRequests",[C,w],Object.getOwnPropertyDescriptor(N.prototype,"getRegisteredFailedRequests"),N.prototype),X(N.prototype,"registerFailedSideEffects",[j,M],Object.getOwnPropertyDescriptor(N.prototype,"registerFailedSideEffects"),N.prototype),X(N.prototype,"unregisterFailedSideEffectsForAContext",[D,I],Object.getOwnPropertyDescriptor(N.prototype,"unregisterFailedSideEffectsForAContext"),N.prototype),X(N.prototype,"unregisterFailedSideEffects",[q,T],Object.getOwnPropertyDescriptor(N.prototype,"unregisterFailedSideEffects"),N.prototype),X(N.prototype,"registerFieldGroupSideEffects",[$,R],Object.getOwnPropertyDescriptor(N.prototype,"registerFieldGroupSideEffects"),N.prototype),X(N.prototype,"unregisterFieldGroupSideEffects",[A,V],Object.getOwnPropertyDescriptor(N.prototype,"unregisterFieldGroupSideEffects"),N.prototype),X(N.prototype,"getRegisteredSideEffectsForFieldGroup",[B,k],Object.getOwnPropertyDescriptor(N.prototype,"getRegisteredSideEffectsForFieldGroup"),N.prototype),N))||z);return Z},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/ViewState-dbg", ["sap/base/Log", "sap/base/util/merge", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/KeepAliveHelper", "sap/fe/core/helpers/ModelHelper", "sap/fe/navigation/library", "sap/ui/core/mvc/ControllerExtension", "sap/ui/core/mvc/OverrideExecution", "sap/ui/fl/apply/api/ControlVariantApplyAPI", "sap/fe/core/controls/filterbar/adapter/SelectionVariantToStateFilters", "sap/ui/mdc/p13n/StateUtil"], function (Log, mergeObjects, CommonUtils, ClassSupport, KeepAliveHelper, ModelHelper, NavLibrary, ControllerExtension, OverrideExecution, ControlVariantApplyAPI, SelectionVariantToStateFilters, StateUtil) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _class, _class2;
  var publicExtension = ClassSupport.publicExtension;
  var privateExtension = ClassSupport.privateExtension;
  var finalExtension = ClassSupport.finalExtension;
  var extensible = ClassSupport.extensible;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  // additionalStates are stored next to control IDs, so name clash avoidance needed. Fortunately IDs have restrictions:
  // "Allowed is a sequence of characters (capital/lowercase), digits, underscores, dashes, points and/or colons."
  // Therefore adding a symbol like # or @
  const ADDITIONAL_STATES_KEY = "#additionalStates",
    NavType = NavLibrary.NavType;

  /**
   * Definition of a custom action to be used inside the table toolbar
   *
   * @alias sap.fe.core.controllerextensions.ViewState.NavigationParameter
   * @public
   */

  ///////////////////////////////////////////////////////////////////
  // methods to retrieve & apply states for the different controls //
  ///////////////////////////////////////////////////////////////////

  const _mControlStateHandlerMap = {
    "sap.ui.fl.variants.VariantManagement": {
      retrieve: function (oVM) {
        return {
          variantId: oVM.getCurrentVariantKey()
        };
      },
      apply: async function (oVM, controlState) {
        try {
          if (controlState && controlState.variantId !== undefined && controlState.variantId !== oVM.getCurrentVariantKey()) {
            const isVariantIdAvailable = this._checkIfVariantIdIsAvailable(oVM, controlState.variantId);
            let sVariantReference;
            if (isVariantIdAvailable) {
              sVariantReference = controlState.variantId;
            } else {
              sVariantReference = oVM.getStandardVariantKey();
              this.controlsVariantIdUnavailable.push(...oVM.getFor());
            }
            try {
              await ControlVariantApplyAPI.activateVariant({
                element: oVM,
                variantReference: sVariantReference
              });
              await this._setInitialStatesForDeltaCompute(oVM);
            } catch (error) {
              Log.error(error);
              this.invalidateInitialStateForApply.push(...oVM.getFor());
              await this._setInitialStatesForDeltaCompute(oVM);
            }
          } else {
            this._setInitialStatesForDeltaCompute(oVM);
          }
        } catch (error) {
          Log.error(error);
        }
      }
    },
    "sap.m.IconTabBar": {
      retrieve: function (oTabBar) {
        return {
          selectedKey: oTabBar.getSelectedKey()
        };
      },
      apply: function (oTabBar, oControlState) {
        if (oControlState && oControlState.selectedKey) {
          const oSelectedItem = oTabBar.getItems().find(function (oItem) {
            return oItem.getKey() === oControlState.selectedKey;
          });
          if (oSelectedItem) {
            oTabBar.setSelectedItem(oSelectedItem);
          }
        }
      }
    },
    "sap.ui.mdc.FilterBar": {
      retrieve: async function (filterBar) {
        const controlStateKey = this.getStateKey(filterBar);
        const filterBarState = await StateUtil.retrieveExternalState(filterBar);
        // remove sensitive or view state irrelevant fields
        const propertiesInfo = filterBar.getPropertyInfoSet();
        const filter = filterBarState.filter || {};
        propertiesInfo.filter(function (PropertyInfo) {
          return Object.keys(filter).length > 0 && PropertyInfo.path && filter[PropertyInfo.path] && (PropertyInfo.removeFromAppState || filter[PropertyInfo.path].length === 0);
        }).forEach(function (PropertyInfo) {
          if (PropertyInfo.path) {
            delete filter[PropertyInfo.path];
          }
        });
        return this._getControlState(controlStateKey, filterBarState);
      },
      apply: async function (filterBar, controlState, navParameter) {
        try {
          if (controlState) {
            const isInitialStateApplicable = this._isInitialStatesApplicable(controlState === null || controlState === void 0 ? void 0 : controlState.initialState, filterBar);
            const navigationType = navParameter.navigationType;
            //Whwn navigation type is hybrid, we override the filter conditions in IAppState with SV received from XappState
            if (navigationType === NavType.hybrid && controlState.fullState !== undefined) {
              const filterBarPropertyInfos = await SelectionVariantToStateFilters.getFilterBarSupportedFields(filterBar),
                filterBarInfoForConversion = SelectionVariantToStateFilters.getFilterBarInfoForConversion(filterBar),
                xAppStateFilters = SelectionVariantToStateFilters.getConditionsFromSV(navParameter.selectionVariant, filterBarInfoForConversion, filterBarPropertyInfos);
              const mergedFullState = {
                ...controlState.fullState,
                filter: {
                  ...controlState.fullState.filter,
                  ...xAppStateFilters
                }
              };
              return StateUtil.applyExternalState(filterBar, mergedFullState);
            }
            if (isInitialStateApplicable) {
              const diffState = await StateUtil.diffState(filterBar, controlState.initialState, controlState.fullState);
              return StateUtil.applyExternalState(filterBar, diffState);
            }
            return StateUtil.applyExternalState(filterBar, (controlState === null || controlState === void 0 ? void 0 : controlState.fullState) ?? controlState);
          }
        } catch (error) {
          Log.error(error);
        }
      }
    },
    "sap.ui.mdc.Table": {
      retrieve: async function (table) {
        const controlStateKey = this.getStateKey(table);
        const tableState = await StateUtil.retrieveExternalState(table);
        return this._getControlState(controlStateKey, tableState);
      },
      apply: async function (table, controlState, navParameters) {
        try {
          if (controlState) {
            // Extra condition added to apply the diff state logic for mdc control
            const isInitialStateApplicable = this._isInitialStatesApplicable(controlState === null || controlState === void 0 ? void 0 : controlState.initialState, table, navParameters.navigationType !== NavType.hybrid);
            if (isInitialStateApplicable) {
              var _controlState$initial;
              if (controlState.initialState && !((_controlState$initial = controlState.initialState) !== null && _controlState$initial !== void 0 && _controlState$initial.supplementaryConfig)) {
                controlState.initialState.supplementaryConfig = {};
              }
              const oDiffState = await StateUtil.diffState(table, controlState.initialState, controlState.fullState);
              return StateUtil.applyExternalState(table, oDiffState);
            } else {
              if (!controlState.supplementaryConfig) {
                controlState.supplementaryConfig = {};
              }
              return StateUtil.applyExternalState(table, (controlState === null || controlState === void 0 ? void 0 : controlState.fullState) ?? controlState);
            }
          }
        } catch (error) {
          Log.error(error);
        }
      },
      refreshBinding: function (oTable) {
        const oTableBinding = oTable.getRowBinding();
        if (oTableBinding) {
          const oRootBinding = oTableBinding.getRootBinding();
          if (oRootBinding === oTableBinding) {
            // absolute binding
            oTableBinding.refresh();
          } else {
            // relative binding
            const oHeaderContext = oTableBinding.getHeaderContext();
            const sGroupId = oTableBinding.getGroupId();
            if (oHeaderContext) {
              oHeaderContext.requestSideEffects([{
                $NavigationPropertyPath: ""
              }], sGroupId);
            }
          }
        } else {
          Log.info(`Table: ${oTable.getId()} was not refreshed. No binding found!`);
        }
      }
    },
    "sap.ui.mdc.Chart": {
      retrieve: function (oChart) {
        return StateUtil.retrieveExternalState(oChart);
      },
      apply: function (oChart, oControlState) {
        if (oControlState) {
          return StateUtil.applyExternalState(oChart, oControlState);
        }
      }
      // TODO: uncomment after mdc fix is merged
      /* retrieve: async function (chart: Chart) {
      	const controlStateKey = this.getStateKey(chart);
      	const chartState = await StateUtil.retrieveExternalState(chart);
      		return this._getControlState(controlStateKey, chartState);
      },
      apply: async function (chart: Chart, controlState: ControlState) {
      	try {
      		if (controlState) {
      			// Extra condition added to apply the diff state logic for mdc control
      			const isInitialStateApplicable = controlState?.initialState && this.invalidateInitialStateForApply.indexOf(chart.getId()) === -1 && this.controlsVariantIdUnavailable.indexOf(chart.getId()) === -1;
      				if (isInitialStateApplicable) {
      				const diffState = await StateUtil.diffState(
      					chart,
      					controlState.initialState as object,
      					controlState.fullState as object
      				);
      				return await StateUtil.applyExternalState(chart, diffState);
      			} else {
      				return await StateUtil.applyExternalState(chart, controlState?.fullState ?? controlState);
      			}
      		}
      	} catch (error) {
      		Log.error(error as string);
      	}
      } */
    },

    "sap.uxap.ObjectPageLayout": {
      retrieve: function (oOPLayout) {
        return {
          selectedSection: oOPLayout.getSelectedSection()
        };
      },
      apply: function (oOPLayout, oControlState) {
        if (oControlState) {
          oOPLayout.setSelectedSection(oControlState.selectedSection);
        }
      },
      refreshBinding: function (oOPLayout) {
        const oBindingContext = oOPLayout.getBindingContext();
        const oBinding = oBindingContext && oBindingContext.getBinding();
        if (oBinding) {
          const sMetaPath = ModelHelper.getMetaPathForContext(oBindingContext);
          const sStrategy = KeepAliveHelper.getControlRefreshStrategyForContextPath(oOPLayout, sMetaPath);
          if (sStrategy === "self") {
            // Refresh main context and 1-1 navigation properties or OP
            const oModel = oBindingContext.getModel(),
              oMetaModel = oModel.getMetaModel(),
              oNavigationProperties = CommonUtils.getContextPathProperties(oMetaModel, sMetaPath, {
                $kind: "NavigationProperty"
              }) || {},
              aNavPropertiesToRequest = Object.keys(oNavigationProperties).reduce(function (aPrev, sNavProp) {
                if (oNavigationProperties[sNavProp].$isCollection !== true) {
                  aPrev.push({
                    $NavigationPropertyPath: sNavProp
                  });
                }
                return aPrev;
              }, []),
              aProperties = [{
                $PropertyPath: "*"
              }],
              sGroupId = oBinding.getGroupId();
            oBindingContext.requestSideEffects(aProperties.concat(aNavPropertiesToRequest), sGroupId);
          } else if (sStrategy === "includingDependents") {
            // Complete refresh
            oBinding.refresh();
          }
        } else {
          Log.info(`ObjectPage: ${oOPLayout.getId()} was not refreshed. No binding found!`);
        }
      }
    },
    "sap.m.SegmentedButton": {
      retrieve: function (oSegmentedButton) {
        return {
          selectedKey: oSegmentedButton.getSelectedKey()
        };
      },
      apply: function (oSegmentedButton, oControlState) {
        if (oControlState !== null && oControlState !== void 0 && oControlState.selectedKey && oControlState.selectedKey !== oSegmentedButton.getSelectedKey()) {
          var _oSegmentedButton$get;
          oSegmentedButton.setSelectedKey(oControlState.selectedKey);
          if ((_oSegmentedButton$get = oSegmentedButton.getParent()) !== null && _oSegmentedButton$get !== void 0 && _oSegmentedButton$get.isA("sap.ui.mdc.ActionToolbar")) {
            oSegmentedButton.fireEvent("selectionChange");
          }
        }
      }
    },
    "sap.m.Select": {
      retrieve: function (oSelect) {
        return {
          selectedKey: oSelect.getSelectedKey()
        };
      },
      apply: function (oSelect, oControlState) {
        if (oControlState !== null && oControlState !== void 0 && oControlState.selectedKey && oControlState.selectedKey !== oSelect.getSelectedKey()) {
          var _oSelect$getParent;
          oSelect.setSelectedKey(oControlState.selectedKey);
          if ((_oSelect$getParent = oSelect.getParent()) !== null && _oSelect$getParent !== void 0 && _oSelect$getParent.isA("sap.ui.mdc.ActionToolbar")) {
            oSelect.fireEvent("change");
          }
        }
      }
    },
    "sap.f.DynamicPage": {
      retrieve: function (oDynamicPage) {
        return {
          headerExpanded: oDynamicPage.getHeaderExpanded()
        };
      },
      apply: function (oDynamicPage, oControlState) {
        if (oControlState) {
          oDynamicPage.setHeaderExpanded(oControlState.headerExpanded);
        }
      }
    },
    "sap.ui.core.mvc.View": {
      retrieve: function (oView) {
        const oController = oView.getController();
        if (oController && oController.viewState) {
          return oController.viewState.retrieveViewState(oController.viewState);
        }
        return {};
      },
      apply: function (oView, oControlState, oNavParameters) {
        const oController = oView.getController();
        if (oController && oController.viewState) {
          return oController.viewState.applyViewState(oControlState, oNavParameters);
        }
      },
      refreshBinding: function (oView) {
        const oController = oView.getController();
        if (oController && oController.viewState) {
          return oController.viewState.refreshViewBindings();
        }
      }
    },
    "sap.ui.core.ComponentContainer": {
      retrieve: function (oComponentContainer) {
        const oComponent = oComponentContainer.getComponentInstance();
        if (oComponent) {
          return this.retrieveControlState(oComponent.getRootControl());
        }
        return {};
      },
      apply: function (oComponentContainer, oControlState, oNavParameters) {
        const oComponent = oComponentContainer.getComponentInstance();
        if (oComponent) {
          return this.applyControlState(oComponent.getRootControl(), oControlState, oNavParameters);
        }
      }
    }
  };
  /**
   * A controller extension offering hooks for state handling
   *
   * If you need to maintain a specific state for your application, you can use the controller extension.
   *
   * @hideconstructor
   * @public
   * @since 1.85.0
   */
  let ViewState = (_dec = defineUI5Class("sap.fe.core.controllerextensions.ViewState"), _dec2 = publicExtension(), _dec3 = finalExtension(), _dec4 = publicExtension(), _dec5 = extensible(OverrideExecution.After), _dec6 = privateExtension(), _dec7 = finalExtension(), _dec8 = privateExtension(), _dec9 = finalExtension(), _dec10 = publicExtension(), _dec11 = extensible(OverrideExecution.After), _dec12 = publicExtension(), _dec13 = extensible(OverrideExecution.After), _dec14 = publicExtension(), _dec15 = extensible(OverrideExecution.After), _dec16 = privateExtension(), _dec17 = finalExtension(), _dec18 = publicExtension(), _dec19 = extensible(OverrideExecution.After), _dec20 = privateExtension(), _dec21 = finalExtension(), _dec22 = publicExtension(), _dec23 = extensible(OverrideExecution.After), _dec24 = publicExtension(), _dec25 = finalExtension(), _dec26 = publicExtension(), _dec27 = finalExtension(), _dec28 = publicExtension(), _dec29 = extensible(OverrideExecution.After), _dec30 = privateExtension(), _dec31 = finalExtension(), _dec32 = publicExtension(), _dec33 = extensible(OverrideExecution.Instead), _dec34 = publicExtension(), _dec35 = finalExtension(), _dec36 = privateExtension(), _dec37 = publicExtension(), _dec38 = extensible(OverrideExecution.After), _dec39 = publicExtension(), _dec40 = extensible(OverrideExecution.After), _dec41 = publicExtension(), _dec42 = extensible(OverrideExecution.After), _dec43 = privateExtension(), _dec44 = publicExtension(), _dec45 = extensible(OverrideExecution.After), _dec46 = privateExtension(), _dec47 = finalExtension(), _dec(_class = (_class2 = /*#__PURE__*/function (_ControllerExtension) {
    _inheritsLoose(ViewState, _ControllerExtension);
    /**
     * Constructor.
     */
    function ViewState() {
      var _this;
      _this = _ControllerExtension.call(this) || this;
      _this.initialControlStatesMapper = {};
      _this.controlsVariantIdUnavailable = [];
      _this.invalidateInitialStateForApply = [];
      _this.viewStateControls = [];
      _this._setInitialStatesForDeltaCompute = async variantManagement => {
        try {
          const adaptControls = _this.viewStateControls;
          const externalStatePromises = [];
          const controlStateKey = [];
          let initialControlStates = [];
          const variantControls = (variantManagement === null || variantManagement === void 0 ? void 0 : variantManagement.getFor()) ?? [];
          adaptControls.filter(function (control) {
            return control && (!variantManagement || variantControls.indexOf(control.getId()) > -1) && (control.isA("sap.ui.mdc.Table") || control.isA("sap.ui.mdc.FilterBar") || control.isA("sap.ui.mdc.Chart"));
          }).forEach(control => {
            if (variantManagement) {
              _this._addEventListenersToVariantManagement(variantManagement, variantControls);
            }
            const externalStatePromise = StateUtil.retrieveExternalState(control);
            externalStatePromises.push(externalStatePromise);
            controlStateKey.push(_this.getStateKey(control));
          });
          initialControlStates = await Promise.all(externalStatePromises);
          initialControlStates.forEach((initialControlState, i) => {
            _this.initialControlStatesMapper[controlStateKey[i]] = initialControlState;
          });
        } catch (e) {
          Log.error(e);
        }
      };
      _this._iRetrievingStateCounter = 0;
      _this._pInitialStateApplied = new Promise(resolve => {
        _this._pInitialStateAppliedResolve = resolve;
      });
      return _this;
    }
    var _proto = ViewState.prototype;
    _proto.refreshViewBindings = async function refreshViewBindings() {
      const aControls = await this.collectResults(this.base.viewState.adaptBindingRefreshControls);
      let oPromiseChain = Promise.resolve();
      aControls.filter(oControl => {
        return oControl && oControl.isA && oControl.isA("sap.ui.base.ManagedObject");
      }).forEach(oControl => {
        oPromiseChain = oPromiseChain.then(this.refreshControlBinding.bind(this, oControl));
      });
      return oPromiseChain;
    }

    /**
     * This function should add all controls relevant for refreshing to the provided control array.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param aCollectedControls The collected controls
     * @alias sap.fe.core.controllerextensions.ViewState#adaptBindingRefreshControls
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    adaptBindingRefreshControls = function adaptBindingRefreshControls(aCollectedControls) {
      // to be overriden
    };
    _proto.refreshControlBinding = function refreshControlBinding(oControl) {
      const oControlRefreshBindingHandler = this.getControlRefreshBindingHandler(oControl);
      let oPromiseChain = Promise.resolve();
      if (typeof oControlRefreshBindingHandler.refreshBinding !== "function") {
        Log.info(`refreshBinding handler for control: ${oControl.getMetadata().getName()} is not provided`);
      } else {
        oPromiseChain = oPromiseChain.then(oControlRefreshBindingHandler.refreshBinding.bind(this, oControl));
      }
      return oPromiseChain;
    }

    /**
     * Returns a map of <code>refreshBinding</code> function for a certain control.
     *
     * @param {sap.ui.base.ManagedObject} oControl The control to get state handler for
     * @returns {object} A plain object with one function: <code>refreshBinding</code>
     */;
    _proto.getControlRefreshBindingHandler = function getControlRefreshBindingHandler(oControl) {
      const oRefreshBindingHandler = {};
      if (oControl) {
        for (const sType in _mControlStateHandlerMap) {
          if (oControl.isA(sType)) {
            // pass only the refreshBinding handler in an object so that :
            // 1. Application has access only to refreshBinding and not apply and reterive at this stage
            // 2. Application modifications to the object will be reflected here (as we pass by reference)
            oRefreshBindingHandler["refreshBinding"] = _mControlStateHandlerMap[sType].refreshBinding || {};
            break;
          }
        }
      }
      this.base.viewState.adaptBindingRefreshHandler(oControl, oRefreshBindingHandler);
      return oRefreshBindingHandler;
    }

    /**
     * Customize the <code>refreshBinding</code> function for a certain control.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oControl The control for which the refresh handler is adapted.
     * @param oControlHandler A plain object which can have one function: <code>refreshBinding</code>
     * @alias sap.fe.core.controllerextensions.ViewState#adaptBindingRefreshHandler
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    adaptBindingRefreshHandler = function adaptBindingRefreshHandler(oControl, oControlHandler) {
      // to be overriden
    }

    /**
     * Called when the application is suspended due to keep-alive mode.
     *
     * @alias sap.fe.core.controllerextensions.ViewState#onSuspend
     * @public
     */;
    _proto.onSuspend = function onSuspend() {
      // to be overriden
    }

    /**
     * Called when the application is restored due to keep-alive mode.
     *
     * @alias sap.fe.core.controllerextensions.ViewState#onRestore
     * @public
     */;
    _proto.onRestore = function onRestore() {
      // to be overriden
    }

    /**
     * Destructor method for objects.
     */;
    _proto.destroy = function destroy() {
      delete this._pInitialStateAppliedResolve;
      _ControllerExtension.prototype.destroy.call(this);
    }

    /**
     * Helper function to enable multi override. It is adding an additional parameter (array) to the provided
     * function (and its parameters), that will be evaluated via <code>Promise.all</code>.
     *
     * @param fnCall The function to be called
     * @param args
     * @returns A promise to be resolved with the result of all overrides
     */;
    _proto.collectResults = function collectResults(fnCall) {
      const aResults = [];
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      args.push(aResults);
      fnCall.apply(this, args);
      return Promise.all(aResults);
    }

    /**
     * Customize the <code>retrieve</code> and <code>apply</code> functions for a certain control.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oControl The control to get state handler for
     * @param aControlHandler A list of plain objects with two functions: <code>retrieve</code> and <code>apply</code>
     * @alias sap.fe.core.controllerextensions.ViewState#adaptControlStateHandler
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    adaptControlStateHandler = function adaptControlStateHandler(oControl, aControlHandler) {
      // to be overridden if needed
    }

    /**
     * Returns a map of <code>retrieve</code> and <code>apply</code> functions for a certain control.
     *
     * @param oControl The control to get state handler for
     * @returns A plain object with two functions: <code>retrieve</code> and <code>apply</code>
     */;
    _proto.getControlStateHandler = function getControlStateHandler(oControl) {
      const aInternalControlStateHandler = [],
        aCustomControlStateHandler = [];
      if (oControl) {
        for (const sType in _mControlStateHandlerMap) {
          if (oControl.isA(sType)) {
            // avoid direct manipulation of internal _mControlStateHandlerMap
            aInternalControlStateHandler.push(Object.assign({}, _mControlStateHandlerMap[sType]));
            break;
          }
        }
      }
      this.base.viewState.adaptControlStateHandler(oControl, aCustomControlStateHandler);
      return aInternalControlStateHandler.concat(aCustomControlStateHandler);
    }

    /**
     * This function should add all controls for given view that should be considered for the state handling to the provided control array.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param aCollectedControls The collected controls
     * @alias sap.fe.core.controllerextensions.ViewState#adaptStateControls
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    adaptStateControls = function adaptStateControls(aCollectedControls) {
      // to be overridden if needed
    }

    /**
     * Returns the key to be used for given control.
     *
     * @param oControl The control to get state key for
     * @returns The key to be used for storing the controls state
     */;
    _proto.getStateKey = function getStateKey(oControl) {
      return this.getView().getLocalId(oControl.getId()) || oControl.getId();
    }

    /**
     * Retrieve the view state of this extensions view.
     * When this function is called more than once before finishing, all but the final response will resolve to <code>undefined</code>.
     *
     * @returns A promise resolving the view state
     * @alias sap.fe.core.controllerextensions.ViewState#retrieveViewState
     * @public
     */;
    _proto.retrieveViewState = async function retrieveViewState() {
      ++this._iRetrievingStateCounter;
      let oViewState;
      try {
        await this._pInitialStateApplied;
        const aControls = await this.collectResults(this.base.viewState.adaptStateControls);
        const aResolvedStates = await Promise.all(aControls.filter(function (oControl) {
          return oControl && oControl.isA && oControl.isA("sap.ui.base.ManagedObject");
        }).map(oControl => {
          return this.retrieveControlState(oControl).then(vResult => {
            return {
              key: this.getStateKey(oControl),
              value: vResult
            };
          });
        }));
        oViewState = aResolvedStates.reduce(function (oStates, mState) {
          const oCurrentState = {};
          oCurrentState[mState.key] = mState.value;
          return mergeObjects(oStates, oCurrentState);
        }, {});
        const mAdditionalStates = await Promise.resolve(this._retrieveAdditionalStates());
        if (mAdditionalStates && Object.keys(mAdditionalStates).length) {
          oViewState[ADDITIONAL_STATES_KEY] = mAdditionalStates;
        }
      } finally {
        --this._iRetrievingStateCounter;
      }
      return this._iRetrievingStateCounter === 0 ? oViewState : undefined;
    }

    /**
     * Extend the map of additional states (not control bound) to be added to the current view state of the given view.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param mAdditionalStates The additional state
     * @alias sap.fe.core.controllerextensions.ViewState#retrieveAdditionalStates
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    retrieveAdditionalStates = function retrieveAdditionalStates(mAdditionalStates) {
      // to be overridden if needed
    }

    /**
     * Returns a map of additional states (not control bound) to be added to the current view state of the given view.
     *
     * @returns Additional view states
     */;
    _proto._retrieveAdditionalStates = function _retrieveAdditionalStates() {
      const mAdditionalStates = {};
      this.base.viewState.retrieveAdditionalStates(mAdditionalStates);
      return mAdditionalStates;
    }

    /**
     * Returns the current state for the given control.
     *
     * @param oControl The object to get the state for
     * @returns The state for the given control
     */;
    _proto.retrieveControlState = function retrieveControlState(oControl) {
      const aControlStateHandlers = this.getControlStateHandler(oControl);
      return Promise.all(aControlStateHandlers.map(mControlStateHandler => {
        if (typeof mControlStateHandler.retrieve !== "function") {
          throw new Error(`controlStateHandler.retrieve is not a function for control: ${oControl.getMetadata().getName()}`);
        }
        return mControlStateHandler.retrieve.call(this, oControl);
      })).then(aStates => {
        return aStates.reduce(function (oFinalState, oCurrentState) {
          return mergeObjects(oFinalState, oCurrentState);
        }, {});
      });
    }

    /**
     * Defines whether the view state should only be applied once initially.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.Instead}.
     *
     * Important:
     * You should only override this method for custom pages and not for the standard ListReportPage and ObjectPage!
     *
     * @returns If <code>true</code>, only the initial view state is applied once,
     * else any new view state is also applied on follow-up calls (default)
     * @alias sap.fe.core.controllerextensions.ViewState#applyInitialStateOnly
     * @protected
     */;
    _proto.applyInitialStateOnly = function applyInitialStateOnly() {
      return true;
    }

    /**
     * Applies the given view state to this extensions view.
     *
     * @param oViewState The view state to apply (can be undefined)
     * @param oNavParameter The current navigation parameter
     * @param oNavParameter.navigationType The actual navigation type
     * @param oNavParameter.selectionVariant The selectionVariant from the navigation
     * @param oNavParameter.selectionVariantDefaults The selectionVariant defaults from the navigation
     * @param oNavParameter.requiresStandardVariant Defines whether the standard variant must be used in variant management
     * @returns Promise for async state handling
     * @alias sap.fe.core.controllerextensions.ViewState#applyViewState
     * @public
     */;
    _proto.applyViewState = async function applyViewState(oViewState, oNavParameter) {
      if (this.base.viewState.applyInitialStateOnly() && this._getInitialStateApplied()) {
        return;
      }
      try {
        await this.collectResults(this.base.viewState.onBeforeStateApplied, [], oNavParameter.navigationType);
        const aControls = await this.collectResults(this.base.viewState.adaptStateControls);
        this.viewStateControls = aControls;
        let oPromiseChain = Promise.resolve();
        let hasVariantManagement = false;
        /**
         * this ensures that variantManagement control is applied first to calculate initial state for delta logic
         */
        const sortedAdaptStateControls = aControls.reduce((modifiedControls, control) => {
          if (!control) {
            return modifiedControls;
          }
          const isVariantManagementControl = control.isA("sap.ui.fl.variants.VariantManagement");
          if (!hasVariantManagement) {
            hasVariantManagement = isVariantManagementControl;
          }
          modifiedControls = isVariantManagementControl ? [control, ...modifiedControls] : [...modifiedControls, control];
          return modifiedControls;
        }, []);

        // In case of no Variant Management, this ensures that initial states is set
        if (!hasVariantManagement) {
          this._setInitialStatesForDeltaCompute();
        }
        sortedAdaptStateControls.filter(function (oControl) {
          return oControl.isA("sap.ui.base.ManagedObject");
        }).forEach(oControl => {
          const sKey = this.getStateKey(oControl);
          oPromiseChain = oPromiseChain.then(this.applyControlState.bind(this, oControl, oViewState ? oViewState[sKey] : undefined, oNavParameter));
        });
        await oPromiseChain;
        if (oNavParameter.navigationType === NavType.iAppState || oNavParameter.navigationType === NavType.hybrid) {
          await this.collectResults(this.base.viewState.applyAdditionalStates, oViewState ? oViewState[ADDITIONAL_STATES_KEY] : undefined);
        } else {
          await this.collectResults(this.base.viewState.applyNavigationParameters, oNavParameter);
          await this.collectResults(this.base.viewState._applyNavigationParametersToFilterbar, oNavParameter);
        }
      } finally {
        try {
          await this.collectResults(this.base.viewState.onAfterStateApplied);
          this._setInitialStateApplied();
        } catch (e) {
          Log.error(e);
        }
      }
    };
    _proto._checkIfVariantIdIsAvailable = function _checkIfVariantIdIsAvailable(oVM, sVariantId) {
      const aVariants = oVM.getVariants();
      let bIsControlStateVariantAvailable = false;
      aVariants.forEach(function (oVariant) {
        if (oVariant.key === sVariantId) {
          bIsControlStateVariantAvailable = true;
        }
      });
      return bIsControlStateVariantAvailable;
    };
    _proto._setInitialStateApplied = function _setInitialStateApplied() {
      if (this._pInitialStateAppliedResolve) {
        const pInitialStateAppliedResolve = this._pInitialStateAppliedResolve;
        delete this._pInitialStateAppliedResolve;
        pInitialStateAppliedResolve();
      }
    };
    _proto._getInitialStateApplied = function _getInitialStateApplied() {
      return !this._pInitialStateAppliedResolve;
    }

    /**
     * Hook to react before a state for given view is applied.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param aPromises Extensible array of promises to be resolved before continuing
     * @param navigationType Navigation type responsible for the applying the state
     * @alias sap.fe.core.controllerextensions.ViewState#onBeforeStateApplied
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onBeforeStateApplied = function onBeforeStateApplied(aPromises, navigationType) {
      // to be overriden
    }

    /**
     * Hook to react when state for given view was applied.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param aPromises Extensible array of promises to be resolved before continuing
     * @alias sap.fe.core.controllerextensions.ViewState#onAfterStateApplied
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onAfterStateApplied = function onAfterStateApplied(aPromises) {
      // to be overriden
    }

    /**
     * Applying additional, not control related, states - is called only if navigation type is iAppState.
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oViewState The current view state
     * @param aPromises Extensible array of promises to be resolved before continuing
     * @alias sap.fe.core.controllerextensions.ViewState#applyAdditionalStates
     * @protected
     */;
    _proto.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    applyAdditionalStates = function applyAdditionalStates(oViewState, aPromises) {
      // to be overridden if needed
    };
    _proto._applyNavigationParametersToFilterbar = function _applyNavigationParametersToFilterbar(_oNavParameter, _aPromises) {
      // to be overridden if needed
    }

    /**
     * Apply navigation parameters is not called if the navigation type is iAppState
     *
     * This function is meant to be individually overridden by consuming controllers, but not to be called directly.
     * The override execution is: {@link sap.ui.core.mvc.OverrideExecution.After}.
     *
     * @param oNavParameter The current navigation parameter
     * @param oNavParameter.navigationType The actual navigation type
     * @param [oNavParameter.selectionVariant] The selectionVariant from the navigation
     * @param [oNavParameter.selectionVariantDefaults] The selectionVariant defaults from the navigation
     * @param [oNavParameter.requiresStandardVariant] Defines whether the standard variant must be used in variant management
     * @param aPromises Extensible array of promises to be resolved before continuing
     * @alias sap.fe.core.controllerextensions.ViewState#applyNavigationParameters
     * @protected
     */;
    _proto.applyNavigationParameters = function applyNavigationParameters(
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    oNavParameter,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    aPromises) {
      // to be overridden if needed
    }

    /**
     * Applying the given state to the given control.
     *
     * @param oControl The object to apply the given state
     * @param oControlState The state for the given control
     * @param [oNavParameters] The current navigation parameters
     * @returns Return a promise for async state handling
     */;
    _proto.applyControlState = function applyControlState(oControl, oControlState, oNavParameters) {
      const aControlStateHandlers = this.getControlStateHandler(oControl);
      let oPromiseChain = Promise.resolve();
      aControlStateHandlers.forEach(mControlStateHandler => {
        if (typeof mControlStateHandler.apply !== "function") {
          throw new Error(`controlStateHandler.apply is not a function for control: ${oControl.getMetadata().getName()}`);
        }
        oPromiseChain = oPromiseChain.then(mControlStateHandler.apply.bind(this, oControl, oControlState, oNavParameters));
      });
      return oPromiseChain;
    };
    _proto.getInterface = function getInterface() {
      return this;
    }

    // method to get the control state for mdc controls applying the delta logic
    ;
    _proto._getControlState = function _getControlState(controlStateKey, controlState) {
      const initialControlStatesMapper = this.initialControlStatesMapper;
      if (Object.keys(initialControlStatesMapper).length > 0 && initialControlStatesMapper[controlStateKey]) {
        if (Object.keys(initialControlStatesMapper[controlStateKey]).length === 0) {
          initialControlStatesMapper[controlStateKey] = {
            ...controlState
          };
        }
        return {
          fullState: controlState,
          initialState: initialControlStatesMapper[controlStateKey]
        };
      }
      return controlState;
    }

    //method to store the initial states for delta computation of mdc controls
    ;
    // Attach event to save and select of Variant Management to update the initial Control States on variant change
    _proto._addEventListenersToVariantManagement = function _addEventListenersToVariantManagement(variantManagement, variantControls) {
      const oPayload = {
        variantManagedControls: variantControls
      };
      const fnEvent = () => {
        this._updateInitialStatesOnVariantChange(variantControls);
      };
      variantManagement.attachSave(oPayload, fnEvent, {});
      variantManagement.attachSelect(oPayload, fnEvent, {});
    };
    _proto._updateInitialStatesOnVariantChange = function _updateInitialStatesOnVariantChange(vmAssociatedControlsToReset) {
      const initialControlStatesMapper = this.initialControlStatesMapper;
      Object.keys(initialControlStatesMapper).forEach(controlKey => {
        for (const vmAssociatedcontrolKey of vmAssociatedControlsToReset) {
          if (vmAssociatedcontrolKey.indexOf(controlKey) > -1) {
            initialControlStatesMapper[controlKey] = {};
          }
        }
      });
    };
    _proto._isInitialStatesApplicable = function _isInitialStatesApplicable(initialState, control, isNavHybrid) {
      return initialState && this.invalidateInitialStateForApply.indexOf(control.getId()) === -1 && this.controlsVariantIdUnavailable.indexOf(control.getId()) === -1 && (isNavHybrid ?? true);
    };
    return ViewState;
  }(ControllerExtension), (_applyDecoratedDescriptor(_class2.prototype, "refreshViewBindings", [_dec2, _dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "refreshViewBindings"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptBindingRefreshControls", [_dec4, _dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptBindingRefreshControls"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "refreshControlBinding", [_dec6, _dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "refreshControlBinding"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getControlRefreshBindingHandler", [_dec8, _dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "getControlRefreshBindingHandler"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptBindingRefreshHandler", [_dec10, _dec11], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptBindingRefreshHandler"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onSuspend", [_dec12, _dec13], Object.getOwnPropertyDescriptor(_class2.prototype, "onSuspend"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onRestore", [_dec14, _dec15], Object.getOwnPropertyDescriptor(_class2.prototype, "onRestore"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "collectResults", [_dec16, _dec17], Object.getOwnPropertyDescriptor(_class2.prototype, "collectResults"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptControlStateHandler", [_dec18, _dec19], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptControlStateHandler"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getControlStateHandler", [_dec20, _dec21], Object.getOwnPropertyDescriptor(_class2.prototype, "getControlStateHandler"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "adaptStateControls", [_dec22, _dec23], Object.getOwnPropertyDescriptor(_class2.prototype, "adaptStateControls"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getStateKey", [_dec24, _dec25], Object.getOwnPropertyDescriptor(_class2.prototype, "getStateKey"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveViewState", [_dec26, _dec27], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveViewState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveAdditionalStates", [_dec28, _dec29], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveAdditionalStates"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "retrieveControlState", [_dec30, _dec31], Object.getOwnPropertyDescriptor(_class2.prototype, "retrieveControlState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyInitialStateOnly", [_dec32, _dec33], Object.getOwnPropertyDescriptor(_class2.prototype, "applyInitialStateOnly"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyViewState", [_dec34, _dec35], Object.getOwnPropertyDescriptor(_class2.prototype, "applyViewState"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_checkIfVariantIdIsAvailable", [_dec36], Object.getOwnPropertyDescriptor(_class2.prototype, "_checkIfVariantIdIsAvailable"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onBeforeStateApplied", [_dec37, _dec38], Object.getOwnPropertyDescriptor(_class2.prototype, "onBeforeStateApplied"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "onAfterStateApplied", [_dec39, _dec40], Object.getOwnPropertyDescriptor(_class2.prototype, "onAfterStateApplied"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyAdditionalStates", [_dec41, _dec42], Object.getOwnPropertyDescriptor(_class2.prototype, "applyAdditionalStates"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "_applyNavigationParametersToFilterbar", [_dec43], Object.getOwnPropertyDescriptor(_class2.prototype, "_applyNavigationParametersToFilterbar"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyNavigationParameters", [_dec44, _dec45], Object.getOwnPropertyDescriptor(_class2.prototype, "applyNavigationParameters"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "applyControlState", [_dec46, _dec47], Object.getOwnPropertyDescriptor(_class2.prototype, "applyControlState"), _class2.prototype)), _class2)) || _class);
  return ViewState;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/ViewState", ["sap/base/Log","sap/base/util/merge","sap/fe/core/CommonUtils","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/KeepAliveHelper","sap/fe/core/helpers/ModelHelper","sap/fe/navigation/library","sap/ui/core/mvc/ControllerExtension","sap/ui/core/mvc/OverrideExecution","sap/ui/fl/apply/api/ControlVariantApplyAPI","sap/fe/core/controls/filterbar/adapter/SelectionVariantToStateFilters","sap/ui/mdc/p13n/StateUtil"],function(t,e,r,i,n,a,o,p,l,s,c,f){"use strict";var d,u,y,g,S,h,v,b,w,C,O,A,I,m,P,_,B,R,j,V,E,x,D,K,F,H,M,T,k,N,$,z,U,L,q,G,J,Q,W,X,Y,Z,tt,et,rt,it,nt,at,ot;var pt=i.publicExtension;var lt=i.privateExtension;var st=i.finalExtension;var ct=i.extensible;var ft=i.defineUI5Class;function dt(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;ut(t,e)}function ut(t,e){ut=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,r){e.__proto__=r;return e};return ut(t,e)}function yt(t,e,r,i,n){var a={};Object.keys(i).forEach(function(t){a[t]=i[t]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,i){return i(t,e,r)||r},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(t,e,a);a=null}return a}const gt="#additionalStates",St=o.NavType;const ht={"sap.ui.fl.variants.VariantManagement":{retrieve:function(t){return{variantId:t.getCurrentVariantKey()}},apply:async function(e,r){try{if(r&&r.variantId!==undefined&&r.variantId!==e.getCurrentVariantKey()){const i=this._checkIfVariantIdIsAvailable(e,r.variantId);let n;if(i){n=r.variantId}else{n=e.getStandardVariantKey();this.controlsVariantIdUnavailable.push(...e.getFor())}try{await s.activateVariant({element:e,variantReference:n});await this._setInitialStatesForDeltaCompute(e)}catch(r){t.error(r);this.invalidateInitialStateForApply.push(...e.getFor());await this._setInitialStatesForDeltaCompute(e)}}else{this._setInitialStatesForDeltaCompute(e)}}catch(e){t.error(e)}}},"sap.m.IconTabBar":{retrieve:function(t){return{selectedKey:t.getSelectedKey()}},apply:function(t,e){if(e&&e.selectedKey){const r=t.getItems().find(function(t){return t.getKey()===e.selectedKey});if(r){t.setSelectedItem(r)}}}},"sap.ui.mdc.FilterBar":{retrieve:async function(t){const e=this.getStateKey(t);const r=await f.retrieveExternalState(t);const i=t.getPropertyInfoSet();const n=r.filter||{};i.filter(function(t){return Object.keys(n).length>0&&t.path&&n[t.path]&&(t.removeFromAppState||n[t.path].length===0)}).forEach(function(t){if(t.path){delete n[t.path]}});return this._getControlState(e,r)},apply:async function(e,r,i){try{if(r){const t=this._isInitialStatesApplicable(r===null||r===void 0?void 0:r.initialState,e);const n=i.navigationType;if(n===St.hybrid&&r.fullState!==undefined){const t=await c.getFilterBarSupportedFields(e),n=c.getFilterBarInfoForConversion(e),a=c.getConditionsFromSV(i.selectionVariant,n,t);const o={...r.fullState,filter:{...r.fullState.filter,...a}};return f.applyExternalState(e,o)}if(t){const t=await f.diffState(e,r.initialState,r.fullState);return f.applyExternalState(e,t)}return f.applyExternalState(e,(r===null||r===void 0?void 0:r.fullState)??r)}}catch(e){t.error(e)}}},"sap.ui.mdc.Table":{retrieve:async function(t){const e=this.getStateKey(t);const r=await f.retrieveExternalState(t);return this._getControlState(e,r)},apply:async function(e,r,i){try{if(r){const t=this._isInitialStatesApplicable(r===null||r===void 0?void 0:r.initialState,e,i.navigationType!==St.hybrid);if(t){var n;if(r.initialState&&!((n=r.initialState)!==null&&n!==void 0&&n.supplementaryConfig)){r.initialState.supplementaryConfig={}}const t=await f.diffState(e,r.initialState,r.fullState);return f.applyExternalState(e,t)}else{if(!r.supplementaryConfig){r.supplementaryConfig={}}return f.applyExternalState(e,(r===null||r===void 0?void 0:r.fullState)??r)}}}catch(e){t.error(e)}},refreshBinding:function(e){const r=e.getRowBinding();if(r){const t=r.getRootBinding();if(t===r){r.refresh()}else{const t=r.getHeaderContext();const e=r.getGroupId();if(t){t.requestSideEffects([{$NavigationPropertyPath:""}],e)}}}else{t.info(`Table: ${e.getId()} was not refreshed. No binding found!`)}}},"sap.ui.mdc.Chart":{retrieve:function(t){return f.retrieveExternalState(t)},apply:function(t,e){if(e){return f.applyExternalState(t,e)}}},"sap.uxap.ObjectPageLayout":{retrieve:function(t){return{selectedSection:t.getSelectedSection()}},apply:function(t,e){if(e){t.setSelectedSection(e.selectedSection)}},refreshBinding:function(e){const i=e.getBindingContext();const o=i&&i.getBinding();if(o){const t=a.getMetaPathForContext(i);const p=n.getControlRefreshStrategyForContextPath(e,t);if(p==="self"){const e=i.getModel(),n=e.getMetaModel(),a=r.getContextPathProperties(n,t,{$kind:"NavigationProperty"})||{},p=Object.keys(a).reduce(function(t,e){if(a[e].$isCollection!==true){t.push({$NavigationPropertyPath:e})}return t},[]),l=[{$PropertyPath:"*"}],s=o.getGroupId();i.requestSideEffects(l.concat(p),s)}else if(p==="includingDependents"){o.refresh()}}else{t.info(`ObjectPage: ${e.getId()} was not refreshed. No binding found!`)}}},"sap.m.SegmentedButton":{retrieve:function(t){return{selectedKey:t.getSelectedKey()}},apply:function(t,e){if(e!==null&&e!==void 0&&e.selectedKey&&e.selectedKey!==t.getSelectedKey()){var r;t.setSelectedKey(e.selectedKey);if((r=t.getParent())!==null&&r!==void 0&&r.isA("sap.ui.mdc.ActionToolbar")){t.fireEvent("selectionChange")}}}},"sap.m.Select":{retrieve:function(t){return{selectedKey:t.getSelectedKey()}},apply:function(t,e){if(e!==null&&e!==void 0&&e.selectedKey&&e.selectedKey!==t.getSelectedKey()){var r;t.setSelectedKey(e.selectedKey);if((r=t.getParent())!==null&&r!==void 0&&r.isA("sap.ui.mdc.ActionToolbar")){t.fireEvent("change")}}}},"sap.f.DynamicPage":{retrieve:function(t){return{headerExpanded:t.getHeaderExpanded()}},apply:function(t,e){if(e){t.setHeaderExpanded(e.headerExpanded)}}},"sap.ui.core.mvc.View":{retrieve:function(t){const e=t.getController();if(e&&e.viewState){return e.viewState.retrieveViewState(e.viewState)}return{}},apply:function(t,e,r){const i=t.getController();if(i&&i.viewState){return i.viewState.applyViewState(e,r)}},refreshBinding:function(t){const e=t.getController();if(e&&e.viewState){return e.viewState.refreshViewBindings()}}},"sap.ui.core.ComponentContainer":{retrieve:function(t){const e=t.getComponentInstance();if(e){return this.retrieveControlState(e.getRootControl())}return{}},apply:function(t,e,r){const i=t.getComponentInstance();if(i){return this.applyControlState(i.getRootControl(),e,r)}}}};let vt=(d=ft("sap.fe.core.controllerextensions.ViewState"),u=pt(),y=st(),g=pt(),S=ct(l.After),h=lt(),v=st(),b=lt(),w=st(),C=pt(),O=ct(l.After),A=pt(),I=ct(l.After),m=pt(),P=ct(l.After),_=lt(),B=st(),R=pt(),j=ct(l.After),V=lt(),E=st(),x=pt(),D=ct(l.After),K=pt(),F=st(),H=pt(),M=st(),T=pt(),k=ct(l.After),N=lt(),$=st(),z=pt(),U=ct(l.Instead),L=pt(),q=st(),G=lt(),J=pt(),Q=ct(l.After),W=pt(),X=ct(l.After),Y=pt(),Z=ct(l.After),tt=lt(),et=pt(),rt=ct(l.After),it=lt(),nt=st(),d(at=(ot=function(r){dt(i,r);function i(){var e;e=r.call(this)||this;e.initialControlStatesMapper={};e.controlsVariantIdUnavailable=[];e.invalidateInitialStateForApply=[];e.viewStateControls=[];e._setInitialStatesForDeltaCompute=async r=>{try{const t=e.viewStateControls;const i=[];const n=[];let a=[];const o=(r===null||r===void 0?void 0:r.getFor())??[];t.filter(function(t){return t&&(!r||o.indexOf(t.getId())>-1)&&(t.isA("sap.ui.mdc.Table")||t.isA("sap.ui.mdc.FilterBar")||t.isA("sap.ui.mdc.Chart"))}).forEach(t=>{if(r){e._addEventListenersToVariantManagement(r,o)}const a=f.retrieveExternalState(t);i.push(a);n.push(e.getStateKey(t))});a=await Promise.all(i);a.forEach((t,r)=>{e.initialControlStatesMapper[n[r]]=t})}catch(e){t.error(e)}};e._iRetrievingStateCounter=0;e._pInitialStateApplied=new Promise(t=>{e._pInitialStateAppliedResolve=t});return e}var n=i.prototype;n.refreshViewBindings=async function t(){const e=await this.collectResults(this.base.viewState.adaptBindingRefreshControls);let r=Promise.resolve();e.filter(t=>t&&t.isA&&t.isA("sap.ui.base.ManagedObject")).forEach(t=>{r=r.then(this.refreshControlBinding.bind(this,t))});return r};n.adaptBindingRefreshControls=function t(e){};n.refreshControlBinding=function e(r){const i=this.getControlRefreshBindingHandler(r);let n=Promise.resolve();if(typeof i.refreshBinding!=="function"){t.info(`refreshBinding handler for control: ${r.getMetadata().getName()} is not provided`)}else{n=n.then(i.refreshBinding.bind(this,r))}return n};n.getControlRefreshBindingHandler=function t(e){const r={};if(e){for(const t in ht){if(e.isA(t)){r["refreshBinding"]=ht[t].refreshBinding||{};break}}}this.base.viewState.adaptBindingRefreshHandler(e,r);return r};n.adaptBindingRefreshHandler=function t(e,r){};n.onSuspend=function t(){};n.onRestore=function t(){};n.destroy=function t(){delete this._pInitialStateAppliedResolve;r.prototype.destroy.call(this)};n.collectResults=function t(e){const r=[];for(var i=arguments.length,n=new Array(i>1?i-1:0),a=1;a<i;a++){n[a-1]=arguments[a]}n.push(r);e.apply(this,n);return Promise.all(r)};n.adaptControlStateHandler=function t(e,r){};n.getControlStateHandler=function t(e){const r=[],i=[];if(e){for(const t in ht){if(e.isA(t)){r.push(Object.assign({},ht[t]));break}}}this.base.viewState.adaptControlStateHandler(e,i);return r.concat(i)};n.adaptStateControls=function t(e){};n.getStateKey=function t(e){return this.getView().getLocalId(e.getId())||e.getId()};n.retrieveViewState=async function t(){++this._iRetrievingStateCounter;let r;try{await this._pInitialStateApplied;const t=await this.collectResults(this.base.viewState.adaptStateControls);const i=await Promise.all(t.filter(function(t){return t&&t.isA&&t.isA("sap.ui.base.ManagedObject")}).map(t=>this.retrieveControlState(t).then(e=>({key:this.getStateKey(t),value:e}))));r=i.reduce(function(t,r){const i={};i[r.key]=r.value;return e(t,i)},{});const n=await Promise.resolve(this._retrieveAdditionalStates());if(n&&Object.keys(n).length){r[gt]=n}}finally{--this._iRetrievingStateCounter}return this._iRetrievingStateCounter===0?r:undefined};n.retrieveAdditionalStates=function t(e){};n._retrieveAdditionalStates=function t(){const e={};this.base.viewState.retrieveAdditionalStates(e);return e};n.retrieveControlState=function t(r){const i=this.getControlStateHandler(r);return Promise.all(i.map(t=>{if(typeof t.retrieve!=="function"){throw new Error(`controlStateHandler.retrieve is not a function for control: ${r.getMetadata().getName()}`)}return t.retrieve.call(this,r)})).then(t=>t.reduce(function(t,r){return e(t,r)},{}))};n.applyInitialStateOnly=function t(){return true};n.applyViewState=async function e(r,i){if(this.base.viewState.applyInitialStateOnly()&&this._getInitialStateApplied()){return}try{await this.collectResults(this.base.viewState.onBeforeStateApplied,[],i.navigationType);const t=await this.collectResults(this.base.viewState.adaptStateControls);this.viewStateControls=t;let e=Promise.resolve();let n=false;const a=t.reduce((t,e)=>{if(!e){return t}const r=e.isA("sap.ui.fl.variants.VariantManagement");if(!n){n=r}t=r?[e,...t]:[...t,e];return t},[]);if(!n){this._setInitialStatesForDeltaCompute()}a.filter(function(t){return t.isA("sap.ui.base.ManagedObject")}).forEach(t=>{const n=this.getStateKey(t);e=e.then(this.applyControlState.bind(this,t,r?r[n]:undefined,i))});await e;if(i.navigationType===St.iAppState||i.navigationType===St.hybrid){await this.collectResults(this.base.viewState.applyAdditionalStates,r?r[gt]:undefined)}else{await this.collectResults(this.base.viewState.applyNavigationParameters,i);await this.collectResults(this.base.viewState._applyNavigationParametersToFilterbar,i)}}finally{try{await this.collectResults(this.base.viewState.onAfterStateApplied);this._setInitialStateApplied()}catch(e){t.error(e)}}};n._checkIfVariantIdIsAvailable=function t(e,r){const i=e.getVariants();let n=false;i.forEach(function(t){if(t.key===r){n=true}});return n};n._setInitialStateApplied=function t(){if(this._pInitialStateAppliedResolve){const t=this._pInitialStateAppliedResolve;delete this._pInitialStateAppliedResolve;t()}};n._getInitialStateApplied=function t(){return!this._pInitialStateAppliedResolve};n.onBeforeStateApplied=function t(e,r){};n.onAfterStateApplied=function t(e){};n.applyAdditionalStates=function t(e,r){};n._applyNavigationParametersToFilterbar=function t(e,r){};n.applyNavigationParameters=function t(e,r){};n.applyControlState=function t(e,r,i){const n=this.getControlStateHandler(e);let a=Promise.resolve();n.forEach(t=>{if(typeof t.apply!=="function"){throw new Error(`controlStateHandler.apply is not a function for control: ${e.getMetadata().getName()}`)}a=a.then(t.apply.bind(this,e,r,i))});return a};n.getInterface=function t(){return this};n._getControlState=function t(e,r){const i=this.initialControlStatesMapper;if(Object.keys(i).length>0&&i[e]){if(Object.keys(i[e]).length===0){i[e]={...r}}return{fullState:r,initialState:i[e]}}return r};n._addEventListenersToVariantManagement=function t(e,r){const i={variantManagedControls:r};const n=()=>{this._updateInitialStatesOnVariantChange(r)};e.attachSave(i,n,{});e.attachSelect(i,n,{})};n._updateInitialStatesOnVariantChange=function t(e){const r=this.initialControlStatesMapper;Object.keys(r).forEach(t=>{for(const i of e){if(i.indexOf(t)>-1){r[t]={}}}})};n._isInitialStatesApplicable=function t(e,r,i){return e&&this.invalidateInitialStateForApply.indexOf(r.getId())===-1&&this.controlsVariantIdUnavailable.indexOf(r.getId())===-1&&(i??true)};return i}(p),yt(ot.prototype,"refreshViewBindings",[u,y],Object.getOwnPropertyDescriptor(ot.prototype,"refreshViewBindings"),ot.prototype),yt(ot.prototype,"adaptBindingRefreshControls",[g,S],Object.getOwnPropertyDescriptor(ot.prototype,"adaptBindingRefreshControls"),ot.prototype),yt(ot.prototype,"refreshControlBinding",[h,v],Object.getOwnPropertyDescriptor(ot.prototype,"refreshControlBinding"),ot.prototype),yt(ot.prototype,"getControlRefreshBindingHandler",[b,w],Object.getOwnPropertyDescriptor(ot.prototype,"getControlRefreshBindingHandler"),ot.prototype),yt(ot.prototype,"adaptBindingRefreshHandler",[C,O],Object.getOwnPropertyDescriptor(ot.prototype,"adaptBindingRefreshHandler"),ot.prototype),yt(ot.prototype,"onSuspend",[A,I],Object.getOwnPropertyDescriptor(ot.prototype,"onSuspend"),ot.prototype),yt(ot.prototype,"onRestore",[m,P],Object.getOwnPropertyDescriptor(ot.prototype,"onRestore"),ot.prototype),yt(ot.prototype,"collectResults",[_,B],Object.getOwnPropertyDescriptor(ot.prototype,"collectResults"),ot.prototype),yt(ot.prototype,"adaptControlStateHandler",[R,j],Object.getOwnPropertyDescriptor(ot.prototype,"adaptControlStateHandler"),ot.prototype),yt(ot.prototype,"getControlStateHandler",[V,E],Object.getOwnPropertyDescriptor(ot.prototype,"getControlStateHandler"),ot.prototype),yt(ot.prototype,"adaptStateControls",[x,D],Object.getOwnPropertyDescriptor(ot.prototype,"adaptStateControls"),ot.prototype),yt(ot.prototype,"getStateKey",[K,F],Object.getOwnPropertyDescriptor(ot.prototype,"getStateKey"),ot.prototype),yt(ot.prototype,"retrieveViewState",[H,M],Object.getOwnPropertyDescriptor(ot.prototype,"retrieveViewState"),ot.prototype),yt(ot.prototype,"retrieveAdditionalStates",[T,k],Object.getOwnPropertyDescriptor(ot.prototype,"retrieveAdditionalStates"),ot.prototype),yt(ot.prototype,"retrieveControlState",[N,$],Object.getOwnPropertyDescriptor(ot.prototype,"retrieveControlState"),ot.prototype),yt(ot.prototype,"applyInitialStateOnly",[z,U],Object.getOwnPropertyDescriptor(ot.prototype,"applyInitialStateOnly"),ot.prototype),yt(ot.prototype,"applyViewState",[L,q],Object.getOwnPropertyDescriptor(ot.prototype,"applyViewState"),ot.prototype),yt(ot.prototype,"_checkIfVariantIdIsAvailable",[G],Object.getOwnPropertyDescriptor(ot.prototype,"_checkIfVariantIdIsAvailable"),ot.prototype),yt(ot.prototype,"onBeforeStateApplied",[J,Q],Object.getOwnPropertyDescriptor(ot.prototype,"onBeforeStateApplied"),ot.prototype),yt(ot.prototype,"onAfterStateApplied",[W,X],Object.getOwnPropertyDescriptor(ot.prototype,"onAfterStateApplied"),ot.prototype),yt(ot.prototype,"applyAdditionalStates",[Y,Z],Object.getOwnPropertyDescriptor(ot.prototype,"applyAdditionalStates"),ot.prototype),yt(ot.prototype,"_applyNavigationParametersToFilterbar",[tt],Object.getOwnPropertyDescriptor(ot.prototype,"_applyNavigationParametersToFilterbar"),ot.prototype),yt(ot.prototype,"applyNavigationParameters",[et,rt],Object.getOwnPropertyDescriptor(ot.prototype,"applyNavigationParameters"),ot.prototype),yt(ot.prototype,"applyControlState",[it,nt],Object.getOwnPropertyDescriptor(ot.prototype,"applyControlState"),ot.prototype),ot))||at);return vt},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/ActivityBase-dbg", ["sap/base/Log", "sap/base/util/UriParameters", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/ui/core/ws/SapPcpWebSocket"], function (Log, UriParameters, CollaborationCommon, SapPcpWebSocket) {
  "use strict";

  var _exports = {};
  var SUPPORTED_PROTOCOLS = SapPcpWebSocket.SUPPORTED_PROTOCOLS;
  var Activity = CollaborationCommon.Activity;
  const COLLABORATION = "/collaboration";
  const CONNECTED = "/collaboration/connected";
  const CONNECTION = "/collaboration/connection";
  const CURRENTDRAFTID = "/collaboration/DraftID";
  function isCollaborationConnected(internalModel) {
    return !!internalModel.getProperty(CONNECTED);
  }
  _exports.isCollaborationConnected = isCollaborationConnected;
  function initializeCollaboration(user, webSocketBaseURL, draftUUID, serviceUrl, internalModel, receiveCallback) {
    let sendUserInfo = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    if (internalModel.getProperty(CONNECTION)) {
      // A connection is already established
      if (internalModel.getProperty(CURRENTDRAFTID) === draftUUID) {
        // Connection corresponds to the same draft -> nothing to do
        return;
      } else {
        // There was a connection to another draft -> we close it before creating a new one
        // This can happen e.g. when switching between items in FCL
        endCollaboration(internalModel);
      }
    }
    const activeUsers = [user];
    internalModel.setProperty(COLLABORATION, {
      activeUsers: activeUsers,
      activities: {}
    });
    sendUserInfo = sendUserInfo || UriParameters.fromQuery(window.location.search).get("useFLPUser") === "true";
    const webSocket = createWebSocket(user, webSocketBaseURL, draftUUID, serviceUrl, sendUserInfo);
    internalModel.setProperty(CONNECTION, webSocket);
    internalModel.setProperty(CURRENTDRAFTID, draftUUID);
    webSocket.attachMessage(function (event) {
      const message = event.getParameter("pcpFields");
      receiveCallback(message);
    });
    webSocket.attachOpen(function () {
      internalModel.setProperty(CONNECTED, true);
    });
    webSocket.attachError(function () {
      Log.error(`The connection to the websocket channel ${webSocketBaseURL} could not be established`);
      internalModel.setProperty(CONNECTED, false);
    });
    webSocket.attachClose(function () {
      internalModel.setProperty(CONNECTED, false);
    });
  }
  _exports.initializeCollaboration = initializeCollaboration;
  function broadcastCollaborationMessage(action, content, internalModel, triggeredActionName, refreshListBinding, requestedProperties) {
    if (isCollaborationConnected(internalModel)) {
      const webSocket = internalModel.getProperty(CONNECTION);
      webSocket.send("", {
        clientAction: action,
        clientContent: content,
        clientTriggeredActionName: triggeredActionName,
        clientRefreshListBinding: refreshListBinding,
        clientRequestedProperties: requestedProperties
      });
      if (action === Activity.Activate || action === Activity.Discard) {
        endCollaboration(internalModel);
      }
    }
  }
  _exports.broadcastCollaborationMessage = broadcastCollaborationMessage;
  function endCollaboration(internalModel) {
    const webSocket = internalModel.getProperty(CONNECTION);
    webSocket === null || webSocket === void 0 ? void 0 : webSocket.close();
    internalModel.setProperty(COLLABORATION, {});
  }
  _exports.endCollaboration = endCollaboration;
  function createWebSocket(user, socketBaseURL, draftUUID, serviceUrl) {
    let sendUserInfo = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    const hostLocation = window.location;
    let socketURI;

    // Support useBackendUrl for local testing
    const useBackendUrl = UriParameters.fromQuery(window.location.search).get("useBackendUrl");
    if (useBackendUrl) {
      socketURI = useBackendUrl.replace("https", "wss");
    } else {
      socketURI = hostLocation.protocol === "https:" ? "wss:" : "ws:";
      socketURI += `//${hostLocation.host}`;
    }
    socketURI += `${(socketBaseURL.startsWith("/") ? "" : "/") + socketBaseURL}?draft=${draftUUID}&relatedService=${serviceUrl}`;
    if (sendUserInfo) {
      socketURI += `&userID=${encodeURI(user.id)}&userName=${encodeURI(user.initialName || "")}`;
    }
    return new SapPcpWebSocket(socketURI, [SUPPORTED_PROTOCOLS.v10]);
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/ActivityBase", ["sap/base/Log","sap/base/util/UriParameters","sap/fe/core/controllerextensions/collaboration/CollaborationCommon","sap/ui/core/ws/SapPcpWebSocket"],function(e,t,o,n){"use strict";var r={};var i=n.SUPPORTED_PROTOCOLS;var s=o.Activity;const a="/collaboration";const c="/collaboration/connected";const l="/collaboration/connection";const u="/collaboration/DraftID";function f(e){return!!e.getProperty(c)}r.isCollaborationConnected=f;function d(o,n,r,i,s,f){let d=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;if(s.getProperty(l)){if(s.getProperty(u)===r){return}else{P(s)}}const p=[o];s.setProperty(a,{activeUsers:p,activities:{}});d=d||t.fromQuery(window.location.search).get("useFLPUser")==="true";const h=b(o,n,r,i,d);s.setProperty(l,h);s.setProperty(u,r);h.attachMessage(function(e){const t=e.getParameter("pcpFields");f(t)});h.attachOpen(function(){s.setProperty(c,true)});h.attachError(function(){e.error(`The connection to the websocket channel ${n} could not be established`);s.setProperty(c,false)});h.attachClose(function(){s.setProperty(c,false)})}r.initializeCollaboration=d;function p(e,t,o,n,r,i){if(f(o)){const a=o.getProperty(l);a.send("",{clientAction:e,clientContent:t,clientTriggeredActionName:n,clientRefreshListBinding:r,clientRequestedProperties:i});if(e===s.Activate||e===s.Discard){P(o)}}}r.broadcastCollaborationMessage=p;function P(e){const t=e.getProperty(l);t===null||t===void 0?void 0:t.close();e.setProperty(a,{})}r.endCollaboration=P;function b(e,o,r,s){let a=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;const c=window.location;let l;const u=t.fromQuery(window.location.search).get("useBackendUrl");if(u){l=u.replace("https","wss")}else{l=c.protocol==="https:"?"wss:":"ws:";l+=`//${c.host}`}l+=`${(o.startsWith("/")?"":"/")+o}?draft=${r}&relatedService=${s}`;if(a){l+=`&userID=${encodeURI(e.id)}&userName=${encodeURI(e.initialName||"")}`}return new n(l,[i.v10])}return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/ActivitySync-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/collaboration/ActivityBase", "sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/fe/core/converters/MetaModelConverter", "sap/m/MessageBox"], function (Log, CommonUtils, ActivityBase, CollaborationCommon, MetaModelConverter, MessageBox) {
  "use strict";

  var _exports = {};
  var getActivityKeyFromPath = CollaborationCommon.getActivityKeyFromPath;
  var CollaborationUtils = CollaborationCommon.CollaborationUtils;
  var Activity = CollaborationCommon.Activity;
  var isCollaborationConnected = ActivityBase.isCollaborationConnected;
  var initializeCollaboration = ActivityBase.initializeCollaboration;
  var endCollaboration = ActivityBase.endCollaboration;
  var broadcastCollaborationMessage = ActivityBase.broadcastCollaborationMessage;
  const MYACTIVITY = "/collaboration/myActivity";
  const ACTIVEUSERS = "/collaboration/activeUsers";
  const ACTIVITIES = "/collaboration/activities";
  const SYNCGROUPID = "$auto.sync";
  const isConnected = function (control) {
    const internalModel = control.getModel("internal");
    return isCollaborationConnected(internalModel);
  };
  _exports.isConnected = isConnected;
  const send = function (control, action, content, triggeredActionName, refreshListBinding, actionRequestedProperties) {
    if (isConnected(control)) {
      const internalModel = control.getModel("internal");
      const clientContent = Array.isArray(content) ? content.join("|") : content;
      const requestedProperties = actionRequestedProperties === null || actionRequestedProperties === void 0 ? void 0 : actionRequestedProperties.join("|");
      const myActivity = internalModel.getProperty(MYACTIVITY);
      if (action === Activity.LiveChange) {
        // To avoid unnecessary traffic we keep track of live changes and send it only once

        if (myActivity === clientContent) {
          return;
        } else {
          internalModel.setProperty(MYACTIVITY, clientContent);
        }
      } else {
        // No need to send an Undo message if there's no current activity
        if (action === Activity.Undo && myActivity === null) {
          return;
        }

        // user finished the activity
        internalModel.setProperty(MYACTIVITY, null);
      }
      broadcastCollaborationMessage(action, clientContent, internalModel, triggeredActionName, refreshListBinding, requestedProperties);
    }
  };
  _exports.send = send;
  const getWebSocketBaseURL = function (bindingContext) {
    return bindingContext.getModel().getMetaModel().getObject("/@com.sap.vocabularies.Common.v1.WebSocketBaseURL");
  };
  const isCollaborationEnabled = function (view) {
    const bindingContext = (view === null || view === void 0 ? void 0 : view.getBindingContext) && view.getBindingContext();
    return !!(bindingContext && getWebSocketBaseURL(bindingContext));
  };
  _exports.isCollaborationEnabled = isCollaborationEnabled;
  const connect = async function (view) {
    const internalModel = view.getModel("internal");
    const me = CollaborationUtils.getMe(view);

    // Retrieving ME from shell service
    if (!me) {
      // no me = no shell = not sure what to do
      return;
    }
    const bindingContext = view.getBindingContext();
    const webSocketBaseURL = getWebSocketBaseURL(bindingContext);
    const serviceUrl = bindingContext.getModel().getServiceUrl();
    if (!webSocketBaseURL) {
      return;
    }
    const sDraftUUID = await bindingContext.requestProperty("DraftAdministrativeData/DraftUUID");
    if (!sDraftUUID) {
      return;
    }
    initializeCollaboration(me, webSocketBaseURL, sDraftUUID, serviceUrl, internalModel, message => {
      messageReceive(message, view);
    });
    internalModel.setProperty(MYACTIVITY, null);
  };
  _exports.connect = connect;
  const disconnect = function (control) {
    const internalModel = control.getModel("internal");
    endCollaboration(internalModel);
  };

  /**
   * Callback when a message is received from the websocket.
   *
   * @param message The message received
   * @param view The view that was used initially when connecting the websocket
   */
  _exports.disconnect = disconnect;
  function messageReceive(message, view) {
    var _activities;
    const internalModel = view.getModel("internal");
    let activeUsers = internalModel.getProperty(ACTIVEUSERS);
    let activities;
    let activityKey;
    const metaPath = calculateMetaPath(view, message.clientContent);
    message.userAction = message.userAction || message.clientAction;
    const sender = {
      id: message.userID,
      name: message.userDescription,
      initials: CollaborationUtils.formatInitials(message.userDescription),
      color: CollaborationUtils.getUserColor(message.userID, activeUsers, [])
    };
    let mactivity = sender;

    // eslint-disable-next-line default-case
    switch (message.userAction) {
      case Activity.Join:
      case Activity.JoinEcho:
        if (activeUsers.findIndex(user => user.id === sender.id) === -1) {
          activeUsers.unshift(sender);
          internalModel.setProperty(ACTIVEUSERS, activeUsers);
        }
        if (message.userAction === Activity.Join) {
          // we echo our existence to the newly entered user and also send the current activity if there is any
          broadcastCollaborationMessage(Activity.JoinEcho, internalModel.getProperty(MYACTIVITY), internalModel);
        }
        if (message.userAction === Activity.JoinEcho) {
          if (message.clientContent) {
            // another user was already typing therefore I want to see his activity immediately. Calling me again as a live change
            message.userAction = Activity.LiveChange;
            messageReceive(message, view);
          }
        }
        break;
      case Activity.Leave:
        // Removing the active user. Not removing "me" if I had the screen open in another session
        activeUsers = activeUsers.filter(user => user.id !== sender.id || user.me);
        internalModel.setProperty(ACTIVEUSERS, activeUsers);
        const allActivities = internalModel.getProperty(ACTIVITIES) || {};
        const removeUserActivities = function (bag) {
          if (Array.isArray(bag)) {
            return bag.filter(activity => activity.id !== sender.id);
          } else {
            for (const p in bag) {
              bag[p] = removeUserActivities(bag[p]);
            }
            return bag;
          }
        };
        removeUserActivities(allActivities);
        internalModel.setProperty(ACTIVITIES, allActivities);
        break;
      case Activity.Change:
        updateOnChange(view, message);
        break;
      case Activity.Create:
        // For create we actually just need to refresh the table
        updateOnCreate(view, message);
        break;
      case Activity.Delete:
        // For now also refresh the page but in case of deletion we need to inform the user
        updateOnDelete(view, message);
        break;
      case Activity.Activate:
        draftClosedByOtherUser(view, message.clientContent, CollaborationUtils.getText("C_COLLABORATIONDRAFT_ACTIVATE", sender.name));
        break;
      case Activity.Discard:
        draftClosedByOtherUser(view, message.clientContent, CollaborationUtils.getText("C_COLLABORATIONDRAFT_DISCARD", sender.name));
        break;
      case Activity.Action:
        updateOnAction(view, message);
        break;
      case Activity.LiveChange:
        mactivity = sender;
        mactivity.key = getActivityKeyFromPath(message.clientContent);

        // stupid JSON model...
        let initJSONModel = "";
        const parts = metaPath.split("/");
        for (let i = 1; i < parts.length - 1; i++) {
          initJSONModel += `/${parts[i]}`;
          if (!internalModel.getProperty(ACTIVITIES + initJSONModel)) {
            internalModel.setProperty(ACTIVITIES + initJSONModel, {});
          }
        }
        activities = internalModel.getProperty(ACTIVITIES + metaPath);
        activities = (_activities = activities) !== null && _activities !== void 0 && _activities.slice ? activities.slice() : [];
        activities.push(mactivity);
        internalModel.setProperty(ACTIVITIES + metaPath, activities);
        break;
      case Activity.Undo:
        // The user did a change but reverted it, therefore unblock the control
        activities = internalModel.getProperty(ACTIVITIES + metaPath);
        activityKey = getActivityKeyFromPath(message.clientContent);
        internalModel.setProperty(ACTIVITIES + metaPath, activities.filter(a => a.key !== activityKey));
        break;
    }
  }

  /**
   * Displays a message that the current draft was closed be another user, and navigates back to a proper view.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param path The path of the context to navigate to
   * @param messageText The message to display
   */
  function draftClosedByOtherUser(view, path, messageText) {
    disconnect(view);
    MessageBox.information(messageText);
    view.getBindingContext().getBinding().resetChanges().then(function () {
      navigate(path, view);
    }).catch(function () {
      Log.error("Pending Changes could not be reset - still navigating to active instance");
      navigate(path, view);
    });
  }

  /**
   * Updates data when a CHANGE message has been received.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param message The message received from the websocket
   */
  function updateOnChange(view, message) {
    const updatedObjectsPaths = message.clientContent.split("|");
    const metaModel = view.getModel().getMetaModel();
    const internalModel = view.getModel("internal");

    // Remove all locks corresponding to the paths
    updatedObjectsPaths.forEach(updatedPath => {
      var _currentActivities;
      const updatedMetaPath = metaModel.getMetaPath(updatedPath);
      const activityKey = getActivityKeyFromPath(updatedPath);
      let currentActivities = internalModel.getProperty(ACTIVITIES + updatedMetaPath) || [];
      currentActivities = ((_currentActivities = currentActivities) === null || _currentActivities === void 0 ? void 0 : _currentActivities.filter) && currentActivities.filter(activity => activity.key !== activityKey);
      if (currentActivities) {
        internalModel.setProperty(ACTIVITIES + updatedMetaPath, currentActivities);
      }
    });
    const currentPage = getCurrentPage(view);
    const currentContext = currentPage.getBindingContext();
    const requestPromises = updatedObjectsPaths.map(path => applyUpdatesForChange(view, path));

    // Simulate any change so the edit flow shows the draft indicator and sets the page to dirty
    currentPage.getController().editFlow.updateDocument(currentContext, Promise.all(requestPromises));
  }

  /**
   * Updates data corresponding to a path.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param propertyPathForUpdate Absolute path to the updated property
   * @returns A promise resolved when the data and its related side effects have been received
   */
  async function applyUpdatesForChange(view, propertyPathForUpdate) {
    const metaModel = view.getModel().getMetaModel();
    const metaContext = metaModel.getMetaContext(propertyPathForUpdate);
    const dataModelObject = MetaModelConverter.getInvolvedDataModelObjects(metaContext);
    const targetContextPath = propertyPathForUpdate.substring(0, propertyPathForUpdate.lastIndexOf("/")); // Remove property name
    const targetContext = findContextForUpdate(view, targetContextPath);
    const parentCollectionPath = targetContextPath.substring(0, targetContextPath.lastIndexOf("("));
    const parentContextPath = parentCollectionPath.substring(0, parentCollectionPath.lastIndexOf("/"));
    const parentContext = parentContextPath ? findContextForUpdate(view, parentContextPath) : undefined;
    if (!targetContext && !parentContext) {
      return; // No context for update
    }

    try {
      const sideEffectsPromises = [];
      const sideEffectsService = CollaborationUtils.getAppComponent(view).getSideEffectsService();
      if (targetContext) {
        // We have a target context, so we can retrieve the updated property
        const targetMetaPath = metaModel.getMetaPath(targetContext.getPath());
        const relativeMetaPathForUpdate = metaModel.getMetaPath(propertyPathForUpdate).replace(targetMetaPath, "").slice(1);
        sideEffectsPromises.push(sideEffectsService.requestSideEffects([relativeMetaPathForUpdate], targetContext, SYNCGROUPID));
      }

      // Get the fieldGroupIds corresponding to pathForUpdate
      const fieldGroupIds = sideEffectsService.computeFieldGroupIds(dataModelObject.targetEntityType.fullyQualifiedName, dataModelObject.targetObject.fullyQualifiedName);

      // Execute the side effects for the fieldGroupIds
      if (fieldGroupIds.length) {
        const pageController = view.getController();
        const sideEffectsMapForFieldGroup = pageController._sideEffects.getSideEffectsMapForFieldGroups(fieldGroupIds, targetContext || parentContext);
        Object.keys(sideEffectsMapForFieldGroup).forEach(sideEffectName => {
          const sideEffect = sideEffectsMapForFieldGroup[sideEffectName];
          sideEffectsPromises.push(pageController._sideEffects.requestSideEffects(sideEffect.sideEffects, sideEffect.context, SYNCGROUPID));
        });
      }
      await Promise.all(sideEffectsPromises);
    } catch (err) {
      Log.error("Failed to update data after change:" + err);
      throw err;
    }
  }

  /**
   * Updates data when a DELETE message has been received.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param message The message received from the websocket
   */
  function updateOnDelete(view, message) {
    const currentPage = getCurrentPage(view);
    const currentContext = currentPage.getBindingContext();
    const currentPath = currentContext.getPath();
    const deletedObjectPaths = message.clientContent.split("|");

    // check if user currently displays a deleted object or one of its descendants
    const deletedPathInUse = deletedObjectPaths.find(deletedPath => currentPath.startsWith(deletedPath));
    if (deletedPathInUse) {
      // any other user deleted the object I'm currently looking at. Inform the user we will navigate to root now
      MessageBox.information(CollaborationUtils.getText("C_COLLABORATIONDRAFT_DELETE", message.userDescription), {
        onClose: () => {
          // We retrieve the deleted context as a keep-alive, and disable its keepalive status,
          // so that it is properly destroyed when refreshing data
          const targetContext = currentContext.getModel().getKeepAliveContext(deletedPathInUse);
          targetContext.setKeepAlive(false);
          const requestPromise = applyUpdatesForCollection(view, deletedObjectPaths[0]);
          currentPage.getController().editFlow.updateDocument(currentPage.getBindingContext(), requestPromise);
          currentPage.getController()._routing.navigateBackFromContext(targetContext);
        }
      });
    } else {
      const requestPromise = applyUpdatesForCollection(view, deletedObjectPaths[0]);
      currentPage.getController().editFlow.updateDocument(currentPage.getBindingContext(), requestPromise);
    }
  }

  /**
   * Updates data when a CREATE message has been received.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param message The message received from the websocket
   */
  function updateOnCreate(view, message) {
    const currentPage = getCurrentPage(view);
    const createdObjectPaths = message.clientContent.split("|");
    const requestPromise = applyUpdatesForCollection(view, createdObjectPaths[0]);
    // Simulate a change so the edit flow shows the draft indicator and sets the page to dirty
    currentPage.getController().editFlow.updateDocument(currentPage.getBindingContext(), requestPromise);
  }

  /**
   * Updates data in a collection.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param pathInCollection A path to an entity in the collection
   */
  async function applyUpdatesForCollection(view, pathInCollection) {
    const appComponent = CollaborationUtils.getAppComponent(view);
    const parentPath = pathInCollection.substring(0, pathInCollection.lastIndexOf("/"));
    const parentContext = findContextForUpdate(view, parentPath);
    if (parentContext) {
      try {
        const sideEffectsPromises = [];
        const metaModel = parentContext.getModel().getMetaModel();
        const metaPathForUpdate = metaModel.getMetaPath(pathInCollection);
        const parentMetaPath = metaModel.getMetaPath(parentContext.getPath());
        const relativePath = metaPathForUpdate.replace(`${parentMetaPath}/`, "");

        // Reload the collection
        const sideEffectsService = appComponent.getSideEffectsService();
        sideEffectsPromises.push(sideEffectsService.requestSideEffects([relativePath], parentContext, SYNCGROUPID));

        // Request the side effects for the collection
        sideEffectsPromises.push(sideEffectsService.requestSideEffectsForNavigationProperty(relativePath, parentContext, SYNCGROUPID));
        await Promise.all(sideEffectsPromises);
      } catch (err) {
        Log.error("Failed to update data after collection update:" + err);
      }
    }
  }

  /**
   * Updates data when a ACTION message has been received.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param message The message received from the websocket
   */
  function updateOnAction(view, message) {
    var _message$clientReques;
    const currentPage = getCurrentPage(view);
    const pathsForAction = message.clientContent.split("|");
    const actionName = message.clientTriggeredActionName || "";
    const requestedProperties = (_message$clientReques = message.clientRequestedProperties) === null || _message$clientReques === void 0 ? void 0 : _message$clientReques.split("|");
    const refreshListBinding = message.clientRefreshListBinding === "true";
    let requestPromises = [];
    if (refreshListBinding) {
      requestPromises.push(applyUpdatesForCollection(view, pathsForAction[0]));
    } else {
      requestPromises = pathsForAction.map(path => requestUpdateForAction(view, path, actionName, requestedProperties));
    }

    // Simulate any change so the edit flow shows the draft indicator and sets the page to dirty
    currentPage.getController().editFlow.updateDocument(currentPage.getBindingContext(), Promise.all(requestPromises));
  }

  /**
   * Updates side-effects data when an action has been triggered on a context.
   *
   * @param view The view that was used initially when connecting the websocket
   * @param pathForAction Path of the context to apply the action to
   * @param actionName Name of the action
   * @param requestedProperties
   * @returns Promise resolved when the side-effects data has been loaded
   */
  async function requestUpdateForAction(view, pathForAction, actionName, requestedProperties) {
    const targetContext = findContextForUpdate(view, pathForAction);
    if (!targetContext) {
      return;
    }
    const appComponent = CollaborationUtils.getAppComponent(view);
    const sideEffectService = appComponent.getSideEffectsService();
    const sideEffectsFromAction = sideEffectService.getODataActionSideEffects(actionName, targetContext);
    const sideEffectPromises = [];
    if (sideEffectsFromAction) {
      var _sideEffectsFromActio;
      if ((_sideEffectsFromActio = sideEffectsFromAction.pathExpressions) !== null && _sideEffectsFromActio !== void 0 && _sideEffectsFromActio.length) {
        sideEffectPromises.push(sideEffectService.requestSideEffects(sideEffectsFromAction.pathExpressions, targetContext, SYNCGROUPID));
      }
    }
    if (requestedProperties && requestedProperties.length > 0) {
      //clean-up of the properties to request list:
      const metaModel = view.getModel().getMetaModel();
      const metaPathForAction = calculateMetaPath(view, pathForAction);
      const dataModelPath = MetaModelConverter.getInvolvedDataModelObjects(metaModel.getContext(metaPathForAction));
      const propertiesToRequest = dataModelPath.targetEntityType.entityProperties.map(property => {
        return property.name;
      }).filter(prop => requestedProperties.includes(prop));
      if (propertiesToRequest.length > 0) {
        sideEffectPromises.push(sideEffectService.requestSideEffects(propertiesToRequest, targetContext, SYNCGROUPID));
      }
    }
    await Promise.all(sideEffectPromises);
  }

  /**
   * Finds a context to apply an update message (CHANGE, CREATE, DELETE or ACTION).
   *
   * @param view  The view that was used initially when connecting the websocket
   * @param path The path of the context to be found (shall point to an entity, not a property)
   * @returns A context if it could be found
   */
  function findContextForUpdate(view, path) {
    if (!path) {
      return undefined;
    }
    // Find all potential paths
    const targetPaths = [];
    while (!path.endsWith(")")) {
      targetPaths.unshift(path);
      path = path.substring(0, path.lastIndexOf("/"));
    }
    targetPaths.unshift(path);
    const parentCollectionPath = path.substring(0, path.lastIndexOf("(")); // Remove the last key

    let targetContext;
    let currentContext = getCurrentPage(view).getBindingContext();
    while (currentContext && !targetContext) {
      var _currentContext$getBi;
      if (targetPaths.indexOf(currentContext.getPath()) >= 0) {
        targetContext = currentContext;
      }
      currentContext = (_currentContext$getBi = currentContext.getBinding()) === null || _currentContext$getBi === void 0 ? void 0 : _currentContext$getBi.getContext();
    }
    if (targetContext) {
      // Found !
      return targetContext;
    }

    // Try to find the target context in a listBinding
    const model = getCurrentPage(view).getBindingContext().getModel();
    const parentListBinding = model.getAllBindings().find(binding => {
      const bindingPath = binding.isRelative() ? binding.getResolvedPath() : binding.getPath();
      return binding.isA("sap.ui.model.odata.v4.ODataListBinding") && bindingPath === parentCollectionPath;
    });
    // We've found a list binding that could contain the target context --> look for it
    targetContext = parentListBinding === null || parentListBinding === void 0 ? void 0 : parentListBinding.getAllCurrentContexts().find(context => {
      return targetPaths.indexOf(context.getPath()) >= 0;
    });
    return targetContext;
  }
  function navigate(path, view) {
    // TODO: routing.navigate doesn't consider semantic bookmarking
    const currentPage = getCurrentPage(view);
    const targetContext = view.getModel().bindContext(path).getBoundContext();
    currentPage.getController().routing.navigate(targetContext);
  }
  function getCurrentPage(view) {
    const appComponent = CollaborationUtils.getAppComponent(view);
    return CommonUtils.getCurrentPageView(appComponent);
  }

  /**
   * Calculates the metapath from one or more data path(s).
   *
   * @param view The current view
   * @param path One ore more data path(s), in case of multiple paths separated by '|'
   * @returns The calculated metaPath
   */
  function calculateMetaPath(view, path) {
    let metaPath = "";
    if (path) {
      // in case more than one path is sent all of them have to use the same metapath therefore we just consider the first one
      const dataPath = path.split("|")[0];
      metaPath = view.getModel().getMetaModel().getMetaPath(dataPath);
    }
    return metaPath;
  }
  return {
    connect: connect,
    disconnect: disconnect,
    isConnected: isConnected,
    isCollaborationEnabled: isCollaborationEnabled,
    send: send
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/ActivitySync", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/collaboration/ActivityBase","sap/fe/core/controllerextensions/collaboration/CollaborationCommon","sap/fe/core/converters/MetaModelConverter","sap/m/MessageBox"],function(t,e,n,o,i,s){"use strict";var r={};var c=o.getActivityKeyFromPath;var a=o.CollaborationUtils;var l=o.Activity;var d=n.isCollaborationConnected;var g=n.initializeCollaboration;var f=n.endCollaboration;var u=n.broadcastCollaborationMessage;const p="/collaboration/myActivity";const C="/collaboration/activeUsers";const v="/collaboration/activities";const h="$auto.sync";const y=function(t){const e=t.getModel("internal");return d(e)};r.isConnected=y;const M=function(t,e,n,o,i,s){if(y(t)){const r=t.getModel("internal");const c=Array.isArray(n)?n.join("|"):n;const a=s===null||s===void 0?void 0:s.join("|");const d=r.getProperty(p);if(e===l.LiveChange){if(d===c){return}else{r.setProperty(p,c)}}else{if(e===l.Undo&&d===null){return}r.setProperty(p,null)}u(e,c,r,o,i,a)}};r.send=M;const P=function(t){return t.getModel().getMetaModel().getObject("/@com.sap.vocabularies.Common.v1.WebSocketBaseURL")};const b=function(t){const e=(t===null||t===void 0?void 0:t.getBindingContext)&&t.getBindingContext();return!!(e&&P(e))};r.isCollaborationEnabled=b;const m=async function(t){const e=t.getModel("internal");const n=a.getMe(t);if(!n){return}const o=t.getBindingContext();const i=P(o);const s=o.getModel().getServiceUrl();if(!i){return}const r=await o.requestProperty("DraftAdministrativeData/DraftUUID");if(!r){return}g(n,i,r,s,e,e=>{x(e,t)});e.setProperty(p,null)};r.connect=m;const A=function(t){const e=t.getModel("internal");f(e)};r.disconnect=A;function x(t,e){var n;const o=e.getModel("internal");let i=o.getProperty(C);let s;let r;const d=R(e,t.clientContent);t.userAction=t.userAction||t.clientAction;const g={id:t.userID,name:t.userDescription,initials:a.formatInitials(t.userDescription),color:a.getUserColor(t.userID,i,[])};let f=g;switch(t.userAction){case l.Join:case l.JoinEcho:if(i.findIndex(t=>t.id===g.id)===-1){i.unshift(g);o.setProperty(C,i)}if(t.userAction===l.Join){u(l.JoinEcho,o.getProperty(p),o)}if(t.userAction===l.JoinEcho){if(t.clientContent){t.userAction=l.LiveChange;x(t,e)}}break;case l.Leave:i=i.filter(t=>t.id!==g.id||t.me);o.setProperty(C,i);const h=o.getProperty(v)||{};const y=function(t){if(Array.isArray(t)){return t.filter(t=>t.id!==g.id)}else{for(const e in t){t[e]=y(t[e])}return t}};y(h);o.setProperty(v,h);break;case l.Change:D(e,t);break;case l.Create:I(e,t);break;case l.Delete:O(e,t);break;case l.Activate:E(e,t.clientContent,a.getText("C_COLLABORATIONDRAFT_ACTIVATE",g.name));break;case l.Discard:E(e,t.clientContent,a.getText("C_COLLABORATIONDRAFT_DISCARD",g.name));break;case l.Action:k(e,t);break;case l.LiveChange:f=g;f.key=c(t.clientContent);let M="";const P=d.split("/");for(let t=1;t<P.length-1;t++){M+=`/${P[t]}`;if(!o.getProperty(v+M)){o.setProperty(v+M,{})}}s=o.getProperty(v+d);s=(n=s)!==null&&n!==void 0&&n.slice?s.slice():[];s.push(f);o.setProperty(v+d,s);break;case l.Undo:s=o.getProperty(v+d);r=c(t.clientContent);o.setProperty(v+d,s.filter(t=>t.key!==r));break}}function E(e,n,o){A(e);s.information(o);e.getBindingContext().getBinding().resetChanges().then(function(){T(n,e)}).catch(function(){t.error("Pending Changes could not be reset - still navigating to active instance");T(n,e)})}function D(t,e){const n=e.clientContent.split("|");const o=t.getModel().getMetaModel();const i=t.getModel("internal");n.forEach(t=>{var e;const n=o.getMetaPath(t);const s=c(t);let r=i.getProperty(v+n)||[];r=((e=r)===null||e===void 0?void 0:e.filter)&&r.filter(t=>t.key!==s);if(r){i.setProperty(v+n,r)}});const s=w(t);const r=s.getBindingContext();const a=n.map(e=>B(t,e));s.getController().editFlow.updateDocument(r,Promise.all(a))}async function B(e,n){const o=e.getModel().getMetaModel();const s=o.getMetaContext(n);const r=i.getInvolvedDataModelObjects(s);const c=n.substring(0,n.lastIndexOf("/"));const l=L(e,c);const d=c.substring(0,c.lastIndexOf("("));const g=d.substring(0,d.lastIndexOf("/"));const f=g?L(e,g):undefined;if(!l&&!f){return}try{const t=[];const i=a.getAppComponent(e).getSideEffectsService();if(l){const e=o.getMetaPath(l.getPath());const s=o.getMetaPath(n).replace(e,"").slice(1);t.push(i.requestSideEffects([s],l,h))}const s=i.computeFieldGroupIds(r.targetEntityType.fullyQualifiedName,r.targetObject.fullyQualifiedName);if(s.length){const n=e.getController();const o=n._sideEffects.getSideEffectsMapForFieldGroups(s,l||f);Object.keys(o).forEach(e=>{const i=o[e];t.push(n._sideEffects.requestSideEffects(i.sideEffects,i.context,h))})}await Promise.all(t)}catch(e){t.error("Failed to update data after change:"+e);throw e}}function O(t,e){const n=w(t);const o=n.getBindingContext();const i=o.getPath();const r=e.clientContent.split("|");const c=r.find(t=>i.startsWith(t));if(c){s.information(a.getText("C_COLLABORATIONDRAFT_DELETE",e.userDescription),{onClose:()=>{const e=o.getModel().getKeepAliveContext(c);e.setKeepAlive(false);const i=S(t,r[0]);n.getController().editFlow.updateDocument(n.getBindingContext(),i);n.getController()._routing.navigateBackFromContext(e)}})}else{const e=S(t,r[0]);n.getController().editFlow.updateDocument(n.getBindingContext(),e)}}function I(t,e){const n=w(t);const o=e.clientContent.split("|");const i=S(t,o[0]);n.getController().editFlow.updateDocument(n.getBindingContext(),i)}async function S(e,n){const o=a.getAppComponent(e);const i=n.substring(0,n.lastIndexOf("/"));const s=L(e,i);if(s){try{const t=[];const e=s.getModel().getMetaModel();const i=e.getMetaPath(n);const r=e.getMetaPath(s.getPath());const c=i.replace(`${r}/`,"");const a=o.getSideEffectsService();t.push(a.requestSideEffects([c],s,h));t.push(a.requestSideEffectsForNavigationProperty(c,s,h));await Promise.all(t)}catch(e){t.error("Failed to update data after collection update:"+e)}}}function k(t,e){var n;const o=w(t);const i=e.clientContent.split("|");const s=e.clientTriggeredActionName||"";const r=(n=e.clientRequestedProperties)===null||n===void 0?void 0:n.split("|");const c=e.clientRefreshListBinding==="true";let a=[];if(c){a.push(S(t,i[0]))}else{a=i.map(e=>F(t,e,s,r))}o.getController().editFlow.updateDocument(o.getBindingContext(),Promise.all(a))}async function F(t,e,n,o){const s=L(t,e);if(!s){return}const r=a.getAppComponent(t);const c=r.getSideEffectsService();const l=c.getODataActionSideEffects(n,s);const d=[];if(l){var g;if((g=l.pathExpressions)!==null&&g!==void 0&&g.length){d.push(c.requestSideEffects(l.pathExpressions,s,h))}}if(o&&o.length>0){const n=t.getModel().getMetaModel();const r=R(t,e);const a=i.getInvolvedDataModelObjects(n.getContext(r));const l=a.targetEntityType.entityProperties.map(t=>t.name).filter(t=>o.includes(t));if(l.length>0){d.push(c.requestSideEffects(l,s,h))}}await Promise.all(d)}function L(t,e){if(!e){return undefined}const n=[];while(!e.endsWith(")")){n.unshift(e);e=e.substring(0,e.lastIndexOf("/"))}n.unshift(e);const o=e.substring(0,e.lastIndexOf("("));let i;let s=w(t).getBindingContext();while(s&&!i){var r;if(n.indexOf(s.getPath())>=0){i=s}s=(r=s.getBinding())===null||r===void 0?void 0:r.getContext()}if(i){return i}const c=w(t).getBindingContext().getModel();const a=c.getAllBindings().find(t=>{const e=t.isRelative()?t.getResolvedPath():t.getPath();return t.isA("sap.ui.model.odata.v4.ODataListBinding")&&e===o});i=a===null||a===void 0?void 0:a.getAllCurrentContexts().find(t=>n.indexOf(t.getPath())>=0);return i}function T(t,e){const n=w(e);const o=e.getModel().bindContext(t).getBoundContext();n.getController().routing.navigate(o)}function w(t){const n=a.getAppComponent(t);return e.getCurrentPageView(n)}function R(t,e){let n="";if(e){const o=e.split("|")[0];n=t.getModel().getMetaModel().getMetaPath(o)}return n}return{connect:m,disconnect:A,isConnected:y,isCollaborationEnabled:b,send:M}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/CollaborationCommon-dbg", ["sap/ui/core/Component", "sap/ui/core/Core"], function (Component, Core) {
  "use strict";

  var _exports = {};
  let UserStatus;
  (function (UserStatus) {
    UserStatus[UserStatus["NotYetInvited"] = 0] = "NotYetInvited";
    UserStatus[UserStatus["NoChangesMade"] = 1] = "NoChangesMade";
    UserStatus[UserStatus["ChangesMade"] = 2] = "ChangesMade";
    UserStatus[UserStatus["CurrentlyEditing"] = 3] = "CurrentlyEditing";
  })(UserStatus || (UserStatus = {}));
  _exports.UserStatus = UserStatus;
  let UserEditingState;
  (function (UserEditingState) {
    UserEditingState["NoChanges"] = "N";
    UserEditingState["InProgress"] = "P";
  })(UserEditingState || (UserEditingState = {}));
  _exports.UserEditingState = UserEditingState;
  let Activity;
  (function (Activity) {
    Activity["Join"] = "JOIN";
    Activity["JoinEcho"] = "JOINECHO";
    Activity["Leave"] = "LEAVE";
    Activity["Change"] = "CHANGE";
    Activity["Create"] = "CREATE";
    Activity["Delete"] = "DELETE";
    Activity["Action"] = "ACTION";
    Activity["LiveChange"] = "LIVECHANGE";
    Activity["Activate"] = "ACTIVATE";
    Activity["Discard"] = "DISCARD";
    Activity["Undo"] = "UNDO";
  })(Activity || (Activity = {}));
  _exports.Activity = Activity;
  function formatInitials(fullName) {
    // remove titles - those are the ones from S/4 to be checked if there are others
    const academicTitles = ["Dr.", "Prof.", "Prof. Dr.", "B.A.", "MBA", "Ph.D."];
    academicTitles.forEach(function (academicTitle) {
      fullName = fullName.replace(academicTitle, "");
    });
    let initials;
    const parts = fullName.trimStart().split(" ");
    if (parts.length > 1) {
      var _parts$shift, _parts$pop;
      initials = ((parts === null || parts === void 0 ? void 0 : (_parts$shift = parts.shift()) === null || _parts$shift === void 0 ? void 0 : _parts$shift.charAt(0)) || "") + ((_parts$pop = parts.pop()) === null || _parts$pop === void 0 ? void 0 : _parts$pop.charAt(0));
    } else {
      initials = fullName.substring(0, 2);
    }
    return initials.toUpperCase();
  }
  function getUserColor(UserID, activeUsers, invitedUsers) {
    // search if user is known
    const user = activeUsers.find(u => u.id === UserID);
    if (user) {
      return user.color;
    } else {
      // search for next free color
      for (let i = 1; i <= 10; i++) {
        if (activeUsers.findIndex(u => u.color === i) === -1 && invitedUsers.findIndex(u => u.color === i) === -1) {
          return i;
        }
      }
      // this seems to be a popular object :) for now just return 10 for all.
      // for invited we should start from 1 again so the colors are different
      return 10;
    }
  }

  // copied from CommonUtils. Due to a cycle dependency I can't use CommonUtils here.
  // That's to be fixed. the discard popover thingy shouldn't be in the common utils at all
  function getAppComponent(oControl) {
    if (oControl.isA("sap.fe.core.AppComponent")) {
      return oControl;
    }
    const oOwner = Component.getOwnerComponentFor(oControl);
    if (!oOwner) {
      return oControl;
    } else {
      return getAppComponent(oOwner);
    }
  }
  function getMe(view) {
    const shellServiceHelper = getAppComponent(view).getShellServices();
    if (!shellServiceHelper || !shellServiceHelper.hasUShell()) {
      throw "No Shell... No User";
    }
    return {
      initials: shellServiceHelper.getUser().getInitials(),
      id: shellServiceHelper.getUser().getId(),
      name: `${shellServiceHelper.getUser().getFullName()} (${getText("C_COLLABORATIONDRAFT_YOU")})`,
      initialName: shellServiceHelper.getUser().getFullName(),
      color: 6,
      //  same color as FLP...
      me: true,
      status: UserStatus.CurrentlyEditing
    };
  }
  function getText(textId) {
    const oResourceModel = Core.getLibraryResourceBundle("sap.fe.core");
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return oResourceModel.getText(textId, args);
  }
  _exports.getText = getText;
  const CollaborationUtils = {
    formatInitials: formatInitials,
    getUserColor: getUserColor,
    getMe: getMe,
    getAppComponent: getAppComponent,
    getText: getText
  };
  _exports.CollaborationUtils = CollaborationUtils;
  function shareObject(bindingContext) {
    let users = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const model = bindingContext.getModel();
    const metaModel = model.getMetaModel();
    const entitySet = metaModel.getMetaPath(bindingContext);
    const shareActionName = metaModel.getObject(`${entitySet}@com.sap.vocabularies.Common.v1.DraftRoot/ShareAction`);
    const shareAction = model.bindContext(`${shareActionName}(...)`, bindingContext);
    shareAction.setParameter("Users", users);
    shareAction.setParameter("ShareAll", true);
    return shareAction.execute();
  }
  _exports.shareObject = shareObject;
  function getActivityKeyFromPath(path) {
    return path.substring(path.lastIndexOf("(") + 1, path.lastIndexOf(")"));
  }
  _exports.getActivityKeyFromPath = getActivityKeyFromPath;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/collaboration/CollaborationCommon", ["sap/ui/core/Component","sap/ui/core/Core"],function(e,t){"use strict";var n={};let r;(function(e){e[e["NotYetInvited"]=0]="NotYetInvited";e[e["NoChangesMade"]=1]="NoChangesMade";e[e["ChangesMade"]=2]="ChangesMade";e[e["CurrentlyEditing"]=3]="CurrentlyEditing"})(r||(r={}));n.UserStatus=r;let o;(function(e){e["NoChanges"]="N";e["InProgress"]="P"})(o||(o={}));n.UserEditingState=o;let i;(function(e){e["Join"]="JOIN";e["JoinEcho"]="JOINECHO";e["Leave"]="LEAVE";e["Change"]="CHANGE";e["Create"]="CREATE";e["Delete"]="DELETE";e["Action"]="ACTION";e["LiveChange"]="LIVECHANGE";e["Activate"]="ACTIVATE";e["Discard"]="DISCARD";e["Undo"]="UNDO"})(i||(i={}));n.Activity=i;function s(e){const t=["Dr.","Prof.","Prof. Dr.","B.A.","MBA","Ph.D."];t.forEach(function(t){e=e.replace(t,"")});let n;const r=e.trimStart().split(" ");if(r.length>1){var o,i;n=((r===null||r===void 0?void 0:(o=r.shift())===null||o===void 0?void 0:o.charAt(0))||"")+((i=r.pop())===null||i===void 0?void 0:i.charAt(0))}else{n=e.substring(0,2)}return n.toUpperCase()}function a(e,t,n){const r=t.find(t=>t.id===e);if(r){return r.color}else{for(let e=1;e<=10;e++){if(t.findIndex(t=>t.color===e)===-1&&n.findIndex(t=>t.color===e)===-1){return e}}return 10}}function l(t){if(t.isA("sap.fe.core.AppComponent")){return t}const n=e.getOwnerComponentFor(t);if(!n){return t}else{return l(n)}}function c(e){const t=l(e).getShellServices();if(!t||!t.hasUShell()){throw"No Shell... No User"}return{initials:t.getUser().getInitials(),id:t.getUser().getId(),name:`${t.getUser().getFullName()} (${u("C_COLLABORATIONDRAFT_YOU")})`,initialName:t.getUser().getFullName(),color:6,me:true,status:r.CurrentlyEditing}}function u(e){const n=t.getLibraryResourceBundle("sap.fe.core");for(var r=arguments.length,o=new Array(r>1?r-1:0),i=1;i<r;i++){o[i-1]=arguments[i]}return n.getText(e,o)}n.getText=u;const g={formatInitials:s,getUserColor:a,getMe:c,getAppComponent:l,getText:u};n.CollaborationUtils=g;function f(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const n=e.getModel();const r=n.getMetaModel();const o=r.getMetaPath(e);const i=r.getObject(`${o}@com.sap.vocabularies.Common.v1.DraftRoot/ShareAction`);const s=n.bindContext(`${i}(...)`,e);s.setParameter("Users",t);s.setParameter("ShareAll",true);return s.execute()}n.shareObject=f;function d(e){return e.substring(e.lastIndexOf("(")+1,e.lastIndexOf(")"))}n.getActivityKeyFromPath=d;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/dialog/OperationsDialog.block-dbg", ["sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/helpers/ClassSupport", "sap/m/Bar", "sap/m/Button", "sap/m/Dialog", "sap/m/Title", "sap/ui/core/Core", "sap/fe/core/jsx-runtime/jsx"], function (BuildingBlockSupport, RuntimeBuildingBlock, ClassSupport, Bar, Button, Dialog, Title, Core, _jsx) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;
  var _exports = {};
  var defineReference = ClassSupport.defineReference;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  var blockAttribute = BuildingBlockSupport.blockAttribute;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const macroResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
  /**
   * Known limitations for the first tryout as mentioned in git 5806442
   *  - functional block dependency
   * 	- questionable parameters will be refactored
   */
  let OperationsDialogBlock = (_dec = defineBuildingBlock({
    name: "OperationsDialog",
    namespace: "sap.fe.core.controllerextensions"
  }), _dec2 = blockAttribute({
    type: "string",
    isPublic: true,
    required: true
  }), _dec3 = blockAttribute({
    type: "string"
  }), _dec4 = blockAttribute({
    type: "object",
    required: true
  }), _dec5 = defineReference(), _dec6 = blockAttribute({
    type: "boolean",
    required: true
  }), _dec7 = blockAttribute({
    type: "function"
  }), _dec8 = blockAttribute({
    type: "object",
    required: true
  }), _dec9 = blockAttribute({
    type: "string",
    required: true
  }), _dec10 = blockAttribute({
    type: "string",
    required: true
  }), _dec11 = blockAttribute({
    type: "string",
    required: true
  }), _dec12 = blockAttribute({
    type: "object",
    required: true
  }), _dec13 = blockAttribute({
    type: "object"
  }), _dec14 = blockAttribute({
    type: "object"
  }), _dec15 = blockAttribute({
    type: "object",
    required: true
  }), _dec16 = blockAttribute({
    type: "boolean"
  }), _dec17 = blockAttribute({
    type: "function"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(OperationsDialogBlock, _RuntimeBuildingBlock);
    function OperationsDialogBlock(props) {
      var _this;
      _this = _RuntimeBuildingBlock.call(this, props) || this;
      _initializerDefineProperty(_this, "id", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "title", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "messageObject", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "operationsDialog", _descriptor4, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isMultiContext412", _descriptor5, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "resolve", _descriptor6, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "model", _descriptor7, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "groupId", _descriptor8, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "actionName", _descriptor9, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "cancelButtonTxt", _descriptor10, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "strictHandlingPromises", _descriptor11, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "strictHandlingUtilities", _descriptor12, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "messageHandler", _descriptor13, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "messageDialogModel", _descriptor14, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "isGrouped", _descriptor15, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showMessageInfo", _descriptor16, _assertThisInitialized(_this));
      return _this;
    }

    /*
     * The 'id' property of the dialog
     */
    _exports = OperationsDialogBlock;
    var _proto = OperationsDialogBlock.prototype;
    _proto.open = function open() {
      var _this$operationsDialo;
      this.getContent();
      (_this$operationsDialo = this.operationsDialog.current) === null || _this$operationsDialo === void 0 ? void 0 : _this$operationsDialo.open();
    };
    _proto.getBeginButton = function getBeginButton() {
      return new Button({
        press: () => {
          if (!(this.isMultiContext412 ?? false)) {
            var _this$resolve;
            (_this$resolve = this.resolve) === null || _this$resolve === void 0 ? void 0 : _this$resolve.call(this, true);
            this.model.submitBatch(this.groupId);
          } else {
            var _this$strictHandlingU;
            this.strictHandlingPromises.forEach(strictHandlingPromise => {
              strictHandlingPromise.resolve(true);
              this.model.submitBatch(strictHandlingPromise.groupId);
              if (strictHandlingPromise.requestSideEffects) {
                strictHandlingPromise.requestSideEffects();
              }
            });
            const strictHandlingFails = (_this$strictHandlingU = this.strictHandlingUtilities) === null || _this$strictHandlingU === void 0 ? void 0 : _this$strictHandlingU.strictHandlingTransitionFails;
            if (strictHandlingFails && strictHandlingFails.length > 0) {
              var _this$messageHandler;
              (_this$messageHandler = this.messageHandler) === null || _this$messageHandler === void 0 ? void 0 : _this$messageHandler.removeTransitionMessages();
            }
            if (this.strictHandlingUtilities) {
              this.strictHandlingUtilities.strictHandlingWarningMessages = [];
            }
          }
          if (this.strictHandlingUtilities) {
            this.strictHandlingUtilities.is412Executed = true;
          }
          this.messageDialogModel.setData({});
          this.close();
        },
        type: "Emphasized",
        text: this.actionName
      });
    };
    _proto.close = function close() {
      var _this$operationsDialo2;
      (_this$operationsDialo2 = this.operationsDialog.current) === null || _this$operationsDialo2 === void 0 ? void 0 : _this$operationsDialo2.close();
    };
    _proto.getTitle = function getTitle() {
      const sTitle = macroResourceBundle.getText("M_WARNINGS");
      return new Title({
        text: sTitle
      });
    };
    _proto.getEndButton = function getEndButton() {
      return new Button({
        press: () => {
          if (this.strictHandlingUtilities) {
            this.strictHandlingUtilities.strictHandlingWarningMessages = [];
            this.strictHandlingUtilities.is412Executed = false;
          }
          if (!(this.isMultiContext412 ?? false)) {
            this.resolve(false);
          } else {
            this.strictHandlingPromises.forEach(function (strictHandlingPromise) {
              strictHandlingPromise.resolve(false);
            });
          }
          this.messageDialogModel.setData({});
          this.close();
          if (this.isGrouped ?? false) {
            this.showMessageInfo();
          }
        },
        text: this.cancelButtonTxt
      });
    }

    /**
     * The building block render function.
     *
     * @returns An XML-based string with the definition of the field control
     */;
    _proto.getContent = function getContent() {
      return _jsx(Dialog, {
        id: this.id,
        ref: this.operationsDialog,
        resizable: true,
        content: this.messageObject.oMessageView,
        state: "Warning",
        customHeader: new Bar({
          contentLeft: [this.messageObject.oBackButton],
          contentMiddle: [this.getTitle()]
        }),
        contentHeight: "50%",
        contentWidth: "50%",
        verticalScrolling: false,
        beginButton: this.getBeginButton(),
        endButton: this.getEndButton()
      });
    };
    return OperationsDialogBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "id", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "title", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "Dialog Standard Title";
    }
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "messageObject", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "operationsDialog", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isMultiContext412", [_dec6], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "resolve", [_dec7], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "model", [_dec8], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "groupId", [_dec9], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "actionName", [_dec10], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "cancelButtonTxt", [_dec11], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "strictHandlingPromises", [_dec12], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "strictHandlingUtilities", [_dec13], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, "messageHandler", [_dec14], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, "messageDialogModel", [_dec15], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor15 = _applyDecoratedDescriptor(_class2.prototype, "isGrouped", [_dec16], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor16 = _applyDecoratedDescriptor(_class2.prototype, "showMessageInfo", [_dec17], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = OperationsDialogBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/dialog/OperationsDialog.block", ["sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/helpers/ClassSupport","sap/m/Bar","sap/m/Button","sap/m/Dialog","sap/m/Title","sap/ui/core/Core","sap/fe/core/jsx-runtime/jsx"],function(e,t,i,r,n,l,o,a,s){"use strict";var u,c,p,g,d,f,b,h,m,y,v,w,z,B,H,j,M,x,D,O,E,q,P,T,U,k,C,I,S,N,R,W,_,G,A;var L={};var F=i.defineReference;var V=e.defineBuildingBlock;var J=e.blockAttribute;function K(e,t,i,r){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function Q(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function X(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;Y(e,t)}function Y(e,t){Y=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return Y(e,t)}function Z(e,t,i,r,n){var l={};Object.keys(r).forEach(function(e){l[e]=r[e]});l.enumerable=!!l.enumerable;l.configurable=!!l.configurable;if("value"in l||l.initializer){l.writable=true}l=i.slice().reverse().reduce(function(i,r){return r(e,t,i)||i},l);if(n&&l.initializer!==void 0){l.value=l.initializer?l.initializer.call(n):void 0;l.initializer=undefined}if(l.initializer===void 0){Object.defineProperty(e,t,l);l=null}return l}function $(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const ee=a.getLibraryResourceBundle("sap.fe.macros");let te=(u=V({name:"OperationsDialog",namespace:"sap.fe.core.controllerextensions"}),c=J({type:"string",isPublic:true,required:true}),p=J({type:"string"}),g=J({type:"object",required:true}),d=F(),f=J({type:"boolean",required:true}),b=J({type:"function"}),h=J({type:"object",required:true}),m=J({type:"string",required:true}),y=J({type:"string",required:true}),v=J({type:"string",required:true}),w=J({type:"object",required:true}),z=J({type:"object"}),B=J({type:"object"}),H=J({type:"object",required:true}),j=J({type:"boolean"}),M=J({type:"function"}),u(x=(D=function(e){X(t,e);function t(t){var i;i=e.call(this,t)||this;K(i,"id",O,Q(i));K(i,"title",E,Q(i));K(i,"messageObject",q,Q(i));K(i,"operationsDialog",P,Q(i));K(i,"isMultiContext412",T,Q(i));K(i,"resolve",U,Q(i));K(i,"model",k,Q(i));K(i,"groupId",C,Q(i));K(i,"actionName",I,Q(i));K(i,"cancelButtonTxt",S,Q(i));K(i,"strictHandlingPromises",N,Q(i));K(i,"strictHandlingUtilities",R,Q(i));K(i,"messageHandler",W,Q(i));K(i,"messageDialogModel",_,Q(i));K(i,"isGrouped",G,Q(i));K(i,"showMessageInfo",A,Q(i));return i}L=t;var i=t.prototype;i.open=function e(){var t;this.getContent();(t=this.operationsDialog.current)===null||t===void 0?void 0:t.open()};i.getBeginButton=function e(){return new n({press:()=>{if(!(this.isMultiContext412??false)){var e;(e=this.resolve)===null||e===void 0?void 0:e.call(this,true);this.model.submitBatch(this.groupId)}else{var t;this.strictHandlingPromises.forEach(e=>{e.resolve(true);this.model.submitBatch(e.groupId);if(e.requestSideEffects){e.requestSideEffects()}});const e=(t=this.strictHandlingUtilities)===null||t===void 0?void 0:t.strictHandlingTransitionFails;if(e&&e.length>0){var i;(i=this.messageHandler)===null||i===void 0?void 0:i.removeTransitionMessages()}if(this.strictHandlingUtilities){this.strictHandlingUtilities.strictHandlingWarningMessages=[]}}if(this.strictHandlingUtilities){this.strictHandlingUtilities.is412Executed=true}this.messageDialogModel.setData({});this.close()},type:"Emphasized",text:this.actionName})};i.close=function e(){var t;(t=this.operationsDialog.current)===null||t===void 0?void 0:t.close()};i.getTitle=function e(){const t=ee.getText("M_WARNINGS");return new o({text:t})};i.getEndButton=function e(){return new n({press:()=>{if(this.strictHandlingUtilities){this.strictHandlingUtilities.strictHandlingWarningMessages=[];this.strictHandlingUtilities.is412Executed=false}if(!(this.isMultiContext412??false)){this.resolve(false)}else{this.strictHandlingPromises.forEach(function(e){e.resolve(false)})}this.messageDialogModel.setData({});this.close();if(this.isGrouped??false){this.showMessageInfo()}},text:this.cancelButtonTxt})};i.getContent=function e(){return s(l,{id:this.id,ref:this.operationsDialog,resizable:true,content:this.messageObject.oMessageView,state:"Warning",customHeader:new r({contentLeft:[this.messageObject.oBackButton],contentMiddle:[this.getTitle()]}),contentHeight:"50%",contentWidth:"50%",verticalScrolling:false,beginButton:this.getBeginButton(),endButton:this.getEndButton()})};return t}(t),O=Z(D.prototype,"id",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),E=Z(D.prototype,"title",[p],{configurable:true,enumerable:true,writable:true,initializer:function(){return"Dialog Standard Title"}}),q=Z(D.prototype,"messageObject",[g],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),P=Z(D.prototype,"operationsDialog",[d],{configurable:true,enumerable:true,writable:true,initializer:null}),T=Z(D.prototype,"isMultiContext412",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),U=Z(D.prototype,"resolve",[b],{configurable:true,enumerable:true,writable:true,initializer:null}),k=Z(D.prototype,"model",[h],{configurable:true,enumerable:true,writable:true,initializer:null}),C=Z(D.prototype,"groupId",[m],{configurable:true,enumerable:true,writable:true,initializer:null}),I=Z(D.prototype,"actionName",[y],{configurable:true,enumerable:true,writable:true,initializer:null}),S=Z(D.prototype,"cancelButtonTxt",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),N=Z(D.prototype,"strictHandlingPromises",[w],{configurable:true,enumerable:true,writable:true,initializer:null}),R=Z(D.prototype,"strictHandlingUtilities",[z],{configurable:true,enumerable:true,writable:true,initializer:null}),W=Z(D.prototype,"messageHandler",[B],{configurable:true,enumerable:true,writable:true,initializer:null}),_=Z(D.prototype,"messageDialogModel",[H],{configurable:true,enumerable:true,writable:true,initializer:null}),G=Z(D.prototype,"isGrouped",[j],{configurable:true,enumerable:true,writable:true,initializer:null}),A=Z(D.prototype,"showMessageInfo",[M],{configurable:true,enumerable:true,writable:true,initializer:null}),D))||x);L=te;return L},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/NotApplicableContextDialog-dbg", ["sap/fe/core/templating/EntityTypeHelper", "sap/m/Button", "sap/m/CustomListItem", "sap/m/Dialog", "sap/m/HBox", "sap/m/List", "sap/m/Text", "sap/m/VBox", "sap/fe/core/jsx-runtime/jsx", "sap/fe/core/jsx-runtime/Fragment", "sap/fe/core/jsx-runtime/jsxs"], function (EntityTypeHelper, Button, CustomListItem, Dialog, HBox, List, Text, VBox, _jsx, _Fragment, _jsxs) {
  "use strict";

  var _exports = {};
  var getTitleExpression = EntityTypeHelper.getTitleExpression;
  /**
   * Display a dialog to inform the user that some contexts are not applicable for the action.
   * This is not the target Ux but just keeping the current behavior
   */
  let NotApplicableContextDialog = /*#__PURE__*/function () {
    function NotApplicableContextDialog(props) {
      this.totalContextCount = 0;
      this.title = props.title;
      this.resourceModel = props.resourceModel;
      this.entityType = props.entityType;
      this.notApplicableContexts = props.notApplicableContexts;
      this._shouldContinue = false;
      this._dialog = this.createDialog();
      this._processingPromise = new Promise(resolve => {
        this._fnResolve = resolve;
      });
    }
    _exports = NotApplicableContextDialog;
    var _proto = NotApplicableContextDialog.prototype;
    _proto.onAfterClose = function onAfterClose() {
      this._fnResolve(this._shouldContinue);
      this._dialog.destroy();
    };
    _proto.onContinue = function onContinue() {
      this._shouldContinue = true;
      this._dialog.close();
    };
    _proto.open = async function open(owner) {
      owner.addDependent(this._dialog);
      this._dialog.open();
      return this._processingPromise;
    };
    _proto.getDialog = function getDialog() {
      return this._dialog;
    };
    _proto.createDialog = function createDialog() {
      var _this$entityType$anno, _this$entityType$anno2;
      return _jsx(Dialog, {
        state: "Warning",
        showHeader: true,
        contentWidth: "20rem",
        resizable: true,
        verticalScrolling: true,
        horizontalScrolling: true,
        class: "sapUiContentPadding",
        title: this.title,
        afterClose: this.onAfterClose.bind(this),
        children: {
          beginButton: _jsx(Button, {
            text: this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_CONTINUE_ANYWAY"),
            press: this.onContinue.bind(this),
            type: "Emphasized"
          }),
          endButton: _jsx(Button, {
            text: this.resourceModel.getText("C_COMMON_SAPFE_CLOSE"),
            press: () => this._dialog.close()
          }),
          content: _jsxs(_Fragment, {
            children: [_jsx(VBox, {
              children: _jsx(Text, {
                text: this.notApplicableContexts.length === 1 ? this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_BOUND_ACTION") : this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_BOUND_ACTION_PLURAL", [this.notApplicableContexts.length]),
                class: "sapUiTinyMarginBegin sapUiTinyMarginTopBottom"
              })
            }), _jsx(List, {
              headerText: (_this$entityType$anno = this.entityType.annotations.UI) === null || _this$entityType$anno === void 0 ? void 0 : (_this$entityType$anno2 = _this$entityType$anno.HeaderInfo) === null || _this$entityType$anno2 === void 0 ? void 0 : _this$entityType$anno2.TypeNamePlural,
              showSeparators: "None",
              children: {
                items: this.notApplicableContexts.map(notApplicableContext => {
                  // Either show the HeaderInfoName or the Semantic Key property
                  const titleExpression = getTitleExpression(this.entityType);
                  const customListItem = _jsx(CustomListItem, {
                    children: _jsx(HBox, {
                      justifyContent: "Start",
                      children: _jsx(Text, {
                        text: titleExpression,
                        class: "sapUiTinyMarginBegin sapUiTinyMarginTopBottom"
                      })
                    })
                  });
                  customListItem.setBindingContext(notApplicableContext);
                  return customListItem;
                })
              }
            })]
          })
        }
      });
    };
    return NotApplicableContextDialog;
  }();
  _exports = NotApplicableContextDialog;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/NotApplicableContextDialog", ["sap/fe/core/templating/EntityTypeHelper","sap/m/Button","sap/m/CustomListItem","sap/m/Dialog","sap/m/HBox","sap/m/List","sap/m/Text","sap/m/VBox","sap/fe/core/jsx-runtime/jsx","sap/fe/core/jsx-runtime/Fragment","sap/fe/core/jsx-runtime/jsxs"],function(t,e,i,n,s,o,r,a,l,h,p){"use strict";var c={};var u=t.getTitleExpression;let d=function(){function t(t){this.totalContextCount=0;this.title=t.title;this.resourceModel=t.resourceModel;this.entityType=t.entityType;this.notApplicableContexts=t.notApplicableContexts;this._shouldContinue=false;this._dialog=this.createDialog();this._processingPromise=new Promise(t=>{this._fnResolve=t})}c=t;var d=t.prototype;d.onAfterClose=function t(){this._fnResolve(this._shouldContinue);this._dialog.destroy()};d.onContinue=function t(){this._shouldContinue=true;this._dialog.close()};d.open=async function t(e){e.addDependent(this._dialog);this._dialog.open();return this._processingPromise};d.getDialog=function t(){return this._dialog};d.createDialog=function t(){var c,d;return l(n,{state:"Warning",showHeader:true,contentWidth:"20rem",resizable:true,verticalScrolling:true,horizontalScrolling:true,class:"sapUiContentPadding",title:this.title,afterClose:this.onAfterClose.bind(this),children:{beginButton:l(e,{text:this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_CONTINUE_ANYWAY"),press:this.onContinue.bind(this),type:"Emphasized"}),endButton:l(e,{text:this.resourceModel.getText("C_COMMON_SAPFE_CLOSE"),press:()=>this._dialog.close()}),content:p(h,{children:[l(a,{children:l(r,{text:this.notApplicableContexts.length===1?this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_BOUND_ACTION"):this.resourceModel.getText("C_ACTION_PARTIAL_FRAGMENT_SAPFE_BOUND_ACTION_PLURAL",[this.notApplicableContexts.length]),class:"sapUiTinyMarginBegin sapUiTinyMarginTopBottom"})}),l(o,{headerText:(c=this.entityType.annotations.UI)===null||c===void 0?void 0:(d=c.HeaderInfo)===null||d===void 0?void 0:d.TypeNamePlural,showSeparators:"None",children:{items:this.notApplicableContexts.map(t=>{const e=u(this.entityType);const n=l(i,{children:l(s,{justifyContent:"Start",children:l(r,{text:e,class:"sapUiTinyMarginBegin sapUiTinyMarginTopBottom"})})});n.setBindingContext(t);return n})}})]})}})};return t}();c=d;return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/TransactionHelper-dbg", ["sap/base/Log", "sap/fe/core/ActionRuntime", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/controllerextensions/editFlow/draft", "sap/fe/core/controllerextensions/editFlow/operations", "sap/fe/core/controllerextensions/editFlow/sticky", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/helpers/DeleteHelper", "sap/fe/core/helpers/FPMHelper", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/library", "sap/m/Button", "sap/m/Dialog", "sap/m/MessageBox", "sap/m/MessageToast", "sap/m/Popover", "sap/m/Text", "sap/m/VBox", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/library", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/model/json/JSONModel", "../../helpers/MetaModelFunction", "../../helpers/ToES6Promise"], function (Log, ActionRuntime, CommonUtils, BusyLocker, draft, operations, sticky, messageHandling, deleteHelper, FPMHelper, ModelHelper, ResourceModelHelper, StableIdHelper, FELibrary, Button, Dialog, MessageBox, MessageToast, Popover, Text, VBox, Core, Fragment, coreLibrary, XMLPreprocessor, XMLTemplateProcessor, JSONModel, MetaModelFunction, toES6Promise) {
  "use strict";

  var getRequiredPropertiesFromInsertRestrictions = MetaModelFunction.getRequiredPropertiesFromInsertRestrictions;
  var getNonComputedVisibleFields = MetaModelFunction.getNonComputedVisibleFields;
  var generate = StableIdHelper.generate;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  const CreationMode = FELibrary.CreationMode;
  const ProgrammingModel = FELibrary.ProgrammingModel;

  //Enums for delete text calculations for delete confirm dialog.
  const DeleteOptionTypes = deleteHelper.DeleteOptionTypes;
  const DeleteDialogContentControl = deleteHelper.DeleteDialogContentControl;

  /* Make sure that the mParameters is not the oEvent */
  function getParameters(mParameters) {
    if (mParameters && mParameters.getMetadata && mParameters.getMetadata().getName() === "sap.ui.base.Event") {
      mParameters = {};
    }
    return mParameters || {};
  }
  let TransactionHelper = /*#__PURE__*/function () {
    function TransactionHelper() {}
    var _proto = TransactionHelper.prototype;
    _proto.busyLock = function busyLock(appComponent, busyPath) {
      BusyLocker.lock(appComponent.getModel("ui"), busyPath);
    };
    _proto.busyUnlock = function busyUnlock(appComponent, busyPath) {
      BusyLocker.unlock(appComponent.getModel("ui"), busyPath);
    };
    _proto.getProgrammingModel = function getProgrammingModel(source) {
      let path;
      if (source.isA("sap.ui.model.odata.v4.Context")) {
        path = source.getPath();
      } else {
        path = (source.isRelative() ? source.getResolvedPath() : source.getPath()) ?? "";
      }
      const metaModel = source.getModel().getMetaModel();
      if (ModelHelper.isDraftSupported(metaModel, path)) {
        return ProgrammingModel.Draft;
      } else if (ModelHelper.isStickySessionSupported(metaModel)) {
        return ProgrammingModel.Sticky;
      } else {
        return ProgrammingModel.NonDraft;
      }
    }

    /**
     * Validates a document.
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param oContext Context of the document to be validated
     * @param [mParameters] Can contain the following attributes:
     * @param [mParameters.data] A map of data that should be validated
     * @param [mParameters.customValidationFunction] A string representing the path to the validation function
     * @param oView Contains the object of the current view
     * @returns Promise resolves with result of the custom validation function
     * @ui5-restricted
     * @final
     */;
    _proto.validateDocument = function validateDocument(oContext, mParameters, oView) {
      const sCustomValidationFunction = mParameters && mParameters.customValidationFunction;
      if (sCustomValidationFunction) {
        const sModule = sCustomValidationFunction.substring(0, sCustomValidationFunction.lastIndexOf(".") || -1).replace(/\./gi, "/"),
          sFunctionName = sCustomValidationFunction.substring(sCustomValidationFunction.lastIndexOf(".") + 1, sCustomValidationFunction.length),
          mData = mParameters.data;
        delete mData["@$ui5.context.isTransient"];
        return FPMHelper.validationWrapper(sModule, sFunctionName, mData, oView, oContext);
      }
      return Promise.resolve([]);
    }

    /**
     * Creates a new document.
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param oMainListBinding OData V4 ListBinding object
     * @param [mInParameters] Optional, can contain the following attributes:
     * @param [mInParameters.data] A map of data that should be sent within the POST
     * @param [mInParameters.busyMode] Global (default), Local, None TODO: to be refactored
     * @param [mInParameters.busyId] ID of the local busy indicator
     * @param [mInParameters.keepTransientContextOnFailed] If set, the context stays in the list if the POST failed and POST will be repeated with the next change
     * @param [mInParameters.inactive] If set, the context is set as inactive for empty rows
     * @param [mInParameters.skipParameterDialog] Skips the action parameter dialog
     * @param appComponent The app component
     * @param messageHandler The message handler extension
     * @param fromCopyPaste True if the creation has been triggered by a paste action
     * @returns Promise resolves with new binding context
     * @ui5-restricted
     * @final
     */;
    _proto.createDocument = async function createDocument(oMainListBinding, mInParameters, appComponent, messageHandler, fromCopyPaste) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const oModel = oMainListBinding.getModel(),
        oMetaModel = oModel.getMetaModel(),
        sMetaPath = oMetaModel.getMetaPath(oMainListBinding.getHeaderContext().getPath()),
        sCreateHash = appComponent.getRouterProxy().getHash(),
        oComponentData = appComponent.getComponentData(),
        oStartupParameters = oComponentData && oComponentData.startupParameters || {},
        sNewAction = !oMainListBinding.isRelative() ? this._getNewAction(oStartupParameters, sCreateHash, oMetaModel, sMetaPath) : undefined;
      const mBindingParameters = {
        $$patchWithoutSideEffects: true
      };
      const sMessagesPath = oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
      let sBusyPath = "/busy";
      let sFunctionName = oMetaModel.getObject(`${sMetaPath}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`) || oMetaModel.getObject(`${ModelHelper.getTargetEntitySet(oMetaModel.getContext(sMetaPath))}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`);
      let bFunctionOnNavProp;
      let oNewDocumentContext;
      if (sFunctionName) {
        if (oMetaModel.getObject(`${sMetaPath}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`) && ModelHelper.getTargetEntitySet(oMetaModel.getContext(sMetaPath)) !== sMetaPath) {
          bFunctionOnNavProp = true;
        } else {
          bFunctionOnNavProp = false;
        }
      }
      if (sMessagesPath) {
        mBindingParameters["$select"] = sMessagesPath;
      }
      const mParameters = getParameters(mInParameters);
      if (!oMainListBinding) {
        throw new Error("Binding required for new document creation");
      }
      const sProgrammingModel = this.getProgrammingModel(oMainListBinding);
      if (sProgrammingModel !== ProgrammingModel.Draft && sProgrammingModel !== ProgrammingModel.Sticky) {
        throw new Error("Create document only allowed for draft or sticky session supported services");
      }
      if (mParameters.busyMode === "Local") {
        sBusyPath = `/busyLocal/${mParameters.busyId}`;
      }
      mParameters.beforeCreateCallBack = fromCopyPaste ? null : mParameters.beforeCreateCallBack;
      this.busyLock(appComponent, sBusyPath);
      const oResourceBundleCore = Core.getLibraryResourceBundle("sap.fe.core");
      let oResult;
      try {
        if (sNewAction) {
          oResult = await this.callAction(sNewAction, {
            contexts: oMainListBinding.getHeaderContext(),
            showActionParameterDialog: true,
            label: this._getSpecificCreateActionDialogLabel(oMetaModel, sMetaPath, sNewAction, oResourceBundleCore),
            bindingParameters: mBindingParameters,
            parentControl: mParameters.parentControl,
            bIsCreateAction: true,
            skipParameterDialog: mParameters.skipParameterDialog
          }, null, appComponent, messageHandler);
        } else {
          const bIsNewPageCreation = mParameters.creationMode !== CreationMode.CreationRow && mParameters.creationMode !== CreationMode.Inline;
          const aNonComputedVisibleKeyFields = bIsNewPageCreation ? getNonComputedVisibleFields(oMetaModel, sMetaPath, appComponent) : [];
          sFunctionName = fromCopyPaste ? null : sFunctionName;
          let sFunctionPath, oFunctionContext;
          if (sFunctionName) {
            //bound to the source entity:
            if (bFunctionOnNavProp) {
              sFunctionPath = oMainListBinding.getContext() && `${oMetaModel.getMetaPath(oMainListBinding.getContext().getPath())}/${sFunctionName}`;
              oFunctionContext = oMainListBinding.getContext();
            } else {
              sFunctionPath = oMainListBinding.getHeaderContext() && `${oMetaModel.getMetaPath(oMainListBinding.getHeaderContext().getPath())}/${sFunctionName}`;
              oFunctionContext = oMainListBinding.getHeaderContext();
            }
          }
          const oFunction = sFunctionPath && oMetaModel.createBindingContext(sFunctionPath);
          try {
            let oData;
            try {
              const oContext = oFunction && oFunction.getObject() && oFunction.getObject()[0].$IsBound ? await operations.callBoundFunction(sFunctionName, oFunctionContext, oModel) : await operations.callFunctionImport(sFunctionName, oModel);
              if (oContext) {
                oData = oContext.getObject();
              }
            } catch (oError) {
              Log.error(`Error while executing the function ${sFunctionName}`, oError);
              throw oError;
            }
            mParameters.data = oData ? Object.assign({}, oData, mParameters.data) : mParameters.data;
            if (mParameters.data) {
              delete mParameters.data["@odata.context"];
            }
            if (aNonComputedVisibleKeyFields.length > 0) {
              oResult = await this._launchDialogWithKeyFields(oMainListBinding, aNonComputedVisibleKeyFields, oModel, mParameters, appComponent, messageHandler);
              oNewDocumentContext = oResult.newContext;
            } else {
              if (mParameters.beforeCreateCallBack) {
                await toES6Promise(mParameters.beforeCreateCallBack({
                  contextPath: oMainListBinding && oMainListBinding.getPath()
                }));
              }
              oNewDocumentContext = oMainListBinding.create(mParameters.data, true, mParameters.createAtEnd, mParameters.inactive);
              if (!mParameters.inactive) {
                oResult = await this.onAfterCreateCompletion(oMainListBinding, oNewDocumentContext, mParameters);
              }
            }
          } catch (oError) {
            Log.error("Error while creating the new document", oError);
            throw oError;
          }
        }
        oNewDocumentContext = oNewDocumentContext || oResult;
        await messageHandler.showMessageDialog({
          control: mParameters.parentControl
        });
        return oNewDocumentContext;
      } catch (error) {
        var _oNewDocumentContext;
        // TODO: currently, the only errors handled here are raised as string - should be changed to Error objects
        await messageHandler.showMessageDialog({
          control: mParameters.parentControl
        });
        if ((error === FELibrary.Constants.ActionExecutionFailed || error === FELibrary.Constants.CancelActionDialog) && (_oNewDocumentContext = oNewDocumentContext) !== null && _oNewDocumentContext !== void 0 && _oNewDocumentContext.isTransient()) {
          // This is a workaround suggested by model as Context.delete results in an error
          // TODO: remove the $direct once model resolves this issue
          // this line shows the expected console error Uncaught (in promise) Error: Request canceled: POST Travel; group: submitLater
          oNewDocumentContext.delete("$direct");
        }
        throw error;
      } finally {
        this.busyUnlock(appComponent, sBusyPath);
      }
    };
    _proto._isDraftEnabled = function _isDraftEnabled(vContexts) {
      const contextForDraftModel = vContexts[0];
      const sProgrammingModel = this.getProgrammingModel(contextForDraftModel);
      return sProgrammingModel === ProgrammingModel.Draft;
    }

    /**
     * Delete one or multiple document(s).
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param contexts Contexts Either one context or an array with contexts to be deleted
     * @param mParameters Optional, can contain the following attributes:
     * @param mParameters.title Title of the object to be deleted
     * @param mParameters.description Description of the object to be deleted
     * @param mParameters.numberOfSelectedContexts Number of objects selected
     * @param mParameters.noDialog To disable the confirmation dialog
     * @param appComponent The appComponent
     * @param resourceModel The resource model to load text resources
     * @param messageHandler The message handler extension
     * @returns A Promise resolved once the documents are deleted
     */;
    _proto.deleteDocument = function deleteDocument(contexts, mParameters, appComponent, resourceModel, messageHandler) {
      const resourceBundleCore = Core.getLibraryResourceBundle("sap.fe.core");
      let aParams;
      // delete document lock
      this.busyLock(appComponent);
      const contextsToDelete = Array.isArray(contexts) ? [...contexts] : [contexts];
      return new Promise((resolve, reject) => {
        try {
          const draftEnabled = this._isDraftEnabled(mParameters.selectedContexts || contextsToDelete);
          const items = [];
          let options = [];

          // items(texts) and options(checkBoxes and single default option) for confirm dialog.
          if (mParameters) {
            if (!mParameters.numberOfSelectedContexts) {
              // non-Table
              if (draftEnabled) {
                // Check if 1 of the drafts is locked by another user
                const lockedContext = contextsToDelete.find(context => {
                  const contextData = context.getObject();
                  return contextData.IsActiveEntity === true && contextData.HasDraftEntity === true && contextData.DraftAdministrativeData && contextData.DraftAdministrativeData.InProcessByUser && !contextData.DraftAdministrativeData.DraftIsCreatedByMe;
                });
                if (lockedContext) {
                  // Show message box with the name of the locking user and return
                  const lockingUserName = lockedContext.getObject().DraftAdministrativeData.InProcessByUser;
                  MessageBox.show(resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_OBJECT_LOCKED", [lockingUserName]), {
                    title: resourceModel.getText("C_COMMON_DELETE"),
                    onClose: reject
                  });
                  return;
                }
              }
              mParameters = getParameters(mParameters);
              let nonTableTxt = "";
              if (mParameters.title) {
                if (mParameters.description) {
                  aParams = [mParameters.title + " ", mParameters.description];
                } else {
                  aParams = [mParameters.title, ""];
                }
                nonTableTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO", aParams, mParameters.entitySetName);
              } else {
                nonTableTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR", undefined, mParameters.entitySetName);
              }
              options.push({
                type: DeleteOptionTypes.deletableContexts,
                contexts: contextsToDelete,
                text: nonTableTxt,
                selected: true,
                control: DeleteDialogContentControl.TEXT
              });
            } else {
              // Table
              let totalDeletable = contextsToDelete.length;
              if (draftEnabled) {
                totalDeletable += mParameters.draftsWithNonDeletableActive.length + mParameters.draftsWithDeletableActive.length + mParameters.unSavedContexts.length;
                deleteHelper.updateDraftOptionsForDeletableTexts(mParameters, contextsToDelete, totalDeletable, resourceModel, items, options);
              } else {
                const nonDeletableText = deleteHelper.getNonDeletableText(mParameters, totalDeletable, resourceModel);
                if (nonDeletableText) {
                  items.push(nonDeletableText);
                }
              }
              const optionsDeletableTexts = deleteHelper.getOptionsForDeletableTexts(mParameters, contextsToDelete, resourceModel);
              options = [...options, ...optionsDeletableTexts];
            }
          }

          // Content of Delete Dialog
          deleteHelper.updateContentForDeleteDialog(options, items);
          const vBox = new VBox({
            items: items
          });
          const sTitle = resourceBundleCore.getText("C_COMMON_DELETE");
          const fnConfirm = async () => {
            this.busyLock(appComponent);
            try {
              await deleteHelper.deleteConfirmHandler(options, mParameters, messageHandler, resourceModel, appComponent, draftEnabled);
              resolve();
            } catch (oError) {
              reject();
            } finally {
              this.busyUnlock(appComponent);
            }
          };
          let dialogConfirmed = false;
          const oDialog = new Dialog({
            title: sTitle,
            state: "Warning",
            content: [vBox],
            ariaLabelledBy: items,
            beginButton: new Button({
              text: resourceBundleCore.getText("C_COMMON_DELETE"),
              type: "Emphasized",
              press: function () {
                messageHandling.removeBoundTransitionMessages();
                dialogConfirmed = true;
                oDialog.close();
                fnConfirm();
              }
            }),
            endButton: new Button({
              text: resourceModel.getText("C_COMMON_DIALOG_CANCEL"),
              press: function () {
                oDialog.close();
              }
            }),
            afterClose: function () {
              oDialog.destroy();
              // if dialog is closed unconfirmed (e.g. via "Cancel" or Escape button), ensure to reject promise
              if (!dialogConfirmed) {
                reject();
              }
            }
          });
          if (mParameters.noDialog) {
            fnConfirm();
          } else {
            oDialog.addStyleClass("sapUiContentPadding");
            oDialog.open();
          }
        } finally {
          // delete document unlock
          this.busyUnlock(appComponent);
        }
      });
    }

    /**
     * Edits a document.
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param oContext Context of the active document
     * @param oView Current view
     * @param appComponent The appComponent
     * @param messageHandler The message handler extension
     * @returns Promise resolves with the new draft context in case of draft programming model
     * @ui5-restricted
     * @final
     */;
    _proto.editDocument = async function editDocument(oContext, oView, appComponent, messageHandler) {
      const sProgrammingModel = this.getProgrammingModel(oContext);
      if (!oContext) {
        throw new Error("Binding context to active document is required");
      }
      if (sProgrammingModel !== ProgrammingModel.Draft && sProgrammingModel !== ProgrammingModel.Sticky) {
        throw new Error("Edit is only allowed for draft or sticky session supported services");
      }
      this.busyLock(appComponent);
      // before triggering the edit action we'll have to remove all bound transition messages
      messageHandler.removeTransitionMessages();
      try {
        const oNewContext = sProgrammingModel === ProgrammingModel.Draft ? await draft.createDraftFromActiveDocument(oContext, appComponent, {
          bPreserveChanges: true,
          oView: oView
        }) : await sticky.editDocumentInStickySession(oContext, appComponent);
        await messageHandler.showMessageDialog();
        return oNewContext;
      } catch (err) {
        await messageHandler.showMessages({
          concurrentEditFlag: true
        });
        throw err;
      } finally {
        this.busyUnlock(appComponent);
      }
    }

    /**
     * Cancel 'edit' mode of a document.
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param oContext Context of the document to be canceled or deleted
     * @param [mInParameters] Optional, can contain the following attributes:
     * @param mInParameters.cancelButton Cancel Button of the discard popover (mandatory for now)
     * @param mInParameters.skipDiscardPopover Optional, supresses the discard popover incase of draft applications while navigating out of OP
     * @param appComponent The appComponent
     * @param resourceModel The model to load text resources
     * @param messageHandler The message handler extension
     * @param isNewObject True if we're trying to cancel a newly created object
     * @param isObjectModified True if the object has been modified by the user
     * @returns Promise resolves with ???
     * @ui5-restricted
     * @final
     */;
    _proto.cancelDocument = async function cancelDocument(oContext, mInParameters, appComponent, resourceModel, messageHandler, isNewObject, isObjectModified) {
      //context must always be passed - mandatory parameter
      if (!oContext) {
        throw new Error("No context exists. Pass a meaningful context");
      }
      this.busyLock(appComponent);
      const mParameters = getParameters(mInParameters);
      const oModel = oContext.getModel();
      const sProgrammingModel = this.getProgrammingModel(oContext);
      if (sProgrammingModel !== ProgrammingModel.Draft && sProgrammingModel !== ProgrammingModel.Sticky) {
        throw new Error("Cancel document only allowed for draft or sticky session supported services");
      }
      try {
        let returnedValue = false;
        if (sProgrammingModel === ProgrammingModel.Draft && !isObjectModified) {
          const draftDataContext = oModel.bindContext(`${oContext.getPath()}/DraftAdministrativeData`).getBoundContext();
          const draftAdminData = await draftDataContext.requestObject();
          if (draftAdminData) {
            isObjectModified = draftAdminData.CreationDateTime !== draftAdminData.LastChangeDateTime;
          }
        }
        if (!mParameters.skipDiscardPopover) {
          await this._confirmDiscard(mParameters.cancelButton, isObjectModified, resourceModel);
        }
        if (oContext.isKeepAlive()) {
          // if the context is kept alive we set it again to detach the onBeforeDestroy callback and handle navigation here
          // the context needs to still be kept alive to be able to reset changes properly
          oContext.setKeepAlive(true, undefined);
        }
        if (mParameters.beforeCancelCallBack) {
          await mParameters.beforeCancelCallBack({
            context: oContext
          });
        }
        if (sProgrammingModel === ProgrammingModel.Draft) {
          if (isNewObject) {
            if (oContext.hasPendingChanges()) {
              oContext.getBinding().resetChanges();
            }
            returnedValue = await draft.deleteDraft(oContext, appComponent);
          } else {
            const oSiblingContext = oModel.bindContext(`${oContext.getPath()}/SiblingEntity`).getBoundContext();
            try {
              const sCanonicalPath = await oSiblingContext.requestCanonicalPath();
              if (oContext.hasPendingChanges()) {
                oContext.getBinding().resetChanges();
              }
              returnedValue = oModel.bindContext(sCanonicalPath).getBoundContext();
            } finally {
              await draft.deleteDraft(oContext, appComponent);
            }
          }
        } else {
          const discardedContext = await sticky.discardDocument(oContext);
          if (discardedContext) {
            if (discardedContext.hasPendingChanges()) {
              discardedContext.getBinding().resetChanges();
            }
            if (!isNewObject) {
              discardedContext.refresh();
              returnedValue = discardedContext;
            }
          }
        }

        // remove existing bound transition messages
        messageHandler.removeTransitionMessages();
        // show unbound messages
        await messageHandler.showMessages();
        return returnedValue;
      } catch (err) {
        await messageHandler.showMessages();
        throw err;
      } finally {
        this.busyUnlock(appComponent);
      }
    }

    /**
     * Saves the document.
     *
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @param context Context of the document to be saved
     * @param appComponent The appComponent
     * @param resourceModel The model to load text resources
     * @param executeSideEffectsOnError True if we should execute side effects in case of an error
     * @param bindingsForSideEffects The listBindings to be used for executing side effects on error
     * @param messageHandler The message handler extension
     * @param isNewObject True if we're trying to cancel a newly created object
     * @returns Promise resolves with ???
     * @ui5-restricted
     * @final
     */;
    _proto.saveDocument = async function saveDocument(context, appComponent, resourceModel, executeSideEffectsOnError, bindingsForSideEffects, messageHandler, isNewObject) {
      const sProgrammingModel = this.getProgrammingModel(context);
      if (sProgrammingModel !== ProgrammingModel.Sticky && sProgrammingModel !== ProgrammingModel.Draft) {
        throw new Error("Save is only allowed for draft or sticky session supported services");
      }
      try {
        this.busyLock(appComponent);
        const oActiveDocument = sProgrammingModel === ProgrammingModel.Draft ? await draft.activateDocument(context, appComponent, {}, messageHandler) : await sticky.activateDocument(context, appComponent);
        const messagesReceived = messageHandling.getMessages().concat(messageHandling.getMessages(true, true)); // get unbound and bound messages present in the model
        if (!(messagesReceived.length === 1 && messagesReceived[0].type === coreLibrary.MessageType.Success)) {
          // show our object creation toast only if it is not coming from backend
          MessageToast.show(isNewObject ? resourceModel.getText("C_TRANSACTION_HELPER_OBJECT_CREATED") : resourceModel.getText("C_TRANSACTION_HELPER_OBJECT_SAVED"));
        }
        return oActiveDocument;
      } catch (err) {
        if (executeSideEffectsOnError && (bindingsForSideEffects === null || bindingsForSideEffects === void 0 ? void 0 : bindingsForSideEffects.length) > 0) {
          /* The sideEffects are executed only for table items in transient state */
          bindingsForSideEffects.forEach(listBinding => {
            if (!CommonUtils.hasTransientContext(listBinding)) {
              appComponent.getSideEffectsService().requestSideEffectsForNavigationProperty(listBinding.getPath(), context);
            }
          });
        }
        await messageHandler.showMessages();
        throw err;
      } finally {
        this.busyUnlock(appComponent);
      }
    }

    /**
     * Calls a bound or unbound action.
     *
     * @function
     * @static
     * @name sap.fe.core.TransactionHelper.callAction
     * @memberof sap.fe.core.TransactionHelper
     * @param sActionName The name of the action to be called
     * @param [mParameters] Contains the following attributes:
     * @param [mParameters.parameterValues] A map of action parameter names and provided values
     * @param [mParameters.skipParameterDialog] Skips the parameter dialog if values are provided for all of them
     * @param [mParameters.contexts] Mandatory for a bound action: Either one context or an array with contexts for which the action is to be called
     * @param [mParameters.model] Mandatory for an unbound action: An instance of an OData V4 model
     * @param [mParameters.invocationGrouping] Mode how actions are to be called: 'ChangeSet' to put all action calls into one changeset, 'Isolated' to put them into separate changesets
     * @param [mParameters.label] A human-readable label for the action
     * @param [mParameters.bGetBoundContext] If specified, the action promise returns the bound context
     * @param oView Contains the object of the current view
     * @param appComponent The appComponent
     * @param messageHandler The message handler extension
     * @returns Promise resolves with an array of response objects (TODO: to be changed)
     * @ui5-restricted
     * @final
     */;
    _proto.callAction = async function callAction(sActionName, mParameters, oView, appComponent, messageHandler) {
      mParameters = getParameters(mParameters);
      let contextToProcess, oModel;
      const mBindingParameters = mParameters.bindingParameters;
      if (!sActionName) {
        throw new Error("Provide name of action to be executed");
      }
      // action imports are not directly obtained from the metaModel by it is present inside the entityContainer
      // and the acions it refers to present outside the entitycontainer, hence to obtain kind of the action
      // split() on its name was required
      const sName = sActionName.split("/")[1];
      sActionName = sName || sActionName;
      contextToProcess = sName ? undefined : mParameters.contexts;
      //checking whether the context is an array with more than 0 length or not an array(create action)
      if (contextToProcess && (Array.isArray(contextToProcess) && contextToProcess.length || !Array.isArray(contextToProcess))) {
        contextToProcess = Array.isArray(contextToProcess) ? contextToProcess[0] : contextToProcess;
        oModel = contextToProcess.getModel();
      }
      if (mParameters.model) {
        oModel = mParameters.model;
      }
      if (!oModel) {
        throw new Error("Pass a context for a bound action or pass the model for an unbound action");
      }
      // get the binding parameters $select and $expand for the side effect on this action
      // also gather additional property paths to be requested such as text associations
      const mSideEffectsParameters = appComponent.getSideEffectsService().getODataActionSideEffects(sActionName, contextToProcess) || {};
      try {
        let oResult;
        if (contextToProcess && oModel) {
          oResult = await operations.callBoundAction(sActionName, mParameters.contexts, oModel, appComponent, {
            parameterValues: mParameters.parameterValues,
            invocationGrouping: mParameters.invocationGrouping,
            label: mParameters.label,
            skipParameterDialog: mParameters.skipParameterDialog,
            mBindingParameters: mBindingParameters,
            entitySetName: mParameters.entitySetName,
            additionalSideEffect: mSideEffectsParameters,
            onSubmitted: () => {
              messageHandler.removeTransitionMessages();
              this.busyLock(appComponent);
            },
            onResponse: () => {
              this.busyUnlock(appComponent);
            },
            parentControl: mParameters.parentControl,
            controlId: mParameters.controlId,
            internalModelContext: mParameters.internalModelContext,
            operationAvailableMap: mParameters.operationAvailableMap,
            bIsCreateAction: mParameters.bIsCreateAction,
            bGetBoundContext: mParameters.bGetBoundContext,
            bObjectPage: mParameters.bObjectPage,
            messageHandler: messageHandler,
            defaultValuesExtensionFunction: mParameters.defaultValuesExtensionFunction,
            selectedItems: mParameters.contexts
          });
        } else {
          oResult = await operations.callActionImport(sActionName, oModel, appComponent, {
            parameterValues: mParameters.parameterValues,
            label: mParameters.label,
            skipParameterDialog: mParameters.skipParameterDialog,
            bindingParameters: mBindingParameters,
            entitySetName: mParameters.entitySetName,
            onSubmitted: () => {
              this.busyLock(appComponent);
            },
            onResponse: () => {
              this.busyUnlock(appComponent);
            },
            parentControl: mParameters.parentControl,
            internalModelContext: mParameters.internalModelContext,
            operationAvailableMap: mParameters.operationAvailableMap,
            messageHandler: messageHandler,
            bObjectPage: mParameters.bObjectPage
          });
        }
        await this._handleActionResponse(messageHandler, mParameters, sActionName);
        return oResult;
      } catch (err) {
        await this._handleActionResponse(messageHandler, mParameters, sActionName);
        throw err;
      }
    }

    /**
     * Handles messages for action call.
     *
     * @function
     * @name sap.fe.core.TransactionHelper#_handleActionResponse
     * @memberof sap.fe.core.TransactionHelper
     * @param messageHandler The message handler extension
     * @param mParameters Parameters to be considered for the action.
     * @param sActionName The name of the action to be called
     * @returns Promise after message dialog is opened if required.
     * @ui5-restricted
     * @final
     */;
    _proto._handleActionResponse = function _handleActionResponse(messageHandler, mParameters, sActionName) {
      const aTransientMessages = messageHandling.getMessages(true, true);
      const actionName = mParameters.label ? mParameters.label : sActionName;
      if (aTransientMessages.length > 0 && mParameters && mParameters.internalModelContext) {
        mParameters.internalModelContext.setProperty("sActionName", mParameters.label ? mParameters.label : sActionName);
      }
      let control;
      if (mParameters.controlId) {
        control = mParameters.parentControl.byId(mParameters.controlId);
      } else {
        control = mParameters.parentControl;
      }
      return messageHandler.showMessages({
        sActionName: actionName,
        control: control
      });
    }

    /**
     * Handles validation errors for the 'Discard' action.
     *
     * @function
     * @name sap.fe.core.TransactionHelper#handleValidationError
     * @memberof sap.fe.core.TransactionHelper
     * @static
     * @ui5-restricted
     * @final
     */;
    _proto.handleValidationError = function handleValidationError() {
      const oMessageManager = Core.getMessageManager(),
        errorToRemove = oMessageManager.getMessageModel().getData().filter(function (error) {
          // only needs to handle validation messages, technical and persistent errors needs not to be checked here.
          if (error.validation) {
            return error;
          }
        });
      oMessageManager.removeMessages(errorToRemove);
    }

    /**
     * Creates a new Popover. Factory method to make unit tests easier.
     *
     * @param settings Initial parameters for the popover
     * @returns A new Popover
     */;
    _proto._createPopover = function _createPopover(settings) {
      return new Popover(settings);
    }

    /**
     * Shows a popover to confirm discard if needed.
     *
     * @static
     * @name sap.fe.core.TransactionHelper._showDiscardPopover
     * @memberof sap.fe.core.TransactionHelper
     * @param cancelButton The control which will open the popover
     * @param isModified True if the object has been modified and a confirmation popover must be shown
     * @param resourceModel The model to load text resources
     * @returns Promise resolves if user confirms discard, rejects if otherwise, rejects if no control passed to open popover
     * @ui5-restricted
     * @final
     */;
    _proto._confirmDiscard = function _confirmDiscard(cancelButton, isModified, resourceModel) {
      // If the data isn't modified, do not show any confirmation popover
      if (!isModified) {
        this.handleValidationError();
        return Promise.resolve();
      }
      cancelButton.setEnabled(false);
      return new Promise((resolve, reject) => {
        const confirmationPopover = this._createPopover({
          showHeader: false,
          placement: "Top"
        });
        confirmationPopover.addStyleClass("sapUiContentPadding");

        // Create the content of the popover
        const title = new Text({
          text: resourceModel.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_MESSAGE")
        });
        const confirmButton = new Button({
          text: resourceModel.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_BUTTON"),
          width: "100%",
          press: () => {
            this.handleValidationError();
            confirmationPopover.data("continueDiscard", true);
            confirmationPopover.close();
          },
          ariaLabelledBy: [title]
        });
        confirmationPopover.addContent(new VBox({
          items: [title, confirmButton]
        }));

        // Attach handler
        confirmationPopover.attachBeforeOpen(() => {
          confirmationPopover.setInitialFocus(confirmButton);
        });
        confirmationPopover.attachAfterClose(() => {
          cancelButton.setEnabled(true);
          if (confirmationPopover.data("continueDiscard")) {
            resolve();
          } else {
            reject();
          }
        });
        confirmationPopover.openBy(cancelButton, false);
      });
    };
    _proto._launchDialogWithKeyFields = function _launchDialogWithKeyFields(oListBinding, mFields, oModel, mParameters, appComponent, messageHandler) {
      let oDialog;
      const oParentControl = mParameters.parentControl;

      // Crate a fake (transient) listBinding and context, just for the binding context of the dialog
      const oTransientListBinding = oModel.bindList(oListBinding.getPath(), oListBinding.getContext(), [], [], {
        $$updateGroupId: "submitLater"
      });
      oTransientListBinding.refreshInternal = function () {
        /* */
      };
      const oTransientContext = oTransientListBinding.create(mParameters.data, true);
      return new Promise(async (resolve, reject) => {
        const sFragmentName = "sap/fe/core/controls/NonComputedVisibleKeyFieldsDialog";
        const oFragment = XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment"),
          resourceModel = getResourceModel(oParentControl),
          oMetaModel = oModel.getMetaModel(),
          aImmutableFields = [],
          sPath = oListBinding.isRelative() ? oListBinding.getResolvedPath() : oListBinding.getPath(),
          oEntitySetContext = oMetaModel.createBindingContext(sPath),
          sMetaPath = oMetaModel.getMetaPath(sPath);
        for (const i in mFields) {
          aImmutableFields.push(oMetaModel.createBindingContext(`${sMetaPath}/${mFields[i]}`));
        }
        const oImmutableCtxModel = new JSONModel(aImmutableFields);
        const oImmutableCtx = oImmutableCtxModel.createBindingContext("/");
        const aRequiredProperties = getRequiredPropertiesFromInsertRestrictions(sMetaPath, oMetaModel);
        const oRequiredPropertyPathsCtxModel = new JSONModel(aRequiredProperties);
        const oRequiredPropertyPathsCtx = oRequiredPropertyPathsCtxModel.createBindingContext("/");
        const oNewFragment = await XMLPreprocessor.process(oFragment, {
          name: sFragmentName
        }, {
          bindingContexts: {
            entitySet: oEntitySetContext,
            fields: oImmutableCtx,
            requiredProperties: oRequiredPropertyPathsCtx
          },
          models: {
            entitySet: oEntitySetContext.getModel(),
            fields: oImmutableCtx.getModel(),
            metaModel: oMetaModel,
            requiredProperties: oRequiredPropertyPathsCtxModel
          }
        });
        let aFormElements = [];
        const mFieldValueMap = {};
        const messageManager = Core.getMessageManager();
        const _removeMessagesForActionParamter = messageControlId => {
          const allMessages = messageManager.getMessageModel().getData();
          // also remove messages assigned to inner controls, but avoid removing messages for different paramters (with name being substring of another parameter name)
          const relevantMessages = allMessages.filter(msg => msg.getControlIds().some(controlId => controlId.includes(messageControlId)));
          messageManager.removeMessages(relevantMessages);
        };
        const oController = {
          /*
          	fired on focus out from field or on selecting a value from the valuehelp.
          	the create button (Continue) is always enabled.
          	liveChange is not fired when value is added from valuehelp.
          	value validation is done for create button.
          */
          handleChange: async event => {
            const fieldId = event.getParameter("id");
            const field = event.getSource();
            const actionParameterInfo = actionParameterInfos.find(actionParameterInfo => actionParameterInfo.field === field);
            _removeMessagesForActionParamter(fieldId);
            actionParameterInfo.validationPromise = event.getParameter("promise");
            try {
              actionParameterInfo.value = await actionParameterInfo.validationPromise;
              actionParameterInfo.hasError = false;
            } catch (error) {
              delete actionParameterInfo.value;
              actionParameterInfo.hasError = true;
            }
          },
          /*
          	fired on key press. the create button the create button (Continue) is always enabled.
          	liveChange is not fired when value is added from valuehelp.
          	value validation is done for create button.
          */
          handleLiveChange: event => {
            const fieldId = event.getParameter("id");
            _removeMessagesForActionParamter(fieldId);
          }
        };
        const oDialogContent = await Fragment.load({
          definition: oNewFragment,
          controller: oController
        });
        let oResult;
        const closeDialog = function () {
          //rejected/resolved the promis returned by _launchDialogWithKeyFields
          //as soon as the dialog is closed. Without waiting for the dialog's
          //animation to finish
          if (oResult.error) {
            reject(oResult.error);
          } else {
            resolve(oResult.response);
          }
          oDialog.close();
        };
        oDialog = new Dialog(generate(["CreateDialog", sMetaPath]), {
          title: resourceModel.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE"),
          content: [oDialogContent],
          beginButton: {
            text: resourceModel.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON"),
            type: "Emphasized",
            press: async _Event => {
              /* Validation of mandatory and value state for action parameters */
              if (!(await ActionRuntime.validateProperties(messageManager, actionParameterInfos, resourceModel))) {
                return;
              }
              BusyLocker.lock(oDialog);
              mParameters.bIsCreateDialog = true;
              try {
                const aValues = await Promise.all(Object.keys(mFieldValueMap).map(async function (sKey) {
                  const oValue = await mFieldValueMap[sKey];
                  const oDialogValue = {};
                  oDialogValue[sKey] = oValue;
                  return oDialogValue;
                }));
                if (mParameters.beforeCreateCallBack) {
                  await toES6Promise(mParameters.beforeCreateCallBack({
                    contextPath: oListBinding && oListBinding.getPath(),
                    createParameters: aValues
                  }));
                }
                const transientData = oTransientContext.getObject();
                const createData = {};
                Object.keys(transientData).forEach(function (sPropertyPath) {
                  const oProperty = oMetaModel.getObject(`${sMetaPath}/${sPropertyPath}`);
                  // ensure navigation properties are not part of the payload, deep create not supported
                  if (oProperty && oProperty.$kind === "NavigationProperty") {
                    return;
                  }
                  createData[sPropertyPath] = transientData[sPropertyPath];
                });
                const oNewDocumentContext = oListBinding.create(createData, true, mParameters.createAtEnd, mParameters.inactive);
                const oPromise = this.onAfterCreateCompletion(oListBinding, oNewDocumentContext, mParameters);
                let oResponse = await oPromise;
                if (!oResponse || oResponse && oResponse.bKeepDialogOpen !== true) {
                  oResponse = oResponse ?? {};
                  oDialog.setBindingContext(null);
                  oResponse.newContext = oNewDocumentContext;
                  oResult = {
                    response: oResponse
                  };
                  closeDialog();
                }
              } catch (oError) {
                // in case of creation failed, dialog should stay open - to achieve the same, nothing has to be done (like in case of success with bKeepDialogOpen)
                if (oError !== FELibrary.Constants.CreationFailed) {
                  // other errors are not expected
                  oResult = {
                    error: oError
                  };
                  closeDialog();
                }
              } finally {
                BusyLocker.unlock(oDialog);
                messageHandler.showMessages();
              }
            }
          },
          endButton: {
            text: resourceModel.getText("C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL"),
            press: function () {
              oResult = {
                error: FELibrary.Constants.CancelActionDialog
              };
              closeDialog();
            }
          },
          afterClose: function () {
            var _oDialog$getBindingCo;
            /* When the dialog is cancelled, messages need to be removed in case the same action should be executed again */
            for (const actionParameterInfo of actionParameterInfos) {
              const fieldId = actionParameterInfo.field.getId();
              _removeMessagesForActionParamter(fieldId);
            }
            // show footer as per UX guidelines when dialog is not open
            (_oDialog$getBindingCo = oDialog.getBindingContext("internal")) === null || _oDialog$getBindingCo === void 0 ? void 0 : _oDialog$getBindingCo.setProperty("isCreateDialogOpen", false);
            oDialog.destroy();
            oTransientListBinding.destroy();
          }
        });
        aFormElements = oDialogContent === null || oDialogContent === void 0 ? void 0 : oDialogContent.getAggregation("form").getAggregation("formContainers")[0].getAggregation("formElements");
        const actionParameterInfos = aFormElements.map(parameterField => {
          const field = parameterField.getFields()[0];
          const isMultiValue = field.isA("sap.ui.mdc.MultiValueField");
          return {
            parameter: parameterField,
            isMultiValue: isMultiValue,
            field: field,
            value: isMultiValue ? field.getItems() : field.getValue(),
            validationPromise: undefined,
            hasError: false
          };
        });
        if (oParentControl && oParentControl.addDependent) {
          // if there is a parent control specified add the dialog as dependent
          oParentControl.addDependent(oDialog);
        }
        oDialog.setBindingContext(oTransientContext);
        try {
          await CommonUtils.setUserDefaults(appComponent, aImmutableFields, oTransientContext, false, mParameters.createAction, mParameters.data);
          // footer must not be visible when the dialog is open as per UX guidelines
          oDialog.getBindingContext("internal").setProperty("isCreateDialogOpen", true);
          oDialog.open();
        } catch (oError) {
          await messageHandler.showMessages();
          throw oError;
        }
      });
    };
    _proto.onAfterCreateCompletion = function onAfterCreateCompletion(oListBinding, oNewDocumentContext, mParameters) {
      let fnResolve;
      const oPromise = new Promise(resolve => {
        fnResolve = resolve;
      });
      const fnCreateCompleted = oEvent => {
        const oContext = oEvent.getParameter("context"),
          bSuccess = oEvent.getParameter("success");
        if (oContext === oNewDocumentContext) {
          oListBinding.detachCreateCompleted(fnCreateCompleted, this);
          fnResolve(bSuccess);
        }
      };
      const fnSafeContextCreated = () => {
        oNewDocumentContext.created().then(undefined, function () {
          Log.trace("transient creation context deleted");
        }).catch(function (contextError) {
          Log.trace("transient creation context deletion error", contextError);
        });
      };
      oListBinding.attachCreateCompleted(fnCreateCompleted, this);
      return oPromise.then(bSuccess => {
        if (!bSuccess) {
          if (!mParameters.keepTransientContextOnFailed) {
            // Cancel the pending POST and delete the context in the listBinding
            fnSafeContextCreated(); // To avoid a 'request cancelled' error in the console
            oListBinding.resetChanges();
            oListBinding.getModel().resetChanges(oListBinding.getUpdateGroupId());
            throw FELibrary.Constants.CreationFailed;
          }
          return {
            bKeepDialogOpen: true
          };
        } else {
          return oNewDocumentContext.created();
        }
      });
    }

    /**
     * Retrieves the name of the NewAction to be executed.
     *
     * @function
     * @static
     * @private
     * @name sap.fe.core.TransactionHelper._getNewAction
     * @memberof sap.fe.core.TransactionHelper
     * @param oStartupParameters Startup parameters of the application
     * @param sCreateHash Hash to be checked for action type
     * @param oMetaModel The MetaModel used to check for NewAction parameter
     * @param sMetaPath The MetaPath
     * @returns The name of the action
     * @ui5-restricted
     * @final
     */;
    _proto._getNewAction = function _getNewAction(oStartupParameters, sCreateHash, oMetaModel, sMetaPath) {
      let sNewAction;
      if (oStartupParameters && oStartupParameters.preferredMode && sCreateHash.toUpperCase().indexOf("I-ACTION=CREATEWITH") > -1) {
        const sPreferredMode = oStartupParameters.preferredMode[0];
        sNewAction = sPreferredMode.toUpperCase().indexOf("CREATEWITH:") > -1 ? sPreferredMode.substr(sPreferredMode.lastIndexOf(":") + 1) : undefined;
      } else if (oStartupParameters && oStartupParameters.preferredMode && sCreateHash.toUpperCase().indexOf("I-ACTION=AUTOCREATEWITH") > -1) {
        const sPreferredMode = oStartupParameters.preferredMode[0];
        sNewAction = sPreferredMode.toUpperCase().indexOf("AUTOCREATEWITH:") > -1 ? sPreferredMode.substr(sPreferredMode.lastIndexOf(":") + 1) : undefined;
      } else {
        sNewAction = oMetaModel && oMetaModel.getObject !== undefined ? oMetaModel.getObject(`${sMetaPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction`) || oMetaModel.getObject(`${sMetaPath}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction`) : undefined;
      }
      return sNewAction;
    }

    /**
     * Retrieves the label for the title of a specific create action dialog, e.g. Create Sales Order from Quotation.
     *
     * The following priority is applied:
     * 1. label of line-item annotation.
     * 2. label annotated in the action.
     * 3. "Create" as a constant from i18n.
     *
     * @function
     * @static
     * @private
     * @name sap.fe.core.TransactionHelper._getSpecificCreateActionDialogLabel
     * @memberof sap.fe.core.TransactionHelper
     * @param oMetaModel The MetaModel used to check for the NewAction parameter
     * @param sMetaPath The MetaPath
     * @param sNewAction Contains the name of the action to be executed
     * @param oResourceBundleCore ResourceBundle to access the default Create label
     * @returns The label for the Create Action Dialog
     * @ui5-restricted
     * @final
     */;
    _proto._getSpecificCreateActionDialogLabel = function _getSpecificCreateActionDialogLabel(oMetaModel, sMetaPath, sNewAction, oResourceBundleCore) {
      const fnGetLabelFromLineItemAnnotation = function () {
        if (oMetaModel && oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.LineItem`)) {
          const iLineItemIndex = oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.LineItem`).findIndex(function (oLineItem) {
            const aLineItemAction = oLineItem.Action ? oLineItem.Action.split("(") : undefined;
            return aLineItemAction ? aLineItemAction[0] === sNewAction : false;
          });
          return iLineItemIndex > -1 ? oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.LineItem`)[iLineItemIndex].Label : undefined;
        } else {
          return undefined;
        }
      };
      return fnGetLabelFromLineItemAnnotation() || oMetaModel && oMetaModel.getObject(`${sMetaPath}/${sNewAction}@com.sap.vocabularies.Common.v1.Label`) || oResourceBundleCore && oResourceBundleCore.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE");
    };
    return TransactionHelper;
  }();
  const singleton = new TransactionHelper();
  return singleton;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/TransactionHelper", ["sap/base/Log","sap/fe/core/ActionRuntime","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/controllerextensions/editFlow/draft","sap/fe/core/controllerextensions/editFlow/operations","sap/fe/core/controllerextensions/editFlow/sticky","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/helpers/DeleteHelper","sap/fe/core/helpers/FPMHelper","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/library","sap/m/Button","sap/m/Dialog","sap/m/MessageBox","sap/m/MessageToast","sap/m/Popover","sap/m/Text","sap/m/VBox","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/library","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/model/json/JSONModel","../../helpers/MetaModelFunction","../../helpers/ToES6Promise"],function(e,t,n,o,a,r,s,i,c,l,d,u,g,f,p,C,h,m,b,y,E,w,A,D,x,M,P,T,v){"use strict";var O=T.getRequiredPropertiesFromInsertRestrictions;var _=T.getNonComputedVisibleFields;var I=g.generate;var S=u.getResourceModel;const N=f.CreationMode;const R=f.ProgrammingModel;const B=c.DeleteOptionTypes;const k=c.DeleteDialogContentControl;function L(e){if(e&&e.getMetadata&&e.getMetadata().getName()==="sap.ui.base.Event"){e={}}return e||{}}let F=function(){function u(){}var g=u.prototype;g.busyLock=function e(t,n){o.lock(t.getModel("ui"),n)};g.busyUnlock=function e(t,n){o.unlock(t.getModel("ui"),n)};g.getProgrammingModel=function e(t){let n;if(t.isA("sap.ui.model.odata.v4.Context")){n=t.getPath()}else{n=(t.isRelative()?t.getResolvedPath():t.getPath())??""}const o=t.getModel().getMetaModel();if(d.isDraftSupported(o,n)){return R.Draft}else if(d.isStickySessionSupported(o)){return R.Sticky}else{return R.NonDraft}};g.validateDocument=function e(t,n,o){const a=n&&n.customValidationFunction;if(a){const e=a.substring(0,a.lastIndexOf(".")||-1).replace(/\./gi,"/"),r=a.substring(a.lastIndexOf(".")+1,a.length),s=n.data;delete s["@$ui5.context.isTransient"];return l.validationWrapper(e,r,s,o,t)}return Promise.resolve([])};g.createDocument=async function t(n,o,a,s,i){const c=n.getModel(),l=c.getMetaModel(),u=l.getMetaPath(n.getHeaderContext().getPath()),g=a.getRouterProxy().getHash(),p=a.getComponentData(),C=p&&p.startupParameters||{},h=!n.isRelative()?this._getNewAction(C,g,l,u):undefined;const m={$$patchWithoutSideEffects:true};const b=l.getObject(`${u}/@com.sap.vocabularies.Common.v1.Messages/$Path`);let y="/busy";let E=l.getObject(`${u}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`)||l.getObject(`${d.getTargetEntitySet(l.getContext(u))}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`);let A;let D;if(E){if(l.getObject(`${u}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`)&&d.getTargetEntitySet(l.getContext(u))!==u){A=true}else{A=false}}if(b){m["$select"]=b}const x=L(o);if(!n){throw new Error("Binding required for new document creation")}const M=this.getProgrammingModel(n);if(M!==R.Draft&&M!==R.Sticky){throw new Error("Create document only allowed for draft or sticky session supported services")}if(x.busyMode==="Local"){y=`/busyLocal/${x.busyId}`}x.beforeCreateCallBack=i?null:x.beforeCreateCallBack;this.busyLock(a,y);const P=w.getLibraryResourceBundle("sap.fe.core");let T;try{if(h){T=await this.callAction(h,{contexts:n.getHeaderContext(),showActionParameterDialog:true,label:this._getSpecificCreateActionDialogLabel(l,u,h,P),bindingParameters:m,parentControl:x.parentControl,bIsCreateAction:true,skipParameterDialog:x.skipParameterDialog},null,a,s)}else{const t=x.creationMode!==N.CreationRow&&x.creationMode!==N.Inline;const o=t?_(l,u,a):[];E=i?null:E;let d,g;if(E){if(A){d=n.getContext()&&`${l.getMetaPath(n.getContext().getPath())}/${E}`;g=n.getContext()}else{d=n.getHeaderContext()&&`${l.getMetaPath(n.getHeaderContext().getPath())}/${E}`;g=n.getHeaderContext()}}const f=d&&l.createBindingContext(d);try{let t;try{const e=f&&f.getObject()&&f.getObject()[0].$IsBound?await r.callBoundFunction(E,g,c):await r.callFunctionImport(E,c);if(e){t=e.getObject()}}catch(t){e.error(`Error while executing the function ${E}`,t);throw t}x.data=t?Object.assign({},t,x.data):x.data;if(x.data){delete x.data["@odata.context"]}if(o.length>0){T=await this._launchDialogWithKeyFields(n,o,c,x,a,s);D=T.newContext}else{if(x.beforeCreateCallBack){await v(x.beforeCreateCallBack({contextPath:n&&n.getPath()}))}D=n.create(x.data,true,x.createAtEnd,x.inactive);if(!x.inactive){T=await this.onAfterCreateCompletion(n,D,x)}}}catch(t){e.error("Error while creating the new document",t);throw t}}D=D||T;await s.showMessageDialog({control:x.parentControl});return D}catch(e){var O;await s.showMessageDialog({control:x.parentControl});if((e===f.Constants.ActionExecutionFailed||e===f.Constants.CancelActionDialog)&&(O=D)!==null&&O!==void 0&&O.isTransient()){D.delete("$direct")}throw e}finally{this.busyUnlock(a,y)}};g._isDraftEnabled=function e(t){const n=t[0];const o=this.getProgrammingModel(n);return o===R.Draft};g.deleteDocument=function e(t,n,o,a,r){const s=w.getLibraryResourceBundle("sap.fe.core");let l;this.busyLock(o);const d=Array.isArray(t)?[...t]:[t];return new Promise((e,t)=>{try{const u=this._isDraftEnabled(n.selectedContexts||d);const g=[];let f=[];if(n){if(!n.numberOfSelectedContexts){if(u){const e=d.find(e=>{const t=e.getObject();return t.IsActiveEntity===true&&t.HasDraftEntity===true&&t.DraftAdministrativeData&&t.DraftAdministrativeData.InProcessByUser&&!t.DraftAdministrativeData.DraftIsCreatedByMe});if(e){const n=e.getObject().DraftAdministrativeData.InProcessByUser;h.show(a.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_OBJECT_LOCKED",[n]),{title:a.getText("C_COMMON_DELETE"),onClose:t});return}}n=L(n);let e="";if(n.title){if(n.description){l=[n.title+" ",n.description]}else{l=[n.title,""]}e=a.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO",l,n.entitySetName)}else{e=a.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR",undefined,n.entitySetName)}f.push({type:B.deletableContexts,contexts:d,text:e,selected:true,control:k.TEXT})}else{let e=d.length;if(u){e+=n.draftsWithNonDeletableActive.length+n.draftsWithDeletableActive.length+n.unSavedContexts.length;c.updateDraftOptionsForDeletableTexts(n,d,e,a,g,f)}else{const t=c.getNonDeletableText(n,e,a);if(t){g.push(t)}}const t=c.getOptionsForDeletableTexts(n,d,a);f=[...f,...t]}}c.updateContentForDeleteDialog(f,g);const m=new E({items:g});const b=s.getText("C_COMMON_DELETE");const y=async()=>{this.busyLock(o);try{await c.deleteConfirmHandler(f,n,r,a,o,u);e()}catch(e){t()}finally{this.busyUnlock(o)}};let w=false;const A=new C({title:b,state:"Warning",content:[m],ariaLabelledBy:g,beginButton:new p({text:s.getText("C_COMMON_DELETE"),type:"Emphasized",press:function(){i.removeBoundTransitionMessages();w=true;A.close();y()}}),endButton:new p({text:a.getText("C_COMMON_DIALOG_CANCEL"),press:function(){A.close()}}),afterClose:function(){A.destroy();if(!w){t()}}});if(n.noDialog){y()}else{A.addStyleClass("sapUiContentPadding");A.open()}}finally{this.busyUnlock(o)}})};g.editDocument=async function e(t,n,o,r){const i=this.getProgrammingModel(t);if(!t){throw new Error("Binding context to active document is required")}if(i!==R.Draft&&i!==R.Sticky){throw new Error("Edit is only allowed for draft or sticky session supported services")}this.busyLock(o);r.removeTransitionMessages();try{const e=i===R.Draft?await a.createDraftFromActiveDocument(t,o,{bPreserveChanges:true,oView:n}):await s.editDocumentInStickySession(t,o);await r.showMessageDialog();return e}catch(e){await r.showMessages({concurrentEditFlag:true});throw e}finally{this.busyUnlock(o)}};g.cancelDocument=async function e(t,n,o,r,i,c,l){if(!t){throw new Error("No context exists. Pass a meaningful context")}this.busyLock(o);const d=L(n);const u=t.getModel();const g=this.getProgrammingModel(t);if(g!==R.Draft&&g!==R.Sticky){throw new Error("Cancel document only allowed for draft or sticky session supported services")}try{let e=false;if(g===R.Draft&&!l){const e=u.bindContext(`${t.getPath()}/DraftAdministrativeData`).getBoundContext();const n=await e.requestObject();if(n){l=n.CreationDateTime!==n.LastChangeDateTime}}if(!d.skipDiscardPopover){await this._confirmDiscard(d.cancelButton,l,r)}if(t.isKeepAlive()){t.setKeepAlive(true,undefined)}if(d.beforeCancelCallBack){await d.beforeCancelCallBack({context:t})}if(g===R.Draft){if(c){if(t.hasPendingChanges()){t.getBinding().resetChanges()}e=await a.deleteDraft(t,o)}else{const n=u.bindContext(`${t.getPath()}/SiblingEntity`).getBoundContext();try{const o=await n.requestCanonicalPath();if(t.hasPendingChanges()){t.getBinding().resetChanges()}e=u.bindContext(o).getBoundContext()}finally{await a.deleteDraft(t,o)}}}else{const n=await s.discardDocument(t);if(n){if(n.hasPendingChanges()){n.getBinding().resetChanges()}if(!c){n.refresh();e=n}}}i.removeTransitionMessages();await i.showMessages();return e}catch(e){await i.showMessages();throw e}finally{this.busyUnlock(o)}};g.saveDocument=async function e(t,o,r,c,l,d,u){const g=this.getProgrammingModel(t);if(g!==R.Sticky&&g!==R.Draft){throw new Error("Save is only allowed for draft or sticky session supported services")}try{this.busyLock(o);const e=g===R.Draft?await a.activateDocument(t,o,{},d):await s.activateDocument(t,o);const n=i.getMessages().concat(i.getMessages(true,true));if(!(n.length===1&&n[0].type===D.MessageType.Success)){m.show(u?r.getText("C_TRANSACTION_HELPER_OBJECT_CREATED"):r.getText("C_TRANSACTION_HELPER_OBJECT_SAVED"))}return e}catch(e){if(c&&(l===null||l===void 0?void 0:l.length)>0){l.forEach(e=>{if(!n.hasTransientContext(e)){o.getSideEffectsService().requestSideEffectsForNavigationProperty(e.getPath(),t)}})}await d.showMessages();throw e}finally{this.busyUnlock(o)}};g.callAction=async function e(t,n,o,a,s){n=L(n);let i,c;const l=n.bindingParameters;if(!t){throw new Error("Provide name of action to be executed")}const d=t.split("/")[1];t=d||t;i=d?undefined:n.contexts;if(i&&(Array.isArray(i)&&i.length||!Array.isArray(i))){i=Array.isArray(i)?i[0]:i;c=i.getModel()}if(n.model){c=n.model}if(!c){throw new Error("Pass a context for a bound action or pass the model for an unbound action")}const u=a.getSideEffectsService().getODataActionSideEffects(t,i)||{};try{let e;if(i&&c){e=await r.callBoundAction(t,n.contexts,c,a,{parameterValues:n.parameterValues,invocationGrouping:n.invocationGrouping,label:n.label,skipParameterDialog:n.skipParameterDialog,mBindingParameters:l,entitySetName:n.entitySetName,additionalSideEffect:u,onSubmitted:()=>{s.removeTransitionMessages();this.busyLock(a)},onResponse:()=>{this.busyUnlock(a)},parentControl:n.parentControl,controlId:n.controlId,internalModelContext:n.internalModelContext,operationAvailableMap:n.operationAvailableMap,bIsCreateAction:n.bIsCreateAction,bGetBoundContext:n.bGetBoundContext,bObjectPage:n.bObjectPage,messageHandler:s,defaultValuesExtensionFunction:n.defaultValuesExtensionFunction,selectedItems:n.contexts})}else{e=await r.callActionImport(t,c,a,{parameterValues:n.parameterValues,label:n.label,skipParameterDialog:n.skipParameterDialog,bindingParameters:l,entitySetName:n.entitySetName,onSubmitted:()=>{this.busyLock(a)},onResponse:()=>{this.busyUnlock(a)},parentControl:n.parentControl,internalModelContext:n.internalModelContext,operationAvailableMap:n.operationAvailableMap,messageHandler:s,bObjectPage:n.bObjectPage})}await this._handleActionResponse(s,n,t);return e}catch(e){await this._handleActionResponse(s,n,t);throw e}};g._handleActionResponse=function e(t,n,o){const a=i.getMessages(true,true);const r=n.label?n.label:o;if(a.length>0&&n&&n.internalModelContext){n.internalModelContext.setProperty("sActionName",n.label?n.label:o)}let s;if(n.controlId){s=n.parentControl.byId(n.controlId)}else{s=n.parentControl}return t.showMessages({sActionName:r,control:s})};g.handleValidationError=function e(){const t=w.getMessageManager(),n=t.getMessageModel().getData().filter(function(e){if(e.validation){return e}});t.removeMessages(n)};g._createPopover=function e(t){return new b(t)};g._confirmDiscard=function e(t,n,o){if(!n){this.handleValidationError();return Promise.resolve()}t.setEnabled(false);return new Promise((e,n)=>{const a=this._createPopover({showHeader:false,placement:"Top"});a.addStyleClass("sapUiContentPadding");const r=new y({text:o.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_MESSAGE")});const s=new p({text:o.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_BUTTON"),width:"100%",press:()=>{this.handleValidationError();a.data("continueDiscard",true);a.close()},ariaLabelledBy:[r]});a.addContent(new E({items:[r,s]}));a.attachBeforeOpen(()=>{a.setInitialFocus(s)});a.attachAfterClose(()=>{t.setEnabled(true);if(a.data("continueDiscard")){e()}else{n()}});a.openBy(t,false)})};g._launchDialogWithKeyFields=function e(a,r,s,i,c,l){let d;const u=i.parentControl;const g=s.bindList(a.getPath(),a.getContext(),[],[],{$$updateGroupId:"submitLater"});g.refreshInternal=function(){};const p=g.create(i.data,true);return new Promise(async(e,h)=>{const m="sap/fe/core/controls/NonComputedVisibleKeyFieldsDialog";const b=M.loadTemplate(m,"fragment"),y=S(u),E=s.getMetaModel(),D=[],T=a.isRelative()?a.getResolvedPath():a.getPath(),_=E.createBindingContext(T),N=E.getMetaPath(T);for(const e in r){D.push(E.createBindingContext(`${N}/${r[e]}`))}const R=new P(D);const B=R.createBindingContext("/");const k=O(N,E);const L=new P(k);const F=L.createBindingContext("/");const H=await x.process(b,{name:m},{bindingContexts:{entitySet:_,fields:B,requiredProperties:F},models:{entitySet:_.getModel(),fields:B.getModel(),metaModel:E,requiredProperties:L}});let $=[];const U={};const j=w.getMessageManager();const V=e=>{const t=j.getMessageModel().getData();const n=t.filter(t=>t.getControlIds().some(t=>t.includes(e)));j.removeMessages(n)};const W={handleChange:async e=>{const t=e.getParameter("id");const n=e.getSource();const o=J.find(e=>e.field===n);V(t);o.validationPromise=e.getParameter("promise");try{o.value=await o.validationPromise;o.hasError=false}catch(e){delete o.value;o.hasError=true}},handleLiveChange:e=>{const t=e.getParameter("id");V(t)}};const G=await A.load({definition:H,controller:W});let q;const K=function(){if(q.error){h(q.error)}else{e(q.response)}d.close()};d=new C(I(["CreateDialog",N]),{title:y.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE"),content:[G],beginButton:{text:y.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON"),type:"Emphasized",press:async e=>{if(!await t.validateProperties(j,J,y)){return}o.lock(d);i.bIsCreateDialog=true;try{const e=await Promise.all(Object.keys(U).map(async function(e){const t=await U[e];const n={};n[e]=t;return n}));if(i.beforeCreateCallBack){await v(i.beforeCreateCallBack({contextPath:a&&a.getPath(),createParameters:e}))}const t=p.getObject();const n={};Object.keys(t).forEach(function(e){const o=E.getObject(`${N}/${e}`);if(o&&o.$kind==="NavigationProperty"){return}n[e]=t[e]});const o=a.create(n,true,i.createAtEnd,i.inactive);const r=this.onAfterCreateCompletion(a,o,i);let s=await r;if(!s||s&&s.bKeepDialogOpen!==true){s=s??{};d.setBindingContext(null);s.newContext=o;q={response:s};K()}}catch(e){if(e!==f.Constants.CreationFailed){q={error:e};K()}}finally{o.unlock(d);l.showMessages()}}},endButton:{text:y.getText("C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL"),press:function(){q={error:f.Constants.CancelActionDialog};K()}},afterClose:function(){var e;for(const e of J){const t=e.field.getId();V(t)}(e=d.getBindingContext("internal"))===null||e===void 0?void 0:e.setProperty("isCreateDialogOpen",false);d.destroy();g.destroy()}});$=G===null||G===void 0?void 0:G.getAggregation("form").getAggregation("formContainers")[0].getAggregation("formElements");const J=$.map(e=>{const t=e.getFields()[0];const n=t.isA("sap.ui.mdc.MultiValueField");return{parameter:e,isMultiValue:n,field:t,value:n?t.getItems():t.getValue(),validationPromise:undefined,hasError:false}});if(u&&u.addDependent){u.addDependent(d)}d.setBindingContext(p);try{await n.setUserDefaults(c,D,p,false,i.createAction,i.data);d.getBindingContext("internal").setProperty("isCreateDialogOpen",true);d.open()}catch(e){await l.showMessages();throw e}})};g.onAfterCreateCompletion=function t(n,o,a){let r;const s=new Promise(e=>{r=e});const i=e=>{const t=e.getParameter("context"),a=e.getParameter("success");if(t===o){n.detachCreateCompleted(i,this);r(a)}};const c=()=>{o.created().then(undefined,function(){e.trace("transient creation context deleted")}).catch(function(t){e.trace("transient creation context deletion error",t)})};n.attachCreateCompleted(i,this);return s.then(e=>{if(!e){if(!a.keepTransientContextOnFailed){c();n.resetChanges();n.getModel().resetChanges(n.getUpdateGroupId());throw f.Constants.CreationFailed}return{bKeepDialogOpen:true}}else{return o.created()}})};g._getNewAction=function e(t,n,o,a){let r;if(t&&t.preferredMode&&n.toUpperCase().indexOf("I-ACTION=CREATEWITH")>-1){const e=t.preferredMode[0];r=e.toUpperCase().indexOf("CREATEWITH:")>-1?e.substr(e.lastIndexOf(":")+1):undefined}else if(t&&t.preferredMode&&n.toUpperCase().indexOf("I-ACTION=AUTOCREATEWITH")>-1){const e=t.preferredMode[0];r=e.toUpperCase().indexOf("AUTOCREATEWITH:")>-1?e.substr(e.lastIndexOf(":")+1):undefined}else{r=o&&o.getObject!==undefined?o.getObject(`${a}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction`)||o.getObject(`${a}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction`):undefined}return r};g._getSpecificCreateActionDialogLabel=function e(t,n,o,a){const r=function(){if(t&&t.getObject(`${n}/@com.sap.vocabularies.UI.v1.LineItem`)){const e=t.getObject(`${n}/@com.sap.vocabularies.UI.v1.LineItem`).findIndex(function(e){const t=e.Action?e.Action.split("("):undefined;return t?t[0]===o:false});return e>-1?t.getObject(`${n}/@com.sap.vocabularies.UI.v1.LineItem`)[e].Label:undefined}else{return undefined}};return r()||t&&t.getObject(`${n}/${o}@com.sap.vocabularies.Common.v1.Label`)||a&&a.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE")};return u}();const H=new F;return H},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/draft-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/helpers/ResourceModelHelper", "sap/m/Button", "sap/m/Dialog", "sap/m/MessageBox", "sap/m/Text", "sap/ui/core/Core", "../../operationsHelper", "./draftDataLossPopup"], function (Log, CommonUtils, messageHandling, ResourceModelHelper, Button, Dialog, MessageBox, Text, Core, operationsHelper, draftDataLossPopup) {
  "use strict";

  var getResourceModel = ResourceModelHelper.getResourceModel;
  /**
   * Interface for callbacks used in the functions
   *
   *
   * @author SAP SE
   * @since 1.54.0
   * @interface
   * @name sap.fe.core.actions.draft.ICallback
   * @private
   */

  /**
   * Callback to approve or reject the creation of a draft
   *
   * @name sap.fe.core.actions.draft.ICallback.beforeCreateDraftFromActiveDocument
   * @function
   * @static
   * @abstract
   * @param {sap.ui.model.odata.v4.Context} oContext Context of the active document for the new draft
   * @returns {(boolean|Promise)} Approval of draft creation [true|false] or Promise that resolves with the boolean value
   * @private
   */

  /**
   * Callback after a draft was successully created
   *
   * @name sap.fe.core.actions.draft.ICallback.afterCreateDraftFromActiveDocument
   * @function
   * @static
   * @abstract
   * @param {sap.ui.model.odata.v4.Context} oContext Context of the new draft
   * @param {sap.ui.model.odata.v4.Context} oActiveDocumentContext Context of the active document for the new draft
   * @returns {sap.ui.model.odata.v4.Context} oActiveDocumentContext
   * @private
   */

  /**
   * Callback to approve or reject overwriting an unsaved draft of another user
   *
   * @name sap.fe.core.actions.draft.ICallback.whenDecisionToOverwriteDocumentIsRequired
   * @function
   * @public
   * @static
   * @abstract
   * @param {sap.ui.model.odata.v4.Context} oContext Context of the active document for the new draft
   * @returns {(boolean|Promise)} Approval to overwrite unsaved draft [true|false] or Promise that resolves with the boolean value
   * @ui5-restricted
   */
  /* Constants for draft operations */
  const draftOperations = {
    EDIT: "EditAction",
    ACTIVATION: "ActivationAction",
    DISCARD: "DiscardAction",
    PREPARE: "PreparationAction"
  };

  /**
   * Static functions for the draft programming model
   *
   * @namespace
   * @alias sap.fe.core.actions.draft
   * @private
   * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
   * @since 1.54.0
   */

  /**
   * Determines the action name for a draft operation.
   *
   * @param oContext The context that should be bound to the operation
   * @param sOperation The operation name
   * @returns The name of the draft operation
   */
  function getActionName(oContext, sOperation) {
    const oModel = oContext.getModel(),
      oMetaModel = oModel.getMetaModel(),
      sEntitySetPath = oMetaModel.getMetaPath(oContext.getPath());
    return oMetaModel.getObject(`${sEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot/${sOperation}`);
  }
  /**
   * Creates an operation context binding for the given context and operation.
   *
   * @param oContext The context that should be bound to the operation
   * @param sOperation The operation (action or function import)
   * @param oOptions Options to create the operation context
   * @returns The context binding of the bound operation
   */
  function createOperation(oContext, sOperation, oOptions) {
    const sOperationName = getActionName(oContext, sOperation);
    return oContext.getModel().bindContext(`${sOperationName}(...)`, oContext, oOptions);
  }
  /**
   * Determines the return type for a draft operation.
   *
   * @param oContext The context that should be bound to the operation
   * @param sOperation The operation name
   * @returns The return type of the draft operation
   */
  function getReturnType(oContext, sOperation) {
    const oModel = oContext.getModel(),
      oMetaModel = oModel.getMetaModel(),
      sEntitySetPath = oMetaModel.getMetaPath(oContext.getPath());
    return oMetaModel.getObject(`${sEntitySetPath}@com.sap.vocabularies.Common.v1.DraftRoot/${sOperation}/$ReturnType`);
  }
  /**
   * Check if optional draft prepare action exists.
   *
   * @param oContext The context that should be bound to the operation
   * @returns True if a a prepare action exists
   */
  function hasPrepareAction(oContext) {
    return !!getActionName(oContext, draftOperations.PREPARE);
  }
  /**
   * Creates a new draft from an active document.
   *
   * @function
   * @param oContext Context for which the action should be performed
   * @param bPreserveChanges If true - existing changes from another user that are not locked are preserved and an error is sent from the backend, otherwise false - existing changes from another user that are not locked are overwritten</li>
   * @param oView If true - existing changes from another
   * @returns Resolve function returns the context of the operation
   * @private
   * @ui5-restricted
   */
  async function executeDraftEditAction(oContext, bPreserveChanges, oView) {
    if (oContext.getProperty("IsActiveEntity")) {
      const oOptions = {
        $$inheritExpandSelect: true
      };
      const oOperation = createOperation(oContext, draftOperations.EDIT, oOptions);
      oOperation.setParameter("PreserveChanges", bPreserveChanges);
      const sGroupId = "direct";
      const resourceModel = getResourceModel(oView);
      const sActionName = resourceModel.getText("C_COMMON_OBJECT_PAGE_EDIT");
      //If the context is coming from a list binding we pass the flag true to replace the context by the active one
      const oEditPromise = oOperation.execute(sGroupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(draft, sGroupId, {
        label: sActionName,
        model: oContext.getModel()
      }, resourceModel, null, null, null, undefined, undefined), oContext.getBinding().isA("sap.ui.model.odata.v4.ODataListBinding"));
      oOperation.getModel().submitBatch(sGroupId);
      return await oEditPromise;
    } else {
      throw new Error("You cannot edit this draft document");
    }
  }

  /**
   * Executes the validation of the draft. The PrepareAction is triggered if the messages are annotated and entitySet gets a PreparationAction annotated.
   * If the operation succeeds and operation doesn't get a return type (RAP system) the messages are requested.
   *
   * @function
   * @param context Context for which the PrepareAction should be performed
   * @param appComponent The AppComponent
   * @param ignoreETag If set to true, ETags are ignored when executing the action
   * @returns Resolve function returns
   *  - the context of the operation if the action has been successfully executed
   *  - void if the action has failed
   *  - undefined if the action has not been triggered since the prerequisites are not met
   * @private
   * @ui5-restricted
   */
  async function executeDraftValidation(context, appComponent, ignoreETag) {
    if (draft.getMessagesPath(context) && draft.hasPrepareAction(context)) {
      try {
        if (!ignoreETag) {
          // We need to wait for the entity related to the context to post the action with the If-Match header
          // Some triggers (enter on table) can generate a promise in the cache so if we don't wait for the entity
          // the POST will be sent without If-Match and will generate an error on backend side.
          await context.getBinding().requestObject("");
        }
        const operation = await draft.executeDraftPreparationAction(context, context.getUpdateGroupId(), true, ignoreETag);
        // if there is no returned operation by executeDraftPreparationAction -> the action has failed
        if (operation && !getReturnType(context, draftOperations.PREPARE)) {
          requestMessages(context, appComponent.getSideEffectsService());
        }
        return operation;
      } catch (error) {
        Log.error("Error while requesting messages", error);
      }
    }
    return undefined;
  }

  /**
   * Activates a draft document. The draft will replace the sibling entity and will be deleted by the back end.
   *
   * @function
   * @param oContext Context for which the action should be performed
   * @param oAppComponent The AppComponent
   * @param [sGroupId] The optional batch group in which the operation is to be executed
   * @returns Resolve function returns the context of the operation
   * @private
   * @ui5-restricted
   */
  async function executeDraftActivationAction(oContext, oAppComponent, sGroupId) {
    const bHasPrepareAction = hasPrepareAction(oContext);

    // According to the draft spec if the service contains a prepare action and we trigger both prepare and
    // activate in one $batch the activate action is called with iF-Match=*
    const bIgnoreEtag = bHasPrepareAction;
    if (!oContext.getProperty("IsActiveEntity")) {
      const oOperation = createOperation(oContext, draftOperations.ACTIVATION, {
        $$inheritExpandSelect: true
      });
      const resourceModel = getResourceModel(oAppComponent);
      const sActionName = resourceModel.getText("C_OP_OBJECT_PAGE_SAVE");
      try {
        return await oOperation.execute(sGroupId, bIgnoreEtag, sGroupId ? operationsHelper.fnOnStrictHandlingFailed.bind(draft, sGroupId, {
          label: sActionName,
          model: oContext.getModel()
        }, resourceModel, null, null, null, undefined, undefined) : undefined, oContext.getBinding().isA("sap.ui.model.odata.v4.ODataListBinding"));
      } catch (e) {
        if (bHasPrepareAction) {
          const actionName = getActionName(oContext, draftOperations.PREPARE),
            oSideEffectsService = oAppComponent.getSideEffectsService(),
            oBindingParameters = oSideEffectsService.getODataActionSideEffects(actionName, oContext),
            aTargetPaths = oBindingParameters && oBindingParameters.pathExpressions;
          if (aTargetPaths && aTargetPaths.length > 0) {
            try {
              await oSideEffectsService.requestSideEffects(aTargetPaths, oContext);
            } catch (oError) {
              Log.error("Error while requesting side effects", oError);
            }
          } else {
            try {
              await requestMessages(oContext, oSideEffectsService);
            } catch (oError) {
              Log.error("Error while requesting messages", oError);
            }
          }
        }
        throw e;
      }
    } else {
      throw new Error("The activation action cannot be executed on an active document");
    }
  }

  /**
   * Gets the supported message property path on the PrepareAction for a context.
   *
   * @function
   * @param oContext Context to be checked
   * @returns Path to the message
   * @private
   * @ui5-restricted
   */
  function getMessagePathForPrepare(oContext) {
    const oMetaModel = oContext.getModel().getMetaModel();
    const sContextPath = oMetaModel.getMetaPath(oContext.getPath());
    const oReturnType = getReturnType(oContext, draftOperations.PREPARE);
    // If there is no return parameter, it is not possible to request Messages.
    // RAP draft prepare has no return parameter
    return oReturnType ? oMetaModel.getObject(`${sContextPath}/@${"com.sap.vocabularies.Common.v1.Messages"}/$Path`) : null;
  }

  /**
   * Execute a preparation action.
   *
   * @function
   * @param oContext Context for which the action should be performed
   * @param groupId The optional batch group in which we want to execute the operation
   * @param bMessages If set to true, the PREPARE action retrieves SAP_Messages
   * @param ignoreETag If set to true, ETag information is ignored when the action is executed
   * @returns Resolve function returns the context of the operation
   * @private
   * @ui5-restricted
   */
  function executeDraftPreparationAction(oContext, groupId, bMessages, ignoreETag) {
    if (!oContext.getProperty("IsActiveEntity")) {
      const sMessagesPath = bMessages ? getMessagePathForPrepare(oContext) : null;
      const oOperation = createOperation(oContext, draftOperations.PREPARE, sMessagesPath ? {
        $select: sMessagesPath
      } : null);

      // TODO: side effects qualifier shall be even deprecated to be checked
      oOperation.setParameter("SideEffectsQualifier", "");
      const sGroupId = groupId || oOperation.getGroupId();
      return oOperation.execute(sGroupId, ignoreETag).then(function () {
        return oOperation;
      }).catch(function (oError) {
        Log.error("Error while executing the operation", oError);
      });
    } else {
      throw new Error("The preparation action cannot be executed on an active document");
    }
  }
  /**
   * Determines the message path for a context.
   *
   * @function
   * @param oContext Context for which the path shall be determined
   * @returns Message path, empty if not annotated
   * @private
   * @ui5-restricted
   */
  function getMessagesPath(oContext) {
    const oModel = oContext.getModel(),
      oMetaModel = oModel.getMetaModel(),
      sEntitySetPath = oMetaModel.getMetaPath(oContext.getPath());
    return oMetaModel.getObject(`${sEntitySetPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
  }
  /**
   * Requests the messages if annotated for a given context.
   *
   * @function
   * @param oContext Context for which the messages shall be requested
   * @param oSideEffectsService Service for the SideEffects on SAP Fiori elements
   * @returns Promise which is resolved once messages were requested
   * @private
   * @ui5-restricted
   */
  function requestMessages(oContext, oSideEffectsService) {
    const sMessagesPath = draft.getMessagesPath(oContext);
    if (sMessagesPath) {
      return oSideEffectsService.requestSideEffects([sMessagesPath], oContext);
    }
    return Promise.resolve();
  }
  /**
   * Executes discard of a draft function using HTTP Post.
   *
   * @function
   * @param oContext Context for which the action should be performed
   * @param oAppComponent App Component
   * @param bEnableStrictHandling
   * @returns Resolve function returns the context of the operation
   * @private
   * @ui5-restricted
   */
  async function executeDraftDiscardAction(oContext, oAppComponent, bEnableStrictHandling) {
    if (!oContext.getProperty("IsActiveEntity")) {
      const oDiscardOperation = draft.createOperation(oContext, draftOperations.DISCARD);
      const resourceModel = oAppComponent && getResourceModel(oAppComponent);
      const sGroupId = "direct";
      const sActionName = (resourceModel === null || resourceModel === void 0 ? void 0 : resourceModel.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_BUTTON")) || "";
      // as the discard action doesnt' send the active version in the response we do not use the replace in cache
      const oDiscardPromise = !bEnableStrictHandling ? oDiscardOperation.execute(sGroupId) : oDiscardOperation.execute(sGroupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(draft, sGroupId, {
        label: sActionName,
        model: oContext.getModel()
      }, resourceModel, null, null, null, undefined, undefined), false);
      oContext.getModel().submitBatch(sGroupId);
      return oDiscardPromise;
    } else {
      throw new Error("The discard action cannot be executed on an active document");
    }
  }

  /**
   * This method creates a sibling context for a subobject page and calculates a sibling path for all intermediate paths
   * between the object page and the subobject page.
   *
   * @param rootCurrentContext The context for the root of the draft
   * @param rightmostCurrentContext The context of the subobject page
   * @param rootContextInfo The context info of root of the draft
   * @returns The siblingInformation object
   */
  async function computeSiblingInformation(rootCurrentContext, rightmostCurrentContext, rootContextInfo) {
    if (!rightmostCurrentContext.getPath().startsWith(rootCurrentContext.getPath())) {
      // Wrong usage !!
      Log.error("Cannot compute rightmost sibling context");
      throw new Error("Cannot compute rightmost sibling context");
    }
    if (rightmostCurrentContext.getProperty("IsActiveEntity") === false && rightmostCurrentContext.getProperty("HasActiveEntity") === false) {
      // We already know the sibling for rightmostCurrentContext doesn't exist
      // --> No need to check canonical paths etc...
      return undefined;
    }
    const model = rootCurrentContext.getModel();
    try {
      // //////////////////////////////////////////////////////////////////
      // 1. Find all segments between the root object and the sub-object
      // Example: for root = /Param(aa)/Entity(bb) and rightMost = /Param(aa)/Entity(bb)/_Nav(cc)/_SubNav(dd)
      // ---> ["Param(aa)/Entity(bb)", "_Nav(cc)", "_SubNav(dd)"]

      // Find all segments in the rightmost path
      const additionalPath = rightmostCurrentContext.getPath().replace(rootCurrentContext.getPath(), "");
      const segments = additionalPath ? additionalPath.substring(1).split("/") : [];
      // First segment is always the full path of the root object, which can contain '/' in case of a parametrized entity
      segments.unshift(rootCurrentContext.getPath().substring(1));

      // //////////////////////////////////////////////////////////////////
      // 2. Request canonical paths of the sibling entity for each segment
      // Example: for ["Param(aa)/Entity(bb)", "_Nav(cc)", "_SubNav(dd)"]
      // --> request canonical paths for "Param(aa)/Entity(bb)/SiblingEntity", "Param(aa)/Entity(bb)/_Nav(cc)/SiblingEntity", "Param(aa)/Entity(bb)/_Nav(cc)/_SubNav(dd)/SiblingEntity"
      const oldPaths = [];
      const newPaths = [];
      let currentPath = "";

      // Computing sibling entity of root of the draft context is not required if the context is already in the sub-OP
      // Example: Edit in Sub-OP where new context is already available
      const paths = [...segments];
      if ((rootContextInfo === null || rootContextInfo === void 0 ? void 0 : rootContextInfo.rootContextNotRequired) === true) {
        var _rootCurrentContext$g;
        paths.shift();
        currentPath = "/" + (rootCurrentContext === null || rootCurrentContext === void 0 ? void 0 : (_rootCurrentContext$g = rootCurrentContext.getPath()) === null || _rootCurrentContext$g === void 0 ? void 0 : _rootCurrentContext$g.substring(1));
      }
      const canonicalPathPromises = paths.map(segment => {
        currentPath += `/${segment}`;
        oldPaths.unshift(currentPath);
        if (currentPath.endsWith(")")) {
          const siblingContext = model.bindContext(`${currentPath}/SiblingEntity`).getBoundContext();
          return siblingContext.requestCanonicalPath();
        } else {
          return Promise.resolve(undefined); // 1-1 relation
        }
      });

      // //////////////////////////////////////////////////////////////////
      // 3. Reconstruct the full paths from canonical paths (for path mapping)
      // Example: for canonical paths "/Param(aa)/Entity(bb-sibling)", "/Entity2(cc-sibling)", "/Entity3(dd-sibling)"
      // --> ["Param(aa)/Entity(bb-sibling)", "Param(aa)/Entity(bb-sibling)/_Nav(cc-sibling)", "Param(aa)/Entity(bb-sibling)/_Nav(cc-sibling)/_SubNav(dd-sibling)"]
      const canonicalPaths = await Promise.all(canonicalPathPromises);
      if ((rootContextInfo === null || rootContextInfo === void 0 ? void 0 : rootContextInfo.rootContextNotRequired) === true) {
        canonicalPaths.unshift(rootContextInfo === null || rootContextInfo === void 0 ? void 0 : rootContextInfo.rootSiblingPath);
        oldPaths.push(rootCurrentContext.getPath());
      }
      let siblingPath = "";
      canonicalPaths.forEach((canonicalPath, index) => {
        if (index !== 0) {
          if (segments[index].endsWith(")")) {
            const navigation = segments[index].replace(/\(.*$/, ""); // Keep only navigation name from the segment, i.e. aaa(xxx) --> aaa
            const keys = canonicalPath.replace(/.*\(/, "("); // Keep only the keys from the canonical path, i.e. aaa(xxx) --> (xxx)
            siblingPath += `/${navigation}${keys}`;
          } else {
            siblingPath += `/${segments[index]}`; // 1-1 relation
          }
        } else {
          siblingPath = canonicalPath; // To manage parametrized entities
        }

        newPaths.unshift(siblingPath);
      });
      return {
        targetContext: model.bindContext(siblingPath, undefined, {
          $$groupId: "$auto.Heroes"
        }).getBoundContext(),
        // Create the rightmost sibling context from its path
        pathMapping: oldPaths.map((oldPath, index) => {
          return {
            oldPath,
            newPath: newPaths[index]
          };
        })
      };
    } catch (error) {
      // A canonical path couldn't be resolved (because a sibling doesn't exist)
      return undefined;
    }
  }

  /**
   * Creates a draft document from an existing document.
   *
   * The function supports several hooks as there is a certain coreography defined.
   *
   * @function
   * @name sap.fe.core.actions.draft#createDraftFromActiveDocument
   * @memberof sap.fe.core.actions.draft
   * @static
   * @param oContext Context of the active document for the new draft
   * @param oAppComponent The AppComponent
   * @param mParameters The parameters
   * @param [mParameters.oView] The view
   * @param [mParameters.bPreserveChanges] Preserve changes of an existing draft of another user
   * @returns Promise resolves with the {@link sap.ui.model.odata.v4.Context context} of the new draft document
   * @private
   * @ui5-restricted
   */
  async function createDraftFromActiveDocument(oContext, oAppComponent, mParameters) {
    const mParam = mParameters || {},
      bRunPreserveChangesFlow = typeof mParam.bPreserveChanges === "undefined" || typeof mParam.bPreserveChanges === "boolean" && mParam.bPreserveChanges; //default true

    /**
     * Overwrite the existing change.
     *
     * @returns Resolves with result of {@link sap.fe.core.actions#executeDraftEditAction}
     */
    async function overwriteChange() {
      //Overwrite existing changes
      const oModel = oContext.getModel();
      const draftDataContext = oModel.bindContext(`${oContext.getPath()}/DraftAdministrativeData`).getBoundContext();
      const resourceModel = getResourceModel(mParameters.oView);
      const draftAdminData = await draftDataContext.requestObject();
      if (draftAdminData) {
        // remove all unbound transition messages as we show a special dialog
        messageHandling.removeUnboundTransitionMessages();
        let sInfo = draftAdminData.InProcessByUserDescription || draftAdminData.InProcessByUser;
        const sEntitySet = mParameters.oView.getViewData().entitySet;
        if (sInfo) {
          const sLockedByUserMsg = resourceModel.getText("C_DRAFT_OBJECT_PAGE_DRAFT_LOCKED_BY_USER", sInfo, sEntitySet);
          MessageBox.error(sLockedByUserMsg);
          throw new Error(sLockedByUserMsg);
        } else {
          sInfo = draftAdminData.CreatedByUserDescription || draftAdminData.CreatedByUser;
          const sUnsavedChangesMsg = resourceModel.getText("C_DRAFT_OBJECT_PAGE_DRAFT_UNSAVED_CHANGES", sInfo, sEntitySet);
          await draft.showEditConfirmationMessageBox(sUnsavedChangesMsg, oContext);
          return draft.executeDraftEditAction(oContext, false, mParameters.oView);
        }
      }
      throw new Error(`Draft creation aborted for document: ${oContext.getPath()}`);
    }
    if (!oContext) {
      throw new Error("Binding context to active document is required");
    }
    let oDraftContext;
    try {
      oDraftContext = await draft.executeDraftEditAction(oContext, bRunPreserveChangesFlow, mParameters.oView);
    } catch (oResponse) {
      if (oResponse.status === 409 || oResponse.status === 412 || oResponse.status === 423) {
        messageHandling.removeBoundTransitionMessages();
        messageHandling.removeUnboundTransitionMessages();
        const siblingInfo = await draft.computeSiblingInformation(oContext, oContext);
        if (siblingInfo !== null && siblingInfo !== void 0 && siblingInfo.targetContext) {
          //there is a context authorized to be edited by the current user
          await CommonUtils.waitForContextRequested(siblingInfo.targetContext);
          return siblingInfo.targetContext;
        } else {
          //there is no draft owned by the current user
          oDraftContext = await overwriteChange();
        }
      } else if (!(oResponse && oResponse.canceled)) {
        throw new Error(oResponse);
      }
    }
    if (oDraftContext) {
      var _oSideEffects$trigger;
      const sEditActionName = draft.getActionName(oDraftContext, draftOperations.EDIT);
      const oSideEffects = oAppComponent.getSideEffectsService().getODataActionSideEffects(sEditActionName, oDraftContext);
      if (oSideEffects !== null && oSideEffects !== void 0 && (_oSideEffects$trigger = oSideEffects.triggerActions) !== null && _oSideEffects$trigger !== void 0 && _oSideEffects$trigger.length) {
        await oAppComponent.getSideEffectsService().requestSideEffectsForODataAction(oSideEffects, oDraftContext);
        return oDraftContext;
      } else {
        return oDraftContext;
      }
    } else {
      return undefined;
    }
  }
  /**
   * Creates an active document from a draft document.
   *
   * The function supports several hooks as there is a certain choreography defined.
   *
   * @function
   * @name sap.fe.core.actions.draft#activateDocument
   * @memberof sap.fe.core.actions.draft
   * @static
   * @param oContext Context of the active document for the new draft
   * @param oAppComponent The AppComponent
   * @param mParameters The parameters
   * @param [mParameters.fnBeforeActivateDocument] Callback that allows a veto before the 'Create' request is executed
   * @param [mParameters.fnAfterActivateDocument] Callback for postprocessing after document was activated.
   * @param messageHandler The message handler
   * @returns Promise resolves with the {@link sap.ui.model.odata.v4.Context context} of the new draft document
   * @private
   * @ui5-restricted
   */
  async function activateDocument(oContext, oAppComponent, mParameters, messageHandler) {
    const mParam = mParameters || {};
    if (!oContext) {
      throw new Error("Binding context to draft document is required");
    }
    const bExecute = mParam.fnBeforeActivateDocument ? await mParam.fnBeforeActivateDocument(oContext) : true;
    if (!bExecute) {
      throw new Error(`Activation of the document was aborted by extension for document: ${oContext.getPath()}`);
    }
    let oActiveDocumentContext;
    if (!hasPrepareAction(oContext)) {
      oActiveDocumentContext = await executeDraftActivationAction(oContext, oAppComponent);
    } else {
      /* activation requires preparation */
      const sBatchGroup = "draft";
      // we use the same batchGroup to force prepare and activate in a same batch but with different changeset
      let oPreparePromise = draft.executeDraftPreparationAction(oContext, sBatchGroup, false);
      oContext.getModel().submitBatch(sBatchGroup);
      const oActivatePromise = draft.executeDraftActivationAction(oContext, oAppComponent, sBatchGroup);
      try {
        const values = await Promise.all([oPreparePromise, oActivatePromise]);
        oActiveDocumentContext = values[1];
      } catch (err) {
        // BCP 2270084075
        // if the Activation fails, then the messages are retrieved from PREPARATION action
        const sMessagesPath = getMessagePathForPrepare(oContext);
        if (sMessagesPath) {
          oPreparePromise = draft.executeDraftPreparationAction(oContext, sBatchGroup, true);
          oContext.getModel().submitBatch(sBatchGroup);
          await oPreparePromise;
          const data = await oContext.requestObject();
          if (data[sMessagesPath].length > 0) {
            //if messages are available from the PREPARATION action, then previous transition messages are removed
            messageHandler === null || messageHandler === void 0 ? void 0 : messageHandler.removeTransitionMessages(false, false, oContext.getPath());
          }
        }
        throw err;
      }
    }
    return mParam.fnAfterActivateDocument ? mParam.fnAfterActivateDocument(oContext, oActiveDocumentContext) : oActiveDocumentContext;
  }

  /**
   * Display the confirmation dialog box after pressing the edit button of an object page with unsaved changes.
   *
   *
   * @function
   * @name sap.fe.core.actions.draft#showEditConfirmationMessageBox
   * @memberof sap.fe.core.actions.draft
   * @static
   * @param sUnsavedChangesMsg Dialog box message informing the user that if he starts editing, the previous unsaved changes will be lost
   * @param oContext Context of the active document for the new draft
   * @returns Promise resolves
   * @private
   * @ui5-restricted
   */
  function showEditConfirmationMessageBox(sUnsavedChangesMsg, oContext) {
    const localI18nRef = Core.getLibraryResourceBundle("sap.fe.core");
    return new Promise(function (resolve, reject) {
      const oDialog = new Dialog({
        title: localI18nRef.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING"),
        state: "Warning",
        content: new Text({
          text: sUnsavedChangesMsg
        }),
        beginButton: new Button({
          text: localI18nRef.getText("C_COMMON_OBJECT_PAGE_EDIT"),
          type: "Emphasized",
          press: function () {
            oDialog.close();
            resolve(true);
          }
        }),
        endButton: new Button({
          text: localI18nRef.getText("C_COMMON_OBJECT_PAGE_CANCEL"),
          press: function () {
            oDialog.close();
            reject(`Draft creation aborted for document: ${oContext.getPath()}`);
          }
        }),
        afterClose: function () {
          oDialog.destroy();
        }
      });
      oDialog.addStyleClass("sapUiContentPadding");
      oDialog.open();
    });
  }

  /**
   * HTTP POST call when DraftAction is present for Draft Delete; HTTP DELETE call when there is no DraftAction
   * and Active Instance always uses DELETE.
   *
   * @function
   * @name sap.fe.core.actions.draft#deleteDraft
   * @memberof sap.fe.core.actions.draft
   * @static
   * @param oContext Context of the document to be discarded
   * @param oAppComponent Context of the document to be discarded
   * @param bEnableStrictHandling
   * @private
   * @returns A Promise resolved when the context is deleted
   * @ui5-restricted
   */
  function deleteDraft(oContext, oAppComponent, bEnableStrictHandling) {
    const sDiscardAction = getActionName(oContext, draftOperations.DISCARD),
      bIsActiveEntity = oContext.getObject().IsActiveEntity;
    if (bIsActiveEntity || !bIsActiveEntity && !sDiscardAction) {
      //Use Delete in case of active entity and no discard action available for draft
      if (oContext.hasPendingChanges()) {
        return oContext.getBinding().resetChanges().then(function () {
          return oContext.delete();
        }).catch(function (error) {
          return Promise.reject(error);
        });
      } else {
        return oContext.delete();
      }
    } else {
      //Use Discard Post Action if it is a draft entity and discard action exists
      return executeDraftDiscardAction(oContext, oAppComponent, bEnableStrictHandling);
    }
  }
  const draft = {
    createDraftFromActiveDocument: createDraftFromActiveDocument,
    activateDocument: activateDocument,
    deleteDraft: deleteDraft,
    executeDraftEditAction: executeDraftEditAction,
    executeDraftValidation: executeDraftValidation,
    executeDraftPreparationAction: executeDraftPreparationAction,
    executeDraftActivationAction: executeDraftActivationAction,
    hasPrepareAction: hasPrepareAction,
    getMessagesPath: getMessagesPath,
    computeSiblingInformation: computeSiblingInformation,
    processDataLossOrDraftDiscardConfirmation: draftDataLossPopup.processDataLossOrDraftDiscardConfirmation,
    silentlyKeepDraftOnForwardNavigation: draftDataLossPopup.silentlyKeepDraftOnForwardNavigation,
    createOperation: createOperation,
    executeDraftDiscardAction: executeDraftDiscardAction,
    NavigationType: draftDataLossPopup.NavigationType,
    getActionName: getActionName,
    showEditConfirmationMessageBox: showEditConfirmationMessageBox
  };
  return draft;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/draft", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/helpers/ResourceModelHelper","sap/m/Button","sap/m/Dialog","sap/m/MessageBox","sap/m/Text","sap/ui/core/Core","../../operationsHelper","./draftDataLossPopup"],function(e,t,n,o,i,r,a,s,c,u,d){"use strict";var l=o.getResourceModel;const f={EDIT:"EditAction",ACTIVATION:"ActivationAction",DISCARD:"DiscardAction",PREPARE:"PreparationAction"};function g(e,t){const n=e.getModel(),o=n.getMetaModel(),i=o.getMetaPath(e.getPath());return o.getObject(`${i}@com.sap.vocabularies.Common.v1.DraftRoot/${t}`)}function h(e,t,n){const o=g(e,t);return e.getModel().bindContext(`${o}(...)`,e,n)}function E(e,t){const n=e.getModel(),o=n.getMetaModel(),i=o.getMetaPath(e.getPath());return o.getObject(`${i}@com.sap.vocabularies.Common.v1.DraftRoot/${t}/$ReturnType`)}function P(e){return!!g(e,f.PREPARE)}async function p(e,t,n){if(e.getProperty("IsActiveEntity")){const o={$$inheritExpandSelect:true};const i=h(e,f.EDIT,o);i.setParameter("PreserveChanges",t);const r="direct";const a=l(n);const s=a.getText("C_COMMON_OBJECT_PAGE_EDIT");const c=i.execute(r,undefined,u.fnOnStrictHandlingFailed.bind(O,r,{label:s,model:e.getModel()},a,null,null,null,undefined,undefined),e.getBinding().isA("sap.ui.model.odata.v4.ODataListBinding"));i.getModel().submitBatch(r);return await c}else{throw new Error("You cannot edit this draft document")}}async function A(t,n,o){if(O.getMessagesPath(t)&&O.hasPrepareAction(t)){try{if(!o){await t.getBinding().requestObject("")}const e=await O.executeDraftPreparationAction(t,t.getUpdateGroupId(),true,o);if(e&&!E(t,f.PREPARE)){w(t,n.getSideEffectsService())}return e}catch(t){e.error("Error while requesting messages",t)}}return undefined}async function m(t,n,o){const i=P(t);const r=i;if(!t.getProperty("IsActiveEntity")){const a=h(t,f.ACTIVATION,{$$inheritExpandSelect:true});const s=l(n);const c=s.getText("C_OP_OBJECT_PAGE_SAVE");try{return await a.execute(o,r,o?u.fnOnStrictHandlingFailed.bind(O,o,{label:c,model:t.getModel()},s,null,null,null,undefined,undefined):undefined,t.getBinding().isA("sap.ui.model.odata.v4.ODataListBinding"))}catch(o){if(i){const o=g(t,f.PREPARE),i=n.getSideEffectsService(),r=i.getODataActionSideEffects(o,t),a=r&&r.pathExpressions;if(a&&a.length>0){try{await i.requestSideEffects(a,t)}catch(t){e.error("Error while requesting side effects",t)}}else{try{await w(t,i)}catch(t){e.error("Error while requesting messages",t)}}}throw o}}else{throw new Error("The activation action cannot be executed on an active document")}}function v(e){const t=e.getModel().getMetaModel();const n=t.getMetaPath(e.getPath());const o=E(e,f.PREPARE);return o?t.getObject(`${n}/@${"com.sap.vocabularies.Common.v1.Messages"}/$Path`):null}function C(t,n,o,i){if(!t.getProperty("IsActiveEntity")){const r=o?v(t):null;const a=h(t,f.PREPARE,r?{$select:r}:null);a.setParameter("SideEffectsQualifier","");const s=n||a.getGroupId();return a.execute(s,i).then(function(){return a}).catch(function(t){e.error("Error while executing the operation",t)})}else{throw new Error("The preparation action cannot be executed on an active document")}}function D(e){const t=e.getModel(),n=t.getMetaModel(),o=n.getMetaPath(e.getPath());return n.getObject(`${o}/@com.sap.vocabularies.Common.v1.Messages/$Path`)}function w(e,t){const n=O.getMessagesPath(e);if(n){return t.requestSideEffects([n],e)}return Promise.resolve()}async function x(e,t,n){if(!e.getProperty("IsActiveEntity")){const o=O.createOperation(e,f.DISCARD);const i=t&&l(t);const r="direct";const a=(i===null||i===void 0?void 0:i.getText("C_TRANSACTION_HELPER_DRAFT_DISCARD_BUTTON"))||"";const s=!n?o.execute(r):o.execute(r,undefined,u.fnOnStrictHandlingFailed.bind(O,r,{label:a,model:e.getModel()},i,null,null,null,undefined,undefined),false);e.getModel().submitBatch(r);return s}else{throw new Error("The discard action cannot be executed on an active document")}}async function b(t,n,o){if(!n.getPath().startsWith(t.getPath())){e.error("Cannot compute rightmost sibling context");throw new Error("Cannot compute rightmost sibling context")}if(n.getProperty("IsActiveEntity")===false&&n.getProperty("HasActiveEntity")===false){return undefined}const i=t.getModel();try{const e=n.getPath().replace(t.getPath(),"");const a=e?e.substring(1).split("/"):[];a.unshift(t.getPath().substring(1));const s=[];const c=[];let u="";const d=[...a];if((o===null||o===void 0?void 0:o.rootContextNotRequired)===true){var r;d.shift();u="/"+(t===null||t===void 0?void 0:(r=t.getPath())===null||r===void 0?void 0:r.substring(1))}const l=d.map(e=>{u+=`/${e}`;s.unshift(u);if(u.endsWith(")")){const e=i.bindContext(`${u}/SiblingEntity`).getBoundContext();return e.requestCanonicalPath()}else{return Promise.resolve(undefined)}});const f=await Promise.all(l);if((o===null||o===void 0?void 0:o.rootContextNotRequired)===true){f.unshift(o===null||o===void 0?void 0:o.rootSiblingPath);s.push(t.getPath())}let g="";f.forEach((e,t)=>{if(t!==0){if(a[t].endsWith(")")){const n=a[t].replace(/\(.*$/,"");const o=e.replace(/.*\(/,"(");g+=`/${n}${o}`}else{g+=`/${a[t]}`}}else{g=e}c.unshift(g)});return{targetContext:i.bindContext(g,undefined,{$$groupId:"$auto.Heroes"}).getBoundContext(),pathMapping:s.map((e,t)=>({oldPath:e,newPath:c[t]}))}}catch(e){return undefined}}async function M(e,o,i){const r=i||{},s=typeof r.bPreserveChanges==="undefined"||typeof r.bPreserveChanges==="boolean"&&r.bPreserveChanges;async function c(){const t=e.getModel();const o=t.bindContext(`${e.getPath()}/DraftAdministrativeData`).getBoundContext();const r=l(i.oView);const s=await o.requestObject();if(s){n.removeUnboundTransitionMessages();let t=s.InProcessByUserDescription||s.InProcessByUser;const o=i.oView.getViewData().entitySet;if(t){const e=r.getText("C_DRAFT_OBJECT_PAGE_DRAFT_LOCKED_BY_USER",t,o);a.error(e);throw new Error(e)}else{t=s.CreatedByUserDescription||s.CreatedByUser;const n=r.getText("C_DRAFT_OBJECT_PAGE_DRAFT_UNSAVED_CHANGES",t,o);await O.showEditConfirmationMessageBox(n,e);return O.executeDraftEditAction(e,false,i.oView)}}throw new Error(`Draft creation aborted for document: ${e.getPath()}`)}if(!e){throw new Error("Binding context to active document is required")}let u;try{u=await O.executeDraftEditAction(e,s,i.oView)}catch(o){if(o.status===409||o.status===412||o.status===423){n.removeBoundTransitionMessages();n.removeUnboundTransitionMessages();const o=await O.computeSiblingInformation(e,e);if(o!==null&&o!==void 0&&o.targetContext){await t.waitForContextRequested(o.targetContext);return o.targetContext}else{u=await c()}}else if(!(o&&o.canceled)){throw new Error(o)}}if(u){var d;const e=O.getActionName(u,f.EDIT);const t=o.getSideEffectsService().getODataActionSideEffects(e,u);if(t!==null&&t!==void 0&&(d=t.triggerActions)!==null&&d!==void 0&&d.length){await o.getSideEffectsService().requestSideEffectsForODataAction(t,u);return u}else{return u}}else{return undefined}}async function y(e,t,n,o){const i=n||{};if(!e){throw new Error("Binding context to draft document is required")}const r=i.fnBeforeActivateDocument?await i.fnBeforeActivateDocument(e):true;if(!r){throw new Error(`Activation of the document was aborted by extension for document: ${e.getPath()}`)}let a;if(!P(e)){a=await m(e,t)}else{const n="draft";let i=O.executeDraftPreparationAction(e,n,false);e.getModel().submitBatch(n);const r=O.executeDraftActivationAction(e,t,n);try{const e=await Promise.all([i,r]);a=e[1]}catch(t){const r=v(e);if(r){i=O.executeDraftPreparationAction(e,n,true);e.getModel().submitBatch(n);await i;const t=await e.requestObject();if(t[r].length>0){o===null||o===void 0?void 0:o.removeTransitionMessages(false,false,e.getPath())}}throw t}}return i.fnAfterActivateDocument?i.fnAfterActivateDocument(e,a):a}function T(e,t){const n=c.getLibraryResourceBundle("sap.fe.core");return new Promise(function(o,a){const c=new r({title:n.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING"),state:"Warning",content:new s({text:e}),beginButton:new i({text:n.getText("C_COMMON_OBJECT_PAGE_EDIT"),type:"Emphasized",press:function(){c.close();o(true)}}),endButton:new i({text:n.getText("C_COMMON_OBJECT_PAGE_CANCEL"),press:function(){c.close();a(`Draft creation aborted for document: ${t.getPath()}`)}}),afterClose:function(){c.destroy()}});c.addStyleClass("sapUiContentPadding");c.open()})}function _(e,t,n){const o=g(e,f.DISCARD),i=e.getObject().IsActiveEntity;if(i||!i&&!o){if(e.hasPendingChanges()){return e.getBinding().resetChanges().then(function(){return e.delete()}).catch(function(e){return Promise.reject(e)})}else{return e.delete()}}else{return x(e,t,n)}}const O={createDraftFromActiveDocument:M,activateDocument:y,deleteDraft:_,executeDraftEditAction:p,executeDraftValidation:A,executeDraftPreparationAction:C,executeDraftActivationAction:m,hasPrepareAction:P,getMessagesPath:D,computeSiblingInformation:b,processDataLossOrDraftDiscardConfirmation:d.processDataLossOrDraftDiscardConfirmation,silentlyKeepDraftOnForwardNavigation:d.silentlyKeepDraftOnForwardNavigation,createOperation:h,executeDraftDiscardAction:x,NavigationType:d.NavigationType,getActionName:g,showEditConfirmationMessageBox:T};return O},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/draftDataLossPopup-dbg", ["sap/base/Log", "sap/fe/core/controllerextensions/collaboration/ActivitySync", "sap/fe/core/helpers/EditState", "../../controls/DataLossOrDraftDiscard/DraftDataLossDialog.block"], function (Log, ActivitySync, EditState, DraftDataLossDialogBlock) {
  "use strict";

  /* Enum for navigation types */
  var NavigationType;
  /*Create the dataloss dialog*/
  (function (NavigationType) {
    NavigationType["BackNavigation"] = "BackNavigation";
    NavigationType["ForwardNavigation"] = "ForwardNavigation";
  })(NavigationType || (NavigationType = {}));
  const dataLossDialog = new DraftDataLossDialogBlock({});

  /**
   * The method checks whether an optional parameter in the manifest is set to silently keep the draft in case a forward navigation is triggered.
   *
   * @param pageController The reference to the current PageController instance
   * @returns Boolean value with true or false to silently keep the draft
   */
  function silentlyKeepDraftOnForwardNavigation(pageController) {
    var _oManifest$sapFe, _oManifest$sapFe$app;
    let rbSilentlyKeep = false;
    const oManifest = pageController.getAppComponent().getManifest();
    rbSilentlyKeep = (oManifest === null || oManifest === void 0 ? void 0 : (_oManifest$sapFe = oManifest["sap.fe"]) === null || _oManifest$sapFe === void 0 ? void 0 : (_oManifest$sapFe$app = _oManifest$sapFe.app) === null || _oManifest$sapFe$app === void 0 ? void 0 : _oManifest$sapFe$app.silentlyKeepDraftOnForwardNavigation) || false;
    return rbSilentlyKeep;
  }

  /**
   * Logic to process the fcl mode.
   *
   * @param draftAdminData Admin data
   * @param fnCancelFunction The cancel function
   * @param oController The current controller referenced
   * @param processFunctionForDrafts The functon to process the handler
   * @param bSkipBindingToView The optional parameter to skip the binding to the view
   */
  async function processFclMode(draftAdminData, fnCancelFunction, oController, processFunctionForDrafts, bSkipBindingToView) {
    // The application is running in FCL mode so in this case we fall back to
    // the old logic since the dirty state handling is not properly working
    // for FCL.
    if (draftAdminData.CreationDateTime !== draftAdminData.LastChangeDateTime) {
      dataLossDialog.performAfterDiscardorKeepDraft(processFunctionForDrafts, fnCancelFunction, oController, bSkipBindingToView);
    } else {
      processFunctionForDrafts();
    }
  }

  /**
   * Logic to process the mode with no active entity.
   *
   * @param draftAdminData Admin data
   * @param fnCancelFunction The cancel function
   * @param oController The current controller referenced
   * @param processFunctionForDrafts The functon to process the handler
   * @param navigationType The navigation type for which the function should be called
   * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case
   * @param bSkipBindingToView The optional parameter to skip the binding to the view
   */
  async function processNoActiveEntityMode(draftAdminData, fnCancelFunction, oController, processFunctionForDrafts, navigationType, bSilentlyKeepDraftOnForwardNavigation, bSkipBindingToView) {
    // There is no active entity so we are editing either newly created data or
    // a draft which has never been saved to active version
    // Since we want to react differently in the two situations, we have to check the
    // dirty state
    if (EditState.isEditStateDirty()) {
      if (draftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime && navigationType === NavigationType.BackNavigation) {
        // in case we have untouched changes for the draft and a "back"
        // navigation we can silently discard the draft again
        // eslint-disable-next-line promise/no-nesting
        try {
          await dataLossDialog.discardDraft(oController, bSkipBindingToView);
          processFunctionForDrafts();
        } catch (error) {
          Log.error("Error while canceling the document", error);
        }
      } else if (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {
        // In case we have a "forward navigation" and an additional parameter set in the manifest
        // we "silently" keep the draft
        processFunctionForDrafts();
      } else {
        // In this case data is being changed or a forward navigation is triggered
        // and we always want to show the dataloss dialog on navigation
        dataLossDialog.performAfterDiscardorKeepDraft(processFunctionForDrafts, fnCancelFunction, oController, bSkipBindingToView);
      }
    } else {
      // We are editing a draft which has been created earlier but never saved to active
      // version and since the edit state is not dirty, there have been no user changes
      // so in this case we want to silently navigate and do nothing
      processFunctionForDrafts();
    }
  }
  /**
   * Logic to process the draft editing for existing entity.
   *
   * @param oController The current controller referenced.
   * @param oContext The context of the current call
   * @param processFunctionForDrafts The functon to process the handler
   * @param navigationType The navigation type for which the function should be called
   */
  async function processEditingDraftForExistingEntity(oController, oContext, processFunctionForDrafts, navigationType) {
    // We are editing a draft for an existing active entity
    // The CreationDateTime and LastChangeDateTime are equal, so this draft was
    // never saved before, hence we're currently editing a newly created draft for
    // an existing active entity for the first time.
    // Also there have so far been no changes made to the draft and in this
    // case we want to silently navigate and delete the draftin case of a back
    // navigation but in case of a forward navigation we want to silently keep it!
    if (navigationType === NavigationType.BackNavigation) {
      const mParameters = {
        skipDiscardPopover: true
      };
      try {
        await oController.editFlow.cancelDocument(oContext, mParameters);
        processFunctionForDrafts();
      } catch (error) {
        Log.error("Error while canceling the document", error);
      }
    } else {
      // In case of a forward navigation we silently keep the draft and only
      // execute the followup function.
      processFunctionForDrafts();
    }
  }

  /**
   * Logic to process the edit state dirty.
   *
   * @param oController The current controller referenced.
   * @param fnCancelFunction The cancel function
   * @param processFunctionForDrafts The functon to process the handler
   * @param navigationType The navigation type for which the function should be called
   * @param bSilentlyKeepDraftOnForwardNavigation The parameter to determine whether to skip the popup appearance in forward case
   * @param bSkipBindingToView The optional parameter to skip the binding to the view.
   */
  async function processEditStateDirty(oController, fnCancelFunction, processFunctionForDrafts, navigationType, bSilentlyKeepDraftOnForwardNavigation, bSkipBindingToView) {
    if (navigationType === NavigationType.ForwardNavigation && bSilentlyKeepDraftOnForwardNavigation) {
      // In case we have a "forward navigation" and an additional parameter set in the manifest
      // we "silently" keep the draft
      processFunctionForDrafts();
    } else {
      // The CreationDateTime and LastChangeDateTime are NOT equal, so we are currently editing
      // an existing draft and need to distinguish depending on if any changes
      // have been made in the current editing session or not
      // Changes have been made in the current editing session so we want
      // to show the dataloss dialog and let the user decide
      dataLossDialog.performAfterDiscardorKeepDraft(processFunctionForDrafts, fnCancelFunction, oController, bSkipBindingToView);
    }
  }

  /**
   * Logic to process the admin data.
   *
   * @param draftAdminData Admin data
   * @param fnProcessFunction The functon to process the handler
   * @param fnCancelFunction The cancel function
   * @param oContext The context of the current call
   * @param oController The current controller referenced
   * @param bSkipBindingToView The optional parameter to skip the binding to the view
   * @param navigationType The navigation type for which the function should be called
   */
  async function processDraftAdminData(draftAdminData, fnProcessFunction, fnCancelFunction, oContext, oController, bSkipBindingToView) {
    let navigationType = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : NavigationType.BackNavigation;
    const collaborationConnected = ActivitySync.isConnected(oController.getView());
    const processFunctionForDrafts = !collaborationConnected ? fnProcessFunction : function () {
      ActivitySync.disconnect(oController.getView());
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      fnProcessFunction.apply(null, ...args);
    };
    const bSilentlyKeepDraftOnForwardNavigation = silentlyKeepDraftOnForwardNavigation(oController);
    if (draftAdminData) {
      if (oController.getAppComponent().getRootViewController().isFclEnabled()) {
        await processFclMode(draftAdminData, fnCancelFunction, oController, processFunctionForDrafts, bSkipBindingToView);
      } else if (!oContext.getObject().HasActiveEntity) {
        processNoActiveEntityMode(draftAdminData, fnCancelFunction, oController, processFunctionForDrafts, navigationType, bSilentlyKeepDraftOnForwardNavigation, bSkipBindingToView);
      } else if (draftAdminData.CreationDateTime === draftAdminData.LastChangeDateTime) {
        processEditingDraftForExistingEntity(oController, oContext, processFunctionForDrafts, navigationType);
      } else if (EditState.isEditStateDirty()) {
        processEditStateDirty(oController, fnCancelFunction, processFunctionForDrafts, navigationType, bSilentlyKeepDraftOnForwardNavigation, bSkipBindingToView);
      } else {
        // The user started editing the existing draft but did not make any changes
        // in the current editing session, so in this case we do not want
        // to show the dataloss dialog but just keep the draft
        processFunctionForDrafts();
      }
    } else {
      fnProcessFunction();
    }
  }

  /**
   * The general handler in which the individual steps are called.
   *
   * @param fnProcessFunction
   * @param fnCancelFunction
   * @param oContext
   * @param oController
   * @param bSkipBindingToView
   * @param navigationType
   */
  async function processDataLossOrDraftDiscardConfirmation(fnProcessFunction, fnCancelFunction, oContext, oController, bSkipBindingToView) {
    let navigationType = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : NavigationType.BackNavigation;
    const oView = oController.getView();
    const oModel = oContext.getModel();
    const oMetaModel = oModel.getMetaModel();
    const sEntitySet = oView.getViewData().entitySet ?? "";
    const oDraftRoot = sEntitySet && oMetaModel.getObject("/" + sEntitySet + "@com.sap.vocabularies.Common.v1.DraftRoot");
    const oUIModel = oView.getModel("ui");
    const bIsEditable = oUIModel.getProperty("/isEditable");
    const draftDataContext = oModel.bindContext(`${oContext.getPath()}/DraftAdministrativeData`).getBoundContext();

    // Shouldn't display data loss popover on shell back navigation from sub-object pages
    // and when object page is in display mode
    if (oContext && oContext.getObject() && (!oDraftRoot && navigationType === NavigationType.BackNavigation || !bIsEditable)) {
      fnProcessFunction();
    } else {
      try {
        const draftAdminData = await draftDataContext.requestObject();
        await processDraftAdminData(draftAdminData, fnProcessFunction, fnCancelFunction, oContext, oController, bSkipBindingToView, navigationType);
      } catch (oError) {
        Log.error("Cannot retrieve draftDataContext information", oError);
      }
    }
  }
  const draftDataLossPopup = {
    processDataLossOrDraftDiscardConfirmation: processDataLossOrDraftDiscardConfirmation,
    silentlyKeepDraftOnForwardNavigation: silentlyKeepDraftOnForwardNavigation,
    NavigationType: NavigationType,
    processFclMode: processFclMode,
    processNoActiveEntityMode: processNoActiveEntityMode,
    processEditingDraftForExistingEntity: processEditingDraftForExistingEntity,
    processEditStateDirty: processEditStateDirty
  };
  return draftDataLossPopup;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/draftDataLossPopup", ["sap/base/Log","sap/fe/core/controllerextensions/collaboration/ActivitySync","sap/fe/core/helpers/EditState","../../controls/DataLossOrDraftDiscard/DraftDataLossDialog.block"],function(t,e,a,i){"use strict";var o;(function(t){t["BackNavigation"]="BackNavigation";t["ForwardNavigation"]="ForwardNavigation"})(o||(o={}));const n=new i({});function r(t){var e,a;let i=false;const o=t.getAppComponent().getManifest();i=(o===null||o===void 0?void 0:(e=o["sap.fe"])===null||e===void 0?void 0:(a=e.app)===null||a===void 0?void 0:a.silentlyKeepDraftOnForwardNavigation)||false;return i}async function s(t,e,a,i,o){if(t.CreationDateTime!==t.LastChangeDateTime){n.performAfterDiscardorKeepDraft(i,e,a,o)}else{i()}}async function c(e,i,r,s,c,l,f){if(a.isEditStateDirty()){if(e.CreationDateTime===e.LastChangeDateTime&&c===o.BackNavigation){try{await n.discardDraft(r,f);s()}catch(e){t.error("Error while canceling the document",e)}}else if(c===o.ForwardNavigation&&l){s()}else{n.performAfterDiscardorKeepDraft(s,i,r,f)}}else{s()}}async function l(e,a,i,n){if(n===o.BackNavigation){const o={skipDiscardPopover:true};try{await e.editFlow.cancelDocument(a,o);i()}catch(e){t.error("Error while canceling the document",e)}}else{i()}}async function f(t,e,a,i,r,s){if(i===o.ForwardNavigation&&r){a()}else{n.performAfterDiscardorKeepDraft(a,e,t,s)}}async function d(t,i,n,d,g,D){let p=arguments.length>6&&arguments[6]!==undefined?arguments[6]:o.BackNavigation;const v=e.isConnected(g.getView());const u=!v?i:function(){e.disconnect(g.getView());for(var t=arguments.length,a=new Array(t),o=0;o<t;o++){a[o]=arguments[o]}i.apply(null,...a)};const y=r(g);if(t){if(g.getAppComponent().getRootViewController().isFclEnabled()){await s(t,n,g,u,D)}else if(!d.getObject().HasActiveEntity){c(t,n,g,u,p,y,D)}else if(t.CreationDateTime===t.LastChangeDateTime){l(g,d,u,p)}else if(a.isEditStateDirty()){f(g,n,u,p,y,D)}else{u()}}else{i()}}async function g(e,a,i,n,r){let s=arguments.length>5&&arguments[5]!==undefined?arguments[5]:o.BackNavigation;const c=n.getView();const l=i.getModel();const f=l.getMetaModel();const g=c.getViewData().entitySet??"";const D=g&&f.getObject("/"+g+"@com.sap.vocabularies.Common.v1.DraftRoot");const p=c.getModel("ui");const v=p.getProperty("/isEditable");const u=l.bindContext(`${i.getPath()}/DraftAdministrativeData`).getBoundContext();if(i&&i.getObject()&&(!D&&s===o.BackNavigation||!v)){e()}else{try{const t=await u.requestObject();await d(t,e,a,i,n,r,s)}catch(e){t.error("Cannot retrieve draftDataContext information",e)}}}const D={processDataLossOrDraftDiscardConfirmation:g,silentlyKeepDraftOnForwardNavigation:r,NavigationType:o,processFclMode:s,processNoActiveEntityMode:c,processEditingDraftForExistingEntity:l,processEditStateDirty:f};return D},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations-dbg", ["./operations/facade"], function (facade) {
  "use strict";

  return facade;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations", ["./operations/facade"],function(e){"use strict";return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations/_internal-dbg", ["sap/ui/core/message/Message"], function (Message) {
  "use strict";

  var _exports = {};
  /**
   * Adds error messages for an action parameter field to the message manager.
   *
   * @param messageManager The active MessageManager instance
   * @param messageParameters Information identifying an action parameter and messages refering to this parameter
   * @returns True if the action parameters contain valid data and the mandatory parameters are provided
   */
  // in case of missing mandaotory parameter, message currently differs per parameter, as it superfluously contains the label as parameter. Possiblky this could be removed in future, in that case, interface could be simplified to ActionParameterInfo[], string
  async function _addMessageForActionParameter(messageManager, messageParameters) {
    messageManager.addMessages(messageParameters.map(messageParameter => {
      const binding = messageParameter.actionParameterInfo.field.getBinding(messageParameter.actionParameterInfo.isMultiValue ? "items" : "value");
      return new Message({
        message: messageParameter.message,
        type: "Error",
        processor: binding === null || binding === void 0 ? void 0 : binding.getModel(),
        persistent: true,
        target: binding === null || binding === void 0 ? void 0 : binding.getResolvedPath()
      });
    }));
  }

  /**
   * Checks if all required action parameters contain data and checks for all action parameters if the
   * contained data is valid.
   *
   *
   * @param messageManager The active MessageManager instance
   * @param actionParameterInfos Information identifying an action parameter
   * @param resourceModel The model to load text resources
   */
  _exports._addMessageForActionParameter = _addMessageForActionParameter;
  async function _validateProperties(messageManager, actionParameterInfos, resourceModel) {
    await Promise.allSettled(actionParameterInfos.map(actionParameterInfo => actionParameterInfo.validationPromise));
    const requiredParameterInfos = actionParameterInfos.filter(actionParameterInfo => actionParameterInfo.field.getRequired());

    /* Hint: The boolean false is a valid value */
    const emptyRequiredFields = requiredParameterInfos.filter(requiredParameterInfo => {
      if (requiredParameterInfo.isMultiValue) {
        return requiredParameterInfo.value === undefined || !requiredParameterInfo.value.length;
      } else {
        const fieldValue = requiredParameterInfo.field.getValue();
        return fieldValue === undefined || fieldValue === null || fieldValue === "";
      }
    });

    // message contains label per field for historical reason (originally, it was shown in additional popup, now it's directly added to the field)
    // if this was not the case (and hopefully, in future this might be subject to change), interface of _addMessageForActionParameter could be simplified to just pass emptyRequiredFields and a constant message here
    _addMessageForActionParameter(messageManager, emptyRequiredFields.map(actionParameterInfo => {
      var _actionParameterInfo$;
      return {
        actionParameterInfo: actionParameterInfo,
        message: resourceModel.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_MISSING_MANDATORY_MSG", [((_actionParameterInfo$ = actionParameterInfo.field.getParent()) === null || _actionParameterInfo$ === void 0 ? void 0 : _actionParameterInfo$.getAggregation("label")).getText()])
      };
    }));

    /* Check value state of all parameter */
    const firstInvalidActionParameter = actionParameterInfos.find(
    // unfortunately, _addMessageForActionParameter sets valueState only asynchroneously, thus checking emptyRequiredFields and hasError additionally:
    // - checking hasError: user has changed field to invalid value, validation promise has been rejected, therefore we are adding message to message model
    // which in turn sets value state to 'Error' but this last step might not have happened yet due to asynchronity in model.
    // - also checking value state: also out parameter of another action parameter could change field and it's value state without sending change event.

    actionParameterInfo => actionParameterInfo.hasError || actionParameterInfo.field.getValueState() === "Error" || emptyRequiredFields.includes(actionParameterInfo));
    if (firstInvalidActionParameter) {
      firstInvalidActionParameter.field.focus();
      return false;
    } else {
      return true;
    }
  }
  _exports._validateProperties = _validateProperties;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations/_internal", ["sap/ui/core/message/Message"],function(e){"use strict";var t={};async function a(t,a){t.addMessages(a.map(t=>{const a=t.actionParameterInfo.field.getBinding(t.actionParameterInfo.isMultiValue?"items":"value");return new e({message:t.message,type:"Error",processor:a===null||a===void 0?void 0:a.getModel(),persistent:true,target:a===null||a===void 0?void 0:a.getResolvedPath()})}))}t._addMessageForActionParameter=a;async function r(e,t,r){await Promise.allSettled(t.map(e=>e.validationPromise));const i=t.filter(e=>e.field.getRequired());const n=i.filter(e=>{if(e.isMultiValue){return e.value===undefined||!e.value.length}else{const t=e.field.getValue();return t===undefined||t===null||t===""}});a(e,n.map(e=>{var t;return{actionParameterInfo:e,message:r.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_MISSING_MANDATORY_MSG",[((t=e.field.getParent())===null||t===void 0?void 0:t.getAggregation("label")).getText()])}}));const s=t.find(e=>e.hasError||e.field.getValueState()==="Error"||n.includes(e));if(s){s.field.focus();return false}else{return true}}t._validateProperties=r;return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations/facade-dbg", ["sap/base/Log", "sap/fe/core/ActionRuntime", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/helpers/FPMHelper", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/library", "sap/m/Button", "sap/m/Dialog", "sap/m/MessageBox", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/library", "sap/ui/core/message/Message", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/model/json/JSONModel", "../../../operationsHelper", "./_internal"], function (Log, ActionRuntime, CommonUtils, BusyLocker, messageHandling, FPMHelper, ResourceModelHelper, StableIdHelper, FELibrary, Button, Dialog, MessageBox, Core, Fragment, library, Message, XMLPreprocessor, XMLTemplateProcessor, JSONModel, operationsHelper, _internal) {
  "use strict";

  var _validateProperties = _internal._validateProperties;
  var _addMessageForActionParameter = _internal._addMessageForActionParameter;
  var MessageType = library.MessageType;
  var generate = StableIdHelper.generate;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  const Constants = FELibrary.Constants,
    InvocationGrouping = FELibrary.InvocationGrouping;
  const Action = MessageBox.Action;

  /**
   * Calls a bound action for one or multiple contexts.
   *
   * @function
   * @static
   * @name sap.fe.core.actions.operations.callBoundAction
   * @memberof sap.fe.core.actions.operations
   * @param sActionName The name of the action to be called
   * @param contexts Either one context or an array with contexts for which the action is to be be called
   * @param oModel OData Model
   * @param oAppComponent The AppComponent
   * @param [mParameters] Optional, can contain the following attributes:
   * @param [mParameters.parameterValues] A map of action parameter names and provided values
   * @param [mParameters.mBindingParameters] A map of binding parameters that would be part of $select and $expand coming from side effects for bound actions
   * @param [mParameters.additionalSideEffect] Array of property paths to be requested in addition to actual target properties of the side effect
   * @param [mParameters.showActionParameterDialog] If set and if parameters exist the user retrieves a dialog to fill in parameters, if actionParameters are passed they are shown to the user
   * @param [mParameters.label] A human-readable label for the action
   * @param [mParameters.invocationGrouping] Mode how actions are to be called: Changeset to put all action calls into one changeset, Isolated to put them into separate changesets, defaults to Isolated
   * @param [mParameters.onSubmitted] Function which is called once the actions are submitted with an array of promises
   * @param [mParameters.defaultParameters] Can contain default parameters from FLP user defaults
   * @param [mParameters.parentControl] If specified, the dialogs are added as dependent of the parent control
   * @param [mParameters.bGetBoundContext] If specified, the action promise returns the bound context
   * @param [strictHandlingUtilities] Optional, utility flags and messages for strictHandling
   * @returns Promise resolves with an array of response objects (TODO: to be changed)
   * @private
   * @ui5-restricted
   */
  function callBoundAction(sActionName, contexts, oModel, oAppComponent, mParameters, strictHandlingUtilities) {
    if (!strictHandlingUtilities) {
      strictHandlingUtilities = {
        is412Executed: false,
        strictHandlingTransitionFails: [],
        strictHandlingPromises: [],
        strictHandlingWarningMessages: [],
        delaySuccessMessages: [],
        processedMessageIds: []
      };
    }
    if (!contexts || contexts.length === 0) {
      //In Freestyle apps bound actions can have no context
      return Promise.reject("Bound actions always requires at least one context");
    }
    // this method either accepts single context or an array of contexts
    // TODO: Refactor to an unambiguos API
    const isCalledWithArray = Array.isArray(contexts);

    // in case of single context wrap into an array for called methods (esp. callAction)
    mParameters.aContexts = isCalledWithArray ? contexts : [contexts];
    const oMetaModel = oModel.getMetaModel(),
      // Analyzing metaModelPath for action only from first context seems weird, but probably works in all existing szenarios - if several contexts are passed, they probably
      // belong to the same metamodelpath. TODO: Check, whether this can be improved / szenarios with different metaModelPaths might exist
      sActionPath = `${oMetaModel.getMetaPath(mParameters.aContexts[0].getPath())}/${sActionName}`,
      oBoundAction = oMetaModel.createBindingContext(`${sActionPath}/@$ui5.overload/0`);
    mParameters.isCriticalAction = getIsActionCritical(oMetaModel, sActionPath, mParameters.aContexts, oBoundAction);

    // Promise returned by callAction currently is rejected in case of execution for multiple contexts partly failing. This should be changed (some failing contexts do not mean
    // that function did not fulfill its task), but as this is a bigger refactoring, for the time being we need to deal with that at the calling place (i.e. here)
    // => provide the same handler (mapping back from array to single result/error if needed) for resolved/rejected case
    const extractSingleResult = function (result) {
      // single action could be resolved or rejected
      if (result[0].status === "fulfilled") {
        return result[0].value;
      } else {
        // In case of dialog cancellation, no array is returned => throw the result.
        // Ideally, differentiating should not be needed here => TODO: Find better solution when separating dialog handling (single object with single result) from backend
        // execution (potentially multiple objects)
        throw result[0].reason || result;
      }
    };
    return callAction(sActionName, oModel, oBoundAction, oAppComponent, mParameters, strictHandlingUtilities).then(result => {
      if (isCalledWithArray) {
        return result;
      } else {
        return extractSingleResult(result);
      }
    }, result => {
      if (isCalledWithArray) {
        throw result;
      } else {
        return extractSingleResult(result);
      }
    });
  }
  /**
   * Calls an action import.
   *
   * @function
   * @static
   * @name sap.fe.core.actions.operations.callActionImport
   * @memberof sap.fe.core.actions.operations
   * @param sActionName The name of the action import to be called
   * @param oModel An instance of an OData V4 model
   * @param oAppComponent The AppComponent
   * @param [mParameters] Optional, can contain the following attributes:
   * @param [mParameters.parameterValues] A map of action parameter names and provided values
   * @param [mParameters.label] A human-readable label for the action
   * @param [mParameters.showActionParameterDialog] If set and if parameters exist the user retrieves a dialog to fill in parameters, if actionParameters are passed they are shown to the user
   * @param [mParameters.onSubmitted] Function which is called once the actions are submitted with an array of promises
   * @param [mParameters.defaultParameters] Can contain default parameters from FLP user defaults
   * @param [strictHandlingUtilities] Optional, utility flags and messages for strictHandling
   * @returns Promise resolves with an array of response objects (TODO: to be changed)
   * @private
   * @ui5-restricted
   */
  function callActionImport(sActionName, oModel, oAppComponent, mParameters, strictHandlingUtilities) {
    if (!oModel) {
      return Promise.reject("Action expects a model/context for execution");
    }
    const oMetaModel = oModel.getMetaModel(),
      sActionPath = oModel.bindContext(`/${sActionName}`).getPath(),
      oActionImport = oMetaModel.createBindingContext(`/${oMetaModel.createBindingContext(sActionPath).getObject("$Action")}/0`);
    mParameters.isCriticalAction = getIsActionCritical(oMetaModel, `${sActionPath}/@$ui5.overload`);
    return callAction(sActionName, oModel, oActionImport, oAppComponent, mParameters, strictHandlingUtilities);
  }
  function callBoundFunction(sFunctionName, context, oModel) {
    if (!context) {
      return Promise.reject("Bound functions always requires a context");
    }
    const oMetaModel = oModel.getMetaModel(),
      sFunctionPath = `${oMetaModel.getMetaPath(context.getPath())}/${sFunctionName}`,
      oBoundFunction = oMetaModel.createBindingContext(sFunctionPath);
    return _executeFunction(sFunctionName, oModel, oBoundFunction, context);
  }
  /**
   * Calls a function import.
   *
   * @function
   * @static
   * @name sap.fe.core.actions.operations.callFunctionImport
   * @memberof sap.fe.core.actions.operations
   * @param sFunctionName The name of the function to be called
   * @param oModel An instance of an OData v4 model
   * @returns Promise resolves
   * @private
   */
  function callFunctionImport(sFunctionName, oModel) {
    if (!sFunctionName) {
      return Promise.resolve();
    }
    const oMetaModel = oModel.getMetaModel(),
      sFunctionPath = oModel.bindContext(`/${sFunctionName}`).getPath(),
      oFunctionImport = oMetaModel.createBindingContext(`/${oMetaModel.createBindingContext(sFunctionPath).getObject("$Function")}/0`);
    return _executeFunction(sFunctionName, oModel, oFunctionImport);
  }
  function _executeFunction(sFunctionName, oModel, oFunction, context) {
    let sGroupId;
    if (!oFunction || !oFunction.getObject()) {
      return Promise.reject(new Error(`Function ${sFunctionName} not found`));
    }
    if (context) {
      oFunction = oModel.bindContext(`${context.getPath()}/${sFunctionName}(...)`);
      sGroupId = "functionGroup";
    } else {
      oFunction = oModel.bindContext(`/${sFunctionName}(...)`);
      sGroupId = "functionImport";
    }
    const oFunctionPromise = oFunction.execute(sGroupId);
    oModel.submitBatch(sGroupId);
    return oFunctionPromise.then(function () {
      return oFunction.getBoundContext();
    });
  }
  function callAction(sActionName, oModel, oAction, oAppComponent, mParameters, strictHandlingUtilities) {
    if (!strictHandlingUtilities) {
      strictHandlingUtilities = {
        is412Executed: false,
        strictHandlingTransitionFails: [],
        strictHandlingPromises: [],
        strictHandlingWarningMessages: [],
        delaySuccessMessages: [],
        processedMessageIds: []
      };
    }
    mParameters.bGrouped = mParameters.invocationGrouping === InvocationGrouping.ChangeSet;
    return new Promise(async function (resolve, reject) {
      let mActionExecutionParameters = {};
      let fnDialog;
      let oActionPromise;
      //let failedActionPromise: any;
      const sActionLabel = mParameters.label;
      const bSkipParameterDialog = mParameters.skipParameterDialog;
      const aContexts = mParameters.aContexts;
      const bIsCreateAction = mParameters.bIsCreateAction;
      const bIsCriticalAction = mParameters.isCriticalAction;
      let oMetaModel;
      let sMetaPath;
      let sMessagesPath;
      let iMessageSideEffect;
      let bIsSameEntity;
      let oReturnType;
      let bValuesProvidedForAllParameters;
      const actionDefinition = oAction.getObject();
      if (!oAction || !oAction.getObject()) {
        return reject(new Error(`Action ${sActionName} not found`));
      }

      // Get the parameters of the action
      const aActionParameters = getActionParameters(oAction);

      // Check if the action has parameters and would need a parameter dialog
      // The parameter ResultIsActiveEntity is always hidden in the dialog! Hence if
      // this is the only parameter, this is treated as no parameter here because the
      // dialog would be empty!
      // FIXME: Should only ignore this if this is a 'create' action, otherwise it is just some normal parameter that happens to have this name
      const bActionNeedsParameterDialog = aActionParameters.length > 0 && !(aActionParameters.length === 1 && aActionParameters[0].$Name === "ResultIsActiveEntity");

      // Provided values for the action parameters from invokeAction call
      const aParameterValues = mParameters.parameterValues;

      // Determine startup parameters if provided
      const oComponentData = oAppComponent.getComponentData();
      const oStartupParameters = oComponentData && oComponentData.startupParameters || {};

      // In case an action parameter is needed, and we shall skip the dialog, check if values are provided for all parameters
      if (bActionNeedsParameterDialog && bSkipParameterDialog) {
        bValuesProvidedForAllParameters = _valuesProvidedForAllParameters(bIsCreateAction, aActionParameters, aParameterValues, oStartupParameters);
      }

      // Depending on the previously determined data, either set a dialog or leave it empty which
      // will lead to direct execution of the action without a dialog
      fnDialog = null;
      if (bActionNeedsParameterDialog) {
        if (!(bSkipParameterDialog && bValuesProvidedForAllParameters)) {
          fnDialog = showActionParameterDialog;
        }
      } else if (bIsCriticalAction) {
        fnDialog = confirmCriticalAction;
      }
      mActionExecutionParameters = {
        fnOnSubmitted: mParameters.onSubmitted,
        fnOnResponse: mParameters.onResponse,
        actionName: sActionName,
        model: oModel,
        aActionParameters: aActionParameters,
        bGetBoundContext: mParameters.bGetBoundContext,
        defaultValuesExtensionFunction: mParameters.defaultValuesExtensionFunction,
        label: mParameters.label,
        selectedItems: mParameters.selectedItems
      };
      if (oAction.getObject("$IsBound")) {
        if (mParameters.additionalSideEffect && mParameters.additionalSideEffect.pathExpressions) {
          oMetaModel = oModel.getMetaModel();
          sMetaPath = oMetaModel.getMetaPath(aContexts[0].getPath());
          sMessagesPath = oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.Common.v1.Messages/$Path`);
          if (sMessagesPath) {
            iMessageSideEffect = mParameters.additionalSideEffect.pathExpressions.findIndex(function (exp) {
              return typeof exp === "string" && exp === sMessagesPath;
            });

            // Add SAP_Messages by default if not annotated by side effects, action does not return a collection and
            // the return type is the same as the bound type
            oReturnType = oAction.getObject("$ReturnType");
            bIsSameEntity = oReturnType && !oReturnType.$isCollection && oAction.getModel().getObject(sMetaPath).$Type === oReturnType.$Type;
            if (iMessageSideEffect > -1 || bIsSameEntity) {
              // the message path is annotated as side effect. As there's no binding for it and the model does currently not allow
              // to add it at a later point of time we have to take care it's part of the $select of the POST, therefore moving it.
              mParameters.mBindingParameters = mParameters.mBindingParameters || {};
              if (oAction.getObject(`$ReturnType/$Type/${sMessagesPath}`) && (!mParameters.mBindingParameters.$select || mParameters.mBindingParameters.$select.split(",").indexOf(sMessagesPath) === -1)) {
                mParameters.mBindingParameters.$select = mParameters.mBindingParameters.$select ? `${mParameters.mBindingParameters.$select},${sMessagesPath}` : sMessagesPath;
                // Add side effects at entity level because $select stops these being returned by the action
                // Only if no other side effects were added for Messages
                if (iMessageSideEffect === -1) {
                  mParameters.additionalSideEffect.pathExpressions.push("*");
                }
                if (mParameters.additionalSideEffect.triggerActions.length === 0 && iMessageSideEffect > -1) {
                  // no trigger action therefore no need to request messages again
                  mParameters.additionalSideEffect.pathExpressions.splice(iMessageSideEffect, 1);
                }
              }
            }
          }
        }
        mActionExecutionParameters.aContexts = aContexts;
        mActionExecutionParameters.mBindingParameters = mParameters.mBindingParameters;
        mActionExecutionParameters.additionalSideEffect = mParameters.additionalSideEffect;
        mActionExecutionParameters.bGrouped = mParameters.invocationGrouping === InvocationGrouping.ChangeSet;
        mActionExecutionParameters.internalModelContext = mParameters.internalModelContext;
        mActionExecutionParameters.operationAvailableMap = mParameters.operationAvailableMap;
        mActionExecutionParameters.isCreateAction = bIsCreateAction;
        mActionExecutionParameters.bObjectPage = mParameters.bObjectPage;
        if (mParameters.controlId) {
          mActionExecutionParameters.control = mParameters.parentControl.byId(mParameters.controlId);
          mParameters.control = mActionExecutionParameters.control;
        } else {
          mActionExecutionParameters.control = mParameters.parentControl;
          mParameters.control = mParameters.parentControl;
        }
      }
      if (bIsCreateAction) {
        mActionExecutionParameters.bIsCreateAction = bIsCreateAction;
      }
      //check for skipping static actions
      const isStatic = (actionDefinition.$Parameter || []).some(aParameter => {
        return (actionDefinition.$EntitySetPath && actionDefinition.$EntitySetPath === aParameter.$Name || actionDefinition.$IsBound) && aParameter.$isCollection;
      });
      mActionExecutionParameters.isStatic = isStatic;
      if (fnDialog) {
        oActionPromise = fnDialog(sActionName, oAppComponent, sActionLabel, mActionExecutionParameters, aActionParameters, aParameterValues, oAction, mParameters.parentControl, mParameters.entitySetName, mParameters.messageHandler, strictHandlingUtilities);
        return oActionPromise.then(function (oOperationResult) {
          afterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);
          resolve(oOperationResult);
        }).catch(function (oOperationResult) {
          reject(oOperationResult);
        });
      } else {
        // Take over all provided parameter values and call the action.
        // This shall only happen if values are provided for all the parameters, otherwise the parameter dialog shall be shown which is ensured earlier
        if (aParameterValues) {
          for (const i in mActionExecutionParameters.aActionParameters) {
            var _aParameterValues$fin;
            mActionExecutionParameters.aActionParameters[i].value = aParameterValues === null || aParameterValues === void 0 ? void 0 : (_aParameterValues$fin = aParameterValues.find(element => element.name === mActionExecutionParameters.aActionParameters[i].$Name)) === null || _aParameterValues$fin === void 0 ? void 0 : _aParameterValues$fin.value;
          }
        } else {
          for (const i in mActionExecutionParameters.aActionParameters) {
            var _oStartupParameters$m;
            mActionExecutionParameters.aActionParameters[i].value = (_oStartupParameters$m = oStartupParameters[mActionExecutionParameters.aActionParameters[i].$Name]) === null || _oStartupParameters$m === void 0 ? void 0 : _oStartupParameters$m[0];
          }
        }
        let oOperationResult;
        try {
          oOperationResult = await _executeAction(oAppComponent, mActionExecutionParameters, mParameters.parentControl, mParameters.messageHandler, strictHandlingUtilities);
          const messages = Core.getMessageManager().getMessageModel().getData();
          if (strictHandlingUtilities && strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
            strictHandlingUtilities.delaySuccessMessages = strictHandlingUtilities.delaySuccessMessages.concat(messages);
          }
          afterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);
          resolve(oOperationResult);
        } catch {
          reject(oOperationResult);
        } finally {
          var _mParameters$messageH, _mActionExecutionPara;
          if (strictHandlingUtilities && strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
            try {
              const strictHandlingFails = strictHandlingUtilities.strictHandlingTransitionFails;
              const aFailedContexts = [];
              strictHandlingFails.forEach(function (fail) {
                aFailedContexts.push(fail.oAction.getContext());
              });
              mActionExecutionParameters.aContexts = aFailedContexts;
              const oFailedOperationResult = await _executeAction(oAppComponent, mActionExecutionParameters, mParameters.parentControl, mParameters.messageHandler, strictHandlingUtilities);
              strictHandlingUtilities.strictHandlingTransitionFails = [];
              Core.getMessageManager().addMessages(strictHandlingUtilities.delaySuccessMessages);
              afterActionResolution(mParameters, mActionExecutionParameters, actionDefinition);
              resolve(oFailedOperationResult);
            } catch (oFailedOperationResult) {
              reject(oFailedOperationResult);
            }
          }
          let showGenericErrorMessageForChangeSet = false;
          if (mParameters.bGrouped && strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length || checkforOtherMessages(mParameters.bGrouped) !== -1) {
            showGenericErrorMessageForChangeSet = true;
          }
          mParameters === null || mParameters === void 0 ? void 0 : (_mParameters$messageH = mParameters.messageHandler) === null || _mParameters$messageH === void 0 ? void 0 : _mParameters$messageH.showMessageDialog({
            control: (_mActionExecutionPara = mActionExecutionParameters) === null || _mActionExecutionPara === void 0 ? void 0 : _mActionExecutionPara.control,
            onBeforeShowMessage: function (aMessages, showMessageParametersIn) {
              return actionParameterShowMessageCallback(mParameters, aContexts, undefined, aMessages, showMessageParametersIn, showGenericErrorMessageForChangeSet);
            },
            aSelectedContexts: mParameters.aContexts,
            sActionName: sActionLabel
          });
          if (strictHandlingUtilities) {
            strictHandlingUtilities = {
              is412Executed: false,
              strictHandlingTransitionFails: [],
              strictHandlingPromises: [],
              strictHandlingWarningMessages: [],
              delaySuccessMessages: [],
              processedMessageIds: []
            };
          }
        }
      }
    });
  }
  function confirmCriticalAction(sActionName, oAppComponent, sActionLabel, mParameters, aActionParameters, aParameterValues, oActionContext, oParentControl, entitySetName, messageHandler) {
    return new Promise((resolve, reject) => {
      let boundActionName = sActionName ? sActionName : null;
      boundActionName = boundActionName.indexOf(".") >= 0 ? boundActionName.split(".")[boundActionName.split(".").length - 1] : boundActionName;
      const suffixResourceKey = boundActionName && entitySetName ? `${entitySetName}|${boundActionName}` : "";
      const resourceModel = getResourceModel(oParentControl);
      const sConfirmationText = resourceModel.getText("C_OPERATIONS_ACTION_CONFIRM_MESSAGE", undefined, suffixResourceKey);
      MessageBox.confirm(sConfirmationText, {
        onClose: async function (sAction) {
          if (sAction === Action.OK) {
            try {
              const oOperation = await _executeAction(oAppComponent, mParameters, oParentControl, messageHandler);
              resolve(oOperation);
            } catch (oError) {
              try {
                await messageHandler.showMessageDialog();
                reject(oError);
              } catch (e) {
                reject(oError);
              }
            }
          } else {
            resolve(Constants.CancelActionDialog);
          }
        }
      });
    });
  }
  async function executeAPMAction(oAppComponent, mParameters, oParentControl, messageHandler, aContexts, oDialog, after412, strictHandlingUtilities) {
    var _mParameters$aContext;
    const aResult = await _executeAction(oAppComponent, mParameters, oParentControl, messageHandler, strictHandlingUtilities);
    // If some entries were successful, and others have failed, the overall process is still successful. However, this was treated as rejection
    // before, and this currently is still kept, as long as dialog handling is mixed with backend process handling.
    // TODO: Refactor to only reject in case of overall process error.
    // For the time being: map to old logic to reject if at least one entry has failed
    // This check is only done for bound actions => aContexts not empty
    if ((_mParameters$aContext = mParameters.aContexts) !== null && _mParameters$aContext !== void 0 && _mParameters$aContext.length) {
      if (aResult !== null && aResult !== void 0 && aResult.some(oSingleResult => oSingleResult.status === "rejected")) {
        throw aResult;
      }
    }
    const messages = Core.getMessageManager().getMessageModel().getData();
    if (strictHandlingUtilities && strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
      if (!after412) {
        strictHandlingUtilities.delaySuccessMessages = strictHandlingUtilities.delaySuccessMessages.concat(messages);
      } else {
        Core.getMessageManager().addMessages(strictHandlingUtilities.delaySuccessMessages);
        let showGenericErrorMessageForChangeSet = false;
        if (mParameters.bGrouped && strictHandlingUtilities.strictHandlingPromises.length || checkforOtherMessages(mParameters.bGrouped) !== -1) {
          showGenericErrorMessageForChangeSet = true;
        }
        if (messages.length) {
          // BOUND TRANSITION AS PART OF SAP_MESSAGE
          oDialog.attachEventOnce("afterClose", function () {
            messageHandler.showMessageDialog({
              onBeforeShowMessage: function (aMessages, showMessageParametersIn) {
                return actionParameterShowMessageCallback(mParameters, aContexts, oDialog, aMessages, showMessageParametersIn, showGenericErrorMessageForChangeSet);
              },
              control: mParameters.control,
              aSelectedContexts: mParameters.aContexts,
              sActionName: mParameters.label
            });
          });
        }
      }
    } else if (messages.length) {
      // BOUND TRANSITION AS PART OF SAP_MESSAGE
      let showGenericErrorMessageForChangeSet = false;
      if (mParameters.bGrouped && strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length || checkforOtherMessages(mParameters.bGrouped) !== -1) {
        showGenericErrorMessageForChangeSet = true;
      }
      oDialog.attachEventOnce("afterClose", function () {
        messageHandler.showMessageDialog({
          isActionParameterDialogOpen: mParameters === null || mParameters === void 0 ? void 0 : mParameters.oDialog.isOpen(),
          onBeforeShowMessage: function (aMessages, showMessageParametersIn) {
            return actionParameterShowMessageCallback(mParameters, aContexts, oDialog, aMessages, showMessageParametersIn, showGenericErrorMessageForChangeSet);
          },
          control: mParameters.control,
          aSelectedContexts: mParameters.aContexts,
          sActionName: mParameters.label
        });
      });
    }
    return aResult;
  }
  function afterActionResolution(mParameters, mActionExecutionParameters, actionDefinition) {
    if (mActionExecutionParameters.internalModelContext && mActionExecutionParameters.operationAvailableMap && mActionExecutionParameters.aContexts && mActionExecutionParameters.aContexts.length && actionDefinition.$IsBound) {
      //check for skipping static actions
      const isStatic = mActionExecutionParameters.isStatic;
      if (!isStatic) {
        ActionRuntime.setActionEnablement(mActionExecutionParameters.internalModelContext, JSON.parse(mActionExecutionParameters.operationAvailableMap), mParameters.selectedItems, "table");
      } else if (mActionExecutionParameters.control) {
        const oControl = mActionExecutionParameters.control;
        if (oControl.isA("sap.ui.mdc.Table")) {
          const aSelectedContexts = oControl.getSelectedContexts();
          ActionRuntime.setActionEnablement(mActionExecutionParameters.internalModelContext, JSON.parse(mActionExecutionParameters.operationAvailableMap), aSelectedContexts, "table");
        }
      }
    }
  }
  function actionParameterShowMessageCallback(mParameters, aContexts, oDialog, messages, showMessageParametersIn, showGenericErrorMessageForChangeSet) {
    let showMessageBox = showMessageParametersIn.showMessageBox,
      showMessageDialog = showMessageParametersIn.showMessageDialog;
    const oControl = mParameters.control;
    const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
    const unboundMessages = messages.filter(function (message) {
      return message.getTarget() === "";
    });
    const APDmessages = messages.filter(function (message) {
      var _mParameters$aActionP;
      return message.getTarget && message.getTarget().indexOf(mParameters.actionName) !== -1 && (mParameters === null || mParameters === void 0 ? void 0 : (_mParameters$aActionP = mParameters.aActionParameters) === null || _mParameters$aActionP === void 0 ? void 0 : _mParameters$aActionP.some(function (actionParam) {
        return message.getTarget().indexOf(actionParam.$Name) !== -1;
      }));
    });
    APDmessages === null || APDmessages === void 0 ? void 0 : APDmessages.forEach(function (APDMessage) {
      APDMessage.isAPDTarget = true;
    });
    const errorTargetsInAPD = APDmessages.length ? true : false;
    let hasChangeSetModifiedMessage = false;
    if (showGenericErrorMessageForChangeSet && !errorTargetsInAPD) {
      hasChangeSetModifiedMessage = true;
      let sMessage = oResourceBundle.getText("C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_TEXT");
      let sDescriptionText = oResourceBundle.getText("C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_DETAIL_TEXT");
      const messageModel = Core.getMessageManager().getMessageModel();
      const messagesInModel = messageModel.getData();
      const aBoundMessages = messageHandling.getMessages(true);
      let genericMessage;
      const isEditable = oControl && oControl.getModel("ui").getProperty("/isEditable");
      const nonErrorMessageExistsInDialog = messages.findIndex(function (message) {
        return message.getType() === "Error" || message.getType() === "Warning";
      });
      const nonErrorMessageExistsInModel = messagesInModel.findIndex(function (message) {
        return message.getType() === "Error" || message.getType() === "Warning";
      });
      if (nonErrorMessageExistsInDialog !== 1 && nonErrorMessageExistsInModel !== -1) {
        if (messagesInModel.length === 1 && aBoundMessages.length === 1) {
          if (isEditable === false) {
            messagesInModel[0].setMessage(oResourceBundle.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT") + "\n\n" + messagesInModel[0].getMessage());
          } else {
            sMessage = isEditable ? oResourceBundle.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT_EDIT") : oResourceBundle.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT");
            sDescriptionText = "";
            genericMessage = new Message({
              message: sMessage,
              type: MessageType.Error,
              target: "",
              persistent: true,
              description: sDescriptionText,
              code: "FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED"
            });
            messages.unshift(genericMessage);
            if (messages.length === 1) {
              showMessageBox = true;
              showMessageDialog = false;
            } else {
              showMessageDialog = true;
              showMessageBox = false;
            }
          }
        } else {
          genericMessage = new Message({
            message: sMessage,
            type: MessageType.Error,
            target: "",
            persistent: true,
            description: sDescriptionText,
            code: "FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED"
          });
          messages.unshift(genericMessage);
          if (messages.length === 1) {
            showMessageBox = true;
            showMessageDialog = false;
          } else {
            showMessageDialog = true;
            showMessageBox = false;
          }
        }
      }
    }
    if (oDialog && oDialog.isOpen() && aContexts.length !== 0 && !mParameters.isStatic) {
      if (!mParameters.bGrouped) {
        //isolated
        if (aContexts.length > 1 || !errorTargetsInAPD) {
          // does not matter if error is in APD or not, if there are multiple contexts selected or if the error is not the APD, we close it.
          // TODO: Dilaog handling should not be part of message handling. Refactor accordingly - dialog should not be needed inside this method - neither
          // to ask whether it's open, nor to close/destroy it!
          oDialog.close();
          oDialog.destroy();
        }
      } else if (!errorTargetsInAPD) {
        //changeset
        oDialog.close();
        oDialog.destroy();
      }
    }
    let filteredMessages = [];
    const bIsAPDOpen = oDialog && oDialog.isOpen();
    if (!hasChangeSetModifiedMessage) {
      if (messages.length === 1 && messages[0].getTarget && messages[0].getTarget() !== undefined && messages[0].getTarget() !== "") {
        if (oControl && oControl.getModel("ui").getProperty("/isEditable") === false || !oControl) {
          // OP edit or LR
          showMessageBox = !errorTargetsInAPD;
          showMessageDialog = false;
        } else if (oControl && oControl.getModel("ui").getProperty("/isEditable") === true) {
          showMessageBox = false;
          showMessageDialog = false;
        }
      } else if (oControl) {
        if (oControl.getModel("ui").getProperty("/isEditable") === false) {
          if (bIsAPDOpen && errorTargetsInAPD) {
            showMessageDialog = false;
          }
        } else if (oControl.getModel("ui").getProperty("/isEditable") === true) {
          if (!bIsAPDOpen && errorTargetsInAPD) {
            showMessageDialog = true;
            filteredMessages = unboundMessages.concat(APDmessages);
          } else if (!bIsAPDOpen && unboundMessages.length === 0) {
            // error targets in APD => there is atleast one bound message. If there are unbound messages, dialog must be shown.
            // for draft entity, we already closed the APD
            showMessageDialog = false;
          }
        }
      }
    }
    return {
      showMessageBox: showMessageBox,
      showMessageDialog: showMessageDialog,
      filteredMessages: filteredMessages.length ? filteredMessages : messages,
      fnGetMessageSubtitle: oControl && oControl.isA("sap.ui.mdc.Table") && messageHandling.setMessageSubtitle.bind({}, oControl, aContexts),
      showChangeSetErrorDialog: mParameters.bGrouped
    };
  }

  /*
   * Currently, this method is responsible for showing the dialog and executing the action. The promise returned is pending while waiting for user input, as well as while the
   * back-end request is running. The promise is rejected when the user cancels the dialog and also when the back-end request fails.
   * TODO: Refactoring: Separate dialog handling from backend processing. Dialog handling should return a Promise resolving to parameters to be provided to backend. If dialog is
   * cancelled, that promise can be rejected. Method responsible for backend processing need to deal with multiple contexts - i.e. it should either return an array of Promises or
   * a Promise resolving to an array. In the latter case, that Promise should be resolved also when some or even all contexts failed in backend - the overall process still was
   * successful.
   *
   */

  function showActionParameterDialog(sActionName, oAppComponent, sActionLabel, mParameters, aActionParameters, aParameterValues, oActionContext, oParentControl, entitySetName, messageHandler, strictHandlingUtilities) {
    const sPath = _getPath(oActionContext, sActionName),
      metaModel = oActionContext.getModel().oModel.getMetaModel(),
      entitySetContext = metaModel.createBindingContext(sPath),
      sActionNamePath = oActionContext.getObject("$IsBound") ? oActionContext.getPath().split("/@$ui5.overload/0")[0] : oActionContext.getPath().split("/0")[0],
      actionNameContext = metaModel.createBindingContext(sActionNamePath),
      bIsCreateAction = mParameters.isCreateAction,
      sFragmentName = "sap/fe/core/controls/ActionParameterDialog";
    return new Promise(async function (resolve, reject) {
      let actionParameterInfos; // to be filled after fragment (for action parameter dialog) is loaded. Actually only needed during dialog processing, i.e. could be moved into the controller and directly initialized there, but only after moving all handlers (esp. press handler for action button) to controller.

      const messageManager = Core.getMessageManager();
      const _removeMessagesForActionParamter = parameter => {
        const allMessages = messageManager.getMessageModel().getData();
        const controlId = generate(["APD_", parameter.$Name]);
        // also remove messages assigned to inner controls, but avoid removing messages for different paramters (with name being substring of another parameter name)
        const relevantMessages = allMessages.filter(msg => msg.getControlIds().some(id => controlId.split("-").includes(id)));
        messageManager.removeMessages(relevantMessages);
      };
      const oController = {
        handleChange: async function (oEvent) {
          const field = oEvent.getSource();
          const actionParameterInfo = actionParameterInfos.find(actionParameterInfo => actionParameterInfo.field === field);
          // field value is being changed, thus existing messages related to that field are not valid anymore
          _removeMessagesForActionParamter(actionParameterInfo.parameter);
          // adapt info. Promise is resolved to value or rejected with exception containing message
          actionParameterInfo.validationPromise = oEvent.getParameter("promise");
          try {
            actionParameterInfo.value = await actionParameterInfo.validationPromise;
            actionParameterInfo.hasError = false;
          } catch (error) {
            delete actionParameterInfo.value;
            actionParameterInfo.hasError = true;
            _addMessageForActionParameter(messageManager, [{
              actionParameterInfo: actionParameterInfo,
              message: error.message
            }]);
          }
        }
      };
      const oFragment = XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment");
      const oParameterModel = new JSONModel({
        $displayMode: {}
      });
      try {
        const createdFragment = await XMLPreprocessor.process(oFragment, {
          name: sFragmentName
        }, {
          bindingContexts: {
            action: oActionContext,
            actionName: actionNameContext,
            entitySet: entitySetContext
          },
          models: {
            action: oActionContext.getModel(),
            actionName: actionNameContext.getModel(),
            entitySet: entitySetContext.getModel(),
            metaModel: entitySetContext.getModel()
          }
        });
        // TODO: move the dialog into the fragment and move the handlers to the oController
        const aContexts = mParameters.aContexts || [];
        const aFunctionParams = [];
        // eslint-disable-next-line prefer-const
        let oOperationBinding;
        await CommonUtils.setUserDefaults(oAppComponent, aActionParameters, oParameterModel, true);
        const oDialogContent = await Fragment.load({
          definition: createdFragment,
          controller: oController
        });
        actionParameterInfos = aActionParameters.map(actionParameter => {
          const field = Core.byId(generate(["APD_", actionParameter.$Name]));
          const isMultiValue = field.isA("sap.ui.mdc.MultiValueField");
          return {
            parameter: actionParameter,
            field: field,
            isMultiValue: isMultiValue
          };
        });
        const resourceModel = getResourceModel(oParentControl);
        let actionResult = {
          dialogCancelled: true,
          // to be set to false in case of successful action exection
          result: undefined
        };
        const oDialog = new Dialog(generate(["fe", "APD_", sActionName]), {
          title: sActionLabel || resourceModel.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_TITLE"),
          content: [oDialogContent],
          escapeHandler: function () {
            // escape handler is meant to possibly suppress or postpone closing the dialog on escape (by calling "reject" on the provided object, or "resolve" only when
            // done with all tasks to happen before dialog can be closed). It's not intended to explicetly close the dialog here (that happens automatically when no
            // escapeHandler is provided or the resolve-callback is called) or for own wrap up tasks (like removing validition messages - this should happen in the
            // afterClose).
            // TODO: Move wrap up tasks to afterClose, and remove this method completely. Take care to also adapt end button press handler accordingly.
            // Currently only still needed to differentiate closing dialog after successful execution (uses resolve) from user cancellation (using reject)
            oDialog.close();
            //		reject(Constants.CancelActionDialog);
          },

          beginButton: new Button(generate(["fe", "APD_", sActionName, "Action", "Ok"]), {
            text: bIsCreateAction ? resourceModel.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON") : _getActionParameterActionName(resourceModel, sActionLabel, sActionName, entitySetName),
            type: "Emphasized",
            press: async function () {
              try {
                if (!(await _validateProperties(messageManager, actionParameterInfos, resourceModel))) {
                  return;
                }
                BusyLocker.lock(oDialog);
                try {
                  // TODO: due to using the search and value helps on the action dialog transient messages could appear
                  // we need an UX design for those to show them to the user - for now remove them before continuing
                  messageHandler.removeTransitionMessages();
                  // move parameter values from Dialog (SimpleForm) to mParameters.actionParameters so that they are available in the operation bindings for all contexts
                  let vParameterValue;
                  const oParameterContext = oOperationBinding && oOperationBinding.getParameterContext();
                  for (const i in aActionParameters) {
                    if (aActionParameters[i].$isCollection) {
                      const aMVFContent = oDialog.getModel("mvfview").getProperty(`/${aActionParameters[i].$Name}`),
                        aKeyValues = [];
                      for (const j in aMVFContent) {
                        aKeyValues.push(aMVFContent[j].Key);
                      }
                      vParameterValue = aKeyValues;
                    } else {
                      vParameterValue = oParameterContext.getProperty(aActionParameters[i].$Name);
                    }
                    aActionParameters[i].value = vParameterValue; // writing the current value (ueser input!) into the metamodel => should be refactored to use ActionParameterInfos instead. Used in setActionParameterDefaultValue
                    vParameterValue = undefined;
                  }
                  mParameters.label = sActionLabel;
                  try {
                    const aResult = await executeAPMAction(oAppComponent, mParameters, oParentControl, messageHandler, aContexts, oDialog, false, strictHandlingUtilities);
                    actionResult = {
                      dialogCancelled: false,
                      result: aResult
                    };
                    oDialog.close();
                    // resolve(aResult);
                  } catch (oError) {
                    const messages = sap.ui.getCore().getMessageManager().getMessageModel().getData();
                    if (strictHandlingUtilities && strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
                      strictHandlingUtilities.delaySuccessMessages = strictHandlingUtilities.delaySuccessMessages.concat(messages);
                    }
                    throw oError;
                  } finally {
                    if (strictHandlingUtilities && strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
                      try {
                        const strictHandlingFails = strictHandlingUtilities.strictHandlingTransitionFails;
                        const aFailedContexts = [];
                        strictHandlingFails.forEach(function (fail) {
                          aFailedContexts.push(fail.oAction.getContext());
                        });
                        mParameters.aContexts = aFailedContexts;
                        const aResult = await executeAPMAction(oAppComponent, mParameters, oParentControl, messageHandler, aContexts, oDialog, true, strictHandlingUtilities);
                        strictHandlingUtilities.strictHandlingTransitionFails = [];
                        actionResult = {
                          dialogCancelled: false,
                          result: aResult
                        };
                        // resolve(aResult);
                      } catch {
                        if (strictHandlingUtilities.is412Executed && strictHandlingUtilities.strictHandlingTransitionFails.length) {
                          Core.getMessageManager().addMessages(strictHandlingUtilities.delaySuccessMessages);
                        }
                        let showGenericErrorMessageForChangeSet = false;
                        if (mParameters.bGrouped && strictHandlingUtilities.strictHandlingPromises.length || checkforOtherMessages(mParameters.bGrouped) !== -1) {
                          showGenericErrorMessageForChangeSet = true;
                        }
                        await messageHandler.showMessageDialog({
                          isActionParameterDialogOpen: oDialog.isOpen(),
                          onBeforeShowMessage: function (aMessages, showMessageParametersIn) {
                            return actionParameterShowMessageCallback(mParameters, aContexts, oDialog, aMessages, showMessageParametersIn, showGenericErrorMessageForChangeSet);
                          },
                          aSelectedContexts: mParameters.aContexts,
                          sActionName: sActionLabel
                        });
                      }
                    }
                    if (BusyLocker.isLocked(oDialog)) {
                      BusyLocker.unlock(oDialog);
                    }
                  }
                } catch (oError) {
                  let showMessageDialog = true;
                  let showGenericErrorMessageForChangeSet = false;
                  if (mParameters.bGrouped && strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length || checkforOtherMessages(mParameters.bGrouped) !== -1) {
                    showGenericErrorMessageForChangeSet = true;
                  }
                  await messageHandler.showMessages({
                    context: mParameters.aContexts[0],
                    isActionParameterDialogOpen: oDialog.isOpen(),
                    messagePageNavigationCallback: function () {
                      oDialog.close();
                    },
                    onBeforeShowMessage: function (aMessages, showMessageParametersIn) {
                      // Why is this implemented as callback? Apparently, all needed information is available beforehand
                      // TODO: refactor accordingly
                      const showMessageParameters = actionParameterShowMessageCallback(mParameters, aContexts, oDialog, aMessages, showMessageParametersIn, showGenericErrorMessageForChangeSet);
                      showMessageDialog = showMessageParameters.showMessageDialog;
                      return showMessageParameters;
                    },
                    aSelectedContexts: mParameters.aContexts,
                    sActionName: sActionLabel,
                    control: mParameters.control
                  });

                  // In case of backend validation error(s?), message shall not be shown in message dialog but next to the field on parameter dialog, which should
                  // stay open in this case => in this case, we must not resolve or reject the promise controlling the parameter dialog.
                  // In all other cases (e.g. other backend errors or user cancellation), the promise controlling the parameter dialog needs to be rejected to allow
                  // callers to react. (Example: If creation in backend after navigation to transient context fails, back navigation needs to be triggered)
                  // TODO: Refactor to separate dialog handling from backend request istead of taking decision based on message handling
                  if (showMessageDialog) {
                    if (oDialog.isOpen()) {
                      // do nothing, do not reject promise here
                      // We do not close the APM dialog if user enters a wrong value in of the fields that results in an error from the backend.
                      // The user can close the message dialog and the APM dialog would still be open on which he could enter a new value and trigger the action again.
                      // Earlier we were rejecting the promise on error here, and the call stack was destroyed as the promise was rejected and returned to EditFlow invoke action.
                      // But since the APM dialog was still open, a new promise was resolved in case the user retried the action and the object was created, but the navigation to object page was not taking place.
                    } else {
                      reject(oError);
                    }
                  }
                }
              } finally {
                if (strictHandlingUtilities) {
                  strictHandlingUtilities = {
                    is412Executed: false,
                    strictHandlingTransitionFails: [],
                    strictHandlingPromises: [],
                    strictHandlingWarningMessages: [],
                    delaySuccessMessages: [],
                    processedMessageIds: []
                  };
                }
                if (BusyLocker.isLocked(oDialog)) {
                  BusyLocker.unlock(oDialog);
                }
              }
            }
          }),
          endButton: new Button(generate(["fe", "APD_", sActionName, "Action", "Cancel"]), {
            text: resourceModel.getText("C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL"),
            press: function () {
              // TODO: cancel button should just close the dialog (similar to using escape). All wrap up tasks should be moved to afterClose.
              oDialog.close();
              // reject(Constants.CancelActionDialog);
            }
          }),

          // TODO: beforeOpen is just an event, i.e. not waiting for the Promise to be resolved. Check if tasks of this function need to be done before opening the dialog
          // - if yes, they need to be moved outside.
          // Assumption: Sometimes dialog can be seen without any fields for a short time - maybe this is caused by this asynchronity
          beforeOpen: async function (oEvent) {
            // clone event for actionWrapper as oEvent.oSource gets lost during processing of beforeOpen event handler
            const oCloneEvent = Object.assign({}, oEvent);
            messageHandler.removeTransitionMessages();
            const getDefaultValuesFunction = function () {
              const oMetaModel = oDialog.getModel().getMetaModel(),
                sActionPath = oActionContext.sPath && oActionContext.sPath.split("/@")[0],
                sDefaultValuesFunction = oMetaModel.getObject(`${sActionPath}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`);
              return sDefaultValuesFunction;
            };
            const fnSetDefaultsAndOpenDialog = async function (sBindingParameter) {
              const sBoundFunctionName = getDefaultValuesFunction();
              const prefillParameter = async function (sParamName, vParamDefaultValue) {
                // Case 1: There is a ParameterDefaultValue annotation
                if (vParamDefaultValue !== undefined) {
                  if (aContexts.length > 0 && vParamDefaultValue.$Path) {
                    try {
                      let vParamValue = await CommonUtils.requestSingletonProperty(vParamDefaultValue.$Path, oOperationBinding.getModel());
                      if (vParamValue === null) {
                        vParamValue = await oOperationBinding.getParameterContext().requestProperty(vParamDefaultValue.$Path);
                      }
                      if (aContexts.length > 1) {
                        // For multi select, need to loop over aContexts (as contexts cannot be retrieved via binding parameter of the operation binding)
                        let sPathForContext = vParamDefaultValue.$Path;
                        if (sPathForContext.indexOf(`${sBindingParameter}/`) === 0) {
                          sPathForContext = sPathForContext.replace(`${sBindingParameter}/`, "");
                        }
                        for (let i = 1; i < aContexts.length; i++) {
                          if (aContexts[i].getProperty(sPathForContext) !== vParamValue) {
                            // if the values from the contexts are not all the same, do not prefill
                            return {
                              paramName: sParamName,
                              value: undefined,
                              bNoPossibleValue: true
                            };
                          }
                        }
                      }
                      return {
                        paramName: sParamName,
                        value: vParamValue
                      };
                    } catch (oError) {
                      Log.error("Error while reading default action parameter", sParamName, mParameters.actionName);
                      return {
                        paramName: sParamName,
                        value: undefined,
                        bLatePropertyError: true
                      };
                    }
                  } else {
                    // Case 1.2: ParameterDefaultValue defines a fixed string value (i.e. vParamDefaultValue = 'someString')
                    return {
                      paramName: sParamName,
                      value: vParamDefaultValue
                    };
                  }
                } else if (oParameterModel && oParameterModel.oData[sParamName]) {
                  // Case 2: There is no ParameterDefaultValue annotation (=> look into the FLP User Defaults)

                  return {
                    paramName: sParamName,
                    value: oParameterModel.oData[sParamName]
                  };
                } else {
                  return {
                    paramName: sParamName,
                    value: undefined
                  };
                }
              };
              const getParameterDefaultValue = function (sParamName) {
                const oMetaModel = oDialog.getModel().getMetaModel(),
                  sActionParameterAnnotationPath = CommonUtils.getParameterPath(oActionContext.getPath(), sParamName) + "@",
                  oParameterAnnotations = oMetaModel.getObject(sActionParameterAnnotationPath),
                  oParameterDefaultValue = oParameterAnnotations && oParameterAnnotations["@com.sap.vocabularies.UI.v1.ParameterDefaultValue"]; // either { $Path: 'somePath' } or 'someString'
                return oParameterDefaultValue;
              };
              const aCurrentParamDefaultValue = [];
              let sParamName, vParameterDefaultValue;
              for (const i in aActionParameters) {
                sParamName = aActionParameters[i].$Name;
                vParameterDefaultValue = getParameterDefaultValue(sParamName);
                aCurrentParamDefaultValue.push(prefillParameter(sParamName, vParameterDefaultValue));
              }
              if (oActionContext.getObject("$IsBound") && aContexts.length > 0) {
                if (sBoundFunctionName && sBoundFunctionName.length > 0 && typeof sBoundFunctionName === "string") {
                  for (const i in aContexts) {
                    aFunctionParams.push(callBoundFunction(sBoundFunctionName, aContexts[i], mParameters.model));
                  }
                }
              }
              const aPrefillParamPromises = Promise.all(aCurrentParamDefaultValue);
              let aExecFunctionPromises = Promise.resolve([]);
              let oExecFunctionFromManifestPromise;
              if (aFunctionParams && aFunctionParams.length > 0) {
                aExecFunctionPromises = Promise.all(aFunctionParams);
              }
              if (mParameters.defaultValuesExtensionFunction) {
                const sModule = mParameters.defaultValuesExtensionFunction.substring(0, mParameters.defaultValuesExtensionFunction.lastIndexOf(".") || -1).replace(/\./gi, "/"),
                  sFunctionName = mParameters.defaultValuesExtensionFunction.substring(mParameters.defaultValuesExtensionFunction.lastIndexOf(".") + 1, mParameters.defaultValuesExtensionFunction.length);
                oExecFunctionFromManifestPromise = FPMHelper.actionWrapper(oCloneEvent, sModule, sFunctionName, {
                  contexts: aContexts
                });
              }
              try {
                const aPromises = await Promise.all([aPrefillParamPromises, aExecFunctionPromises, oExecFunctionFromManifestPromise]);
                const currentParamDefaultValue = aPromises[0];
                const functionParams = aPromises[1];
                const oFunctionParamsFromManifest = aPromises[2];
                let sDialogParamName;

                // Fill the dialog with the earlier determined parameter values from the different sources
                for (const i in aActionParameters) {
                  var _aParameterValues$fin2;
                  sDialogParamName = aActionParameters[i].$Name;
                  // Parameter values provided in the call of invokeAction overrule other sources
                  const vParameterProvidedValue = aParameterValues === null || aParameterValues === void 0 ? void 0 : (_aParameterValues$fin2 = aParameterValues.find(element => element.name === aActionParameters[i].$Name)) === null || _aParameterValues$fin2 === void 0 ? void 0 : _aParameterValues$fin2.value;
                  if (vParameterProvidedValue) {
                    oOperationBinding.setParameter(aActionParameters[i].$Name, vParameterProvidedValue);
                  } else if (oFunctionParamsFromManifest && oFunctionParamsFromManifest.hasOwnProperty(sDialogParamName)) {
                    oOperationBinding.setParameter(aActionParameters[i].$Name, oFunctionParamsFromManifest[sDialogParamName]);
                  } else if (currentParamDefaultValue[i] && currentParamDefaultValue[i].value !== undefined) {
                    oOperationBinding.setParameter(aActionParameters[i].$Name, currentParamDefaultValue[i].value);
                    // if the default value had not been previously determined due to different contexts, we do nothing else
                  } else if (sBoundFunctionName && !currentParamDefaultValue[i].bNoPossibleValue) {
                    if (aContexts.length > 1) {
                      // we check if the function retrieves the same param value for all the contexts:
                      let j = 0;
                      while (j < aContexts.length - 1) {
                        if (functionParams[j] && functionParams[j + 1] && functionParams[j].getObject(sDialogParamName) === functionParams[j + 1].getObject(sDialogParamName)) {
                          j++;
                        } else {
                          break;
                        }
                      }
                      //param values are all the same:
                      if (j === aContexts.length - 1) {
                        oOperationBinding.setParameter(aActionParameters[i].$Name, functionParams[j].getObject(sDialogParamName));
                      }
                    } else if (functionParams[0] && functionParams[0].getObject(sDialogParamName)) {
                      //Only one context, then the default param values are to be verified from the function:

                      oOperationBinding.setParameter(aActionParameters[i].$Name, functionParams[0].getObject(sDialogParamName));
                    }
                  }
                }
                const bErrorFound = currentParamDefaultValue.some(function (oValue) {
                  if (oValue.bLatePropertyError) {
                    return oValue.bLatePropertyError;
                  }
                });
                // If at least one Default Property is a Late Property and an eTag error was raised.
                if (bErrorFound) {
                  const sText = resourceModel.getText("C_APP_COMPONENT_SAPFE_ETAG_LATE_PROPERTY");
                  MessageBox.warning(sText, {
                    contentWidth: "25em"
                  });
                }
              } catch (oError) {
                Log.error("Error while retrieving the parameter", oError);
              }
            };
            const fnAsyncBeforeOpen = async function () {
              if (oActionContext.getObject("$IsBound") && aContexts.length > 0) {
                const aParameters = oActionContext.getObject("$Parameter");
                const sBindingParameter = aParameters[0] && aParameters[0].$Name;
                try {
                  const oContextObject = await aContexts[0].requestObject();
                  if (oContextObject) {
                    oOperationBinding.setParameter(sBindingParameter, oContextObject);
                  }
                  await fnSetDefaultsAndOpenDialog(sBindingParameter);
                } catch (oError) {
                  Log.error("Error while retrieving the parameter", oError);
                }
              } else {
                await fnSetDefaultsAndOpenDialog();
              }
            };
            await fnAsyncBeforeOpen();

            // adding defaulted values only here after they are not set to the fields
            for (const actionParameterInfo of actionParameterInfos) {
              const value = actionParameterInfo.isMultiValue ? actionParameterInfo.field.getItems() : actionParameterInfo.field.getValue();
              actionParameterInfo.value = value;
              actionParameterInfo.validationPromise = Promise.resolve(value);
            }
          },
          afterClose: function () {
            // when the dialog is cancelled, messages need to be removed in case the same action should be executed again
            aActionParameters.forEach(_removeMessagesForActionParamter);
            oDialog.destroy();
            if (actionResult.dialogCancelled) {
              reject(Constants.CancelActionDialog);
            } else {
              resolve(actionResult.result);
            }
          }
        });
        mParameters.oDialog = oDialog;
        oDialog.setModel(oActionContext.getModel().oModel);
        oDialog.setModel(oParameterModel, "paramsModel");
        oDialog.bindElement({
          path: "/",
          model: "paramsModel"
        });

        // empty model to add elements dynamically depending on number of MVF fields defined on the dialog
        const oMVFModel = new JSONModel({});
        oDialog.setModel(oMVFModel, "mvfview");

        /* Event needed for removing messages of valid changed field */
        for (const actionParameterInfo of actionParameterInfos) {
          if (actionParameterInfo.isMultiValue) {
            var _actionParameterInfo$, _actionParameterInfo$2;
            actionParameterInfo === null || actionParameterInfo === void 0 ? void 0 : (_actionParameterInfo$ = actionParameterInfo.field) === null || _actionParameterInfo$ === void 0 ? void 0 : (_actionParameterInfo$2 = _actionParameterInfo$.getBinding("items")) === null || _actionParameterInfo$2 === void 0 ? void 0 : _actionParameterInfo$2.attachChange(() => {
              _removeMessagesForActionParamter(actionParameterInfo.parameter);
            });
          } else {
            var _actionParameterInfo$3, _actionParameterInfo$4;
            actionParameterInfo === null || actionParameterInfo === void 0 ? void 0 : (_actionParameterInfo$3 = actionParameterInfo.field) === null || _actionParameterInfo$3 === void 0 ? void 0 : (_actionParameterInfo$4 = _actionParameterInfo$3.getBinding("value")) === null || _actionParameterInfo$4 === void 0 ? void 0 : _actionParameterInfo$4.attachChange(() => {
              _removeMessagesForActionParamter(actionParameterInfo.parameter);
            });
          }
        }
        let sActionPath = `${sActionName}(...)`;
        if (!aContexts.length) {
          sActionPath = `/${sActionPath}`;
        }
        oDialog.bindElement({
          path: sActionPath
        });
        if (oParentControl) {
          // if there is a parent control specified add the dialog as dependent
          oParentControl.addDependent(oDialog);
        }
        if (aContexts.length > 0) {
          oDialog.setBindingContext(aContexts[0]); // use context of first selected line item
        }

        oOperationBinding = oDialog.getObjectBinding();
        oDialog.open();
      } catch (oError) {
        reject(oError);
      }
    });
  }
  function getActionParameters(oAction) {
    const aParameters = oAction.getObject("$Parameter") || [];
    if (aParameters && aParameters.length) {
      if (oAction.getObject("$IsBound")) {
        //in case of bound actions, ignore the first parameter and consider the rest
        return aParameters.slice(1, aParameters.length) || [];
      }
    }
    return aParameters;
  }
  function getIsActionCritical(oMetaModel, sPath, contexts, oBoundAction) {
    const vActionCritical = oMetaModel.getObject(`${sPath}@com.sap.vocabularies.Common.v1.IsActionCritical`);
    let sCriticalPath = vActionCritical && vActionCritical.$Path;
    if (!sCriticalPath) {
      // the static value scenario for isActionCritical
      return !!vActionCritical;
    }
    const aBindingParams = oBoundAction && oBoundAction.getObject("$Parameter"),
      aPaths = sCriticalPath && sCriticalPath.split("/"),
      bCondition = aBindingParams && aBindingParams.length && typeof aBindingParams === "object" && sCriticalPath && contexts && contexts.length;
    if (bCondition) {
      //in case binding patameters are there in path need to remove eg: - _it/isVerified => need to remove _it and the path should be isVerified
      aBindingParams.filter(function (oParams) {
        const index = aPaths && aPaths.indexOf(oParams.$Name);
        if (index > -1) {
          aPaths.splice(index, 1);
        }
      });
      sCriticalPath = aPaths.join("/");
      return contexts[0].getObject(sCriticalPath);
    } else if (sCriticalPath) {
      //if scenario is path based return the path value
      return contexts[0].getObject(sCriticalPath);
    }
  }
  function _getActionParameterActionName(resourceModel, sActionLabel, sActionName, sEntitySetName) {
    let boundActionName = sActionName ? sActionName : null;
    const aActionName = boundActionName.split(".");
    boundActionName = boundActionName.indexOf(".") >= 0 ? aActionName[aActionName.length - 1] : boundActionName;
    const suffixResourceKey = boundActionName && sEntitySetName ? `${sEntitySetName}|${boundActionName}` : "";
    const sKey = "ACTION_PARAMETER_DIALOG_ACTION_NAME";
    const bResourceKeyExists = resourceModel.checkIfResourceKeyExists(`${sKey}|${suffixResourceKey}`);
    if (sActionLabel) {
      if (bResourceKeyExists) {
        return resourceModel.getText(sKey, undefined, suffixResourceKey);
      } else if (resourceModel.checkIfResourceKeyExists(`${sKey}|${sEntitySetName}`)) {
        return resourceModel.getText(sKey, undefined, `${sEntitySetName}`);
      } else if (resourceModel.checkIfResourceKeyExists(`${sKey}`)) {
        return resourceModel.getText(sKey);
      } else {
        return sActionLabel;
      }
    } else {
      return resourceModel.getText("C_COMMON_DIALOG_OK");
    }
  }
  function executeDependingOnSelectedContexts(oAction, mParameters, bGetBoundContext, sGroupId, resourceModel, messageHandler, iContextLength, current_context_index, internalOperationsPromiseResolve, internalOperationsPromiseReject, strictHandlingUtilities) {
    let oActionPromise,
      bEnableStrictHandling = true;
    if (mParameters) {
      mParameters.internalOperationsPromiseResolve = internalOperationsPromiseResolve;
    }
    if (bGetBoundContext) {
      var _oProperty$;
      const sPath = oAction.getBoundContext().getPath();
      const sMetaPath = oAction.getModel().getMetaModel().getMetaPath(sPath);
      const oProperty = oAction.getModel().getMetaModel().getObject(sMetaPath);
      if (oProperty && ((_oProperty$ = oProperty[0]) === null || _oProperty$ === void 0 ? void 0 : _oProperty$.$kind) !== "Action") {
        //do not enable the strict handling if its not an action
        bEnableStrictHandling = false;
      }
    }
    if (!bEnableStrictHandling) {
      oActionPromise = oAction.execute(sGroupId).then(function () {
        internalOperationsPromiseResolve(oAction.getBoundContext());
        return oAction.getBoundContext();
      });
    } else {
      oActionPromise = bGetBoundContext ? oAction.execute(sGroupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(operations, sGroupId, mParameters, resourceModel, current_context_index, oAction.getContext(), iContextLength, messageHandler, strictHandlingUtilities)).then(function () {
        if (strictHandlingUtilities && !mParameters.bGrouped) {
          update412TransistionMessages(oAction, sGroupId, strictHandlingUtilities, mParameters);
        }
        internalOperationsPromiseResolve(oAction.getBoundContext());
        return oAction.getBoundContext();
      }).catch(function () {
        if (strictHandlingUtilities && !mParameters.bGrouped) {
          update412TransistionMessages(oAction, sGroupId, strictHandlingUtilities, mParameters);
        }
        internalOperationsPromiseReject();
        return Promise.reject();
      }) : oAction.execute(sGroupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(operations, sGroupId, mParameters, resourceModel, current_context_index, oAction.getContext(), iContextLength, messageHandler, strictHandlingUtilities)).then(function (result) {
        if (strictHandlingUtilities && !mParameters.bGrouped) {
          update412TransistionMessages(oAction, sGroupId, strictHandlingUtilities, mParameters);
        }
        internalOperationsPromiseResolve(result);
        return result;
      }).catch(function () {
        if (strictHandlingUtilities && !mParameters.bGrouped) {
          update412TransistionMessages(oAction, sGroupId, strictHandlingUtilities, mParameters);
        }
        internalOperationsPromiseReject();
        return Promise.reject();
      });
    }
    return oActionPromise.catch(() => {
      throw Constants.ActionExecutionFailed;
    });
  }
  /**
   * Updates the strictHandlingUtilites with the failed and successful transisition messages.
   *
   * @function
   * @static
   * @name update412TransistionMessages
   * @param oAction Action executed
   * @param sGroupId GroupId of the batch
   * @param [mParameters] Optional, contains attributes related to strickHandling
   * @param [strictHandlingUtilities] Optional, utility flags and messages for strictHandling
   * @returns Updated StrictHandlingUtilties
   * @private
   */
  function update412TransistionMessages(oAction, sGroupId, strictHandlingUtilities, mParameters) {
    const messages = sap.ui.getCore().getMessageManager().getMessageModel().getData();
    let {
      processedMessageIds,
      delaySuccessMessages,
      strictHandlingTransitionFails
    } = strictHandlingUtilities;
    const transitionMessages = messages.filter(function (message) {
      //check if the transistion messages is already processed
      const isDuplicate = processedMessageIds.find(function (id) {
        return message.id === id;
      });
      // update the strictHandling with the success messages which needs to be shown later
      if (!isDuplicate) {
        processedMessageIds.push(message.id);
        if (message.type === MessageType.Success) {
          delaySuccessMessages.push(message);
        }
      }
      return message.persistent === true && message.type !== MessageType.Success && !isDuplicate;
    });
    //update the strictHandlingUtilites with the failed transistion messages which needs to be retriggered
    if (transitionMessages.length) {
      if (mParameters !== null && mParameters !== void 0 && mParameters.internalModelContext) {
        strictHandlingTransitionFails.push({
          oAction: oAction,
          groupId: sGroupId
        });
      }
    }
  }
  function createinternalOperationsPromiseForActionExecution() {
    let internalOperationsPromiseResolve = null,
      internalOperationsPromiseReject = null;
    const oLocalActionPromise = new Promise(function (resolve, reject) {
      internalOperationsPromiseResolve = resolve;
      internalOperationsPromiseReject = reject;
    }).catch(function (oError) {
      Log.error("Error while executing action ", oError);
    });
    return {
      oLocalActionPromise,
      internalOperationsPromiseResolve,
      internalOperationsPromiseReject
    };
  }
  function checkforOtherMessages(isChangeSet) {
    if (isChangeSet) {
      const aMessages = messageHandling.getMessages();
      return aMessages.findIndex(function (message) {
        return message.getType() === "Error" || message.getType() === "Warning";
      });
    }
    return -1;
  }
  function _executeAction(oAppComponent, mParameters, oParentControl, messageHandler, strictHandlingUtilities) {
    const aContexts = mParameters.aContexts || [];
    const oModel = mParameters.model;
    const aActionParameters = mParameters.aActionParameters || [];
    const sActionName = mParameters.actionName;
    const fnOnSubmitted = mParameters.fnOnSubmitted;
    const fnOnResponse = mParameters.fnOnResponse;
    const resourceModel = getResourceModel(oParentControl);
    let oAction;
    function setActionParameterDefaultValue() {
      if (aActionParameters && aActionParameters.length) {
        for (let j = 0; j < aActionParameters.length; j++) {
          if (!aActionParameters[j].value) {
            switch (aActionParameters[j].$Type) {
              case "Edm.String":
                aActionParameters[j].value = "";
                break;
              case "Edm.Boolean":
                aActionParameters[j].value = false;
                break;
              case "Edm.Byte":
              case "Edm.Int16":
              case "Edm.Int32":
              case "Edm.Int64":
                aActionParameters[j].value = 0;
                break;
              // tbc
              default:
                break;
            }
          }
          oAction.setParameter(aActionParameters[j].$Name, aActionParameters[j].value);
        }
      }
    }
    if (aContexts.length) {
      // TODO: refactor to direct use of Promise.allSettled
      return new Promise(function (resolve) {
        const mBindingParameters = mParameters.mBindingParameters;
        const bGrouped = mParameters.bGrouped;
        const bGetBoundContext = mParameters.bGetBoundContext;
        const aActionPromises = [];
        let oActionPromise;
        let i;
        let sGroupId;
        const ointernalOperationsPromiseObject = createinternalOperationsPromiseForActionExecution();
        const fnExecuteAction = function (actionContext, current_context_index, oSideEffect, iContextLength) {
          setActionParameterDefaultValue();
          const individualActionPromise = [];
          // For invocation grouping "isolated" need batch group per action call
          sGroupId = !bGrouped ? `$auto.${current_context_index}` : actionContext.getUpdateGroupId();
          mParameters.requestSideEffects = fnRequestSideEffects.bind(operations, oAppComponent, oSideEffect, mParameters, sGroupId, individualActionPromise);
          oActionPromise = executeDependingOnSelectedContexts(actionContext, mParameters, bGetBoundContext, sGroupId, resourceModel, messageHandler, iContextLength, current_context_index, ointernalOperationsPromiseObject.internalOperationsPromiseResolve, ointernalOperationsPromiseObject.internalOperationsPromiseReject, strictHandlingUtilities);
          aActionPromises.push(oActionPromise);
          individualActionPromise.push(ointernalOperationsPromiseObject.oLocalActionPromise);
          fnRequestSideEffects(oAppComponent, oSideEffect, mParameters, sGroupId, individualActionPromise);
          return Promise.allSettled(individualActionPromise);
        };
        const fnExecuteSingleAction = function (actionContext, current_context_index, oSideEffect, iContextLength) {
          const individualActionPromise = [];
          setActionParameterDefaultValue();
          // For invocation grouping "isolated" need batch group per action call
          sGroupId = `apiMode${current_context_index}`;
          mParameters.requestSideEffects = fnRequestSideEffects.bind(operations, oAppComponent, oSideEffect, mParameters, sGroupId, individualActionPromise);
          oActionPromise = executeDependingOnSelectedContexts(actionContext, mParameters, bGetBoundContext, sGroupId, resourceModel, messageHandler, iContextLength, current_context_index, ointernalOperationsPromiseObject.internalOperationsPromiseResolve, ointernalOperationsPromiseObject.internalOperationsPromiseReject, strictHandlingUtilities);
          aActionPromises.push(oActionPromise);
          individualActionPromise.push(ointernalOperationsPromiseObject.oLocalActionPromise);
          fnRequestSideEffects(oAppComponent, oSideEffect, mParameters, sGroupId, individualActionPromise);
          oModel.submitBatch(sGroupId);
          return Promise.allSettled(individualActionPromise);
        };
        async function fnExecuteChangeset() {
          const aChangeSetLocalPromises = [];
          for (i = 0; i < aContexts.length; i++) {
            oAction = oModel.bindContext(`${sActionName}(...)`, aContexts[i], mBindingParameters);
            aChangeSetLocalPromises.push(fnExecuteAction(oAction, aContexts.length <= 1 ? null : i, {
              context: aContexts[i],
              pathExpressions: mParameters.additionalSideEffect && mParameters.additionalSideEffect.pathExpressions,
              triggerActions: mParameters.additionalSideEffect && mParameters.additionalSideEffect.triggerActions
            }, aContexts.length));
          }
          (fnOnSubmitted || function noop() {
            /**/
          })(aActionPromises);
          await Promise.allSettled(aChangeSetLocalPromises);
          if (strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length) {
            try {
              const otherErrorMessageIndex = checkforOtherMessages(true);
              if (otherErrorMessageIndex === -1) {
                await operationsHelper.renderMessageView(mParameters, resourceModel, messageHandler, strictHandlingUtilities.strictHandlingWarningMessages, strictHandlingUtilities, aContexts.length > 1);
              } else {
                strictHandlingUtilities.strictHandlingPromises.forEach(function (shPromise) {
                  shPromise.resolve(false);
                });
                const messageModel = Core.getMessageManager().getMessageModel();
                const messagesInModel = messageModel.getData();
                messageModel.setData(messagesInModel.concat(strictHandlingUtilities.strictHandlingWarningMessages));
              }
            } catch {
              Log.error("Retriggering of strict handling actions failed");
            }
          }
          fnHandleResults();
        }
        async function fnExecuteSequentially(contextsToExecute) {
          // One action and its side effects are completed before the next action is executed
          (fnOnSubmitted || function noop() {
            /**/
          })(aActionPromises);
          function processOneAction(context, actionIndex, iContextLength) {
            oAction = oModel.bindContext(`${sActionName}(...)`, context, mBindingParameters);
            return fnExecuteSingleAction(oAction, actionIndex, {
              context: context,
              pathExpressions: mParameters.additionalSideEffect && mParameters.additionalSideEffect.pathExpressions,
              triggerActions: mParameters.additionalSideEffect && mParameters.additionalSideEffect.triggerActions
            }, iContextLength);
          }

          // serialization: processOneAction to be called for each entry in contextsToExecute only after the promise returned from the one before has been resolved
          await contextsToExecute.reduce(async (promise, context, id) => {
            await promise;
            await processOneAction(context, id + 1, aContexts.length);
          }, Promise.resolve());
          if (strictHandlingUtilities && strictHandlingUtilities.strictHandlingPromises.length) {
            await operationsHelper.renderMessageView(mParameters, resourceModel, messageHandler, strictHandlingUtilities.strictHandlingWarningMessages, strictHandlingUtilities, aContexts.length > 1);
          }
          fnHandleResults();
        }
        if (!bGrouped) {
          // For invocation grouping "isolated", ensure that each action and matching side effects
          // are processed before the next set is submitted. Workaround until JSON batch is available.
          // Allow also for List Report.
          fnExecuteSequentially(aContexts);
        } else {
          fnExecuteChangeset();
        }
        function fnHandleResults() {
          // Promise.allSettled will never be rejected. However, eslint requires either catch or return - thus we return the resulting Promise although no one will use it.
          return Promise.allSettled(aActionPromises).then(resolve);
        }
      }).finally(function () {
        (fnOnResponse || function noop() {
          /**/
        })();
      });
    } else {
      oAction = oModel.bindContext(`/${sActionName}(...)`);
      setActionParameterDefaultValue();
      const sGroupId = "actionImport";
      const oActionPromise = oAction.execute(sGroupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(operations, sGroupId, {
        label: mParameters.label,
        model: oModel
      }, resourceModel, null, null, null, messageHandler, strictHandlingUtilities));
      oModel.submitBatch(sGroupId);
      // trigger onSubmitted "event"
      (fnOnSubmitted || function noop() {
        /**/
      })(oActionPromise);
      return oActionPromise.then(function (currentPromiseValue) {
        // Here we ensure that we return the response we got from an unbound action to the
        // caller BCP : 2270139279
        if (currentPromiseValue) {
          return currentPromiseValue;
        } else {
          var _oAction$getBoundCont, _oAction, _oAction$getBoundCont2;
          return (_oAction$getBoundCont = (_oAction = oAction).getBoundContext) === null || _oAction$getBoundCont === void 0 ? void 0 : (_oAction$getBoundCont2 = _oAction$getBoundCont.call(_oAction)) === null || _oAction$getBoundCont2 === void 0 ? void 0 : _oAction$getBoundCont2.getObject();
        }
      }).catch(function (oError) {
        Log.error("Error while executing action " + sActionName, oError);
        throw oError;
      }).finally(function () {
        (fnOnResponse || function noop() {
          /**/
        })();
      });
    }
  }
  function _getPath(oActionContext, sActionName) {
    let sPath = oActionContext.getPath();
    sPath = oActionContext.getObject("$IsBound") ? sPath.split("@$ui5.overload")[0] : sPath.split("/0")[0];
    return sPath.split(`/${sActionName}`)[0];
  }
  function _valuesProvidedForAllParameters(isCreateAction, actionParameters, parameterValues, startupParameters) {
    if (parameterValues) {
      // If showDialog is false but there are parameters from the invokeAction call, we need to check that values have been
      // provided for all of them
      for (const actionParameter of actionParameters) {
        if (actionParameter.$Name !== "ResultIsActiveEntity" && !(parameterValues !== null && parameterValues !== void 0 && parameterValues.find(element => element.name === actionParameter.$Name))) {
          // At least for one parameter no value has been provided, so we can't skip the dialog
          return false;
        }
      }
    } else if (isCreateAction && startupParameters) {
      // If parameters have been provided during application launch, we need to check if the set is complete
      // If not, the parameter dialog still needs to be shown.
      for (const actionParameter of actionParameters) {
        if (!startupParameters[actionParameter.$Name]) {
          // At least for one parameter no value has been provided, so we can't skip the dialog
          return false;
        }
      }
    }
    return true;
  }
  function fnRequestSideEffects(oAppComponent, oSideEffect, mParameters, sGroupId, aLocalPromise) {
    const oSideEffectsService = oAppComponent.getSideEffectsService();
    let oLocalPromise;
    // trigger actions from side effects
    if (oSideEffect && oSideEffect.triggerActions && oSideEffect.triggerActions.length) {
      oSideEffect.triggerActions.forEach(function (sTriggerAction) {
        if (sTriggerAction) {
          oLocalPromise = oSideEffectsService.executeAction(sTriggerAction, oSideEffect.context, sGroupId);
          if (aLocalPromise) {
            aLocalPromise.push(oLocalPromise);
          }
        }
      });
    }
    // request side effects for this action
    // as we move the messages request to POST $select we need to be prepared for an empty array
    if (oSideEffect && oSideEffect.pathExpressions && oSideEffect.pathExpressions.length > 0) {
      oLocalPromise = oSideEffectsService.requestSideEffects(oSideEffect.pathExpressions, oSideEffect.context, sGroupId);
      if (aLocalPromise) {
        aLocalPromise.push(oLocalPromise);
      }
      oLocalPromise.then(function () {
        if (mParameters.operationAvailableMap && mParameters.internalModelContext) {
          ActionRuntime.setActionEnablement(mParameters.internalModelContext, JSON.parse(mParameters.operationAvailableMap), mParameters.selectedItems, "table");
        }
      }).catch(function (oError) {
        Log.error("Error while requesting side effects", oError);
      });
    }
  }

  /**
   * Static functions to call OData actions (bound/import) and functions (bound/import)
   *
   * @namespace
   * @alias sap.fe.core.actions.operations
   * @private
   * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
   * @since 1.56.0
   */
  const operations = {
    callBoundAction: callBoundAction,
    callActionImport: callActionImport,
    callBoundFunction: callBoundFunction,
    callFunctionImport: callFunctionImport,
    executeDependingOnSelectedContexts: executeDependingOnSelectedContexts,
    createinternalOperationsPromiseForActionExecution: createinternalOperationsPromiseForActionExecution,
    valuesProvidedForAllParameters: _valuesProvidedForAllParameters,
    getActionParameterActionName: _getActionParameterActionName,
    actionParameterShowMessageCallback: actionParameterShowMessageCallback,
    afterActionResolution: afterActionResolution,
    checkforOtherMessages: checkforOtherMessages
  };
  return operations;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/operations/facade", ["sap/base/Log","sap/fe/core/ActionRuntime","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/helpers/FPMHelper","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/library","sap/m/Button","sap/m/Dialog","sap/m/MessageBox","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/library","sap/ui/core/message/Message","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/model/json/JSONModel","../../../operationsHelper","./_internal"],function(e,t,n,s,i,o,a,r,l,c,u,d,g,f,m,p,h,M,E,P,C){"use strict";var x=C._validateProperties;var b=C._addMessageForActionParameter;var v=m.MessageType;var A=r.generate;var O=a.getResourceModel;const S=l.Constants,$=l.InvocationGrouping;const y=d.Action;function T(e,t,n,s,i,o){if(!o){o={is412Executed:false,strictHandlingTransitionFails:[],strictHandlingPromises:[],strictHandlingWarningMessages:[],delaySuccessMessages:[],processedMessageIds:[]}}if(!t||t.length===0){return Promise.reject("Bound actions always requires at least one context")}const a=Array.isArray(t);i.aContexts=a?t:[t];const r=n.getMetaModel(),l=`${r.getMetaPath(i.aContexts[0].getPath())}/${e}`,c=r.createBindingContext(`${l}/@$ui5.overload/0`);i.isCriticalAction=L(r,l,i.aContexts,c);const u=function(e){if(e[0].status==="fulfilled"){return e[0].value}else{throw e[0].reason||e}};return B(e,n,c,s,i,o).then(e=>{if(a){return e}else{return u(e)}},e=>{if(a){throw e}else{return u(e)}})}function _(e,t,n,s,i){if(!t){return Promise.reject("Action expects a model/context for execution")}const o=t.getMetaModel(),a=t.bindContext(`/${e}`).getPath(),r=o.createBindingContext(`/${o.createBindingContext(a).getObject("$Action")}/0`);s.isCriticalAction=L(o,`${a}/@$ui5.overload`);return B(e,t,r,n,s,i)}function N(e,t,n){if(!t){return Promise.reject("Bound functions always requires a context")}const s=n.getMetaModel(),i=`${s.getMetaPath(t.getPath())}/${e}`,o=s.createBindingContext(i);return I(e,n,o,t)}function w(e,t){if(!e){return Promise.resolve()}const n=t.getMetaModel(),s=t.bindContext(`/${e}`).getPath(),i=n.createBindingContext(`/${n.createBindingContext(s).getObject("$Function")}/0`);return I(e,t,i)}function I(e,t,n,s){let i;if(!n||!n.getObject()){return Promise.reject(new Error(`Function ${e} not found`))}if(s){n=t.bindContext(`${s.getPath()}/${e}(...)`);i="functionGroup"}else{n=t.bindContext(`/${e}(...)`);i="functionImport"}const o=n.execute(i);t.submitBatch(i);return o.then(function(){return n.getBoundContext()})}function B(e,t,n,s,i,o){if(!o){o={is412Executed:false,strictHandlingTransitionFails:[],strictHandlingPromises:[],strictHandlingWarningMessages:[],delaySuccessMessages:[],processedMessageIds:[]}}i.bGrouped=i.invocationGrouping===$.ChangeSet;return new Promise(async function(a,r){let l={};let c;let u;const d=i.label;const f=i.skipParameterDialog;const m=i.aContexts;const p=i.bIsCreateAction;const h=i.isCriticalAction;let M;let E;let P;let C;let x;let b;let v;const A=n.getObject();if(!n||!n.getObject()){return r(new Error(`Action ${e} not found`))}const O=F(n);const S=O.length>0&&!(O.length===1&&O[0].$Name==="ResultIsActiveEntity");const y=i.parameterValues;const T=s.getComponentData();const _=T&&T.startupParameters||{};if(S&&f){v=J(p,O,y,_)}c=null;if(S){if(!(f&&v)){c=j}}else if(h){c=D}l={fnOnSubmitted:i.onSubmitted,fnOnResponse:i.onResponse,actionName:e,model:t,aActionParameters:O,bGetBoundContext:i.bGetBoundContext,defaultValuesExtensionFunction:i.defaultValuesExtensionFunction,label:i.label,selectedItems:i.selectedItems};if(n.getObject("$IsBound")){if(i.additionalSideEffect&&i.additionalSideEffect.pathExpressions){M=t.getMetaModel();E=M.getMetaPath(m[0].getPath());P=M.getObject(`${E}/@com.sap.vocabularies.Common.v1.Messages/$Path`);if(P){C=i.additionalSideEffect.pathExpressions.findIndex(function(e){return typeof e==="string"&&e===P});b=n.getObject("$ReturnType");x=b&&!b.$isCollection&&n.getModel().getObject(E).$Type===b.$Type;if(C>-1||x){i.mBindingParameters=i.mBindingParameters||{};if(n.getObject(`$ReturnType/$Type/${P}`)&&(!i.mBindingParameters.$select||i.mBindingParameters.$select.split(",").indexOf(P)===-1)){i.mBindingParameters.$select=i.mBindingParameters.$select?`${i.mBindingParameters.$select},${P}`:P;if(C===-1){i.additionalSideEffect.pathExpressions.push("*")}if(i.additionalSideEffect.triggerActions.length===0&&C>-1){i.additionalSideEffect.pathExpressions.splice(C,1)}}}}}l.aContexts=m;l.mBindingParameters=i.mBindingParameters;l.additionalSideEffect=i.additionalSideEffect;l.bGrouped=i.invocationGrouping===$.ChangeSet;l.internalModelContext=i.internalModelContext;l.operationAvailableMap=i.operationAvailableMap;l.isCreateAction=p;l.bObjectPage=i.bObjectPage;if(i.controlId){l.control=i.parentControl.byId(i.controlId);i.control=l.control}else{l.control=i.parentControl;i.control=i.parentControl}}if(p){l.bIsCreateAction=p}const N=(A.$Parameter||[]).some(e=>(A.$EntitySetPath&&A.$EntitySetPath===e.$Name||A.$IsBound)&&e.$isCollection);l.isStatic=N;if(c){u=c(e,s,d,l,O,y,n,i.parentControl,i.entitySetName,i.messageHandler,o);return u.then(function(e){G(i,l,A);a(e)}).catch(function(e){r(e)})}else{if(y){for(const e in l.aActionParameters){var w;l.aActionParameters[e].value=y===null||y===void 0?void 0:(w=y.find(t=>t.name===l.aActionParameters[e].$Name))===null||w===void 0?void 0:w.value}}else{for(const e in l.aActionParameters){var I;l.aActionParameters[e].value=(I=_[l.aActionParameters[e].$Name])===null||I===void 0?void 0:I[0]}}let e;try{e=await X(s,l,i.parentControl,i.messageHandler,o);const t=g.getMessageManager().getMessageModel().getData();if(o&&o.is412Executed&&o.strictHandlingTransitionFails.length){o.delaySuccessMessages=o.delaySuccessMessages.concat(t)}G(i,l,A);a(e)}catch{r(e)}finally{var B,R;if(o&&o.is412Executed&&o.strictHandlingTransitionFails.length){try{const e=o.strictHandlingTransitionFails;const t=[];e.forEach(function(e){t.push(e.oAction.getContext())});l.aContexts=t;const n=await X(s,l,i.parentControl,i.messageHandler,o);o.strictHandlingTransitionFails=[];g.getMessageManager().addMessages(o.delaySuccessMessages);G(i,l,A);a(n)}catch(e){r(e)}}let e=false;if(i.bGrouped&&o&&o.strictHandlingPromises.length||U(i.bGrouped)!==-1){e=true}i===null||i===void 0?void 0:(B=i.messageHandler)===null||B===void 0?void 0:B.showMessageDialog({control:(R=l)===null||R===void 0?void 0:R.control,onBeforeShowMessage:function(t,n){return H(i,m,undefined,t,n,e)},aSelectedContexts:i.aContexts,sActionName:d});if(o){o={is412Executed:false,strictHandlingTransitionFails:[],strictHandlingPromises:[],strictHandlingWarningMessages:[],delaySuccessMessages:[],processedMessageIds:[]}}}}})}function D(e,t,n,s,i,o,a,r,l,c){return new Promise((n,i)=>{let o=e?e:null;o=o.indexOf(".")>=0?o.split(".")[o.split(".").length-1]:o;const a=o&&l?`${l}|${o}`:"";const u=O(r);const g=u.getText("C_OPERATIONS_ACTION_CONFIRM_MESSAGE",undefined,a);d.confirm(g,{onClose:async function(e){if(e===y.OK){try{const e=await X(t,s,r,c);n(e)}catch(e){try{await c.showMessageDialog();i(e)}catch(t){i(e)}}}else{n(S.CancelActionDialog)}}})})}async function R(e,t,n,s,i,o,a,r){var l;const c=await X(e,t,n,s,r);if((l=t.aContexts)!==null&&l!==void 0&&l.length){if(c!==null&&c!==void 0&&c.some(e=>e.status==="rejected")){throw c}}const u=g.getMessageManager().getMessageModel().getData();if(r&&r.is412Executed&&r.strictHandlingTransitionFails.length){if(!a){r.delaySuccessMessages=r.delaySuccessMessages.concat(u)}else{g.getMessageManager().addMessages(r.delaySuccessMessages);let e=false;if(t.bGrouped&&r.strictHandlingPromises.length||U(t.bGrouped)!==-1){e=true}if(u.length){o.attachEventOnce("afterClose",function(){s.showMessageDialog({onBeforeShowMessage:function(n,s){return H(t,i,o,n,s,e)},control:t.control,aSelectedContexts:t.aContexts,sActionName:t.label})})}}}else if(u.length){let e=false;if(t.bGrouped&&r&&r.strictHandlingPromises.length||U(t.bGrouped)!==-1){e=true}o.attachEventOnce("afterClose",function(){s.showMessageDialog({isActionParameterDialogOpen:t===null||t===void 0?void 0:t.oDialog.isOpen(),onBeforeShowMessage:function(n,s){return H(t,i,o,n,s,e)},control:t.control,aSelectedContexts:t.aContexts,sActionName:t.label})})}return c}function G(e,n,s){if(n.internalModelContext&&n.operationAvailableMap&&n.aContexts&&n.aContexts.length&&s.$IsBound){const s=n.isStatic;if(!s){t.setActionEnablement(n.internalModelContext,JSON.parse(n.operationAvailableMap),e.selectedItems,"table")}else if(n.control){const e=n.control;if(e.isA("sap.ui.mdc.Table")){const s=e.getSelectedContexts();t.setActionEnablement(n.internalModelContext,JSON.parse(n.operationAvailableMap),s,"table")}}}}function H(e,t,n,s,o,a){let r=o.showMessageBox,l=o.showMessageDialog;const c=e.control;const u=g.getLibraryResourceBundle("sap.fe.core");const d=s.filter(function(e){return e.getTarget()===""});const f=s.filter(function(t){var n;return t.getTarget&&t.getTarget().indexOf(e.actionName)!==-1&&(e===null||e===void 0?void 0:(n=e.aActionParameters)===null||n===void 0?void 0:n.some(function(e){return t.getTarget().indexOf(e.$Name)!==-1}))});f===null||f===void 0?void 0:f.forEach(function(e){e.isAPDTarget=true});const m=f.length?true:false;let h=false;if(a&&!m){h=true;let e=u.getText("C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_TEXT");let t=u.getText("C_COMMON_DIALOG_CANCEL_ERROR_MESSAGES_DETAIL_TEXT");const n=g.getMessageManager().getMessageModel();const o=n.getData();const a=i.getMessages(true);let d;const f=c&&c.getModel("ui").getProperty("/isEditable");const m=s.findIndex(function(e){return e.getType()==="Error"||e.getType()==="Warning"});const M=o.findIndex(function(e){return e.getType()==="Error"||e.getType()==="Warning"});if(m!==1&&M!==-1){if(o.length===1&&a.length===1){if(f===false){o[0].setMessage(u.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT")+"\n\n"+o[0].getMessage())}else{e=f?u.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT_EDIT"):u.getText("C_COMMON_DIALOG_CANCEL_SINGLE_ERROR_MESSAGE_TEXT");t="";d=new p({message:e,type:v.Error,target:"",persistent:true,description:t,code:"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED"});s.unshift(d);if(s.length===1){r=true;l=false}else{l=true;r=false}}}else{d=new p({message:e,type:v.Error,target:"",persistent:true,description:t,code:"FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED"});s.unshift(d);if(s.length===1){r=true;l=false}else{l=true;r=false}}}}if(n&&n.isOpen()&&t.length!==0&&!e.isStatic){if(!e.bGrouped){if(t.length>1||!m){n.close();n.destroy()}}else if(!m){n.close();n.destroy()}}let M=[];const E=n&&n.isOpen();if(!h){if(s.length===1&&s[0].getTarget&&s[0].getTarget()!==undefined&&s[0].getTarget()!==""){if(c&&c.getModel("ui").getProperty("/isEditable")===false||!c){r=!m;l=false}else if(c&&c.getModel("ui").getProperty("/isEditable")===true){r=false;l=false}}else if(c){if(c.getModel("ui").getProperty("/isEditable")===false){if(E&&m){l=false}}else if(c.getModel("ui").getProperty("/isEditable")===true){if(!E&&m){l=true;M=d.concat(f)}else if(!E&&d.length===0){l=false}}}}return{showMessageBox:r,showMessageDialog:l,filteredMessages:M.length?M:s,fnGetMessageSubtitle:c&&c.isA("sap.ui.mdc.Table")&&i.setMessageSubtitle.bind({},c,t),showChangeSetErrorDialog:e.bGrouped}}function j(t,i,a,r,l,m,p,P,C,v,$){const y=K(p,t),T=p.getModel().oModel.getMetaModel(),_=T.createBindingContext(y),w=p.getObject("$IsBound")?p.getPath().split("/@$ui5.overload/0")[0]:p.getPath().split("/0")[0],I=T.createBindingContext(w),B=r.isCreateAction,D="sap/fe/core/controls/ActionParameterDialog";return new Promise(async function(y,T){let w;const G=g.getMessageManager();const j=e=>{const t=G.getMessageModel().getData();const n=A(["APD_",e.$Name]);const s=t.filter(e=>e.getControlIds().some(e=>n.split("-").includes(e)));G.removeMessages(s)};const F={handleChange:async function(e){const t=e.getSource();const n=w.find(e=>e.field===t);j(n.parameter);n.validationPromise=e.getParameter("promise");try{n.value=await n.validationPromise;n.hasError=false}catch(e){delete n.value;n.hasError=true;b(G,[{actionParameterInfo:n,message:e.message}])}}};const L=M.loadTemplate(D,"fragment");const V=new E({$displayMode:{}});try{const M=await h.process(L,{name:D},{bindingContexts:{action:p,actionName:I,entitySet:_},models:{action:p.getModel(),actionName:I.getModel(),entitySet:_.getModel(),metaModel:_.getModel()}});const b=r.aContexts||[];const J=[];let z;await n.setUserDefaults(i,l,V,true);const Y=await f.load({definition:M,controller:F});w=l.map(e=>{const t=g.byId(A(["APD_",e.$Name]));const n=t.isA("sap.ui.mdc.MultiValueField");return{parameter:e,field:t,isMultiValue:n}});const Q=O(P);let Z={dialogCancelled:true,result:undefined};const ee=new u(A(["fe","APD_",t]),{title:a||Q.getText("C_OPERATIONS_ACTION_PARAMETER_DIALOG_TITLE"),content:[Y],escapeHandler:function(){ee.close()},beginButton:new c(A(["fe","APD_",t,"Action","Ok"]),{text:B?Q.getText("C_TRANSACTION_HELPER_SAPFE_ACTION_CREATE_BUTTON"):k(Q,a,t,C),type:"Emphasized",press:async function(){try{if(!await x(G,w,Q)){return}s.lock(ee);try{v.removeTransitionMessages();let e;const t=z&&z.getParameterContext();for(const n in l){if(l[n].$isCollection){const t=ee.getModel("mvfview").getProperty(`/${l[n].$Name}`),s=[];for(const e in t){s.push(t[e].Key)}e=s}else{e=t.getProperty(l[n].$Name)}l[n].value=e;e=undefined}r.label=a;try{const e=await R(i,r,P,v,b,ee,false,$);Z={dialogCancelled:false,result:e};ee.close()}catch(e){const t=sap.ui.getCore().getMessageManager().getMessageModel().getData();if($&&$.is412Executed&&$.strictHandlingTransitionFails.length){$.delaySuccessMessages=$.delaySuccessMessages.concat(t)}throw e}finally{if($&&$.is412Executed&&$.strictHandlingTransitionFails.length){try{const e=$.strictHandlingTransitionFails;const t=[];e.forEach(function(e){t.push(e.oAction.getContext())});r.aContexts=t;const n=await R(i,r,P,v,b,ee,true,$);$.strictHandlingTransitionFails=[];Z={dialogCancelled:false,result:n}}catch{if($.is412Executed&&$.strictHandlingTransitionFails.length){g.getMessageManager().addMessages($.delaySuccessMessages)}let e=false;if(r.bGrouped&&$.strictHandlingPromises.length||U(r.bGrouped)!==-1){e=true}await v.showMessageDialog({isActionParameterDialogOpen:ee.isOpen(),onBeforeShowMessage:function(t,n){return H(r,b,ee,t,n,e)},aSelectedContexts:r.aContexts,sActionName:a})}}if(s.isLocked(ee)){s.unlock(ee)}}}catch(e){let t=true;let n=false;if(r.bGrouped&&$&&$.strictHandlingPromises.length||U(r.bGrouped)!==-1){n=true}await v.showMessages({context:r.aContexts[0],isActionParameterDialogOpen:ee.isOpen(),messagePageNavigationCallback:function(){ee.close()},onBeforeShowMessage:function(e,s){const i=H(r,b,ee,e,s,n);t=i.showMessageDialog;return i},aSelectedContexts:r.aContexts,sActionName:a,control:r.control});if(t){if(ee.isOpen()){}else{T(e)}}}}finally{if($){$={is412Executed:false,strictHandlingTransitionFails:[],strictHandlingPromises:[],strictHandlingWarningMessages:[],delaySuccessMessages:[],processedMessageIds:[]}}if(s.isLocked(ee)){s.unlock(ee)}}}}),endButton:new c(A(["fe","APD_",t,"Action","Cancel"]),{text:Q.getText("C_COMMON_ACTION_PARAMETER_DIALOG_CANCEL"),press:function(){ee.close()}}),beforeOpen:async function(t){const s=Object.assign({},t);v.removeTransitionMessages();const i=function(){const e=ee.getModel().getMetaModel(),t=p.sPath&&p.sPath.split("/@")[0],n=e.getObject(`${t}@com.sap.vocabularies.Common.v1.DefaultValuesFunction`);return n};const a=async function(t){const a=i();const c=async function(s,i){if(i!==undefined){if(b.length>0&&i.$Path){try{let e=await n.requestSingletonProperty(i.$Path,z.getModel());if(e===null){e=await z.getParameterContext().requestProperty(i.$Path)}if(b.length>1){let n=i.$Path;if(n.indexOf(`${t}/`)===0){n=n.replace(`${t}/`,"")}for(let t=1;t<b.length;t++){if(b[t].getProperty(n)!==e){return{paramName:s,value:undefined,bNoPossibleValue:true}}}}return{paramName:s,value:e}}catch(t){e.error("Error while reading default action parameter",s,r.actionName);return{paramName:s,value:undefined,bLatePropertyError:true}}}else{return{paramName:s,value:i}}}else if(V&&V.oData[s]){return{paramName:s,value:V.oData[s]}}else{return{paramName:s,value:undefined}}};const u=function(e){const t=ee.getModel().getMetaModel(),s=n.getParameterPath(p.getPath(),e)+"@",i=t.getObject(s),o=i&&i["@com.sap.vocabularies.UI.v1.ParameterDefaultValue"];return o};const g=[];let f,h;for(const e in l){f=l[e].$Name;h=u(f);g.push(c(f,h))}if(p.getObject("$IsBound")&&b.length>0){if(a&&a.length>0&&typeof a==="string"){for(const e in b){J.push(N(a,b[e],r.model))}}}const M=Promise.all(g);let E=Promise.resolve([]);let P;if(J&&J.length>0){E=Promise.all(J)}if(r.defaultValuesExtensionFunction){const e=r.defaultValuesExtensionFunction.substring(0,r.defaultValuesExtensionFunction.lastIndexOf(".")||-1).replace(/\./gi,"/"),t=r.defaultValuesExtensionFunction.substring(r.defaultValuesExtensionFunction.lastIndexOf(".")+1,r.defaultValuesExtensionFunction.length);P=o.actionWrapper(s,e,t,{contexts:b})}try{const e=await Promise.all([M,E,P]);const t=e[0];const n=e[1];const s=e[2];let i;for(const e in l){var C;i=l[e].$Name;const o=m===null||m===void 0?void 0:(C=m.find(t=>t.name===l[e].$Name))===null||C===void 0?void 0:C.value;if(o){z.setParameter(l[e].$Name,o)}else if(s&&s.hasOwnProperty(i)){z.setParameter(l[e].$Name,s[i])}else if(t[e]&&t[e].value!==undefined){z.setParameter(l[e].$Name,t[e].value)}else if(a&&!t[e].bNoPossibleValue){if(b.length>1){let t=0;while(t<b.length-1){if(n[t]&&n[t+1]&&n[t].getObject(i)===n[t+1].getObject(i)){t++}else{break}}if(t===b.length-1){z.setParameter(l[e].$Name,n[t].getObject(i))}}else if(n[0]&&n[0].getObject(i)){z.setParameter(l[e].$Name,n[0].getObject(i))}}}const o=t.some(function(e){if(e.bLatePropertyError){return e.bLatePropertyError}});if(o){const e=Q.getText("C_APP_COMPONENT_SAPFE_ETAG_LATE_PROPERTY");d.warning(e,{contentWidth:"25em"})}}catch(t){e.error("Error while retrieving the parameter",t)}};const c=async function(){if(p.getObject("$IsBound")&&b.length>0){const t=p.getObject("$Parameter");const n=t[0]&&t[0].$Name;try{const e=await b[0].requestObject();if(e){z.setParameter(n,e)}await a(n)}catch(t){e.error("Error while retrieving the parameter",t)}}else{await a()}};await c();for(const e of w){const t=e.isMultiValue?e.field.getItems():e.field.getValue();e.value=t;e.validationPromise=Promise.resolve(t)}},afterClose:function(){l.forEach(j);ee.destroy();if(Z.dialogCancelled){T(S.CancelActionDialog)}else{y(Z.result)}}});r.oDialog=ee;ee.setModel(p.getModel().oModel);ee.setModel(V,"paramsModel");ee.bindElement({path:"/",model:"paramsModel"});const te=new E({});ee.setModel(te,"mvfview");for(const e of w){if(e.isMultiValue){var W,q;e===null||e===void 0?void 0:(W=e.field)===null||W===void 0?void 0:(q=W.getBinding("items"))===null||q===void 0?void 0:q.attachChange(()=>{j(e.parameter)})}else{var X,K;e===null||e===void 0?void 0:(X=e.field)===null||X===void 0?void 0:(K=X.getBinding("value"))===null||K===void 0?void 0:K.attachChange(()=>{j(e.parameter)})}}let ne=`${t}(...)`;if(!b.length){ne=`/${ne}`}ee.bindElement({path:ne});if(P){P.addDependent(ee)}if(b.length>0){ee.setBindingContext(b[0])}z=ee.getObjectBinding();ee.open()}catch(e){T(e)}})}function F(e){const t=e.getObject("$Parameter")||[];if(t&&t.length){if(e.getObject("$IsBound")){return t.slice(1,t.length)||[]}}return t}function L(e,t,n,s){const i=e.getObject(`${t}@com.sap.vocabularies.Common.v1.IsActionCritical`);let o=i&&i.$Path;if(!o){return!!i}const a=s&&s.getObject("$Parameter"),r=o&&o.split("/"),l=a&&a.length&&typeof a==="object"&&o&&n&&n.length;if(l){a.filter(function(e){const t=r&&r.indexOf(e.$Name);if(t>-1){r.splice(t,1)}});o=r.join("/");return n[0].getObject(o)}else if(o){return n[0].getObject(o)}}function k(e,t,n,s){let i=n?n:null;const o=i.split(".");i=i.indexOf(".")>=0?o[o.length-1]:i;const a=i&&s?`${s}|${i}`:"";const r="ACTION_PARAMETER_DIALOG_ACTION_NAME";const l=e.checkIfResourceKeyExists(`${r}|${a}`);if(t){if(l){return e.getText(r,undefined,a)}else if(e.checkIfResourceKeyExists(`${r}|${s}`)){return e.getText(r,undefined,`${s}`)}else if(e.checkIfResourceKeyExists(`${r}`)){return e.getText(r)}else{return t}}else{return e.getText("C_COMMON_DIALOG_OK")}}function V(e,t,n,s,i,o,a,r,l,c,u){let d,g=true;if(t){t.internalOperationsPromiseResolve=l}if(n){var f;const t=e.getBoundContext().getPath();const n=e.getModel().getMetaModel().getMetaPath(t);const s=e.getModel().getMetaModel().getObject(n);if(s&&((f=s[0])===null||f===void 0?void 0:f.$kind)!=="Action"){g=false}}if(!g){d=e.execute(s).then(function(){l(e.getBoundContext());return e.getBoundContext()})}else{d=n?e.execute(s,undefined,P.fnOnStrictHandlingFailed.bind(Y,s,t,i,r,e.getContext(),a,o,u)).then(function(){if(u&&!t.bGrouped){W(e,s,u,t)}l(e.getBoundContext());return e.getBoundContext()}).catch(function(){if(u&&!t.bGrouped){W(e,s,u,t)}c();return Promise.reject()}):e.execute(s,undefined,P.fnOnStrictHandlingFailed.bind(Y,s,t,i,r,e.getContext(),a,o,u)).then(function(n){if(u&&!t.bGrouped){W(e,s,u,t)}l(n);return n}).catch(function(){if(u&&!t.bGrouped){W(e,s,u,t)}c();return Promise.reject()})}return d.catch(()=>{throw S.ActionExecutionFailed})}function W(e,t,n,s){const i=sap.ui.getCore().getMessageManager().getMessageModel().getData();let{processedMessageIds:o,delaySuccessMessages:a,strictHandlingTransitionFails:r}=n;const l=i.filter(function(e){const t=o.find(function(t){return e.id===t});if(!t){o.push(e.id);if(e.type===v.Success){a.push(e)}}return e.persistent===true&&e.type!==v.Success&&!t});if(l.length){if(s!==null&&s!==void 0&&s.internalModelContext){r.push({oAction:e,groupId:t})}}}function q(){let t=null,n=null;const s=new Promise(function(e,s){t=e;n=s}).catch(function(t){e.error("Error while executing action ",t)});return{oLocalActionPromise:s,internalOperationsPromiseResolve:t,internalOperationsPromiseReject:n}}function U(e){if(e){const e=i.getMessages();return e.findIndex(function(e){return e.getType()==="Error"||e.getType()==="Warning"})}return-1}function X(t,n,s,i,o){const a=n.aContexts||[];const r=n.model;const l=n.aActionParameters||[];const c=n.actionName;const u=n.fnOnSubmitted;const d=n.fnOnResponse;const f=O(s);let m;function p(){if(l&&l.length){for(let e=0;e<l.length;e++){if(!l[e].value){switch(l[e].$Type){case"Edm.String":l[e].value="";break;case"Edm.Boolean":l[e].value=false;break;case"Edm.Byte":case"Edm.Int16":case"Edm.Int32":case"Edm.Int64":l[e].value=0;break;default:break}}m.setParameter(l[e].$Name,l[e].value)}}}if(a.length){return new Promise(function(s){const l=n.mBindingParameters;const d=n.bGrouped;const h=n.bGetBoundContext;const M=[];let E;let C;let x;const b=q();const v=function(e,s,a,r){p();const l=[];x=!d?`$auto.${s}`:e.getUpdateGroupId();n.requestSideEffects=z.bind(Y,t,a,n,x,l);E=V(e,n,h,x,f,i,r,s,b.internalOperationsPromiseResolve,b.internalOperationsPromiseReject,o);M.push(E);l.push(b.oLocalActionPromise);z(t,a,n,x,l);return Promise.allSettled(l)};const A=function(e,s,a,l){const c=[];p();x=`apiMode${s}`;n.requestSideEffects=z.bind(Y,t,a,n,x,c);E=V(e,n,h,x,f,i,l,s,b.internalOperationsPromiseResolve,b.internalOperationsPromiseReject,o);M.push(E);c.push(b.oLocalActionPromise);z(t,a,n,x,c);r.submitBatch(x);return Promise.allSettled(c)};async function O(){const t=[];for(C=0;C<a.length;C++){m=r.bindContext(`${c}(...)`,a[C],l);t.push(v(m,a.length<=1?null:C,{context:a[C],pathExpressions:n.additionalSideEffect&&n.additionalSideEffect.pathExpressions,triggerActions:n.additionalSideEffect&&n.additionalSideEffect.triggerActions},a.length))}(u||function e(){})(M);await Promise.allSettled(t);if(o&&o.strictHandlingPromises.length){try{const e=U(true);if(e===-1){await P.renderMessageView(n,f,i,o.strictHandlingWarningMessages,o,a.length>1)}else{o.strictHandlingPromises.forEach(function(e){e.resolve(false)});const e=g.getMessageManager().getMessageModel();const t=e.getData();e.setData(t.concat(o.strictHandlingWarningMessages))}}catch{e.error("Retriggering of strict handling actions failed")}}$()}async function S(e){(u||function e(){})(M);function t(e,t,s){m=r.bindContext(`${c}(...)`,e,l);return A(m,t,{context:e,pathExpressions:n.additionalSideEffect&&n.additionalSideEffect.pathExpressions,triggerActions:n.additionalSideEffect&&n.additionalSideEffect.triggerActions},s)}await e.reduce(async(e,n,s)=>{await e;await t(n,s+1,a.length)},Promise.resolve());if(o&&o.strictHandlingPromises.length){await P.renderMessageView(n,f,i,o.strictHandlingWarningMessages,o,a.length>1)}$()}if(!d){S(a)}else{O()}function $(){return Promise.allSettled(M).then(s)}}).finally(function(){(d||function e(){})()})}else{m=r.bindContext(`/${c}(...)`);p();const t="actionImport";const s=m.execute(t,undefined,P.fnOnStrictHandlingFailed.bind(Y,t,{label:n.label,model:r},f,null,null,null,i,o));r.submitBatch(t);(u||function e(){})(s);return s.then(function(e){if(e){return e}else{var t,n,s;return(t=(n=m).getBoundContext)===null||t===void 0?void 0:(s=t.call(n))===null||s===void 0?void 0:s.getObject()}}).catch(function(t){e.error("Error while executing action "+c,t);throw t}).finally(function(){(d||function e(){})()})}}function K(e,t){let n=e.getPath();n=e.getObject("$IsBound")?n.split("@$ui5.overload")[0]:n.split("/0")[0];return n.split(`/${t}`)[0]}function J(e,t,n,s){if(n){for(const e of t){if(e.$Name!=="ResultIsActiveEntity"&&!(n!==null&&n!==void 0&&n.find(t=>t.name===e.$Name))){return false}}}else if(e&&s){for(const e of t){if(!s[e.$Name]){return false}}}return true}function z(n,s,i,o,a){const r=n.getSideEffectsService();let l;if(s&&s.triggerActions&&s.triggerActions.length){s.triggerActions.forEach(function(e){if(e){l=r.executeAction(e,s.context,o);if(a){a.push(l)}}})}if(s&&s.pathExpressions&&s.pathExpressions.length>0){l=r.requestSideEffects(s.pathExpressions,s.context,o);if(a){a.push(l)}l.then(function(){if(i.operationAvailableMap&&i.internalModelContext){t.setActionEnablement(i.internalModelContext,JSON.parse(i.operationAvailableMap),i.selectedItems,"table")}}).catch(function(t){e.error("Error while requesting side effects",t)})}}const Y={callBoundAction:T,callActionImport:_,callBoundFunction:N,callFunctionImport:w,executeDependingOnSelectedContexts:V,createinternalOperationsPromiseForActionExecution:q,valuesProvidedForAllParameters:J,getActionParameterActionName:k,actionParameterShowMessageCallback:H,afterActionResolution:G,checkforOtherMessages:U};return Y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/sticky-dbg", ["sap/base/Log", "sap/fe/core/helpers/ResourceModelHelper", "sap/fe/core/library", "sap/m/MessageBox", "sap/ui/core/Core", "../../operationsHelper"], function (Log, ResourceModelHelper, FELibrary, MessageBox, Core, operationsHelper) {
  "use strict";

  var getResourceModel = ResourceModelHelper.getResourceModel;
  const ProgrammingModel = FELibrary.ProgrammingModel;
  /**
   * Opens a sticky session to edit a document.
   *
   * @function
   * @name sap.fe.core.actions.sticky#editDocumentInStickySession
   * @memberof sap.fe.core.actions.sticky
   * @static
   * @param context Context of the document to be edited
   * @param appComponent The AppComponent
   * @returns A Promise resolved when the sticky session is in edit mode
   * @private
   * @ui5-restricted
   */
  async function editDocumentInStickySession(context, appComponent) {
    const model = context.getModel(),
      metaModel = model.getMetaModel(),
      metaPath = metaModel.getMetaPath(context.getPath()),
      editActionAnnotation = metaModel.getObject(`${metaPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/EditAction`);
    if (!editActionAnnotation) {
      throw new Error(`Edit Action for Sticky Session not found for ${metaPath}`);
    }
    const resourceModel = getResourceModel(appComponent);
    const actionName = resourceModel.getText("C_COMMON_OBJECT_PAGE_EDIT");
    const editAction = model.bindContext(`${editActionAnnotation}(...)`, context, {
      $$inheritExpandSelect: true
    });
    const groupId = "direct";
    const editPromise = editAction.execute(groupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(sticky, groupId, {
      label: actionName,
      model
    }, resourceModel, null, null, null, undefined, undefined));
    model.submitBatch(groupId);
    const newContext = await editPromise;
    const sideEffects = appComponent.getSideEffectsService().getODataActionSideEffects(editActionAnnotation, newContext);
    if (sideEffects !== null && sideEffects !== void 0 && sideEffects.triggerActions && sideEffects.triggerActions.length) {
      await appComponent.getSideEffectsService().requestSideEffectsForODataAction(sideEffects, newContext);
    }
    return newContext;
  }
  /**
   * Activates a document and closes the sticky session.
   *
   * @function
   * @name sap.fe.core.actions.sticky#activateDocument
   * @memberof sap.fe.core.actions.sticky
   * @static
   * @param context Context of the document to be activated
   * @param appComponent Context of the document to be activated
   * @returns A promise resolve when the sticky session is activated
   * @private
   * @ui5-restricted
   */
  async function activateDocument(context, appComponent) {
    const model = context.getModel(),
      metaModel = model.getMetaModel(),
      metaPath = metaModel.getMetaPath(context.getPath()),
      saveActionAnnotation = metaModel.getObject(`${metaPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/SaveAction`);
    if (!saveActionAnnotation) {
      throw new Error(`Save Action for Sticky Session not found for ${metaPath}`);
    }
    const resourceModel = getResourceModel(appComponent);
    const actionName = resourceModel.getText("C_OP_OBJECT_PAGE_SAVE");
    const saveAction = model.bindContext(`${saveActionAnnotation}(...)`, context, {
      $$inheritExpandSelect: true
    });
    const groupId = "direct";
    const savePromise = saveAction.execute(groupId, undefined, operationsHelper.fnOnStrictHandlingFailed.bind(sticky, groupId, {
      label: actionName,
      model
    }, resourceModel, null, null, null, undefined, undefined));
    model.submitBatch(groupId);
    try {
      return await savePromise;
    } catch (err) {
      const messagesPath = metaModel.getObject(`${metaPath}/@${"com.sap.vocabularies.Common.v1.Messages"}/$Path`);
      if (messagesPath) {
        try {
          await appComponent.getSideEffectsService().requestSideEffects([messagesPath], context);
        } catch (error) {
          Log.error("Error while requesting side effects", error);
        }
      }
      throw err;
    }
  }
  /**
   * Discards a document and closes sticky session.
   *
   * @function
   * @name sap.fe.core.actions.sticky#discardDocument
   * @memberof sap.fe.core.actions.sticky
   * @static
   * @param context Context of the document to be discarded
   * @returns A promise resolved when the document is dicarded
   * @private
   * @ui5-restricted
   */
  function discardDocument(context) {
    const model = context.getModel(),
      metaModel = model.getMetaModel(),
      metaPath = metaModel.getMetaPath(context.getPath()),
      discardActionAnnotation = metaModel.getObject(`${metaPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/DiscardAction`);
    if (!discardActionAnnotation) {
      throw new Error(`Discard Action for Sticky Session not found for ${metaPath}`);
    }
    const discardAction = model.bindContext(`/${discardActionAnnotation}(...)`);
    return discardAction.execute("$direct").then(function () {
      return context;
    });
  }

  /**
   * Process the Data loss confirmation.
   *
   * @function
   * @name sap.fe.core.actions.sticky#discardDocument
   * @memberof sap.fe.core.actions.sticky
   * @static
   * @param fnProcess Function to execute after confirmation
   * @param view Current view
   * @param programmingModel Programming Model of the current page
   * @returns `void` i think
   * @private
   * @ui5-restricted
   */
  function processDataLossConfirmation(fnProcess, view, programmingModel) {
    const uiEditable = view.getModel("ui").getProperty("/isEditable"),
      resourceBundle = Core.getLibraryResourceBundle("sap.fe.templates"),
      warningMsg = resourceBundle && resourceBundle.getText("T_COMMON_UTILS_NAVIGATION_AWAY_MSG"),
      confirmButtonTxt = resourceBundle && resourceBundle.getText("T_COMMON_UTILS_NAVIGATION_AWAY_CONFIRM_BUTTON"),
      cancelButtonTxt = resourceBundle && resourceBundle.getText("T_COMMON_UTILS_NAVIGATION_AWAY_CANCEL_BUTTON");
    if (programmingModel === ProgrammingModel.Sticky && uiEditable) {
      return MessageBox.warning(warningMsg, {
        actions: [confirmButtonTxt, cancelButtonTxt],
        emphasizedAction: confirmButtonTxt,
        onClose: function (actionText) {
          if (actionText === confirmButtonTxt) {
            Log.info("Navigation confirmed.");
            fnProcess();
          } else {
            Log.info("Navigation rejected.");
          }
        }
      });
    }
    return fnProcess();
  }

  /**
   * Static functions for the sticky session programming model
   *
   * @namespace
   * @alias sap.fe.core.actions.sticky
   * @private
   * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
   * @since 1.54.0
   */
  const sticky = {
    editDocumentInStickySession: editDocumentInStickySession,
    activateDocument: activateDocument,
    discardDocument: discardDocument,
    processDataLossConfirmation: processDataLossConfirmation
  };
  return sticky;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/editFlow/sticky", ["sap/base/Log","sap/fe/core/helpers/ResourceModelHelper","sap/fe/core/library","sap/m/MessageBox","sap/ui/core/Core","../../operationsHelper"],function(e,t,n,o,i,c){"use strict";var s=t.getResourceModel;const r=n.ProgrammingModel;async function a(e,t){const n=e.getModel(),o=n.getMetaModel(),i=o.getMetaPath(e.getPath()),r=o.getObject(`${i}@com.sap.vocabularies.Session.v1.StickySessionSupported/EditAction`);if(!r){throw new Error(`Edit Action for Sticky Session not found for ${i}`)}const a=s(t);const d=a.getText("C_COMMON_OBJECT_PAGE_EDIT");const u=n.bindContext(`${r}(...)`,e,{$$inheritExpandSelect:true});const f="direct";const g=u.execute(f,undefined,c.fnOnStrictHandlingFailed.bind(l,f,{label:d,model:n},a,null,null,null,undefined,undefined));n.submitBatch(f);const S=await g;const M=t.getSideEffectsService().getODataActionSideEffects(r,S);if(M!==null&&M!==void 0&&M.triggerActions&&M.triggerActions.length){await t.getSideEffectsService().requestSideEffectsForODataAction(M,S)}return S}async function d(t,n){const o=t.getModel(),i=o.getMetaModel(),r=i.getMetaPath(t.getPath()),a=i.getObject(`${r}@com.sap.vocabularies.Session.v1.StickySessionSupported/SaveAction`);if(!a){throw new Error(`Save Action for Sticky Session not found for ${r}`)}const d=s(n);const u=d.getText("C_OP_OBJECT_PAGE_SAVE");const f=o.bindContext(`${a}(...)`,t,{$$inheritExpandSelect:true});const g="direct";const S=f.execute(g,undefined,c.fnOnStrictHandlingFailed.bind(l,g,{label:u,model:o},d,null,null,null,undefined,undefined));o.submitBatch(g);try{return await S}catch(o){const c=i.getObject(`${r}/@${"com.sap.vocabularies.Common.v1.Messages"}/$Path`);if(c){try{await n.getSideEffectsService().requestSideEffects([c],t)}catch(t){e.error("Error while requesting side effects",t)}}throw o}}function u(e){const t=e.getModel(),n=t.getMetaModel(),o=n.getMetaPath(e.getPath()),i=n.getObject(`${o}@com.sap.vocabularies.Session.v1.StickySessionSupported/DiscardAction`);if(!i){throw new Error(`Discard Action for Sticky Session not found for ${o}`)}const c=t.bindContext(`/${i}(...)`);return c.execute("$direct").then(function(){return e})}function f(t,n,c){const s=n.getModel("ui").getProperty("/isEditable"),a=i.getLibraryResourceBundle("sap.fe.templates"),d=a&&a.getText("T_COMMON_UTILS_NAVIGATION_AWAY_MSG"),u=a&&a.getText("T_COMMON_UTILS_NAVIGATION_AWAY_CONFIRM_BUTTON"),f=a&&a.getText("T_COMMON_UTILS_NAVIGATION_AWAY_CANCEL_BUTTON");if(c===r.Sticky&&s){return o.warning(d,{actions:[u,f],emphasizedAction:u,onClose:function(n){if(n===u){e.info("Navigation confirmed.");t()}else{e.info("Navigation rejected.")}}})}return t()}const l={editDocumentInStickySession:a,activateDocument:d,discardDocument:u,processDataLossConfirmation:f};return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/messageHandler/messageHandling-dbg", ["sap/fe/core/helpers/ResourceModelHelper", "sap/m/Bar", "sap/m/Button", "sap/m/Dialog", "sap/m/FormattedText", "sap/m/MessageBox", "sap/m/MessageItem", "sap/m/MessageToast", "sap/m/MessageView", "sap/m/Text", "sap/ui/core/Core", "sap/ui/core/format/DateFormat", "sap/ui/core/IconPool", "sap/ui/core/library", "sap/ui/core/message/Message", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/json/JSONModel", "sap/ui/model/Sorter"], function (ResourceModelHelper, Bar, Button, Dialog, FormattedText, MessageBox, MessageItem, MessageToast, MessageView, Text, Core, DateFormat, IconPool, CoreLib, Message, Filter, FilterOperator, JSONModel, Sorter) {
  "use strict";

  var getResourceModel = ResourceModelHelper.getResourceModel;
  const MessageType = CoreLib.MessageType;
  let aMessageList = [];
  let aMessageDataList = [];
  let aResolveFunctions = [];
  let oDialog;
  let oBackButton;
  let oMessageView;
  function fnFormatTechnicalDetails() {
    let sPreviousGroupName;

    // Insert technical detail if it exists
    function insertDetail(oProperty) {
      return oProperty.property ? "( ${" + oProperty.property + '} ? ("<p>' + oProperty.property.substr(Math.max(oProperty.property.lastIndexOf("/"), oProperty.property.lastIndexOf(".")) + 1) + ' : " + ' + "${" + oProperty.property + '} + "</p>") : "" )' : "";
    }
    // Insert groupname if it exists
    function insertGroupName(oProperty) {
      let sHTML = "";
      if (oProperty.groupName && oProperty.property && oProperty.groupName !== sPreviousGroupName) {
        sHTML += "( ${" + oProperty.property + '} ? "<br><h3>' + oProperty.groupName + '</h3>" : "" ) + ';
        sPreviousGroupName = oProperty.groupName;
      }
      return sHTML;
    }

    // List of technical details to be shown
    function getPaths() {
      const sTD = "technicalDetails"; // name of property in message model data for technical details
      return [{
        groupName: "",
        property: `${sTD}/status`
      }, {
        groupName: "",
        property: `${sTD}/statusText`
      }, {
        groupName: "Application",
        property: `${sTD}/error/@SAP__common.Application/ComponentId`
      }, {
        groupName: "Application",
        property: `${sTD}/error/@SAP__common.Application/ServiceId`
      }, {
        groupName: "Application",
        property: `${sTD}/error/@SAP__common.Application/ServiceRepository`
      }, {
        groupName: "Application",
        property: `${sTD}/error/@SAP__common.Application/ServiceVersion`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.ErrorResolution/Analysis`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.ErrorResolution/Note`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.ErrorResolution/DetailedNote`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.ExceptionCategory`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.TimeStamp`
      }, {
        groupName: "ErrorResolution",
        property: `${sTD}/error/@SAP__common.TransactionId`
      }, {
        groupName: "Messages",
        property: `${sTD}/error/code`
      }, {
        groupName: "Messages",
        property: `${sTD}/error/message`
      }];
    }
    let sHTML = "Object.keys(" + "${technicalDetails}" + ').length > 0 ? "<h2>Technical Details</h2>" : "" ';
    getPaths().forEach(function (oProperty) {
      sHTML = `${sHTML + insertGroupName(oProperty)}${insertDetail(oProperty)} + `;
    });
    return sHTML;
  }
  function fnFormatDescription() {
    return "(${" + 'description} ? (${' + 'description}) : "")';
  }
  /**
   * Calculates the highest priority message type(Error/Warning/Success/Information) from the available messages.
   *
   * @function
   * @name sap.fe.core.actions.messageHandling.fnGetHighestMessagePriority
   * @memberof sap.fe.core.actions.messageHandling
   * @param [aMessages] Messages list
   * @returns Highest priority message from the available messages
   * @private
   * @ui5-restricted
   */
  function fnGetHighestMessagePriority(aMessages) {
    let sMessagePriority = MessageType.None;
    const iLength = aMessages.length;
    const oMessageCount = {
      Error: 0,
      Warning: 0,
      Success: 0,
      Information: 0
    };
    for (let i = 0; i < iLength; i++) {
      ++oMessageCount[aMessages[i].getType()];
    }
    if (oMessageCount[MessageType.Error] > 0) {
      sMessagePriority = MessageType.Error;
    } else if (oMessageCount[MessageType.Warning] > 0) {
      sMessagePriority = MessageType.Warning;
    } else if (oMessageCount[MessageType.Success] > 0) {
      sMessagePriority = MessageType.Success;
    } else if (oMessageCount[MessageType.Information] > 0) {
      sMessagePriority = MessageType.Information;
    }
    return sMessagePriority;
  }
  // function which modify e-Tag messages only.
  // returns : true, if any e-Tag message is modified, otherwise false.
  function fnModifyETagMessagesOnly(oMessageManager, oResourceBundle, concurrentEditFlag) {
    const aMessages = oMessageManager.getMessageModel().getObject("/");
    let bMessagesModified = false;
    let sEtagMessage = "";
    aMessages.forEach(function (oMessage, i) {
      const oTechnicalDetails = oMessage.getTechnicalDetails && oMessage.getTechnicalDetails();
      if (oTechnicalDetails && oTechnicalDetails.httpStatus === 412 && oTechnicalDetails.isConcurrentModification) {
        if (concurrentEditFlag) {
          sEtagMessage = sEtagMessage || oResourceBundle.getText("C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES_CONCURRENT_MODIFICATION");
        } else {
          sEtagMessage = sEtagMessage || oResourceBundle.getText("C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES");
        }
        oMessageManager.removeMessages(aMessages[i]);
        oMessage.setMessage(sEtagMessage);
        oMessage.target = "";
        oMessageManager.addMessages(oMessage);
        bMessagesModified = true;
      }
    });
    return bMessagesModified;
  }
  // Dialog close Handling
  function dialogCloseHandler() {
    oDialog.close();
    oBackButton.setVisible(false);
    aMessageList = [];
    const oMessageDialogModel = oMessageView.getModel();
    if (oMessageDialogModel) {
      oMessageDialogModel.setData({});
    }
    removeUnboundTransitionMessages();
  }
  function getRetryAfterMessage(oMessage, bMessageDialog) {
    const dNow = new Date();
    const oTechnicalDetails = oMessage.getTechnicalDetails();
    const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
    let sRetryAfterMessage;
    if (oTechnicalDetails && oTechnicalDetails.httpStatus === 503 && oTechnicalDetails.retryAfter) {
      const dRetryAfter = oTechnicalDetails.retryAfter;
      let oDateFormat;
      if (dNow.getFullYear() !== dRetryAfter.getFullYear()) {
        //different years
        oDateFormat = DateFormat.getDateTimeInstance({
          pattern: "MMMM dd, yyyy 'at' hh:mm a"
        });
        sRetryAfterMessage = oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR", [oDateFormat.format(dRetryAfter)]);
      } else if (dNow.getFullYear() == dRetryAfter.getFullYear()) {
        //same year
        if (bMessageDialog) {
          //less than 2 min
          sRetryAfterMessage = `${oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_TITLE")} ${oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_DESC")}`;
        } else if (dNow.getMonth() !== dRetryAfter.getMonth() || dNow.getDate() !== dRetryAfter.getDate()) {
          oDateFormat = DateFormat.getDateTimeInstance({
            pattern: "MMMM dd 'at' hh:mm a"
          }); //different months or different days of same month
          sRetryAfterMessage = oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR", [oDateFormat.format(dRetryAfter)]);
        } else {
          //same day
          oDateFormat = DateFormat.getDateTimeInstance({
            pattern: "hh:mm a"
          });
          sRetryAfterMessage = oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR_DAY", [oDateFormat.format(dRetryAfter)]);
        }
      }
    }
    if (oTechnicalDetails && oTechnicalDetails.httpStatus === 503 && !oTechnicalDetails.retryAfter) {
      sRetryAfterMessage = oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR_NO_RETRY_AFTER");
    }
    return sRetryAfterMessage;
  }
  function prepareMessageViewForDialog(oMessageDialogModel, bStrictHandlingFlow, multi412) {
    let oMessageTemplate;
    if (!bStrictHandlingFlow) {
      const descriptionBinding = '{= ${description} ? "<html><body>" + ' + fnFormatDescription() + ' + "</html></body>" : "" }';
      const technicalDetailsBinding = '{= ${technicalDetails} ? "<html><body>" + ' + fnFormatTechnicalDetails() + ' + "</html></body>" : "" }';
      oMessageTemplate = new MessageItem(undefined, {
        counter: {
          path: "counter"
        },
        title: "{message}",
        subtitle: "{additionalText}",
        longtextUrl: "{descriptionUrl}",
        type: {
          path: "type"
        },
        groupName: "{headerName}",
        description: descriptionBinding + technicalDetailsBinding,
        markupDescription: true
      });
    } else if (multi412) {
      oMessageTemplate = new MessageItem(undefined, {
        counter: {
          path: "counter"
        },
        title: "{message}",
        subtitle: "{additionalText}",
        longtextUrl: "{descriptionUrl}",
        type: {
          path: "type"
        },
        description: "{description}",
        markupDescription: true
      });
    } else {
      oMessageTemplate = new MessageItem({
        title: "{message}",
        type: {
          path: "type"
        },
        longtextUrl: "{descriptionUrl}"
      });
    }
    oMessageView = new MessageView({
      showDetailsPageHeader: false,
      itemSelect: function () {
        oBackButton.setVisible(true);
      },
      items: {
        path: "/",
        template: oMessageTemplate
      }
    });
    oMessageView.setGroupItems(true);
    oBackButton = oBackButton || new Button({
      icon: IconPool.getIconURI("nav-back"),
      visible: false,
      press: function () {
        oMessageView.navigateBack();
        this.setVisible(false);
      }
    });
    // Update proper ETag Mismatch error
    oMessageView.setModel(oMessageDialogModel);
    return {
      oMessageView,
      oBackButton
    };
  }
  function showUnboundMessages(aCustomMessages, oContext, bShowBoundTransition, concurrentEditFlag, control, sActionName, bOnlyForTest, onBeforeShowMessage, viewType) {
    let aTransitionMessages = this.getMessages();
    const oMessageManager = Core.getMessageManager();
    let sHighestPriority;
    let sHighestPriorityText;
    const aFilters = [new Filter({
      path: "persistent",
      operator: FilterOperator.NE,
      value1: false
    })];
    let showMessageDialog = false,
      showMessageBox = false;
    if (bShowBoundTransition) {
      aTransitionMessages = aTransitionMessages.concat(getMessages(true, true));
      // we only want to show bound transition messages not bound state messages hence add a filter for the same
      aFilters.push(new Filter({
        path: "persistent",
        operator: FilterOperator.EQ,
        value1: true
      }));
      const fnCheckControlIdInDialog = function (aControlIds) {
        let index = Infinity,
          oControl = Core.byId(aControlIds[0]);
        const errorFieldControl = Core.byId(aControlIds[0]);
        while (oControl) {
          const fieldRankinDialog = oControl instanceof Dialog ? errorFieldControl.getParent().findElements(true).indexOf(errorFieldControl) : Infinity;
          if (oControl instanceof Dialog) {
            if (index > fieldRankinDialog) {
              index = fieldRankinDialog;
              // Set the focus to the dialog's control
              errorFieldControl.focus();
            }
            // messages with target inside sap.m.Dialog should not bring up the message dialog
            return false;
          }
          oControl = oControl.getParent();
        }
        return true;
      };
      aFilters.push(new Filter({
        path: "controlIds",
        test: fnCheckControlIdInDialog,
        caseSensitive: true
      }));
    } else {
      // only unbound messages have to be shown so add filter accordingly
      aFilters.push(new Filter({
        path: "target",
        operator: FilterOperator.EQ,
        value1: ""
      }));
    }
    if (aCustomMessages && aCustomMessages.length) {
      aCustomMessages.forEach(function (oMessage) {
        const messageCode = oMessage.code ? oMessage.code : "";
        oMessageManager.addMessages(new Message({
          message: oMessage.text,
          type: oMessage.type,
          target: "",
          persistent: true,
          code: messageCode
        }));
        //The target and persistent properties of the message are hardcoded as "" and true because the function deals with only unbound messages.
      });
    }

    const oMessageDialogModel = oMessageView && oMessageView.getModel() || new JSONModel();
    const bHasEtagMessage = this.modifyETagMessagesOnly(oMessageManager, Core.getLibraryResourceBundle("sap.fe.core"), concurrentEditFlag);
    if (aTransitionMessages.length === 1 && aTransitionMessages[0].getCode() === "503") {
      showMessageBox = true;
    } else if (aTransitionMessages.length !== 0) {
      showMessageDialog = true;
    }
    let showMessageParameters;
    let aModelDataArray = [];
    if (showMessageDialog || !showMessageBox && !onBeforeShowMessage) {
      const oListBinding = oMessageManager.getMessageModel().bindList("/", undefined, undefined, aFilters),
        aCurrentContexts = oListBinding.getCurrentContexts();
      if (aCurrentContexts && aCurrentContexts.length > 0) {
        showMessageDialog = true;
        // Don't show dialog incase there are no errors to show

        // if false, show messages in dialog
        // As fitering has already happened here hence
        // using the message model again for the message dialog view and then filtering on that binding again is unnecessary.
        // So we create new json model to use for the message dialog view.
        const aMessages = [];
        aCurrentContexts.forEach(function (currentContext) {
          const oMessage = currentContext.getObject();
          aMessages.push(oMessage);
          aMessageDataList = aMessages;
        });
        let existingMessages = [];
        if (Array.isArray(oMessageDialogModel.getData())) {
          existingMessages = oMessageDialogModel.getData();
        }
        const oUniqueObj = {};
        aModelDataArray = aMessageDataList.concat(existingMessages).filter(function (obj) {
          // remove entries having duplicate message ids
          return !oUniqueObj[obj.id] && (oUniqueObj[obj.id] = true);
        });
        oMessageDialogModel.setData(aModelDataArray);
      }
    }
    if (onBeforeShowMessage) {
      showMessageParameters = {
        showMessageBox,
        showMessageDialog
      };
      showMessageParameters = onBeforeShowMessage(aTransitionMessages, showMessageParameters);
      showMessageBox = showMessageParameters.showMessageBox;
      showMessageDialog = showMessageParameters.showMessageDialog;
      if (showMessageDialog || showMessageParameters.showChangeSetErrorDialog) {
        aModelDataArray = showMessageParameters.filteredMessages ? showMessageParameters.filteredMessages : aModelDataArray;
      }
    }
    if (aTransitionMessages.length === 0 && !aCustomMessages && !bHasEtagMessage) {
      // Don't show the popup if there are no transient messages
      return Promise.resolve(true);
    } else if (aTransitionMessages.length === 1 && aTransitionMessages[0].getType() === MessageType.Success && !aCustomMessages) {
      return new Promise(resolve => {
        MessageToast.show(aTransitionMessages[0].message);
        if (oMessageDialogModel) {
          oMessageDialogModel.setData({});
        }
        oMessageManager.removeMessages(aTransitionMessages);
        resolve();
      });
    } else if (showMessageDialog) {
      messageHandling.updateMessageObjectGroupName(aModelDataArray, control, sActionName, viewType);
      oMessageDialogModel.setData(aModelDataArray); // set the messages here so that if any of them are filtered for APD, they are filtered here as well.
      aResolveFunctions = aResolveFunctions || [];
      return new Promise(function (resolve, reject) {
        aResolveFunctions.push(resolve);
        Core.getLibraryResourceBundle("sap.fe.core", true).then(function (oResourceBundle) {
          const bStrictHandlingFlow = false;
          if (showMessageParameters && showMessageParameters.fnGetMessageSubtitle) {
            oMessageDialogModel.getData().forEach(function (oMessage) {
              showMessageParameters.fnGetMessageSubtitle(oMessage);
            });
          }
          const oMessageObject = prepareMessageViewForDialog(oMessageDialogModel, bStrictHandlingFlow);
          const oSorter = new Sorter("", undefined, undefined, (obj1, obj2) => {
            const rankA = getMessageRank(obj1);
            const rankB = getMessageRank(obj2);
            if (rankA < rankB) {
              return -1;
            }
            if (rankA > rankB) {
              return 1;
            }
            return 0;
          });
          oMessageObject.oMessageView.getBinding("items").sort(oSorter);
          oDialog = oDialog && oDialog.isOpen() ? oDialog : new Dialog({
            resizable: true,
            endButton: new Button({
              press: function () {
                dialogCloseHandler();
                // also remove bound transition messages if we were showing them
                oMessageManager.removeMessages(aModelDataArray);
              },
              text: oResourceBundle.getText("C_COMMON_SAPFE_CLOSE")
            }),
            customHeader: new Bar({
              contentMiddle: [new Text({
                text: oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE")
              })],
              contentLeft: [oBackButton]
            }),
            contentWidth: "37.5em",
            contentHeight: "21.5em",
            verticalScrolling: false,
            afterClose: function () {
              for (let i = 0; i < aResolveFunctions.length; i++) {
                aResolveFunctions[i].call();
              }
              aResolveFunctions = [];
            }
          });
          oDialog.removeAllContent();
          oDialog.addContent(oMessageObject.oMessageView);
          if (bHasEtagMessage) {
            sap.ui.require(["sap/m/ButtonType"], function (ButtonType) {
              oDialog.setBeginButton(new Button({
                press: function () {
                  dialogCloseHandler();
                  if (oContext.hasPendingChanges()) {
                    oContext.getBinding().resetChanges();
                  }
                  oContext.refresh();
                },
                text: oResourceBundle.getText("C_COMMON_SAPFE_REFRESH"),
                type: ButtonType.Emphasized
              }));
            });
          } else {
            oDialog.destroyBeginButton();
          }
          sHighestPriority = fnGetHighestMessagePriority(oMessageView.getItems());
          sHighestPriorityText = getTranslatedTextForMessageDialog(sHighestPriority);
          oDialog.setState(sHighestPriority);
          oDialog.getCustomHeader().getContentMiddle()[0].setText(sHighestPriorityText);
          oMessageView.navigateBack();
          oDialog.open();
          if (bOnlyForTest) {
            resolve(oDialog);
          }
        }).catch(reject);
      });
    } else if (showMessageBox) {
      return new Promise(function (resolve) {
        const oMessage = aTransitionMessages[0];
        if (oMessage.technicalDetails && aMessageList.indexOf(oMessage.technicalDetails.originalMessage.message) === -1 || showMessageParameters && showMessageParameters.showChangeSetErrorDialog) {
          if (!showMessageParameters || !showMessageParameters.showChangeSetErrorDialog) {
            aMessageList.push(oMessage.technicalDetails.originalMessage.message);
          }
          let formattedTextString = "<html><body>";
          const retryAfterMessage = getRetryAfterMessage(oMessage, true);
          if (retryAfterMessage) {
            formattedTextString = `<h6>${retryAfterMessage}</h6><br>`;
          }
          if (showMessageParameters && showMessageParameters.fnGetMessageSubtitle) {
            showMessageParameters.fnGetMessageSubtitle(oMessage);
          }
          if (oMessage.getCode() !== "503" && oMessage.getAdditionalText() !== undefined) {
            formattedTextString = `${formattedTextString + oMessage.getAdditionalText()}: ${oMessage.getMessage()}</html></body>`;
          } else {
            formattedTextString = `${formattedTextString + oMessage.getMessage()}</html></body>`;
          }
          const formattedText = new FormattedText({
            htmlText: formattedTextString
          });
          MessageBox.error(formattedText, {
            onClose: function () {
              aMessageList = [];
              if (bShowBoundTransition) {
                removeBoundTransitionMessages();
              }
              removeUnboundTransitionMessages();
              resolve(true);
            }
          });
        }
      });
    } else {
      return Promise.resolve(true);
    }
  }

  /**
   * This function sets the group name for all messages in a dialog.
   *
   * @param aModelDataArray Messages array
   * @param control
   * @param sActionName
   * @param viewType
   */
  function updateMessageObjectGroupName(aModelDataArray, control, sActionName, viewType) {
    aModelDataArray.forEach(aModelData => {
      var _aModelData$target, _aModelData$getCode, _aModelData$target2;
      aModelData["headerName"] = "";
      if (!((_aModelData$target = aModelData.target) !== null && _aModelData$target !== void 0 && _aModelData$target.length) && ((_aModelData$getCode = aModelData.getCode) === null || _aModelData$getCode === void 0 ? void 0 : _aModelData$getCode.call(aModelData)) !== "FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED") {
        // unbound transiiton messages
        aModelData["headerName"] = "General";
      } else if ((_aModelData$target2 = aModelData.target) !== null && _aModelData$target2 !== void 0 && _aModelData$target2.length) {
        // LR flow
        if (viewType === "ListReport") {
          messageHandling.setGroupNameLRTable(control, aModelData, sActionName);
        } else if (viewType === "ObjectPage") {
          // OP Display mode
          messageHandling.setGroupNameOPDisplayMode(aModelData, sActionName, control);
        } else {
          aModelData["headerName"] = messageHandling.getLastActionTextAndActionName(sActionName);
        }
      }
    });
  }

  /**
   * This function will set the group name of Message Object for LR table.
   *
   * @param oElem
   * @param aModelData
   * @param sActionName
   */
  function setGroupNameLRTable(oElem, aModelData, sActionName) {
    const oRowBinding = oElem && oElem.getRowBinding();
    if (oRowBinding) {
      var _aModelData$target3;
      const sElemeBindingPath = `${oElem.getRowBinding().getPath()}`;
      if (((_aModelData$target3 = aModelData.target) === null || _aModelData$target3 === void 0 ? void 0 : _aModelData$target3.indexOf(sElemeBindingPath)) === 0) {
        const allRowContexts = oRowBinding.getCurrentContexts();
        allRowContexts.forEach(rowContext => {
          var _aModelData$target4;
          if ((_aModelData$target4 = aModelData.target) !== null && _aModelData$target4 !== void 0 && _aModelData$target4.includes(rowContext.getPath())) {
            const contextPath = `${rowContext.getPath()}/`;
            const identifierColumn = oElem.getParent().getIdentifierColumn();
            const rowIdentifier = identifierColumn && rowContext.getObject()[identifierColumn];
            const columnPropertyName = messageHandling.getTableColProperty(oElem, aModelData, contextPath);
            const {
              sTableTargetColName
            } = messageHandling.getTableColInfo(oElem, columnPropertyName);

            // if target has some column name and column is visible in UI
            if (columnPropertyName && sTableTargetColName) {
              // header will be row Identifier, if found from above code otherwise it should be table name
              aModelData["headerName"] = rowIdentifier ? ` ${rowIdentifier}` : oElem.getHeader();
            } else {
              // if column data not found (may be the column is hidden), add grouping as Last Action
              aModelData["headerName"] = messageHandling.getLastActionTextAndActionName(sActionName);
            }
          }
        });
      }
    }
  }

  /**
   * This function will set the group name of Message Object in OP Display mode.
   *
   * @param aModelData Message Object
   * @param sActionName  Action name
   * @param control
   */
  function setGroupNameOPDisplayMode(aModelData, sActionName, control) {
    const oViewContext = control === null || control === void 0 ? void 0 : control.getBindingContext();
    const opLayout = (control === null || control === void 0 ? void 0 : control.getContent) && (control === null || control === void 0 ? void 0 : control.getContent()[0]);
    let bIsGeneralGroupName = true;
    if (opLayout) {
      messageHandling.getVisibleSectionsFromObjectPageLayout(opLayout).forEach(function (oSection) {
        const subSections = oSection.getSubSections();
        subSections.forEach(function (oSubSection) {
          oSubSection.findElements(true).forEach(function (oElem) {
            if (oElem.isA("sap.ui.mdc.Table")) {
              const oRowBinding = oElem.getRowBinding(),
                setSectionNameInGroup = true;
              let childTableElement;
              oElem.findElements(true).forEach(oElement => {
                if (oElement.isA("sap.m.Table") || oElement.isA("sap.ui.table.Table")) {
                  childTableElement = oElement;
                }
              });
              if (oRowBinding) {
                var _oElem$getRowBinding, _aModelData$target5;
                const sElemeBindingPath = `${oViewContext === null || oViewContext === void 0 ? void 0 : oViewContext.getPath()}/${(_oElem$getRowBinding = oElem.getRowBinding()) === null || _oElem$getRowBinding === void 0 ? void 0 : _oElem$getRowBinding.getPath()}`;
                if (((_aModelData$target5 = aModelData.target) === null || _aModelData$target5 === void 0 ? void 0 : _aModelData$target5.indexOf(sElemeBindingPath)) === 0) {
                  const obj = messageHandling.getTableColumnDataAndSetSubtile(aModelData, oElem, childTableElement, oRowBinding, sActionName, setSectionNameInGroup, fnCallbackSetGroupName);
                  const {
                    oTargetTableInfo
                  } = obj;
                  if (setSectionNameInGroup) {
                    const identifierColumn = oElem.getParent().getIdentifierColumn();
                    if (identifierColumn) {
                      const allRowContexts = oElem.getRowBinding().getContexts();
                      allRowContexts.forEach(rowContext => {
                        var _aModelData$target6;
                        if ((_aModelData$target6 = aModelData.target) !== null && _aModelData$target6 !== void 0 && _aModelData$target6.includes(rowContext.getPath())) {
                          const rowIdentifier = identifierColumn ? rowContext.getObject()[identifierColumn] : undefined;
                          aModelData["additionalText"] = `${rowIdentifier}, ${oTargetTableInfo.sTableTargetColName}`;
                        }
                      });
                    } else {
                      aModelData["additionalText"] = `${oTargetTableInfo.sTableTargetColName}`;
                    }
                    let headerName = oElem.getHeaderVisible() && oTargetTableInfo.tableHeader;
                    if (!headerName) {
                      headerName = oSubSection.getTitle();
                    } else {
                      const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
                      headerName = `${oResourceBundle.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${headerName}`;
                    }
                    aModelData["headerName"] = headerName;
                    bIsGeneralGroupName = false;
                  }
                }
              }
            }
          });
        });
      });
    }
    if (bIsGeneralGroupName) {
      var _aModelData$target7;
      const sElemeBindingPath = `${oViewContext === null || oViewContext === void 0 ? void 0 : oViewContext.getPath()}`;
      if (((_aModelData$target7 = aModelData.target) === null || _aModelData$target7 === void 0 ? void 0 : _aModelData$target7.indexOf(sElemeBindingPath)) === 0) {
        // check if OP context path is part of target, set Last Action as group name
        const headerName = messageHandling.getLastActionTextAndActionName(sActionName);
        aModelData["headerName"] = headerName;
      } else {
        aModelData["headerName"] = "General";
      }
    }
  }
  function getLastActionTextAndActionName(sActionName) {
    const sLastActionText = Core.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_LAST_ACTION");
    return sActionName ? `${sLastActionText}: ${sActionName}` : "";
  }

  /**
   * This function will give rank based on Message Group/Header name, which will be used for Sorting messages in Message dialog
   * Last Action should be shown at top, next Row Id and last General.
   *
   * @param obj
   * @returns Rank of message
   */
  function getMessageRank(obj) {
    var _obj$headerName, _obj$headerName2;
    if ((_obj$headerName = obj.headerName) !== null && _obj$headerName !== void 0 && _obj$headerName.toString().includes("Last Action")) {
      return 1;
    } else if ((_obj$headerName2 = obj.headerName) !== null && _obj$headerName2 !== void 0 && _obj$headerName2.toString().includes("General")) {
      return 3;
    } else {
      return 2;
    }
  }

  /**
   * This function will set the group name which can either General or Last Action.
   *
   * @param aMessage
   * @param sActionName
   * @param bIsGeneralGroupName
   */
  const fnCallbackSetGroupName = (aMessage, sActionName, bIsGeneralGroupName) => {
    if (bIsGeneralGroupName) {
      const sGeneralGroupText = Core.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL");
      aMessage["headerName"] = sGeneralGroupText;
    } else {
      aMessage["headerName"] = messageHandling.getLastActionTextAndActionName(sActionName);
    }
  };

  /**
   * This function will get the table row/column info and set subtitle.
   *
   * @param aMessage
   * @param oTable
   * @param oElement
   * @param oRowBinding
   * @param sActionName
   * @param setSectionNameInGroup
   * @param fnSetGroupName
   * @returns Table info and Subtitle.
   */
  function getTableColumnDataAndSetSubtile(aMessage, oTable, oElement, oRowBinding, sActionName, setSectionNameInGroup, fnSetGroupName) {
    const oTargetTableInfo = messageHandling.getTableAndTargetInfo(oTable, aMessage, oElement, oRowBinding);
    oTargetTableInfo.tableHeader = oTable.getHeader();
    let sControlId, bIsCreationRow;
    if (!oTargetTableInfo.oTableRowContext) {
      sControlId = aMessage.getControlIds().find(function (sId) {
        return messageHandling.isControlInTable(oTable, sId);
      });
    }
    if (sControlId) {
      const oControl = Core.byId(sControlId);
      bIsCreationRow = messageHandling.isControlPartOfCreationRow(oControl);
    }
    if (!oTargetTableInfo.sTableTargetColName) {
      // if the column is not present on UI or the target does not have a table field in it, use Last Action for grouping
      if (aMessage.persistent && sActionName) {
        fnSetGroupName(aMessage, sActionName);
        setSectionNameInGroup = false;
      }
    }
    const subTitle = messageHandling.getMessageSubtitle(aMessage, oTargetTableInfo.oTableRowBindingContexts, oTargetTableInfo.oTableRowContext, oTargetTableInfo.sTableTargetColName, oTable, bIsCreationRow);
    return {
      oTargetTableInfo,
      subTitle
    };
  }

  /**
   * This function will create the subtitle based on Table Row/Column data.
   *
   * @param message
   * @param oTableRowBindingContexts
   * @param oTableRowContext
   * @param sTableTargetColName
   * @param oTable
   * @param bIsCreationRow
   * @param oTargetedControl
   * @returns Message subtitle.
   */
  function getMessageSubtitle(message, oTableRowBindingContexts, oTableRowContext, sTableTargetColName, oTable, bIsCreationRow, oTargetedControl) {
    let sMessageSubtitle;
    let sRowSubtitleValue;
    const resourceModel = getResourceModel(oTable);
    const sTableFirstColProperty = oTable.getParent().getIdentifierColumn();
    const oColFromTableSettings = messageHandling.fetchColumnInfo(message, oTable);
    if (bIsCreationRow) {
      sMessageSubtitle = resourceModel.getText("T_MESSAGE_ITEM_SUBTITLE", [resourceModel.getText("T_MESSAGE_ITEM_SUBTITLE_CREATION_ROW_INDICATOR"), sTableTargetColName ? sTableTargetColName : oColFromTableSettings.label]);
    } else {
      const oTableFirstColBindingContextTextAnnotation = messageHandling.getTableFirstColBindingContextForTextAnnotation(oTable, oTableRowContext, sTableFirstColProperty);
      const sTableFirstColTextAnnotationPath = oTableFirstColBindingContextTextAnnotation ? oTableFirstColBindingContextTextAnnotation.getObject("$Path") : undefined;
      const sTableFirstColTextArrangement = sTableFirstColTextAnnotationPath && oTableFirstColBindingContextTextAnnotation ? oTableFirstColBindingContextTextAnnotation.getObject("@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember") : undefined;
      if (oTableRowBindingContexts.length > 0) {
        // set Row subtitle text
        if (oTargetedControl) {
          // The UI error is on the first column, we then get the control input as the row indicator:
          sRowSubtitleValue = oTargetedControl.getValue();
        } else if (oTableRowContext && sTableFirstColProperty) {
          sRowSubtitleValue = messageHandling.getTableFirstColValue(sTableFirstColProperty, oTableRowContext, sTableFirstColTextAnnotationPath, sTableFirstColTextArrangement);
        } else {
          sRowSubtitleValue = undefined;
        }
        // set the message subtitle
        const oColumnInfo = messageHandling.determineColumnInfo(oColFromTableSettings, resourceModel);
        if (sRowSubtitleValue && sTableTargetColName) {
          sMessageSubtitle = resourceModel.getText("T_MESSAGE_ITEM_SUBTITLE", [sRowSubtitleValue, sTableTargetColName]);
        } else if (sRowSubtitleValue && oColumnInfo.sColumnIndicator === "Hidden") {
          sMessageSubtitle = `${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${sRowSubtitleValue}, ${oColumnInfo.sColumnValue}`;
        } else if (sRowSubtitleValue && oColumnInfo.sColumnIndicator === "Unknown") {
          sMessageSubtitle = resourceModel.getText("T_MESSAGE_ITEM_SUBTITLE", [sRowSubtitleValue, oColumnInfo.sColumnValue]);
        } else if (sRowSubtitleValue && oColumnInfo.sColumnIndicator === "undefined") {
          sMessageSubtitle = `${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${sRowSubtitleValue}`;
        } else if (!sRowSubtitleValue && sTableTargetColName) {
          sMessageSubtitle = resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN") + ": " + sTableTargetColName;
        } else if (!sRowSubtitleValue && oColumnInfo.sColumnIndicator === "Hidden") {
          sMessageSubtitle = oColumnInfo.sColumnValue;
        } else {
          sMessageSubtitle = null;
        }
      } else {
        sMessageSubtitle = null;
      }
    }
    return sMessageSubtitle;
  }

  /**
   * This function will get the first column for text Annotation, this is needed to set subtitle of Message.
   *
   * @param oTable
   * @param oTableRowContext
   * @param sTableFirstColProperty
   * @returns Binding context.
   */
  function getTableFirstColBindingContextForTextAnnotation(oTable, oTableRowContext, sTableFirstColProperty) {
    let oBindingContext;
    if (oTableRowContext && sTableFirstColProperty) {
      const oModel = oTable === null || oTable === void 0 ? void 0 : oTable.getModel();
      const oMetaModel = oModel === null || oModel === void 0 ? void 0 : oModel.getMetaModel();
      const sMetaPath = oMetaModel === null || oMetaModel === void 0 ? void 0 : oMetaModel.getMetaPath(oTableRowContext.getPath());
      if (oMetaModel !== null && oMetaModel !== void 0 && oMetaModel.getObject(`${sMetaPath}/${sTableFirstColProperty}@com.sap.vocabularies.Common.v1.Text/$Path`)) {
        oBindingContext = oMetaModel.createBindingContext(`${sMetaPath}/${sTableFirstColProperty}@com.sap.vocabularies.Common.v1.Text`);
      }
    }
    return oBindingContext;
  }

  /**
   * This function will get the value of first Column of Table, with its text Arrangement.
   *
   * @param sTableFirstColProperty
   * @param oTableRowContext
   * @param sTextAnnotationPath
   * @param sTextArrangement
   * @returns Column Value.
   */
  function getTableFirstColValue(sTableFirstColProperty, oTableRowContext, sTextAnnotationPath, sTextArrangement) {
    const sCodeValue = oTableRowContext.getValue(sTableFirstColProperty);
    let sTextValue;
    let sComputedValue = sCodeValue;
    if (sTextAnnotationPath) {
      if (sTableFirstColProperty.lastIndexOf("/") > 0) {
        // the target property is replaced with the text annotation path
        sTableFirstColProperty = sTableFirstColProperty.slice(0, sTableFirstColProperty.lastIndexOf("/") + 1);
        sTableFirstColProperty = sTableFirstColProperty.concat(sTextAnnotationPath);
      } else {
        sTableFirstColProperty = sTextAnnotationPath;
      }
      sTextValue = oTableRowContext.getValue(sTableFirstColProperty);
      if (sTextValue) {
        if (sTextArrangement) {
          const sEnumNumber = sTextArrangement.slice(sTextArrangement.indexOf("/") + 1);
          switch (sEnumNumber) {
            case "TextOnly":
              sComputedValue = sTextValue;
              break;
            case "TextFirst":
              sComputedValue = `${sTextValue} (${sCodeValue})`;
              break;
            case "TextLast":
              sComputedValue = `${sCodeValue} (${sTextValue})`;
              break;
            case "TextSeparate":
              sComputedValue = sCodeValue;
              break;
            default:
          }
        } else {
          sComputedValue = `${sTextValue} (${sCodeValue})`;
        }
      }
    }
    return sComputedValue;
  }

  /**
   * The method that is called to retrieve the column info from the associated message of the message popover.
   *
   * @private
   * @param oMessage Message object
   * @param oTable MdcTable
   * @returns Returns the column info.
   */
  function fetchColumnInfo(oMessage, oTable) {
    const sColNameFromMessageObj = oMessage === null || oMessage === void 0 ? void 0 : oMessage.getTargets()[0].split("/").pop();
    return oTable.getParent().getTableDefinition().columns.find(function (oColumn) {
      return oColumn.key.split("::").pop() === sColNameFromMessageObj;
    });
  }

  /**
   * This function get the Column data depending on its availability in Table, this is needed for setting subtitle of Message.
   *
   * @param oColFromTableSettings
   * @param resourceModel
   * @returns Column data.
   */
  function determineColumnInfo(oColFromTableSettings, resourceModel) {
    const oColumnInfo = {
      sColumnIndicator: String,
      sColumnValue: String
    };
    if (oColFromTableSettings) {
      // if column is neither in table definition nor personalization, show only row subtitle text
      if (oColFromTableSettings.availability === "Hidden") {
        oColumnInfo.sColumnValue = undefined;
        oColumnInfo.sColumnIndicator = "undefined";
      } else {
        //if column is in table personalization but not in table definition, show Column (Hidden) : <colName>
        oColumnInfo.sColumnValue = `${resourceModel.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")} (${resourceModel.getText("T_COLUMN_INDICATOR_IN_TABLE_DEFINITION")}): ${oColFromTableSettings.label}`;
        oColumnInfo.sColumnIndicator = "Hidden";
      }
    } else {
      oColumnInfo.sColumnValue = resourceModel.getText("T_MESSAGE_ITEM_SUBTITLE_INDICATOR_UNKNOWN");
      oColumnInfo.sColumnIndicator = "Unknown";
    }
    return oColumnInfo;
  }

  /**
   * This function check if a given control id is a part of Table.
   *
   * @param oTable
   * @param sControlId
   * @returns True if control is part of table.
   */
  function isControlInTable(oTable, sControlId) {
    const oControl = Core.byId(sControlId);
    if (oControl && !oControl.isA("sap.ui.table.Table") && !oControl.isA("sap.m.Table")) {
      return oTable.findElements(true, function (oElem) {
        return oElem.getId() === oControl;
      });
    }
    return false;
  }
  function isControlPartOfCreationRow(oControl) {
    let oParentControl = oControl === null || oControl === void 0 ? void 0 : oControl.getParent();
    while (oParentControl && !((_oParentControl = oParentControl) !== null && _oParentControl !== void 0 && _oParentControl.isA("sap.ui.table.Row")) && !((_oParentControl2 = oParentControl) !== null && _oParentControl2 !== void 0 && _oParentControl2.isA("sap.ui.table.CreationRow")) && !((_oParentControl3 = oParentControl) !== null && _oParentControl3 !== void 0 && _oParentControl3.isA("sap.m.ColumnListItem"))) {
      var _oParentControl, _oParentControl2, _oParentControl3;
      oParentControl = oParentControl.getParent();
    }
    return !!oParentControl && oParentControl.isA("sap.ui.table.CreationRow");
  }
  function getTranslatedTextForMessageDialog(sHighestPriority) {
    const resourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
    switch (sHighestPriority) {
      case "Error":
        return resourceBundle.getText("C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR");
      case "Information":
        return resourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO");
      case "Success":
        return resourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS");
      case "Warning":
        return resourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING");
      default:
        return resourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE");
    }
  }
  function removeUnboundTransitionMessages() {
    removeTransitionMessages(false);
  }
  function removeBoundTransitionMessages(sPathToBeRemoved) {
    removeTransitionMessages(true, sPathToBeRemoved);
  }
  function getMessagesFromMessageModel(oMessageModel, sPathToBeRemoved) {
    if (sPathToBeRemoved === undefined) {
      return oMessageModel.getObject("/");
    }
    const listBinding = oMessageModel.bindList("/");
    listBinding.filter(new Filter({
      path: "target",
      operator: FilterOperator.StartsWith,
      value1: sPathToBeRemoved
    }));
    return listBinding.getCurrentContexts().map(function (oContext) {
      return oContext.getObject();
    });
  }
  function getMessages() {
    let bBoundMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    let bTransitionOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let sPathToBeRemoved = arguments.length > 2 ? arguments[2] : undefined;
    let i;
    const oMessageManager = Core.getMessageManager(),
      oMessageModel = oMessageManager.getMessageModel(),
      oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core"),
      aTransitionMessages = [];
    let aMessages = [];
    if (bBoundMessages && bTransitionOnly && sPathToBeRemoved) {
      aMessages = getMessagesFromMessageModel(oMessageModel, sPathToBeRemoved);
    } else {
      aMessages = oMessageModel.getObject("/");
    }
    for (i = 0; i < aMessages.length; i++) {
      if ((!bTransitionOnly || aMessages[i].persistent) && (bBoundMessages && aMessages[i].target !== "" || !bBoundMessages && (!aMessages[i].target || aMessages[i].target === ""))) {
        aTransitionMessages.push(aMessages[i]);
      }
    }
    for (i = 0; i < aTransitionMessages.length; i++) {
      if (aTransitionMessages[i].code === "503" && aTransitionMessages[i].message !== "" && aTransitionMessages[i].message.indexOf(oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX")) === -1) {
        aTransitionMessages[i].message = `\n${oResourceBundle.getText("C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX")}${aTransitionMessages[i].message}`;
      }
    }
    //Filtering messages again here to avoid showing pure technical messages raised by the model
    const backendMessages = [];
    for (i = 0; i < aTransitionMessages.length; i++) {
      if (aTransitionMessages[i].technicalDetails && (aTransitionMessages[i].technicalDetails.originalMessage !== undefined && aTransitionMessages[i].technicalDetails.originalMessage !== null || aTransitionMessages[i].technicalDetails.httpStatus !== undefined && aTransitionMessages[i].technicalDetails.httpStatus !== null) || aTransitionMessages[i].code) {
        backendMessages.push(aTransitionMessages[i]);
      }
    }
    return backendMessages;
  }
  function removeTransitionMessages(bBoundMessages, sPathToBeRemoved) {
    const aMessagesToBeDeleted = getMessages(bBoundMessages, true, sPathToBeRemoved);
    if (aMessagesToBeDeleted.length > 0) {
      Core.getMessageManager().removeMessages(aMessagesToBeDeleted);
    }
  }
  //TODO: This must be moved out of message handling
  function setMessageSubtitle(oTable, aContexts, message) {
    if (message.additionalText === undefined) {
      const subtitleColumn = oTable.getParent().getIdentifierColumn();
      const errorContext = aContexts.find(function (oContext) {
        return message.getTargets()[0].indexOf(oContext.getPath()) !== -1;
      });
      message.additionalText = errorContext ? errorContext.getObject()[subtitleColumn] : undefined;
    }
  }

  /**
   * The method retrieves the visible sections from an object page.
   *
   * @param oObjectPageLayout The objectPageLayout object for which we want to retrieve the visible sections.
   * @returns Array of visible sections.
   * @private
   */
  function getVisibleSectionsFromObjectPageLayout(oObjectPageLayout) {
    return oObjectPageLayout.getSections().filter(function (oSection) {
      return oSection.getVisible();
    });
  }

  /**
   * This function checks if control ids from message are a part of a given subsection.
   *
   * @param subSection
   * @param oMessageObject
   * @returns SubSection matching control ids.
   */
  function getControlFromMessageRelatingToSubSection(subSection, oMessageObject) {
    return subSection.findElements(true, oElem => {
      return fnFilterUponIds(oMessageObject.getControlIds(), oElem);
    }).sort(function (a, b) {
      // controls are sorted in order to have the table on top of the array
      // it will help to compute the subtitle of the message based on the type of related controls
      if (a.isA("sap.ui.mdc.Table") && !b.isA("sap.ui.mdc.Table")) {
        return -1;
      }
      return 1;
    });
  }
  function getTableColProperty(oTable, oMessageObject, oContextPath) {
    //this function escapes a string to use it as a regex
    const fnRegExpescape = function (s) {
      return s.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
    };
    // based on the target path of the message we retrieve the property name.
    // to achieve it we remove the bindingContext path and the row binding path from the target
    if (!oContextPath) {
      var _oTable$getBindingCon;
      oContextPath = new RegExp(`${fnRegExpescape(`${(_oTable$getBindingCon = oTable.getBindingContext()) === null || _oTable$getBindingCon === void 0 ? void 0 : _oTable$getBindingCon.getPath()}/${oTable.getRowBinding().getPath()}`)}\\(.*\\)/`);
    }
    return oMessageObject.getTargets()[0].replace(oContextPath, "");
  }

  /**
   * This function gives the column information if it matches with the property name from target of message.
   *
   * @param oTable
   * @param sTableTargetColProperty
   * @returns Column name and property.
   */
  function getTableColInfo(oTable, sTableTargetColProperty) {
    let sTableTargetColName;
    let oTableTargetCol = oTable.getColumns().find(function (column) {
      return column.getDataProperty() == sTableTargetColProperty;
    });
    if (!oTableTargetCol) {
      /* If the target column is not found, we check for a custom column */
      const oCustomColumn = oTable.getControlDelegate().getColumnsFor(oTable).find(function (oColumn) {
        if (!!oColumn.template && oColumn.propertyInfos) {
          return oColumn.propertyInfos[0] === sTableTargetColProperty || oColumn.propertyInfos[0].replace("Property::", "") === sTableTargetColProperty;
        } else {
          return false;
        }
      });
      if (oCustomColumn) {
        var _oTableTargetCol;
        oTableTargetCol = oCustomColumn;
        sTableTargetColProperty = (_oTableTargetCol = oTableTargetCol) === null || _oTableTargetCol === void 0 ? void 0 : _oTableTargetCol.name;
        sTableTargetColName = oTable.getColumns().find(function (oColumn) {
          return sTableTargetColProperty === oColumn.getDataProperty();
        }).getHeader();
      } else {
        /* If the target column is not found, we check for a field group */
        const aColumns = oTable.getControlDelegate().getColumnsFor(oTable);
        oTableTargetCol = aColumns.find(function (oColumn) {
          if (oColumn.key.indexOf("::FieldGroup::") !== -1) {
            var _oColumn$propertyInfo;
            return (_oColumn$propertyInfo = oColumn.propertyInfos) === null || _oColumn$propertyInfo === void 0 ? void 0 : _oColumn$propertyInfo.find(function () {
              return aColumns.find(function (tableColumn) {
                return tableColumn.relativePath === sTableTargetColProperty;
              });
            });
          }
        });
        /* check if the column with the field group is visible in the table: */
        let bIsTableTargetColVisible = false;
        if (oTableTargetCol && oTableTargetCol.label) {
          bIsTableTargetColVisible = oTable.getColumns().some(function (column) {
            return column.getHeader() === oTableTargetCol.label;
          });
        }
        sTableTargetColName = bIsTableTargetColVisible && oTableTargetCol.label;
        sTableTargetColProperty = bIsTableTargetColVisible && oTableTargetCol.key;
      }
    } else {
      sTableTargetColName = oTableTargetCol && oTableTargetCol.getHeader();
    }
    return {
      sTableTargetColName: sTableTargetColName,
      sTableTargetColProperty: sTableTargetColProperty
    };
  }

  /**
   * This function gives Table and column info if any of it matches the target from Message.
   *
   * @param oTable
   * @param oMessageObject
   * @param oElement
   * @param oRowBinding
   * @returns Table info matching the message target.
   */
  function getTableAndTargetInfo(oTable, oMessageObject, oElement, oRowBinding) {
    const oTargetTableInfo = {};
    oTargetTableInfo.sTableTargetColProperty = getTableColProperty(oTable, oMessageObject);
    const oTableColInfo = getTableColInfo(oTable, oTargetTableInfo.sTableTargetColProperty);
    oTargetTableInfo.oTableRowBindingContexts = oElement.isA("sap.ui.table.Table") ? oRowBinding.getContexts() : oRowBinding.getCurrentContexts();
    oTargetTableInfo.sTableTargetColName = oTableColInfo.sTableTargetColName;
    oTargetTableInfo.sTableTargetColProperty = oTableColInfo.sTableTargetColProperty;
    oTargetTableInfo.oTableRowContext = oTargetTableInfo.oTableRowBindingContexts.find(function (rowContext) {
      return rowContext && oMessageObject.getTargets()[0].indexOf(rowContext.getPath()) === 0;
    });
    return oTargetTableInfo;
  }

  /**
   *
   * @param aControlIds
   * @param oItem
   * @returns True if the item matches one of the controls
   */
  function fnFilterUponIds(aControlIds, oItem) {
    return aControlIds.some(function (sControlId) {
      if (sControlId === oItem.getId()) {
        return true;
      }
      return false;
    });
  }

  /**
   * This function gives the group name having section and subsection data.
   *
   * @param section
   * @param subSection
   * @param bMultipleSubSections
   * @param oTargetTableInfo
   * @param resourceModel
   * @returns Group name.
   */
  function createSectionGroupName(section, subSection, bMultipleSubSections, oTargetTableInfo, resourceModel) {
    return section.getTitle() + (subSection.getTitle() && bMultipleSubSections ? `, ${subSection.getTitle()}` : "") + (oTargetTableInfo ? `, ${resourceModel.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${oTargetTableInfo.tableHeader}` : "");
  }
  function bIsOrphanElement(oElement, aElements) {
    return !aElements.some(function (oElem) {
      let oParentElement = oElement.getParent();
      while (oParentElement && oParentElement !== oElem) {
        oParentElement = oParentElement.getParent();
      }
      return oParentElement ? true : false;
    });
  }

  /**
   * Static functions for Fiori Message Handling
   *
   * @namespace
   * @alias sap.fe.core.actions.messageHandling
   * @private
   * @experimental This module is only for experimental use! <br/><b>This is only a POC and maybe deleted</b>
   * @since 1.56.0
   */
  const messageHandling = {
    getMessages: getMessages,
    showUnboundMessages: showUnboundMessages,
    removeUnboundTransitionMessages: removeUnboundTransitionMessages,
    removeBoundTransitionMessages: removeBoundTransitionMessages,
    modifyETagMessagesOnly: fnModifyETagMessagesOnly,
    getRetryAfterMessage: getRetryAfterMessage,
    prepareMessageViewForDialog: prepareMessageViewForDialog,
    setMessageSubtitle: setMessageSubtitle,
    getVisibleSectionsFromObjectPageLayout: getVisibleSectionsFromObjectPageLayout,
    getControlFromMessageRelatingToSubSection: getControlFromMessageRelatingToSubSection,
    fnFilterUponIds: fnFilterUponIds,
    getTableAndTargetInfo: getTableAndTargetInfo,
    createSectionGroupName: createSectionGroupName,
    bIsOrphanElement: bIsOrphanElement,
    getLastActionTextAndActionName: getLastActionTextAndActionName,
    getTableColumnDataAndSetSubtile: getTableColumnDataAndSetSubtile,
    getTableColInfo: getTableColInfo,
    getTableColProperty: getTableColProperty,
    getMessageSubtitle: getMessageSubtitle,
    determineColumnInfo: determineColumnInfo,
    fetchColumnInfo: fetchColumnInfo,
    getTableFirstColBindingContextForTextAnnotation: getTableFirstColBindingContextForTextAnnotation,
    getMessageRank: getMessageRank,
    fnCallbackSetGroupName: fnCallbackSetGroupName,
    getTableFirstColValue: getTableFirstColValue,
    setGroupNameOPDisplayMode: setGroupNameOPDisplayMode,
    updateMessageObjectGroupName: updateMessageObjectGroupName,
    setGroupNameLRTable: setGroupNameLRTable,
    isControlInTable: isControlInTable,
    isControlPartOfCreationRow: isControlPartOfCreationRow
  };
  return messageHandling;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/messageHandler/messageHandling", ["sap/fe/core/helpers/ResourceModelHelper","sap/m/Bar","sap/m/Button","sap/m/Dialog","sap/m/FormattedText","sap/m/MessageBox","sap/m/MessageItem","sap/m/MessageToast","sap/m/MessageView","sap/m/Text","sap/ui/core/Core","sap/ui/core/format/DateFormat","sap/ui/core/IconPool","sap/ui/core/library","sap/ui/core/message/Message","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/json/JSONModel","sap/ui/model/Sorter"],function(e,t,n,o,r,a,i,s,l,u,g,c,f,d,p,T,m,E,_){"use strict";var S=e.getResourceModel;const A=d.MessageType;let C=[];let h=[];let M=[];let b;let I;let N;function R(){let e;function t(e){return e.property?"( ${"+e.property+'} ? ("<p>'+e.property.substr(Math.max(e.property.lastIndexOf("/"),e.property.lastIndexOf("."))+1)+' : " + '+"${"+e.property+'} + "</p>") : "" )':""}function n(t){let n="";if(t.groupName&&t.property&&t.groupName!==e){n+="( ${"+t.property+'} ? "<br><h3>'+t.groupName+'</h3>" : "" ) + ';e=t.groupName}return n}function o(){const e="technicalDetails";return[{groupName:"",property:`${e}/status`},{groupName:"",property:`${e}/statusText`},{groupName:"Application",property:`${e}/error/@SAP__common.Application/ComponentId`},{groupName:"Application",property:`${e}/error/@SAP__common.Application/ServiceId`},{groupName:"Application",property:`${e}/error/@SAP__common.Application/ServiceRepository`},{groupName:"Application",property:`${e}/error/@SAP__common.Application/ServiceVersion`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.ErrorResolution/Analysis`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.ErrorResolution/Note`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.ErrorResolution/DetailedNote`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.ExceptionCategory`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.TimeStamp`},{groupName:"ErrorResolution",property:`${e}/error/@SAP__common.TransactionId`},{groupName:"Messages",property:`${e}/error/code`},{groupName:"Messages",property:`${e}/error/message`}]}let r="Object.keys("+"${technicalDetails}"+').length > 0 ? "<h2>Technical Details</h2>" : "" ';o().forEach(function(e){r=`${r+n(e)}${t(e)} + `});return r}function P(){return"(${"+"description} ? (${"+'description}) : "")'}function x(e){let t=A.None;const n=e.length;const o={Error:0,Warning:0,Success:0,Information:0};for(let t=0;t<n;t++){++o[e[t].getType()]}if(o[A.Error]>0){t=A.Error}else if(o[A.Warning]>0){t=A.Warning}else if(o[A.Success]>0){t=A.Success}else if(o[A.Information]>0){t=A.Information}return t}function O(e,t,n){const o=e.getMessageModel().getObject("/");let r=false;let a="";o.forEach(function(i,s){const l=i.getTechnicalDetails&&i.getTechnicalDetails();if(l&&l.httpStatus===412&&l.isConcurrentModification){if(n){a=a||t.getText("C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES_CONCURRENT_MODIFICATION")}else{a=a||t.getText("C_APP_COMPONENT_SAPFE_ETAG_TECHNICAL_ISSUES")}e.removeMessages(o[s]);i.setMessage(a);i.target="";e.addMessages(i);r=true}});return r}function y(){b.close();I.setVisible(false);C=[];const e=N.getModel();if(e){e.setData({})}X()}function v(e,t){const n=new Date;const o=e.getTechnicalDetails();const r=g.getLibraryResourceBundle("sap.fe.core");let a;if(o&&o.httpStatus===503&&o.retryAfter){const e=o.retryAfter;let i;if(n.getFullYear()!==e.getFullYear()){i=c.getDateTimeInstance({pattern:"MMMM dd, yyyy 'at' hh:mm a"});a=r.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR",[i.format(e)])}else if(n.getFullYear()==e.getFullYear()){if(t){a=`${r.getText("C_MESSAGE_HANDLING_SAPFE_503_TITLE")} ${r.getText("C_MESSAGE_HANDLING_SAPFE_503_DESC")}`}else if(n.getMonth()!==e.getMonth()||n.getDate()!==e.getDate()){i=c.getDateTimeInstance({pattern:"MMMM dd 'at' hh:mm a"});a=r.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR",[i.format(e)])}else{i=c.getDateTimeInstance({pattern:"hh:mm a"});a=r.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR_DAY",[i.format(e)])}}}if(o&&o.httpStatus===503&&!o.retryAfter){a=r.getText("C_MESSAGE_HANDLING_SAPFE_503_ERROR_NO_RETRY_AFTER")}return a}function G(e,t,o){let r;if(!t){const e='{= ${description} ? "<html><body>" + '+P()+' + "</html></body>" : "" }';const t='{= ${technicalDetails} ? "<html><body>" + '+R()+' + "</html></body>" : "" }';r=new i(undefined,{counter:{path:"counter"},title:"{message}",subtitle:"{additionalText}",longtextUrl:"{descriptionUrl}",type:{path:"type"},groupName:"{headerName}",description:e+t,markupDescription:true})}else if(o){r=new i(undefined,{counter:{path:"counter"},title:"{message}",subtitle:"{additionalText}",longtextUrl:"{descriptionUrl}",type:{path:"type"},description:"{description}",markupDescription:true})}else{r=new i({title:"{message}",type:{path:"type"},longtextUrl:"{descriptionUrl}"})}N=new l({showDetailsPageHeader:false,itemSelect:function(){I.setVisible(true)},items:{path:"/",template:r}});N.setGroupItems(true);I=I||new n({icon:f.getIconURI("nav-back"),visible:false,press:function(){N.navigateBack();this.setVisible(false)}});N.setModel(e);return{oMessageView:N,oBackButton:I}}function D(e,i,l,c,f,d,S,R,P){let O=this.getMessages();const D=g.getMessageManager();let $;let L;const w=[new T({path:"persistent",operator:m.NE,value1:false})];let B=false,U=false;if(l){O=O.concat(Z(true,true));w.push(new T({path:"persistent",operator:m.EQ,value1:true}));const e=function(e){let t=Infinity,n=g.byId(e[0]);const r=g.byId(e[0]);while(n){const e=n instanceof o?r.getParent().findElements(true).indexOf(r):Infinity;if(n instanceof o){if(t>e){t=e;r.focus()}return false}n=n.getParent()}return true};w.push(new T({path:"controlIds",test:e,caseSensitive:true}))}else{w.push(new T({path:"target",operator:m.EQ,value1:""}))}if(e&&e.length){e.forEach(function(e){const t=e.code?e.code:"";D.addMessages(new p({message:e.text,type:e.type,target:"",persistent:true,code:t}))})}const H=N&&N.getModel()||new E;const V=this.modifyETagMessagesOnly(D,g.getLibraryResourceBundle("sap.fe.core"),c);if(O.length===1&&O[0].getCode()==="503"){U=true}else if(O.length!==0){B=true}let j;let k=[];if(B||!U&&!R){const e=D.getMessageModel().bindList("/",undefined,undefined,w),t=e.getCurrentContexts();if(t&&t.length>0){B=true;const e=[];t.forEach(function(t){const n=t.getObject();e.push(n);h=e});let n=[];if(Array.isArray(H.getData())){n=H.getData()}const o={};k=h.concat(n).filter(function(e){return!o[e.id]&&(o[e.id]=true)});H.setData(k)}}if(R){j={showMessageBox:U,showMessageDialog:B};j=R(O,j);U=j.showMessageBox;B=j.showMessageDialog;if(B||j.showChangeSetErrorDialog){k=j.filteredMessages?j.filteredMessages:k}}if(O.length===0&&!e&&!V){return Promise.resolve(true)}else if(O.length===1&&O[0].getType()===A.Success&&!e){return new Promise(e=>{s.show(O[0].message);if(H){H.setData({})}D.removeMessages(O);e()})}else if(B){ge.updateMessageObjectGroupName(k,f,d,P);H.setData(k);M=M||[];return new Promise(function(e,r){M.push(e);g.getLibraryResourceBundle("sap.fe.core",true).then(function(r){const a=false;if(j&&j.fnGetMessageSubtitle){H.getData().forEach(function(e){j.fnGetMessageSubtitle(e)})}const s=G(H,a);const l=new _("",undefined,undefined,(e,t)=>{const n=F(e);const o=F(t);if(n<o){return-1}if(n>o){return 1}return 0});s.oMessageView.getBinding("items").sort(l);b=b&&b.isOpen()?b:new o({resizable:true,endButton:new n({press:function(){y();D.removeMessages(k)},text:r.getText("C_COMMON_SAPFE_CLOSE")}),customHeader:new t({contentMiddle:[new u({text:r.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE")})],contentLeft:[I]}),contentWidth:"37.5em",contentHeight:"21.5em",verticalScrolling:false,afterClose:function(){for(let e=0;e<M.length;e++){M[e].call()}M=[]}});b.removeAllContent();b.addContent(s.oMessageView);if(V){sap.ui.require(["sap/m/ButtonType"],function(e){b.setBeginButton(new n({press:function(){y();if(i.hasPendingChanges()){i.getBinding().resetChanges()}i.refresh()},text:r.getText("C_COMMON_SAPFE_REFRESH"),type:e.Emphasized}))})}else{b.destroyBeginButton()}$=x(N.getItems());L=Q($);b.setState($);b.getCustomHeader().getContentMiddle()[0].setText(L);N.navigateBack();b.open();if(S){e(b)}}).catch(r)})}else if(U){return new Promise(function(e){const t=O[0];if(t.technicalDetails&&C.indexOf(t.technicalDetails.originalMessage.message)===-1||j&&j.showChangeSetErrorDialog){if(!j||!j.showChangeSetErrorDialog){C.push(t.technicalDetails.originalMessage.message)}let n="<html><body>";const o=v(t,true);if(o){n=`<h6>${o}</h6><br>`}if(j&&j.fnGetMessageSubtitle){j.fnGetMessageSubtitle(t)}if(t.getCode()!=="503"&&t.getAdditionalText()!==undefined){n=`${n+t.getAdditionalText()}: ${t.getMessage()}</html></body>`}else{n=`${n+t.getMessage()}</html></body>`}const i=new r({htmlText:n});a.error(i,{onClose:function(){C=[];if(l){q()}X();e(true)}})}})}else{return Promise.resolve(true)}}function $(e,t,n,o){e.forEach(e=>{var r,a,i;e["headerName"]="";if(!((r=e.target)!==null&&r!==void 0&&r.length)&&((a=e.getCode)===null||a===void 0?void 0:a.call(e))!=="FE_CUSTOM_MESSAGE_CHANGESET_ALL_FAILED"){e["headerName"]="General"}else if((i=e.target)!==null&&i!==void 0&&i.length){if(o==="ListReport"){ge.setGroupNameLRTable(t,e,n)}else if(o==="ObjectPage"){ge.setGroupNameOPDisplayMode(e,n,t)}else{e["headerName"]=ge.getLastActionTextAndActionName(n)}}})}function L(e,t,n){const o=e&&e.getRowBinding();if(o){var r;const a=`${e.getRowBinding().getPath()}`;if(((r=t.target)===null||r===void 0?void 0:r.indexOf(a))===0){const r=o.getCurrentContexts();r.forEach(o=>{var r;if((r=t.target)!==null&&r!==void 0&&r.includes(o.getPath())){const r=`${o.getPath()}/`;const a=e.getParent().getIdentifierColumn();const i=a&&o.getObject()[a];const s=ge.getTableColProperty(e,t,r);const{sTableTargetColName:l}=ge.getTableColInfo(e,s);if(s&&l){t["headerName"]=i?` ${i}`:e.getHeader()}else{t["headerName"]=ge.getLastActionTextAndActionName(n)}}})}}}function w(e,t,n){const o=n===null||n===void 0?void 0:n.getBindingContext();const r=(n===null||n===void 0?void 0:n.getContent)&&(n===null||n===void 0?void 0:n.getContent()[0]);let a=true;if(r){ge.getVisibleSectionsFromObjectPageLayout(r).forEach(function(n){const r=n.getSubSections();r.forEach(function(n){n.findElements(true).forEach(function(r){if(r.isA("sap.ui.mdc.Table")){const l=r.getRowBinding(),u=true;let c;r.findElements(true).forEach(e=>{if(e.isA("sap.m.Table")||e.isA("sap.ui.table.Table")){c=e}});if(l){var i,s;const f=`${o===null||o===void 0?void 0:o.getPath()}/${(i=r.getRowBinding())===null||i===void 0?void 0:i.getPath()}`;if(((s=e.target)===null||s===void 0?void 0:s.indexOf(f))===0){const o=ge.getTableColumnDataAndSetSubtile(e,r,c,l,t,u,U);const{oTargetTableInfo:i}=o;if(u){const t=r.getParent().getIdentifierColumn();if(t){const n=r.getRowBinding().getContexts();n.forEach(n=>{var o;if((o=e.target)!==null&&o!==void 0&&o.includes(n.getPath())){const o=t?n.getObject()[t]:undefined;e["additionalText"]=`${o}, ${i.sTableTargetColName}`}})}else{e["additionalText"]=`${i.sTableTargetColName}`}let o=r.getHeaderVisible()&&i.tableHeader;if(!o){o=n.getTitle()}else{const e=g.getLibraryResourceBundle("sap.fe.core");o=`${e.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${o}`}e["headerName"]=o;a=false}}}}})})})}if(a){var i;const n=`${o===null||o===void 0?void 0:o.getPath()}`;if(((i=e.target)===null||i===void 0?void 0:i.indexOf(n))===0){const n=ge.getLastActionTextAndActionName(t);e["headerName"]=n}else{e["headerName"]="General"}}}function B(e){const t=g.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_LAST_ACTION");return e?`${t}: ${e}`:""}function F(e){var t,n;if((t=e.headerName)!==null&&t!==void 0&&t.toString().includes("Last Action")){return 1}else if((n=e.headerName)!==null&&n!==void 0&&n.toString().includes("General")){return 3}else{return 2}}const U=(e,t,n)=>{if(n){const t=g.getLibraryResourceBundle("sap.fe.core").getText("T_MESSAGE_BUTTON_SAPFE_MESSAGE_GROUP_GENERAL");e["headerName"]=t}else{e["headerName"]=ge.getLastActionTextAndActionName(t)}};function H(e,t,n,o,r,a,i){const s=ge.getTableAndTargetInfo(t,e,n,o);s.tableHeader=t.getHeader();let l,u;if(!s.oTableRowContext){l=e.getControlIds().find(function(e){return ge.isControlInTable(t,e)})}if(l){const e=g.byId(l);u=ge.isControlPartOfCreationRow(e)}if(!s.sTableTargetColName){if(e.persistent&&r){i(e,r);a=false}}const c=ge.getMessageSubtitle(e,s.oTableRowBindingContexts,s.oTableRowContext,s.sTableTargetColName,t,u);return{oTargetTableInfo:s,subTitle:c}}function V(e,t,n,o,r,a,i){let s;let l;const u=S(r);const g=r.getParent().getIdentifierColumn();const c=ge.fetchColumnInfo(e,r);if(a){s=u.getText("T_MESSAGE_ITEM_SUBTITLE",[u.getText("T_MESSAGE_ITEM_SUBTITLE_CREATION_ROW_INDICATOR"),o?o:c.label])}else{const e=ge.getTableFirstColBindingContextForTextAnnotation(r,n,g);const a=e?e.getObject("$Path"):undefined;const f=a&&e?e.getObject("@com.sap.vocabularies.UI.v1.TextArrangement/$EnumMember"):undefined;if(t.length>0){if(i){l=i.getValue()}else if(n&&g){l=ge.getTableFirstColValue(g,n,a,f)}else{l=undefined}const e=ge.determineColumnInfo(c,u);if(l&&o){s=u.getText("T_MESSAGE_ITEM_SUBTITLE",[l,o])}else if(l&&e.sColumnIndicator==="Hidden"){s=`${u.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${l}, ${e.sColumnValue}`}else if(l&&e.sColumnIndicator==="Unknown"){s=u.getText("T_MESSAGE_ITEM_SUBTITLE",[l,e.sColumnValue])}else if(l&&e.sColumnIndicator==="undefined"){s=`${u.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW")}: ${l}`}else if(!l&&o){s=u.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")+": "+o}else if(!l&&e.sColumnIndicator==="Hidden"){s=e.sColumnValue}else{s=null}}else{s=null}}return s}function j(e,t,n){let o;if(t&&n){const r=e===null||e===void 0?void 0:e.getModel();const a=r===null||r===void 0?void 0:r.getMetaModel();const i=a===null||a===void 0?void 0:a.getMetaPath(t.getPath());if(a!==null&&a!==void 0&&a.getObject(`${i}/${n}@com.sap.vocabularies.Common.v1.Text/$Path`)){o=a.createBindingContext(`${i}/${n}@com.sap.vocabularies.Common.v1.Text`)}}return o}function k(e,t,n,o){const r=t.getValue(e);let a;let i=r;if(n){if(e.lastIndexOf("/")>0){e=e.slice(0,e.lastIndexOf("/")+1);e=e.concat(n)}else{e=n}a=t.getValue(e);if(a){if(o){const e=o.slice(o.indexOf("/")+1);switch(e){case"TextOnly":i=a;break;case"TextFirst":i=`${a} (${r})`;break;case"TextLast":i=`${r} (${a})`;break;case"TextSeparate":i=r;break;default:}}else{i=`${a} (${r})`}}}return i}function W(e,t){const n=e===null||e===void 0?void 0:e.getTargets()[0].split("/").pop();return t.getParent().getTableDefinition().columns.find(function(e){return e.key.split("::").pop()===n})}function Y(e,t){const n={sColumnIndicator:String,sColumnValue:String};if(e){if(e.availability==="Hidden"){n.sColumnValue=undefined;n.sColumnIndicator="undefined"}else{n.sColumnValue=`${t.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_COLUMN")} (${t.getText("T_COLUMN_INDICATOR_IN_TABLE_DEFINITION")}): ${e.label}`;n.sColumnIndicator="Hidden"}}else{n.sColumnValue=t.getText("T_MESSAGE_ITEM_SUBTITLE_INDICATOR_UNKNOWN");n.sColumnIndicator="Unknown"}return n}function K(e,t){const n=g.byId(t);if(n&&!n.isA("sap.ui.table.Table")&&!n.isA("sap.m.Table")){return e.findElements(true,function(e){return e.getId()===n})}return false}function z(e){let t=e===null||e===void 0?void 0:e.getParent();while(t&&!((n=t)!==null&&n!==void 0&&n.isA("sap.ui.table.Row"))&&!((o=t)!==null&&o!==void 0&&o.isA("sap.ui.table.CreationRow"))&&!((r=t)!==null&&r!==void 0&&r.isA("sap.m.ColumnListItem"))){var n,o,r;t=t.getParent()}return!!t&&t.isA("sap.ui.table.CreationRow")}function Q(e){const t=g.getLibraryResourceBundle("sap.fe.core");switch(e){case"Error":return t.getText("C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR");case"Information":return t.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_INFO");case"Success":return t.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_SUCCESS");case"Warning":return t.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE_WARNING");default:return t.getText("C_MESSAGE_HANDLING_SAPFE_ERROR_MESSAGES_PAGE_TITLE")}}function X(){ee(false)}function q(e){ee(true,e)}function J(e,t){if(t===undefined){return e.getObject("/")}const n=e.bindList("/");n.filter(new T({path:"target",operator:m.StartsWith,value1:t}));return n.getCurrentContexts().map(function(e){return e.getObject()})}function Z(){let e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let n=arguments.length>2?arguments[2]:undefined;let o;const r=g.getMessageManager(),a=r.getMessageModel(),i=g.getLibraryResourceBundle("sap.fe.core"),s=[];let l=[];if(e&&t&&n){l=J(a,n)}else{l=a.getObject("/")}for(o=0;o<l.length;o++){if((!t||l[o].persistent)&&(e&&l[o].target!==""||!e&&(!l[o].target||l[o].target===""))){s.push(l[o])}}for(o=0;o<s.length;o++){if(s[o].code==="503"&&s[o].message!==""&&s[o].message.indexOf(i.getText("C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX"))===-1){s[o].message=`\n${i.getText("C_MESSAGE_HANDLING_SAPFE_503_BACKEND_PREFIX")}${s[o].message}`}}const u=[];for(o=0;o<s.length;o++){if(s[o].technicalDetails&&(s[o].technicalDetails.originalMessage!==undefined&&s[o].technicalDetails.originalMessage!==null||s[o].technicalDetails.httpStatus!==undefined&&s[o].technicalDetails.httpStatus!==null)||s[o].code){u.push(s[o])}}return u}function ee(e,t){const n=Z(e,true,t);if(n.length>0){g.getMessageManager().removeMessages(n)}}function te(e,t,n){if(n.additionalText===undefined){const o=e.getParent().getIdentifierColumn();const r=t.find(function(e){return n.getTargets()[0].indexOf(e.getPath())!==-1});n.additionalText=r?r.getObject()[o]:undefined}}function ne(e){return e.getSections().filter(function(e){return e.getVisible()})}function oe(e,t){return e.findElements(true,e=>se(t.getControlIds(),e)).sort(function(e,t){if(e.isA("sap.ui.mdc.Table")&&!t.isA("sap.ui.mdc.Table")){return-1}return 1})}function re(e,t,n){const o=function(e){return e.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&")};if(!n){var r;n=new RegExp(`${o(`${(r=e.getBindingContext())===null||r===void 0?void 0:r.getPath()}/${e.getRowBinding().getPath()}`)}\\(.*\\)/`)}return t.getTargets()[0].replace(n,"")}function ae(e,t){let n;let o=e.getColumns().find(function(e){return e.getDataProperty()==t});if(!o){const a=e.getControlDelegate().getColumnsFor(e).find(function(e){if(!!e.template&&e.propertyInfos){return e.propertyInfos[0]===t||e.propertyInfos[0].replace("Property::","")===t}else{return false}});if(a){var r;o=a;t=(r=o)===null||r===void 0?void 0:r.name;n=e.getColumns().find(function(e){return t===e.getDataProperty()}).getHeader()}else{const r=e.getControlDelegate().getColumnsFor(e);o=r.find(function(e){if(e.key.indexOf("::FieldGroup::")!==-1){var n;return(n=e.propertyInfos)===null||n===void 0?void 0:n.find(function(){return r.find(function(e){return e.relativePath===t})})}});let a=false;if(o&&o.label){a=e.getColumns().some(function(e){return e.getHeader()===o.label})}n=a&&o.label;t=a&&o.key}}else{n=o&&o.getHeader()}return{sTableTargetColName:n,sTableTargetColProperty:t}}function ie(e,t,n,o){const r={};r.sTableTargetColProperty=re(e,t);const a=ae(e,r.sTableTargetColProperty);r.oTableRowBindingContexts=n.isA("sap.ui.table.Table")?o.getContexts():o.getCurrentContexts();r.sTableTargetColName=a.sTableTargetColName;r.sTableTargetColProperty=a.sTableTargetColProperty;r.oTableRowContext=r.oTableRowBindingContexts.find(function(e){return e&&t.getTargets()[0].indexOf(e.getPath())===0});return r}function se(e,t){return e.some(function(e){if(e===t.getId()){return true}return false})}function le(e,t,n,o,r){return e.getTitle()+(t.getTitle()&&n?`, ${t.getTitle()}`:"")+(o?`, ${r.getText("T_MESSAGE_GROUP_TITLE_TABLE_DENOMINATOR")}: ${o.tableHeader}`:"")}function ue(e,t){return!t.some(function(t){let n=e.getParent();while(n&&n!==t){n=n.getParent()}return n?true:false})}const ge={getMessages:Z,showUnboundMessages:D,removeUnboundTransitionMessages:X,removeBoundTransitionMessages:q,modifyETagMessagesOnly:O,getRetryAfterMessage:v,prepareMessageViewForDialog:G,setMessageSubtitle:te,getVisibleSectionsFromObjectPageLayout:ne,getControlFromMessageRelatingToSubSection:oe,fnFilterUponIds:se,getTableAndTargetInfo:ie,createSectionGroupName:le,bIsOrphanElement:ue,getLastActionTextAndActionName:B,getTableColumnDataAndSetSubtile:H,getTableColInfo:ae,getTableColProperty:re,getMessageSubtitle:V,determineColumnInfo:Y,fetchColumnInfo:W,getTableFirstColBindingContextForTextAnnotation:j,getMessageRank:F,fnCallbackSetGroupName:U,getTableFirstColValue:k,setGroupNameOPDisplayMode:w,updateMessageObjectGroupName:$,setGroupNameLRTable:L,isControlInTable:K,isControlPartOfCreationRow:z};return ge},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/pageReady/DataQueryWatcher-dbg", ["sap/base/Log", "sap/fe/macros/table/Utils"], function (Log, Utils) {
  "use strict";

  let DataQueryWatcher = /*#__PURE__*/function () {
    function DataQueryWatcher(_oEventProvider, _fnOnFinished) {
      this._aBindingRegistrations = [];
      this._aOtherEventSources = [];
      this._isSearchPending = false;
      this._aMDCTables = [];
      this._aMDCCharts = [];
      this._oEventProvider = _oEventProvider;
      this._fnOnFinished = _fnOnFinished;
    }

    // Accessors
    var _proto = DataQueryWatcher.prototype;
    _proto.isSearchPending = function isSearchPending() {
      return this._isSearchPending;
    };
    _proto.isDataReceived = function isDataReceived() {
      return this._isDataReceived;
    };
    _proto.resetDataReceived = function resetDataReceived() {
      this._isDataReceived = undefined;
    }

    /**
     * Reset the state: unsubscribe to all data events and remove all registered objects.
     */;
    _proto.reset = function reset() {
      // Remove all remaining callbacks
      this._aBindingRegistrations.forEach(reg => {
        reg.binding.detachEvent("dataRequested", this.onDataRequested, this);
        reg.binding.detachEvent("dataReceived", this.onDataReceived, this);
      });
      this._aOtherEventSources.forEach(oElement => {
        oElement.detachEvent("search", this.onSearch, this);
        oElement.detachEvent("bindingUpdated", this.register, this);
      });
      this._aBindingRegistrations = [];
      this._aOtherEventSources = [];
      this._aMDCTables = [];
      this._aMDCCharts = [];
      this._isSearchPending = false;
      this._isDataReceived = undefined;
    }

    // //////////////////////////////////////////////////
    // Callback when data is received on a binding.
    ;
    _proto.onDataReceived = function onDataReceived(oEvent, params) {
      // Look for the corresponding binding registration
      const binding = oEvent.getSource();
      const bindingRegistration = this._aBindingRegistrations.find(reg => {
        return reg.binding === binding;
      });
      if (!bindingRegistration) {
        Log.error("PageReady - data received on an unregistered binding");
        return;
      }
      switch (binding.getGroupId()) {
        case "$auto.Workers":
          this._oEventProvider.fireEvent("workersBatchReceived");
          break;
        case "$auto.Heroes":
          this._oEventProvider.fireEvent("heroesBatchReceived");
          break;
        default:
      }
      bindingRegistration.receivedCount++;
      if (bindingRegistration.receivedCount < bindingRegistration.requestedCount) {
        // There are other request pending --> resubscribe to wait until they return
        binding.attachEventOnce("dataReceived", {
          triggeredBySearch: params.triggeredBySearch
        }, this.onDataReceived, this);
        return;
      }
      // Check if at least one binding has requested data, and all bindings that have requested data have received it
      const bAllDone = this._aBindingRegistrations.some(reg => {
        return reg.requestedCount !== 0;
      }) && this._aBindingRegistrations.every(reg => {
        return reg.requestedCount === 0 || reg.receivedCount >= reg.requestedCount;
      });
      if (params.triggeredBySearch || bindingRegistration.receivedCount >= bindingRegistration.requestedCount) {
        this._isSearchPending = false;
      }
      if (bAllDone) {
        this._isDataReceived = true;
        this._fnOnFinished();
      }
    }

    // //////////////////////////////////////////////////
    // Callback when data is requested on a binding.
    ;
    _proto.onDataRequested = function onDataRequested(oEvent, params) {
      // Look for the corresponding binding registration
      const binding = oEvent.getSource();
      const bindingRegistration = this._aBindingRegistrations.find(reg => {
        return reg.binding === binding;
      });
      if (!bindingRegistration) {
        Log.error("PageReady - data requested on an unregistered binding");
        return;
      }
      bindingRegistration.requestedCount++;
      this._isDataReceived = false;
      if (bindingRegistration.requestedCount - bindingRegistration.receivedCount === 1) {
        // Listen to dataReceived only if there's no other request pending
        // Otherwise the 'dataReceived' handler would be called several times when the first query returns
        // and we wouldn't wait for all queries to be finished
        // (we will resubscribe to the dataReceived event in onDataReceived if necessary)
        binding.attachEventOnce("dataReceived", {
          triggeredBySearch: params.triggeredBySearch
        }, this.onDataReceived, this);
      }
    }

    // //////////////////////////////////////////////////
    // Callback when a search is triggered from a filterbar
    ;
    _proto.onSearch = function onSearch(oEvent) {
      const aMDCTableLinkedToFilterBar = this._aMDCTables.filter(oTable => {
        var _oTable$getParent;
        return oEvent.getSource().sId === oTable.getFilter() && oTable.getVisible() && !((_oTable$getParent = oTable.getParent()) !== null && _oTable$getParent !== void 0 && _oTable$getParent.getProperty("bindingSuspended"));
      });
      const aMDCChartsLinkedToFilterBar = this._aMDCCharts.filter(oChart => {
        return oEvent.getSource().sId === oChart.getFilter() && oChart.getVisible();
      });
      if (aMDCTableLinkedToFilterBar.length > 0 || aMDCChartsLinkedToFilterBar.length > 0) {
        this._isSearchPending = true;
      }
      aMDCTableLinkedToFilterBar.forEach(oTable => {
        this.registerTable(oTable, true);
      });
      aMDCChartsLinkedToFilterBar.forEach(async oChart => {
        try {
          if (oChart.innerChartBoundPromise) {
            await oChart.innerChartBoundPromise;
          }
          this.registerChart(oChart, true);
        } catch (oError) {
          Log.error("Cannot find a inner bound chart", oError);
        }
      });
    }

    // //////////////////////////////////////////////////
    // Register a binding (with an optional table/chart)
    // and attach callbacks on dateRequested/dataReceived events
    ;
    _proto.register = function register(_event, data) {
      var _data$table, _data$chart;
      const binding = data.binding || ((_data$table = data.table) === null || _data$table === void 0 ? void 0 : _data$table.getRowBinding()) || ((_data$chart = data.chart) === null || _data$chart === void 0 ? void 0 : _data$chart.getControlDelegate().getInnerChart(data.chart).getBinding("data"));
      const boundControl = data.table || data.chart;
      if (!binding) {
        return;
      }
      // Check if the binding is already registered
      let bindingRegistration = this._aBindingRegistrations.find(reg => {
        return reg.binding === binding;
      });
      if (bindingRegistration) {
        if (boundControl) {
          // The binding was already registerd without boundControl information --> update boundControl
          bindingRegistration.boundControl = boundControl;
        }
        // This binding has already requested data, but we're registering it again (on search) --> attach to dataRequested again
        if (bindingRegistration.requestedCount > 0) {
          binding.detachEvent("dataRequested", this.onDataRequested, this);
          binding.attachEventOnce("dataRequested", {
            triggeredBySearch: data.triggeredBySearch
          }, this.onDataRequested, this);
        }
        return;
      }
      if (boundControl) {
        // Check if there's a different binding registered for the bound control
        bindingRegistration = this._aBindingRegistrations.find(reg => {
          return reg.boundControl === boundControl;
        });
        if (bindingRegistration && bindingRegistration.binding !== binding) {
          // The control had a different binding. This can happen in case of MDC charts who recreated their binding after search
          // The previous binding is destroyed, we can replace it with the new and reset counters
          bindingRegistration.binding = binding;
          bindingRegistration.requestedCount = 0;
          bindingRegistration.receivedCount = 0;
        }
      }
      if (!bindingRegistration) {
        bindingRegistration = {
          binding: binding,
          boundControl: boundControl,
          requestedCount: 0,
          receivedCount: 0
        };
        this._aBindingRegistrations.push(bindingRegistration);
      }
      binding.detachEvent("dataRequested", this.onDataRequested, this);
      binding.attachEventOnce("dataRequested", {
        triggeredBySearch: data.triggeredBySearch
      }, this.onDataRequested, this);
    }

    /**
     * Registers a binding for watching its data events (dataRequested and dataReceived).
     *
     * @param binding The binding
     */;
    _proto.registerBinding = function registerBinding(binding) {
      this.register(null, {
        binding,
        triggeredBySearch: false
      });
    }

    /**
     * Registers an MDCTable for watching the data events on its row binding (dataRequested and dataReceived).
     *
     * @param table The table
     * @param triggeredBySearch True if this registration is triggered by a filterBar search
     */;
    _proto.registerTable = function registerTable(table) {
      let triggeredBySearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this._aMDCTables.indexOf(table) < 0) {
        this._aMDCTables.push(table);
      }
      const oRowBinding = table.getRowBinding();
      if (oRowBinding) {
        this.register(null, {
          table,
          triggeredBySearch
        });
      }
      if (this._aOtherEventSources.indexOf(table) === -1) {
        table.attachEvent("bindingUpdated", {
          table,
          triggeredBySearch
        }, this.register, this);
        this._aOtherEventSources.push(table);
      }
    }

    /**
     * Registers an MDCChart for watching the data events on its inner data binding (dataRequested and dataReceived).
     *
     * @param chart The chart
     * @param triggeredBySearch True if this registration is triggered by a filterBar search
     */;
    _proto.registerChart = function registerChart(chart) {
      let triggeredBySearch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this._aMDCCharts.indexOf(chart) < 0) {
        this._aMDCCharts.push(chart);
      }
      const oInnerChart = chart.getControlDelegate().getInnerChart(chart);
      const binding = oInnerChart === null || oInnerChart === void 0 ? void 0 : oInnerChart.getBinding("data");
      if (binding) {
        this.register(null, {
          chart,
          triggeredBySearch
        });
      }
      if (this._aOtherEventSources.indexOf(chart) === -1) {
        chart.attachEvent("bindingUpdated", {
          chart,
          triggeredBySearch
        }, this.register, this);
        this._aOtherEventSources.push(chart);
      }
    }

    /**
     * Registers an MDCTable or MDCChart for watching the data events on its inner data binding (dataRequested and dataReceived).
     *
     * @param element  The table or chart
     */;
    _proto.registerTableOrChart = async function registerTableOrChart(element) {
      if (!element.isA("sap.ui.mdc.Table") && !element.isA("sap.ui.mdc.Chart")) {
        return;
      }
      try {
        await element.initialized(); // access binding only after table/chart is bound
        if (element.isA("sap.ui.mdc.Table")) {
          this.registerTable(element);
          //If the autoBindOnInit is enabled, the table will be rebound
          //Then we need to wait for this rebind to occur to ensure the pageReady will also wait for the data to be received
          if (element.getAutoBindOnInit() && element.getDomRef()) {
            await Utils.whenBound(element);
          }
        } else {
          this.registerChart(element);
        }
      } catch (oError) {
        Log.error("PageReady - Cannot register a table or a chart", oError);
      }
    }

    /**
     * Registers an MDCFilterBar for watching its search event.
     *
     * @param filterBar The filter bar
     */;
    _proto.registerFilterBar = function registerFilterBar(filterBar) {
      filterBar.attachEvent("search", this.onSearch, this);
      this._aOtherEventSources.push(filterBar);
    };
    return DataQueryWatcher;
  }();
  return DataQueryWatcher;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/pageReady/DataQueryWatcher", ["sap/base/Log","sap/fe/macros/table/Utils"],function(e,t){"use strict";let i=function(){function i(e,t){this._aBindingRegistrations=[];this._aOtherEventSources=[];this._isSearchPending=false;this._aMDCTables=[];this._aMDCCharts=[];this._oEventProvider=e;this._fnOnFinished=t}var n=i.prototype;n.isSearchPending=function e(){return this._isSearchPending};n.isDataReceived=function e(){return this._isDataReceived};n.resetDataReceived=function e(){this._isDataReceived=undefined};n.reset=function e(){this._aBindingRegistrations.forEach(e=>{e.binding.detachEvent("dataRequested",this.onDataRequested,this);e.binding.detachEvent("dataReceived",this.onDataReceived,this)});this._aOtherEventSources.forEach(e=>{e.detachEvent("search",this.onSearch,this);e.detachEvent("bindingUpdated",this.register,this)});this._aBindingRegistrations=[];this._aOtherEventSources=[];this._aMDCTables=[];this._aMDCCharts=[];this._isSearchPending=false;this._isDataReceived=undefined};n.onDataReceived=function t(i,n){const r=i.getSource();const a=this._aBindingRegistrations.find(e=>e.binding===r);if(!a){e.error("PageReady - data received on an unregistered binding");return}switch(r.getGroupId()){case"$auto.Workers":this._oEventProvider.fireEvent("workersBatchReceived");break;case"$auto.Heroes":this._oEventProvider.fireEvent("heroesBatchReceived");break;default:}a.receivedCount++;if(a.receivedCount<a.requestedCount){r.attachEventOnce("dataReceived",{triggeredBySearch:n.triggeredBySearch},this.onDataReceived,this);return}const s=this._aBindingRegistrations.some(e=>e.requestedCount!==0)&&this._aBindingRegistrations.every(e=>e.requestedCount===0||e.receivedCount>=e.requestedCount);if(n.triggeredBySearch||a.receivedCount>=a.requestedCount){this._isSearchPending=false}if(s){this._isDataReceived=true;this._fnOnFinished()}};n.onDataRequested=function t(i,n){const r=i.getSource();const a=this._aBindingRegistrations.find(e=>e.binding===r);if(!a){e.error("PageReady - data requested on an unregistered binding");return}a.requestedCount++;this._isDataReceived=false;if(a.requestedCount-a.receivedCount===1){r.attachEventOnce("dataReceived",{triggeredBySearch:n.triggeredBySearch},this.onDataReceived,this)}};n.onSearch=function t(i){const n=this._aMDCTables.filter(e=>{var t;return i.getSource().sId===e.getFilter()&&e.getVisible()&&!((t=e.getParent())!==null&&t!==void 0&&t.getProperty("bindingSuspended"))});const r=this._aMDCCharts.filter(e=>i.getSource().sId===e.getFilter()&&e.getVisible());if(n.length>0||r.length>0){this._isSearchPending=true}n.forEach(e=>{this.registerTable(e,true)});r.forEach(async t=>{try{if(t.innerChartBoundPromise){await t.innerChartBoundPromise}this.registerChart(t,true)}catch(t){e.error("Cannot find a inner bound chart",t)}})};n.register=function e(t,i){var n,r;const a=i.binding||((n=i.table)===null||n===void 0?void 0:n.getRowBinding())||((r=i.chart)===null||r===void 0?void 0:r.getControlDelegate().getInnerChart(i.chart).getBinding("data"));const s=i.table||i.chart;if(!a){return}let d=this._aBindingRegistrations.find(e=>e.binding===a);if(d){if(s){d.boundControl=s}if(d.requestedCount>0){a.detachEvent("dataRequested",this.onDataRequested,this);a.attachEventOnce("dataRequested",{triggeredBySearch:i.triggeredBySearch},this.onDataRequested,this)}return}if(s){d=this._aBindingRegistrations.find(e=>e.boundControl===s);if(d&&d.binding!==a){d.binding=a;d.requestedCount=0;d.receivedCount=0}}if(!d){d={binding:a,boundControl:s,requestedCount:0,receivedCount:0};this._aBindingRegistrations.push(d)}a.detachEvent("dataRequested",this.onDataRequested,this);a.attachEventOnce("dataRequested",{triggeredBySearch:i.triggeredBySearch},this.onDataRequested,this)};n.registerBinding=function e(t){this.register(null,{binding:t,triggeredBySearch:false})};n.registerTable=function e(t){let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(this._aMDCTables.indexOf(t)<0){this._aMDCTables.push(t)}const n=t.getRowBinding();if(n){this.register(null,{table:t,triggeredBySearch:i})}if(this._aOtherEventSources.indexOf(t)===-1){t.attachEvent("bindingUpdated",{table:t,triggeredBySearch:i},this.register,this);this._aOtherEventSources.push(t)}};n.registerChart=function e(t){let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(this._aMDCCharts.indexOf(t)<0){this._aMDCCharts.push(t)}const n=t.getControlDelegate().getInnerChart(t);const r=n===null||n===void 0?void 0:n.getBinding("data");if(r){this.register(null,{chart:t,triggeredBySearch:i})}if(this._aOtherEventSources.indexOf(t)===-1){t.attachEvent("bindingUpdated",{chart:t,triggeredBySearch:i},this.register,this);this._aOtherEventSources.push(t)}};n.registerTableOrChart=async function i(n){if(!n.isA("sap.ui.mdc.Table")&&!n.isA("sap.ui.mdc.Chart")){return}try{await n.initialized();if(n.isA("sap.ui.mdc.Table")){this.registerTable(n);if(n.getAutoBindOnInit()&&n.getDomRef()){await t.whenBound(n)}}else{this.registerChart(n)}}catch(t){e.error("PageReady - Cannot register a table or a chart",t)}};n.registerFilterBar=function e(t){t.attachEvent("search",this.onSearch,this);this._aOtherEventSources.push(t)};return i}();return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/routing/NavigationReason-dbg", [], function () {
  "use strict";

  var NavigationReason;
  (function (NavigationReason) {
    NavigationReason["RowPress"] = "RowPress";
    NavigationReason["AppStateChanged"] = "AppStateChanged";
  })(NavigationReason || (NavigationReason = {}));
  return NavigationReason;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/routing/NavigationReason", [],function(){"use strict";var e;(function(e){e["RowPress"]="RowPress";e["AppStateChanged"]="AppStateChanged"})(e||(e={}));return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/routing/RouterProxy-dbg", ["sap/base/Log", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/Synchronization", "sap/ui/base/Object", "sap/ui/core/Core", "sap/ui/thirdparty/URI"], function (Log, ClassSupport, Synchronization, BaseObject, Core, URI) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  const enumState = {
    EQUAL: 0,
    COMPATIBLE: 1,
    ANCESTOR: 2,
    DIFFERENT: 3
  };
  const enumURLParams = {
    LAYOUTPARAM: "layout",
    IAPPSTATEPARAM: "sap-iapp-state"
  };

  /**
   * Creates a HashGuard object.
   *
   * @param sGuardHash The hash used for the guard
   * @returns The created hash guard
   */
  function createGuardFromHash(sGuardHash) {
    return {
      _guardHash: sGuardHash.replace(/\?[^?]*$/, ""),
      // Remove query part
      check: function (sHash) {
        return sHash.indexOf(this._guardHash) === 0;
      }
    };
  }
  /**
   * Returns the iAppState part from a hash (or null if not found).
   *
   * @param sHash The hash
   * @returns The iAppState part of the hash
   */
  function findAppStateInHash(sHash) {
    const aAppState = sHash.match(new RegExp(`\\?.*${enumURLParams.IAPPSTATEPARAM}=([^&]*)`));
    return aAppState && aAppState.length > 1 ? aAppState[1] : null;
  }
  /**
   * Returns a hash without its iAppState part.
   *
   * @param sHash The hash
   * @returns The hash without the iAppState
   */
  function removeAppStateInHash(sHash) {
    return sHash.replace(new RegExp(`[&?]*${enumURLParams.IAPPSTATEPARAM}=[^&]*`), "");
  }
  /**
   * Adds an iAppState inside a hash (or replaces an existing one).
   *
   * @param sHash The hash
   * @param sAppStateKey The iAppState to add
   * @returns The hash with the app state
   */
  function setAppStateInHash(sHash, sAppStateKey) {
    let sNewHash;
    if (sHash.indexOf(enumURLParams.IAPPSTATEPARAM) >= 0) {
      // If there's already an iAppState parameter in the hash, replace it
      sNewHash = sHash.replace(new RegExp(`${enumURLParams.IAPPSTATEPARAM}=[^&]*`), `${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`);
    } else {
      // Add the iAppState parameter in the hash
      if (sHash.indexOf("?") < 0) {
        sNewHash = `${sHash}?`;
      } else {
        sNewHash = `${sHash}&`;
      }
      sNewHash += `${enumURLParams.IAPPSTATEPARAM}=${sAppStateKey}`;
    }
    return sNewHash;
  }
  let RouterProxy = (_dec = defineUI5Class("sap.fe.core.RouterProxy"), _dec(_class = /*#__PURE__*/function (_BaseObject) {
    _inheritsLoose(RouterProxy, _BaseObject);
    function RouterProxy() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseObject.call(this, ...args) || this;
      _this.bIsRebuildHistoryRunning = false;
      _this.bIsComputingTitleHierachy = false;
      _this.bIsGuardCrossAllowed = false;
      _this.sIAppStateKey = null;
      _this._bActivateRouteMatchSynchro = false;
      _this._bApplyRestore = false;
      _this._bDelayedRebuild = false;
      _this._pathMappings = [];
      return _this;
    }
    var _proto = RouterProxy.prototype;
    _proto.init = function init(oAppComponent, isfclEnabled) {
      // Save the name of the app (including startup parameters) for rebuilding full hashes later
      oAppComponent.getService("shellServices").then(() => {
        this._oShellServices = oAppComponent.getShellServices();
        this.initRaw(oAppComponent.getRouter());
        // We want to wait until the initial routeMatched is done before doing any navigation
        this.waitForRouteMatchBeforeNavigation();

        // Set feLevel=0 for the first Application page in the history
        history.replaceState(Object.assign({
          feLevel: 0
        }, history.state), "", window.location);
        this.fclEnabled = isfclEnabled;
        this._fnBlockingNavFilter = this._blockingNavigationFilter.bind(this);
        this._oShellServices.registerNavigationFilter(this._fnBlockingNavFilter);
      }).catch(function (oError) {
        Log.error("Cannot retrieve the shell services", oError);
      });
      this._fnHashGuard = this.hashGuard.bind(this);
      window.addEventListener("popstate", this._fnHashGuard);
      this._bDisableOnHashChange = false;
      this._bIgnoreRestore = false;
      this._bForceFocus = true; // Trigger the focus mechanism for the first view displayed by the app
    };
    _proto.destroy = function destroy() {
      if (this._oShellServices) {
        this._oShellServices.unregisterNavigationFilter(this._fnBlockingNavFilter);
      }
      window.removeEventListener("popstate", this._fnHashGuard);
    }

    /**
     * Raw initialization (for unit tests).
     *
     * @param oRouter The router used by this proxy
     */;
    _proto.initRaw = function initRaw(oRouter) {
      this._oRouter = oRouter;
      this._oManagedHistory = [];
      this._oNavigationGuard = null;
      const sCurrentAppHash = this.getHash();
      this._oManagedHistory.push(this._extractStateFromHash(sCurrentAppHash));

      // Set the iAppState if the initial hash contains one
      this.sIAppStateKey = findAppStateInHash(sCurrentAppHash);
    };
    _proto.getHash = function getHash() {
      return this._oRouter.getHashChanger().getHash();
    };
    _proto.isFocusForced = function isFocusForced() {
      return this._bForceFocus;
    };
    _proto.setFocusForced = function setFocusForced(bForced) {
      this._bForceFocus = bForced;
    }

    /**
     * Resets the internal variable sIAppStateKey.
     *
     * @function
     * @name sap.fe.core.RouterProxy#removeIAppStateKey
     * @ui5-restricted
     */;
    _proto.removeIAppStateKey = function removeIAppStateKey() {
      this.sIAppStateKey = null;
    }

    /**
     * Navigates to a specific hash.
     *
     * @function
     * @name sap.fe.core.RouterProxy#navToHash
     * @memberof sap.fe.core.RouterProxy
     * @static
     * @param sHash Hash to be navigated to
     * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained
     * @param bDisablePreservationCache If set to true, cache preservation mechanism is disabled for the current navigation
     * @param bForceFocus If set to true, the logic to set the focus once the navigation is finalized will be triggered (onPageReady)
     * @param bPreserveShellBackNavigationHandler If not set to false, the back navigation is set to undefined
     * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen
     * @ui5-restricted
     */;
    _proto.navToHash = function navToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus, bPreserveShellBackNavigationHandler) {
      if (bPreserveShellBackNavigationHandler !== false) {
        this._oShellServices.setBackNavigation();
      }
      if (this._oRouteMatchSynchronization) {
        return this._oRouteMatchSynchronization.waitFor().then(() => {
          this._oRouteMatchSynchronization = undefined;
          return this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);
        });
      } else {
        if (this._bActivateRouteMatchSynchro) {
          this.waitForRouteMatchBeforeNavigation();
        }
        return this._internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus);
      }
    };
    _proto._internalNavToHash = function _internalNavToHash(sHash, bPreserveHistory, bDisablePreservationCache, bForceFocus) {
      // Add the app state in the hash if needed
      if (this.fclEnabled && this.sIAppStateKey && !findAppStateInHash(sHash)) {
        sHash = setAppStateInHash(sHash, this.sIAppStateKey);
      }
      if (!this.checkHashWithGuard(sHash)) {
        if (!this.oResourceBundle) {
          this.oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
        }

        // We have to use a confirm here for UI consistency reasons, as with some scenarios
        // in the EditFlow we rely on a UI5 mechanism that displays a confirm dialog.
        // eslint-disable-next-line no-alert
        if (!confirm(this.oResourceBundle.getText("C_ROUTER_PROXY_SAPFE_EXIT_NOTSAVED_MESSAGE"))) {
          // The user clicked on Cancel --> cancel navigation
          return Promise.resolve(false);
        }
        this.bIsGuardCrossAllowed = true;
      }

      // In case the navigation will cause a new view to be displayed, we force the focus
      // I.e. if the keys for the hash we're navigating to is a superset of the current hash keys.
      const oNewState = this._extractStateFromHash(sHash);
      if (!this._bForceFocus) {
        // If the focus was already forced, keep it
        const aCurrentHashKeys = this._extractEntitySetsFromHash(this.getHash());
        this._bForceFocus = bForceFocus || aCurrentHashKeys.length < oNewState.keys.length && aCurrentHashKeys.every(function (key, index) {
          return key === oNewState.keys[index];
        });
      }
      const oHistoryAction = this._pushNewState(oNewState, false, bPreserveHistory, bDisablePreservationCache);
      this.storeFocusInfoForCurrentHash();
      return this._rebuildBrowserHistory(oHistoryAction, false);
    }

    /**
     * Clears browser history if entries have been added without using the RouterProxy.
     * Updates the internal history accordingly.
     *
     * @returns Promise that is resolved once the history is rebuilt
     */;
    _proto.restoreHistory = function restoreHistory() {
      if (this._bApplyRestore) {
        this._bApplyRestore = false;
        let sTargetHash = this.getHash();
        sTargetHash = sTargetHash.replace(/(\?|&)restoreHistory=true/, "");
        const oNewState = this._extractStateFromHash(sTargetHash);
        const oHistoryAction = this._pushNewState(oNewState, true, false, true);
        return this._rebuildBrowserHistory(oHistoryAction, true);
      } else {
        return Promise.resolve();
      }
    }

    /**
     * Navigates back in the history.
     *
     * @returns Promise that is resolved when the navigation is finalized
     */;
    _proto.navBack = function navBack() {
      const sCurrentHash = this.getHash();
      let sPreviousHash;

      // Look for the current hash in the managed history
      for (let i = this._oManagedHistory.length - 1; i > 0; i--) {
        if (this._oManagedHistory[i].hash === sCurrentHash) {
          sPreviousHash = this._oManagedHistory[i - 1].hash;
          break;
        }
      }
      if (sPreviousHash) {
        return this.navToHash(sPreviousHash);
      } else {
        // We couldn't find a previous hash in history
        // This can happen when navigating from a transient hash in a create app, and
        // in that case history.back would go back to the FLP
        window.history.back();
        return Promise.resolve();
      }
    }

    /**
     * Navigates to a route with parameters.
     *
     * @param sRouteName The route name to be navigated to
     * @param oParameters Parameters for the navigation
     * @returns Promise that is resolved when the navigation is finalized
     * @ui5-restricted
     */;
    _proto.navTo = function navTo(sRouteName, oParameters) {
      const sHash = this._oRouter.getURL(sRouteName, oParameters);
      return this.navToHash(sHash, false, oParameters.noPreservationCache, false, !oParameters.bIsStickyMode);
    }

    /**
     * Exits the current app by navigating back
     * to the previous app (if any) or the FLP.
     *
     * @returns Promise that is resolved when we exit the app
     */;
    _proto.exitFromApp = function exitFromApp() {
      return this._oShellServices.backToPreviousApp();
    }

    /**
     * Checks whether a given hash can have an impact on the current state
     * i.e. if the hash is equal, compatible or an ancestor of the current state.
     *
     * @param sHash `true` if there is an impact
     * @returns If there is an impact
     */;
    _proto.isCurrentStateImpactedBy = function isCurrentStateImpactedBy(sHash) {
      if (sHash[0] === "/") {
        sHash = sHash.substring(1);
      }
      const oLocalGuard = createGuardFromHash(sHash);
      return oLocalGuard.check(this.getHash());
    }

    /**
     * Checks if a navigation is currently being processed.
     *
     * @returns `false` if a navigation has been triggered in the RouterProxy and is not yet finalized
     */;
    _proto.isNavigationFinalized = function isNavigationFinalized() {
      return !this.bIsRebuildHistoryRunning && !this._bDelayedRebuild;
    }

    /**
     * Sets the last state as a guard.
     * Each future navigation will be checked against this guard, and a confirmation dialog will
     * be displayed before the navigation crosses the guard (i.e. goes to an ancestor of the guard).
     *
     * @param sHash The hash for the guard
     */;
    _proto.setNavigationGuard = function setNavigationGuard(sHash) {
      this._oNavigationGuard = createGuardFromHash(sHash);
      this.bIsGuardCrossAllowed = false;
    }

    /**
     * Disables the navigation guard.
     */;
    _proto.discardNavigationGuard = function discardNavigationGuard() {
      this._oNavigationGuard = null;
    }

    /**
     * Checks for the availability of the navigation guard.
     *
     * @returns `true` if navigating guard is available
     */;
    _proto.hasNavigationGuard = function hasNavigationGuard() {
      return this._oNavigationGuard !== null;
    }

    /**
     * Tests a hash against the navigation guard.
     *
     * @param sHash The hash to be tested
     * @returns `true` if navigating to the hash doesn't cross the guard
     */;
    _proto.checkHashWithGuard = function checkHashWithGuard(sHash) {
      return this._oNavigationGuard === null || this._oNavigationGuard.check(sHash);
    }

    /**
     * Checks if the user allowed the navigation guard to be crossed.
     *
     * @returns `true` if crossing the guard has been allowed by the user
     */;
    _proto.isGuardCrossAllowedByUser = function isGuardCrossAllowedByUser() {
      return this.bIsGuardCrossAllowed;
    }

    /**
     * Activates the synchronization for routeMatchedEvent.
     * The next NavToHash call will create a Synchronization object that will be resolved
     * by the corresponding onRouteMatched event, preventing another NavToHash to happen in parallel.
     */;
    _proto.activateRouteMatchSynchronization = function activateRouteMatchSynchronization() {
      this._bActivateRouteMatchSynchro = true;
    }

    /**
     * Resolve the routeMatch synchronization object, unlocking potential pending NavToHash calls.
     */;
    _proto.resolveRouteMatch = function resolveRouteMatch() {
      if (this._oRouteMatchSynchronization) {
        this._oRouteMatchSynchronization.resolve();
      }
    }

    /**
     * Makes sure no navigation can happen before a routeMatch happened.
     */;
    _proto.waitForRouteMatchBeforeNavigation = function waitForRouteMatchBeforeNavigation() {
      this._oRouteMatchSynchronization = new Synchronization();
      this._bActivateRouteMatchSynchro = false;
    };
    _proto._extractEntitySetsFromHash = function _extractEntitySetsFromHash(sHash) {
      if (sHash === undefined) {
        sHash = "";
      }
      const sHashNoParams = sHash.split("?")[0]; // remove params
      const aTokens = sHashNoParams.split("/");
      const names = [];
      aTokens.forEach(sToken => {
        if (sToken.length) {
          names.push(sToken.split("(")[0]);
        }
      });
      return names;
    }

    /**
     * Builds a state from a hash.
     *
     * @param sHash The hash to be used as entry
     * @returns The state
     * @ui5-restricted
     */;
    _proto._extractStateFromHash = function _extractStateFromHash(sHash) {
      if (sHash === undefined) {
        sHash = "";
      }
      const oState = {
        keys: this._extractEntitySetsFromHash(sHash)
      };

      // Retrieve layout (if any)
      const aLayout = sHash.match(new RegExp(`\\?.*${enumURLParams.LAYOUTPARAM}=([^&]*)`));
      oState.sLayout = aLayout && aLayout.length > 1 ? aLayout[1] : null;
      if (oState.sLayout === "MidColumnFullScreen") {
        oState.screenMode = 1;
      } else if (oState.sLayout === "EndColumnFullScreen") {
        oState.screenMode = 2;
      } else {
        oState.screenMode = 0;
      }
      oState.hash = sHash;
      return oState;
    }

    /**
     * Adds a new state into the internal history structure.
     * Makes sure this new state is added after an ancestor.
     * Also sets the iAppState key in the whole history.
     *
     * @memberof sap.fe.core.RouterProxy
     * @param oNewState The new state to be added
     * @param bRebuildOnly `true` if we're rebuilding the history after a shell menu navigation
     * @param bPreserveHistory If set to true, non-ancestor entries in history will be retained
     * @param bDisableHistoryPreservation Disable the mechanism to retained marked entries in cache
     * @returns The new state
     * @ui5-restricted
     * @final
     */;
    _proto._pushNewState = function _pushNewState(oNewState, bRebuildOnly, bPreserveHistory, bDisableHistoryPreservation) {
      const sCurrentHash = this.getHash();
      let lastIndex = this._oManagedHistory.length - 1;
      let iPopCount = bRebuildOnly ? 1 : 0;

      // 1. Do some cleanup in the managed history : in case the user has navigated back in the browser history, we need to remove
      // the states ahead in history and make sure the top state corresponds to the current page
      // We don't do that when restoring the history, as the current state has been added on top of the browser history
      // and is not reflected in the managed history
      if (!bRebuildOnly) {
        while (lastIndex >= 0 && this._oManagedHistory[lastIndex].hash !== sCurrentHash) {
          this._oManagedHistory.pop();
          lastIndex--;
        }
        if (this._oManagedHistory.length === 0) {
          // We couldn't find the current location in the history. This can happen if a browser reload
          // happened, causing a reinitialization of the managed history.
          // In that case, we use the current location as the new starting point in the managed history
          this._oManagedHistory.push(this._extractStateFromHash(sCurrentHash));
          history.replaceState(Object.assign({
            feLevel: 0
          }, history.state), "");
        }
      }

      // 2. Mark the top state as preserved if required
      if (bPreserveHistory && !bDisableHistoryPreservation) {
        this._oManagedHistory[this._oManagedHistory.length - 1].preserved = true;
      }

      // 3. Then pop all states until we find an ancestor of the new state, or we find a state that need to be preserved
      let oLastRemovedItem;
      while (this._oManagedHistory.length > 0) {
        const oTopState = this._oManagedHistory[this._oManagedHistory.length - 1];
        if ((bDisableHistoryPreservation || !oTopState.preserved) && this._compareCacheStates(oTopState, oNewState) !== enumState.ANCESTOR) {
          // The top state is not an ancestor of oNewState and is not preserved --> we can pop it
          oLastRemovedItem = this._oManagedHistory.pop();
          iPopCount++;
        } else if (oTopState.preserved && removeAppStateInHash(oTopState.hash) === removeAppStateInHash(oNewState.hash)) {
          // We try to add a state that is already in cache (due to preserved flag) but with a different iapp-state
          // --> we should delete the previous entry (it will be later replaced by the new one) and stop popping
          oLastRemovedItem = this._oManagedHistory.pop();
          iPopCount++;
          oNewState.preserved = true;
          break;
        } else {
          break; // Ancestor or preserved state found --> we stop popping out states
        }
      }

      // 4. iAppState management
      this.sIAppStateKey = findAppStateInHash(oNewState.hash);
      if (!this.fclEnabled && oLastRemovedItem) {
        const sPreviousIAppStateKey = findAppStateInHash(oLastRemovedItem.hash);
        const oComparisonStateResult = this._compareCacheStates(oLastRemovedItem, oNewState);
        // if current state doesn't contain a i-appstate and this state should replace a state containing a iAppState
        // then the previous iAppState is preserved
        if (!this.sIAppStateKey && sPreviousIAppStateKey && (oComparisonStateResult === enumState.EQUAL || oComparisonStateResult === enumState.COMPATIBLE)) {
          oNewState.hash = setAppStateInHash(oNewState.hash, sPreviousIAppStateKey);
        }
      }

      // 5. Now we can push the state at the top of the internal history
      const bHasSameHash = oLastRemovedItem && oNewState.hash === oLastRemovedItem.hash;
      if (this._oManagedHistory.length === 0 || this._oManagedHistory[this._oManagedHistory.length - 1].hash !== oNewState.hash) {
        this._oManagedHistory.push(oNewState);
        if (oLastRemovedItem && removeAppStateInHash(oLastRemovedItem.hash) === removeAppStateInHash(oNewState.hash)) {
          oNewState.focusControlId = oLastRemovedItem.focusControlId;
          oNewState.focusInfo = oLastRemovedItem.focusInfo;
        }
      }

      // 6. Determine which actions to do on the history
      if (iPopCount === 0) {
        // No state was popped --> append
        return {
          type: "append"
        };
      } else if (iPopCount === 1) {
        // Only 1 state was popped --> replace current hash unless hash is the same (then nothing to do)
        return bHasSameHash ? {
          type: "none"
        } : {
          type: "replace"
        };
      } else {
        // More than 1 state was popped --> go bakc in history and replace hash if necessary
        return bHasSameHash ? {
          type: "back",
          steps: iPopCount - 1
        } : {
          type: "back-replace",
          steps: iPopCount - 1
        };
      }
    };
    _proto._blockingNavigationFilter = function _blockingNavigationFilter() {
      return this._bDisableOnHashChange ? "Custom" : "Continue";
    }

    /**
     * Disable the routing by calling the router stop method.
     *
     * @function
     * @memberof sap.fe.core.RouterProxy
     * @ui5-restricted
     * @final
     */;
    _proto._disableEventOnHashChange = function _disableEventOnHashChange() {
      this._bDisableOnHashChange = true;
      this._oRouter.stop();
    }

    /**
     * Enable the routing by calling the router initialize method.
     *
     * @function
     * @name sap.fe.core.RouterProxy#_enableEventOnHashChange
     * @memberof sap.fe.core.RouterProxy
     * @param [bIgnoreCurrentHash] Ignore the last hash event triggered before the router has initialized
     * @ui5-restricted
     * @final
     */;
    _proto._enableEventOnHashChange = function _enableEventOnHashChange(bIgnoreCurrentHash) {
      this._bDisableOnHashChange = false;
      this._oRouter.initialize(bIgnoreCurrentHash);
    }

    /**
     * Synchronizes the browser history with the internal history of the routerProxy, and triggers a navigation if needed.
     *
     * @memberof sap.fe.core.RouterProxy
     * @param oHistoryAction Specifies the navigation action to be performed
     * @param bRebuildOnly `true` if internal history is currently being rebuilt
     * @returns Promise (resolved when the navigation is finalized) that returns 'true' if a navigation took place, 'false' if the navigation didn't happen
     * @ui5-restricted
     * @final
     */;
    _proto._rebuildBrowserHistory = function _rebuildBrowserHistory(oHistoryAction, bRebuildOnly) {
      // eslint-disable-next-line @typescript-eslint/no-this-alias
      const that = this;
      return new Promise(resolve => {
        this.bIsRebuildHistoryRunning = true;
        const oTargetState = this._oManagedHistory[this._oManagedHistory.length - 1],
          newLevel = this._oManagedHistory.length - 1;
        function replaceAsync() {
          if (!bRebuildOnly) {
            that._enableEventOnHashChange(true);
          }
          that._oRouter.getHashChanger().replaceHash(oTargetState.hash);
          history.replaceState(Object.assign({
            feLevel: newLevel
          }, history.state), "");
          if (bRebuildOnly) {
            setTimeout(function () {
              // Timeout to let 'hashchange' event be processed before by the HashChanger, so that
              // onRouteMatched notification isn't raised
              that._enableEventOnHashChange(true);
            }, 0);
          }
          that.bIsRebuildHistoryRunning = false;
          resolve(true); // a navigation occurred
        }

        // Async callbacks when navigating back, in order to let all notifications and events get processed
        function backReplaceAsync() {
          window.removeEventListener("popstate", backReplaceAsync);
          setTimeout(function () {
            // Timeout to let 'hashchange' event be processed before by the HashChanger
            replaceAsync();
          }, 0);
        }
        function backAsync() {
          window.removeEventListener("popstate", backAsync);
          that.bIsRebuildHistoryRunning = false;
          resolve(true); // a navigation occurred
        }

        that._bIgnoreRestore = true;
        switch (oHistoryAction.type) {
          case "replace":
            that._oRouter.getHashChanger().replaceHash(oTargetState.hash);
            history.replaceState(Object.assign({
              feLevel: newLevel
            }, history.state), "");
            that.bIsRebuildHistoryRunning = false;
            resolve(true); // a navigation occurred
            break;
          case "append":
            that._oRouter.getHashChanger().setHash(oTargetState.hash);
            history.replaceState(Object.assign({
              feLevel: newLevel
            }, history.state), "");
            that.bIsRebuildHistoryRunning = false;
            resolve(true); // a navigation occurred
            break;
          case "back":
            window.addEventListener("popstate", backAsync);
            history.go(-oHistoryAction.steps);
            break;
          case "back-replace":
            this._disableEventOnHashChange();
            window.addEventListener("popstate", backReplaceAsync);
            history.go(-oHistoryAction.steps);
            break;
          default:
            // No navigation
            this.bIsRebuildHistoryRunning = false;
            resolve(false);
          // no navigation --> resolve to false
        }
      });
    };
    _proto.getLastHistoryEntry = function getLastHistoryEntry() {
      return this._oManagedHistory[this._oManagedHistory.length - 1];
    };
    _proto.setPathMapping = function setPathMapping(mappings) {
      this._pathMappings = mappings.filter(mapping => {
        return mapping.oldPath !== mapping.newPath;
      });
    };
    _proto.hashGuard = function hashGuard() {
      let sHash = window.location.hash;
      if (sHash.indexOf("restoreHistory=true") !== -1) {
        this._bApplyRestore = true;
      } else if (!this.bIsRebuildHistoryRunning) {
        // Check if the hash needs to be changed (this happens in FCL when switching b/w edit and read-only with 3 columns open)
        const mapping = this._pathMappings.find(m => {
          return sHash.indexOf(m.oldPath) >= 0;
        });
        if (mapping) {
          // Replace the current hash
          sHash = sHash.replace(mapping.oldPath, mapping.newPath);
          history.replaceState(Object.assign({}, history.state), "", sHash);
        }
        const aHashSplit = sHash.split("&/");
        const sAppHash = aHashSplit[1] ? aHashSplit[1] : "";
        if (this.checkHashWithGuard(sAppHash)) {
          this._bDelayedRebuild = true;
          const oNewState = this._extractStateFromHash(sAppHash);
          this._pushNewState(oNewState, false, false, true);
          setTimeout(() => {
            this._bDelayedRebuild = false;
          }, 0);
        }
      }
    }

    /**
     * Compares 2 states.
     *
     * @param {object} oState1
     * @param {object} oState2
     * @returns {number} The result of the comparison:
     *        - enumState.EQUAL if oState1 and oState2 are equal
     *        - enumState.COMPATIBLE if oState1 and oState2 are compatible
     *        - enumState.ANCESTOR if oState1 is an ancestor of oState2
     *        - enumState.DIFFERENT if the 2 states are different
     */;
    _proto._compareCacheStates = function _compareCacheStates(oState1, oState2) {
      // First compare object keys
      if (oState1.keys.length > oState2.keys.length) {
        return enumState.DIFFERENT;
      }
      let equal = true;
      let index;
      for (index = 0; equal && index < oState1.keys.length; index++) {
        if (oState1.keys[index] !== oState2.keys[index]) {
          equal = false;
        }
      }
      if (!equal) {
        // Some objects keys are different
        return enumState.DIFFERENT;
      }

      // All keys from oState1 are in oState2 --> check if ancestor
      if (oState1.keys.length < oState2.keys.length || oState1.screenMode < oState2.screenMode) {
        return enumState.ANCESTOR;
      }
      if (oState1.screenMode > oState2.screenMode) {
        return enumState.DIFFERENT; // Not sure this case can happen...
      }

      // At this stage, the 2 states have the same object keys (in the same order) and same screenmode
      // They can be either compatible or equal
      return oState1.sLayout === oState2.sLayout ? enumState.EQUAL : enumState.COMPATIBLE;
    }

    /**
     * Checks if back exits the present guard set.
     *
     * @param sPresentHash The current hash. Only used for unit tests.
     * @returns `true` if back exits there is a guard exit on back
     */;
    _proto.checkIfBackIsOutOfGuard = function checkIfBackIsOutOfGuard(sPresentHash) {
      let sPrevHash;
      let sCurrentHash;
      if (sPresentHash === undefined) {
        // We use window.location.hash instead of HashChanger.getInstance().getHash() because the latter
        // replaces characters in the URL (e.g. %24 replaced by $) and it causes issues when comparing
        // with the URLs in the managed history
        const oSplitHash = this._oShellServices.splitHash(window.location.hash);
        if (oSplitHash && oSplitHash.appSpecificRoute) {
          sCurrentHash = oSplitHash.appSpecificRoute;
          if (sCurrentHash.indexOf("&/") === 0) {
            sCurrentHash = sCurrentHash.substring(2);
          }
        } else {
          sCurrentHash = window.location.hash.substring(1); // To remove the '#'
          if (sCurrentHash[0] === "/") {
            sCurrentHash = sCurrentHash.substring(1);
          }
        }
      } else {
        sCurrentHash = sPresentHash;
      }
      sPresentHash = URI.decode(sCurrentHash);
      if (this._oNavigationGuard) {
        for (let i = this._oManagedHistory.length - 1; i > 0; i--) {
          if (this._oManagedHistory[i].hash === sPresentHash) {
            sPrevHash = this._oManagedHistory[i - 1].hash;
            break;
          }
        }
        return !sPrevHash || !this.checkHashWithGuard(sPrevHash);
      }
      return false;
    }

    /**
     * Checks if the last 2 entries in the history share the same context.
     *
     * @returns `true` if they share the same context.
     */;
    _proto.checkIfBackHasSameContext = function checkIfBackHasSameContext() {
      if (this._oManagedHistory.length < 2) {
        return false;
      }
      const oCurrentState = this._oManagedHistory[this._oManagedHistory.length - 1];
      const oPreviousState = this._oManagedHistory[this._oManagedHistory.length - 2];
      return oCurrentState.hash.split("?")[0] === oPreviousState.hash.split("?")[0];
    }

    /**
     * Restores the focus for the current hash, if we can find it in the history.
     *
     * @returns True if focus was set, false otherwise.
     */;
    _proto.restoreFocusForCurrentHash = function restoreFocusForCurrentHash() {
      const currentHash = removeAppStateInHash(this.getHash());
      const stateForHash = this._oManagedHistory.find(state => {
        return removeAppStateInHash(state.hash) === currentHash;
      });
      let focusApplied = false;
      if (stateForHash !== null && stateForHash !== void 0 && stateForHash.focusControlId) {
        const focusControl = sap.ui.getCore().byId(stateForHash.focusControlId);
        focusControl === null || focusControl === void 0 ? void 0 : focusControl.focus(stateForHash.focusInfo);
        focusApplied = focusControl !== undefined;
      }
      return focusApplied;
    }

    /**
     * Stores the ID of the currently focused control in the history for the current hash.
     *
     */;
    _proto.storeFocusInfoForCurrentHash = function storeFocusInfoForCurrentHash() {
      const currentHash = removeAppStateInHash(this.getHash());
      const stateForHash = this._oManagedHistory.find(state => {
        return removeAppStateInHash(state.hash) === currentHash;
      });
      if (stateForHash) {
        const focusControlId = sap.ui.getCore().getCurrentFocusedControlId();
        const focusControl = focusControlId ? sap.ui.getCore().byId(focusControlId) : undefined;
        stateForHash.focusControlId = focusControlId;
        stateForHash.focusInfo = focusControl === null || focusControl === void 0 ? void 0 : focusControl.getFocusInfo();
      }
    }

    /**
     * Finds a layout value for a hash in the history.
     *
     * @param hash The hash to look for in the history.
     * @returns A layout value if it could be found, undefined otherwise.
     */;
    _proto.findLayoutForHash = function findLayoutForHash(hash) {
      var _targetState;
      if (!this.fclEnabled) {
        return undefined;
      }

      // Remove all query parameters from the hash
      const hashNoParam = hash.split("?")[0];

      // Look for the state backwards, so that we find the last state in the history (e.g. if we have 2 states with the same hash but 2 different layouts)
      let targetState;
      for (let index = this._oManagedHistory.length - 1; index >= 0 && targetState === undefined; index--) {
        if (this._oManagedHistory[index].hash.split("?")[0] === hashNoParam) {
          targetState = this._oManagedHistory[index];
        }
      }
      return (_targetState = targetState) === null || _targetState === void 0 ? void 0 : _targetState.sLayout;
    };
    return RouterProxy;
  }(BaseObject)) || _class);
  return RouterProxy;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controllerextensions/routing/RouterProxy", ["sap/base/Log","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/Synchronization","sap/ui/base/Object","sap/ui/core/Core","sap/ui/thirdparty/URI"],function(t,e,s,i,n,o){"use strict";var a,r;var h=e.defineUI5Class;function u(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;c(t,e)}function c(t,e){c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,s){e.__proto__=s;return e};return c(t,e)}const l={EQUAL:0,COMPATIBLE:1,ANCESTOR:2,DIFFERENT:3};const f={LAYOUTPARAM:"layout",IAPPSTATEPARAM:"sap-iapp-state"};function d(t){return{_guardHash:t.replace(/\?[^?]*$/,""),check:function(t){return t.indexOf(this._guardHash)===0}}}function g(t){const e=t.match(new RegExp(`\\?.*${f.IAPPSTATEPARAM}=([^&]*)`));return e&&e.length>1?e[1]:null}function p(t){return t.replace(new RegExp(`[&?]*${f.IAPPSTATEPARAM}=[^&]*`),"")}function y(t,e){let s;if(t.indexOf(f.IAPPSTATEPARAM)>=0){s=t.replace(new RegExp(`${f.IAPPSTATEPARAM}=[^&]*`),`${f.IAPPSTATEPARAM}=${e}`)}else{if(t.indexOf("?")<0){s=`${t}?`}else{s=`${t}&`}s+=`${f.IAPPSTATEPARAM}=${e}`}return s}let _=(a=h("sap.fe.core.RouterProxy"),a(r=function(e){u(i,e);function i(){var t;for(var s=arguments.length,i=new Array(s),n=0;n<s;n++){i[n]=arguments[n]}t=e.call(this,...i)||this;t.bIsRebuildHistoryRunning=false;t.bIsComputingTitleHierachy=false;t.bIsGuardCrossAllowed=false;t.sIAppStateKey=null;t._bActivateRouteMatchSynchro=false;t._bApplyRestore=false;t._bDelayedRebuild=false;t._pathMappings=[];return t}var a=i.prototype;a.init=function e(s,i){s.getService("shellServices").then(()=>{this._oShellServices=s.getShellServices();this.initRaw(s.getRouter());this.waitForRouteMatchBeforeNavigation();history.replaceState(Object.assign({feLevel:0},history.state),"",window.location);this.fclEnabled=i;this._fnBlockingNavFilter=this._blockingNavigationFilter.bind(this);this._oShellServices.registerNavigationFilter(this._fnBlockingNavFilter)}).catch(function(e){t.error("Cannot retrieve the shell services",e)});this._fnHashGuard=this.hashGuard.bind(this);window.addEventListener("popstate",this._fnHashGuard);this._bDisableOnHashChange=false;this._bIgnoreRestore=false;this._bForceFocus=true};a.destroy=function t(){if(this._oShellServices){this._oShellServices.unregisterNavigationFilter(this._fnBlockingNavFilter)}window.removeEventListener("popstate",this._fnHashGuard)};a.initRaw=function t(e){this._oRouter=e;this._oManagedHistory=[];this._oNavigationGuard=null;const s=this.getHash();this._oManagedHistory.push(this._extractStateFromHash(s));this.sIAppStateKey=g(s)};a.getHash=function t(){return this._oRouter.getHashChanger().getHash()};a.isFocusForced=function t(){return this._bForceFocus};a.setFocusForced=function t(e){this._bForceFocus=e};a.removeIAppStateKey=function t(){this.sIAppStateKey=null};a.navToHash=function t(e,s,i,n,o){if(o!==false){this._oShellServices.setBackNavigation()}if(this._oRouteMatchSynchronization){return this._oRouteMatchSynchronization.waitFor().then(()=>{this._oRouteMatchSynchronization=undefined;return this._internalNavToHash(e,s,i,n)})}else{if(this._bActivateRouteMatchSynchro){this.waitForRouteMatchBeforeNavigation()}return this._internalNavToHash(e,s,i,n)}};a._internalNavToHash=function t(e,s,i,o){if(this.fclEnabled&&this.sIAppStateKey&&!g(e)){e=y(e,this.sIAppStateKey)}if(!this.checkHashWithGuard(e)){if(!this.oResourceBundle){this.oResourceBundle=n.getLibraryResourceBundle("sap.fe.core")}if(!confirm(this.oResourceBundle.getText("C_ROUTER_PROXY_SAPFE_EXIT_NOTSAVED_MESSAGE"))){return Promise.resolve(false)}this.bIsGuardCrossAllowed=true}const a=this._extractStateFromHash(e);if(!this._bForceFocus){const t=this._extractEntitySetsFromHash(this.getHash());this._bForceFocus=o||t.length<a.keys.length&&t.every(function(t,e){return t===a.keys[e]})}const r=this._pushNewState(a,false,s,i);this.storeFocusInfoForCurrentHash();return this._rebuildBrowserHistory(r,false)};a.restoreHistory=function t(){if(this._bApplyRestore){this._bApplyRestore=false;let t=this.getHash();t=t.replace(/(\?|&)restoreHistory=true/,"");const e=this._extractStateFromHash(t);const s=this._pushNewState(e,true,false,true);return this._rebuildBrowserHistory(s,true)}else{return Promise.resolve()}};a.navBack=function t(){const e=this.getHash();let s;for(let t=this._oManagedHistory.length-1;t>0;t--){if(this._oManagedHistory[t].hash===e){s=this._oManagedHistory[t-1].hash;break}}if(s){return this.navToHash(s)}else{window.history.back();return Promise.resolve()}};a.navTo=function t(e,s){const i=this._oRouter.getURL(e,s);return this.navToHash(i,false,s.noPreservationCache,false,!s.bIsStickyMode)};a.exitFromApp=function t(){return this._oShellServices.backToPreviousApp()};a.isCurrentStateImpactedBy=function t(e){if(e[0]==="/"){e=e.substring(1)}const s=d(e);return s.check(this.getHash())};a.isNavigationFinalized=function t(){return!this.bIsRebuildHistoryRunning&&!this._bDelayedRebuild};a.setNavigationGuard=function t(e){this._oNavigationGuard=d(e);this.bIsGuardCrossAllowed=false};a.discardNavigationGuard=function t(){this._oNavigationGuard=null};a.hasNavigationGuard=function t(){return this._oNavigationGuard!==null};a.checkHashWithGuard=function t(e){return this._oNavigationGuard===null||this._oNavigationGuard.check(e)};a.isGuardCrossAllowedByUser=function t(){return this.bIsGuardCrossAllowed};a.activateRouteMatchSynchronization=function t(){this._bActivateRouteMatchSynchro=true};a.resolveRouteMatch=function t(){if(this._oRouteMatchSynchronization){this._oRouteMatchSynchronization.resolve()}};a.waitForRouteMatchBeforeNavigation=function t(){this._oRouteMatchSynchronization=new s;this._bActivateRouteMatchSynchro=false};a._extractEntitySetsFromHash=function t(e){if(e===undefined){e=""}const s=e.split("?")[0];const i=s.split("/");const n=[];i.forEach(t=>{if(t.length){n.push(t.split("(")[0])}});return n};a._extractStateFromHash=function t(e){if(e===undefined){e=""}const s={keys:this._extractEntitySetsFromHash(e)};const i=e.match(new RegExp(`\\?.*${f.LAYOUTPARAM}=([^&]*)`));s.sLayout=i&&i.length>1?i[1]:null;if(s.sLayout==="MidColumnFullScreen"){s.screenMode=1}else if(s.sLayout==="EndColumnFullScreen"){s.screenMode=2}else{s.screenMode=0}s.hash=e;return s};a._pushNewState=function t(e,s,i,n){const o=this.getHash();let a=this._oManagedHistory.length-1;let r=s?1:0;if(!s){while(a>=0&&this._oManagedHistory[a].hash!==o){this._oManagedHistory.pop();a--}if(this._oManagedHistory.length===0){this._oManagedHistory.push(this._extractStateFromHash(o));history.replaceState(Object.assign({feLevel:0},history.state),"")}}if(i&&!n){this._oManagedHistory[this._oManagedHistory.length-1].preserved=true}let h;while(this._oManagedHistory.length>0){const t=this._oManagedHistory[this._oManagedHistory.length-1];if((n||!t.preserved)&&this._compareCacheStates(t,e)!==l.ANCESTOR){h=this._oManagedHistory.pop();r++}else if(t.preserved&&p(t.hash)===p(e.hash)){h=this._oManagedHistory.pop();r++;e.preserved=true;break}else{break}}this.sIAppStateKey=g(e.hash);if(!this.fclEnabled&&h){const t=g(h.hash);const s=this._compareCacheStates(h,e);if(!this.sIAppStateKey&&t&&(s===l.EQUAL||s===l.COMPATIBLE)){e.hash=y(e.hash,t)}}const u=h&&e.hash===h.hash;if(this._oManagedHistory.length===0||this._oManagedHistory[this._oManagedHistory.length-1].hash!==e.hash){this._oManagedHistory.push(e);if(h&&p(h.hash)===p(e.hash)){e.focusControlId=h.focusControlId;e.focusInfo=h.focusInfo}}if(r===0){return{type:"append"}}else if(r===1){return u?{type:"none"}:{type:"replace"}}else{return u?{type:"back",steps:r-1}:{type:"back-replace",steps:r-1}}};a._blockingNavigationFilter=function t(){return this._bDisableOnHashChange?"Custom":"Continue"};a._disableEventOnHashChange=function t(){this._bDisableOnHashChange=true;this._oRouter.stop()};a._enableEventOnHashChange=function t(e){this._bDisableOnHashChange=false;this._oRouter.initialize(e)};a._rebuildBrowserHistory=function t(e,s){const i=this;return new Promise(t=>{this.bIsRebuildHistoryRunning=true;const n=this._oManagedHistory[this._oManagedHistory.length-1],o=this._oManagedHistory.length-1;function a(){if(!s){i._enableEventOnHashChange(true)}i._oRouter.getHashChanger().replaceHash(n.hash);history.replaceState(Object.assign({feLevel:o},history.state),"");if(s){setTimeout(function(){i._enableEventOnHashChange(true)},0)}i.bIsRebuildHistoryRunning=false;t(true)}function r(){window.removeEventListener("popstate",r);setTimeout(function(){a()},0)}function h(){window.removeEventListener("popstate",h);i.bIsRebuildHistoryRunning=false;t(true)}i._bIgnoreRestore=true;switch(e.type){case"replace":i._oRouter.getHashChanger().replaceHash(n.hash);history.replaceState(Object.assign({feLevel:o},history.state),"");i.bIsRebuildHistoryRunning=false;t(true);break;case"append":i._oRouter.getHashChanger().setHash(n.hash);history.replaceState(Object.assign({feLevel:o},history.state),"");i.bIsRebuildHistoryRunning=false;t(true);break;case"back":window.addEventListener("popstate",h);history.go(-e.steps);break;case"back-replace":this._disableEventOnHashChange();window.addEventListener("popstate",r);history.go(-e.steps);break;default:this.bIsRebuildHistoryRunning=false;t(false)}})};a.getLastHistoryEntry=function t(){return this._oManagedHistory[this._oManagedHistory.length-1]};a.setPathMapping=function t(e){this._pathMappings=e.filter(t=>t.oldPath!==t.newPath)};a.hashGuard=function t(){let e=window.location.hash;if(e.indexOf("restoreHistory=true")!==-1){this._bApplyRestore=true}else if(!this.bIsRebuildHistoryRunning){const t=this._pathMappings.find(t=>e.indexOf(t.oldPath)>=0);if(t){e=e.replace(t.oldPath,t.newPath);history.replaceState(Object.assign({},history.state),"",e)}const s=e.split("&/");const i=s[1]?s[1]:"";if(this.checkHashWithGuard(i)){this._bDelayedRebuild=true;const t=this._extractStateFromHash(i);this._pushNewState(t,false,false,true);setTimeout(()=>{this._bDelayedRebuild=false},0)}}};a._compareCacheStates=function t(e,s){if(e.keys.length>s.keys.length){return l.DIFFERENT}let i=true;let n;for(n=0;i&&n<e.keys.length;n++){if(e.keys[n]!==s.keys[n]){i=false}}if(!i){return l.DIFFERENT}if(e.keys.length<s.keys.length||e.screenMode<s.screenMode){return l.ANCESTOR}if(e.screenMode>s.screenMode){return l.DIFFERENT}return e.sLayout===s.sLayout?l.EQUAL:l.COMPATIBLE};a.checkIfBackIsOutOfGuard=function t(e){let s;let i;if(e===undefined){const t=this._oShellServices.splitHash(window.location.hash);if(t&&t.appSpecificRoute){i=t.appSpecificRoute;if(i.indexOf("&/")===0){i=i.substring(2)}}else{i=window.location.hash.substring(1);if(i[0]==="/"){i=i.substring(1)}}}else{i=e}e=o.decode(i);if(this._oNavigationGuard){for(let t=this._oManagedHistory.length-1;t>0;t--){if(this._oManagedHistory[t].hash===e){s=this._oManagedHistory[t-1].hash;break}}return!s||!this.checkHashWithGuard(s)}return false};a.checkIfBackHasSameContext=function t(){if(this._oManagedHistory.length<2){return false}const e=this._oManagedHistory[this._oManagedHistory.length-1];const s=this._oManagedHistory[this._oManagedHistory.length-2];return e.hash.split("?")[0]===s.hash.split("?")[0]};a.restoreFocusForCurrentHash=function t(){const e=p(this.getHash());const s=this._oManagedHistory.find(t=>p(t.hash)===e);let i=false;if(s!==null&&s!==void 0&&s.focusControlId){const t=sap.ui.getCore().byId(s.focusControlId);t===null||t===void 0?void 0:t.focus(s.focusInfo);i=t!==undefined}return i};a.storeFocusInfoForCurrentHash=function t(){const e=p(this.getHash());const s=this._oManagedHistory.find(t=>p(t.hash)===e);if(s){const t=sap.ui.getCore().getCurrentFocusedControlId();const e=t?sap.ui.getCore().byId(t):undefined;s.focusControlId=t;s.focusInfo=e===null||e===void 0?void 0:e.getFocusInfo()}};a.findLayoutForHash=function t(e){var s;if(!this.fclEnabled){return undefined}const i=e.split("?")[0];let n;for(let t=this._oManagedHistory.length-1;t>=0&&n===undefined;t--){if(this._oManagedHistory[t].hash.split("?")[0]===i){n=this._oManagedHistory[t]}}return(s=n)===null||s===void 0?void 0:s.sLayout};return i}(i))||r);return _},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/Any-dbg", ["sap/ui/base/ManagedObject"], function (ManagedObject) {
  "use strict";

  /**
   * @class
   * A custom element to evaluate the value of Binding.
   * @name sap.fe.core.controls.Any
   * @hideconstructor
   */
  const Any = ManagedObject.extend("sap.fe.core.controls.Any", {
    metadata: {
      properties: {
        any: "any",
        anyText: "string"
      }
    },
    updateProperty: function (sName) {
      // Avoid Promise processing in ManagedObject and set Promise as value directly
      if (sName === "any") {
        this.setAny(this.getBindingInfo(sName).binding.getExternalValue());
      } else {
        this.setAnyText(this.getBindingInfo(sName).binding.getExternalValue());
      }
    }
  });
  return Any;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/Any", ["sap/ui/base/ManagedObject"],function(e){"use strict";const n=e.extend("sap.fe.core.controls.Any",{metadata:{properties:{any:"any",anyText:"string"}},updateProperty:function(e){if(e==="any"){this.setAny(this.getBindingInfo(e).binding.getExternalValue())}else{this.setAnyText(this.getBindingInfo(e).binding.getExternalValue())}}});return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/AnyElement-dbg", ["sap/ui/core/Element"], function (Element) {
  "use strict";

  /**
   * @class
   * A custom element to evaluate the value of Binding.
   * @name sap.fe.core.controls.AnyElement
   * @hideconstructor
   */
  const AnyElement = Element.extend("sap.fe.core.controls.AnyElement", {
    metadata: {
      properties: {
        anyText: "string"
      }
    },
    updateProperty: function (sName) {
      // Avoid Promise processing in Element and set Promise as value directly
      if (sName === "anyText") {
        this.setAnyText(this.getBindingInfo(sName).binding.getExternalValue());
      }
    }
  });
  return AnyElement;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/AnyElement", ["sap/ui/core/Element"],function(e){"use strict";const t=e.extend("sap.fe.core.controls.AnyElement",{metadata:{properties:{anyText:"string"}},updateProperty:function(e){if(e==="anyText"){this.setAnyText(this.getBindingInfo(e).binding.getExternalValue())}}});return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/CommandExecution-dbg", ["sap/base/Log", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/CommandExecution", "sap/ui/core/Component", "sap/ui/core/Element", "sap/ui/core/Shortcut"], function (Log, ClassSupport, CoreCommandExecution, Component, Element, Shortcut) {
  "use strict";

  var _dec, _class;
  var _exports = {};
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let CommandExecution = (_dec = defineUI5Class("sap.fe.core.controls.CommandExecution"), _dec(_class = /*#__PURE__*/function (_CoreCommandExecution) {
    _inheritsLoose(CommandExecution, _CoreCommandExecution);
    function CommandExecution(sId, mSettings) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      return _CoreCommandExecution.call(this, sId, mSettings) || this;
    }
    _exports = CommandExecution;
    var _proto = CommandExecution.prototype;
    _proto.setParent = function setParent(oParent) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      _CoreCommandExecution.prototype.setParent.call(this, oParent);
      const aCommands = oParent.data("sap.ui.core.Shortcut");
      if (Array.isArray(aCommands) && aCommands.length > 0) {
        const oCommand = oParent.data("sap.ui.core.Shortcut")[aCommands.length - 1],
          oShortcut = oCommand.shortcutSpec;
        if (oShortcut) {
          // Check if single key shortcut
          for (const key in oShortcut) {
            if (oShortcut[key] && key !== "key") {
              return this;
            }
          }
        }
        return this;
      }
    };
    _proto.destroy = function destroy(bSuppressInvalidate) {
      const oParent = this.getParent();
      if (oParent) {
        const oCommand = this._getCommandInfo();
        if (oCommand) {
          Shortcut.unregister(this.getParent(), oCommand.shortcut);
        }
        this._cleanupContext(oParent);
      }
      Element.prototype.destroy.apply(this, [bSuppressInvalidate]);
    };
    _proto.setVisible = function setVisible(bValue) {
      let oCommand,
        oParentControl = this.getParent(),
        oComponent;
      if (!oParentControl) {
        _CoreCommandExecution.prototype.setVisible.call(this, bValue);
      }
      while (!oComponent && oParentControl) {
        oComponent = Component.getOwnerComponentFor(oParentControl);
        oParentControl = oParentControl.getParent();
      }
      if (oComponent) {
        oCommand = oComponent.getCommand(this.getCommand());
        if (oCommand) {
          _CoreCommandExecution.prototype.setVisible.call(this, bValue);
        } else {
          Log.info("There is no shortcut definition registered in the manifest for the command : " + this.getCommand());
        }
      }
      return this;
    };
    return CommandExecution;
  }(CoreCommandExecution)) || _class);
  _exports = CommandExecution;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/CommandExecution", ["sap/base/Log","sap/fe/core/helpers/ClassSupport","sap/ui/core/CommandExecution","sap/ui/core/Component","sap/ui/core/Element","sap/ui/core/Shortcut"],function(t,e,o,r,n,i){"use strict";var s,a;var c={};var p=e.defineUI5Class;function u(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;f(t,e)}function f(t,e){f=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,o){e.__proto__=o;return e};return f(t,e)}let h=(s=p("sap.fe.core.controls.CommandExecution"),s(a=function(e){u(o,e);function o(t,o){return e.call(this,t,o)||this}c=o;var s=o.prototype;s.setParent=function t(o){e.prototype.setParent.call(this,o);const r=o.data("sap.ui.core.Shortcut");if(Array.isArray(r)&&r.length>0){const t=o.data("sap.ui.core.Shortcut")[r.length-1],e=t.shortcutSpec;if(e){for(const t in e){if(e[t]&&t!=="key"){return this}}}return this}};s.destroy=function t(e){const o=this.getParent();if(o){const t=this._getCommandInfo();if(t){i.unregister(this.getParent(),t.shortcut)}this._cleanupContext(o)}n.prototype.destroy.apply(this,[e])};s.setVisible=function o(n){let i,s=this.getParent(),a;if(!s){e.prototype.setVisible.call(this,n)}while(!a&&s){a=r.getOwnerComponentFor(s);s=s.getParent()}if(a){i=a.getCommand(this.getCommand());if(i){e.prototype.setVisible.call(this,n)}else{t.info("There is no shortcut definition registered in the manifest for the command : "+this.getCommand())}}return this};return o}(o))||a);c=h;return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/DataLossOrDraftDiscard/DraftDataLossDialog.block-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockSupport", "sap/fe/core/buildingBlocks/RuntimeBuildingBlock", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/ResourceModelHelper", "sap/m/Button", "sap/m/CustomListItem", "sap/m/Dialog", "sap/m/Label", "sap/m/List", "sap/m/Text", "sap/m/VBox", "sap/ui/core/CustomData", "sap/ui/core/library", "sap/fe/core/jsx-runtime/jsx", "sap/fe/core/jsx-runtime/jsxs", "sap/fe/core/jsx-runtime/Fragment"], function (Log, BuildingBlockSupport, RuntimeBuildingBlock, ClassSupport, ResourceModelHelper, Button, CustomListItem, Dialog, Label, List, Text, VBox, CustomData, library, _jsx, _jsxs, _Fragment) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var _exports = {};
  var ValueState = library.ValueState;
  var getResourceModel = ResourceModelHelper.getResourceModel;
  var defineReference = ClassSupport.defineReference;
  var defineBuildingBlock = BuildingBlockSupport.defineBuildingBlock;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  var DraftDataLossOptions;
  (function (DraftDataLossOptions) {
    DraftDataLossOptions["Save"] = "draftDataLossOptionSave";
    DraftDataLossOptions["Keep"] = "draftDataLossOptionKeep";
    DraftDataLossOptions["Discard"] = "draftDataLossOptionDiscard";
  })(DraftDataLossOptions || (DraftDataLossOptions = {}));
  let DraftDataLossDialogBlock = (_dec = defineBuildingBlock({
    name: "DraftDataLossDialog",
    namespace: "sap.fe.core.controllerextensions"
  }), _dec2 = defineReference(), _dec3 = defineReference(), _dec(_class = (_class2 = /*#__PURE__*/function (_RuntimeBuildingBlock) {
    _inheritsLoose(DraftDataLossDialogBlock, _RuntimeBuildingBlock);
    function DraftDataLossDialogBlock(props) {
      var _this;
      _this = _RuntimeBuildingBlock.call(this, props) || this;
      _initializerDefineProperty(_this, "dataLossDialog", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "optionsList", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    _exports = DraftDataLossDialogBlock;
    var _proto = DraftDataLossDialogBlock.prototype;
    /**
     * Opens the data loss dialog.
     *
     * @function
     * @name dataLossConfirmation
     */
    _proto.dataLossConfirmation = function dataLossConfirmation() {
      var _this$optionsList$cur;
      const view = this.controller.getView();
      this.dataLossResourceModel = getResourceModel(view);
      this.getContent();
      const dataLossConfirm = () => this.handleDataLossOk();
      (_this$optionsList$cur = this.optionsList.current) === null || _this$optionsList$cur === void 0 ? void 0 : _this$optionsList$cur.addEventDelegate({
        onsapenter: function () {
          dataLossConfirm();
        }
      });
      view.addDependent(this.dataLossDialog.current);
      this.openDataLossDialog();
      this.selectAndFocusFirstEntry();
    }

    /**
     * Executes the follow-up function and resolves/rejects the promise.
     *
     * @function
     * @name performAfterDiscardorKeepDraft
     * @param processFunctionOnDatalossOk Callback to process the draft handler
     * @param processFunctionOnDatalossCancel Callback to process the cancel function
     * @param controller Controller of the current view
     * @param skipBindingToView The parameter to skip the binding to the view
     */;
    _proto.performAfterDiscardorKeepDraft = async function performAfterDiscardorKeepDraft(processFunctionOnDatalossOk, processFunctionOnDatalossCancel, controller, skipBindingToView) {
      this.controller = controller;
      this.skipBindingToView = skipBindingToView;
      this.dataLossConfirmation();
      return new Promise((resolve, reject) => {
        this.onDataLossConfirmationFollowUpFunction = context => {
          const value = processFunctionOnDatalossOk(context);
          resolve(value);
        };
        this.onDataLossCancelFollowUpFunction = () => {
          processFunctionOnDatalossCancel();
          reject();
        };
      });
    }

    /**
     * Executes the logic when the data loss dialog is confirmed. The selection of an option resolves the promise and leads to the
     * processing of the originally triggered action like e.g. a back navigation.
     *
     * @function
     * @name handleDataLossOk
     */;
    _proto.handleDataLossOk = function handleDataLossOk() {
      const selectedKey = this.getSelectedKey();
      if (selectedKey === DraftDataLossOptions.Save) {
        this.saveDocument(this.controller).then(this.onDataLossConfirmationFollowUpFunction).catch(function (error) {
          Log.error("Error while saving document", error);
        });
        this.closeDataLossDialog();
      } else if (selectedKey === DraftDataLossOptions.Keep) {
        this.onDataLossConfirmationFollowUpFunction();
        this.closeDataLossDialog();
      } else if (selectedKey === DraftDataLossOptions.Discard) {
        this.discardDraft(this.controller, this.skipBindingToView).then(this.onDataLossConfirmationFollowUpFunction).catch(function (error) {
          Log.error("Error while discarding draft", error);
        });
        this.closeDataLossDialog();
      }
    }

    /**
     * Handler to close the dataloss dialog.
     *
     * @function
     * @name handleDataLossCancel
     */;
    _proto.handleDataLossCancel = function handleDataLossCancel() {
      this.onDataLossCancelFollowUpFunction();
      this.closeDataLossDialog();
    }

    /**
     * Sets the focus on the first list item of the dialog.
     *
     * @function
     * @name selectAndFocusFirstEntry
     */;
    _proto.selectAndFocusFirstEntry = function selectAndFocusFirstEntry() {
      var _this$optionsList$cur2, _this$optionsList$cur3;
      const firstListItemOption = (_this$optionsList$cur2 = this.optionsList.current) === null || _this$optionsList$cur2 === void 0 ? void 0 : _this$optionsList$cur2.getItems()[0];
      (_this$optionsList$cur3 = this.optionsList.current) === null || _this$optionsList$cur3 === void 0 ? void 0 : _this$optionsList$cur3.setSelectedItem(firstListItemOption);
      // We do not set the focus on the button, but catch the ENTER key in the dialog
      // and process it as Ok, since focusing the button was reported as an ACC issue
      firstListItemOption === null || firstListItemOption === void 0 ? void 0 : firstListItemOption.focus();
    }

    /**
     * Discards the draft.
     *
     * @function
     * @name discardDraft
     * @param controller Controller of the current view
     * @param skipBindingToView The parameter to skip the binding to the view
     * @returns A promise resolved if cancelDocument was successful
     */;
    _proto.discardDraft = async function discardDraft(controller, skipBindingToView) {
      const context = controller.getView().getBindingContext();
      const params = {
        skipBackNavigation: true,
        skipDiscardPopover: true,
        skipBindingToView: skipBindingToView !== undefined ? skipBindingToView : true
      };
      return controller.editFlow.cancelDocument(context, params);
    }

    /**
     * Saves the document. If the controller is of type ObjectPage, then internal _saveDocument is called, otherwise saveDocument
     * from EditFlow is called.
     *
     * @function
     * @name saveDocument
     * @param controller Controller of the current view
     * @returns A promise resolved if the save was successful
     */;
    _proto.saveDocument = function saveDocument(controller) {
      const context = controller.getView().getBindingContext();
      if (controller.isA("sap.fe.templates.ObjectPage.ObjectPageController")) {
        return controller._saveDocument(context);
      } else {
        return controller.editFlow.saveDocument(context, {});
      }
    }

    /**
     * Gets the key of the selected item from the list of options that was set via customData.
     *
     * @function
     * @name getSelectedKey
     * @returns The key of the currently selected item
     */;
    _proto.getSelectedKey = function getSelectedKey() {
      const optionsList = this.optionsList.current;
      return optionsList.getSelectedItem().data("itemKey");
    }

    /**
     * Handler to open the dataloss dialog.
     *
     * @function
     * @name openDataLossDialog
     */;
    _proto.openDataLossDialog = function openDataLossDialog() {
      var _this$dataLossDialog$;
      (_this$dataLossDialog$ = this.dataLossDialog.current) === null || _this$dataLossDialog$ === void 0 ? void 0 : _this$dataLossDialog$.open();
    }

    /**
     * Handler to close the dataloss dialog.
     *
     * @function
     * @name closeDataLossDialog
     */;
    _proto.closeDataLossDialog = function closeDataLossDialog() {
      var _this$dataLossDialog$2, _this$dataLossDialog$3;
      (_this$dataLossDialog$2 = this.dataLossDialog.current) === null || _this$dataLossDialog$2 === void 0 ? void 0 : _this$dataLossDialog$2.close();
      (_this$dataLossDialog$3 = this.dataLossDialog.current) === null || _this$dataLossDialog$3 === void 0 ? void 0 : _this$dataLossDialog$3.destroy();
    }

    /**
     * Returns the confirm button.
     *
     * @function
     * @name getConfirmButton
     * @returns A button
     */;
    _proto.getConfirmButton = function getConfirmButton() {
      return _jsx(Button, {
        text: this.dataLossResourceModel.getText("C_COMMON_DIALOG_OK"),
        type: "Emphasized",
        press: () => this.handleDataLossOk()
      });
    }

    /**
     * Returns the cancel button.
     *
     * @function
     * @name getCancelButton
     * @returns A button
     */;
    _proto.getCancelButton = function getCancelButton() {
      return _jsx(Button, {
        text: this.dataLossResourceModel.getText("C_COMMON_DIALOG_CANCEL"),
        press: () => this.handleDataLossCancel()
      });
    }

    /**
     * The building block render function.
     *
     * @returns An XML-based string
     */;
    _proto.getContent = function getContent() {
      var _this$controller$getV;
      const hasActiveEntity = (_this$controller$getV = this.controller.getView().getBindingContext()) === null || _this$controller$getV === void 0 ? void 0 : _this$controller$getV.getObject().HasActiveEntity;
      const description = hasActiveEntity ? this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_POPUP_MESSAGE_SAVE") : this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_POPUP_MESSAGE_CREATE");
      const createOrSaveLabel = hasActiveEntity ? this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_SAVE_DRAFT_RBL") : this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_CREATE_ENTITY_RBL");
      const createOrSaveText = hasActiveEntity ? this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_SAVE_DRAFT_TOL") : this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_CREATE_ENTITY_TOL");
      return _jsx(Dialog, {
        title: this.dataLossResourceModel.getText("WARNING"),
        state: ValueState.Warning,
        type: "Message",
        contentWidth: "22rem",
        ref: this.dataLossDialog,
        children: {
          content: _jsxs(_Fragment, {
            children: [_jsx(Text, {
              text: description,
              class: "sapUiTinyMarginBegin sapUiTinyMarginTopBottom"
            }), _jsxs(List, {
              mode: "SingleSelectLeft",
              showSeparators: "None",
              includeItemInSelection: "true",
              backgroundDesign: "Transparent",
              class: "sapUiNoContentPadding",
              ref: this.optionsList,
              children: [_jsx(CustomListItem, {
                customData: [new CustomData({
                  key: "itemKey",
                  value: "draftDataLossOptionSave"
                })],
                children: _jsxs(VBox, {
                  class: "sapUiTinyMargin",
                  children: [_jsx(Label, {
                    text: createOrSaveLabel,
                    design: "Bold"
                  }), _jsx(Text, {
                    text: createOrSaveText
                  })]
                })
              }), _jsx(CustomListItem, {
                customData: [new CustomData({
                  key: "itemKey",
                  value: "draftDataLossOptionKeep"
                })],
                children: _jsxs(VBox, {
                  class: "sapUiTinyMargin",
                  children: [_jsx(Label, {
                    text: this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_KEEP_DRAFT_RBL"),
                    design: "Bold"
                  }), _jsx(Text, {
                    text: this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_KEEP_DRAFT_TOL")
                  })]
                })
              }), _jsx(CustomListItem, {
                customData: [new CustomData({
                  key: "itemKey",
                  value: "draftDataLossOptionDiscard"
                })],
                children: _jsxs(VBox, {
                  class: "sapUiTinyMargin",
                  children: [_jsx(Label, {
                    text: this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_DISCARD_DRAFT_RBL"),
                    design: "Bold"
                  }), _jsx(Text, {
                    text: this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_DISCARD_DRAFT_TOL")
                  })]
                })
              })]
            })]
          }),
          buttons: _jsxs(_Fragment, {
            children: ["confirmButton = ", this.getConfirmButton(), "cancelButton = ", this.getCancelButton()]
          })
        }
      });
    };
    return DraftDataLossDialogBlock;
  }(RuntimeBuildingBlock), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataLossDialog", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "optionsList", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = DraftDataLossDialogBlock;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/DataLossOrDraftDiscard/DraftDataLossDialog.block", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockSupport","sap/fe/core/buildingBlocks/RuntimeBuildingBlock","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/ResourceModelHelper","sap/m/Button","sap/m/CustomListItem","sap/m/Dialog","sap/m/Label","sap/m/List","sap/m/Text","sap/m/VBox","sap/ui/core/CustomData","sap/ui/core/library","sap/fe/core/jsx-runtime/jsx","sap/fe/core/jsx-runtime/jsxs","sap/fe/core/jsx-runtime/Fragment"],function(e,t,o,i,s,n,a,r,l,c,u,d,p,D,f,g,h){"use strict";var L,T,_,m,v,A,S;var R={};var O=D.ValueState;var b=s.getResourceModel;var y=i.defineReference;var C=t.defineBuildingBlock;function F(e,t,o,i){if(!o)return;Object.defineProperty(e,t,{enumerable:o.enumerable,configurable:o.configurable,writable:o.writable,value:o.initializer?o.initializer.call(i):void 0})}function x(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function B(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;w(e,t)}function w(e,t){w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return w(e,t)}function E(e,t,o,i,s){var n={};Object.keys(i).forEach(function(e){n[e]=i[e]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=o.slice().reverse().reduce(function(o,i){return i(e,t,o)||o},n);if(s&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(s):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(e,t,n);n=null}return n}function M(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}var k;(function(e){e["Save"]="draftDataLossOptionSave";e["Keep"]="draftDataLossOptionKeep";e["Discard"]="draftDataLossOptionDiscard"})(k||(k={}));let P=(L=C({name:"DraftDataLossDialog",namespace:"sap.fe.core.controllerextensions"}),T=y(),_=y(),L(m=(v=function(t){B(o,t);function o(e){var o;o=t.call(this,e)||this;F(o,"dataLossDialog",A,x(o));F(o,"optionsList",S,x(o));return o}R=o;var i=o.prototype;i.dataLossConfirmation=function e(){var t;const o=this.controller.getView();this.dataLossResourceModel=b(o);this.getContent();const i=()=>this.handleDataLossOk();(t=this.optionsList.current)===null||t===void 0?void 0:t.addEventDelegate({onsapenter:function(){i()}});o.addDependent(this.dataLossDialog.current);this.openDataLossDialog();this.selectAndFocusFirstEntry()};i.performAfterDiscardorKeepDraft=async function e(t,o,i,s){this.controller=i;this.skipBindingToView=s;this.dataLossConfirmation();return new Promise((e,i)=>{this.onDataLossConfirmationFollowUpFunction=o=>{const i=t(o);e(i)};this.onDataLossCancelFollowUpFunction=()=>{o();i()}})};i.handleDataLossOk=function t(){const o=this.getSelectedKey();if(o===k.Save){this.saveDocument(this.controller).then(this.onDataLossConfirmationFollowUpFunction).catch(function(t){e.error("Error while saving document",t)});this.closeDataLossDialog()}else if(o===k.Keep){this.onDataLossConfirmationFollowUpFunction();this.closeDataLossDialog()}else if(o===k.Discard){this.discardDraft(this.controller,this.skipBindingToView).then(this.onDataLossConfirmationFollowUpFunction).catch(function(t){e.error("Error while discarding draft",t)});this.closeDataLossDialog()}};i.handleDataLossCancel=function e(){this.onDataLossCancelFollowUpFunction();this.closeDataLossDialog()};i.selectAndFocusFirstEntry=function e(){var t,o;const i=(t=this.optionsList.current)===null||t===void 0?void 0:t.getItems()[0];(o=this.optionsList.current)===null||o===void 0?void 0:o.setSelectedItem(i);i===null||i===void 0?void 0:i.focus()};i.discardDraft=async function e(t,o){const i=t.getView().getBindingContext();const s={skipBackNavigation:true,skipDiscardPopover:true,skipBindingToView:o!==undefined?o:true};return t.editFlow.cancelDocument(i,s)};i.saveDocument=function e(t){const o=t.getView().getBindingContext();if(t.isA("sap.fe.templates.ObjectPage.ObjectPageController")){return t._saveDocument(o)}else{return t.editFlow.saveDocument(o,{})}};i.getSelectedKey=function e(){const t=this.optionsList.current;return t.getSelectedItem().data("itemKey")};i.openDataLossDialog=function e(){var t;(t=this.dataLossDialog.current)===null||t===void 0?void 0:t.open()};i.closeDataLossDialog=function e(){var t,o;(t=this.dataLossDialog.current)===null||t===void 0?void 0:t.close();(o=this.dataLossDialog.current)===null||o===void 0?void 0:o.destroy()};i.getConfirmButton=function e(){return f(n,{text:this.dataLossResourceModel.getText("C_COMMON_DIALOG_OK"),type:"Emphasized",press:()=>this.handleDataLossOk()})};i.getCancelButton=function e(){return f(n,{text:this.dataLossResourceModel.getText("C_COMMON_DIALOG_CANCEL"),press:()=>this.handleDataLossCancel()})};i.getContent=function e(){var t;const o=(t=this.controller.getView().getBindingContext())===null||t===void 0?void 0:t.getObject().HasActiveEntity;const i=o?this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_POPUP_MESSAGE_SAVE"):this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_POPUP_MESSAGE_CREATE");const s=o?this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_SAVE_DRAFT_RBL"):this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_CREATE_ENTITY_RBL");const n=o?this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_SAVE_DRAFT_TOL"):this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_CREATE_ENTITY_TOL");return f(r,{title:this.dataLossResourceModel.getText("WARNING"),state:O.Warning,type:"Message",contentWidth:"22rem",ref:this.dataLossDialog,children:{content:g(h,{children:[f(u,{text:i,class:"sapUiTinyMarginBegin sapUiTinyMarginTopBottom"}),g(c,{mode:"SingleSelectLeft",showSeparators:"None",includeItemInSelection:"true",backgroundDesign:"Transparent",class:"sapUiNoContentPadding",ref:this.optionsList,children:[f(a,{customData:[new p({key:"itemKey",value:"draftDataLossOptionSave"})],children:g(d,{class:"sapUiTinyMargin",children:[f(l,{text:s,design:"Bold"}),f(u,{text:n})]})}),f(a,{customData:[new p({key:"itemKey",value:"draftDataLossOptionKeep"})],children:g(d,{class:"sapUiTinyMargin",children:[f(l,{text:this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_KEEP_DRAFT_RBL"),design:"Bold"}),f(u,{text:this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_KEEP_DRAFT_TOL")})]})}),f(a,{customData:[new p({key:"itemKey",value:"draftDataLossOptionDiscard"})],children:g(d,{class:"sapUiTinyMargin",children:[f(l,{text:this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_DISCARD_DRAFT_RBL"),design:"Bold"}),f(u,{text:this.dataLossResourceModel.getText("ST_DRAFT_DATALOSS_DISCARD_DRAFT_TOL")})]})})]})]}),buttons:g(h,{children:["confirmButton = ",this.getConfirmButton(),"cancelButton = ",this.getCancelButton()]})}})};return o}(o),A=E(v.prototype,"dataLossDialog",[T],{configurable:true,enumerable:true,writable:true,initializer:null}),S=E(v.prototype,"optionsList",[_],{configurable:true,enumerable:true,writable:true,initializer:null}),v))||m);R=P;return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/FilterBar-dbg", ["sap/fe/core/controls/filterbar/FilterContainer", "sap/fe/core/controls/filterbar/VisualFilterContainer", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/Core", "sap/ui/mdc/FilterBar", "sap/ui/mdc/filterbar/aligned/FilterItemLayout"], function (FilterContainer, VisualFilterContainer, ClassSupport, Core, MdcFilterBar, FilterItemLayout) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var association = ClassSupport.association;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FilterBar = (_dec = defineUI5Class("sap.fe.core.controls.FilterBar"), _dec2 = property({
    type: "string",
    defaultValue: "compact"
  }), _dec3 = association({
    type: "sap.m.SegmentedButton",
    multiple: false
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_MdcFilterBar) {
    _inheritsLoose(FilterBar, _MdcFilterBar);
    function FilterBar() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _MdcFilterBar.call(this, ...args) || this;
      _initializerDefineProperty(_this, "initialLayout", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "toggleControl", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = FilterBar.prototype;
    _proto.setToggleControl = function setToggleControl(vToggle) {
      if (typeof vToggle === "string") {
        this._oSegmentedButton = Core.byId(vToggle);
      } else {
        this._oSegmentedButton = vToggle;
      }
      if (this.toggleControl && this._oSegmentedButton) {
        this._oSegmentedButton.detachEvent("select", this._toggleLayout.bind(this));
      }
      if (this._oSegmentedButton) {
        this._oSegmentedButton.attachEvent("select", this._toggleLayout.bind(this));
      }
      this.setAssociation("toggleControl", vToggle, true);
    };
    _proto._toggleLayout = function _toggleLayout() {
      // Since primary layout is always compact
      // hence set the secondary layout as visual filter only for the first time only
      if (!this._oSecondaryFilterBarLayout) {
        this._oSecondaryFilterBarLayout = new VisualFilterContainer();
      }

      // do not show Adapt Filters Button for visual layout
      if (this._oSecondaryFilterBarLayout.isA("sap.fe.core.controls.filterbar.VisualFilterContainer")) {
        this.setShowAdaptFiltersButton(false);
      } else {
        this.setShowAdaptFiltersButton(true);
      }

      // get all filter fields and button of the current layout
      const oCurrentFilterBarLayout = this._oFilterBarLayout;
      const oFilterItems = this.getFilterItems();
      const aFilterFields = oCurrentFilterBarLayout.getAllFilterFields();
      const aSortedFilterFields = this.getSortedFilterFields(oFilterItems, aFilterFields);
      const aButtons = oCurrentFilterBarLayout.getAllButtons();
      const aVisualFilterFields = oCurrentFilterBarLayout.getAllVisualFilterFields && oCurrentFilterBarLayout.getAllVisualFilterFields();
      if (this._oSecondaryFilterBarLayout.isA("sap.fe.core.controls.filterbar.VisualFilterContainer")) {
        this._oSecondaryFilterBarLayout.setAllFilterFields(aSortedFilterFields, aVisualFilterFields);
      }
      // use secondary filter bar layout as new layout
      this._oFilterBarLayout = this._oSecondaryFilterBarLayout;

      // insert all filter fields from current layout to new layout
      aFilterFields.forEach((oFilterField, iIndex) => {
        oCurrentFilterBarLayout.removeFilterField(oFilterField);
        this._oFilterBarLayout.insertFilterField(oFilterField, iIndex);
      });
      // insert all buttons from the current layout to the new layout
      aButtons.forEach(oButton => {
        oCurrentFilterBarLayout.removeButton(oButton);
        this._oFilterBarLayout.addButton(oButton);
      });

      // set the current filter bar layout to the secondary one
      this._oSecondaryFilterBarLayout = oCurrentFilterBarLayout;

      // update the layout aggregation of the filter bar and rerender the same.
      this.setAggregation("layout", this._oFilterBarLayout, true);
      this._oFilterBarLayout.rerender();
    };
    _proto.getSortedFilterFields = function getSortedFilterFields(aFilterItems, aFilterFields) {
      const aFilterIds = [];
      aFilterItems.forEach(function (oFilterItem) {
        aFilterIds.push(oFilterItem.getId());
      });
      aFilterFields.sort(function (aFirstItem, aSecondItem) {
        let sFirstItemVFId, sSecondItemVFId;
        aFirstItem.getContent().forEach(function (oInnerControl) {
          if (oInnerControl.isA("sap.ui.mdc.FilterField")) {
            sFirstItemVFId = oInnerControl.getId();
          }
        });
        aSecondItem.getContent().forEach(function (oInnerControl) {
          if (oInnerControl.isA("sap.ui.mdc.FilterField")) {
            sSecondItemVFId = oInnerControl.getId();
          }
        });
        return aFilterIds.indexOf(sFirstItemVFId) - aFilterIds.indexOf(sSecondItemVFId);
      });
      return aFilterFields;
    };
    _proto._createInnerLayout = function _createInnerLayout() {
      this._oFilterBarLayout = new FilterContainer();
      this._cLayoutItem = FilterItemLayout;
      this._oFilterBarLayout.getInner().addStyleClass("sapUiMdcFilterBarBaseAFLayout");
      this._addButtons();

      // TODO: Check with MDC if there is a better way to load visual filter on the basis of control property
      // _createInnerLayout is called on Init by the filter bar base.
      // This mean that we do not have access to the control properties yet
      // and hence we cannot decide on the basis of control properties whether initial layout should be compact or visual
      // As a result we have to do this workaround to always load the compact layout by default
      // And toogle the same in case the initialLayout was supposed to be visual filters.
      const oInnerLayout = this._oFilterBarLayout.getInner();
      const oFilterContainerInnerLayoutEventDelegate = {
        onBeforeRendering: () => {
          if (this.initialLayout === "visual") {
            this._toggleLayout();
          }
          oInnerLayout.removeEventDelegate(oFilterContainerInnerLayoutEventDelegate);
        }
      };
      oInnerLayout.addEventDelegate(oFilterContainerInnerLayoutEventDelegate);
      this.setAggregation("layout", this._oFilterBarLayout, true);
    };
    _proto.exit = function exit() {
      _MdcFilterBar.prototype.exit.call(this);
      // Sometimes upon external navigation this._SegmentedButton is already destroyed
      // so check if it exists and then only remove stuff
      if (this._oSegmentedButton) {
        this._oSegmentedButton.detachEvent("select", this._toggleLayout);
        delete this._oSegmentedButton;
      }
    };
    _proto.getSegmentedButton = function getSegmentedButton() {
      return this._oSegmentedButton;
    };
    return FilterBar;
  }(MdcFilterBar), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "initialLayout", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "toggleControl", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FilterBar;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/FilterBar", ["sap/fe/core/controls/filterbar/FilterContainer","sap/fe/core/controls/filterbar/VisualFilterContainer","sap/fe/core/helpers/ClassSupport","sap/ui/core/Core","sap/ui/mdc/FilterBar","sap/ui/mdc/filterbar/aligned/FilterItemLayout"],function(t,e,i,r,o,n){"use strict";var a,l,s,u,c,d,f;var h=i.property;var g=i.defineUI5Class;var y=i.association;function p(t,e,i,r){if(!i)return;Object.defineProperty(t,e,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(r):void 0})}function F(t){if(t===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function B(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;_(t,e)}function _(t,e){_=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,i){e.__proto__=i;return e};return _(t,e)}function b(t,e,i,r,o){var n={};Object.keys(r).forEach(function(t){n[t]=r[t]});n.enumerable=!!n.enumerable;n.configurable=!!n.configurable;if("value"in n||n.initializer){n.writable=true}n=i.slice().reverse().reduce(function(i,r){return r(t,e,i)||i},n);if(o&&n.initializer!==void 0){n.value=n.initializer?n.initializer.call(o):void 0;n.initializer=undefined}if(n.initializer===void 0){Object.defineProperty(t,e,n);n=null}return n}function m(t,e){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let L=(a=g("sap.fe.core.controls.FilterBar"),l=h({type:"string",defaultValue:"compact"}),s=y({type:"sap.m.SegmentedButton",multiple:false}),a(u=(c=function(i){B(o,i);function o(){var t;for(var e=arguments.length,r=new Array(e),o=0;o<e;o++){r[o]=arguments[o]}t=i.call(this,...r)||this;p(t,"initialLayout",d,F(t));p(t,"toggleControl",f,F(t));return t}var a=o.prototype;a.setToggleControl=function t(e){if(typeof e==="string"){this._oSegmentedButton=r.byId(e)}else{this._oSegmentedButton=e}if(this.toggleControl&&this._oSegmentedButton){this._oSegmentedButton.detachEvent("select",this._toggleLayout.bind(this))}if(this._oSegmentedButton){this._oSegmentedButton.attachEvent("select",this._toggleLayout.bind(this))}this.setAssociation("toggleControl",e,true)};a._toggleLayout=function t(){if(!this._oSecondaryFilterBarLayout){this._oSecondaryFilterBarLayout=new e}if(this._oSecondaryFilterBarLayout.isA("sap.fe.core.controls.filterbar.VisualFilterContainer")){this.setShowAdaptFiltersButton(false)}else{this.setShowAdaptFiltersButton(true)}const i=this._oFilterBarLayout;const r=this.getFilterItems();const o=i.getAllFilterFields();const n=this.getSortedFilterFields(r,o);const a=i.getAllButtons();const l=i.getAllVisualFilterFields&&i.getAllVisualFilterFields();if(this._oSecondaryFilterBarLayout.isA("sap.fe.core.controls.filterbar.VisualFilterContainer")){this._oSecondaryFilterBarLayout.setAllFilterFields(n,l)}this._oFilterBarLayout=this._oSecondaryFilterBarLayout;o.forEach((t,e)=>{i.removeFilterField(t);this._oFilterBarLayout.insertFilterField(t,e)});a.forEach(t=>{i.removeButton(t);this._oFilterBarLayout.addButton(t)});this._oSecondaryFilterBarLayout=i;this.setAggregation("layout",this._oFilterBarLayout,true);this._oFilterBarLayout.rerender()};a.getSortedFilterFields=function t(e,i){const r=[];e.forEach(function(t){r.push(t.getId())});i.sort(function(t,e){let i,o;t.getContent().forEach(function(t){if(t.isA("sap.ui.mdc.FilterField")){i=t.getId()}});e.getContent().forEach(function(t){if(t.isA("sap.ui.mdc.FilterField")){o=t.getId()}});return r.indexOf(i)-r.indexOf(o)});return i};a._createInnerLayout=function e(){this._oFilterBarLayout=new t;this._cLayoutItem=n;this._oFilterBarLayout.getInner().addStyleClass("sapUiMdcFilterBarBaseAFLayout");this._addButtons();const i=this._oFilterBarLayout.getInner();const r={onBeforeRendering:()=>{if(this.initialLayout==="visual"){this._toggleLayout()}i.removeEventDelegate(r)}};i.addEventDelegate(r);this.setAggregation("layout",this._oFilterBarLayout,true)};a.exit=function t(){i.prototype.exit.call(this);if(this._oSegmentedButton){this._oSegmentedButton.detachEvent("select",this._toggleLayout);delete this._oSegmentedButton}};a.getSegmentedButton=function t(){return this._oSegmentedButton};return o}(o),d=b(c.prototype,"initialLayout",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),f=b(c.prototype,"toggleControl",[s],{configurable:true,enumerable:true,writable:true,initializer:null}),c))||u);return L},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/FormElementWrapper-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/Control"], function (ClassSupport, Control) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let FormElementWrapper = (_dec = defineUI5Class("sap.fe.core.controls.FormElementWrapper"), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "sap.ui.core.CSSSize",
    defaultValue: null
  }), _dec4 = property({
    type: "boolean",
    defaultValue: false
  }), _dec5 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    isDefault: true
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_Control) {
    _inheritsLoose(FormElementWrapper, _Control);
    function FormElementWrapper() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Control.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "width", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "formDoNotAdjustWidth", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "content", _descriptor4, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = FormElementWrapper.prototype;
    _proto.getAccessibilityInfo = function getAccessibilityInfo() {
      const oContent = this.content;
      return oContent && oContent.getAccessibilityInfo ? oContent.getAccessibilityInfo() : {};
    };
    FormElementWrapper.render = function render(oRm, oControl) {
      oRm.openStart("div", oControl);
      oRm.style("min-height", "1rem");
      oRm.style("width", oControl.width);
      oRm.openEnd();
      oRm.openStart("div");
      oRm.style("display", "flex");
      oRm.style("box-sizing", "border-box");
      oRm.style("justify-content", "space-between");
      oRm.style("align-items", "center");
      oRm.style("flex-wrap", "wrap");
      oRm.style("align-content", "stretch");
      oRm.style("width", "100%");
      oRm.openEnd();
      oRm.renderControl(oControl.content); // render the child Control
      oRm.close("div");
      oRm.close("div"); // end of the complete Control
    };
    return FormElementWrapper;
  }(Control), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "width", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "formDoNotAdjustWidth", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "content", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FormElementWrapper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/FormElementWrapper", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/Control"],function(e,t){"use strict";var r,i,n,o,l,a,u,s,c,p,f;var b=e.property;var d=e.implementInterface;var y=e.defineUI5Class;var m=e.aggregation;function h(e,t,r,i){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(i):void 0})}function v(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function g(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;w(e,t)}function w(e,t){w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return w(e,t)}function _(e,t,r,i,n){var o={};Object.keys(i).forEach(function(e){o[e]=i[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=r.slice().reverse().reduce(function(r,i){return i(e,t,r)||r},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function z(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let j=(r=y("sap.fe.core.controls.FormElementWrapper"),i=d("sap.ui.core.IFormContent"),n=b({type:"sap.ui.core.CSSSize",defaultValue:null}),o=b({type:"boolean",defaultValue:false}),l=m({type:"sap.ui.core.Control",multiple:false,isDefault:true}),r(a=(u=function(e){g(t,e);function t(){var t;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++){i[n]=arguments[n]}t=e.call(this,...i)||this;h(t,"__implements__sap_ui_core_IFormContent",s,v(t));h(t,"width",c,v(t));h(t,"formDoNotAdjustWidth",p,v(t));h(t,"content",f,v(t));return t}var r=t.prototype;r.getAccessibilityInfo=function e(){const t=this.content;return t&&t.getAccessibilityInfo?t.getAccessibilityInfo():{}};t.render=function e(t,r){t.openStart("div",r);t.style("min-height","1rem");t.style("width",r.width);t.openEnd();t.openStart("div");t.style("display","flex");t.style("box-sizing","border-box");t.style("justify-content","space-between");t.style("align-items","center");t.style("flex-wrap","wrap");t.style("align-content","stretch");t.style("width","100%");t.openEnd();t.renderControl(r.content);t.close("div");t.close("div")};return t}(t),s=_(u.prototype,"__implements__sap_ui_core_IFormContent",[i],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),c=_(u.prototype,"width",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),p=_(u.prototype,"formDoNotAdjustWidth",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),f=_(u.prototype,"content",[l],{configurable:true,enumerable:true,writable:true,initializer:null}),u))||a);return j},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/MassEditSelect-dbg", ["sap/m/Select", "sap/m/SelectRenderer"], function (Select, SelectRenderer) {
  "use strict";

  const MassEditSelect = Select.extend("sap.fe.core.controls.MassEditSelect", {
    metadata: {
      properties: {
        showValueHelp: {
          type: "boolean"
        },
        valueHelpIconSrc: {
          type: "string"
        },
        selectValue: {
          type: "string"
        }
      },
      events: {
        valueHelpRequest: {}
      },
      interfaces: ["sap.ui.core.IFormContent"]
    },
    renderer: {
      apiVersion: 2,
      render: SelectRenderer.render
    }
  });
  return MassEditSelect;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/MassEditSelect", ["sap/m/Select","sap/m/SelectRenderer"],function(e,t){"use strict";const r=e.extend("sap.fe.core.controls.MassEditSelect",{metadata:{properties:{showValueHelp:{type:"boolean"},valueHelpIconSrc:{type:"string"},selectValue:{type:"string"}},events:{valueHelpRequest:{}},interfaces:["sap.ui.core.IFormContent"]},renderer:{apiVersion:2,render:t.render}});return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/MultiValueParameterDelegate-dbg", ["sap/ui/mdc/field/MultiValueFieldDelegate"], function (MultiValueFieldDelegate) {
  "use strict";

  const oMultiValueFieldDelegate = Object.assign({}, MultiValueFieldDelegate, {
    _transformConditions: function (aConditions, sKeyPath, sDescriptionPath) {
      const aTransformedItems = [];
      for (let i = 0; i < aConditions.length; i++) {
        const oItem = {};
        const oCondition = aConditions[i];
        oItem[sKeyPath] = oCondition.values[0];
        if (sDescriptionPath) {
          oItem[sDescriptionPath] = oCondition.values[1];
        }
        aTransformedItems.push(oItem);
      }
      return aTransformedItems;
    },
    updateItems: function (oPayload, aConditions, oMultiValueField) {
      const oListBinding = oMultiValueField.getBinding("items");
      const oBindingInfo = oMultiValueField.getBindingInfo("items");
      const sItemPath = oBindingInfo.path;
      const oTemplate = oBindingInfo.template;
      const oKeyBindingInfo = oTemplate.getBindingInfo("key");
      const sKeyPath = oKeyBindingInfo && oKeyBindingInfo.parts[0].path;
      const oDescriptionBindingInfo = oTemplate.getBindingInfo("description");
      const sDescriptionPath = oDescriptionBindingInfo && oDescriptionBindingInfo.parts[0].path;
      const oModel = oListBinding.getModel();
      oModel.setProperty(sItemPath, this._transformConditions(aConditions, sKeyPath, sDescriptionPath));
    }
  });
  return oMultiValueFieldDelegate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/MultiValueParameterDelegate", ["sap/ui/mdc/field/MultiValueFieldDelegate"],function(t){"use strict";const n=Object.assign({},t,{_transformConditions:function(t,n,s){const e=[];for(let i=0;i<t.length;i++){const o={};const c=t[i];o[n]=c.values[0];if(s){o[s]=c.values[1]}e.push(o)}return e},updateItems:function(t,n,s){const e=s.getBinding("items");const i=s.getBindingInfo("items");const o=i.path;const c=i.template;const a=c.getBindingInfo("key");const r=a&&a.parts[0].path;const u=c.getBindingInfo("description");const d=u&&u.parts[0].path;const f=e.getModel();f.setProperty(o,this._transformConditions(n,r,d))}});return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/FilterContainer-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/mdc/filterbar/aligned/FilterContainer"], function (ClassSupport, MdcFilterContainer) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  /**
   * Constructor for a new FE filter container.
   *
   * @extends sap.ui.mdc.filterbar.aligned.FilterContainer
   * @class
   * @private
   * @alias sap.fe.core.controls.filterbar.FilterContainer
   */
  let FilterContainer = (_dec = defineUI5Class("sap.fe.core.controls.filterbar.FilterContainer"), _dec(_class = /*#__PURE__*/function (_MdcFilterContainer) {
    _inheritsLoose(FilterContainer, _MdcFilterContainer);
    function FilterContainer() {
      return _MdcFilterContainer.apply(this, arguments) || this;
    }
    var _proto = FilterContainer.prototype;
    _proto.init = function init() {
      this.aAllFilterFields = [];
      this.aAllVisualFilters = {};
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _MdcFilterContainer.prototype.init.call(this, ...args);
    };
    _proto.exit = function exit() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      // destroy layout
      _MdcFilterContainer.prototype.exit.call(this, ...args);
      // destroy all filter fields which are not in the layout
      this.aAllFilterFields.forEach(function (oFilterField) {
        oFilterField.destroy();
      });
      Object.keys(this.aAllVisualFilters).forEach(sKey => {
        this.aAllVisualFilters[sKey].destroy();
      });
    };
    _proto.insertFilterField = function insertFilterField(oControl, iIndex) {
      const oFilterItemLayoutEventDelegate = {
        onBeforeRendering: function () {
          // For compact filters the item layout needs to render both label and filter field.
          // hence use the original getContent of the FilterItemLayout
          if (oControl._fnGetContentCopy) {
            oControl.getContent = oControl._fnGetContentCopy;
          }
          oControl.removeEventDelegate(oFilterItemLayoutEventDelegate);
        }
      };
      oControl.addEventDelegate(oFilterItemLayoutEventDelegate);

      // In this layout there is no need to render visual filter
      // hence find the filter field from the layout and remove it's content aggregation
      oControl.getContent().forEach(oInnerControl => {
        const oContent = oInnerControl.getContent && oInnerControl.getContent();
        if (oInnerControl.isA("sap.ui.mdc.FilterField") && oContent && oContent.isA("sap.fe.core.controls.filterbar.VisualFilter")) {
          // store the visual filter for later use.
          const oVFId = oInnerControl.getId();
          this.aAllVisualFilters[oVFId] = oContent;
          // remove the content aggregation to render internal content of the field
          oInnerControl.setContent(null);
        }
      });

      // store filter fields to refer to when switching between layout
      this.aAllFilterFields.push(oControl);
      _MdcFilterContainer.prototype.insertFilterField.call(this, oControl, iIndex);
    };
    _proto.removeFilterField = function removeFilterField(oControl) {
      const oFilterFieldIndex = this.aAllFilterFields.findIndex(function (oFilterField) {
        return oFilterField.getId() === oControl.getId();
      });

      // Setting VF content for Fillterfield before removing
      oControl.getContent().forEach(oInnerControl => {
        if (oInnerControl.isA("sap.ui.mdc.FilterField") && !oInnerControl.getContent()) {
          const oVFId = oInnerControl.getId();
          if (this.aAllVisualFilters[oVFId]) {
            oInnerControl.setContent(this.aAllVisualFilters[oVFId]);
          }
        }
      });
      this.aAllFilterFields.splice(oFilterFieldIndex, 1);
      _MdcFilterContainer.prototype.removeFilterField.call(this, oControl);
    };
    _proto.removeAllFilterFields = function removeAllFilterFields() {
      this.aAllFilterFields = [];
      this.aAllVisualFilters = {};
      this.oLayout.removeAllContent();
    };
    _proto.getAllButtons = function getAllButtons() {
      return this.oLayout.getEndContent();
    };
    _proto.removeButton = function removeButton(oControl) {
      this.oLayout.removeEndContent(oControl);
    };
    _proto.getAllFilterFields = function getAllFilterFields() {
      return this.aAllFilterFields.slice();
    };
    _proto.getAllVisualFilterFields = function getAllVisualFilterFields() {
      return this.aAllVisualFilters;
    };
    _proto.setAllFilterFields = function setAllFilterFields(aFilterFields) {
      this.aAllFilterFields = aFilterFields;
    };
    return FilterContainer;
  }(MdcFilterContainer)) || _class);
  return FilterContainer;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/FilterContainer", ["sap/fe/core/helpers/ClassSupport","sap/ui/mdc/filterbar/aligned/FilterContainer"],function(t,e){"use strict";var i,l;var n=t.defineUI5Class;function r(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;o(t,e)}function o(t,e){o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,i){e.__proto__=i;return e};return o(t,e)}let s=(i=n("sap.fe.core.controls.filterbar.FilterContainer"),i(l=function(t){r(e,t);function e(){return t.apply(this,arguments)||this}var i=e.prototype;i.init=function e(){this.aAllFilterFields=[];this.aAllVisualFilters={};for(var i=arguments.length,l=new Array(i),n=0;n<i;n++){l[n]=arguments[n]}t.prototype.init.call(this,...l)};i.exit=function e(){for(var i=arguments.length,l=new Array(i),n=0;n<i;n++){l[n]=arguments[n]}t.prototype.exit.call(this,...l);this.aAllFilterFields.forEach(function(t){t.destroy()});Object.keys(this.aAllVisualFilters).forEach(t=>{this.aAllVisualFilters[t].destroy()})};i.insertFilterField=function e(i,l){const n={onBeforeRendering:function(){if(i._fnGetContentCopy){i.getContent=i._fnGetContentCopy}i.removeEventDelegate(n)}};i.addEventDelegate(n);i.getContent().forEach(t=>{const e=t.getContent&&t.getContent();if(t.isA("sap.ui.mdc.FilterField")&&e&&e.isA("sap.fe.core.controls.filterbar.VisualFilter")){const i=t.getId();this.aAllVisualFilters[i]=e;t.setContent(null)}});this.aAllFilterFields.push(i);t.prototype.insertFilterField.call(this,i,l)};i.removeFilterField=function e(i){const l=this.aAllFilterFields.findIndex(function(t){return t.getId()===i.getId()});i.getContent().forEach(t=>{if(t.isA("sap.ui.mdc.FilterField")&&!t.getContent()){const e=t.getId();if(this.aAllVisualFilters[e]){t.setContent(this.aAllVisualFilters[e])}}});this.aAllFilterFields.splice(l,1);t.prototype.removeFilterField.call(this,i)};i.removeAllFilterFields=function t(){this.aAllFilterFields=[];this.aAllVisualFilters={};this.oLayout.removeAllContent()};i.getAllButtons=function t(){return this.oLayout.getEndContent()};i.removeButton=function t(e){this.oLayout.removeEndContent(e)};i.getAllFilterFields=function t(){return this.aAllFilterFields.slice()};i.getAllVisualFilterFields=function t(){return this.aAllVisualFilters};i.setAllFilterFields=function t(e){this.aAllFilterFields=e};return e}(e))||l);return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/VisualFilter-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/controls/filterbar/utils/VisualFilterUtils", "sap/fe/core/helpers/ClassSupport", "sap/fe/macros/CommonHelper", "sap/fe/macros/filter/FilterUtils", "sap/m/VBox", "sap/ui/core/Core", "../../templating/FilterHelper"], function (CommonUtils, VisualFilterUtils, ClassSupport, CommonHelper, FilterUtils, VBox, Core, FilterHelper) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;
  var getFiltersConditionsFromSelectionVariant = FilterHelper.getFiltersConditionsFromSelectionVariant;
  var property = ClassSupport.property;
  var implementInterface = ClassSupport.implementInterface;
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Constructor for a new filterBar/aligned/FilterItemLayout.
   *
   * @param {string} [sId] ID for the new control, generated automatically if no ID is given
   * @param {object} [mSettings] Initial settings for the new control
   * @class Represents a filter item on the UI.
   * @extends sap.m.VBox
   * @implements {sap.ui.core.IFormContent}
   * @class
   * @private
   * @since 1.61.0
   * @alias control sap.fe.core.controls.filterbar.VisualFilter
   */
  let VisualFilter = (_dec = defineUI5Class("sap.fe.core.controls.filterbar.VisualFilter"), _dec2 = implementInterface("sap.ui.core.IFormContent"), _dec3 = property({
    type: "boolean"
  }), _dec4 = property({
    type: "string"
  }), _dec5 = event(), _dec(_class = (_class2 = /*#__PURE__*/function (_VBox) {
    _inheritsLoose(VisualFilter, _VBox);
    function VisualFilter() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _VBox.call(this, ...args) || this;
      _initializerDefineProperty(_this, "__implements__sap_ui_core_IFormContent", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "showValueHelp", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "valueHelpIconSrc", _descriptor3, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "valueHelpRequest", _descriptor4, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = VisualFilter.prototype;
    _proto.onAfterRendering = function onAfterRendering() {
      var _this$getParent;
      let sLabel;
      const oInteractiveChart = this.getItems()[1].getItems()[0];
      const sInternalContextPath = this.data("infoPath");
      const oInteractiveChartListBinding = oInteractiveChart.getBinding("segments") || oInteractiveChart.getBinding("bars") || oInteractiveChart.getBinding("points");
      const oInternalModelContext = oInteractiveChart.getBindingContext("internal");
      const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      const bShowOverLayInitially = oInteractiveChart.data("showOverlayInitially");
      const oSelectionVariantAnnotation = oInteractiveChart.data("selectionVariantAnnotation") ? CommonHelper.parseCustomData(oInteractiveChart.data("selectionVariantAnnotation")) : {
        SelectOptions: []
      };
      const aRequiredProperties = oInteractiveChart.data("requiredProperties") ? CommonHelper.parseCustomData(oInteractiveChart.data("requiredProperties")) : [];
      const oMetaModel = oInteractiveChart.getModel().getMetaModel();
      const sEntitySetPath = oInteractiveChartListBinding ? oInteractiveChartListBinding.getPath() : "";
      let oFilterBar = (_this$getParent = this.getParent()) === null || _this$getParent === void 0 ? void 0 : _this$getParent.getParent();
      // TODO: Remove this part once 2170204347 is fixed
      if (oFilterBar.getMetadata().getElementName() === "sap.ui.mdc.filterbar.p13n.AdaptationFilterBar") {
        var _oFilterBar$getParent;
        oFilterBar = (_oFilterBar$getParent = oFilterBar.getParent()) === null || _oFilterBar$getParent === void 0 ? void 0 : _oFilterBar$getParent.getParent();
      }
      let oFilterBarConditions = {};
      let aPropertyInfoSet = [];
      let sFilterEntityName;
      if (oFilterBar.getMetadata().getElementName() === "sap.fe.core.controls.FilterBar") {
        oFilterBarConditions = oFilterBar.getConditions();
        aPropertyInfoSet = oFilterBar.getPropertyInfoSet();
        sFilterEntityName = oFilterBar.data("entityType").split("/")[1];
      }
      const aParameters = oInteractiveChart.data("parameters") ? oInteractiveChart.data("parameters").customData : [];
      const filterConditions = getFiltersConditionsFromSelectionVariant(sEntitySetPath, oMetaModel, oSelectionVariantAnnotation, VisualFilterUtils.getCustomConditions.bind(VisualFilterUtils));
      const oSelectionVariantConditions = VisualFilterUtils.convertFilterCondions(filterConditions);
      const mConditions = {};
      Object.keys(oFilterBarConditions).forEach(function (sKey) {
        if (oFilterBarConditions[sKey].length) {
          mConditions[sKey] = oFilterBarConditions[sKey];
        }
      });
      Object.keys(oSelectionVariantConditions).forEach(function (sKey) {
        if (!mConditions[sKey]) {
          mConditions[sKey] = oSelectionVariantConditions[sKey];
        }
      });
      if (bShowOverLayInitially === "true") {
        if (!Object.keys(oSelectionVariantAnnotation).length) {
          if (aRequiredProperties.length > 1) {
            oInternalModelContext.setProperty(sInternalContextPath, {
              showError: true,
              errorMessageTitle: oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
              errorMessage: oResourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF")
            });
          } else {
            sLabel = oMetaModel.getObject(`${sEntitySetPath}/${aRequiredProperties[0]}@com.sap.vocabularies.Common.v1.Label`) || aRequiredProperties[0];
            oInternalModelContext.setProperty(sInternalContextPath, {
              showError: true,
              errorMessageTitle: oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
              errorMessage: oResourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF", sLabel)
            });
          }
        } else {
          const aSelectOptions = [];
          const aNotMatchedConditions = [];
          if (oSelectionVariantAnnotation.SelectOptions) {
            oSelectionVariantAnnotation.SelectOptions.forEach(function (oSelectOption) {
              aSelectOptions.push(oSelectOption.PropertyName.$PropertyPath);
            });
          }
          if (oSelectionVariantAnnotation.Parameters) {
            oSelectionVariantAnnotation.Parameters.forEach(function (oParameter) {
              aSelectOptions.push(oParameter.PropertyName.$PropertyPath);
            });
          }
          aRequiredProperties.forEach(function (sPath) {
            if (aSelectOptions.indexOf(sPath) === -1) {
              aNotMatchedConditions.push(sPath);
            }
          });
          const errorInfo = VisualFilterUtils.getErrorInfoForNoInitialOverlay(aNotMatchedConditions, oResourceBundle, sEntitySetPath, oMetaModel);
          oInternalModelContext.setProperty(sInternalContextPath, errorInfo);
        }
      }
      if (!this._oChartBinding || this._oChartBinding !== oInteractiveChartListBinding) {
        if (this._oChartBinding) {
          this.detachDataReceivedHandler(this._oChartBinding);
        }
        this.attachDataRecivedHandler(oInteractiveChartListBinding);
        this._oChartBinding = oInteractiveChartListBinding;
      }
      const bShowOverlay = oInternalModelContext.getProperty(sInternalContextPath) && oInternalModelContext.getProperty(sInternalContextPath).showError;
      const sChartEntityName = sEntitySetPath !== "" ? sEntitySetPath.split("/")[1].split("(")[0] : "";
      if (aParameters && aParameters.length && sFilterEntityName === sChartEntityName) {
        const sBindingPath = FilterUtils.getBindingPathForParameters(oFilterBar, mConditions, aPropertyInfoSet, aParameters);
        if (sBindingPath) {
          oInteractiveChartListBinding.sPath = sBindingPath;
        }
      }
      // resume binding for only those visual filters that do not have a in parameter attached.
      // Bindings of visual filters with inParameters will be resumed later after considering in parameters.
      if (oInteractiveChartListBinding && oInteractiveChartListBinding.isSuspended() && !bShowOverlay) {
        oInteractiveChartListBinding.resume();
      }
    };
    _proto.attachDataRecivedHandler = function attachDataRecivedHandler(oInteractiveChartListBinding) {
      if (oInteractiveChartListBinding) {
        oInteractiveChartListBinding.attachEvent("dataReceived", this.onInternalDataReceived, this);
        this._oChartBinding = oInteractiveChartListBinding;
      }
    };
    _proto.detachDataReceivedHandler = function detachDataReceivedHandler(oInteractiveChartListBinding) {
      if (oInteractiveChartListBinding) {
        oInteractiveChartListBinding.detachEvent("dataReceived", this.onInternalDataReceived, this);
        this._oChartBinding = undefined;
      }
    };
    _proto.setShowValueHelp = function setShowValueHelp(bShowValueHelp) {
      if (this.getItems().length > 0) {
        const oVisualFilterControl = this.getItems()[0].getItems()[0];
        oVisualFilterControl.getContent().some(function (oInnerControl) {
          if (oInnerControl.isA("sap.m.Button")) {
            oInnerControl.setVisible(bShowValueHelp);
          }
        });
        this.setProperty("showValueHelp", bShowValueHelp);
      }
    };
    _proto.setValueHelpIconSrc = function setValueHelpIconSrc(sIconSrc) {
      if (this.getItems().length > 0) {
        const oVisualFilterControl = this.getItems()[0].getItems()[0];
        oVisualFilterControl.getContent().some(function (oInnerControl) {
          if (oInnerControl.isA("sap.m.Button")) {
            oInnerControl.setIcon(sIconSrc);
          }
        });
        this.setProperty("valueHelpIconSrc", sIconSrc);
      }
    };
    _proto.onInternalDataReceived = function onInternalDataReceived(oEvent) {
      const sId = this.getId();
      const oView = CommonUtils.getTargetView(this);
      const oInteractiveChart = this.getItems()[1].getItems()[0];
      const sInternalContextPath = this.data("infoPath");
      const oInternalModelContext = oInteractiveChart.getBindingContext("internal");
      const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
      const vUOM = oInteractiveChart.data("uom");
      VisualFilterUtils.updateChartScaleFactorTitle(oInteractiveChart, oView, sId, sInternalContextPath);
      if (oEvent.getParameter("error")) {
        const s18nMessageTitle = oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");
        const s18nMessage = oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_DATA_TEXT");
        VisualFilterUtils.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInternalContextPath, oView);
      } else if (oEvent.getParameter("data")) {
        const oData = oEvent.getSource().getCurrentContexts();
        if (oData && oData.length === 0) {
          VisualFilterUtils.setNoDataMessage(sInternalContextPath, oResourceBundle, oView);
        } else {
          oInternalModelContext.setProperty(sInternalContextPath, {});
        }
        VisualFilterUtils.setMultiUOMMessage(oData, oInteractiveChart, sInternalContextPath, oResourceBundle, oView);
      }
      if (vUOM && (vUOM["ISOCurrency"] && vUOM["ISOCurrency"].$Path || vUOM["Unit"] && vUOM["Unit"].$Path)) {
        const oContexts = oEvent.getSource().getContexts();
        const oContextData = oContexts && oContexts[0].getObject();
        VisualFilterUtils.applyUOMToTitle(oInteractiveChart, oContextData, oView, sInternalContextPath);
      }
    };
    return VisualFilter;
  }(VBox), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "__implements__sap_ui_core_IFormContent", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return true;
    }
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "showValueHelp", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "valueHelpIconSrc", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "valueHelpRequest", [_dec5], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return VisualFilter;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/VisualFilter", ["sap/fe/core/CommonUtils","sap/fe/core/controls/filterbar/utils/VisualFilterUtils","sap/fe/core/helpers/ClassSupport","sap/fe/macros/CommonHelper","sap/fe/macros/filter/FilterUtils","sap/m/VBox","sap/ui/core/Core","../../templating/FilterHelper"],function(e,t,r,n,i,a,o,s){"use strict";var l,c,u,p,f,g,d,h,m,_,I;var b=s.getFiltersConditionsFromSelectionVariant;var v=r.property;var y=r.implementInterface;var E=r.event;var P=r.defineUI5Class;function R(e,t,r,n){if(!r)return;Object.defineProperty(e,t,{enumerable:r.enumerable,configurable:r.configurable,writable:r.writable,value:r.initializer?r.initializer.call(n):void 0})}function S(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function C(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;T(e,t)}function T(e,t){T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,r){t.__proto__=r;return t};return T(e,t)}function O(e,t,r,n,i){var a={};Object.keys(n).forEach(function(e){a[e]=n[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=r.slice().reverse().reduce(function(r,n){return n(e,t,r)||r},a);if(i&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(i):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,t,a);a=null}return a}function F(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let L=(l=P("sap.fe.core.controls.filterbar.VisualFilter"),c=y("sap.ui.core.IFormContent"),u=v({type:"boolean"}),p=v({type:"string"}),f=E(),l(g=(d=function(r){C(a,r);function a(){var e;for(var t=arguments.length,n=new Array(t),i=0;i<t;i++){n[i]=arguments[i]}e=r.call(this,...n)||this;R(e,"__implements__sap_ui_core_IFormContent",h,S(e));R(e,"showValueHelp",m,S(e));R(e,"valueHelpIconSrc",_,S(e));R(e,"valueHelpRequest",I,S(e));return e}var s=a.prototype;s.onAfterRendering=function e(){var r;let a;const s=this.getItems()[1].getItems()[0];const l=this.data("infoPath");const c=s.getBinding("segments")||s.getBinding("bars")||s.getBinding("points");const u=s.getBindingContext("internal");const p=o.getLibraryResourceBundle("sap.fe.macros");const f=s.data("showOverlayInitially");const g=s.data("selectionVariantAnnotation")?n.parseCustomData(s.data("selectionVariantAnnotation")):{SelectOptions:[]};const d=s.data("requiredProperties")?n.parseCustomData(s.data("requiredProperties")):[];const h=s.getModel().getMetaModel();const m=c?c.getPath():"";let _=(r=this.getParent())===null||r===void 0?void 0:r.getParent();if(_.getMetadata().getElementName()==="sap.ui.mdc.filterbar.p13n.AdaptationFilterBar"){var I;_=(I=_.getParent())===null||I===void 0?void 0:I.getParent()}let v={};let y=[];let E;if(_.getMetadata().getElementName()==="sap.fe.core.controls.FilterBar"){v=_.getConditions();y=_.getPropertyInfoSet();E=_.data("entityType").split("/")[1]}const P=s.data("parameters")?s.data("parameters").customData:[];const R=b(m,h,g,t.getCustomConditions.bind(t));const S=t.convertFilterCondions(R);const C={};Object.keys(v).forEach(function(e){if(v[e].length){C[e]=v[e]}});Object.keys(S).forEach(function(e){if(!C[e]){C[e]=S[e]}});if(f==="true"){if(!Object.keys(g).length){if(d.length>1){u.setProperty(l,{showError:true,errorMessageTitle:p.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:p.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF")})}else{a=h.getObject(`${m}/${d[0]}@com.sap.vocabularies.Common.v1.Label`)||d[0];u.setProperty(l,{showError:true,errorMessageTitle:p.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:p.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF",a)})}}else{const e=[];const r=[];if(g.SelectOptions){g.SelectOptions.forEach(function(t){e.push(t.PropertyName.$PropertyPath)})}if(g.Parameters){g.Parameters.forEach(function(t){e.push(t.PropertyName.$PropertyPath)})}d.forEach(function(t){if(e.indexOf(t)===-1){r.push(t)}});const n=t.getErrorInfoForNoInitialOverlay(r,p,m,h);u.setProperty(l,n)}}if(!this._oChartBinding||this._oChartBinding!==c){if(this._oChartBinding){this.detachDataReceivedHandler(this._oChartBinding)}this.attachDataRecivedHandler(c);this._oChartBinding=c}const T=u.getProperty(l)&&u.getProperty(l).showError;const O=m!==""?m.split("/")[1].split("(")[0]:"";if(P&&P.length&&E===O){const e=i.getBindingPathForParameters(_,C,y,P);if(e){c.sPath=e}}if(c&&c.isSuspended()&&!T){c.resume()}};s.attachDataRecivedHandler=function e(t){if(t){t.attachEvent("dataReceived",this.onInternalDataReceived,this);this._oChartBinding=t}};s.detachDataReceivedHandler=function e(t){if(t){t.detachEvent("dataReceived",this.onInternalDataReceived,this);this._oChartBinding=undefined}};s.setShowValueHelp=function e(t){if(this.getItems().length>0){const e=this.getItems()[0].getItems()[0];e.getContent().some(function(e){if(e.isA("sap.m.Button")){e.setVisible(t)}});this.setProperty("showValueHelp",t)}};s.setValueHelpIconSrc=function e(t){if(this.getItems().length>0){const e=this.getItems()[0].getItems()[0];e.getContent().some(function(e){if(e.isA("sap.m.Button")){e.setIcon(t)}});this.setProperty("valueHelpIconSrc",t)}};s.onInternalDataReceived=function r(n){const i=this.getId();const a=e.getTargetView(this);const s=this.getItems()[1].getItems()[0];const l=this.data("infoPath");const c=s.getBindingContext("internal");const u=o.getLibraryResourceBundle("sap.fe.macros");const p=s.data("uom");t.updateChartScaleFactorTitle(s,a,i,l);if(n.getParameter("error")){const e=u.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");const r=u.getText("M_VISUAL_FILTERS_ERROR_DATA_TEXT");t.applyErrorMessageAndTitle(e,r,l,a)}else if(n.getParameter("data")){const e=n.getSource().getCurrentContexts();if(e&&e.length===0){t.setNoDataMessage(l,u,a)}else{c.setProperty(l,{})}t.setMultiUOMMessage(e,s,l,u,a)}if(p&&(p["ISOCurrency"]&&p["ISOCurrency"].$Path||p["Unit"]&&p["Unit"].$Path)){const e=n.getSource().getContexts();const r=e&&e[0].getObject();t.applyUOMToTitle(s,r,a,l)}};return a}(a),h=O(d.prototype,"__implements__sap_ui_core_IFormContent",[c],{configurable:true,enumerable:true,writable:true,initializer:function(){return true}}),m=O(d.prototype,"showValueHelp",[u],{configurable:true,enumerable:true,writable:true,initializer:null}),_=O(d.prototype,"valueHelpIconSrc",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),I=O(d.prototype,"valueHelpRequest",[f],{configurable:true,enumerable:true,writable:true,initializer:null}),d))||g);return L},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/VisualFilterContainer-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/m/FlexBox", "sap/m/HeaderContainer", "sap/ui/core/library", "sap/ui/Device", "sap/ui/mdc/filterbar/IFilterContainer"], function (ClassSupport, FlexBox, HeaderContainer, coreLibrabry, Device, IFilterContainer) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var system = Device.system;
  var defineUI5Class = ClassSupport.defineUI5Class;
  var aggregation = ClassSupport.aggregation;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Constructor for a new Visual Filter Container.
   * Used for visual filters.
   *
   * @extends sap.ui.mdc.filterbar.IFilterContainer
   * @class
   * @private
   * @alias sap.fe.core.controls.filterbar.VisualFilterContainer
   */
  let VisualFilterContainer = (_dec = defineUI5Class("sap.fe.core.controls.filterbar.VisualFilterContainer"), _dec2 = aggregation({
    type: "sap.ui.core.Control",
    multiple: false,
    visibility: "hidden"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_IFilterContainer) {
    _inheritsLoose(VisualFilterContainer, _IFilterContainer);
    function VisualFilterContainer() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _IFilterContainer.call(this, ...args) || this;
      _initializerDefineProperty(_this, "_layout", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = VisualFilterContainer.prototype;
    _proto.init = function init() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _IFilterContainer.prototype.init.call(this, ...args);
      //var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.mdc");
      const sDeviceSystem = system,
        Orientation = coreLibrabry.Orientation,
        sOrientation = sDeviceSystem.phone ? Orientation.Vertical : undefined,
        sDirection = sDeviceSystem.phone ? "ColumnReverse" : "Column";
      this.oHeaderContainer = new HeaderContainer({
        orientation: sOrientation
      });
      this.oButtonFlexBox = new FlexBox({
        alignItems: "End",
        justifyContent: "End"
      });
      this.oLayout = new FlexBox({
        direction: sDirection,
        // Direction is Column Reverse for Phone
        items: [this.oHeaderContainer, this.oButtonFlexBox]
      });
      this.aAllFilterFields = [];
      this.aVisualFilterFields = {};
    };
    _proto.exit = function exit() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      // destroy layout
      _IFilterContainer.prototype.exit.call(this, ...args);
      // destroy all filter fields which are not in the layout
      const aAllFilterFields = this.getAllFilterFields();
      aAllFilterFields.forEach(function (oFilterField) {
        oFilterField.destroy();
      });
      this.oHeaderContainer = null;
      this.oButtonFlexBox = null;
      this.aAllFilterFields = [];
    };
    _proto.insertFilterField = function insertFilterField(oControl, iIndex) {
      const oFilterItemLayoutEventDelegate = {
        onBeforeRendering: function () {
          // visual filter does not need to render a label
          // hence override the getContent of the FilterItemLayout
          // and store the original getContent for later usage in the compact filters
          if (!oControl._fnGetContentCopy) {
            oControl._fnGetContentCopy = oControl.getContent;
          }
          // override getContent of FilterItemLayout
          // to add only filterField and not label
          oControl.getContent = function () {
            const aContent = [];
            aContent.push(oControl._oFilterField);
            return aContent;
          };
          oControl.removeEventDelegate(oFilterItemLayoutEventDelegate);
        }
      };
      oControl.addEventDelegate(oFilterItemLayoutEventDelegate);

      // Setting VF control for the Filterfield.
      const oVisualFilters = this.aVisualFilterFields;
      oControl.getContent().some(oInnerControl => {
        const sFFId = oInnerControl.getId();
        if (oVisualFilters[sFFId] && oInnerControl.isA("sap.ui.mdc.FilterField")) {
          oInnerControl.setContent(oVisualFilters[sFFId]);
          this.oHeaderContainer.insertContent(oControl, iIndex);
        }
      });
    };
    _proto.removeFilterField = function removeFilterField(oControl) {
      this.oHeaderContainer.removeContent(oControl);
    };
    _proto.removeAllFilterFields = function removeAllFilterFields() {
      this.aAllFilterFields = [];
      this.aVisualFilterFields = {};
      this.oHeaderContainer.removeAllContent();
    };
    _proto.getFilterFields = function getFilterFields() {
      return this.oHeaderContainer.getContent();
    };
    _proto.addButton = function addButton(oControl) {
      this.oButtonFlexBox.insertItem(oControl);
    };
    _proto.getAllButtons = function getAllButtons() {
      return this.oButtonFlexBox.getItems().reverse();
    };
    _proto.removeButton = function removeButton(oControl) {
      this.oButtonFlexBox.removeItem(oControl);
    };
    _proto.getAllFilterFields = function getAllFilterFields() {
      return this.aAllFilterFields.slice();
    };
    _proto.setAllFilterFields = function setAllFilterFields(aFilterFields, aVisualFilterFields) {
      this.aAllFilterFields = aFilterFields;
      this.aVisualFilterFields = aVisualFilterFields;
    };
    return VisualFilterContainer;
  }(IFilterContainer), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_layout", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return VisualFilterContainer;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/VisualFilterContainer", ["sap/fe/core/helpers/ClassSupport","sap/m/FlexBox","sap/m/HeaderContainer","sap/ui/core/library","sap/ui/Device","sap/ui/mdc/filterbar/IFilterContainer"],function(e,t,i,n,r,o){"use strict";var l,a,s,u,c;var f=r.system;var d=e.defineUI5Class;var p=e.aggregation;function h(e,t,i,n){if(!i)return;Object.defineProperty(e,t,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function F(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function v(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;b(e,t)}function b(e,t){b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return b(e,t)}function C(e,t,i,n,r){var o={};Object.keys(n).forEach(function(e){o[e]=n[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,n){return n(e,t,i)||i},o);if(r&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(r):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,t,o);o=null}return o}function m(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let y=(l=d("sap.fe.core.controls.filterbar.VisualFilterContainer"),a=p({type:"sap.ui.core.Control",multiple:false,visibility:"hidden"}),l(s=(u=function(e){v(r,e);function r(){var t;for(var i=arguments.length,n=new Array(i),r=0;r<i;r++){n[r]=arguments[r]}t=e.call(this,...n)||this;h(t,"_layout",c,F(t));return t}var o=r.prototype;o.init=function r(){for(var o=arguments.length,l=new Array(o),a=0;a<o;a++){l[a]=arguments[a]}e.prototype.init.call(this,...l);const s=f,u=n.Orientation,c=s.phone?u.Vertical:undefined,d=s.phone?"ColumnReverse":"Column";this.oHeaderContainer=new i({orientation:c});this.oButtonFlexBox=new t({alignItems:"End",justifyContent:"End"});this.oLayout=new t({direction:d,items:[this.oHeaderContainer,this.oButtonFlexBox]});this.aAllFilterFields=[];this.aVisualFilterFields={}};o.exit=function t(){for(var i=arguments.length,n=new Array(i),r=0;r<i;r++){n[r]=arguments[r]}e.prototype.exit.call(this,...n);const o=this.getAllFilterFields();o.forEach(function(e){e.destroy()});this.oHeaderContainer=null;this.oButtonFlexBox=null;this.aAllFilterFields=[]};o.insertFilterField=function e(t,i){const n={onBeforeRendering:function(){if(!t._fnGetContentCopy){t._fnGetContentCopy=t.getContent}t.getContent=function(){const e=[];e.push(t._oFilterField);return e};t.removeEventDelegate(n)}};t.addEventDelegate(n);const r=this.aVisualFilterFields;t.getContent().some(e=>{const n=e.getId();if(r[n]&&e.isA("sap.ui.mdc.FilterField")){e.setContent(r[n]);this.oHeaderContainer.insertContent(t,i)}})};o.removeFilterField=function e(t){this.oHeaderContainer.removeContent(t)};o.removeAllFilterFields=function e(){this.aAllFilterFields=[];this.aVisualFilterFields={};this.oHeaderContainer.removeAllContent()};o.getFilterFields=function e(){return this.oHeaderContainer.getContent()};o.addButton=function e(t){this.oButtonFlexBox.insertItem(t)};o.getAllButtons=function e(){return this.oButtonFlexBox.getItems().reverse()};o.removeButton=function e(t){this.oButtonFlexBox.removeItem(t)};o.getAllFilterFields=function e(){return this.aAllFilterFields.slice()};o.setAllFilterFields=function e(t,i){this.aAllFilterFields=t;this.aVisualFilterFields=i};return r}(o),c=C(u.prototype,"_layout",[a],{configurable:true,enumerable:true,writable:true,initializer:null}),u))||s);return y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/adapter/SelectionVariantToStateFilters-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/FilterHelper"], function (CommonUtils, BindingToolkit, DisplayModeFormatter, FilterHelper) {
  "use strict";

  var getConditions = FilterHelper.getConditions;
  var ODATA_TYPE_MAPPING = DisplayModeFormatter.ODATA_TYPE_MAPPING;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  const IGNORED_PROPERTYNAMES = ["$search", "$editState"];
  const selectionVariantToStateFilters = {
    /**
     * Get the filter bar info needed for conversion of selection variant to conditions.
     *
     * @param filterBar Filter bar
     * @returns The Filter bar info (metaModel, contextPath, use of semantic date range, all filter fields config)
     */
    getFilterBarInfoForConversion: filterBar => {
      return {
        metaModel: selectionVariantToStateFilters._getMetaModel(filterBar),
        contextPath: selectionVariantToStateFilters._getContextPath(filterBar),
        useSemanticDateRange: selectionVariantToStateFilters._checkSemanticDateRangeIsUsed(filterBar),
        filterFieldsConfig: selectionVariantToStateFilters._getFilterFieldsConfig(filterBar)
      };
    },
    /**
     * Get supported filter field properties from the filter bar.
     *
     * @param filterBar Filter bar
     * @returns Supported filter fields in filter bar.
     */
    getFilterBarSupportedFields: async filterBar => {
      await filterBar.waitForInitialization();
      return filterBar.getControlDelegate().fetchProperties(filterBar);
    },
    /**
     * Get conditions from the selection variant.
     *
     * @param selectionVariant Selection variant
     * @param filterBarInfoForConversion Filter bar info needed for conversion of selection variant to conditions
     * @param filterBarPropertyInfos Property infos of the filterbar
     * @returns Conditions after conversion of selection variant
     */
    getConditionsFromSV: function (selectionVariant, filterBarInfoForConversion, filterBarPropertyInfos) {
      const {
        contextPath
      } = filterBarInfoForConversion;
      const conditions = {};
      filterBarPropertyInfos.forEach(function (propertyMetadata) {
        if (!IGNORED_PROPERTYNAMES.includes(propertyMetadata.name)) {
          let filterPathConditions = [];
          const {
            conditionPath,
            annotationPath
          } = propertyMetadata;
          const propPath = conditionPath.replaceAll("*", "");
          const navPath = propPath.substring(0, propPath.lastIndexOf("/"));
          const propertyName = propPath.substring(propPath.lastIndexOf("/") + 1);

          // Note: Conversion parameters
          const conversionInfo = {
            propertyName,
            navPath,
            propertyContextPath: `${contextPath}${navPath}`,
            propertyMetadata,
            selectionVariant,
            filterBarInfo: filterBarInfoForConversion
          };
          if (propertyMetadata.isParameter && annotationPath) {
            // parameter
            conversionInfo.propertyContextPath = annotationPath.substring(0, annotationPath.lastIndexOf("/") + 1);
            filterPathConditions = selectionVariantToStateFilters._getConditionsForParameter(conversionInfo);
          } else if (conditionPath.includes("/")) {
            // navigation property
            filterPathConditions = selectionVariantToStateFilters._getConditionsForNavProperty(conversionInfo);
          } else {
            // normal property
            filterPathConditions = selectionVariantToStateFilters._getConditionsForProperty(conversionInfo);
          }
          if (filterPathConditions.length > 0) {
            conditions[conditionPath] = filterPathConditions;
          }
        }
      });
      return conditions;
    },
    /**
     * Get metamodel of filter bar.
     *
     * @param filterBar Filter bar
     * @returns The metamodel context
     */
    _getMetaModel: function (filterBar) {
      var _filterBar$getModel;
      return (_filterBar$getModel = filterBar.getModel()) === null || _filterBar$getModel === void 0 ? void 0 : _filterBar$getModel.getMetaModel();
    },
    /**
     * Get context path from filter bar.
     *
     * @param filterBar Filter bar
     * @returns The context path
     */
    _getContextPath: function (filterBar) {
      return filterBar.data("entityType");
    },
    /**
     * Get view data from filter bar.
     *
     * @param filterBar Filter bar
     * @returns The view data
     */
    _getViewData: function (filterBar) {
      const viewDataInstance = filterBar.getModel("viewData");
      return viewDataInstance.getData();
    },
    /**
     * Check if semantic date ranges are used in filter bar.
     *
     * @param filterBar Filter bar
     * @returns Boolean indicating semantic date range use.
     */
    _checkSemanticDateRangeIsUsed: function (filterBar) {
      return filterBar.data("useSemanticDateRange") === "true" || filterBar.data("useSemanticDateRange") === true;
    },
    /**
     * Get the filter field configuration of a property.
     *
     * @param property Filter field Path
     * @param filterFieldsConfig Manifest Configuration of filter bar
     * @returns The Filter Field Configuration
     */
    _getPropertyFilterConfigurationSetting: function (property) {
      var _filterFieldsConfig$p;
      let filterFieldsConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return filterFieldsConfig[property] ? (_filterFieldsConfig$p = filterFieldsConfig[property]) === null || _filterFieldsConfig$p === void 0 ? void 0 : _filterFieldsConfig$p.settings : undefined;
    },
    /**
     * Get the filter fields configuration from manifest.
     *
     * @param filterBar Filter bar
     * @returns The filter filters Configurations from viewData (manifest)
     */
    _getFilterFieldsConfig: filterBar => {
      const viewData = selectionVariantToStateFilters._getViewData(filterBar);
      const config = viewData.controlConfiguration;
      const filterFieldsConfig = config && config["@com.sap.vocabularies.UI.v1.SelectionFields"].filterFields;
      return filterFieldsConfig || {};
    },
    /**
     * Create filter conditions for a parameter property.
     *
     * @param conversionInfo Property info used for conversion
     * @returns The filter condtions for parameter property
     */
    _getConditionsForParameter: function (conversionInfo) {
      let conditionObjects = [];
      const {
        propertyMetadata,
        selectionVariant
      } = conversionInfo;
      const conditionPath = propertyMetadata.name;
      const selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, conditionPath, true);
      if (selectOptionName) {
        conditionObjects = selectionVariantToStateFilters._getPropertyConditions(conversionInfo, selectOptionName, true);
      }
      return conditionObjects;
    },
    /**
     * Create filter conditions for a normal property.
     *
     * @param conversionInfo Property info used for conversion
     * @returns The filter conditions for a normal property
     */
    _getConditionsForProperty: function (conversionInfo) {
      const {
        propertyMetadata,
        selectionVariant
      } = conversionInfo;
      const conditonPath = propertyMetadata.name;
      const selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, conditonPath);
      let conditionObjects = [];
      if (selectOptionName) {
        conditionObjects = selectionVariantToStateFilters._getPropertyConditions(conversionInfo, selectOptionName, false);
      }
      return conditionObjects;
    },
    /**
     * Create filter conditions from navigation properties.
     *
     * @param conversionInfo Property info used for conversion
     * @returns The filter condtions for navigation property
     */
    _getConditionsForNavProperty: function (conversionInfo) {
      const {
        filterBarInfo,
        selectionVariant,
        propertyName,
        navPath
      } = conversionInfo;
      const {
        contextPath
      } = filterBarInfo;
      let conditionObjects = [];

      // We check with '/SalesOrderManage/_Item/Name'.
      // '/SalesOrderManage/_Item' => 'SalesOrderManage._Item'
      let selectOptionPathPrefix = `${contextPath.substring(1)}${navPath}`.replaceAll("/", ".");
      let selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, propertyName, false, selectOptionPathPrefix);
      if (!selectOptionName) {
        // We check with '_Item/Name'.
        selectOptionPathPrefix = navPath.replaceAll("/", ".");
        selectOptionName = selectionVariantToStateFilters._getSelectOptionName(selectionVariant, propertyName, false, selectOptionPathPrefix);
      }
      if (selectOptionName) {
        conditionObjects = selectionVariantToStateFilters._getPropertyConditions(conversionInfo, selectOptionName, false);
      }
      return conditionObjects;
    },
    /**
     * Get the possible select option name based on priority order.
     *
     * @param selectionVariant SelectionVariant to be converted.
     * @param propertyName Metadata property name
     * @param isParameter Property is a parameter
     * @param navigationPath Navigation path to be considered
     * @returns The correct select option name of a property to fetch the select options for conversion.
     */
    _getSelectOptionName: function (selectionVariant, propertyName, isParameter, navigationPath) {
      // possible SelectOption Names based on priority.
      const possibleSelectOptionNames = [];
      const selectOptionsPropertyNames = selectionVariant.getSelectOptionsPropertyNames();
      if (isParameter) {
        // Currency ==> $Parameter.Currency
        // P_Currency ==> $Parameter.P_Currency
        possibleSelectOptionNames.push(`$Parameter.${propertyName}`);

        // Currency ==> Currency
        // P_Currency ==> P_Currency
        possibleSelectOptionNames.push(propertyName);
        if (propertyName.startsWith("P_")) {
          // P_Currency ==> $Parameter.Currency
          possibleSelectOptionNames.push(`$Parameter.${propertyName.slice(2, propertyName.length)}`);

          // P_Currency ==> Currency
          possibleSelectOptionNames.push(propertyName.slice(2, propertyName.length));
        } else {
          // Currency ==> $Parameter.P_Currency
          possibleSelectOptionNames.push(`$Parameter.P_${propertyName}`);

          // Currency ==> P_Currency
          possibleSelectOptionNames.push(`P_${propertyName}`);
        }
      } else {
        // Name => Name
        possibleSelectOptionNames.push(propertyName);
        possibleSelectOptionNames.push(`$Parameter.${propertyName}`);
        if (propertyName.startsWith("P_")) {
          // P_Name => Name
          const temp1 = propertyName.slice(2, propertyName.length);

          // Name => $Parameter.Name
          possibleSelectOptionNames.push(`$Parameter.${temp1}`);

          // Name => Name
          possibleSelectOptionNames.push(temp1);
        } else {
          // Name => P_Name
          const temp2 = `P_${propertyName}`;

          // P_Name => $Parameter.P_Name
          possibleSelectOptionNames.push(`$Parameter.${temp2}`);

          // P_Name => P_Name
          possibleSelectOptionNames.push(temp2);
        }
      }
      let selectOptionName = "";
      // Find the correct select option name based on the priority
      possibleSelectOptionNames.some(testName => {
        const pathToCheck = navigationPath ? `${navigationPath}.${testName}` : testName;
        // Name => Name
        // Name => _Item.Name (incase _Item is navigationPath)

        return selectOptionsPropertyNames.includes(pathToCheck) ? selectOptionName = pathToCheck : false;
      });
      return selectOptionName;
    },
    /**
     * Convert select options to property conditions.
     *
     * @param conversionInfo Property info used for conversion
     * @param selectOptionName Select option name
     * @param isParameter Boolean which determines if a property is parameterized
     * @returns The conditions of a property for filter bar
     */
    _getPropertyConditions: function (conversionInfo, selectOptionName, isParameter) {
      const {
        filterBarInfo,
        propertyMetadata,
        selectionVariant,
        propertyContextPath,
        propertyName
      } = conversionInfo;
      const selectOptions = selectionVariant.getSelectOption(selectOptionName);
      const {
        metaModel
      } = filterBarInfo;
      let conditionObjects = [];
      if (selectOptions !== null && selectOptions !== void 0 && selectOptions.length) {
        const semanticDateOperators = selectionVariantToStateFilters._getSemanticDateOperators(conversionInfo, isParameter);
        const propertyEntitySetPath = propertyContextPath.substring(0, propertyContextPath.length - 1);
        const validOperators = isParameter ? ["EQ"] : CommonUtils.getOperatorsForProperty(propertyName, propertyEntitySetPath, metaModel);

        // multiple select options => multiple conditions
        conditionObjects = this._getConditionsFromSelectOptions(selectOptions, propertyMetadata, validOperators, semanticDateOperators, isParameter);
      }
      return conditionObjects;
    },
    /**
     * Fetch semantic date operators.
     *
     * @param conversionInfo Object which is used for conversion
     * @param isParameter Boolean which determines if a property is parameterized
     * @returns The semantic date operators supported for a property
     */
    _getSemanticDateOperators: function (conversionInfo, isParameter) {
      const {
        filterBarInfo,
        propertyMetadata,
        propertyName,
        propertyContextPath
      } = conversionInfo;
      const conditionPath = propertyMetadata.name;
      let semanticDateOperators = [];
      let settings;
      const {
        useSemanticDateRange,
        filterFieldsConfig,
        metaModel
      } = filterBarInfo;
      if (useSemanticDateRange) {
        if (isParameter) {
          semanticDateOperators = ["EQ"];
        } else {
          const propertyEntitySetPath = propertyContextPath.substring(0, propertyContextPath.length - 1);
          settings = selectionVariantToStateFilters._getPropertyFilterConfigurationSetting(conditionPath, filterFieldsConfig);
          semanticDateOperators = CommonUtils.getOperatorsForProperty(propertyName, propertyEntitySetPath, metaModel, ODATA_TYPE_MAPPING[propertyMetadata.dataType], useSemanticDateRange, settings);
        }
      }
      return semanticDateOperators;
    },
    /**
     * Get the filter conditions from selection options.
     *
     * @param selectOptions Select options array
     * @param propertyMetadata Property metadata information
     * @param validOperators All valid operators
     * @param semanticDateOperators Semantic date operators
     * @param isParameter Boolean which determines if a property is parameterized
     * @returns Converted filter conditions
     */
    _getConditionsFromSelectOptions: function (selectOptions, propertyMetadata, validOperators, semanticDateOperators, isParameter) {
      let conditionObjects = [];
      // Create conditions for all the selectOptions of the property
      if (selectOptions.length) {
        conditionObjects = isParameter ? selectionVariantToStateFilters._addConditionFromSelectOption(propertyMetadata, validOperators, semanticDateOperators, conditionObjects, selectOptions[0]) : selectOptions.reduce(selectionVariantToStateFilters._addConditionFromSelectOption.bind(null, propertyMetadata, validOperators, semanticDateOperators), conditionObjects);
      }
      return conditionObjects;
    },
    /**
     * Cumulatively add select option to condition.
     *
     * @param propertyMetadata Property metadata information
     * @param validOperators Operators for all the data types
     * @param semanticDateOperators Operators for the Date type
     * @param cumulativeConditions Filter conditions
     * @param selectOption Selectoption of selection variant
     * @returns The filter conditions
     */
    _addConditionFromSelectOption: function (propertyMetadata, validOperators, semanticDateOperators, cumulativeConditions, selectOption) {
      const validType = {
        type: ""
      };
      validType.type = selectionVariantToStateFilters._getEdmType(propertyMetadata.typeConfig.className);
      const condition = getConditions(selectOption, validType);
      if (selectOption.SemanticDates && semanticDateOperators.length && semanticDateOperators.includes(selectOption.SemanticDates.operator)) {
        const semanticDates = selectionVariantToStateFilters._addSemanticDatesToConditions(selectOption.SemanticDates);
        if (Object.keys(semanticDates).length > 0) {
          cumulativeConditions.push(semanticDates);
        }
      } else if (condition) {
        if (validOperators.length === 0 || validOperators.includes(condition.operator)) {
          cumulativeConditions.push(condition);
        }
      }
      return cumulativeConditions;
    },
    /**
     * Create filter conditions for a parameter property.
     *
     * @param semanticDates Semantic date infomation
     * @returns The filter conditions containing semantic dates
     */
    _addSemanticDatesToConditions: semanticDates => {
      const values = [];
      if (semanticDates.high) {
        values.push(semanticDates.high);
      }
      if (semanticDates.low) {
        values.push(semanticDates.low);
      }
      return {
        values: values,
        operator: semanticDates.operator,
        isEmpty: undefined
      };
    },
    /**
     * Get EDM type from data type.
     *
     * @param dataType V4 model data type
     * @returns EDM type equivalent of data type
     */
    _getEdmType: dataType => {
      const TYPE_EDM_MAPPING = Object.fromEntries(Object.entries(EDM_TYPE_MAPPING).map(_ref => {
        let [k, v] = _ref;
        return [v.type, k];
      }));
      return TYPE_EDM_MAPPING[dataType];
    }
  };
  return selectionVariantToStateFilters;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/adapter/SelectionVariantToStateFilters", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DisplayModeFormatter","sap/fe/core/templating/FilterHelper"],function(t,e,n,o){"use strict";var r=o.getConditions;var i=n.ODATA_TYPE_MAPPING;var a=e.EDM_TYPE_MAPPING;const s=["$search","$editState"];const l={getFilterBarInfoForConversion:t=>({metaModel:l._getMetaModel(t),contextPath:l._getContextPath(t),useSemanticDateRange:l._checkSemanticDateRangeIsUsed(t),filterFieldsConfig:l._getFilterFieldsConfig(t)}),getFilterBarSupportedFields:async t=>{await t.waitForInitialization();return t.getControlDelegate().fetchProperties(t)},getConditionsFromSV:function(t,e,n){const{contextPath:o}=e;const r={};n.forEach(function(n){if(!s.includes(n.name)){let i=[];const{conditionPath:a,annotationPath:s}=n;const c=a.replaceAll("*","");const p=c.substring(0,c.lastIndexOf("/"));const u=c.substring(c.lastIndexOf("/")+1);const g={propertyName:u,navPath:p,propertyContextPath:`${o}${p}`,propertyMetadata:n,selectionVariant:t,filterBarInfo:e};if(n.isParameter&&s){g.propertyContextPath=s.substring(0,s.lastIndexOf("/")+1);i=l._getConditionsForParameter(g)}else if(a.includes("/")){i=l._getConditionsForNavProperty(g)}else{i=l._getConditionsForProperty(g)}if(i.length>0){r[a]=i}}});return r},_getMetaModel:function(t){var e;return(e=t.getModel())===null||e===void 0?void 0:e.getMetaModel()},_getContextPath:function(t){return t.data("entityType")},_getViewData:function(t){const e=t.getModel("viewData");return e.getData()},_checkSemanticDateRangeIsUsed:function(t){return t.data("useSemanticDateRange")==="true"||t.data("useSemanticDateRange")===true},_getPropertyFilterConfigurationSetting:function(t){var e;let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return n[t]?(e=n[t])===null||e===void 0?void 0:e.settings:undefined},_getFilterFieldsConfig:t=>{const e=l._getViewData(t);const n=e.controlConfiguration;const o=n&&n["@com.sap.vocabularies.UI.v1.SelectionFields"].filterFields;return o||{}},_getConditionsForParameter:function(t){let e=[];const{propertyMetadata:n,selectionVariant:o}=t;const r=n.name;const i=l._getSelectOptionName(o,r,true);if(i){e=l._getPropertyConditions(t,i,true)}return e},_getConditionsForProperty:function(t){const{propertyMetadata:e,selectionVariant:n}=t;const o=e.name;const r=l._getSelectOptionName(n,o);let i=[];if(r){i=l._getPropertyConditions(t,r,false)}return i},_getConditionsForNavProperty:function(t){const{filterBarInfo:e,selectionVariant:n,propertyName:o,navPath:r}=t;const{contextPath:i}=e;let a=[];let s=`${i.substring(1)}${r}`.replaceAll("/",".");let c=l._getSelectOptionName(n,o,false,s);if(!c){s=r.replaceAll("/",".");c=l._getSelectOptionName(n,o,false,s)}if(c){a=l._getPropertyConditions(t,c,false)}return a},_getSelectOptionName:function(t,e,n,o){const r=[];const i=t.getSelectOptionsPropertyNames();if(n){r.push(`$Parameter.${e}`);r.push(e);if(e.startsWith("P_")){r.push(`$Parameter.${e.slice(2,e.length)}`);r.push(e.slice(2,e.length))}else{r.push(`$Parameter.P_${e}`);r.push(`P_${e}`)}}else{r.push(e);r.push(`$Parameter.${e}`);if(e.startsWith("P_")){const t=e.slice(2,e.length);r.push(`$Parameter.${t}`);r.push(t)}else{const t=`P_${e}`;r.push(`$Parameter.${t}`);r.push(t)}}let a="";r.some(t=>{const e=o?`${o}.${t}`:t;return i.includes(e)?a=e:false});return a},_getPropertyConditions:function(e,n,o){const{filterBarInfo:r,propertyMetadata:i,selectionVariant:a,propertyContextPath:s,propertyName:c}=e;const p=a.getSelectOption(n);const{metaModel:u}=r;let g=[];if(p!==null&&p!==void 0&&p.length){const n=l._getSemanticDateOperators(e,o);const r=s.substring(0,s.length-1);const a=o?["EQ"]:t.getOperatorsForProperty(c,r,u);g=this._getConditionsFromSelectOptions(p,i,a,n,o)}return g},_getSemanticDateOperators:function(e,n){const{filterBarInfo:o,propertyMetadata:r,propertyName:a,propertyContextPath:s}=e;const c=r.name;let p=[];let u;const{useSemanticDateRange:g,filterFieldsConfig:d,metaModel:f}=o;if(g){if(n){p=["EQ"]}else{const e=s.substring(0,s.length-1);u=l._getPropertyFilterConfigurationSetting(c,d);p=t.getOperatorsForProperty(a,e,f,i[r.dataType],g,u)}}return p},_getConditionsFromSelectOptions:function(t,e,n,o,r){let i=[];if(t.length){i=r?l._addConditionFromSelectOption(e,n,o,i,t[0]):t.reduce(l._addConditionFromSelectOption.bind(null,e,n,o),i)}return i},_addConditionFromSelectOption:function(t,e,n,o,i){const a={type:""};a.type=l._getEdmType(t.typeConfig.className);const s=r(i,a);if(i.SemanticDates&&n.length&&n.includes(i.SemanticDates.operator)){const t=l._addSemanticDatesToConditions(i.SemanticDates);if(Object.keys(t).length>0){o.push(t)}}else if(s){if(e.length===0||e.includes(s.operator)){o.push(s)}}return o},_addSemanticDatesToConditions:t=>{const e=[];if(t.high){e.push(t.high)}if(t.low){e.push(t.low)}return{values:e,operator:t.operator,isEmpty:undefined}},_getEdmType:t=>{const e=Object.fromEntries(Object.entries(a).map(t=>{let[e,n]=t;return[n.type,e]}));return e[t]}};return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/utils/VisualFilterUtils-dbg", ["sap/base/Log", "sap/fe/core/templating/FilterHelper", "sap/ui/core/format/NumberFormat", "sap/ui/mdc/condition/Condition", "sap/ui/model/odata/type/DateTimeOffset"], function (Log, FilterHelper, NumberFormat, Condition, DateTimeOffset) {
  "use strict";

  var getTypeCompliantValue = FilterHelper.getTypeCompliantValue;
  var getRangeProperty = FilterHelper.getRangeProperty;
  const VisualFilterUtils = {
    /**
     * Applies the median scale to the chart data.
     *
     * @param oInteractiveChart InteractiveChart in the VisualFilter control
     * @param oView Instance of the view
     * @param sVFId VisualFilter control ID
     * @param sInfoPath Internal model context path to store info.
     */
    applyMedianScaleToChartData: function (oInteractiveChart, oView, sVFId, sInfoPath) {
      const oData = [];
      const sMeasure = oInteractiveChart.data("measure");
      const oInternalModelContext = oView.getBindingContext("internal");
      const aAggregation = oInteractiveChart.getPoints && oInteractiveChart.getPoints() || oInteractiveChart.getBars && oInteractiveChart.getBars() || oInteractiveChart.getSegments && oInteractiveChart.getSegments();
      for (let i = 0; i < aAggregation.length; i++) {
        oData.push(aAggregation[i].getBindingContext().getObject());
      }
      const scaleFactor = this._getMedianScaleFactor(oData, sMeasure);
      if (scaleFactor && scaleFactor.iShortRefNumber && scaleFactor.scale) {
        oInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, scaleFactor.scale);
        oInternalModelContext.setProperty(`scalefactorNumber/${sInfoPath}`, scaleFactor.iShortRefNumber);
      } else {
        oInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, "");
        oInternalModelContext.setProperty(`scalefactorNumber/${sInfoPath}`, "");
        const oScaleTitle = oView.byId(`${sVFId}::ScaleUoMTitle`);
        const oMeasureDimensionTitle = oView.byId(`${sVFId}::MeasureDimensionTitle`);
        const sText = oScaleTitle.getText();
        if (sText === " | ") {
          oScaleTitle.setText("");
          oMeasureDimensionTitle.setTooltip(oMeasureDimensionTitle.getText());
        }
      }
    },
    /**
     * Returns the median scale factor.
     *
     * @param oData VisualFilter data
     * @param sMeasureField Path of the measure
     * @returns Object containing scale and iShortRefNumber
     */
    _getMedianScaleFactor: function (oData, sMeasureField) {
      let i;
      let scaleFactor;
      oData.sort(function (a, b) {
        if (Number(a[sMeasureField]) < Number(b[sMeasureField])) {
          return -1;
        }
        if (Number(a[sMeasureField]) > Number(b[sMeasureField])) {
          return 1;
        }
        return 0;
      });
      if (oData.length > 0) {
        // get median index
        const iMid = oData.length / 2,
          // get mid of array
          // if iMid is whole number, array length is even, calculate median
          // if iMid is not whole number, array length is odd, take median as iMid - 1
          iMedian = iMid % 1 === 0 ? (parseFloat(oData[iMid - 1][sMeasureField]) + parseFloat(oData[iMid][sMeasureField])) / 2 : parseFloat(oData[Math.floor(iMid)][sMeasureField]),
          // get scale factor on median
          val = iMedian;
        for (i = 0; i < 14; i++) {
          scaleFactor = Math.pow(10, i);
          if (Math.round(Math.abs(val) / scaleFactor) < 10) {
            break;
          }
        }
      }
      const fixedInteger = NumberFormat.getIntegerInstance({
        style: "short",
        showScale: false,
        shortRefNumber: scaleFactor
      });

      // apply scale factor to other values and check
      for (i = 0; i < oData.length; i++) {
        const aData = oData[i],
          sScaledValue = fixedInteger.format(aData[sMeasureField]),
          aScaledValueParts = sScaledValue.split(".");
        // if scaled value has only 0 before decimal or 0 after decimal (example: 0.02)
        // then ignore this scale factor else proceed with this scale factor
        // if scaled value divided by 1000 is >= 1000 then also ignore scale factor
        if (!aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0 || aScaledValueParts[1] && parseInt(aScaledValueParts[0], 10) === 0 && aScaledValueParts[1].indexOf("0") === 0 || sScaledValue / 1000 >= 1000) {
          scaleFactor = undefined;
          break;
        }
      }
      return {
        iShortRefNumber: scaleFactor,
        scale: scaleFactor ? fixedInteger.getScale() : ""
      };
    },
    /**
     * Returns the formatted number according to the rules of VisualChartFilters.
     *
     * @param value Value which needs to be formatted
     * @param scaleFactor ScaleFactor to which the value needs to be scaled
     * @param numberOfFractionalDigits NumberOfFractionalDigits digits in the decimals according to scale
     * @param currency Currency code
     * @returns The formatted number
     */
    getFormattedNumber: function (value, scaleFactor, numberOfFractionalDigits, currency) {
      let fixedInteger;
      value = typeof value === "string" ? Number(value.replace(/,/g, "")) : value;
      if (currency) {
        const currencyFormat = NumberFormat.getCurrencyInstance({
          showMeasure: false
        });
        return currencyFormat.format(parseFloat(value), currency);
        // parseFloat(value) is required otherwise -ve value are wrongly rounded off
        // Example: "-1.9" rounds off to -1 instead of -2. however -1.9 rounds off to -2
      } else if (scaleFactor) {
        fixedInteger = NumberFormat.getFloatInstance({
          style: "short",
          showScale: false,
          shortRefNumber: scaleFactor,
          shortDecimals: numberOfFractionalDigits
        });
        return fixedInteger.format(parseFloat(value));
      } else {
        fixedInteger = NumberFormat.getFloatInstance({
          decimals: numberOfFractionalDigits
        });
        return fixedInteger.format(parseFloat(value));
      }
    },
    /**
     * Applies the UOM to the title of the visual filter control.
     *
     * @param oInteractiveChart InteractiveChart in the VisualFilter control
     * @param oContextData Data of the VisualFilter
     * @param oView Instance of the view
     * @param sInfoPath Internal model context path to store info.
     */
    applyUOMToTitle: function (oInteractiveChart, oContextData, oView, sInfoPath) {
      const vUOM = oInteractiveChart.data("uom");
      let sUOM;
      let sCurrency;
      if (vUOM && vUOM["ISOCurrency"]) {
        sUOM = vUOM["ISOCurrency"];
        sCurrency = sUOM.$Path ? oContextData[sUOM.$Path] : sUOM;
      } else if (vUOM && vUOM["Unit"]) {
        sUOM = vUOM["Unit"];
      }
      if (sUOM) {
        const sUOMValue = sUOM.$Path ? oContextData[sUOM.$Path] : sUOM;
        const oInternalModelContext = oView.getBindingContext("internal");
        oInternalModelContext.setProperty(`uom/${sInfoPath}`, sUOMValue);
        if (sCurrency) {
          oInternalModelContext.setProperty(`currency/${sInfoPath}`, sUOMValue);
        }
      }
    },
    /**
     * Updates the scale factor in the title of the visual filter.
     *
     * @param oInteractiveChart InteractiveChart in the VisualFilter control
     * @param oView Instance of the view
     * @param sVFId VisualFilter control ID
     * @param sInfoPath Internal model context path to store info.
     */
    updateChartScaleFactorTitle: function (oInteractiveChart, oView, sVFId, sInfoPath) {
      if (!oInteractiveChart.data("scalefactor")) {
        this.applyMedianScaleToChartData(oInteractiveChart, oView, sVFId, sInfoPath);
      } else {
        const fixedInteger = NumberFormat.getIntegerInstance({
          style: "short",
          showScale: false,
          shortRefNumber: oInteractiveChart.data("scalefactor")
        });
        const oInternalModelContext = oView.getBindingContext("internal");
        const scale = fixedInteger.getScale() ? fixedInteger.getScale() : "";
        oInternalModelContext.setProperty(`scalefactor/${sInfoPath}`, scale);
      }
    },
    /**
     *
     * @param s18nMessageTitle Text of the error message title.
     * @param s18nMessage Text of the error message description.
     * @param sInfoPath Internal model context path to store info.
     * @param oView Instance of the view.
     */
    applyErrorMessageAndTitle: function (s18nMessageTitle, s18nMessage, sInfoPath, oView) {
      const oInternalModelContext = oView.getBindingContext("internal");
      oInternalModelContext.setProperty(sInfoPath, {});
      oInternalModelContext.setProperty(sInfoPath, {
        errorMessageTitle: s18nMessageTitle,
        errorMessage: s18nMessage,
        showError: true
      });
    },
    /**
     * Checks if multiple units are present.
     *
     * @param oContexts Contexts of the VisualFilter
     * @param sUnitfield The path of the unit field
     * @returns Returns if multiple units are configured or not
     */
    checkMulitUnit: function (oContexts, sUnitfield) {
      const aData = [];
      if (oContexts && sUnitfield) {
        for (let i = 0; i < oContexts.length; i++) {
          const aContextData = oContexts[i] && oContexts[i].getObject();
          aData.push(aContextData[sUnitfield]);
        }
      }
      return !!aData.reduce(function (data, key) {
        return data === key ? data : NaN;
      });
    },
    /**
     * Sets an error message if multiple UOM are present.
     *
     * @param oData Data of the VisualFilter control
     * @param oInteractiveChart InteractiveChart in the VisualFilter control
     * @param sInfoPath Internal model context path to store info.
     * @param oResourceBundle The resource bundle
     * @param oView Instance of the view
     */
    setMultiUOMMessage: function (oData, oInteractiveChart, sInfoPath, oResourceBundle, oView) {
      const vUOM = oInteractiveChart.data("uom");
      const sIsCurrency = vUOM && vUOM["ISOCurrency"] && vUOM["ISOCurrency"].$Path;
      const sIsUnit = vUOM && vUOM["Unit"] && vUOM["Unit"].$Path;
      const sUnitfield = sIsCurrency || sIsUnit;
      let s18nMessageTitle, s18nMessage;
      if (sUnitfield) {
        if (!this.checkMulitUnit(oData, sUnitfield)) {
          if (sIsCurrency) {
            s18nMessageTitle = oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");
            s18nMessage = oResourceBundle.getText("M_VISUAL_FILTERS_MULTIPLE_CURRENCY", sUnitfield);
            this.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);
            Log.warning(`Filter is set for multiple Currency for${sUnitfield}`);
          } else if (sIsUnit) {
            s18nMessageTitle = oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");
            s18nMessage = oResourceBundle.getText("M_VISUAL_FILTERS_MULTIPLE_UNIT", sUnitfield);
            this.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);
            Log.warning(`Filter is set for multiple UOMs for${sUnitfield}`);
          }
        }
      }
    },
    /**
     * Sets an error message if response data is empty.
     *
     * @param sInfoPath Internal model context path to store info.
     * @param oResourceBundle The resource bundle
     * @param oView Instance of the view
     */
    setNoDataMessage: function (sInfoPath, oResourceBundle, oView) {
      const s18nMessageTitle = oResourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");
      const s18nMessage = oResourceBundle.getText("M_VISUAL_FILTER_NO_DATA_TEXT");
      this.applyErrorMessageAndTitle(s18nMessageTitle, s18nMessage, sInfoPath, oView);
    },
    convertFilterCondions: function (oFilterConditions) {
      const oConvertedConditions = {};
      Object.keys(oFilterConditions).forEach(function (sKey) {
        const aConvertedConditions = [];
        const aConditions = oFilterConditions[sKey];
        for (let i = 0; i < aConditions.length; i++) {
          const values = aConditions[i].value2 ? [aConditions[i].value1, aConditions[i].value2] : [aConditions[i].value1];
          aConvertedConditions.push(Condition.createCondition(aConditions[i].operator, values, null, null, "Validated"));
        }
        if (aConvertedConditions.length) {
          oConvertedConditions[sKey] = aConvertedConditions;
        }
      });
      return oConvertedConditions;
    },
    getCustomConditions: function (Range, oValidProperty, sPropertyName) {
      let value1, value2;
      if (oValidProperty.$Type === "Edm.DateTimeOffset") {
        value1 = this._parseDateTime(getTypeCompliantValue(this._formatDateTime(Range.Low), oValidProperty.$Type));
        value2 = Range.High ? this._parseDateTime(getTypeCompliantValue(this._formatDateTime(Range.High), oValidProperty.$Type)) : null;
      } else {
        value1 = Range.Low;
        value2 = Range.High ? Range.High : null;
      }
      return {
        operator: Range.Option ? getRangeProperty(Range.Option.$EnumMember || Range.Option) : null,
        value1: value1,
        value2: value2,
        path: sPropertyName
      };
    },
    _parseDateTime: function (sValue) {
      return this._getDateTimeTypeInstance().parseValue(sValue, "string");
    },
    _formatDateTime: function (sValue) {
      return this._getDateTimeTypeInstance().formatValue(sValue, "string");
    },
    _getDateTimeTypeInstance: function () {
      return new DateTimeOffset({
        pattern: "yyyy-MM-ddTHH:mm:ssZ",
        calendarType: "Gregorian"
      }, {
        V4: true
      });
    },
    /**
     * Get error info when required inParameters or required filters are not available.
     *
     * @function
     * @name getErrorInfoForNoInitialOverlay
     * @param notMatchedConditions Property names(inParameters or required filters) for which values are not available .
     * @param resourceBundle ResourceBundle for translated texts.
     * @param entitySetPath EntitySet Path for property label annotation.
     * @param metaModel Default metamodel.
     * @returns Error info containing texts for title and message.
     */
    getErrorInfoForNoInitialOverlay: function (notMatchedConditions, resourceBundle, entitySetPath, metaModel) {
      let ret;
      if (notMatchedConditions.length > 1) {
        ret = {
          showError: true,
          errorMessageTitle: resourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
          errorMessage: resourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF")
        };
      } else if (notMatchedConditions.length === 1) {
        const label = metaModel.getObject(`${entitySetPath}/${notMatchedConditions[0]}@com.sap.vocabularies.Common.v1.Label`) || notMatchedConditions[0];
        ret = {
          showError: true,
          errorMessageTitle: resourceBundle.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),
          errorMessage: resourceBundle.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF", [label])
        };
      }
      return ret;
    }
  };
  return VisualFilterUtils;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/filterbar/utils/VisualFilterUtils", ["sap/base/Log","sap/fe/core/templating/FilterHelper","sap/ui/core/format/NumberFormat","sap/ui/mdc/condition/Condition","sap/ui/model/odata/type/DateTimeOffset"],function(e,t,r,n,a){"use strict";var o=t.getTypeCompliantValue;var s=t.getRangeProperty;const i={applyMedianScaleToChartData:function(e,t,r,n){const a=[];const o=e.data("measure");const s=t.getBindingContext("internal");const i=e.getPoints&&e.getPoints()||e.getBars&&e.getBars()||e.getSegments&&e.getSegments();for(let e=0;e<i.length;e++){a.push(i[e].getBindingContext().getObject())}const l=this._getMedianScaleFactor(a,o);if(l&&l.iShortRefNumber&&l.scale){s.setProperty(`scalefactor/${n}`,l.scale);s.setProperty(`scalefactorNumber/${n}`,l.iShortRefNumber)}else{s.setProperty(`scalefactor/${n}`,"");s.setProperty(`scalefactorNumber/${n}`,"");const e=t.byId(`${r}::ScaleUoMTitle`);const a=t.byId(`${r}::MeasureDimensionTitle`);const o=e.getText();if(o===" | "){e.setText("");a.setTooltip(a.getText())}}},_getMedianScaleFactor:function(e,t){let n;let a;e.sort(function(e,r){if(Number(e[t])<Number(r[t])){return-1}if(Number(e[t])>Number(r[t])){return 1}return 0});if(e.length>0){const r=e.length/2,o=r%1===0?(parseFloat(e[r-1][t])+parseFloat(e[r][t]))/2:parseFloat(e[Math.floor(r)][t]),s=o;for(n=0;n<14;n++){a=Math.pow(10,n);if(Math.round(Math.abs(s)/a)<10){break}}}const o=r.getIntegerInstance({style:"short",showScale:false,shortRefNumber:a});for(n=0;n<e.length;n++){const r=e[n],s=o.format(r[t]),i=s.split(".");if(!i[1]&&parseInt(i[0],10)===0||i[1]&&parseInt(i[0],10)===0&&i[1].indexOf("0")===0||s/1e3>=1e3){a=undefined;break}}return{iShortRefNumber:a,scale:a?o.getScale():""}},getFormattedNumber:function(e,t,n,a){let o;e=typeof e==="string"?Number(e.replace(/,/g,"")):e;if(a){const t=r.getCurrencyInstance({showMeasure:false});return t.format(parseFloat(e),a)}else if(t){o=r.getFloatInstance({style:"short",showScale:false,shortRefNumber:t,shortDecimals:n});return o.format(parseFloat(e))}else{o=r.getFloatInstance({decimals:n});return o.format(parseFloat(e))}},applyUOMToTitle:function(e,t,r,n){const a=e.data("uom");let o;let s;if(a&&a["ISOCurrency"]){o=a["ISOCurrency"];s=o.$Path?t[o.$Path]:o}else if(a&&a["Unit"]){o=a["Unit"]}if(o){const e=o.$Path?t[o.$Path]:o;const a=r.getBindingContext("internal");a.setProperty(`uom/${n}`,e);if(s){a.setProperty(`currency/${n}`,e)}}},updateChartScaleFactorTitle:function(e,t,n,a){if(!e.data("scalefactor")){this.applyMedianScaleToChartData(e,t,n,a)}else{const n=r.getIntegerInstance({style:"short",showScale:false,shortRefNumber:e.data("scalefactor")});const o=t.getBindingContext("internal");const s=n.getScale()?n.getScale():"";o.setProperty(`scalefactor/${a}`,s)}},applyErrorMessageAndTitle:function(e,t,r,n){const a=n.getBindingContext("internal");a.setProperty(r,{});a.setProperty(r,{errorMessageTitle:e,errorMessage:t,showError:true})},checkMulitUnit:function(e,t){const r=[];if(e&&t){for(let n=0;n<e.length;n++){const a=e[n]&&e[n].getObject();r.push(a[t])}}return!!r.reduce(function(e,t){return e===t?e:NaN})},setMultiUOMMessage:function(t,r,n,a,o){const s=r.data("uom");const i=s&&s["ISOCurrency"]&&s["ISOCurrency"].$Path;const l=s&&s["Unit"]&&s["Unit"].$Path;const c=i||l;let u,f;if(c){if(!this.checkMulitUnit(t,c)){if(i){u=a.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");f=a.getText("M_VISUAL_FILTERS_MULTIPLE_CURRENCY",c);this.applyErrorMessageAndTitle(u,f,n,o);e.warning(`Filter is set for multiple Currency for${c}`)}else if(l){u=a.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");f=a.getText("M_VISUAL_FILTERS_MULTIPLE_UNIT",c);this.applyErrorMessageAndTitle(u,f,n,o);e.warning(`Filter is set for multiple UOMs for${c}`)}}}},setNoDataMessage:function(e,t,r){const n=t.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE");const a=t.getText("M_VISUAL_FILTER_NO_DATA_TEXT");this.applyErrorMessageAndTitle(n,a,e,r)},convertFilterCondions:function(e){const t={};Object.keys(e).forEach(function(r){const a=[];const o=e[r];for(let e=0;e<o.length;e++){const t=o[e].value2?[o[e].value1,o[e].value2]:[o[e].value1];a.push(n.createCondition(o[e].operator,t,null,null,"Validated"))}if(a.length){t[r]=a}});return t},getCustomConditions:function(e,t,r){let n,a;if(t.$Type==="Edm.DateTimeOffset"){n=this._parseDateTime(o(this._formatDateTime(e.Low),t.$Type));a=e.High?this._parseDateTime(o(this._formatDateTime(e.High),t.$Type)):null}else{n=e.Low;a=e.High?e.High:null}return{operator:e.Option?s(e.Option.$EnumMember||e.Option):null,value1:n,value2:a,path:r}},_parseDateTime:function(e){return this._getDateTimeTypeInstance().parseValue(e,"string")},_formatDateTime:function(e){return this._getDateTimeTypeInstance().formatValue(e,"string")},_getDateTimeTypeInstance:function(){return new a({pattern:"yyyy-MM-ddTHH:mm:ssZ",calendarType:"Gregorian"},{V4:true})},getErrorInfoForNoInitialOverlay:function(e,t,r,n){let a;if(e.length>1){a={showError:true,errorMessageTitle:t.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:t.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_MULTIPLEVF")}}else if(e.length===1){const o=n.getObject(`${r}/${e[0]}@com.sap.vocabularies.Common.v1.Label`)||e[0];a={showError:true,errorMessageTitle:t.getText("M_VISUAL_FILTERS_ERROR_MESSAGE_TITLE"),errorMessage:t.getText("M_VISUAL_FILTERS_PROVIDE_FILTER_VAL_SINGLEVF",[o])}}return a}};return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/massEdit/MassEditHandlers-dbg", ["sap/base/Log", "sap/fe/core/helpers/ModelHelper", "sap/fe/macros/internal/valuehelp/ValueListHelper", "sap/ui/core/Core"], function (Log, ModelHelper, ValueListHelper, Core) {
  "use strict";

  const MassEditHandlers = {
    /**
     * Called for property change in the transient context.
     *
     * @function
     * @param newValue New value of the property.
     * @param dataProperty Final context returned after the paginator action
     * @param mdcFieldId Final context returned after the paginator action
     */
    contextPropertyChange: function (newValue, dataProperty, mdcFieldId) {
      // Called for
      // 1. Out Parameters.
      // 2. Transient context property change.

      const source = Core.byId(mdcFieldId);
      const transCtx = source && source.getBindingContext();
      const fieldInfoModel = source && source.getModel("fieldsInfo");
      const values = fieldInfoModel.getProperty(`/values/${dataProperty}`) || fieldInfoModel.getProperty(`/unitData/${dataProperty}`) || [];
      if (transCtx && (values.inputType === "InputWithValueHelp" || values.inputType === "InputWithUnit") && !values.valueListInfo) {
        MassEditHandlers._setValueListInfo(transCtx, source, fieldInfoModel, dataProperty);
      }
      const isDialogOpen = fieldInfoModel && fieldInfoModel.getProperty("/isOpen");
      if (!isDialogOpen || !source.getVisible()) {
        return;
      }
      MassEditHandlers._updateSelectKey(source, dataProperty, newValue);
    },
    /**
     * Called for change in the MDC field.
     * This is called on selection done through VHD.
     * This is not called on change of the dropdown as we are using a custom MassEditSelect control and not general Select.
     *
     * @function
     * @param event Event object for change.
     * @param propertyName Property path.
     */
    handleMDCFieldChange: function (event, propertyName) {
      // Called for
      // 1. VHD property change.

      const source = event && event.getSource();
      const changePromise = event && event.getParameter("promise");
      const comboBox = source.getContent();
      if (!comboBox || !propertyName) {
        return;
      }
      changePromise.then(MassEditHandlers._updateSelectKeyForMDCFieldChange.bind(MassEditHandlers, source, propertyName)).catch(err => {
        Log.warning(`VHD selection couldn't be populated in the mass edit field.${err}`);
      });
    },
    /**
     * Called for selection change through the drop down.
     *
     * @function
     * @param event Event object for change.
     */
    handleSelectionChange: function (event) {
      // Called for Manual selection from dropdown(comboBox or select)
      // 1. VHD select.
      // 2. Any value change in the control.

      const source = event && event.getSource();
      const key = source.getSelectedKey();
      const params = source && key && key.split("/");
      let propertyName;
      if (params[0] === "UseValueHelpValue") {
        const prevItem = event.getParameter("previousSelectedItem");
        const selectKey = prevItem.getKey();
        propertyName = params.slice(1).join("/");
        MassEditHandlers._onVHSelect(source, propertyName, selectKey);
        return;
      }
      const fieldInfoModel = source && source.getModel("fieldsInfo");
      propertyName = MassEditHandlers._getPropertyNameFromKey(key);
      MassEditHandlers._updateSuggestionForFieldsWithInParameters(fieldInfoModel, propertyName, key.startsWith("Default/") || key.startsWith("ClearFieldValue/"), true);
      MassEditHandlers._updateSuggestionForFieldsWithOutParameters(fieldInfoModel, propertyName, key.startsWith("Default/") || key.startsWith("ClearFieldValue/"), false);
      MassEditHandlers._updateResults(source, params, true);
    },
    /**
     * Update selections to results and the suggests in drop downs.
     *
     * @function
     * @param source MDC field that was changed.
     * @param propertyName Property path.
     * @param value New value.
     */
    _updateSelectKeyForMDCFieldChange: function (source, propertyName, value) {
      const transCtx = source && source.getBindingContext();
      const fieldInfoModel = source && source.getModel("fieldsInfo");
      const values = fieldInfoModel.getProperty(`/values/${propertyName}`) || fieldInfoModel.getProperty(`/unitData/${propertyName}`) || [];
      if (transCtx && (values.inputType === "InputWithValueHelp" || values.inputType === "InputWithUnit") && !values.valueListInfo) {
        MassEditHandlers._setValueListInfo(transCtx, source, fieldInfoModel, propertyName);
      }
      MassEditHandlers._updateSuggestionForFieldsWithOutParameters(fieldInfoModel, propertyName, false, true);
      MassEditHandlers._updateSuggestionForFieldsWithInParameters(fieldInfoModel, propertyName, false, true);
      const formattedValue = source.getFormFormattedValue();
      MassEditHandlers._updateSelectKey(source, propertyName, value, formattedValue);
    },
    /**
     * Update suggests for all drop downs with InParameter as the propertyName.
     *
     * @function
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param propertyName Property path.
     * @param resetValues Should the values be reset to original state.
     * @param keepExistingSelection Should the existing selection before update remain.
     */
    _updateSuggestionForFieldsWithInParameters: function (fieldInfoModel, propertyName, resetValues, keepExistingSelection) {
      const values = fieldInfoModel.getProperty("/values");
      const unitData = fieldInfoModel.getProperty("/unitData");
      const fieldPaths = Object.keys(values);
      const unitFieldPaths = Object.keys(unitData);
      fieldPaths.forEach(MassEditHandlers._updateInParameterSuggetions.bind(MassEditHandlers, fieldInfoModel, "/values/", propertyName, resetValues, keepExistingSelection));
      unitFieldPaths.forEach(MassEditHandlers._updateInParameterSuggetions.bind(MassEditHandlers, fieldInfoModel, "/unitData/", propertyName, resetValues, keepExistingSelection));
    },
    /**
     * Update suggests for a drop down with InParameter as the srcPropertyName.
     *
     * @function
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param pathPrefix Path in the runtime model.
     * @param srcPropertyName The InParameter Property path.
     * @param resetValues Should the values be reset to original state.
     * @param keepExistingSelection Should the existing selection before update remain.
     * @param propertyName Property path that needs update of suggestions.
     */
    _updateInParameterSuggetions: function (fieldInfoModel, pathPrefix, srcPropertyName, resetValues, keepExistingSelection, propertyName) {
      const valueListInfo = fieldInfoModel.getProperty(`${pathPrefix + propertyName}/valueListInfo`);
      if (valueListInfo && srcPropertyName != propertyName) {
        const inParameters = valueListInfo.inParameters;
        if (inParameters && inParameters.length > 0 && inParameters.includes(srcPropertyName)) {
          MassEditHandlers._updateFieldPathSuggestions(fieldInfoModel, pathPrefix + propertyName, resetValues, keepExistingSelection);
        }
      }
    },
    /**
     * Update suggests for all OutParameter's drop downs of the propertyName.
     *
     * @function
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param propertyName Property path.
     * @param resetValues Should the values be reset to original state.
     * @param keepExistingSelection Should the existing selection before update remain.
     */
    _updateSuggestionForFieldsWithOutParameters: function (fieldInfoModel, propertyName, resetValues, keepExistingSelection) {
      const valueListInfo = fieldInfoModel.getProperty(`/values/${propertyName}/valueListInfo`) || fieldInfoModel.getProperty(`/unitData/${propertyName}/valueListInfo`);
      if (valueListInfo && valueListInfo.outParameters) {
        const outParameters = valueListInfo.outParameters;
        if (outParameters.length && outParameters.length > 0) {
          MassEditHandlers._updateOutParameterSuggetions(outParameters, fieldInfoModel, resetValues, keepExistingSelection);
          const pathPrefix = fieldInfoModel.getProperty(`/values/${propertyName}`) && `/values/${propertyName}` || fieldInfoModel.getProperty(`/unitData/${propertyName}`) && `/unitData/${propertyName}`;
          if (pathPrefix) {
            MassEditHandlers._updateFieldPathSuggestions(fieldInfoModel, pathPrefix, false, true);
          }
        }
      }
    },
    /**
     * Update suggests for a drop down with InParameter as the srcPropertyName.
     *
     * @function
     * @param outParameters String arrary of OutParameter property paths.
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param resetValues Should the values be reset to original state.
     * @param keepExistingSelection Should the existing selection before update remain.
     */
    _updateOutParameterSuggetions: function (outParameters, fieldInfoModel, resetValues, keepExistingSelection) {
      const values = fieldInfoModel.getProperty("/values");
      const unitData = fieldInfoModel.getProperty("/unitData");
      const fieldPaths = Object.keys(values);
      const unitFieldPaths = Object.keys(unitData);
      outParameters.forEach(outParameter => {
        if (fieldPaths.includes(outParameter)) {
          MassEditHandlers._updateFieldPathSuggestions(fieldInfoModel, `/values/${outParameter}`, resetValues, keepExistingSelection);
        } else if (unitFieldPaths.includes(outParameter)) {
          MassEditHandlers._updateFieldPathSuggestions(fieldInfoModel, `/unitData/${outParameter}`, resetValues, keepExistingSelection);
        }
      });
    },
    /**
     * Update suggests for a drop down of a field.
     *
     * @function
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param fieldPathAbsolute Complete runtime property path.
     * @param resetValues Should the values be reset to original state.
     * @param keepExistingSelection Should the existing selection before update remain.
     */
    _updateFieldPathSuggestions: function (fieldInfoModel, fieldPathAbsolute, resetValues, keepExistingSelection) {
      const options = fieldInfoModel.getProperty(fieldPathAbsolute);
      const defaultOptions = options.defaultOptions;
      const selectedKey = fieldInfoModel.getProperty(`${fieldPathAbsolute}/selectedKey`);
      const existingSelection = keepExistingSelection && options.find(option => option.key === selectedKey);
      if (resetValues) {
        const selectOptions = options.selectOptions;
        options.length = 0;
        defaultOptions.forEach(defaultOption => options.push(defaultOption));
        selectOptions.forEach(selectOption => options.push(selectOption));
      } else {
        options.length = 0;
        defaultOptions.forEach(defaultOption => options.push(defaultOption));
      }
      fieldInfoModel.setProperty(fieldPathAbsolute, options);
      if (existingSelection && !options.includes(existingSelection)) {
        options.push(existingSelection);
        fieldInfoModel.setProperty(`${fieldPathAbsolute}/selectedKey`, selectedKey);
      }
    },
    /**
     * Update In and Out Parameters in the MED.
     *
     * @function
     * @param transCtx The transient context of the MED.
     * @param source MDC field.
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param propertyName Property path.
     */
    _setValueListInfo: function (transCtx, source, fieldInfoModel, propertyName) {
      const propPath = fieldInfoModel.getProperty(`/values/${propertyName}`) && "/values/" || fieldInfoModel.getProperty(`/unitData/${propertyName}`) && "/unitData/";
      if (fieldInfoModel.getProperty(`${propPath}${propertyName}/valueListInfo`)) {
        return;
      }
      const valueListInfo = fieldInfoModel.getProperty(`${propPath}${propertyName}/valueListInfo`);
      if (!valueListInfo) {
        MassEditHandlers._requestValueList(transCtx, source, fieldInfoModel, propertyName);
      }
    },
    /**
     * Request and update In and Out Parameters in the MED.
     *
     * @function
     * @param transCtx The transient context of the MED.
     * @param source MDC field.
     * @param fieldInfoModel Runtime model with parameters store information.
     * @param propertyName Property path.
     */
    _requestValueList: function (transCtx, source, fieldInfoModel, propertyName) {
      var _fieldValueHelp$getDe;
      const metaPath = ModelHelper.getMetaPathForContext(transCtx);
      const propertyPath = metaPath && `${metaPath}/${propertyName}`;
      const dependents = source === null || source === void 0 ? void 0 : source.getDependents();
      const fieldHelp = source === null || source === void 0 ? void 0 : source.getFieldHelp();
      const fieldValueHelp = dependents === null || dependents === void 0 ? void 0 : dependents.find(dependent => dependent.getId() === fieldHelp);
      const payload = (_fieldValueHelp$getDe = fieldValueHelp.getDelegate()) === null || _fieldValueHelp$getDe === void 0 ? void 0 : _fieldValueHelp$getDe.payload;
      if (!(fieldValueHelp !== null && fieldValueHelp !== void 0 && fieldValueHelp.getBindingContext())) {
        fieldValueHelp === null || fieldValueHelp === void 0 ? void 0 : fieldValueHelp.setBindingContext(transCtx);
      }
      const metaModel = transCtx.getModel().getMetaModel();
      ValueListHelper.createVHUIModel(fieldValueHelp, propertyPath, metaModel);
      const valueListInfo = ValueListHelper.getValueListInfo(fieldValueHelp, propertyPath, payload);
      valueListInfo.then(vLinfos => {
        const vLinfo = vLinfos[0];
        const propPath = fieldInfoModel.getProperty(`/values/${propertyName}`) && "/values/" || fieldInfoModel.getProperty(`/unitData/${propertyName}`) && "/unitData/";
        const info = {
          inParameters: vLinfo.vhParameters && ValueListHelper.getInParameters(vLinfo.vhParameters).map(inParam => inParam.helpPath),
          outParameters: vLinfo.vhParameters && ValueListHelper.getOutParameters(vLinfo.vhParameters).map(outParam => outParam.helpPath)
        };
        fieldInfoModel.setProperty(`${propPath}${propertyName}/valueListInfo`, info);
        if (info.outParameters.length > 0) {
          MassEditHandlers._updateFieldPathSuggestions(fieldInfoModel, `/values/${propertyName}`, false, true);
        }
      }).catch(() => {
        Log.warning(`Mass Edit: Couldn't load valueList info for ${propertyPath}`);
      });
    },
    /**
     * Get field help control from MDC field.
     *
     * @function
     * @param transCtx The transient context of the MED.
     * @param source MDC field.
     * @returns Field Help control.
     */
    _getValueHelp: function (transCtx, source) {
      const dependents = source === null || source === void 0 ? void 0 : source.getDependents();
      const fieldHelp = source === null || source === void 0 ? void 0 : source.getFieldHelp();
      return dependents === null || dependents === void 0 ? void 0 : dependents.find(dependent => dependent.getId() === fieldHelp);
    },
    /**
     * Colled on drop down selection of VHD option.
     *
     * @function
     * @param source Custom Mass Edit Select control.
     * @param propertyName Property path.
     * @param selectKey Previous key before the VHD was selected.
     */
    _onVHSelect: function (source, propertyName, selectKey) {
      // Called for
      // 1. VHD selected.

      const fieldInfoModel = source && source.getModel("fieldsInfo");
      const propPath = fieldInfoModel.getProperty(`/values/${propertyName}`) && "/values/" || fieldInfoModel.getProperty(`/unitData/${propertyName}`) && "/unitData/";
      const transCtx = source.getBindingContext();
      const fieldValueHelp = MassEditHandlers._getValueHelp(transCtx, source.getParent());
      if (!(fieldValueHelp !== null && fieldValueHelp !== void 0 && fieldValueHelp.getBindingContext())) {
        fieldValueHelp === null || fieldValueHelp === void 0 ? void 0 : fieldValueHelp.setBindingContext(transCtx);
      }
      source.fireValueHelpRequest();
      fieldInfoModel.setProperty(`${propPath + propertyName}/selectedKey`, selectKey);
    },
    /**
     * Gets Property name from selection key.
     *
     * @function
     * @param key Selection key.
     * @returns Property name.
     */
    _getPropertyNameFromKey: function (key) {
      let propertyName = "";
      if (key.startsWith("Default/") || key.startsWith("ClearFieldValue/") || key.startsWith("UseValueHelpValue/")) {
        propertyName = key.substring(key.indexOf("/") + 1);
      } else {
        propertyName = key.substring(0, key.lastIndexOf("/"));
      }
      return propertyName;
    },
    /**
     * Update selection to Custom Mass Edit Select from MDC field.
     *
     * @function
     * @param source MDC field.
     * @param propertyName Property path.
     * @param value Value to update.
     * @param fullText Full text to use.
     */
    _updateSelectKey: function (source, propertyName, value, fullText) {
      // Called for
      // 1. VHD property change
      // 2. Out Parameters.
      // 3. Transient context property change.

      const comboBox = source.getContent();
      if (!comboBox || !propertyName) {
        return;
      }
      let key = comboBox.getSelectedKey();
      if ((key.startsWith("Default/") || key.startsWith("ClearFieldValue/")) && !value) {
        return;
      }
      const formattedText = MassEditHandlers._valueExists(fullText) ? fullText : value;
      const fieldInfoModel = source && source.getModel("fieldsInfo");
      const values = fieldInfoModel.getProperty(`/values/${propertyName}`) || fieldInfoModel.getProperty(`/unitData/${propertyName}`) || [];
      const propPath = fieldInfoModel.getProperty(`/values/${propertyName}`) && "/values/" || fieldInfoModel.getProperty(`/unitData/${propertyName}`) && "/unitData/";
      const relatedField = values.find(fieldData => {
        var _fieldData$textInfo;
        return (fieldData === null || fieldData === void 0 ? void 0 : (_fieldData$textInfo = fieldData.textInfo) === null || _fieldData$textInfo === void 0 ? void 0 : _fieldData$textInfo.value) === value || fieldData.text === value;
      });
      if (relatedField) {
        if (fullText && relatedField.textInfo && relatedField.textInfo.descriptionPath && (relatedField.text != formattedText || relatedField.textInfo.fullText != formattedText)) {
          // Update the full text only when provided.
          relatedField.text = formattedText;
          relatedField.textInfo.fullText = formattedText;
          relatedField.textInfo.description = source.getAdditionalValue();
        }
        if (relatedField.key === key) {
          fieldInfoModel.setProperty(`${propPath + propertyName}/selectedKey`, key);
          return;
        }
        key = relatedField.key;
      } else if ([undefined, null, ""].indexOf(value) === -1) {
        key = `${propertyName}/${value}`;
        const selectionInfo = {
          text: formattedText,
          key,
          textInfo: {
            description: source.getAdditionalValue(),
            descriptionPath: values && values.textInfo && values.textInfo.descriptionPath,
            fullText: formattedText,
            textArrangement: source.getDisplay(),
            value: source.getValue(),
            valuePath: propertyName
          }
        };
        values.push(selectionInfo);
        values.selectOptions = values.selectOptions || [];
        values.selectOptions.push(selectionInfo);
        fieldInfoModel.setProperty(propPath + propertyName, values);
      } else {
        key = `Default/${propertyName}`;
      }
      fieldInfoModel.setProperty(`${propPath + propertyName}/selectedKey`, key);
      MassEditHandlers._updateResults(comboBox);
    },
    /**
     * Get Value from Drop down.
     *
     * @function
     * @param source Drop down control.
     * @returns Value of selection.
     */
    _getValue: function (source) {
      var _getSelectedItem;
      return source.getMetadata().getName() === "sap.fe.core.controls.MassEditSelect" ? (_getSelectedItem = source.getSelectedItem()) === null || _getSelectedItem === void 0 ? void 0 : _getSelectedItem.getText() : source.getValue();
    },
    _getValueOnEmpty: function (oSource, fieldsInfoModel, value, sPropertyName) {
      if (!value) {
        const values = fieldsInfoModel.getProperty(`/values/${sPropertyName}`) || fieldsInfoModel.getProperty(`/unitData/${sPropertyName}`) || [];
        if (values.unitProperty) {
          value = 0;
          oSource.setValue(value);
        } else if (values.inputType === "CheckBox") {
          value = false;
        }
      }
      return value;
    },
    _valueExists: function (value) {
      return value != undefined && value != null;
    },
    /**
     * Updates selections to runtime model.
     *
     * @function
     * @param oSource Drop down control.
     * @param aParams Parts of key in runtime model.
     * @param updateTransCtx Should transient context be updated with the value.
     */
    _updateResults: function (oSource) {
      let aParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      let updateTransCtx = arguments.length > 2 ? arguments[2] : undefined;
      // Called for
      // 1. VHD property change.
      // 2. Out parameter.
      // 3. transient context property change.
      const fieldsInfoModel = oSource && oSource.getModel("fieldsInfo");
      const oFieldsInfoData = fieldsInfoModel && fieldsInfoModel.getData();
      let value = MassEditHandlers._getValue(oSource);
      aParams = aParams.length > 0 ? aParams : oSource && oSource.getSelectedKey() && oSource.getSelectedKey().split("/");
      let oDataObject;
      const sPropertyName = oSource.data("fieldPath");
      const propertyFullyQualifiedName = oSource.data("propertyFullyQualifiedName");
      if (aParams[0] === "Default") {
        oDataObject = {
          keyValue: aParams[1],
          propertyFullyQualifiedName,
          value: aParams[0]
        };
      } else if (aParams[0] === "ClearFieldValue") {
        value = "";
        value = MassEditHandlers._getValueOnEmpty(oSource, fieldsInfoModel, value, sPropertyName);
        oDataObject = {
          keyValue: aParams[1],
          propertyFullyQualifiedName,
          value: value
        };
      } else if (!aParams) {
        value = MassEditHandlers._getValueOnEmpty(oSource, fieldsInfoModel, value, sPropertyName);
        oDataObject = {
          keyValue: sPropertyName,
          propertyFullyQualifiedName,
          value: value
        };
      } else {
        const propertyName = aParams.slice(0, -1).join("/");
        const propertyValues = fieldsInfoModel.getProperty(`/values/${propertyName}`) || fieldsInfoModel.getProperty(`/unitData/${propertyName}`) || [];
        const relatedField = (propertyValues || []).find(function (oFieldData) {
          var _oFieldData$textInfo;
          return (oFieldData === null || oFieldData === void 0 ? void 0 : (_oFieldData$textInfo = oFieldData.textInfo) === null || _oFieldData$textInfo === void 0 ? void 0 : _oFieldData$textInfo.value) === value || oFieldData.text === value;
        });
        oDataObject = {
          keyValue: propertyName,
          propertyFullyQualifiedName,
          value: relatedField.textInfo && MassEditHandlers._valueExists(relatedField.textInfo.value) ? relatedField.textInfo.value : relatedField.text
        };
      }
      let bExistingElementindex = -1;
      for (let i = 0; i < oFieldsInfoData.results.length; i++) {
        if (oFieldsInfoData.results[i].keyValue === oDataObject.keyValue) {
          bExistingElementindex = i;
        }
      }
      if (bExistingElementindex !== -1) {
        oFieldsInfoData.results[bExistingElementindex] = oDataObject;
      } else {
        oFieldsInfoData.results.push(oDataObject);
      }
      if (updateTransCtx && !oDataObject.keyValue.includes("/")) {
        const transCtx = oSource.getBindingContext();
        if (aParams[0] === "Default" || aParams[0] === "ClearFieldValue") {
          transCtx.setProperty(oDataObject.keyValue, null);
        } else if (oDataObject) {
          transCtx.setProperty(oDataObject.keyValue, oDataObject.value);
        }
      }
    }
  };
  return MassEditHandlers;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/controls/massEdit/MassEditHandlers", ["sap/base/Log","sap/fe/core/helpers/ModelHelper","sap/fe/macros/internal/valuehelp/ValueListHelper","sap/ui/core/Core"],function(e,t,n,a){"use strict";const l={contextPropertyChange:function(e,t,n){const s=a.byId(n);const o=s&&s.getBindingContext();const i=s&&s.getModel("fieldsInfo");const u=i.getProperty(`/values/${t}`)||i.getProperty(`/unitData/${t}`)||[];if(o&&(u.inputType==="InputWithValueHelp"||u.inputType==="InputWithUnit")&&!u.valueListInfo){l._setValueListInfo(o,s,i,t)}const r=i&&i.getProperty("/isOpen");if(!r||!s.getVisible()){return}l._updateSelectKey(s,t,e)},handleMDCFieldChange:function(t,n){const a=t&&t.getSource();const s=t&&t.getParameter("promise");const o=a.getContent();if(!o||!n){return}s.then(l._updateSelectKeyForMDCFieldChange.bind(l,a,n)).catch(t=>{e.warning(`VHD selection couldn't be populated in the mass edit field.${t}`)})},handleSelectionChange:function(e){const t=e&&e.getSource();const n=t.getSelectedKey();const a=t&&n&&n.split("/");let s;if(a[0]==="UseValueHelpValue"){const n=e.getParameter("previousSelectedItem");const o=n.getKey();s=a.slice(1).join("/");l._onVHSelect(t,s,o);return}const o=t&&t.getModel("fieldsInfo");s=l._getPropertyNameFromKey(n);l._updateSuggestionForFieldsWithInParameters(o,s,n.startsWith("Default/")||n.startsWith("ClearFieldValue/"),true);l._updateSuggestionForFieldsWithOutParameters(o,s,n.startsWith("Default/")||n.startsWith("ClearFieldValue/"),false);l._updateResults(t,a,true)},_updateSelectKeyForMDCFieldChange:function(e,t,n){const a=e&&e.getBindingContext();const s=e&&e.getModel("fieldsInfo");const o=s.getProperty(`/values/${t}`)||s.getProperty(`/unitData/${t}`)||[];if(a&&(o.inputType==="InputWithValueHelp"||o.inputType==="InputWithUnit")&&!o.valueListInfo){l._setValueListInfo(a,e,s,t)}l._updateSuggestionForFieldsWithOutParameters(s,t,false,true);l._updateSuggestionForFieldsWithInParameters(s,t,false,true);const i=e.getFormFormattedValue();l._updateSelectKey(e,t,n,i)},_updateSuggestionForFieldsWithInParameters:function(e,t,n,a){const s=e.getProperty("/values");const o=e.getProperty("/unitData");const i=Object.keys(s);const u=Object.keys(o);i.forEach(l._updateInParameterSuggetions.bind(l,e,"/values/",t,n,a));u.forEach(l._updateInParameterSuggetions.bind(l,e,"/unitData/",t,n,a))},_updateInParameterSuggetions:function(e,t,n,a,s,o){const i=e.getProperty(`${t+o}/valueListInfo`);if(i&&n!=o){const u=i.inParameters;if(u&&u.length>0&&u.includes(n)){l._updateFieldPathSuggestions(e,t+o,a,s)}}},_updateSuggestionForFieldsWithOutParameters:function(e,t,n,a){const s=e.getProperty(`/values/${t}/valueListInfo`)||e.getProperty(`/unitData/${t}/valueListInfo`);if(s&&s.outParameters){const o=s.outParameters;if(o.length&&o.length>0){l._updateOutParameterSuggetions(o,e,n,a);const s=e.getProperty(`/values/${t}`)&&`/values/${t}`||e.getProperty(`/unitData/${t}`)&&`/unitData/${t}`;if(s){l._updateFieldPathSuggestions(e,s,false,true)}}}},_updateOutParameterSuggetions:function(e,t,n,a){const s=t.getProperty("/values");const o=t.getProperty("/unitData");const i=Object.keys(s);const u=Object.keys(o);e.forEach(e=>{if(i.includes(e)){l._updateFieldPathSuggestions(t,`/values/${e}`,n,a)}else if(u.includes(e)){l._updateFieldPathSuggestions(t,`/unitData/${e}`,n,a)}})},_updateFieldPathSuggestions:function(e,t,n,a){const l=e.getProperty(t);const s=l.defaultOptions;const o=e.getProperty(`${t}/selectedKey`);const i=a&&l.find(e=>e.key===o);if(n){const e=l.selectOptions;l.length=0;s.forEach(e=>l.push(e));e.forEach(e=>l.push(e))}else{l.length=0;s.forEach(e=>l.push(e))}e.setProperty(t,l);if(i&&!l.includes(i)){l.push(i);e.setProperty(`${t}/selectedKey`,o)}},_setValueListInfo:function(e,t,n,a){const s=n.getProperty(`/values/${a}`)&&"/values/"||n.getProperty(`/unitData/${a}`)&&"/unitData/";if(n.getProperty(`${s}${a}/valueListInfo`)){return}const o=n.getProperty(`${s}${a}/valueListInfo`);if(!o){l._requestValueList(e,t,n,a)}},_requestValueList:function(a,s,o,i){var u;const r=t.getMetaPathForContext(a);const d=r&&`${r}/${i}`;const c=s===null||s===void 0?void 0:s.getDependents();const g=s===null||s===void 0?void 0:s.getFieldHelp();const p=c===null||c===void 0?void 0:c.find(e=>e.getId()===g);const f=(u=p.getDelegate())===null||u===void 0?void 0:u.payload;if(!(p!==null&&p!==void 0&&p.getBindingContext())){p===null||p===void 0?void 0:p.setBindingContext(a)}const y=a.getModel().getMetaModel();n.createVHUIModel(p,d,y);const P=n.getValueListInfo(p,d,f);P.then(e=>{const t=e[0];const a=o.getProperty(`/values/${i}`)&&"/values/"||o.getProperty(`/unitData/${i}`)&&"/unitData/";const s={inParameters:t.vhParameters&&n.getInParameters(t.vhParameters).map(e=>e.helpPath),outParameters:t.vhParameters&&n.getOutParameters(t.vhParameters).map(e=>e.helpPath)};o.setProperty(`${a}${i}/valueListInfo`,s);if(s.outParameters.length>0){l._updateFieldPathSuggestions(o,`/values/${i}`,false,true)}}).catch(()=>{e.warning(`Mass Edit: Couldn't load valueList info for ${d}`)})},_getValueHelp:function(e,t){const n=t===null||t===void 0?void 0:t.getDependents();const a=t===null||t===void 0?void 0:t.getFieldHelp();return n===null||n===void 0?void 0:n.find(e=>e.getId()===a)},_onVHSelect:function(e,t,n){const a=e&&e.getModel("fieldsInfo");const s=a.getProperty(`/values/${t}`)&&"/values/"||a.getProperty(`/unitData/${t}`)&&"/unitData/";const o=e.getBindingContext();const i=l._getValueHelp(o,e.getParent());if(!(i!==null&&i!==void 0&&i.getBindingContext())){i===null||i===void 0?void 0:i.setBindingContext(o)}e.fireValueHelpRequest();a.setProperty(`${s+t}/selectedKey`,n)},_getPropertyNameFromKey:function(e){let t="";if(e.startsWith("Default/")||e.startsWith("ClearFieldValue/")||e.startsWith("UseValueHelpValue/")){t=e.substring(e.indexOf("/")+1)}else{t=e.substring(0,e.lastIndexOf("/"))}return t},_updateSelectKey:function(e,t,n,a){const s=e.getContent();if(!s||!t){return}let o=s.getSelectedKey();if((o.startsWith("Default/")||o.startsWith("ClearFieldValue/"))&&!n){return}const i=l._valueExists(a)?a:n;const u=e&&e.getModel("fieldsInfo");const r=u.getProperty(`/values/${t}`)||u.getProperty(`/unitData/${t}`)||[];const d=u.getProperty(`/values/${t}`)&&"/values/"||u.getProperty(`/unitData/${t}`)&&"/unitData/";const c=r.find(e=>{var t;return(e===null||e===void 0?void 0:(t=e.textInfo)===null||t===void 0?void 0:t.value)===n||e.text===n});if(c){if(a&&c.textInfo&&c.textInfo.descriptionPath&&(c.text!=i||c.textInfo.fullText!=i)){c.text=i;c.textInfo.fullText=i;c.textInfo.description=e.getAdditionalValue()}if(c.key===o){u.setProperty(`${d+t}/selectedKey`,o);return}o=c.key}else if([undefined,null,""].indexOf(n)===-1){o=`${t}/${n}`;const a={text:i,key:o,textInfo:{description:e.getAdditionalValue(),descriptionPath:r&&r.textInfo&&r.textInfo.descriptionPath,fullText:i,textArrangement:e.getDisplay(),value:e.getValue(),valuePath:t}};r.push(a);r.selectOptions=r.selectOptions||[];r.selectOptions.push(a);u.setProperty(d+t,r)}else{o=`Default/${t}`}u.setProperty(`${d+t}/selectedKey`,o);l._updateResults(s)},_getValue:function(e){var t;return e.getMetadata().getName()==="sap.fe.core.controls.MassEditSelect"?(t=e.getSelectedItem())===null||t===void 0?void 0:t.getText():e.getValue()},_getValueOnEmpty:function(e,t,n,a){if(!n){const l=t.getProperty(`/values/${a}`)||t.getProperty(`/unitData/${a}`)||[];if(l.unitProperty){n=0;e.setValue(n)}else if(l.inputType==="CheckBox"){n=false}}return n},_valueExists:function(e){return e!=undefined&&e!=null},_updateResults:function(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let n=arguments.length>2?arguments[2]:undefined;const a=e&&e.getModel("fieldsInfo");const s=a&&a.getData();let o=l._getValue(e);t=t.length>0?t:e&&e.getSelectedKey()&&e.getSelectedKey().split("/");let i;const u=e.data("fieldPath");const r=e.data("propertyFullyQualifiedName");if(t[0]==="Default"){i={keyValue:t[1],propertyFullyQualifiedName:r,value:t[0]}}else if(t[0]==="ClearFieldValue"){o="";o=l._getValueOnEmpty(e,a,o,u);i={keyValue:t[1],propertyFullyQualifiedName:r,value:o}}else if(!t){o=l._getValueOnEmpty(e,a,o,u);i={keyValue:u,propertyFullyQualifiedName:r,value:o}}else{const e=t.slice(0,-1).join("/");const n=a.getProperty(`/values/${e}`)||a.getProperty(`/unitData/${e}`)||[];const s=(n||[]).find(function(e){var t;return(e===null||e===void 0?void 0:(t=e.textInfo)===null||t===void 0?void 0:t.value)===o||e.text===o});i={keyValue:e,propertyFullyQualifiedName:r,value:s.textInfo&&l._valueExists(s.textInfo.value)?s.textInfo.value:s.text}}let d=-1;for(let e=0;e<s.results.length;e++){if(s.results[e].keyValue===i.keyValue){d=e}}if(d!==-1){s.results[d]=i}else{s.results.push(i)}if(n&&!i.keyValue.includes("/")){const n=e.getBindingContext();if(t[0]==="Default"||t[0]==="ClearFieldValue"){n.setProperty(i.keyValue,null)}else if(i){n.setProperty(i.keyValue,i.value)}}}};return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ConverterContext-dbg", ["sap/fe/core/converters/ManifestWrapper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper"], function (ManifestWrapper, MetaModelConverter, TypeGuards, DataModelPathHelper) {
  "use strict";

  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isServiceObject = TypeGuards.isServiceObject;
  var getInvolvedDataModelObjectFromPath = MetaModelConverter.getInvolvedDataModelObjectFromPath;
  var convertTypes = MetaModelConverter.convertTypes;
  /**
   * Checks whether an object is an annotation term.
   *
   * @param vAnnotationPath
   * @returns `true` if it's an annotation term
   */
  const isAnnotationTerm = function (vAnnotationPath) {
    return typeof vAnnotationPath === "object";
  };
  const getDataModelPathForEntitySet = function (resolvedMetaPath, convertedTypes) {
    let rootEntitySet;
    let currentEntitySet;
    let previousEntitySet;
    let currentEntityType;
    let navigatedPaths = [];
    const navigationProperties = [];
    resolvedMetaPath.objectPath.forEach(objectPart => {
      var _currentEntitySet;
      if (isServiceObject(objectPart)) {
        switch (objectPart._type) {
          case "NavigationProperty":
            navigatedPaths.push(objectPart.name);
            navigationProperties.push(objectPart);
            currentEntityType = objectPart.targetType;
            if (previousEntitySet && previousEntitySet.navigationPropertyBinding.hasOwnProperty(navigatedPaths.join("/"))) {
              currentEntitySet = previousEntitySet.navigationPropertyBinding[navigatedPaths.join("/")];
              previousEntitySet = currentEntitySet;
              navigatedPaths = [];
            } else {
              currentEntitySet = undefined;
            }
            break;
          case "EntitySet":
            if (rootEntitySet === undefined) {
              rootEntitySet = objectPart;
            }
            currentEntitySet = objectPart;
            previousEntitySet = currentEntitySet;
            currentEntityType = (_currentEntitySet = currentEntitySet) === null || _currentEntitySet === void 0 ? void 0 : _currentEntitySet.entityType;
            break;
          default:
            break;
        }
      }
    });
    const dataModelPath = {
      startingEntitySet: rootEntitySet,
      targetEntityType: currentEntityType,
      targetEntitySet: currentEntitySet,
      navigationProperties: navigationProperties,
      contextLocation: undefined,
      targetObject: resolvedMetaPath.target,
      convertedTypes: convertedTypes
    };
    dataModelPath.contextLocation = dataModelPath;
    return dataModelPath;
  };

  /**
   * Create a ConverterContext object that will be used within the converters.
   *
   * @param {ConvertedMetadata} oConvertedTypes The converted annotation and service types
   * @param {BaseManifestSettings} oManifestSettings The manifestSettings that applies to this page
   * @param {TemplateType} templateType The type of template we're looking at right now
   * @param {IDiagnostics} diagnostics The diagnostics shim
   * @param {Function} mergeFn The function to be used to perfom some deep merges between object
   * @param {DataModelObjectPath} targetDataModelPath The global path to reach the entitySet
   * @returns {ConverterContext} A converter context for the converters
   */
  let ConverterContext = /*#__PURE__*/function () {
    function ConverterContext(convertedTypes, manifestSettings, diagnostics, mergeFn, targetDataModelPath) {
      this.convertedTypes = convertedTypes;
      this.manifestSettings = manifestSettings;
      this.diagnostics = diagnostics;
      this.mergeFn = mergeFn;
      this.targetDataModelPath = targetDataModelPath;
      this.manifestWrapper = new ManifestWrapper(this.manifestSettings, mergeFn);
      this.baseContextPath = getTargetObjectPath(this.targetDataModelPath);
    }
    var _proto = ConverterContext.prototype;
    _proto._getEntityTypeFromFullyQualifiedName = function _getEntityTypeFromFullyQualifiedName(fullyQualifiedName) {
      return this.convertedTypes.entityTypes.find(entityType => {
        if (fullyQualifiedName.startsWith(entityType.fullyQualifiedName)) {
          const replaceAnnotation = fullyQualifiedName.replace(entityType.fullyQualifiedName, "");
          return replaceAnnotation.startsWith("/") || replaceAnnotation.startsWith("@");
        }
        return false;
      });
    }

    /**
     * Retrieve the entityType associated with an annotation object.
     *
     * @param annotation The annotation object for which we want to find the entityType
     * @returns The EntityType the annotation refers to
     */;
    _proto.getAnnotationEntityType = function getAnnotationEntityType(annotation) {
      if (annotation) {
        const annotationPath = annotation.fullyQualifiedName;
        const targetEntityType = this._getEntityTypeFromFullyQualifiedName(annotationPath);
        if (!targetEntityType) {
          throw new Error(`Cannot find Entity Type for ${annotation.fullyQualifiedName}`);
        }
        return targetEntityType;
      } else {
        return this.targetDataModelPath.targetEntityType;
      }
    }

    /**
     * Retrieve the manifest settings defined for a specific control within controlConfiguration.
     *
     * @param vAnnotationPath The annotation path or object to evaluate
     * @returns The control configuration for that specific annotation path if it exists
     */;
    _proto.getManifestControlConfiguration = function getManifestControlConfiguration(vAnnotationPath) {
      if (isAnnotationTerm(vAnnotationPath)) {
        return this.manifestWrapper.getControlConfiguration(vAnnotationPath.fullyQualifiedName.replace(this.targetDataModelPath.targetEntityType.fullyQualifiedName, ""));
      }
      // Checking if there are multiple entity set in the manifest, and comparing the entity set of the ControlConfiguration with the one from the annotation.
      const sAnnotationPath = this.manifestWrapper.hasMultipleEntitySets() && this.baseContextPath !== `/${this.manifestWrapper.getEntitySet()}` ? `${this.baseContextPath}/${vAnnotationPath}` : vAnnotationPath;
      return this.manifestWrapper.getControlConfiguration(sAnnotationPath);
    }

    /**
     * Create an absolute annotation path based on the current meta model context.
     *
     * @param sAnnotationPath The relative annotation path
     * @returns The correct annotation path based on the current context
     */;
    _proto.getAbsoluteAnnotationPath = function getAbsoluteAnnotationPath(sAnnotationPath) {
      if (!sAnnotationPath) {
        return sAnnotationPath;
      }
      if (sAnnotationPath[0] === "/") {
        return sAnnotationPath;
      }
      return `${this.baseContextPath}/${sAnnotationPath}`;
    }

    /**
     * Retrieve the current entitySet.
     *
     * @returns The current EntitySet if it exists.
     */;
    _proto.getEntitySet = function getEntitySet() {
      return this.targetDataModelPath.targetEntitySet;
    }

    /**
     * Retrieve the context path.
     *
     * @returns The context path of the converter.
     */;
    _proto.getContextPath = function getContextPath() {
      return this.baseContextPath;
    }

    /**
     * Retrieve the current data model object path.
     *
     * @returns The current data model object path
     */;
    _proto.getDataModelObjectPath = function getDataModelObjectPath() {
      return this.targetDataModelPath;
    }

    /**
     * Get the EntityContainer.
     *
     * @returns The current service EntityContainer
     */;
    _proto.getEntityContainer = function getEntityContainer() {
      return this.convertedTypes.entityContainer;
    }

    /**
     * Get the EntityType based on the fully qualified name.
     *
     * @returns The current EntityType.
     */;
    _proto.getEntityType = function getEntityType() {
      return this.targetDataModelPath.targetEntityType;
    }

    /**
     * Gets the entity type of the parameter in case of a parameterized service.
     *
     * @returns The entity type of the parameter
     */;
    _proto.getParameterEntityType = function getParameterEntityType() {
      var _parameterEntityType$, _parameterEntityType$2;
      const parameterEntityType = this.targetDataModelPath.startingEntitySet.entityType;
      const isParameterized = !!((_parameterEntityType$ = parameterEntityType.annotations) !== null && _parameterEntityType$ !== void 0 && (_parameterEntityType$2 = _parameterEntityType$.Common) !== null && _parameterEntityType$2 !== void 0 && _parameterEntityType$2.ResultContext);
      return isParameterized && parameterEntityType;
    }

    /**
     * Retrieves an annotation from an entity type based on annotation path.
     *
     * @param annotationPath The annotation path to be evaluated
     * @returns The target annotation path as well as a converter context to go with it
     */;
    _proto.getEntityTypeAnnotation = function getEntityTypeAnnotation(annotationPath) {
      if (!annotationPath.includes("@")) {
        throw new Error(`Not an annotation path: '${annotationPath}'`);
      }
      const isAbsolute = annotationPath.startsWith("/");
      let path;
      if (isAbsolute) {
        // path can be used as-is
        path = annotationPath;
      } else {
        // build an absolute path based on the entity type (this function works on the type!)
        const base = this.getContextPath().split("@", 1)[0];
        path = base.endsWith("/") ? base + annotationPath : `${base}/${annotationPath}`;
      }
      const target = this.resolveAbsolutePath(path);
      const dataModelObjectPath = getInvolvedDataModelObjectFromPath({
        target: target.target,
        visitedObjects: target.objectPath
      }, this.convertedTypes, isAbsolute ? undefined : this.targetDataModelPath.contextLocation, true);
      return {
        annotation: target.target,
        converterContext: new ConverterContext(this.convertedTypes, this.manifestSettings, this.diagnostics, this.mergeFn, dataModelObjectPath)
      };
    }

    /**
     * Retrieve the type of template we're working on (e.g. ListReport / ObjectPage / ...).
     *
     * @returns The current tenplate type
     */;
    _proto.getTemplateType = function getTemplateType() {
      return this.manifestWrapper.getTemplateType();
    }

    /**
     * Retrieve the converted types.
     *
     * @returns The current converted types
     */;
    _proto.getConvertedTypes = function getConvertedTypes() {
      return this.convertedTypes;
    }

    /**
     * Retrieve a relative annotation path between an annotation path and an entity type.
     *
     * @param annotationPath
     * @param entityType
     * @returns The relative anntotation path.
     */;
    _proto.getRelativeAnnotationPath = function getRelativeAnnotationPath(annotationPath, entityType) {
      return annotationPath.replace(entityType.fullyQualifiedName, "");
    }

    /**
     * Transform an entityType based path to an entitySet based one (ui5 templating generally expect an entitySetBasedPath).
     *
     * @param annotationPath
     * @returns The EntitySet based annotation path
     */;
    _proto.getEntitySetBasedAnnotationPath = function getEntitySetBasedAnnotationPath(annotationPath) {
      if (!annotationPath) {
        return annotationPath;
      }
      const entityTypeFQN = this.targetDataModelPath.targetEntityType.fullyQualifiedName;
      if (this.targetDataModelPath.targetEntitySet || (this.baseContextPath.startsWith("/") && this.baseContextPath.match(/\//g) || []).length > 1) {
        let replacedAnnotationPath = annotationPath.replace(entityTypeFQN, "/");
        if (replacedAnnotationPath.length > 2 && replacedAnnotationPath[0] === "/" && replacedAnnotationPath[1] === "/") {
          replacedAnnotationPath = replacedAnnotationPath.substr(1);
        }
        return this.baseContextPath + (replacedAnnotationPath.startsWith("/") ? replacedAnnotationPath : `/${replacedAnnotationPath}`);
      } else {
        return `/${annotationPath}`;
      }
    }

    /**
     * Retrieve the manifest wrapper for the current context.
     *
     * @returns The current manifest wrapper
     */;
    _proto.getManifestWrapper = function getManifestWrapper() {
      return this.manifestWrapper;
    };
    _proto.getDiagnostics = function getDiagnostics() {
      return this.diagnostics;
    }

    /**
     * Retrieve the target from an absolute path.
     *
     * @param path The path we want to get the target
     * @returns The absolute path
     */;
    _proto.resolveAbsolutePath = function resolveAbsolutePath(path) {
      return this.convertedTypes.resolvePath(path);
    }

    /**
     * Retrieve a new converter context, scoped for a different context path.
     *
     * @param contextPath The path we want to orchestrate the converter context around
     * @returns The converted context for the sub path
     */;
    _proto.getConverterContextFor = function getConverterContextFor(contextPath) {
      const resolvedMetaPath = this.convertedTypes.resolvePath(contextPath);
      const targetPath = getDataModelPathForEntitySet(resolvedMetaPath, this.convertedTypes);
      return new ConverterContext(this.convertedTypes, this.manifestSettings, this.diagnostics, this.mergeFn, targetPath);
    }

    /**
     * Get all annotations of a given term and vocabulary on an entity type
     * (or on the current entity type if entityType isn't specified).
     *
     * @param vocabularyName
     * @param annotationTerm
     * @param [annotationSources]
     * @returns All the annotation for a specific term and vocabulary from an entity type
     */;
    _proto.getAnnotationsByTerm = function getAnnotationsByTerm(vocabularyName, annotationTerm) {
      let annotationSources = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [this.getEntityType()];
      let outAnnotations = [];
      annotationSources.forEach(annotationSource => {
        if (annotationSource) {
          const annotations = (annotationSource === null || annotationSource === void 0 ? void 0 : annotationSource.annotations[vocabularyName]) || {};
          if (annotations) {
            outAnnotations = Object.keys(annotations).filter(annotation => annotations[annotation].term === annotationTerm).reduce((previousValue, key) => {
              previousValue.push(annotations[key]);
              return previousValue;
            }, outAnnotations);
          }
        }
      });
      return outAnnotations;
    }

    /**
     * Retrieves the relative model path based on the current context path.
     *
     * @returns The relative model path or undefined if the path is not resolveable
     */;
    _proto.getRelativeModelPathFunction = function getRelativeModelPathFunction() {
      const targetDataModelPath = this.targetDataModelPath;
      return function (sPath) {
        const enhancedPath = enhanceDataModelPath(targetDataModelPath, sPath);
        return getContextRelativeTargetObjectPath(enhancedPath, true);
      };
    }

    /**
     * Create the converter context necessary for a macro based on a metamodel context.
     *
     * @param sEntitySetName
     * @param oMetaModelContext
     * @param diagnostics
     * @param mergeFn
     * @param targetDataModelPath
     * @param manifestSettings
     * @returns The current converter context
     */;
    ConverterContext.createConverterContextForMacro = function createConverterContextForMacro(sEntitySetName, oMetaModelContext, diagnostics, mergeFn, targetDataModelPath) {
      let manifestSettings = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
      const oMetaModel = oMetaModelContext.isA("sap.ui.model.odata.v4.ODataMetaModel") ? oMetaModelContext : oMetaModelContext.getModel();
      const oConvertedMetadata = convertTypes(oMetaModel);
      let targetEntitySet = oConvertedMetadata.entitySets.find(entitySet => entitySet.name === sEntitySetName);
      if (!targetEntitySet) {
        targetEntitySet = oConvertedMetadata.singletons.find(entitySet => entitySet.name === sEntitySetName);
      }
      if (!targetDataModelPath || targetEntitySet !== targetDataModelPath.startingEntitySet) {
        targetDataModelPath = {
          startingEntitySet: targetEntitySet,
          navigationProperties: [],
          targetEntitySet: targetEntitySet,
          targetEntityType: targetEntitySet.entityType,
          targetObject: targetEntitySet,
          convertedTypes: oConvertedMetadata
        };
      }
      return new ConverterContext(oConvertedMetadata, manifestSettings, diagnostics, mergeFn, targetDataModelPath);
    };
    return ConverterContext;
  }();
  return ConverterContext;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ConverterContext", ["sap/fe/core/converters/ManifestWrapper","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper"],function(t,e,n,i){"use strict";var a=i.getTargetObjectPath;var r=i.getContextRelativeTargetObjectPath;var o=i.enhanceDataModelPath;var s=n.isServiceObject;var u=e.getInvolvedDataModelObjectFromPath;var h=e.convertTypes;const l=function(t){return typeof t==="object"};const c=function(t,e){let n;let i;let a;let r;let o=[];const u=[];t.objectPath.forEach(t=>{var e;if(s(t)){switch(t._type){case"NavigationProperty":o.push(t.name);u.push(t);r=t.targetType;if(a&&a.navigationPropertyBinding.hasOwnProperty(o.join("/"))){i=a.navigationPropertyBinding[o.join("/")];a=i;o=[]}else{i=undefined}break;case"EntitySet":if(n===undefined){n=t}i=t;a=i;r=(e=i)===null||e===void 0?void 0:e.entityType;break;default:break}}});const h={startingEntitySet:n,targetEntityType:r,targetEntitySet:i,navigationProperties:u,contextLocation:undefined,targetObject:t.target,convertedTypes:e};h.contextLocation=h;return h};let f=function(){function e(e,n,i,r,o){this.convertedTypes=e;this.manifestSettings=n;this.diagnostics=i;this.mergeFn=r;this.targetDataModelPath=o;this.manifestWrapper=new t(this.manifestSettings,r);this.baseContextPath=a(this.targetDataModelPath)}var n=e.prototype;n._getEntityTypeFromFullyQualifiedName=function t(e){return this.convertedTypes.entityTypes.find(t=>{if(e.startsWith(t.fullyQualifiedName)){const n=e.replace(t.fullyQualifiedName,"");return n.startsWith("/")||n.startsWith("@")}return false})};n.getAnnotationEntityType=function t(e){if(e){const t=e.fullyQualifiedName;const n=this._getEntityTypeFromFullyQualifiedName(t);if(!n){throw new Error(`Cannot find Entity Type for ${e.fullyQualifiedName}`)}return n}else{return this.targetDataModelPath.targetEntityType}};n.getManifestControlConfiguration=function t(e){if(l(e)){return this.manifestWrapper.getControlConfiguration(e.fullyQualifiedName.replace(this.targetDataModelPath.targetEntityType.fullyQualifiedName,""))}const n=this.manifestWrapper.hasMultipleEntitySets()&&this.baseContextPath!==`/${this.manifestWrapper.getEntitySet()}`?`${this.baseContextPath}/${e}`:e;return this.manifestWrapper.getControlConfiguration(n)};n.getAbsoluteAnnotationPath=function t(e){if(!e){return e}if(e[0]==="/"){return e}return`${this.baseContextPath}/${e}`};n.getEntitySet=function t(){return this.targetDataModelPath.targetEntitySet};n.getContextPath=function t(){return this.baseContextPath};n.getDataModelObjectPath=function t(){return this.targetDataModelPath};n.getEntityContainer=function t(){return this.convertedTypes.entityContainer};n.getEntityType=function t(){return this.targetDataModelPath.targetEntityType};n.getParameterEntityType=function t(){var e,n;const i=this.targetDataModelPath.startingEntitySet.entityType;const a=!!((e=i.annotations)!==null&&e!==void 0&&(n=e.Common)!==null&&n!==void 0&&n.ResultContext);return a&&i};n.getEntityTypeAnnotation=function t(n){if(!n.includes("@")){throw new Error(`Not an annotation path: '${n}'`)}const i=n.startsWith("/");let a;if(i){a=n}else{const t=this.getContextPath().split("@",1)[0];a=t.endsWith("/")?t+n:`${t}/${n}`}const r=this.resolveAbsolutePath(a);const o=u({target:r.target,visitedObjects:r.objectPath},this.convertedTypes,i?undefined:this.targetDataModelPath.contextLocation,true);return{annotation:r.target,converterContext:new e(this.convertedTypes,this.manifestSettings,this.diagnostics,this.mergeFn,o)}};n.getTemplateType=function t(){return this.manifestWrapper.getTemplateType()};n.getConvertedTypes=function t(){return this.convertedTypes};n.getRelativeAnnotationPath=function t(e,n){return e.replace(n.fullyQualifiedName,"")};n.getEntitySetBasedAnnotationPath=function t(e){if(!e){return e}const n=this.targetDataModelPath.targetEntityType.fullyQualifiedName;if(this.targetDataModelPath.targetEntitySet||(this.baseContextPath.startsWith("/")&&this.baseContextPath.match(/\//g)||[]).length>1){let t=e.replace(n,"/");if(t.length>2&&t[0]==="/"&&t[1]==="/"){t=t.substr(1)}return this.baseContextPath+(t.startsWith("/")?t:`/${t}`)}else{return`/${e}`}};n.getManifestWrapper=function t(){return this.manifestWrapper};n.getDiagnostics=function t(){return this.diagnostics};n.resolveAbsolutePath=function t(e){return this.convertedTypes.resolvePath(e)};n.getConverterContextFor=function t(n){const i=this.convertedTypes.resolvePath(n);const a=c(i,this.convertedTypes);return new e(this.convertedTypes,this.manifestSettings,this.diagnostics,this.mergeFn,a)};n.getAnnotationsByTerm=function t(e,n){let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[this.getEntityType()];let a=[];i.forEach(t=>{if(t){const i=(t===null||t===void 0?void 0:t.annotations[e])||{};if(i){a=Object.keys(i).filter(t=>i[t].term===n).reduce((t,e)=>{t.push(i[e]);return t},a)}}});return a};n.getRelativeModelPathFunction=function t(){const e=this.targetDataModelPath;return function(t){const n=o(e,t);return r(n,true)}};e.createConverterContextForMacro=function t(n,i,a,r,o){let s=arguments.length>5&&arguments[5]!==undefined?arguments[5]:{};const u=i.isA("sap.ui.model.odata.v4.ODataMetaModel")?i:i.getModel();const l=h(u);let c=l.entitySets.find(t=>t.name===n);if(!c){c=l.singletons.find(t=>t.name===n)}if(!o||c!==o.startingEntitySet){o={startingEntitySet:c,navigationProperties:[],targetEntitySet:c,targetEntityType:c.entityType,targetObject:c,convertedTypes:l}}return new e(l,s,a,r,o)};return e}();return f},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ManifestSettings-dbg", [], function () {
  "use strict";

  var _exports = {};
  // ENUMS
  let TemplateType;
  (function (TemplateType) {
    TemplateType["ListReport"] = "ListReport";
    TemplateType["ObjectPage"] = "ObjectPage";
    TemplateType["AnalyticalListPage"] = "AnalyticalListPage";
  })(TemplateType || (TemplateType = {}));
  _exports.TemplateType = TemplateType;
  let ActionType;
  (function (ActionType) {
    ActionType["DataFieldForAction"] = "ForAction";
    ActionType["DataFieldForIntentBasedNavigation"] = "ForNavigation";
    ActionType["Default"] = "Default";
    ActionType["Primary"] = "Primary";
    ActionType["Secondary"] = "Secondary";
    ActionType["SwitchToActiveObject"] = "SwitchToActiveObject";
    ActionType["SwitchToDraftObject"] = "SwitchToDraftObject";
    ActionType["DraftActions"] = "DraftActions";
    ActionType["CollaborationAvatars"] = "CollaborationAvatars";
    ActionType["DefaultApply"] = "DefaultApply";
    ActionType["Menu"] = "Menu";
    ActionType["ShowFormDetails"] = "ShowFormDetails";
    ActionType["Copy"] = "Copy";
  })(ActionType || (ActionType = {}));
  _exports.ActionType = ActionType;
  let SelectionMode;
  (function (SelectionMode) {
    SelectionMode["Auto"] = "Auto";
    SelectionMode["None"] = "None";
    SelectionMode["Multi"] = "Multi";
    SelectionMode["Single"] = "Single";
  })(SelectionMode || (SelectionMode = {}));
  _exports.SelectionMode = SelectionMode;
  let VariantManagementType;
  (function (VariantManagementType) {
    VariantManagementType["Page"] = "Page";
    VariantManagementType["Control"] = "Control";
    VariantManagementType["None"] = "None";
  })(VariantManagementType || (VariantManagementType = {}));
  _exports.VariantManagementType = VariantManagementType;
  let CreationMode;
  (function (CreationMode) {
    CreationMode["NewPage"] = "NewPage";
    CreationMode["Inline"] = "Inline";
    CreationMode["CreationRow"] = "CreationRow";
    CreationMode["InlineCreationRows"] = "InlineCreationRows";
    CreationMode["External"] = "External";
  })(CreationMode || (CreationMode = {}));
  _exports.CreationMode = CreationMode;
  let VisualizationType; // Table
  (function (VisualizationType) {
    VisualizationType["Table"] = "Table";
    VisualizationType["Chart"] = "Chart";
  })(VisualizationType || (VisualizationType = {}));
  _exports.VisualizationType = VisualizationType;
  let Importance;
  (function (Importance) {
    Importance["High"] = "High";
    Importance["Medium"] = "Medium";
    Importance["Low"] = "Low";
    Importance["None"] = "None";
  })(Importance || (Importance = {}));
  _exports.Importance = Importance;
  let HorizontalAlign; // TYPES
  (function (HorizontalAlign) {
    HorizontalAlign["End"] = "End";
    HorizontalAlign["Begin"] = "Begin";
    HorizontalAlign["Center"] = "Center";
  })(HorizontalAlign || (HorizontalAlign = {}));
  _exports.HorizontalAlign = HorizontalAlign;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ManifestSettings", [],function(){"use strict";var e={};let t;(function(e){e["ListReport"]="ListReport";e["ObjectPage"]="ObjectPage";e["AnalyticalListPage"]="AnalyticalListPage"})(t||(t={}));e.TemplateType=t;let n;(function(e){e["DataFieldForAction"]="ForAction";e["DataFieldForIntentBasedNavigation"]="ForNavigation";e["Default"]="Default";e["Primary"]="Primary";e["Secondary"]="Secondary";e["SwitchToActiveObject"]="SwitchToActiveObject";e["SwitchToDraftObject"]="SwitchToDraftObject";e["DraftActions"]="DraftActions";e["CollaborationAvatars"]="CollaborationAvatars";e["DefaultApply"]="DefaultApply";e["Menu"]="Menu";e["ShowFormDetails"]="ShowFormDetails";e["Copy"]="Copy"})(n||(n={}));e.ActionType=n;let o;(function(e){e["Auto"]="Auto";e["None"]="None";e["Multi"]="Multi";e["Single"]="Single"})(o||(o={}));e.SelectionMode=o;let i;(function(e){e["Page"]="Page";e["Control"]="Control";e["None"]="None"})(i||(i={}));e.VariantManagementType=i;let a;(function(e){e["NewPage"]="NewPage";e["Inline"]="Inline";e["CreationRow"]="CreationRow";e["InlineCreationRows"]="InlineCreationRows";e["External"]="External"})(a||(a={}));e.CreationMode=a;let l;(function(e){e["Table"]="Table";e["Chart"]="Chart"})(l||(l={}));e.VisualizationType=l;let r;(function(e){e["High"]="High";e["Medium"]="Medium";e["Low"]="Low";e["None"]="None"})(r||(r={}));e.Importance=r;let c;(function(e){e["End"]="End";e["Begin"]="Begin";e["Center"]="Center"})(c||(c={}));e.HorizontalAlign=c;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ManifestWrapper-dbg", ["sap/fe/core/converters/ManifestSettings", "sap/ui/Device"], function (ManifestSettings, Device) {
  "use strict";

  var system = Device.system;
  var VariantManagementType = ManifestSettings.VariantManagementType;
  function ensureAnnotationPath(obj, property) {
    const propertyValue = obj === null || obj === void 0 ? void 0 : obj[property];
    if (Array.isArray(propertyValue)) {
      propertyValue.forEach(entry => ensureAnnotationPath(entry, "annotationPath"));
    } else if (propertyValue && !propertyValue.includes("@")) {
      obj[property] = "@" + propertyValue;
    }
  }

  /**
   *
   */
  let ManifestWrapper = /*#__PURE__*/function () {
    /**
     * Creates a wrapper object to ensure the data returned from the manifest is consistent and everything is merged correctly.
     *
     * @param oManifestSettings The manifest settings for the current page
     * @param mergeFn A function that will be used to perform the merge
     * @returns The manifest wrapper object
     */
    function ManifestWrapper(oManifestSettings, mergeFn) {
      var _views;
      this.oManifestSettings = oManifestSettings;
      this.mergeFn = mergeFn;
      // Ensure that properties which are meant to contain an *annotation* path contain a '@'
      ensureAnnotationPath(this.oManifestSettings, "defaultTemplateAnnotationPath");
      (_views = this.oManifestSettings.views) === null || _views === void 0 ? void 0 : _views.paths.forEach(path => {
        ensureAnnotationPath(path, "annotationPath");
        ensureAnnotationPath(path, "primary");
        ensureAnnotationPath(path, "secondary");
      });
      if (this.oManifestSettings.controlConfiguration) {
        for (const controlConfiguration of Object.values(this.oManifestSettings.controlConfiguration)) {
          var _tableSettings;
          const quickVariantSelection = (_tableSettings = controlConfiguration.tableSettings) === null || _tableSettings === void 0 ? void 0 : _tableSettings.quickVariantSelection;
          ensureAnnotationPath(quickVariantSelection, "paths");
        }
      }
    }

    /**
     * Returns the current template type.
     *
     * @returns The type of the current template
     */
    var _proto = ManifestWrapper.prototype;
    _proto.getTemplateType = function getTemplateType() {
      return this.oManifestSettings.converterType;
    }

    /**
     * Checks whether the current template should display the filter bar.
     *
     * @returns `true` if the filter bar should be hidden
     */;
    _proto.isFilterBarHidden = function isFilterBarHidden() {
      var _this$oManifestSettin;
      return !!((_this$oManifestSettin = this.oManifestSettings) !== null && _this$oManifestSettin !== void 0 && _this$oManifestSettin.hideFilterBar);
    };
    _proto.useHiddenFilterBar = function useHiddenFilterBar() {
      var _this$oManifestSettin2;
      return !!((_this$oManifestSettin2 = this.oManifestSettings) !== null && _this$oManifestSettin2 !== void 0 && _this$oManifestSettin2.useHiddenFilterBar);
    }

    /**
     * Checks whether the current environment is a desktop or not.
     *
     * @returns `true` if we are on a desktop
     */;
    _proto.isDesktop = function isDesktop() {
      return !!this.oManifestSettings.isDesktop;
    }

    /**
     * Checks whether the current environment is a mobile phone or not.
     *
     * @returns `true` if we are on a mobile phone
     */;
    _proto.isPhone = function isPhone() {
      return !!this.oManifestSettings.isPhone;
    }

    /**
     * Retrieves the form containers (field groups or identification) defined in the manifest.
     *
     * @param facetTarget The target annotation path for this form
     * @returns A set of form containers defined in the manifest indexed by an iterable key
     */;
    _proto.getFormContainer = function getFormContainer(facetTarget) {
      var _this$oManifestSettin3;
      return (_this$oManifestSettin3 = this.oManifestSettings.controlConfiguration) === null || _this$oManifestSettin3 === void 0 ? void 0 : _this$oManifestSettin3[facetTarget];
    }

    /**
     * Retrieves the header facets defined in the manifest.
     *
     * @returns A set of header facets defined in the manifest indexed by an iterable key
     */;
    _proto.getHeaderFacets = function getHeaderFacets() {
      var _this$oManifestSettin4, _this$oManifestSettin5, _content, _content$header;
      return this.mergeFn({}, (_this$oManifestSettin4 = this.oManifestSettings.controlConfiguration) === null || _this$oManifestSettin4 === void 0 ? void 0 : (_this$oManifestSettin5 = _this$oManifestSettin4["@com.sap.vocabularies.UI.v1.HeaderFacets"]) === null || _this$oManifestSettin5 === void 0 ? void 0 : _this$oManifestSettin5.facets, (_content = this.oManifestSettings.content) === null || _content === void 0 ? void 0 : (_content$header = _content.header) === null || _content$header === void 0 ? void 0 : _content$header.facets);
    }

    /**
     * Retrieves the header actions defined in the manifest.
     *
     * @returns A set of actions defined in the manifest indexed by an iterable key
     */;
    _proto.getHeaderActions = function getHeaderActions() {
      var _this$oManifestSettin6, _this$oManifestSettin7;
      return ((_this$oManifestSettin6 = this.oManifestSettings.content) === null || _this$oManifestSettin6 === void 0 ? void 0 : (_this$oManifestSettin7 = _this$oManifestSettin6.header) === null || _this$oManifestSettin7 === void 0 ? void 0 : _this$oManifestSettin7.actions) || {};
    }

    /**
     * Retrieves the footer actions defined in the manifest.
     *
     * @returns A set of actions defined in the manifest indexed by an iterable key
     */;
    _proto.getFooterActions = function getFooterActions() {
      var _this$oManifestSettin8, _this$oManifestSettin9;
      return ((_this$oManifestSettin8 = this.oManifestSettings.content) === null || _this$oManifestSettin8 === void 0 ? void 0 : (_this$oManifestSettin9 = _this$oManifestSettin8.footer) === null || _this$oManifestSettin9 === void 0 ? void 0 : _this$oManifestSettin9.actions) || {};
    }

    /**
     * Retrieves the variant management as defined in the manifest.
     *
     * @returns A type of variant management
     */;
    _proto.getVariantManagement = function getVariantManagement() {
      return this.oManifestSettings.variantManagement || VariantManagementType.None;
    }

    /**
     * Retrieves the annotation Path for the SPV in the manifest.
     *
     * @returns The annotation path for the default SPV or undefined.
     */;
    _proto.getDefaultTemplateAnnotationPath = function getDefaultTemplateAnnotationPath() {
      return this.oManifestSettings.defaultTemplateAnnotationPath;
    }

    /**
     * Retrieves the control configuration as defined in the manifest for a specific annotation path.
     *
     * @param sAnnotationPath The relative annotation path
     * @private
     * @returns The control configuration
     */;
    _proto.getControlConfiguration = function getControlConfiguration(sAnnotationPath) {
      var _this$oManifestSettin10, _this$oManifestSettin11;
      return ((_this$oManifestSettin10 = this.oManifestSettings) === null || _this$oManifestSettin10 === void 0 ? void 0 : (_this$oManifestSettin11 = _this$oManifestSettin10.controlConfiguration) === null || _this$oManifestSettin11 === void 0 ? void 0 : _this$oManifestSettin11[sAnnotationPath]) || {};
    }

    /**
     * Retrieves the configured settings for a given navigation target.
     *
     * @param navigationOrCollectionName The name of the navigation to check
     * @returns The navigation settings configuration
     */;
    _proto.getNavigationConfiguration = function getNavigationConfiguration(navigationOrCollectionName) {
      var _this$oManifestSettin12, _this$oManifestSettin13;
      return ((_this$oManifestSettin12 = this.oManifestSettings) === null || _this$oManifestSettin12 === void 0 ? void 0 : (_this$oManifestSettin13 = _this$oManifestSettin12.navigation) === null || _this$oManifestSettin13 === void 0 ? void 0 : _this$oManifestSettin13[navigationOrCollectionName]) || {};
    }

    /**
     * Retrieves the view level.
     *
     * @returns The current view level
     */;
    _proto.getViewLevel = function getViewLevel() {
      var _this$oManifestSettin14;
      return ((_this$oManifestSettin14 = this.oManifestSettings) === null || _this$oManifestSettin14 === void 0 ? void 0 : _this$oManifestSettin14.viewLevel) || -1;
    }

    /**
     * Retrieves the contentDensities setting of the application.
     *
     * @returns The current content density
     */;
    _proto.getContentDensities = function getContentDensities() {
      var _this$oManifestSettin15;
      return ((_this$oManifestSettin15 = this.oManifestSettings) === null || _this$oManifestSettin15 === void 0 ? void 0 : _this$oManifestSettin15.contentDensities) || {
        cozy: false,
        compact: false
      };
    }

    /**
     * Checks whether we are in FCL mode or not.
     *
     * @returns `true` if we are in FCL
     */;
    _proto.isFclEnabled = function isFclEnabled() {
      var _this$oManifestSettin16;
      return !!((_this$oManifestSettin16 = this.oManifestSettings) !== null && _this$oManifestSettin16 !== void 0 && _this$oManifestSettin16.fclEnabled);
    }

    /**
     * Checks whether the current settings (application / shell) allows us to use condensed layout.
     *
     * @returns `true` if we can use the condensed layout, false otherwise
     */;
    _proto.isCondensedLayoutCompliant = function isCondensedLayoutCompliant() {
      var _this$oManifestSettin17, _this$oManifestSettin18;
      const manifestContentDensity = ((_this$oManifestSettin17 = this.oManifestSettings) === null || _this$oManifestSettin17 === void 0 ? void 0 : _this$oManifestSettin17.contentDensities) || {
        cozy: false,
        compact: false
      };
      const shellContentDensity = ((_this$oManifestSettin18 = this.oManifestSettings) === null || _this$oManifestSettin18 === void 0 ? void 0 : _this$oManifestSettin18.shellContentDensity) || "compact";
      let isCondensedLayoutCompliant = true;
      const isSmallDevice = !system.desktop || Device.resize.width <= 320;
      if ((manifestContentDensity === null || manifestContentDensity === void 0 ? void 0 : manifestContentDensity.cozy) === true && (manifestContentDensity === null || manifestContentDensity === void 0 ? void 0 : manifestContentDensity.compact) !== true || shellContentDensity === "cozy" || isSmallDevice) {
        isCondensedLayoutCompliant = false;
      }
      return isCondensedLayoutCompliant;
    }

    /**
     * Checks whether the current settings (application / shell) uses compact mode as content density.
     *
     * @returns `true` if compact mode is set as content density, false otherwise
     */;
    _proto.isCompactType = function isCompactType() {
      var _this$oManifestSettin19;
      const manifestContentDensity = this.getContentDensities();
      const shellContentDensity = ((_this$oManifestSettin19 = this.oManifestSettings) === null || _this$oManifestSettin19 === void 0 ? void 0 : _this$oManifestSettin19.shellContentDensity) || "compact";
      return manifestContentDensity.compact !== false || shellContentDensity === "compact" ? true : false;
    }

    //region OP Specific

    /**
     * Retrieves the section layout defined in the manifest.
     *
     * @returns The type of section layout of the object page
     */;
    _proto.getSectionLayout = function getSectionLayout() {
      return this.oManifestSettings.sectionLayout;
    }

    /**
     * Retrieves the sections defined in the manifest.
     *
     * @returns A set of manifest sections indexed by an iterable key
     */;
    _proto.getSections = function getSections() {
      var _this$oManifestSettin20, _this$oManifestSettin21, _content2, _content2$body;
      return this.mergeFn({}, (_this$oManifestSettin20 = this.oManifestSettings.controlConfiguration) === null || _this$oManifestSettin20 === void 0 ? void 0 : (_this$oManifestSettin21 = _this$oManifestSettin20["@com.sap.vocabularies.UI.v1.Facets"]) === null || _this$oManifestSettin21 === void 0 ? void 0 : _this$oManifestSettin21.sections, (_content2 = this.oManifestSettings.content) === null || _content2 === void 0 ? void 0 : (_content2$body = _content2.body) === null || _content2$body === void 0 ? void 0 : _content2$body.sections);
    }

    /**
     * Returns true of the header of the application is editable and should appear in the facets.
     *
     * @returns `true` if the header if editable
     */;
    _proto.isHeaderEditable = function isHeaderEditable() {
      return this.getShowObjectPageHeader() && this.oManifestSettings.editableHeaderContent;
    }

    /**
     * Returns true if we should show the object page header.
     *
     * @returns `true` if the header should be displayed
     */;
    _proto.getShowAnchorBar = function getShowAnchorBar() {
      var _content3, _content3$header, _content4, _content4$header;
      return ((_content3 = this.oManifestSettings.content) === null || _content3 === void 0 ? void 0 : (_content3$header = _content3.header) === null || _content3$header === void 0 ? void 0 : _content3$header.anchorBarVisible) !== undefined ? !!((_content4 = this.oManifestSettings.content) !== null && _content4 !== void 0 && (_content4$header = _content4.header) !== null && _content4$header !== void 0 && _content4$header.anchorBarVisible) : true;
    }

    /**
     * Defines whether or not the section will be displayed in different tabs.
     *
     * @returns `true` if the icon tab bar should be used instead of scrolling
     */;
    _proto.useIconTabBar = function useIconTabBar() {
      return this.getShowAnchorBar() && this.oManifestSettings.sectionLayout === "Tabs";
    }

    /**
     * Returns true if the object page header is to be shown.
     *
     * @returns `true` if the object page header is to be displayed
     */;
    _proto.getShowObjectPageHeader = function getShowObjectPageHeader() {
      var _content5, _content5$header, _content6, _content6$header;
      return ((_content5 = this.oManifestSettings.content) === null || _content5 === void 0 ? void 0 : (_content5$header = _content5.header) === null || _content5$header === void 0 ? void 0 : _content5$header.visible) !== undefined ? !!((_content6 = this.oManifestSettings.content) !== null && _content6 !== void 0 && (_content6$header = _content6.header) !== null && _content6$header !== void 0 && _content6$header.visible) : true;
    }

    /**
     * Returns whether the lazy loader should be enabled for this page or not.
     *
     * @returns `true` if the lazy loader should be enabled
     */;
    _proto.getEnableLazyLoading = function getEnableLazyLoading() {
      return this.oManifestSettings.enableLazyLoading ?? false;
    }

    //endregion OP Specific

    //region LR Specific

    /**
     * Retrieves the multiple view configuration from the manifest.
     *
     * @returns The views that represent the manifest object
     */;
    _proto.getViewConfiguration = function getViewConfiguration() {
      return this.oManifestSettings.views;
    }

    /**
     * Retrieves the stickyMultiTabHeader configuration from the manifest.
     *
     * @returns Returns True if stickyMultiTabHeader is enabled or undefined
     */;
    _proto.getStickyMultiTabHeaderConfiguration = function getStickyMultiTabHeaderConfiguration() {
      const bStickyMultiTabHeader = this.oManifestSettings.stickyMultiTabHeader;
      return bStickyMultiTabHeader !== undefined ? bStickyMultiTabHeader : true;
    }

    /**
     * Retrieves the KPI configuration from the manifest.
     *
     * @returns Returns a map between KPI names and their respective configuration
     */;
    _proto.getKPIConfiguration = function getKPIConfiguration() {
      return this.oManifestSettings.keyPerformanceIndicators || {};
    }

    /**
     * Retrieves the filter configuration from the manifest.
     *
     * @returns The filter configuration from the manifest
     */;
    _proto.getFilterConfiguration = function getFilterConfiguration() {
      return this.getControlConfiguration("@com.sap.vocabularies.UI.v1.SelectionFields");
    }

    /**
     * Returns true if there are multiple entity sets to be displayed.
     *
     * @returns `true` if there are multiple entity sets
     */;
    _proto.hasMultipleEntitySets = function hasMultipleEntitySets() {
      const viewConfig = this.getViewConfiguration() || {
        paths: []
      };
      const manifestEntitySet = this.oManifestSettings.entitySet;
      return viewConfig.paths.find(path => {
        var _path;
        if ((_path = path) !== null && _path !== void 0 && _path.template) {
          return undefined;
        } else if (this.hasMultipleVisualizations(path)) {
          const {
            primary,
            secondary
          } = path;
          return primary.some(primaryPath => primaryPath.entitySet && primaryPath.entitySet !== manifestEntitySet) || secondary.some(secondaryPath => secondaryPath.entitySet && secondaryPath.entitySet !== manifestEntitySet);
        } else {
          path = path;
          return path.entitySet && path.entitySet !== manifestEntitySet;
        }
      }) !== undefined;
    }

    /**
     * Returns the context path for the template if it is specified in the manifest.
     *
     * @returns The context path for the template
     */;
    _proto.getContextPath = function getContextPath() {
      var _this$oManifestSettin22;
      return (_this$oManifestSettin22 = this.oManifestSettings) === null || _this$oManifestSettin22 === void 0 ? void 0 : _this$oManifestSettin22.contextPath;
    }

    /**
     * Returns true if there are multiple visualizations.
     *
     * @param path The path from the view
     * @returns `true` if there are multiple visualizations
     */;
    _proto.hasMultipleVisualizations = function hasMultipleVisualizations(path) {
      var _primary2, _secondary2;
      if (!path) {
        const viewConfig = this.getViewConfiguration() || {
          paths: []
        };
        return viewConfig.paths.some(viewPath => {
          var _primary, _secondary;
          return ((_primary = viewPath.primary) === null || _primary === void 0 ? void 0 : _primary.length) > 0 && ((_secondary = viewPath.secondary) === null || _secondary === void 0 ? void 0 : _secondary.length) > 0;
        });
      }
      return ((_primary2 = path.primary) === null || _primary2 === void 0 ? void 0 : _primary2.length) > 0 && ((_secondary2 = path.secondary) === null || _secondary2 === void 0 ? void 0 : _secondary2.length) > 0;
    }

    /**
     * Retrieves the entity set defined in the manifest.
     *
     * @returns The entity set defined in the manifest
     */;
    _proto.getEntitySet = function getEntitySet() {
      return this.oManifestSettings.entitySet;
    }

    //end region LR Specific
    ;
    return ManifestWrapper;
  }();
  return ManifestWrapper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/ManifestWrapper", ["sap/fe/core/converters/ManifestSettings","sap/ui/Device"],function(t,n){"use strict";var i=n.system;var e=t.VariantManagementType;function o(t,n){const i=t===null||t===void 0?void 0:t[n];if(Array.isArray(i)){i.forEach(t=>o(t,"annotationPath"))}else if(i&&!i.includes("@")){t[n]="@"+i}}let s=function(){function t(t,n){var i;this.oManifestSettings=t;this.mergeFn=n;o(this.oManifestSettings,"defaultTemplateAnnotationPath");(i=this.oManifestSettings.views)===null||i===void 0?void 0:i.paths.forEach(t=>{o(t,"annotationPath");o(t,"primary");o(t,"secondary")});if(this.oManifestSettings.controlConfiguration){for(const t of Object.values(this.oManifestSettings.controlConfiguration)){var e;const n=(e=t.tableSettings)===null||e===void 0?void 0:e.quickVariantSelection;o(n,"paths")}}}var s=t.prototype;s.getTemplateType=function t(){return this.oManifestSettings.converterType};s.isFilterBarHidden=function t(){var n;return!!((n=this.oManifestSettings)!==null&&n!==void 0&&n.hideFilterBar)};s.useHiddenFilterBar=function t(){var n;return!!((n=this.oManifestSettings)!==null&&n!==void 0&&n.useHiddenFilterBar)};s.isDesktop=function t(){return!!this.oManifestSettings.isDesktop};s.isPhone=function t(){return!!this.oManifestSettings.isPhone};s.getFormContainer=function t(n){var i;return(i=this.oManifestSettings.controlConfiguration)===null||i===void 0?void 0:i[n]};s.getHeaderFacets=function t(){var n,i,e,o;return this.mergeFn({},(n=this.oManifestSettings.controlConfiguration)===null||n===void 0?void 0:(i=n["@com.sap.vocabularies.UI.v1.HeaderFacets"])===null||i===void 0?void 0:i.facets,(e=this.oManifestSettings.content)===null||e===void 0?void 0:(o=e.header)===null||o===void 0?void 0:o.facets)};s.getHeaderActions=function t(){var n,i;return((n=this.oManifestSettings.content)===null||n===void 0?void 0:(i=n.header)===null||i===void 0?void 0:i.actions)||{}};s.getFooterActions=function t(){var n,i;return((n=this.oManifestSettings.content)===null||n===void 0?void 0:(i=n.footer)===null||i===void 0?void 0:i.actions)||{}};s.getVariantManagement=function t(){return this.oManifestSettings.variantManagement||e.None};s.getDefaultTemplateAnnotationPath=function t(){return this.oManifestSettings.defaultTemplateAnnotationPath};s.getControlConfiguration=function t(n){var i,e;return((i=this.oManifestSettings)===null||i===void 0?void 0:(e=i.controlConfiguration)===null||e===void 0?void 0:e[n])||{}};s.getNavigationConfiguration=function t(n){var i,e;return((i=this.oManifestSettings)===null||i===void 0?void 0:(e=i.navigation)===null||e===void 0?void 0:e[n])||{}};s.getViewLevel=function t(){var n;return((n=this.oManifestSettings)===null||n===void 0?void 0:n.viewLevel)||-1};s.getContentDensities=function t(){var n;return((n=this.oManifestSettings)===null||n===void 0?void 0:n.contentDensities)||{cozy:false,compact:false}};s.isFclEnabled=function t(){var n;return!!((n=this.oManifestSettings)!==null&&n!==void 0&&n.fclEnabled)};s.isCondensedLayoutCompliant=function t(){var e,o;const s=((e=this.oManifestSettings)===null||e===void 0?void 0:e.contentDensities)||{cozy:false,compact:false};const a=((o=this.oManifestSettings)===null||o===void 0?void 0:o.shellContentDensity)||"compact";let t=true;const r=!i.desktop||n.resize.width<=320;if((s===null||s===void 0?void 0:s.cozy)===true&&(s===null||s===void 0?void 0:s.compact)!==true||a==="cozy"||r){t=false}return t};s.isCompactType=function t(){var n;const i=this.getContentDensities();const e=((n=this.oManifestSettings)===null||n===void 0?void 0:n.shellContentDensity)||"compact";return i.compact!==false||e==="compact"?true:false};s.getSectionLayout=function t(){return this.oManifestSettings.sectionLayout};s.getSections=function t(){var n,i,e,o;return this.mergeFn({},(n=this.oManifestSettings.controlConfiguration)===null||n===void 0?void 0:(i=n["@com.sap.vocabularies.UI.v1.Facets"])===null||i===void 0?void 0:i.sections,(e=this.oManifestSettings.content)===null||e===void 0?void 0:(o=e.body)===null||o===void 0?void 0:o.sections)};s.isHeaderEditable=function t(){return this.getShowObjectPageHeader()&&this.oManifestSettings.editableHeaderContent};s.getShowAnchorBar=function t(){var n,i,e,o;return((n=this.oManifestSettings.content)===null||n===void 0?void 0:(i=n.header)===null||i===void 0?void 0:i.anchorBarVisible)!==undefined?!!((e=this.oManifestSettings.content)!==null&&e!==void 0&&(o=e.header)!==null&&o!==void 0&&o.anchorBarVisible):true};s.useIconTabBar=function t(){return this.getShowAnchorBar()&&this.oManifestSettings.sectionLayout==="Tabs"};s.getShowObjectPageHeader=function t(){var n,i,e,o;return((n=this.oManifestSettings.content)===null||n===void 0?void 0:(i=n.header)===null||i===void 0?void 0:i.visible)!==undefined?!!((e=this.oManifestSettings.content)!==null&&e!==void 0&&(o=e.header)!==null&&o!==void 0&&o.visible):true};s.getEnableLazyLoading=function t(){return this.oManifestSettings.enableLazyLoading??false};s.getViewConfiguration=function t(){return this.oManifestSettings.views};s.getStickyMultiTabHeaderConfiguration=function t(){const n=this.oManifestSettings.stickyMultiTabHeader;return n!==undefined?n:true};s.getKPIConfiguration=function t(){return this.oManifestSettings.keyPerformanceIndicators||{}};s.getFilterConfiguration=function t(){return this.getControlConfiguration("@com.sap.vocabularies.UI.v1.SelectionFields")};s.hasMultipleEntitySets=function t(){const n=this.getViewConfiguration()||{paths:[]};const i=this.oManifestSettings.entitySet;return n.paths.find(t=>{var n;if((n=t)!==null&&n!==void 0&&n.template){return undefined}else if(this.hasMultipleVisualizations(t)){const{primary:n,secondary:e}=t;return n.some(t=>t.entitySet&&t.entitySet!==i)||e.some(t=>t.entitySet&&t.entitySet!==i)}else{t=t;return t.entitySet&&t.entitySet!==i}})!==undefined};s.getContextPath=function t(){var n;return(n=this.oManifestSettings)===null||n===void 0?void 0:n.contextPath};s.hasMultipleVisualizations=function t(n){var i,e;if(!n){const t=this.getViewConfiguration()||{paths:[]};return t.paths.some(t=>{var n,i;return((n=t.primary)===null||n===void 0?void 0:n.length)>0&&((i=t.secondary)===null||i===void 0?void 0:i.length)>0})}return((i=n.primary)===null||i===void 0?void 0:i.length)>0&&((e=n.secondary)===null||e===void 0?void 0:e.length)>0};s.getEntitySet=function t(){return this.oManifestSettings.entitySet};return t}();return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/MetaModelConverter-dbg", ["sap/fe/core/converters/common/AnnotationConverter", "sap/fe/core/helpers/TypeGuards", "../helpers/StableIdHelper"], function (AnnotationConverter, TypeGuards, StableIdHelper) {
  "use strict";

  var _exports = {};
  var prepareId = StableIdHelper.prepareId;
  var isSingleton = TypeGuards.isSingleton;
  var isServiceObject = TypeGuards.isServiceObject;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isEntityType = TypeGuards.isEntityType;
  var isEntitySet = TypeGuards.isEntitySet;
  var isEntityContainer = TypeGuards.isEntityContainer;
  const VOCABULARY_ALIAS = {
    "Org.OData.Capabilities.V1": "Capabilities",
    "Org.OData.Core.V1": "Core",
    "Org.OData.Measures.V1": "Measures",
    "com.sap.vocabularies.Common.v1": "Common",
    "com.sap.vocabularies.UI.v1": "UI",
    "com.sap.vocabularies.Session.v1": "Session",
    "com.sap.vocabularies.Analytics.v1": "Analytics",
    "com.sap.vocabularies.PersonalData.v1": "PersonalData",
    "com.sap.vocabularies.Communication.v1": "Communication"
  };
  const DefaultEnvironmentCapabilities = {
    Chart: true,
    MicroChart: true,
    UShell: true,
    IntentBasedNavigation: true,
    AppState: true,
    InsightsSupported: false
  };
  _exports.DefaultEnvironmentCapabilities = DefaultEnvironmentCapabilities;
  function parsePropertyValue(annotationObject, propertyKey, currentTarget, annotationsLists, oCapabilities) {
    let value;
    const currentPropertyTarget = `${currentTarget}/${propertyKey}`;
    const typeOfAnnotation = typeof annotationObject;
    if (annotationObject === null) {
      value = {
        type: "Null",
        Null: null
      };
    } else if (typeOfAnnotation === "string") {
      value = {
        type: "String",
        String: annotationObject
      };
    } else if (typeOfAnnotation === "boolean") {
      value = {
        type: "Bool",
        Bool: annotationObject
      };
    } else if (typeOfAnnotation === "number") {
      value = {
        type: "Int",
        Int: annotationObject
      };
    } else if (Array.isArray(annotationObject)) {
      value = {
        type: "Collection",
        Collection: annotationObject.map((subAnnotationObject, subAnnotationObjectIndex) => parseAnnotationObject(subAnnotationObject, `${currentPropertyTarget}/${subAnnotationObjectIndex}`, annotationsLists, oCapabilities))
      };
      if (annotationObject.length > 0) {
        if (annotationObject[0].hasOwnProperty("$PropertyPath")) {
          value.Collection.type = "PropertyPath";
        } else if (annotationObject[0].hasOwnProperty("$Path")) {
          value.Collection.type = "Path";
        } else if (annotationObject[0].hasOwnProperty("$NavigationPropertyPath")) {
          value.Collection.type = "NavigationPropertyPath";
        } else if (annotationObject[0].hasOwnProperty("$AnnotationPath")) {
          value.Collection.type = "AnnotationPath";
        } else if (annotationObject[0].hasOwnProperty("$Type")) {
          value.Collection.type = "Record";
        } else if (annotationObject[0].hasOwnProperty("$If")) {
          value.Collection.type = "If";
        } else if (annotationObject[0].hasOwnProperty("$Or")) {
          value.Collection.type = "Or";
        } else if (annotationObject[0].hasOwnProperty("$And")) {
          value.Collection.type = "And";
        } else if (annotationObject[0].hasOwnProperty("$Eq")) {
          value.Collection.type = "Eq";
        } else if (annotationObject[0].hasOwnProperty("$Ne")) {
          value.Collection.type = "Ne";
        } else if (annotationObject[0].hasOwnProperty("$Not")) {
          value.Collection.type = "Not";
        } else if (annotationObject[0].hasOwnProperty("$Gt")) {
          value.Collection.type = "Gt";
        } else if (annotationObject[0].hasOwnProperty("$Ge")) {
          value.Collection.type = "Ge";
        } else if (annotationObject[0].hasOwnProperty("$Lt")) {
          value.Collection.type = "Lt";
        } else if (annotationObject[0].hasOwnProperty("$Le")) {
          value.Collection.type = "Le";
        } else if (annotationObject[0].hasOwnProperty("$Apply")) {
          value.Collection.type = "Apply";
        } else if (typeof annotationObject[0] === "object") {
          // $Type is optional...
          value.Collection.type = "Record";
        } else {
          value.Collection.type = "String";
        }
      }
    } else if (annotationObject.$Path !== undefined) {
      value = {
        type: "Path",
        Path: annotationObject.$Path
      };
    } else if (annotationObject.$Decimal !== undefined) {
      value = {
        type: "Decimal",
        Decimal: parseFloat(annotationObject.$Decimal)
      };
    } else if (annotationObject.$PropertyPath !== undefined) {
      value = {
        type: "PropertyPath",
        PropertyPath: annotationObject.$PropertyPath
      };
    } else if (annotationObject.$NavigationPropertyPath !== undefined) {
      value = {
        type: "NavigationPropertyPath",
        NavigationPropertyPath: annotationObject.$NavigationPropertyPath
      };
    } else if (annotationObject.$If !== undefined) {
      value = {
        type: "If",
        If: annotationObject.$If
      };
    } else if (annotationObject.$And !== undefined) {
      value = {
        type: "And",
        And: annotationObject.$And
      };
    } else if (annotationObject.$Or !== undefined) {
      value = {
        type: "Or",
        Or: annotationObject.$Or
      };
    } else if (annotationObject.$Not !== undefined) {
      value = {
        type: "Not",
        Not: annotationObject.$Not
      };
    } else if (annotationObject.$Eq !== undefined) {
      value = {
        type: "Eq",
        Eq: annotationObject.$Eq
      };
    } else if (annotationObject.$Ne !== undefined) {
      value = {
        type: "Ne",
        Ne: annotationObject.$Ne
      };
    } else if (annotationObject.$Gt !== undefined) {
      value = {
        type: "Gt",
        Gt: annotationObject.$Gt
      };
    } else if (annotationObject.$Ge !== undefined) {
      value = {
        type: "Ge",
        Ge: annotationObject.$Ge
      };
    } else if (annotationObject.$Lt !== undefined) {
      value = {
        type: "Lt",
        Lt: annotationObject.$Lt
      };
    } else if (annotationObject.$Le !== undefined) {
      value = {
        type: "Le",
        Le: annotationObject.$Le
      };
    } else if (annotationObject.$Apply !== undefined) {
      value = {
        type: "Apply",
        Apply: annotationObject.$Apply,
        Function: annotationObject.$Function
      };
    } else if (annotationObject.$AnnotationPath !== undefined) {
      value = {
        type: "AnnotationPath",
        AnnotationPath: annotationObject.$AnnotationPath
      };
    } else if (annotationObject.$EnumMember !== undefined) {
      value = {
        type: "EnumMember",
        EnumMember: `${mapNameToAlias(annotationObject.$EnumMember.split("/")[0])}/${annotationObject.$EnumMember.split("/")[1]}`
      };
    } else {
      value = {
        type: "Record",
        Record: parseAnnotationObject(annotationObject, currentTarget, annotationsLists, oCapabilities)
      };
    }
    return {
      name: propertyKey,
      value
    };
  }
  function mapNameToAlias(annotationName) {
    let [pathPart, annoPart] = annotationName.split("@");
    if (!annoPart) {
      annoPart = pathPart;
      pathPart = "";
    } else {
      pathPart += "@";
    }
    const lastDot = annoPart.lastIndexOf(".");
    return `${pathPart + VOCABULARY_ALIAS[annoPart.substr(0, lastDot)]}.${annoPart.substr(lastDot + 1)}`;
  }
  function parseAnnotationObject(annotationObject, currentObjectTarget, annotationsLists, oCapabilities) {
    let parsedAnnotationObject = {};
    const typeOfObject = typeof annotationObject;
    if (annotationObject === null) {
      parsedAnnotationObject = {
        type: "Null",
        Null: null
      };
    } else if (typeOfObject === "string") {
      parsedAnnotationObject = {
        type: "String",
        String: annotationObject
      };
    } else if (typeOfObject === "boolean") {
      parsedAnnotationObject = {
        type: "Bool",
        Bool: annotationObject
      };
    } else if (typeOfObject === "number") {
      parsedAnnotationObject = {
        type: "Int",
        Int: annotationObject
      };
    } else if (annotationObject.$AnnotationPath !== undefined) {
      parsedAnnotationObject = {
        type: "AnnotationPath",
        AnnotationPath: annotationObject.$AnnotationPath
      };
    } else if (annotationObject.$Path !== undefined) {
      parsedAnnotationObject = {
        type: "Path",
        Path: annotationObject.$Path
      };
    } else if (annotationObject.$Decimal !== undefined) {
      parsedAnnotationObject = {
        type: "Decimal",
        Decimal: parseFloat(annotationObject.$Decimal)
      };
    } else if (annotationObject.$PropertyPath !== undefined) {
      parsedAnnotationObject = {
        type: "PropertyPath",
        PropertyPath: annotationObject.$PropertyPath
      };
    } else if (annotationObject.$If !== undefined) {
      parsedAnnotationObject = {
        type: "If",
        If: annotationObject.$If
      };
    } else if (annotationObject.$And !== undefined) {
      parsedAnnotationObject = {
        type: "And",
        And: annotationObject.$And
      };
    } else if (annotationObject.$Or !== undefined) {
      parsedAnnotationObject = {
        type: "Or",
        Or: annotationObject.$Or
      };
    } else if (annotationObject.$Not !== undefined) {
      parsedAnnotationObject = {
        type: "Not",
        Not: annotationObject.$Not
      };
    } else if (annotationObject.$Eq !== undefined) {
      parsedAnnotationObject = {
        type: "Eq",
        Eq: annotationObject.$Eq
      };
    } else if (annotationObject.$Ne !== undefined) {
      parsedAnnotationObject = {
        type: "Ne",
        Ne: annotationObject.$Ne
      };
    } else if (annotationObject.$Gt !== undefined) {
      parsedAnnotationObject = {
        type: "Gt",
        Gt: annotationObject.$Gt
      };
    } else if (annotationObject.$Ge !== undefined) {
      parsedAnnotationObject = {
        type: "Ge",
        Ge: annotationObject.$Ge
      };
    } else if (annotationObject.$Lt !== undefined) {
      parsedAnnotationObject = {
        type: "Lt",
        Lt: annotationObject.$Lt
      };
    } else if (annotationObject.$Le !== undefined) {
      parsedAnnotationObject = {
        type: "Le",
        Le: annotationObject.$Le
      };
    } else if (annotationObject.$Apply !== undefined) {
      parsedAnnotationObject = {
        type: "Apply",
        Apply: annotationObject.$Apply,
        Function: annotationObject.$Function
      };
    } else if (annotationObject.$NavigationPropertyPath !== undefined) {
      parsedAnnotationObject = {
        type: "NavigationPropertyPath",
        NavigationPropertyPath: annotationObject.$NavigationPropertyPath
      };
    } else if (annotationObject.$EnumMember !== undefined) {
      parsedAnnotationObject = {
        type: "EnumMember",
        EnumMember: `${mapNameToAlias(annotationObject.$EnumMember.split("/")[0])}/${annotationObject.$EnumMember.split("/")[1]}`
      };
    } else if (Array.isArray(annotationObject)) {
      const parsedAnnotationCollection = parsedAnnotationObject;
      parsedAnnotationCollection.collection = annotationObject.map((subAnnotationObject, subAnnotationIndex) => parseAnnotationObject(subAnnotationObject, `${currentObjectTarget}/${subAnnotationIndex}`, annotationsLists, oCapabilities));
      if (annotationObject.length > 0) {
        if (annotationObject[0].hasOwnProperty("$PropertyPath")) {
          parsedAnnotationCollection.collection.type = "PropertyPath";
        } else if (annotationObject[0].hasOwnProperty("$Path")) {
          parsedAnnotationCollection.collection.type = "Path";
        } else if (annotationObject[0].hasOwnProperty("$NavigationPropertyPath")) {
          parsedAnnotationCollection.collection.type = "NavigationPropertyPath";
        } else if (annotationObject[0].hasOwnProperty("$AnnotationPath")) {
          parsedAnnotationCollection.collection.type = "AnnotationPath";
        } else if (annotationObject[0].hasOwnProperty("$Type")) {
          parsedAnnotationCollection.collection.type = "Record";
        } else if (annotationObject[0].hasOwnProperty("$If")) {
          parsedAnnotationCollection.collection.type = "If";
        } else if (annotationObject[0].hasOwnProperty("$And")) {
          parsedAnnotationCollection.collection.type = "And";
        } else if (annotationObject[0].hasOwnProperty("$Or")) {
          parsedAnnotationCollection.collection.type = "Or";
        } else if (annotationObject[0].hasOwnProperty("$Eq")) {
          parsedAnnotationCollection.collection.type = "Eq";
        } else if (annotationObject[0].hasOwnProperty("$Ne")) {
          parsedAnnotationCollection.collection.type = "Ne";
        } else if (annotationObject[0].hasOwnProperty("$Not")) {
          parsedAnnotationCollection.collection.type = "Not";
        } else if (annotationObject[0].hasOwnProperty("$Gt")) {
          parsedAnnotationCollection.collection.type = "Gt";
        } else if (annotationObject[0].hasOwnProperty("$Ge")) {
          parsedAnnotationCollection.collection.type = "Ge";
        } else if (annotationObject[0].hasOwnProperty("$Lt")) {
          parsedAnnotationCollection.collection.type = "Lt";
        } else if (annotationObject[0].hasOwnProperty("$Le")) {
          parsedAnnotationCollection.collection.type = "Le";
        } else if (annotationObject[0].hasOwnProperty("$Apply")) {
          parsedAnnotationCollection.collection.type = "Apply";
        } else if (typeof annotationObject[0] === "object") {
          parsedAnnotationCollection.collection.type = "Record";
        } else {
          parsedAnnotationCollection.collection.type = "String";
        }
      }
    } else {
      if (annotationObject.$Type) {
        const typeValue = annotationObject.$Type;
        parsedAnnotationObject.type = typeValue; //`${typeAlias}.${typeTerm}`;
      }

      const propertyValues = [];
      Object.keys(annotationObject).forEach(propertyKey => {
        if (propertyKey !== "$Type" && propertyKey !== "$If" && propertyKey !== "$Apply" && propertyKey !== "$And" && propertyKey !== "$Or" && propertyKey !== "$Ne" && propertyKey !== "$Gt" && propertyKey !== "$Ge" && propertyKey !== "$Lt" && propertyKey !== "$Le" && propertyKey !== "$Not" && propertyKey !== "$Eq" && !propertyKey.startsWith("@")) {
          propertyValues.push(parsePropertyValue(annotationObject[propertyKey], propertyKey, currentObjectTarget, annotationsLists, oCapabilities));
        } else if (propertyKey.startsWith("@")) {
          // Annotation of annotation
          createAnnotationLists({
            [propertyKey]: annotationObject[propertyKey]
          }, currentObjectTarget, annotationsLists, oCapabilities);
        }
      });
      parsedAnnotationObject.propertyValues = propertyValues;
    }
    return parsedAnnotationObject;
  }
  function getOrCreateAnnotationList(target, annotationsLists) {
    if (!annotationsLists.hasOwnProperty(target)) {
      annotationsLists[target] = {
        target: target,
        annotations: []
      };
    }
    return annotationsLists[target];
  }
  function createReferenceFacetId(referenceFacet) {
    const id = referenceFacet.ID ?? referenceFacet.Target.$AnnotationPath;
    return id ? prepareId(id) : id;
  }
  function removeChartAnnotations(annotationObject) {
    return annotationObject.filter(oRecord => {
      if (oRecord.Target && oRecord.Target.$AnnotationPath) {
        return oRecord.Target.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`) === -1;
      } else {
        return true;
      }
    });
  }
  function removeIBNAnnotations(annotationObject) {
    return annotationObject.filter(oRecord => {
      return oRecord.$Type !== "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation";
    });
  }
  function handlePresentationVariant(annotationObject) {
    return annotationObject.filter(oRecord => {
      return oRecord.$AnnotationPath !== `@${"com.sap.vocabularies.UI.v1.Chart"}`;
    });
  }
  function createAnnotationLists(annotationObjects, annotationTarget, annotationLists, oCapabilities) {
    var _annotationObjects$Fi;
    if (Object.keys(annotationObjects).length === 0) {
      return;
    }
    const outAnnotationObject = getOrCreateAnnotationList(annotationTarget, annotationLists);
    if (!oCapabilities.MicroChart) {
      delete annotationObjects[`@${"com.sap.vocabularies.UI.v1.Chart"}`];
    }
    for (const annotationObjectKey in annotationObjects) {
      let annotationKey = annotationObjectKey;
      let annotationObject = annotationObjects[annotationKey];
      switch (annotationKey) {
        case `@${"com.sap.vocabularies.UI.v1.HeaderFacets"}`:
          if (!oCapabilities.MicroChart) {
            annotationObject = removeChartAnnotations(annotationObject);
            annotationObjects[annotationKey] = annotationObject;
          }
          break;
        case `@${"com.sap.vocabularies.UI.v1.Identification"}`:
          if (!oCapabilities.IntentBasedNavigation) {
            annotationObject = removeIBNAnnotations(annotationObject);
            annotationObjects[annotationKey] = annotationObject;
          }
          break;
        case `@${"com.sap.vocabularies.UI.v1.LineItem"}`:
          if (!oCapabilities.IntentBasedNavigation) {
            annotationObject = removeIBNAnnotations(annotationObject);
            annotationObjects[annotationKey] = annotationObject;
          }
          if (!oCapabilities.MicroChart) {
            annotationObject = removeChartAnnotations(annotationObject);
            annotationObjects[annotationKey] = annotationObject;
          }
          break;
        case `@${"com.sap.vocabularies.UI.v1.FieldGroup"}`:
          if (!oCapabilities.IntentBasedNavigation) {
            annotationObject.Data = removeIBNAnnotations(annotationObject.Data);
            annotationObjects[annotationKey] = annotationObject;
          }
          if (!oCapabilities.MicroChart) {
            annotationObject.Data = removeChartAnnotations(annotationObject.Data);
            annotationObjects[annotationKey] = annotationObject;
          }
          break;
        case `@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`:
          if (!oCapabilities.Chart && annotationObject.Visualizations) {
            annotationObject.Visualizations = handlePresentationVariant(annotationObject.Visualizations);
            annotationObjects[annotationKey] = annotationObject;
          }
          break;
        case `@com.sap.vocabularies.Common.v1.DraftRoot`:
          // This scenario is needed for enabling semantic filtering on DraftAdministrativeData-filters. As of now the SingleRange annotation is read by the
          // FieldHelper, which should not include any propertyspecific logic. We will remove this once the FieldHelper receives the SingleRange data from
          // the converter or having it set is no longer a prerequisite for the semantic filtering.
          if (annotationObjects[`@Org.OData.Capabilities.V1.FilterRestrictions`] && (_annotationObjects$Fi = annotationObjects[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions) !== null && _annotationObjects$Fi !== void 0 && _annotationObjects$Fi.length) {
            if (!annotationObjects[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions.some(FilterExpressionRestriction => {
              var _FilterExpressionRest;
              return FilterExpressionRestriction === null || FilterExpressionRestriction === void 0 ? void 0 : (_FilterExpressionRest = FilterExpressionRestriction.Property) === null || _FilterExpressionRest === void 0 ? void 0 : _FilterExpressionRest.$PropertyPath.includes("DraftAdministrativeData");
            })) {
              annotationObjects[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions.push({
                $Type: "Org.OData.Capabilities.V1.FilterExpressionRestrictionType",
                AllowedExpressions: "SingleRange",
                Property: {
                  $PropertyPath: "DraftAdministrativeData/CreationDateTime"
                }
              }, {
                $Type: "Org.OData.Capabilities.V1.FilterExpressionRestrictionType",
                AllowedExpressions: "SingleRange",
                Property: {
                  $PropertyPath: "DraftAdministrativeData/LastChangeDateTime"
                }
              });
            }
          }
          break;
        default:
          break;
      }
      let currentOutAnnotationObject = outAnnotationObject;

      // Check for annotation of annotation
      const annotationOfAnnotationSplit = annotationKey.split("@");
      if (annotationOfAnnotationSplit.length > 2) {
        currentOutAnnotationObject = getOrCreateAnnotationList(`${annotationTarget}@${annotationOfAnnotationSplit[1]}`, annotationLists);
        annotationKey = annotationOfAnnotationSplit[2];
      } else {
        annotationKey = annotationOfAnnotationSplit[1];
      }
      const annotationQualifierSplit = annotationKey.split("#");
      const qualifier = annotationQualifierSplit[1];
      annotationKey = annotationQualifierSplit[0];
      const parsedAnnotationObject = {
        term: annotationKey,
        qualifier: qualifier
      };
      let currentAnnotationTarget = `${annotationTarget}@${parsedAnnotationObject.term}`;
      if (qualifier) {
        currentAnnotationTarget += `#${qualifier}`;
      }
      let isCollection = false;
      const typeofAnnotation = typeof annotationObject;
      if (annotationObject === null) {
        parsedAnnotationObject.value = {
          type: "Null"
        };
      } else if (typeofAnnotation === "string") {
        parsedAnnotationObject.value = {
          type: "String",
          String: annotationObject
        };
      } else if (typeofAnnotation === "boolean") {
        parsedAnnotationObject.value = {
          type: "Bool",
          Bool: annotationObject
        };
      } else if (typeofAnnotation === "number") {
        parsedAnnotationObject.value = {
          type: "Int",
          Int: annotationObject
        };
      } else if (annotationObject.$If !== undefined) {
        parsedAnnotationObject.value = {
          type: "If",
          If: annotationObject.$If
        };
      } else if (annotationObject.$And !== undefined) {
        parsedAnnotationObject.value = {
          type: "And",
          And: annotationObject.$And
        };
      } else if (annotationObject.$Or !== undefined) {
        parsedAnnotationObject.value = {
          type: "Or",
          Or: annotationObject.$Or
        };
      } else if (annotationObject.$Not !== undefined) {
        parsedAnnotationObject.value = {
          type: "Not",
          Not: annotationObject.$Not
        };
      } else if (annotationObject.$Eq !== undefined) {
        parsedAnnotationObject.value = {
          type: "Eq",
          Eq: annotationObject.$Eq
        };
      } else if (annotationObject.$Ne !== undefined) {
        parsedAnnotationObject.value = {
          type: "Ne",
          Ne: annotationObject.$Ne
        };
      } else if (annotationObject.$Gt !== undefined) {
        parsedAnnotationObject.value = {
          type: "Gt",
          Gt: annotationObject.$Gt
        };
      } else if (annotationObject.$Ge !== undefined) {
        parsedAnnotationObject.value = {
          type: "Ge",
          Ge: annotationObject.$Ge
        };
      } else if (annotationObject.$Lt !== undefined) {
        parsedAnnotationObject.value = {
          type: "Lt",
          Lt: annotationObject.$Lt
        };
      } else if (annotationObject.$Le !== undefined) {
        parsedAnnotationObject.value = {
          type: "Le",
          Le: annotationObject.$Le
        };
      } else if (annotationObject.$Apply !== undefined) {
        parsedAnnotationObject.value = {
          type: "Apply",
          Apply: annotationObject.$Apply,
          Function: annotationObject.$Function
        };
      } else if (annotationObject.$Path !== undefined) {
        parsedAnnotationObject.value = {
          type: "Path",
          Path: annotationObject.$Path
        };
      } else if (annotationObject.$AnnotationPath !== undefined) {
        parsedAnnotationObject.value = {
          type: "AnnotationPath",
          AnnotationPath: annotationObject.$AnnotationPath
        };
      } else if (annotationObject.$Decimal !== undefined) {
        parsedAnnotationObject.value = {
          type: "Decimal",
          Decimal: parseFloat(annotationObject.$Decimal)
        };
      } else if (annotationObject.$EnumMember !== undefined) {
        parsedAnnotationObject.value = {
          type: "EnumMember",
          EnumMember: `${mapNameToAlias(annotationObject.$EnumMember.split("/")[0])}/${annotationObject.$EnumMember.split("/")[1]}`
        };
      } else if (Array.isArray(annotationObject)) {
        isCollection = true;
        parsedAnnotationObject.collection = annotationObject.map((subAnnotationObject, subAnnotationIndex) => parseAnnotationObject(subAnnotationObject, `${currentAnnotationTarget}/${subAnnotationIndex}`, annotationLists, oCapabilities));
        if (annotationObject.length > 0) {
          if (annotationObject[0].hasOwnProperty("$PropertyPath")) {
            parsedAnnotationObject.collection.type = "PropertyPath";
          } else if (annotationObject[0].hasOwnProperty("$Path")) {
            parsedAnnotationObject.collection.type = "Path";
          } else if (annotationObject[0].hasOwnProperty("$NavigationPropertyPath")) {
            parsedAnnotationObject.collection.type = "NavigationPropertyPath";
          } else if (annotationObject[0].hasOwnProperty("$AnnotationPath")) {
            parsedAnnotationObject.collection.type = "AnnotationPath";
          } else if (annotationObject[0].hasOwnProperty("$Type")) {
            parsedAnnotationObject.collection.type = "Record";
          } else if (annotationObject[0].hasOwnProperty("$If")) {
            parsedAnnotationObject.collection.type = "If";
          } else if (annotationObject[0].hasOwnProperty("$Or")) {
            parsedAnnotationObject.collection.type = "Or";
          } else if (annotationObject[0].hasOwnProperty("$Eq")) {
            parsedAnnotationObject.collection.type = "Eq";
          } else if (annotationObject[0].hasOwnProperty("$Ne")) {
            parsedAnnotationObject.collection.type = "Ne";
          } else if (annotationObject[0].hasOwnProperty("$Not")) {
            parsedAnnotationObject.collection.type = "Not";
          } else if (annotationObject[0].hasOwnProperty("$Gt")) {
            parsedAnnotationObject.collection.type = "Gt";
          } else if (annotationObject[0].hasOwnProperty("$Ge")) {
            parsedAnnotationObject.collection.type = "Ge";
          } else if (annotationObject[0].hasOwnProperty("$Lt")) {
            parsedAnnotationObject.collection.type = "Lt";
          } else if (annotationObject[0].hasOwnProperty("$Le")) {
            parsedAnnotationObject.collection.type = "Le";
          } else if (annotationObject[0].hasOwnProperty("$And")) {
            parsedAnnotationObject.collection.type = "And";
          } else if (annotationObject[0].hasOwnProperty("$Apply")) {
            parsedAnnotationObject.collection.type = "Apply";
          } else if (typeof annotationObject[0] === "object") {
            parsedAnnotationObject.collection.type = "Record";
          } else {
            parsedAnnotationObject.collection.type = "String";
          }
        }
      } else {
        const record = {
          propertyValues: []
        };
        if (annotationObject.$Type) {
          const typeValue = annotationObject.$Type;
          record.type = `${typeValue}`;
        }
        const propertyValues = [];
        for (const propertyKey in annotationObject) {
          if (propertyKey !== "$Type" && !propertyKey.startsWith("@")) {
            propertyValues.push(parsePropertyValue(annotationObject[propertyKey], propertyKey, currentAnnotationTarget, annotationLists, oCapabilities));
          } else if (propertyKey.startsWith("@")) {
            // Annotation of record
            createAnnotationLists({
              [propertyKey]: annotationObject[propertyKey]
            }, currentAnnotationTarget, annotationLists, oCapabilities);
          }
        }
        record.propertyValues = propertyValues;
        parsedAnnotationObject.record = record;
      }
      parsedAnnotationObject.isCollection = isCollection;
      currentOutAnnotationObject.annotations.push(parsedAnnotationObject);
    }
  }
  function prepareProperty(propertyDefinition, entityTypeObject, propertyName) {
    return {
      _type: "Property",
      name: propertyName,
      fullyQualifiedName: `${entityTypeObject.fullyQualifiedName}/${propertyName}`,
      type: propertyDefinition.$Type,
      maxLength: propertyDefinition.$MaxLength,
      precision: propertyDefinition.$Precision,
      scale: propertyDefinition.$Scale,
      nullable: propertyDefinition.$Nullable
    };
  }
  function prepareNavigationProperty(navPropertyDefinition, entityTypeObject, navPropertyName) {
    let referentialConstraint = [];
    if (navPropertyDefinition.$ReferentialConstraint) {
      referentialConstraint = Object.keys(navPropertyDefinition.$ReferentialConstraint).map(sourcePropertyName => {
        return {
          sourceTypeName: entityTypeObject.name,
          sourceProperty: sourcePropertyName,
          targetTypeName: navPropertyDefinition.$Type,
          targetProperty: navPropertyDefinition.$ReferentialConstraint[sourcePropertyName]
        };
      });
    }
    const navigationProperty = {
      _type: "NavigationProperty",
      name: navPropertyName,
      fullyQualifiedName: `${entityTypeObject.fullyQualifiedName}/${navPropertyName}`,
      partner: navPropertyDefinition.$Partner,
      isCollection: navPropertyDefinition.$isCollection ? navPropertyDefinition.$isCollection : false,
      containsTarget: navPropertyDefinition.$ContainsTarget,
      targetTypeName: navPropertyDefinition.$Type,
      referentialConstraint
    };
    return navigationProperty;
  }
  function prepareEntitySet(entitySetDefinition, entitySetName, entityContainerName) {
    const entitySetObject = {
      _type: "EntitySet",
      name: entitySetName,
      navigationPropertyBinding: {},
      entityTypeName: entitySetDefinition.$Type,
      fullyQualifiedName: `${entityContainerName}/${entitySetName}`
    };
    return entitySetObject;
  }
  function prepareSingleton(singletonDefinition, singletonName, entityContainerName) {
    return {
      _type: "Singleton",
      name: singletonName,
      navigationPropertyBinding: {},
      entityTypeName: singletonDefinition.$Type,
      fullyQualifiedName: `${entityContainerName}/${singletonName}`,
      nullable: true
    };
  }
  function prepareActionImport(actionImport, actionImportName, entityContainerName) {
    return {
      _type: "ActionImport",
      name: actionImportName,
      fullyQualifiedName: `${entityContainerName}/${actionImportName}`,
      actionName: actionImport.$Action
    };
  }
  function prepareTypeDefinition(typeDefinition, typeName, namespacePrefix) {
    const typeObject = {
      _type: "TypeDefinition",
      name: typeName.substring(namespacePrefix.length),
      fullyQualifiedName: typeName,
      underlyingType: typeDefinition.$UnderlyingType
    };
    return typeObject;
  }
  function prepareComplexType(complexTypeDefinition, complexTypeName, namespacePrefix) {
    const complexTypeObject = {
      _type: "ComplexType",
      name: complexTypeName.substring(namespacePrefix.length),
      fullyQualifiedName: complexTypeName,
      properties: [],
      navigationProperties: []
    };
    const complexTypeProperties = Object.keys(complexTypeDefinition).filter(propertyNameOrNot => {
      if (propertyNameOrNot != "$Key" && propertyNameOrNot != "$kind") {
        return complexTypeDefinition[propertyNameOrNot].$kind === "Property";
      }
    }).sort((a, b) => a > b ? 1 : -1).map(propertyName => {
      return prepareProperty(complexTypeDefinition[propertyName], complexTypeObject, propertyName);
    });
    complexTypeObject.properties = complexTypeProperties;
    const complexTypeNavigationProperties = Object.keys(complexTypeDefinition).filter(propertyNameOrNot => {
      if (propertyNameOrNot != "$Key" && propertyNameOrNot != "$kind") {
        return complexTypeDefinition[propertyNameOrNot].$kind === "NavigationProperty";
      }
    }).sort((a, b) => a > b ? 1 : -1).map(navPropertyName => {
      return prepareNavigationProperty(complexTypeDefinition[navPropertyName], complexTypeObject, navPropertyName);
    });
    complexTypeObject.navigationProperties = complexTypeNavigationProperties;
    return complexTypeObject;
  }
  function prepareEntityKeys(entityTypeDefinition, oMetaModelData) {
    if (!entityTypeDefinition.$Key && entityTypeDefinition.$BaseType) {
      return prepareEntityKeys(oMetaModelData[entityTypeDefinition.$BaseType], oMetaModelData);
    }
    return entityTypeDefinition.$Key ?? []; //handling of entity types without key as well as basetype
  }

  function prepareEntityType(entityTypeDefinition, entityTypeName, namespacePrefix, metaModelData) {
    var _metaModelData$$Annot, _metaModelData$$Annot2;
    const entityType = {
      _type: "EntityType",
      name: entityTypeName.substring(namespacePrefix.length),
      fullyQualifiedName: entityTypeName,
      keys: [],
      entityProperties: [],
      navigationProperties: [],
      actions: {}
    };
    for (const key in entityTypeDefinition) {
      const value = entityTypeDefinition[key];
      switch (value.$kind) {
        case "Property":
          const property = prepareProperty(value, entityType, key);
          entityType.entityProperties.push(property);
          break;
        case "NavigationProperty":
          const navigationProperty = prepareNavigationProperty(value, entityType, key);
          entityType.navigationProperties.push(navigationProperty);
          break;
      }
    }
    entityType.keys = prepareEntityKeys(entityTypeDefinition, metaModelData).map(entityKey => entityType.entityProperties.find(property => property.name === entityKey)).filter(property => property !== undefined);

    // Check if there are filter facets defined for the entityType and if yes, check if all of them have an ID
    // The ID is optional, but it is internally taken for grouping filter fields and if it's not present
    // a fallback ID needs to be generated here.
    (_metaModelData$$Annot = metaModelData.$Annotations[entityType.fullyQualifiedName]) === null || _metaModelData$$Annot === void 0 ? void 0 : (_metaModelData$$Annot2 = _metaModelData$$Annot[`@${"com.sap.vocabularies.UI.v1.FilterFacets"}`]) === null || _metaModelData$$Annot2 === void 0 ? void 0 : _metaModelData$$Annot2.forEach(filterFacetAnnotation => {
      filterFacetAnnotation.ID = createReferenceFacetId(filterFacetAnnotation);
    });
    for (const entityProperty of entityType.entityProperties) {
      if (!metaModelData.$Annotations[entityProperty.fullyQualifiedName]) {
        metaModelData.$Annotations[entityProperty.fullyQualifiedName] = {};
      }
      if (!metaModelData.$Annotations[entityProperty.fullyQualifiedName][`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`]) {
        metaModelData.$Annotations[entityProperty.fullyQualifiedName][`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`] = {
          $Type: "com.sap.vocabularies.UI.v1.DataField",
          Value: {
            $Path: entityProperty.name
          }
        };
      }
    }
    return entityType;
  }
  function prepareAction(actionName, actionRawData, namespacePrefix) {
    var _actionRawData$$Retur;
    let actionEntityType = "";
    let actionFQN = actionName;
    if (actionRawData.$IsBound) {
      const bindingParameter = actionRawData.$Parameter[0];
      actionEntityType = bindingParameter.$Type;
      if (bindingParameter.$isCollection === true) {
        actionFQN = `${actionName}(Collection(${actionEntityType}))`;
      } else {
        actionFQN = `${actionName}(${actionEntityType})`;
      }
    }
    const parameters = actionRawData.$Parameter ?? [];
    return {
      _type: "Action",
      name: actionName.substring(namespacePrefix.length),
      fullyQualifiedName: actionFQN,
      isBound: actionRawData.$IsBound ?? false,
      isFunction: actionRawData.$kind === "Function",
      sourceType: actionEntityType,
      returnType: ((_actionRawData$$Retur = actionRawData.$ReturnType) === null || _actionRawData$$Retur === void 0 ? void 0 : _actionRawData$$Retur.$Type) ?? "",
      parameters: parameters.map(param => {
        return {
          _type: "ActionParameter",
          fullyQualifiedName: `${actionFQN}/${param.$Name}`,
          isCollection: param.$isCollection ?? false,
          name: param.$Name,
          type: param.$Type,
          nullable: param.$Nullable ?? false,
          maxLength: param.$MaxLength,
          precision: param.$Precision,
          scale: param.$Scale
        };
      })
    };
  }
  function parseEntityContainer(namespacePrefix, entityContainerName, entityContainerMetadata, schema) {
    schema.entityContainer = {
      _type: "EntityContainer",
      name: entityContainerName.substring(namespacePrefix.length),
      fullyQualifiedName: entityContainerName
    };
    for (const elementName in entityContainerMetadata) {
      const elementValue = entityContainerMetadata[elementName];
      switch (elementValue.$kind) {
        case "EntitySet":
          schema.entitySets.push(prepareEntitySet(elementValue, elementName, entityContainerName));
          break;
        case "Singleton":
          schema.singletons.push(prepareSingleton(elementValue, elementName, entityContainerName));
          break;
        case "ActionImport":
          schema.actionImports.push(prepareActionImport(elementValue, elementName, entityContainerName));
          break;
      }
    }

    // link the navigation property bindings ($NavigationPropertyBinding)
    for (const entitySet of schema.entitySets) {
      const navPropertyBindings = entityContainerMetadata[entitySet.name].$NavigationPropertyBinding;
      if (navPropertyBindings) {
        for (const navPropName of Object.keys(navPropertyBindings)) {
          const targetEntitySet = schema.entitySets.find(entitySetName => entitySetName.name === navPropertyBindings[navPropName]);
          if (targetEntitySet) {
            entitySet.navigationPropertyBinding[navPropName] = targetEntitySet;
          }
        }
      }
    }
  }
  function parseAnnotations(annotations, capabilities) {
    const annotationLists = {};
    for (const target in annotations) {
      createAnnotationLists(annotations[target], target, annotationLists, capabilities);
    }
    return Object.values(annotationLists);
  }
  function parseSchema(metaModelData) {
    // assuming there is only one schema/namespace
    const namespacePrefix = Object.keys(metaModelData).find(key => metaModelData[key].$kind === "Schema") ?? "";
    const schema = {
      namespace: namespacePrefix.slice(0, -1),
      entityContainer: {
        _type: "EntityContainer",
        name: "",
        fullyQualifiedName: ""
      },
      entitySets: [],
      entityTypes: [],
      complexTypes: [],
      typeDefinitions: [],
      singletons: [],
      associations: [],
      associationSets: [],
      actions: [],
      actionImports: [],
      annotations: {}
    };
    const parseMetaModelElement = (name, value) => {
      switch (value.$kind) {
        case "EntityContainer":
          parseEntityContainer(namespacePrefix, name, value, schema);
          break;
        case "Action":
        case "Function":
          schema.actions.push(prepareAction(name, value, namespacePrefix));
          break;
        case "EntityType":
          schema.entityTypes.push(prepareEntityType(value, name, namespacePrefix, metaModelData));
          break;
        case "ComplexType":
          schema.complexTypes.push(prepareComplexType(value, name, namespacePrefix));
          break;
        case "TypeDefinition":
          schema.typeDefinitions.push(prepareTypeDefinition(value, name, namespacePrefix));
          break;
      }
    };
    for (const elementName in metaModelData) {
      const elementValue = metaModelData[elementName];
      if (Array.isArray(elementValue)) {
        // value can be an array in case of actions or functions
        for (const subElementValue of elementValue) {
          parseMetaModelElement(elementName, subElementValue);
        }
      } else {
        parseMetaModelElement(elementName, elementValue);
      }
    }
    return schema;
  }
  function parseMetaModel(metaModel) {
    let capabilities = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DefaultEnvironmentCapabilities;
    const result = {
      identification: "metamodelResult",
      version: "4.0",
      references: []
    };

    // parse the schema when it is accessed for the first time
    AnnotationConverter.lazy(result, "schema", () => {
      const metaModelData = metaModel.getObject("/$");
      const schema = parseSchema(metaModelData);
      AnnotationConverter.lazy(schema.annotations, "metamodelResult", () => parseAnnotations(metaModelData.$Annotations, capabilities));
      return schema;
    });
    return result;
  }
  _exports.parseMetaModel = parseMetaModel;
  const mMetaModelMap = {};

  /**
   * Convert the ODataMetaModel into another format that allow for easy manipulation of the annotations.
   *
   * @param oMetaModel The ODataMetaModel
   * @param oCapabilities The current capabilities
   * @returns An object containing object-like annotations
   */
  function convertTypes(oMetaModel, oCapabilities) {
    const sMetaModelId = oMetaModel.id;
    if (!mMetaModelMap.hasOwnProperty(sMetaModelId)) {
      const parsedOutput = parseMetaModel(oMetaModel, oCapabilities);
      try {
        mMetaModelMap[sMetaModelId] = AnnotationConverter.convert(parsedOutput);
      } catch (oError) {
        throw new Error(oError);
      }
    }
    return mMetaModelMap[sMetaModelId];
  }
  _exports.convertTypes = convertTypes;
  function getConvertedTypes(oContext) {
    const oMetaModel = oContext.getModel();
    if (!oMetaModel.isA("sap.ui.model.odata.v4.ODataMetaModel")) {
      throw new Error("This should only be called on a ODataMetaModel");
    }
    return convertTypes(oMetaModel);
  }
  _exports.getConvertedTypes = getConvertedTypes;
  function deleteModelCacheData(oMetaModel) {
    delete mMetaModelMap[oMetaModel.id];
  }
  _exports.deleteModelCacheData = deleteModelCacheData;
  function convertMetaModelContext(oMetaModelContext) {
    let bIncludeVisitedObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    const oConvertedMetadata = convertTypes(oMetaModelContext.getModel());
    const sPath = oMetaModelContext.getPath();
    const aPathSplit = sPath.split("/");
    let firstPart = aPathSplit[1];
    let beginIndex = 2;
    if (oConvertedMetadata.entityContainer.fullyQualifiedName === firstPart) {
      firstPart = aPathSplit[2];
      beginIndex++;
    }
    let targetEntitySet = oConvertedMetadata.entitySets.find(entitySet => entitySet.name === firstPart);
    if (!targetEntitySet) {
      targetEntitySet = oConvertedMetadata.singletons.find(singleton => singleton.name === firstPart);
    }
    let relativePath = aPathSplit.slice(beginIndex).join("/");
    const localObjects = [targetEntitySet];
    while (relativePath && relativePath.length > 0 && relativePath.startsWith("$NavigationPropertyBinding")) {
      var _sNavPropToCheck;
      let relativeSplit = relativePath.split("/");
      let idx = 0;
      let currentEntitySet, sNavPropToCheck;
      relativeSplit = relativeSplit.slice(1); // Removing "$NavigationPropertyBinding"
      while (!currentEntitySet && relativeSplit.length > idx) {
        if (relativeSplit[idx] !== "$NavigationPropertyBinding") {
          // Finding the correct entitySet for the navigaiton property binding example: "Set/_SalesOrder"
          sNavPropToCheck = relativeSplit.slice(0, idx + 1).join("/").replace("/$NavigationPropertyBinding", "");
          currentEntitySet = targetEntitySet && targetEntitySet.navigationPropertyBinding[sNavPropToCheck];
        }
        idx++;
      }
      if (!currentEntitySet) {
        // Fall back to Single nav prop if entitySet is not found.
        sNavPropToCheck = relativeSplit[0];
      }
      const aNavProps = ((_sNavPropToCheck = sNavPropToCheck) === null || _sNavPropToCheck === void 0 ? void 0 : _sNavPropToCheck.split("/")) || [];
      let targetEntityType = targetEntitySet && targetEntitySet.entityType;
      for (const sNavProp of aNavProps) {
        // Pushing all nav props to the visited objects. example: "Set", "_SalesOrder" for "Set/_SalesOrder"(in NavigationPropertyBinding)
        const targetNavProp = targetEntityType && targetEntityType.navigationProperties.find(navProp => navProp.name === sNavProp);
        if (targetNavProp) {
          localObjects.push(targetNavProp);
          targetEntityType = targetNavProp.targetType;
        } else {
          break;
        }
      }
      targetEntitySet = targetEntitySet && currentEntitySet || targetEntitySet && targetEntitySet.navigationPropertyBinding[relativeSplit[0]];
      if (targetEntitySet) {
        // Pushing the target entitySet to visited objects
        localObjects.push(targetEntitySet);
      }
      // Re-calculating the relative path
      // As each navigation name is enclosed between '$NavigationPropertyBinding' and '$' (to be able to access the entityset easily in the metamodel)
      // we need to remove the closing '$' to be able to switch to the next navigation
      relativeSplit = relativeSplit.slice(aNavProps.length || 1);
      if (relativeSplit.length && relativeSplit[0] === "$") {
        relativeSplit.shift();
      }
      relativePath = relativeSplit.join("/");
    }
    if (relativePath.startsWith("$Type")) {
      // As $Type@ is allowed as well
      if (relativePath.startsWith("$Type@")) {
        relativePath = relativePath.replace("$Type", "");
      } else {
        // We're anyway going to look on the entityType...
        relativePath = aPathSplit.slice(3).join("/");
      }
    }
    if (targetEntitySet && relativePath.length) {
      const oTarget = targetEntitySet.entityType.resolvePath(relativePath, bIncludeVisitedObjects);
      if (oTarget) {
        if (bIncludeVisitedObjects) {
          oTarget.visitedObjects = localObjects.concat(oTarget.visitedObjects);
        }
      } else if (targetEntitySet.entityType && targetEntitySet.entityType.actions) {
        // if target is an action or an action parameter
        const actions = targetEntitySet.entityType && targetEntitySet.entityType.actions;
        const relativeSplit = relativePath.split("/");
        if (actions[relativeSplit[0]]) {
          const action = actions[relativeSplit[0]];
          if (relativeSplit[1] && action.parameters) {
            const parameterName = relativeSplit[1];
            return action.parameters.find(parameter => {
              return parameter.fullyQualifiedName.endsWith(`/${parameterName}`);
            });
          } else if (relativePath.length === 1) {
            return action;
          }
        }
      }
      return oTarget;
    } else {
      if (bIncludeVisitedObjects) {
        return {
          target: targetEntitySet,
          visitedObjects: localObjects
        };
      }
      return targetEntitySet;
    }
  }
  _exports.convertMetaModelContext = convertMetaModelContext;
  function getInvolvedDataModelObjects(oMetaModelContext, oEntitySetMetaModelContext) {
    const oConvertedMetadata = convertTypes(oMetaModelContext.getModel());
    const metaModelContext = convertMetaModelContext(oMetaModelContext, true);
    let targetEntitySetLocation;
    if (oEntitySetMetaModelContext && oEntitySetMetaModelContext.getPath() !== "/") {
      targetEntitySetLocation = getInvolvedDataModelObjects(oEntitySetMetaModelContext);
    }
    return getInvolvedDataModelObjectFromPath(metaModelContext, oConvertedMetadata, targetEntitySetLocation);
  }
  _exports.getInvolvedDataModelObjects = getInvolvedDataModelObjects;
  function getInvolvedDataModelObjectFromPath(metaModelContext, convertedTypes, targetEntitySetLocation) {
    let onlyServiceObjects = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const dataModelObjects = metaModelContext.visitedObjects.filter(visitedObject => isServiceObject(visitedObject) && !isEntityType(visitedObject) && !isEntityContainer(visitedObject));
    if (isServiceObject(metaModelContext.target) && !isEntityType(metaModelContext.target) && dataModelObjects[dataModelObjects.length - 1] !== metaModelContext.target && !onlyServiceObjects) {
      dataModelObjects.push(metaModelContext.target);
    }
    const navigationProperties = [];
    const rootEntitySet = dataModelObjects[0];
    let currentEntitySet = rootEntitySet;
    let currentEntityType = rootEntitySet.entityType;
    let currentObject;
    let navigatedPath = [];
    for (let i = 1; i < dataModelObjects.length; i++) {
      currentObject = dataModelObjects[i];
      if (isNavigationProperty(currentObject)) {
        var _currentEntitySet;
        navigatedPath.push(currentObject.name);
        navigationProperties.push(currentObject);
        currentEntityType = currentObject.targetType;
        const boundEntitySet = (_currentEntitySet = currentEntitySet) === null || _currentEntitySet === void 0 ? void 0 : _currentEntitySet.navigationPropertyBinding[navigatedPath.join("/")];
        if (boundEntitySet !== undefined) {
          currentEntitySet = boundEntitySet;
          navigatedPath = [];
        }
      }
      if (isEntitySet(currentObject) || isSingleton(currentObject)) {
        currentEntitySet = currentObject;
        currentEntityType = currentEntitySet.entityType;
      }
    }
    if (navigatedPath.length > 0) {
      // Path without NavigationPropertyBinding --> no target entity set
      currentEntitySet = undefined;
    }
    if (targetEntitySetLocation && targetEntitySetLocation.startingEntitySet !== rootEntitySet) {
      // In case the entityset is not starting from the same location it may mean that we are doing too much work earlier for some reason
      // As such we need to redefine the context source for the targetEntitySetLocation
      const startingIndex = dataModelObjects.indexOf(targetEntitySetLocation.startingEntitySet);
      if (startingIndex !== -1) {
        // If it's not found I don't know what we can do (probably nothing)
        const requiredDataModelObjects = dataModelObjects.slice(0, startingIndex);
        targetEntitySetLocation.startingEntitySet = rootEntitySet;
        targetEntitySetLocation.navigationProperties = requiredDataModelObjects.filter(isNavigationProperty).concat(targetEntitySetLocation.navigationProperties);
      }
    }
    const outDataModelPath = {
      startingEntitySet: rootEntitySet,
      targetEntitySet: currentEntitySet,
      targetEntityType: currentEntityType,
      targetObject: metaModelContext.target,
      navigationProperties,
      contextLocation: targetEntitySetLocation,
      convertedTypes: convertedTypes
    };
    if (!isServiceObject(outDataModelPath.targetObject) && onlyServiceObjects) {
      outDataModelPath.targetObject = isServiceObject(currentObject) ? currentObject : undefined;
    }
    if (!outDataModelPath.contextLocation) {
      outDataModelPath.contextLocation = outDataModelPath;
    }
    return outDataModelPath;
  }
  _exports.getInvolvedDataModelObjectFromPath = getInvolvedDataModelObjectFromPath;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/MetaModelConverter", ["sap/fe/core/converters/common/AnnotationConverter","sap/fe/core/helpers/TypeGuards","../helpers/StableIdHelper"],function(e,t,n){"use strict";var i={};var o=n.prepareId;var a=t.isSingleton;var r=t.isServiceObject;var l=t.isNavigationProperty;var s=t.isEntityType;var p=t.isEntitySet;var y=t.isEntityContainer;const c={"Org.OData.Capabilities.V1":"Capabilities","Org.OData.Core.V1":"Core","Org.OData.Measures.V1":"Measures","com.sap.vocabularies.Common.v1":"Common","com.sap.vocabularies.UI.v1":"UI","com.sap.vocabularies.Session.v1":"Session","com.sap.vocabularies.Analytics.v1":"Analytics","com.sap.vocabularies.PersonalData.v1":"PersonalData","com.sap.vocabularies.Communication.v1":"Communication"};const f={Chart:true,MicroChart:true,UShell:true,IntentBasedNavigation:true,AppState:true,InsightsSupported:false};i.DefaultEnvironmentCapabilities=f;function u(e,t,n,i,o){let a;const r=`${n}/${t}`;const l=typeof e;if(e===null){a={type:"Null",Null:null}}else if(l==="string"){a={type:"String",String:e}}else if(l==="boolean"){a={type:"Bool",Bool:e}}else if(l==="number"){a={type:"Int",Int:e}}else if(Array.isArray(e)){a={type:"Collection",Collection:e.map((e,t)=>d(e,`${r}/${t}`,i,o))};if(e.length>0){if(e[0].hasOwnProperty("$PropertyPath")){a.Collection.type="PropertyPath"}else if(e[0].hasOwnProperty("$Path")){a.Collection.type="Path"}else if(e[0].hasOwnProperty("$NavigationPropertyPath")){a.Collection.type="NavigationPropertyPath"}else if(e[0].hasOwnProperty("$AnnotationPath")){a.Collection.type="AnnotationPath"}else if(e[0].hasOwnProperty("$Type")){a.Collection.type="Record"}else if(e[0].hasOwnProperty("$If")){a.Collection.type="If"}else if(e[0].hasOwnProperty("$Or")){a.Collection.type="Or"}else if(e[0].hasOwnProperty("$And")){a.Collection.type="And"}else if(e[0].hasOwnProperty("$Eq")){a.Collection.type="Eq"}else if(e[0].hasOwnProperty("$Ne")){a.Collection.type="Ne"}else if(e[0].hasOwnProperty("$Not")){a.Collection.type="Not"}else if(e[0].hasOwnProperty("$Gt")){a.Collection.type="Gt"}else if(e[0].hasOwnProperty("$Ge")){a.Collection.type="Ge"}else if(e[0].hasOwnProperty("$Lt")){a.Collection.type="Lt"}else if(e[0].hasOwnProperty("$Le")){a.Collection.type="Le"}else if(e[0].hasOwnProperty("$Apply")){a.Collection.type="Apply"}else if(typeof e[0]==="object"){a.Collection.type="Record"}else{a.Collection.type="String"}}}else if(e.$Path!==undefined){a={type:"Path",Path:e.$Path}}else if(e.$Decimal!==undefined){a={type:"Decimal",Decimal:parseFloat(e.$Decimal)}}else if(e.$PropertyPath!==undefined){a={type:"PropertyPath",PropertyPath:e.$PropertyPath}}else if(e.$NavigationPropertyPath!==undefined){a={type:"NavigationPropertyPath",NavigationPropertyPath:e.$NavigationPropertyPath}}else if(e.$If!==undefined){a={type:"If",If:e.$If}}else if(e.$And!==undefined){a={type:"And",And:e.$And}}else if(e.$Or!==undefined){a={type:"Or",Or:e.$Or}}else if(e.$Not!==undefined){a={type:"Not",Not:e.$Not}}else if(e.$Eq!==undefined){a={type:"Eq",Eq:e.$Eq}}else if(e.$Ne!==undefined){a={type:"Ne",Ne:e.$Ne}}else if(e.$Gt!==undefined){a={type:"Gt",Gt:e.$Gt}}else if(e.$Ge!==undefined){a={type:"Ge",Ge:e.$Ge}}else if(e.$Lt!==undefined){a={type:"Lt",Lt:e.$Lt}}else if(e.$Le!==undefined){a={type:"Le",Le:e.$Le}}else if(e.$Apply!==undefined){a={type:"Apply",Apply:e.$Apply,Function:e.$Function}}else if(e.$AnnotationPath!==undefined){a={type:"AnnotationPath",AnnotationPath:e.$AnnotationPath}}else if(e.$EnumMember!==undefined){a={type:"EnumMember",EnumMember:`${$(e.$EnumMember.split("/")[0])}/${e.$EnumMember.split("/")[1]}`}}else{a={type:"Record",Record:d(e,n,i,o)}}return{name:t,value:a}}function $(e){let[t,n]=e.split("@");if(!n){n=t;t=""}else{t+="@"}const i=n.lastIndexOf(".");return`${t+c[n.substr(0,i)]}.${n.substr(i+1)}`}function d(e,t,n,i){let o={};const a=typeof e;if(e===null){o={type:"Null",Null:null}}else if(a==="string"){o={type:"String",String:e}}else if(a==="boolean"){o={type:"Bool",Bool:e}}else if(a==="number"){o={type:"Int",Int:e}}else if(e.$AnnotationPath!==undefined){o={type:"AnnotationPath",AnnotationPath:e.$AnnotationPath}}else if(e.$Path!==undefined){o={type:"Path",Path:e.$Path}}else if(e.$Decimal!==undefined){o={type:"Decimal",Decimal:parseFloat(e.$Decimal)}}else if(e.$PropertyPath!==undefined){o={type:"PropertyPath",PropertyPath:e.$PropertyPath}}else if(e.$If!==undefined){o={type:"If",If:e.$If}}else if(e.$And!==undefined){o={type:"And",And:e.$And}}else if(e.$Or!==undefined){o={type:"Or",Or:e.$Or}}else if(e.$Not!==undefined){o={type:"Not",Not:e.$Not}}else if(e.$Eq!==undefined){o={type:"Eq",Eq:e.$Eq}}else if(e.$Ne!==undefined){o={type:"Ne",Ne:e.$Ne}}else if(e.$Gt!==undefined){o={type:"Gt",Gt:e.$Gt}}else if(e.$Ge!==undefined){o={type:"Ge",Ge:e.$Ge}}else if(e.$Lt!==undefined){o={type:"Lt",Lt:e.$Lt}}else if(e.$Le!==undefined){o={type:"Le",Le:e.$Le}}else if(e.$Apply!==undefined){o={type:"Apply",Apply:e.$Apply,Function:e.$Function}}else if(e.$NavigationPropertyPath!==undefined){o={type:"NavigationPropertyPath",NavigationPropertyPath:e.$NavigationPropertyPath}}else if(e.$EnumMember!==undefined){o={type:"EnumMember",EnumMember:`${$(e.$EnumMember.split("/")[0])}/${e.$EnumMember.split("/")[1]}`}}else if(Array.isArray(e)){const a=o;a.collection=e.map((e,o)=>d(e,`${t}/${o}`,n,i));if(e.length>0){if(e[0].hasOwnProperty("$PropertyPath")){a.collection.type="PropertyPath"}else if(e[0].hasOwnProperty("$Path")){a.collection.type="Path"}else if(e[0].hasOwnProperty("$NavigationPropertyPath")){a.collection.type="NavigationPropertyPath"}else if(e[0].hasOwnProperty("$AnnotationPath")){a.collection.type="AnnotationPath"}else if(e[0].hasOwnProperty("$Type")){a.collection.type="Record"}else if(e[0].hasOwnProperty("$If")){a.collection.type="If"}else if(e[0].hasOwnProperty("$And")){a.collection.type="And"}else if(e[0].hasOwnProperty("$Or")){a.collection.type="Or"}else if(e[0].hasOwnProperty("$Eq")){a.collection.type="Eq"}else if(e[0].hasOwnProperty("$Ne")){a.collection.type="Ne"}else if(e[0].hasOwnProperty("$Not")){a.collection.type="Not"}else if(e[0].hasOwnProperty("$Gt")){a.collection.type="Gt"}else if(e[0].hasOwnProperty("$Ge")){a.collection.type="Ge"}else if(e[0].hasOwnProperty("$Lt")){a.collection.type="Lt"}else if(e[0].hasOwnProperty("$Le")){a.collection.type="Le"}else if(e[0].hasOwnProperty("$Apply")){a.collection.type="Apply"}else if(typeof e[0]==="object"){a.collection.type="Record"}else{a.collection.type="String"}}}else{if(e.$Type){const t=e.$Type;o.type=t}const a=[];Object.keys(e).forEach(o=>{if(o!=="$Type"&&o!=="$If"&&o!=="$Apply"&&o!=="$And"&&o!=="$Or"&&o!=="$Ne"&&o!=="$Gt"&&o!=="$Ge"&&o!=="$Lt"&&o!=="$Le"&&o!=="$Not"&&o!=="$Eq"&&!o.startsWith("@")){a.push(u(e[o],o,t,n,i))}else if(o.startsWith("@")){O({[o]:e[o]},t,n,i)}});o.propertyValues=a}return o}function h(e,t){if(!t.hasOwnProperty(e)){t[e]={target:e,annotations:[]}}return t[e]}function P(e){const t=e.ID??e.Target.$AnnotationPath;return t?o(t):t}function m(e){return e.filter(e=>{if(e.Target&&e.Target.$AnnotationPath){return e.Target.$AnnotationPath.indexOf(`@${"com.sap.vocabularies.UI.v1.Chart"}`)===-1}else{return true}})}function g(e){return e.filter(e=>e.$Type!=="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")}function v(e){return e.filter(e=>e.$AnnotationPath!==`@${"com.sap.vocabularies.UI.v1.Chart"}`)}function O(e,t,n,i){var o;if(Object.keys(e).length===0){return}const a=h(t,n);if(!i.MicroChart){delete e[`@${"com.sap.vocabularies.UI.v1.Chart"}`]}for(const r in e){let l=r;let s=e[l];switch(l){case`@${"com.sap.vocabularies.UI.v1.HeaderFacets"}`:if(!i.MicroChart){s=m(s);e[l]=s}break;case`@${"com.sap.vocabularies.UI.v1.Identification"}`:if(!i.IntentBasedNavigation){s=g(s);e[l]=s}break;case`@${"com.sap.vocabularies.UI.v1.LineItem"}`:if(!i.IntentBasedNavigation){s=g(s);e[l]=s}if(!i.MicroChart){s=m(s);e[l]=s}break;case`@${"com.sap.vocabularies.UI.v1.FieldGroup"}`:if(!i.IntentBasedNavigation){s.Data=g(s.Data);e[l]=s}if(!i.MicroChart){s.Data=m(s.Data);e[l]=s}break;case`@${"com.sap.vocabularies.UI.v1.PresentationVariant"}`:if(!i.Chart&&s.Visualizations){s.Visualizations=v(s.Visualizations);e[l]=s}break;case`@com.sap.vocabularies.Common.v1.DraftRoot`:if(e[`@Org.OData.Capabilities.V1.FilterRestrictions`]&&(o=e[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions)!==null&&o!==void 0&&o.length){if(!e[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions.some(e=>{var t;return e===null||e===void 0?void 0:(t=e.Property)===null||t===void 0?void 0:t.$PropertyPath.includes("DraftAdministrativeData")})){e[`@Org.OData.Capabilities.V1.FilterRestrictions`].FilterExpressionRestrictions.push({$Type:"Org.OData.Capabilities.V1.FilterExpressionRestrictionType",AllowedExpressions:"SingleRange",Property:{$PropertyPath:"DraftAdministrativeData/CreationDateTime"}},{$Type:"Org.OData.Capabilities.V1.FilterExpressionRestrictionType",AllowedExpressions:"SingleRange",Property:{$PropertyPath:"DraftAdministrativeData/LastChangeDateTime"}})}}break;default:break}let p=a;const y=l.split("@");if(y.length>2){p=h(`${t}@${y[1]}`,n);l=y[2]}else{l=y[1]}const c=l.split("#");const f=c[1];l=c[0];const P={term:l,qualifier:f};let b=`${t}@${P.term}`;if(f){b+=`#${f}`}let N=false;const A=typeof s;if(s===null){P.value={type:"Null"}}else if(A==="string"){P.value={type:"String",String:s}}else if(A==="boolean"){P.value={type:"Bool",Bool:s}}else if(A==="number"){P.value={type:"Int",Int:s}}else if(s.$If!==undefined){P.value={type:"If",If:s.$If}}else if(s.$And!==undefined){P.value={type:"And",And:s.$And}}else if(s.$Or!==undefined){P.value={type:"Or",Or:s.$Or}}else if(s.$Not!==undefined){P.value={type:"Not",Not:s.$Not}}else if(s.$Eq!==undefined){P.value={type:"Eq",Eq:s.$Eq}}else if(s.$Ne!==undefined){P.value={type:"Ne",Ne:s.$Ne}}else if(s.$Gt!==undefined){P.value={type:"Gt",Gt:s.$Gt}}else if(s.$Ge!==undefined){P.value={type:"Ge",Ge:s.$Ge}}else if(s.$Lt!==undefined){P.value={type:"Lt",Lt:s.$Lt}}else if(s.$Le!==undefined){P.value={type:"Le",Le:s.$Le}}else if(s.$Apply!==undefined){P.value={type:"Apply",Apply:s.$Apply,Function:s.$Function}}else if(s.$Path!==undefined){P.value={type:"Path",Path:s.$Path}}else if(s.$AnnotationPath!==undefined){P.value={type:"AnnotationPath",AnnotationPath:s.$AnnotationPath}}else if(s.$Decimal!==undefined){P.value={type:"Decimal",Decimal:parseFloat(s.$Decimal)}}else if(s.$EnumMember!==undefined){P.value={type:"EnumMember",EnumMember:`${$(s.$EnumMember.split("/")[0])}/${s.$EnumMember.split("/")[1]}`}}else if(Array.isArray(s)){N=true;P.collection=s.map((e,t)=>d(e,`${b}/${t}`,n,i));if(s.length>0){if(s[0].hasOwnProperty("$PropertyPath")){P.collection.type="PropertyPath"}else if(s[0].hasOwnProperty("$Path")){P.collection.type="Path"}else if(s[0].hasOwnProperty("$NavigationPropertyPath")){P.collection.type="NavigationPropertyPath"}else if(s[0].hasOwnProperty("$AnnotationPath")){P.collection.type="AnnotationPath"}else if(s[0].hasOwnProperty("$Type")){P.collection.type="Record"}else if(s[0].hasOwnProperty("$If")){P.collection.type="If"}else if(s[0].hasOwnProperty("$Or")){P.collection.type="Or"}else if(s[0].hasOwnProperty("$Eq")){P.collection.type="Eq"}else if(s[0].hasOwnProperty("$Ne")){P.collection.type="Ne"}else if(s[0].hasOwnProperty("$Not")){P.collection.type="Not"}else if(s[0].hasOwnProperty("$Gt")){P.collection.type="Gt"}else if(s[0].hasOwnProperty("$Ge")){P.collection.type="Ge"}else if(s[0].hasOwnProperty("$Lt")){P.collection.type="Lt"}else if(s[0].hasOwnProperty("$Le")){P.collection.type="Le"}else if(s[0].hasOwnProperty("$And")){P.collection.type="And"}else if(s[0].hasOwnProperty("$Apply")){P.collection.type="Apply"}else if(typeof s[0]==="object"){P.collection.type="Record"}else{P.collection.type="String"}}}else{const e={propertyValues:[]};if(s.$Type){const t=s.$Type;e.type=`${t}`}const t=[];for(const e in s){if(e!=="$Type"&&!e.startsWith("@")){t.push(u(s[e],e,b,n,i))}else if(e.startsWith("@")){O({[e]:s[e]},b,n,i)}}e.propertyValues=t;P.record=e}P.isCollection=N;p.annotations.push(P)}}function b(e,t,n){return{_type:"Property",name:n,fullyQualifiedName:`${t.fullyQualifiedName}/${n}`,type:e.$Type,maxLength:e.$MaxLength,precision:e.$Precision,scale:e.$Scale,nullable:e.$Nullable}}function N(e,t,n){let i=[];if(e.$ReferentialConstraint){i=Object.keys(e.$ReferentialConstraint).map(n=>({sourceTypeName:t.name,sourceProperty:n,targetTypeName:e.$Type,targetProperty:e.$ReferentialConstraint[n]}))}const o={_type:"NavigationProperty",name:n,fullyQualifiedName:`${t.fullyQualifiedName}/${n}`,partner:e.$Partner,isCollection:e.$isCollection?e.$isCollection:false,containsTarget:e.$ContainsTarget,targetTypeName:e.$Type,referentialConstraint:i};return o}function A(e,t,n){const i={_type:"EntitySet",name:t,navigationPropertyBinding:{},entityTypeName:e.$Type,fullyQualifiedName:`${n}/${t}`};return i}function C(e,t,n){return{_type:"Singleton",name:t,navigationPropertyBinding:{},entityTypeName:e.$Type,fullyQualifiedName:`${n}/${t}`,nullable:true}}function T(e,t,n){return{_type:"ActionImport",name:t,fullyQualifiedName:`${n}/${t}`,actionName:e.$Action}}function w(e,t,n){const i={_type:"TypeDefinition",name:t.substring(n.length),fullyQualifiedName:t,underlyingType:e.$UnderlyingType};return i}function E(e,t,n){const i={_type:"ComplexType",name:t.substring(n.length),fullyQualifiedName:t,properties:[],navigationProperties:[]};const o=Object.keys(e).filter(t=>{if(t!="$Key"&&t!="$kind"){return e[t].$kind==="Property"}}).sort((e,t)=>e>t?1:-1).map(t=>b(e[t],i,t));i.properties=o;const a=Object.keys(e).filter(t=>{if(t!="$Key"&&t!="$kind"){return e[t].$kind==="NavigationProperty"}}).sort((e,t)=>e>t?1:-1).map(t=>N(e[t],i,t));i.navigationProperties=a;return i}function I(e,t){if(!e.$Key&&e.$BaseType){return I(t[e.$BaseType],t)}return e.$Key??[]}function D(e,t,n,i){var o,a;const r={_type:"EntityType",name:t.substring(n.length),fullyQualifiedName:t,keys:[],entityProperties:[],navigationProperties:[],actions:{}};for(const t in e){const n=e[t];switch(n.$kind){case"Property":const e=b(n,r,t);r.entityProperties.push(e);break;case"NavigationProperty":const i=N(n,r,t);r.navigationProperties.push(i);break}}r.keys=I(e,i).map(e=>r.entityProperties.find(t=>t.name===e)).filter(e=>e!==undefined);(o=i.$Annotations[r.fullyQualifiedName])===null||o===void 0?void 0:(a=o[`@${"com.sap.vocabularies.UI.v1.FilterFacets"}`])===null||a===void 0?void 0:a.forEach(e=>{e.ID=P(e)});for(const e of r.entityProperties){if(!i.$Annotations[e.fullyQualifiedName]){i.$Annotations[e.fullyQualifiedName]={}}if(!i.$Annotations[e.fullyQualifiedName][`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`]){i.$Annotations[e.fullyQualifiedName][`@${"com.sap.vocabularies.UI.v1.DataFieldDefault"}`]={$Type:"com.sap.vocabularies.UI.v1.DataField",Value:{$Path:e.name}}}}return r}function L(e,t,n){var i;let o="";let a=e;if(t.$IsBound){const n=t.$Parameter[0];o=n.$Type;if(n.$isCollection===true){a=`${e}(Collection(${o}))`}else{a=`${e}(${o})`}}const r=t.$Parameter??[];return{_type:"Action",name:e.substring(n.length),fullyQualifiedName:a,isBound:t.$IsBound??false,isFunction:t.$kind==="Function",sourceType:o,returnType:((i=t.$ReturnType)===null||i===void 0?void 0:i.$Type)??"",parameters:r.map(e=>({_type:"ActionParameter",fullyQualifiedName:`${a}/${e.$Name}`,isCollection:e.$isCollection??false,name:e.$Name,type:e.$Type,nullable:e.$Nullable??false,maxLength:e.$MaxLength,precision:e.$Precision,scale:e.$Scale}))}}function G(e,t,n,i){i.entityContainer={_type:"EntityContainer",name:t.substring(e.length),fullyQualifiedName:t};for(const e in n){const o=n[e];switch(o.$kind){case"EntitySet":i.entitySets.push(A(o,e,t));break;case"Singleton":i.singletons.push(C(o,e,t));break;case"ActionImport":i.actionImports.push(T(o,e,t));break}}for(const e of i.entitySets){const t=n[e.name].$NavigationPropertyBinding;if(t){for(const n of Object.keys(t)){const o=i.entitySets.find(e=>e.name===t[n]);if(o){e.navigationPropertyBinding[n]=o}}}}}function M(e,t){const n={};for(const i in e){O(e[i],i,n,t)}return Object.values(n)}function S(e){const t=Object.keys(e).find(t=>e[t].$kind==="Schema")??"";const n={namespace:t.slice(0,-1),entityContainer:{_type:"EntityContainer",name:"",fullyQualifiedName:""},entitySets:[],entityTypes:[],complexTypes:[],typeDefinitions:[],singletons:[],associations:[],associationSets:[],actions:[],actionImports:[],annotations:{}};const i=(i,o)=>{switch(o.$kind){case"EntityContainer":G(t,i,o,n);break;case"Action":case"Function":n.actions.push(L(i,o,t));break;case"EntityType":n.entityTypes.push(D(o,i,t,e));break;case"ComplexType":n.complexTypes.push(E(o,i,t));break;case"TypeDefinition":n.typeDefinitions.push(w(o,i,t));break}};for(const t in e){const n=e[t];if(Array.isArray(n)){for(const e of n){i(t,e)}}else{i(t,n)}}return n}function k(t){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:f;const i={identification:"metamodelResult",version:"4.0",references:[]};e.lazy(i,"schema",()=>{const i=t.getObject("/$");const o=S(i);e.lazy(o.annotations,"metamodelResult",()=>M(i.$Annotations,n));return o});return i}i.parseMetaModel=k;const F={};function j(t,n){const i=t.id;if(!F.hasOwnProperty(i)){const o=k(t,n);try{F[i]=e.convert(o)}catch(e){throw new Error(e)}}return F[i]}i.convertTypes=j;function B(e){const t=e.getModel();if(!t.isA("sap.ui.model.odata.v4.ODataMetaModel")){throw new Error("This should only be called on a ODataMetaModel")}return j(t)}i.getConvertedTypes=B;function R(e){delete F[e.id]}i.deleteModelCacheData=R;function x(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const n=j(e.getModel());const i=e.getPath();const o=i.split("/");let a=o[1];let r=2;if(n.entityContainer.fullyQualifiedName===a){a=o[2];r++}let l=n.entitySets.find(e=>e.name===a);if(!l){l=n.singletons.find(e=>e.name===a)}let s=o.slice(r).join("/");const p=[l];while(s&&s.length>0&&s.startsWith("$NavigationPropertyBinding")){var y;let e=s.split("/");let t=0;let n,i;e=e.slice(1);while(!n&&e.length>t){if(e[t]!=="$NavigationPropertyBinding"){i=e.slice(0,t+1).join("/").replace("/$NavigationPropertyBinding","");n=l&&l.navigationPropertyBinding[i]}t++}if(!n){i=e[0]}const o=((y=i)===null||y===void 0?void 0:y.split("/"))||[];let a=l&&l.entityType;for(const e of o){const t=a&&a.navigationProperties.find(t=>t.name===e);if(t){p.push(t);a=t.targetType}else{break}}l=l&&n||l&&l.navigationPropertyBinding[e[0]];if(l){p.push(l)}e=e.slice(o.length||1);if(e.length&&e[0]==="$"){e.shift()}s=e.join("/")}if(s.startsWith("$Type")){if(s.startsWith("$Type@")){s=s.replace("$Type","")}else{s=o.slice(3).join("/")}}if(l&&s.length){const e=l.entityType.resolvePath(s,t);if(e){if(t){e.visitedObjects=p.concat(e.visitedObjects)}}else if(l.entityType&&l.entityType.actions){const e=l.entityType&&l.entityType.actions;const t=s.split("/");if(e[t[0]]){const n=e[t[0]];if(t[1]&&n.parameters){const e=t[1];return n.parameters.find(t=>t.fullyQualifiedName.endsWith(`/${e}`))}else if(s.length===1){return n}}}return e}else{if(t){return{target:l,visitedObjects:p}}return l}}i.convertMetaModelContext=x;function Q(e,t){const n=j(e.getModel());const i=x(e,true);let o;if(t&&t.getPath()!=="/"){o=Q(t)}return q(i,n,o)}i.getInvolvedDataModelObjects=Q;function q(e,t,n){let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const o=e.visitedObjects.filter(e=>r(e)&&!s(e)&&!y(e));if(r(e.target)&&!s(e.target)&&o[o.length-1]!==e.target&&!i){o.push(e.target)}const c=[];const f=o[0];let u=f;let $=f.entityType;let d;let h=[];for(let e=1;e<o.length;e++){d=o[e];if(l(d)){var P;h.push(d.name);c.push(d);$=d.targetType;const e=(P=u)===null||P===void 0?void 0:P.navigationPropertyBinding[h.join("/")];if(e!==undefined){u=e;h=[]}}if(p(d)||a(d)){u=d;$=u.entityType}}if(h.length>0){u=undefined}if(n&&n.startingEntitySet!==f){const e=o.indexOf(n.startingEntitySet);if(e!==-1){const t=o.slice(0,e);n.startingEntitySet=f;n.navigationProperties=t.filter(l).concat(n.navigationProperties)}}const m={startingEntitySet:f,targetEntitySet:u,targetEntityType:$,targetObject:e.target,navigationProperties:c,contextLocation:n,convertedTypes:t};if(!r(m.targetObject)&&i){m.targetObject=r(d)?d:undefined}if(!m.contextLocation){m.contextLocation=m}return m}i.getInvolvedDataModelObjectFromPath=q;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/TemplateConverter-dbg", ["sap/base/util/merge", "sap/fe/core/converters/helpers/IssueManager", "./ConverterContext", "./ManifestSettings", "./MetaModelConverter", "./templates/ListReportConverter", "./templates/ObjectPageConverter"], function (merge, IssueManager, ConverterContext, ManifestSettings, MetaModelConverter, ListReportConverter, ObjectPageConverter) {
  "use strict";

  var _exports = {};
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertTypes = MetaModelConverter.convertTypes;
  var TemplateType = ManifestSettings.TemplateType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategoryType = IssueManager.IssueCategoryType;
  var IssueCategory = IssueManager.IssueCategory;
  function handleErrorForCollectionFacets(oFacets, oDiagnostics, sEntitySetName, level) {
    oFacets.forEach(oFacet => {
      let Message = `For entity set ${sEntitySetName}`;
      if ((oFacet === null || oFacet === void 0 ? void 0 : oFacet.$Type) === "com.sap.vocabularies.UI.v1.CollectionFacet" && !(oFacet !== null && oFacet !== void 0 && oFacet.ID)) {
        var _IssueCategoryType$Fa;
        Message = `${Message}, ` + `level ${level}, the collection facet does not have an ID.`;
        oDiagnostics.addIssue(IssueCategory.Facets, IssueSeverity.High, Message, IssueCategoryType, IssueCategoryType === null || IssueCategoryType === void 0 ? void 0 : (_IssueCategoryType$Fa = IssueCategoryType.Facets) === null || _IssueCategoryType$Fa === void 0 ? void 0 : _IssueCategoryType$Fa.MissingID);
      }
      if ((oFacet === null || oFacet === void 0 ? void 0 : oFacet.$Type) === "com.sap.vocabularies.UI.v1.CollectionFacet" && level >= 3) {
        var _IssueCategoryType$Fa2;
        Message = `${Message}, collection facet ${oFacet.Label} is not supported at ` + `level ${level}`;
        oDiagnostics.addIssue(IssueCategory.Facets, IssueSeverity.Medium, Message, IssueCategoryType, IssueCategoryType === null || IssueCategoryType === void 0 ? void 0 : (_IssueCategoryType$Fa2 = IssueCategoryType.Facets) === null || _IssueCategoryType$Fa2 === void 0 ? void 0 : _IssueCategoryType$Fa2.UnSupportedLevel);
      }
      if (oFacet !== null && oFacet !== void 0 && oFacet.Facets) {
        handleErrorForCollectionFacets(oFacet === null || oFacet === void 0 ? void 0 : oFacet.Facets, oDiagnostics, sEntitySetName, ++level);
        level = level - 1;
      }
    });
  }
  /**
   * Based on a template type, convert the metamodel and manifest definition into a json structure for the page.
   *
   * @param sTemplateType The template type
   * @param oMetaModel The odata model metaModel
   * @param oManifestSettings The current manifest settings
   * @param oDiagnostics The diagnostics wrapper
   * @param sFullContextPath The context path to reach this page
   * @param oCapabilities
   * @param component The template component
   * @returns The target page definition
   */
  function convertPage(sTemplateType, oMetaModel, oManifestSettings, oDiagnostics, sFullContextPath, oCapabilities, component) {
    var _oConvertedMetadata$e;
    const oConvertedMetadata = convertTypes(oMetaModel, oCapabilities);
    // TODO: This will have incomplete information because the conversion happens lazily
    oConvertedMetadata.diagnostics.forEach(annotationErrorDetail => {
      const checkIfIssueExists = oDiagnostics.checkIfIssueExists(IssueCategory.Annotation, IssueSeverity.High, annotationErrorDetail.message);
      if (!checkIfIssueExists) {
        oDiagnostics.addIssue(IssueCategory.Annotation, IssueSeverity.High, annotationErrorDetail.message);
      }
    });
    oConvertedMetadata === null || oConvertedMetadata === void 0 ? void 0 : (_oConvertedMetadata$e = oConvertedMetadata.entityTypes) === null || _oConvertedMetadata$e === void 0 ? void 0 : _oConvertedMetadata$e.forEach(oEntitySet => {
      var _oEntitySet$annotatio, _oEntitySet$annotatio2;
      if (oEntitySet !== null && oEntitySet !== void 0 && (_oEntitySet$annotatio = oEntitySet.annotations) !== null && _oEntitySet$annotatio !== void 0 && (_oEntitySet$annotatio2 = _oEntitySet$annotatio.UI) !== null && _oEntitySet$annotatio2 !== void 0 && _oEntitySet$annotatio2.Facets) {
        var _oEntitySet$annotatio3, _oEntitySet$annotatio4;
        handleErrorForCollectionFacets(oEntitySet === null || oEntitySet === void 0 ? void 0 : (_oEntitySet$annotatio3 = oEntitySet.annotations) === null || _oEntitySet$annotatio3 === void 0 ? void 0 : (_oEntitySet$annotatio4 = _oEntitySet$annotatio3.UI) === null || _oEntitySet$annotatio4 === void 0 ? void 0 : _oEntitySet$annotatio4.Facets, oDiagnostics, oEntitySet === null || oEntitySet === void 0 ? void 0 : oEntitySet.name, 1);
      }
    });
    const sTargetEntitySetName = oManifestSettings.entitySet;
    const sContextPath = (oManifestSettings === null || oManifestSettings === void 0 ? void 0 : oManifestSettings.contextPath) || (sFullContextPath === "/" ? sFullContextPath + sTargetEntitySetName : sFullContextPath);
    const oContext = oMetaModel.createBindingContext(sContextPath);
    const oFullContext = getInvolvedDataModelObjects(oContext);
    if (oFullContext) {
      let oConvertedPage = {};
      const converterContext = new ConverterContext(oConvertedMetadata, oManifestSettings, oDiagnostics, merge, oFullContext);
      switch (sTemplateType) {
        case TemplateType.ListReport:
        case TemplateType.AnalyticalListPage:
          oConvertedPage = ListReportConverter.convertPage(converterContext, oCapabilities === null || oCapabilities === void 0 ? void 0 : oCapabilities.InsightsSupported);
          break;
        case TemplateType.ObjectPage:
          oConvertedPage = ObjectPageConverter.convertPage(converterContext);
          break;
      }
      if (component !== null && component !== void 0 && component.extendPageDefinition) {
        oConvertedPage = component.extendPageDefinition(oConvertedPage, converterContext);
      }
      return oConvertedPage;
    }
    return undefined;
  }
  _exports.convertPage = convertPage;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/TemplateConverter", ["sap/base/util/merge","sap/fe/core/converters/helpers/IssueManager","./ConverterContext","./ManifestSettings","./MetaModelConverter","./templates/ListReportConverter","./templates/ObjectPageConverter"],function(e,t,o,n,i,a,s){"use strict";var l={};var v=i.getInvolvedDataModelObjects;var d=i.convertTypes;var c=n.TemplateType;var r=t.IssueSeverity;var u=t.IssueCategoryType;var f=t.IssueCategory;function g(e,t,o,n){e.forEach(e=>{let i=`For entity set ${o}`;if((e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.UI.v1.CollectionFacet"&&!(e!==null&&e!==void 0&&e.ID)){var a;i=`${i}, `+`level ${n}, the collection facet does not have an ID.`;t.addIssue(f.Facets,r.High,i,u,u===null||u===void 0?void 0:(a=u.Facets)===null||a===void 0?void 0:a.MissingID)}if((e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.UI.v1.CollectionFacet"&&n>=3){var s;i=`${i}, collection facet ${e.Label} is not supported at `+`level ${n}`;t.addIssue(f.Facets,r.Medium,i,u,u===null||u===void 0?void 0:(s=u.Facets)===null||s===void 0?void 0:s.UnSupportedLevel)}if(e!==null&&e!==void 0&&e.Facets){g(e===null||e===void 0?void 0:e.Facets,t,o,++n);n=n-1}})}function p(t,n,i,l,u,p,I){var h;const y=d(n,p);y.diagnostics.forEach(e=>{const t=l.checkIfIssueExists(f.Annotation,r.High,e.message);if(!t){l.addIssue(f.Annotation,r.High,e.message)}});y===null||y===void 0?void 0:(h=y.entityTypes)===null||h===void 0?void 0:h.forEach(e=>{var t,o;if(e!==null&&e!==void 0&&(t=e.annotations)!==null&&t!==void 0&&(o=t.UI)!==null&&o!==void 0&&o.Facets){var n,i;g(e===null||e===void 0?void 0:(n=e.annotations)===null||n===void 0?void 0:(i=n.UI)===null||i===void 0?void 0:i.Facets,l,e===null||e===void 0?void 0:e.name,1)}});const F=i.entitySet;const m=(i===null||i===void 0?void 0:i.contextPath)||(u==="/"?u+F:u);const C=n.createBindingContext(m);const b=v(C);if(b){let n={};const v=new o(y,i,l,e,b);switch(t){case c.ListReport:case c.AnalyticalListPage:n=a.convertPage(v,p===null||p===void 0?void 0:p.InsightsSupported);break;case c.ObjectPage:n=s.convertPage(v);break}if(I!==null&&I!==void 0&&I.extendPageDefinition){n=I.extendPageDefinition(n,v)}return n}return undefined}l.convertPage=p;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/annotations/DataField-dbg", ["sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/PropertyHelper", "../helpers/DataFieldHelper"], function (TypeGuards, DisplayModeFormatter, PropertyHelper, DataFieldHelper) {
  "use strict";

  var _exports = {};
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getAssociatedTimezoneProperty = PropertyHelper.getAssociatedTimezoneProperty;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var getDisplayMode = DisplayModeFormatter.getDisplayMode;
  var isProperty = TypeGuards.isProperty;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  /**
   * Identifies if the given dataFieldAbstract that is passed is a "DataFieldForActionAbstract".
   * DataFieldForActionAbstract has an inline action defined.
   *
   * @param dataField DataField to be evaluated
   * @returns Validates that dataField is a DataFieldForActionAbstractType
   */
  function isDataFieldForActionAbstract(dataField) {
    return dataField.hasOwnProperty("Action");
  }

  /**
   * Identifies if the given dataFieldAbstract that is passed is a "isDataFieldForAnnotation".
   * isDataFieldForAnnotation has an inline $Type property that can be used.
   *
   * @param dataField DataField to be evaluated
   * @returns Validates that dataField is a DataFieldForAnnotation
   */
  _exports.isDataFieldForActionAbstract = isDataFieldForActionAbstract;
  function isDataFieldForAnnotation(dataField) {
    return dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation";
  }
  _exports.isDataFieldForAnnotation = isDataFieldForAnnotation;
  function isDataFieldForAction(dataField) {
    return dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction";
  }

  /**
   * Identifies if the given dataFieldAbstract that is passed is a "DataFieldForIntentBasedNavigation".
   * DataFieldForIntentBasedNavigation has an inline $Type property that can be used.
   *
   * @param dataField DataField to be evaluated
   * @returns Validates that dataField is a DataFieldForIntentBasedNavigation
   */
  _exports.isDataFieldForAction = isDataFieldForAction;
  function isDataFieldForIntentBasedNavigation(dataField) {
    return dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation";
  }

  /**
   * Identifies if the given dataFieldAbstract that is passed is a "DataField".
   * DataField has a value defined.
   *
   * @param dataField DataField to be evaluated
   * @returns Validate that dataField is a DataFieldTypes
   */
  _exports.isDataFieldForIntentBasedNavigation = isDataFieldForIntentBasedNavigation;
  function isDataFieldTypes(dataField) {
    return dataField.hasOwnProperty("Value");
  }

  /**
   * Determine if the data model object path targeting a dataField for action opens up a dialog.
   *
   * @param dataModelObjectPath DataModelObjectPath
   * @returns `Dialog` | `None` if a dialog is needed
   */
  _exports.isDataFieldTypes = isDataFieldTypes;
  function isDataModelObjectPathForActionWithDialog(dataModelObjectPath) {
    const target = dataModelObjectPath.targetObject;
    return isActionWithDialog(isDataFieldForAction(target) ? target : undefined);
  }

  /**
   * Determine if the dataField for action opens up a dialog.
   *
   * @param dataField DataField for action
   * @returns `Dialog` | `None` if a dialog is needed
   */
  _exports.isDataModelObjectPathForActionWithDialog = isDataModelObjectPathForActionWithDialog;
  function isActionWithDialog(dataField) {
    const action = dataField === null || dataField === void 0 ? void 0 : dataField.ActionTarget;
    if (action) {
      var _action$annotations, _action$annotations$C;
      const bCritical = (_action$annotations = action.annotations) === null || _action$annotations === void 0 ? void 0 : (_action$annotations$C = _action$annotations.Common) === null || _action$annotations$C === void 0 ? void 0 : _action$annotations$C.IsActionCritical;
      if (action.parameters.length > 1 || bCritical) {
        return "Dialog";
      } else {
        return "None";
      }
    } else {
      return "None";
    }
  }

  /**
   * Retrieves the TargetValue from a DataPoint.
   *
   * @param source the target property or DataPoint
   * @returns The TargetValue as a decimal or a property path
   */
  _exports.isActionWithDialog = isActionWithDialog;
  function getTargetValueOnDataPoint(source) {
    let targetValue;
    if (isProperty(source)) {
      var _source$annotations, _source$annotations$U, _source$annotations$U2, _source$annotations$U3, _source$annotations$U4, _source$annotations2, _source$annotations2$, _source$annotations2$2, _source$annotations2$3, _source$annotations2$4;
      targetValue = ((_source$annotations = source.annotations) === null || _source$annotations === void 0 ? void 0 : (_source$annotations$U = _source$annotations.UI) === null || _source$annotations$U === void 0 ? void 0 : (_source$annotations$U2 = _source$annotations$U.DataFieldDefault) === null || _source$annotations$U2 === void 0 ? void 0 : (_source$annotations$U3 = _source$annotations$U2.Target) === null || _source$annotations$U3 === void 0 ? void 0 : (_source$annotations$U4 = _source$annotations$U3.$target) === null || _source$annotations$U4 === void 0 ? void 0 : _source$annotations$U4.TargetValue) ?? ((_source$annotations2 = source.annotations) === null || _source$annotations2 === void 0 ? void 0 : (_source$annotations2$ = _source$annotations2.UI) === null || _source$annotations2$ === void 0 ? void 0 : (_source$annotations2$2 = _source$annotations2$.DataFieldDefault) === null || _source$annotations2$2 === void 0 ? void 0 : (_source$annotations2$3 = _source$annotations2$2.Target) === null || _source$annotations2$3 === void 0 ? void 0 : (_source$annotations2$4 = _source$annotations2$3.$target) === null || _source$annotations2$4 === void 0 ? void 0 : _source$annotations2$4.MaximumValue);
    } else {
      targetValue = source.TargetValue ?? source.MaximumValue;
    }
    if (typeof targetValue === "number") {
      return targetValue.toString();
    }
    return isPathAnnotationExpression(targetValue) ? targetValue : "100";
  }

  /**
   * Check if a property uses a DataPoint within a DataFieldDefault.
   *
   * @param property The property to be checked
   * @returns `true` if the referenced property has a DataPoint within the DataFieldDefault, false else
   * @private
   */
  _exports.getTargetValueOnDataPoint = getTargetValueOnDataPoint;
  const isDataPointFromDataFieldDefault = function (property) {
    var _property$annotations, _property$annotations2, _property$annotations3, _property$annotations4, _property$annotations5;
    return ((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.UI) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.DataFieldDefault) === null || _property$annotations3 === void 0 ? void 0 : (_property$annotations4 = _property$annotations3.Target) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.$target) === null || _property$annotations5 === void 0 ? void 0 : _property$annotations5.$Type) === "com.sap.vocabularies.UI.v1.DataPointType";
  };
  _exports.isDataPointFromDataFieldDefault = isDataPointFromDataFieldDefault;
  function getSemanticObjectPath(converterContext, object) {
    if (typeof object === "object") {
      var _object$Value;
      if (isDataFieldTypes(object) && (_object$Value = object.Value) !== null && _object$Value !== void 0 && _object$Value.$target) {
        var _object$Value2, _property$annotations6, _property$annotations7;
        const property = (_object$Value2 = object.Value) === null || _object$Value2 === void 0 ? void 0 : _object$Value2.$target;
        if ((property === null || property === void 0 ? void 0 : (_property$annotations6 = property.annotations) === null || _property$annotations6 === void 0 ? void 0 : (_property$annotations7 = _property$annotations6.Common) === null || _property$annotations7 === void 0 ? void 0 : _property$annotations7.SemanticObject) !== undefined) {
          return converterContext.getEntitySetBasedAnnotationPath(property === null || property === void 0 ? void 0 : property.fullyQualifiedName);
        }
      } else if (isProperty(object)) {
        var _object$annotations, _object$annotations$C;
        if ((object === null || object === void 0 ? void 0 : (_object$annotations = object.annotations) === null || _object$annotations === void 0 ? void 0 : (_object$annotations$C = _object$annotations.Common) === null || _object$annotations$C === void 0 ? void 0 : _object$annotations$C.SemanticObject) !== undefined) {
          return converterContext.getEntitySetBasedAnnotationPath(object === null || object === void 0 ? void 0 : object.fullyQualifiedName);
        }
      }
    }
    return undefined;
  }

  /**
   * Returns the navigation path prefix for a property path.
   *
   * @param path The property path For e.g. /EntityType/Navigation/Property
   * @returns The navigation path prefix For e.g. /EntityType/Navigation/
   */
  _exports.getSemanticObjectPath = getSemanticObjectPath;
  function _getNavigationPathPrefix(path) {
    if (path) {
      return path.indexOf("/") > -1 ? path.substring(0, path.lastIndexOf("/") + 1) : "";
    }
    return "";
  }

  /**
   * Collect additional properties for the ALP table use-case.
   *
   * For e.g. If UI.Hidden points to a property, include this property in the additionalProperties of ComplexPropertyInfo object.
   *
   * @param target Property or DataField being processed
   * @param navigationPathPrefix Navigation path prefix, applicable in case of navigation properties.
   * @param tableType Table type.
   * @param relatedProperties The related properties identified so far.
   * @returns The related properties identified.
   */
  function _collectAdditionalPropertiesForAnalyticalTable(target, navigationPathPrefix, tableType, relatedProperties) {
    if (tableType === "AnalyticalTable") {
      var _target$annotations, _target$annotations$U;
      const hiddenAnnotation = (_target$annotations = target.annotations) === null || _target$annotations === void 0 ? void 0 : (_target$annotations$U = _target$annotations.UI) === null || _target$annotations$U === void 0 ? void 0 : _target$annotations$U.Hidden;
      if (hiddenAnnotation !== null && hiddenAnnotation !== void 0 && hiddenAnnotation.path && isProperty(hiddenAnnotation.$target)) {
        const hiddenAnnotationPropertyPath = navigationPathPrefix + hiddenAnnotation.path;
        // This property should be added to additionalProperties map for the ALP table use-case.
        relatedProperties.additionalProperties[hiddenAnnotationPropertyPath] = hiddenAnnotation.$target;
      }
      const criticality = target.Criticality;
      if (criticality !== null && criticality !== void 0 && criticality.path && isProperty(criticality === null || criticality === void 0 ? void 0 : criticality.$target)) {
        const criticalityPropertyPath = navigationPathPrefix + criticality.path;
        relatedProperties.additionalProperties[criticalityPropertyPath] = criticality === null || criticality === void 0 ? void 0 : criticality.$target;
      }
    }
    return relatedProperties;
  }

  /**
   * Collect related properties from a property's annotations.
   *
   * @param path The property path
   * @param property The property to be considered
   * @param converterContext The converter context
   * @param ignoreSelf Whether to exclude the same property from related properties.
   * @param tableType The table type.
   * @param relatedProperties The related properties identified so far.
   * @param addUnitInTemplate True if the unit/currency property needs to be added in the export template
   * @param isAnnotatedAsHidden True if the DataField or the property are statically hidden
   * @returns The related properties identified.
   */
  function collectRelatedProperties(path, property, converterContext, ignoreSelf, tableType) {
    let relatedProperties = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
      properties: {},
      additionalProperties: {},
      textOnlyPropertiesFromTextAnnotation: []
    };
    let addUnitInTemplate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    let isAnnotatedAsHidden = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
    /**
     * Helper to push unique related properties.
     *
     * @param key The property path
     * @param value The properties object containing value property, description property...
     * @returns Index at which the property is available
     */
    function _pushUnique(key, value) {
      if (!relatedProperties.properties.hasOwnProperty(key)) {
        relatedProperties.properties[key] = value;
      }
      return Object.keys(relatedProperties.properties).indexOf(key);
    }

    /**
     * Helper to append the export settings template with a formatted text.
     *
     * @param value Formatted text
     */
    function _appendTemplate(value) {
      relatedProperties.exportSettingsTemplate = relatedProperties.exportSettingsTemplate ? `${relatedProperties.exportSettingsTemplate}${value}` : `${value}`;
    }
    if (path && property) {
      var _property$annotations8, _property$annotations9;
      let valueIndex;
      let targetValue;
      let currencyOrUoMIndex;
      let timezoneOrUoMIndex;
      let dataPointIndex;
      if (isAnnotatedAsHidden) {
        // Collect underlying property
        valueIndex = _pushUnique(path, property);
        _appendTemplate(`{${valueIndex}}`);
        return relatedProperties;
      }
      const navigationPathPrefix = _getNavigationPathPrefix(path);

      // Check for Text annotation.
      const textAnnotation = (_property$annotations8 = property.annotations) === null || _property$annotations8 === void 0 ? void 0 : (_property$annotations9 = _property$annotations8.Common) === null || _property$annotations9 === void 0 ? void 0 : _property$annotations9.Text;
      if (relatedProperties.exportSettingsTemplate) {
        // FieldGroup use-case. Need to add each Field in new line.
        _appendTemplate("\n");
        relatedProperties.exportSettingsWrapping = true;
      }
      if (textAnnotation !== null && textAnnotation !== void 0 && textAnnotation.path && textAnnotation !== null && textAnnotation !== void 0 && textAnnotation.$target) {
        // Check for Text Arrangement.
        const dataModelObjectPath = converterContext.getDataModelObjectPath();
        const textAnnotationPropertyPath = navigationPathPrefix + textAnnotation.path;
        const displayMode = getDisplayMode(property, dataModelObjectPath);
        let descriptionIndex;
        switch (displayMode) {
          case "Value":
            valueIndex = _pushUnique(path, property);
            _appendTemplate(`{${valueIndex}}`);
            break;
          case "Description":
            descriptionIndex = _pushUnique(textAnnotationPropertyPath, textAnnotation.$target);
            _appendTemplate(`{${descriptionIndex}}`);
            relatedProperties.textOnlyPropertiesFromTextAnnotation.push(textAnnotationPropertyPath);
            break;
          case "ValueDescription":
            valueIndex = _pushUnique(path, property);
            descriptionIndex = _pushUnique(textAnnotationPropertyPath, textAnnotation.$target);
            _appendTemplate(`{${valueIndex}} ({${descriptionIndex}})`);
            break;
          case "DescriptionValue":
            valueIndex = _pushUnique(path, property);
            descriptionIndex = _pushUnique(textAnnotationPropertyPath, textAnnotation.$target);
            _appendTemplate(`{${descriptionIndex}} ({${valueIndex}})`);
            break;
          // no default
        }
      } else {
        var _property$annotations10, _property$annotations11, _property$annotations12, _property$annotations13, _property$annotations14, _property$annotations15, _property$Target, _property$Target$$tar, _property$Target2, _property$Target2$$ta, _property$annotations16, _property$annotations17, _property$annotations18, _property$annotations19, _property$annotations20;
        // Check for field containing Currency Or Unit Properties or Timezone
        const currencyOrUoMProperty = getAssociatedCurrencyProperty(property) || getAssociatedUnitProperty(property);
        const currencyOrUnitAnnotation = (property === null || property === void 0 ? void 0 : (_property$annotations10 = property.annotations) === null || _property$annotations10 === void 0 ? void 0 : (_property$annotations11 = _property$annotations10.Measures) === null || _property$annotations11 === void 0 ? void 0 : _property$annotations11.ISOCurrency) || (property === null || property === void 0 ? void 0 : (_property$annotations12 = property.annotations) === null || _property$annotations12 === void 0 ? void 0 : (_property$annotations13 = _property$annotations12.Measures) === null || _property$annotations13 === void 0 ? void 0 : _property$annotations13.Unit);
        const timezoneProperty = getAssociatedTimezoneProperty(property);
        const timezoneAnnotation = property === null || property === void 0 ? void 0 : (_property$annotations14 = property.annotations) === null || _property$annotations14 === void 0 ? void 0 : (_property$annotations15 = _property$annotations14.Common) === null || _property$annotations15 === void 0 ? void 0 : _property$annotations15.Timezone;
        if (currencyOrUoMProperty && currencyOrUnitAnnotation !== null && currencyOrUnitAnnotation !== void 0 && currencyOrUnitAnnotation.$target) {
          valueIndex = _pushUnique(path, property);
          currencyOrUoMIndex = _pushUnique(navigationPathPrefix + currencyOrUnitAnnotation.path, currencyOrUnitAnnotation.$target);
          if (addUnitInTemplate) {
            _appendTemplate(`{${valueIndex}}  {${currencyOrUoMIndex}}`);
          } else {
            relatedProperties.exportUnitName = navigationPathPrefix + currencyOrUnitAnnotation.path;
          }
        } else if (timezoneProperty && timezoneAnnotation !== null && timezoneAnnotation !== void 0 && timezoneAnnotation.$target) {
          valueIndex = _pushUnique(path, property);
          timezoneOrUoMIndex = _pushUnique(navigationPathPrefix + timezoneAnnotation.path, timezoneAnnotation.$target);
          if (addUnitInTemplate) {
            _appendTemplate(`{${valueIndex}}  {${timezoneOrUoMIndex}}`);
          } else {
            relatedProperties.exportTimezoneName = navigationPathPrefix + timezoneAnnotation.path;
          }
        } else if (((_property$Target = property.Target) === null || _property$Target === void 0 ? void 0 : (_property$Target$$tar = _property$Target.$target) === null || _property$Target$$tar === void 0 ? void 0 : _property$Target$$tar.$Type) === "com.sap.vocabularies.UI.v1.DataPointType" && !((_property$Target2 = property.Target) !== null && _property$Target2 !== void 0 && (_property$Target2$$ta = _property$Target2.$target) !== null && _property$Target2$$ta !== void 0 && _property$Target2$$ta.ValueFormat) || ((_property$annotations16 = property.annotations) === null || _property$annotations16 === void 0 ? void 0 : (_property$annotations17 = _property$annotations16.UI) === null || _property$annotations17 === void 0 ? void 0 : (_property$annotations18 = _property$annotations17.DataFieldDefault) === null || _property$annotations18 === void 0 ? void 0 : (_property$annotations19 = _property$annotations18.Target) === null || _property$annotations19 === void 0 ? void 0 : (_property$annotations20 = _property$annotations19.$target) === null || _property$annotations20 === void 0 ? void 0 : _property$annotations20.$Type) === "com.sap.vocabularies.UI.v1.DataPointType") {
          var _property$Target3, _property$Target3$$ta, _property$Target4, _property$annotations21, _property$annotations22;
          const dataPointProperty = (_property$Target3 = property.Target) === null || _property$Target3 === void 0 ? void 0 : (_property$Target3$$ta = _property$Target3.$target) === null || _property$Target3$$ta === void 0 ? void 0 : _property$Target3$$ta.Value.$target;
          const datapointTarget = (_property$Target4 = property.Target) === null || _property$Target4 === void 0 ? void 0 : _property$Target4.$target;
          // DataPoint use-case using DataFieldDefault.
          const dataPointDefaultProperty = (_property$annotations21 = property.annotations) === null || _property$annotations21 === void 0 ? void 0 : (_property$annotations22 = _property$annotations21.UI) === null || _property$annotations22 === void 0 ? void 0 : _property$annotations22.DataFieldDefault;
          valueIndex = _pushUnique(navigationPathPrefix ? navigationPathPrefix + path : path, dataPointDefaultProperty ? property : dataPointProperty);
          targetValue = getTargetValueOnDataPoint(dataPointDefaultProperty ? property : datapointTarget);
          if (isProperty(targetValue.$target)) {
            //in case it's a dynamic targetValue
            targetValue = targetValue;
            dataPointIndex = _pushUnique(navigationPathPrefix ? navigationPathPrefix + targetValue.$target.name : targetValue.$target.name, targetValue.$target);
            _appendTemplate(`{${valueIndex}}/{${dataPointIndex}}`);
          } else {
            relatedProperties.exportDataPointTargetValue = targetValue;
            _appendTemplate(`{${valueIndex}}/${targetValue}`);
          }
        } else if (property.$Type === "com.sap.vocabularies.Communication.v1.ContactType") {
          var _property$fn, _property$fn2;
          const contactProperty = (_property$fn = property.fn) === null || _property$fn === void 0 ? void 0 : _property$fn.$target;
          const contactPropertyPath = (_property$fn2 = property.fn) === null || _property$fn2 === void 0 ? void 0 : _property$fn2.path;
          valueIndex = _pushUnique(navigationPathPrefix ? navigationPathPrefix + contactPropertyPath : contactPropertyPath, contactProperty);
          _appendTemplate(`{${valueIndex}}`);
        } else if (!ignoreSelf) {
          // Collect underlying property
          valueIndex = _pushUnique(path, property);
          _appendTemplate(`{${valueIndex}}`);
          if (currencyOrUnitAnnotation) {
            relatedProperties.exportUnitString = `${currencyOrUnitAnnotation}`; // Hard-coded currency/unit
          } else if (timezoneAnnotation) {
            relatedProperties.exportTimezoneString = `${timezoneAnnotation}`; // Hard-coded timezone
          }
        }
      }

      relatedProperties = _collectAdditionalPropertiesForAnalyticalTable(property, navigationPathPrefix, tableType, relatedProperties);
      if (Object.keys(relatedProperties.additionalProperties).length > 0 && Object.keys(relatedProperties.properties).length === 0) {
        // Collect underlying property if not collected already.
        // This is to ensure that additionalProperties are made available only to complex property infos.
        valueIndex = _pushUnique(path, property);
        _appendTemplate(`{${valueIndex}}`);
      }
    }
    return relatedProperties;
  }

  /**
   * Collect properties consumed by a DataField.
   * This is for populating the ComplexPropertyInfos of the table delegate.
   *
   * @param dataField The DataField for which the properties need to be identified.
   * @param converterContext The converter context.
   * @param tableType The table type.
   * @param relatedProperties The properties identified so far.
   * @param isEmbedded True if the DataField is embedded in another annotation (e.g. FieldGroup).
   * @returns The properties related to the DataField.
   */
  _exports.collectRelatedProperties = collectRelatedProperties;
  function collectRelatedPropertiesRecursively(dataField, converterContext, tableType) {
    var _dataField$Target, _dataField$Target$$ta, _dataField$Target$$ta2;
    let relatedProperties = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
      properties: {},
      additionalProperties: {},
      textOnlyPropertiesFromTextAnnotation: []
    };
    let isEmbedded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    let isStaticallyHidden = false;
    switch (dataField === null || dataField === void 0 ? void 0 : dataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        if (dataField.Value) {
          var _property$$target, _property$$target$ann, _property$$target$ann2;
          const property = dataField.Value;
          isStaticallyHidden = isReferencePropertyStaticallyHidden((_property$$target = property.$target) === null || _property$$target === void 0 ? void 0 : (_property$$target$ann = _property$$target.annotations) === null || _property$$target$ann === void 0 ? void 0 : (_property$$target$ann2 = _property$$target$ann.UI) === null || _property$$target$ann2 === void 0 ? void 0 : _property$$target$ann2.DataFieldDefault) || isReferencePropertyStaticallyHidden(dataField) || false;
          relatedProperties = collectRelatedProperties(property.path, property.$target, converterContext, false, tableType, relatedProperties, isEmbedded, isStaticallyHidden);
          const navigationPathPrefix = _getNavigationPathPrefix(property.path);
          relatedProperties = _collectAdditionalPropertiesForAnalyticalTable(dataField, navigationPathPrefix, tableType, relatedProperties);
        }
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAction":
      case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        switch ((_dataField$Target = dataField.Target) === null || _dataField$Target === void 0 ? void 0 : (_dataField$Target$$ta = _dataField$Target.$target) === null || _dataField$Target$$ta === void 0 ? void 0 : _dataField$Target$$ta.$Type) {
          case "com.sap.vocabularies.UI.v1.FieldGroupType":
            (_dataField$Target$$ta2 = dataField.Target.$target.Data) === null || _dataField$Target$$ta2 === void 0 ? void 0 : _dataField$Target$$ta2.forEach(innerDataField => {
              relatedProperties = collectRelatedPropertiesRecursively(innerDataField, converterContext, tableType, relatedProperties, true);
            });
            break;
          case "com.sap.vocabularies.UI.v1.DataPointType":
            isStaticallyHidden = isReferencePropertyStaticallyHidden(dataField) ?? false;
            relatedProperties = collectRelatedProperties(dataField.Target.$target.Value.path, dataField, converterContext, false, tableType, relatedProperties, isEmbedded, isStaticallyHidden);
            break;
          case "com.sap.vocabularies.Communication.v1.ContactType":
            const dataFieldContact = dataField.Target.$target;
            isStaticallyHidden = isReferencePropertyStaticallyHidden(dataField) ?? false;
            relatedProperties = collectRelatedProperties(dataField.Target.value, dataFieldContact, converterContext, isStaticallyHidden, tableType, relatedProperties, isEmbedded, isStaticallyHidden);
            break;
          default:
            break;
        }
        break;
      default:
        break;
    }
    return relatedProperties;
  }
  _exports.collectRelatedPropertiesRecursively = collectRelatedPropertiesRecursively;
  const getDataFieldDataType = function (oDataField) {
    var _Value, _Value$$target, _oDataField$Target, _oDataField$Target$$t;
    if (isProperty(oDataField)) {
      return oDataField.type;
    }
    let sDataType;
    switch (oDataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataFieldForActionGroup":
      case "com.sap.vocabularies.UI.v1.DataFieldWithActionGroup":
      case "com.sap.vocabularies.UI.v1.DataFieldForAction":
      case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        sDataType = undefined;
        break;
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        sDataType = oDataField === null || oDataField === void 0 ? void 0 : (_Value = oDataField.Value) === null || _Value === void 0 ? void 0 : (_Value$$target = _Value.$target) === null || _Value$$target === void 0 ? void 0 : _Value$$target.type;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
      default:
        const sDataTypeForDataFieldForAnnotation = (_oDataField$Target = oDataField.Target) === null || _oDataField$Target === void 0 ? void 0 : (_oDataField$Target$$t = _oDataField$Target.$target) === null || _oDataField$Target$$t === void 0 ? void 0 : _oDataField$Target$$t.$Type;
        if (sDataTypeForDataFieldForAnnotation) {
          var _oDataField$Target2;
          const dataFieldTarget = (_oDataField$Target2 = oDataField.Target) === null || _oDataField$Target2 === void 0 ? void 0 : _oDataField$Target2.$target;
          if (dataFieldTarget.$Type === "com.sap.vocabularies.Communication.v1.ContactType") {
            var _dataFieldTarget$fn, _dataFieldTarget$fn$$;
            sDataType = isPathAnnotationExpression(dataFieldTarget === null || dataFieldTarget === void 0 ? void 0 : dataFieldTarget.fn) && (dataFieldTarget === null || dataFieldTarget === void 0 ? void 0 : (_dataFieldTarget$fn = dataFieldTarget.fn) === null || _dataFieldTarget$fn === void 0 ? void 0 : (_dataFieldTarget$fn$$ = _dataFieldTarget$fn.$target) === null || _dataFieldTarget$fn$$ === void 0 ? void 0 : _dataFieldTarget$fn$$.type) || undefined;
          } else if (dataFieldTarget.$Type === "com.sap.vocabularies.UI.v1.DataPointType") {
            var _dataFieldTarget$Valu, _dataFieldTarget$Valu2, _dataFieldTarget$Valu3;
            sDataType = (dataFieldTarget === null || dataFieldTarget === void 0 ? void 0 : (_dataFieldTarget$Valu = dataFieldTarget.Value) === null || _dataFieldTarget$Valu === void 0 ? void 0 : (_dataFieldTarget$Valu2 = _dataFieldTarget$Valu.$Path) === null || _dataFieldTarget$Valu2 === void 0 ? void 0 : _dataFieldTarget$Valu2.$Type) || (dataFieldTarget === null || dataFieldTarget === void 0 ? void 0 : (_dataFieldTarget$Valu3 = dataFieldTarget.Value) === null || _dataFieldTarget$Valu3 === void 0 ? void 0 : _dataFieldTarget$Valu3.$target.type);
          } else {
            var _oDataField$Target3;
            // e.g. FieldGroup or Chart
            // FieldGroup Properties have no type, so we define it as a boolean type to prevent exceptions during the calculation of the width
            sDataType = ((_oDataField$Target3 = oDataField.Target) === null || _oDataField$Target3 === void 0 ? void 0 : _oDataField$Target3.$target.$Type) === "com.sap.vocabularies.UI.v1.ChartDefinitionType" ? undefined : "Edm.Boolean";
          }
        } else {
          sDataType = undefined;
        }
        break;
    }
    return sDataType;
  };
  _exports.getDataFieldDataType = getDataFieldDataType;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/annotations/DataField", ["sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DisplayModeFormatter","sap/fe/core/templating/PropertyHelper","../helpers/DataFieldHelper"],function(e,t,a,i){"use strict";var o={};var n=i.isReferencePropertyStaticallyHidden;var l=a.getAssociatedUnitProperty;var r=a.getAssociatedTimezoneProperty;var d=a.getAssociatedCurrencyProperty;var v=t.getDisplayMode;var s=e.isProperty;var u=e.isPathAnnotationExpression;function c(e){return e.hasOwnProperty("Action")}o.isDataFieldForActionAbstract=c;function p(e){return e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"}o.isDataFieldForAnnotation=p;function f(e){return e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"}o.isDataFieldForAction=f;function g(e){return e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"}o.isDataFieldForIntentBasedNavigation=g;function m(e){return e.hasOwnProperty("Value")}o.isDataFieldTypes=m;function $(e){const t=e.targetObject;return D(f(t)?t:undefined)}o.isDataModelObjectPathForActionWithDialog=$;function D(e){const t=e===null||e===void 0?void 0:e.ActionTarget;if(t){var a,i;const e=(a=t.annotations)===null||a===void 0?void 0:(i=a.Common)===null||i===void 0?void 0:i.IsActionCritical;if(t.parameters.length>1||e){return"Dialog"}else{return"None"}}else{return"None"}}o.isActionWithDialog=D;function T(e){let t;if(s(e)){var a,i,o,n,l,r,d,v,c,p;t=((a=e.annotations)===null||a===void 0?void 0:(i=a.UI)===null||i===void 0?void 0:(o=i.DataFieldDefault)===null||o===void 0?void 0:(n=o.Target)===null||n===void 0?void 0:(l=n.$target)===null||l===void 0?void 0:l.TargetValue)??((r=e.annotations)===null||r===void 0?void 0:(d=r.UI)===null||d===void 0?void 0:(v=d.DataFieldDefault)===null||v===void 0?void 0:(c=v.Target)===null||c===void 0?void 0:(p=c.$target)===null||p===void 0?void 0:p.MaximumValue)}else{t=e.TargetValue??e.MaximumValue}if(typeof t==="number"){return t.toString()}return u(t)?t:"100"}o.getTargetValueOnDataPoint=T;const y=function(e){var t,a,i,o,n;return((t=e.annotations)===null||t===void 0?void 0:(a=t.UI)===null||a===void 0?void 0:(i=a.DataFieldDefault)===null||i===void 0?void 0:(o=i.Target)===null||o===void 0?void 0:(n=o.$target)===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"};o.isDataPointFromDataFieldDefault=y;function b(e,t){if(typeof t==="object"){var a;if(m(t)&&(a=t.Value)!==null&&a!==void 0&&a.$target){var i,o,n;const a=(i=t.Value)===null||i===void 0?void 0:i.$target;if((a===null||a===void 0?void 0:(o=a.annotations)===null||o===void 0?void 0:(n=o.Common)===null||n===void 0?void 0:n.SemanticObject)!==undefined){return e.getEntitySetBasedAnnotationPath(a===null||a===void 0?void 0:a.fullyQualifiedName)}}else if(s(t)){var l,r;if((t===null||t===void 0?void 0:(l=t.annotations)===null||l===void 0?void 0:(r=l.Common)===null||r===void 0?void 0:r.SemanticObject)!==undefined){return e.getEntitySetBasedAnnotationPath(t===null||t===void 0?void 0:t.fullyQualifiedName)}}}return undefined}o.getSemanticObjectPath=b;function F(e){if(e){return e.indexOf("/")>-1?e.substring(0,e.lastIndexOf("/")+1):""}return""}function h(e,t,a,i){if(a==="AnalyticalTable"){var o,n;const a=(o=e.annotations)===null||o===void 0?void 0:(n=o.UI)===null||n===void 0?void 0:n.Hidden;if(a!==null&&a!==void 0&&a.path&&s(a.$target)){const e=t+a.path;i.additionalProperties[e]=a.$target}const l=e.Criticality;if(l!==null&&l!==void 0&&l.path&&s(l===null||l===void 0?void 0:l.$target)){const e=t+l.path;i.additionalProperties[e]=l===null||l===void 0?void 0:l.$target}}return i}function I(e,t,a,i,o){let n=arguments.length>5&&arguments[5]!==undefined?arguments[5]:{properties:{},additionalProperties:{},textOnlyPropertiesFromTextAnnotation:[]};let u=arguments.length>6&&arguments[6]!==undefined?arguments[6]:false;let c=arguments.length>7&&arguments[7]!==undefined?arguments[7]:false;function p(e,t){if(!n.properties.hasOwnProperty(e)){n.properties[e]=t}return Object.keys(n.properties).indexOf(e)}function f(e){n.exportSettingsTemplate=n.exportSettingsTemplate?`${n.exportSettingsTemplate}${e}`:`${e}`}if(e&&t){var g,m;let G;let H;let R;let Q;let q;if(c){G=p(e,t);f(`{${G}}`);return n}const J=F(e);const K=(g=t.annotations)===null||g===void 0?void 0:(m=g.Common)===null||m===void 0?void 0:m.Text;if(n.exportSettingsTemplate){f("\n");n.exportSettingsWrapping=true}if(K!==null&&K!==void 0&&K.path&&K!==null&&K!==void 0&&K.$target){const i=a.getDataModelObjectPath();const o=J+K.path;const l=v(t,i);let r;switch(l){case"Value":G=p(e,t);f(`{${G}}`);break;case"Description":r=p(o,K.$target);f(`{${r}}`);n.textOnlyPropertiesFromTextAnnotation.push(o);break;case"ValueDescription":G=p(e,t);r=p(o,K.$target);f(`{${G}} ({${r}})`);break;case"DescriptionValue":G=p(e,t);r=p(o,K.$target);f(`{${r}} ({${G}})`);break}}else{var $,D,y,b,I,U,P,A,x,O,V,k,C,S,N;const a=d(t)||l(t);const o=(t===null||t===void 0?void 0:($=t.annotations)===null||$===void 0?void 0:(D=$.Measures)===null||D===void 0?void 0:D.ISOCurrency)||(t===null||t===void 0?void 0:(y=t.annotations)===null||y===void 0?void 0:(b=y.Measures)===null||b===void 0?void 0:b.Unit);const v=r(t);const c=t===null||t===void 0?void 0:(I=t.annotations)===null||I===void 0?void 0:(U=I.Common)===null||U===void 0?void 0:U.Timezone;if(a&&o!==null&&o!==void 0&&o.$target){G=p(e,t);R=p(J+o.path,o.$target);if(u){f(`{${G}}  {${R}}`)}else{n.exportUnitName=J+o.path}}else if(v&&c!==null&&c!==void 0&&c.$target){G=p(e,t);Q=p(J+c.path,c.$target);if(u){f(`{${G}}  {${Q}}`)}else{n.exportTimezoneName=J+c.path}}else if(((P=t.Target)===null||P===void 0?void 0:(A=P.$target)===null||A===void 0?void 0:A.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"&&!((x=t.Target)!==null&&x!==void 0&&(O=x.$target)!==null&&O!==void 0&&O.ValueFormat)||((V=t.annotations)===null||V===void 0?void 0:(k=V.UI)===null||k===void 0?void 0:(C=k.DataFieldDefault)===null||C===void 0?void 0:(S=C.Target)===null||S===void 0?void 0:(N=S.$target)===null||N===void 0?void 0:N.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"){var W,j,B,M,w;const a=(W=t.Target)===null||W===void 0?void 0:(j=W.$target)===null||j===void 0?void 0:j.Value.$target;const i=(B=t.Target)===null||B===void 0?void 0:B.$target;const o=(M=t.annotations)===null||M===void 0?void 0:(w=M.UI)===null||w===void 0?void 0:w.DataFieldDefault;G=p(J?J+e:e,o?t:a);H=T(o?t:i);if(s(H.$target)){H=H;q=p(J?J+H.$target.name:H.$target.name,H.$target);f(`{${G}}/{${q}}`)}else{n.exportDataPointTargetValue=H;f(`{${G}}/${H}`)}}else if(t.$Type==="com.sap.vocabularies.Communication.v1.ContactType"){var E,z;const e=(E=t.fn)===null||E===void 0?void 0:E.$target;const a=(z=t.fn)===null||z===void 0?void 0:z.path;G=p(J?J+a:a,e);f(`{${G}}`)}else if(!i){G=p(e,t);f(`{${G}}`);if(o){n.exportUnitString=`${o}`}else if(c){n.exportTimezoneString=`${c}`}}}n=h(t,J,o,n);if(Object.keys(n.additionalProperties).length>0&&Object.keys(n.properties).length===0){G=p(e,t);f(`{${G}}`)}}return n}o.collectRelatedProperties=I;function U(e,t,a){var i,o,l;let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{properties:{},additionalProperties:{},textOnlyPropertiesFromTextAnnotation:[]};let d=arguments.length>4&&arguments[4]!==undefined?arguments[4]:false;let v=false;switch(e===null||e===void 0?void 0:e.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":if(e.Value){var s,u,c;const i=e.Value;v=n((s=i.$target)===null||s===void 0?void 0:(u=s.annotations)===null||u===void 0?void 0:(c=u.UI)===null||c===void 0?void 0:c.DataFieldDefault)||n(e)||false;r=I(i.path,i.$target,t,false,a,r,d,v);const o=F(i.path);r=h(e,o,a,r)}break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":switch((i=e.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.$Type){case"com.sap.vocabularies.UI.v1.FieldGroupType":(l=e.Target.$target.Data)===null||l===void 0?void 0:l.forEach(e=>{r=U(e,t,a,r,true)});break;case"com.sap.vocabularies.UI.v1.DataPointType":v=n(e)??false;r=I(e.Target.$target.Value.path,e,t,false,a,r,d,v);break;case"com.sap.vocabularies.Communication.v1.ContactType":const i=e.Target.$target;v=n(e)??false;r=I(e.Target.value,i,t,v,a,r,d,v);break;default:break}break;default:break}return r}o.collectRelatedPropertiesRecursively=U;const P=function(e){var t,a,i,o;if(s(e)){return e.type}let n;switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForActionGroup":case"com.sap.vocabularies.UI.v1.DataFieldWithActionGroup":case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":n=undefined;break;case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":n=e===null||e===void 0?void 0:(t=e.Value)===null||t===void 0?void 0:(a=t.$target)===null||a===void 0?void 0:a.type;break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":default:const s=(i=e.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.$Type;if(s){var l;const t=(l=e.Target)===null||l===void 0?void 0:l.$target;if(t.$Type==="com.sap.vocabularies.Communication.v1.ContactType"){var r,d;n=u(t===null||t===void 0?void 0:t.fn)&&(t===null||t===void 0?void 0:(r=t.fn)===null||r===void 0?void 0:(d=r.$target)===null||d===void 0?void 0:d.type)||undefined}else if(t.$Type==="com.sap.vocabularies.UI.v1.DataPointType"){var v,c,p;n=(t===null||t===void 0?void 0:(v=t.Value)===null||v===void 0?void 0:(c=v.$Path)===null||c===void 0?void 0:c.$Type)||(t===null||t===void 0?void 0:(p=t.Value)===null||p===void 0?void 0:p.$target.type)}else{var f;n=((f=e.Target)===null||f===void 0?void 0:f.$target.$Type)==="com.sap.vocabularies.UI.v1.ChartDefinitionType"?undefined:"Edm.Boolean"}}else{n=undefined}break}return n};o.getDataFieldDataType=P;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
 sap.ui.predefine("sap/fe/core/converters/common/AnnotationConverter-dbg", [], function() {
 	var AnnotationConverter;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 175:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convert = void 0;
const VocabularyReferences_1 = __webpack_require__(899);
const utils_1 = __webpack_require__(168);
/**
 * Symbol to extend an annotation with the reference to its target.
 */
const ANNOTATION_TARGET = Symbol('Annotation Target');
/**
 * Append an object to the list of visited objects if it is different from the last object in the list.
 *
 * @param objectPath    The list of visited objects
 * @param visitedObject The object
 * @returns The list of visited objects
 */
function appendObjectPath(objectPath, visitedObject) {
    if (objectPath[objectPath.length - 1] !== visitedObject) {
        objectPath.push(visitedObject);
    }
    return objectPath;
}
/**
 * Resolves a (possibly relative) path.
 *
 * @param converter         Converter
 * @param startElement      The starting point in case of relative path resolution
 * @param path              The path to resolve
 * @param annotationsTerm   Only for error reporting: The annotation term
 * @returns An object containing the resolved target and the elements that were visited while getting to the target.
 */
function resolveTarget(converter, startElement, path, annotationsTerm) {
    var _a, _b, _c, _d;
    // absolute paths always start at the entity container
    if (path.startsWith('/')) {
        path = path.substring(1);
        startElement = undefined; // will resolve to the entity container (see below)
    }
    const pathSegments = path.split('/').reduce((targetPath, segment) => {
        if (segment.includes('@')) {
            // Separate out the annotation
            const [pathPart, annotationPart] = (0, utils_1.splitAtFirst)(segment, '@');
            targetPath.push(pathPart);
            targetPath.push(`@${annotationPart}`);
        }
        else {
            targetPath.push(segment);
        }
        return targetPath;
    }, []);
    // determine the starting point for the resolution
    if (startElement === undefined) {
        // no starting point given: start at the entity container
        if (pathSegments[0].startsWith(`${converter.rawSchema.namespace}.`) &&
            pathSegments[0] !== ((_a = converter.getConvertedEntityContainer()) === null || _a === void 0 ? void 0 : _a.fullyQualifiedName)) {
            // We have a fully qualified name in the path that is not the entity container.
            startElement =
                (_c = (_b = converter.getConvertedEntityType(pathSegments[0])) !== null && _b !== void 0 ? _b : converter.getConvertedComplexType(pathSegments[0])) !== null && _c !== void 0 ? _c : converter.getConvertedAction(pathSegments[0]);
            pathSegments.shift(); // Let's remove the first path element
        }
        else {
            startElement = converter.getConvertedEntityContainer();
        }
    }
    else if (startElement[ANNOTATION_TARGET] !== undefined) {
        // annotation: start at the annotation target
        startElement = startElement[ANNOTATION_TARGET];
    }
    else if (startElement._type === 'Property') {
        // property: start at the entity type or complex type the property belongs to
        const parentElementFQN = (0, utils_1.substringBeforeFirst)(startElement.fullyQualifiedName, '/');
        startElement =
            (_d = converter.getConvertedEntityType(parentElementFQN)) !== null && _d !== void 0 ? _d : converter.getConvertedComplexType(parentElementFQN);
    }
    const result = pathSegments.reduce((current, segment) => {
        var _a, _b, _c, _d, _e;
        const error = (message) => {
            current.messages.push({ message });
            current.target = undefined;
            return current;
        };
        if (current.target === undefined) {
            return current;
        }
        current.objectPath = appendObjectPath(current.objectPath, current.target);
        // Annotation
        if (segment.startsWith('@') && segment !== '@$ui5.overload') {
            const [vocabularyAlias, term] = converter.splitTerm(segment);
            const annotation = (_a = current.target.annotations[vocabularyAlias.substring(1)]) === null || _a === void 0 ? void 0 : _a[term];
            if (annotation !== undefined) {
                current.target = annotation;
                return current;
            }
            return error(`Annotation '${segment.substring(1)}' not found on ${current.target._type} '${current.target.fullyQualifiedName}'`);
        }
        // $Path / $AnnotationPath syntax
        if (current.target.$target) {
            let subPath;
            if (segment === '$AnnotationPath') {
                subPath = current.target.value;
            }
            else if (segment === '$Path') {
                subPath = current.target.path;
            }
            if (subPath !== undefined) {
                const subTarget = resolveTarget(converter, current.target[ANNOTATION_TARGET], subPath);
                subTarget.objectPath.forEach((visitedSubObject) => {
                    if (!current.objectPath.includes(visitedSubObject)) {
                        current.objectPath = appendObjectPath(current.objectPath, visitedSubObject);
                    }
                });
                current.target = subTarget.target;
                current.objectPath = appendObjectPath(current.objectPath, current.target);
                return current;
            }
        }
        // traverse based on the element type
        switch ((_b = current.target) === null || _b === void 0 ? void 0 : _b._type) {
            case 'Schema':
                // next element: EntityType, ComplexType, Action, EntityContainer ?
                break;
            case 'EntityContainer':
                {
                    const thisElement = current.target;
                    if (segment === '' || converter.unalias(segment) === thisElement.fullyQualifiedName) {
                        return current;
                    }
                    // next element: EntitySet, Singleton or ActionImport?
                    const nextElement = (_d = (_c = thisElement.entitySets.by_name(segment)) !== null && _c !== void 0 ? _c : thisElement.singletons.by_name(segment)) !== null && _d !== void 0 ? _d : thisElement.actionImports.by_name(segment);
                    if (nextElement) {
                        current.target = nextElement;
                        return current;
                    }
                }
                break;
            case 'EntitySet':
            case 'Singleton': {
                const thisElement = current.target;
                if (segment === '' || segment === '$Type') {
                    // Empty Path after an EntitySet or Singleton means EntityType
                    current.target = thisElement.entityType;
                    return current;
                }
                if (segment === '$') {
                    return current;
                }
                if (segment === '$NavigationPropertyBinding') {
                    const navigationPropertyBindings = thisElement.navigationPropertyBinding;
                    current.target = navigationPropertyBindings;
                    return current;
                }
                // continue resolving at the EntitySet's or Singleton's type
                const result = resolveTarget(converter, thisElement.entityType, segment);
                current.target = result.target;
                current.objectPath = result.objectPath.reduce(appendObjectPath, current.objectPath);
                return current;
            }
            case 'EntityType':
                {
                    const thisElement = current.target;
                    if (segment === '' || segment === '$Type') {
                        return current;
                    }
                    const property = thisElement.entityProperties.by_name(segment);
                    if (property) {
                        current.target = property;
                        return current;
                    }
                    const navigationProperty = thisElement.navigationProperties.by_name(segment);
                    if (navigationProperty) {
                        current.target = navigationProperty;
                        return current;
                    }
                    const actionName = (0, utils_1.substringBeforeFirst)(converter.unalias(segment), '(');
                    const action = thisElement.actions[actionName];
                    if (action) {
                        current.target = action;
                        return current;
                    }
                }
                break;
            case 'ActionImport': {
                // continue resolving at the Action
                const result = resolveTarget(converter, current.target.action, segment);
                current.target = result.target;
                current.objectPath = result.objectPath.reduce(appendObjectPath, current.objectPath);
                return current;
            }
            case 'Action': {
                const thisElement = current.target;
                if (segment === '') {
                    return current;
                }
                if (segment === '@$ui5.overload' || segment === '0') {
                    return current;
                }
                if (segment === '$Parameter' && thisElement.isBound) {
                    current.target = thisElement.parameters;
                    return current;
                }
                const nextElement = (_e = thisElement.parameters[segment]) !== null && _e !== void 0 ? _e : thisElement.parameters.find((param) => param.name === segment);
                if (nextElement) {
                    current.target = nextElement;
                    return current;
                }
                break;
            }
            case 'Property':
                {
                    const thisElement = current.target;
                    // Property or NavigationProperty of the ComplexType
                    const type = thisElement.targetType;
                    if (type !== undefined) {
                        const property = type.properties.by_name(segment);
                        if (property) {
                            current.target = property;
                            return current;
                        }
                        const navigationProperty = type.navigationProperties.by_name(segment);
                        if (navigationProperty) {
                            current.target = navigationProperty;
                            return current;
                        }
                    }
                }
                break;
            case 'ActionParameter':
                const referencedType = current.target.typeReference;
                if (referencedType !== undefined) {
                    const result = resolveTarget(converter, referencedType, segment);
                    current.target = result.target;
                    current.objectPath = result.objectPath.reduce(appendObjectPath, current.objectPath);
                    return current;
                }
                break;
            case 'NavigationProperty':
                // continue at the NavigationProperty's target type
                const result = resolveTarget(converter, current.target.targetType, segment);
                current.target = result.target;
                current.objectPath = result.objectPath.reduce(appendObjectPath, current.objectPath);
                return current;
            default:
                if (segment === '') {
                    return current;
                }
                if (current.target[segment]) {
                    current.target = current.target[segment];
                    current.objectPath = appendObjectPath(current.objectPath, current.target);
                    return current;
                }
        }
        return error(`Element '${segment}' not found at ${current.target._type} '${current.target.fullyQualifiedName}'`);
    }, { target: startElement, objectPath: [], messages: [] });
    // Diagnostics
    result.messages.forEach((message) => converter.logError(message.message));
    if (!result.target) {
        if (annotationsTerm) {
            const annotationType = inferTypeFromTerm(converter, annotationsTerm, startElement.fullyQualifiedName);
            converter.logError('Unable to resolve the path expression: ' +
                '\n' +
                path +
                '\n' +
                '\n' +
                'Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \n\n' +
                '<Annotation Term = ' +
                annotationsTerm +
                '>' +
                '\n' +
                '<Record Type = ' +
                annotationType +
                '>' +
                '\n' +
                '<AnnotationPath = ' +
                path +
                '>');
        }
        else {
            converter.logError('Unable to resolve the path expression: ' +
                path +
                '\n' +
                '\n' +
                'Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \n\n' +
                '<Annotation Term = ' +
                pathSegments[0] +
                '>' +
                '\n' +
                '<PropertyValue  Path= ' +
                pathSegments[1] +
                '>');
        }
    }
    return result;
}
/**
 * Typeguard to check if the path contains an annotation.
 *
 * @param pathStr the path to evaluate
 * @returns true if there is an annotation in the path.
 */
function isAnnotationPath(pathStr) {
    return pathStr.includes('@');
}
function parseValue(converter, currentTarget, currentTerm, currentProperty, currentSource, propertyValue, valueFQN) {
    if (propertyValue === undefined) {
        return undefined;
    }
    switch (propertyValue.type) {
        case 'String':
            return propertyValue.String;
        case 'Int':
            return propertyValue.Int;
        case 'Bool':
            return propertyValue.Bool;
        case 'Decimal':
            return (0, utils_1.Decimal)(propertyValue.Decimal);
        case 'Date':
            return propertyValue.Date;
        case 'EnumMember':
            const splitEnum = propertyValue.EnumMember.split(' ').map((enumValue) => {
                var _a;
                const unaliased = (_a = converter.unalias(enumValue)) !== null && _a !== void 0 ? _a : '';
                return (0, utils_1.alias)(VocabularyReferences_1.VocabularyReferences, unaliased);
            });
            if (splitEnum[0] !== undefined && utils_1.EnumIsFlag[(0, utils_1.substringBeforeFirst)(splitEnum[0], '/')]) {
                return splitEnum;
            }
            return splitEnum[0];
        case 'PropertyPath':
            return {
                type: 'PropertyPath',
                value: propertyValue.PropertyPath,
                fullyQualifiedName: valueFQN,
                $target: resolveTarget(converter, currentTarget, propertyValue.PropertyPath, currentTerm).target,
                [ANNOTATION_TARGET]: currentTarget
            };
        case 'NavigationPropertyPath':
            return {
                type: 'NavigationPropertyPath',
                value: propertyValue.NavigationPropertyPath,
                fullyQualifiedName: valueFQN,
                $target: resolveTarget(converter, currentTarget, propertyValue.NavigationPropertyPath, currentTerm)
                    .target,
                [ANNOTATION_TARGET]: currentTarget
            };
        case 'AnnotationPath':
            return {
                type: 'AnnotationPath',
                value: propertyValue.AnnotationPath,
                fullyQualifiedName: valueFQN,
                $target: resolveTarget(converter, currentTarget, converter.unalias(propertyValue.AnnotationPath), currentTerm).target,
                annotationsTerm: currentTerm,
                term: '',
                path: '',
                [ANNOTATION_TARGET]: currentTarget
            };
        case 'Path':
            const $target = resolveTarget(converter, currentTarget, propertyValue.Path, currentTerm).target;
            if (isAnnotationPath(propertyValue.Path)) {
                // inline the target
                return $target;
            }
            else {
                return {
                    type: 'Path',
                    path: propertyValue.Path,
                    fullyQualifiedName: valueFQN,
                    $target: $target,
                    [ANNOTATION_TARGET]: currentTarget
                };
            }
        case 'Record':
            return parseRecord(converter, currentTerm, currentTarget, currentProperty, currentSource, propertyValue.Record, valueFQN);
        case 'Collection':
            return parseCollection(converter, currentTarget, currentTerm, currentProperty, currentSource, propertyValue.Collection, valueFQN);
        case 'Apply':
        case 'Null':
        case 'Not':
        case 'Eq':
        case 'Ne':
        case 'Gt':
        case 'Ge':
        case 'Lt':
        case 'Le':
        case 'If':
        case 'And':
        case 'Or':
        default:
            return propertyValue;
    }
}
/**
 * Infer the type of a term based on its type.
 *
 * @param converter         Converter
 * @param annotationsTerm   The annotation term
 * @param annotationTarget  The annotation target
 * @param currentProperty   The current property of the record
 * @returns The inferred type.
 */
function inferTypeFromTerm(converter, annotationsTerm, annotationTarget, currentProperty) {
    let targetType = utils_1.TermToTypes[annotationsTerm];
    if (currentProperty) {
        annotationsTerm = `${(0, utils_1.substringBeforeLast)(annotationsTerm, '.')}.${currentProperty}`;
        targetType = utils_1.TermToTypes[annotationsTerm];
    }
    converter.logError(`The type of the record used within the term ${annotationsTerm} was not defined and was inferred as ${targetType}.
Hint: If possible, try to maintain the Type property for each Record.
<Annotations Target="${annotationTarget}">
	<Annotation Term="${annotationsTerm}">
		<Record>...</Record>
	</Annotation>
</Annotations>`);
    return targetType;
}
function isDataFieldWithForAction(annotationContent) {
    return (annotationContent.hasOwnProperty('Action') &&
        (annotationContent.$Type === 'com.sap.vocabularies.UI.v1.DataFieldForAction' ||
            annotationContent.$Type === 'com.sap.vocabularies.UI.v1.DataFieldWithAction'));
}
function parseRecordType(converter, currentTerm, currentTarget, currentProperty, recordDefinition) {
    let targetType;
    if (!recordDefinition.type && currentTerm) {
        targetType = inferTypeFromTerm(converter, currentTerm, currentTarget.fullyQualifiedName, currentProperty);
    }
    else {
        targetType = converter.unalias(recordDefinition.type);
    }
    return targetType;
}
function parseRecord(converter, currentTerm, currentTarget, currentProperty, currentSource, annotationRecord, currentFQN) {
    const record = {
        $Type: parseRecordType(converter, currentTerm, currentTarget, currentProperty, annotationRecord),
        fullyQualifiedName: currentFQN,
        [ANNOTATION_TARGET]: currentTarget,
        __source: currentSource
    };
    for (const propertyValue of annotationRecord.propertyValues) {
        (0, utils_1.lazy)(record, propertyValue.name, () => parseValue(converter, currentTarget, currentTerm, propertyValue.name, currentSource, propertyValue.value, `${currentFQN}/${propertyValue.name}`));
    }
    // annotations on the record
    (0, utils_1.lazy)(record, 'annotations', resolveAnnotationsOnAnnotation(converter, annotationRecord, record));
    if (isDataFieldWithForAction(record)) {
        (0, utils_1.lazy)(record, 'ActionTarget', () => {
            var _a, _b, _c;
            const actionTargetFQN = converter.unalias((_a = record.Action) === null || _a === void 0 ? void 0 : _a.toString());
            // (1) Bound action of the annotation target?
            let actionTarget = (_b = currentTarget.actions) === null || _b === void 0 ? void 0 : _b[actionTargetFQN];
            if (!actionTarget) {
                // (2) ActionImport (= unbound action)?
                actionTarget = (_c = converter.getConvertedActionImport(actionTargetFQN)) === null || _c === void 0 ? void 0 : _c.action;
            }
            if (!actionTarget) {
                // (3) Bound action of a different EntityType
                actionTarget = converter.getConvertedAction(actionTargetFQN);
                if (!(actionTarget === null || actionTarget === void 0 ? void 0 : actionTarget.isBound)) {
                    actionTarget = undefined;
                }
            }
            if (!actionTarget) {
                converter.logError(`${record.fullyQualifiedName}: Unable to resolve '${record.Action}' ('${actionTargetFQN}')`);
            }
            return actionTarget;
        });
    }
    return record;
}
/**
 * Retrieve or infer the collection type based on its content.
 *
 * @param collectionDefinition
 * @returns the type of the collection
 */
function getOrInferCollectionType(collectionDefinition) {
    let type = collectionDefinition.type;
    if (type === undefined && collectionDefinition.length > 0) {
        const firstColItem = collectionDefinition[0];
        if (firstColItem.hasOwnProperty('PropertyPath')) {
            type = 'PropertyPath';
        }
        else if (firstColItem.hasOwnProperty('Path')) {
            type = 'Path';
        }
        else if (firstColItem.hasOwnProperty('AnnotationPath')) {
            type = 'AnnotationPath';
        }
        else if (firstColItem.hasOwnProperty('NavigationPropertyPath')) {
            type = 'NavigationPropertyPath';
        }
        else if (typeof firstColItem === 'object' &&
            (firstColItem.hasOwnProperty('type') || firstColItem.hasOwnProperty('propertyValues'))) {
            type = 'Record';
        }
        else if (typeof firstColItem === 'string') {
            type = 'String';
        }
    }
    else if (type === undefined) {
        type = 'EmptyCollection';
    }
    return type;
}
function parseCollection(converter, currentTarget, currentTerm, currentProperty, currentSource, collectionDefinition, parentFQN) {
    const collectionDefinitionType = getOrInferCollectionType(collectionDefinition);
    switch (collectionDefinitionType) {
        case 'PropertyPath':
            return collectionDefinition.map((propertyPath, propertyIdx) => {
                const result = {
                    type: 'PropertyPath',
                    value: propertyPath.PropertyPath,
                    fullyQualifiedName: `${parentFQN}/${propertyIdx}`
                };
                (0, utils_1.lazy)(result, '$target', () => {
                    var _a;
                    return (_a = resolveTarget(converter, currentTarget, propertyPath.PropertyPath, currentTerm)
                        .target) !== null && _a !== void 0 ? _a : {};
                } // TODO: $target is mandatory - throw an error?
                );
                return result;
            });
        case 'Path':
            // TODO: make lazy?
            return collectionDefinition.map((pathValue) => {
                return resolveTarget(converter, currentTarget, pathValue.Path, currentTerm).target;
            });
        case 'AnnotationPath':
            return collectionDefinition.map((annotationPath, annotationIdx) => {
                const result = {
                    type: 'AnnotationPath',
                    value: annotationPath.AnnotationPath,
                    fullyQualifiedName: `${parentFQN}/${annotationIdx}`,
                    annotationsTerm: currentTerm,
                    term: '',
                    path: ''
                };
                (0, utils_1.lazy)(result, '$target', () => resolveTarget(converter, currentTarget, annotationPath.AnnotationPath, currentTerm).target);
                return result;
            });
        case 'NavigationPropertyPath':
            return collectionDefinition.map((navPropertyPath, navPropIdx) => {
                var _a;
                const navigationPropertyPath = (_a = navPropertyPath.NavigationPropertyPath) !== null && _a !== void 0 ? _a : '';
                const result = {
                    type: 'NavigationPropertyPath',
                    value: navigationPropertyPath,
                    fullyQualifiedName: `${parentFQN}/${navPropIdx}`
                };
                if (navigationPropertyPath === '') {
                    result.$target = undefined;
                }
                else {
                    (0, utils_1.lazy)(result, '$target', () => resolveTarget(converter, currentTarget, navigationPropertyPath, currentTerm).target);
                }
                return result;
            });
        case 'Record':
            return collectionDefinition.map((recordDefinition, recordIdx) => {
                return parseRecord(converter, currentTerm, currentTarget, currentProperty, currentSource, recordDefinition, `${parentFQN}/${recordIdx}`);
            });
        case 'Apply':
        case 'Null':
        case 'If':
        case 'Eq':
        case 'Ne':
        case 'Lt':
        case 'Gt':
        case 'Le':
        case 'Ge':
        case 'Not':
        case 'And':
        case 'Or':
            return collectionDefinition.map((ifValue) => ifValue);
        case 'String':
            return collectionDefinition.map((stringValue) => {
                if (typeof stringValue === 'string' || stringValue === undefined) {
                    return stringValue;
                }
                else {
                    return stringValue.String;
                }
            });
        default:
            if (collectionDefinition.length === 0) {
                return [];
            }
            throw new Error('Unsupported case');
    }
}
function isV4NavigationProperty(navProp) {
    return !!navProp.targetTypeName;
}
function convertAnnotation(converter, target, rawAnnotation) {
    var _a;
    let annotation;
    if (rawAnnotation.record) {
        annotation = parseRecord(converter, rawAnnotation.term, target, '', rawAnnotation.__source, rawAnnotation.record, rawAnnotation.fullyQualifiedName);
    }
    else if (rawAnnotation.collection === undefined) {
        annotation = parseValue(converter, target, rawAnnotation.term, '', rawAnnotation.__source, (_a = rawAnnotation.value) !== null && _a !== void 0 ? _a : { type: 'Bool', Bool: true }, rawAnnotation.fullyQualifiedName);
    }
    else if (rawAnnotation.collection) {
        annotation = parseCollection(converter, target, rawAnnotation.term, '', rawAnnotation.__source, rawAnnotation.collection, rawAnnotation.fullyQualifiedName);
    }
    else {
        throw new Error('Unsupported case');
    }
    switch (typeof annotation) {
        case 'string':
            // eslint-disable-next-line no-new-wrappers
            annotation = new String(annotation);
            break;
        case 'boolean':
            // eslint-disable-next-line no-new-wrappers
            annotation = new Boolean(annotation);
            break;
        case 'number':
            annotation = new Number(annotation);
            break;
        default:
            // do nothing
            break;
    }
    annotation.fullyQualifiedName = rawAnnotation.fullyQualifiedName;
    annotation[ANNOTATION_TARGET] = target;
    const [vocAlias, vocTerm] = converter.splitTerm(rawAnnotation.term);
    annotation.term = converter.unalias(`${vocAlias}.${vocTerm}`, VocabularyReferences_1.VocabularyReferences);
    annotation.qualifier = rawAnnotation.qualifier;
    annotation.__source = rawAnnotation.__source;
    try {
        (0, utils_1.lazy)(annotation, 'annotations', resolveAnnotationsOnAnnotation(converter, rawAnnotation, annotation));
    }
    catch (e) {
        // not an error: parseRecord() already adds annotations, but the other parseXXX functions don't, so this can happen
    }
    return annotation;
}
/**
 * Merge annotation from different source together by overwriting at the term level.
 *
 * @param converter
 * @returns the resulting merged annotations
 */
function mergeAnnotations(converter) {
    return Object.keys(converter.rawSchema.annotations).reduceRight((annotationsPerTarget, annotationSource) => {
        for (const { target, annotations: rawAnnotations } of converter.rawSchema.annotations[annotationSource]) {
            if (!annotationsPerTarget[target]) {
                annotationsPerTarget[target] = [];
            }
            annotationsPerTarget[target].push(...rawAnnotations
                .filter((rawAnnotation) => !annotationsPerTarget[target].some((existingAnnotation) => existingAnnotation.term === rawAnnotation.term &&
                existingAnnotation.qualifier === rawAnnotation.qualifier))
                .map((rawAnnotation) => {
                let annotationFQN = `${target}@${converter.unalias(rawAnnotation.term)}`;
                if (rawAnnotation.qualifier) {
                    annotationFQN = `${annotationFQN}#${rawAnnotation.qualifier}`;
                }
                const annotation = rawAnnotation;
                annotation.fullyQualifiedName = annotationFQN;
                annotation.__source = annotationSource;
                return annotation;
            }));
        }
        return annotationsPerTarget;
    }, {});
}
class Converter {
    /**
     * Get preprocessed annotations on the specified target.
     *
     * @param target    The annotation target
     * @returns An array of annotations
     */
    getAnnotations(target) {
        var _a;
        if (this.annotationsByTarget === undefined) {
            this.annotationsByTarget = mergeAnnotations(this);
        }
        return (_a = this.annotationsByTarget[target]) !== null && _a !== void 0 ? _a : [];
    }
    getConvertedEntityContainer() {
        return this.getConvertedElement(this.rawMetadata.schema.entityContainer.fullyQualifiedName, this.rawMetadata.schema.entityContainer, convertEntityContainer);
    }
    getConvertedEntitySet(fullyQualifiedName) {
        return this.convertedOutput.entitySets.by_fullyQualifiedName(fullyQualifiedName);
    }
    getConvertedSingleton(fullyQualifiedName) {
        return this.convertedOutput.singletons.by_fullyQualifiedName(fullyQualifiedName);
    }
    getConvertedEntityType(fullyQualifiedName) {
        return this.convertedOutput.entityTypes.by_fullyQualifiedName(fullyQualifiedName);
    }
    getConvertedComplexType(fullyQualifiedName) {
        return this.convertedOutput.complexTypes.by_fullyQualifiedName(fullyQualifiedName);
    }
    getConvertedTypeDefinition(fullyQualifiedName) {
        return this.convertedOutput.typeDefinitions.by_fullyQualifiedName(fullyQualifiedName);
    }
    getConvertedActionImport(fullyQualifiedName) {
        let actionImport = this.convertedOutput.actionImports.by_fullyQualifiedName(fullyQualifiedName);
        if (!actionImport) {
            actionImport = this.convertedOutput.actionImports.by_name(fullyQualifiedName);
        }
        return actionImport;
    }
    getConvertedAction(fullyQualifiedName) {
        return this.convertedOutput.actions.by_fullyQualifiedName(fullyQualifiedName);
    }
    convert(rawValue, map) {
        if (Array.isArray(rawValue)) {
            return () => {
                const converted = rawValue.reduce((convertedElements, rawElement) => {
                    const convertedElement = this.getConvertedElement(rawElement.fullyQualifiedName, rawElement, map);
                    if (convertedElement) {
                        convertedElements.push(convertedElement);
                    }
                    return convertedElements;
                }, []);
                (0, utils_1.addGetByValue)(converted, 'name');
                (0, utils_1.addGetByValue)(converted, 'fullyQualifiedName');
                return converted;
            };
        }
        else {
            return () => this.getConvertedElement(rawValue.fullyQualifiedName, rawValue, map);
        }
    }
    constructor(rawMetadata, convertedOutput) {
        this.convertedElements = new Map();
        this.rawMetadata = rawMetadata;
        this.rawSchema = rawMetadata.schema;
        this.convertedOutput = convertedOutput;
    }
    getConvertedElement(fullyQualifiedName, rawElement, map) {
        let converted = this.convertedElements.get(fullyQualifiedName);
        if (converted === undefined) {
            const rawMetadata = typeof rawElement === 'function' ? rawElement.apply(undefined, [fullyQualifiedName]) : rawElement;
            if (rawMetadata !== undefined) {
                converted = map.apply(undefined, [this, rawMetadata]);
                this.convertedElements.set(fullyQualifiedName, converted);
            }
        }
        return converted;
    }
    logError(message) {
        this.convertedOutput.diagnostics.push({ message });
    }
    /**
     * Split the alias from the term value.
     *
     * @param term the value of the term
     * @returns the term alias and the actual term value
     */
    splitTerm(term) {
        const aliased = (0, utils_1.alias)(VocabularyReferences_1.VocabularyReferences, term);
        return (0, utils_1.splitAtLast)(aliased, '.');
    }
    unalias(value, references = this.rawMetadata.references) {
        var _a;
        return (_a = (0, utils_1.unalias)(references, value, this.rawSchema.namespace)) !== null && _a !== void 0 ? _a : '';
    }
}
function resolveEntityType(converter, fullyQualifiedName) {
    return () => {
        let entityType = converter.getConvertedEntityType(fullyQualifiedName);
        if (!entityType) {
            converter.logError(`EntityType '${fullyQualifiedName}' not found`);
            entityType = {};
        }
        return entityType;
    };
}
function resolveNavigationPropertyBindings(converter, rawNavigationPropertyBindings, rawElement) {
    return () => Object.keys(rawNavigationPropertyBindings).reduce((navigationPropertyBindings, bindingName) => {
        const rawBindingTarget = rawNavigationPropertyBindings[bindingName];
        (0, utils_1.lazy)(navigationPropertyBindings, bindingName, () => {
            let resolvedBindingTarget;
            if (rawBindingTarget._type === 'Singleton') {
                resolvedBindingTarget = converter.getConvertedSingleton(rawBindingTarget.fullyQualifiedName);
            }
            else {
                resolvedBindingTarget = converter.getConvertedEntitySet(rawBindingTarget.fullyQualifiedName);
            }
            if (!resolvedBindingTarget) {
                converter.logError(`${rawElement._type} '${rawElement.fullyQualifiedName}': Failed to resolve NavigationPropertyBinding ${bindingName}`);
                resolvedBindingTarget = {};
            }
            return resolvedBindingTarget;
        });
        return navigationPropertyBindings;
    }, {});
}
function resolveAnnotations(converter, rawAnnotationTarget) {
    const nestedAnnotations = rawAnnotationTarget.annotations;
    return () => createAnnotationsObject(converter, rawAnnotationTarget, nestedAnnotations !== null && nestedAnnotations !== void 0 ? nestedAnnotations : converter.getAnnotations(rawAnnotationTarget.fullyQualifiedName));
}
function resolveAnnotationsOnAnnotation(converter, annotationRecord, annotationTerm) {
    return () => {
        const currentFQN = annotationTerm.fullyQualifiedName;
        // be graceful when resolving annotations on annotations: Sometimes they are referenced directly, sometimes they
        // are part of the global annotations list
        let annotations;
        if (annotationRecord.annotations && annotationRecord.annotations.length > 0) {
            annotations = annotationRecord.annotations;
        }
        else {
            annotations = converter.getAnnotations(currentFQN);
        }
        annotations === null || annotations === void 0 ? void 0 : annotations.forEach((annotation) => {
            annotation.target = currentFQN;
            annotation.__source = annotationTerm.__source;
            annotation[ANNOTATION_TARGET] = annotationTerm[ANNOTATION_TARGET];
            annotation.fullyQualifiedName = `${currentFQN}@${annotation.term}`;
        });
        return createAnnotationsObject(converter, annotationTerm, annotations !== null && annotations !== void 0 ? annotations : []);
    };
}
function createAnnotationsObject(converter, target, rawAnnotations) {
    return rawAnnotations.reduce((vocabularyAliases, annotation) => {
        const [vocAlias, vocTerm] = converter.splitTerm(annotation.term);
        const vocTermWithQualifier = `${vocTerm}${annotation.qualifier ? '#' + annotation.qualifier : ''}`;
        if (vocabularyAliases[vocAlias] === undefined) {
            vocabularyAliases[vocAlias] = {};
        }
        if (!vocabularyAliases[vocAlias].hasOwnProperty(vocTermWithQualifier)) {
            (0, utils_1.lazy)(vocabularyAliases[vocAlias], vocTermWithQualifier, () => converter.getConvertedElement(annotation.fullyQualifiedName, annotation, (converter, rawAnnotation) => convertAnnotation(converter, target, rawAnnotation)));
        }
        return vocabularyAliases;
    }, {});
}
/**
 * Converts an EntityContainer.
 *
 * @param converter     Converter
 * @param rawEntityContainer    Unconverted EntityContainer
 * @returns The converted EntityContainer
 */
function convertEntityContainer(converter, rawEntityContainer) {
    const convertedEntityContainer = rawEntityContainer;
    (0, utils_1.lazy)(convertedEntityContainer, 'annotations', resolveAnnotations(converter, rawEntityContainer));
    (0, utils_1.lazy)(convertedEntityContainer, 'entitySets', converter.convert(converter.rawSchema.entitySets, convertEntitySet));
    (0, utils_1.lazy)(convertedEntityContainer, 'singletons', converter.convert(converter.rawSchema.singletons, convertSingleton));
    (0, utils_1.lazy)(convertedEntityContainer, 'actionImports', converter.convert(converter.rawSchema.actionImports, convertActionImport));
    return convertedEntityContainer;
}
/**
 * Converts a Singleton.
 *
 * @param converter   Converter
 * @param rawSingleton  Unconverted Singleton
 * @returns The converted Singleton
 */
function convertSingleton(converter, rawSingleton) {
    const convertedSingleton = rawSingleton;
    (0, utils_1.lazy)(convertedSingleton, 'entityType', resolveEntityType(converter, rawSingleton.entityTypeName));
    (0, utils_1.lazy)(convertedSingleton, 'annotations', resolveAnnotations(converter, rawSingleton));
    const _rawNavigationPropertyBindings = rawSingleton.navigationPropertyBinding;
    (0, utils_1.lazy)(convertedSingleton, 'navigationPropertyBinding', resolveNavigationPropertyBindings(converter, _rawNavigationPropertyBindings, rawSingleton));
    return convertedSingleton;
}
/**
 * Converts an EntitySet.
 *
 * @param converter   Converter
 * @param rawEntitySet  Unconverted EntitySet
 * @returns The converted EntitySet
 */
function convertEntitySet(converter, rawEntitySet) {
    const convertedEntitySet = rawEntitySet;
    (0, utils_1.lazy)(convertedEntitySet, 'entityType', resolveEntityType(converter, rawEntitySet.entityTypeName));
    (0, utils_1.lazy)(convertedEntitySet, 'annotations', resolveAnnotations(converter, rawEntitySet));
    const _rawNavigationPropertyBindings = rawEntitySet.navigationPropertyBinding;
    (0, utils_1.lazy)(convertedEntitySet, 'navigationPropertyBinding', resolveNavigationPropertyBindings(converter, _rawNavigationPropertyBindings, rawEntitySet));
    return convertedEntitySet;
}
/**
 * Converts an EntityType.
 *
 * @param converter   Converter
 * @param rawEntityType  Unconverted EntityType
 * @returns The converted EntityType
 */
function convertEntityType(converter, rawEntityType) {
    const convertedEntityType = rawEntityType;
    rawEntityType.keys.forEach((keyProp) => {
        keyProp.isKey = true;
    });
    (0, utils_1.lazy)(convertedEntityType, 'annotations', resolveAnnotations(converter, rawEntityType));
    (0, utils_1.lazy)(convertedEntityType, 'keys', converter.convert(rawEntityType.keys, convertProperty));
    (0, utils_1.lazy)(convertedEntityType, 'entityProperties', converter.convert(rawEntityType.entityProperties, convertProperty));
    (0, utils_1.lazy)(convertedEntityType, 'navigationProperties', converter.convert(rawEntityType.navigationProperties, convertNavigationProperty));
    (0, utils_1.lazy)(convertedEntityType, 'actions', () => converter.rawSchema.actions
        .filter((rawAction) => rawAction.isBound &&
        (rawAction.sourceType === rawEntityType.fullyQualifiedName ||
            rawAction.sourceType === `Collection(${rawEntityType.fullyQualifiedName})`))
        .reduce((actions, rawAction) => {
        const name = `${converter.rawSchema.namespace}.${rawAction.name}`;
        actions[name] = converter.getConvertedAction(rawAction.fullyQualifiedName);
        return actions;
    }, {}));
    convertedEntityType.resolvePath = (relativePath, includeVisitedObjects) => {
        const resolved = resolveTarget(converter, rawEntityType, relativePath);
        if (includeVisitedObjects) {
            return { target: resolved.target, visitedObjects: resolved.objectPath, messages: resolved.messages };
        }
        else {
            return resolved.target;
        }
    };
    return convertedEntityType;
}
/**
 * Converts a Property.
 *
 * @param converter   Converter
 * @param rawProperty  Unconverted Property
 * @returns The converted Property
 */
function convertProperty(converter, rawProperty) {
    const convertedProperty = rawProperty;
    (0, utils_1.lazy)(convertedProperty, 'annotations', resolveAnnotations(converter, rawProperty));
    (0, utils_1.lazy)(convertedProperty, 'targetType', () => {
        var _a;
        const type = rawProperty.type;
        const typeName = type.startsWith('Collection') ? type.substring(11, type.length - 1) : type;
        return (_a = converter.getConvertedComplexType(typeName)) !== null && _a !== void 0 ? _a : converter.getConvertedTypeDefinition(typeName);
    });
    return convertedProperty;
}
/**
 * Converts a NavigationProperty.
 *
 * @param converter   Converter
 * @param rawNavigationProperty  Unconverted NavigationProperty
 * @returns The converted NavigationProperty
 */
function convertNavigationProperty(converter, rawNavigationProperty) {
    var _a, _b, _c;
    const convertedNavigationProperty = rawNavigationProperty;
    convertedNavigationProperty.referentialConstraint = (_a = convertedNavigationProperty.referentialConstraint) !== null && _a !== void 0 ? _a : [];
    if (!isV4NavigationProperty(rawNavigationProperty)) {
        const associationEnd = (_b = converter.rawSchema.associations
            .find((association) => association.fullyQualifiedName === rawNavigationProperty.relationship)) === null || _b === void 0 ? void 0 : _b.associationEnd.find((end) => end.role === rawNavigationProperty.toRole);
        convertedNavigationProperty.isCollection = (associationEnd === null || associationEnd === void 0 ? void 0 : associationEnd.multiplicity) === '*';
        convertedNavigationProperty.targetTypeName = (_c = associationEnd === null || associationEnd === void 0 ? void 0 : associationEnd.type) !== null && _c !== void 0 ? _c : '';
    }
    (0, utils_1.lazy)(convertedNavigationProperty, 'targetType', resolveEntityType(converter, rawNavigationProperty.targetTypeName));
    (0, utils_1.lazy)(convertedNavigationProperty, 'annotations', resolveAnnotations(converter, rawNavigationProperty));
    return convertedNavigationProperty;
}
/**
 * Converts an ActionImport.
 *
 * @param converter   Converter
 * @param rawActionImport  Unconverted ActionImport
 * @returns The converted ActionImport
 */
function convertActionImport(converter, rawActionImport) {
    const convertedActionImport = rawActionImport;
    (0, utils_1.lazy)(convertedActionImport, 'annotations', resolveAnnotations(converter, rawActionImport));
    (0, utils_1.lazy)(convertedActionImport, 'action', () => converter.getConvertedAction(rawActionImport.actionName));
    return convertedActionImport;
}
/**
 * Converts an Action.
 *
 * @param converter   Converter
 * @param rawAction  Unconverted Action
 * @returns The converted Action
 */
function convertAction(converter, rawAction) {
    const convertedAction = rawAction;
    if (convertedAction.sourceType) {
        (0, utils_1.lazy)(convertedAction, 'sourceEntityType', resolveEntityType(converter, rawAction.sourceType));
    }
    if (convertedAction.returnType) {
        (0, utils_1.lazy)(convertedAction, 'returnEntityType', resolveEntityType(converter, rawAction.returnType));
    }
    (0, utils_1.lazy)(convertedAction, 'parameters', converter.convert(rawAction.parameters, convertActionParameter));
    (0, utils_1.lazy)(convertedAction, 'annotations', () => {
        const action = (0, utils_1.substringBeforeFirst)(rawAction.fullyQualifiedName, '(');
        // if the action is unbound (e.g. "myAction"), the annotation target is "myAction()"
        const annotationTargetFQN = rawAction.isBound
            ? rawAction.fullyQualifiedName
            : `${rawAction.fullyQualifiedName}()`;
        const rawAnnotations = converter.getAnnotations(annotationTargetFQN);
        const baseAnnotations = converter.getAnnotations(action);
        for (const baseAnnotation of baseAnnotations) {
            if (!rawAnnotations.some((annotation) => annotation.term === baseAnnotation.term && annotation.qualifier === baseAnnotation.qualifier)) {
                rawAnnotations.push(baseAnnotation);
            }
        }
        return createAnnotationsObject(converter, rawAction, rawAnnotations);
    });
    return convertedAction;
}
/**
 * Converts an ActionParameter.
 *
 * @param converter   Converter
 * @param rawActionParameter  Unconverted ActionParameter
 * @returns The converted ActionParameter
 */
function convertActionParameter(converter, rawActionParameter) {
    const convertedActionParameter = rawActionParameter;
    (0, utils_1.lazy)(convertedActionParameter, 'typeReference', () => {
        var _a, _b;
        return (_b = (_a = converter.getConvertedEntityType(rawActionParameter.type)) !== null && _a !== void 0 ? _a : converter.getConvertedComplexType(rawActionParameter.type)) !== null && _b !== void 0 ? _b : converter.getConvertedTypeDefinition(rawActionParameter.type);
    });
    (0, utils_1.lazy)(convertedActionParameter, 'annotations', resolveAnnotations(converter, rawActionParameter));
    return convertedActionParameter;
}
/**
 * Converts a ComplexType.
 *
 * @param converter   Converter
 * @param rawComplexType  Unconverted ComplexType
 * @returns The converted ComplexType
 */
function convertComplexType(converter, rawComplexType) {
    const convertedComplexType = rawComplexType;
    (0, utils_1.lazy)(convertedComplexType, 'properties', converter.convert(rawComplexType.properties, convertProperty));
    (0, utils_1.lazy)(convertedComplexType, 'navigationProperties', converter.convert(rawComplexType.navigationProperties, convertNavigationProperty));
    (0, utils_1.lazy)(convertedComplexType, 'annotations', resolveAnnotations(converter, rawComplexType));
    return convertedComplexType;
}
/**
 * Converts a TypeDefinition.
 *
 * @param converter   Converter
 * @param rawTypeDefinition  Unconverted TypeDefinition
 * @returns The converted TypeDefinition
 */
function convertTypeDefinition(converter, rawTypeDefinition) {
    const convertedTypeDefinition = rawTypeDefinition;
    (0, utils_1.lazy)(convertedTypeDefinition, 'annotations', resolveAnnotations(converter, rawTypeDefinition));
    return convertedTypeDefinition;
}
/**
 * Convert a RawMetadata into an object representation to be used to easily navigate a metadata object and its annotation.
 *
 * @param rawMetadata
 * @returns the converted representation of the metadata.
 */
function convert(rawMetadata) {
    // Converter Output
    const convertedOutput = {
        version: rawMetadata.version,
        namespace: rawMetadata.schema.namespace,
        annotations: rawMetadata.schema.annotations,
        references: VocabularyReferences_1.VocabularyReferences.concat(rawMetadata.references),
        diagnostics: []
    };
    // fall back on the default references if the caller does not specify any
    if (rawMetadata.references.length === 0) {
        rawMetadata.references = VocabularyReferences_1.VocabularyReferences;
    }
    // Converter
    const converter = new Converter(rawMetadata, convertedOutput);
    (0, utils_1.lazy)(convertedOutput, 'entityContainer', converter.convert(converter.rawSchema.entityContainer, convertEntityContainer));
    (0, utils_1.lazy)(convertedOutput, 'entitySets', converter.convert(converter.rawSchema.entitySets, convertEntitySet));
    (0, utils_1.lazy)(convertedOutput, 'singletons', converter.convert(converter.rawSchema.singletons, convertSingleton));
    (0, utils_1.lazy)(convertedOutput, 'entityTypes', converter.convert(converter.rawSchema.entityTypes, convertEntityType));
    (0, utils_1.lazy)(convertedOutput, 'actions', converter.convert(converter.rawSchema.actions, convertAction));
    (0, utils_1.lazy)(convertedOutput, 'complexTypes', converter.convert(converter.rawSchema.complexTypes, convertComplexType));
    (0, utils_1.lazy)(convertedOutput, 'actionImports', converter.convert(converter.rawSchema.actionImports, convertActionImport));
    (0, utils_1.lazy)(convertedOutput, 'typeDefinitions', converter.convert(converter.rawSchema.typeDefinitions, convertTypeDefinition));
    convertedOutput.resolvePath = function resolvePath(path) {
        const targetResolution = resolveTarget(converter, undefined, path);
        if (targetResolution.target) {
            appendObjectPath(targetResolution.objectPath, targetResolution.target);
        }
        return targetResolution;
    };
    return convertedOutput;
}
exports.convert = convert;


/***/ }),

/***/ 878:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
__exportStar(__webpack_require__(175), exports);
__exportStar(__webpack_require__(168), exports);
__exportStar(__webpack_require__(311), exports);


/***/ }),

/***/ 168:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.addGetByValue = exports.createIndexedFind = exports.lazy = exports.Decimal = exports.isComplexTypeDefinition = exports.unalias = exports.alias = exports.substringBeforeLast = exports.substringBeforeFirst = exports.splitAtLast = exports.splitAtFirst = exports.defaultReferences = exports.TermToTypes = exports.EnumIsFlag = void 0;
var EnumIsFlag_1 = __webpack_require__(830);
Object.defineProperty(exports, "EnumIsFlag", ({ enumerable: true, get: function () { return EnumIsFlag_1.EnumIsFlag; } }));
var TermToTypes_1 = __webpack_require__(377);
Object.defineProperty(exports, "TermToTypes", ({ enumerable: true, get: function () { return TermToTypes_1.TermToTypes; } }));
var VocabularyReferences_1 = __webpack_require__(899);
Object.defineProperty(exports, "defaultReferences", ({ enumerable: true, get: function () { return VocabularyReferences_1.VocabularyReferences; } }));
function splitAt(string, index) {
    return index < 0 ? [string, ''] : [string.substring(0, index), string.substring(index + 1)];
}
function substringAt(string, index) {
    return index < 0 ? string : string.substring(0, index);
}
/**
 * Splits a string at the first occurrence of a separator.
 *
 * @param string    The string to split
 * @param separator Separator, e.g. a single character.
 * @returns An array consisting of two elements: the part before the first occurrence of the separator and the part after it. If the string does not contain the separator, the second element is the empty string.
 */
function splitAtFirst(string, separator) {
    return splitAt(string, string.indexOf(separator));
}
exports.splitAtFirst = splitAtFirst;
/**
 * Splits a string at the last occurrence of a separator.
 *
 * @param string    The string to split
 * @param separator Separator, e.g. a single character.
 * @returns An array consisting of two elements: the part before the last occurrence of the separator and the part after it. If the string does not contain the separator, the second element is the empty string.
 */
function splitAtLast(string, separator) {
    return splitAt(string, string.lastIndexOf(separator));
}
exports.splitAtLast = splitAtLast;
/**
 * Returns the substring before the first occurrence of a separator.
 *
 * @param string    The string
 * @param separator Separator, e.g. a single character.
 * @returns The substring before the first occurrence of the separator, or the input string if it does not contain the separator.
 */
function substringBeforeFirst(string, separator) {
    return substringAt(string, string.indexOf(separator));
}
exports.substringBeforeFirst = substringBeforeFirst;
/**
 * Returns the substring before the last occurrence of a separator.
 *
 * @param string    The string
 * @param separator Separator, e.g. a single character.
 * @returns The substring before the last occurrence of the separator, or the input string if it does not contain the separator.
 */
function substringBeforeLast(string, separator) {
    return substringAt(string, string.lastIndexOf(separator));
}
exports.substringBeforeLast = substringBeforeLast;
/**
 * Transform an unaliased string representation annotation to the aliased version.
 *
 * @param references currentReferences for the project
 * @param unaliasedValue the unaliased value
 * @returns the aliased string representing the same
 */
function alias(references, unaliasedValue) {
    if (!references.reverseReferenceMap) {
        references.reverseReferenceMap = references.reduce((map, ref) => {
            map[ref.namespace] = ref;
            return map;
        }, {});
    }
    if (!unaliasedValue) {
        return unaliasedValue;
    }
    const [namespace, value] = splitAtLast(unaliasedValue, '.');
    const reference = references.reverseReferenceMap[namespace];
    if (reference) {
        return `${reference.alias}.${value}`;
    }
    else if (unaliasedValue.includes('@')) {
        // Try to see if it's an annotation Path like to_SalesOrder/@UI.LineItem
        const [preAlias, postAlias] = splitAtFirst(unaliasedValue, '@');
        return `${preAlias}@${alias(references, postAlias)}`;
    }
    else {
        return unaliasedValue;
    }
}
exports.alias = alias;
/**
 * Transform an aliased string to its unaliased version given a set of references.
 *
 * @param references The references to use for unaliasing.
 * @param aliasedValue The aliased value
 * @param namespace The fallback namespace
 * @returns The equal unaliased string.
 */
function unalias(references, aliasedValue, namespace) {
    var _a;
    const _unalias = (value) => {
        if (!references.referenceMap) {
            references.referenceMap = Object.fromEntries(references.map((ref) => [ref.alias, ref]));
        }
        // Aliases are of type 'SimpleIdentifier' and must not contain dots
        const [maybeAlias, rest] = splitAtFirst(value, '.');
        if (!rest || rest.includes('.')) {
            // either there is no dot in the value or there is more than one --> nothing to do
            return value;
        }
        const isAnnotation = maybeAlias.startsWith('@');
        const valueToUnalias = isAnnotation ? maybeAlias.substring(1) : maybeAlias;
        const knownReference = references.referenceMap[valueToUnalias];
        if (knownReference) {
            return isAnnotation ? `@${knownReference.namespace}.${rest}` : `${knownReference.namespace}.${rest}`;
        }
        // The alias could not be resolved using the references. Assume it is the "global" alias (= namespace)
        return namespace && !isAnnotation ? `${namespace}.${rest}` : value;
    };
    return (_a = aliasedValue === null || aliasedValue === void 0 ? void 0 : aliasedValue.split('/').reduce((segments, segment) => {
        // the segment could be an action, like "doSomething(foo.bar)"
        const [first, rest] = splitAtFirst(segment, '(');
        const subSegment = [_unalias(first)];
        if (rest) {
            const parameter = rest.slice(0, -1); // remove trailing ")"
            subSegment.push(`(${_unalias(parameter)})`);
        }
        segments.push(subSegment.join(''));
        return segments;
    }, [])) === null || _a === void 0 ? void 0 : _a.join('/');
}
exports.unalias = unalias;
/**
 * Differentiate between a ComplexType and a TypeDefinition.
 *
 * @param complexTypeDefinition
 * @returns true if the value is a complex type
 */
function isComplexTypeDefinition(complexTypeDefinition) {
    return (!!complexTypeDefinition && complexTypeDefinition._type === 'ComplexType' && !!complexTypeDefinition.properties);
}
exports.isComplexTypeDefinition = isComplexTypeDefinition;
function Decimal(value) {
    return {
        isDecimal() {
            return true;
        },
        valueOf() {
            return value;
        },
        toString() {
            return value.toString();
        }
    };
}
exports.Decimal = Decimal;
/**
 * Defines a lazy property.
 *
 * The property is initialized by calling the init function on the first read access, or by directly assigning a value.
 *
 * @param object    The host object
 * @param property  The lazy property to add
 * @param init      The function that initializes the property's value
 */
function lazy(object, property, init) {
    const initial = Symbol('initial');
    let _value = initial;
    Object.defineProperty(object, property, {
        enumerable: true,
        get() {
            if (_value === initial) {
                _value = init();
            }
            return _value;
        },
        set(value) {
            _value = value;
        }
    });
}
exports.lazy = lazy;
/**
 * Creates a function that allows to find an array element by property value.
 *
 * @param array     The array
 * @param property  Elements in the array are searched by this property
 * @returns A function that can be used to find an element of the array by property value.
 */
function createIndexedFind(array, property) {
    const index = new Map();
    return function find(value) {
        const element = index.get(value);
        if ((element === null || element === void 0 ? void 0 : element[property]) === value) {
            return element;
        }
        return array.find((element) => {
            if (!(element === null || element === void 0 ? void 0 : element.hasOwnProperty(property))) {
                return false;
            }
            const propertyValue = element[property];
            index.set(propertyValue, element);
            return propertyValue === value;
        });
    };
}
exports.createIndexedFind = createIndexedFind;
/**
 * Adds a 'get by value' function to an array.
 *
 * If this function is called with addIndex(myArray, 'name'), a new function 'by_name(value)' will be added that allows to
 * find a member of the array by the value of its 'name' property.
 *
 * @param array      The array
 * @param property   The property that will be used by the 'by_{property}()' function
 * @returns The array with the added function
 */
function addGetByValue(array, property) {
    const indexName = `by_${property}`;
    if (!array.hasOwnProperty(indexName)) {
        Object.defineProperty(array, indexName, { writable: false, value: createIndexedFind(array, property) });
    }
    else {
        throw new Error(`Property '${indexName}' already exists`);
    }
    return array;
}
exports.addGetByValue = addGetByValue;


/***/ }),

/***/ 311:
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.revertTermToGenericType = void 0;
const utils_1 = __webpack_require__(168);
/**
 * Revert an object to its raw type equivalent.
 *
 * @param references the current reference
 * @param value the value to revert
 * @returns the raw value
 */
function revertObjectToRawType(references, value) {
    var _a, _b, _c, _d, _e, _f;
    let result;
    if (Array.isArray(value)) {
        result = {
            type: 'Collection',
            Collection: value.map((anno) => revertCollectionItemToRawType(references, anno))
        };
    }
    else if ((_a = value.isDecimal) === null || _a === void 0 ? void 0 : _a.call(value)) {
        result = {
            type: 'Decimal',
            Decimal: value.valueOf()
        };
    }
    else if ((_b = value.isString) === null || _b === void 0 ? void 0 : _b.call(value)) {
        const valueMatches = value.valueOf().split('.');
        if (valueMatches.length > 1 && references.find((ref) => ref.alias === valueMatches[0])) {
            result = {
                type: 'EnumMember',
                EnumMember: value.valueOf()
            };
        }
        else {
            result = {
                type: 'String',
                String: value.valueOf()
            };
        }
    }
    else if ((_c = value.isInt) === null || _c === void 0 ? void 0 : _c.call(value)) {
        result = {
            type: 'Int',
            Int: value.valueOf()
        };
    }
    else if ((_d = value.isFloat) === null || _d === void 0 ? void 0 : _d.call(value)) {
        result = {
            type: 'Float',
            Float: value.valueOf()
        };
    }
    else if ((_e = value.isDate) === null || _e === void 0 ? void 0 : _e.call(value)) {
        result = {
            type: 'Date',
            Date: value.valueOf()
        };
    }
    else if ((_f = value.isBoolean) === null || _f === void 0 ? void 0 : _f.call(value)) {
        result = {
            type: 'Bool',
            Bool: value.valueOf()
        };
    }
    else if (value.type === 'Path') {
        result = {
            type: 'Path',
            Path: value.path
        };
    }
    else if (value.type === 'AnnotationPath') {
        result = {
            type: 'AnnotationPath',
            AnnotationPath: value.value
        };
    }
    else if (value.type === 'Apply') {
        result = {
            type: 'Apply',
            Apply: value.Apply
        };
    }
    else if (value.type === 'Null') {
        result = {
            type: 'Null'
        };
    }
    else if (value.type === 'PropertyPath') {
        result = {
            type: 'PropertyPath',
            PropertyPath: value.value
        };
    }
    else if (value.type === 'NavigationPropertyPath') {
        result = {
            type: 'NavigationPropertyPath',
            NavigationPropertyPath: value.value
        };
    }
    else if (Object.prototype.hasOwnProperty.call(value, '$Type')) {
        result = {
            type: 'Record',
            Record: revertCollectionItemToRawType(references, value)
        };
    }
    return result;
}
/**
 * Revert a value to its raw value depending on its type.
 *
 * @param references the current set of reference
 * @param value the value to revert
 * @returns the raw expression
 */
function revertValueToRawType(references, value) {
    let result;
    const valueConstructor = value === null || value === void 0 ? void 0 : value.constructor.name;
    switch (valueConstructor) {
        case 'String':
        case 'string':
            const valueMatches = value.toString().split('.');
            if (valueMatches.length > 1 && references.find((ref) => ref.alias === valueMatches[0])) {
                result = {
                    type: 'EnumMember',
                    EnumMember: value.toString()
                };
            }
            else {
                result = {
                    type: 'String',
                    String: value.toString()
                };
            }
            break;
        case 'Boolean':
        case 'boolean':
            result = {
                type: 'Bool',
                Bool: value.valueOf()
            };
            break;
        case 'Number':
        case 'number':
            if (value.toString() === value.toFixed()) {
                result = {
                    type: 'Int',
                    Int: value.valueOf()
                };
            }
            else {
                result = {
                    type: 'Decimal',
                    Decimal: value.valueOf()
                };
            }
            break;
        case 'object':
        default:
            result = revertObjectToRawType(references, value);
            break;
    }
    return result;
}
const restrictedKeys = ['$Type', 'term', '__source', 'qualifier', 'ActionTarget', 'fullyQualifiedName', 'annotations'];
/**
 * Revert the current embedded annotations to their raw type.
 *
 * @param references the current set of reference
 * @param currentAnnotations the collection item to evaluate
 * @param targetAnnotations the place where we need to add the annotation
 */
function revertAnnotationsToRawType(references, currentAnnotations, targetAnnotations) {
    Object.keys(currentAnnotations)
        .filter((key) => key !== '_annotations')
        .forEach((key) => {
        Object.keys(currentAnnotations[key]).forEach((term) => {
            const parsedAnnotation = revertTermToGenericType(references, currentAnnotations[key][term]);
            if (!parsedAnnotation.term) {
                const unaliasedTerm = (0, utils_1.unalias)(references, `${key}.${term}`);
                if (unaliasedTerm) {
                    const qualifiedSplit = unaliasedTerm.split('#');
                    parsedAnnotation.term = qualifiedSplit[0];
                    if (qualifiedSplit.length > 1) {
                        // Sub Annotation with a qualifier, not sure when that can happen in real scenarios
                        parsedAnnotation.qualifier = qualifiedSplit[1];
                    }
                }
            }
            targetAnnotations.push(parsedAnnotation);
        });
    });
}
/**
 * Revert the current collection item to the corresponding raw annotation.
 *
 * @param references the current set of reference
 * @param collectionItem the collection item to evaluate
 * @returns the raw type equivalent
 */
function revertCollectionItemToRawType(references, collectionItem) {
    if (typeof collectionItem === 'string') {
        return collectionItem;
    }
    else if (typeof collectionItem === 'object') {
        if (collectionItem.hasOwnProperty('$Type')) {
            // Annotation Record
            const outItem = {
                type: collectionItem.$Type,
                propertyValues: []
            };
            // Could validate keys and type based on $Type
            Object.keys(collectionItem).forEach((collectionKey) => {
                if (restrictedKeys.indexOf(collectionKey) === -1) {
                    const value = collectionItem[collectionKey];
                    outItem.propertyValues.push({
                        name: collectionKey,
                        value: revertValueToRawType(references, value)
                    });
                }
                else if (collectionKey === 'annotations' && Object.keys(collectionItem[collectionKey]).length > 0) {
                    outItem.annotations = [];
                    revertAnnotationsToRawType(references, collectionItem[collectionKey], outItem.annotations);
                }
            });
            return outItem;
        }
        else if (collectionItem.type === 'PropertyPath') {
            return {
                type: 'PropertyPath',
                PropertyPath: collectionItem.value
            };
        }
        else if (collectionItem.type === 'AnnotationPath') {
            return {
                type: 'AnnotationPath',
                AnnotationPath: collectionItem.value
            };
        }
        else if (collectionItem.type === 'NavigationPropertyPath') {
            return {
                type: 'NavigationPropertyPath',
                NavigationPropertyPath: collectionItem.value
            };
        }
    }
    return undefined;
}
/**
 * Revert an annotation term to it's generic or raw equivalent.
 *
 * @param references the reference of the current context
 * @param annotation the annotation term to revert
 * @returns the raw annotation
 */
function revertTermToGenericType(references, annotation) {
    const baseAnnotation = {
        term: annotation.term,
        qualifier: annotation.qualifier
    };
    if (Array.isArray(annotation)) {
        // Collection
        if (annotation.hasOwnProperty('annotations') && Object.keys(annotation.annotations).length > 0) {
            // Annotation on a collection itself, not sure when that happens if at all
            baseAnnotation.annotations = [];
            revertAnnotationsToRawType(references, annotation.annotations, baseAnnotation.annotations);
        }
        return {
            ...baseAnnotation,
            collection: annotation.map((anno) => revertCollectionItemToRawType(references, anno))
        };
    }
    else if (annotation.hasOwnProperty('$Type')) {
        return { ...baseAnnotation, record: revertCollectionItemToRawType(references, annotation) };
    }
    else {
        return { ...baseAnnotation, value: revertValueToRawType(references, annotation) };
    }
}
exports.revertTermToGenericType = revertTermToGenericType;


/***/ }),

/***/ 830:
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.EnumIsFlag = void 0;
exports.EnumIsFlag = {
    "Auth.KeyLocation": false,
    "Core.RevisionKind": false,
    "Core.DataModificationOperationKind": false,
    "Core.Permission": true,
    "Capabilities.ConformanceLevelType": false,
    "Capabilities.IsolationLevel": true,
    "Capabilities.NavigationType": false,
    "Capabilities.SearchExpressions": true,
    "Capabilities.HttpMethod": true,
    "Aggregation.RollupType": false,
    "Common.TextFormatType": false,
    "Common.FilterExpressionType": false,
    "Common.FieldControlType": false,
    "Common.EffectType": true,
    "Communication.KindType": false,
    "Communication.ContactInformationType": true,
    "Communication.PhoneType": true,
    "Communication.GenderType": false,
    "UI.VisualizationType": false,
    "UI.CriticalityType": false,
    "UI.ImprovementDirectionType": false,
    "UI.TrendType": false,
    "UI.ChartType": false,
    "UI.ChartAxisScaleBehaviorType": false,
    "UI.ChartAxisAutoScaleDataScopeType": false,
    "UI.ChartDimensionRoleType": false,
    "UI.ChartMeasureRoleType": false,
    "UI.SelectionRangeSignType": false,
    "UI.SelectionRangeOptionType": false,
    "UI.TextArrangementType": false,
    "UI.ImportanceType": false,
    "UI.CriticalityRepresentationType": false,
    "UI.OperationGroupingType": false,
};


/***/ }),

/***/ 377:
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TermToTypes = void 0;
var TermToTypes;
(function (TermToTypes) {
    TermToTypes["Org.OData.Authorization.V1.SecuritySchemes"] = "Org.OData.Authorization.V1.SecurityScheme";
    TermToTypes["Org.OData.Authorization.V1.Authorizations"] = "Org.OData.Authorization.V1.Authorization";
    TermToTypes["Org.OData.Core.V1.Revisions"] = "Org.OData.Core.V1.RevisionType";
    TermToTypes["Org.OData.Core.V1.Links"] = "Org.OData.Core.V1.Link";
    TermToTypes["Org.OData.Core.V1.Example"] = "Org.OData.Core.V1.ExampleValue";
    TermToTypes["Org.OData.Core.V1.Messages"] = "Org.OData.Core.V1.MessageType";
    TermToTypes["Org.OData.Core.V1.ValueException"] = "Org.OData.Core.V1.ValueExceptionType";
    TermToTypes["Org.OData.Core.V1.ResourceException"] = "Org.OData.Core.V1.ResourceExceptionType";
    TermToTypes["Org.OData.Core.V1.DataModificationException"] = "Org.OData.Core.V1.DataModificationExceptionType";
    TermToTypes["Org.OData.Core.V1.IsLanguageDependent"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.AppliesViaContainer"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.DereferenceableIDs"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.ConventionalIDs"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.Permissions"] = "Org.OData.Core.V1.Permission";
    TermToTypes["Org.OData.Core.V1.DefaultNamespace"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.Immutable"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.Computed"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.ComputedDefaultValue"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.IsURL"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.IsMediaType"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.ContentDisposition"] = "Org.OData.Core.V1.ContentDispositionType";
    TermToTypes["Org.OData.Core.V1.OptimisticConcurrency"] = "Edm.PropertyPath";
    TermToTypes["Org.OData.Core.V1.AdditionalProperties"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.AutoExpand"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.AutoExpandReferences"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.MayImplement"] = "Org.OData.Core.V1.QualifiedTypeName";
    TermToTypes["Org.OData.Core.V1.Ordered"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.PositionalInsert"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.AlternateKeys"] = "Org.OData.Core.V1.AlternateKey";
    TermToTypes["Org.OData.Core.V1.OptionalParameter"] = "Org.OData.Core.V1.OptionalParameterType";
    TermToTypes["Org.OData.Core.V1.OperationAvailable"] = "Edm.Boolean";
    TermToTypes["Org.OData.Core.V1.RequiresExplicitBinding"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Core.V1.ExplicitOperationBindings"] = "Org.OData.Core.V1.QualifiedBoundOperationName";
    TermToTypes["Org.OData.Core.V1.SymbolicName"] = "Org.OData.Core.V1.SimpleIdentifier";
    TermToTypes["Org.OData.Core.V1.GeometryFeature"] = "Org.OData.Core.V1.GeometryFeatureType";
    TermToTypes["Org.OData.Capabilities.V1.ConformanceLevel"] = "Org.OData.Capabilities.V1.ConformanceLevelType";
    TermToTypes["Org.OData.Capabilities.V1.AsynchronousRequestsSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.BatchContinueOnErrorSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.IsolationSupported"] = "Org.OData.Capabilities.V1.IsolationLevel";
    TermToTypes["Org.OData.Capabilities.V1.CrossJoinSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.CallbackSupported"] = "Org.OData.Capabilities.V1.CallbackType";
    TermToTypes["Org.OData.Capabilities.V1.ChangeTracking"] = "Org.OData.Capabilities.V1.ChangeTrackingType";
    TermToTypes["Org.OData.Capabilities.V1.CountRestrictions"] = "Org.OData.Capabilities.V1.CountRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.NavigationRestrictions"] = "Org.OData.Capabilities.V1.NavigationRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.IndexableByKey"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.TopSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.SkipSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.ComputeSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.SelectSupport"] = "Org.OData.Capabilities.V1.SelectSupportType";
    TermToTypes["Org.OData.Capabilities.V1.BatchSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.BatchSupport"] = "Org.OData.Capabilities.V1.BatchSupportType";
    TermToTypes["Org.OData.Capabilities.V1.FilterRestrictions"] = "Org.OData.Capabilities.V1.FilterRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.SortRestrictions"] = "Org.OData.Capabilities.V1.SortRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.ExpandRestrictions"] = "Org.OData.Capabilities.V1.ExpandRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.SearchRestrictions"] = "Org.OData.Capabilities.V1.SearchRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.KeyAsSegmentSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.QuerySegmentSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.InsertRestrictions"] = "Org.OData.Capabilities.V1.InsertRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.DeepInsertSupport"] = "Org.OData.Capabilities.V1.DeepInsertSupportType";
    TermToTypes["Org.OData.Capabilities.V1.UpdateRestrictions"] = "Org.OData.Capabilities.V1.UpdateRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.DeepUpdateSupport"] = "Org.OData.Capabilities.V1.DeepUpdateSupportType";
    TermToTypes["Org.OData.Capabilities.V1.DeleteRestrictions"] = "Org.OData.Capabilities.V1.DeleteRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.CollectionPropertyRestrictions"] = "Org.OData.Capabilities.V1.CollectionPropertyRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.OperationRestrictions"] = "Org.OData.Capabilities.V1.OperationRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.AnnotationValuesInQuerySupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Capabilities.V1.ModificationQueryOptions"] = "Org.OData.Capabilities.V1.ModificationQueryOptionsType";
    TermToTypes["Org.OData.Capabilities.V1.ReadRestrictions"] = "Org.OData.Capabilities.V1.ReadRestrictionsType";
    TermToTypes["Org.OData.Capabilities.V1.CustomHeaders"] = "Org.OData.Capabilities.V1.CustomParameter";
    TermToTypes["Org.OData.Capabilities.V1.CustomQueryOptions"] = "Org.OData.Capabilities.V1.CustomParameter";
    TermToTypes["Org.OData.Capabilities.V1.MediaLocationUpdateSupported"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Aggregation.V1.ApplySupported"] = "Org.OData.Aggregation.V1.ApplySupportedType";
    TermToTypes["Org.OData.Aggregation.V1.ApplySupportedDefaults"] = "Org.OData.Aggregation.V1.ApplySupportedBase";
    TermToTypes["Org.OData.Aggregation.V1.Groupable"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Aggregation.V1.Aggregatable"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Aggregation.V1.ContextDefiningProperties"] = "Edm.PropertyPath";
    TermToTypes["Org.OData.Aggregation.V1.LeveledHierarchy"] = "Edm.PropertyPath";
    TermToTypes["Org.OData.Aggregation.V1.RecursiveHierarchy"] = "Org.OData.Aggregation.V1.RecursiveHierarchyType";
    TermToTypes["Org.OData.Aggregation.V1.AvailableOnAggregates"] = "Org.OData.Aggregation.V1.AvailableOnAggregatesType";
    TermToTypes["Org.OData.Validation.V1.Minimum"] = "Edm.PrimitiveType";
    TermToTypes["Org.OData.Validation.V1.Maximum"] = "Edm.PrimitiveType";
    TermToTypes["Org.OData.Validation.V1.Exclusive"] = "Org.OData.Core.V1.Tag";
    TermToTypes["Org.OData.Validation.V1.AllowedValues"] = "Org.OData.Validation.V1.AllowedValue";
    TermToTypes["Org.OData.Validation.V1.MultipleOf"] = "Edm.Decimal";
    TermToTypes["Org.OData.Validation.V1.Constraint"] = "Org.OData.Validation.V1.ConstraintType";
    TermToTypes["Org.OData.Validation.V1.ItemsOf"] = "Org.OData.Validation.V1.ItemsOfType";
    TermToTypes["Org.OData.Validation.V1.OpenPropertyTypeConstraint"] = "Org.OData.Validation.V1.SingleOrCollectionType";
    TermToTypes["Org.OData.Validation.V1.DerivedTypeConstraint"] = "Org.OData.Validation.V1.SingleOrCollectionType";
    TermToTypes["Org.OData.Validation.V1.AllowedTerms"] = "Org.OData.Core.V1.QualifiedTermName";
    TermToTypes["Org.OData.Validation.V1.ApplicableTerms"] = "Org.OData.Core.V1.QualifiedTermName";
    TermToTypes["Org.OData.Validation.V1.MaxItems"] = "Edm.Int64";
    TermToTypes["Org.OData.Validation.V1.MinItems"] = "Edm.Int64";
    TermToTypes["Org.OData.Measures.V1.Scale"] = "Edm.Byte";
    TermToTypes["Org.OData.Measures.V1.DurationGranularity"] = "Org.OData.Measures.V1.DurationGranularityType";
    TermToTypes["com.sap.vocabularies.Analytics.v1.Dimension"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Analytics.v1.Measure"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Analytics.v1.AccumulativeMeasure"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Analytics.v1.RolledUpPropertyCount"] = "Edm.Int16";
    TermToTypes["com.sap.vocabularies.Analytics.v1.PlanningAction"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Analytics.v1.AggregatedProperties"] = "com.sap.vocabularies.Analytics.v1.AggregatedPropertyType";
    TermToTypes["com.sap.vocabularies.Analytics.v1.AggregatedProperty"] = "com.sap.vocabularies.Analytics.v1.AggregatedPropertyType";
    TermToTypes["com.sap.vocabularies.Analytics.v1.AnalyticalContext"] = "com.sap.vocabularies.Analytics.v1.AnalyticalContextType";
    TermToTypes["com.sap.vocabularies.Common.v1.ServiceVersion"] = "Edm.Int32";
    TermToTypes["com.sap.vocabularies.Common.v1.ServiceSchemaVersion"] = "Edm.Int32";
    TermToTypes["com.sap.vocabularies.Common.v1.TextFor"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.IsLanguageIdentifier"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.TextFormat"] = "com.sap.vocabularies.Common.v1.TextFormatType";
    TermToTypes["com.sap.vocabularies.Common.v1.IsTimezone"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsDigitSequence"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsUpperCase"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCurrency"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsUnit"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.UnitSpecificScale"] = "Edm.PrimitiveType";
    TermToTypes["com.sap.vocabularies.Common.v1.UnitSpecificPrecision"] = "Edm.PrimitiveType";
    TermToTypes["com.sap.vocabularies.Common.v1.SecondaryKey"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.MinOccurs"] = "Edm.Int64";
    TermToTypes["com.sap.vocabularies.Common.v1.MaxOccurs"] = "Edm.Int64";
    TermToTypes["com.sap.vocabularies.Common.v1.AssociationEntity"] = "Edm.NavigationPropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.DerivedNavigation"] = "Edm.NavigationPropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.Masked"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.RevealOnDemand"] = "Edm.Boolean";
    TermToTypes["com.sap.vocabularies.Common.v1.SemanticObjectMapping"] = "com.sap.vocabularies.Common.v1.SemanticObjectMappingType";
    TermToTypes["com.sap.vocabularies.Common.v1.IsInstanceAnnotation"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.FilterExpressionRestrictions"] = "com.sap.vocabularies.Common.v1.FilterExpressionRestrictionType";
    TermToTypes["com.sap.vocabularies.Common.v1.FieldControl"] = "com.sap.vocabularies.Common.v1.FieldControlType";
    TermToTypes["com.sap.vocabularies.Common.v1.Application"] = "com.sap.vocabularies.Common.v1.ApplicationType";
    TermToTypes["com.sap.vocabularies.Common.v1.Timestamp"] = "Edm.DateTimeOffset";
    TermToTypes["com.sap.vocabularies.Common.v1.ErrorResolution"] = "com.sap.vocabularies.Common.v1.ErrorResolutionType";
    TermToTypes["com.sap.vocabularies.Common.v1.Messages"] = "Edm.ComplexType";
    TermToTypes["com.sap.vocabularies.Common.v1.numericSeverity"] = "com.sap.vocabularies.Common.v1.NumericMessageSeverityType";
    TermToTypes["com.sap.vocabularies.Common.v1.MaximumNumericMessageSeverity"] = "com.sap.vocabularies.Common.v1.NumericMessageSeverityType";
    TermToTypes["com.sap.vocabularies.Common.v1.IsActionCritical"] = "Edm.Boolean";
    TermToTypes["com.sap.vocabularies.Common.v1.Attributes"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.RelatedRecursiveHierarchy"] = "Edm.AnnotationPath";
    TermToTypes["com.sap.vocabularies.Common.v1.Interval"] = "com.sap.vocabularies.Common.v1.IntervalType";
    TermToTypes["com.sap.vocabularies.Common.v1.ResultContext"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.SAPObjectNodeType"] = "com.sap.vocabularies.Common.v1.SAPObjectNodeTypeType";
    TermToTypes["com.sap.vocabularies.Common.v1.Composition"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsNaturalPerson"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.ValueList"] = "com.sap.vocabularies.Common.v1.ValueListType";
    TermToTypes["com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"] = "Org.OData.Core.V1.SimpleIdentifier";
    TermToTypes["com.sap.vocabularies.Common.v1.ValueListWithFixedValues"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.ValueListMapping"] = "com.sap.vocabularies.Common.v1.ValueListMappingType";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarYear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarHalfyear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarQuarter"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarMonth"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarWeek"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsDayOfCalendarMonth"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsDayOfCalendarYear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarYearHalfyear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarYearQuarter"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarYearMonth"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarYearWeek"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsCalendarDate"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalYear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalPeriod"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalQuarter"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalWeek"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalYearWeek"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsDayOfFiscalYear"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.IsFiscalYearVariant"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.MutuallyExclusiveTerm"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.DraftRoot"] = "com.sap.vocabularies.Common.v1.DraftRootType";
    TermToTypes["com.sap.vocabularies.Common.v1.DraftNode"] = "com.sap.vocabularies.Common.v1.DraftNodeType";
    TermToTypes["com.sap.vocabularies.Common.v1.DraftActivationVia"] = "Org.OData.Core.V1.SimpleIdentifier";
    TermToTypes["com.sap.vocabularies.Common.v1.EditableFieldFor"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.SemanticKey"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.Common.v1.SideEffects"] = "com.sap.vocabularies.Common.v1.SideEffectsType";
    TermToTypes["com.sap.vocabularies.Common.v1.DefaultValuesFunction"] = "com.sap.vocabularies.Common.v1.QualifiedName";
    TermToTypes["com.sap.vocabularies.Common.v1.FilterDefaultValue"] = "Edm.PrimitiveType";
    TermToTypes["com.sap.vocabularies.Common.v1.FilterDefaultValueHigh"] = "Edm.PrimitiveType";
    TermToTypes["com.sap.vocabularies.Common.v1.SortOrder"] = "com.sap.vocabularies.Common.v1.SortOrderType";
    TermToTypes["com.sap.vocabularies.Common.v1.RecursiveHierarchy"] = "com.sap.vocabularies.Common.v1.RecursiveHierarchyType";
    TermToTypes["com.sap.vocabularies.Common.v1.CreatedAt"] = "Edm.DateTimeOffset";
    TermToTypes["com.sap.vocabularies.Common.v1.CreatedBy"] = "com.sap.vocabularies.Common.v1.UserID";
    TermToTypes["com.sap.vocabularies.Common.v1.ChangedAt"] = "Edm.DateTimeOffset";
    TermToTypes["com.sap.vocabularies.Common.v1.ChangedBy"] = "com.sap.vocabularies.Common.v1.UserID";
    TermToTypes["com.sap.vocabularies.Common.v1.ApplyMultiUnitBehaviorForSortingAndFiltering"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Common.v1.PrimitivePropertyPath"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.CodeList.v1.CurrencyCodes"] = "com.sap.vocabularies.CodeList.v1.CodeListSource";
    TermToTypes["com.sap.vocabularies.CodeList.v1.UnitsOfMeasure"] = "com.sap.vocabularies.CodeList.v1.CodeListSource";
    TermToTypes["com.sap.vocabularies.CodeList.v1.StandardCode"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.CodeList.v1.ExternalCode"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.CodeList.v1.IsConfigurationDeprecationCode"] = "Edm.Boolean";
    TermToTypes["com.sap.vocabularies.Communication.v1.Contact"] = "com.sap.vocabularies.Communication.v1.ContactType";
    TermToTypes["com.sap.vocabularies.Communication.v1.Address"] = "com.sap.vocabularies.Communication.v1.AddressType";
    TermToTypes["com.sap.vocabularies.Communication.v1.IsEmailAddress"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Communication.v1.IsPhoneNumber"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Communication.v1.Event"] = "com.sap.vocabularies.Communication.v1.EventData";
    TermToTypes["com.sap.vocabularies.Communication.v1.Task"] = "com.sap.vocabularies.Communication.v1.TaskData";
    TermToTypes["com.sap.vocabularies.Communication.v1.Message"] = "com.sap.vocabularies.Communication.v1.MessageData";
    TermToTypes["com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy"] = "com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchyType";
    TermToTypes["com.sap.vocabularies.PersonalData.v1.EntitySemantics"] = "com.sap.vocabularies.PersonalData.v1.EntitySemanticsType";
    TermToTypes["com.sap.vocabularies.PersonalData.v1.FieldSemantics"] = "com.sap.vocabularies.PersonalData.v1.FieldSemanticsType";
    TermToTypes["com.sap.vocabularies.PersonalData.v1.IsPotentiallyPersonal"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.Session.v1.StickySessionSupported"] = "com.sap.vocabularies.Session.v1.StickySessionSupportedType";
    TermToTypes["com.sap.vocabularies.UI.v1.HeaderInfo"] = "com.sap.vocabularies.UI.v1.HeaderInfoType";
    TermToTypes["com.sap.vocabularies.UI.v1.Identification"] = "com.sap.vocabularies.UI.v1.DataFieldAbstract";
    TermToTypes["com.sap.vocabularies.UI.v1.Badge"] = "com.sap.vocabularies.UI.v1.BadgeType";
    TermToTypes["com.sap.vocabularies.UI.v1.LineItem"] = "com.sap.vocabularies.UI.v1.DataFieldAbstract";
    TermToTypes["com.sap.vocabularies.UI.v1.StatusInfo"] = "com.sap.vocabularies.UI.v1.DataFieldAbstract";
    TermToTypes["com.sap.vocabularies.UI.v1.FieldGroup"] = "com.sap.vocabularies.UI.v1.FieldGroupType";
    TermToTypes["com.sap.vocabularies.UI.v1.ConnectedFields"] = "com.sap.vocabularies.UI.v1.ConnectedFieldsType";
    TermToTypes["com.sap.vocabularies.UI.v1.GeoLocations"] = "com.sap.vocabularies.UI.v1.GeoLocationType";
    TermToTypes["com.sap.vocabularies.UI.v1.GeoLocation"] = "com.sap.vocabularies.UI.v1.GeoLocationType";
    TermToTypes["com.sap.vocabularies.UI.v1.Contacts"] = "Edm.AnnotationPath";
    TermToTypes["com.sap.vocabularies.UI.v1.MediaResource"] = "com.sap.vocabularies.UI.v1.MediaResourceType";
    TermToTypes["com.sap.vocabularies.UI.v1.DataPoint"] = "com.sap.vocabularies.UI.v1.DataPointType";
    TermToTypes["com.sap.vocabularies.UI.v1.KPI"] = "com.sap.vocabularies.UI.v1.KPIType";
    TermToTypes["com.sap.vocabularies.UI.v1.Chart"] = "com.sap.vocabularies.UI.v1.ChartDefinitionType";
    TermToTypes["com.sap.vocabularies.UI.v1.ValueCriticality"] = "com.sap.vocabularies.UI.v1.ValueCriticalityType";
    TermToTypes["com.sap.vocabularies.UI.v1.CriticalityLabels"] = "com.sap.vocabularies.UI.v1.CriticalityLabelType";
    TermToTypes["com.sap.vocabularies.UI.v1.SelectionFields"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.UI.v1.Facets"] = "com.sap.vocabularies.UI.v1.Facet";
    TermToTypes["com.sap.vocabularies.UI.v1.HeaderFacets"] = "com.sap.vocabularies.UI.v1.Facet";
    TermToTypes["com.sap.vocabularies.UI.v1.QuickViewFacets"] = "com.sap.vocabularies.UI.v1.Facet";
    TermToTypes["com.sap.vocabularies.UI.v1.QuickCreateFacets"] = "com.sap.vocabularies.UI.v1.Facet";
    TermToTypes["com.sap.vocabularies.UI.v1.FilterFacets"] = "com.sap.vocabularies.UI.v1.ReferenceFacet";
    TermToTypes["com.sap.vocabularies.UI.v1.SelectionPresentationVariant"] = "com.sap.vocabularies.UI.v1.SelectionPresentationVariantType";
    TermToTypes["com.sap.vocabularies.UI.v1.PresentationVariant"] = "com.sap.vocabularies.UI.v1.PresentationVariantType";
    TermToTypes["com.sap.vocabularies.UI.v1.SelectionVariant"] = "com.sap.vocabularies.UI.v1.SelectionVariantType";
    TermToTypes["com.sap.vocabularies.UI.v1.ThingPerspective"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.IsSummary"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.PartOfPreview"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.Map"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.Gallery"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.IsImageURL"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.IsImage"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.MultiLineText"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.TextArrangement"] = "com.sap.vocabularies.UI.v1.TextArrangementType";
    TermToTypes["com.sap.vocabularies.UI.v1.Note"] = "com.sap.vocabularies.UI.v1.NoteType";
    TermToTypes["com.sap.vocabularies.UI.v1.Importance"] = "com.sap.vocabularies.UI.v1.ImportanceType";
    TermToTypes["com.sap.vocabularies.UI.v1.Hidden"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.IsCopyAction"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.CreateHidden"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.UpdateHidden"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.DeleteHidden"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.HiddenFilter"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.AdaptationHidden"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.DataFieldDefault"] = "com.sap.vocabularies.UI.v1.DataFieldAbstract";
    TermToTypes["com.sap.vocabularies.UI.v1.Criticality"] = "com.sap.vocabularies.UI.v1.CriticalityType";
    TermToTypes["com.sap.vocabularies.UI.v1.CriticalityCalculation"] = "com.sap.vocabularies.UI.v1.CriticalityCalculationType";
    TermToTypes["com.sap.vocabularies.UI.v1.Emphasized"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.OrderBy"] = "Edm.PropertyPath";
    TermToTypes["com.sap.vocabularies.UI.v1.ParameterDefaultValue"] = "Edm.PrimitiveType";
    TermToTypes["com.sap.vocabularies.UI.v1.RecommendationState"] = "com.sap.vocabularies.UI.v1.RecommendationStateType";
    TermToTypes["com.sap.vocabularies.UI.v1.RecommendationList"] = "com.sap.vocabularies.UI.v1.RecommendationListType";
    TermToTypes["com.sap.vocabularies.UI.v1.ExcludeFromNavigationContext"] = "Org.OData.Core.V1.Tag";
    TermToTypes["com.sap.vocabularies.UI.v1.DoNotCheckScaleOfMeasuredQuantity"] = "Edm.Boolean";
    TermToTypes["com.sap.vocabularies.HTML5.v1.CssDefaults"] = "com.sap.vocabularies.HTML5.v1.CssDefaultsType";
})(TermToTypes = exports.TermToTypes || (exports.TermToTypes = {}));


/***/ }),

/***/ 899:
/***/ (function(__unused_webpack_module, exports) {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VocabularyReferences = void 0;
/**
 * The list of vocabularies with default aliases.
 */
exports.VocabularyReferences = [
    { alias: "Auth", namespace: "Org.OData.Authorization.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Authorization.V1.xml" },
    { alias: "Core", namespace: "Org.OData.Core.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml" },
    { alias: "Capabilities", namespace: "Org.OData.Capabilities.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml" },
    { alias: "Aggregation", namespace: "Org.OData.Aggregation.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.xml" },
    { alias: "Validation", namespace: "Org.OData.Validation.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Validation.V1.xml" },
    { alias: "Measures", namespace: "Org.OData.Measures.V1", uri: "https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Measures.V1.xml" },
    { alias: "Analytics", namespace: "com.sap.vocabularies.Analytics.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/Analytics.xml" },
    { alias: "Common", namespace: "com.sap.vocabularies.Common.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/Common.xml" },
    { alias: "CodeList", namespace: "com.sap.vocabularies.CodeList.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/CodeList.xml" },
    { alias: "Communication", namespace: "com.sap.vocabularies.Communication.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/Communication.xml" },
    { alias: "Hierarchy", namespace: "com.sap.vocabularies.Hierarchy.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/Hierarchy.xml" },
    { alias: "PersonalData", namespace: "com.sap.vocabularies.PersonalData.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/PersonalData.xml" },
    { alias: "Session", namespace: "com.sap.vocabularies.Session.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/Session.xml" },
    { alias: "UI", namespace: "com.sap.vocabularies.UI.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/UI.xml" },
    { alias: "HTML5", namespace: "com.sap.vocabularies.HTML5.v1", uri: "https://sap.github.io/odata-vocabularies/vocabularies/HTML5.xml" }
];


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__(878);
/******/ 	AnnotationConverter = __webpack_exports__;
/******/ 	
/******/ })()
;

    return AnnotationConverter;
 },true);
 /*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/common/AnnotationConverter", [],function(){var a;(function(){"use strict";var e={175:function(a,e,t){Object.defineProperty(e,"__esModule",{value:true});e.convert=void 0;const o=t(899);const r=t(168);const i=Symbol("Annotation Target");function n(a,e){if(a[a.length-1]!==e){a.push(e)}return a}function s(a,e,t,o){var c,l,p,m;if(t.startsWith("/")){t=t.substring(1);e=undefined}const v=t.split("/").reduce((a,e)=>{if(e.includes("@")){const[t,o]=(0,r.splitAtFirst)(e,"@");a.push(t);a.push(`@${o}`)}else{a.push(e)}return a},[]);if(e===undefined){if(v[0].startsWith(`${a.rawSchema.namespace}.`)&&v[0]!==((c=a.getConvertedEntityContainer())===null||c===void 0?void 0:c.fullyQualifiedName)){e=(p=(l=a.getConvertedEntityType(v[0]))!==null&&l!==void 0?l:a.getConvertedComplexType(v[0]))!==null&&p!==void 0?p:a.getConvertedAction(v[0]);v.shift()}else{e=a.getConvertedEntityContainer()}}else if(e[i]!==undefined){e=e[i]}else if(e._type==="Property"){const t=(0,r.substringBeforeFirst)(e.fullyQualifiedName,"/");e=(m=a.getConvertedEntityType(t))!==null&&m!==void 0?m:a.getConvertedComplexType(t)}const g=v.reduce((e,t)=>{var o,c,l,u,p;const m=a=>{e.messages.push({message:a});e.target=undefined;return e};if(e.target===undefined){return e}e.objectPath=n(e.objectPath,e.target);if(t.startsWith("@")&&t!=="@$ui5.overload"){const[r,i]=a.splitTerm(t);const n=(o=e.target.annotations[r.substring(1)])===null||o===void 0?void 0:o[i];if(n!==undefined){e.target=n;return e}return m(`Annotation '${t.substring(1)}' not found on ${e.target._type} '${e.target.fullyQualifiedName}'`)}if(e.target.$target){let o;if(t==="$AnnotationPath"){o=e.target.value}else if(t==="$Path"){o=e.target.path}if(o!==undefined){const t=s(a,e.target[i],o);t.objectPath.forEach(a=>{if(!e.objectPath.includes(a)){e.objectPath=n(e.objectPath,a)}});e.target=t.target;e.objectPath=n(e.objectPath,e.target);return e}}switch((c=e.target)===null||c===void 0?void 0:c._type){case"Schema":break;case"EntityContainer":{const o=e.target;if(t===""||a.unalias(t)===o.fullyQualifiedName){return e}const r=(u=(l=o.entitySets.by_name(t))!==null&&l!==void 0?l:o.singletons.by_name(t))!==null&&u!==void 0?u:o.actionImports.by_name(t);if(r){e.target=r;return e}}break;case"EntitySet":case"Singleton":{const o=e.target;if(t===""||t==="$Type"){e.target=o.entityType;return e}if(t==="$"){return e}if(t==="$NavigationPropertyBinding"){const a=o.navigationPropertyBinding;e.target=a;return e}const r=s(a,o.entityType,t);e.target=r.target;e.objectPath=r.objectPath.reduce(n,e.objectPath);return e}case"EntityType":{const o=e.target;if(t===""||t==="$Type"){return e}const i=o.entityProperties.by_name(t);if(i){e.target=i;return e}const n=o.navigationProperties.by_name(t);if(n){e.target=n;return e}const s=(0,r.substringBeforeFirst)(a.unalias(t),"(");const c=o.actions[s];if(c){e.target=c;return e}}break;case"ActionImport":{const o=s(a,e.target.action,t);e.target=o.target;e.objectPath=o.objectPath.reduce(n,e.objectPath);return e}case"Action":{const a=e.target;if(t===""){return e}if(t==="@$ui5.overload"||t==="0"){return e}if(t==="$Parameter"&&a.isBound){e.target=a.parameters;return e}const o=(p=a.parameters[t])!==null&&p!==void 0?p:a.parameters.find(a=>a.name===t);if(o){e.target=o;return e}break}case"Property":{const a=e.target;const o=a.targetType;if(o!==undefined){const a=o.properties.by_name(t);if(a){e.target=a;return e}const r=o.navigationProperties.by_name(t);if(r){e.target=r;return e}}}break;case"ActionParameter":const o=e.target.typeReference;if(o!==undefined){const r=s(a,o,t);e.target=r.target;e.objectPath=r.objectPath.reduce(n,e.objectPath);return e}break;case"NavigationProperty":const i=s(a,e.target.targetType,t);e.target=i.target;e.objectPath=i.objectPath.reduce(n,e.objectPath);return e;default:if(t===""){return e}if(e.target[t]){e.target=e.target[t];e.objectPath=n(e.objectPath,e.target);return e}}return m(`Element '${t}' not found at ${e.target._type} '${e.target.fullyQualifiedName}'`)},{target:e,objectPath:[],messages:[]});g.messages.forEach(e=>a.logError(e.message));if(!g.target){if(o){const r=u(a,o,e.fullyQualifiedName);a.logError("Unable to resolve the path expression: "+"\n"+t+"\n"+"\n"+"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \n\n"+"<Annotation Term = "+o+">"+"\n"+"<Record Type = "+r+">"+"\n"+"<AnnotationPath = "+t+">")}else{a.logError("Unable to resolve the path expression: "+t+"\n"+"\n"+"Hint: Check and correct the path values under the following structure in the metadata (annotation.xml file or CDS annotations for the application): \n\n"+"<Annotation Term = "+v[0]+">"+"\n"+"<PropertyValue  Path= "+v[1]+">")}}return g}function c(a){return a.includes("@")}function l(a,e,t,n,l,u,p){if(u===undefined){return undefined}switch(u.type){case"String":return u.String;case"Int":return u.Int;case"Bool":return u.Bool;case"Decimal":return(0,r.Decimal)(u.Decimal);case"Date":return u.Date;case"EnumMember":const m=u.EnumMember.split(" ").map(e=>{var t;const i=(t=a.unalias(e))!==null&&t!==void 0?t:"";return(0,r.alias)(o.VocabularyReferences,i)});if(m[0]!==undefined&&r.EnumIsFlag[(0,r.substringBeforeFirst)(m[0],"/")]){return m}return m[0];case"PropertyPath":return{type:"PropertyPath",value:u.PropertyPath,fullyQualifiedName:p,$target:s(a,e,u.PropertyPath,t).target,[i]:e};case"NavigationPropertyPath":return{type:"NavigationPropertyPath",value:u.NavigationPropertyPath,fullyQualifiedName:p,$target:s(a,e,u.NavigationPropertyPath,t).target,[i]:e};case"AnnotationPath":return{type:"AnnotationPath",value:u.AnnotationPath,fullyQualifiedName:p,$target:s(a,e,a.unalias(u.AnnotationPath),t).target,annotationsTerm:t,term:"",path:"",[i]:e};case"Path":const g=s(a,e,u.Path,t).target;if(c(u.Path)){return g}else{return{type:"Path",path:u.Path,fullyQualifiedName:p,$target:g,[i]:e}}case"Record":return v(a,t,e,n,l,u.Record,p);case"Collection":return y(a,e,t,n,l,u.Collection,p);case"Apply":case"Null":case"Not":case"Eq":case"Ne":case"Gt":case"Ge":case"Lt":case"Le":case"If":case"And":case"Or":default:return u}}function u(a,e,t,o){let i=r.TermToTypes[e];if(o){e=`${(0,r.substringBeforeLast)(e,".")}.${o}`;i=r.TermToTypes[e]}a.logError(`The type of the record used within the term ${e} was not defined and was inferred as ${i}.\nHint: If possible, try to maintain the Type property for each Record.\n<Annotations Target="${t}">\n\t<Annotation Term="${e}">\n\t\t<Record>...</Record>\n\t</Annotation>\n</Annotations>`);return i}function p(a){return a.hasOwnProperty("Action")&&(a.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||a.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithAction")}function m(a,e,t,o,r){let i;if(!r.type&&e){i=u(a,e,t.fullyQualifiedName,o)}else{i=a.unalias(r.type)}return i}function v(a,e,t,o,n,s,c){const u={$Type:m(a,e,t,o,s),fullyQualifiedName:c,[i]:t,__source:n};for(const o of s.propertyValues){(0,r.lazy)(u,o.name,()=>l(a,t,e,o.name,n,o.value,`${c}/${o.name}`))}(0,r.lazy)(u,"annotations",h(a,s,u));if(p(u)){(0,r.lazy)(u,"ActionTarget",()=>{var e,o,r;const i=a.unalias((e=u.Action)===null||e===void 0?void 0:e.toString());let n=(o=t.actions)===null||o===void 0?void 0:o[i];if(!n){n=(r=a.getConvertedActionImport(i))===null||r===void 0?void 0:r.action}if(!n){n=a.getConvertedAction(i);if(!(n===null||n===void 0?void 0:n.isBound)){n=undefined}}if(!n){a.logError(`${u.fullyQualifiedName}: Unable to resolve '${u.Action}' ('${i}')`)}return n})}return u}function g(a){let e=a.type;if(e===undefined&&a.length>0){const t=a[0];if(t.hasOwnProperty("PropertyPath")){e="PropertyPath"}else if(t.hasOwnProperty("Path")){e="Path"}else if(t.hasOwnProperty("AnnotationPath")){e="AnnotationPath"}else if(t.hasOwnProperty("NavigationPropertyPath")){e="NavigationPropertyPath"}else if(typeof t==="object"&&(t.hasOwnProperty("type")||t.hasOwnProperty("propertyValues"))){e="Record"}else if(typeof t==="string"){e="String"}}else if(e===undefined){e="EmptyCollection"}return e}function y(a,e,t,o,i,n,c){const l=g(n);switch(l){case"PropertyPath":return n.map((o,i)=>{const n={type:"PropertyPath",value:o.PropertyPath,fullyQualifiedName:`${c}/${i}`};(0,r.lazy)(n,"$target",()=>{var r;return(r=s(a,e,o.PropertyPath,t).target)!==null&&r!==void 0?r:{}});return n});case"Path":return n.map(o=>s(a,e,o.Path,t).target);case"AnnotationPath":return n.map((o,i)=>{const n={type:"AnnotationPath",value:o.AnnotationPath,fullyQualifiedName:`${c}/${i}`,annotationsTerm:t,term:"",path:""};(0,r.lazy)(n,"$target",()=>s(a,e,o.AnnotationPath,t).target);return n});case"NavigationPropertyPath":return n.map((o,i)=>{var n;const l=(n=o.NavigationPropertyPath)!==null&&n!==void 0?n:"";const u={type:"NavigationPropertyPath",value:l,fullyQualifiedName:`${c}/${i}`};if(l===""){u.$target=undefined}else{(0,r.lazy)(u,"$target",()=>s(a,e,l,t).target)}return u});case"Record":return n.map((r,n)=>v(a,t,e,o,i,r,`${c}/${n}`));case"Apply":case"Null":case"If":case"Eq":case"Ne":case"Lt":case"Gt":case"Le":case"Ge":case"Not":case"And":case"Or":return n.map(a=>a);case"String":return n.map(a=>{if(typeof a==="string"||a===undefined){return a}else{return a.String}});default:if(n.length===0){return[]}throw new Error("Unsupported case")}}function O(a){return!!a.targetTypeName}function d(a,e,t){var n;let s;if(t.record){s=v(a,t.term,e,"",t.__source,t.record,t.fullyQualifiedName)}else if(t.collection===undefined){s=l(a,e,t.term,"",t.__source,(n=t.value)!==null&&n!==void 0?n:{type:"Bool",Bool:true},t.fullyQualifiedName)}else if(t.collection){s=y(a,e,t.term,"",t.__source,t.collection,t.fullyQualifiedName)}else{throw new Error("Unsupported case")}switch(typeof s){case"string":s=new String(s);break;case"boolean":s=new Boolean(s);break;case"number":s=new Number(s);break;default:break}s.fullyQualifiedName=t.fullyQualifiedName;s[i]=e;const[c,u]=a.splitTerm(t.term);s.term=a.unalias(`${c}.${u}`,o.VocabularyReferences);s.qualifier=t.qualifier;s.__source=t.__source;try{(0,r.lazy)(s,"annotations",h(a,t,s))}catch(a){}return s}function f(a){return Object.keys(a.rawSchema.annotations).reduceRight((e,t)=>{for(const{target:o,annotations:r}of a.rawSchema.annotations[t]){if(!e[o]){e[o]=[]}e[o].push(...r.filter(a=>!e[o].some(e=>e.term===a.term&&e.qualifier===a.qualifier)).map(e=>{let r=`${o}@${a.unalias(e.term)}`;if(e.qualifier){r=`${r}#${e.qualifier}`}const i=e;i.fullyQualifiedName=r;i.__source=t;return i}))}return e},{})}class C{getAnnotations(a){var e;if(this.annotationsByTarget===undefined){this.annotationsByTarget=f(this)}return(e=this.annotationsByTarget[a])!==null&&e!==void 0?e:[]}getConvertedEntityContainer(){return this.getConvertedElement(this.rawMetadata.schema.entityContainer.fullyQualifiedName,this.rawMetadata.schema.entityContainer,P)}getConvertedEntitySet(a){return this.convertedOutput.entitySets.by_fullyQualifiedName(a)}getConvertedSingleton(a){return this.convertedOutput.singletons.by_fullyQualifiedName(a)}getConvertedEntityType(a){return this.convertedOutput.entityTypes.by_fullyQualifiedName(a)}getConvertedComplexType(a){return this.convertedOutput.complexTypes.by_fullyQualifiedName(a)}getConvertedTypeDefinition(a){return this.convertedOutput.typeDefinitions.by_fullyQualifiedName(a)}getConvertedActionImport(a){let e=this.convertedOutput.actionImports.by_fullyQualifiedName(a);if(!e){e=this.convertedOutput.actionImports.by_name(a)}return e}getConvertedAction(a){return this.convertedOutput.actions.by_fullyQualifiedName(a)}convert(a,e){if(Array.isArray(a)){return()=>{const t=a.reduce((a,t)=>{const o=this.getConvertedElement(t.fullyQualifiedName,t,e);if(o){a.push(o)}return a},[]);(0,r.addGetByValue)(t,"name");(0,r.addGetByValue)(t,"fullyQualifiedName");return t}}else{return()=>this.getConvertedElement(a.fullyQualifiedName,a,e)}}constructor(a,e){this.convertedElements=new Map;this.rawMetadata=a;this.rawSchema=a.schema;this.convertedOutput=e}getConvertedElement(a,e,t){let o=this.convertedElements.get(a);if(o===undefined){const r=typeof e==="function"?e.apply(undefined,[a]):e;if(r!==undefined){o=t.apply(undefined,[this,r]);this.convertedElements.set(a,o)}}return o}logError(a){this.convertedOutput.diagnostics.push({message:a})}splitTerm(a){const e=(0,r.alias)(o.VocabularyReferences,a);return(0,r.splitAtLast)(e,".")}unalias(a,e=this.rawMetadata.references){var t;return(t=(0,r.unalias)(e,a,this.rawSchema.namespace))!==null&&t!==void 0?t:""}}function b(a,e){return()=>{let t=a.getConvertedEntityType(e);if(!t){a.logError(`EntityType '${e}' not found`);t={}}return t}}function D(a,e,t){return()=>Object.keys(e).reduce((o,i)=>{const n=e[i];(0,r.lazy)(o,i,()=>{let e;if(n._type==="Singleton"){e=a.getConvertedSingleton(n.fullyQualifiedName)}else{e=a.getConvertedEntitySet(n.fullyQualifiedName)}if(!e){a.logError(`${t._type} '${t.fullyQualifiedName}': Failed to resolve NavigationPropertyBinding ${i}`);e={}}return e});return o},{})}function T(a,e){const t=e.annotations;return()=>V(a,e,t!==null&&t!==void 0?t:a.getAnnotations(e.fullyQualifiedName))}function h(a,e,t){return()=>{const o=t.fullyQualifiedName;let r;if(e.annotations&&e.annotations.length>0){r=e.annotations}else{r=a.getAnnotations(o)}r===null||r===void 0?void 0:r.forEach(a=>{a.target=o;a.__source=t.__source;a[i]=t[i];a.fullyQualifiedName=`${o}@${a.term}`});return V(a,t,r!==null&&r!==void 0?r:[])}}function V(a,e,t){return t.reduce((t,o)=>{const[i,n]=a.splitTerm(o.term);const s=`${n}${o.qualifier?"#"+o.qualifier:""}`;if(t[i]===undefined){t[i]={}}if(!t[i].hasOwnProperty(s)){(0,r.lazy)(t[i],s,()=>a.getConvertedElement(o.fullyQualifiedName,o,(a,t)=>d(a,e,t)))}return t},{})}function P(a,e){const t=e;(0,r.lazy)(t,"annotations",T(a,e));(0,r.lazy)(t,"entitySets",a.convert(a.rawSchema.entitySets,A));(0,r.lazy)(t,"singletons",a.convert(a.rawSchema.singletons,I));(0,r.lazy)(t,"actionImports",a.convert(a.rawSchema.actionImports,N));return t}function I(a,e){const t=e;(0,r.lazy)(t,"entityType",b(a,e.entityTypeName));(0,r.lazy)(t,"annotations",T(a,e));const o=e.navigationPropertyBinding;(0,r.lazy)(t,"navigationPropertyBinding",D(a,o,e));return t}function A(a,e){const t=e;(0,r.lazy)(t,"entityType",b(a,e.entityTypeName));(0,r.lazy)(t,"annotations",T(a,e));const o=e.navigationPropertyBinding;(0,r.lazy)(t,"navigationPropertyBinding",D(a,o,e));return t}function S(a,e){const t=e;e.keys.forEach(a=>{a.isKey=true});(0,r.lazy)(t,"annotations",T(a,e));(0,r.lazy)(t,"keys",a.convert(e.keys,E));(0,r.lazy)(t,"entityProperties",a.convert(e.entityProperties,E));(0,r.lazy)(t,"navigationProperties",a.convert(e.navigationProperties,U));(0,r.lazy)(t,"actions",()=>a.rawSchema.actions.filter(a=>a.isBound&&(a.sourceType===e.fullyQualifiedName||a.sourceType===`Collection(${e.fullyQualifiedName})`)).reduce((e,t)=>{const o=`${a.rawSchema.namespace}.${t.name}`;e[o]=a.getConvertedAction(t.fullyQualifiedName);return e},{}));t.resolvePath=(t,o)=>{const r=s(a,e,t);if(o){return{target:r.target,visitedObjects:r.objectPath,messages:r.messages}}else{return r.target}};return t}function E(a,e){const t=e;(0,r.lazy)(t,"annotations",T(a,e));(0,r.lazy)(t,"targetType",()=>{var t;const o=e.type;const r=o.startsWith("Collection")?o.substring(11,o.length-1):o;return(t=a.getConvertedComplexType(r))!==null&&t!==void 0?t:a.getConvertedTypeDefinition(r)});return t}function U(a,e){var t,o,i;const n=e;n.referentialConstraint=(t=n.referentialConstraint)!==null&&t!==void 0?t:[];if(!O(e)){const t=(o=a.rawSchema.associations.find(a=>a.fullyQualifiedName===e.relationship))===null||o===void 0?void 0:o.associationEnd.find(a=>a.role===e.toRole);n.isCollection=(t===null||t===void 0?void 0:t.multiplicity)==="*";n.targetTypeName=(i=t===null||t===void 0?void 0:t.type)!==null&&i!==void 0?i:""}(0,r.lazy)(n,"targetType",b(a,e.targetTypeName));(0,r.lazy)(n,"annotations",T(a,e));return n}function N(a,e){const t=e;(0,r.lazy)(t,"annotations",T(a,e));(0,r.lazy)(t,"action",()=>a.getConvertedAction(e.actionName));return t}function R(a,e){const t=e;if(t.sourceType){(0,r.lazy)(t,"sourceEntityType",b(a,e.sourceType))}if(t.returnType){(0,r.lazy)(t,"returnEntityType",b(a,e.returnType))}(0,r.lazy)(t,"parameters",a.convert(e.parameters,x));(0,r.lazy)(t,"annotations",()=>{const t=(0,r.substringBeforeFirst)(e.fullyQualifiedName,"(");const o=e.isBound?e.fullyQualifiedName:`${e.fullyQualifiedName}()`;const i=a.getAnnotations(o);const n=a.getAnnotations(t);for(const a of n){if(!i.some(e=>e.term===a.term&&e.qualifier===a.qualifier)){i.push(a)}}return V(a,e,i)});return t}function x(a,e){const t=e;(0,r.lazy)(t,"typeReference",()=>{var t,o;return(o=(t=a.getConvertedEntityType(e.type))!==null&&t!==void 0?t:a.getConvertedComplexType(e.type))!==null&&o!==void 0?o:a.getConvertedTypeDefinition(e.type)});(0,r.lazy)(t,"annotations",T(a,e));return t}function $(a,e){const t=e;(0,r.lazy)(t,"properties",a.convert(e.properties,E));(0,r.lazy)(t,"navigationProperties",a.convert(e.navigationProperties,U));(0,r.lazy)(t,"annotations",T(a,e));return t}function F(a,e){const t=e;(0,r.lazy)(t,"annotations",T(a,e));return t}function M(a){const e={version:a.version,namespace:a.schema.namespace,annotations:a.schema.annotations,references:o.VocabularyReferences.concat(a.references),diagnostics:[]};if(a.references.length===0){a.references=o.VocabularyReferences}const t=new C(a,e);(0,r.lazy)(e,"entityContainer",t.convert(t.rawSchema.entityContainer,P));(0,r.lazy)(e,"entitySets",t.convert(t.rawSchema.entitySets,A));(0,r.lazy)(e,"singletons",t.convert(t.rawSchema.singletons,I));(0,r.lazy)(e,"entityTypes",t.convert(t.rawSchema.entityTypes,S));(0,r.lazy)(e,"actions",t.convert(t.rawSchema.actions,R));(0,r.lazy)(e,"complexTypes",t.convert(t.rawSchema.complexTypes,$));(0,r.lazy)(e,"actionImports",t.convert(t.rawSchema.actionImports,N));(0,r.lazy)(e,"typeDefinitions",t.convert(t.rawSchema.typeDefinitions,F));e.resolvePath=function a(e){const o=s(t,undefined,e);if(o.target){n(o.objectPath,o.target)}return o};return e}e.convert=M},878:function(a,e,t){var o=this&&this.__createBinding||(Object.create?function(a,e,t,o){if(o===undefined)o=t;var r=Object.getOwnPropertyDescriptor(e,t);if(!r||("get"in r?!e.__esModule:r.writable||r.configurable)){r={enumerable:true,get:function(){return e[t]}}}Object.defineProperty(a,o,r)}:function(a,e,t,o){if(o===undefined)o=t;a[o]=e[t]});var r=this&&this.__exportStar||function(a,e){for(var t in a)if(t!=="default"&&!Object.prototype.hasOwnProperty.call(e,t))o(e,a,t)};Object.defineProperty(e,"__esModule",{value:true});r(t(175),e);r(t(168),e);r(t(311),e)},168:function(a,e,t){Object.defineProperty(e,"__esModule",{value:true});e.addGetByValue=e.createIndexedFind=e.lazy=e.Decimal=e.isComplexTypeDefinition=e.unalias=e.alias=e.substringBeforeLast=e.substringBeforeFirst=e.splitAtLast=e.splitAtFirst=e.defaultReferences=e.TermToTypes=e.EnumIsFlag=void 0;var o=t(830);Object.defineProperty(e,"EnumIsFlag",{enumerable:true,get:function(){return o.EnumIsFlag}});var r=t(377);Object.defineProperty(e,"TermToTypes",{enumerable:true,get:function(){return r.TermToTypes}});var i=t(899);Object.defineProperty(e,"defaultReferences",{enumerable:true,get:function(){return i.VocabularyReferences}});function n(a,e){return e<0?[a,""]:[a.substring(0,e),a.substring(e+1)]}function s(a,e){return e<0?a:a.substring(0,e)}function c(a,e){return n(a,a.indexOf(e))}e.splitAtFirst=c;function l(a,e){return n(a,a.lastIndexOf(e))}e.splitAtLast=l;function u(a,e){return s(a,a.indexOf(e))}e.substringBeforeFirst=u;function p(a,e){return s(a,a.lastIndexOf(e))}e.substringBeforeLast=p;function m(a,e){if(!a.reverseReferenceMap){a.reverseReferenceMap=a.reduce((a,e)=>{a[e.namespace]=e;return a},{})}if(!e){return e}const[t,o]=l(e,".");const r=a.reverseReferenceMap[t];if(r){return`${r.alias}.${o}`}else if(e.includes("@")){const[t,o]=c(e,"@");return`${t}@${m(a,o)}`}else{return e}}e.alias=m;function v(a,e,t){var o;const r=e=>{if(!a.referenceMap){a.referenceMap=Object.fromEntries(a.map(a=>[a.alias,a]))}const[o,r]=c(e,".");if(!r||r.includes(".")){return e}const i=o.startsWith("@");const n=i?o.substring(1):o;const s=a.referenceMap[n];if(s){return i?`@${s.namespace}.${r}`:`${s.namespace}.${r}`}return t&&!i?`${t}.${r}`:e};return(o=e===null||e===void 0?void 0:e.split("/").reduce((a,e)=>{const[t,o]=c(e,"(");const i=[r(t)];if(o){const a=o.slice(0,-1);i.push(`(${r(a)})`)}a.push(i.join(""));return a},[]))===null||o===void 0?void 0:o.join("/")}e.unalias=v;function g(a){return!!a&&a._type==="ComplexType"&&!!a.properties}e.isComplexTypeDefinition=g;function y(a){return{isDecimal(){return true},valueOf(){return a},toString(){return a.toString()}}}e.Decimal=y;function O(a,e,t){const o=Symbol("initial");let r=o;Object.defineProperty(a,e,{enumerable:true,get(){if(r===o){r=t()}return r},set(a){r=a}})}e.lazy=O;function d(a,e){const t=new Map;return function o(r){const i=t.get(r);if((i===null||i===void 0?void 0:i[e])===r){return i}return a.find(a=>{if(!(a===null||a===void 0?void 0:a.hasOwnProperty(e))){return false}const o=a[e];t.set(o,a);return o===r})}}e.createIndexedFind=d;function f(a,e){const t=`by_${e}`;if(!a.hasOwnProperty(t)){Object.defineProperty(a,t,{writable:false,value:d(a,e)})}else{throw new Error(`Property '${t}' already exists`)}return a}e.addGetByValue=f},311:function(a,e,t){Object.defineProperty(e,"__esModule",{value:true});e.revertTermToGenericType=void 0;const o=t(168);function r(a,e){var t,o,r,i,n,s;let l;if(Array.isArray(e)){l={type:"Collection",Collection:e.map(e=>c(a,e))}}else if((t=e.isDecimal)===null||t===void 0?void 0:t.call(e)){l={type:"Decimal",Decimal:e.valueOf()}}else if((o=e.isString)===null||o===void 0?void 0:o.call(e)){const t=e.valueOf().split(".");if(t.length>1&&a.find(a=>a.alias===t[0])){l={type:"EnumMember",EnumMember:e.valueOf()}}else{l={type:"String",String:e.valueOf()}}}else if((r=e.isInt)===null||r===void 0?void 0:r.call(e)){l={type:"Int",Int:e.valueOf()}}else if((i=e.isFloat)===null||i===void 0?void 0:i.call(e)){l={type:"Float",Float:e.valueOf()}}else if((n=e.isDate)===null||n===void 0?void 0:n.call(e)){l={type:"Date",Date:e.valueOf()}}else if((s=e.isBoolean)===null||s===void 0?void 0:s.call(e)){l={type:"Bool",Bool:e.valueOf()}}else if(e.type==="Path"){l={type:"Path",Path:e.path}}else if(e.type==="AnnotationPath"){l={type:"AnnotationPath",AnnotationPath:e.value}}else if(e.type==="Apply"){l={type:"Apply",Apply:e.Apply}}else if(e.type==="Null"){l={type:"Null"}}else if(e.type==="PropertyPath"){l={type:"PropertyPath",PropertyPath:e.value}}else if(e.type==="NavigationPropertyPath"){l={type:"NavigationPropertyPath",NavigationPropertyPath:e.value}}else if(Object.prototype.hasOwnProperty.call(e,"$Type")){l={type:"Record",Record:c(a,e)}}return l}function i(a,e){let t;const o=e===null||e===void 0?void 0:e.constructor.name;switch(o){case"String":case"string":const o=e.toString().split(".");if(o.length>1&&a.find(a=>a.alias===o[0])){t={type:"EnumMember",EnumMember:e.toString()}}else{t={type:"String",String:e.toString()}}break;case"Boolean":case"boolean":t={type:"Bool",Bool:e.valueOf()};break;case"Number":case"number":if(e.toString()===e.toFixed()){t={type:"Int",Int:e.valueOf()}}else{t={type:"Decimal",Decimal:e.valueOf()}}break;case"object":default:t=r(a,e);break}return t}const n=["$Type","term","__source","qualifier","ActionTarget","fullyQualifiedName","annotations"];function s(a,e,t){Object.keys(e).filter(a=>a!=="_annotations").forEach(r=>{Object.keys(e[r]).forEach(i=>{const n=l(a,e[r][i]);if(!n.term){const e=(0,o.unalias)(a,`${r}.${i}`);if(e){const a=e.split("#");n.term=a[0];if(a.length>1){n.qualifier=a[1]}}}t.push(n)})})}function c(a,e){if(typeof e==="string"){return e}else if(typeof e==="object"){if(e.hasOwnProperty("$Type")){const t={type:e.$Type,propertyValues:[]};Object.keys(e).forEach(o=>{if(n.indexOf(o)===-1){const r=e[o];t.propertyValues.push({name:o,value:i(a,r)})}else if(o==="annotations"&&Object.keys(e[o]).length>0){t.annotations=[];s(a,e[o],t.annotations)}});return t}else if(e.type==="PropertyPath"){return{type:"PropertyPath",PropertyPath:e.value}}else if(e.type==="AnnotationPath"){return{type:"AnnotationPath",AnnotationPath:e.value}}else if(e.type==="NavigationPropertyPath"){return{type:"NavigationPropertyPath",NavigationPropertyPath:e.value}}}return undefined}function l(a,e){const t={term:e.term,qualifier:e.qualifier};if(Array.isArray(e)){if(e.hasOwnProperty("annotations")&&Object.keys(e.annotations).length>0){t.annotations=[];s(a,e.annotations,t.annotations)}return{...t,collection:e.map(e=>c(a,e))}}else if(e.hasOwnProperty("$Type")){return{...t,record:c(a,e)}}else{return{...t,value:i(a,e)}}}e.revertTermToGenericType=l},830:function(a,e){Object.defineProperty(e,"__esModule",{value:true});e.EnumIsFlag=void 0;e.EnumIsFlag={"Auth.KeyLocation":false,"Core.RevisionKind":false,"Core.DataModificationOperationKind":false,"Core.Permission":true,"Capabilities.ConformanceLevelType":false,"Capabilities.IsolationLevel":true,"Capabilities.NavigationType":false,"Capabilities.SearchExpressions":true,"Capabilities.HttpMethod":true,"Aggregation.RollupType":false,"Common.TextFormatType":false,"Common.FilterExpressionType":false,"Common.FieldControlType":false,"Common.EffectType":true,"Communication.KindType":false,"Communication.ContactInformationType":true,"Communication.PhoneType":true,"Communication.GenderType":false,"UI.VisualizationType":false,"UI.CriticalityType":false,"UI.ImprovementDirectionType":false,"UI.TrendType":false,"UI.ChartType":false,"UI.ChartAxisScaleBehaviorType":false,"UI.ChartAxisAutoScaleDataScopeType":false,"UI.ChartDimensionRoleType":false,"UI.ChartMeasureRoleType":false,"UI.SelectionRangeSignType":false,"UI.SelectionRangeOptionType":false,"UI.TextArrangementType":false,"UI.ImportanceType":false,"UI.CriticalityRepresentationType":false,"UI.OperationGroupingType":false}},377:function(a,e){Object.defineProperty(e,"__esModule",{value:true});e.TermToTypes=void 0;var t;(function(a){a["Org.OData.Authorization.V1.SecuritySchemes"]="Org.OData.Authorization.V1.SecurityScheme";a["Org.OData.Authorization.V1.Authorizations"]="Org.OData.Authorization.V1.Authorization";a["Org.OData.Core.V1.Revisions"]="Org.OData.Core.V1.RevisionType";a["Org.OData.Core.V1.Links"]="Org.OData.Core.V1.Link";a["Org.OData.Core.V1.Example"]="Org.OData.Core.V1.ExampleValue";a["Org.OData.Core.V1.Messages"]="Org.OData.Core.V1.MessageType";a["Org.OData.Core.V1.ValueException"]="Org.OData.Core.V1.ValueExceptionType";a["Org.OData.Core.V1.ResourceException"]="Org.OData.Core.V1.ResourceExceptionType";a["Org.OData.Core.V1.DataModificationException"]="Org.OData.Core.V1.DataModificationExceptionType";a["Org.OData.Core.V1.IsLanguageDependent"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.AppliesViaContainer"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.DereferenceableIDs"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.ConventionalIDs"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.Permissions"]="Org.OData.Core.V1.Permission";a["Org.OData.Core.V1.DefaultNamespace"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.Immutable"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.Computed"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.ComputedDefaultValue"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.IsURL"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.IsMediaType"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.ContentDisposition"]="Org.OData.Core.V1.ContentDispositionType";a["Org.OData.Core.V1.OptimisticConcurrency"]="Edm.PropertyPath";a["Org.OData.Core.V1.AdditionalProperties"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.AutoExpand"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.AutoExpandReferences"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.MayImplement"]="Org.OData.Core.V1.QualifiedTypeName";a["Org.OData.Core.V1.Ordered"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.PositionalInsert"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.AlternateKeys"]="Org.OData.Core.V1.AlternateKey";a["Org.OData.Core.V1.OptionalParameter"]="Org.OData.Core.V1.OptionalParameterType";a["Org.OData.Core.V1.OperationAvailable"]="Edm.Boolean";a["Org.OData.Core.V1.RequiresExplicitBinding"]="Org.OData.Core.V1.Tag";a["Org.OData.Core.V1.ExplicitOperationBindings"]="Org.OData.Core.V1.QualifiedBoundOperationName";a["Org.OData.Core.V1.SymbolicName"]="Org.OData.Core.V1.SimpleIdentifier";a["Org.OData.Core.V1.GeometryFeature"]="Org.OData.Core.V1.GeometryFeatureType";a["Org.OData.Capabilities.V1.ConformanceLevel"]="Org.OData.Capabilities.V1.ConformanceLevelType";a["Org.OData.Capabilities.V1.AsynchronousRequestsSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.BatchContinueOnErrorSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.IsolationSupported"]="Org.OData.Capabilities.V1.IsolationLevel";a["Org.OData.Capabilities.V1.CrossJoinSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.CallbackSupported"]="Org.OData.Capabilities.V1.CallbackType";a["Org.OData.Capabilities.V1.ChangeTracking"]="Org.OData.Capabilities.V1.ChangeTrackingType";a["Org.OData.Capabilities.V1.CountRestrictions"]="Org.OData.Capabilities.V1.CountRestrictionsType";a["Org.OData.Capabilities.V1.NavigationRestrictions"]="Org.OData.Capabilities.V1.NavigationRestrictionsType";a["Org.OData.Capabilities.V1.IndexableByKey"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.TopSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.SkipSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.ComputeSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.SelectSupport"]="Org.OData.Capabilities.V1.SelectSupportType";a["Org.OData.Capabilities.V1.BatchSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.BatchSupport"]="Org.OData.Capabilities.V1.BatchSupportType";a["Org.OData.Capabilities.V1.FilterRestrictions"]="Org.OData.Capabilities.V1.FilterRestrictionsType";a["Org.OData.Capabilities.V1.SortRestrictions"]="Org.OData.Capabilities.V1.SortRestrictionsType";a["Org.OData.Capabilities.V1.ExpandRestrictions"]="Org.OData.Capabilities.V1.ExpandRestrictionsType";a["Org.OData.Capabilities.V1.SearchRestrictions"]="Org.OData.Capabilities.V1.SearchRestrictionsType";a["Org.OData.Capabilities.V1.KeyAsSegmentSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.QuerySegmentSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.InsertRestrictions"]="Org.OData.Capabilities.V1.InsertRestrictionsType";a["Org.OData.Capabilities.V1.DeepInsertSupport"]="Org.OData.Capabilities.V1.DeepInsertSupportType";a["Org.OData.Capabilities.V1.UpdateRestrictions"]="Org.OData.Capabilities.V1.UpdateRestrictionsType";a["Org.OData.Capabilities.V1.DeepUpdateSupport"]="Org.OData.Capabilities.V1.DeepUpdateSupportType";a["Org.OData.Capabilities.V1.DeleteRestrictions"]="Org.OData.Capabilities.V1.DeleteRestrictionsType";a["Org.OData.Capabilities.V1.CollectionPropertyRestrictions"]="Org.OData.Capabilities.V1.CollectionPropertyRestrictionsType";a["Org.OData.Capabilities.V1.OperationRestrictions"]="Org.OData.Capabilities.V1.OperationRestrictionsType";a["Org.OData.Capabilities.V1.AnnotationValuesInQuerySupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Capabilities.V1.ModificationQueryOptions"]="Org.OData.Capabilities.V1.ModificationQueryOptionsType";a["Org.OData.Capabilities.V1.ReadRestrictions"]="Org.OData.Capabilities.V1.ReadRestrictionsType";a["Org.OData.Capabilities.V1.CustomHeaders"]="Org.OData.Capabilities.V1.CustomParameter";a["Org.OData.Capabilities.V1.CustomQueryOptions"]="Org.OData.Capabilities.V1.CustomParameter";a["Org.OData.Capabilities.V1.MediaLocationUpdateSupported"]="Org.OData.Core.V1.Tag";a["Org.OData.Aggregation.V1.ApplySupported"]="Org.OData.Aggregation.V1.ApplySupportedType";a["Org.OData.Aggregation.V1.ApplySupportedDefaults"]="Org.OData.Aggregation.V1.ApplySupportedBase";a["Org.OData.Aggregation.V1.Groupable"]="Org.OData.Core.V1.Tag";a["Org.OData.Aggregation.V1.Aggregatable"]="Org.OData.Core.V1.Tag";a["Org.OData.Aggregation.V1.ContextDefiningProperties"]="Edm.PropertyPath";a["Org.OData.Aggregation.V1.LeveledHierarchy"]="Edm.PropertyPath";a["Org.OData.Aggregation.V1.RecursiveHierarchy"]="Org.OData.Aggregation.V1.RecursiveHierarchyType";a["Org.OData.Aggregation.V1.AvailableOnAggregates"]="Org.OData.Aggregation.V1.AvailableOnAggregatesType";a["Org.OData.Validation.V1.Minimum"]="Edm.PrimitiveType";a["Org.OData.Validation.V1.Maximum"]="Edm.PrimitiveType";a["Org.OData.Validation.V1.Exclusive"]="Org.OData.Core.V1.Tag";a["Org.OData.Validation.V1.AllowedValues"]="Org.OData.Validation.V1.AllowedValue";a["Org.OData.Validation.V1.MultipleOf"]="Edm.Decimal";a["Org.OData.Validation.V1.Constraint"]="Org.OData.Validation.V1.ConstraintType";a["Org.OData.Validation.V1.ItemsOf"]="Org.OData.Validation.V1.ItemsOfType";a["Org.OData.Validation.V1.OpenPropertyTypeConstraint"]="Org.OData.Validation.V1.SingleOrCollectionType";a["Org.OData.Validation.V1.DerivedTypeConstraint"]="Org.OData.Validation.V1.SingleOrCollectionType";a["Org.OData.Validation.V1.AllowedTerms"]="Org.OData.Core.V1.QualifiedTermName";a["Org.OData.Validation.V1.ApplicableTerms"]="Org.OData.Core.V1.QualifiedTermName";a["Org.OData.Validation.V1.MaxItems"]="Edm.Int64";a["Org.OData.Validation.V1.MinItems"]="Edm.Int64";a["Org.OData.Measures.V1.Scale"]="Edm.Byte";a["Org.OData.Measures.V1.DurationGranularity"]="Org.OData.Measures.V1.DurationGranularityType";a["com.sap.vocabularies.Analytics.v1.Dimension"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Analytics.v1.Measure"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Analytics.v1.AccumulativeMeasure"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Analytics.v1.RolledUpPropertyCount"]="Edm.Int16";a["com.sap.vocabularies.Analytics.v1.PlanningAction"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Analytics.v1.AggregatedProperties"]="com.sap.vocabularies.Analytics.v1.AggregatedPropertyType";a["com.sap.vocabularies.Analytics.v1.AggregatedProperty"]="com.sap.vocabularies.Analytics.v1.AggregatedPropertyType";a["com.sap.vocabularies.Analytics.v1.AnalyticalContext"]="com.sap.vocabularies.Analytics.v1.AnalyticalContextType";a["com.sap.vocabularies.Common.v1.ServiceVersion"]="Edm.Int32";a["com.sap.vocabularies.Common.v1.ServiceSchemaVersion"]="Edm.Int32";a["com.sap.vocabularies.Common.v1.TextFor"]="Edm.PropertyPath";a["com.sap.vocabularies.Common.v1.IsLanguageIdentifier"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.TextFormat"]="com.sap.vocabularies.Common.v1.TextFormatType";a["com.sap.vocabularies.Common.v1.IsTimezone"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsDigitSequence"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsUpperCase"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCurrency"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsUnit"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.UnitSpecificScale"]="Edm.PrimitiveType";a["com.sap.vocabularies.Common.v1.UnitSpecificPrecision"]="Edm.PrimitiveType";a["com.sap.vocabularies.Common.v1.SecondaryKey"]="Edm.PropertyPath";a["com.sap.vocabularies.Common.v1.MinOccurs"]="Edm.Int64";a["com.sap.vocabularies.Common.v1.MaxOccurs"]="Edm.Int64";a["com.sap.vocabularies.Common.v1.AssociationEntity"]="Edm.NavigationPropertyPath";a["com.sap.vocabularies.Common.v1.DerivedNavigation"]="Edm.NavigationPropertyPath";a["com.sap.vocabularies.Common.v1.Masked"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.RevealOnDemand"]="Edm.Boolean";a["com.sap.vocabularies.Common.v1.SemanticObjectMapping"]="com.sap.vocabularies.Common.v1.SemanticObjectMappingType";a["com.sap.vocabularies.Common.v1.IsInstanceAnnotation"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.FilterExpressionRestrictions"]="com.sap.vocabularies.Common.v1.FilterExpressionRestrictionType";a["com.sap.vocabularies.Common.v1.FieldControl"]="com.sap.vocabularies.Common.v1.FieldControlType";a["com.sap.vocabularies.Common.v1.Application"]="com.sap.vocabularies.Common.v1.ApplicationType";a["com.sap.vocabularies.Common.v1.Timestamp"]="Edm.DateTimeOffset";a["com.sap.vocabularies.Common.v1.ErrorResolution"]="com.sap.vocabularies.Common.v1.ErrorResolutionType";a["com.sap.vocabularies.Common.v1.Messages"]="Edm.ComplexType";a["com.sap.vocabularies.Common.v1.numericSeverity"]="com.sap.vocabularies.Common.v1.NumericMessageSeverityType";a["com.sap.vocabularies.Common.v1.MaximumNumericMessageSeverity"]="com.sap.vocabularies.Common.v1.NumericMessageSeverityType";a["com.sap.vocabularies.Common.v1.IsActionCritical"]="Edm.Boolean";a["com.sap.vocabularies.Common.v1.Attributes"]="Edm.PropertyPath";a["com.sap.vocabularies.Common.v1.RelatedRecursiveHierarchy"]="Edm.AnnotationPath";a["com.sap.vocabularies.Common.v1.Interval"]="com.sap.vocabularies.Common.v1.IntervalType";a["com.sap.vocabularies.Common.v1.ResultContext"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.SAPObjectNodeType"]="com.sap.vocabularies.Common.v1.SAPObjectNodeTypeType";a["com.sap.vocabularies.Common.v1.Composition"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsNaturalPerson"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.ValueList"]="com.sap.vocabularies.Common.v1.ValueListType";a["com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers"]="Org.OData.Core.V1.SimpleIdentifier";a["com.sap.vocabularies.Common.v1.ValueListWithFixedValues"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.ValueListMapping"]="com.sap.vocabularies.Common.v1.ValueListMappingType";a["com.sap.vocabularies.Common.v1.IsCalendarYear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarHalfyear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarQuarter"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarMonth"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarWeek"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsDayOfCalendarMonth"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsDayOfCalendarYear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarYearHalfyear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarYearQuarter"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarYearMonth"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarYearWeek"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsCalendarDate"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalYear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalPeriod"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalQuarter"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalWeek"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalYearWeek"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsDayOfFiscalYear"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.IsFiscalYearVariant"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.MutuallyExclusiveTerm"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.DraftRoot"]="com.sap.vocabularies.Common.v1.DraftRootType";a["com.sap.vocabularies.Common.v1.DraftNode"]="com.sap.vocabularies.Common.v1.DraftNodeType";a["com.sap.vocabularies.Common.v1.DraftActivationVia"]="Org.OData.Core.V1.SimpleIdentifier";a["com.sap.vocabularies.Common.v1.EditableFieldFor"]="Edm.PropertyPath";a["com.sap.vocabularies.Common.v1.SemanticKey"]="Edm.PropertyPath";a["com.sap.vocabularies.Common.v1.SideEffects"]="com.sap.vocabularies.Common.v1.SideEffectsType";a["com.sap.vocabularies.Common.v1.DefaultValuesFunction"]="com.sap.vocabularies.Common.v1.QualifiedName";a["com.sap.vocabularies.Common.v1.FilterDefaultValue"]="Edm.PrimitiveType";a["com.sap.vocabularies.Common.v1.FilterDefaultValueHigh"]="Edm.PrimitiveType";a["com.sap.vocabularies.Common.v1.SortOrder"]="com.sap.vocabularies.Common.v1.SortOrderType";a["com.sap.vocabularies.Common.v1.RecursiveHierarchy"]="com.sap.vocabularies.Common.v1.RecursiveHierarchyType";a["com.sap.vocabularies.Common.v1.CreatedAt"]="Edm.DateTimeOffset";a["com.sap.vocabularies.Common.v1.CreatedBy"]="com.sap.vocabularies.Common.v1.UserID";a["com.sap.vocabularies.Common.v1.ChangedAt"]="Edm.DateTimeOffset";a["com.sap.vocabularies.Common.v1.ChangedBy"]="com.sap.vocabularies.Common.v1.UserID";a["com.sap.vocabularies.Common.v1.ApplyMultiUnitBehaviorForSortingAndFiltering"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Common.v1.PrimitivePropertyPath"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.CodeList.v1.CurrencyCodes"]="com.sap.vocabularies.CodeList.v1.CodeListSource";a["com.sap.vocabularies.CodeList.v1.UnitsOfMeasure"]="com.sap.vocabularies.CodeList.v1.CodeListSource";a["com.sap.vocabularies.CodeList.v1.StandardCode"]="Edm.PropertyPath";a["com.sap.vocabularies.CodeList.v1.ExternalCode"]="Edm.PropertyPath";a["com.sap.vocabularies.CodeList.v1.IsConfigurationDeprecationCode"]="Edm.Boolean";a["com.sap.vocabularies.Communication.v1.Contact"]="com.sap.vocabularies.Communication.v1.ContactType";a["com.sap.vocabularies.Communication.v1.Address"]="com.sap.vocabularies.Communication.v1.AddressType";a["com.sap.vocabularies.Communication.v1.IsEmailAddress"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Communication.v1.IsPhoneNumber"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Communication.v1.Event"]="com.sap.vocabularies.Communication.v1.EventData";a["com.sap.vocabularies.Communication.v1.Task"]="com.sap.vocabularies.Communication.v1.TaskData";a["com.sap.vocabularies.Communication.v1.Message"]="com.sap.vocabularies.Communication.v1.MessageData";a["com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchy"]="com.sap.vocabularies.Hierarchy.v1.RecursiveHierarchyType";a["com.sap.vocabularies.PersonalData.v1.EntitySemantics"]="com.sap.vocabularies.PersonalData.v1.EntitySemanticsType";a["com.sap.vocabularies.PersonalData.v1.FieldSemantics"]="com.sap.vocabularies.PersonalData.v1.FieldSemanticsType";a["com.sap.vocabularies.PersonalData.v1.IsPotentiallyPersonal"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.PersonalData.v1.IsPotentiallySensitive"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.Session.v1.StickySessionSupported"]="com.sap.vocabularies.Session.v1.StickySessionSupportedType";a["com.sap.vocabularies.UI.v1.HeaderInfo"]="com.sap.vocabularies.UI.v1.HeaderInfoType";a["com.sap.vocabularies.UI.v1.Identification"]="com.sap.vocabularies.UI.v1.DataFieldAbstract";a["com.sap.vocabularies.UI.v1.Badge"]="com.sap.vocabularies.UI.v1.BadgeType";a["com.sap.vocabularies.UI.v1.LineItem"]="com.sap.vocabularies.UI.v1.DataFieldAbstract";a["com.sap.vocabularies.UI.v1.StatusInfo"]="com.sap.vocabularies.UI.v1.DataFieldAbstract";a["com.sap.vocabularies.UI.v1.FieldGroup"]="com.sap.vocabularies.UI.v1.FieldGroupType";a["com.sap.vocabularies.UI.v1.ConnectedFields"]="com.sap.vocabularies.UI.v1.ConnectedFieldsType";a["com.sap.vocabularies.UI.v1.GeoLocations"]="com.sap.vocabularies.UI.v1.GeoLocationType";a["com.sap.vocabularies.UI.v1.GeoLocation"]="com.sap.vocabularies.UI.v1.GeoLocationType";a["com.sap.vocabularies.UI.v1.Contacts"]="Edm.AnnotationPath";a["com.sap.vocabularies.UI.v1.MediaResource"]="com.sap.vocabularies.UI.v1.MediaResourceType";a["com.sap.vocabularies.UI.v1.DataPoint"]="com.sap.vocabularies.UI.v1.DataPointType";a["com.sap.vocabularies.UI.v1.KPI"]="com.sap.vocabularies.UI.v1.KPIType";a["com.sap.vocabularies.UI.v1.Chart"]="com.sap.vocabularies.UI.v1.ChartDefinitionType";a["com.sap.vocabularies.UI.v1.ValueCriticality"]="com.sap.vocabularies.UI.v1.ValueCriticalityType";a["com.sap.vocabularies.UI.v1.CriticalityLabels"]="com.sap.vocabularies.UI.v1.CriticalityLabelType";a["com.sap.vocabularies.UI.v1.SelectionFields"]="Edm.PropertyPath";a["com.sap.vocabularies.UI.v1.Facets"]="com.sap.vocabularies.UI.v1.Facet";a["com.sap.vocabularies.UI.v1.HeaderFacets"]="com.sap.vocabularies.UI.v1.Facet";a["com.sap.vocabularies.UI.v1.QuickViewFacets"]="com.sap.vocabularies.UI.v1.Facet";a["com.sap.vocabularies.UI.v1.QuickCreateFacets"]="com.sap.vocabularies.UI.v1.Facet";a["com.sap.vocabularies.UI.v1.FilterFacets"]="com.sap.vocabularies.UI.v1.ReferenceFacet";a["com.sap.vocabularies.UI.v1.SelectionPresentationVariant"]="com.sap.vocabularies.UI.v1.SelectionPresentationVariantType";a["com.sap.vocabularies.UI.v1.PresentationVariant"]="com.sap.vocabularies.UI.v1.PresentationVariantType";a["com.sap.vocabularies.UI.v1.SelectionVariant"]="com.sap.vocabularies.UI.v1.SelectionVariantType";a["com.sap.vocabularies.UI.v1.ThingPerspective"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.IsSummary"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.PartOfPreview"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.Map"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.Gallery"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.IsImageURL"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.IsImage"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.MultiLineText"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.TextArrangement"]="com.sap.vocabularies.UI.v1.TextArrangementType";a["com.sap.vocabularies.UI.v1.Note"]="com.sap.vocabularies.UI.v1.NoteType";a["com.sap.vocabularies.UI.v1.Importance"]="com.sap.vocabularies.UI.v1.ImportanceType";a["com.sap.vocabularies.UI.v1.Hidden"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.IsCopyAction"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.CreateHidden"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.UpdateHidden"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.DeleteHidden"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.HiddenFilter"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.AdaptationHidden"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.DataFieldDefault"]="com.sap.vocabularies.UI.v1.DataFieldAbstract";a["com.sap.vocabularies.UI.v1.Criticality"]="com.sap.vocabularies.UI.v1.CriticalityType";a["com.sap.vocabularies.UI.v1.CriticalityCalculation"]="com.sap.vocabularies.UI.v1.CriticalityCalculationType";a["com.sap.vocabularies.UI.v1.Emphasized"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.OrderBy"]="Edm.PropertyPath";a["com.sap.vocabularies.UI.v1.ParameterDefaultValue"]="Edm.PrimitiveType";a["com.sap.vocabularies.UI.v1.RecommendationState"]="com.sap.vocabularies.UI.v1.RecommendationStateType";a["com.sap.vocabularies.UI.v1.RecommendationList"]="com.sap.vocabularies.UI.v1.RecommendationListType";a["com.sap.vocabularies.UI.v1.ExcludeFromNavigationContext"]="Org.OData.Core.V1.Tag";a["com.sap.vocabularies.UI.v1.DoNotCheckScaleOfMeasuredQuantity"]="Edm.Boolean";a["com.sap.vocabularies.HTML5.v1.CssDefaults"]="com.sap.vocabularies.HTML5.v1.CssDefaultsType"})(t=e.TermToTypes||(e.TermToTypes={}))},899:function(a,e){Object.defineProperty(e,"__esModule",{value:true});e.VocabularyReferences=void 0;e.VocabularyReferences=[{alias:"Auth",namespace:"Org.OData.Authorization.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Authorization.V1.xml"},{alias:"Core",namespace:"Org.OData.Core.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Core.V1.xml"},{alias:"Capabilities",namespace:"Org.OData.Capabilities.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Capabilities.V1.xml"},{alias:"Aggregation",namespace:"Org.OData.Aggregation.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Aggregation.V1.xml"},{alias:"Validation",namespace:"Org.OData.Validation.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Validation.V1.xml"},{alias:"Measures",namespace:"Org.OData.Measures.V1",uri:"https://oasis-tcs.github.io/odata-vocabularies/vocabularies/Org.OData.Measures.V1.xml"},{alias:"Analytics",namespace:"com.sap.vocabularies.Analytics.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/Analytics.xml"},{alias:"Common",namespace:"com.sap.vocabularies.Common.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/Common.xml"},{alias:"CodeList",namespace:"com.sap.vocabularies.CodeList.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/CodeList.xml"},{alias:"Communication",namespace:"com.sap.vocabularies.Communication.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/Communication.xml"},{alias:"Hierarchy",namespace:"com.sap.vocabularies.Hierarchy.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/Hierarchy.xml"},{alias:"PersonalData",namespace:"com.sap.vocabularies.PersonalData.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/PersonalData.xml"},{alias:"Session",namespace:"com.sap.vocabularies.Session.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/Session.xml"},{alias:"UI",namespace:"com.sap.vocabularies.UI.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/UI.xml"},{alias:"HTML5",namespace:"com.sap.vocabularies.HTML5.v1",uri:"https://sap.github.io/odata-vocabularies/vocabularies/HTML5.xml"}]}};var t={};function o(a){var r=t[a];if(r!==undefined){return r.exports}var i=t[a]={exports:{}};e[a].call(i.exports,i,i.exports,o);return i.exports}var r=o(878);a=r})();return a},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Action-dbg", ["sap/base/Log", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/ID", "sap/fe/core/converters/ManifestSettings", "sap/fe/core/formatters/FPMFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/StableIdHelper"], function (Log, BindingHelper, ConfigurableObject, ID, ManifestSettings, fpmFormatter, BindingToolkit, StableIdHelper) {
  "use strict";

  var _exports = {};
  var replaceSpecialChars = StableIdHelper.replaceSpecialChars;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var greaterOrEqual = BindingToolkit.greaterOrEqual;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var ActionType = ManifestSettings.ActionType;
  var getCustomActionID = ID.getCustomActionID;
  var Placement = ConfigurableObject.Placement;
  var bindingContextPathVisitor = BindingHelper.bindingContextPathVisitor;
  let ButtonType;
  (function (ButtonType) {
    ButtonType["Accept"] = "Accept";
    ButtonType["Attention"] = "Attention";
    ButtonType["Back"] = "Back";
    ButtonType["Critical"] = "Critical";
    ButtonType["Default"] = "Default";
    ButtonType["Emphasized"] = "Emphasized";
    ButtonType["Ghost"] = "Ghost";
    ButtonType["Negative"] = "Negative";
    ButtonType["Neutral"] = "Neutral";
    ButtonType["Reject"] = "Reject";
    ButtonType["Success"] = "Success";
    ButtonType["Transparent"] = "Transparent";
    ButtonType["Unstyled"] = "Unstyled";
    ButtonType["Up"] = "Up";
  })(ButtonType || (ButtonType = {}));
  _exports.ButtonType = ButtonType;
  /**
   * Maps an action by its key, based on the given annotation actions and manifest configuration. The result already represents the
   * merged action from both configuration sources.
   *
   * This function also returns an indication whether the action can be a menu item, saying whether it is visible or of a specific type
   * that allows this.
   *
   * @param manifestActions Actions defined in the manifest
   * @param annotationActions Actions defined through annotations
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   * @param actionKey Key to look up
   * @returns Merged action and indicator whether it can be a menu item
   */
  function mapActionByKey(manifestActions, annotationActions, hiddenActions, actionKey) {
    const annotationAction = annotationActions.find(action => action.key === actionKey);
    const manifestAction = manifestActions[actionKey];
    const resultAction = {
      ...(annotationAction ?? manifestAction)
    };

    // Annotation action and manifest configuration already has to be merged here as insertCustomElements only considers top-level actions
    if (annotationAction) {
      // If enabled or visible is not set in the manifest, use the annotation value and hence do not overwrite
      resultAction.enabled = (manifestAction === null || manifestAction === void 0 ? void 0 : manifestAction.enabled) ?? annotationAction.enabled;
      resultAction.visible = (manifestAction === null || manifestAction === void 0 ? void 0 : manifestAction.visible) ?? annotationAction.visible;
      for (const prop in manifestAction || {}) {
        const propKey = prop;
        if (!annotationAction[propKey] && propKey !== "menu") {
          resultAction[propKey] = manifestAction[propKey];
        }
      }
    }
    const canBeMenuItem = ((resultAction === null || resultAction === void 0 ? void 0 : resultAction.visible) || (resultAction === null || resultAction === void 0 ? void 0 : resultAction.type) === ActionType.DataFieldForAction || (resultAction === null || resultAction === void 0 ? void 0 : resultAction.type) === ActionType.DataFieldForIntentBasedNavigation) && !hiddenActions.find(hiddenAction => hiddenAction.key === (resultAction === null || resultAction === void 0 ? void 0 : resultAction.key));
    return {
      action: resultAction,
      canBeMenuItem
    };
  }

  /**
   * Map the default action key of a menu to its actual action configuration and identify whether this default action is a command.
   *
   * @param menuAction Menu action to map the default action for
   * @param manifestActions Actions defined in the manifest
   * @param annotationActions Actions defined through annotations
   * @param commandActions Array of command actions to push the default action to if applicable
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   */
  function mapMenuDefaultAction(menuAction, manifestActions, annotationActions, commandActions, hiddenActions) {
    const {
      action,
      canBeMenuItem
    } = mapActionByKey(manifestActions, annotationActions, hiddenActions, menuAction.defaultAction);
    if (canBeMenuItem) {
      menuAction.defaultAction = action;
    }
    if (action.command) {
      commandActions[action.key] = action;
    }
  }

  /**
   * Map the menu item keys of a menu to their actual action configurations and identify whether they are commands.
   *
   * @param menuAction Menu action to map the menu items for
   * @param manifestActions Actions defined in the manifest
   * @param annotationActions Actions defined through annotations
   * @param commandActions Array of command actions to push the menu item actions to if applicable
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   */
  function mapMenuItems(menuAction, manifestActions, annotationActions, commandActions, hiddenActions) {
    const mappedMenuItems = [];
    for (const menuItemKey of menuAction.menu ?? []) {
      const {
        action,
        canBeMenuItem
      } = mapActionByKey(manifestActions, annotationActions, hiddenActions, menuItemKey);
      if (canBeMenuItem) {
        mappedMenuItems.push(action);
      }
      if (action.command) {
        commandActions[menuItemKey] = action;
      }
    }
    menuAction.menu = mappedMenuItems;

    // If the menu is set to invisible, it should be invisible, otherwise the visibility should be calculated from the items
    const visibleExpressions = mappedMenuItems.map(menuItem => resolveBindingString(menuItem.visible, "boolean"));
    menuAction.visible = compileExpression(and(resolveBindingString(menuAction.visible, "boolean"), or(...visibleExpressions)));
  }

  /**
   * Transforms the flat collection of actions into a nested structures of menus. The result is a record of actions that are either menus or
   * ones that do not appear in menus as menu items. It also returns a list of actions that have an assigned command.
   *
   * Note that menu items are already the merged result of annotation actions and their manifest configuration, as {@link insertCustomElements}
   * only considers root-level actions.
   *
   * @param manifestActions Actions defined in the manifest
   * @param annotationActions Actions defined through annotations
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   * @returns The transformed actions from the manifest and a list of command actions
   */
  function transformMenuActionsAndIdentifyCommands(manifestActions, annotationActions, hiddenActions) {
    const allActions = {};
    const actionKeysToDelete = [];
    const commandActions = {};
    for (const actionKey in manifestActions) {
      const manifestAction = manifestActions[actionKey];
      if (manifestAction.defaultAction !== undefined) {
        mapMenuDefaultAction(manifestAction, manifestActions, annotationActions, commandActions, hiddenActions);
      }
      if (manifestAction.type === ActionType.Menu) {
        var _manifestAction$menu;
        // Menu items should not appear as top-level actions themselves
        actionKeysToDelete.push(...manifestAction.menu);
        mapMenuItems(manifestAction, manifestActions, annotationActions, commandActions, hiddenActions);

        // Menu has no visible items, so remove it
        if (!((_manifestAction$menu = manifestAction.menu) !== null && _manifestAction$menu !== void 0 && _manifestAction$menu.length)) {
          actionKeysToDelete.push(manifestAction.key);
        }
      }
      if (manifestAction.command) {
        commandActions[actionKey] = manifestAction;
      }
      allActions[actionKey] = manifestAction;
    }
    actionKeysToDelete.forEach(actionKey => delete allActions[actionKey]);
    return {
      actions: allActions,
      commandActions: commandActions
    };
  }

  /**
   * Gets the binding expression for the enablement of a manifest action.
   *
   * @param manifestAction The action configured in the manifest
   * @param isAnnotationAction Whether the action, defined in manifest, corresponds to an existing annotation action.
   * @param converterContext
   * @returns Determined property value for the enablement
   */
  const _getManifestEnabled = function (manifestAction, isAnnotationAction, converterContext) {
    if (isAnnotationAction && manifestAction.enabled === undefined) {
      // If annotation action has no property defined in manifest,
      // do not overwrite it with manifest action's default value.
      return undefined;
    }
    const result = getManifestActionBooleanPropertyWithFormatter(manifestAction.enabled, converterContext);

    // Consider requiresSelection property to include selectedContexts in the binding expression
    return compileExpression(ifElse(manifestAction.requiresSelection === true, and(greaterOrEqual(pathInModel("numberOfSelectedContexts", "internal"), 1), result), result));
  };

  /**
   * Gets the binding expression for the visibility of a manifest action.
   *
   * @param manifestAction The action configured in the manifest
   * @param isAnnotationAction Whether the action, defined in manifest, corresponds to an existing annotation action.
   * @param converterContext
   * @returns Determined property value for the visibility
   */
  const _getManifestVisible = function (manifestAction, isAnnotationAction, converterContext) {
    if (isAnnotationAction && manifestAction.visible === undefined) {
      // If annotation action has no property defined in manifest,
      // do not overwrite it with manifest action's default value.
      return undefined;
    }
    const result = getManifestActionBooleanPropertyWithFormatter(manifestAction.visible, converterContext);
    return compileExpression(result);
  };

  /**
   * As some properties should not be overridable by the manifest, make sure that the manifest configuration gets the annotation values for these.
   *
   * @param manifestAction Action defined in the manifest
   * @param annotationAction Action defined through annotations
   */
  function overrideManifestConfigurationWithAnnotation(manifestAction, annotationAction) {
    if (!annotationAction) {
      return;
    }

    // Do not override the 'type' given in an annotation action
    manifestAction.type = annotationAction.type;
    manifestAction.annotationPath = annotationAction.annotationPath;
    manifestAction.press = annotationAction.press;

    // Only use the annotation values for enablement and visibility if not set in the manifest
    manifestAction.enabled = manifestAction.enabled ?? annotationAction.enabled;
    manifestAction.visible = manifestAction.visible ?? annotationAction.visible;
  }

  /**
   * Hide an action if it is a hidden header action.
   *
   * @param action The action to hide
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   */
  function hideActionIfHiddenAction(action, hiddenActions) {
    if (hiddenActions !== null && hiddenActions !== void 0 && hiddenActions.find(hiddenAction => hiddenAction.key === action.key)) {
      action.visible = "false";
    }
  }

  /**
   * Creates the action configuration based on the manifest settings.
   *
   * @param manifestActions The manifest actions
   * @param converterContext The converter context
   * @param annotationActions The annotation actions definition
   * @param navigationSettings The navigation settings
   * @param considerNavigationSettings The navigation settings to be considered
   * @param hiddenActions Actions that are configured as hidden (additional to the visible property)
   * @param facetName The facet where an action is displayed if it is inline
   * @returns The actions from the manifest
   */
  function getActionsFromManifest(manifestActions, converterContext, annotationActions, navigationSettings, considerNavigationSettings, hiddenActions, facetName) {
    const actions = {};
    for (const actionKey in manifestActions) {
      var _manifestAction$press, _manifestAction$posit;
      const manifestAction = manifestActions[actionKey];
      const lastDotIndex = ((_manifestAction$press = manifestAction.press) === null || _manifestAction$press === void 0 ? void 0 : _manifestAction$press.lastIndexOf(".")) || -1;
      const oAnnotationAction = annotationActions === null || annotationActions === void 0 ? void 0 : annotationActions.find(obj => obj.key === actionKey);

      // To identify the annotation action property overwrite via manifest use-case.
      const isAnnotationAction = !!oAnnotationAction;
      if (manifestAction.facetName) {
        facetName = manifestAction.facetName;
      }
      actions[actionKey] = {
        id: oAnnotationAction ? actionKey : getCustomActionID(actionKey),
        type: manifestAction.menu ? ActionType.Menu : ActionType.Default,
        visible: _getManifestVisible(manifestAction, isAnnotationAction, converterContext),
        enabled: _getManifestEnabled(manifestAction, isAnnotationAction, converterContext),
        handlerModule: manifestAction.press && manifestAction.press.substring(0, lastDotIndex).replace(/\./gi, "/"),
        handlerMethod: manifestAction.press && manifestAction.press.substring(lastDotIndex + 1),
        press: manifestAction.press,
        text: manifestAction.text,
        noWrap: manifestAction.__noWrap,
        key: replaceSpecialChars(actionKey),
        enableOnSelect: manifestAction.enableOnSelect,
        defaultValuesExtensionFunction: manifestAction.defaultValuesFunction,
        position: {
          anchor: (_manifestAction$posit = manifestAction.position) === null || _manifestAction$posit === void 0 ? void 0 : _manifestAction$posit.anchor,
          placement: manifestAction.position === undefined ? Placement.After : manifestAction.position.placement
        },
        isNavigable: isActionNavigable(manifestAction, navigationSettings, considerNavigationSettings),
        command: manifestAction.command,
        requiresSelection: manifestAction.requiresSelection === undefined ? false : manifestAction.requiresSelection,
        enableAutoScroll: enableAutoScroll(manifestAction),
        menu: manifestAction.menu ?? [],
        facetName: manifestAction.inline ? facetName : undefined,
        defaultAction: manifestAction.defaultAction
      };
      overrideManifestConfigurationWithAnnotation(actions[actionKey], oAnnotationAction);
      hideActionIfHiddenAction(actions[actionKey], hiddenActions);
    }
    return transformMenuActionsAndIdentifyCommands(actions, annotationActions ?? [], hiddenActions ?? []);
  }

  /**
   * Gets a binding expression representing a Boolean manifest property that can either be represented by a static value, a binding string,
   * or a runtime formatter function.
   *
   * @param propertyValue String representing the configured property value
   * @param converterContext
   * @returns A binding expression representing the property
   */
  _exports.getActionsFromManifest = getActionsFromManifest;
  function getManifestActionBooleanPropertyWithFormatter(propertyValue, converterContext) {
    const resolvedBinding = resolveBindingString(propertyValue, "boolean");
    let result;
    if (isConstant(resolvedBinding) && resolvedBinding.value === undefined) {
      // No property value configured in manifest for the custom action --> default value is true
      result = constant(true);
    } else if (isConstant(resolvedBinding) && typeof resolvedBinding.value === "string") {
      var _converterContext$get;
      // Then it's a module-method reference "sap.xxx.yyy.doSomething"
      const methodPath = resolvedBinding.value;
      // FIXME: The custom "isEnabled" check does not trigger (because none of the bound values changes)
      result = formatResult([pathInModel("/", "$view"), methodPath, pathInModel("selectedContexts", "internal")], fpmFormatter.customBooleanPropertyCheck, ((_converterContext$get = converterContext.getDataModelObjectPath().contextLocation) === null || _converterContext$get === void 0 ? void 0 : _converterContext$get.targetEntityType) || converterContext.getEntityType());
    } else {
      // then it's a binding
      result = resolvedBinding;
    }
    return result;
  }
  const removeDuplicateActions = actions => {
    let oMenuItemKeys = {};
    actions.forEach(action => {
      var _action$menu;
      if (action !== null && action !== void 0 && (_action$menu = action.menu) !== null && _action$menu !== void 0 && _action$menu.length) {
        const actionMenu = action.menu;
        oMenuItemKeys = actionMenu.reduce((item, _ref) => {
          let {
            key
          } = _ref;
          if (key && !item[key]) {
            item[key] = true;
          }
          return item;
        }, oMenuItemKeys);
      }
    });
    return actions.filter(action => !oMenuItemKeys[action.key]);
  };

  /**
   * Method to determine the value of the 'enabled' property of an annotation-based action.
   *
   * @param converterContext The instance of the converter context
   * @param actionTarget The instance of the action
   * @returns The binding expression for the 'enabled' property of the action button.
   */
  _exports.removeDuplicateActions = removeDuplicateActions;
  function getEnabledForAnnotationAction(converterContext, actionTarget) {
    var _actionTarget$paramet, _actionTarget$annotat, _actionTarget$annotat2;
    const bindingParameterFullName = actionTarget !== null && actionTarget !== void 0 && actionTarget.isBound ? actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$paramet = actionTarget.parameters[0]) === null || _actionTarget$paramet === void 0 ? void 0 : _actionTarget$paramet.fullyQualifiedName : undefined;
    const operationAvailableExpression = getExpressionFromAnnotation(actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$annotat = actionTarget.annotations.Core) === null || _actionTarget$annotat === void 0 ? void 0 : _actionTarget$annotat.OperationAvailable, [], undefined, path => bindingContextPathVisitor(path, converterContext, bindingParameterFullName));
    if ((actionTarget === null || actionTarget === void 0 ? void 0 : (_actionTarget$annotat2 = actionTarget.annotations.Core) === null || _actionTarget$annotat2 === void 0 ? void 0 : _actionTarget$annotat2.OperationAvailable) !== undefined) {
      return compileExpression(equal(operationAvailableExpression, true));
    }
    return "true";
  }
  _exports.getEnabledForAnnotationAction = getEnabledForAnnotationAction;
  function getSemanticObjectMapping(mappings) {
    return mappings ? mappings.map(mapping => {
      return {
        LocalProperty: {
          $PropertyPath: mapping.LocalProperty.value
        },
        SemanticObjectProperty: mapping.SemanticObjectProperty
      };
    }) : [];
  }
  _exports.getSemanticObjectMapping = getSemanticObjectMapping;
  function isActionNavigable(action, navigationSettings, considerNavigationSettings) {
    var _action$afterExecutio, _action$afterExecutio2;
    let bIsNavigationConfigured = true;
    if (considerNavigationSettings) {
      const detailOrDisplay = navigationSettings && (navigationSettings.detail || navigationSettings.display);
      bIsNavigationConfigured = detailOrDisplay !== null && detailOrDisplay !== void 0 && detailOrDisplay.route ? true : false;
    }
    // when enableAutoScroll is true the navigateToInstance feature is disabled
    if (action && action.afterExecution && (((_action$afterExecutio = action.afterExecution) === null || _action$afterExecutio === void 0 ? void 0 : _action$afterExecutio.navigateToInstance) === false || ((_action$afterExecutio2 = action.afterExecution) === null || _action$afterExecutio2 === void 0 ? void 0 : _action$afterExecutio2.enableAutoScroll) === true) || !bIsNavigationConfigured) {
      return false;
    }
    return true;
  }
  _exports.isActionNavigable = isActionNavigable;
  function enableAutoScroll(action) {
    var _action$afterExecutio3;
    return (action === null || action === void 0 ? void 0 : (_action$afterExecutio3 = action.afterExecution) === null || _action$afterExecutio3 === void 0 ? void 0 : _action$afterExecutio3.enableAutoScroll) === true;
  }
  _exports.enableAutoScroll = enableAutoScroll;
  function dataFieldIsCopyAction(dataField) {
    var _dataField$annotation, _dataField$annotation2, _dataField$annotation3;
    return ((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : (_dataField$annotation3 = _dataField$annotation2.IsCopyAction) === null || _dataField$annotation3 === void 0 ? void 0 : _dataField$annotation3.valueOf()) === true && dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction";
  }
  _exports.dataFieldIsCopyAction = dataFieldIsCopyAction;
  function getCopyAction(copyDataFields) {
    if (copyDataFields.length === 1) {
      return copyDataFields[0];
    }
    if (copyDataFields.length > 1) {
      Log.error("Multiple actions are annotated with isCopyAction. There can be only one standard copy action.");
    }
    return undefined;
  }
  _exports.getCopyAction = getCopyAction;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Action", ["sap/base/Log","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/ID","sap/fe/core/converters/ManifestSettings","sap/fe/core/formatters/FPMFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/StableIdHelper"],function(e,n,t,i,o,a,r,l){"use strict";var s={};var u=l.replaceSpecialChars;var c=r.resolveBindingString;var d=r.pathInModel;var v=r.or;var f=r.isConstant;var p=r.ifElse;var b=r.greaterOrEqual;var m=r.getExpressionFromAnnotation;var y=r.formatResult;var g=r.equal;var h=r.constant;var A=r.compileExpression;var S=r.and;var C=o.ActionType;var E=i.getCustomActionID;var k=t.Placement;var x=n.bindingContextPathVisitor;let F;(function(e){e["Accept"]="Accept";e["Attention"]="Attention";e["Back"]="Back";e["Critical"]="Critical";e["Default"]="Default";e["Emphasized"]="Emphasized";e["Ghost"]="Ghost";e["Negative"]="Negative";e["Neutral"]="Neutral";e["Reject"]="Reject";e["Success"]="Success";e["Transparent"]="Transparent";e["Unstyled"]="Unstyled";e["Up"]="Up"})(F||(F={}));s.ButtonType=F;function I(e,n,t,i){const o=n.find(e=>e.key===i);const a=e[i];const r={...o??a};if(o){r.enabled=(a===null||a===void 0?void 0:a.enabled)??o.enabled;r.visible=(a===null||a===void 0?void 0:a.visible)??o.visible;for(const e in a||{}){const n=e;if(!o[n]&&n!=="menu"){r[n]=a[n]}}}const l=((r===null||r===void 0?void 0:r.visible)||(r===null||r===void 0?void 0:r.type)===C.DataFieldForAction||(r===null||r===void 0?void 0:r.type)===C.DataFieldForIntentBasedNavigation)&&!t.find(e=>e.key===(r===null||r===void 0?void 0:r.key));return{action:r,canBeMenuItem:l}}function M(e,n,t,i,o){const{action:a,canBeMenuItem:r}=I(n,t,o,e.defaultAction);if(r){e.defaultAction=a}if(a.command){i[a.key]=a}}function O(e,n,t,i,o){const a=[];for(const r of e.menu??[]){const{action:e,canBeMenuItem:l}=I(n,t,o,r);if(l){a.push(e)}if(e.command){i[r]=e}}e.menu=a;const r=a.map(e=>c(e.visible,"boolean"));e.visible=A(S(c(e.visible,"boolean"),v(...r)))}function P(e,n,t){const i={};const o=[];const a={};for(const l in e){const s=e[l];if(s.defaultAction!==undefined){M(s,e,n,a,t)}if(s.type===C.Menu){var r;o.push(...s.menu);O(s,e,n,a,t);if(!((r=s.menu)!==null&&r!==void 0&&r.length)){o.push(s.key)}}if(s.command){a[l]=s}i[l]=s}o.forEach(e=>delete i[e]);return{actions:i,commandActions:a}}const B=function(e,n,t){if(n&&e.enabled===undefined){return undefined}const i=q(e.enabled,t);return A(p(e.requiresSelection===true,S(b(d("numberOfSelectedContexts","internal"),1),i),i))};const N=function(e,n,t){if(n&&e.visible===undefined){return undefined}const i=q(e.visible,t);return A(i)};function D(e,n){if(!n){return}e.type=n.type;e.annotationPath=n.annotationPath;e.press=n.press;e.enabled=e.enabled??n.enabled;e.visible=e.visible??n.visible}function T(e,n){if(n!==null&&n!==void 0&&n.find(n=>n.key===e.key)){e.visible="false"}}function j(e,n,t,i,o,a,r){const l={};for(const d in e){var s,c;const v=e[d];const f=((s=v.press)===null||s===void 0?void 0:s.lastIndexOf("."))||-1;const p=t===null||t===void 0?void 0:t.find(e=>e.key===d);const b=!!p;if(v.facetName){r=v.facetName}l[d]={id:p?d:E(d),type:v.menu?C.Menu:C.Default,visible:N(v,b,n),enabled:B(v,b,n),handlerModule:v.press&&v.press.substring(0,f).replace(/\./gi,"/"),handlerMethod:v.press&&v.press.substring(f+1),press:v.press,text:v.text,noWrap:v.__noWrap,key:u(d),enableOnSelect:v.enableOnSelect,defaultValuesExtensionFunction:v.defaultValuesFunction,position:{anchor:(c=v.position)===null||c===void 0?void 0:c.anchor,placement:v.position===undefined?k.After:v.position.placement},isNavigable:V(v,i,o),command:v.command,requiresSelection:v.requiresSelection===undefined?false:v.requiresSelection,enableAutoScroll:$(v),menu:v.menu??[],facetName:v.inline?r:undefined,defaultAction:v.defaultAction};D(l[d],p);T(l[d],a)}return P(l,t??[],a??[])}s.getActionsFromManifest=j;function q(e,n){const t=c(e,"boolean");let i;if(f(t)&&t.value===undefined){i=h(true)}else if(f(t)&&typeof t.value==="string"){var o;const e=t.value;i=y([d("/","$view"),e,d("selectedContexts","internal")],a.customBooleanPropertyCheck,((o=n.getDataModelObjectPath().contextLocation)===null||o===void 0?void 0:o.targetEntityType)||n.getEntityType())}else{i=t}return i}const U=e=>{let n={};e.forEach(e=>{var t;if(e!==null&&e!==void 0&&(t=e.menu)!==null&&t!==void 0&&t.length){const t=e.menu;n=t.reduce((e,n)=>{let{key:t}=n;if(t&&!e[t]){e[t]=true}return e},n)}});return e.filter(e=>!n[e.key])};s.removeDuplicateActions=U;function L(e,n){var t,i,o;const a=n!==null&&n!==void 0&&n.isBound?n===null||n===void 0?void 0:(t=n.parameters[0])===null||t===void 0?void 0:t.fullyQualifiedName:undefined;const r=m(n===null||n===void 0?void 0:(i=n.annotations.Core)===null||i===void 0?void 0:i.OperationAvailable,[],undefined,n=>x(n,e,a));if((n===null||n===void 0?void 0:(o=n.annotations.Core)===null||o===void 0?void 0:o.OperationAvailable)!==undefined){return A(g(r,true))}return"true"}s.getEnabledForAnnotationAction=L;function R(e){return e?e.map(e=>({LocalProperty:{$PropertyPath:e.LocalProperty.value},SemanticObjectProperty:e.SemanticObjectProperty})):[]}s.getSemanticObjectMapping=R;function V(e,n,t){var i,o;let a=true;if(t){const e=n&&(n.detail||n.display);a=e!==null&&e!==void 0&&e.route?true:false}if(e&&e.afterExecution&&(((i=e.afterExecution)===null||i===void 0?void 0:i.navigateToInstance)===false||((o=e.afterExecution)===null||o===void 0?void 0:o.enableAutoScroll)===true)||!a){return false}return true}s.isActionNavigable=V;function $(e){var n;return(e===null||e===void 0?void 0:(n=e.afterExecution)===null||n===void 0?void 0:n.enableAutoScroll)===true}s.enableAutoScroll=$;function w(e){var n,t,i;return((n=e.annotations)===null||n===void 0?void 0:(t=n.UI)===null||t===void 0?void 0:(i=t.IsCopyAction)===null||i===void 0?void 0:i.valueOf())===true&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"}s.dataFieldIsCopyAction=w;function z(n){if(n.length===1){return n[0]}if(n.length>1){e.error("Multiple actions are annotated with isCopyAction. There can be only one standard copy action.")}return undefined}s.getCopyAction=z;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Chart-dbg", ["sap/base/Log", "sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/ui/core/Core", "../../helpers/Aggregation", "../../helpers/ID", "../../helpers/InsightsHelpers", "../../ManifestSettings"], function (Log, DataField, Action, ConfigurableObject, Key, BindingToolkit, DataModelPathHelper, Core, Aggregation, ID, InsightsHelpers, ManifestSettings) {
  "use strict";

  var _exports = {};
  var VisualizationType = ManifestSettings.VisualizationType;
  var VariantManagementType = ManifestSettings.VariantManagementType;
  var TemplateType = ManifestSettings.TemplateType;
  var ActionType = ManifestSettings.ActionType;
  var getInsightsVisibility = InsightsHelpers.getInsightsVisibility;
  var getFilterBarID = ID.getFilterBarID;
  var getChartID = ID.getChartID;
  var AggregationHelper = Aggregation.AggregationHelper;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var not = BindingToolkit.not;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var KeyHelper = Key.KeyHelper;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var isDataFieldForActionAbstract = DataField.isDataFieldForActionAbstract;
  /**
   * Method to retrieve all chart actions from annotations.
   *
   * @param chartAnnotation
   * @param visualizationPath
   * @param converterContext
   * @returns The chart actions from the annotation
   */
  function getChartActionsFromAnnotations(chartAnnotation, visualizationPath, converterContext) {
    const chartActions = [];
    if (chartAnnotation) {
      const aActions = chartAnnotation.Actions || [];
      aActions.forEach(dataField => {
        var _dataField$ActionTarg;
        let chartAction;
        if (isDataFieldForActionAbstract(dataField) && !dataField.Inline && !dataField.Determining) {
          const key = KeyHelper.generateKeyFromDataField(dataField);
          switch (dataField.$Type) {
            case "com.sap.vocabularies.UI.v1.DataFieldForAction":
              if (!((_dataField$ActionTarg = dataField.ActionTarget) !== null && _dataField$ActionTarg !== void 0 && _dataField$ActionTarg.isBound)) {
                chartAction = {
                  type: ActionType.DataFieldForAction,
                  annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
                  key: key,
                  visible: getCompileExpressionForAction(dataField, converterContext)
                };
              }
              break;
            case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
              chartAction = {
                type: ActionType.DataFieldForIntentBasedNavigation,
                annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
                key: key,
                visible: getCompileExpressionForAction(dataField, converterContext),
                isNavigable: true
              };
              break;
          }
        }
        if (chartAction) {
          chartActions.push(chartAction);
        }
      });
    }
    return chartActions;
  }
  function getChartActions(chartAnnotation, visualizationPath, converterContext) {
    const aAnnotationActions = getChartActionsFromAnnotations(chartAnnotation, visualizationPath, converterContext);
    const manifestActions = getActionsFromManifest(converterContext.getManifestControlConfiguration(visualizationPath).actions, converterContext, aAnnotationActions);
    const actionOverwriteConfig = {
      enabled: OverrideType.overwrite,
      enableOnSelect: OverrideType.overwrite,
      visible: OverrideType.overwrite,
      command: OverrideType.overwrite
    };
    const chartActions = insertCustomElements(aAnnotationActions, manifestActions.actions, actionOverwriteConfig);
    return {
      actions: chartActions,
      commandActions: manifestActions.commandActions
    };
  }
  _exports.getChartActions = getChartActions;
  function getP13nMode(visualizationPath, converterContext) {
    var _chartManifestSetting;
    const manifestWrapper = converterContext.getManifestWrapper();
    const chartManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath);
    const variantManagement = manifestWrapper.getVariantManagement();
    const aPersonalization = [];
    // Personalization configured in manifest.
    const personalization = chartManifestSettings === null || chartManifestSettings === void 0 ? void 0 : (_chartManifestSetting = chartManifestSettings.chartSettings) === null || _chartManifestSetting === void 0 ? void 0 : _chartManifestSetting.personalization;
    const isControlVariant = variantManagement === VariantManagementType.Control ? true : false;
    // if personalization is set to false do not show any option
    if (personalization !== undefined && !personalization || personalization == "false") {
      return undefined;
    }
    switch (true) {
      case typeof personalization === "object":
        // Specific personalization options enabled in manifest. Use them as is.
        if (personalization.type) {
          aPersonalization.push("Type");
        }
        if (personalization.item) {
          aPersonalization.push("Item");
        }
        if (personalization.sort) {
          aPersonalization.push("Sort");
        }
        if (personalization.filter) {
          aPersonalization.push("Filter");
        }
        return aPersonalization.join(",");
      case isControlVariant:
      case !!personalization:
        // manifest has personalization configured, check if it's true
        // if manifest doesn't have personalization, check for variant management is set to control
        return "Sort,Type,Item,Filter";
      default:
        // if manifest doesn't have personalization, show default options without filter
        return "Sort,Type,Item";
    }
  }
  _exports.getP13nMode = getP13nMode;
  // check if annoatation path has SPV and store the path
  function checkForSPV(viewConfiguration) {
    var _viewConfiguration$an;
    return (viewConfiguration === null || viewConfiguration === void 0 ? void 0 : (_viewConfiguration$an = viewConfiguration.annotationPath) === null || _viewConfiguration$an === void 0 ? void 0 : _viewConfiguration$an.indexOf(`@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`)) !== -1 ? viewConfiguration === null || viewConfiguration === void 0 ? void 0 : viewConfiguration.annotationPath : undefined;
  }
  function getAggregatablePropertiesObject(aggProp) {
    let obj;
    if (aggProp !== null && aggProp !== void 0 && aggProp.Property) {
      var _Property;
      obj = {
        Property: {
          $PropertyPath: aggProp === null || aggProp === void 0 ? void 0 : (_Property = aggProp.Property) === null || _Property === void 0 ? void 0 : _Property.value
        }
      };
    } else {
      obj = {
        Property: {
          $PropertyPath: aggProp === null || aggProp === void 0 ? void 0 : aggProp.name
        }
      };
    }
    return obj;
  }
  /**
   * Create the ChartVisualization configuration that will be used to display a chart using the Chart building block.
   *
   * @param chartAnnotation The targeted chart annotation
   * @param visualizationPath The path of the visualization annotation
   * @param converterContext The converter context
   * @param doNotCheckApplySupported Flag that indicates whether ApplySupported needs to be checked or not
   * @param viewConfiguration
   * @param isInsightsEnabled Flag that indicates whether insights enabled
   * @returns The chart visualization based on the annotation
   */
  function createChartVisualization(chartAnnotation, visualizationPath, converterContext, doNotCheckApplySupported, viewConfiguration, isInsightsEnabled) {
    var _chartAnnotation$Titl;
    const aggregationHelper = new AggregationHelper(converterContext.getEntityType(), converterContext, true); // passing the last parameter as true to consider the old annotations i.e. Aggregation.Aggregatable for backward compatibility in case of chart
    if (!doNotCheckApplySupported && !aggregationHelper.isAnalyticsSupported()) {
      throw new Error("ApplySupported is not added to the annotations");
    }
    const aTransAggregations = aggregationHelper.getTransAggregations();
    const aCustomAggregates = aggregationHelper.getCustomAggregateDefinitions();
    const pageManifestSettings = converterContext.getManifestWrapper();
    const variantManagement = pageManifestSettings.getVariantManagement();
    const p13nMode = getP13nMode(visualizationPath, converterContext);
    if (p13nMode === undefined && variantManagement === "Control") {
      Log.warning("Variant Management cannot be enabled when personalization is disabled");
    }
    const mCustomAggregates = {};
    // check if annoatation path has SPV and store the path
    const mSelectionPresentationVariantPath = checkForSPV(viewConfiguration);
    if (aCustomAggregates) {
      const entityType = aggregationHelper.getEntityType();
      for (const customAggregate of aCustomAggregates) {
        var _customAggregate$anno, _customAggregate$anno2, _relatedCustomAggrega, _relatedCustomAggrega2, _relatedCustomAggrega3;
        const aContextDefiningProperties = customAggregate === null || customAggregate === void 0 ? void 0 : (_customAggregate$anno = customAggregate.annotations) === null || _customAggregate$anno === void 0 ? void 0 : (_customAggregate$anno2 = _customAggregate$anno.Aggregation) === null || _customAggregate$anno2 === void 0 ? void 0 : _customAggregate$anno2.ContextDefiningProperties;
        const qualifier = customAggregate === null || customAggregate === void 0 ? void 0 : customAggregate.qualifier;
        const relatedCustomAggregateProperty = qualifier && entityType.entityProperties.find(property => property.name === qualifier);
        const label = relatedCustomAggregateProperty && (relatedCustomAggregateProperty === null || relatedCustomAggregateProperty === void 0 ? void 0 : (_relatedCustomAggrega = relatedCustomAggregateProperty.annotations) === null || _relatedCustomAggrega === void 0 ? void 0 : (_relatedCustomAggrega2 = _relatedCustomAggrega.Common) === null || _relatedCustomAggrega2 === void 0 ? void 0 : (_relatedCustomAggrega3 = _relatedCustomAggrega2.Label) === null || _relatedCustomAggrega3 === void 0 ? void 0 : _relatedCustomAggrega3.toString());
        mCustomAggregates[qualifier] = {
          name: qualifier,
          label: label || `Custom Aggregate (${qualifier})`,
          sortable: true,
          sortOrder: "both",
          contextDefiningProperty: aContextDefiningProperties ? aContextDefiningProperties.map(oCtxDefProperty => {
            return oCtxDefProperty.value;
          }) : []
        };
      }
    }
    const mTransAggregations = {};
    const oResourceBundleCore = Core.getLibraryResourceBundle("sap.fe.core");
    if (aTransAggregations) {
      for (let i = 0; i < aTransAggregations.length; i++) {
        var _aTransAggregations$i, _aTransAggregations$i2, _aTransAggregations$i3, _aTransAggregations$i4, _aTransAggregations$i5, _aTransAggregations$i6;
        mTransAggregations[aTransAggregations[i].Name] = {
          name: aTransAggregations[i].Name,
          propertyPath: aTransAggregations[i].AggregatableProperty.valueOf().value,
          aggregationMethod: aTransAggregations[i].AggregationMethod,
          label: (_aTransAggregations$i = aTransAggregations[i]) !== null && _aTransAggregations$i !== void 0 && (_aTransAggregations$i2 = _aTransAggregations$i.annotations) !== null && _aTransAggregations$i2 !== void 0 && (_aTransAggregations$i3 = _aTransAggregations$i2.Common) !== null && _aTransAggregations$i3 !== void 0 && _aTransAggregations$i3.Label ? (_aTransAggregations$i4 = aTransAggregations[i]) === null || _aTransAggregations$i4 === void 0 ? void 0 : (_aTransAggregations$i5 = _aTransAggregations$i4.annotations) === null || _aTransAggregations$i5 === void 0 ? void 0 : (_aTransAggregations$i6 = _aTransAggregations$i5.Common) === null || _aTransAggregations$i6 === void 0 ? void 0 : _aTransAggregations$i6.Label.toString() : `${oResourceBundleCore.getText("AGGREGATABLE_PROPERTY")} (${aTransAggregations[i].Name})`,
          sortable: true,
          sortOrder: "both",
          custom: false
        };
      }
    }
    const aAggProps = aggregationHelper.getAggregatableProperties();
    const aGrpProps = aggregationHelper.getGroupableProperties();
    const mApplySupported = {};
    mApplySupported.$Type = "Org.OData.Aggregation.V1.ApplySupportedType";
    mApplySupported.AggregatableProperties = [];
    mApplySupported.GroupableProperties = [];
    if (aAggProps) {
      mApplySupported.AggregatableProperties = aAggProps.map(prop => getAggregatablePropertiesObject(prop));
    }
    if (aGrpProps) {
      mApplySupported.GroupableProperties = aGrpProps.map(prop => ({
        ["$PropertyPath"]: prop.value
      }));
    }
    const chartActions = getChartActions(chartAnnotation, visualizationPath, converterContext);
    let [navigationPropertyPath /*, annotationPath*/] = visualizationPath.split("@");
    if (navigationPropertyPath.lastIndexOf("/") === navigationPropertyPath.length - 1) {
      // Drop trailing slash
      navigationPropertyPath = navigationPropertyPath.substr(0, navigationPropertyPath.length - 1);
    }
    const title = ((_chartAnnotation$Titl = chartAnnotation.Title) === null || _chartAnnotation$Titl === void 0 ? void 0 : _chartAnnotation$Titl.toString()) || ""; // read title from chart annotation
    const dataModelPath = converterContext.getDataModelObjectPath();
    const isEntitySet = navigationPropertyPath.length === 0;
    const entityName = dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;
    const sFilterbarId = isEntitySet ? getFilterBarID(converterContext.getContextPath()) : undefined;
    const oVizProperties = {
      legendGroup: {
        layout: {
          position: "bottom"
        }
      }
    };
    let autoBindOnInit;
    if (converterContext.getTemplateType() === TemplateType.ObjectPage) {
      autoBindOnInit = true;
    } else if (converterContext.getTemplateType() === TemplateType.ListReport || converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
      autoBindOnInit = false;
    }
    const hasMultipleVisualizations = converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
    const onSegmentedButtonPressed = hasMultipleVisualizations ? ".handlers.onSegmentedButtonPressed" : "";
    const visible = hasMultipleVisualizations ? "{= ${pageInternal>alpContentView} !== 'Table'}" : "true";
    const allowedTransformations = aggregationHelper.getAllowedTransformations();
    mApplySupported.enableSearch = allowedTransformations ? allowedTransformations.indexOf("search") >= 0 : true;
    let qualifier = "";
    if (chartAnnotation.fullyQualifiedName.split("#").length > 1) {
      qualifier = chartAnnotation.fullyQualifiedName.split("#")[1];
    }
    return {
      type: VisualizationType.Chart,
      id: qualifier ? getChartID(isEntitySet ? entityName : navigationPropertyPath, qualifier, VisualizationType.Chart) : getChartID(isEntitySet ? entityName : navigationPropertyPath, VisualizationType.Chart),
      collection: getTargetObjectPath(converterContext.getDataModelObjectPath()),
      entityName: entityName,
      personalization: getP13nMode(visualizationPath, converterContext),
      navigationPath: navigationPropertyPath,
      annotationPath: converterContext.getAbsoluteAnnotationPath(visualizationPath),
      filterId: sFilterbarId,
      vizProperties: JSON.stringify(oVizProperties),
      actions: chartActions.actions,
      commandActions: chartActions.commandActions,
      title: title,
      autoBindOnInit: autoBindOnInit,
      onSegmentedButtonPressed: onSegmentedButtonPressed,
      visible: visible,
      customAgg: mCustomAggregates,
      transAgg: mTransAggregations,
      applySupported: mApplySupported,
      selectionPresentationVariantPath: mSelectionPresentationVariantPath,
      variantManagement: findVariantManagement(p13nMode, variantManagement),
      isInsightsEnabled: (isInsightsEnabled ?? false) && getInsightsVisibility("Analytical", converterContext, visualizationPath)
    };
  }
  /**
   * Method to determine the variant management.
   *
   * @param p13nMode
   * @param variantManagement
   * @returns The variant management for the chart
   */
  _exports.createChartVisualization = createChartVisualization;
  function findVariantManagement(p13nMode, variantManagement) {
    return variantManagement === "Control" && !p13nMode ? VariantManagementType.None : variantManagement;
  }

  /**
   * Method to get compile expression for DataFieldForAction and DataFieldForIntentBasedNavigation.
   *
   * @param dataField
   * @param converterContext
   * @returns Compile expression for DataFieldForAction and DataFieldForIntentBasedNavigation
   */
  function getCompileExpressionForAction(dataField, converterContext) {
    var _dataField$annotation, _dataField$annotation2;
    return compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : _dataField$annotation2.Hidden, [], undefined, converterContext.getRelativeModelPathFunction()), true)));
  }
  function createBlankChartVisualization(converterContext) {
    const hasMultipleVisualizations = converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
    const dataModelPath = converterContext.getDataModelObjectPath();
    const entityName = dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;
    const visualization = {
      type: VisualizationType.Chart,
      id: getChartID(entityName, VisualizationType.Chart),
      entityName: entityName,
      title: "",
      collection: "",
      personalization: undefined,
      navigationPath: "",
      annotationPath: "",
      vizProperties: JSON.stringify({
        legendGroup: {
          layout: {
            position: "bottom"
          }
        }
      }),
      actions: [],
      commandActions: {},
      autoBindOnInit: false,
      onSegmentedButtonPressed: "",
      visible: hasMultipleVisualizations ? "{= ${pageInternal>alpContentView} !== 'Table'}" : "true",
      customAgg: {},
      transAgg: {},
      applySupported: {
        $Type: "Org.OData.Aggregation.V1.ApplySupportedType",
        AggregatableProperties: [],
        GroupableProperties: [],
        enableSearch: false
      },
      multiViews: false,
      variantManagement: VariantManagementType.None
    };
    return visualization;
  }
  _exports.createBlankChartVisualization = createBlankChartVisualization;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Chart", ["sap/base/Log","sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DataModelPathHelper","sap/ui/core/Core","../../helpers/Aggregation","../../helpers/ID","../../helpers/InsightsHelpers","../../ManifestSettings"],function(t,e,n,a,o,i,r,s,l,g,c,p){"use strict";var u={};var d=p.VisualizationType;var v=p.VariantManagementType;var f=p.TemplateType;var m=p.ActionType;var y=c.getInsightsVisibility;var h=g.getFilterBarID;var P=g.getChartID;var b=l.AggregationHelper;var A=r.getTargetObjectPath;var T=i.not;var S=i.getExpressionFromAnnotation;var C=i.equal;var M=i.compileExpression;var O=o.KeyHelper;var I=a.OverrideType;var D=a.insertCustomElements;var E=n.getActionsFromManifest;var F=e.isDataFieldForActionAbstract;function V(t,e,n){const a=[];if(t){const e=t.Actions||[];e.forEach(t=>{var e;let o;if(F(t)&&!t.Inline&&!t.Determining){const a=O.generateKeyFromDataField(t);switch(t.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAction":if(!((e=t.ActionTarget)!==null&&e!==void 0&&e.isBound)){o={type:m.DataFieldForAction,annotationPath:n.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),key:a,visible:x(t,n)}}break;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":o={type:m.DataFieldForIntentBasedNavigation,annotationPath:n.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),key:a,visible:x(t,n),isNavigable:true};break}}if(o){a.push(o)}})}return a}function N(t,e,n){const a=V(t,e,n);const o=E(n.getManifestControlConfiguration(e).actions,n,a);const i={enabled:I.overwrite,enableOnSelect:I.overwrite,visible:I.overwrite,command:I.overwrite};const r=D(a,o.actions,i);return{actions:r,commandActions:o.commandActions}}u.getChartActions=N;function w(t,e){var n;const a=e.getManifestWrapper();const o=e.getManifestControlConfiguration(t);const i=a.getVariantManagement();const r=[];const s=o===null||o===void 0?void 0:(n=o.chartSettings)===null||n===void 0?void 0:n.personalization;const l=i===v.Control?true:false;if(s!==undefined&&!s||s=="false"){return undefined}switch(true){case typeof s==="object":if(s.type){r.push("Type")}if(s.item){r.push("Item")}if(s.sort){r.push("Sort")}if(s.filter){r.push("Filter")}return r.join(",");case l:case!!s:return"Sort,Type,Item,Filter";default:return"Sort,Type,Item"}}u.getP13nMode=w;function B(t){var e;return(t===null||t===void 0?void 0:(e=t.annotationPath)===null||e===void 0?void 0:e.indexOf(`@${"com.sap.vocabularies.UI.v1.SelectionPresentationVariant"}`))!==-1?t===null||t===void 0?void 0:t.annotationPath:undefined}function $(t){let e;if(t!==null&&t!==void 0&&t.Property){var n;e={Property:{$PropertyPath:t===null||t===void 0?void 0:(n=t.Property)===null||n===void 0?void 0:n.value}}}else{e={Property:{$PropertyPath:t===null||t===void 0?void 0:t.name}}}return e}function z(e,n,a,o,i,r){var l;const g=new b(a.getEntityType(),a,true);if(!o&&!g.isAnalyticsSupported()){throw new Error("ApplySupported is not added to the annotations")}const c=g.getTransAggregations();const p=g.getCustomAggregateDefinitions();const u=a.getManifestWrapper();const v=u.getVariantManagement();const m=w(n,a);if(m===undefined&&v==="Control"){t.warning("Variant Management cannot be enabled when personalization is disabled")}const T={};const S=B(i);if(p){const t=g.getEntityType();for(const e of p){var C,M,O,I,D;const n=e===null||e===void 0?void 0:(C=e.annotations)===null||C===void 0?void 0:(M=C.Aggregation)===null||M===void 0?void 0:M.ContextDefiningProperties;const a=e===null||e===void 0?void 0:e.qualifier;const o=a&&t.entityProperties.find(t=>t.name===a);const i=o&&(o===null||o===void 0?void 0:(O=o.annotations)===null||O===void 0?void 0:(I=O.Common)===null||I===void 0?void 0:(D=I.Label)===null||D===void 0?void 0:D.toString());T[a]={name:a,label:i||`Custom Aggregate (${a})`,sortable:true,sortOrder:"both",contextDefiningProperty:n?n.map(t=>t.value):[]}}}const E={};const F=s.getLibraryResourceBundle("sap.fe.core");if(c){for(let t=0;t<c.length;t++){var V,z,x,G,j,k;E[c[t].Name]={name:c[t].Name,propertyPath:c[t].AggregatableProperty.valueOf().value,aggregationMethod:c[t].AggregationMethod,label:(V=c[t])!==null&&V!==void 0&&(z=V.annotations)!==null&&z!==void 0&&(x=z.Common)!==null&&x!==void 0&&x.Label?(G=c[t])===null||G===void 0?void 0:(j=G.annotations)===null||j===void 0?void 0:(k=j.Common)===null||k===void 0?void 0:k.Label.toString():`${F.getText("AGGREGATABLE_PROPERTY")} (${c[t].Name})`,sortable:true,sortOrder:"both",custom:false}}}const R=g.getAggregatableProperties();const H=g.getGroupableProperties();const Q={};Q.$Type="Org.OData.Aggregation.V1.ApplySupportedType";Q.AggregatableProperties=[];Q.GroupableProperties=[];if(R){Q.AggregatableProperties=R.map(t=>$(t))}if(H){Q.GroupableProperties=H.map(t=>({["$PropertyPath"]:t.value}))}const U=N(e,n,a);let[W]=n.split("@");if(W.lastIndexOf("/")===W.length-1){W=W.substr(0,W.length-1)}const K=((l=e.Title)===null||l===void 0?void 0:l.toString())||"";const q=a.getDataModelObjectPath();const J=W.length===0;const Y=q.targetEntitySet?q.targetEntitySet.name:q.startingEntitySet.name;const _=J?h(a.getContextPath()):undefined;const X={legendGroup:{layout:{position:"bottom"}}};let Z;if(a.getTemplateType()===f.ObjectPage){Z=true}else if(a.getTemplateType()===f.ListReport||a.getTemplateType()===f.AnalyticalListPage){Z=false}const tt=a.getManifestWrapper().hasMultipleVisualizations()||a.getTemplateType()===f.AnalyticalListPage;const et=tt?".handlers.onSegmentedButtonPressed":"";const nt=tt?"{= ${pageInternal>alpContentView} !== 'Table'}":"true";const at=g.getAllowedTransformations();Q.enableSearch=at?at.indexOf("search")>=0:true;let ot="";if(e.fullyQualifiedName.split("#").length>1){ot=e.fullyQualifiedName.split("#")[1]}return{type:d.Chart,id:ot?P(J?Y:W,ot,d.Chart):P(J?Y:W,d.Chart),collection:A(a.getDataModelObjectPath()),entityName:Y,personalization:w(n,a),navigationPath:W,annotationPath:a.getAbsoluteAnnotationPath(n),filterId:_,vizProperties:JSON.stringify(X),actions:U.actions,commandActions:U.commandActions,title:K,autoBindOnInit:Z,onSegmentedButtonPressed:et,visible:nt,customAgg:T,transAgg:E,applySupported:Q,selectionPresentationVariantPath:S,variantManagement:L(m,v),isInsightsEnabled:(r??false)&&y("Analytical",a,n)}}u.createChartVisualization=z;function L(t,e){return e==="Control"&&!t?v.None:e}function x(t,e){var n,a;return M(T(C(S((n=t.annotations)===null||n===void 0?void 0:(a=n.UI)===null||a===void 0?void 0:a.Hidden,[],undefined,e.getRelativeModelPathFunction()),true)))}function G(t){const e=t.getManifestWrapper().hasMultipleVisualizations()||t.getTemplateType()===f.AnalyticalListPage;const n=t.getDataModelObjectPath();const a=n.targetEntitySet?n.targetEntitySet.name:n.startingEntitySet.name;const o={type:d.Chart,id:P(a,d.Chart),entityName:a,title:"",collection:"",personalization:undefined,navigationPath:"",annotationPath:"",vizProperties:JSON.stringify({legendGroup:{layout:{position:"bottom"}}}),actions:[],commandActions:{},autoBindOnInit:false,onSegmentedButtonPressed:"",visible:e?"{= ${pageInternal>alpContentView} !== 'Table'}":"true",customAgg:{},transAgg:{},applySupported:{$Type:"Org.OData.Aggregation.V1.ApplySupportedType",AggregatableProperties:[],GroupableProperties:[],enableSearch:false},multiViews:false,variantManagement:v.None};return o}u.createBlankChartVisualization=G;return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Criticality-dbg", ["sap/fe/core/formatters/TableFormatterTypes"], function (TableFormatterTypes) {
  "use strict";

  var _exports = {};
  var MessageType = TableFormatterTypes.MessageType;
  /**
   * Gets a MessageType enum value from a CriticalityType enum value.
   *
   * @param criticalityEnum The CriticalityType enum value
   * @returns Returns the MessageType enum value
   */
  function getMessageTypeFromCriticalityType(criticalityEnum) {
    let messageType;
    switch (criticalityEnum) {
      case "UI.CriticalityType/Negative":
      case "UI.CriticalityType/VeryNegative":
        messageType = MessageType.Error;
        break;
      case "UI.CriticalityType/Critical":
        messageType = MessageType.Warning;
        break;
      case "UI.CriticalityType/Positive":
      case "UI.CriticalityType/VeryPositive":
        messageType = MessageType.Success;
        break;
      case "UI.CriticalityType/Information":
        messageType = MessageType.Information;
        break;
      case "UI.CriticalityType/Neutral":
      default:
        messageType = MessageType.None;
    }
    return messageType;
  }
  _exports.getMessageTypeFromCriticalityType = getMessageTypeFromCriticalityType;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Criticality", ["sap/fe/core/formatters/TableFormatterTypes"],function(e){"use strict";var i={};var t=e.MessageType;function a(e){let i;switch(e){case"UI.CriticalityType/Negative":case"UI.CriticalityType/VeryNegative":i=t.Error;break;case"UI.CriticalityType/Critical":i=t.Warning;break;case"UI.CriticalityType/Positive":case"UI.CriticalityType/VeryPositive":i=t.Success;break;case"UI.CriticalityType/Information":i=t.Information;break;case"UI.CriticalityType/Neutral":default:i=t.None}return i}i.getMessageTypeFromCriticalityType=a;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/DataVisualization-dbg", ["sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/converters/MetaModelConverter", "sap/fe/macros/CommonHelper", "../../ManifestSettings", "./Chart", "./Table"], function (IssueManager, MetaModelConverter, CommonHelper, ManifestSettings, Chart, Table) {
  "use strict";

  var _exports = {};
  var createChartVisualization = Chart.createChartVisualization;
  var createBlankChartVisualization = Chart.createBlankChartVisualization;
  var TemplateType = ManifestSettings.TemplateType;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  const getVisualizationsFromPresentationVariant = function (presentationVariantAnnotation, visualizationPath, converterContext, isMacroOrMultipleView) {
    const visualizationAnnotations = [];
    const isALP = isAlpAnnotation(converterContext);
    const baseVisualizationPath = visualizationPath.split("@")[0];
    if ((isMacroOrMultipleView === true || isALP) && !isPresentationCompliant(presentationVariantAnnotation, isALP)) {
      if (!annotationExistsInPresentationVariant(presentationVariantAnnotation, "com.sap.vocabularies.UI.v1.LineItem")) {
        const defaultLineItemAnnotation = prepareDefaultVisualization("com.sap.vocabularies.UI.v1.LineItem", baseVisualizationPath, converterContext);
        if (defaultLineItemAnnotation) {
          visualizationAnnotations.push(defaultLineItemAnnotation);
        }
      }
      if (!annotationExistsInPresentationVariant(presentationVariantAnnotation, "com.sap.vocabularies.UI.v1.Chart")) {
        const defaultChartAnnotation = prepareDefaultVisualization("com.sap.vocabularies.UI.v1.Chart", baseVisualizationPath, converterContext);
        if (defaultChartAnnotation) {
          visualizationAnnotations.push(defaultChartAnnotation);
        }
      }
    }
    const visualizations = presentationVariantAnnotation.Visualizations;
    const pushFirstVizOfType = function (allowedTerms) {
      const firstViz = visualizations === null || visualizations === void 0 ? void 0 : visualizations.find(viz => {
        var _viz$$target;
        return allowedTerms.indexOf((_viz$$target = viz.$target) === null || _viz$$target === void 0 ? void 0 : _viz$$target.term) >= 0;
      });
      if (firstViz) {
        visualizationAnnotations.push({
          visualization: firstViz.$target,
          annotationPath: `${baseVisualizationPath}${firstViz.value}`,
          converterContext: converterContext
        });
      }
    };
    if (isALP) {
      // In case of ALP, we use the first LineItem and the first Chart
      pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem"]);
      pushFirstVizOfType(["com.sap.vocabularies.UI.v1.Chart"]);
    } else {
      // Otherwise, we use the first viz only (Chart or LineItem)
      pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem", "com.sap.vocabularies.UI.v1.Chart"]);
    }
    return visualizationAnnotations;
  };
  _exports.getVisualizationsFromPresentationVariant = getVisualizationsFromPresentationVariant;
  function getSelectionPresentationVariant(entityType, annotationPath, converterContext) {
    if (annotationPath) {
      const resolvedTarget = converterContext.getEntityTypeAnnotation(annotationPath);
      const selectionPresentationVariant = resolvedTarget.annotation;
      if (selectionPresentationVariant) {
        if (selectionPresentationVariant.term === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
          return selectionPresentationVariant;
        }
      } else {
        throw new Error("Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation");
      }
    } else {
      var _entityType$annotatio, _entityType$annotatio2;
      return (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.SelectionPresentationVariant;
    }
  }
  _exports.getSelectionPresentationVariant = getSelectionPresentationVariant;
  function isSelectionPresentationCompliant(selectionPresentationVariant, isALP) {
    const presentationVariant = selectionPresentationVariant && selectionPresentationVariant.PresentationVariant;
    if (presentationVariant) {
      return isPresentationCompliant(presentationVariant, isALP);
    } else {
      throw new Error("Presentation Variant is not present in the SPV annotation");
    }
  }
  _exports.isSelectionPresentationCompliant = isSelectionPresentationCompliant;
  function isPresentationCompliant(presentationVariant) {
    let isALP = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let hasTable = false,
      hasChart = false;
    if (isALP) {
      if (presentationVariant !== null && presentationVariant !== void 0 && presentationVariant.Visualizations) {
        const visualizations = presentationVariant.Visualizations;
        visualizations.forEach(visualization => {
          var _visualization$$targe, _visualization$$targe2;
          if (((_visualization$$targe = visualization.$target) === null || _visualization$$targe === void 0 ? void 0 : _visualization$$targe.term) === "com.sap.vocabularies.UI.v1.LineItem") {
            hasTable = true;
          }
          if (((_visualization$$targe2 = visualization.$target) === null || _visualization$$targe2 === void 0 ? void 0 : _visualization$$targe2.term) === "com.sap.vocabularies.UI.v1.Chart") {
            hasChart = true;
          }
        });
      }
      return hasChart && hasTable;
    } else {
      return (presentationVariant === null || presentationVariant === void 0 ? void 0 : presentationVariant.Visualizations) && !!presentationVariant.Visualizations.find(visualization => {
        var _visualization$$targe3, _visualization$$targe4;
        return ((_visualization$$targe3 = visualization.$target) === null || _visualization$$targe3 === void 0 ? void 0 : _visualization$$targe3.term) === "com.sap.vocabularies.UI.v1.LineItem" || ((_visualization$$targe4 = visualization.$target) === null || _visualization$$targe4 === void 0 ? void 0 : _visualization$$targe4.term) === "com.sap.vocabularies.UI.v1.Chart";
      });
    }
  }
  _exports.isPresentationCompliant = isPresentationCompliant;
  function getDefaultLineItem(entityType) {
    var _entityType$annotatio3;
    return (_entityType$annotatio3 = entityType.annotations.UI) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.LineItem;
  }
  _exports.getDefaultLineItem = getDefaultLineItem;
  function getDefaultChart(entityType) {
    var _entityType$annotatio4;
    return (_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.Chart;
  }
  _exports.getDefaultChart = getDefaultChart;
  function getDefaultPresentationVariant(entityType) {
    var _entityType$annotatio5, _entityType$annotatio6;
    return (_entityType$annotatio5 = entityType.annotations) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.PresentationVariant;
  }
  _exports.getDefaultPresentationVariant = getDefaultPresentationVariant;
  function getDefaultSelectionVariant(entityType) {
    var _entityType$annotatio7, _entityType$annotatio8;
    return (_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : _entityType$annotatio8.SelectionVariant;
  }
  _exports.getDefaultSelectionVariant = getDefaultSelectionVariant;
  function getSelectionVariant(entityType, converterContext) {
    const annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();
    const selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);
    let selectionVariant;
    if (selectionPresentationVariant) {
      selectionVariant = selectionPresentationVariant.SelectionVariant;
      if (selectionVariant) {
        return selectionVariant;
      }
    } else {
      selectionVariant = getDefaultSelectionVariant(entityType);
      return selectionVariant;
    }
  }
  _exports.getSelectionVariant = getSelectionVariant;
  function getDataVisualizationConfiguration(visualizationPath, isCondensedTableLayoutCompliant, inConverterContext, viewConfiguration, doNotCheckApplySupported, associatedPresentationVariantPath, isMacroOrMultipleView, isInsightsEnabled) {
    const resolvedTarget = visualizationPath !== "" ? inConverterContext.getEntityTypeAnnotation(visualizationPath) : {
      annotation: undefined,
      converterContext: inConverterContext
    };
    const resolvedAssociatedPresentationVariant = associatedPresentationVariantPath ? inConverterContext.getEntityTypeAnnotation(associatedPresentationVariantPath) : null;
    const resolvedVisualization = resolvedTarget.annotation;
    inConverterContext = resolvedTarget.converterContext;
    let visualizationAnnotations = [];
    let presentationVariantAnnotation;
    let presentationPath = "";
    let chartVisualization, tableVisualization;
    const term = resolvedVisualization === null || resolvedVisualization === void 0 ? void 0 : resolvedVisualization.term;
    if (term) {
      switch (term) {
        case "com.sap.vocabularies.UI.v1.LineItem":
        case "com.sap.vocabularies.UI.v1.Chart":
          presentationVariantAnnotation = resolvedAssociatedPresentationVariant === null || resolvedAssociatedPresentationVariant === void 0 ? void 0 : resolvedAssociatedPresentationVariant.annotation;
          visualizationAnnotations.push({
            visualization: resolvedVisualization,
            annotationPath: visualizationPath,
            converterContext: inConverterContext
          });
          break;
        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationVariantAnnotation = resolvedVisualization;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(resolvedVisualization, visualizationPath, inConverterContext, isMacroOrMultipleView));
          break;
        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationVariantAnnotation = resolvedVisualization.PresentationVariant;
          // Presentation can be inline or outside the SelectionPresentationVariant
          presentationPath = presentationVariantAnnotation.fullyQualifiedName;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(presentationVariantAnnotation, visualizationPath, inConverterContext, isMacroOrMultipleView));
          break;
        default:
          break;
      }
      visualizationAnnotations.forEach(visualizationAnnotation => {
        const {
          visualization,
          annotationPath,
          converterContext
        } = visualizationAnnotation;
        switch (visualization.term) {
          case "com.sap.vocabularies.UI.v1.Chart":
            chartVisualization = createChartVisualization(visualization, annotationPath, converterContext, doNotCheckApplySupported, viewConfiguration, isInsightsEnabled);
            break;
          case "com.sap.vocabularies.UI.v1.LineItem":
          default:
            tableVisualization = Table.createTableVisualization(visualization, annotationPath, converterContext, presentationVariantAnnotation, isCondensedTableLayoutCompliant, viewConfiguration, isInsightsEnabled);
            break;
        }
      });
    }
    const visualizations = [];
    let path = term === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" ? presentationPath : resolvedVisualization === null || resolvedVisualization === void 0 ? void 0 : resolvedVisualization.fullyQualifiedName;
    if (path === undefined) {
      path = "/";
    }
    const isALP = isAlpAnnotation(inConverterContext);
    if (!term || isALP && tableVisualization === undefined) {
      tableVisualization = Table.createDefaultTableVisualization(inConverterContext, isMacroOrMultipleView !== true);
      inConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_LINEITEM);
    }
    if (isALP && chartVisualization === undefined) {
      chartVisualization = createBlankChartVisualization(inConverterContext);
      inConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_CHART);
    }
    if (chartVisualization) {
      visualizations.push(chartVisualization);
    }
    if (tableVisualization) {
      visualizations.push(tableVisualization);
    }
    return {
      visualizations: visualizations,
      annotationPath: inConverterContext.getEntitySetBasedAnnotationPath(path)
    };
  }
  /**
   * Returns the context of the UI controls (either a UI.LineItem, or a UI.Chart).
   *
   * @function
   * @name getUiControl
   * @param presentationContext Object of the presentation context (either a presentation variant, or a UI.LineItem, or a UI.Chart)
   * @param controlPath Control path
   * @returns The context of the control (either a UI.LineItem, or a UI.Chart)
   */
  _exports.getDataVisualizationConfiguration = getDataVisualizationConfiguration;
  function getUiControl(presentationContext, controlPath) {
    CommonHelper.validatePresentationMetaPath(presentationContext.getPath(), controlPath);
    const presentation = MetaModelConverter.convertMetaModelContext(presentationContext),
      presentationVariantPath = CommonHelper.createPresentationPathContext(presentationContext),
      model = presentationContext.getModel();
    if (presentation) {
      if (CommonHelper._isPresentationVariantAnnotation(presentationVariantPath.getPath())) {
        const visualizations = presentation.PresentationVariant ? presentation.PresentationVariant.Visualizations : presentation.Visualizations;
        if (Array.isArray(visualizations)) {
          for (const visualization of visualizations) {
            if (visualization.type == "AnnotationPath" && visualization.value.indexOf(controlPath) !== -1 &&
            // check if object exists for PresentationVariant visualization
            !!model.getMetaContext(presentationContext.getPath().split("@")[0] + visualization.value).getObject()) {
              controlPath = visualization.value;
              break;
            }
          }
        }
      } else {
        return presentationContext;
      }
    }
    return model.getMetaContext(presentationContext.getPath().split("@")[0] + controlPath);
  }
  _exports.getUiControl = getUiControl;
  const annotationExistsInPresentationVariant = function (presentationVariantAnnotation, annotationTerm) {
    var _presentationVariantA;
    return ((_presentationVariantA = presentationVariantAnnotation.Visualizations) === null || _presentationVariantA === void 0 ? void 0 : _presentationVariantA.some(visualization => visualization.value.indexOf(annotationTerm) > -1)) ?? false;
  };
  _exports.annotationExistsInPresentationVariant = annotationExistsInPresentationVariant;
  const prepareDefaultVisualization = function (visualizationType, baseVisualizationPath, converterContext) {
    const entityType = converterContext.getEntityType();
    const defaultAnnotation = visualizationType === "com.sap.vocabularies.UI.v1.LineItem" ? getDefaultLineItem(entityType) : getDefaultChart(entityType);
    if (defaultAnnotation) {
      return {
        visualization: defaultAnnotation,
        annotationPath: `${baseVisualizationPath}${converterContext.getRelativeAnnotationPath(defaultAnnotation.fullyQualifiedName, entityType)}`,
        converterContext: converterContext
      };
    }
    return undefined;
  };
  _exports.prepareDefaultVisualization = prepareDefaultVisualization;
  const isAlpAnnotation = function (converterContext) {
    return converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
  };
  _exports.isAlpAnnotation = isAlpAnnotation;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/DataVisualization", ["sap/fe/core/converters/helpers/IssueManager","sap/fe/core/converters/MetaModelConverter","sap/fe/macros/CommonHelper","../../ManifestSettings","./Chart","./Table"],function(t,n,e,a,i,o){"use strict";var r={};var s=i.createChartVisualization;var l=i.createBlankChartVisualization;var u=a.TemplateType;var c=t.IssueType;var v=t.IssueSeverity;var f=t.IssueCategory;const d=function(t,n,e,a){const i=[];const o=S(e);const r=n.split("@")[0];if((a===true||o)&&!I(t,o)){if(!y(t,"com.sap.vocabularies.UI.v1.LineItem")){const t=z("com.sap.vocabularies.UI.v1.LineItem",r,e);if(t){i.push(t)}}if(!y(t,"com.sap.vocabularies.UI.v1.Chart")){const t=z("com.sap.vocabularies.UI.v1.Chart",r,e);if(t){i.push(t)}}}const s=t.Visualizations;const l=function(t){const n=s===null||s===void 0?void 0:s.find(n=>{var e;return t.indexOf((e=n.$target)===null||e===void 0?void 0:e.term)>=0});if(n){i.push({visualization:n.$target,annotationPath:`${r}${n.value}`,converterContext:e})}};if(o){l(["com.sap.vocabularies.UI.v1.LineItem"]);l(["com.sap.vocabularies.UI.v1.Chart"])}else{l(["com.sap.vocabularies.UI.v1.LineItem","com.sap.vocabularies.UI.v1.Chart"])}return i};r.getVisualizationsFromPresentationVariant=d;function p(t,n,e){if(n){const t=e.getEntityTypeAnnotation(n);const a=t.annotation;if(a){if(a.term==="com.sap.vocabularies.UI.v1.SelectionPresentationVariant"){return a}}else{throw new Error("Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation")}}else{var a,i;return(a=t.annotations)===null||a===void 0?void 0:(i=a.UI)===null||i===void 0?void 0:i.SelectionPresentationVariant}}r.getSelectionPresentationVariant=p;function m(t,n){const e=t&&t.PresentationVariant;if(e){return I(e,n)}else{throw new Error("Presentation Variant is not present in the SPV annotation")}}r.isSelectionPresentationCompliant=m;function I(t){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let e=false,a=false;if(n){if(t!==null&&t!==void 0&&t.Visualizations){const n=t.Visualizations;n.forEach(t=>{var n,i;if(((n=t.$target)===null||n===void 0?void 0:n.term)==="com.sap.vocabularies.UI.v1.LineItem"){e=true}if(((i=t.$target)===null||i===void 0?void 0:i.term)==="com.sap.vocabularies.UI.v1.Chart"){a=true}})}return a&&e}else{return(t===null||t===void 0?void 0:t.Visualizations)&&!!t.Visualizations.find(t=>{var n,e;return((n=t.$target)===null||n===void 0?void 0:n.term)==="com.sap.vocabularies.UI.v1.LineItem"||((e=t.$target)===null||e===void 0?void 0:e.term)==="com.sap.vocabularies.UI.v1.Chart"})}}r.isPresentationCompliant=I;function h(t){var n;return(n=t.annotations.UI)===null||n===void 0?void 0:n.LineItem}r.getDefaultLineItem=h;function g(t){var n;return(n=t.annotations.UI)===null||n===void 0?void 0:n.Chart}r.getDefaultChart=g;function P(t){var n,e;return(n=t.annotations)===null||n===void 0?void 0:(e=n.UI)===null||e===void 0?void 0:e.PresentationVariant}r.getDefaultPresentationVariant=P;function V(t){var n,e;return(n=t.annotations)===null||n===void 0?void 0:(e=n.UI)===null||e===void 0?void 0:e.SelectionVariant}r.getDefaultSelectionVariant=V;function b(t,n){const e=n.getManifestWrapper().getDefaultTemplateAnnotationPath();const a=p(t,e,n);let i;if(a){i=a.SelectionVariant;if(i){return i}}else{i=V(t);return i}}r.getSelectionVariant=b;function C(t,n,e,a,i,r,u,p){const m=t!==""?e.getEntityTypeAnnotation(t):{annotation:undefined,converterContext:e};const I=r?e.getEntityTypeAnnotation(r):null;const h=m.annotation;e=m.converterContext;let g=[];let P;let V="";let b,C;const U=h===null||h===void 0?void 0:h.term;if(U){switch(U){case"com.sap.vocabularies.UI.v1.LineItem":case"com.sap.vocabularies.UI.v1.Chart":P=I===null||I===void 0?void 0:I.annotation;g.push({visualization:h,annotationPath:t,converterContext:e});break;case"com.sap.vocabularies.UI.v1.PresentationVariant":P=h;g=g.concat(d(h,t,e,u));break;case"com.sap.vocabularies.UI.v1.SelectionPresentationVariant":P=h.PresentationVariant;V=P.fullyQualifiedName;g=g.concat(d(P,t,e,u));break;default:break}g.forEach(t=>{const{visualization:e,annotationPath:r,converterContext:l}=t;switch(e.term){case"com.sap.vocabularies.UI.v1.Chart":b=s(e,r,l,i,a,p);break;case"com.sap.vocabularies.UI.v1.LineItem":default:C=o.createTableVisualization(e,r,l,P,n,a,p);break}})}const y=[];let z=U==="com.sap.vocabularies.UI.v1.SelectionPresentationVariant"?V:h===null||h===void 0?void 0:h.fullyQualifiedName;if(z===undefined){z="/"}const M=S(e);if(!U||M&&C===undefined){C=o.createDefaultTableVisualization(e,u!==true);e.getDiagnostics().addIssue(f.Annotation,v.Medium,c.MISSING_LINEITEM)}if(M&&b===undefined){b=l(e);e.getDiagnostics().addIssue(f.Annotation,v.Medium,c.MISSING_CHART)}if(b){y.push(b)}if(C){y.push(C)}return{visualizations:y,annotationPath:e.getEntitySetBasedAnnotationPath(z)}}r.getDataVisualizationConfiguration=C;function U(t,a){e.validatePresentationMetaPath(t.getPath(),a);const i=n.convertMetaModelContext(t),o=e.createPresentationPathContext(t),r=t.getModel();if(i){if(e._isPresentationVariantAnnotation(o.getPath())){const n=i.PresentationVariant?i.PresentationVariant.Visualizations:i.Visualizations;if(Array.isArray(n)){for(const e of n){if(e.type=="AnnotationPath"&&e.value.indexOf(a)!==-1&&!!r.getMetaContext(t.getPath().split("@")[0]+e.value).getObject()){a=e.value;break}}}}else{return t}}return r.getMetaContext(t.getPath().split("@")[0]+a)}r.getUiControl=U;const y=function(t,n){var e;return((e=t.Visualizations)===null||e===void 0?void 0:e.some(t=>t.value.indexOf(n)>-1))??false};r.annotationExistsInPresentationVariant=y;const z=function(t,n,e){const a=e.getEntityType();const i=t==="com.sap.vocabularies.UI.v1.LineItem"?h(a):g(a);if(i){return{visualization:i,annotationPath:`${n}${e.getRelativeAnnotationPath(i.fullyQualifiedName,a)}`,converterContext:e}}return undefined};r.prepareDefaultVisualization=z;const S=function(t){return t.getManifestWrapper().hasMultipleVisualizations()||t.getTemplateType()===u.AnalyticalListPage};r.isAlpAnnotation=S;return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Form-dbg", ["sap/fe/core/converters/annotations/DataField", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "../../../helpers/StableIdHelper", "../../helpers/ConfigurableObject", "../../helpers/DataFieldHelper", "../../helpers/ID", "../../helpers/Key", "../../ManifestSettings"], function (DataField, BindingToolkit, TypeGuards, DataModelPathHelper, StableIdHelper, ConfigurableObject, DataFieldHelper, ID, Key, ManifestSettings) {
  "use strict";

  var _exports = {};
  var ActionType = ManifestSettings.ActionType;
  var KeyHelper = Key.KeyHelper;
  var getFormStandardActionButtonID = ID.getFormStandardActionButtonID;
  var getFormID = ID.getFormID;
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var Placement = ConfigurableObject.Placement;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var createIdForAnnotation = StableIdHelper.createIdForAnnotation;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getTargetEntitySetPath = DataModelPathHelper.getTargetEntitySetPath;
  var isSingleton = TypeGuards.isSingleton;
  var pathInModel = BindingToolkit.pathInModel;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var getSemanticObjectPath = DataField.getSemanticObjectPath;
  let FormElementType;
  (function (FormElementType) {
    FormElementType["Default"] = "Default";
    FormElementType["Slot"] = "Slot";
    FormElementType["Annotation"] = "Annotation";
  })(FormElementType || (FormElementType = {}));
  _exports.FormElementType = FormElementType;
  /**
   * Returns default format options for text fields on a form.
   *
   * @returns Collection of format options with default values
   */
  function getDefaultFormatOptionsForForm() {
    return {
      textLinesEdit: 4
    };
  }
  function isFieldPartOfPreview(field, formPartOfPreview) {
    var _field$annotations, _field$annotations$UI, _field$annotations2, _field$annotations2$U;
    // Both each form and field can have the PartOfPreview annotation. Only if the form is not hidden (not partOfPreview) we allow toggling on field level
    return (formPartOfPreview === null || formPartOfPreview === void 0 ? void 0 : formPartOfPreview.valueOf()) === false || ((_field$annotations = field.annotations) === null || _field$annotations === void 0 ? void 0 : (_field$annotations$UI = _field$annotations.UI) === null || _field$annotations$UI === void 0 ? void 0 : _field$annotations$UI.PartOfPreview) === undefined || ((_field$annotations2 = field.annotations) === null || _field$annotations2 === void 0 ? void 0 : (_field$annotations2$U = _field$annotations2.UI) === null || _field$annotations2$U === void 0 ? void 0 : _field$annotations2$U.PartOfPreview.valueOf()) === true;
  }
  function getFormElementsFromAnnotations(facetDefinition, converterContext) {
    const formElements = [];
    const resolvedTarget = converterContext.getEntityTypeAnnotation(facetDefinition.Target.value);
    const formAnnotation = resolvedTarget.annotation;
    converterContext = resolvedTarget.converterContext;
    function getDataFieldsFromAnnotations(field, formPartOfPreview) {
      var _field$annotations3, _field$annotations3$U, _field$annotations3$U2;
      const semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, field);
      if (field.$Type !== "com.sap.vocabularies.UI.v1.DataFieldForAction" && field.$Type !== "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && !isReferencePropertyStaticallyHidden(field) && ((_field$annotations3 = field.annotations) === null || _field$annotations3 === void 0 ? void 0 : (_field$annotations3$U = _field$annotations3.UI) === null || _field$annotations3$U === void 0 ? void 0 : (_field$annotations3$U2 = _field$annotations3$U.Hidden) === null || _field$annotations3$U2 === void 0 ? void 0 : _field$annotations3$U2.valueOf()) !== true) {
        const formElement = {
          key: KeyHelper.generateKeyFromDataField(field),
          type: FormElementType.Annotation,
          annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(field.fullyQualifiedName)}/`,
          semanticObjectPath: semanticObjectAnnotationPath,
          formatOptions: getDefaultFormatOptionsForForm(),
          isPartOfPreview: isFieldPartOfPreview(field, formPartOfPreview)
        };
        if (field.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && field.Target.$target.$Type === "com.sap.vocabularies.UI.v1.ConnectedFieldsType") {
          const connectedFields = Object.values(field.Target.$target.Data).filter(connectedField => connectedField === null || connectedField === void 0 ? void 0 : connectedField.hasOwnProperty("Value"));
          formElement.connectedFields = connectedFields.map(connnectedFieldElement => {
            return {
              semanticObjectPath: getSemanticObjectPath(converterContext, connnectedFieldElement)
            };
          });
        }
        formElements.push(formElement);
      }
    }
    switch (formAnnotation === null || formAnnotation === void 0 ? void 0 : formAnnotation.term) {
      case "com.sap.vocabularies.UI.v1.FieldGroup":
        formAnnotation.Data.forEach(field => {
          var _facetDefinition$anno, _facetDefinition$anno2;
          return getDataFieldsFromAnnotations(field, (_facetDefinition$anno = facetDefinition.annotations) === null || _facetDefinition$anno === void 0 ? void 0 : (_facetDefinition$anno2 = _facetDefinition$anno.UI) === null || _facetDefinition$anno2 === void 0 ? void 0 : _facetDefinition$anno2.PartOfPreview);
        });
        break;
      case "com.sap.vocabularies.UI.v1.Identification":
        formAnnotation.forEach(field => {
          var _facetDefinition$anno3, _facetDefinition$anno4;
          return getDataFieldsFromAnnotations(field, (_facetDefinition$anno3 = facetDefinition.annotations) === null || _facetDefinition$anno3 === void 0 ? void 0 : (_facetDefinition$anno4 = _facetDefinition$anno3.UI) === null || _facetDefinition$anno4 === void 0 ? void 0 : _facetDefinition$anno4.PartOfPreview);
        });
        break;
      case "com.sap.vocabularies.UI.v1.DataPoint":
        formElements.push({
          // key: KeyHelper.generateKeyFromDataField(formAnnotation),
          key: `DataPoint::${formAnnotation.qualifier ? formAnnotation.qualifier : ""}`,
          type: FormElementType.Annotation,
          annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(formAnnotation.fullyQualifiedName)}/`
        });
        break;
      case "com.sap.vocabularies.Communication.v1.Contact":
        formElements.push({
          // key: KeyHelper.generateKeyFromDataField(formAnnotation),
          key: `Contact::${formAnnotation.qualifier ? formAnnotation.qualifier : ""}`,
          type: FormElementType.Annotation,
          annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(formAnnotation.fullyQualifiedName)}/`
        });
        break;
      default:
        break;
    }
    return formElements;
  }
  function getFormElementsFromManifest(facetDefinition, converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    const manifestFormContainer = manifestWrapper.getFormContainer(facetDefinition.Target.value);
    const formElements = {};
    if (manifestFormContainer !== null && manifestFormContainer !== void 0 && manifestFormContainer.fields) {
      Object.keys(manifestFormContainer === null || manifestFormContainer === void 0 ? void 0 : manifestFormContainer.fields).forEach(fieldId => {
        formElements[fieldId] = {
          key: fieldId,
          id: `CustomFormElement::${fieldId}`,
          type: manifestFormContainer.fields[fieldId].type || FormElementType.Default,
          template: manifestFormContainer.fields[fieldId].template,
          label: manifestFormContainer.fields[fieldId].label,
          position: manifestFormContainer.fields[fieldId].position || {
            placement: Placement.After
          },
          formatOptions: {
            ...getDefaultFormatOptionsForForm(),
            ...manifestFormContainer.fields[fieldId].formatOptions
          }
        };
      });
    }
    return formElements;
  }
  _exports.getFormElementsFromManifest = getFormElementsFromManifest;
  function getFormContainer(facetDefinition, converterContext, actions) {
    var _facetDefinition$anno5, _facetDefinition$anno6, _resolvedTarget$conve, _facetDefinition$anno7, _facetDefinition$anno8, _facetDefinition$anno9;
    const sFormContainerId = createIdForAnnotation(facetDefinition);
    const sAnnotationPath = converterContext.getEntitySetBasedAnnotationPath(facetDefinition.fullyQualifiedName);
    const resolvedTarget = converterContext.getEntityTypeAnnotation(facetDefinition.Target.value);
    const isVisible = compileExpression(not(equal(true, getExpressionFromAnnotation((_facetDefinition$anno5 = facetDefinition.annotations) === null || _facetDefinition$anno5 === void 0 ? void 0 : (_facetDefinition$anno6 = _facetDefinition$anno5.UI) === null || _facetDefinition$anno6 === void 0 ? void 0 : _facetDefinition$anno6.Hidden))));
    let sEntitySetPath;
    // resolvedTarget doesn't have a entitySet in case Containments and Paramterized services.
    const entitySet = resolvedTarget.converterContext.getEntitySet();
    if (entitySet && entitySet !== converterContext.getEntitySet()) {
      sEntitySetPath = getTargetEntitySetPath(resolvedTarget.converterContext.getDataModelObjectPath());
    } else if (((_resolvedTarget$conve = resolvedTarget.converterContext.getDataModelObjectPath().targetObject) === null || _resolvedTarget$conve === void 0 ? void 0 : _resolvedTarget$conve.containsTarget) === true) {
      sEntitySetPath = getTargetObjectPath(resolvedTarget.converterContext.getDataModelObjectPath(), false);
    } else if (entitySet && !sEntitySetPath && isSingleton(entitySet)) {
      sEntitySetPath = entitySet.fullyQualifiedName;
    }
    const aFormElements = insertCustomElements(getFormElementsFromAnnotations(facetDefinition, converterContext), getFormElementsFromManifest(facetDefinition, converterContext), {
      formatOptions: OverrideType.overwrite
    });
    actions = actions !== undefined ? actions.filter(action => action.facetName == facetDefinition.fullyQualifiedName) : [];
    if (actions.length === 0) {
      actions = undefined;
    }
    const oActionShowDetails = {
      id: getFormStandardActionButtonID(sFormContainerId, "ShowHideDetails"),
      key: "StandardAction::ShowHideDetails",
      text: compileExpression(ifElse(equal(pathInModel("showDetails", "internal"), true), pathInModel("T_COMMON_OBJECT_PAGE_HIDE_FORM_CONTAINER_DETAILS", "sap.fe.i18n"), pathInModel("T_COMMON_OBJECT_PAGE_SHOW_FORM_CONTAINER_DETAILS", "sap.fe.i18n"))),
      type: ActionType.ShowFormDetails,
      press: "FormContainerRuntime.toggleDetails"
    };
    if (((_facetDefinition$anno7 = facetDefinition.annotations) === null || _facetDefinition$anno7 === void 0 ? void 0 : (_facetDefinition$anno8 = _facetDefinition$anno7.UI) === null || _facetDefinition$anno8 === void 0 ? void 0 : (_facetDefinition$anno9 = _facetDefinition$anno8.PartOfPreview) === null || _facetDefinition$anno9 === void 0 ? void 0 : _facetDefinition$anno9.valueOf()) !== false && aFormElements.some(oFormElement => oFormElement.isPartOfPreview === false)) {
      if (actions !== undefined) {
        actions.push(oActionShowDetails);
      } else {
        actions = [oActionShowDetails];
      }
    }
    return {
      id: sFormContainerId,
      formElements: aFormElements,
      annotationPath: sAnnotationPath,
      isVisible: isVisible,
      entitySet: sEntitySetPath,
      actions: actions
    };
  }
  _exports.getFormContainer = getFormContainer;
  function getFormContainersForCollection(facetDefinition, converterContext, actions) {
    var _facetDefinition$Face;
    const formContainers = [];
    (_facetDefinition$Face = facetDefinition.Facets) === null || _facetDefinition$Face === void 0 ? void 0 : _facetDefinition$Face.forEach(facet => {
      // Ignore level 3 collection facet
      if (facet.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet") {
        return;
      }
      formContainers.push(getFormContainer(facet, converterContext, actions));
    });
    return formContainers;
  }
  function isReferenceFacet(facetDefinition) {
    return facetDefinition.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet";
  }
  _exports.isReferenceFacet = isReferenceFacet;
  function createFormDefinition(facetDefinition, isVisible, converterContext, actions) {
    var _facetDefinition$anno10, _facetDefinition$anno11, _facetDefinition$anno12;
    switch (facetDefinition.$Type) {
      case "com.sap.vocabularies.UI.v1.CollectionFacet":
        // Keep only valid children
        return {
          id: getFormID(facetDefinition),
          useFormContainerLabels: true,
          hasFacetsNotPartOfPreview: facetDefinition.Facets.some(childFacet => {
            var _childFacet$annotatio, _childFacet$annotatio2, _childFacet$annotatio3;
            return ((_childFacet$annotatio = childFacet.annotations) === null || _childFacet$annotatio === void 0 ? void 0 : (_childFacet$annotatio2 = _childFacet$annotatio.UI) === null || _childFacet$annotatio2 === void 0 ? void 0 : (_childFacet$annotatio3 = _childFacet$annotatio2.PartOfPreview) === null || _childFacet$annotatio3 === void 0 ? void 0 : _childFacet$annotatio3.valueOf()) === false;
          }),
          formContainers: getFormContainersForCollection(facetDefinition, converterContext, actions),
          isVisible: isVisible
        };
      case "com.sap.vocabularies.UI.v1.ReferenceFacet":
        return {
          id: getFormID(facetDefinition),
          useFormContainerLabels: false,
          hasFacetsNotPartOfPreview: ((_facetDefinition$anno10 = facetDefinition.annotations) === null || _facetDefinition$anno10 === void 0 ? void 0 : (_facetDefinition$anno11 = _facetDefinition$anno10.UI) === null || _facetDefinition$anno11 === void 0 ? void 0 : (_facetDefinition$anno12 = _facetDefinition$anno11.PartOfPreview) === null || _facetDefinition$anno12 === void 0 ? void 0 : _facetDefinition$anno12.valueOf()) === false,
          formContainers: [getFormContainer(facetDefinition, converterContext, actions)],
          isVisible: isVisible
        };
      default:
        throw new Error("Cannot create form based on ReferenceURLFacet");
    }
  }
  _exports.createFormDefinition = createFormDefinition;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Form", ["sap/fe/core/converters/annotations/DataField","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","../../../helpers/StableIdHelper","../../helpers/ConfigurableObject","../../helpers/DataFieldHelper","../../helpers/ID","../../helpers/Key","../../ManifestSettings"],function(e,t,a,n,o,i,r,l,s,v){"use strict";var c={};var d=v.ActionType;var u=s.KeyHelper;var f=l.getFormStandardActionButtonID;var p=l.getFormID;var m=r.isReferencePropertyStaticallyHidden;var y=i.Placement;var P=i.OverrideType;var h=i.insertCustomElements;var O=o.createIdForAnnotation;var g=n.getTargetObjectPath;var F=n.getTargetEntitySetPath;var b=a.isSingleton;var I=t.pathInModel;var E=t.not;var T=t.ifElse;var D=t.getExpressionFromAnnotation;var C=t.equal;var A=t.compileExpression;var S=e.getSemanticObjectPath;let w;(function(e){e["Default"]="Default";e["Slot"]="Slot";e["Annotation"]="Annotation"})(w||(w={}));c.FormElementType=w;function U(){return{textLinesEdit:4}}function N(e,t){var a,n,o,i;return(t===null||t===void 0?void 0:t.valueOf())===false||((a=e.annotations)===null||a===void 0?void 0:(n=a.UI)===null||n===void 0?void 0:n.PartOfPreview)===undefined||((o=e.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:i.PartOfPreview.valueOf())===true}function $(e,t){const a=[];const n=t.getEntityTypeAnnotation(e.Target.value);const o=n.annotation;t=n.converterContext;function i(e,n){var o,i,r;const l=S(t,e);if(e.$Type!=="com.sap.vocabularies.UI.v1.DataFieldForAction"&&e.$Type!=="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&!m(e)&&((o=e.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:(r=i.Hidden)===null||r===void 0?void 0:r.valueOf())!==true){const o={key:u.generateKeyFromDataField(e),type:w.Annotation,annotationPath:`${t.getEntitySetBasedAnnotationPath(e.fullyQualifiedName)}/`,semanticObjectPath:l,formatOptions:U(),isPartOfPreview:N(e,n)};if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&e.Target.$target.$Type==="com.sap.vocabularies.UI.v1.ConnectedFieldsType"){const a=Object.values(e.Target.$target.Data).filter(e=>e===null||e===void 0?void 0:e.hasOwnProperty("Value"));o.connectedFields=a.map(e=>({semanticObjectPath:S(t,e)}))}a.push(o)}}switch(o===null||o===void 0?void 0:o.term){case"com.sap.vocabularies.UI.v1.FieldGroup":o.Data.forEach(t=>{var a,n;return i(t,(a=e.annotations)===null||a===void 0?void 0:(n=a.UI)===null||n===void 0?void 0:n.PartOfPreview)});break;case"com.sap.vocabularies.UI.v1.Identification":o.forEach(t=>{var a,n;return i(t,(a=e.annotations)===null||a===void 0?void 0:(n=a.UI)===null||n===void 0?void 0:n.PartOfPreview)});break;case"com.sap.vocabularies.UI.v1.DataPoint":a.push({key:`DataPoint::${o.qualifier?o.qualifier:""}`,type:w.Annotation,annotationPath:`${t.getEntitySetBasedAnnotationPath(o.fullyQualifiedName)}/`});break;case"com.sap.vocabularies.Communication.v1.Contact":a.push({key:`Contact::${o.qualifier?o.qualifier:""}`,type:w.Annotation,annotationPath:`${t.getEntitySetBasedAnnotationPath(o.fullyQualifiedName)}/`});break;default:break}return a}function M(e,t){const a=t.getManifestWrapper();const n=a.getFormContainer(e.Target.value);const o={};if(n!==null&&n!==void 0&&n.fields){Object.keys(n===null||n===void 0?void 0:n.fields).forEach(e=>{o[e]={key:e,id:`CustomFormElement::${e}`,type:n.fields[e].type||w.Default,template:n.fields[e].template,label:n.fields[e].label,position:n.fields[e].position||{placement:y.After},formatOptions:{...U(),...n.fields[e].formatOptions}}})}return o}c.getFormElementsFromManifest=M;function _(e,t,a){var n,o,i,r,l,s;const v=O(e);const c=t.getEntitySetBasedAnnotationPath(e.fullyQualifiedName);const u=t.getEntityTypeAnnotation(e.Target.value);const p=A(E(C(true,D((n=e.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.Hidden))));let m;const y=u.converterContext.getEntitySet();if(y&&y!==t.getEntitySet()){m=F(u.converterContext.getDataModelObjectPath())}else if(((i=u.converterContext.getDataModelObjectPath().targetObject)===null||i===void 0?void 0:i.containsTarget)===true){m=g(u.converterContext.getDataModelObjectPath(),false)}else if(y&&!m&&b(y)){m=y.fullyQualifiedName}const S=h($(e,t),M(e,t),{formatOptions:P.overwrite});a=a!==undefined?a.filter(t=>t.facetName==e.fullyQualifiedName):[];if(a.length===0){a=undefined}const w={id:f(v,"ShowHideDetails"),key:"StandardAction::ShowHideDetails",text:A(T(C(I("showDetails","internal"),true),I("T_COMMON_OBJECT_PAGE_HIDE_FORM_CONTAINER_DETAILS","sap.fe.i18n"),I("T_COMMON_OBJECT_PAGE_SHOW_FORM_CONTAINER_DETAILS","sap.fe.i18n"))),type:d.ShowFormDetails,press:"FormContainerRuntime.toggleDetails"};if(((r=e.annotations)===null||r===void 0?void 0:(l=r.UI)===null||l===void 0?void 0:(s=l.PartOfPreview)===null||s===void 0?void 0:s.valueOf())!==false&&S.some(e=>e.isPartOfPreview===false)){if(a!==undefined){a.push(w)}else{a=[w]}}return{id:v,formElements:S,annotationPath:c,isVisible:p,entitySet:m,actions:a}}c.getFormContainer=_;function k(e,t,a){var n;const o=[];(n=e.Facets)===null||n===void 0?void 0:n.forEach(e=>{if(e.$Type==="com.sap.vocabularies.UI.v1.CollectionFacet"){return}o.push(_(e,t,a))});return o}function j(e){return e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"}c.isReferenceFacet=j;function H(e,t,a,n){var o,i,r;switch(e.$Type){case"com.sap.vocabularies.UI.v1.CollectionFacet":return{id:p(e),useFormContainerLabels:true,hasFacetsNotPartOfPreview:e.Facets.some(e=>{var t,a,n;return((t=e.annotations)===null||t===void 0?void 0:(a=t.UI)===null||a===void 0?void 0:(n=a.PartOfPreview)===null||n===void 0?void 0:n.valueOf())===false}),formContainers:k(e,a,n),isVisible:t};case"com.sap.vocabularies.UI.v1.ReferenceFacet":return{id:p(e),useFormContainerLabels:false,hasFacetsNotPartOfPreview:((o=e.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:(r=i.PartOfPreview)===null||r===void 0?void 0:r.valueOf())===false,formContainers:[_(e,a,n)],isVisible:t};default:throw new Error("Cannot create form based on ReferenceURLFacet")}}c.createFormDefinition=H;return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/KPI-dbg", ["sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/converters/helpers/SelectionVariantHelper", "sap/fe/core/formatters/TableFormatterTypes", "sap/fe/core/helpers/TypeGuards", "../../helpers/Aggregation", "../../helpers/ID", "./Criticality"], function (IssueManager, SelectionVariantHelper, TableFormatterTypes, TypeGuards, Aggregation, ID, Criticality) {
  "use strict";

  var _exports = {};
  var getMessageTypeFromCriticalityType = Criticality.getMessageTypeFromCriticalityType;
  var getKPIID = ID.getKPIID;
  var AggregationHelper = Aggregation.AggregationHelper;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isAnnotationOfType = TypeGuards.isAnnotationOfType;
  var MessageType = TableFormatterTypes.MessageType;
  var getFilterDefinitionsFromSelectionVariant = SelectionVariantHelper.getFilterDefinitionsFromSelectionVariant;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  const DeviationIndicatorFromTrendType = {
    "UI.TrendType/StrongUp": "Up",
    "UI.TrendType/Up": "Up",
    "UI.TrendType/StrongDown": "Down",
    "UI.TrendType/Down": "Down",
    "UI.TrendType/Sideways": "None"
  };
  const KPIChartTypeFromUI = {
    "UI.ChartType/ColumnStacked": "StackedColumn",
    "UI.ChartType/BarStacked": "StackedBar",
    "UI.ChartType/Donut": "Donut",
    "UI.ChartType/Line": "Line",
    "UI.ChartType/Bubble": "bubble",
    "UI.ChartType/Column": "column",
    "UI.ChartType/Bar": "bar",
    "UI.ChartType/VerticalBullet": "vertical_bullet",
    "UI.ChartType/Combination": "combination",
    "UI.ChartType/Scatter": "scatter"
  };
  function convertKPIChart(chartAnnotation, presentationVariantAnnotation) {
    var _presentationVariantA, _presentationVariantA2;
    if (chartAnnotation.Measures === undefined) {
      // We need at least 1 measure (but no dimension is allowed, e.g. for bubble chart)
      return undefined;
    }
    const charDimensions = chartAnnotation.Dimensions ? chartAnnotation.Dimensions.map(propertyPath => {
      var _chartAnnotation$Dime, _propertyPath$$target, _propertyPath$$target2, _dimAttribute$Role;
      const dimAttribute = (_chartAnnotation$Dime = chartAnnotation.DimensionAttributes) === null || _chartAnnotation$Dime === void 0 ? void 0 : _chartAnnotation$Dime.find(attribute => {
        var _attribute$Dimension;
        return ((_attribute$Dimension = attribute.Dimension) === null || _attribute$Dimension === void 0 ? void 0 : _attribute$Dimension.value) === propertyPath.value;
      });
      return {
        name: propertyPath.value,
        label: ((_propertyPath$$target = propertyPath.$target.annotations.Common) === null || _propertyPath$$target === void 0 ? void 0 : (_propertyPath$$target2 = _propertyPath$$target.Label) === null || _propertyPath$$target2 === void 0 ? void 0 : _propertyPath$$target2.toString()) || propertyPath.value,
        role: dimAttribute === null || dimAttribute === void 0 ? void 0 : (_dimAttribute$Role = dimAttribute.Role) === null || _dimAttribute$Role === void 0 ? void 0 : _dimAttribute$Role.replace("UI.ChartDimensionRoleType/", "")
      };
    }) : [];
    const chartMeasures = chartAnnotation.Measures.map(propertyPath => {
      var _chartAnnotation$Meas, _propertyPath$$target3, _propertyPath$$target4, _measureAttribute$Rol;
      const measureAttribute = (_chartAnnotation$Meas = chartAnnotation.MeasureAttributes) === null || _chartAnnotation$Meas === void 0 ? void 0 : _chartAnnotation$Meas.find(attribute => {
        var _attribute$Measure;
        return ((_attribute$Measure = attribute.Measure) === null || _attribute$Measure === void 0 ? void 0 : _attribute$Measure.value) === propertyPath.value;
      });
      return {
        name: propertyPath.value,
        label: ((_propertyPath$$target3 = propertyPath.$target.annotations.Common) === null || _propertyPath$$target3 === void 0 ? void 0 : (_propertyPath$$target4 = _propertyPath$$target3.Label) === null || _propertyPath$$target4 === void 0 ? void 0 : _propertyPath$$target4.toString()) || propertyPath.value,
        role: measureAttribute === null || measureAttribute === void 0 ? void 0 : (_measureAttribute$Rol = measureAttribute.Role) === null || _measureAttribute$Rol === void 0 ? void 0 : _measureAttribute$Rol.replace("UI.ChartMeasureRoleType/", "")
      };
    });
    return {
      chartType: KPIChartTypeFromUI[chartAnnotation.ChartType] || "Line",
      dimensions: charDimensions,
      measures: chartMeasures,
      sortOrder: presentationVariantAnnotation === null || presentationVariantAnnotation === void 0 ? void 0 : (_presentationVariantA = presentationVariantAnnotation.SortOrder) === null || _presentationVariantA === void 0 ? void 0 : _presentationVariantA.map(sortOrder => {
        var _sortOrder$Property;
        return {
          name: ((_sortOrder$Property = sortOrder.Property) === null || _sortOrder$Property === void 0 ? void 0 : _sortOrder$Property.value) || "",
          descending: !!sortOrder.Descending
        };
      }),
      maxItems: presentationVariantAnnotation === null || presentationVariantAnnotation === void 0 ? void 0 : (_presentationVariantA2 = presentationVariantAnnotation.MaxItems) === null || _presentationVariantA2 === void 0 ? void 0 : _presentationVariantA2.valueOf()
    };
  }
  function updateCurrency(datapointAnnotation, kpiDef) {
    var _targetValueProperty$, _targetValueProperty$3;
    const targetValueProperty = datapointAnnotation.Value.$target;
    if ((_targetValueProperty$ = targetValueProperty.annotations.Measures) !== null && _targetValueProperty$ !== void 0 && _targetValueProperty$.ISOCurrency) {
      var _targetValueProperty$2;
      const currency = (_targetValueProperty$2 = targetValueProperty.annotations.Measures) === null || _targetValueProperty$2 === void 0 ? void 0 : _targetValueProperty$2.ISOCurrency;
      if (isPathAnnotationExpression(currency)) {
        kpiDef.datapoint.unit = {
          value: currency.$target.name,
          isCurrency: true,
          isPath: true
        };
      } else {
        kpiDef.datapoint.unit = {
          value: currency.toString(),
          isCurrency: true,
          isPath: false
        };
      }
    } else if ((_targetValueProperty$3 = targetValueProperty.annotations.Measures) !== null && _targetValueProperty$3 !== void 0 && _targetValueProperty$3.Unit) {
      var _targetValueProperty$4;
      const unit = (_targetValueProperty$4 = targetValueProperty.annotations.Measures) === null || _targetValueProperty$4 === void 0 ? void 0 : _targetValueProperty$4.Unit;
      if (isPathAnnotationExpression(unit)) {
        kpiDef.datapoint.unit = {
          value: unit.$target.name,
          isCurrency: false,
          isPath: true
        };
      } else {
        kpiDef.datapoint.unit = {
          value: unit.toString(),
          isCurrency: false,
          isPath: false
        };
      }
    }
  }
  function updateCriticality(datapointAnnotation, aggregationHelper, kpiDef) {
    if (datapointAnnotation.Criticality) {
      if (typeof datapointAnnotation.Criticality === "object") {
        // Criticality is a path --> check if the corresponding property is aggregatable
        const criticalityProperty = datapointAnnotation.Criticality.$target;
        if (aggregationHelper.isPropertyAggregatable(criticalityProperty)) {
          kpiDef.datapoint.criticalityPath = datapointAnnotation.Criticality.path;
        } else {
          // The property isn't aggregatable --> we ignore it
          kpiDef.datapoint.criticalityValue = MessageType.None;
        }
      } else {
        // Criticality is an enum Value --> get the corresponding static value
        kpiDef.datapoint.criticalityValue = getMessageTypeFromCriticalityType(datapointAnnotation.Criticality);
      }
    } else if (datapointAnnotation.CriticalityCalculation) {
      kpiDef.datapoint.criticalityCalculationMode = datapointAnnotation.CriticalityCalculation.ImprovementDirection;
      kpiDef.datapoint.criticalityCalculationThresholds = [];
      switch (kpiDef.datapoint.criticalityCalculationMode) {
        case "UI.ImprovementDirectionType/Target":
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeLowValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeLowValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeLowValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeHighValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeHighValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeHighValue);
          break;
        case "UI.ImprovementDirectionType/Minimize":
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeHighValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeHighValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeHighValue);
          break;
        case "UI.ImprovementDirectionType/Maximize":
        default:
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.DeviationRangeLowValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.ToleranceRangeLowValue);
          kpiDef.datapoint.criticalityCalculationThresholds.push(datapointAnnotation.CriticalityCalculation.AcceptanceRangeLowValue);
      }
    } else {
      kpiDef.datapoint.criticalityValue = MessageType.None;
    }
  }
  function updateTrend(datapointAnnotation, aggregationHelper, kpiDef) {
    if (datapointAnnotation.Trend) {
      if (typeof datapointAnnotation.Trend === "object") {
        // Trend is a path --> check if the corresponding property is aggregatable
        const trendProperty = datapointAnnotation.Trend.$target;
        if (aggregationHelper.isPropertyAggregatable(trendProperty)) {
          kpiDef.datapoint.trendPath = datapointAnnotation.Trend.path;
        } else {
          // The property isn't aggregatable --> we ignore it
          kpiDef.datapoint.trendValue = "None";
        }
      } else {
        // Trend is an enum Value --> get the corresponding static value
        kpiDef.datapoint.trendValue = DeviationIndicatorFromTrendType[datapointAnnotation.Trend] || "None";
      }
    } else if (datapointAnnotation.TrendCalculation) {
      kpiDef.datapoint.trendCalculationIsRelative = datapointAnnotation.TrendCalculation.IsRelativeDifference ? true : false;
      if (datapointAnnotation.TrendCalculation.ReferenceValue.$target) {
        // Reference value is a path --> check if the corresponding property is aggregatable
        const referenceProperty = datapointAnnotation.TrendCalculation.ReferenceValue.$target;
        if (aggregationHelper.isPropertyAggregatable(referenceProperty)) {
          kpiDef.datapoint.trendCalculationReferencePath = datapointAnnotation.TrendCalculation.ReferenceValue.path;
        } else {
          // The property isn't aggregatable --> we ignore it and switch back to trend 'None'
          kpiDef.datapoint.trendValue = "None";
        }
      } else {
        // Reference value is a static value
        kpiDef.datapoint.trendCalculationReferenceValue = datapointAnnotation.TrendCalculation.ReferenceValue;
      }
      if (kpiDef.datapoint.trendCalculationReferencePath !== undefined || kpiDef.datapoint.trendCalculationReferenceValue !== undefined) {
        kpiDef.datapoint.trendCalculationTresholds = [datapointAnnotation.TrendCalculation.StrongDownDifference.valueOf(), datapointAnnotation.TrendCalculation.DownDifference.valueOf(), datapointAnnotation.TrendCalculation.UpDifference.valueOf(), datapointAnnotation.TrendCalculation.StrongUpDifference.valueOf()];
      }
    } else {
      kpiDef.datapoint.trendValue = "None";
    }
  }
  function updateTarget(datapointAnnotation, aggregationHelper, kpiDef) {
    if (datapointAnnotation.TargetValue) {
      if (datapointAnnotation.TargetValue.$target) {
        // Target value is a path --> check if the corresponding property is aggregatable (otherwise ignore)
        const targetProperty = datapointAnnotation.TargetValue.$target;
        if (aggregationHelper.isPropertyAggregatable(targetProperty)) {
          kpiDef.datapoint.targetPath = datapointAnnotation.TargetValue.path;
        }
      } else {
        // Target value is a static value
        kpiDef.datapoint.targetValue = datapointAnnotation.TargetValue;
      }
    }
  }
  function getNavigationInfoFromProperty(property) {
    const annotations = property.annotations["Common"] || {};
    // Look for the semanticObject annotation (if any)
    let semanticObjectAnnotation;
    Object.keys(annotations).forEach(annotationKey => {
      const annotation = annotations[annotationKey];
      if (annotation.term === "com.sap.vocabularies.Common.v1.SemanticObject") {
        if (!annotation.qualifier || !semanticObjectAnnotation) {
          // We always take the annotation without qualifier if there's one, otherwise we take the first one
          semanticObjectAnnotation = annotation;
        }
      }
    });
    if (semanticObjectAnnotation) {
      const result = {
        semanticObject: semanticObjectAnnotation.toString(),
        unavailableActions: []
      };

      // Look for the unavailable actions (if any)
      const annotationKey = Object.keys(annotations).find(key => {
        var _semanticObjectAnnota;
        return annotations[key].term === "com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions" && annotations[key].qualifier === ((_semanticObjectAnnota = semanticObjectAnnotation) === null || _semanticObjectAnnota === void 0 ? void 0 : _semanticObjectAnnota.qualifier);
      });
      if (annotationKey) {
        result.unavailableActions = annotations[annotationKey];
      }
      return result;
    } else {
      return undefined;
    }
  }
  function createKPIDefinition(kpiName, kpiConfig, converterContext) {
    var _datapointAnnotation$, _datapointAnnotation$2;
    const kpiConverterContext = converterContext.getConverterContextFor(`/${kpiConfig.entitySet}`);
    const aggregationHelper = new AggregationHelper(kpiConverterContext.getEntityType(), kpiConverterContext);
    if (!aggregationHelper.isAnalyticsSupported()) {
      // The entity doesn't support analytical queries
      converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.NO_ANALYTICS + kpiConfig.entitySet);
      return undefined;
    }
    let selectionVariantAnnotation;
    let datapointAnnotation;
    let presentationVariantAnnotation;
    let chartAnnotation;
    let navigationInfo;

    // Search for a KPI with the qualifier frmo the manifest
    const aKPIAnnotations = kpiConverterContext.getAnnotationsByTerm("UI", "com.sap.vocabularies.UI.v1.KPI");
    const targetKPI = aKPIAnnotations.find(kpi => {
      return kpi.qualifier === kpiConfig.qualifier;
    });
    if (targetKPI) {
      var _targetKPI$Detail, _presentationVariantA3, _presentationVariantA4, _presentationVariantA5, _targetKPI$Detail2;
      datapointAnnotation = targetKPI.DataPoint;
      selectionVariantAnnotation = targetKPI.SelectionVariant;
      presentationVariantAnnotation = (_targetKPI$Detail = targetKPI.Detail) === null || _targetKPI$Detail === void 0 ? void 0 : _targetKPI$Detail.DefaultPresentationVariant;
      chartAnnotation = (_presentationVariantA3 = presentationVariantAnnotation) === null || _presentationVariantA3 === void 0 ? void 0 : (_presentationVariantA4 = _presentationVariantA3.Visualizations) === null || _presentationVariantA4 === void 0 ? void 0 : (_presentationVariantA5 = _presentationVariantA4.find(viz => {
        return isAnnotationOfType(viz.$target, "com.sap.vocabularies.UI.v1.ChartDefinitionType");
      })) === null || _presentationVariantA5 === void 0 ? void 0 : _presentationVariantA5.$target;
      if ((_targetKPI$Detail2 = targetKPI.Detail) !== null && _targetKPI$Detail2 !== void 0 && _targetKPI$Detail2.SemanticObject) {
        var _targetKPI$Detail$Act;
        navigationInfo = {
          semanticObject: targetKPI.Detail.SemanticObject.toString(),
          action: (_targetKPI$Detail$Act = targetKPI.Detail.Action) === null || _targetKPI$Detail$Act === void 0 ? void 0 : _targetKPI$Detail$Act.toString(),
          unavailableActions: []
        };
      }
    } else {
      // Fallback: try to find a SPV with the same qualifier
      const aSPVAnnotations = kpiConverterContext.getAnnotationsByTerm("UI", "com.sap.vocabularies.UI.v1.SelectionPresentationVariant");
      const targetSPV = aSPVAnnotations.find(spv => {
        return spv.qualifier === kpiConfig.qualifier;
      });
      if (targetSPV) {
        var _presentationVariantA6, _presentationVariantA7, _presentationVariantA8, _presentationVariantA9, _presentationVariantA10, _presentationVariantA11;
        selectionVariantAnnotation = targetSPV.SelectionVariant;
        presentationVariantAnnotation = targetSPV.PresentationVariant;
        datapointAnnotation = (_presentationVariantA6 = presentationVariantAnnotation) === null || _presentationVariantA6 === void 0 ? void 0 : (_presentationVariantA7 = _presentationVariantA6.Visualizations) === null || _presentationVariantA7 === void 0 ? void 0 : (_presentationVariantA8 = _presentationVariantA7.find(viz => {
          return isAnnotationOfType(viz.$target, "com.sap.vocabularies.UI.v1.DataPointType");
        })) === null || _presentationVariantA8 === void 0 ? void 0 : _presentationVariantA8.$target;
        chartAnnotation = (_presentationVariantA9 = presentationVariantAnnotation) === null || _presentationVariantA9 === void 0 ? void 0 : (_presentationVariantA10 = _presentationVariantA9.Visualizations) === null || _presentationVariantA10 === void 0 ? void 0 : (_presentationVariantA11 = _presentationVariantA10.find(viz => {
          return isAnnotationOfType(viz.$target, "com.sap.vocabularies.UI.v1.ChartDefinitionType");
        })) === null || _presentationVariantA11 === void 0 ? void 0 : _presentationVariantA11.$target;
      } else {
        // Couldn't find a KPI or a SPV annotation with the qualifier from the manifest
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.KPI_NOT_FOUND + kpiConfig.qualifier);
        return undefined;
      }
    }
    if (!presentationVariantAnnotation || !datapointAnnotation || !chartAnnotation) {
      // Couldn't find a chart or datapoint definition
      converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.KPI_DETAIL_NOT_FOUND + kpiConfig.qualifier);
      return undefined;
    }
    const datapointProperty = datapointAnnotation.Value.$target;
    if (!aggregationHelper.isPropertyAggregatable(datapointProperty)) {
      // The main property of the KPI is not aggregatable --> We can't calculate its value so we ignore the KPI
      converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.KPI_ISSUES.MAIN_PROPERTY_NOT_AGGREGATABLE + kpiConfig.qualifier);
      return undefined;
    }

    // Chart definition
    const chartDef = convertKPIChart(chartAnnotation, presentationVariantAnnotation);
    if (!chartDef) {
      return undefined;
    }
    const kpiDef = {
      id: getKPIID(kpiName),
      entitySet: kpiConfig.entitySet,
      datapoint: {
        propertyPath: datapointAnnotation.Value.path,
        annotationPath: kpiConverterContext.getEntitySetBasedAnnotationPath(datapointAnnotation.fullyQualifiedName),
        title: (_datapointAnnotation$ = datapointAnnotation.Title) === null || _datapointAnnotation$ === void 0 ? void 0 : _datapointAnnotation$.toString(),
        description: (_datapointAnnotation$2 = datapointAnnotation.Description) === null || _datapointAnnotation$2 === void 0 ? void 0 : _datapointAnnotation$2.toString()
      },
      selectionVariantFilterDefinitions: selectionVariantAnnotation ? getFilterDefinitionsFromSelectionVariant(selectionVariantAnnotation) : undefined,
      chart: chartDef
    };

    // Navigation
    if (!navigationInfo) {
      // No navigationInfo was found in the KPI annotation --> try the outbound navigation from the manifest
      if (kpiConfig.detailNavigation) {
        navigationInfo = {
          outboundNavigation: kpiConfig.detailNavigation
        };
      } else {
        // No outbound navigation in the manifest --> try the semantic object on the Datapoint value
        navigationInfo = getNavigationInfoFromProperty(datapointProperty);
      }
    }
    if (navigationInfo) {
      kpiDef.navigation = navigationInfo;
    }
    updateCurrency(datapointAnnotation, kpiDef);
    updateCriticality(datapointAnnotation, aggregationHelper, kpiDef);
    updateTrend(datapointAnnotation, aggregationHelper, kpiDef);
    updateTarget(datapointAnnotation, aggregationHelper, kpiDef);
    return kpiDef;
  }

  /**
   * Creates the KPI definitions from the manifest and the annotations.
   *
   * @param converterContext The converter context for the page
   * @returns Returns an array of KPI definitions
   */
  function getKPIDefinitions(converterContext) {
    const kpiConfigs = converterContext.getManifestWrapper().getKPIConfiguration(),
      kpiDefs = [];
    Object.keys(kpiConfigs).forEach(kpiName => {
      const oDef = createKPIDefinition(kpiName, kpiConfigs[kpiName], converterContext);
      if (oDef) {
        kpiDefs.push(oDef);
      }
    });
    return kpiDefs;
  }
  _exports.getKPIDefinitions = getKPIDefinitions;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/KPI", ["sap/fe/core/converters/helpers/IssueManager","sap/fe/core/converters/helpers/SelectionVariantHelper","sap/fe/core/formatters/TableFormatterTypes","sap/fe/core/helpers/TypeGuards","../../helpers/Aggregation","../../helpers/ID","./Criticality"],function(e,t,a,i,n,o,l){"use strict";var r={};var u=l.getMessageTypeFromCriticalityType;var c=o.getKPIID;var s=n.AggregationHelper;var d=i.isPathAnnotationExpression;var v=i.isAnnotationOfType;var p=a.MessageType;var f=t.getFilterDefinitionsFromSelectionVariant;var g=e.IssueType;var y=e.IssueSeverity;var C=e.IssueCategory;const h={"UI.TrendType/StrongUp":"Up","UI.TrendType/Up":"Up","UI.TrendType/StrongDown":"Down","UI.TrendType/Down":"Down","UI.TrendType/Sideways":"None"};const T={"UI.ChartType/ColumnStacked":"StackedColumn","UI.ChartType/BarStacked":"StackedBar","UI.ChartType/Donut":"Donut","UI.ChartType/Line":"Line","UI.ChartType/Bubble":"bubble","UI.ChartType/Column":"column","UI.ChartType/Bar":"bar","UI.ChartType/VerticalBullet":"vertical_bullet","UI.ChartType/Combination":"combination","UI.ChartType/Scatter":"scatter"};function m(e,t){var a,i;if(e.Measures===undefined){return undefined}const n=e.Dimensions?e.Dimensions.map(t=>{var a,i,n,o;const l=(a=e.DimensionAttributes)===null||a===void 0?void 0:a.find(e=>{var a;return((a=e.Dimension)===null||a===void 0?void 0:a.value)===t.value});return{name:t.value,label:((i=t.$target.annotations.Common)===null||i===void 0?void 0:(n=i.Label)===null||n===void 0?void 0:n.toString())||t.value,role:l===null||l===void 0?void 0:(o=l.Role)===null||o===void 0?void 0:o.replace("UI.ChartDimensionRoleType/","")}}):[];const o=e.Measures.map(t=>{var a,i,n,o;const l=(a=e.MeasureAttributes)===null||a===void 0?void 0:a.find(e=>{var a;return((a=e.Measure)===null||a===void 0?void 0:a.value)===t.value});return{name:t.value,label:((i=t.$target.annotations.Common)===null||i===void 0?void 0:(n=i.Label)===null||n===void 0?void 0:n.toString())||t.value,role:l===null||l===void 0?void 0:(o=l.Role)===null||o===void 0?void 0:o.replace("UI.ChartMeasureRoleType/","")}});return{chartType:T[e.ChartType]||"Line",dimensions:n,measures:o,sortOrder:t===null||t===void 0?void 0:(a=t.SortOrder)===null||a===void 0?void 0:a.map(e=>{var t;return{name:((t=e.Property)===null||t===void 0?void 0:t.value)||"",descending:!!e.Descending}}),maxItems:t===null||t===void 0?void 0:(i=t.MaxItems)===null||i===void 0?void 0:i.valueOf()}}function I(e,t){var a,i;const n=e.Value.$target;if((a=n.annotations.Measures)!==null&&a!==void 0&&a.ISOCurrency){var o;const e=(o=n.annotations.Measures)===null||o===void 0?void 0:o.ISOCurrency;if(d(e)){t.datapoint.unit={value:e.$target.name,isCurrency:true,isPath:true}}else{t.datapoint.unit={value:e.toString(),isCurrency:true,isPath:false}}}else if((i=n.annotations.Measures)!==null&&i!==void 0&&i.Unit){var l;const e=(l=n.annotations.Measures)===null||l===void 0?void 0:l.Unit;if(d(e)){t.datapoint.unit={value:e.$target.name,isCurrency:false,isPath:true}}else{t.datapoint.unit={value:e.toString(),isCurrency:false,isPath:false}}}}function S(e,t,a){if(e.Criticality){if(typeof e.Criticality==="object"){const i=e.Criticality.$target;if(t.isPropertyAggregatable(i)){a.datapoint.criticalityPath=e.Criticality.path}else{a.datapoint.criticalityValue=p.None}}else{a.datapoint.criticalityValue=u(e.Criticality)}}else if(e.CriticalityCalculation){a.datapoint.criticalityCalculationMode=e.CriticalityCalculation.ImprovementDirection;a.datapoint.criticalityCalculationThresholds=[];switch(a.datapoint.criticalityCalculationMode){case"UI.ImprovementDirectionType/Target":a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.DeviationRangeLowValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.ToleranceRangeLowValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.AcceptanceRangeLowValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.AcceptanceRangeHighValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.ToleranceRangeHighValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.DeviationRangeHighValue);break;case"UI.ImprovementDirectionType/Minimize":a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.AcceptanceRangeHighValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.ToleranceRangeHighValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.DeviationRangeHighValue);break;case"UI.ImprovementDirectionType/Maximize":default:a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.DeviationRangeLowValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.ToleranceRangeLowValue);a.datapoint.criticalityCalculationThresholds.push(e.CriticalityCalculation.AcceptanceRangeLowValue)}}else{a.datapoint.criticalityValue=p.None}}function D(e,t,a){if(e.Trend){if(typeof e.Trend==="object"){const i=e.Trend.$target;if(t.isPropertyAggregatable(i)){a.datapoint.trendPath=e.Trend.path}else{a.datapoint.trendValue="None"}}else{a.datapoint.trendValue=h[e.Trend]||"None"}}else if(e.TrendCalculation){a.datapoint.trendCalculationIsRelative=e.TrendCalculation.IsRelativeDifference?true:false;if(e.TrendCalculation.ReferenceValue.$target){const i=e.TrendCalculation.ReferenceValue.$target;if(t.isPropertyAggregatable(i)){a.datapoint.trendCalculationReferencePath=e.TrendCalculation.ReferenceValue.path}else{a.datapoint.trendValue="None"}}else{a.datapoint.trendCalculationReferenceValue=e.TrendCalculation.ReferenceValue}if(a.datapoint.trendCalculationReferencePath!==undefined||a.datapoint.trendCalculationReferenceValue!==undefined){a.datapoint.trendCalculationTresholds=[e.TrendCalculation.StrongDownDifference.valueOf(),e.TrendCalculation.DownDifference.valueOf(),e.TrendCalculation.UpDifference.valueOf(),e.TrendCalculation.StrongUpDifference.valueOf()]}}else{a.datapoint.trendValue="None"}}function b(e,t,a){if(e.TargetValue){if(e.TargetValue.$target){const i=e.TargetValue.$target;if(t.isPropertyAggregatable(i)){a.datapoint.targetPath=e.TargetValue.path}}else{a.datapoint.targetValue=e.TargetValue}}}function V(e){const t=e.annotations["Common"]||{};let a;Object.keys(t).forEach(e=>{const i=t[e];if(i.term==="com.sap.vocabularies.Common.v1.SemanticObject"){if(!i.qualifier||!a){a=i}}});if(a){const e={semanticObject:a.toString(),unavailableActions:[]};const i=Object.keys(t).find(e=>{var i;return t[e].term==="com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"&&t[e].qualifier===((i=a)===null||i===void 0?void 0:i.qualifier)});if(i){e.unavailableActions=t[i]}return e}else{return undefined}}function U(e,t,a){var i,n;const o=a.getConverterContextFor(`/${t.entitySet}`);const l=new s(o.getEntityType(),o);if(!l.isAnalyticsSupported()){a.getDiagnostics().addIssue(C.Annotation,y.Medium,g.KPI_ISSUES.NO_ANALYTICS+t.entitySet);return undefined}let r;let u;let d;let p;let h;const T=o.getAnnotationsByTerm("UI","com.sap.vocabularies.UI.v1.KPI");const U=T.find(e=>e.qualifier===t.qualifier);if(U){var P,A,R,O,M;u=U.DataPoint;r=U.SelectionVariant;d=(P=U.Detail)===null||P===void 0?void 0:P.DefaultPresentationVariant;p=(A=d)===null||A===void 0?void 0:(R=A.Visualizations)===null||R===void 0?void 0:(O=R.find(e=>v(e.$target,"com.sap.vocabularies.UI.v1.ChartDefinitionType")))===null||O===void 0?void 0:O.$target;if((M=U.Detail)!==null&&M!==void 0&&M.SemanticObject){var N;h={semanticObject:U.Detail.SemanticObject.toString(),action:(N=U.Detail.Action)===null||N===void 0?void 0:N.toString(),unavailableActions:[]}}}else{const e=o.getAnnotationsByTerm("UI","com.sap.vocabularies.UI.v1.SelectionPresentationVariant");const i=e.find(e=>e.qualifier===t.qualifier);if(i){var $,w,L,_,E,j;r=i.SelectionVariant;d=i.PresentationVariant;u=($=d)===null||$===void 0?void 0:(w=$.Visualizations)===null||w===void 0?void 0:(L=w.find(e=>v(e.$target,"com.sap.vocabularies.UI.v1.DataPointType")))===null||L===void 0?void 0:L.$target;p=(_=d)===null||_===void 0?void 0:(E=_.Visualizations)===null||E===void 0?void 0:(j=E.find(e=>v(e.$target,"com.sap.vocabularies.UI.v1.ChartDefinitionType")))===null||j===void 0?void 0:j.$target}else{a.getDiagnostics().addIssue(C.Annotation,y.Medium,g.KPI_ISSUES.KPI_NOT_FOUND+t.qualifier);return undefined}}if(!d||!u||!p){a.getDiagnostics().addIssue(C.Annotation,y.Medium,g.KPI_ISSUES.KPI_DETAIL_NOT_FOUND+t.qualifier);return undefined}const q=u.Value.$target;if(!l.isPropertyAggregatable(q)){a.getDiagnostics().addIssue(C.Annotation,y.Medium,g.KPI_ISSUES.MAIN_PROPERTY_NOT_AGGREGATABLE+t.qualifier);return undefined}const K=m(p,d);if(!K){return undefined}const k={id:c(e),entitySet:t.entitySet,datapoint:{propertyPath:u.Value.path,annotationPath:o.getEntitySetBasedAnnotationPath(u.fullyQualifiedName),title:(i=u.Title)===null||i===void 0?void 0:i.toString(),description:(n=u.Description)===null||n===void 0?void 0:n.toString()},selectionVariantFilterDefinitions:r?f(r):undefined,chart:K};if(!h){if(t.detailNavigation){h={outboundNavigation:t.detailNavigation}}else{h=V(q)}}if(h){k.navigation=h}I(u,k);S(u,l,k);D(u,l,k);b(u,l,k);return k}function P(e){const t=e.getManifestWrapper().getKPIConfiguration(),a=[];Object.keys(t).forEach(i=>{const n=U(i,t[i],e);if(n){a.push(n)}});return a}r.getKPIDefinitions=P;return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Table-dbg", ["sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/converters/helpers/Key", "sap/fe/core/formatters/TableFormatter", "sap/fe/core/formatters/TableFormatterTypes", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/EntitySetHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/core/templating/UIFormatters", "sap/fe/macros/internal/helpers/ActionHelper", "sap/ui/core/Core", "../../helpers/Aggregation", "../../helpers/DataFieldHelper", "../../helpers/ID", "../../ManifestSettings", "./Criticality", "./table/StandardActions", "sap/base/Log"], function (DataField, Action, BindingHelper, ConfigurableObject, IssueManager, Key, tableFormatters, TableFormatterTypes, BindingToolkit, ModelHelper, StableIdHelper, TypeGuards, DataModelPathHelper, DisplayModeFormatter, EntitySetHelper, PropertyHelper, UIFormatters, ActionHelper, Core, Aggregation, DataFieldHelper, ID, ManifestSettings, Criticality, StandardActions, Log) {
  "use strict";

  var _exports = {};
  var isInDisplayMode = StandardActions.isInDisplayMode;
  var isDraftOrStickySupported = StandardActions.isDraftOrStickySupported;
  var getStandardActionPaste = StandardActions.getStandardActionPaste;
  var getStandardActionMassEdit = StandardActions.getStandardActionMassEdit;
  var getStandardActionInsights = StandardActions.getStandardActionInsights;
  var getStandardActionDelete = StandardActions.getStandardActionDelete;
  var getStandardActionCreate = StandardActions.getStandardActionCreate;
  var getRestrictions = StandardActions.getRestrictions;
  var getMassEditVisibility = StandardActions.getMassEditVisibility;
  var getInsertUpdateActionsTemplating = StandardActions.getInsertUpdateActionsTemplating;
  var getDeleteVisibility = StandardActions.getDeleteVisibility;
  var getCreationRow = StandardActions.getCreationRow;
  var generateStandardActionsContext = StandardActions.generateStandardActionsContext;
  var getMessageTypeFromCriticalityType = Criticality.getMessageTypeFromCriticalityType;
  var VisualizationType = ManifestSettings.VisualizationType;
  var VariantManagementType = ManifestSettings.VariantManagementType;
  var TemplateType = ManifestSettings.TemplateType;
  var SelectionMode = ManifestSettings.SelectionMode;
  var Importance = ManifestSettings.Importance;
  var HorizontalAlign = ManifestSettings.HorizontalAlign;
  var CreationMode = ManifestSettings.CreationMode;
  var ActionType = ManifestSettings.ActionType;
  var getTableID = ID.getTableID;
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var AggregationHelper = Aggregation.AggregationHelper;
  var isMultiValueField = UIFormatters.isMultiValueField;
  var isImageURL = PropertyHelper.isImageURL;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getAssociatedTimezoneProperty = PropertyHelper.getAssociatedTimezoneProperty;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var getNonSortablePropertiesRestrictions = EntitySetHelper.getNonSortablePropertiesRestrictions;
  var getDisplayMode = DisplayModeFormatter.getDisplayMode;
  var isPathUpdatable = DataModelPathHelper.isPathUpdatable;
  var isPathSearchable = DataModelPathHelper.isPathSearchable;
  var isPathDeletable = DataModelPathHelper.isPathDeletable;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isTypeDefinition = TypeGuards.isTypeDefinition;
  var isProperty = TypeGuards.isProperty;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isAnnotationOfType = TypeGuards.isAnnotationOfType;
  var replaceSpecialChars = StableIdHelper.replaceSpecialChars;
  var generate = StableIdHelper.generate;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var MessageType = TableFormatterTypes.MessageType;
  var KeyHelper = Key.KeyHelper;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategoryType = IssueManager.IssueCategoryType;
  var IssueCategory = IssueManager.IssueCategory;
  var Placement = ConfigurableObject.Placement;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var UI = BindingHelper.UI;
  var Entity = BindingHelper.Entity;
  var getEnabledForAnnotationAction = Action.getEnabledForAnnotationAction;
  var removeDuplicateActions = Action.removeDuplicateActions;
  var isActionNavigable = Action.isActionNavigable;
  var getCopyAction = Action.getCopyAction;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var dataFieldIsCopyAction = Action.dataFieldIsCopyAction;
  var isDataPointFromDataFieldDefault = DataField.isDataPointFromDataFieldDefault;
  var isDataFieldTypes = DataField.isDataFieldTypes;
  var isDataFieldForActionAbstract = DataField.isDataFieldForActionAbstract;
  var getTargetValueOnDataPoint = DataField.getTargetValueOnDataPoint;
  var getSemanticObjectPath = DataField.getSemanticObjectPath;
  var getDataFieldDataType = DataField.getDataFieldDataType;
  var collectRelatedPropertiesRecursively = DataField.collectRelatedPropertiesRecursively;
  var collectRelatedProperties = DataField.collectRelatedProperties;
  var ColumnType; // Custom Column from Manifest
  (function (ColumnType) {
    ColumnType["Default"] = "Default";
    ColumnType["Annotation"] = "Annotation";
    ColumnType["Slot"] = "Slot";
  })(ColumnType || (ColumnType = {}));
  /**
   * Returns an array of all annotation-based and manifest-based table actions.
   *
   * @param lineItemAnnotation
   * @param visualizationPath
   * @param converterContext
   * @param navigationSettings
   * @returns The complete table actions
   */
  function getTableActions(lineItemAnnotation, visualizationPath, converterContext, navigationSettings) {
    const aTableActions = getTableAnnotationActions(lineItemAnnotation, visualizationPath, converterContext);
    const aAnnotationActions = aTableActions.tableActions;
    const aHiddenActions = aTableActions.hiddenTableActions;
    const manifestActions = getActionsFromManifest(converterContext.getManifestControlConfiguration(visualizationPath).actions, converterContext, aAnnotationActions, navigationSettings, true, aHiddenActions);
    const actionOverwriteConfig = {
      isNavigable: OverrideType.overwrite,
      enableOnSelect: OverrideType.overwrite,
      enableAutoScroll: OverrideType.overwrite,
      enabled: OverrideType.overwrite,
      visible: OverrideType.overwrite,
      defaultValuesExtensionFunction: OverrideType.overwrite,
      command: OverrideType.overwrite
    };
    const actions = insertCustomElements(aAnnotationActions, manifestActions.actions, actionOverwriteConfig);
    return {
      actions,
      commandActions: manifestActions.commandActions
    };
  }

  /**
   * Returns an array of all columns, annotation-based as well as manifest based.
   * They are sorted and some properties can be overwritten via the manifest (check out the keys that can be overwritten).
   *
   * @param lineItemAnnotation Collection of data fields for representation in a table or list
   * @param visualizationPath
   * @param converterContext
   * @param navigationSettings
   * @param isInsightsEnabled
   * @returns Returns all table columns that should be available, regardless of templating or personalization or their origin
   */
  _exports.getTableActions = getTableActions;
  function getTableColumns(lineItemAnnotation, visualizationPath, converterContext, navigationSettings, isInsightsEnabled) {
    const annotationColumns = getColumnsFromAnnotations(lineItemAnnotation, visualizationPath, converterContext, isInsightsEnabled);
    const manifestColumns = getColumnsFromManifest(converterContext.getManifestControlConfiguration(visualizationPath).columns, annotationColumns, converterContext, converterContext.getAnnotationEntityType(lineItemAnnotation), navigationSettings);
    return insertCustomElements(annotationColumns, manifestColumns, {
      width: OverrideType.overwrite,
      importance: OverrideType.overwrite,
      horizontalAlign: OverrideType.overwrite,
      availability: OverrideType.overwrite,
      isNavigable: OverrideType.overwrite,
      settings: OverrideType.overwrite,
      formatOptions: OverrideType.overwrite
    });
  }

  /**
   * Retrieve the custom aggregation definitions from the entityType.
   *
   * @param entityType The target entity type.
   * @param tableColumns The array of columns for the entity type.
   * @param converterContext The converter context.
   * @returns The aggregate definitions from the entityType, or undefined if the entity doesn't support analytical queries.
   */
  _exports.getTableColumns = getTableColumns;
  const getAggregateDefinitionsFromEntityType = function (entityType, tableColumns, converterContext) {
    const aggregationHelper = new AggregationHelper(entityType, converterContext);
    function findColumnFromPath(path) {
      return tableColumns.find(column => {
        const annotationColumn = column;
        return annotationColumn.propertyInfos === undefined && annotationColumn.relativePath === path;
      });
    }
    if (!aggregationHelper.isAnalyticsSupported()) {
      return undefined;
    }

    // Keep a set of all currency/unit properties, as we don't want to consider them as aggregates
    // They are aggregates for technical reasons (to manage multi-units situations) but it doesn't make sense from a user standpoint
    const currencyOrUnitProperties = new Set();
    tableColumns.forEach(column => {
      const tableColumn = column;
      if (tableColumn.unit) {
        currencyOrUnitProperties.add(tableColumn.unit);
      }
    });
    const customAggregateAnnotations = aggregationHelper.getCustomAggregateDefinitions();
    const definitions = {};
    customAggregateAnnotations.forEach(annotation => {
      const aggregatedProperty = aggregationHelper._entityType.entityProperties.find(property => {
        return property.name === annotation.qualifier;
      });
      if (aggregatedProperty) {
        var _annotation$annotatio, _annotation$annotatio2;
        const contextDefiningProperties = (_annotation$annotatio = annotation.annotations) === null || _annotation$annotatio === void 0 ? void 0 : (_annotation$annotatio2 = _annotation$annotatio.Aggregation) === null || _annotation$annotatio2 === void 0 ? void 0 : _annotation$annotatio2.ContextDefiningProperties;
        definitions[aggregatedProperty.name] = contextDefiningProperties ? contextDefiningProperties.map(ctxDefProperty => {
          return ctxDefProperty.value;
        }) : [];
      }
    });
    const result = {};
    tableColumns.forEach(column => {
      const tableColumn = column;
      if (tableColumn.propertyInfos === undefined && tableColumn.relativePath) {
        const rawContextDefiningProperties = definitions[tableColumn.relativePath];

        // Ignore aggregates corresponding to currencies or units of measure
        if (rawContextDefiningProperties && !currencyOrUnitProperties.has(tableColumn.name)) {
          result[tableColumn.name] = {
            defaultAggregate: {},
            relativePath: tableColumn.relativePath
          };
          const contextDefiningProperties = [];
          rawContextDefiningProperties.forEach(contextDefiningPropertyName => {
            const foundColumn = findColumnFromPath(contextDefiningPropertyName);
            if (foundColumn) {
              contextDefiningProperties.push(foundColumn.name);
            }
          });
          if (contextDefiningProperties.length) {
            result[tableColumn.name].defaultAggregate.contextDefiningProperties = contextDefiningProperties;
          }
        }
      }
    });
    return result;
  };

  /**
   * Updates a table visualization for analytical use cases.
   *
   * @param tableVisualization The visualization to be updated
   * @param entityType The entity type displayed in the table
   * @param converterContext The converter context
   * @param presentationVariantAnnotation The presentationVariant annotation (if any)
   */
  _exports.getAggregateDefinitionsFromEntityType = getAggregateDefinitionsFromEntityType;
  function updateTableVisualizationForType(tableVisualization, entityType, converterContext, presentationVariantAnnotation) {
    if (tableVisualization.control.type === "AnalyticalTable") {
      const aggregatesDefinitions = getAggregateDefinitionsFromEntityType(entityType, tableVisualization.columns, converterContext),
        aggregationHelper = new AggregationHelper(entityType, converterContext);
      if (aggregatesDefinitions) {
        tableVisualization.enableAnalytics = true;
        tableVisualization.enable$select = false;
        tableVisualization.enable$$getKeepAliveContext = false;
        tableVisualization.aggregates = aggregatesDefinitions;
        _updatePropertyInfosWithAggregatesDefinitions(tableVisualization);
        const allowedTransformations = aggregationHelper.getAllowedTransformations();
        tableVisualization.enableBasicSearch = allowedTransformations ? allowedTransformations.indexOf("search") >= 0 : true;

        // Add group and sort conditions from the presentation variant
        tableVisualization.annotation.groupConditions = getGroupConditions(presentationVariantAnnotation, tableVisualization.columns, tableVisualization.control.type);
        tableVisualization.annotation.aggregateConditions = getAggregateConditions(presentationVariantAnnotation, tableVisualization.columns);
      }
      tableVisualization.control.type = "GridTable"; // AnalyticalTable isn't a real type for the MDC:Table, so we always switch back to Grid
    } else if (tableVisualization.control.type === "ResponsiveTable") {
      tableVisualization.annotation.groupConditions = getGroupConditions(presentationVariantAnnotation, tableVisualization.columns, tableVisualization.control.type);
    } else if (tableVisualization.control.type === "TreeTable") {
      const aggregationHelper = new AggregationHelper(entityType, converterContext);
      const allowedTransformations = aggregationHelper.getAllowedTransformations();
      tableVisualization.enableBasicSearch = allowedTransformations ? allowedTransformations.includes("search") : true;
      tableVisualization.enable$$getKeepAliveContext = true;
    }
  }

  /**
   * Get the navigation target path from manifest settings.
   *
   * @param converterContext The converter context
   * @param navigationPropertyPath The navigation path to check in the manifest settings
   * @returns Navigation path from manifest settings
   */
  _exports.updateTableVisualizationForType = updateTableVisualizationForType;
  function getNavigationTargetPath(converterContext, navigationPropertyPath) {
    const manifestWrapper = converterContext.getManifestWrapper();
    if (navigationPropertyPath && manifestWrapper.getNavigationConfiguration(navigationPropertyPath)) {
      const navConfig = manifestWrapper.getNavigationConfiguration(navigationPropertyPath);
      if (Object.keys(navConfig).length > 0) {
        return navigationPropertyPath;
      }
    }
    const dataModelPath = converterContext.getDataModelObjectPath();
    const contextPath = converterContext.getContextPath();
    const navConfigForContextPath = manifestWrapper.getNavigationConfiguration(contextPath);
    if (navConfigForContextPath && Object.keys(navConfigForContextPath).length > 0) {
      return contextPath;
    }
    return dataModelPath.targetEntitySet ? dataModelPath.targetEntitySet.name : dataModelPath.startingEntitySet.name;
  }

  /**
   * Sets the 'unit' and 'textArrangement' properties in columns when necessary.
   *
   * @param entityType The entity type displayed in the table
   * @param tableColumns The columns to be updated
   */
  function updateLinkedProperties(entityType, tableColumns) {
    function findColumnByPath(path) {
      return tableColumns.find(column => {
        const annotationColumn = column;
        return annotationColumn.propertyInfos === undefined && annotationColumn.relativePath === path;
      });
    }
    tableColumns.forEach(oColumn => {
      const oTableColumn = oColumn;
      if (oTableColumn.propertyInfos === undefined && oTableColumn.relativePath) {
        const oProperty = entityType.entityProperties.find(oProp => oProp.name === oTableColumn.relativePath);
        if (oProperty) {
          var _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation7;
          const oUnit = getAssociatedCurrencyProperty(oProperty) || getAssociatedUnitProperty(oProperty);
          const oTimezone = getAssociatedTimezoneProperty(oProperty);
          const sTimezone = oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Common) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Timezone;
          if (oUnit) {
            const oUnitColumn = findColumnByPath(oUnit.name);
            oTableColumn.unit = oUnitColumn === null || oUnitColumn === void 0 ? void 0 : oUnitColumn.name;
          } else {
            var _oProperty$annotation3, _oProperty$annotation4, _oProperty$annotation5, _oProperty$annotation6;
            const sUnit = (oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation3 = oProperty.annotations) === null || _oProperty$annotation3 === void 0 ? void 0 : (_oProperty$annotation4 = _oProperty$annotation3.Measures) === null || _oProperty$annotation4 === void 0 ? void 0 : _oProperty$annotation4.ISOCurrency) || (oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation5 = oProperty.annotations) === null || _oProperty$annotation5 === void 0 ? void 0 : (_oProperty$annotation6 = _oProperty$annotation5.Measures) === null || _oProperty$annotation6 === void 0 ? void 0 : _oProperty$annotation6.Unit);
            if (sUnit) {
              oTableColumn.unitText = `${sUnit}`;
            }
          }
          if (oTimezone) {
            const oTimezoneColumn = findColumnByPath(oTimezone.name);
            oTableColumn.timezone = oTimezoneColumn === null || oTimezoneColumn === void 0 ? void 0 : oTimezoneColumn.name;
          } else if (sTimezone) {
            oTableColumn.timezoneText = sTimezone.toString();
          }
          const displayMode = getDisplayMode(oProperty),
            textAnnotation = (_oProperty$annotation7 = oProperty.annotations.Common) === null || _oProperty$annotation7 === void 0 ? void 0 : _oProperty$annotation7.Text;
          if (isPathAnnotationExpression(textAnnotation) && displayMode !== "Value") {
            const oTextColumn = findColumnByPath(textAnnotation.path);
            if (oTextColumn && oTextColumn.name !== oTableColumn.name) {
              oTableColumn.textArrangement = {
                textProperty: oTextColumn.name,
                mode: displayMode
              };
            }
          }
        }
      }
    });
  }
  _exports.updateLinkedProperties = updateLinkedProperties;
  function getSemanticKeysAndTitleInfo(converterContext) {
    var _converterContext$get, _converterContext$get2, _converterContext$get3, _converterContext$get4, _converterContext$get5, _converterContext$get6, _converterContext$get7, _converterContext$get8, _converterContext$get9, _converterContext$get10, _converterContext$get11, _converterContext$get12, _converterContext$get13;
    const headerInfoTitlePath = (_converterContext$get = converterContext.getAnnotationEntityType()) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.annotations) === null || _converterContext$get2 === void 0 ? void 0 : (_converterContext$get3 = _converterContext$get2.UI) === null || _converterContext$get3 === void 0 ? void 0 : (_converterContext$get4 = _converterContext$get3.HeaderInfo) === null || _converterContext$get4 === void 0 ? void 0 : (_converterContext$get5 = _converterContext$get4.Title) === null || _converterContext$get5 === void 0 ? void 0 : (_converterContext$get6 = _converterContext$get5.Value) === null || _converterContext$get6 === void 0 ? void 0 : _converterContext$get6.path;
    const semanticKeyAnnotations = (_converterContext$get7 = converterContext.getAnnotationEntityType()) === null || _converterContext$get7 === void 0 ? void 0 : (_converterContext$get8 = _converterContext$get7.annotations) === null || _converterContext$get8 === void 0 ? void 0 : (_converterContext$get9 = _converterContext$get8.Common) === null || _converterContext$get9 === void 0 ? void 0 : _converterContext$get9.SemanticKey;
    const headerInfoTypeName = converterContext === null || converterContext === void 0 ? void 0 : (_converterContext$get10 = converterContext.getAnnotationEntityType()) === null || _converterContext$get10 === void 0 ? void 0 : (_converterContext$get11 = _converterContext$get10.annotations) === null || _converterContext$get11 === void 0 ? void 0 : (_converterContext$get12 = _converterContext$get11.UI) === null || _converterContext$get12 === void 0 ? void 0 : (_converterContext$get13 = _converterContext$get12.HeaderInfo) === null || _converterContext$get13 === void 0 ? void 0 : _converterContext$get13.TypeName;
    const semanticKeyColumns = [];
    if (semanticKeyAnnotations) {
      semanticKeyAnnotations.forEach(function (oColumn) {
        semanticKeyColumns.push(oColumn.value);
      });
    }
    return {
      headerInfoTitlePath,
      semanticKeyColumns,
      headerInfoTypeName
    };
  }
  function createTableVisualization(lineItemAnnotation, visualizationPath, converterContext, presentationVariantAnnotation, isCondensedTableLayoutCompliant, viewConfiguration, isInsightsEnabled) {
    const tableManifestConfig = getTableManifestConfiguration(lineItemAnnotation, visualizationPath, converterContext, isCondensedTableLayoutCompliant);
    const {
      navigationPropertyPath
    } = splitPath(visualizationPath);
    const navigationTargetPath = getNavigationTargetPath(converterContext, navigationPropertyPath);
    const navigationSettings = converterContext.getManifestWrapper().getNavigationConfiguration(navigationTargetPath);
    const columns = getTableColumns(lineItemAnnotation, visualizationPath, converterContext, navigationSettings, isInsightsEnabled);
    const operationAvailableMap = getOperationAvailableMap(lineItemAnnotation, converterContext);
    const semanticKeysAndHeaderInfoTitle = getSemanticKeysAndTitleInfo(converterContext);
    const tableActions = getTableActions(lineItemAnnotation, visualizationPath, converterContext, navigationSettings);
    const oVisualization = {
      type: VisualizationType.Table,
      annotation: getTableAnnotationConfiguration(lineItemAnnotation, visualizationPath, converterContext, tableManifestConfig, columns, presentationVariantAnnotation, viewConfiguration, isInsightsEnabled),
      control: tableManifestConfig,
      actions: removeDuplicateActions(tableActions.actions),
      commandActions: tableActions.commandActions,
      columns: columns,
      operationAvailableMap: JSON.stringify(operationAvailableMap),
      operationAvailableProperties: getOperationAvailableProperties(operationAvailableMap, converterContext),
      headerInfoTitle: semanticKeysAndHeaderInfoTitle.headerInfoTitlePath,
      semanticKeys: semanticKeysAndHeaderInfoTitle.semanticKeyColumns,
      headerInfoTypeName: semanticKeysAndHeaderInfoTitle.headerInfoTypeName,
      enable$select: true,
      enable$$getKeepAliveContext: true
    };
    updateLinkedProperties(converterContext.getAnnotationEntityType(lineItemAnnotation), columns);
    updateTableVisualizationForType(oVisualization, converterContext.getAnnotationEntityType(lineItemAnnotation), converterContext, presentationVariantAnnotation);
    return oVisualization;
  }
  _exports.createTableVisualization = createTableVisualization;
  function createDefaultTableVisualization(converterContext, isBlankTable) {
    const tableManifestConfig = getTableManifestConfiguration(undefined, "", converterContext, false);
    const columns = getColumnsFromEntityType({}, converterContext.getEntityType(), [], [], converterContext, tableManifestConfig.type, []);
    const operationAvailableMap = getOperationAvailableMap(undefined, converterContext);
    const semanticKeysAndHeaderInfoTitle = getSemanticKeysAndTitleInfo(converterContext);
    const oVisualization = {
      type: VisualizationType.Table,
      annotation: getTableAnnotationConfiguration(undefined, "", converterContext, tableManifestConfig, isBlankTable ? [] : columns),
      control: tableManifestConfig,
      actions: [],
      columns: columns,
      operationAvailableMap: JSON.stringify(operationAvailableMap),
      operationAvailableProperties: getOperationAvailableProperties(operationAvailableMap, converterContext),
      headerInfoTitle: semanticKeysAndHeaderInfoTitle.headerInfoTitlePath,
      semanticKeys: semanticKeysAndHeaderInfoTitle.semanticKeyColumns,
      headerInfoTypeName: semanticKeysAndHeaderInfoTitle.headerInfoTypeName,
      enable$select: true,
      enable$$getKeepAliveContext: true
    };
    updateLinkedProperties(converterContext.getEntityType(), columns);
    updateTableVisualizationForType(oVisualization, converterContext.getEntityType(), converterContext);
    return oVisualization;
  }

  /**
   * Gets the map of Core.OperationAvailable property paths for all DataFieldForActions.
   *
   * @param lineItemAnnotation The instance of the line item
   * @param converterContext The instance of the converter context
   * @returns The record containing all action names and their corresponding Core.OperationAvailable property paths
   */
  _exports.createDefaultTableVisualization = createDefaultTableVisualization;
  function getOperationAvailableMap(lineItemAnnotation, converterContext) {
    return ActionHelper.getOperationAvailableMap(lineItemAnnotation, "table", converterContext);
  }

  /**
   * Gets updatable propertyPath for the current entityset if valid.
   *
   * @param converterContext The instance of the converter context
   * @returns The updatable property for the rows
   */
  function getCurrentEntitySetUpdatablePath(converterContext) {
    var _entitySet$annotation, _entitySet$annotation2;
    const restrictions = getRestrictions(converterContext);
    const entitySet = converterContext.getEntitySet();
    const updatable = restrictions.isUpdatable;
    const isOnlyDynamicOnCurrentEntity = !isConstant(updatable.expression) && updatable.navigationExpression._type === "Unresolvable";
    const updatableExpression = entitySet === null || entitySet === void 0 ? void 0 : (_entitySet$annotation = entitySet.annotations.Capabilities) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.UpdateRestrictions) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.Updatable;
    const updatablePropertyPath = isPathAnnotationExpression(updatableExpression) && updatableExpression.path;
    return isOnlyDynamicOnCurrentEntity ? updatablePropertyPath : "";
  }

  /**
   * Method to retrieve all property paths assigned to the Core.OperationAvailable annotation.
   *
   * @param operationAvailableMap The record consisting of actions and their Core.OperationAvailable property paths
   * @param converterContext The instance of the converter context
   * @returns The CSV string of all property paths associated with the Core.OperationAvailable annotation
   */
  function getOperationAvailableProperties(operationAvailableMap, converterContext) {
    const properties = new Set();
    for (const actionName in operationAvailableMap) {
      const propertyName = operationAvailableMap[actionName];
      if (propertyName === null) {
        // Annotation configured with explicit 'null' (action advertisement relevant)
        properties.add(actionName);
      } else if (typeof propertyName === "string") {
        // Add property paths and not Constant values.
        properties.add(propertyName);
      }
    }
    if (properties.size) {
      var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3, _entityType$annotatio4, _entityType$annotatio5;
      // Some actions have an operation available based on property --> we need to load the HeaderInfo.Title property
      // so that the dialog on partial actions is displayed properly (BCP 2180271425)
      const entityType = converterContext.getEntityType();
      const titleProperty = (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.HeaderInfo) === null || _entityType$annotatio3 === void 0 ? void 0 : (_entityType$annotatio4 = _entityType$annotatio3.Title) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.Value) === null || _entityType$annotatio5 === void 0 ? void 0 : _entityType$annotatio5.path;
      if (titleProperty) {
        properties.add(titleProperty);
      }
    }
    return Array.from(properties).join(",");
  }

  /**
   * Iterates over the DataFieldForAction and DataFieldForIntentBasedNavigation of a line item and
   * returns all the UI.Hidden annotation expressions.
   *
   * @param lineItemAnnotation Collection of data fields used for representation in a table or list
   * @param currentEntityType Current entity type
   * @param contextDataModelObjectPath Object path of the data model
   * @param isEntitySet
   * @returns All the `UI.Hidden` path expressions found in the relevant actions
   */
  function getUIHiddenExpForActionsRequiringContext(lineItemAnnotation, currentEntityType, contextDataModelObjectPath, isEntitySet) {
    const aUiHiddenPathExpressions = [];
    lineItemAnnotation.forEach(dataField => {
      var _dataField$ActionTarg, _dataField$Inline;
      // Check if the lineItem context is the same as that of the action:
      if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && dataField !== null && dataField !== void 0 && (_dataField$ActionTarg = dataField.ActionTarget) !== null && _dataField$ActionTarg !== void 0 && _dataField$ActionTarg.isBound && currentEntityType === (dataField === null || dataField === void 0 ? void 0 : dataField.ActionTarget.sourceEntityType) || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && dataField.RequiresContext && (dataField === null || dataField === void 0 ? void 0 : (_dataField$Inline = dataField.Inline) === null || _dataField$Inline === void 0 ? void 0 : _dataField$Inline.valueOf()) !== true) {
        var _dataField$annotation, _dataField$annotation2, _dataField$annotation3;
        if (typeof ((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : (_dataField$annotation3 = _dataField$annotation2.Hidden) === null || _dataField$annotation3 === void 0 ? void 0 : _dataField$annotation3.valueOf()) === "object") {
          aUiHiddenPathExpressions.push(equal(getBindingExpFromContext(dataField, contextDataModelObjectPath, isEntitySet), false));
        }
      }
    });
    return aUiHiddenPathExpressions;
  }

  /**
   * This method is used to change the context currently referenced by this binding by removing the last navigation property.
   *
   * It is used (specifically in this case), to transform a binding made for a NavProp context /MainObject/NavProp1/NavProp2,
   * into a binding on the previous context /MainObject/NavProp1.
   *
   * @param source DataFieldForAction | DataFieldForIntentBasedNavigation | CustomAction
   * @param contextDataModelObjectPath DataModelObjectPath
   * @param isEntitySet
   * @returns The binding expression
   */
  function getBindingExpFromContext(source, contextDataModelObjectPath, isEntitySet) {
    let sExpression;
    if ((source === null || source === void 0 ? void 0 : source.$Type) === "com.sap.vocabularies.UI.v1.DataFieldForAction" || (source === null || source === void 0 ? void 0 : source.$Type) === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
      var _annotations, _annotations$UI;
      sExpression = source === null || source === void 0 ? void 0 : (_annotations = source.annotations) === null || _annotations === void 0 ? void 0 : (_annotations$UI = _annotations.UI) === null || _annotations$UI === void 0 ? void 0 : _annotations$UI.Hidden;
    } else {
      sExpression = source === null || source === void 0 ? void 0 : source.visible;
    }
    let sPath;
    if (isPathAnnotationExpression(sExpression)) {
      sPath = sExpression.path;
    } else {
      sPath = sExpression;
    }
    if (sPath) {
      if (source !== null && source !== void 0 && source.visible) {
        sPath = sPath.substring(1, sPath.length - 1);
      }
      if (sPath.indexOf("/") > 0) {
        //check if the navigation property is correct:
        const aSplitPath = sPath.split("/");
        const sNavigationPath = aSplitPath[0];
        if (isNavigationProperty(contextDataModelObjectPath === null || contextDataModelObjectPath === void 0 ? void 0 : contextDataModelObjectPath.targetObject) && contextDataModelObjectPath.targetObject.partner === sNavigationPath) {
          return pathInModel(aSplitPath.slice(1).join("/"));
        } else {
          return constant(true);
        }
        // In case there is no navigation property, if it's an entitySet, the expression binding has to be returned:
      } else if (isEntitySet) {
        return pathInModel(sPath);
        // otherwise the expression binding cannot be taken into account for the selection mode evaluation:
      } else {
        return constant(true);
      }
    }
    return constant(true);
  }

  /**
   * Loop through the manifest actions and check the following:
   *
   * If the data field is also referenced as a custom action.
   * If the underlying manifest action is either a bound action or has the 'RequiresContext' property set to true.
   *
   * If so, the 'requiresSelection' property is forced to 'true' in the manifest.
   *
   * @param dataFieldId Id of the DataField evaluated
   * @param dataField DataField evaluated
   * @param manifestActions The actions defined in the manifest
   * @returns `true` if the DataField is found among the manifest actions
   */
  function updateManifestActionAndTagIt(dataFieldId, dataField, manifestActions) {
    return Object.keys(manifestActions).some(actionKey => {
      if (actionKey === dataFieldId) {
        var _ActionTarget;
        if (dataField !== null && dataField !== void 0 && (_ActionTarget = dataField.ActionTarget) !== null && _ActionTarget !== void 0 && _ActionTarget.isBound || dataField !== null && dataField !== void 0 && dataField.RequiresContext) {
          manifestActions[dataFieldId].requiresSelection = true;
        }
        return true;
      }
      return false;
    });
  }

  /**
   * Loop through the DataFieldForAction and DataFieldForIntentBasedNavigation of a line item and
   * check the following:
   * If at least one of them is always visible in the table toolbar and requires a context
   * If an action is also defined in the manifest, it is set aside and will be considered
   * when going through the manifest.
   *
   * @param lineItemAnnotation Collection of data fields for representation in a table or list
   * @param manifestActions The actions defined in the manifest
   * @param currentEntityType Current Entity Type
   * @returns `true` if there is at least 1 action that meets the criteria
   */
  function hasBoundActionsAlwaysVisibleInToolBar(lineItemAnnotation, manifestActions, currentEntityType) {
    return lineItemAnnotation.some(dataField => {
      var _dataField$Inline2, _dataField$annotation4, _dataField$annotation5, _dataField$annotation6, _dataField$annotation7, _dataField$annotation8, _dataField$annotation9;
      if ((dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") && (dataField === null || dataField === void 0 ? void 0 : (_dataField$Inline2 = dataField.Inline) === null || _dataField$Inline2 === void 0 ? void 0 : _dataField$Inline2.valueOf()) !== true && (((_dataField$annotation4 = dataField.annotations) === null || _dataField$annotation4 === void 0 ? void 0 : (_dataField$annotation5 = _dataField$annotation4.UI) === null || _dataField$annotation5 === void 0 ? void 0 : (_dataField$annotation6 = _dataField$annotation5.Hidden) === null || _dataField$annotation6 === void 0 ? void 0 : _dataField$annotation6.valueOf()) === false || ((_dataField$annotation7 = dataField.annotations) === null || _dataField$annotation7 === void 0 ? void 0 : (_dataField$annotation8 = _dataField$annotation7.UI) === null || _dataField$annotation8 === void 0 ? void 0 : (_dataField$annotation9 = _dataField$annotation8.Hidden) === null || _dataField$annotation9 === void 0 ? void 0 : _dataField$annotation9.valueOf()) === undefined)) {
        if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
          var _dataField$ActionTarg2;
          const manifestActionId = generate(["DataFieldForAction", dataField.Action]);
          // if the DataFieldForActon from annotation also exists in the manifest, its visibility will be evaluated later on
          if (updateManifestActionAndTagIt(manifestActionId, dataField, manifestActions)) {
            return false;
          }
          // Check if the lineItem context is the same as that of the action:
          return (dataField === null || dataField === void 0 ? void 0 : (_dataField$ActionTarg2 = dataField.ActionTarget) === null || _dataField$ActionTarg2 === void 0 ? void 0 : _dataField$ActionTarg2.isBound) && currentEntityType === (dataField === null || dataField === void 0 ? void 0 : dataField.ActionTarget.sourceEntityType);
        } else if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
          // if the DataFieldForIntentBasedNavigation from annotation also exists in the manifest, its visibility will be evaluated later on
          if (updateManifestActionAndTagIt(`DataFieldForIntentBasedNavigation::${dataField.SemanticObject}::${dataField.Action}`, dataField, manifestActions)) {
            return false;
          }
          return dataField.RequiresContext;
        }
      }
      return false;
    });
  }
  function hasCustomActionsAlwaysVisibleInToolBar(manifestActions) {
    return Object.keys(manifestActions).some(actionKey => {
      var _action$visible;
      const action = manifestActions[actionKey];
      if (action.requiresSelection && ((_action$visible = action.visible) === null || _action$visible === void 0 ? void 0 : _action$visible.toString()) === "true") {
        return true;
      }
      return false;
    });
  }

  /**
   * Iterates over the custom actions (with key requiresSelection) declared in the manifest for the current line item and returns all the
   * visible key values as an expression.
   *
   * @param manifestActions The actions defined in the manifest
   * @returns Array<Expression<boolean>> All the visible path expressions of the actions that meet the criteria
   */
  function getVisibleExpForCustomActionsRequiringContext(manifestActions) {
    const aVisiblePathExpressions = [];
    if (manifestActions) {
      Object.keys(manifestActions).forEach(actionKey => {
        const action = manifestActions[actionKey];
        if (action.requiresSelection === true && action.visible !== undefined) {
          if (typeof action.visible === "string") {
            var _action$visible2;
            /*The final aim would be to check if the path expression depends on the parent context
            and considers only those expressions for the expression evaluation,
            but currently not possible from the manifest as the visible key is bound on the parent entity.
            Tricky to differentiate the path as it's done for the Hidden annotation.
            For the time being we consider all the paths of the manifest*/

            aVisiblePathExpressions.push(resolveBindingString(action === null || action === void 0 ? void 0 : (_action$visible2 = action.visible) === null || _action$visible2 === void 0 ? void 0 : _action$visible2.valueOf()));
          }
        }
      });
    }
    return aVisiblePathExpressions;
  }

  /**
   * Evaluate if the path is statically deletable or updatable.
   *
   * @param converterContext
   * @returns The table capabilities
   */
  function getCapabilityRestriction(converterContext) {
    const isDeletable = isPathDeletable(converterContext.getDataModelObjectPath());
    const isUpdatable = isPathUpdatable(converterContext.getDataModelObjectPath());
    return {
      isDeletable: !(isConstant(isDeletable) && isDeletable.value === false),
      isUpdatable: !(isConstant(isUpdatable) && isUpdatable.value === false)
    };
  }
  _exports.getCapabilityRestriction = getCapabilityRestriction;
  function getSelectionMode(lineItemAnnotation, visualizationPath, converterContext, isEntitySet, targetCapabilities, deleteButtonVisibilityExpression) {
    var _tableManifestSetting;
    let massEditVisibilityExpression = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : constant(false);
    const tableManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath);
    let selectionMode = (_tableManifestSetting = tableManifestSettings.tableSettings) === null || _tableManifestSetting === void 0 ? void 0 : _tableManifestSetting.selectionMode;
    // If the selection mode is forced to 'None' in the manifest/macro table parameters, we ignore the rest of the logic and keep it as specified
    if (!lineItemAnnotation || selectionMode === SelectionMode.None) {
      return SelectionMode.None;
    }
    let aHiddenBindingExpressions = [],
      aVisibleBindingExpressions = [];
    const manifestActions = getActionsFromManifest(converterContext.getManifestControlConfiguration(visualizationPath).actions, converterContext, [], undefined, false);
    let isParentDeletable, parentEntitySetDeletable;
    if (converterContext.getTemplateType() === TemplateType.ObjectPage) {
      isParentDeletable = isPathDeletable(converterContext.getDataModelObjectPath());
      parentEntitySetDeletable = isParentDeletable ? compileExpression(isParentDeletable, true) : isParentDeletable;
    }
    const bMassEditEnabled = !isConstant(massEditVisibilityExpression) || massEditVisibilityExpression.value !== false;
    if (!selectionMode || selectionMode === SelectionMode.Auto) {
      selectionMode = SelectionMode.Multi;
    }
    if (bMassEditEnabled) {
      // Override default selection mode when mass edit is visible
      selectionMode = selectionMode === SelectionMode.Single ? SelectionMode.Single : SelectionMode.Multi;
    }
    if (hasBoundActionsAlwaysVisibleInToolBar(lineItemAnnotation, manifestActions.actions, converterContext.getEntityType()) || hasCustomActionsAlwaysVisibleInToolBar(manifestActions.actions)) {
      return selectionMode;
    }
    aHiddenBindingExpressions = getUIHiddenExpForActionsRequiringContext(lineItemAnnotation, converterContext.getEntityType(), converterContext.getDataModelObjectPath(), isEntitySet);
    aVisibleBindingExpressions = getVisibleExpForCustomActionsRequiringContext(manifestActions.actions);

    // No action requiring a context:
    if (aHiddenBindingExpressions.length === 0 && aVisibleBindingExpressions.length === 0 && (deleteButtonVisibilityExpression || bMassEditEnabled)) {
      if (!isEntitySet) {
        // Example: OP case
        if (targetCapabilities.isDeletable || parentEntitySetDeletable !== "false" || bMassEditEnabled) {
          // Building expression for delete and mass edit
          const buttonVisibilityExpression = or(deleteButtonVisibilityExpression || true,
          // default delete visibility as true
          massEditVisibilityExpression);
          return compileExpression(ifElse(and(UI.IsEditable, buttonVisibilityExpression), constant(selectionMode), constant(SelectionMode.None)));
        } else {
          return SelectionMode.None;
        }
        // EntitySet deletable:
      } else if (bMassEditEnabled) {
        // example: LR scenario
        return selectionMode;
      } else if (targetCapabilities.isDeletable && deleteButtonVisibilityExpression) {
        return compileExpression(ifElse(deleteButtonVisibilityExpression, constant(selectionMode), constant("None")));
        // EntitySet not deletable:
      } else {
        return SelectionMode.None;
      }
      // There are actions requiring a context:
    } else if (!isEntitySet) {
      // Example: OP case
      if (targetCapabilities.isDeletable || parentEntitySetDeletable !== "false" || bMassEditEnabled) {
        // Use selectionMode in edit mode if delete is enabled or mass edit is visible
        const editModebuttonVisibilityExpression = ifElse(bMassEditEnabled && !targetCapabilities.isDeletable, massEditVisibilityExpression, constant(true));
        return compileExpression(ifElse(and(UI.IsEditable, editModebuttonVisibilityExpression), constant(selectionMode), ifElse(or(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions)), constant(selectionMode), constant(SelectionMode.None))));
      } else {
        return compileExpression(ifElse(or(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions)), constant(selectionMode), constant(SelectionMode.None)));
      }
      //EntitySet deletable:
    } else if (targetCapabilities.isDeletable || bMassEditEnabled) {
      // Example: LR scenario
      return selectionMode;
      //EntitySet not deletable:
    } else {
      return compileExpression(ifElse(or(...aHiddenBindingExpressions.concat(aVisibleBindingExpressions), massEditVisibilityExpression), constant(selectionMode), constant(SelectionMode.None)));
    }
  }

  /**
   * Method to retrieve all table actions from annotations.
   *
   * @param lineItemAnnotation
   * @param visualizationPath
   * @param converterContext
   * @returns The table annotation actions
   */
  _exports.getSelectionMode = getSelectionMode;
  function getTableAnnotationActions(lineItemAnnotation, visualizationPath, converterContext) {
    const tableActions = [];
    const hiddenTableActions = [];
    const copyDataField = getCopyAction(lineItemAnnotation.filter(dataField => {
      return dataFieldIsCopyAction(dataField);
    }));
    const sEntityType = converterContext.getEntityType().fullyQualifiedName;
    if (copyDataField) {
      var _copyDataField$annota, _copyDataField$annota2, _copyDataField$Label;
      tableActions.push({
        type: ActionType.Copy,
        annotationPath: converterContext.getEntitySetBasedAnnotationPath(copyDataField.fullyQualifiedName),
        key: KeyHelper.generateKeyFromDataField(copyDataField),
        enabled: compileExpression(equal(pathInModel("numberOfSelectedContexts", "internal"), 1)),
        visible: compileExpression(not(equal(getExpressionFromAnnotation((_copyDataField$annota = copyDataField.annotations) === null || _copyDataField$annota === void 0 ? void 0 : (_copyDataField$annota2 = _copyDataField$annota.UI) === null || _copyDataField$annota2 === void 0 ? void 0 : _copyDataField$annota2.Hidden, [], undefined, converterContext.getRelativeModelPathFunction()), true))),
        text: ((_copyDataField$Label = copyDataField.Label) === null || _copyDataField$Label === void 0 ? void 0 : _copyDataField$Label.toString()) ?? Core.getLibraryResourceBundle("sap.fe.core").getText("C_COMMON_COPY"),
        isNavigable: true
      });
    }
    lineItemAnnotation.filter(dataField => {
      return !dataFieldIsCopyAction(dataField);
    }).forEach(dataField => {
      var _dataField$annotation10, _dataField$annotation11, _dataField$annotation12, _dataField$Inline3, _dataField$Determinin, _dataField$ActionTarg3, _dataField$ActionTarg4, _dataField$ActionTarg5, _dataField$annotation13, _dataField$annotation14, _dataField$annotation15, _dataField$annotation16;
      if (((_dataField$annotation10 = dataField.annotations) === null || _dataField$annotation10 === void 0 ? void 0 : (_dataField$annotation11 = _dataField$annotation10.UI) === null || _dataField$annotation11 === void 0 ? void 0 : (_dataField$annotation12 = _dataField$annotation11.Hidden) === null || _dataField$annotation12 === void 0 ? void 0 : _dataField$annotation12.valueOf()) === true) {
        hiddenTableActions.push({
          type: ActionType.Default,
          key: KeyHelper.generateKeyFromDataField(dataField)
        });
      } else if (isDataFieldForActionAbstract(dataField) && ((_dataField$Inline3 = dataField.Inline) === null || _dataField$Inline3 === void 0 ? void 0 : _dataField$Inline3.valueOf()) !== true && ((_dataField$Determinin = dataField.Determining) === null || _dataField$Determinin === void 0 ? void 0 : _dataField$Determinin.valueOf()) !== true) {
        switch (dataField.$Type) {
          case "com.sap.vocabularies.UI.v1.DataFieldForAction":
            // There are three cases when a table action has an OperationAvailable that leads to an enablement expression
            // and is not dependent upon the table entries.
            // 1. An action with an overload, that is executed against a parent entity.
            // 2. An unbound action
            // 3. A static action (that is, bound to a collection)
            let useEnabledExpression = false;
            if (((_dataField$ActionTarg3 = dataField.ActionTarget) === null || _dataField$ActionTarg3 === void 0 ? void 0 : (_dataField$ActionTarg4 = _dataField$ActionTarg3.annotations) === null || _dataField$ActionTarg4 === void 0 ? void 0 : (_dataField$ActionTarg5 = _dataField$ActionTarg4.Core) === null || _dataField$ActionTarg5 === void 0 ? void 0 : _dataField$ActionTarg5.OperationAvailable) !== undefined) {
              var _dataField$ActionTarg6, _dataField$ActionTarg7, _dataField$ActionTarg8, _dataField$ActionTarg9;
              if (!((_dataField$ActionTarg6 = dataField.ActionTarget) !== null && _dataField$ActionTarg6 !== void 0 && _dataField$ActionTarg6.isBound)) {
                // Unbound action. Is recognised, but getExpressionFromAnnotation checks for isBound = true, so not generated.
                useEnabledExpression = true;
              } else if ((_dataField$ActionTarg7 = dataField.ActionTarget) !== null && _dataField$ActionTarg7 !== void 0 && _dataField$ActionTarg7.isBound && ((_dataField$ActionTarg8 = dataField.ActionTarget) === null || _dataField$ActionTarg8 === void 0 ? void 0 : _dataField$ActionTarg8.sourceType) !== sEntityType) {
                // Overload action
                useEnabledExpression = true;
              } else if ((_dataField$ActionTarg9 = dataField.ActionTarget) !== null && _dataField$ActionTarg9 !== void 0 && _dataField$ActionTarg9.parameters[0].isCollection) {
                // Static action
                useEnabledExpression = true;
              }
            }
            const tableAction = {
              type: ActionType.DataFieldForAction,
              annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
              key: KeyHelper.generateKeyFromDataField(dataField),
              visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation13 = dataField.annotations) === null || _dataField$annotation13 === void 0 ? void 0 : (_dataField$annotation14 = _dataField$annotation13.UI) === null || _dataField$annotation14 === void 0 ? void 0 : _dataField$annotation14.Hidden, [], undefined, converterContext.getRelativeModelPathFunction()), true))),
              isNavigable: true
            };
            if (useEnabledExpression) {
              tableAction.enabled = getEnabledForAnnotationAction(converterContext, dataField.ActionTarget);
            }
            tableActions.push(tableAction);
            break;
          case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
            tableActions.push({
              type: ActionType.DataFieldForIntentBasedNavigation,
              annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
              key: KeyHelper.generateKeyFromDataField(dataField),
              visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation15 = dataField.annotations) === null || _dataField$annotation15 === void 0 ? void 0 : (_dataField$annotation16 = _dataField$annotation15.UI) === null || _dataField$annotation16 === void 0 ? void 0 : _dataField$annotation16.Hidden, [], undefined, converterContext.getRelativeModelPathFunction()), true)))
            });
            break;
          default:
            break;
        }
      }
    });
    return {
      tableActions,
      hiddenTableActions
    };
  }

  /**
   * Generate the bindingExpression for the highlight rowSetting parameter.
   *
   * @param criticalityAnnotation Path or value of the criticality
   * @param isDraftRootOrNode  Is the current entitySet an Draft root or a node
   * @param targetEntityType The targeted entityType
   * @returns An expressionBinding
   * @private
   */
  function getHighlightRowBinding(criticalityAnnotation, isDraftRootOrNode, targetEntityType) {
    let defaultHighlightRowDefinition = MessageType.None;
    if (criticalityAnnotation) {
      if (typeof criticalityAnnotation === "object") {
        defaultHighlightRowDefinition = getExpressionFromAnnotation(criticalityAnnotation);
      } else {
        // Enum Value so we get the corresponding static part
        defaultHighlightRowDefinition = getMessageTypeFromCriticalityType(criticalityAnnotation);
      }
    }
    const aMissingKeys = [];
    targetEntityType === null || targetEntityType === void 0 ? void 0 : targetEntityType.keys.forEach(key => {
      if (key.name !== "IsActiveEntity") {
        aMissingKeys.push(pathInModel(key.name, undefined));
      }
    });
    return formatResult([defaultHighlightRowDefinition, pathInModel(`filteredMessages`, "internal"), isDraftRootOrNode && Entity.HasActive, isDraftRootOrNode && Entity.IsActive, `${isDraftRootOrNode}`, ...aMissingKeys], tableFormatters.rowHighlighting, targetEntityType);
  }
  function _getCreationBehaviour(lineItemAnnotation, tableManifestConfiguration, converterContext, navigationSettings, visualizationPath) {
    var _newAction2;
    const navigation = (navigationSettings === null || navigationSettings === void 0 ? void 0 : navigationSettings.create) || (navigationSettings === null || navigationSettings === void 0 ? void 0 : navigationSettings.detail);
    const tableManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath);
    const originalTableSettings = tableManifestSettings && tableManifestSettings.tableSettings || {};
    // cross-app
    if (navigation !== null && navigation !== void 0 && navigation.outbound && navigation.outboundDetail && navigationSettings !== null && navigationSettings !== void 0 && navigationSettings.create) {
      return {
        mode: "External",
        outbound: navigation.outbound,
        outboundDetail: navigation.outboundDetail,
        navigationSettings: navigationSettings
      };
    }
    let newAction;
    if (lineItemAnnotation) {
      var _converterContext$get14, _targetAnnotationsCom, _targetAnnotationsSes;
      // in-app
      const targetAnnotations = (_converterContext$get14 = converterContext.getEntitySet()) === null || _converterContext$get14 === void 0 ? void 0 : _converterContext$get14.annotations;
      const targetAnnotationsCommon = targetAnnotations === null || targetAnnotations === void 0 ? void 0 : targetAnnotations.Common,
        targetAnnotationsSession = targetAnnotations === null || targetAnnotations === void 0 ? void 0 : targetAnnotations.Session;
      newAction = (targetAnnotationsCommon === null || targetAnnotationsCommon === void 0 ? void 0 : (_targetAnnotationsCom = targetAnnotationsCommon.DraftRoot) === null || _targetAnnotationsCom === void 0 ? void 0 : _targetAnnotationsCom.NewAction) || (targetAnnotationsSession === null || targetAnnotationsSession === void 0 ? void 0 : (_targetAnnotationsSes = targetAnnotationsSession.StickySessionSupported) === null || _targetAnnotationsSes === void 0 ? void 0 : _targetAnnotationsSes.NewAction);
      if (tableManifestConfiguration.creationMode === CreationMode.CreationRow && newAction) {
        // A combination of 'CreationRow' and 'NewAction' does not make sense
        throw Error(`Creation mode '${CreationMode.CreationRow}' can not be used with a custom 'new' action (${newAction})`);
      }
      if (navigation !== null && navigation !== void 0 && navigation.route) {
        var _newAction;
        // route specified
        return {
          mode: tableManifestConfiguration.creationMode,
          append: tableManifestConfiguration.createAtEnd,
          newAction: (_newAction = newAction) === null || _newAction === void 0 ? void 0 : _newAction.toString(),
          navigateToTarget: tableManifestConfiguration.creationMode === CreationMode.NewPage ? navigation.route : undefined // navigate only in NewPage mode
        };
      }
    }

    // no navigation or no route specified - fallback to inline create if original creation mode was 'NewPage'
    if (tableManifestConfiguration.creationMode === CreationMode.NewPage) {
      var _originalTableSetting;
      tableManifestConfiguration.creationMode = CreationMode.Inline;
      // In case there was no specific configuration for the createAtEnd we force it to false
      if (((_originalTableSetting = originalTableSettings.creationMode) === null || _originalTableSetting === void 0 ? void 0 : _originalTableSetting.createAtEnd) === undefined) {
        tableManifestConfiguration.createAtEnd = false;
      }
    }
    return {
      mode: tableManifestConfiguration.creationMode,
      append: tableManifestConfiguration.createAtEnd,
      newAction: (_newAction2 = newAction) === null || _newAction2 === void 0 ? void 0 : _newAction2.toString()
    };
  }
  const _getRowConfigurationProperty = function (lineItemAnnotation, converterContext, navigationSettings, targetPath, tableType) {
    let pressProperty, navigationTarget;
    let criticalityProperty = constant(MessageType.None);
    const targetEntityType = converterContext.getEntityType();
    if (navigationSettings && lineItemAnnotation) {
      var _navigationSettings$d, _navigationSettings$d2, _lineItemAnnotation$a, _lineItemAnnotation$a2, _navigationSettings$d3;
      navigationTarget = ((_navigationSettings$d = navigationSettings.display) === null || _navigationSettings$d === void 0 ? void 0 : _navigationSettings$d.target) || ((_navigationSettings$d2 = navigationSettings.detail) === null || _navigationSettings$d2 === void 0 ? void 0 : _navigationSettings$d2.outbound);
      const targetEntitySet = converterContext.getEntitySet();
      criticalityProperty = getHighlightRowBinding((_lineItemAnnotation$a = lineItemAnnotation.annotations) === null || _lineItemAnnotation$a === void 0 ? void 0 : (_lineItemAnnotation$a2 = _lineItemAnnotation$a.UI) === null || _lineItemAnnotation$a2 === void 0 ? void 0 : _lineItemAnnotation$a2.Criticality, !!ModelHelper.getDraftRoot(targetEntitySet) || !!ModelHelper.getDraftNode(targetEntitySet), targetEntityType);
      if (navigationTarget) {
        pressProperty = ".handlers.onChevronPressNavigateOutBound( $controller ,'" + navigationTarget + "', ${$parameters>bindingContext})";
      }
      if (!navigationTarget && (_navigationSettings$d3 = navigationSettings.detail) !== null && _navigationSettings$d3 !== void 0 && _navigationSettings$d3.route) {
        pressProperty = "API.onTableRowPress($event, $controller, ${$parameters>bindingContext}, { callExtension: true, targetPath: '" + targetPath + "', editable : " + (ModelHelper.getDraftRoot(targetEntitySet) || ModelHelper.getDraftNode(targetEntitySet) ? "!${$parameters>bindingContext}.getProperty('IsActiveEntity')" : "undefined") + (tableType === "AnalyticalTable" || tableType === "TreeTable" ? ", bRecreateContext: true" : "") + "})"; //Need to access to DraftRoot and DraftNode !!!!!!!
      }
    }

    const rowNavigatedExpression = formatResult([pathInModel("/deepestPath", "internal")], tableFormatters.navigatedRow, targetEntityType);
    return {
      press: pressProperty,
      action: pressProperty ? "Navigation" : undefined,
      rowHighlighting: compileExpression(criticalityProperty),
      rowNavigated: compileExpression(rowNavigatedExpression),
      visible: compileExpression(not(UI.IsInactive))
    };
  };

  /**
   * Retrieve the columns from the entityType.
   *
   * @param columnsToBeCreated The columns to be created.
   * @param entityType The target entity type.
   * @param annotationColumns The array of columns created based on LineItem annotations.
   * @param nonSortableColumns The array of all non sortable column names.
   * @param converterContext The converter context.
   * @param tableType The table type.
   * @param textOnlyColumnsFromTextAnnotation The array of columns from a property using a text annotation with textOnly as text arrangement.
   * @returns The column from the entityType
   */
  const getColumnsFromEntityType = function (columnsToBeCreated, entityType) {
    let annotationColumns = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let nonSortableColumns = arguments.length > 3 ? arguments[3] : undefined;
    let converterContext = arguments.length > 4 ? arguments[4] : undefined;
    let tableType = arguments.length > 5 ? arguments[5] : undefined;
    let textOnlyColumnsFromTextAnnotation = arguments.length > 6 ? arguments[6] : undefined;
    const tableColumns = annotationColumns;
    // Catch already existing columns - which were added before by LineItem Annotations
    const aggregationHelper = new AggregationHelper(entityType, converterContext);
    entityType.entityProperties.forEach(property => {
      // Catch already existing columns - which were added before by LineItem Annotations
      const exists = annotationColumns.some(column => {
        return column.name === property.name;
      });

      // if target type exists, it is a complex property and should be ignored
      if (!property.targetType && !exists) {
        const relatedPropertiesInfo = collectRelatedProperties(property.name, property, converterContext, true, tableType);
        const relatedPropertyNames = Object.keys(relatedPropertiesInfo.properties);
        const additionalPropertyNames = Object.keys(relatedPropertiesInfo.additionalProperties);
        if (relatedPropertiesInfo.textOnlyPropertiesFromTextAnnotation.length > 0) {
          // Include text properties found during analysis on getColumnsFromAnnotations
          textOnlyColumnsFromTextAnnotation.push(...relatedPropertiesInfo.textOnlyPropertiesFromTextAnnotation);
        }
        const columnInfo = getColumnDefinitionFromProperty(property, converterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName), property.name, true, true, nonSortableColumns, aggregationHelper, converterContext, textOnlyColumnsFromTextAnnotation);
        if (relatedPropertyNames.length > 0) {
          columnInfo.propertyInfos = relatedPropertyNames;
          columnInfo.exportSettings = {
            ...columnInfo.exportSettings,
            template: relatedPropertiesInfo.exportSettingsTemplate,
            wrap: relatedPropertiesInfo.exportSettingsWrapping
          };
          columnInfo.exportSettings.type = _getExportDataType(property.type, relatedPropertyNames.length > 1);
          if (relatedPropertiesInfo.exportUnitName) {
            columnInfo.exportSettings.unitProperty = relatedPropertiesInfo.exportUnitName;
            columnInfo.exportSettings.type = "Currency"; // Force to a currency because there's a unitProperty (otherwise the value isn't properly formatted when exported)
          } else if (relatedPropertiesInfo.exportUnitString) {
            columnInfo.exportSettings.unit = relatedPropertiesInfo.exportUnitString;
          }
          if (relatedPropertiesInfo.exportTimezoneName) {
            columnInfo.exportSettings.timezoneProperty = relatedPropertiesInfo.exportTimezoneName;
            columnInfo.exportSettings.utc = false;
          } else if (relatedPropertiesInfo.exportTimezoneString) {
            columnInfo.exportSettings.timezone = relatedPropertiesInfo.exportTimezoneString;
          }
          if (relatedPropertiesInfo.exportDataPointTargetValue) {
            columnInfo.exportDataPointTargetValue = relatedPropertiesInfo.exportDataPointTargetValue;
            columnInfo.exportSettings.type = "String";
          }

          // Collect information of related columns to be created.
          relatedPropertyNames.forEach(name => {
            columnsToBeCreated[name] = relatedPropertiesInfo.properties[name];
          });
        }
        if (additionalPropertyNames.length > 0) {
          columnInfo.additionalPropertyInfos = additionalPropertyNames;
          // Create columns for additional properties identified for ALP use case.
          additionalPropertyNames.forEach(name => {
            // Intentional overwrite as we require only one new PropertyInfo for a related Property.
            columnsToBeCreated[name] = relatedPropertiesInfo.additionalProperties[name];
          });
        }
        tableColumns.push(columnInfo);
      }
      // In case a property has defined a #TextOnly text arrangement don't only create the complex property with the text property as a child property,
      // but also the property itself as it can be used as within the sortConditions or on custom columns.
      // This step must be valide also from the columns added via LineItems or from a column available on the p13n.
      if (getDisplayMode(property) === "Description") {
        nonSortableColumns = nonSortableColumns.concat(property.name);
        tableColumns.push(getColumnDefinitionFromProperty(property, converterContext.getEntitySetBasedAnnotationPath(property.fullyQualifiedName), property.name, false, false, nonSortableColumns, aggregationHelper, converterContext, []));
      }
    });

    // Create a propertyInfo for each related property.
    const relatedColumns = _createRelatedColumns(columnsToBeCreated, tableColumns, nonSortableColumns, converterContext, entityType, textOnlyColumnsFromTextAnnotation);
    return tableColumns.concat(relatedColumns);
  };

  /**
   * Create a column definition from a property.
   *
   * @param property Entity type property for which the column is created
   * @param fullPropertyPath The full path to the target property
   * @param relativePath The relative path to the target property based on the context
   * @param useDataFieldPrefix Should be prefixed with "DataField::", else it will be prefixed with "Property::"
   * @param availableForAdaptation Decides whether the column should be available for adaptation
   * @param nonSortableColumns The array of all non-sortable column names
   * @param aggregationHelper The aggregationHelper for the entity
   * @param converterContext The converter context
   * @param textOnlyColumnsFromTextAnnotation The array of columns from a property using a text annotation with textOnly as text arrangement.
   * @returns The annotation column definition
   */
  _exports.getColumnsFromEntityType = getColumnsFromEntityType;
  const getColumnDefinitionFromProperty = function (property, fullPropertyPath, relativePath, useDataFieldPrefix, availableForAdaptation, nonSortableColumns, aggregationHelper, converterContext, textOnlyColumnsFromTextAnnotation) {
    var _property$annotations, _property$annotations2, _property$annotations3, _property$annotations10, _property$annotations11;
    const name = useDataFieldPrefix ? relativePath : `Property::${relativePath}`;
    const key = (useDataFieldPrefix ? "DataField::" : "Property::") + replaceSpecialChars(relativePath);
    const semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, property);
    const isHidden = ((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.UI) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.Hidden) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.valueOf()) === true;
    const groupPath = property.name ? _sliceAtSlash(property.name, true, false) : undefined;
    const isGroup = groupPath != property.name;
    const exportType = _getExportDataType(property.type);
    const sDateInputFormat = property.type === "Edm.Date" ? "YYYY-MM-DD" : undefined;
    const dataType = getDataFieldDataType(property);
    const propertyTypeConfig = getTypeConfig(property, dataType);
    const semanticKeys = converterContext.getAnnotationsByTerm("Common", "com.sap.vocabularies.Common.v1.SemanticKey", [converterContext.getEntityType()])[0];
    const isAPropertyFromTextOnlyAnnotation = textOnlyColumnsFromTextAnnotation && textOnlyColumnsFromTextAnnotation.indexOf(relativePath) >= 0;
    const sortable = (!isHidden || isAPropertyFromTextOnlyAnnotation) && nonSortableColumns.indexOf(relativePath) === -1;
    const typeConfig = {
      className: property.type || dataType,
      formatOptions: propertyTypeConfig.formatOptions,
      constraints: propertyTypeConfig.constraints
    };
    let exportSettings = null;
    if (_isExportableColumn(property)) {
      var _property$annotations4, _property$annotations5, _property$annotations6, _property$annotations7, _property$annotations8, _property$annotations9;
      const unitProperty = getAssociatedCurrencyProperty(property) || getAssociatedUnitProperty(property);
      const timezoneProperty = getAssociatedTimezoneProperty(property);
      const unitText = ((_property$annotations4 = property.annotations) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.Measures) === null || _property$annotations5 === void 0 ? void 0 : _property$annotations5.ISOCurrency) || ((_property$annotations6 = property.annotations) === null || _property$annotations6 === void 0 ? void 0 : (_property$annotations7 = _property$annotations6.Measures) === null || _property$annotations7 === void 0 ? void 0 : _property$annotations7.Unit);
      const timezoneText = (_property$annotations8 = property.annotations) === null || _property$annotations8 === void 0 ? void 0 : (_property$annotations9 = _property$annotations8.Common) === null || _property$annotations9 === void 0 ? void 0 : _property$annotations9.Timezone;
      exportSettings = {
        type: exportType,
        inputFormat: sDateInputFormat,
        scale: property.scale,
        delimiter: property.type === "Edm.Int64"
      };
      if (unitProperty) {
        exportSettings.unitProperty = unitProperty.name;
        exportSettings.type = "Currency"; // Force to a currency because there's a unitProperty (otherwise the value isn't properly formatted when exported)
      } else if (unitText) {
        exportSettings.unit = `${unitText}`;
      }
      if (timezoneProperty) {
        exportSettings.timezoneProperty = timezoneProperty.name;
        exportSettings.utc = false;
      } else if (timezoneText) {
        exportSettings.timezone = timezoneText.toString();
      }
    }
    const collectedNavigationPropertyLabels = _getCollectedNavigationPropertyLabels(relativePath, converterContext);
    const column = {
      key: key,
      type: ColumnType.Annotation,
      label: getLabel(property, isGroup),
      groupLabel: isGroup ? getLabel(property) : undefined,
      group: isGroup ? groupPath : undefined,
      annotationPath: fullPropertyPath,
      semanticObjectPath: semanticObjectAnnotationPath,
      availability: !availableForAdaptation || isHidden ? "Hidden" : "Adaptation",
      name: name,
      relativePath: relativePath,
      sortable: sortable,
      isGroupable: aggregationHelper.isAnalyticsSupported() ? !!aggregationHelper.isPropertyGroupable(property) : sortable,
      isKey: property.isKey,
      exportSettings: exportSettings,
      caseSensitive: isFilteringCaseSensitive(converterContext),
      typeConfig: typeConfig,
      importance: getImportance((_property$annotations10 = property.annotations) === null || _property$annotations10 === void 0 ? void 0 : (_property$annotations11 = _property$annotations10.UI) === null || _property$annotations11 === void 0 ? void 0 : _property$annotations11.DataFieldDefault, semanticKeys),
      additionalLabels: collectedNavigationPropertyLabels
    };
    const sTooltip = _getTooltip(property) || getLabel(property, isGroup);
    if (sTooltip) {
      column.tooltip = sTooltip;
    }
    const targetValuefromDP = getTargetValueOnDataPoint(property);
    if (isDataPointFromDataFieldDefault(property) && typeof targetValuefromDP === "string" && column.exportSettings) {
      column.exportDataPointTargetValue = targetValuefromDP;
      column.exportSettings.template = "{0}/" + targetValuefromDP;
    }
    return column;
  };

  /**
   * Returns Boolean true for exportable columns, false for non exportable columns.
   *
   * @param source The dataField or property to be evaluated
   * @returns True for exportable column, false for non exportable column
   * @private
   */

  function _isExportableColumn(source) {
    var _annotations$UI2;
    let propertyType, property;
    const dataFieldDefaultProperty = (_annotations$UI2 = source.annotations.UI) === null || _annotations$UI2 === void 0 ? void 0 : _annotations$UI2.DataFieldDefault;
    if (isProperty(source) && dataFieldDefaultProperty !== null && dataFieldDefaultProperty !== void 0 && dataFieldDefaultProperty.$Type) {
      if (isReferencePropertyStaticallyHidden(dataFieldDefaultProperty) === true) {
        return false;
      }
      propertyType = dataFieldDefaultProperty === null || dataFieldDefaultProperty === void 0 ? void 0 : dataFieldDefaultProperty.$Type;
    } else if (isReferencePropertyStaticallyHidden(source) === true) {
      return false;
    } else {
      var _Target, _Target$$target, _Value, _Value$$target, _Value$$target$annota, _Value$$target$annota2, _Value$$target$annota3, _Value2, _Value2$$target, _Value2$$target$annot, _Value2$$target$annot2;
      property = source;
      propertyType = property.$Type;
      if (propertyType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && (_Target = property.Target) !== null && _Target !== void 0 && (_Target$$target = _Target.$target) !== null && _Target$$target !== void 0 && _Target$$target.$Type) {
        var _Target2, _Target2$$target;
        //For Chart
        propertyType = (_Target2 = property.Target) === null || _Target2 === void 0 ? void 0 : (_Target2$$target = _Target2.$target) === null || _Target2$$target === void 0 ? void 0 : _Target2$$target.$Type;
        return "com.sap.vocabularies.UI.v1.ChartDefinitionType".indexOf(propertyType) === -1;
      } else if (((_Value = property.Value) === null || _Value === void 0 ? void 0 : (_Value$$target = _Value.$target) === null || _Value$$target === void 0 ? void 0 : (_Value$$target$annota = _Value$$target.annotations) === null || _Value$$target$annota === void 0 ? void 0 : (_Value$$target$annota2 = _Value$$target$annota.Core) === null || _Value$$target$annota2 === void 0 ? void 0 : (_Value$$target$annota3 = _Value$$target$annota2.MediaType) === null || _Value$$target$annota3 === void 0 ? void 0 : _Value$$target$annota3.term) === "Org.OData.Core.V1.MediaType" && ((_Value2 = property.Value) === null || _Value2 === void 0 ? void 0 : (_Value2$$target = _Value2.$target) === null || _Value2$$target === void 0 ? void 0 : (_Value2$$target$annot = _Value2$$target.annotations) === null || _Value2$$target$annot === void 0 ? void 0 : (_Value2$$target$annot2 = _Value2$$target$annot.Core) === null || _Value2$$target$annot2 === void 0 ? void 0 : _Value2$$target$annot2.isURL) !== true) {
        //For Stream
        return false;
      }
    }
    return propertyType ? ["com.sap.vocabularies.UI.v1.DataFieldForAction", "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation", "com.sap.vocabularies.UI.v1.DataFieldForActionGroup"].indexOf(propertyType) === -1 : true;
  }

  /**
   * Returns Boolean true for valid columns, false for invalid columns.
   *
   * @param dataField Different DataField types defined in the annotations
   * @returns True for valid columns, false for invalid columns
   * @private
   */
  const _isValidColumn = function (dataField) {
    switch (dataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataFieldForAction":
      case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        return !!dataField.Inline;
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        return true;
      default:
      // Todo: Replace with proper Log statement once available
      //  throw new Error("Unhandled DataField Abstract type: " + dataField.$Type);
    }
  };
  /**
   * Returns the binding expression to evaluate the visibility of a DataField or DataPoint annotation.
   *
   * SAP Fiori elements will evaluate either the UI.Hidden annotation defined on the annotation itself or on the target property.
   *
   * @param dataFieldModelPath The metapath referring to the annotation that is evaluated by SAP Fiori elements.
   * @returns An expression that you can bind to the UI.
   */
  const _getVisibleExpression = function (dataFieldModelPath) {
    var _targetObject$Target, _targetObject$Target$, _targetObject$annotat, _targetObject$annotat2, _propertyValue$annota, _propertyValue$annota2;
    const targetObject = dataFieldModelPath.targetObject;
    let propertyValue;
    if (targetObject) {
      switch (targetObject.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        case "com.sap.vocabularies.UI.v1.DataPointType":
          propertyValue = targetObject.Value.$target;
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          // if it is a DataFieldForAnnotation pointing to a DataPoint we look at the dataPoint's value
          if ((targetObject === null || targetObject === void 0 ? void 0 : (_targetObject$Target = targetObject.Target) === null || _targetObject$Target === void 0 ? void 0 : (_targetObject$Target$ = _targetObject$Target.$target) === null || _targetObject$Target$ === void 0 ? void 0 : _targetObject$Target$.$Type) === "com.sap.vocabularies.UI.v1.DataPointType") {
            var _targetObject$Target$2;
            propertyValue = (_targetObject$Target$2 = targetObject.Target.$target) === null || _targetObject$Target$2 === void 0 ? void 0 : _targetObject$Target$2.Value.$target;
          }
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        default:
          propertyValue = undefined;
      }
    }
    // FIXME Prove me wrong that this is useless
    const isAnalyticalGroupHeaderExpanded = /*formatOptions?.isAnalytics ? UI.IsExpanded :*/constant(false);
    const isAnalyticalLeaf = /*formatOptions?.isAnalytics ? equal(UI.NodeLevel, 0) :*/constant(false);

    // A data field is visible if:
    // - the UI.Hidden expression in the original annotation does not evaluate to 'true'
    // - the UI.Hidden expression in the target property does not evaluate to 'true'
    // - in case of Analytics it's not visible for an expanded GroupHeader
    return and(...[not(equal(getExpressionFromAnnotation(targetObject === null || targetObject === void 0 ? void 0 : (_targetObject$annotat = targetObject.annotations) === null || _targetObject$annotat === void 0 ? void 0 : (_targetObject$annotat2 = _targetObject$annotat.UI) === null || _targetObject$annotat2 === void 0 ? void 0 : _targetObject$annotat2.Hidden), true)), ifElse(!!propertyValue, propertyValue && not(equal(getExpressionFromAnnotation((_propertyValue$annota = propertyValue.annotations) === null || _propertyValue$annota === void 0 ? void 0 : (_propertyValue$annota2 = _propertyValue$annota.UI) === null || _propertyValue$annota2 === void 0 ? void 0 : _propertyValue$annota2.Hidden), true)), true), or(not(isAnalyticalGroupHeaderExpanded), isAnalyticalLeaf)]);
  };

  /**
   * Returns hidden binding expressions for a field group.
   *
   * @param dataFieldGroup DataField defined in the annotations
   * @returns Compile binding of field group expressions.
   * @private
   */
  _exports._getVisibleExpression = _getVisibleExpression;
  const _getFieldGroupHiddenExpressions = function (dataFieldGroup) {
    var _dataFieldGroup$Targe, _dataFieldGroup$Targe2;
    const fieldGroupHiddenExpressions = [];
    if (dataFieldGroup.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && ((_dataFieldGroup$Targe = dataFieldGroup.Target) === null || _dataFieldGroup$Targe === void 0 ? void 0 : (_dataFieldGroup$Targe2 = _dataFieldGroup$Targe.$target) === null || _dataFieldGroup$Targe2 === void 0 ? void 0 : _dataFieldGroup$Targe2.$Type) === "com.sap.vocabularies.UI.v1.FieldGroupType") {
      var _dataFieldGroup$annot, _dataFieldGroup$annot2;
      if (dataFieldGroup !== null && dataFieldGroup !== void 0 && (_dataFieldGroup$annot = dataFieldGroup.annotations) !== null && _dataFieldGroup$annot !== void 0 && (_dataFieldGroup$annot2 = _dataFieldGroup$annot.UI) !== null && _dataFieldGroup$annot2 !== void 0 && _dataFieldGroup$annot2.Hidden) {
        return compileExpression(not(equal(getExpressionFromAnnotation(dataFieldGroup.annotations.UI.Hidden), true)));
      } else {
        var _dataFieldGroup$Targe3;
        (_dataFieldGroup$Targe3 = dataFieldGroup.Target.$target.Data) === null || _dataFieldGroup$Targe3 === void 0 ? void 0 : _dataFieldGroup$Targe3.forEach(innerDataField => {
          fieldGroupHiddenExpressions.push(_getVisibleExpression({
            targetObject: innerDataField
          }));
        });
        return compileExpression(ifElse(or(...fieldGroupHiddenExpressions), constant(true), constant(false)));
      }
    } else {
      return undefined;
    }
  };

  /**
   * Returns the label for the property and dataField.
   *
   * @param [property] Property, DataField or Navigation Property defined in the annotations
   * @param isGroup
   * @returns Label of the property or DataField
   * @private
   */
  const getLabel = function (property) {
    let isGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (!property) {
      return undefined;
    }
    if (isProperty(property) || isNavigationProperty(property)) {
      var _annotations2, _annotations2$UI, _dataFieldDefault$Lab, _property$annotations12, _property$annotations13;
      const dataFieldDefault = (_annotations2 = property.annotations) === null || _annotations2 === void 0 ? void 0 : (_annotations2$UI = _annotations2.UI) === null || _annotations2$UI === void 0 ? void 0 : _annotations2$UI.DataFieldDefault;
      if (dataFieldDefault && !dataFieldDefault.qualifier && (_dataFieldDefault$Lab = dataFieldDefault.Label) !== null && _dataFieldDefault$Lab !== void 0 && _dataFieldDefault$Lab.valueOf()) {
        var _dataFieldDefault$Lab2;
        return compileExpression(getExpressionFromAnnotation((_dataFieldDefault$Lab2 = dataFieldDefault.Label) === null || _dataFieldDefault$Lab2 === void 0 ? void 0 : _dataFieldDefault$Lab2.valueOf()));
      }
      return compileExpression(getExpressionFromAnnotation(((_property$annotations12 = property.annotations.Common) === null || _property$annotations12 === void 0 ? void 0 : (_property$annotations13 = _property$annotations12.Label) === null || _property$annotations13 === void 0 ? void 0 : _property$annotations13.valueOf()) || property.name));
    } else if (isDataFieldTypes(property)) {
      var _property$Label2, _property$Value, _property$Value$$targ, _property$Value$$targ2, _property$Value$$targ3, _property$Value$$targ4, _property$Value2, _property$Value2$$tar;
      if (!!isGroup && property.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation") {
        var _property$Label;
        return compileExpression(getExpressionFromAnnotation((_property$Label = property.Label) === null || _property$Label === void 0 ? void 0 : _property$Label.valueOf()));
      }
      return compileExpression(getExpressionFromAnnotation(((_property$Label2 = property.Label) === null || _property$Label2 === void 0 ? void 0 : _property$Label2.valueOf()) || ((_property$Value = property.Value) === null || _property$Value === void 0 ? void 0 : (_property$Value$$targ = _property$Value.$target) === null || _property$Value$$targ === void 0 ? void 0 : (_property$Value$$targ2 = _property$Value$$targ.annotations) === null || _property$Value$$targ2 === void 0 ? void 0 : (_property$Value$$targ3 = _property$Value$$targ2.Common) === null || _property$Value$$targ3 === void 0 ? void 0 : (_property$Value$$targ4 = _property$Value$$targ3.Label) === null || _property$Value$$targ4 === void 0 ? void 0 : _property$Value$$targ4.valueOf()) || ((_property$Value2 = property.Value) === null || _property$Value2 === void 0 ? void 0 : (_property$Value2$$tar = _property$Value2.$target) === null || _property$Value2$$tar === void 0 ? void 0 : _property$Value2$$tar.name)));
    } else if (property.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
      var _property$Label3, _property$Target, _property$Target$$tar, _property$Target$$tar2, _property$Target$$tar3, _property$Target$$tar4, _property$Target$$tar5, _property$Target$$tar6;
      return compileExpression(getExpressionFromAnnotation(((_property$Label3 = property.Label) === null || _property$Label3 === void 0 ? void 0 : _property$Label3.valueOf()) || ((_property$Target = property.Target) === null || _property$Target === void 0 ? void 0 : (_property$Target$$tar = _property$Target.$target) === null || _property$Target$$tar === void 0 ? void 0 : (_property$Target$$tar2 = _property$Target$$tar.Value) === null || _property$Target$$tar2 === void 0 ? void 0 : (_property$Target$$tar3 = _property$Target$$tar2.$target) === null || _property$Target$$tar3 === void 0 ? void 0 : (_property$Target$$tar4 = _property$Target$$tar3.annotations) === null || _property$Target$$tar4 === void 0 ? void 0 : (_property$Target$$tar5 = _property$Target$$tar4.Common) === null || _property$Target$$tar5 === void 0 ? void 0 : (_property$Target$$tar6 = _property$Target$$tar5.Label) === null || _property$Target$$tar6 === void 0 ? void 0 : _property$Target$$tar6.valueOf())));
    } else {
      var _property$Label4;
      return compileExpression(getExpressionFromAnnotation((_property$Label4 = property.Label) === null || _property$Label4 === void 0 ? void 0 : _property$Label4.valueOf()));
    }
  };
  const _getTooltip = function (source) {
    var _source$annotations, _source$annotations$C;
    if (!source) {
      return undefined;
    }
    if (isProperty(source) || (_source$annotations = source.annotations) !== null && _source$annotations !== void 0 && (_source$annotations$C = _source$annotations.Common) !== null && _source$annotations$C !== void 0 && _source$annotations$C.QuickInfo) {
      var _source$annotations2, _source$annotations2$;
      return (_source$annotations2 = source.annotations) !== null && _source$annotations2 !== void 0 && (_source$annotations2$ = _source$annotations2.Common) !== null && _source$annotations2$ !== void 0 && _source$annotations2$.QuickInfo ? compileExpression(getExpressionFromAnnotation(source.annotations.Common.QuickInfo.valueOf())) : undefined;
    } else if (isDataFieldTypes(source)) {
      var _source$Value, _source$Value$$target, _source$Value$$target2, _source$Value$$target3;
      return (_source$Value = source.Value) !== null && _source$Value !== void 0 && (_source$Value$$target = _source$Value.$target) !== null && _source$Value$$target !== void 0 && (_source$Value$$target2 = _source$Value$$target.annotations) !== null && _source$Value$$target2 !== void 0 && (_source$Value$$target3 = _source$Value$$target2.Common) !== null && _source$Value$$target3 !== void 0 && _source$Value$$target3.QuickInfo ? compileExpression(getExpressionFromAnnotation(source.Value.$target.annotations.Common.QuickInfo.valueOf())) : undefined;
    } else if (source.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation") {
      var _source$Target, _datapointTarget$Valu, _datapointTarget$Valu2, _datapointTarget$Valu3, _datapointTarget$Valu4;
      const datapointTarget = (_source$Target = source.Target) === null || _source$Target === void 0 ? void 0 : _source$Target.$target;
      return datapointTarget !== null && datapointTarget !== void 0 && (_datapointTarget$Valu = datapointTarget.Value) !== null && _datapointTarget$Valu !== void 0 && (_datapointTarget$Valu2 = _datapointTarget$Valu.$target) !== null && _datapointTarget$Valu2 !== void 0 && (_datapointTarget$Valu3 = _datapointTarget$Valu2.annotations) !== null && _datapointTarget$Valu3 !== void 0 && (_datapointTarget$Valu4 = _datapointTarget$Valu3.Common) !== null && _datapointTarget$Valu4 !== void 0 && _datapointTarget$Valu4.QuickInfo ? compileExpression(getExpressionFromAnnotation(datapointTarget.Value.$target.annotations.Common.QuickInfo.valueOf())) : undefined;
    } else {
      return undefined;
    }
  };
  function getRowStatusVisibility(colName, isSemanticKeyInFieldGroup) {
    return formatResult([pathInModel(`semanticKeyHasDraftIndicator`, "internal"), pathInModel(`filteredMessages`, "internal"), colName, isSemanticKeyInFieldGroup], tableFormatters.getErrorStatusTextVisibilityFormatter);
  }

  /**
   * Creates a PropertyInfo for each identified property consumed by a LineItem.
   *
   * @param columnsToBeCreated Identified properties.
   * @param existingColumns The list of columns created for LineItems and Properties of entityType.
   * @param nonSortableColumns The array of column names which cannot be sorted.
   * @param converterContext The converter context.
   * @param entityType The entity type for the LineItem
   * @param textOnlyColumnsFromTextAnnotation The array of columns from a property using a text annotation with textOnly as text arrangement.
   * @returns The array of columns created.
   */
  _exports.getRowStatusVisibility = getRowStatusVisibility;
  const _createRelatedColumns = function (columnsToBeCreated, existingColumns, nonSortableColumns, converterContext, entityType, textOnlyColumnsFromTextAnnotation) {
    const relatedColumns = [];
    const relatedPropertyNameMap = {};
    const aggregationHelper = new AggregationHelper(entityType, converterContext);
    Object.keys(columnsToBeCreated).forEach(name => {
      const property = columnsToBeCreated[name],
        annotationPath = converterContext.getAbsoluteAnnotationPath(name),
        // Check whether the related column already exists.
        relatedColumn = existingColumns.find(column => column.name === name);
      if (relatedColumn === undefined) {
        // Case 1: Key contains DataField prefix to ensure all property columns have the same key format.
        // New created property column is set to hidden.
        const column = getColumnDefinitionFromProperty(property, annotationPath, name, true, false, nonSortableColumns, aggregationHelper, converterContext, textOnlyColumnsFromTextAnnotation);
        column.isPartOfLineItem = existingColumns.some(existingColumn => {
          var _existingColumn$prope;
          return ((_existingColumn$prope = existingColumn.propertyInfos) === null || _existingColumn$prope === void 0 ? void 0 : _existingColumn$prope.includes(name)) && existingColumn.isPartOfLineItem;
        });
        relatedColumns.push(column);
      } else if (relatedColumn.annotationPath !== annotationPath || relatedColumn.propertyInfos) {
        // Case 2: The existing column points to a LineItem (or)
        // Case 3: This is a self reference from an existing column

        const newName = `Property::${name}`;

        // Checking whether the related property column has already been created in a previous iteration.
        if (!existingColumns.some(column => column.name === newName)) {
          // Create a new property column with 'Property::' prefix,
          // Set it to hidden as it is only consumed by Complex property infos.
          const column = getColumnDefinitionFromProperty(property, annotationPath, name, false, false, nonSortableColumns, aggregationHelper, converterContext, textOnlyColumnsFromTextAnnotation);
          column.isPartOfLineItem = relatedColumn.isPartOfLineItem;
          relatedColumns.push(column);
          relatedPropertyNameMap[name] = newName;
        } else if (existingColumns.some(column => column.name === newName) && existingColumns.some(column => {
          var _column$propertyInfos;
          return (_column$propertyInfos = column.propertyInfos) === null || _column$propertyInfos === void 0 ? void 0 : _column$propertyInfos.includes(name);
        })) {
          relatedPropertyNameMap[name] = newName;
        }
      }
    });

    // The property 'name' has been prefixed with 'Property::' for uniqueness.
    // Update the same in other propertyInfos[] references which point to this property.
    existingColumns.forEach(column => {
      var _column$propertyInfos2, _column$additionalPro;
      column.propertyInfos = (_column$propertyInfos2 = column.propertyInfos) === null || _column$propertyInfos2 === void 0 ? void 0 : _column$propertyInfos2.map(propertyInfo => relatedPropertyNameMap[propertyInfo] ?? propertyInfo);
      column.additionalPropertyInfos = (_column$additionalPro = column.additionalPropertyInfos) === null || _column$additionalPro === void 0 ? void 0 : _column$additionalPro.map(propertyInfo => relatedPropertyNameMap[propertyInfo] ?? propertyInfo);
    });
    return relatedColumns;
  };

  /**
   * Getting the Column Name
   * If it points to a DataField with one property or DataPoint with one property, it will use the property name
   * here to be consistent with the existing flex changes.
   *
   * @param dataField Different DataField types defined in the annotations
   * @returns The name of annotation columns
   * @private
   */
  const _getAnnotationColumnName = function (dataField) {
    var _dataField$Value, _dataField$Target, _dataField$Target$$ta, _dataField$Target$$ta2;
    // This is needed as we have flexibility changes already that we have to check against
    if (isDataFieldTypes(dataField) && (_dataField$Value = dataField.Value) !== null && _dataField$Value !== void 0 && _dataField$Value.path) {
      var _dataField$Value2;
      return (_dataField$Value2 = dataField.Value) === null || _dataField$Value2 === void 0 ? void 0 : _dataField$Value2.path;
    } else if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && (_dataField$Target = dataField.Target) !== null && _dataField$Target !== void 0 && (_dataField$Target$$ta = _dataField$Target.$target) !== null && _dataField$Target$$ta !== void 0 && (_dataField$Target$$ta2 = _dataField$Target$$ta.Value) !== null && _dataField$Target$$ta2 !== void 0 && _dataField$Target$$ta2.path) {
      var _dataField$Target2, _dataField$Target2$$t;
      // This is for removing duplicate properties. For example, 'Progress' Property is removed if it is already defined as a DataPoint
      return (_dataField$Target2 = dataField.Target) === null || _dataField$Target2 === void 0 ? void 0 : (_dataField$Target2$$t = _dataField$Target2.$target) === null || _dataField$Target2$$t === void 0 ? void 0 : _dataField$Target2$$t.Value.path;
    } else {
      return KeyHelper.generateKeyFromDataField(dataField);
    }
  };

  /**
   * Creates a PropertyInfo for the identified additional property for the ALP table use-case.
   *
   * For e.g. If UI.Hidden points to a property, include this technical property in the additionalProperties of ComplexPropertyInfo object.
   *
   * @param name The name of the property to be created.
   * @param columns The list of columns created for LineItems and Properties of entityType from the table visualization.
   * @returns The propertyInfo of the technical property to be added to the list of columns.
   * @private
   */

  const createTechnicalProperty = function (name, columns, relatedAdditionalPropertyNameMap) {
    const key = `Property_Technical::${name}`;
    // Validate if the technical property hasn't yet been created on previous iterations.
    const columnExists = columns.find(column => column.key === key);
    // Retrieve the simple property used by the hidden annotation, it will be used as a base for the mandatory attributes of newly created technical property. For e.g. relativePath
    const additionalProperty = !columnExists && columns.find(column => column.name === name && !column.propertyInfos);
    if (additionalProperty) {
      const technicalColumn = {
        key: key,
        type: ColumnType.Annotation,
        label: additionalProperty.label,
        annotationPath: additionalProperty.annotationPath,
        availability: "Hidden",
        name: key,
        relativePath: additionalProperty.relativePath,
        sortable: false,
        isGroupable: false,
        isKey: false,
        exportSettings: null,
        caseSensitive: false,
        aggregatable: false,
        extension: {
          technicallyGroupable: true,
          technicallyAggregatable: true
        }
      };
      columns.push(technicalColumn);
      relatedAdditionalPropertyNameMap[name] = technicalColumn.name;
    }
  };

  /**
   * Determines if the data field labels have to be displayed in the table.
   *
   * @param fieldGroupName The `DataField` name being processed.
   * @param visualizationPath
   * @param converterContext
   * @returns `showDataFieldsLabel` value from the manifest
   * @private
   */
  const _getShowDataFieldsLabel = function (fieldGroupName, visualizationPath, converterContext) {
    var _converterContext$get15;
    const oColumns = (_converterContext$get15 = converterContext.getManifestControlConfiguration(visualizationPath)) === null || _converterContext$get15 === void 0 ? void 0 : _converterContext$get15.columns;
    const aColumnKeys = oColumns && Object.keys(oColumns);
    return aColumnKeys && !!aColumnKeys.find(function (key) {
      return key === fieldGroupName && oColumns[key].showDataFieldsLabel;
    });
  };

  /**
   * Determines the relative path of the property with respect to the root entity.
   *
   * @param dataField The `DataField` being processed.
   * @returns The relative path
   */
  const _getRelativePath = function (dataField) {
    var _Value3, _dataField$Target3;
    let relativePath = "";
    switch (dataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        relativePath = dataField === null || dataField === void 0 ? void 0 : (_Value3 = dataField.Value) === null || _Value3 === void 0 ? void 0 : _Value3.path;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        relativePath = dataField === null || dataField === void 0 ? void 0 : (_dataField$Target3 = dataField.Target) === null || _dataField$Target3 === void 0 ? void 0 : _dataField$Target3.value;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAction":
      case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
      case "com.sap.vocabularies.UI.v1.DataFieldForActionGroup":
      case "com.sap.vocabularies.UI.v1.DataFieldWithActionGroup":
        relativePath = KeyHelper.generateKeyFromDataField(dataField);
        break;
    }
    return relativePath;
  };
  const _sliceAtSlash = function (path, isLastSlash, isLastPart) {
    const iSlashIndex = isLastSlash ? path.lastIndexOf("/") : path.indexOf("/");
    if (iSlashIndex === -1) {
      return path;
    }
    return isLastPart ? path.substring(iSlashIndex + 1, path.length) : path.substring(0, iSlashIndex);
  };

  /**
   * Determines if the column contains a multi-value field.
   *
   * @param dataField The DataField being processed
   * @param converterContext The converter context
   * @returns True if the DataField corresponds to a multi-value field.
   */
  const _isColumnMultiValued = function (dataField, converterContext) {
    if (isDataFieldTypes(dataField) && isPathAnnotationExpression(dataField.Value)) {
      const propertyObjectPath = enhanceDataModelPath(converterContext.getDataModelObjectPath(), dataField.Value.path);
      return isMultiValueField(propertyObjectPath);
    } else {
      return false;
    }
  };

  /**
   * Determine whether a column is sortable.
   *
   * @param dataField The data field being processed
   * @param propertyPath The property path
   * @param nonSortableColumns Collection of non-sortable column names as per annotation
   * @returns True if the column is sortable
   */
  const _isColumnSortable = function (dataField, propertyPath, nonSortableColumns) {
    return nonSortableColumns.indexOf(propertyPath) === -1 && (
    // Column is not marked as non-sortable via annotation
    dataField.$Type === "com.sap.vocabularies.UI.v1.DataField" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction");
  };

  /**
   * Returns whether filtering on the table is case sensitive.
   *
   * @param converterContext The instance of the converter context
   * @returns Returns 'false' if FilterFunctions annotation supports 'tolower', else 'true'
   */
  const isFilteringCaseSensitive = function (converterContext) {
    const filterFunctions = _getFilterFunctions(converterContext);
    return Array.isArray(filterFunctions) ? filterFunctions.indexOf("tolower") === -1 : true;
  };
  _exports.isFilteringCaseSensitive = isFilteringCaseSensitive;
  function _getFilterFunctions(ConverterContext) {
    const entitySet = ConverterContext.getEntitySet();
    if (TypeGuards.isEntitySet(entitySet)) {
      var _entitySet$annotation3, _ConverterContext$get;
      return ((_entitySet$annotation3 = entitySet.annotations.Capabilities) === null || _entitySet$annotation3 === void 0 ? void 0 : _entitySet$annotation3.FilterFunctions) ?? ((_ConverterContext$get = ConverterContext.getEntityContainer().annotations.Capabilities) === null || _ConverterContext$get === void 0 ? void 0 : _ConverterContext$get.FilterFunctions);
    }
    return undefined;
  }

  /**
   * Returns default format options for text fields in a table.
   *
   * @param formatOptions
   * @returns Collection of format options with default values
   */
  function _getDefaultFormatOptionsForTable(formatOptions) {
    return formatOptions === undefined ? undefined : {
      textLinesEdit: 4,
      ...formatOptions
    };
  }
  function _findSemanticKeyValues(semanticKeys, name) {
    const aSemanticKeyValues = [];
    let bSemanticKeyFound = false;
    for (let i = 0; i < semanticKeys.length; i++) {
      aSemanticKeyValues.push(semanticKeys[i].value);
      if (semanticKeys[i].value === name) {
        bSemanticKeyFound = true;
      }
    }
    return {
      values: aSemanticKeyValues,
      semanticKeyFound: bSemanticKeyFound
    };
  }
  function _findProperties(semanticKeyValues, fieldGroupProperties) {
    let semanticKeyHasPropertyInFieldGroup = false;
    let sPropertyPath;
    if (semanticKeyValues && semanticKeyValues.length >= 1 && fieldGroupProperties && fieldGroupProperties.length >= 1) {
      for (let i = 0; i < semanticKeyValues.length; i++) {
        if ([semanticKeyValues[i]].some(tmp => fieldGroupProperties.indexOf(tmp) >= 0)) {
          semanticKeyHasPropertyInFieldGroup = true;
          sPropertyPath = semanticKeyValues[i];
          break;
        }
      }
    }
    return {
      semanticKeyHasPropertyInFieldGroup: semanticKeyHasPropertyInFieldGroup,
      fieldGroupPropertyPath: sPropertyPath
    };
  }

  /**
   * Find the first property in the fieldGroup that is part of the semantic keys.
   *
   * @param dataFieldGroup
   * @param semanticKeyValues
   * @returns An object containing a flag true if a property is found and a propertyPath.
   */
  function _findSemanticKeyValuesInFieldGroup(dataFieldGroup, semanticKeyValues) {
    var _dataFieldGroup$Targe4, _dataFieldGroup$Targe5;
    // this info is used in FieldlHelper#isDraftIndicatorVisibleInFieldGroup to show a draft indicator at the end of a field group
    const aProperties = [];
    let _propertiesFound = {
      semanticKeyHasPropertyInFieldGroup: false,
      fieldGroupPropertyPath: undefined
    };
    if (dataFieldGroup && dataFieldGroup.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && ((_dataFieldGroup$Targe4 = dataFieldGroup.Target) === null || _dataFieldGroup$Targe4 === void 0 ? void 0 : (_dataFieldGroup$Targe5 = _dataFieldGroup$Targe4.$target) === null || _dataFieldGroup$Targe5 === void 0 ? void 0 : _dataFieldGroup$Targe5.$Type) === "com.sap.vocabularies.UI.v1.FieldGroupType") {
      var _dataFieldGroup$Targe6;
      (_dataFieldGroup$Targe6 = dataFieldGroup.Target.$target.Data) === null || _dataFieldGroup$Targe6 === void 0 ? void 0 : _dataFieldGroup$Targe6.forEach(innerDataField => {
        if ((innerDataField.$Type === "com.sap.vocabularies.UI.v1.DataField" || innerDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && innerDataField.Value) {
          aProperties.push(innerDataField.Value.path);
        }
        _propertiesFound = _findProperties(semanticKeyValues, aProperties);
      });
    }
    return {
      semanticKeyHasPropertyInFieldGroup: _propertiesFound.semanticKeyHasPropertyInFieldGroup,
      propertyPath: _propertiesFound.fieldGroupPropertyPath
    };
  }

  /**
   * Returns default format options with draftIndicator for a column.
   *
   * @param name
   * @param semanticKeys
   * @param isFieldGroupColumn
   * @param dataFieldGroup
   * @returns Collection of format options with default values
   */
  function getDefaultDraftIndicatorForColumn(name, semanticKeys, isFieldGroupColumn, dataFieldGroup) {
    if (!semanticKeys) {
      return {};
    }
    const semanticKey = _findSemanticKeyValues(semanticKeys, name);
    const semanticKeyInFieldGroup = _findSemanticKeyValuesInFieldGroup(dataFieldGroup, semanticKey.values);
    if (semanticKeyInFieldGroup.semanticKeyHasPropertyInFieldGroup) {
      // Semantic Key has a property in a FieldGroup
      return {
        //TODO we should rather store hasSemanticKeyInFieldGroup
        fieldGroupDraftIndicatorPropertyPath: semanticKeyInFieldGroup.propertyPath,
        fieldGroupName: name,
        showErrorObjectStatus: compileExpression(getRowStatusVisibility(name, true))
      };
    } else if (semanticKey.semanticKeyFound) {
      return {
        hasDraftIndicator: true,
        showErrorObjectStatus: compileExpression(getRowStatusVisibility(name, false))
      };
    }
    return {};
  }
  function _getImpNumber(dataField) {
    var _dataField$annotation17, _dataField$annotation18;
    const importance = dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation17 = dataField.annotations) === null || _dataField$annotation17 === void 0 ? void 0 : (_dataField$annotation18 = _dataField$annotation17.UI) === null || _dataField$annotation18 === void 0 ? void 0 : _dataField$annotation18.Importance;
    if (importance && importance.includes("UI.ImportanceType/High")) {
      return 3;
    }
    if (importance && importance.includes("UI.ImportanceType/Medium")) {
      return 2;
    }
    if (importance && importance.includes("UI.ImportanceType/Low")) {
      return 1;
    }
    return 0;
  }
  function _getDataFieldImportance(dataField) {
    var _dataField$annotation19, _dataField$annotation20;
    const importance = dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation19 = dataField.annotations) === null || _dataField$annotation19 === void 0 ? void 0 : (_dataField$annotation20 = _dataField$annotation19.UI) === null || _dataField$annotation20 === void 0 ? void 0 : _dataField$annotation20.Importance;
    return importance ? importance.split("/")[1] : Importance.None;
  }
  function _getMaxImportance(fields) {
    if (fields && fields.length > 0) {
      let maxImpNumber = -1;
      let impNumber = -1;
      let DataFieldWithMaxImportance;
      for (const field of fields) {
        impNumber = _getImpNumber(field);
        if (impNumber > maxImpNumber) {
          maxImpNumber = impNumber;
          DataFieldWithMaxImportance = field;
        }
      }
      return _getDataFieldImportance(DataFieldWithMaxImportance);
    }
    return Importance.None;
  }

  /**
   * Returns the importance value for a column.
   *
   * @param dataField
   * @param semanticKeys
   * @returns The importance value
   */
  function getImportance(dataField, semanticKeys) {
    var _Value6;
    //Evaluate default Importance is not set explicitly
    let fieldsWithImportance,
      mapSemanticKeys = [];
    //Check if semanticKeys are defined at the EntitySet level
    if (semanticKeys && semanticKeys.length > 0) {
      mapSemanticKeys = semanticKeys.map(function (key) {
        return key.value;
      });
    }
    if (!dataField) {
      return undefined;
    }
    if (isAnnotationOfType(dataField, "com.sap.vocabularies.UI.v1.DataFieldForAnnotation")) {
      const dataFieldTarget = dataField.Target.$target;
      if (isAnnotationOfType(dataFieldTarget, "com.sap.vocabularies.UI.v1.FieldGroupType")) {
        const fieldGroupData = dataFieldTarget.Data;
        const fieldGroupHasSemanticKey = fieldGroupData && fieldGroupData.some(function (fieldGroupDataField) {
          var _Value4, _Value5;
          return (fieldGroupDataField === null || fieldGroupDataField === void 0 ? void 0 : (_Value4 = fieldGroupDataField.Value) === null || _Value4 === void 0 ? void 0 : _Value4.path) && fieldGroupDataField.$Type !== "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && mapSemanticKeys.includes(fieldGroupDataField === null || fieldGroupDataField === void 0 ? void 0 : (_Value5 = fieldGroupDataField.Value) === null || _Value5 === void 0 ? void 0 : _Value5.path);
        });
        //If a FieldGroup contains a semanticKey, importance set to High
        if (fieldGroupHasSemanticKey) {
          return Importance.High;
        } else {
          var _dataField$annotation21, _dataField$annotation22;
          //If the DataFieldForAnnotation has an Importance we take it
          if (dataField !== null && dataField !== void 0 && (_dataField$annotation21 = dataField.annotations) !== null && _dataField$annotation21 !== void 0 && (_dataField$annotation22 = _dataField$annotation21.UI) !== null && _dataField$annotation22 !== void 0 && _dataField$annotation22.Importance) {
            return _getDataFieldImportance(dataField);
          }
          // else the highest importance (if any) is returned
          fieldsWithImportance = fieldGroupData && fieldGroupData.filter(function (item) {
            var _item$annotations, _item$annotations$UI;
            return item === null || item === void 0 ? void 0 : (_item$annotations = item.annotations) === null || _item$annotations === void 0 ? void 0 : (_item$annotations$UI = _item$annotations.UI) === null || _item$annotations$UI === void 0 ? void 0 : _item$annotations$UI.Importance;
          });
          return _getMaxImportance(fieldsWithImportance);
        }
        //If the current field is a semanticKey, importance set to High
      }
    }

    return dataField.Value && dataField !== null && dataField !== void 0 && (_Value6 = dataField.Value) !== null && _Value6 !== void 0 && _Value6.path && mapSemanticKeys.includes(dataField.Value.path) ? Importance.High : _getDataFieldImportance(dataField);
  }

  /**
   * Checks if displaying of the column is supported for an insights card.
   *
   * @param dataField
   * @param sLabel
   * @param converterContext
   * @param isMultiValue
   * @returns True if displaying of the column is supported for an insights card.
   */
  _exports.getImportance = getImportance;
  const checkIfColumnIsSupportedForInsights = function (dataField, sLabel, converterContext, isMultiValue) {
    const annotationPath = converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName);
    if (sLabel && sLabel !== "" && annotationPath.indexOf("@com.sap.vocabularies.UI.v1.LineItem") !== -1 && isDataFieldTypes(dataField)) {
      var _dataField$Value3;
      // include only those columns that are annotated as part of the table (skip entity props)
      const isImageColumn = (_dataField$Value3 = dataField.Value) !== null && _dataField$Value3 !== void 0 && _dataField$Value3.$target ? isImageURL(dataField.Value.$target) : false;
      return !isMultiValue && !isImageColumn;
    }
    return false;
  };

  /**
   * Returns line items from metadata annotations.
   *
   * @param lineItemAnnotation Collection of data fields with their annotations
   * @param visualizationPath The visualization path
   * @param converterContext The converter context
   * @param isInsightsEnabled
   * @returns The columns from the annotations
   */
  const getColumnsFromAnnotations = function (lineItemAnnotation, visualizationPath, converterContext, isInsightsEnabled) {
    var _tableManifestSetting2;
    const entityType = converterContext.getAnnotationEntityType(lineItemAnnotation),
      annotationColumns = [],
      columnsToBeCreated = {},
      nonSortableColumns = getNonSortablePropertiesRestrictions(converterContext.getEntitySet()),
      tableManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath),
      tableType = (tableManifestSettings === null || tableManifestSettings === void 0 ? void 0 : (_tableManifestSetting2 = tableManifestSettings.tableSettings) === null || _tableManifestSetting2 === void 0 ? void 0 : _tableManifestSetting2.type) || "ResponsiveTable";
    const textOnlyColumnsFromTextAnnotation = [];
    const semanticKeys = converterContext.getAnnotationsByTerm("Common", "com.sap.vocabularies.Common.v1.SemanticKey", [converterContext.getEntityType()])[0];
    if (lineItemAnnotation) {
      const tableConverterContext = converterContext.getConverterContextFor(getTargetObjectPath(converterContext.getDataModelObjectPath()));
      lineItemAnnotation.forEach(lineItem => {
        var _lineItem$Value, _lineItem$Value$$targ, _lineItem$Target, _lineItem$Target$$tar, _propertyTypeConfig, _propertyTypeConfig2, _tableManifestConfig$, _lineItem$annotations, _lineItem$annotations2, _lineItem$annotations3, _lineItem$annotations4, _exportSettings;
        // TODO: variable name should be datafield and not lineItem
        if (!_isValidColumn(lineItem)) {
          return;
        }
        let exportSettings = null;
        const semanticObjectAnnotationPath = isDataFieldTypes(lineItem) && (_lineItem$Value = lineItem.Value) !== null && _lineItem$Value !== void 0 && (_lineItem$Value$$targ = _lineItem$Value.$target) !== null && _lineItem$Value$$targ !== void 0 && _lineItem$Value$$targ.fullyQualifiedName ? getSemanticObjectPath(converterContext, lineItem) : undefined;
        const relativePath = _getRelativePath(lineItem);
        // Determine properties which are consumed by this LineItem.
        const relatedPropertiesInfo = collectRelatedPropertiesRecursively(lineItem, converterContext, tableType);
        const relatedPropertyNames = Object.keys(relatedPropertiesInfo.properties);
        const additionalPropertyNames = Object.keys(relatedPropertiesInfo.additionalProperties);
        const groupPath = relativePath ? _sliceAtSlash(relativePath, true, false) : undefined;
        const isGroup = groupPath != relativePath;
        const sLabel = getLabel(lineItem, isGroup);
        const name = _getAnnotationColumnName(lineItem);
        const isFieldGroupColumn = groupPath ? groupPath.indexOf(`@${"com.sap.vocabularies.UI.v1.FieldGroup"}`) > -1 : false;
        const showDataFieldsLabel = isFieldGroupColumn ? _getShowDataFieldsLabel(name, visualizationPath, converterContext) : false;
        const dataType = getDataFieldDataType(lineItem);
        const sDateInputFormat = dataType === "Edm.Date" ? "YYYY-MM-DD" : undefined;
        const formatOptions = _getDefaultFormatOptionsForTable(getDefaultDraftIndicatorForColumn(name, semanticKeys, isFieldGroupColumn, lineItem));
        let fieldGroupHiddenExpressions;
        if (lineItem.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && ((_lineItem$Target = lineItem.Target) === null || _lineItem$Target === void 0 ? void 0 : (_lineItem$Target$$tar = _lineItem$Target.$target) === null || _lineItem$Target$$tar === void 0 ? void 0 : _lineItem$Target$$tar.$Type) === "com.sap.vocabularies.UI.v1.FieldGroupType") {
          fieldGroupHiddenExpressions = _getFieldGroupHiddenExpressions(lineItem);
        }
        if (_isExportableColumn(lineItem)) {
          //exclude the types listed above for the Export (generates error on Export as PDF)
          exportSettings = {
            template: relatedPropertiesInfo.exportSettingsTemplate,
            wrap: relatedPropertiesInfo.exportSettingsWrapping,
            type: dataType ? _getExportDataType(dataType, relatedPropertyNames.length > 1) : undefined,
            inputFormat: sDateInputFormat,
            delimiter: dataType === "Edm.Int64"
          };
          if (relatedPropertiesInfo.exportUnitName) {
            exportSettings.unitProperty = relatedPropertiesInfo.exportUnitName;
            exportSettings.type = "Currency"; // Force to a currency because there's a unitProperty (otherwise the value isn't properly formatted when exported)
          } else if (relatedPropertiesInfo.exportUnitString) {
            exportSettings.unit = relatedPropertiesInfo.exportUnitString;
          }
          if (relatedPropertiesInfo.exportTimezoneName) {
            exportSettings.timezoneProperty = relatedPropertiesInfo.exportTimezoneName;
          } else if (relatedPropertiesInfo.exportTimezoneString) {
            exportSettings.timezone = relatedPropertiesInfo.exportTimezoneString;
          }
        }
        let propertyTypeConfig;
        if (dataType) {
          propertyTypeConfig = getTypeConfig(lineItem, dataType);
        }
        const typeConfig = {
          className: dataType,
          formatOptions: {
            ...formatOptions,
            ...((_propertyTypeConfig = propertyTypeConfig) === null || _propertyTypeConfig === void 0 ? void 0 : _propertyTypeConfig.formatOptions)
          },
          constraints: {
            ...((_propertyTypeConfig2 = propertyTypeConfig) === null || _propertyTypeConfig2 === void 0 ? void 0 : _propertyTypeConfig2.constraints)
          }
        };
        const visualSettings = {};
        if (!dataType || !typeConfig) {
          // for charts
          visualSettings.widthCalculation = null;
        }
        const isMultiValue = _isColumnMultiValued(lineItem, tableConverterContext);
        const sortable = !isMultiValue && _isColumnSortable(lineItem, relativePath, nonSortableColumns);
        const tableManifestConfig = converterContext.getManifestControlConfiguration(visualizationPath);
        const enableAddCardToInsights = ((_tableManifestConfig$ = tableManifestConfig.tableSettings) === null || _tableManifestConfig$ === void 0 ? void 0 : _tableManifestConfig$.enableAddCardToInsights) ?? true;
        const column = {
          key: KeyHelper.generateKeyFromDataField(lineItem),
          type: ColumnType.Annotation,
          label: sLabel,
          groupLabel: isGroup ? getLabel(lineItem) : undefined,
          group: isGroup ? groupPath : undefined,
          FieldGroupHiddenExpressions: fieldGroupHiddenExpressions,
          annotationPath: converterContext.getEntitySetBasedAnnotationPath(lineItem.fullyQualifiedName),
          semanticObjectPath: semanticObjectAnnotationPath,
          availability: isReferencePropertyStaticallyHidden(lineItem) ? "Hidden" : "Default",
          name: name,
          showDataFieldsLabel: showDataFieldsLabel,
          relativePath: relativePath,
          sortable: sortable,
          propertyInfos: relatedPropertyNames.length ? relatedPropertyNames : undefined,
          additionalPropertyInfos: additionalPropertyNames.length > 0 ? additionalPropertyNames : undefined,
          exportSettings: exportSettings,
          width: ((_lineItem$annotations = lineItem.annotations) === null || _lineItem$annotations === void 0 ? void 0 : (_lineItem$annotations2 = _lineItem$annotations.HTML5) === null || _lineItem$annotations2 === void 0 ? void 0 : (_lineItem$annotations3 = _lineItem$annotations2.CssDefaults) === null || _lineItem$annotations3 === void 0 ? void 0 : (_lineItem$annotations4 = _lineItem$annotations3.width) === null || _lineItem$annotations4 === void 0 ? void 0 : _lineItem$annotations4.valueOf()) || undefined,
          importance: getImportance(lineItem, semanticKeys),
          isNavigable: true,
          formatOptions: formatOptions,
          caseSensitive: isFilteringCaseSensitive(converterContext),
          typeConfig: typeConfig,
          visualSettings: visualSettings,
          timezoneText: (_exportSettings = exportSettings) === null || _exportSettings === void 0 ? void 0 : _exportSettings.timezone,
          isPartOfLineItem: true
        };
        column.isInsightsSupported = enableAddCardToInsights === true && isInsightsEnabled === true && checkIfColumnIsSupportedForInsights(lineItem, sLabel, converterContext, isMultiValue);
        const sTooltip = _getTooltip(lineItem) || sLabel;
        if (sTooltip) {
          column.tooltip = sTooltip;
        }
        if (relatedPropertiesInfo.textOnlyPropertiesFromTextAnnotation.length > 0) {
          textOnlyColumnsFromTextAnnotation.push(...relatedPropertiesInfo.textOnlyPropertiesFromTextAnnotation);
        }
        if (relatedPropertiesInfo.exportDataPointTargetValue && column.exportSettings) {
          column.exportDataPointTargetValue = relatedPropertiesInfo.exportDataPointTargetValue;
          column.exportSettings.type = "String";
        }
        annotationColumns.push(column);

        // Collect information of related columns to be created.
        relatedPropertyNames.forEach(relatedPropertyName => {
          columnsToBeCreated[relatedPropertyName] = relatedPropertiesInfo.properties[relatedPropertyName];

          // In case of a multi-value, related properties cannot be sorted as we go through a 1-n relation
          if (isMultiValue) {
            nonSortableColumns.push(relatedPropertyName);
          }
        });

        // Create columns for additional properties identified for ALP use case.
        additionalPropertyNames.forEach(additionalPropertyName => {
          // Intentional overwrite as we require only one new PropertyInfo for a related Property.
          columnsToBeCreated[additionalPropertyName] = relatedPropertiesInfo.additionalProperties[additionalPropertyName];
        });
      });
    }

    // Get columns from the Properties of EntityType
    return getColumnsFromEntityType(columnsToBeCreated, entityType, annotationColumns, nonSortableColumns, converterContext, tableType, textOnlyColumnsFromTextAnnotation);
  };

  /**
   * Gets the property names from the manifest and checks against existing properties already added by annotations.
   * If a not yet stored property is found it adds it for sorting and filtering only to the annotationColumns.
   *
   * @param properties
   * @param annotationColumns
   * @param converterContext
   * @param entityType
   * @returns The columns from the annotations
   */
  const _getPropertyNames = function (properties, annotationColumns, converterContext, entityType) {
    let matchedProperties;
    if (properties) {
      matchedProperties = properties.map(function (propertyPath) {
        const annotationColumn = annotationColumns.find(function (annotationColumn) {
          return annotationColumn.relativePath === propertyPath && annotationColumn.propertyInfos === undefined;
        });
        if (annotationColumn) {
          return annotationColumn.name;
        } else {
          const relatedColumns = _createRelatedColumns({
            [propertyPath]: entityType.resolvePath(propertyPath)
          }, annotationColumns, [], converterContext, entityType, []);
          annotationColumns.push(relatedColumns[0]);
          return relatedColumns[0].name;
        }
      });
    }
    return matchedProperties;
  };
  const _appendCustomTemplate = function (properties) {
    return properties.map(property => {
      return `{${properties.indexOf(property)}}`;
    }).join(`${"\n"}`);
  };

  /**
   * Returns table column definitions from manifest.
   *
   * These may be custom columns defined in the manifest, slot columns coming through
   * a building block, or annotation columns to overwrite annotation-based columns.
   *
   * @param columns
   * @param annotationColumns
   * @param converterContext
   * @param entityType
   * @param navigationSettings
   * @returns The columns from the manifest
   */
  const getColumnsFromManifest = function (columns, annotationColumns, converterContext, entityType, navigationSettings) {
    const internalColumns = {};
    function isAnnotationColumn(column, key) {
      return annotationColumns.some(annotationColumn => annotationColumn.key === key);
    }
    function isSlotColumn(manifestColumn) {
      return manifestColumn.type === ColumnType.Slot;
    }
    function isCustomColumn(manifestColumn) {
      return manifestColumn.type === undefined && !!manifestColumn.template;
    }
    function _updateLinkedPropertiesOnCustomColumns(propertyInfos, annotationTableColumns) {
      const nonSortableColumns = getNonSortablePropertiesRestrictions(converterContext.getEntitySet());
      propertyInfos.forEach(property => {
        annotationTableColumns.forEach(prop => {
          if (prop.name === property) {
            prop.sortable = nonSortableColumns.indexOf(property.replace("Property::", "")) === -1;
            prop.isGroupable = prop.sortable;
          }
        });
      });
    }
    for (const key in columns) {
      var _manifestColumn$posit;
      const manifestColumn = columns[key];
      KeyHelper.validateKey(key);

      // BaseTableColumn
      const baseTableColumn = {
        key: key,
        width: manifestColumn.width || undefined,
        position: {
          anchor: (_manifestColumn$posit = manifestColumn.position) === null || _manifestColumn$posit === void 0 ? void 0 : _manifestColumn$posit.anchor,
          placement: manifestColumn.position === undefined ? Placement.After : manifestColumn.position.placement
        },
        caseSensitive: isFilteringCaseSensitive(converterContext)
      };
      if (isAnnotationColumn(manifestColumn, key)) {
        const propertiesToOverwriteAnnotationColumn = {
          ...baseTableColumn,
          importance: manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.importance,
          horizontalAlign: manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.horizontalAlign,
          availability: manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.availability,
          type: ColumnType.Annotation,
          isNavigable: isAnnotationColumn(manifestColumn, key) ? undefined : isActionNavigable(manifestColumn, navigationSettings, true),
          settings: manifestColumn.settings,
          formatOptions: _getDefaultFormatOptionsForTable(manifestColumn.formatOptions)
        };
        internalColumns[key] = propertiesToOverwriteAnnotationColumn;
      } else {
        var _manifestColumn$heade;
        const propertyInfos = _getPropertyNames(manifestColumn.properties, annotationColumns, converterContext, entityType);
        const baseManifestColumn = {
          ...baseTableColumn,
          header: manifestColumn.header,
          importance: (manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.importance) || Importance.None,
          horizontalAlign: (manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.horizontalAlign) || HorizontalAlign.Begin,
          availability: (manifestColumn === null || manifestColumn === void 0 ? void 0 : manifestColumn.availability) || "Default",
          template: manifestColumn.template,
          propertyInfos: propertyInfos,
          exportSettings: propertyInfos ? {
            template: _appendCustomTemplate(propertyInfos),
            wrap: !!(propertyInfos.length > 1)
          } : null,
          id: `CustomColumn::${key}`,
          name: `CustomColumn::${key}`,
          //Needed for MDC:
          formatOptions: {
            textLinesEdit: 4
          },
          isGroupable: false,
          isNavigable: false,
          sortable: false,
          visualSettings: {
            widthCalculation: null
          },
          properties: manifestColumn.properties,
          tooltip: manifestColumn.header
        };
        if ((_manifestColumn$heade = manifestColumn.header) !== null && _manifestColumn$heade !== void 0 && _manifestColumn$heade.startsWith("{metaModel>")) {
          var _manifestColumn$heade2, _manifestColumn$heade3;
          const metaModelPath = (_manifestColumn$heade2 = manifestColumn.header) === null || _manifestColumn$heade2 === void 0 ? void 0 : _manifestColumn$heade2.substring(11, ((_manifestColumn$heade3 = manifestColumn.header) === null || _manifestColumn$heade3 === void 0 ? void 0 : _manifestColumn$heade3.length) - 1);
          try {
            baseManifestColumn.header = converterContext.getEntityTypeAnnotation(metaModelPath).annotation.toString();
          } catch (e) {
            Log.info(`Unable to retrieve text from meta model using path ${metaModelPath}`);
          }
        }
        if (propertyInfos) {
          _updateLinkedPropertiesOnCustomColumns(propertyInfos, annotationColumns);
        }
        if (isSlotColumn(manifestColumn)) {
          const customTableColumn = {
            ...baseManifestColumn,
            type: ColumnType.Slot
          };
          internalColumns[key] = customTableColumn;
        } else if (isCustomColumn(manifestColumn)) {
          const customTableColumn = {
            ...baseManifestColumn,
            type: ColumnType.Default
          };
          internalColumns[key] = customTableColumn;
        } else {
          var _IssueCategoryType$An;
          const message = `The annotation column '${key}' referenced in the manifest is not found`;
          converterContext.getDiagnostics().addIssue(IssueCategory.Manifest, IssueSeverity.Low, message, IssueCategoryType, IssueCategoryType === null || IssueCategoryType === void 0 ? void 0 : (_IssueCategoryType$An = IssueCategoryType.AnnotationColumns) === null || _IssueCategoryType$An === void 0 ? void 0 : _IssueCategoryType$An.InvalidKey);
        }
      }
    }
    return internalColumns;
  };
  function getP13nMode(visualizationPath, converterContext, tableManifestConfiguration) {
    var _tableManifestSetting3;
    const manifestWrapper = converterContext.getManifestWrapper();
    const tableManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath);
    const variantManagement = manifestWrapper.getVariantManagement();
    const aPersonalization = [];
    const isAnalyticalTable = tableManifestConfiguration.type === "AnalyticalTable";
    const isResponsiveTable = tableManifestConfiguration.type === "ResponsiveTable";
    if ((tableManifestSettings === null || tableManifestSettings === void 0 ? void 0 : (_tableManifestSetting3 = tableManifestSettings.tableSettings) === null || _tableManifestSetting3 === void 0 ? void 0 : _tableManifestSetting3.personalization) !== undefined) {
      // Personalization configured in manifest.
      const personalization = tableManifestSettings.tableSettings.personalization;
      if (personalization === true) {
        // Table personalization fully enabled.
        switch (tableManifestConfiguration.type) {
          case "AnalyticalTable":
            return "Sort,Column,Filter,Group,Aggregate";
          case "ResponsiveTable":
            return "Sort,Column,Filter,Group";
          default:
            return "Sort,Column,Filter";
        }
      } else if (typeof personalization === "object") {
        // Specific personalization options enabled in manifest. Use them as is.
        if (personalization.sort) {
          aPersonalization.push("Sort");
        }
        if (personalization.column) {
          aPersonalization.push("Column");
        }
        if (personalization.filter) {
          aPersonalization.push("Filter");
        }
        if (personalization.group && (isAnalyticalTable || isResponsiveTable)) {
          aPersonalization.push("Group");
        }
        if (personalization.aggregate && isAnalyticalTable) {
          aPersonalization.push("Aggregate");
        }
        return aPersonalization.length > 0 ? aPersonalization.join(",") : undefined;
      }
    } else {
      // No personalization configured in manifest.
      aPersonalization.push("Sort");
      aPersonalization.push("Column");
      if (converterContext.getTemplateType() === TemplateType.ListReport) {
        if (variantManagement === VariantManagementType.Control || _isFilterBarHidden(manifestWrapper, converterContext)) {
          // Feature parity with V2.
          // Enable table filtering by default only in case of Control level variant management.
          // Or when the LR filter bar is hidden via manifest setting
          aPersonalization.push("Filter");
        }
      } else {
        aPersonalization.push("Filter");
      }
      if (isAnalyticalTable) {
        aPersonalization.push("Group");
        aPersonalization.push("Aggregate");
      }
      if (isResponsiveTable) {
        aPersonalization.push("Group");
      }
      return aPersonalization.join(",");
    }
    return undefined;
  }

  /**
   * Returns a Boolean value suggesting if a filter bar is being used on the page.
   *
   * Chart has a dependency to filter bar (issue with loading data). Once resolved, the check for chart should be removed here.
   * Until then, hiding filter bar is now allowed if a chart is being used on LR.
   *
   * @param manifestWrapper Manifest settings getter for the page
   * @param converterContext The instance of the converter context
   * @returns Boolean suggesting if a filter bar is being used on the page.
   */
  _exports.getP13nMode = getP13nMode;
  function _isFilterBarHidden(manifestWrapper, converterContext) {
    return manifestWrapper.isFilterBarHidden() && !converterContext.getManifestWrapper().hasMultipleVisualizations() && converterContext.getTemplateType() !== TemplateType.AnalyticalListPage;
  }

  /**
   * Returns a JSON string containing the sort conditions for the presentation variant.
   *
   * @param converterContext The instance of the converter context
   * @param presentationVariantAnnotation Presentation variant annotation
   * @param columns Table columns processed by the converter
   * @returns Sort conditions for a presentation variant.
   */
  function getSortConditions(converterContext, presentationVariantAnnotation, columns) {
    // Currently navigation property is not supported as sorter
    const nonSortableProperties = getNonSortablePropertiesRestrictions(converterContext.getEntitySet());
    let sortConditions;
    if (presentationVariantAnnotation !== null && presentationVariantAnnotation !== void 0 && presentationVariantAnnotation.SortOrder) {
      const sorters = [];
      const conditions = {
        sorters: sorters
      };
      presentationVariantAnnotation.SortOrder.forEach(condition => {
        var _conditionProperty$$t;
        const conditionProperty = condition.Property;
        if (conditionProperty && nonSortableProperties.indexOf((_conditionProperty$$t = conditionProperty.$target) === null || _conditionProperty$$t === void 0 ? void 0 : _conditionProperty$$t.name) === -1) {
          const infoName = convertPropertyPathsToInfoNames([conditionProperty], columns)[0];
          if (infoName) {
            conditions.sorters.push({
              name: infoName,
              descending: !!condition.Descending
            });
          }
        }
      });
      sortConditions = conditions.sorters.length ? JSON.stringify(conditions) : undefined;
    }
    return sortConditions;
  }
  function getInitialExpansionLevel(presentationVariantAnnotation) {
    var _presentationVariantA;
    if (!presentationVariantAnnotation) {
      return undefined;
    }
    const level = (_presentationVariantA = presentationVariantAnnotation.InitialExpansionLevel) === null || _presentationVariantA === void 0 ? void 0 : _presentationVariantA.valueOf();
    return typeof level === "number" ? level : undefined;
  }
  /**
   * Converts an array of propertyPath to an array of propertyInfo names.
   *
   * @param paths the array to be converted
   * @param columns the array of propertyInfos
   * @returns an array of propertyInfo names
   */

  function convertPropertyPathsToInfoNames(paths, columns) {
    const infoNames = [];
    let propertyInfo, annotationColumn;
    paths.forEach(currentPath => {
      if (currentPath !== null && currentPath !== void 0 && currentPath.value) {
        propertyInfo = columns.find(column => {
          annotationColumn = column;
          return !annotationColumn.propertyInfos && annotationColumn.relativePath === (currentPath === null || currentPath === void 0 ? void 0 : currentPath.value);
        });
        if (propertyInfo) {
          infoNames.push(propertyInfo.name);
        }
      }
    });
    return infoNames;
  }

  /**
   * Returns a JSON string containing Presentation Variant group conditions.
   *
   * @param presentationVariantAnnotation Presentation variant annotation
   * @param columns Converter processed table columns
   * @param tableType The table type.
   * @returns Group conditions for a Presentation variant.
   */
  function getGroupConditions(presentationVariantAnnotation, columns, tableType) {
    let groupConditions;
    if (presentationVariantAnnotation !== null && presentationVariantAnnotation !== void 0 && presentationVariantAnnotation.GroupBy) {
      let aGroupBy = presentationVariantAnnotation.GroupBy;
      if (tableType === "ResponsiveTable") {
        aGroupBy = aGroupBy.slice(0, 1);
      }
      const aGroupLevels = convertPropertyPathsToInfoNames(aGroupBy, columns).map(infoName => {
        return {
          name: infoName
        };
      });
      groupConditions = aGroupLevels.length ? JSON.stringify({
        groupLevels: aGroupLevels
      }) : undefined;
    }
    return groupConditions;
  }
  /**
   * Updates the column's propertyInfos of a analytical table integrating all extensions and binding-relevant property info part.
   *
   * @param tableVisualization The visualization to be updated
   */

  function _updatePropertyInfosWithAggregatesDefinitions(tableVisualization) {
    const relatedAdditionalPropertyNameMap = {};
    tableVisualization.columns.forEach(column => {
      var _column$additionalPro2;
      column = column;
      const aggregatablePropertyName = Object.keys(tableVisualization.aggregates).find(aggregate => aggregate === column.name);
      if (aggregatablePropertyName) {
        const aggregatablePropertyDefinition = tableVisualization.aggregates[aggregatablePropertyName];
        column.aggregatable = true;
        column.extension = {
          customAggregate: aggregatablePropertyDefinition.defaultAggregate ?? {}
        };
      }
      if ((_column$additionalPro2 = column.additionalPropertyInfos) !== null && _column$additionalPro2 !== void 0 && _column$additionalPro2.length) {
        column.additionalPropertyInfos.forEach(additionalPropertyInfo => {
          // Create propertyInfo for each additional property.
          // The new property 'name' has been prefixed with 'Property_Technical::' for uniqueness and it has been named technical property as it requires dedicated MDC attributes (technicallyGroupable and technicallyAggregatable).
          createTechnicalProperty(additionalPropertyInfo, tableVisualization.columns, relatedAdditionalPropertyNameMap);
        });
      }
    });
    tableVisualization.columns.forEach(column => {
      column = column;
      if (column.additionalPropertyInfos) {
        var _column$propertyInfos3;
        column.additionalPropertyInfos = column.additionalPropertyInfos.map(propertyInfo => relatedAdditionalPropertyNameMap[propertyInfo] ?? propertyInfo);
        // Add additional properties to the complex property using the hidden annotation.
        column.propertyInfos = (_column$propertyInfos3 = column.propertyInfos) === null || _column$propertyInfos3 === void 0 ? void 0 : _column$propertyInfos3.concat(column.additionalPropertyInfos);
      }
    });
  }

  /**
   * Returns a JSON string containing Presentation Variant aggregate conditions.
   *
   * @param presentationVariantAnnotation Presentation variant annotation
   * @param columns Converter processed table columns
   * @returns Group conditions for a Presentation variant.
   */
  function getAggregateConditions(presentationVariantAnnotation, columns) {
    let aggregateConditions;
    if (presentationVariantAnnotation !== null && presentationVariantAnnotation !== void 0 && presentationVariantAnnotation.Total) {
      const aTotals = presentationVariantAnnotation.Total;
      const aggregates = {};
      convertPropertyPathsToInfoNames(aTotals, columns).forEach(infoName => {
        aggregates[infoName] = {};
      });
      aggregateConditions = JSON.stringify(aggregates);
    }
    return aggregateConditions;
  }
  function getTableAnnotationConfiguration(lineItemAnnotation, visualizationPath, converterContext, tableManifestConfiguration, columns, presentationVariantAnnotation, viewConfiguration, isInsightsEnabled) {
    var _converterContext$get16, _converterContext$get17, _converterContext$get18;
    // Need to get the target
    const {
      navigationPropertyPath
    } = splitPath(visualizationPath);
    const typeNamePlural = (_converterContext$get16 = converterContext.getDataModelObjectPath().targetEntityType.annotations) === null || _converterContext$get16 === void 0 ? void 0 : (_converterContext$get17 = _converterContext$get16.UI) === null || _converterContext$get17 === void 0 ? void 0 : (_converterContext$get18 = _converterContext$get17.HeaderInfo) === null || _converterContext$get18 === void 0 ? void 0 : _converterContext$get18.TypeNamePlural;
    const title = typeNamePlural && compileExpression(getExpressionFromAnnotation(typeNamePlural));
    const entitySet = converterContext.getDataModelObjectPath().targetEntitySet;
    const pageManifestSettings = converterContext.getManifestWrapper();
    const hasAbsolutePath = navigationPropertyPath.length === 0,
      p13nMode = getP13nMode(visualizationPath, converterContext, tableManifestConfiguration),
      id = navigationPropertyPath ? getTableID(visualizationPath) : getTableID(converterContext.getContextPath(), "LineItem");
    const targetCapabilities = getCapabilityRestriction(converterContext);
    const navigationTargetPath = getNavigationTargetPath(converterContext, navigationPropertyPath);
    const navigationSettings = pageManifestSettings.getNavigationConfiguration(navigationTargetPath);
    const creationBehaviour = _getCreationBehaviour(lineItemAnnotation, tableManifestConfiguration, converterContext, navigationSettings, visualizationPath);
    const standardActionsContext = generateStandardActionsContext(converterContext, creationBehaviour.mode, tableManifestConfiguration, viewConfiguration, isInsightsEnabled);
    const deleteButtonVisibilityExpression = getDeleteVisibility(converterContext, standardActionsContext);
    const massEditButtonVisibilityExpression = getMassEditVisibility(converterContext, standardActionsContext);
    const isInsertUpdateTemplated = getInsertUpdateActionsTemplating(standardActionsContext, isDraftOrStickySupported(converterContext));
    const selectionMode = getSelectionMode(lineItemAnnotation, visualizationPath, converterContext, hasAbsolutePath, targetCapabilities, deleteButtonVisibilityExpression, massEditButtonVisibilityExpression);
    let threshold = navigationPropertyPath ? 10 : 30;
    if (presentationVariantAnnotation !== null && presentationVariantAnnotation !== void 0 && presentationVariantAnnotation.MaxItems) {
      threshold = presentationVariantAnnotation.MaxItems.valueOf();
    }
    const variantManagement = pageManifestSettings.getVariantManagement();
    const isSearchable = isPathSearchable(converterContext.getDataModelObjectPath());
    const standardActions = {
      create: getStandardActionCreate(converterContext, standardActionsContext),
      delete: getStandardActionDelete(converterContext, standardActionsContext),
      paste: getStandardActionPaste(converterContext, standardActionsContext, isInsertUpdateTemplated),
      massEdit: getStandardActionMassEdit(converterContext, standardActionsContext),
      insights: getStandardActionInsights(converterContext, standardActionsContext, visualizationPath),
      creationRow: getCreationRow(converterContext, standardActionsContext)
    };
    return {
      id: id,
      entityName: entitySet ? entitySet.name : "",
      collection: getTargetObjectPath(converterContext.getDataModelObjectPath()),
      navigationPath: navigationPropertyPath,
      row: _getRowConfigurationProperty(lineItemAnnotation, converterContext, navigationSettings, navigationTargetPath, tableManifestConfiguration.type),
      p13nMode: p13nMode,
      standardActions: {
        actions: standardActions,
        isInsertUpdateTemplated: isInsertUpdateTemplated,
        updatablePropertyPath: getCurrentEntitySetUpdatablePath(converterContext)
      },
      displayMode: isInDisplayMode(converterContext, viewConfiguration),
      create: creationBehaviour,
      selectionMode: selectionMode,
      autoBindOnInit: _isFilterBarHidden(pageManifestSettings, converterContext) || converterContext.getTemplateType() !== TemplateType.ListReport && converterContext.getTemplateType() !== TemplateType.AnalyticalListPage && !(viewConfiguration && pageManifestSettings.hasMultipleVisualizations(viewConfiguration)),
      variantManagement: variantManagement === "Control" && !p13nMode ? VariantManagementType.None : variantManagement,
      threshold: threshold,
      sortConditions: getSortConditions(converterContext, presentationVariantAnnotation, columns),
      title: title,
      searchable: tableManifestConfiguration.type !== "AnalyticalTable" && !(isConstant(isSearchable) && isSearchable.value === false),
      initialExpansionLevel: getInitialExpansionLevel(presentationVariantAnnotation)
    };
  }
  _exports.getTableAnnotationConfiguration = getTableAnnotationConfiguration;
  function _getExportDataType(dataType) {
    let isComplexProperty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let exportDataType = "String";
    if (isComplexProperty) {
      if (dataType === "Edm.DateTimeOffset") {
        exportDataType = "DateTime";
      }
      return exportDataType;
    } else {
      switch (dataType) {
        case "Edm.Decimal":
        case "Edm.Int32":
        case "Edm.Int64":
        case "Edm.Double":
        case "Edm.Byte":
          exportDataType = "Number";
          break;
        case "Edm.DateOfTime":
        case "Edm.Date":
          exportDataType = "Date";
          break;
        case "Edm.DateTimeOffset":
          exportDataType = "DateTime";
          break;
        case "Edm.TimeOfDay":
          exportDataType = "Time";
          break;
        case "Edm.Boolean":
          exportDataType = "Boolean";
          break;
        default:
          exportDataType = "String";
      }
    }
    return exportDataType;
  }

  /**
   * Split the visualization path into the navigation property path and annotation.
   *
   * @param visualizationPath
   * @returns The split path
   */
  function splitPath(visualizationPath) {
    const [targetNavigationPropertyPath, annotationPath] = visualizationPath.split("@");
    let navigationPropertyPath = targetNavigationPropertyPath;
    if (navigationPropertyPath.lastIndexOf("/") === navigationPropertyPath.length - 1) {
      // Drop trailing slash
      navigationPropertyPath = navigationPropertyPath.substr(0, navigationPropertyPath.length - 1);
    }
    return {
      navigationPropertyPath,
      annotationPath
    };
  }
  _exports.splitPath = splitPath;
  function getSelectionVariantConfiguration(selectionVariantPath, converterContext) {
    const resolvedTarget = converterContext.getEntityTypeAnnotation(selectionVariantPath);
    const selection = resolvedTarget.annotation;
    if (selection) {
      var _selection$SelectOpti, _selection$Text;
      const propertyNames = [];
      (_selection$SelectOpti = selection.SelectOptions) === null || _selection$SelectOpti === void 0 ? void 0 : _selection$SelectOpti.forEach(selectOption => {
        const propertyName = selectOption.PropertyName;
        const propertyPath = (propertyName === null || propertyName === void 0 ? void 0 : propertyName.value) ?? "";
        if (propertyNames.indexOf(propertyPath) === -1) {
          propertyNames.push(propertyPath);
        }
      });
      return {
        text: selection === null || selection === void 0 ? void 0 : (_selection$Text = selection.Text) === null || _selection$Text === void 0 ? void 0 : _selection$Text.toString(),
        propertyNames: propertyNames
      };
    }
    return undefined;
  }
  _exports.getSelectionVariantConfiguration = getSelectionVariantConfiguration;
  function _getFullScreenBasedOnDevice(tableSettings, converterContext, isIphone) {
    // If enableFullScreen is not set, use as default true on phone and false otherwise
    let enableFullScreen = tableSettings.enableFullScreen ?? isIphone;
    // Make sure that enableFullScreen is not set on ListReport for desktop or tablet
    if (!isIphone && enableFullScreen && converterContext.getTemplateType() === TemplateType.ListReport) {
      enableFullScreen = false;
      converterContext.getDiagnostics().addIssue(IssueCategory.Manifest, IssueSeverity.Low, IssueType.FULLSCREENMODE_NOT_ON_LISTREPORT);
    }
    return enableFullScreen;
  }
  function _getMultiSelectMode(tableSettings, tableType, converterContext) {
    let multiSelectMode;
    if (tableType !== "ResponsiveTable") {
      return undefined;
    }
    switch (converterContext.getTemplateType()) {
      case TemplateType.ListReport:
      case TemplateType.AnalyticalListPage:
        multiSelectMode = !tableSettings.selectAll ? "ClearAll" : "Default";
        break;
      case TemplateType.ObjectPage:
        multiSelectMode = tableSettings.selectAll === false ? "ClearAll" : "Default";
        if (converterContext.getManifestWrapper().useIconTabBar()) {
          multiSelectMode = !tableSettings.selectAll ? "ClearAll" : "Default";
        }
        break;
      default:
    }
    return multiSelectMode;
  }
  function _getTableType(tableSettings, aggregationHelper, converterContext) {
    let tableType = (tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.type) || "ResponsiveTable";
    /*  Now, we keep the configuration in the manifest, even if it leads to errors.
    	We only change if we're not on desktop from Analytical/Tree to Responsive.
     */
    if ((tableType === "AnalyticalTable" || tableType === "TreeTable") && !converterContext.getManifestWrapper().isDesktop()) {
      tableType = "ResponsiveTable";
    }
    return tableType;
  }
  function _getTableMode(tableType, tableSettings, isTemplateListReport) {
    if (tableType !== "ResponsiveTable") {
      if (isTemplateListReport) {
        return {
          rowCountMode: "Auto",
          rowCount: 3
        };
      } else {
        return {
          rowCountMode: tableSettings.rowCountMode ?? "Fixed",
          rowCount: tableSettings.rowCount ? tableSettings.rowCount : 5
        };
      }
    } else {
      return {};
    }
  }
  function _getCondensedTableLayout(_tableType, _tableSettings) {
    return _tableSettings.condensedTableLayout !== undefined && _tableType !== "ResponsiveTable" ? _tableSettings.condensedTableLayout : false;
  }
  function _getTableSelectionLimit(_tableSettings) {
    return _tableSettings.selectAll === true || _tableSettings.selectionLimit === 0 ? 0 : _tableSettings.selectionLimit || 200;
  }
  function _getTableInlineCreationRowCount(_tableSettings) {
    var _tableSettings$creati, _tableSettings$creati2;
    return (_tableSettings$creati = _tableSettings.creationMode) !== null && _tableSettings$creati !== void 0 && _tableSettings$creati.inlineCreationRowCount ? (_tableSettings$creati2 = _tableSettings.creationMode) === null || _tableSettings$creati2 === void 0 ? void 0 : _tableSettings$creati2.inlineCreationRowCount : 2;
  }
  function _getFilters(tableSettings, quickFilterPaths, quickSelectionVariant, path) {
    var _tableSettings$quickV;
    if (quickSelectionVariant) {
      quickFilterPaths.push({
        annotationPath: path.annotationPath
      });
    }
    return {
      quickFilters: {
        showCounts: tableSettings === null || tableSettings === void 0 ? void 0 : (_tableSettings$quickV = tableSettings.quickVariantSelection) === null || _tableSettings$quickV === void 0 ? void 0 : _tableSettings$quickV.showCounts,
        paths: quickFilterPaths
      }
    };
  }
  function _getEnableExport(tableSettings, converterContext, enablePaste) {
    return tableSettings.enableExport !== undefined ? tableSettings.enableExport : converterContext.getTemplateType() !== "ObjectPage" || enablePaste;
  }
  function _getFrozenColumnCount(tableSettings) {
    return tableSettings.frozenColumnCount;
  }
  function _getFilterConfiguration(tableSettings, lineItemAnnotation, converterContext) {
    var _tableSettings$quickV2, _tableSettings$quickV3, _tableSettings$quickV4;
    if (!lineItemAnnotation) {
      return {};
    }
    const quickFilterPaths = [];
    const targetEntityType = converterContext.getAnnotationEntityType(lineItemAnnotation);
    let quickSelectionVariant;
    let filters;
    tableSettings === null || tableSettings === void 0 ? void 0 : (_tableSettings$quickV2 = tableSettings.quickVariantSelection) === null || _tableSettings$quickV2 === void 0 ? void 0 : (_tableSettings$quickV3 = _tableSettings$quickV2.paths) === null || _tableSettings$quickV3 === void 0 ? void 0 : _tableSettings$quickV3.forEach(path => {
      quickSelectionVariant = targetEntityType.resolvePath(path.annotationPath);
      filters = _getFilters(tableSettings, quickFilterPaths, quickSelectionVariant, path);
    });
    let hideTableTitle = false;
    hideTableTitle = !!((_tableSettings$quickV4 = tableSettings.quickVariantSelection) !== null && _tableSettings$quickV4 !== void 0 && _tableSettings$quickV4.hideTableTitle);
    return {
      filters: filters,
      headerVisible: !(quickSelectionVariant && hideTableTitle)
    };
  }
  function _getCollectedNavigationPropertyLabels(relativePath, converterContext) {
    const navigationProperties = enhanceDataModelPath(converterContext.getDataModelObjectPath(), relativePath).navigationProperties;
    if ((navigationProperties === null || navigationProperties === void 0 ? void 0 : navigationProperties.length) > 0) {
      const collectedNavigationPropertyLabels = [];
      navigationProperties.forEach(navProperty => {
        collectedNavigationPropertyLabels.push(getLabel(navProperty) || navProperty.name);
      });
      return collectedNavigationPropertyLabels;
    }
  }
  function getTableManifestConfiguration(lineItemAnnotation, visualizationPath, converterContext) {
    var _tableSettings$creati3, _tableSettings$creati4, _tableSettings$creati5, _tableSettings$creati6, _tableSettings$creati7, _tableSettings$creati8, _tableSettings$quickV5, _manifestWrapper$getV;
    let checkCondensedLayout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const _manifestWrapper = converterContext.getManifestWrapper();
    const tableManifestSettings = converterContext.getManifestControlConfiguration(visualizationPath);
    const tableSettings = tableManifestSettings && tableManifestSettings.tableSettings || {};
    const creationMode = ((_tableSettings$creati3 = tableSettings.creationMode) === null || _tableSettings$creati3 === void 0 ? void 0 : _tableSettings$creati3.name) || CreationMode.NewPage;
    const enableAutoColumnWidth = !_manifestWrapper.isPhone();
    const enablePaste = tableSettings.enablePaste !== undefined ? tableSettings.enablePaste : converterContext.getTemplateType() === "ObjectPage"; // Paste is disabled by default excepted for OP
    const templateType = converterContext.getTemplateType();
    const dataStateIndicatorFilter = templateType === TemplateType.ListReport ? "API.dataStateIndicatorFilter" : undefined;
    const isCondensedTableLayoutCompliant = checkCondensedLayout && _manifestWrapper.isCondensedLayoutCompliant();
    const oFilterConfiguration = _getFilterConfiguration(tableSettings, lineItemAnnotation, converterContext);
    const customValidationFunction = (_tableSettings$creati4 = tableSettings.creationMode) === null || _tableSettings$creati4 === void 0 ? void 0 : _tableSettings$creati4.customValidationFunction;
    const entityType = converterContext.getEntityType();
    const aggregationHelper = new AggregationHelper(entityType, converterContext);
    const tableType = _getTableType(tableSettings, aggregationHelper, converterContext);
    const tableRowMode = _getTableMode(tableType, tableSettings, templateType === TemplateType.ListReport);
    const condensedTableLayout = _getCondensedTableLayout(tableType, tableSettings);
    const oConfiguration = {
      // If no createAtEnd is specified it will be false for Inline create and true otherwise
      createAtEnd: ((_tableSettings$creati5 = tableSettings.creationMode) === null || _tableSettings$creati5 === void 0 ? void 0 : _tableSettings$creati5.createAtEnd) !== undefined ? (_tableSettings$creati6 = tableSettings.creationMode) === null || _tableSettings$creati6 === void 0 ? void 0 : _tableSettings$creati6.createAtEnd : creationMode !== CreationMode.Inline,
      creationMode: creationMode,
      customValidationFunction: customValidationFunction,
      dataStateIndicatorFilter: dataStateIndicatorFilter,
      // if a custom validation function is provided, disableAddRowButtonForEmptyData should not be considered, i.e. set to false
      disableAddRowButtonForEmptyData: !customValidationFunction ? !!((_tableSettings$creati7 = tableSettings.creationMode) !== null && _tableSettings$creati7 !== void 0 && _tableSettings$creati7.disableAddRowButtonForEmptyData) : false,
      enableAutoColumnWidth: enableAutoColumnWidth,
      enableExport: _getEnableExport(tableSettings, converterContext, enablePaste),
      frozenColumnCount: _getFrozenColumnCount(tableSettings),
      enableFullScreen: _getFullScreenBasedOnDevice(tableSettings, converterContext, _manifestWrapper.isPhone()),
      enableMassEdit: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.enableMassEdit,
      enableAddCardToInsights: tableSettings === null || tableSettings === void 0 ? void 0 : tableSettings.enableAddCardToInsights,
      enablePaste: enablePaste,
      headerVisible: true,
      multiSelectMode: _getMultiSelectMode(tableSettings, tableType, converterContext),
      selectionLimit: _getTableSelectionLimit(tableSettings),
      inlineCreationRowCount: _getTableInlineCreationRowCount(tableSettings),
      inlineCreationRowsHiddenInEditMode: (tableSettings === null || tableSettings === void 0 ? void 0 : (_tableSettings$creati8 = tableSettings.creationMode) === null || _tableSettings$creati8 === void 0 ? void 0 : _tableSettings$creati8.inlineCreationRowsHiddenInEditMode) ?? false,
      showRowCount: !(tableSettings !== null && tableSettings !== void 0 && (_tableSettings$quickV5 = tableSettings.quickVariantSelection) !== null && _tableSettings$quickV5 !== void 0 && _tableSettings$quickV5.showCounts) && !((_manifestWrapper$getV = _manifestWrapper.getViewConfiguration()) !== null && _manifestWrapper$getV !== void 0 && _manifestWrapper$getV.showCounts),
      type: tableType,
      useCondensedTableLayout: condensedTableLayout && isCondensedTableLayoutCompliant,
      isCompactType: _manifestWrapper.isCompactType()
    };
    const tableConfiguration = {
      ...oConfiguration,
      ...tableRowMode,
      ...oFilterConfiguration
    };
    if (tableType === "TreeTable") {
      tableConfiguration.hierarchyQualifier = tableSettings.hierarchyQualifier;
    }
    return tableConfiguration;
  }
  _exports.getTableManifestConfiguration = getTableManifestConfiguration;
  function getTypeConfig(oProperty, dataType) {
    var _oTargetMapping, _propertyTypeConfig$t, _propertyTypeConfig$t2, _propertyTypeConfig$t3, _propertyTypeConfig$t4;
    let oTargetMapping;
    if (isProperty(oProperty)) {
      oTargetMapping = isTypeDefinition(oProperty.targetType) ? EDM_TYPE_MAPPING[oProperty.targetType.underlyingType] : EDM_TYPE_MAPPING[oProperty.type];
    }
    if (oTargetMapping === undefined && dataType !== undefined) {
      oTargetMapping = EDM_TYPE_MAPPING[dataType];
    }
    const propertyTypeConfig = {
      type: (_oTargetMapping = oTargetMapping) === null || _oTargetMapping === void 0 ? void 0 : _oTargetMapping.type,
      constraints: {},
      formatOptions: {}
    };
    if (isProperty(oProperty) && oTargetMapping !== undefined) {
      var _oTargetMapping$const, _oTargetMapping$const2, _oTargetMapping$const3, _oTargetMapping$const4, _oTargetMapping$const5, _oProperty$annotation8, _oProperty$annotation9, _oProperty$annotation10, _oProperty$annotation11, _oTargetMapping$const6, _oProperty$annotation12, _oProperty$annotation13, _oProperty$annotation14, _oProperty$annotation15, _oTargetMapping$const7, _oProperty$annotation16, _oProperty$annotation17;
      propertyTypeConfig.constraints = {
        scale: (_oTargetMapping$const = oTargetMapping.constraints) !== null && _oTargetMapping$const !== void 0 && _oTargetMapping$const.$Scale ? oProperty.scale : undefined,
        precision: (_oTargetMapping$const2 = oTargetMapping.constraints) !== null && _oTargetMapping$const2 !== void 0 && _oTargetMapping$const2.$Precision ? oProperty.precision : undefined,
        maxLength: (_oTargetMapping$const3 = oTargetMapping.constraints) !== null && _oTargetMapping$const3 !== void 0 && _oTargetMapping$const3.$MaxLength ? oProperty.maxLength : undefined,
        nullable: (_oTargetMapping$const4 = oTargetMapping.constraints) !== null && _oTargetMapping$const4 !== void 0 && _oTargetMapping$const4.$Nullable ? oProperty.nullable : undefined,
        minimum: (_oTargetMapping$const5 = oTargetMapping.constraints) !== null && _oTargetMapping$const5 !== void 0 && _oTargetMapping$const5["@Org.OData.Validation.V1.Minimum/$Decimal"] && !isNaN((_oProperty$annotation8 = oProperty.annotations) === null || _oProperty$annotation8 === void 0 ? void 0 : (_oProperty$annotation9 = _oProperty$annotation8.Validation) === null || _oProperty$annotation9 === void 0 ? void 0 : _oProperty$annotation9.Minimum) ? `${(_oProperty$annotation10 = oProperty.annotations) === null || _oProperty$annotation10 === void 0 ? void 0 : (_oProperty$annotation11 = _oProperty$annotation10.Validation) === null || _oProperty$annotation11 === void 0 ? void 0 : _oProperty$annotation11.Minimum}` : undefined,
        maximum: (_oTargetMapping$const6 = oTargetMapping.constraints) !== null && _oTargetMapping$const6 !== void 0 && _oTargetMapping$const6["@Org.OData.Validation.V1.Maximum/$Decimal"] && !isNaN((_oProperty$annotation12 = oProperty.annotations) === null || _oProperty$annotation12 === void 0 ? void 0 : (_oProperty$annotation13 = _oProperty$annotation12.Validation) === null || _oProperty$annotation13 === void 0 ? void 0 : _oProperty$annotation13.Maximum) ? `${(_oProperty$annotation14 = oProperty.annotations) === null || _oProperty$annotation14 === void 0 ? void 0 : (_oProperty$annotation15 = _oProperty$annotation14.Validation) === null || _oProperty$annotation15 === void 0 ? void 0 : _oProperty$annotation15.Maximum}` : undefined,
        isDigitSequence: propertyTypeConfig.type === "sap.ui.model.odata.type.String" && (_oTargetMapping$const7 = oTargetMapping.constraints) !== null && _oTargetMapping$const7 !== void 0 && _oTargetMapping$const7[`@${"com.sap.vocabularies.Common.v1.IsDigitSequence"}`] && (_oProperty$annotation16 = oProperty.annotations) !== null && _oProperty$annotation16 !== void 0 && (_oProperty$annotation17 = _oProperty$annotation16.Common) !== null && _oProperty$annotation17 !== void 0 && _oProperty$annotation17.IsDigitSequence ? true : undefined
      };
    }
    propertyTypeConfig.formatOptions = {
      parseAsString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t = propertyTypeConfig.type) === null || _propertyTypeConfig$t === void 0 ? void 0 : _propertyTypeConfig$t.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t2 = propertyTypeConfig.type) === null || _propertyTypeConfig$t2 === void 0 ? void 0 : _propertyTypeConfig$t2.indexOf("sap.ui.model.odata.type.Double")) === 0 ? false : undefined,
      emptyString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t3 = propertyTypeConfig.type) === null || _propertyTypeConfig$t3 === void 0 ? void 0 : _propertyTypeConfig$t3.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t4 = propertyTypeConfig.type) === null || _propertyTypeConfig$t4 === void 0 ? void 0 : _propertyTypeConfig$t4.indexOf("sap.ui.model.odata.type.Double")) === 0 ? "" : undefined,
      parseKeepsEmptyString: propertyTypeConfig.type === "sap.ui.model.odata.type.String" ? true : undefined
    };
    return propertyTypeConfig;
  }
  _exports.getTypeConfig = getTypeConfig;
  return {
    getTableActions,
    getTableColumns,
    getColumnsFromEntityType,
    updateLinkedProperties,
    createTableVisualization,
    createDefaultTableVisualization,
    getCapabilityRestriction,
    getSelectionMode,
    getRowStatusVisibility,
    getImportance,
    getP13nMode,
    getTableAnnotationConfiguration,
    isFilteringCaseSensitive,
    splitPath,
    getSelectionVariantConfiguration,
    getTableManifestConfiguration,
    getTypeConfig,
    updateTableVisualizationForType
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/Table", ["sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/IssueManager","sap/fe/core/converters/helpers/Key","sap/fe/core/formatters/TableFormatter","sap/fe/core/formatters/TableFormatterTypes","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/StableIdHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/DisplayModeFormatter","sap/fe/core/templating/EntitySetHelper","sap/fe/core/templating/PropertyHelper","sap/fe/core/templating/UIFormatters","sap/fe/macros/internal/helpers/ActionHelper","sap/ui/core/Core","../../helpers/Aggregation","../../helpers/DataFieldHelper","../../helpers/ID","../../ManifestSettings","./Criticality","./table/StandardActions","sap/base/Log"],function(e,t,n,o,i,a,l,r,s,d,u,v,c,f,p,g,m,y,b,h,T,I,A,P,D,F){"use strict";var C={};var S=D.isInDisplayMode;var E=D.isDraftOrStickySupported;var O=D.getStandardActionPaste;var x=D.getStandardActionMassEdit;var M=D.getStandardActionInsights;var U=D.getStandardActionDelete;var $=D.getStandardActionCreate;var N=D.getRestrictions;var w=D.getMassEditVisibility;var V=D.getInsertUpdateActionsTemplating;var L=D.getDeleteVisibility;var R=D.getCreationRow;var k=D.generateStandardActionsContext;var H=P.getMessageTypeFromCriticalityType;var j=A.VisualizationType;var B=A.VariantManagementType;var z=A.TemplateType;var G=A.SelectionMode;var K=A.Importance;var W=A.HorizontalAlign;var Q=A.CreationMode;var q=A.ActionType;var _=I.getTableID;var Y=T.isReferencePropertyStaticallyHidden;var J=h.AggregationHelper;var X=m.isMultiValueField;var Z=g.isImageURL;var ee=g.getAssociatedUnitProperty;var te=g.getAssociatedTimezoneProperty;var ne=g.getAssociatedCurrencyProperty;var oe=p.getNonSortablePropertiesRestrictions;var ie=f.getDisplayMode;var ae=c.isPathUpdatable;var le=c.isPathSearchable;var re=c.isPathDeletable;var se=c.getTargetObjectPath;var de=c.enhanceDataModelPath;var ue=v.isTypeDefinition;var ve=v.isProperty;var ce=v.isPathAnnotationExpression;var fe=v.isNavigationProperty;var pe=v.isAnnotationOfType;var ge=u.replaceSpecialChars;var me=u.generate;var ye=s.resolveBindingString;var be=s.pathInModel;var he=s.or;var Te=s.not;var Ie=s.isConstant;var Ae=s.ifElse;var Pe=s.getExpressionFromAnnotation;var De=s.formatResult;var Fe=s.equal;var Ce=s.EDM_TYPE_MAPPING;var Se=s.constant;var Ee=s.compileExpression;var Oe=s.and;var xe=r.MessageType;var Me=a.KeyHelper;var Ue=i.IssueType;var $e=i.IssueSeverity;var Ne=i.IssueCategoryType;var we=i.IssueCategory;var Ve=o.Placement;var Le=o.OverrideType;var Re=o.insertCustomElements;var ke=n.UI;var He=n.Entity;var je=t.getEnabledForAnnotationAction;var Be=t.removeDuplicateActions;var ze=t.isActionNavigable;var Ge=t.getCopyAction;var Ke=t.getActionsFromManifest;var We=t.dataFieldIsCopyAction;var Qe=e.isDataPointFromDataFieldDefault;var qe=e.isDataFieldTypes;var _e=e.isDataFieldForActionAbstract;var Ye=e.getTargetValueOnDataPoint;var Je=e.getSemanticObjectPath;var Xe=e.getDataFieldDataType;var Ze=e.collectRelatedPropertiesRecursively;var et=e.collectRelatedProperties;var tt;(function(e){e["Default"]="Default";e["Annotation"]="Annotation";e["Slot"]="Slot"})(tt||(tt={}));function nt(e,t,n,o){const i=At(e,t,n);const a=i.tableActions;const l=i.hiddenTableActions;const r=Ke(n.getManifestControlConfiguration(t).actions,n,a,o,true,l);const s={isNavigable:Le.overwrite,enableOnSelect:Le.overwrite,enableAutoScroll:Le.overwrite,enabled:Le.overwrite,visible:Le.overwrite,defaultValuesExtensionFunction:Le.overwrite,command:Le.overwrite};const d=Re(a,r.actions,s);return{actions:d,commandActions:r.commandActions}}C.getTableActions=nt;function ot(e,t,n,o,i){const a=tn(e,t,n,i);const l=an(n.getManifestControlConfiguration(t).columns,a,n,n.getAnnotationEntityType(e),o);return Re(a,l,{width:Le.overwrite,importance:Le.overwrite,horizontalAlign:Le.overwrite,availability:Le.overwrite,isNavigable:Le.overwrite,settings:Le.overwrite,formatOptions:Le.overwrite})}C.getTableColumns=ot;const it=function(e,t,n){const o=new J(e,n);function i(e){return t.find(t=>{const n=t;return n.propertyInfos===undefined&&n.relativePath===e})}if(!o.isAnalyticsSupported()){return undefined}const a=new Set;t.forEach(e=>{const t=e;if(t.unit){a.add(t.unit)}});const l=o.getCustomAggregateDefinitions();const r={};l.forEach(e=>{const t=o._entityType.entityProperties.find(t=>t.name===e.qualifier);if(t){var n,i;const o=(n=e.annotations)===null||n===void 0?void 0:(i=n.Aggregation)===null||i===void 0?void 0:i.ContextDefiningProperties;r[t.name]=o?o.map(e=>e.value):[]}});const s={};t.forEach(e=>{const t=e;if(t.propertyInfos===undefined&&t.relativePath){const e=r[t.relativePath];if(e&&!a.has(t.name)){s[t.name]={defaultAggregate:{},relativePath:t.relativePath};const n=[];e.forEach(e=>{const t=i(e);if(t){n.push(t.name)}});if(n.length){s[t.name].defaultAggregate.contextDefiningProperties=n}}}});return s};C.getAggregateDefinitionsFromEntityType=it;function at(e,t,n,o){if(e.control.type==="AnalyticalTable"){const i=it(t,e.columns,n),a=new J(t,n);if(i){e.enableAnalytics=true;e.enable$select=false;e.enable$$getKeepAliveContext=false;e.aggregates=i;cn(e);const t=a.getAllowedTransformations();e.enableBasicSearch=t?t.indexOf("search")>=0:true;e.annotation.groupConditions=vn(o,e.columns,e.control.type);e.annotation.aggregateConditions=fn(o,e.columns)}e.control.type="GridTable"}else if(e.control.type==="ResponsiveTable"){e.annotation.groupConditions=vn(o,e.columns,e.control.type)}else if(e.control.type==="TreeTable"){const o=new J(t,n);const i=o.getAllowedTransformations();e.enableBasicSearch=i?i.includes("search"):true;e.enable$$getKeepAliveContext=true}}C.updateTableVisualizationForType=at;function lt(e,t){const n=e.getManifestWrapper();if(t&&n.getNavigationConfiguration(t)){const e=n.getNavigationConfiguration(t);if(Object.keys(e).length>0){return t}}const o=e.getDataModelObjectPath();const i=e.getContextPath();const a=n.getNavigationConfiguration(i);if(a&&Object.keys(a).length>0){return i}return o.targetEntitySet?o.targetEntitySet.name:o.startingEntitySet.name}function rt(e,t){function n(e){return t.find(t=>{const n=t;return n.propertyInfos===undefined&&n.relativePath===e})}t.forEach(t=>{const o=t;if(o.propertyInfos===undefined&&o.relativePath){const t=e.entityProperties.find(e=>e.name===o.relativePath);if(t){var i,a,l;const e=ne(t)||ee(t);const v=te(t);const c=t===null||t===void 0?void 0:(i=t.annotations)===null||i===void 0?void 0:(a=i.Common)===null||a===void 0?void 0:a.Timezone;if(e){const t=n(e.name);o.unit=t===null||t===void 0?void 0:t.name}else{var r,s,d,u;const e=(t===null||t===void 0?void 0:(r=t.annotations)===null||r===void 0?void 0:(s=r.Measures)===null||s===void 0?void 0:s.ISOCurrency)||(t===null||t===void 0?void 0:(d=t.annotations)===null||d===void 0?void 0:(u=d.Measures)===null||u===void 0?void 0:u.Unit);if(e){o.unitText=`${e}`}}if(v){const e=n(v.name);o.timezone=e===null||e===void 0?void 0:e.name}else if(c){o.timezoneText=c.toString()}const f=ie(t),p=(l=t.annotations.Common)===null||l===void 0?void 0:l.Text;if(ce(p)&&f!=="Value"){const e=n(p.path);if(e&&e.name!==o.name){o.textArrangement={textProperty:e.name,mode:f}}}}}})}C.updateLinkedProperties=rt;function st(e){var t,n,o,i,a,l,r,s,d,u,v,c,f;const p=(t=e.getAnnotationEntityType())===null||t===void 0?void 0:(n=t.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:(i=o.HeaderInfo)===null||i===void 0?void 0:(a=i.Title)===null||a===void 0?void 0:(l=a.Value)===null||l===void 0?void 0:l.path;const g=(r=e.getAnnotationEntityType())===null||r===void 0?void 0:(s=r.annotations)===null||s===void 0?void 0:(d=s.Common)===null||d===void 0?void 0:d.SemanticKey;const m=e===null||e===void 0?void 0:(u=e.getAnnotationEntityType())===null||u===void 0?void 0:(v=u.annotations)===null||v===void 0?void 0:(c=v.UI)===null||c===void 0?void 0:(f=c.HeaderInfo)===null||f===void 0?void 0:f.TypeName;const y=[];if(g){g.forEach(function(e){y.push(e.value)})}return{headerInfoTitlePath:p,semanticKeyColumns:y,headerInfoTypeName:m}}function dt(e,t,n,o,i,a,l){const r=xn(e,t,n,i);const{navigationPropertyPath:s}=mn(t);const d=lt(n,s);const u=n.getManifestWrapper().getNavigationConfiguration(d);const v=ot(e,t,n,u,l);const c=vt(e,n);const f=st(n);const p=nt(e,t,n,u);const g={type:j.Table,annotation:pn(e,t,n,r,v,o,a,l),control:r,actions:Be(p.actions),commandActions:p.commandActions,columns:v,operationAvailableMap:JSON.stringify(c),operationAvailableProperties:ft(c,n),headerInfoTitle:f.headerInfoTitlePath,semanticKeys:f.semanticKeyColumns,headerInfoTypeName:f.headerInfoTypeName,enable$select:true,enable$$getKeepAliveContext:true};rt(n.getAnnotationEntityType(e),v);at(g,n.getAnnotationEntityType(e),n,o);return g}C.createTableVisualization=dt;function ut(e,t){const n=xn(undefined,"",e,false);const o=Ct({},e.getEntityType(),[],[],e,n.type,[]);const i=vt(undefined,e);const a=st(e);const l={type:j.Table,annotation:pn(undefined,"",e,n,t?[]:o),control:n,actions:[],columns:o,operationAvailableMap:JSON.stringify(i),operationAvailableProperties:ft(i,e),headerInfoTitle:a.headerInfoTitlePath,semanticKeys:a.semanticKeyColumns,headerInfoTypeName:a.headerInfoTypeName,enable$select:true,enable$$getKeepAliveContext:true};rt(e.getEntityType(),o);at(l,e.getEntityType(),e);return l}C.createDefaultTableVisualization=ut;function vt(e,t){return y.getOperationAvailableMap(e,"table",t)}function ct(e){var t,n;const o=N(e);const i=e.getEntitySet();const a=o.isUpdatable;const l=!Ie(a.expression)&&a.navigationExpression._type==="Unresolvable";const r=i===null||i===void 0?void 0:(t=i.annotations.Capabilities)===null||t===void 0?void 0:(n=t.UpdateRestrictions)===null||n===void 0?void 0:n.Updatable;const s=ce(r)&&r.path;return l?s:""}function ft(e,t){const n=new Set;for(const t in e){const o=e[t];if(o===null){n.add(t)}else if(typeof o==="string"){n.add(o)}}if(n.size){var o,i,a,l,r;const e=t.getEntityType();const s=(o=e.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:(a=i.HeaderInfo)===null||a===void 0?void 0:(l=a.Title)===null||l===void 0?void 0:(r=l.Value)===null||r===void 0?void 0:r.path;if(s){n.add(s)}}return Array.from(n).join(",")}function pt(e,t,n,o){const i=[];e.forEach(e=>{var a,l;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"&&e!==null&&e!==void 0&&(a=e.ActionTarget)!==null&&a!==void 0&&a.isBound&&t===(e===null||e===void 0?void 0:e.ActionTarget.sourceEntityType)||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&e.RequiresContext&&(e===null||e===void 0?void 0:(l=e.Inline)===null||l===void 0?void 0:l.valueOf())!==true){var r,s,d;if(typeof((r=e.annotations)===null||r===void 0?void 0:(s=r.UI)===null||s===void 0?void 0:(d=s.Hidden)===null||d===void 0?void 0:d.valueOf())==="object"){i.push(Fe(gt(e,n,o),false))}}});return i}function gt(e,t,n){let o;if((e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.UI.v1.DataFieldForAction"||(e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){var i,a;o=e===null||e===void 0?void 0:(i=e.annotations)===null||i===void 0?void 0:(a=i.UI)===null||a===void 0?void 0:a.Hidden}else{o=e===null||e===void 0?void 0:e.visible}let l;if(ce(o)){l=o.path}else{l=o}if(l){if(e!==null&&e!==void 0&&e.visible){l=l.substring(1,l.length-1)}if(l.indexOf("/")>0){const e=l.split("/");const n=e[0];if(fe(t===null||t===void 0?void 0:t.targetObject)&&t.targetObject.partner===n){return be(e.slice(1).join("/"))}else{return Se(true)}}else if(n){return be(l)}else{return Se(true)}}return Se(true)}function mt(e,t,n){return Object.keys(n).some(o=>{if(o===e){var i;if(t!==null&&t!==void 0&&(i=t.ActionTarget)!==null&&i!==void 0&&i.isBound||t!==null&&t!==void 0&&t.RequiresContext){n[e].requiresSelection=true}return true}return false})}function yt(e,t,n){return e.some(e=>{var o,i,a,l,r,s,d;if((e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation")&&(e===null||e===void 0?void 0:(o=e.Inline)===null||o===void 0?void 0:o.valueOf())!==true&&(((i=e.annotations)===null||i===void 0?void 0:(a=i.UI)===null||a===void 0?void 0:(l=a.Hidden)===null||l===void 0?void 0:l.valueOf())===false||((r=e.annotations)===null||r===void 0?void 0:(s=r.UI)===null||s===void 0?void 0:(d=s.Hidden)===null||d===void 0?void 0:d.valueOf())===undefined)){if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"){var u;const o=me(["DataFieldForAction",e.Action]);if(mt(o,e,t)){return false}return(e===null||e===void 0?void 0:(u=e.ActionTarget)===null||u===void 0?void 0:u.isBound)&&n===(e===null||e===void 0?void 0:e.ActionTarget.sourceEntityType)}else if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"){if(mt(`DataFieldForIntentBasedNavigation::${e.SemanticObject}::${e.Action}`,e,t)){return false}return e.RequiresContext}}return false})}function bt(e){return Object.keys(e).some(t=>{var n;const o=e[t];if(o.requiresSelection&&((n=o.visible)===null||n===void 0?void 0:n.toString())==="true"){return true}return false})}function ht(e){const t=[];if(e){Object.keys(e).forEach(n=>{const o=e[n];if(o.requiresSelection===true&&o.visible!==undefined){if(typeof o.visible==="string"){var i;t.push(ye(o===null||o===void 0?void 0:(i=o.visible)===null||i===void 0?void 0:i.valueOf()))}}})}return t}function Tt(e){const t=re(e.getDataModelObjectPath());const n=ae(e.getDataModelObjectPath());return{isDeletable:!(Ie(t)&&t.value===false),isUpdatable:!(Ie(n)&&n.value===false)}}C.getCapabilityRestriction=Tt;function It(e,t,n,o,i,a){var l;let r=arguments.length>6&&arguments[6]!==undefined?arguments[6]:Se(false);const s=n.getManifestControlConfiguration(t);let d=(l=s.tableSettings)===null||l===void 0?void 0:l.selectionMode;if(!e||d===G.None){return G.None}let u=[],v=[];const c=Ke(n.getManifestControlConfiguration(t).actions,n,[],undefined,false);let f,p;if(n.getTemplateType()===z.ObjectPage){f=re(n.getDataModelObjectPath());p=f?Ee(f,true):f}const g=!Ie(r)||r.value!==false;if(!d||d===G.Auto){d=G.Multi}if(g){d=d===G.Single?G.Single:G.Multi}if(yt(e,c.actions,n.getEntityType())||bt(c.actions)){return d}u=pt(e,n.getEntityType(),n.getDataModelObjectPath(),o);v=ht(c.actions);if(u.length===0&&v.length===0&&(a||g)){if(!o){if(i.isDeletable||p!=="false"||g){const e=he(a||true,r);return Ee(Ae(Oe(ke.IsEditable,e),Se(d),Se(G.None)))}else{return G.None}}else if(g){return d}else if(i.isDeletable&&a){return Ee(Ae(a,Se(d),Se("None")))}else{return G.None}}else if(!o){if(i.isDeletable||p!=="false"||g){const e=Ae(g&&!i.isDeletable,r,Se(true));return Ee(Ae(Oe(ke.IsEditable,e),Se(d),Ae(he(...u.concat(v)),Se(d),Se(G.None))))}else{return Ee(Ae(he(...u.concat(v)),Se(d),Se(G.None)))}}else if(i.isDeletable||g){return d}else{return Ee(Ae(he(...u.concat(v),r),Se(d),Se(G.None)))}}C.getSelectionMode=It;function At(e,t,n){const o=[];const i=[];const a=Ge(e.filter(e=>We(e)));const l=n.getEntityType().fullyQualifiedName;if(a){var r,s,d;o.push({type:q.Copy,annotationPath:n.getEntitySetBasedAnnotationPath(a.fullyQualifiedName),key:Me.generateKeyFromDataField(a),enabled:Ee(Fe(be("numberOfSelectedContexts","internal"),1)),visible:Ee(Te(Fe(Pe((r=a.annotations)===null||r===void 0?void 0:(s=r.UI)===null||s===void 0?void 0:s.Hidden,[],undefined,n.getRelativeModelPathFunction()),true))),text:((d=a.Label)===null||d===void 0?void 0:d.toString())??b.getLibraryResourceBundle("sap.fe.core").getText("C_COMMON_COPY"),isNavigable:true})}e.filter(e=>!We(e)).forEach(e=>{var t,a,r,s,d,u,v,c,f,p,g,m;if(((t=e.annotations)===null||t===void 0?void 0:(a=t.UI)===null||a===void 0?void 0:(r=a.Hidden)===null||r===void 0?void 0:r.valueOf())===true){i.push({type:q.Default,key:Me.generateKeyFromDataField(e)})}else if(_e(e)&&((s=e.Inline)===null||s===void 0?void 0:s.valueOf())!==true&&((d=e.Determining)===null||d===void 0?void 0:d.valueOf())!==true){switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAction":let t=false;if(((u=e.ActionTarget)===null||u===void 0?void 0:(v=u.annotations)===null||v===void 0?void 0:(c=v.Core)===null||c===void 0?void 0:c.OperationAvailable)!==undefined){var y,b,h,T;if(!((y=e.ActionTarget)!==null&&y!==void 0&&y.isBound)){t=true}else if((b=e.ActionTarget)!==null&&b!==void 0&&b.isBound&&((h=e.ActionTarget)===null||h===void 0?void 0:h.sourceType)!==l){t=true}else if((T=e.ActionTarget)!==null&&T!==void 0&&T.parameters[0].isCollection){t=true}}const i={type:q.DataFieldForAction,annotationPath:n.getEntitySetBasedAnnotationPath(e.fullyQualifiedName),key:Me.generateKeyFromDataField(e),visible:Ee(Te(Fe(Pe((f=e.annotations)===null||f===void 0?void 0:(p=f.UI)===null||p===void 0?void 0:p.Hidden,[],undefined,n.getRelativeModelPathFunction()),true))),isNavigable:true};if(t){i.enabled=je(n,e.ActionTarget)}o.push(i);break;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":o.push({type:q.DataFieldForIntentBasedNavigation,annotationPath:n.getEntitySetBasedAnnotationPath(e.fullyQualifiedName),key:Me.generateKeyFromDataField(e),visible:Ee(Te(Fe(Pe((g=e.annotations)===null||g===void 0?void 0:(m=g.UI)===null||m===void 0?void 0:m.Hidden,[],undefined,n.getRelativeModelPathFunction()),true)))});break;default:break}}});return{tableActions:o,hiddenTableActions:i}}function Pt(e,t,n){let o=xe.None;if(e){if(typeof e==="object"){o=Pe(e)}else{o=H(e)}}const i=[];n===null||n===void 0?void 0:n.keys.forEach(e=>{if(e.name!=="IsActiveEntity"){i.push(be(e.name,undefined))}});return De([o,be(`filteredMessages`,"internal"),t&&He.HasActive,t&&He.IsActive,`${t}`,...i],l.rowHighlighting,n)}function Dt(e,t,n,o,i){var a;const l=(o===null||o===void 0?void 0:o.create)||(o===null||o===void 0?void 0:o.detail);const r=n.getManifestControlConfiguration(i);const s=r&&r.tableSettings||{};if(l!==null&&l!==void 0&&l.outbound&&l.outboundDetail&&o!==null&&o!==void 0&&o.create){return{mode:"External",outbound:l.outbound,outboundDetail:l.outboundDetail,navigationSettings:o}}let d;if(e){var u,v,c;const e=(u=n.getEntitySet())===null||u===void 0?void 0:u.annotations;const o=e===null||e===void 0?void 0:e.Common,i=e===null||e===void 0?void 0:e.Session;d=(o===null||o===void 0?void 0:(v=o.DraftRoot)===null||v===void 0?void 0:v.NewAction)||(i===null||i===void 0?void 0:(c=i.StickySessionSupported)===null||c===void 0?void 0:c.NewAction);if(t.creationMode===Q.CreationRow&&d){throw Error(`Creation mode '${Q.CreationRow}' can not be used with a custom 'new' action (${d})`)}if(l!==null&&l!==void 0&&l.route){var f;return{mode:t.creationMode,append:t.createAtEnd,newAction:(f=d)===null||f===void 0?void 0:f.toString(),navigateToTarget:t.creationMode===Q.NewPage?l.route:undefined}}}if(t.creationMode===Q.NewPage){var p;t.creationMode=Q.Inline;if(((p=s.creationMode)===null||p===void 0?void 0:p.createAtEnd)===undefined){t.createAtEnd=false}}return{mode:t.creationMode,append:t.createAtEnd,newAction:(a=d)===null||a===void 0?void 0:a.toString()}}const Ft=function(e,t,n,o,i){let a,r;let s=Se(xe.None);const u=t.getEntityType();if(n&&e){var v,c,f,p,g;r=((v=n.display)===null||v===void 0?void 0:v.target)||((c=n.detail)===null||c===void 0?void 0:c.outbound);const l=t.getEntitySet();s=Pt((f=e.annotations)===null||f===void 0?void 0:(p=f.UI)===null||p===void 0?void 0:p.Criticality,!!d.getDraftRoot(l)||!!d.getDraftNode(l),u);if(r){a=".handlers.onChevronPressNavigateOutBound( $controller ,'"+r+"', ${$parameters>bindingContext})"}if(!r&&(g=n.detail)!==null&&g!==void 0&&g.route){a="API.onTableRowPress($event, $controller, ${$parameters>bindingContext}, { callExtension: true, targetPath: '"+o+"', editable : "+(d.getDraftRoot(l)||d.getDraftNode(l)?"!${$parameters>bindingContext}.getProperty('IsActiveEntity')":"undefined")+(i==="AnalyticalTable"||i==="TreeTable"?", bRecreateContext: true":"")+"})"}}const m=De([be("/deepestPath","internal")],l.navigatedRow,u);return{press:a,action:a?"Navigation":undefined,rowHighlighting:Ee(s),rowNavigated:Ee(m),visible:Ee(Te(ke.IsInactive))}};const Ct=function(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let o=arguments.length>3?arguments[3]:undefined;let i=arguments.length>4?arguments[4]:undefined;let a=arguments.length>5?arguments[5]:undefined;let l=arguments.length>6?arguments[6]:undefined;const r=n;const s=new J(t,i);t.entityProperties.forEach(t=>{const d=n.some(e=>e.name===t.name);if(!t.targetType&&!d){const n=et(t.name,t,i,true,a);const d=Object.keys(n.properties);const u=Object.keys(n.additionalProperties);if(n.textOnlyPropertiesFromTextAnnotation.length>0){l.push(...n.textOnlyPropertiesFromTextAnnotation)}const v=St(t,i.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),t.name,true,true,o,s,i,l);if(d.length>0){v.propertyInfos=d;v.exportSettings={...v.exportSettings,template:n.exportSettingsTemplate,wrap:n.exportSettingsWrapping};v.exportSettings.type=gn(t.type,d.length>1);if(n.exportUnitName){v.exportSettings.unitProperty=n.exportUnitName;v.exportSettings.type="Currency"}else if(n.exportUnitString){v.exportSettings.unit=n.exportUnitString}if(n.exportTimezoneName){v.exportSettings.timezoneProperty=n.exportTimezoneName;v.exportSettings.utc=false}else if(n.exportTimezoneString){v.exportSettings.timezone=n.exportTimezoneString}if(n.exportDataPointTargetValue){v.exportDataPointTargetValue=n.exportDataPointTargetValue;v.exportSettings.type="String"}d.forEach(t=>{e[t]=n.properties[t]})}if(u.length>0){v.additionalPropertyInfos=u;u.forEach(t=>{e[t]=n.additionalProperties[t]})}r.push(v)}if(ie(t)==="Description"){o=o.concat(t.name);r.push(St(t,i.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),t.name,false,false,o,s,i,[]))}});const d=wt(e,r,o,i,t,l);return r.concat(d)};C.getColumnsFromEntityType=Ct;const St=function(e,t,n,o,i,a,l,r,s){var d,u,v,c,f;const p=o?n:`Property::${n}`;const g=(o?"DataField::":"Property::")+ge(n);const m=Je(r,e);const y=((d=e.annotations)===null||d===void 0?void 0:(u=d.UI)===null||u===void 0?void 0:(v=u.Hidden)===null||v===void 0?void 0:v.valueOf())===true;const b=e.name?Ht(e.name,true,false):undefined;const h=b!=e.name;const T=gn(e.type);const I=e.type==="Edm.Date"?"YYYY-MM-DD":undefined;const A=Xe(e);const P=Mn(e,A);const D=r.getAnnotationsByTerm("Common","com.sap.vocabularies.Common.v1.SemanticKey",[r.getEntityType()])[0];const F=s&&s.indexOf(n)>=0;const C=(!y||F)&&a.indexOf(n)===-1;const S={className:e.type||A,formatOptions:P.formatOptions,constraints:P.constraints};let E=null;if(Et(e)){var O,x,M,U,$,N;const t=ne(e)||ee(e);const n=te(e);const o=((O=e.annotations)===null||O===void 0?void 0:(x=O.Measures)===null||x===void 0?void 0:x.ISOCurrency)||((M=e.annotations)===null||M===void 0?void 0:(U=M.Measures)===null||U===void 0?void 0:U.Unit);const i=($=e.annotations)===null||$===void 0?void 0:(N=$.Common)===null||N===void 0?void 0:N.Timezone;E={type:T,inputFormat:I,scale:e.scale,delimiter:e.type==="Edm.Int64"};if(t){E.unitProperty=t.name;E.type="Currency"}else if(o){E.unit=`${o}`}if(n){E.timezoneProperty=n.name;E.utc=false}else if(i){E.timezone=i.toString()}}const w=On(n,r);const V={key:g,type:tt.Annotation,label:Ut(e,h),groupLabel:h?Ut(e):undefined,group:h?b:undefined,annotationPath:t,semanticObjectPath:m,availability:!i||y?"Hidden":"Adaptation",name:p,relativePath:n,sortable:C,isGroupable:l.isAnalyticsSupported()?!!l.isPropertyGroupable(e):C,isKey:e.isKey,exportSettings:E,caseSensitive:zt(r),typeConfig:S,importance:Zt((c=e.annotations)===null||c===void 0?void 0:(f=c.UI)===null||f===void 0?void 0:f.DataFieldDefault,D),additionalLabels:w};const L=$t(e)||Ut(e,h);if(L){V.tooltip=L}const R=Ye(e);if(Qe(e)&&typeof R==="string"&&V.exportSettings){V.exportDataPointTargetValue=R;V.exportSettings.template="{0}/"+R}return V};function Et(e){var t;let n,o;const i=(t=e.annotations.UI)===null||t===void 0?void 0:t.DataFieldDefault;if(ve(e)&&i!==null&&i!==void 0&&i.$Type){if(Y(i)===true){return false}n=i===null||i===void 0?void 0:i.$Type}else if(Y(e)===true){return false}else{var a,l,r,s,d,u,v,c,f,p,g;o=e;n=o.$Type;if(n==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&(a=o.Target)!==null&&a!==void 0&&(l=a.$target)!==null&&l!==void 0&&l.$Type){var m,y;n=(m=o.Target)===null||m===void 0?void 0:(y=m.$target)===null||y===void 0?void 0:y.$Type;return"com.sap.vocabularies.UI.v1.ChartDefinitionType".indexOf(n)===-1}else if(((r=o.Value)===null||r===void 0?void 0:(s=r.$target)===null||s===void 0?void 0:(d=s.annotations)===null||d===void 0?void 0:(u=d.Core)===null||u===void 0?void 0:(v=u.MediaType)===null||v===void 0?void 0:v.term)==="Org.OData.Core.V1.MediaType"&&((c=o.Value)===null||c===void 0?void 0:(f=c.$target)===null||f===void 0?void 0:(p=f.annotations)===null||p===void 0?void 0:(g=p.Core)===null||g===void 0?void 0:g.isURL)!==true){return false}}return n?["com.sap.vocabularies.UI.v1.DataFieldForAction","com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation","com.sap.vocabularies.UI.v1.DataFieldForActionGroup"].indexOf(n)===-1:true}const Ot=function(e){switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":return!!e.Inline;case"com.sap.vocabularies.UI.v1.DataFieldWithAction":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":return true;default:}};const xt=function(e){var t,n,o,i,a,l;const r=e.targetObject;let s;if(r){switch(r.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":case"com.sap.vocabularies.UI.v1.DataPointType":s=r.Value.$target;break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if((r===null||r===void 0?void 0:(t=r.Target)===null||t===void 0?void 0:(n=t.$target)===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.UI.v1.DataPointType"){var d;s=(d=r.Target.$target)===null||d===void 0?void 0:d.Value.$target}break;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldForAction":default:s=undefined}}const u=Se(false);const v=Se(false);return Oe(...[Te(Fe(Pe(r===null||r===void 0?void 0:(o=r.annotations)===null||o===void 0?void 0:(i=o.UI)===null||i===void 0?void 0:i.Hidden),true)),Ae(!!s,s&&Te(Fe(Pe((a=s.annotations)===null||a===void 0?void 0:(l=a.UI)===null||l===void 0?void 0:l.Hidden),true)),true),he(Te(u),v)])};C._getVisibleExpression=xt;const Mt=function(e){var t,n;const o=[];if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&((t=e.Target)===null||t===void 0?void 0:(n=t.$target)===null||n===void 0?void 0:n.$Type)==="com.sap.vocabularies.UI.v1.FieldGroupType"){var i,a;if(e!==null&&e!==void 0&&(i=e.annotations)!==null&&i!==void 0&&(a=i.UI)!==null&&a!==void 0&&a.Hidden){return Ee(Te(Fe(Pe(e.annotations.UI.Hidden),true)))}else{var l;(l=e.Target.$target.Data)===null||l===void 0?void 0:l.forEach(e=>{o.push(xt({targetObject:e}))});return Ee(Ae(he(...o),Se(true),Se(false)))}}else{return undefined}};const Ut=function(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(!e){return undefined}if(ve(e)||fe(e)){var n,o,i,a,l;const t=(n=e.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.DataFieldDefault;if(t&&!t.qualifier&&(i=t.Label)!==null&&i!==void 0&&i.valueOf()){var r;return Ee(Pe((r=t.Label)===null||r===void 0?void 0:r.valueOf()))}return Ee(Pe(((a=e.annotations.Common)===null||a===void 0?void 0:(l=a.Label)===null||l===void 0?void 0:l.valueOf())||e.name))}else if(qe(e)){var s,d,u,v,c,f,p,g;if(!!t&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation"){var m;return Ee(Pe((m=e.Label)===null||m===void 0?void 0:m.valueOf()))}return Ee(Pe(((s=e.Label)===null||s===void 0?void 0:s.valueOf())||((d=e.Value)===null||d===void 0?void 0:(u=d.$target)===null||u===void 0?void 0:(v=u.annotations)===null||v===void 0?void 0:(c=v.Common)===null||c===void 0?void 0:(f=c.Label)===null||f===void 0?void 0:f.valueOf())||((p=e.Value)===null||p===void 0?void 0:(g=p.$target)===null||g===void 0?void 0:g.name)))}else if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){var y,b,h,T,I,A,P,D;return Ee(Pe(((y=e.Label)===null||y===void 0?void 0:y.valueOf())||((b=e.Target)===null||b===void 0?void 0:(h=b.$target)===null||h===void 0?void 0:(T=h.Value)===null||T===void 0?void 0:(I=T.$target)===null||I===void 0?void 0:(A=I.annotations)===null||A===void 0?void 0:(P=A.Common)===null||P===void 0?void 0:(D=P.Label)===null||D===void 0?void 0:D.valueOf())))}else{var F;return Ee(Pe((F=e.Label)===null||F===void 0?void 0:F.valueOf()))}};const $t=function(e){var t,n;if(!e){return undefined}if(ve(e)||(t=e.annotations)!==null&&t!==void 0&&(n=t.Common)!==null&&n!==void 0&&n.QuickInfo){var o,i;return(o=e.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&i.QuickInfo?Ee(Pe(e.annotations.Common.QuickInfo.valueOf())):undefined}else if(qe(e)){var a,l,r,s;return(a=e.Value)!==null&&a!==void 0&&(l=a.$target)!==null&&l!==void 0&&(r=l.annotations)!==null&&r!==void 0&&(s=r.Common)!==null&&s!==void 0&&s.QuickInfo?Ee(Pe(e.Value.$target.annotations.Common.QuickInfo.valueOf())):undefined}else if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"){var d,u,v,c,f;const t=(d=e.Target)===null||d===void 0?void 0:d.$target;return t!==null&&t!==void 0&&(u=t.Value)!==null&&u!==void 0&&(v=u.$target)!==null&&v!==void 0&&(c=v.annotations)!==null&&c!==void 0&&(f=c.Common)!==null&&f!==void 0&&f.QuickInfo?Ee(Pe(t.Value.$target.annotations.Common.QuickInfo.valueOf())):undefined}else{return undefined}};function Nt(e,t){return De([be(`semanticKeyHasDraftIndicator`,"internal"),be(`filteredMessages`,"internal"),e,t],l.getErrorStatusTextVisibilityFormatter)}C.getRowStatusVisibility=Nt;const wt=function(e,t,n,o,i,a){const l=[];const r={};const s=new J(i,o);Object.keys(e).forEach(i=>{const d=e[i],u=o.getAbsoluteAnnotationPath(i),v=t.find(e=>e.name===i);if(v===undefined){const e=St(d,u,i,true,false,n,s,o,a);e.isPartOfLineItem=t.some(e=>{var t;return((t=e.propertyInfos)===null||t===void 0?void 0:t.includes(i))&&e.isPartOfLineItem});l.push(e)}else if(v.annotationPath!==u||v.propertyInfos){const e=`Property::${i}`;if(!t.some(t=>t.name===e)){const t=St(d,u,i,false,false,n,s,o,a);t.isPartOfLineItem=v.isPartOfLineItem;l.push(t);r[i]=e}else if(t.some(t=>t.name===e)&&t.some(e=>{var t;return(t=e.propertyInfos)===null||t===void 0?void 0:t.includes(i)})){r[i]=e}}});t.forEach(e=>{var t,n;e.propertyInfos=(t=e.propertyInfos)===null||t===void 0?void 0:t.map(e=>r[e]??e);e.additionalPropertyInfos=(n=e.additionalPropertyInfos)===null||n===void 0?void 0:n.map(e=>r[e]??e)});return l};const Vt=function(e){var t,n,o,i;if(qe(e)&&(t=e.Value)!==null&&t!==void 0&&t.path){var a;return(a=e.Value)===null||a===void 0?void 0:a.path}else if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&(n=e.Target)!==null&&n!==void 0&&(o=n.$target)!==null&&o!==void 0&&(i=o.Value)!==null&&i!==void 0&&i.path){var l,r;return(l=e.Target)===null||l===void 0?void 0:(r=l.$target)===null||r===void 0?void 0:r.Value.path}else{return Me.generateKeyFromDataField(e)}};const Lt=function(e,t,n){const o=`Property_Technical::${e}`;const i=t.find(e=>e.key===o);const a=!i&&t.find(t=>t.name===e&&!t.propertyInfos);if(a){const i={key:o,type:tt.Annotation,label:a.label,annotationPath:a.annotationPath,availability:"Hidden",name:o,relativePath:a.relativePath,sortable:false,isGroupable:false,isKey:false,exportSettings:null,caseSensitive:false,aggregatable:false,extension:{technicallyGroupable:true,technicallyAggregatable:true}};t.push(i);n[e]=i.name}};const Rt=function(e,t,n){var o;const i=(o=n.getManifestControlConfiguration(t))===null||o===void 0?void 0:o.columns;const a=i&&Object.keys(i);return a&&!!a.find(function(t){return t===e&&i[t].showDataFieldsLabel})};const kt=function(e){var t,n;let o="";switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":o=e===null||e===void 0?void 0:(t=e.Value)===null||t===void 0?void 0:t.path;break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":o=e===null||e===void 0?void 0:(n=e.Target)===null||n===void 0?void 0:n.value;break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldForActionGroup":case"com.sap.vocabularies.UI.v1.DataFieldWithActionGroup":o=Me.generateKeyFromDataField(e);break}return o};const Ht=function(e,t,n){const o=t?e.lastIndexOf("/"):e.indexOf("/");if(o===-1){return e}return n?e.substring(o+1,e.length):e.substring(0,o)};const jt=function(e,t){if(qe(e)&&ce(e.Value)){const n=de(t.getDataModelObjectPath(),e.Value.path);return X(n)}else{return false}};const Bt=function(e,t,n){return n.indexOf(t)===-1&&(e.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithAction")};const zt=function(e){const t=Gt(e);return Array.isArray(t)?t.indexOf("tolower")===-1:true};C.isFilteringCaseSensitive=zt;function Gt(e){const t=e.getEntitySet();if(v.isEntitySet(t)){var n,o;return((n=t.annotations.Capabilities)===null||n===void 0?void 0:n.FilterFunctions)??((o=e.getEntityContainer().annotations.Capabilities)===null||o===void 0?void 0:o.FilterFunctions)}return undefined}function Kt(e){return e===undefined?undefined:{textLinesEdit:4,...e}}function Wt(e,t){const n=[];let o=false;for(let i=0;i<e.length;i++){n.push(e[i].value);if(e[i].value===t){o=true}}return{values:n,semanticKeyFound:o}}function Qt(e,t){let n=false;let o;if(e&&e.length>=1&&t&&t.length>=1){for(let i=0;i<e.length;i++){if([e[i]].some(e=>t.indexOf(e)>=0)){n=true;o=e[i];break}}}return{semanticKeyHasPropertyInFieldGroup:n,fieldGroupPropertyPath:o}}function qt(e,t){var n,o;const i=[];let a={semanticKeyHasPropertyInFieldGroup:false,fieldGroupPropertyPath:undefined};if(e&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&((n=e.Target)===null||n===void 0?void 0:(o=n.$target)===null||o===void 0?void 0:o.$Type)==="com.sap.vocabularies.UI.v1.FieldGroupType"){var l;(l=e.Target.$target.Data)===null||l===void 0?void 0:l.forEach(e=>{if((e.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithUrl")&&e.Value){i.push(e.Value.path)}a=Qt(t,i)})}return{semanticKeyHasPropertyInFieldGroup:a.semanticKeyHasPropertyInFieldGroup,propertyPath:a.fieldGroupPropertyPath}}function _t(e,t,n,o){if(!t){return{}}const i=Wt(t,e);const a=qt(o,i.values);if(a.semanticKeyHasPropertyInFieldGroup){return{fieldGroupDraftIndicatorPropertyPath:a.propertyPath,fieldGroupName:e,showErrorObjectStatus:Ee(Nt(e,true))}}else if(i.semanticKeyFound){return{hasDraftIndicator:true,showErrorObjectStatus:Ee(Nt(e,false))}}return{}}function Yt(e){var t,n;const o=e===null||e===void 0?void 0:(t=e.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:n.Importance;if(o&&o.includes("UI.ImportanceType/High")){return 3}if(o&&o.includes("UI.ImportanceType/Medium")){return 2}if(o&&o.includes("UI.ImportanceType/Low")){return 1}return 0}function Jt(e){var t,n;const o=e===null||e===void 0?void 0:(t=e.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:n.Importance;return o?o.split("/")[1]:K.None}function Xt(e){if(e&&e.length>0){let t=-1;let n=-1;let o;for(const i of e){n=Yt(i);if(n>t){t=n;o=i}}return Jt(o)}return K.None}function Zt(e,t){var n;let o,i=[];if(t&&t.length>0){i=t.map(function(e){return e.value})}if(!e){return undefined}if(pe(e,"com.sap.vocabularies.UI.v1.DataFieldForAnnotation")){const t=e.Target.$target;if(pe(t,"com.sap.vocabularies.UI.v1.FieldGroupType")){const n=t.Data;const r=n&&n.some(function(e){var t,n;return(e===null||e===void 0?void 0:(t=e.Value)===null||t===void 0?void 0:t.path)&&e.$Type!=="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&i.includes(e===null||e===void 0?void 0:(n=e.Value)===null||n===void 0?void 0:n.path)});if(r){return K.High}else{var a,l;if(e!==null&&e!==void 0&&(a=e.annotations)!==null&&a!==void 0&&(l=a.UI)!==null&&l!==void 0&&l.Importance){return Jt(e)}o=n&&n.filter(function(e){var t,n;return e===null||e===void 0?void 0:(t=e.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:n.Importance});return Xt(o)}}}return e.Value&&e!==null&&e!==void 0&&(n=e.Value)!==null&&n!==void 0&&n.path&&i.includes(e.Value.path)?K.High:Jt(e)}C.getImportance=Zt;const en=function(e,t,n,o){const i=n.getEntitySetBasedAnnotationPath(e.fullyQualifiedName);if(t&&t!==""&&i.indexOf("@com.sap.vocabularies.UI.v1.LineItem")!==-1&&qe(e)){var a;const t=(a=e.Value)!==null&&a!==void 0&&a.$target?Z(e.Value.$target):false;return!o&&!t}return false};const tn=function(e,t,n,o){var i;const a=n.getAnnotationEntityType(e),l=[],r={},s=oe(n.getEntitySet()),d=n.getManifestControlConfiguration(t),u=(d===null||d===void 0?void 0:(i=d.tableSettings)===null||i===void 0?void 0:i.type)||"ResponsiveTable";const v=[];const c=n.getAnnotationsByTerm("Common","com.sap.vocabularies.Common.v1.SemanticKey",[n.getEntityType()])[0];if(e){const i=n.getConverterContextFor(se(n.getDataModelObjectPath()));e.forEach(e=>{var a,d,f,p,g,m,y,b,h,T,I,A;if(!Ot(e)){return}let P=null;const D=qe(e)&&(a=e.Value)!==null&&a!==void 0&&(d=a.$target)!==null&&d!==void 0&&d.fullyQualifiedName?Je(n,e):undefined;const F=kt(e);const C=Ze(e,n,u);const S=Object.keys(C.properties);const E=Object.keys(C.additionalProperties);const O=F?Ht(F,true,false):undefined;const x=O!=F;const M=Ut(e,x);const U=Vt(e);const $=O?O.indexOf(`@${"com.sap.vocabularies.UI.v1.FieldGroup"}`)>-1:false;const N=$?Rt(U,t,n):false;const w=Xe(e);const V=w==="Edm.Date"?"YYYY-MM-DD":undefined;const L=Kt(_t(U,c,$,e));let R;if(e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&((f=e.Target)===null||f===void 0?void 0:(p=f.$target)===null||p===void 0?void 0:p.$Type)==="com.sap.vocabularies.UI.v1.FieldGroupType"){R=Mt(e)}if(Et(e)){P={template:C.exportSettingsTemplate,wrap:C.exportSettingsWrapping,type:w?gn(w,S.length>1):undefined,inputFormat:V,delimiter:w==="Edm.Int64"};if(C.exportUnitName){P.unitProperty=C.exportUnitName;P.type="Currency"}else if(C.exportUnitString){P.unit=C.exportUnitString}if(C.exportTimezoneName){P.timezoneProperty=C.exportTimezoneName}else if(C.exportTimezoneString){P.timezone=C.exportTimezoneString}}let k;if(w){k=Mn(e,w)}const H={className:w,formatOptions:{...L,...(g=k)===null||g===void 0?void 0:g.formatOptions},constraints:{...(m=k)===null||m===void 0?void 0:m.constraints}};const j={};if(!w||!H){j.widthCalculation=null}const B=jt(e,i);const z=!B&&Bt(e,F,s);const G=n.getManifestControlConfiguration(t);const K=((y=G.tableSettings)===null||y===void 0?void 0:y.enableAddCardToInsights)??true;const W={key:Me.generateKeyFromDataField(e),type:tt.Annotation,label:M,groupLabel:x?Ut(e):undefined,group:x?O:undefined,FieldGroupHiddenExpressions:R,annotationPath:n.getEntitySetBasedAnnotationPath(e.fullyQualifiedName),semanticObjectPath:D,availability:Y(e)?"Hidden":"Default",name:U,showDataFieldsLabel:N,relativePath:F,sortable:z,propertyInfos:S.length?S:undefined,additionalPropertyInfos:E.length>0?E:undefined,exportSettings:P,width:((b=e.annotations)===null||b===void 0?void 0:(h=b.HTML5)===null||h===void 0?void 0:(T=h.CssDefaults)===null||T===void 0?void 0:(I=T.width)===null||I===void 0?void 0:I.valueOf())||undefined,importance:Zt(e,c),isNavigable:true,formatOptions:L,caseSensitive:zt(n),typeConfig:H,visualSettings:j,timezoneText:(A=P)===null||A===void 0?void 0:A.timezone,isPartOfLineItem:true};W.isInsightsSupported=K===true&&o===true&&en(e,M,n,B);const Q=$t(e)||M;if(Q){W.tooltip=Q}if(C.textOnlyPropertiesFromTextAnnotation.length>0){v.push(...C.textOnlyPropertiesFromTextAnnotation)}if(C.exportDataPointTargetValue&&W.exportSettings){W.exportDataPointTargetValue=C.exportDataPointTargetValue;W.exportSettings.type="String"}l.push(W);S.forEach(e=>{r[e]=C.properties[e];if(B){s.push(e)}});E.forEach(e=>{r[e]=C.additionalProperties[e]})})}return Ct(r,a,l,s,n,u,v)};const nn=function(e,t,n,o){let i;if(e){i=e.map(function(e){const i=t.find(function(t){return t.relativePath===e&&t.propertyInfos===undefined});if(i){return i.name}else{const i=wt({[e]:o.resolvePath(e)},t,[],n,o,[]);t.push(i[0]);return i[0].name}})}return i};const on=function(e){return e.map(t=>`{${e.indexOf(t)}}`).join(`${"\n"}`)};const an=function(e,t,n,o,i){const a={};function l(e,n){return t.some(e=>e.key===n)}function r(e){return e.type===tt.Slot}function s(e){return e.type===undefined&&!!e.template}function d(e,t){const o=oe(n.getEntitySet());e.forEach(e=>{t.forEach(t=>{if(t.name===e){t.sortable=o.indexOf(e.replace("Property::",""))===-1;t.isGroupable=t.sortable}})})}for(const g in e){var u;const m=e[g];Me.validateKey(g);const y={key:g,width:m.width||undefined,position:{anchor:(u=m.position)===null||u===void 0?void 0:u.anchor,placement:m.position===undefined?Ve.After:m.position.placement},caseSensitive:zt(n)};if(l(m,g)){const e={...y,importance:m===null||m===void 0?void 0:m.importance,horizontalAlign:m===null||m===void 0?void 0:m.horizontalAlign,availability:m===null||m===void 0?void 0:m.availability,type:tt.Annotation,isNavigable:l(m,g)?undefined:ze(m,i,true),settings:m.settings,formatOptions:Kt(m.formatOptions)};a[g]=e}else{var v;const e=nn(m.properties,t,n,o);const i={...y,header:m.header,importance:(m===null||m===void 0?void 0:m.importance)||K.None,horizontalAlign:(m===null||m===void 0?void 0:m.horizontalAlign)||W.Begin,availability:(m===null||m===void 0?void 0:m.availability)||"Default",template:m.template,propertyInfos:e,exportSettings:e?{template:on(e),wrap:!!(e.length>1)}:null,id:`CustomColumn::${g}`,name:`CustomColumn::${g}`,formatOptions:{textLinesEdit:4},isGroupable:false,isNavigable:false,sortable:false,visualSettings:{widthCalculation:null},properties:m.properties,tooltip:m.header};if((v=m.header)!==null&&v!==void 0&&v.startsWith("{metaModel>")){var c,f;const e=(c=m.header)===null||c===void 0?void 0:c.substring(11,((f=m.header)===null||f===void 0?void 0:f.length)-1);try{i.header=n.getEntityTypeAnnotation(e).annotation.toString()}catch(t){F.info(`Unable to retrieve text from meta model using path ${e}`)}}if(e){d(e,t)}if(r(m)){const e={...i,type:tt.Slot};a[g]=e}else if(s(m)){const e={...i,type:tt.Default};a[g]=e}else{var p;const e=`The annotation column '${g}' referenced in the manifest is not found`;n.getDiagnostics().addIssue(we.Manifest,$e.Low,e,Ne,Ne===null||Ne===void 0?void 0:(p=Ne.AnnotationColumns)===null||p===void 0?void 0:p.InvalidKey)}}}return a};function ln(e,t,n){var o;const i=t.getManifestWrapper();const a=t.getManifestControlConfiguration(e);const l=i.getVariantManagement();const r=[];const s=n.type==="AnalyticalTable";const d=n.type==="ResponsiveTable";if((a===null||a===void 0?void 0:(o=a.tableSettings)===null||o===void 0?void 0:o.personalization)!==undefined){const e=a.tableSettings.personalization;if(e===true){switch(n.type){case"AnalyticalTable":return"Sort,Column,Filter,Group,Aggregate";case"ResponsiveTable":return"Sort,Column,Filter,Group";default:return"Sort,Column,Filter"}}else if(typeof e==="object"){if(e.sort){r.push("Sort")}if(e.column){r.push("Column")}if(e.filter){r.push("Filter")}if(e.group&&(s||d)){r.push("Group")}if(e.aggregate&&s){r.push("Aggregate")}return r.length>0?r.join(","):undefined}}else{r.push("Sort");r.push("Column");if(t.getTemplateType()===z.ListReport){if(l===B.Control||rn(i,t)){r.push("Filter")}}else{r.push("Filter")}if(s){r.push("Group");r.push("Aggregate")}if(d){r.push("Group")}return r.join(",")}return undefined}C.getP13nMode=ln;function rn(e,t){return e.isFilterBarHidden()&&!t.getManifestWrapper().hasMultipleVisualizations()&&t.getTemplateType()!==z.AnalyticalListPage}function sn(e,t,n){const o=oe(e.getEntitySet());let i;if(t!==null&&t!==void 0&&t.SortOrder){const e=[];const a={sorters:e};t.SortOrder.forEach(e=>{var t;const i=e.Property;if(i&&o.indexOf((t=i.$target)===null||t===void 0?void 0:t.name)===-1){const t=un([i],n)[0];if(t){a.sorters.push({name:t,descending:!!e.Descending})}}});i=a.sorters.length?JSON.stringify(a):undefined}return i}function dn(e){var t;if(!e){return undefined}const n=(t=e.InitialExpansionLevel)===null||t===void 0?void 0:t.valueOf();return typeof n==="number"?n:undefined}function un(e,t){const n=[];let o,i;e.forEach(e=>{if(e!==null&&e!==void 0&&e.value){o=t.find(t=>{i=t;return!i.propertyInfos&&i.relativePath===(e===null||e===void 0?void 0:e.value)});if(o){n.push(o.name)}}});return n}function vn(e,t,n){let o;if(e!==null&&e!==void 0&&e.GroupBy){let i=e.GroupBy;if(n==="ResponsiveTable"){i=i.slice(0,1)}const a=un(i,t).map(e=>({name:e}));o=a.length?JSON.stringify({groupLevels:a}):undefined}return o}function cn(e){const t={};e.columns.forEach(n=>{var o;n=n;const i=Object.keys(e.aggregates).find(e=>e===n.name);if(i){const t=e.aggregates[i];n.aggregatable=true;n.extension={customAggregate:t.defaultAggregate??{}}}if((o=n.additionalPropertyInfos)!==null&&o!==void 0&&o.length){n.additionalPropertyInfos.forEach(n=>{Lt(n,e.columns,t)})}});e.columns.forEach(e=>{e=e;if(e.additionalPropertyInfos){var n;e.additionalPropertyInfos=e.additionalPropertyInfos.map(e=>t[e]??e);e.propertyInfos=(n=e.propertyInfos)===null||n===void 0?void 0:n.concat(e.additionalPropertyInfos)}})}function fn(e,t){let n;if(e!==null&&e!==void 0&&e.Total){const o=e.Total;const i={};un(o,t).forEach(e=>{i[e]={}});n=JSON.stringify(i)}return n}function pn(e,t,n,o,i,a,l,r){var s,d,u;const{navigationPropertyPath:v}=mn(t);const c=(s=n.getDataModelObjectPath().targetEntityType.annotations)===null||s===void 0?void 0:(d=s.UI)===null||d===void 0?void 0:(u=d.HeaderInfo)===null||u===void 0?void 0:u.TypeNamePlural;const f=c&&Ee(Pe(c));const p=n.getDataModelObjectPath().targetEntitySet;const g=n.getManifestWrapper();const m=v.length===0,y=ln(t,n,o),b=v?_(t):_(n.getContextPath(),"LineItem");const h=Tt(n);const T=lt(n,v);const I=g.getNavigationConfiguration(T);const A=Dt(e,o,n,I,t);const P=k(n,A.mode,o,l,r);const D=L(n,P);const F=w(n,P);const C=V(P,E(n));const N=It(e,t,n,m,h,D,F);let H=v?10:30;if(a!==null&&a!==void 0&&a.MaxItems){H=a.MaxItems.valueOf()}const j=g.getVariantManagement();const G=le(n.getDataModelObjectPath());const K={create:$(n,P),delete:U(n,P),paste:O(n,P,C),massEdit:x(n,P),insights:M(n,P,t),creationRow:R(n,P)};return{id:b,entityName:p?p.name:"",collection:se(n.getDataModelObjectPath()),navigationPath:v,row:Ft(e,n,I,T,o.type),p13nMode:y,standardActions:{actions:K,isInsertUpdateTemplated:C,updatablePropertyPath:ct(n)},displayMode:S(n,l),create:A,selectionMode:N,autoBindOnInit:rn(g,n)||n.getTemplateType()!==z.ListReport&&n.getTemplateType()!==z.AnalyticalListPage&&!(l&&g.hasMultipleVisualizations(l)),variantManagement:j==="Control"&&!y?B.None:j,threshold:H,sortConditions:sn(n,a,i),title:f,searchable:o.type!=="AnalyticalTable"&&!(Ie(G)&&G.value===false),initialExpansionLevel:dn(a)}}C.getTableAnnotationConfiguration=pn;function gn(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let n="String";if(t){if(e==="Edm.DateTimeOffset"){n="DateTime"}return n}else{switch(e){case"Edm.Decimal":case"Edm.Int32":case"Edm.Int64":case"Edm.Double":case"Edm.Byte":n="Number";break;case"Edm.DateOfTime":case"Edm.Date":n="Date";break;case"Edm.DateTimeOffset":n="DateTime";break;case"Edm.TimeOfDay":n="Time";break;case"Edm.Boolean":n="Boolean";break;default:n="String"}}return n}function mn(e){const[t,n]=e.split("@");let o=t;if(o.lastIndexOf("/")===o.length-1){o=o.substr(0,o.length-1)}return{navigationPropertyPath:o,annotationPath:n}}C.splitPath=mn;function yn(e,t){const n=t.getEntityTypeAnnotation(e);const o=n.annotation;if(o){var i,a;const e=[];(i=o.SelectOptions)===null||i===void 0?void 0:i.forEach(t=>{const n=t.PropertyName;const o=(n===null||n===void 0?void 0:n.value)??"";if(e.indexOf(o)===-1){e.push(o)}});return{text:o===null||o===void 0?void 0:(a=o.Text)===null||a===void 0?void 0:a.toString(),propertyNames:e}}return undefined}C.getSelectionVariantConfiguration=yn;function bn(e,t,n){let o=e.enableFullScreen??n;if(!n&&o&&t.getTemplateType()===z.ListReport){o=false;t.getDiagnostics().addIssue(we.Manifest,$e.Low,Ue.FULLSCREENMODE_NOT_ON_LISTREPORT)}return o}function hn(e,t,n){let o;if(t!=="ResponsiveTable"){return undefined}switch(n.getTemplateType()){case z.ListReport:case z.AnalyticalListPage:o=!e.selectAll?"ClearAll":"Default";break;case z.ObjectPage:o=e.selectAll===false?"ClearAll":"Default";if(n.getManifestWrapper().useIconTabBar()){o=!e.selectAll?"ClearAll":"Default"}break;default:}return o}function Tn(e,t,n){let o=(e===null||e===void 0?void 0:e.type)||"ResponsiveTable";if((o==="AnalyticalTable"||o==="TreeTable")&&!n.getManifestWrapper().isDesktop()){o="ResponsiveTable"}return o}function In(e,t,n){if(e!=="ResponsiveTable"){if(n){return{rowCountMode:"Auto",rowCount:3}}else{return{rowCountMode:t.rowCountMode??"Fixed",rowCount:t.rowCount?t.rowCount:5}}}else{return{}}}function An(e,t){return t.condensedTableLayout!==undefined&&e!=="ResponsiveTable"?t.condensedTableLayout:false}function Pn(e){return e.selectAll===true||e.selectionLimit===0?0:e.selectionLimit||200}function Dn(e){var t,n;return(t=e.creationMode)!==null&&t!==void 0&&t.inlineCreationRowCount?(n=e.creationMode)===null||n===void 0?void 0:n.inlineCreationRowCount:2}function Fn(e,t,n,o){var i;if(n){t.push({annotationPath:o.annotationPath})}return{quickFilters:{showCounts:e===null||e===void 0?void 0:(i=e.quickVariantSelection)===null||i===void 0?void 0:i.showCounts,paths:t}}}function Cn(e,t,n){return e.enableExport!==undefined?e.enableExport:t.getTemplateType()!=="ObjectPage"||n}function Sn(e){return e.frozenColumnCount}function En(e,t,n){var o,i,a;if(!t){return{}}const l=[];const r=n.getAnnotationEntityType(t);let s;let d;e===null||e===void 0?void 0:(o=e.quickVariantSelection)===null||o===void 0?void 0:(i=o.paths)===null||i===void 0?void 0:i.forEach(t=>{s=r.resolvePath(t.annotationPath);d=Fn(e,l,s,t)});let u=false;u=!!((a=e.quickVariantSelection)!==null&&a!==void 0&&a.hideTableTitle);return{filters:d,headerVisible:!(s&&u)}}function On(e,t){const n=de(t.getDataModelObjectPath(),e).navigationProperties;if((n===null||n===void 0?void 0:n.length)>0){const e=[];n.forEach(t=>{e.push(Ut(t)||t.name)});return e}}function xn(e,t,n){var o,i,a,l,r,s,d,u;let v=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const c=n.getManifestWrapper();const f=n.getManifestControlConfiguration(t);const p=f&&f.tableSettings||{};const g=((o=p.creationMode)===null||o===void 0?void 0:o.name)||Q.NewPage;const m=!c.isPhone();const y=p.enablePaste!==undefined?p.enablePaste:n.getTemplateType()==="ObjectPage";const b=n.getTemplateType();const h=b===z.ListReport?"API.dataStateIndicatorFilter":undefined;const T=v&&c.isCondensedLayoutCompliant();const I=En(p,e,n);const A=(i=p.creationMode)===null||i===void 0?void 0:i.customValidationFunction;const P=n.getEntityType();const D=new J(P,n);const F=Tn(p,D,n);const C=In(F,p,b===z.ListReport);const S=An(F,p);const E={createAtEnd:((a=p.creationMode)===null||a===void 0?void 0:a.createAtEnd)!==undefined?(l=p.creationMode)===null||l===void 0?void 0:l.createAtEnd:g!==Q.Inline,creationMode:g,customValidationFunction:A,dataStateIndicatorFilter:h,disableAddRowButtonForEmptyData:!A?!!((r=p.creationMode)!==null&&r!==void 0&&r.disableAddRowButtonForEmptyData):false,enableAutoColumnWidth:m,enableExport:Cn(p,n,y),frozenColumnCount:Sn(p),enableFullScreen:bn(p,n,c.isPhone()),enableMassEdit:p===null||p===void 0?void 0:p.enableMassEdit,enableAddCardToInsights:p===null||p===void 0?void 0:p.enableAddCardToInsights,enablePaste:y,headerVisible:true,multiSelectMode:hn(p,F,n),selectionLimit:Pn(p),inlineCreationRowCount:Dn(p),inlineCreationRowsHiddenInEditMode:(p===null||p===void 0?void 0:(s=p.creationMode)===null||s===void 0?void 0:s.inlineCreationRowsHiddenInEditMode)??false,showRowCount:!(p!==null&&p!==void 0&&(d=p.quickVariantSelection)!==null&&d!==void 0&&d.showCounts)&&!((u=c.getViewConfiguration())!==null&&u!==void 0&&u.showCounts),type:F,useCondensedTableLayout:S&&T,isCompactType:c.isCompactType()};const O={...E,...C,...I};if(F==="TreeTable"){O.hierarchyQualifier=p.hierarchyQualifier}return O}C.getTableManifestConfiguration=xn;function Mn(e,t){var n,o,i,a,l;let r;if(ve(e)){r=ue(e.targetType)?Ce[e.targetType.underlyingType]:Ce[e.type]}if(r===undefined&&t!==undefined){r=Ce[t]}const s={type:(n=r)===null||n===void 0?void 0:n.type,constraints:{},formatOptions:{}};if(ve(e)&&r!==undefined){var d,u,v,c,f,p,g,m,y,b,h,T,I,A,P,D,F;s.constraints={scale:(d=r.constraints)!==null&&d!==void 0&&d.$Scale?e.scale:undefined,precision:(u=r.constraints)!==null&&u!==void 0&&u.$Precision?e.precision:undefined,maxLength:(v=r.constraints)!==null&&v!==void 0&&v.$MaxLength?e.maxLength:undefined,nullable:(c=r.constraints)!==null&&c!==void 0&&c.$Nullable?e.nullable:undefined,minimum:(f=r.constraints)!==null&&f!==void 0&&f["@Org.OData.Validation.V1.Minimum/$Decimal"]&&!isNaN((p=e.annotations)===null||p===void 0?void 0:(g=p.Validation)===null||g===void 0?void 0:g.Minimum)?`${(m=e.annotations)===null||m===void 0?void 0:(y=m.Validation)===null||y===void 0?void 0:y.Minimum}`:undefined,maximum:(b=r.constraints)!==null&&b!==void 0&&b["@Org.OData.Validation.V1.Maximum/$Decimal"]&&!isNaN((h=e.annotations)===null||h===void 0?void 0:(T=h.Validation)===null||T===void 0?void 0:T.Maximum)?`${(I=e.annotations)===null||I===void 0?void 0:(A=I.Validation)===null||A===void 0?void 0:A.Maximum}`:undefined,isDigitSequence:s.type==="sap.ui.model.odata.type.String"&&(P=r.constraints)!==null&&P!==void 0&&P[`@${"com.sap.vocabularies.Common.v1.IsDigitSequence"}`]&&(D=e.annotations)!==null&&D!==void 0&&(F=D.Common)!==null&&F!==void 0&&F.IsDigitSequence?true:undefined}}s.formatOptions={parseAsString:(s===null||s===void 0?void 0:(o=s.type)===null||o===void 0?void 0:o.indexOf("sap.ui.model.odata.type.Int"))===0||(s===null||s===void 0?void 0:(i=s.type)===null||i===void 0?void 0:i.indexOf("sap.ui.model.odata.type.Double"))===0?false:undefined,emptyString:(s===null||s===void 0?void 0:(a=s.type)===null||a===void 0?void 0:a.indexOf("sap.ui.model.odata.type.Int"))===0||(s===null||s===void 0?void 0:(l=s.type)===null||l===void 0?void 0:l.indexOf("sap.ui.model.odata.type.Double"))===0?"":undefined,parseKeepsEmptyString:s.type==="sap.ui.model.odata.type.String"?true:undefined};return s}C.getTypeConfig=Mn;return{getTableActions:nt,getTableColumns:ot,getColumnsFromEntityType:Ct,updateLinkedProperties:rt,createTableVisualization:dt,createDefaultTableVisualization:ut,getCapabilityRestriction:Tt,getSelectionMode:It,getRowStatusVisibility:Nt,getImportance:Zt,getP13nMode:ln,getTableAnnotationConfiguration:pn,isFilteringCaseSensitive:zt,splitPath:mn,getSelectionVariantConfiguration:yn,getTableManifestConfiguration:xn,getTypeConfig:Mn,updateTableVisualizationForType:at}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/table/StandardActions-dbg", ["sap/fe/core/formatters/TableFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "../../../helpers/BindingHelper", "../../../helpers/InsightsHelpers", "../../../ManifestSettings"], function (tableFormatters, BindingToolkit, ModelHelper, TypeGuards, DataModelPathHelper, BindingHelper, InsightsHelpers, ManifestSettings) {
  "use strict";

  var _exports = {};
  var TemplateType = ManifestSettings.TemplateType;
  var CreationMode = ManifestSettings.CreationMode;
  var getInsightsVisibility = InsightsHelpers.getInsightsVisibility;
  var UI = BindingHelper.UI;
  var singletonPathVisitor = BindingHelper.singletonPathVisitor;
  var isPathUpdatable = DataModelPathHelper.isPathUpdatable;
  var isPathInsertable = DataModelPathHelper.isPathInsertable;
  var isPathDeletable = DataModelPathHelper.isPathDeletable;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isEntitySet = TypeGuards.isEntitySet;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var notEqual = BindingToolkit.notEqual;
  var not = BindingToolkit.not;
  var length = BindingToolkit.length;
  var isPathInModelExpression = BindingToolkit.isPathInModelExpression;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var greaterThan = BindingToolkit.greaterThan;
  var greaterOrEqual = BindingToolkit.greaterOrEqual;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var AnnotationHiddenProperty;
  (function (AnnotationHiddenProperty) {
    AnnotationHiddenProperty["CreateHidden"] = "CreateHidden";
    AnnotationHiddenProperty["DeleteHidden"] = "DeleteHidden";
    AnnotationHiddenProperty["UpdateHidden"] = "UpdateHidden";
  })(AnnotationHiddenProperty || (AnnotationHiddenProperty = {}));
  /**
   * Generates the context for the standard actions.
   *
   * @param converterContext
   * @param creationMode
   * @param tableManifestConfiguration
   * @param viewConfiguration
   * @param isInsightsEnabled
   * @returns  The context for table actions
   */
  function generateStandardActionsContext(converterContext, creationMode, tableManifestConfiguration, viewConfiguration, isInsightsEnabled) {
    return {
      collectionPath: getTargetObjectPath(converterContext.getDataModelObjectPath()),
      hiddenAnnotation: {
        create: isActionAnnotatedHidden(converterContext, AnnotationHiddenProperty.CreateHidden),
        delete: isActionAnnotatedHidden(converterContext, AnnotationHiddenProperty.DeleteHidden),
        update: isActionAnnotatedHidden(converterContext, AnnotationHiddenProperty.UpdateHidden)
      },
      creationMode: creationMode,
      isDraftOrStickySupported: isDraftOrStickySupported(converterContext),
      isViewWithMultipleVisualizations: viewConfiguration ? converterContext.getManifestWrapper().hasMultipleVisualizations(viewConfiguration) : false,
      newAction: getNewAction(converterContext),
      tableManifestConfiguration: tableManifestConfiguration,
      restrictions: getRestrictions(converterContext),
      isInsightsEnabled: isInsightsEnabled
    };
  }

  /**
   * Checks if sticky or draft is supported.
   *
   * @param converterContext
   * @returns `true` if it is supported
   */
  _exports.generateStandardActionsContext = generateStandardActionsContext;
  function isDraftOrStickySupported(converterContext) {
    var _dataModelObjectPath$, _dataModelObjectPath$2, _dataModelObjectPath$3;
    const dataModelObjectPath = converterContext.getDataModelObjectPath();
    const bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(dataModelObjectPath);
    const bIsStickySessionSupported = (_dataModelObjectPath$ = dataModelObjectPath.startingEntitySet) !== null && _dataModelObjectPath$ !== void 0 && (_dataModelObjectPath$2 = _dataModelObjectPath$.annotations) !== null && _dataModelObjectPath$2 !== void 0 && (_dataModelObjectPath$3 = _dataModelObjectPath$2.Session) !== null && _dataModelObjectPath$3 !== void 0 && _dataModelObjectPath$3.StickySessionSupported ? true : false;
    return bIsDraftSupported || bIsStickySessionSupported;
  }

  /**
   * Gets the configured newAction into annotation.
   *
   * @param converterContext
   * @returns The new action info
   */
  _exports.isDraftOrStickySupported = isDraftOrStickySupported;
  function getNewAction(converterContext) {
    var _currentEntitySet$ann, _currentEntitySet$ann2, _currentEntitySet$ann3, _currentEntitySet$ann4;
    const currentEntitySet = converterContext.getEntitySet();
    const newAction = isEntitySet(currentEntitySet) ? ((_currentEntitySet$ann = currentEntitySet.annotations.Common) === null || _currentEntitySet$ann === void 0 ? void 0 : (_currentEntitySet$ann2 = _currentEntitySet$ann.DraftRoot) === null || _currentEntitySet$ann2 === void 0 ? void 0 : _currentEntitySet$ann2.NewAction) ?? ((_currentEntitySet$ann3 = currentEntitySet.annotations.Session) === null || _currentEntitySet$ann3 === void 0 ? void 0 : (_currentEntitySet$ann4 = _currentEntitySet$ann3.StickySessionSupported) === null || _currentEntitySet$ann4 === void 0 ? void 0 : _currentEntitySet$ann4.NewAction) : undefined;
    const newActionName = newAction === null || newAction === void 0 ? void 0 : newAction.toString();
    if (newActionName) {
      var _converterContext$get, _converterContext$get2, _converterContext$get3, _converterContext$get4;
      let availableProperty = converterContext === null || converterContext === void 0 ? void 0 : (_converterContext$get = converterContext.getEntityType().actions[newActionName]) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.annotations) === null || _converterContext$get2 === void 0 ? void 0 : (_converterContext$get3 = _converterContext$get2.Core) === null || _converterContext$get3 === void 0 ? void 0 : (_converterContext$get4 = _converterContext$get3.OperationAvailable) === null || _converterContext$get4 === void 0 ? void 0 : _converterContext$get4.valueOf();
      availableProperty = availableProperty !== undefined ? availableProperty : true;
      return {
        name: newActionName,
        available: getExpressionFromAnnotation(availableProperty)
      };
    }
    return undefined;
  }

  /**
   * Gets the binding expression for the action visibility configured into annotation.
   *
   * @param converterContext
   * @param sAnnotationTerm
   * @param bWithNavigationPath
   * @returns The binding expression for the action visibility
   */
  _exports.getNewAction = getNewAction;
  function isActionAnnotatedHidden(converterContext, sAnnotationTerm) {
    var _currentEntitySet$ann5;
    let bWithNavigationPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const currentEntitySet = converterContext.getEntitySet();
    const dataModelObjectPath = converterContext.getDataModelObjectPath();
    // Consider only the last level of navigation. The others are already considered in the element binding of the page.
    const visitedNavigationPaths = dataModelObjectPath.navigationProperties.length > 0 && bWithNavigationPath ? [dataModelObjectPath.navigationProperties[dataModelObjectPath.navigationProperties.length - 1].name] : [];
    const actionAnnotationValue = (currentEntitySet === null || currentEntitySet === void 0 ? void 0 : (_currentEntitySet$ann5 = currentEntitySet.annotations.UI) === null || _currentEntitySet$ann5 === void 0 ? void 0 : _currentEntitySet$ann5[sAnnotationTerm]) || false;
    return currentEntitySet ? getExpressionFromAnnotation(actionAnnotationValue, visitedNavigationPaths, undefined, path => singletonPathVisitor(path, converterContext.getConvertedTypes(), visitedNavigationPaths)) : constant(false);
  }

  /**
   * Gets the annotated restrictions for the actions.
   *
   * @param converterContext
   * @returns The restriction information
   */
  _exports.isActionAnnotatedHidden = isActionAnnotatedHidden;
  function getRestrictions(converterContext) {
    const dataModelObjectPath = converterContext.getDataModelObjectPath();
    const restrictionsDef = [{
      key: "isInsertable",
      function: isPathInsertable
    }, {
      key: "isUpdatable",
      function: isPathUpdatable
    }, {
      key: "isDeletable",
      function: isPathDeletable
    }];
    const result = {};
    restrictionsDef.forEach(function (def) {
      const defFunction = def["function"];
      result[def.key] = {
        expression: defFunction.apply(null, [dataModelObjectPath, {
          pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)
        }]),
        navigationExpression: defFunction.apply(null, [dataModelObjectPath, {
          ignoreTargetCollection: true,
          authorizeUnresolvable: true,
          pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)
        }])
      };
    });
    return result;
  }

  /**
   * Checks if templating for insert/update actions is mandatory.
   *
   * @param standardActionsContext
   * @param isDraftOrSticky
   * @returns True if we need to template insert or update actions, false otherwise
   */
  _exports.getRestrictions = getRestrictions;
  function getInsertUpdateActionsTemplating(standardActionsContext, isDraftOrSticky) {
    return isDraftOrSticky || standardActionsContext.creationMode === CreationMode.External;
  }

  /**
   * Gets the binding expressions for the properties of the 'Create' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @returns The standard action info
   */
  _exports.getInsertUpdateActionsTemplating = getInsertUpdateActionsTemplating;
  function getStandardActionCreate(converterContext, standardActionsContext) {
    const createVisibility = getCreateVisibility(converterContext, standardActionsContext);
    return {
      isTemplated: compileExpression(getCreateTemplating(standardActionsContext, createVisibility)),
      visible: compileExpression(createVisibility),
      enabled: compileExpression(getCreateEnablement(converterContext, standardActionsContext, createVisibility))
    };
  }

  /**
   * Gets the binding expressions for the properties of the 'Delete' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @returns The binding expressions for the properties of the 'Delete' action.
   */
  _exports.getStandardActionCreate = getStandardActionCreate;
  function getStandardActionDelete(converterContext, standardActionsContext) {
    const deleteVisibility = getDeleteVisibility(converterContext, standardActionsContext);
    return {
      isTemplated: compileExpression(getDefaultTemplating(deleteVisibility)),
      visible: compileExpression(deleteVisibility),
      enabled: compileExpression(getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility))
    };
  }

  /**
   * @param converterContext
   * @param standardActionsContext
   * @returns StandardActionConfigType
   */
  _exports.getStandardActionDelete = getStandardActionDelete;
  function getCreationRow(converterContext, standardActionsContext) {
    const creationRowVisibility = getCreateVisibility(converterContext, standardActionsContext, true);
    return {
      isTemplated: compileExpression(getCreateTemplating(standardActionsContext, creationRowVisibility, true)),
      visible: compileExpression(creationRowVisibility),
      enabled: compileExpression(getCreationRowEnablement(converterContext, standardActionsContext, creationRowVisibility))
    };
  }

  /**
   * Gets the binding expressions for the properties of the 'Paste' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param isInsertUpdateActionsTemplated
   * @returns The binding expressions for the properties of the 'Paste' action.
   */
  _exports.getCreationRow = getCreationRow;
  function getStandardActionPaste(converterContext, standardActionsContext, isInsertUpdateActionsTemplated) {
    const createVisibility = getCreateVisibility(converterContext, standardActionsContext);
    const createEnablement = getCreateEnablement(converterContext, standardActionsContext, createVisibility);
    const pasteVisibility = getPasteVisibility(converterContext, standardActionsContext, createVisibility, isInsertUpdateActionsTemplated);
    return {
      visible: compileExpression(pasteVisibility),
      enabled: compileExpression(getPasteEnablement(pasteVisibility, createEnablement))
    };
  }

  /**
   * Gets the binding expressions for the properties of the 'MassEdit' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @returns The binding expressions for the properties of the 'MassEdit' action.
   */
  _exports.getStandardActionPaste = getStandardActionPaste;
  function getStandardActionMassEdit(converterContext, standardActionsContext) {
    const massEditVisibility = getMassEditVisibility(converterContext, standardActionsContext);
    return {
      isTemplated: compileExpression(getDefaultTemplating(massEditVisibility)),
      visible: compileExpression(massEditVisibility),
      enabled: compileExpression(getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility))
    };
  }

  /**
   * Gets the binding expressions for the properties of the 'AddCardsToInsights' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param visualizationPath
   * @returns The binding expressions for the properties of the 'AddCardsToInsights' action.
   */
  _exports.getStandardActionMassEdit = getStandardActionMassEdit;
  function getStandardActionInsights(converterContext, standardActionsContext, visualizationPath) {
    const insightsVisibility = (standardActionsContext.isInsightsEnabled ?? false) && getInsightsVisibility("Table", converterContext, visualizationPath, standardActionsContext);
    return {
      isTemplated: compileExpression(insightsVisibility),
      visible: compileExpression(insightsVisibility),
      enabled: compileExpression(insightsVisibility)
    };
  }

  /**
   * Gets the binding expression for the templating of the 'Create' action.
   *
   * @param standardActionsContext
   * @param createVisibility
   * @param isForCreationRow
   * @returns The create binding expression
   */
  _exports.getStandardActionInsights = getStandardActionInsights;
  function getCreateTemplating(standardActionsContext, createVisibility) {
    let isForCreationRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    //Templating of Create Button is not done:
    // 	 - If Button is never visible(covered the External create button, new Action)
    //	 - or CreationMode is on CreationRow for Create Button
    //	 - or CreationMode is not on CreationRow for CreationRow Button

    return and(
    //XNOR gate
    or(and(isForCreationRow, standardActionsContext.creationMode === CreationMode.CreationRow), and(!isForCreationRow, standardActionsContext.creationMode !== CreationMode.CreationRow)), or(not(isConstant(createVisibility)), createVisibility));
  }

  /**
   * Gets the binding expression for the templating of the non-Create actions.
   *
   * @param actionVisibility
   * @returns The binding expression for the templating of the non-Create actions.
   */
  _exports.getCreateTemplating = getCreateTemplating;
  function getDefaultTemplating(actionVisibility) {
    return or(not(isConstant(actionVisibility)), actionVisibility);
  }

  /**
   * Gets the binding expression for the 'visible' property of the 'Create' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param isForCreationRow
   * @returns The binding expression for the 'visible' property of the 'Create' action.
   */
  _exports.getDefaultTemplating = getDefaultTemplating;
  function getCreateVisibility(converterContext, standardActionsContext) {
    var _standardActionsConte, _standardActionsConte2;
    let isForCreationRow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const isInsertable = standardActionsContext.restrictions.isInsertable.expression;
    const isCreateHidden = isForCreationRow ? isActionAnnotatedHidden(converterContext, AnnotationHiddenProperty.CreateHidden, false) : standardActionsContext.hiddenAnnotation.create;
    const newAction = standardActionsContext.newAction;
    //Create Button is visible:
    // 	 - If the creation mode is external
    //      - If we're on the list report and create is not hidden
    //		- Otherwise this depends on the value of the UI.IsEditable
    //	 - Otherwise
    //		- If any of the following conditions is valid then create button isn't visible
    //			- no newAction available
    //			- It's not insertable and there is not a new action
    //			- create is hidden
    //			- There are multiple visualizations
    //			- It's an Analytical List Page
    //			- Uses InlineCreationRows mode and a Responsive table type, with the parameter inlineCreationRowsHiddenInEditMode to true while not in create mode
    //   - Otherwise
    // 	 	- If we're on the list report ->
    // 	 		- If UI.CreateHidden points to a property path -> provide a negated binding to this path
    // 	 		- Otherwise, create is visible
    // 	 	- Otherwise
    // 	  	 - This depends on the value of the UI.IsEditable
    return ifElse(standardActionsContext.creationMode === CreationMode.External, and(not(isCreateHidden), or(converterContext.getTemplateType() === TemplateType.ListReport, UI.IsEditable)), ifElse(or(and(isConstant(newAction === null || newAction === void 0 ? void 0 : newAction.available), equal(newAction === null || newAction === void 0 ? void 0 : newAction.available, false)), and(isConstant(isInsertable), equal(isInsertable, false), !newAction), and(isConstant(isCreateHidden), equal(isCreateHidden, true)), and(standardActionsContext.creationMode === CreationMode.InlineCreationRows, ((_standardActionsConte = standardActionsContext.tableManifestConfiguration) === null || _standardActionsConte === void 0 ? void 0 : _standardActionsConte.type) === "ResponsiveTable", ifElse((standardActionsContext === null || standardActionsContext === void 0 ? void 0 : (_standardActionsConte2 = standardActionsContext.tableManifestConfiguration) === null || _standardActionsConte2 === void 0 ? void 0 : _standardActionsConte2.inlineCreationRowsHiddenInEditMode) === false, true, UI.IsCreateMode))), false, ifElse(converterContext.getTemplateType() === TemplateType.ListReport, or(not(isPathInModelExpression(isCreateHidden)), not(isCreateHidden)), and(not(isCreateHidden), UI.IsEditable))));
  }

  /**
   * Gets the binding expression for the 'visible' property of the 'Delete' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @returns The binding expression for the 'visible' property of the 'Delete' action.
   */
  _exports.getCreateVisibility = getCreateVisibility;
  function getDeleteVisibility(converterContext, standardActionsContext) {
    const isDeleteHidden = standardActionsContext.hiddenAnnotation.delete;
    const pathDeletableExpression = standardActionsContext.restrictions.isDeletable.expression;

    //Delete Button is visible:
    // 	 Prerequisites:
    //	 - If we're not on ALP
    //   - If restrictions on deletable set to false -> not visible
    //   - Otherwise
    //			- If UI.DeleteHidden is true -> not visible
    //			- Otherwise
    // 	 			- If we're on OP -> depending if UI is editable and restrictions on deletable
    //				- Otherwise
    //				 	- If UI.DeleteHidden points to a property path -> provide a negated binding to this path
    //	 	 		 	- Otherwise, delete is visible

    return ifElse(converterContext.getTemplateType() === TemplateType.AnalyticalListPage, false, ifElse(and(isConstant(pathDeletableExpression), equal(pathDeletableExpression, false)), false, ifElse(and(isConstant(isDeleteHidden), equal(isDeleteHidden, constant(true))), false, ifElse(converterContext.getTemplateType() !== TemplateType.ListReport, and(not(isDeleteHidden), UI.IsEditable), not(and(isPathInModelExpression(isDeleteHidden), isDeleteHidden))))));
  }

  /**
   * Gets the binding expression for the 'visible' property of the 'Paste' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param createVisibility
   * @param isInsertUpdateActionsTemplated
   * @returns The binding expression for the 'visible' property of the 'Paste' action.
   */
  _exports.getDeleteVisibility = getDeleteVisibility;
  function getPasteVisibility(converterContext, standardActionsContext, createVisibility, isInsertUpdateActionsTemplated) {
    // If Create is visible, enablePaste is not disabled into manifest and we are on OP/blocks outside Fiori elements templates
    // Then button will be visible according to insertable restrictions and create visibility
    // Otherwise it's not visible
    return and(notEqual(standardActionsContext.tableManifestConfiguration.enablePaste, false), createVisibility, isInsertUpdateActionsTemplated, [TemplateType.ListReport, TemplateType.AnalyticalListPage].indexOf(converterContext.getTemplateType()) === -1, standardActionsContext.restrictions.isInsertable.expression);
  }

  /**
   * Gets the binding expression for the 'visible' property of the 'MassEdit' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @returns The binding expression for the 'visible' property of the 'MassEdit' action.
   */
  _exports.getPasteVisibility = getPasteVisibility;
  function getMassEditVisibility(converterContext, standardActionsContext) {
    var _standardActionsConte3;
    const isUpdateHidden = standardActionsContext.hiddenAnnotation.update,
      pathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression,
      bMassEditEnabledInManifest = ((_standardActionsConte3 = standardActionsContext.tableManifestConfiguration) === null || _standardActionsConte3 === void 0 ? void 0 : _standardActionsConte3.enableMassEdit) || false;
    const templateBindingExpression = converterContext.getTemplateType() === TemplateType.ObjectPage ? UI.IsEditable : converterContext.getTemplateType() === TemplateType.ListReport;
    //MassEdit is visible
    // If
    //		- there is no static restrictions set to false
    //		- and enableMassEdit is not set to false into the manifest
    //		- and the selectionMode is relevant
    //	Then MassEdit is always visible in LR or dynamically visible in OP according to ui>Editable and hiddenAnnotation
    //  Button is hidden for all other cases
    return and(not(and(isConstant(pathUpdatableExpression), equal(pathUpdatableExpression, false))), bMassEditEnabledInManifest, templateBindingExpression, not(isUpdateHidden));
  }

  /**
   * Gets the binding expression for the 'enabled' property of the creationRow.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param creationRowVisibility
   * @returns The binding expression for the 'enabled' property of the creationRow.
   */
  _exports.getMassEditVisibility = getMassEditVisibility;
  function getCreationRowEnablement(converterContext, standardActionsContext, creationRowVisibility) {
    const restrictionsInsertable = isPathInsertable(converterContext.getDataModelObjectPath(), {
      ignoreTargetCollection: true,
      authorizeUnresolvable: true,
      pathVisitor: (path, navigationPaths) => {
        if (path.indexOf("/") === 0) {
          path = singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths);
          return path;
        }
        const navigationProperties = converterContext.getDataModelObjectPath().navigationProperties;
        if (navigationProperties) {
          const lastNav = navigationProperties[navigationProperties.length - 1];
          const partner = isNavigationProperty(lastNav) && lastNav.partner;
          if (partner) {
            path = `${partner}/${path}`;
          }
        }
        return path;
      }
    });
    const isInsertable = restrictionsInsertable._type === "Unresolvable" ? isPathInsertable(converterContext.getDataModelObjectPath(), {
      pathVisitor: path => singletonPathVisitor(path, converterContext.getConvertedTypes(), [])
    }) : restrictionsInsertable;
    return and(creationRowVisibility, isInsertable, or(!standardActionsContext.tableManifestConfiguration.disableAddRowButtonForEmptyData, formatResult([pathInModel("creationRowFieldValidity", "internal")], tableFormatters.validateCreationRowFields)));
  }

  /**
   * Gets the binding expression for the 'enabled' property of the 'Create' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param createVisibility
   * @returns The binding expression for the 'enabled' property of the 'Create' action.
   */
  _exports.getCreationRowEnablement = getCreationRowEnablement;
  function getCreateEnablement(converterContext, standardActionsContext, createVisibility) {
    let condition;
    if (standardActionsContext.creationMode === CreationMode.InlineCreationRows) {
      // for Inline creation rows create can be hidden via manifest and this should not impact its enablement
      condition = not(standardActionsContext.hiddenAnnotation.create);
    } else {
      condition = createVisibility;
    }
    const isInsertable = standardActionsContext.restrictions.isInsertable.expression;
    const CollectionType = converterContext.resolveAbsolutePath(standardActionsContext.collectionPath).target;
    return and(condition, or(isEntitySet(CollectionType), and(isInsertable, or(converterContext.getTemplateType() !== TemplateType.ObjectPage, UI.IsEditable))));
  }

  /**
   * Gets the binding expression for the 'enabled' property of the 'Delete' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param deleteVisibility
   * @returns The binding expression for the 'enabled' property of the 'Delete' action.
   */
  _exports.getCreateEnablement = getCreateEnablement;
  function getDeleteEnablement(converterContext, standardActionsContext, deleteVisibility) {
    // The following contexts are filled at runtime when a user selects one or more items from a list.
    // Checks are then made in function updateDeleteInfoForSelectedContexts in file DeleteHelper to see if there
    // are items that can be deleted, thus the delete button should be enabled in these cases.
    const deletableContexts = pathInModel("deletableContexts", "internal");
    const unSavedContexts = pathInModel("unSavedContexts", "internal");
    const draftsWithDeletableActive = pathInModel("draftsWithDeletableActive", "internal");
    const draftsWithNonDeletableActive = pathInModel("draftsWithNonDeletableActive", "internal");

    // "Unresolvable" in navigationExpression is interpreted to mean that there are no navigationExpressions
    // defined.
    // standardActionsContext.restrictions.isDeletable.expression is a binding expression that comes
    // from the Delete restrictions defined in NavigationRestrictions for this entity. In order to
    // be deletable, the item must also be allowed to be deletable according to the Delete Restrictions
    // on the entity itself.
    return and(deleteVisibility, or(standardActionsContext.restrictions.isDeletable.navigationExpression._type === "Unresolvable", standardActionsContext.restrictions.isDeletable.expression), or(and(notEqual(deletableContexts, undefined), greaterThan(length(deletableContexts), 0)), and(notEqual(draftsWithDeletableActive, undefined), greaterThan(length(draftsWithDeletableActive), 0)), and(notEqual(draftsWithNonDeletableActive, undefined), greaterThan(length(draftsWithNonDeletableActive), 0)), and(notEqual(unSavedContexts, undefined), greaterThan(length(unSavedContexts), 0))));
  }

  /**
   * Gets the binding expression for the 'enabled' property of the 'Paste' action.
   *
   * @param pasteVisibility
   * @param createEnablement
   * @returns The binding expression for the 'enabled' property of the 'Paste' action.
   */
  _exports.getDeleteEnablement = getDeleteEnablement;
  function getPasteEnablement(pasteVisibility, createEnablement) {
    return and(pasteVisibility, createEnablement);
  }

  /**
   * Gets the binding expression for the 'enabled' property of the 'MassEdit' action.
   *
   * @param converterContext
   * @param standardActionsContext
   * @param massEditVisibility
   * @returns The binding expression for the 'enabled' property of the 'MassEdit' action.
   */
  _exports.getPasteEnablement = getPasteEnablement;
  function getMassEditEnablement(converterContext, standardActionsContext, massEditVisibility) {
    const pathUpdatableExpression = standardActionsContext.restrictions.isUpdatable.expression;
    const isOnlyDynamicOnCurrentEntity = !isConstant(pathUpdatableExpression) && standardActionsContext.restrictions.isUpdatable.navigationExpression._type === "Unresolvable";
    const numberOfSelectedContexts = greaterOrEqual(pathInModel("numberOfSelectedContexts", "internal"), 1);
    const numberOfUpdatableContexts = greaterOrEqual(length(pathInModel("updatableContexts", "internal")), 1);
    const bIsDraftSupported = ModelHelper.isObjectPathDraftSupported(converterContext.getDataModelObjectPath());
    const bDisplayMode = isInDisplayMode(converterContext);

    // numberOfUpdatableContexts needs to be added to the binding in case
    // 1. Update is dependent on current entity property (isOnlyDynamicOnCurrentEntity is true).
    // 2. The table is read only and draft enabled(like LR), in this case only active contexts can be mass edited.
    //    So, update depends on 'IsActiveEntity' value which needs to be checked runtime.
    const runtimeBinding = ifElse(or(and(bDisplayMode, bIsDraftSupported), isOnlyDynamicOnCurrentEntity), and(numberOfSelectedContexts, numberOfUpdatableContexts), and(numberOfSelectedContexts));
    return and(massEditVisibility, ifElse(isOnlyDynamicOnCurrentEntity, runtimeBinding, and(runtimeBinding, pathUpdatableExpression)));
  }

  /**
   * Tells if the table in template is in display mode.
   *
   * @param converterContext
   * @param viewConfiguration
   * @returns `true` if the table is in display mode
   */
  _exports.getMassEditEnablement = getMassEditEnablement;
  function isInDisplayMode(converterContext, viewConfiguration) {
    const templateType = converterContext.getTemplateType();
    if (templateType === TemplateType.ListReport || templateType === TemplateType.AnalyticalListPage || viewConfiguration && converterContext.getManifestWrapper().hasMultipleVisualizations(viewConfiguration)) {
      return true;
    }
    // updatable will be handled at the property level
    return false;
  }
  _exports.isInDisplayMode = isInDisplayMode;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/Common/table/StandardActions", ["sap/fe/core/formatters/TableFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","../../../helpers/BindingHelper","../../../helpers/InsightsHelpers","../../../ManifestSettings"],function(e,t,n,i,a,o,s,r){"use strict";var l={};var d=r.TemplateType;var c=r.CreationMode;var u=s.getInsightsVisibility;var p=o.UI;var v=o.singletonPathVisitor;var f=a.isPathUpdatable;var g=a.isPathInsertable;var b=a.isPathDeletable;var h=a.getTargetObjectPath;var y=i.isNavigationProperty;var T=i.isEntitySet;var C=t.pathInModel;var M=t.or;var m=t.notEqual;var E=t.not;var P=t.length;var D=t.isPathInModelExpression;var A=t.isConstant;var S=t.ifElse;var I=t.greaterThan;var x=t.greaterOrEqual;var O=t.getExpressionFromAnnotation;var R=t.formatResult;var w=t.equal;var H=t.constant;var U=t.compileExpression;var V=t.and;var j;(function(e){e["CreateHidden"]="CreateHidden";e["DeleteHidden"]="DeleteHidden";e["UpdateHidden"]="UpdateHidden"})(j||(j={}));function k(e,t,n,i,a){return{collectionPath:h(e.getDataModelObjectPath()),hiddenAnnotation:{create:F(e,j.CreateHidden),delete:F(e,j.DeleteHidden),update:F(e,j.UpdateHidden)},creationMode:t,isDraftOrStickySupported:L(e),isViewWithMultipleVisualizations:i?e.getManifestWrapper().hasMultipleVisualizations(i):false,newAction:z(e),tableManifestConfiguration:n,restrictions:N(e),isInsightsEnabled:a}}l.generateStandardActionsContext=k;function L(e){var t,i,a;const o=e.getDataModelObjectPath();const s=n.isObjectPathDraftSupported(o);const r=(t=o.startingEntitySet)!==null&&t!==void 0&&(i=t.annotations)!==null&&i!==void 0&&(a=i.Session)!==null&&a!==void 0&&a.StickySessionSupported?true:false;return s||r}l.isDraftOrStickySupported=L;function z(e){var t,n,i,a;const o=e.getEntitySet();const s=T(o)?((t=o.annotations.Common)===null||t===void 0?void 0:(n=t.DraftRoot)===null||n===void 0?void 0:n.NewAction)??((i=o.annotations.Session)===null||i===void 0?void 0:(a=i.StickySessionSupported)===null||a===void 0?void 0:a.NewAction):undefined;const r=s===null||s===void 0?void 0:s.toString();if(r){var l,d,c,u;let t=e===null||e===void 0?void 0:(l=e.getEntityType().actions[r])===null||l===void 0?void 0:(d=l.annotations)===null||d===void 0?void 0:(c=d.Core)===null||c===void 0?void 0:(u=c.OperationAvailable)===null||u===void 0?void 0:u.valueOf();t=t!==undefined?t:true;return{name:r,available:O(t)}}return undefined}l.getNewAction=z;function F(e,t){var n;let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const a=e.getEntitySet();const o=e.getDataModelObjectPath();const s=o.navigationProperties.length>0&&i?[o.navigationProperties[o.navigationProperties.length-1].name]:[];const r=(a===null||a===void 0?void 0:(n=a.annotations.UI)===null||n===void 0?void 0:n[t])||false;return a?O(r,s,undefined,t=>v(t,e.getConvertedTypes(),s)):H(false)}l.isActionAnnotatedHidden=F;function N(e){const t=e.getDataModelObjectPath();const n=[{key:"isInsertable",function:g},{key:"isUpdatable",function:f},{key:"isDeletable",function:b}];const i={};n.forEach(function(n){const a=n["function"];i[n.key]={expression:a.apply(null,[t,{pathVisitor:(t,n)=>v(t,e.getConvertedTypes(),n)}]),navigationExpression:a.apply(null,[t,{ignoreTargetCollection:true,authorizeUnresolvable:true,pathVisitor:(t,n)=>v(t,e.getConvertedTypes(),n)}])}});return i}l.getRestrictions=N;function W(e,t){return t||e.creationMode===c.External}l.getInsertUpdateActionsTemplating=W;function q(e,t){const n=X(e,t);return{isTemplated:U(K(t,n)),visible:U(n),enabled:U(ne(e,t,n))}}l.getStandardActionCreate=q;function B(e,t){const n=Y(e,t);return{isTemplated:U(Q(n)),visible:U(n),enabled:U(ie(e,t,n))}}l.getStandardActionDelete=B;function _(e,t){const n=X(e,t,true);return{isTemplated:U(K(t,n,true)),visible:U(n),enabled:U(te(e,t,n))}}l.getCreationRow=_;function $(e,t,n){const i=X(e,t);const a=ne(e,t,i);const o=Z(e,t,i,n);return{visible:U(o),enabled:U(ae(o,a))}}l.getStandardActionPaste=$;function G(e,t){const n=ee(e,t);return{isTemplated:U(Q(n)),visible:U(n),enabled:U(oe(e,t,n))}}l.getStandardActionMassEdit=G;function J(e,t,n){const i=(t.isInsightsEnabled??false)&&u("Table",e,n,t);return{isTemplated:U(i),visible:U(i),enabled:U(i)}}l.getStandardActionInsights=J;function K(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return V(M(V(n,e.creationMode===c.CreationRow),V(!n,e.creationMode!==c.CreationRow)),M(E(A(t)),t))}l.getCreateTemplating=K;function Q(e){return M(E(A(e)),e)}l.getDefaultTemplating=Q;function X(e,t){var n,i;let a=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const o=t.restrictions.isInsertable.expression;const s=a?F(e,j.CreateHidden,false):t.hiddenAnnotation.create;const r=t.newAction;return S(t.creationMode===c.External,V(E(s),M(e.getTemplateType()===d.ListReport,p.IsEditable)),S(M(V(A(r===null||r===void 0?void 0:r.available),w(r===null||r===void 0?void 0:r.available,false)),V(A(o),w(o,false),!r),V(A(s),w(s,true)),V(t.creationMode===c.InlineCreationRows,((n=t.tableManifestConfiguration)===null||n===void 0?void 0:n.type)==="ResponsiveTable",S((t===null||t===void 0?void 0:(i=t.tableManifestConfiguration)===null||i===void 0?void 0:i.inlineCreationRowsHiddenInEditMode)===false,true,p.IsCreateMode))),false,S(e.getTemplateType()===d.ListReport,M(E(D(s)),E(s)),V(E(s),p.IsEditable))))}l.getCreateVisibility=X;function Y(e,t){const n=t.hiddenAnnotation.delete;const i=t.restrictions.isDeletable.expression;return S(e.getTemplateType()===d.AnalyticalListPage,false,S(V(A(i),w(i,false)),false,S(V(A(n),w(n,H(true))),false,S(e.getTemplateType()!==d.ListReport,V(E(n),p.IsEditable),E(V(D(n),n))))))}l.getDeleteVisibility=Y;function Z(e,t,n,i){return V(m(t.tableManifestConfiguration.enablePaste,false),n,i,[d.ListReport,d.AnalyticalListPage].indexOf(e.getTemplateType())===-1,t.restrictions.isInsertable.expression)}l.getPasteVisibility=Z;function ee(e,t){var n;const i=t.hiddenAnnotation.update,a=t.restrictions.isUpdatable.expression,o=((n=t.tableManifestConfiguration)===null||n===void 0?void 0:n.enableMassEdit)||false;const s=e.getTemplateType()===d.ObjectPage?p.IsEditable:e.getTemplateType()===d.ListReport;return V(E(V(A(a),w(a,false))),o,s,E(i))}l.getMassEditVisibility=ee;function te(t,n,i){const a=g(t.getDataModelObjectPath(),{ignoreTargetCollection:true,authorizeUnresolvable:true,pathVisitor:(e,n)=>{if(e.indexOf("/")===0){e=v(e,t.getConvertedTypes(),n);return e}const i=t.getDataModelObjectPath().navigationProperties;if(i){const t=i[i.length-1];const n=y(t)&&t.partner;if(n){e=`${n}/${e}`}}return e}});const o=a._type==="Unresolvable"?g(t.getDataModelObjectPath(),{pathVisitor:e=>v(e,t.getConvertedTypes(),[])}):a;return V(i,o,M(!n.tableManifestConfiguration.disableAddRowButtonForEmptyData,R([C("creationRowFieldValidity","internal")],e.validateCreationRowFields)))}l.getCreationRowEnablement=te;function ne(e,t,n){let i;if(t.creationMode===c.InlineCreationRows){i=E(t.hiddenAnnotation.create)}else{i=n}const a=t.restrictions.isInsertable.expression;const o=e.resolveAbsolutePath(t.collectionPath).target;return V(i,M(T(o),V(a,M(e.getTemplateType()!==d.ObjectPage,p.IsEditable))))}l.getCreateEnablement=ne;function ie(e,t,n){const i=C("deletableContexts","internal");const a=C("unSavedContexts","internal");const o=C("draftsWithDeletableActive","internal");const s=C("draftsWithNonDeletableActive","internal");return V(n,M(t.restrictions.isDeletable.navigationExpression._type==="Unresolvable",t.restrictions.isDeletable.expression),M(V(m(i,undefined),I(P(i),0)),V(m(o,undefined),I(P(o),0)),V(m(s,undefined),I(P(s),0)),V(m(a,undefined),I(P(a),0))))}l.getDeleteEnablement=ie;function ae(e,t){return V(e,t)}l.getPasteEnablement=ae;function oe(e,t,i){const a=t.restrictions.isUpdatable.expression;const o=!A(a)&&t.restrictions.isUpdatable.navigationExpression._type==="Unresolvable";const s=x(C("numberOfSelectedContexts","internal"),1);const r=x(P(C("updatableContexts","internal")),1);const l=n.isObjectPathDraftSupported(e.getDataModelObjectPath());const d=se(e);const c=S(M(V(d,l),o),V(s,r),V(s));return V(i,S(o,c,V(c,a)))}l.getMassEditEnablement=oe;function se(e,t){const n=e.getTemplateType();if(n===d.ListReport||n===d.AnalyticalListPage||t&&e.getManifestWrapper().hasMultipleVisualizations(t)){return true}return false}l.isInDisplayMode=se;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ListReport/FilterBar-dbg", ["sap/fe/core/converters/controls/Common/Table", "sap/fe/core/converters/controls/ListReport/VisualFilters", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/m/library", "../Common/DataVisualization"], function (Table, VisualFilters, ConfigurableObject, IssueManager, Key, BindingToolkit, ModelHelper, TypeGuards, DataModelPathHelper, PropertyHelper, library, DataVisualization) {
  "use strict";

  var _exports = {};
  var getSelectionVariant = DataVisualization.getSelectionVariant;
  var StandardDynamicDateRangeKeys = library.StandardDynamicDateRangeKeys;
  var getAssociatedUnitPropertyPath = PropertyHelper.getAssociatedUnitPropertyPath;
  var getAssociatedTimezonePropertyPath = PropertyHelper.getAssociatedTimezonePropertyPath;
  var getAssociatedTextPropertyPath = PropertyHelper.getAssociatedTextPropertyPath;
  var getAssociatedCurrencyPropertyPath = PropertyHelper.getAssociatedCurrencyPropertyPath;
  var getTargetNavigationPath = DataModelPathHelper.getTargetNavigationPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isMultipleNavigationProperty = TypeGuards.isMultipleNavigationProperty;
  var isEntitySet = TypeGuards.isEntitySet;
  var isComplexType = TypeGuards.isComplexType;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var compileExpression = BindingToolkit.compileExpression;
  var KeyHelper = Key.KeyHelper;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var Placement = ConfigurableObject.Placement;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var getVisualFilters = VisualFilters.getVisualFilters;
  var isFilteringCaseSensitive = Table.isFilteringCaseSensitive;
  var getTypeConfig = Table.getTypeConfig;
  var getSelectionVariantConfiguration = Table.getSelectionVariantConfiguration;
  var filterFieldType;
  (function (filterFieldType) {
    filterFieldType["Default"] = "Default";
    filterFieldType["Slot"] = "Slot";
  })(filterFieldType || (filterFieldType = {}));
  const sEdmString = "Edm.String";
  const sStringDataType = "sap.ui.model.odata.type.String";
  /**
   * Enter all DataFields of a given FieldGroup into the filterFacetMap.
   *
   * @param fieldGroup
   * @returns The map of facets for the given FieldGroup
   */
  function getFieldGroupFilterGroups(fieldGroup) {
    const filterFacetMap = {};
    fieldGroup.Data.forEach(dataField => {
      if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataField") {
        var _fieldGroup$annotatio, _fieldGroup$annotatio2;
        filterFacetMap[dataField.Value.path] = {
          group: fieldGroup.fullyQualifiedName,
          groupLabel: compileExpression(getExpressionFromAnnotation(fieldGroup.Label || ((_fieldGroup$annotatio = fieldGroup.annotations) === null || _fieldGroup$annotatio === void 0 ? void 0 : (_fieldGroup$annotatio2 = _fieldGroup$annotatio.Common) === null || _fieldGroup$annotatio2 === void 0 ? void 0 : _fieldGroup$annotatio2.Label) || fieldGroup.qualifier)) || fieldGroup.qualifier
        };
      }
    });
    return filterFacetMap;
  }
  function getExcludedFilterProperties(selectionVariants) {
    return selectionVariants.reduce((previousValue, selectionVariant) => {
      selectionVariant.propertyNames.forEach(propertyName => {
        previousValue[propertyName] = true;
      });
      return previousValue;
    }, {});
  }

  /**
   * Check that all the tables for a dedicated entity set are configured as analytical tables.
   *
   * @param listReportTables List report tables
   * @param contextPath
   * @returns Is FilterBar search field hidden or not
   */
  function checkAllTableForEntitySetAreAnalytical(listReportTables, contextPath) {
    if (contextPath && listReportTables.length > 0) {
      return listReportTables.every(visualization => {
        return visualization.enableAnalytics && contextPath === visualization.annotation.collection;
      });
    }
    return false;
  }
  function getSelectionVariants(lrTableVisualizations, converterContext) {
    const selectionVariantPaths = [];
    return lrTableVisualizations.map(visualization => {
      const tableFilters = visualization.control.filters;
      const tableSVConfigs = [];
      for (const key in tableFilters) {
        if (Array.isArray(tableFilters[key].paths)) {
          const paths = tableFilters[key].paths;
          paths.forEach(path => {
            if (path && path.annotationPath && selectionVariantPaths.indexOf(path.annotationPath) === -1) {
              selectionVariantPaths.push(path.annotationPath);
              const selectionVariantConfig = getSelectionVariantConfiguration(path.annotationPath, converterContext);
              if (selectionVariantConfig) {
                tableSVConfigs.push(selectionVariantConfig);
              }
            }
          });
        }
      }
      return tableSVConfigs;
    }).reduce((svConfigs, selectionVariant) => svConfigs.concat(selectionVariant), []);
  }

  /**
   * Returns the condition path required for the condition model. It looks as follows:
   * <1:N-PropertyName>*\/<1:1-PropertyName>/<PropertyName>.
   *
   * @param entityType The root EntityType
   * @param propertyPath The full path to the target property
   * @returns The formatted condition path
   */
  const _getConditionPath = function (entityType, propertyPath) {
    const parts = propertyPath.split("/");
    let partialPath;
    let key = "";
    while (parts.length) {
      let part = parts.shift();
      partialPath = partialPath ? `${partialPath}/${part}` : part;
      const property = entityType.resolvePath(partialPath);
      if (isMultipleNavigationProperty(property)) {
        part += "*";
      }
      key = key ? `${key}/${part}` : part;
    }
    return key;
  };
  const _createFilterSelectionField = function (entityType, property, fullPropertyPath, includeHidden, converterContext) {
    var _property$annotations, _property$annotations2, _property$annotations3;
    // ignore complex property types and hidden annotated ones
    if (property && property.targetType === undefined && (includeHidden || ((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.UI) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.Hidden) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.valueOf()) !== true)) {
      var _property$annotations4, _property$annotations5, _property$annotations6, _property$annotations7, _property$annotations8, _targetEntityType$ann, _targetEntityType$ann2, _targetEntityType$ann3;
      const targetEntityType = converterContext.getAnnotationEntityType(property),
        filterField = {
          key: KeyHelper.getSelectionFieldKeyFromPath(fullPropertyPath),
          annotationPath: converterContext.getAbsoluteAnnotationPath(fullPropertyPath),
          conditionPath: _getConditionPath(entityType, fullPropertyPath),
          availability: ((_property$annotations4 = property.annotations) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.UI) === null || _property$annotations5 === void 0 ? void 0 : (_property$annotations6 = _property$annotations5.HiddenFilter) === null || _property$annotations6 === void 0 ? void 0 : _property$annotations6.valueOf()) === true ? "Hidden" : "Adaptation",
          label: compileExpression(getExpressionFromAnnotation(((_property$annotations7 = property.annotations.Common) === null || _property$annotations7 === void 0 ? void 0 : (_property$annotations8 = _property$annotations7.Label) === null || _property$annotations8 === void 0 ? void 0 : _property$annotations8.valueOf()) || property.name)),
          group: targetEntityType.name,
          groupLabel: compileExpression(getExpressionFromAnnotation((targetEntityType === null || targetEntityType === void 0 ? void 0 : (_targetEntityType$ann = targetEntityType.annotations) === null || _targetEntityType$ann === void 0 ? void 0 : (_targetEntityType$ann2 = _targetEntityType$ann.Common) === null || _targetEntityType$ann2 === void 0 ? void 0 : (_targetEntityType$ann3 = _targetEntityType$ann2.Label) === null || _targetEntityType$ann3 === void 0 ? void 0 : _targetEntityType$ann3.valueOf()) || targetEntityType.name))
        };
      getSettingsOfDefaultFilterFields(filterField);
      return filterField;
    }
    return undefined;
  };

  /**
   * Retrieve the configuration for the technical property DraftAdministrativeData. Only relevant for CreationDateTime
   * and LastChangeDateTime, as they are displaying the timeframe related properties as a SemanticDateRange.
   *
   * @param filterField
   */
  const getSettingsOfDefaultFilterFields = function (filterField) {
    if (filterField.key === "DraftAdministrativeData::CreationDateTime" || filterField.key === "DraftAdministrativeData::LastChangeDateTime") {
      const standardDynamicDateRangeKeys = [StandardDynamicDateRangeKeys.TO, StandardDynamicDateRangeKeys.TOMORROW, StandardDynamicDateRangeKeys.NEXTWEEK, StandardDynamicDateRangeKeys.NEXTMONTH, StandardDynamicDateRangeKeys.NEXTQUARTER, StandardDynamicDateRangeKeys.NEXTYEAR];
      filterField.settings = {
        operatorConfiguration: [{
          path: "key",
          equals: standardDynamicDateRangeKeys.join(","),
          exclude: true
        }]
      };
    }
  };
  const _getSelectionFields = function (entityType, navigationPath, properties, includeHidden, converterContext) {
    const selectionFieldMap = {};
    if (properties) {
      properties.forEach(property => {
        const propertyPath = property.name;
        const fullPath = (navigationPath ? `${navigationPath}/` : "") + propertyPath;
        const selectionField = _createFilterSelectionField(entityType, property, fullPath, includeHidden, converterContext);
        if (selectionField) {
          selectionFieldMap[fullPath] = selectionField;
        }
      });
    }
    return selectionFieldMap;
  };
  const _getSelectionFieldsByPath = function (entityType, propertyPaths, includeHidden, converterContext) {
    let selectionFields = {};
    if (propertyPaths) {
      propertyPaths.forEach(propertyPath => {
        let localSelectionFields = {};
        const enhancedPath = enhanceDataModelPath(converterContext.getDataModelObjectPath(), propertyPath);
        const property = enhancedPath.targetObject;
        if (property === undefined || !includeHidden && enhancedPath.navigationProperties.find(navigationProperty => {
          var _navigationProperty$a, _navigationProperty$a2, _navigationProperty$a3;
          return ((_navigationProperty$a = navigationProperty.annotations) === null || _navigationProperty$a === void 0 ? void 0 : (_navigationProperty$a2 = _navigationProperty$a.UI) === null || _navigationProperty$a2 === void 0 ? void 0 : (_navigationProperty$a3 = _navigationProperty$a2.Hidden) === null || _navigationProperty$a3 === void 0 ? void 0 : _navigationProperty$a3.valueOf()) === true;
        })) {
          return;
        }
        if (isNavigationProperty(property)) {
          // handle navigation properties
          localSelectionFields = _getSelectionFields(entityType, propertyPath, property.targetType.entityProperties, includeHidden, converterContext);
        } else if (isComplexType(property.targetType)) {
          // handle ComplexType properties
          localSelectionFields = _getSelectionFields(entityType, propertyPath, property.targetType.properties, includeHidden, converterContext);
        } else {
          localSelectionFields = _getSelectionFields(entityType, getTargetNavigationPath(enhancedPath, true), [property], includeHidden, converterContext);
        }
        selectionFields = {
          ...selectionFields,
          ...localSelectionFields
        };
      });
    }
    return selectionFields;
  };
  const _getFilterField = function (filterFields, propertyPath, converterContext, entityType) {
    let filterField = filterFields[propertyPath];
    if (filterField) {
      delete filterFields[propertyPath];
    } else {
      filterField = _createFilterSelectionField(entityType, entityType.resolvePath(propertyPath), propertyPath, true, converterContext);
    }
    if (!filterField) {
      var _converterContext$get;
      (_converterContext$get = converterContext.getDiagnostics()) === null || _converterContext$get === void 0 ? void 0 : _converterContext$get.addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MISSING_SELECTIONFIELD);
    }
    // defined SelectionFields are available by default
    if (filterField) {
      var _entityType$annotatio, _entityType$annotatio2;
      filterField.availability = filterField.availability === "Hidden" ? "Hidden" : "Default";
      filterField.isParameter = !!((_entityType$annotatio = entityType.annotations) !== null && _entityType$annotatio !== void 0 && (_entityType$annotatio2 = _entityType$annotatio.Common) !== null && _entityType$annotatio2 !== void 0 && _entityType$annotatio2.ResultContext);
    }
    return filterField;
  };
  const _getDefaultFilterFields = function (aSelectOptions, entityType, converterContext, excludedFilterProperties, annotatedSelectionFields) {
    const selectionFields = [];
    const UISelectionFields = {};
    const properties = entityType.entityProperties;
    // Using entityType instead of entitySet
    annotatedSelectionFields === null || annotatedSelectionFields === void 0 ? void 0 : annotatedSelectionFields.forEach(SelectionField => {
      UISelectionFields[SelectionField.value] = true;
    });
    if (aSelectOptions && aSelectOptions.length > 0) {
      aSelectOptions === null || aSelectOptions === void 0 ? void 0 : aSelectOptions.forEach(selectOption => {
        const propertyName = selectOption.PropertyName;
        const sPropertyPath = propertyName === null || propertyName === void 0 ? void 0 : propertyName.value;
        const currentSelectionFields = {};
        annotatedSelectionFields === null || annotatedSelectionFields === void 0 ? void 0 : annotatedSelectionFields.forEach(SelectionField => {
          currentSelectionFields[SelectionField.value] = true;
        });
        if (sPropertyPath && !(sPropertyPath in excludedFilterProperties)) {
          if (!(sPropertyPath in currentSelectionFields)) {
            const FilterField = getFilterField(sPropertyPath, converterContext, entityType);
            if (FilterField) {
              selectionFields.push(FilterField);
            }
          }
        }
      });
    } else if (properties) {
      properties.forEach(property => {
        var _property$annotations9, _property$annotations10;
        const defaultFilterValue = (_property$annotations9 = property.annotations) === null || _property$annotations9 === void 0 ? void 0 : (_property$annotations10 = _property$annotations9.Common) === null || _property$annotations10 === void 0 ? void 0 : _property$annotations10.FilterDefaultValue;
        const propertyPath = property.name;
        if (!(propertyPath in excludedFilterProperties)) {
          if (defaultFilterValue && !(propertyPath in UISelectionFields)) {
            const FilterField = getFilterField(propertyPath, converterContext, entityType);
            if (FilterField) {
              selectionFields.push(FilterField);
            }
          }
        }
      });
    }
    return selectionFields;
  };

  /**
   * Get all parameter filter fields in case of a parameterized service.
   *
   * @param converterContext
   * @returns An array of parameter FilterFields
   */
  function _getParameterFields(converterContext) {
    var _parameterEntityType$, _parameterEntityType$2;
    const dataModelObjectPath = converterContext.getDataModelObjectPath();
    const parameterEntityType = dataModelObjectPath.startingEntitySet.entityType;
    const isParameterized = !!((_parameterEntityType$ = parameterEntityType.annotations) !== null && _parameterEntityType$ !== void 0 && (_parameterEntityType$2 = _parameterEntityType$.Common) !== null && _parameterEntityType$2 !== void 0 && _parameterEntityType$2.ResultContext) && !dataModelObjectPath.targetEntitySet;
    const parameterConverterContext = isParameterized && converterContext.getConverterContextFor(`/${dataModelObjectPath.startingEntitySet.name}`);
    return parameterConverterContext ? parameterEntityType.entityProperties.map(function (property) {
      return _getFilterField({}, property.name, parameterConverterContext, parameterEntityType);
    }) : [];
  }

  /**
   * Determines if the FilterBar search field is hidden or not.
   *
   * @param listReportTables The list report tables
   * @param charts The ALP charts
   * @param converterContext The converter context
   * @returns The information if the FilterBar search field is hidden or not
   */
  const getFilterBarHideBasicSearch = function (listReportTables, charts, converterContext) {
    // Check if charts allow search
    const noSearchInCharts = charts.length === 0 || charts.every(chart => !chart.applySupported.enableSearch);

    // Check if all tables are analytical and none of them allow for search
    // or all tables are TreeTable and none of them allow for search
    const noSearchInTables = listReportTables.length === 0 || listReportTables.every(table => (table.enableAnalytics || table.control.type === "TreeTable") && !table.enableBasicSearch);
    const contextPath = converterContext.getContextPath();
    if (contextPath && noSearchInCharts && noSearchInTables) {
      return true;
    } else {
      return false;
    }
  };

  /**
   * Retrieves filter fields from the manifest.
   *
   * @param entityType The current entityType
   * @param converterContext The converter context
   * @returns The filter fields defined in the manifest
   */
  _exports.getFilterBarHideBasicSearch = getFilterBarHideBasicSearch;
  const getManifestFilterFields = function (entityType, converterContext) {
    const fbConfig = converterContext.getManifestWrapper().getFilterConfiguration();
    const definedFilterFields = (fbConfig === null || fbConfig === void 0 ? void 0 : fbConfig.filterFields) || {};
    const selectionFields = _getSelectionFieldsByPath(entityType, Object.keys(definedFilterFields).map(key => KeyHelper.getPathFromSelectionFieldKey(key)), true, converterContext);
    const filterFields = {};
    for (const sKey in definedFilterFields) {
      const filterField = definedFilterFields[sKey];
      const propertyName = KeyHelper.getPathFromSelectionFieldKey(sKey);
      const selectionField = selectionFields[propertyName];
      const type = filterField.type === "Slot" ? filterFieldType.Slot : filterFieldType.Default;
      const visualFilter = filterField && filterField !== null && filterField !== void 0 && filterField.visualFilter ? getVisualFilters(entityType, converterContext, sKey, definedFilterFields) : undefined;
      filterFields[sKey] = {
        key: sKey,
        type: type,
        slotName: (filterField === null || filterField === void 0 ? void 0 : filterField.slotName) || sKey,
        annotationPath: selectionField === null || selectionField === void 0 ? void 0 : selectionField.annotationPath,
        conditionPath: (selectionField === null || selectionField === void 0 ? void 0 : selectionField.conditionPath) || propertyName,
        template: filterField.template,
        label: filterField.label,
        position: filterField.position || {
          placement: Placement.After
        },
        availability: filterField.availability || "Default",
        settings: filterField.settings,
        visualFilter: visualFilter,
        required: filterField.required
      };
    }
    return filterFields;
  };
  _exports.getManifestFilterFields = getManifestFilterFields;
  const getFilterField = function (propertyPath, converterContext, entityType) {
    return _getFilterField({}, propertyPath, converterContext, entityType);
  };
  _exports.getFilterField = getFilterField;
  const getFilterRestrictions = function (oFilterRestrictionsAnnotation, sRestriction) {
    let aProps = [];
    if (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation[sRestriction]) {
      aProps = oFilterRestrictionsAnnotation[sRestriction].map(function (oProperty) {
        return oProperty.value;
      });
    }
    return aProps;
  };
  _exports.getFilterRestrictions = getFilterRestrictions;
  const getFilterAllowedExpression = function (oFilterRestrictionsAnnotation) {
    const mAllowedExpressions = {};
    if (oFilterRestrictionsAnnotation && oFilterRestrictionsAnnotation.FilterExpressionRestrictions) {
      oFilterRestrictionsAnnotation.FilterExpressionRestrictions.forEach(function (oProperty) {
        var _oProperty$Property;
        //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
        if ((_oProperty$Property = oProperty.Property) !== null && _oProperty$Property !== void 0 && _oProperty$Property.value && oProperty.AllowedExpressions) {
          var _oProperty$Property2;
          if (mAllowedExpressions[(_oProperty$Property2 = oProperty.Property) === null || _oProperty$Property2 === void 0 ? void 0 : _oProperty$Property2.value]) {
            var _oProperty$Property3;
            mAllowedExpressions[(_oProperty$Property3 = oProperty.Property) === null || _oProperty$Property3 === void 0 ? void 0 : _oProperty$Property3.value].push(oProperty.AllowedExpressions.toString());
          } else {
            var _oProperty$Property4;
            mAllowedExpressions[(_oProperty$Property4 = oProperty.Property) === null || _oProperty$Property4 === void 0 ? void 0 : _oProperty$Property4.value] = [oProperty.AllowedExpressions.toString()];
          }
        }
      });
    }
    return mAllowedExpressions;
  };
  _exports.getFilterAllowedExpression = getFilterAllowedExpression;
  const getSearchFilterPropertyInfo = function () {
    return {
      name: "$search",
      path: "$search",
      dataType: sStringDataType,
      maxConditions: 1
    };
  };
  const getEditStateFilterPropertyInfo = function () {
    return {
      name: "$editState",
      path: "$editState",
      groupLabel: "",
      group: "",
      dataType: sStringDataType,
      hiddenFilter: false
    };
  };
  const getSearchRestrictions = function (converterContext) {
    var _entitySet$annotation;
    const entitySet = converterContext.getEntitySet();
    return isEntitySet(entitySet) ? (_entitySet$annotation = entitySet.annotations.Capabilities) === null || _entitySet$annotation === void 0 ? void 0 : _entitySet$annotation.SearchRestrictions : undefined;
  };
  const getNavigationRestrictions = function (converterContext, sNavigationPath) {
    var _converterContext$get2, _converterContext$get3, _converterContext$get4;
    const oNavigationRestrictions = (_converterContext$get2 = converterContext.getEntitySet()) === null || _converterContext$get2 === void 0 ? void 0 : (_converterContext$get3 = _converterContext$get2.annotations) === null || _converterContext$get3 === void 0 ? void 0 : (_converterContext$get4 = _converterContext$get3.Capabilities) === null || _converterContext$get4 === void 0 ? void 0 : _converterContext$get4.NavigationRestrictions;
    const aRestrictedProperties = oNavigationRestrictions && oNavigationRestrictions.RestrictedProperties;
    return aRestrictedProperties && aRestrictedProperties.find(function (oRestrictedProperty) {
      return oRestrictedProperty && oRestrictedProperty.NavigationProperty && oRestrictedProperty.NavigationProperty.value === sNavigationPath;
    });
  };
  _exports.getNavigationRestrictions = getNavigationRestrictions;
  const _fetchBasicPropertyInfo = function (oFilterFieldInfo) {
    return {
      key: oFilterFieldInfo.key,
      annotationPath: oFilterFieldInfo.annotationPath,
      conditionPath: oFilterFieldInfo.conditionPath,
      name: oFilterFieldInfo.conditionPath,
      label: oFilterFieldInfo.label,
      hiddenFilter: oFilterFieldInfo.availability === "Hidden",
      display: "Value",
      isParameter: oFilterFieldInfo.isParameter,
      caseSensitive: oFilterFieldInfo.caseSensitive,
      availability: oFilterFieldInfo.availability,
      position: oFilterFieldInfo.position,
      type: oFilterFieldInfo.type,
      template: oFilterFieldInfo.template,
      menu: oFilterFieldInfo.menu,
      required: oFilterFieldInfo.required
    };
  };
  const getSpecificAllowedExpression = function (aExpressions) {
    const aAllowedExpressionsPriority = ["SingleValue", "MultiValue", "SingleRange", "MultiRange", "SearchExpression", "MultiRangeOrSearchExpression"];
    aExpressions.sort(function (a, b) {
      return aAllowedExpressionsPriority.indexOf(a) - aAllowedExpressionsPriority.indexOf(b);
    });
    return aExpressions[0];
  };
  _exports.getSpecificAllowedExpression = getSpecificAllowedExpression;
  const displayMode = function (oPropertyAnnotations, oCollectionAnnotations) {
    var _oPropertyAnnotations, _oPropertyAnnotations2, _oPropertyAnnotations3, _oPropertyAnnotations4, _oPropertyAnnotations5, _oCollectionAnnotatio;
    const oTextAnnotation = oPropertyAnnotations === null || oPropertyAnnotations === void 0 ? void 0 : (_oPropertyAnnotations = oPropertyAnnotations.Common) === null || _oPropertyAnnotations === void 0 ? void 0 : _oPropertyAnnotations.Text,
      oTextArrangmentAnnotation = oTextAnnotation && (oPropertyAnnotations && (oPropertyAnnotations === null || oPropertyAnnotations === void 0 ? void 0 : (_oPropertyAnnotations2 = oPropertyAnnotations.Common) === null || _oPropertyAnnotations2 === void 0 ? void 0 : (_oPropertyAnnotations3 = _oPropertyAnnotations2.Text) === null || _oPropertyAnnotations3 === void 0 ? void 0 : (_oPropertyAnnotations4 = _oPropertyAnnotations3.annotations) === null || _oPropertyAnnotations4 === void 0 ? void 0 : (_oPropertyAnnotations5 = _oPropertyAnnotations4.UI) === null || _oPropertyAnnotations5 === void 0 ? void 0 : _oPropertyAnnotations5.TextArrangement) || oCollectionAnnotations && (oCollectionAnnotations === null || oCollectionAnnotations === void 0 ? void 0 : (_oCollectionAnnotatio = oCollectionAnnotations.UI) === null || _oCollectionAnnotatio === void 0 ? void 0 : _oCollectionAnnotatio.TextArrangement));
    if (oTextArrangmentAnnotation) {
      if (oTextArrangmentAnnotation.valueOf() === "UI.TextArrangementType/TextOnly") {
        return "Description";
      } else if (oTextArrangmentAnnotation.valueOf() === "UI.TextArrangementType/TextLast") {
        return "ValueDescription";
      }
      return "DescriptionValue"; //TextFirst
    }

    return oTextAnnotation ? "DescriptionValue" : "Value";
  };
  _exports.displayMode = displayMode;
  const fetchPropertyInfo = function (converterContext, oFilterFieldInfo, oTypeConfig) {
    var _converterContext$get5;
    let oPropertyInfo = _fetchBasicPropertyInfo(oFilterFieldInfo);
    const sAnnotationPath = oFilterFieldInfo.annotationPath;
    if (!sAnnotationPath) {
      return oPropertyInfo;
    }
    const targetPropertyObject = converterContext.getConverterContextFor(sAnnotationPath).getDataModelObjectPath().targetObject;
    const oPropertyAnnotations = targetPropertyObject === null || targetPropertyObject === void 0 ? void 0 : targetPropertyObject.annotations;
    const oCollectionAnnotations = converterContext === null || converterContext === void 0 ? void 0 : (_converterContext$get5 = converterContext.getDataModelObjectPath().targetObject) === null || _converterContext$get5 === void 0 ? void 0 : _converterContext$get5.annotations;
    const oFormatOptions = oTypeConfig.formatOptions;
    const oConstraints = oTypeConfig.constraints;
    oPropertyInfo = Object.assign(oPropertyInfo, {
      formatOptions: oFormatOptions,
      constraints: oConstraints,
      display: displayMode(oPropertyAnnotations, oCollectionAnnotations)
    });
    return oPropertyInfo;
  };
  _exports.fetchPropertyInfo = fetchPropertyInfo;
  const isMultiValue = function (oProperty) {
    let bIsMultiValue = true;
    //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
    switch (oProperty.filterExpression) {
      case "SearchExpression":
      case "SingleRange":
      case "SingleValue":
        bIsMultiValue = false;
        break;
      default:
        break;
    }
    if (oProperty.type && oProperty.type.indexOf("Boolean") > 0) {
      bIsMultiValue = false;
    }
    return bIsMultiValue;
  };
  _exports.isMultiValue = isMultiValue;
  const _isFilterableNavigationProperty = function (entry) {
    return (entry.$Type === "com.sap.vocabularies.UI.v1.DataField" || entry.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" || entry.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath") && entry.Value.path.includes("/");
  };

  /**
   * Adds the additional property which references to the unit, timezone, textArrangement or currency from a data field.
   *
   * @param dataField The data field to be considered
   * @param converterContext The converter context
   * @param navProperties The list of navigation properties
   */
  const addChildNavigationProperties = function (dataField, converterContext, navProperties) {
    var _Value;
    const targetProperty = (_Value = dataField.Value) === null || _Value === void 0 ? void 0 : _Value.$target;
    if (targetProperty) {
      const additionalPropertyPath = getAssociatedTextPropertyPath(targetProperty) || getAssociatedCurrencyPropertyPath(targetProperty) || getAssociatedUnitPropertyPath(targetProperty) || getAssociatedTimezonePropertyPath(targetProperty);
      const navigationProperty = additionalPropertyPath ? enhanceDataModelPath(converterContext.getDataModelObjectPath(), additionalPropertyPath).navigationProperties : undefined;
      if (navigationProperty !== null && navigationProperty !== void 0 && navigationProperty.length) {
        const navigationPropertyPath = navigationProperty[0].name;
        if (!navProperties.includes(navigationPropertyPath)) {
          navProperties.push(navigationPropertyPath);
        }
      }
    }
  };

  /**
   * Gets used navigation properties for available dataField.
   *
   * @param navProperties The list of navigation properties
   * @param dataField The data field to be considered
   * @param converterContext The converter context
   * @returns The list of navigation properties
   */
  const getNavigationPropertiesRecursively = function (navProperties, dataField, converterContext) {
    var _dataField$Target, _dataField$Target$$ta, _dataField$Target$$ta2;
    switch (dataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        switch ((_dataField$Target = dataField.Target) === null || _dataField$Target === void 0 ? void 0 : (_dataField$Target$$ta = _dataField$Target.$target) === null || _dataField$Target$$ta === void 0 ? void 0 : _dataField$Target$$ta.$Type) {
          case "com.sap.vocabularies.UI.v1.FieldGroupType":
            (_dataField$Target$$ta2 = dataField.Target.$target.Data) === null || _dataField$Target$$ta2 === void 0 ? void 0 : _dataField$Target$$ta2.forEach(innerDataField => {
              getNavigationPropertiesRecursively(navProperties, innerDataField, converterContext);
            });
            break;
          default:
            break;
        }
        break;
      case "com.sap.vocabularies.UI.v1.DataField":
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        if (_isFilterableNavigationProperty(dataField)) {
          const navigationPropertyPath = enhanceDataModelPath(converterContext.getDataModelObjectPath(), dataField.Value.path).navigationProperties[0].name;
          if (!navProperties.includes(navigationPropertyPath)) {
            navProperties.push(navigationPropertyPath);
          }
        }
        // Additional property from text arrangement/units/currencies/timezone...
        addChildNavigationProperties(dataField, converterContext, navProperties);
        break;
      default:
        break;
    }
    return navProperties;
  };
  const getAnnotatedSelectionFieldData = function (converterContext) {
    var _converterContext$get6, _entityType$annotatio3, _entityType$annotatio4;
    let lrTables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let annotationPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    let includeHidden = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let lineItemTerm = arguments.length > 4 ? arguments[4] : undefined;
    // Fetch all selectionVariants defined in the different visualizations and different views (multi table mode)
    const selectionVariants = getSelectionVariants(lrTables, converterContext);

    // create a map of properties to be used in selection variants
    const excludedFilterProperties = getExcludedFilterProperties(selectionVariants);
    const entityType = converterContext.getEntityType();
    //Filters which has to be added which is part of SV/Default annotations but not present in the SelectionFields
    const annotatedSelectionFields = annotationPath && ((_converterContext$get6 = converterContext.getEntityTypeAnnotation(annotationPath)) === null || _converterContext$get6 === void 0 ? void 0 : _converterContext$get6.annotation) || ((_entityType$annotatio3 = entityType.annotations) === null || _entityType$annotatio3 === void 0 ? void 0 : (_entityType$annotatio4 = _entityType$annotatio3.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.SelectionFields) || [];
    let navProperties = [];
    if (lrTables.length === 0 && !!lineItemTerm) {
      var _converterContext$get7;
      (_converterContext$get7 = converterContext.getEntityTypeAnnotation(lineItemTerm).annotation) === null || _converterContext$get7 === void 0 ? void 0 : _converterContext$get7.forEach(dataField => {
        navProperties = getNavigationPropertiesRecursively(navProperties, dataField, converterContext);
      });
    }
    if (ModelHelper.isDraftRoot(converterContext.getEntitySet())) {
      navProperties.push("DraftAdministrativeData/CreationDateTime", "DraftAdministrativeData/CreatedByUser", "DraftAdministrativeData/LastChangeDateTime", "DraftAdministrativeData/LastChangedByUser");
    }

    // create a map of all potential filter fields based on...
    const filterFields = {
      // ...non hidden properties of the entity
      ..._getSelectionFields(entityType, "", entityType.entityProperties, includeHidden, converterContext),
      // ... non hidden properties of navigation properties
      ..._getSelectionFieldsByPath(entityType, navProperties, false, converterContext),
      // ...additional manifest defined navigation properties
      ..._getSelectionFieldsByPath(entityType, converterContext.getManifestWrapper().getFilterConfiguration().navigationProperties, includeHidden, converterContext)
    };
    let aSelectOptions = [];
    const selectionVariant = getSelectionVariant(entityType, converterContext);
    if (selectionVariant) {
      aSelectOptions = selectionVariant.SelectOptions;
    }
    const propertyInfoFields = (annotatedSelectionFields === null || annotatedSelectionFields === void 0 ? void 0 : annotatedSelectionFields.reduce((selectionFields, selectionField) => {
      const propertyPath = selectionField.value;
      if (!(propertyPath in excludedFilterProperties)) {
        let navigationPath;
        if (annotationPath.startsWith("@com.sap.vocabularies.UI.v1.SelectionFields")) {
          navigationPath = "";
        } else {
          navigationPath = annotationPath.split("/@com.sap.vocabularies.UI.v1.SelectionFields")[0];
        }
        const filterPropertyPath = navigationPath ? navigationPath + "/" + propertyPath : propertyPath;
        const filterField = _getFilterField(filterFields, filterPropertyPath, converterContext, entityType);
        if (filterField) {
          filterField.group = "";
          filterField.groupLabel = "";
          selectionFields.push(filterField);
        }
      }
      return selectionFields;
    }, [])) || [];
    const defaultFilterFields = _getDefaultFilterFields(aSelectOptions, entityType, converterContext, excludedFilterProperties, annotatedSelectionFields);
    return {
      excludedFilterProperties: excludedFilterProperties,
      entityType: entityType,
      annotatedSelectionFields: annotatedSelectionFields,
      filterFields: filterFields,
      propertyInfoFields: propertyInfoFields,
      defaultFilterFields: defaultFilterFields
    };
  };
  const fetchTypeConfig = function (property) {
    const oTypeConfig = getTypeConfig(property, property === null || property === void 0 ? void 0 : property.type);
    if ((property === null || property === void 0 ? void 0 : property.type) === sEdmString && (oTypeConfig.constraints.nullable === undefined || oTypeConfig.constraints.nullable === true)) {
      oTypeConfig.formatOptions.parseKeepsEmptyString = false;
    }
    return oTypeConfig;
  };
  _exports.fetchTypeConfig = fetchTypeConfig;
  const assignDataTypeToPropertyInfo = function (propertyInfoField, converterContext, aRequiredProps, aTypeConfig) {
    let oPropertyInfo = fetchPropertyInfo(converterContext, propertyInfoField, aTypeConfig[propertyInfoField.key]),
      sPropertyPath = "";
    if (propertyInfoField.conditionPath) {
      sPropertyPath = propertyInfoField.conditionPath.replace(/\+|\*/g, "");
    }
    if (oPropertyInfo) {
      oPropertyInfo = Object.assign(oPropertyInfo, {
        maxConditions: !oPropertyInfo.isParameter && isMultiValue(oPropertyInfo) ? -1 : 1,
        required: propertyInfoField.required ?? (oPropertyInfo.isParameter || aRequiredProps.indexOf(sPropertyPath) >= 0),
        caseSensitive: isFilteringCaseSensitive(converterContext),
        dataType: aTypeConfig[propertyInfoField.key].type
      });
    }
    return oPropertyInfo;
  };
  _exports.assignDataTypeToPropertyInfo = assignDataTypeToPropertyInfo;
  const processSelectionFields = function (propertyInfoFields, converterContext, defaultValuePropertyFields) {
    var _entitySet$annotation2;
    //get TypeConfig function
    const selectionFieldTypes = [];
    const aTypeConfig = {};
    if (defaultValuePropertyFields) {
      propertyInfoFields = propertyInfoFields.concat(defaultValuePropertyFields);
    }
    //add typeConfig
    propertyInfoFields.forEach(function (parameterField) {
      if (parameterField.annotationPath) {
        const propertyConvertyContext = converterContext.getConverterContextFor(parameterField.annotationPath);
        const propertyTargetObject = propertyConvertyContext.getDataModelObjectPath().targetObject;
        selectionFieldTypes.push(propertyTargetObject === null || propertyTargetObject === void 0 ? void 0 : propertyTargetObject.type);
        const oTypeConfig = fetchTypeConfig(propertyTargetObject);
        aTypeConfig[parameterField.key] = oTypeConfig;
      } else {
        selectionFieldTypes.push(sEdmString);
        aTypeConfig[parameterField.key] = {
          type: sStringDataType
        };
      }
    });

    // filterRestrictions
    const entitySet = converterContext.getEntitySet();
    const oFilterRestrictions = isEntitySet(entitySet) ? (_entitySet$annotation2 = entitySet.annotations.Capabilities) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.FilterRestrictions : undefined;
    const oRet = {};
    oRet.RequiredProperties = getFilterRestrictions(oFilterRestrictions, "RequiredProperties") || [];
    oRet.NonFilterableProperties = getFilterRestrictions(oFilterRestrictions, "NonFilterableProperties") || [];
    oRet.FilterAllowedExpressions = getFilterAllowedExpression(oFilterRestrictions);
    const sEntitySetPath = converterContext.getContextPath();
    const aPathParts = sEntitySetPath.split("/");
    if (aPathParts.length > 2) {
      const sNavigationPath = aPathParts[aPathParts.length - 1];
      aPathParts.splice(-1, 1);
      const oNavigationRestrictions = getNavigationRestrictions(converterContext, sNavigationPath);
      const oNavigationFilterRestrictions = oNavigationRestrictions && oNavigationRestrictions.FilterRestrictions;
      oRet.RequiredProperties = oRet.RequiredProperties.concat(getFilterRestrictions(oNavigationFilterRestrictions, "RequiredProperties") || []);
      oRet.NonFilterableProperties = oRet.NonFilterableProperties.concat(getFilterRestrictions(oNavigationFilterRestrictions, "NonFilterableProperties") || []);
      oRet.FilterAllowedExpressions = {
        ...(getFilterAllowedExpression(oNavigationFilterRestrictions) || {}),
        ...oRet.FilterAllowedExpressions
      };
    }
    const aRequiredProps = oRet.RequiredProperties;
    const aNonFilterableProps = oRet.NonFilterableProperties;
    const aFetchedProperties = [];

    // process the fields to add necessary properties
    propertyInfoFields.forEach(function (propertyInfoField) {
      const sPropertyPath = propertyInfoField.conditionPath.replace(/\+|\*/g, "");
      if (aNonFilterableProps.indexOf(sPropertyPath) === -1) {
        const oPropertyInfo = assignDataTypeToPropertyInfo(propertyInfoField, converterContext, aRequiredProps, aTypeConfig);
        aFetchedProperties.push(oPropertyInfo);
      }
    });

    //add edit
    const dataModelObjectPath = converterContext.getDataModelObjectPath();
    if (ModelHelper.isObjectPathDraftSupported(dataModelObjectPath)) {
      aFetchedProperties.push(getEditStateFilterPropertyInfo());
    }
    // add search
    const searchRestrictions = getSearchRestrictions(converterContext);
    const hideBasicSearch = Boolean(searchRestrictions && !searchRestrictions.Searchable);
    if (sEntitySetPath && hideBasicSearch !== true) {
      if (!searchRestrictions || searchRestrictions !== null && searchRestrictions !== void 0 && searchRestrictions.Searchable) {
        aFetchedProperties.push(getSearchFilterPropertyInfo());
      }
    }
    return aFetchedProperties;
  };
  _exports.processSelectionFields = processSelectionFields;
  const insertCustomManifestElements = function (filterFields, entityType, converterContext) {
    return insertCustomElements(filterFields, getManifestFilterFields(entityType, converterContext), {
      availability: OverrideType.overwrite,
      label: OverrideType.overwrite,
      type: OverrideType.overwrite,
      position: OverrideType.overwrite,
      slotName: OverrideType.overwrite,
      template: OverrideType.overwrite,
      settings: OverrideType.overwrite,
      visualFilter: OverrideType.overwrite,
      required: OverrideType.overwrite
    });
  };

  /**
   * Retrieve the configuration for the selection fields that will be used within the filter bar
   * This configuration takes into account the annotation and the selection variants.
   *
   * @param converterContext
   * @param lrTables
   * @param annotationPath
   * @param [includeHidden]
   * @param [lineItemTerm]
   * @returns An array of selection fields
   */
  _exports.insertCustomManifestElements = insertCustomManifestElements;
  const getSelectionFields = function (converterContext) {
    var _entityType$annotatio5, _entityType$annotatio6;
    let lrTables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let annotationPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    let includeHidden = arguments.length > 3 ? arguments[3] : undefined;
    let lineItemTerm = arguments.length > 4 ? arguments[4] : undefined;
    const oAnnotatedSelectionFieldData = getAnnotatedSelectionFieldData(converterContext, lrTables, annotationPath, includeHidden, lineItemTerm);
    const parameterFields = _getParameterFields(converterContext);
    let propertyInfoFields = oAnnotatedSelectionFieldData.propertyInfoFields;
    const entityType = oAnnotatedSelectionFieldData.entityType;
    propertyInfoFields = parameterFields.concat(propertyInfoFields);
    propertyInfoFields = insertCustomManifestElements(propertyInfoFields, entityType, converterContext);
    const aFetchedProperties = processSelectionFields(propertyInfoFields, converterContext, oAnnotatedSelectionFieldData.defaultFilterFields);
    aFetchedProperties.sort(function (a, b) {
      if (a.groupLabel === undefined || a.groupLabel === null) {
        return -1;
      }
      if (b.groupLabel === undefined || b.groupLabel === null) {
        return 1;
      }
      return a.groupLabel.localeCompare(b.groupLabel);
    });
    let sFetchProperties = JSON.stringify(aFetchedProperties);
    sFetchProperties = sFetchProperties.replace(/\{/g, "\\{");
    sFetchProperties = sFetchProperties.replace(/\}/g, "\\}");
    const sPropertyInfo = sFetchProperties;
    // end of propertyFields processing

    // to populate selection fields
    let propSelectionFields = JSON.parse(JSON.stringify(oAnnotatedSelectionFieldData.propertyInfoFields));
    propSelectionFields = parameterFields.concat(propSelectionFields);
    // create a map of properties to be used in selection variants
    const excludedFilterProperties = oAnnotatedSelectionFieldData.excludedFilterProperties;
    const filterFacets = entityType === null || entityType === void 0 ? void 0 : (_entityType$annotatio5 = entityType.annotations) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.FilterFacets;
    let filterFacetMap = {};
    const aFieldGroups = converterContext.getAnnotationsByTerm("UI", "com.sap.vocabularies.UI.v1.FieldGroup");
    if (filterFacets === undefined || filterFacets.length < 0) {
      for (const i in aFieldGroups) {
        filterFacetMap = {
          ...filterFacetMap,
          ...getFieldGroupFilterGroups(aFieldGroups[i])
        };
      }
    } else {
      filterFacetMap = filterFacets.reduce((previousValue, filterFacet) => {
        for (let i = 0; i < (filterFacet === null || filterFacet === void 0 ? void 0 : (_filterFacet$Target = filterFacet.Target) === null || _filterFacet$Target === void 0 ? void 0 : (_filterFacet$Target$$ = _filterFacet$Target.$target) === null || _filterFacet$Target$$ === void 0 ? void 0 : (_filterFacet$Target$$2 = _filterFacet$Target$$.Data) === null || _filterFacet$Target$$2 === void 0 ? void 0 : _filterFacet$Target$$2.length); i++) {
          var _filterFacet$Target, _filterFacet$Target$$, _filterFacet$Target$$2, _filterFacet$Target2, _filterFacet$Target2$, _filterFacet$Target2$2, _filterFacet$Target2$3, _filterFacet$ID, _filterFacet$Label;
          previousValue[filterFacet === null || filterFacet === void 0 ? void 0 : (_filterFacet$Target2 = filterFacet.Target) === null || _filterFacet$Target2 === void 0 ? void 0 : (_filterFacet$Target2$ = _filterFacet$Target2.$target) === null || _filterFacet$Target2$ === void 0 ? void 0 : (_filterFacet$Target2$2 = _filterFacet$Target2$.Data[i]) === null || _filterFacet$Target2$2 === void 0 ? void 0 : (_filterFacet$Target2$3 = _filterFacet$Target2$2.Value) === null || _filterFacet$Target2$3 === void 0 ? void 0 : _filterFacet$Target2$3.path] = {
            group: filterFacet === null || filterFacet === void 0 ? void 0 : (_filterFacet$ID = filterFacet.ID) === null || _filterFacet$ID === void 0 ? void 0 : _filterFacet$ID.toString(),
            groupLabel: filterFacet === null || filterFacet === void 0 ? void 0 : (_filterFacet$Label = filterFacet.Label) === null || _filterFacet$Label === void 0 ? void 0 : _filterFacet$Label.toString()
          };
        }
        return previousValue;
      }, {});
    }

    // create a map of all potential filter fields based on...
    const filterFields = oAnnotatedSelectionFieldData.filterFields;

    // finally create final list of filter fields by adding the SelectionFields first (order matters)...
    let allFilters = propSelectionFields

    // ...and adding remaining filter fields, that are not used in a SelectionVariant (order doesn't matter)
    .concat(Object.keys(filterFields).filter(propertyPath => !(propertyPath in excludedFilterProperties)).map(propertyPath => {
      return Object.assign(filterFields[propertyPath], filterFacetMap[propertyPath]);
    }));
    const sContextPath = converterContext.getContextPath();

    //if all tables are analytical tables "aggregatable" properties must be excluded
    if (checkAllTableForEntitySetAreAnalytical(lrTables, sContextPath)) {
      // Currently all agregates are root entity properties (no properties coming from navigation) and all
      // tables with same entitySet gets same aggreagte configuration that's why we can use first table into
      // LR to get aggregates (without currency/unit properties since we expect to be able to filter them).
      const aggregates = lrTables[0].aggregates;
      if (aggregates) {
        const aggregatableProperties = Object.keys(aggregates).map(aggregateKey => aggregates[aggregateKey].relativePath);
        allFilters = allFilters.filter(filterField => {
          return aggregatableProperties.indexOf(filterField.key) === -1;
        });
      }
    }
    const selectionFields = insertCustomManifestElements(allFilters, entityType, converterContext);

    // Add caseSensitive property to all selection fields.
    const isCaseSensitive = isFilteringCaseSensitive(converterContext);
    selectionFields.forEach(filterField => {
      filterField.caseSensitive = isCaseSensitive;
    });
    return {
      selectionFields,
      sPropertyInfo
    };
  };

  /**
   * Determines whether the filter bar inside a value help dialog should be expanded. This is true if one of the following conditions hold:
   * (1) a filter property is mandatory,
   * (2) no search field exists (entity isn't search enabled),
   * (3) when the data isn't loaded by default (annotation FetchValues = 2).
   *
   * @param converterContext The converter context
   * @param filterRestrictionsAnnotation The FilterRestriction annotation
   * @param valueList The ValueList annotation
   * @returns The value for expandFilterFields
   */
  _exports.getSelectionFields = getSelectionFields;
  const getExpandFilterFields = function (converterContext, filterRestrictionsAnnotation, valueList) {
    const requiredProperties = getFilterRestrictions(filterRestrictionsAnnotation, "RequiredProperties");
    const searchRestrictions = getSearchRestrictions(converterContext);
    const hideBasicSearch = Boolean(searchRestrictions && !searchRestrictions.Searchable);
    if (requiredProperties.length > 0 || hideBasicSearch || (valueList === null || valueList === void 0 ? void 0 : valueList.FetchValues) === 2) {
      return true;
    }
    return false;
  };
  _exports.getExpandFilterFields = getExpandFilterFields;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ListReport/FilterBar", ["sap/fe/core/converters/controls/Common/Table","sap/fe/core/converters/controls/ListReport/VisualFilters","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/IssueManager","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/m/library","../Common/DataVisualization"],function(e,t,n,i,o,a,r,l,s,c,u,d){"use strict";var v={};var p=d.getSelectionVariant;var f=u.StandardDynamicDateRangeKeys;var g=c.getAssociatedUnitPropertyPath;var h=c.getAssociatedTimezonePropertyPath;var y=c.getAssociatedTextPropertyPath;var m=c.getAssociatedCurrencyPropertyPath;var P=s.getTargetNavigationPath;var b=s.enhanceDataModelPath;var F=l.isNavigationProperty;var T=l.isMultipleNavigationProperty;var S=l.isEntitySet;var E=l.isComplexType;var D=a.getExpressionFromAnnotation;var O=a.compileExpression;var x=o.KeyHelper;var C=i.IssueType;var A=i.IssueSeverity;var I=i.IssueCategory;var N=n.Placement;var R=n.OverrideType;var U=n.insertCustomElements;var M=t.getVisualFilters;var k=e.isFilteringCaseSensitive;var L=e.getTypeConfig;var j=e.getSelectionVariantConfiguration;var w;(function(e){e["Default"]="Default";e["Slot"]="Slot"})(w||(w={}));const V="Edm.String";const $="sap.ui.model.odata.type.String";function q(e){const t={};e.Data.forEach(n=>{if(n.$Type==="com.sap.vocabularies.UI.v1.DataField"){var i,o;t[n.Value.path]={group:e.fullyQualifiedName,groupLabel:O(D(e.Label||((i=e.annotations)===null||i===void 0?void 0:(o=i.Common)===null||o===void 0?void 0:o.Label)||e.qualifier))||e.qualifier}}});return t}function H(e){return e.reduce((e,t)=>{t.propertyNames.forEach(t=>{e[t]=true});return e},{})}function B(e,t){if(t&&e.length>0){return e.every(e=>e.enableAnalytics&&t===e.annotation.collection)}return false}function W(e,t){const n=[];return e.map(e=>{const i=e.control.filters;const o=[];for(const e in i){if(Array.isArray(i[e].paths)){const a=i[e].paths;a.forEach(e=>{if(e&&e.annotationPath&&n.indexOf(e.annotationPath)===-1){n.push(e.annotationPath);const i=j(e.annotationPath,t);if(i){o.push(i)}}})}}return o}).reduce((e,t)=>e.concat(t),[])}const K=function(e,t){const n=t.split("/");let i;let o="";while(n.length){let t=n.shift();i=i?`${i}/${t}`:t;const a=e.resolvePath(i);if(T(a)){t+="*"}o=o?`${o}/${t}`:t}return o};const G=function(e,t,n,i,o){var a,r,l;if(t&&t.targetType===undefined&&(i||((a=t.annotations)===null||a===void 0?void 0:(r=a.UI)===null||r===void 0?void 0:(l=r.Hidden)===null||l===void 0?void 0:l.valueOf())!==true)){var s,c,u,d,v,p,f,g;const i=o.getAnnotationEntityType(t),a={key:x.getSelectionFieldKeyFromPath(n),annotationPath:o.getAbsoluteAnnotationPath(n),conditionPath:K(e,n),availability:((s=t.annotations)===null||s===void 0?void 0:(c=s.UI)===null||c===void 0?void 0:(u=c.HiddenFilter)===null||u===void 0?void 0:u.valueOf())===true?"Hidden":"Adaptation",label:O(D(((d=t.annotations.Common)===null||d===void 0?void 0:(v=d.Label)===null||v===void 0?void 0:v.valueOf())||t.name)),group:i.name,groupLabel:O(D((i===null||i===void 0?void 0:(p=i.annotations)===null||p===void 0?void 0:(f=p.Common)===null||f===void 0?void 0:(g=f.Label)===null||g===void 0?void 0:g.valueOf())||i.name))};X(a);return a}return undefined};const X=function(e){if(e.key==="DraftAdministrativeData::CreationDateTime"||e.key==="DraftAdministrativeData::LastChangeDateTime"){const t=[f.TO,f.TOMORROW,f.NEXTWEEK,f.NEXTMONTH,f.NEXTQUARTER,f.NEXTYEAR];e.settings={operatorConfiguration:[{path:"key",equals:t.join(","),exclude:true}]}}};const J=function(e,t,n,i,o){const a={};if(n){n.forEach(n=>{const r=n.name;const l=(t?`${t}/`:"")+r;const s=G(e,n,l,i,o);if(s){a[l]=s}})}return a};const z=function(e,t,n,i){let o={};if(t){t.forEach(t=>{let a={};const r=b(i.getDataModelObjectPath(),t);const l=r.targetObject;if(l===undefined||!n&&r.navigationProperties.find(e=>{var t,n,i;return((t=e.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:(i=n.Hidden)===null||i===void 0?void 0:i.valueOf())===true})){return}if(F(l)){a=J(e,t,l.targetType.entityProperties,n,i)}else if(E(l.targetType)){a=J(e,t,l.targetType.properties,n,i)}else{a=J(e,P(r,true),[l],n,i)}o={...o,...a}})}return o};const Q=function(e,t,n,i){let o=e[t];if(o){delete e[t]}else{o=G(i,i.resolvePath(t),t,true,n)}if(!o){var a;(a=n.getDiagnostics())===null||a===void 0?void 0:a.addIssue(I.Annotation,A.High,C.MISSING_SELECTIONFIELD)}if(o){var r,l;o.availability=o.availability==="Hidden"?"Hidden":"Default";o.isParameter=!!((r=i.annotations)!==null&&r!==void 0&&(l=r.Common)!==null&&l!==void 0&&l.ResultContext)}return o};const Y=function(e,t,n,i,o){const a=[];const r={};const l=t.entityProperties;o===null||o===void 0?void 0:o.forEach(e=>{r[e.value]=true});if(e&&e.length>0){e===null||e===void 0?void 0:e.forEach(e=>{const r=e.PropertyName;const l=r===null||r===void 0?void 0:r.value;const s={};o===null||o===void 0?void 0:o.forEach(e=>{s[e.value]=true});if(l&&!(l in i)){if(!(l in s)){const e=te(l,n,t);if(e){a.push(e)}}}})}else if(l){l.forEach(e=>{var o,l;const s=(o=e.annotations)===null||o===void 0?void 0:(l=o.Common)===null||l===void 0?void 0:l.FilterDefaultValue;const c=e.name;if(!(c in i)){if(s&&!(c in r)){const e=te(c,n,t);if(e){a.push(e)}}}})}return a};function _(e){var t,n;const i=e.getDataModelObjectPath();const o=i.startingEntitySet.entityType;const a=!!((t=o.annotations)!==null&&t!==void 0&&(n=t.Common)!==null&&n!==void 0&&n.ResultContext)&&!i.targetEntitySet;const r=a&&e.getConverterContextFor(`/${i.startingEntitySet.name}`);return r?o.entityProperties.map(function(e){return Q({},e.name,r,o)}):[]}const Z=function(e,t,n){const i=t.length===0||t.every(e=>!e.applySupported.enableSearch);const o=e.length===0||e.every(e=>(e.enableAnalytics||e.control.type==="TreeTable")&&!e.enableBasicSearch);const a=n.getContextPath();if(a&&i&&o){return true}else{return false}};v.getFilterBarHideBasicSearch=Z;const ee=function(e,t){const n=t.getManifestWrapper().getFilterConfiguration();const i=(n===null||n===void 0?void 0:n.filterFields)||{};const o=z(e,Object.keys(i).map(e=>x.getPathFromSelectionFieldKey(e)),true,t);const a={};for(const n in i){const r=i[n];const l=x.getPathFromSelectionFieldKey(n);const s=o[l];const c=r.type==="Slot"?w.Slot:w.Default;const u=r&&r!==null&&r!==void 0&&r.visualFilter?M(e,t,n,i):undefined;a[n]={key:n,type:c,slotName:(r===null||r===void 0?void 0:r.slotName)||n,annotationPath:s===null||s===void 0?void 0:s.annotationPath,conditionPath:(s===null||s===void 0?void 0:s.conditionPath)||l,template:r.template,label:r.label,position:r.position||{placement:N.After},availability:r.availability||"Default",settings:r.settings,visualFilter:u,required:r.required}}return a};v.getManifestFilterFields=ee;const te=function(e,t,n){return Q({},e,t,n)};v.getFilterField=te;const ne=function(e,t){let n=[];if(e&&e[t]){n=e[t].map(function(e){return e.value})}return n};v.getFilterRestrictions=ne;const ie=function(e){const t={};if(e&&e.FilterExpressionRestrictions){e.FilterExpressionRestrictions.forEach(function(e){var n;if((n=e.Property)!==null&&n!==void 0&&n.value&&e.AllowedExpressions){var i;if(t[(i=e.Property)===null||i===void 0?void 0:i.value]){var o;t[(o=e.Property)===null||o===void 0?void 0:o.value].push(e.AllowedExpressions.toString())}else{var a;t[(a=e.Property)===null||a===void 0?void 0:a.value]=[e.AllowedExpressions.toString()]}}})}return t};v.getFilterAllowedExpression=ie;const oe=function(){return{name:"$search",path:"$search",dataType:$,maxConditions:1}};const ae=function(){return{name:"$editState",path:"$editState",groupLabel:"",group:"",dataType:$,hiddenFilter:false}};const re=function(e){var t;const n=e.getEntitySet();return S(n)?(t=n.annotations.Capabilities)===null||t===void 0?void 0:t.SearchRestrictions:undefined};const le=function(e,t){var n,i,o;const a=(n=e.getEntitySet())===null||n===void 0?void 0:(i=n.annotations)===null||i===void 0?void 0:(o=i.Capabilities)===null||o===void 0?void 0:o.NavigationRestrictions;const r=a&&a.RestrictedProperties;return r&&r.find(function(e){return e&&e.NavigationProperty&&e.NavigationProperty.value===t})};v.getNavigationRestrictions=le;const se=function(e){return{key:e.key,annotationPath:e.annotationPath,conditionPath:e.conditionPath,name:e.conditionPath,label:e.label,hiddenFilter:e.availability==="Hidden",display:"Value",isParameter:e.isParameter,caseSensitive:e.caseSensitive,availability:e.availability,position:e.position,type:e.type,template:e.template,menu:e.menu,required:e.required}};const ce=function(e){const t=["SingleValue","MultiValue","SingleRange","MultiRange","SearchExpression","MultiRangeOrSearchExpression"];e.sort(function(e,n){return t.indexOf(e)-t.indexOf(n)});return e[0]};v.getSpecificAllowedExpression=ce;const ue=function(e,t){var n,i,o,a,r,l;const s=e===null||e===void 0?void 0:(n=e.Common)===null||n===void 0?void 0:n.Text,c=s&&(e&&(e===null||e===void 0?void 0:(i=e.Common)===null||i===void 0?void 0:(o=i.Text)===null||o===void 0?void 0:(a=o.annotations)===null||a===void 0?void 0:(r=a.UI)===null||r===void 0?void 0:r.TextArrangement)||t&&(t===null||t===void 0?void 0:(l=t.UI)===null||l===void 0?void 0:l.TextArrangement));if(c){if(c.valueOf()==="UI.TextArrangementType/TextOnly"){return"Description"}else if(c.valueOf()==="UI.TextArrangementType/TextLast"){return"ValueDescription"}return"DescriptionValue"}return s?"DescriptionValue":"Value"};v.displayMode=ue;const de=function(e,t,n){var i;let o=se(t);const a=t.annotationPath;if(!a){return o}const r=e.getConverterContextFor(a).getDataModelObjectPath().targetObject;const l=r===null||r===void 0?void 0:r.annotations;const s=e===null||e===void 0?void 0:(i=e.getDataModelObjectPath().targetObject)===null||i===void 0?void 0:i.annotations;const c=n.formatOptions;const u=n.constraints;o=Object.assign(o,{formatOptions:c,constraints:u,display:ue(l,s)});return o};v.fetchPropertyInfo=de;const ve=function(e){let t=true;switch(e.filterExpression){case"SearchExpression":case"SingleRange":case"SingleValue":t=false;break;default:break}if(e.type&&e.type.indexOf("Boolean")>0){t=false}return t};v.isMultiValue=ve;const pe=function(e){return(e.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"||e.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath")&&e.Value.path.includes("/")};const fe=function(e,t,n){var i;const o=(i=e.Value)===null||i===void 0?void 0:i.$target;if(o){const e=y(o)||m(o)||g(o)||h(o);const i=e?b(t.getDataModelObjectPath(),e).navigationProperties:undefined;if(i!==null&&i!==void 0&&i.length){const e=i[0].name;if(!n.includes(e)){n.push(e)}}}};const ge=function(e,t,n){var i,o,a;switch(t.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":switch((i=t.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.$Type){case"com.sap.vocabularies.UI.v1.FieldGroupType":(a=t.Target.$target.Data)===null||a===void 0?void 0:a.forEach(t=>{ge(e,t,n)});break;default:break}break;case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":if(pe(t)){const i=b(n.getDataModelObjectPath(),t.Value.path).navigationProperties[0].name;if(!e.includes(i)){e.push(i)}}fe(t,n,e);break;default:break}return e};const he=function(e){var t,n,i;let o=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let a=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";let l=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let s=arguments.length>4?arguments[4]:undefined;const c=W(o,e);const u=H(c);const d=e.getEntityType();const v=a&&((t=e.getEntityTypeAnnotation(a))===null||t===void 0?void 0:t.annotation)||((n=d.annotations)===null||n===void 0?void 0:(i=n.UI)===null||i===void 0?void 0:i.SelectionFields)||[];let f=[];if(o.length===0&&!!s){var g;(g=e.getEntityTypeAnnotation(s).annotation)===null||g===void 0?void 0:g.forEach(t=>{f=ge(f,t,e)})}if(r.isDraftRoot(e.getEntitySet())){f.push("DraftAdministrativeData/CreationDateTime","DraftAdministrativeData/CreatedByUser","DraftAdministrativeData/LastChangeDateTime","DraftAdministrativeData/LastChangedByUser")}const h={...J(d,"",d.entityProperties,l,e),...z(d,f,false,e),...z(d,e.getManifestWrapper().getFilterConfiguration().navigationProperties,l,e)};let y=[];const m=p(d,e);if(m){y=m.SelectOptions}const P=(v===null||v===void 0?void 0:v.reduce((t,n)=>{const i=n.value;if(!(i in u)){let n;if(a.startsWith("@com.sap.vocabularies.UI.v1.SelectionFields")){n=""}else{n=a.split("/@com.sap.vocabularies.UI.v1.SelectionFields")[0]}const o=n?n+"/"+i:i;const r=Q(h,o,e,d);if(r){r.group="";r.groupLabel="";t.push(r)}}return t},[]))||[];const b=Y(y,d,e,u,v);return{excludedFilterProperties:u,entityType:d,annotatedSelectionFields:v,filterFields:h,propertyInfoFields:P,defaultFilterFields:b}};const ye=function(e){const t=L(e,e===null||e===void 0?void 0:e.type);if((e===null||e===void 0?void 0:e.type)===V&&(t.constraints.nullable===undefined||t.constraints.nullable===true)){t.formatOptions.parseKeepsEmptyString=false}return t};v.fetchTypeConfig=ye;const me=function(e,t,n,i){let o=de(t,e,i[e.key]),a="";if(e.conditionPath){a=e.conditionPath.replace(/\+|\*/g,"")}if(o){o=Object.assign(o,{maxConditions:!o.isParameter&&ve(o)?-1:1,required:e.required??(o.isParameter||n.indexOf(a)>=0),caseSensitive:k(t),dataType:i[e.key].type})}return o};v.assignDataTypeToPropertyInfo=me;const Pe=function(e,t,n){var i;const o=[];const a={};if(n){e=e.concat(n)}e.forEach(function(e){if(e.annotationPath){const n=t.getConverterContextFor(e.annotationPath);const i=n.getDataModelObjectPath().targetObject;o.push(i===null||i===void 0?void 0:i.type);const r=ye(i);a[e.key]=r}else{o.push(V);a[e.key]={type:$}}});const l=t.getEntitySet();const s=S(l)?(i=l.annotations.Capabilities)===null||i===void 0?void 0:i.FilterRestrictions:undefined;const c={};c.RequiredProperties=ne(s,"RequiredProperties")||[];c.NonFilterableProperties=ne(s,"NonFilterableProperties")||[];c.FilterAllowedExpressions=ie(s);const u=t.getContextPath();const d=u.split("/");if(d.length>2){const e=d[d.length-1];d.splice(-1,1);const n=le(t,e);const i=n&&n.FilterRestrictions;c.RequiredProperties=c.RequiredProperties.concat(ne(i,"RequiredProperties")||[]);c.NonFilterableProperties=c.NonFilterableProperties.concat(ne(i,"NonFilterableProperties")||[]);c.FilterAllowedExpressions={...ie(i)||{},...c.FilterAllowedExpressions}}const v=c.RequiredProperties;const p=c.NonFilterableProperties;const f=[];e.forEach(function(e){const n=e.conditionPath.replace(/\+|\*/g,"");if(p.indexOf(n)===-1){const n=me(e,t,v,a);f.push(n)}});const g=t.getDataModelObjectPath();if(r.isObjectPathDraftSupported(g)){f.push(ae())}const h=re(t);const y=Boolean(h&&!h.Searchable);if(u&&y!==true){if(!h||h!==null&&h!==void 0&&h.Searchable){f.push(oe())}}return f};v.processSelectionFields=Pe;const be=function(e,t,n){return U(e,ee(t,n),{availability:R.overwrite,label:R.overwrite,type:R.overwrite,position:R.overwrite,slotName:R.overwrite,template:R.overwrite,settings:R.overwrite,visualFilter:R.overwrite,required:R.overwrite})};v.insertCustomManifestElements=be;const Fe=function(e){var t,n;let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let o=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"";let a=arguments.length>3?arguments[3]:undefined;let r=arguments.length>4?arguments[4]:undefined;const l=he(e,i,o,a,r);const s=_(e);let c=l.propertyInfoFields;const u=l.entityType;c=s.concat(c);c=be(c,u,e);const d=Pe(c,e,l.defaultFilterFields);d.sort(function(e,t){if(e.groupLabel===undefined||e.groupLabel===null){return-1}if(t.groupLabel===undefined||t.groupLabel===null){return 1}return e.groupLabel.localeCompare(t.groupLabel)});let v=JSON.stringify(d);v=v.replace(/\{/g,"\\{");v=v.replace(/\}/g,"\\}");const p=v;let f=JSON.parse(JSON.stringify(l.propertyInfoFields));f=s.concat(f);const g=l.excludedFilterProperties;const h=u===null||u===void 0?void 0:(t=u.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:n.FilterFacets;let y={};const m=e.getAnnotationsByTerm("UI","com.sap.vocabularies.UI.v1.FieldGroup");if(h===undefined||h.length<0){for(const e in m){y={...y,...q(m[e])}}}else{y=h.reduce((e,t)=>{for(let d=0;d<(t===null||t===void 0?void 0:(n=t.Target)===null||n===void 0?void 0:(i=n.$target)===null||i===void 0?void 0:(o=i.Data)===null||o===void 0?void 0:o.length);d++){var n,i,o,a,r,l,s,c,u;e[t===null||t===void 0?void 0:(a=t.Target)===null||a===void 0?void 0:(r=a.$target)===null||r===void 0?void 0:(l=r.Data[d])===null||l===void 0?void 0:(s=l.Value)===null||s===void 0?void 0:s.path]={group:t===null||t===void 0?void 0:(c=t.ID)===null||c===void 0?void 0:c.toString(),groupLabel:t===null||t===void 0?void 0:(u=t.Label)===null||u===void 0?void 0:u.toString()}}return e},{})}const P=l.filterFields;let b=f.concat(Object.keys(P).filter(e=>!(e in g)).map(e=>Object.assign(P[e],y[e])));const F=e.getContextPath();if(B(i,F)){const e=i[0].aggregates;if(e){const t=Object.keys(e).map(t=>e[t].relativePath);b=b.filter(e=>t.indexOf(e.key)===-1)}}const T=be(b,u,e);const S=k(e);T.forEach(e=>{e.caseSensitive=S});return{selectionFields:T,sPropertyInfo:p}};v.getSelectionFields=Fe;const Te=function(e,t,n){const i=ne(t,"RequiredProperties");const o=re(e);const a=Boolean(o&&!o.Searchable);if(i.length>0||a||(n===null||n===void 0?void 0:n.FetchValues)===2){return true}return false};v.getExpandFilterFields=Te;return v},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ListReport/VisualFilters-dbg", ["sap/fe/core/converters/helpers/Aggregation", "sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/FilterTemplating"], function (Aggregation, IssueManager, BindingToolkit, TypeGuards, DataModelPathHelper, FilterTemplating) {
  "use strict";

  var _exports = {};
  var isPropertyFilterable = FilterTemplating.isPropertyFilterable;
  var getIsRequired = FilterTemplating.getIsRequired;
  var checkFilterExpressionRestrictions = DataModelPathHelper.checkFilterExpressionRestrictions;
  var isEntitySet = TypeGuards.isEntitySet;
  var not = BindingToolkit.not;
  var compileExpression = BindingToolkit.compileExpression;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var AggregationHelper = Aggregation.AggregationHelper;
  /**
   * Checks that measures and dimensions of the visual filter chart can be aggregated and grouped.
   *
   * @param converterContext The converter context
   * @param chartAnnotation The chart annotation
   * @param aggregationHelper The aggregation helper
   * @returns `true` if the measure can be grouped and aggregated
   */
  const _checkVFAggregation = function (converterContext, chartAnnotation, aggregationHelper) {
    var _chartAnnotation$$tar, _chartAnnotation$$tar8, _chartAnnotation$$tar11, _chartAnnotation$$tar12;
    let sMeasurePath, bGroupable, bAggregatable;
    let sMeasure;
    const customAggregates = aggregationHelper.getCustomAggregateDefinitions();
    let aTransAggregations = aggregationHelper.getTransAggregations();
    let aCustAggMeasure = [];
    // if the chart definition has custom aggregates, then consider them, else fall back to the measures with transformation aggregates
    if (chartAnnotation !== null && chartAnnotation !== void 0 && (_chartAnnotation$$tar = chartAnnotation.$target) !== null && _chartAnnotation$$tar !== void 0 && _chartAnnotation$$tar.Measures) {
      var _chartAnnotation$$tar5, _chartAnnotation$$tar6, _chartAnnotation$$tar7;
      aCustAggMeasure = customAggregates.filter(function (custAgg) {
        var _chartAnnotation$$tar2, _chartAnnotation$$tar3, _chartAnnotation$$tar4;
        return custAgg.qualifier === (chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$$tar2 = chartAnnotation.$target) === null || _chartAnnotation$$tar2 === void 0 ? void 0 : (_chartAnnotation$$tar3 = _chartAnnotation$$tar2.Measures) === null || _chartAnnotation$$tar3 === void 0 ? void 0 : (_chartAnnotation$$tar4 = _chartAnnotation$$tar3[0]) === null || _chartAnnotation$$tar4 === void 0 ? void 0 : _chartAnnotation$$tar4.value);
      });
      sMeasure = aCustAggMeasure.length > 0 ? aCustAggMeasure[0].qualifier : chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$$tar5 = chartAnnotation.$target) === null || _chartAnnotation$$tar5 === void 0 ? void 0 : (_chartAnnotation$$tar6 = _chartAnnotation$$tar5.Measures) === null || _chartAnnotation$$tar6 === void 0 ? void 0 : (_chartAnnotation$$tar7 = _chartAnnotation$$tar6[0]) === null || _chartAnnotation$$tar7 === void 0 ? void 0 : _chartAnnotation$$tar7.value;
    }
    // consider dynamic measures only if there are no measures with custom aggregates
    if (!aCustAggMeasure[0] && chartAnnotation !== null && chartAnnotation !== void 0 && (_chartAnnotation$$tar8 = chartAnnotation.$target) !== null && _chartAnnotation$$tar8 !== void 0 && _chartAnnotation$$tar8.DynamicMeasures) {
      var _chartAnnotation$$tar9, _chartAnnotation$$tar10;
      sMeasure = converterContext.getConverterContextFor(converterContext.getAbsoluteAnnotationPath((_chartAnnotation$$tar9 = chartAnnotation.$target.DynamicMeasures) === null || _chartAnnotation$$tar9 === void 0 ? void 0 : (_chartAnnotation$$tar10 = _chartAnnotation$$tar9[0]) === null || _chartAnnotation$$tar10 === void 0 ? void 0 : _chartAnnotation$$tar10.value)).getDataModelObjectPath().targetObject.Name;
      aTransAggregations = aggregationHelper.getAggregatedProperties("AggregatedProperty");
    } else {
      aTransAggregations = aggregationHelper.getAggregatedProperties("AggregatedProperties")[0];
    }
    const sDimension = chartAnnotation === null || chartAnnotation === void 0 ? void 0 : (_chartAnnotation$$tar11 = chartAnnotation.$target) === null || _chartAnnotation$$tar11 === void 0 ? void 0 : (_chartAnnotation$$tar12 = _chartAnnotation$$tar11.Dimensions[0]) === null || _chartAnnotation$$tar12 === void 0 ? void 0 : _chartAnnotation$$tar12.value;
    if (customAggregates.some(function (custAgg) {
      return custAgg.qualifier === sMeasure;
    })) {
      sMeasurePath = sMeasure;
    } else if (aTransAggregations && aTransAggregations[0]) {
      aTransAggregations.some(function (oAggregate) {
        if (oAggregate.Name === sMeasure) {
          sMeasurePath = oAggregate === null || oAggregate === void 0 ? void 0 : oAggregate.AggregatableProperty.value;
        }
      });
    }
    const aAggregatablePropsFromContainer = aggregationHelper.getAggregatableProperties();
    const aGroupablePropsFromContainer = aggregationHelper.getGroupableProperties();
    if (aAggregatablePropsFromContainer && aAggregatablePropsFromContainer.length) {
      for (const aggregatableProp of aAggregatablePropsFromContainer) {
        var _Property;
        if ((aggregatableProp === null || aggregatableProp === void 0 ? void 0 : (_Property = aggregatableProp.Property) === null || _Property === void 0 ? void 0 : _Property.value) === sMeasurePath) {
          bAggregatable = true;
        }
      }
    }
    if (aGroupablePropsFromContainer && aGroupablePropsFromContainer.length) {
      for (const groupableProp of aGroupablePropsFromContainer) {
        if ((groupableProp === null || groupableProp === void 0 ? void 0 : groupableProp.value) === sDimension) {
          bGroupable = true;
        }
      }
    }
    return bAggregatable && bGroupable;
  };
  /**
   * Method to get the visual filters object for a property.
   *
   * @param entityType The converter context
   * @param converterContext The chart annotation
   * @param sPropertyPath The aggregation helper
   * @param FilterFields The aggregation helper
   * @returns { VisualFilters | undefined} The visual filters
   */
  function getVisualFilters(entityType, converterContext, sPropertyPath, FilterFields) {
    var _oVisualFilter$visual;
    let visualFilter;
    const oVisualFilter = FilterFields[sPropertyPath];
    if (oVisualFilter !== null && oVisualFilter !== void 0 && (_oVisualFilter$visual = oVisualFilter.visualFilter) !== null && _oVisualFilter$visual !== void 0 && _oVisualFilter$visual.valueList) {
      var _oVisualFilter$visual2, _property$annotations, _property$annotations2, _property$annotations3, _property$annotations4, _property$annotations5;
      const oVFPath = oVisualFilter === null || oVisualFilter === void 0 ? void 0 : (_oVisualFilter$visual2 = oVisualFilter.visualFilter) === null || _oVisualFilter$visual2 === void 0 ? void 0 : _oVisualFilter$visual2.valueList;
      const annotationQualifierSplit = oVFPath.split("#");
      const qualifierVL = annotationQualifierSplit.length > 1 ? `ValueList#${annotationQualifierSplit[1]}` : annotationQualifierSplit[0];
      const property = entityType.resolvePath(sPropertyPath);
      const valueList = property === null || property === void 0 ? void 0 : (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Common) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2[qualifierVL];
      const isValueListWithFixedValues = (property === null || property === void 0 ? void 0 : (_property$annotations3 = property.annotations) === null || _property$annotations3 === void 0 ? void 0 : (_property$annotations4 = _property$annotations3.Common) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.ValueListWithFixedValues) === null || _property$annotations5 === void 0 ? void 0 : _property$annotations5.valueOf()) || false;
      if (valueList) {
        var _converterContext$get, _collectionPathConver;
        const collectionPath = valueList === null || valueList === void 0 ? void 0 : valueList.CollectionPath.toString();
        const collectionPathConverterContext = converterContext.getConverterContextFor(`/${collectionPath || ((_converterContext$get = converterContext.getEntitySet()) === null || _converterContext$get === void 0 ? void 0 : _converterContext$get.name)}`);
        const valueListParams = valueList === null || valueList === void 0 ? void 0 : valueList.Parameters;
        let outParameter;
        const inParameters = [];
        let aParameters = [];
        const parameterEntityType = collectionPathConverterContext.getParameterEntityType();
        aParameters = parameterEntityType ? parameterEntityType.keys.map(function (key) {
          return key.name;
        }) : [];
        if (converterContext.getContextPath() === collectionPathConverterContext.getContextPath()) {
          _addInParameters(inParameters, aParameters, true);
        }
        if (valueListParams) {
          for (const valueListParam of valueListParams) {
            var _LocalDataProperty;
            const localDataProperty = (_LocalDataProperty = valueListParam.LocalDataProperty) === null || _LocalDataProperty === void 0 ? void 0 : _LocalDataProperty.value;
            const valueListProperty = valueListParam.ValueListProperty;
            if (((valueListParam === null || valueListParam === void 0 ? void 0 : valueListParam.$Type) === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || (valueListParam === null || valueListParam === void 0 ? void 0 : valueListParam.$Type) === "com.sap.vocabularies.Common.v1.ValueListParameterOut") && sPropertyPath === localDataProperty) {
              outParameter = valueListParam;
            }
            if (((valueListParam === null || valueListParam === void 0 ? void 0 : valueListParam.$Type) === "com.sap.vocabularies.Common.v1.ValueListParameterInOut" || (valueListParam === null || valueListParam === void 0 ? void 0 : valueListParam.$Type) === "com.sap.vocabularies.Common.v1.ValueListParameterIn") && sPropertyPath !== localDataProperty) {
              const bNotFilterable = isPropertyFilterable(collectionPathConverterContext, valueListProperty);
              if (!bNotFilterable) {
                inParameters.push({
                  localDataProperty: localDataProperty,
                  valueListProperty: valueListProperty
                });
              }
            }
          }
        }
        if (inParameters && inParameters.length) {
          inParameters.forEach(function (oInParameter) {
            const mainEntitySetInMappingAllowedExpression = compileExpression(checkFilterExpressionRestrictions(converterContext.getConverterContextFor(converterContext.getAbsoluteAnnotationPath(oInParameter === null || oInParameter === void 0 ? void 0 : oInParameter.localDataProperty)).getDataModelObjectPath(), ["SingleValue"]));
            const valueListEntitySetInMappingAllowedExpression = compileExpression(checkFilterExpressionRestrictions(collectionPathConverterContext.getConverterContextFor(collectionPathConverterContext.getAbsoluteAnnotationPath(oInParameter === null || oInParameter === void 0 ? void 0 : oInParameter.valueListProperty)).getDataModelObjectPath(), ["SingleValue"]));
            if (valueListEntitySetInMappingAllowedExpression === "true" && mainEntitySetInMappingAllowedExpression === "false") {
              throw new Error(`FilterRestrictions of ${sPropertyPath} in MainEntitySet and ValueListEntitySet are different`);
            }
          });
        }
        const pvQualifier = valueList === null || valueList === void 0 ? void 0 : valueList.PresentationVariantQualifier;
        const svQualifier = valueList === null || valueList === void 0 ? void 0 : valueList.SelectionVariantQualifier;
        const pvAnnotation = collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : (_collectionPathConver = collectionPathConverterContext.getEntityType().annotations.UI) === null || _collectionPathConver === void 0 ? void 0 : _collectionPathConver[`PresentationVariant#${pvQualifier}`];
        const aggregationHelper = new AggregationHelper(collectionPathConverterContext.getEntityType(), collectionPathConverterContext);
        if (!aggregationHelper.isAnalyticsSupported()) {
          return undefined;
        }
        if (pvAnnotation) {
          var _collectionPathConver2;
          const aVisualizations = pvAnnotation === null || pvAnnotation === void 0 ? void 0 : pvAnnotation.Visualizations;
          const contextPath = `/${valueList === null || valueList === void 0 ? void 0 : valueList.CollectionPath}` || `/${collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : (_collectionPathConver2 = collectionPathConverterContext.getEntitySet()) === null || _collectionPathConver2 === void 0 ? void 0 : _collectionPathConver2.name}`;
          visualFilter = {};
          visualFilter.contextPath = contextPath;
          visualFilter.isValueListWithFixedValues = isValueListWithFixedValues;
          let chartAnnotation;
          for (const visualization of aVisualizations) {
            var _visualization$$targe;
            if (((_visualization$$targe = visualization.$target) === null || _visualization$$targe === void 0 ? void 0 : _visualization$$targe.term) === "com.sap.vocabularies.UI.v1.Chart") {
              chartAnnotation = visualization;
              break;
            }
          }
          if (chartAnnotation) {
            var _chartAnnotation, _chartAnnotation$$tar13, _chartAnnotation$$tar14, _chartAnnotation$$tar15, _chartAnnotation$$tar16, _chartAnnotation$$tar17, _chartAnnotation$$tar18, _chartAnnotation2, _chartAnnotation2$$ta, _chartAnnotation2$$ta2, _chartAnnotation2$$ta3, _chartAnnotation2$$ta4, _chartAnnotation2$$ta5, _chartAnnotation2$$ta6;
            const _bgetVFAggregation = _checkVFAggregation(collectionPathConverterContext, chartAnnotation, aggregationHelper);
            if (!_bgetVFAggregation) {
              return;
            }
            const bDimensionHidden = (_chartAnnotation = chartAnnotation) === null || _chartAnnotation === void 0 ? void 0 : (_chartAnnotation$$tar13 = _chartAnnotation.$target) === null || _chartAnnotation$$tar13 === void 0 ? void 0 : (_chartAnnotation$$tar14 = _chartAnnotation$$tar13.Dimensions[0]) === null || _chartAnnotation$$tar14 === void 0 ? void 0 : (_chartAnnotation$$tar15 = _chartAnnotation$$tar14.$target) === null || _chartAnnotation$$tar15 === void 0 ? void 0 : (_chartAnnotation$$tar16 = _chartAnnotation$$tar15.annotations) === null || _chartAnnotation$$tar16 === void 0 ? void 0 : (_chartAnnotation$$tar17 = _chartAnnotation$$tar16.UI) === null || _chartAnnotation$$tar17 === void 0 ? void 0 : (_chartAnnotation$$tar18 = _chartAnnotation$$tar17.Hidden) === null || _chartAnnotation$$tar18 === void 0 ? void 0 : _chartAnnotation$$tar18.valueOf();
            const bDimensionHiddenFilter = (_chartAnnotation2 = chartAnnotation) === null || _chartAnnotation2 === void 0 ? void 0 : (_chartAnnotation2$$ta = _chartAnnotation2.$target) === null || _chartAnnotation2$$ta === void 0 ? void 0 : (_chartAnnotation2$$ta2 = _chartAnnotation2$$ta.Dimensions[0]) === null || _chartAnnotation2$$ta2 === void 0 ? void 0 : (_chartAnnotation2$$ta3 = _chartAnnotation2$$ta2.$target) === null || _chartAnnotation2$$ta3 === void 0 ? void 0 : (_chartAnnotation2$$ta4 = _chartAnnotation2$$ta3.annotations) === null || _chartAnnotation2$$ta4 === void 0 ? void 0 : (_chartAnnotation2$$ta5 = _chartAnnotation2$$ta4.UI) === null || _chartAnnotation2$$ta5 === void 0 ? void 0 : (_chartAnnotation2$$ta6 = _chartAnnotation2$$ta5.HiddenFilter) === null || _chartAnnotation2$$ta6 === void 0 ? void 0 : _chartAnnotation2$$ta6.valueOf();
            if (bDimensionHidden === true || bDimensionHiddenFilter === true) {
              return;
            } else if (aVisualizations && aVisualizations.length) {
              var _collectionPathConver3, _outParameter, _outParameter$LocalDa, _outParameter2, _requiredProperties, _visualFilter$require, _chartAnnotation3, _chartAnnotation3$$ta, _chartAnnotation3$$ta2, _chartAnnotation3$$ta3;
              visualFilter.chartAnnotation = chartAnnotation ? collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : collectionPathConverterContext.getAbsoluteAnnotationPath(`${chartAnnotation.$target.fullyQualifiedName}/$AnnotationPath/`) : undefined;
              // This needs to be done to avoid repetitive entity type in case of non-parameterized entity set e.g /SalesOrderManage/com.c_salesordermanage_sd_aggregate.SalesOrderManage
              const entitySetName = (_collectionPathConver3 = collectionPathConverterContext.getEntitySet()) === null || _collectionPathConver3 === void 0 ? void 0 : _collectionPathConver3.name;
              let presentationAnnotation;
              const relativeAnnotationPath = collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : collectionPathConverterContext.getRelativeAnnotationPath(`${pvAnnotation.fullyQualifiedName}/`, collectionPathConverterContext.getEntityType());
              if (parameterEntityType) {
                presentationAnnotation = collectionPathConverterContext.getContextPath() + "/" + relativeAnnotationPath;
              } else {
                presentationAnnotation = "/" + entitySetName + "/" + relativeAnnotationPath;
              }
              visualFilter.presentationAnnotation = pvAnnotation ? presentationAnnotation : undefined;
              visualFilter.outParameter = (_outParameter = outParameter) === null || _outParameter === void 0 ? void 0 : (_outParameter$LocalDa = _outParameter.LocalDataProperty) === null || _outParameter$LocalDa === void 0 ? void 0 : _outParameter$LocalDa.value;
              visualFilter.inParameters = inParameters;
              visualFilter.valuelistProperty = (_outParameter2 = outParameter) === null || _outParameter2 === void 0 ? void 0 : _outParameter2.ValueListProperty;
              const bIsRange = checkFilterExpressionRestrictions(converterContext.getConverterContextFor(converterContext.getAbsoluteAnnotationPath(sPropertyPath)).getDataModelObjectPath(), ["SingleRange", "MultiRange"]);
              if (compileExpression(bIsRange) === "true") {
                converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MALFORMED_VISUALFILTERS.VALUELIST);
                return undefined;
              }
              const bIsMainEntitySetSingleSelection = checkFilterExpressionRestrictions(converterContext.getConverterContextFor(converterContext.getAbsoluteAnnotationPath(sPropertyPath)).getDataModelObjectPath(), ["SingleValue"]);
              visualFilter.multipleSelectionAllowed = compileExpression(not(bIsMainEntitySetSingleSelection));
              visualFilter.required = getIsRequired(converterContext, sPropertyPath);
              let svAnnotation;
              if (svQualifier) {
                var _collectionPathConver4, _svAnnotation;
                svAnnotation = collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : (_collectionPathConver4 = collectionPathConverterContext.getEntityTypeAnnotation(`@UI.SelectionVariant#${svQualifier}`)) === null || _collectionPathConver4 === void 0 ? void 0 : _collectionPathConver4.annotation;
                let selectionVariantAnnotation;
                const relativeSelectionVariantPath = collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : collectionPathConverterContext.getRelativeAnnotationPath(`${(_svAnnotation = svAnnotation) === null || _svAnnotation === void 0 ? void 0 : _svAnnotation.fullyQualifiedName}/`, collectionPathConverterContext.getEntityType());
                if (parameterEntityType) {
                  selectionVariantAnnotation = collectionPathConverterContext.getContextPath() + "/" + relativeSelectionVariantPath;
                } else {
                  selectionVariantAnnotation = "/" + entitySetName + "/" + relativeSelectionVariantPath;
                }
                visualFilter.selectionVariantAnnotation = svAnnotation ? selectionVariantAnnotation : undefined;
              }
              let requiredProperties = [];
              if (parameterEntityType) {
                var _oEntitySetConverterC, _oEntitySetConverterC2, _oEntitySetConverterC3, _oEntitySetConverterC4, _oRestrictedProperty$;
                const sEntitySet = collectionPath.split("/")[0];
                const sNavigationProperty = collectionPath.split("/")[1];
                const oEntitySetConverterContext = converterContext.getConverterContextFor(`/${sEntitySet}`);
                const aRestrictedProperties = oEntitySetConverterContext === null || oEntitySetConverterContext === void 0 ? void 0 : (_oEntitySetConverterC = oEntitySetConverterContext.getDataModelObjectPath().startingEntitySet) === null || _oEntitySetConverterC === void 0 ? void 0 : (_oEntitySetConverterC2 = _oEntitySetConverterC.annotations) === null || _oEntitySetConverterC2 === void 0 ? void 0 : (_oEntitySetConverterC3 = _oEntitySetConverterC2.Capabilities) === null || _oEntitySetConverterC3 === void 0 ? void 0 : (_oEntitySetConverterC4 = _oEntitySetConverterC3.NavigationRestrictions) === null || _oEntitySetConverterC4 === void 0 ? void 0 : _oEntitySetConverterC4.RestrictedProperties;
                const oRestrictedProperty = aRestrictedProperties === null || aRestrictedProperties === void 0 ? void 0 : aRestrictedProperties.find(restrictedNavProp => {
                  var _restrictedNavProp$Na;
                  if (((_restrictedNavProp$Na = restrictedNavProp.NavigationProperty) === null || _restrictedNavProp$Na === void 0 ? void 0 : _restrictedNavProp$Na.type) === "NavigationPropertyPath") {
                    return restrictedNavProp.NavigationProperty.value === sNavigationProperty;
                  }
                });
                requiredProperties = (oRestrictedProperty === null || oRestrictedProperty === void 0 ? void 0 : (_oRestrictedProperty$ = oRestrictedProperty.FilterRestrictions) === null || _oRestrictedProperty$ === void 0 ? void 0 : _oRestrictedProperty$.RequiredProperties) ?? [];
              } else {
                const entitySetOrSingleton = collectionPathConverterContext === null || collectionPathConverterContext === void 0 ? void 0 : collectionPathConverterContext.getEntitySet();
                if (isEntitySet(entitySetOrSingleton)) {
                  var _entitySetOrSingleton, _entitySetOrSingleton2;
                  requiredProperties = ((_entitySetOrSingleton = entitySetOrSingleton.annotations.Capabilities) === null || _entitySetOrSingleton === void 0 ? void 0 : (_entitySetOrSingleton2 = _entitySetOrSingleton.FilterRestrictions) === null || _entitySetOrSingleton2 === void 0 ? void 0 : _entitySetOrSingleton2.RequiredProperties) ?? [];
                }
              }
              let requiredPropertyPaths = [];
              if ((_requiredProperties = requiredProperties) !== null && _requiredProperties !== void 0 && _requiredProperties.length) {
                requiredProperties.forEach(function (oRequireProperty) {
                  requiredPropertyPaths.push(oRequireProperty.value);
                });
              }
              requiredPropertyPaths = requiredPropertyPaths.concat(aParameters);
              visualFilter.requiredProperties = requiredPropertyPaths;
              if (converterContext.getContextPath() === collectionPathConverterContext.getContextPath()) {
                // if context Path for both visual filter and filter bar are same, consider required Properties as well along with in Parameters
                _addInParameters(inParameters, requiredProperties, false);
              }
              if ((_visualFilter$require = visualFilter.requiredProperties) !== null && _visualFilter$require !== void 0 && _visualFilter$require.length) {
                if (!visualFilter.inParameters || !visualFilter.inParameters.length) {
                  if (!visualFilter.selectionVariantAnnotation) {
                    visualFilter.showOverlayInitially = true;
                  } else {
                    var _svAnnotation2, _svAnnotation2$Select, _svAnnotation3, _svAnnotation3$Parame;
                    let selectOptions = ((_svAnnotation2 = svAnnotation) === null || _svAnnotation2 === void 0 ? void 0 : (_svAnnotation2$Select = _svAnnotation2.SelectOptions) === null || _svAnnotation2$Select === void 0 ? void 0 : _svAnnotation2$Select.map(oSelectOption => {
                      var _oSelectOption$Proper;
                      return (_oSelectOption$Proper = oSelectOption.PropertyName) === null || _oSelectOption$Proper === void 0 ? void 0 : _oSelectOption$Proper.value;
                    })) || [];
                    const parameterOptions = ((_svAnnotation3 = svAnnotation) === null || _svAnnotation3 === void 0 ? void 0 : (_svAnnotation3$Parame = _svAnnotation3.Parameters) === null || _svAnnotation3$Parame === void 0 ? void 0 : _svAnnotation3$Parame.map(oParameterOption => {
                      var _PropertyName;
                      return (_PropertyName = oParameterOption.PropertyName) === null || _PropertyName === void 0 ? void 0 : _PropertyName.value;
                    })) || [];
                    selectOptions = selectOptions.concat(parameterOptions);
                    requiredPropertyPaths = requiredPropertyPaths.sort();
                    selectOptions = selectOptions.sort();
                    visualFilter.showOverlayInitially = requiredPropertyPaths.some(function (sPath) {
                      return selectOptions.indexOf(sPath) === -1;
                    });
                  }
                } else {
                  visualFilter.showOverlayInitially = false;
                }
              } else {
                visualFilter.showOverlayInitially = false;
              }
              const sDimensionType = (_chartAnnotation3 = chartAnnotation) === null || _chartAnnotation3 === void 0 ? void 0 : (_chartAnnotation3$$ta = _chartAnnotation3.$target) === null || _chartAnnotation3$$ta === void 0 ? void 0 : (_chartAnnotation3$$ta2 = _chartAnnotation3$$ta.Dimensions[0]) === null || _chartAnnotation3$$ta2 === void 0 ? void 0 : (_chartAnnotation3$$ta3 = _chartAnnotation3$$ta2.$target) === null || _chartAnnotation3$$ta3 === void 0 ? void 0 : _chartAnnotation3$$ta3.type;
              if (!(sDimensionType === "Edm.DateTimeOffset" || sDimensionType === "Edm.Date" || sDimensionType === "Edm.TimeOfDay") && chartAnnotation.$target.ChartType === "UI.ChartType/Line") {
                visualFilter.renderLineChart = false;
              } else {
                visualFilter.renderLineChart = true;
              }
            }
          } else {
            converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MALFORMED_VISUALFILTERS.CHART);
            return;
          }
        } else {
          converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MALFORMED_VISUALFILTERS.PRESENTATIONVARIANT);
        }
      } else {
        converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.High, IssueType.MALFORMED_VISUALFILTERS.VALUELIST);
      }
    } else {
      converterContext.getDiagnostics().addIssue(IssueCategory.Manifest, IssueSeverity.High, IssueType.MALFORMED_VISUALFILTERS.VALUELIST);
    }
    return visualFilter;
  }

  /**
   * Method to add inparameters from required properties and parameters.
   *
   * @param inParams An array containing existing inparams
   * @param properties An array containing either requiredproperties or parameters
   * @param isParam A boolean flag indicating whether passed properties are parameters
   */
  _exports.getVisualFilters = getVisualFilters;
  function _addInParameters(inParams, properties, isParam) {
    properties.forEach(function (element) {
      const property = isParam ? element : element.value;
      inParams.push({
        localDataProperty: property,
        valueListProperty: property
      });
    });
  }
  _exports._addInParameters = _addInParameters;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ListReport/VisualFilters", ["sap/fe/core/converters/helpers/Aggregation","sap/fe/core/converters/helpers/IssueManager","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/FilterTemplating"],function(t,e,i,o,n,l){"use strict";var a={};var r=l.isPropertyFilterable;var v=l.getIsRequired;var d=n.checkFilterExpressionRestrictions;var s=o.isEntitySet;var u=i.not;var g=i.compileExpression;var c=e.IssueType;var f=e.IssueSeverity;var p=e.IssueCategory;var P=t.AggregationHelper;const y=function(t,e,i){var o,n,l,a;let r,v,d;let s;const u=i.getCustomAggregateDefinitions();let g=i.getTransAggregations();let c=[];if(e!==null&&e!==void 0&&(o=e.$target)!==null&&o!==void 0&&o.Measures){var f,p,P;c=u.filter(function(t){var i,o,n;return t.qualifier===(e===null||e===void 0?void 0:(i=e.$target)===null||i===void 0?void 0:(o=i.Measures)===null||o===void 0?void 0:(n=o[0])===null||n===void 0?void 0:n.value)});s=c.length>0?c[0].qualifier:e===null||e===void 0?void 0:(f=e.$target)===null||f===void 0?void 0:(p=f.Measures)===null||p===void 0?void 0:(P=p[0])===null||P===void 0?void 0:P.value}if(!c[0]&&e!==null&&e!==void 0&&(n=e.$target)!==null&&n!==void 0&&n.DynamicMeasures){var y,h;s=t.getConverterContextFor(t.getAbsoluteAnnotationPath((y=e.$target.DynamicMeasures)===null||y===void 0?void 0:(h=y[0])===null||h===void 0?void 0:h.value)).getDataModelObjectPath().targetObject.Name;g=i.getAggregatedProperties("AggregatedProperty")}else{g=i.getAggregatedProperties("AggregatedProperties")[0]}const m=e===null||e===void 0?void 0:(l=e.$target)===null||l===void 0?void 0:(a=l.Dimensions[0])===null||a===void 0?void 0:a.value;if(u.some(function(t){return t.qualifier===s})){r=s}else if(g&&g[0]){g.some(function(t){if(t.Name===s){r=t===null||t===void 0?void 0:t.AggregatableProperty.value}})}const A=i.getAggregatableProperties();const L=i.getGroupableProperties();if(A&&A.length){for(const t of A){var I;if((t===null||t===void 0?void 0:(I=t.Property)===null||I===void 0?void 0:I.value)===r){d=true}}}if(L&&L.length){for(const t of L){if((t===null||t===void 0?void 0:t.value)===m){v=true}}}return d&&v};function h(t,e,i,o){var n;let l;const a=o[i];if(a!==null&&a!==void 0&&(n=a.visualFilter)!==null&&n!==void 0&&n.valueList){var h,A,L,I,C,E;const o=a===null||a===void 0?void 0:(h=a.visualFilter)===null||h===void 0?void 0:h.valueList;const n=o.split("#");const ct=n.length>1?`ValueList#${n[1]}`:n[0];const ft=t.resolvePath(i);const pt=ft===null||ft===void 0?void 0:(A=ft.annotations)===null||A===void 0?void 0:(L=A.Common)===null||L===void 0?void 0:L[ct];const Pt=(ft===null||ft===void 0?void 0:(I=ft.annotations)===null||I===void 0?void 0:(C=I.Common)===null||C===void 0?void 0:(E=C.ValueListWithFixedValues)===null||E===void 0?void 0:E.valueOf())||false;if(pt){var S,D;const t=pt===null||pt===void 0?void 0:pt.CollectionPath.toString();const o=e.getConverterContextFor(`/${t||((S=e.getEntitySet())===null||S===void 0?void 0:S.name)}`);const n=pt===null||pt===void 0?void 0:pt.Parameters;let a;const h=[];let A=[];const L=o.getParameterEntityType();A=L?L.keys.map(function(t){return t.name}):[];if(e.getContextPath()===o.getContextPath()){m(h,A,true)}if(n){for(const t of n){var V;const e=(V=t.LocalDataProperty)===null||V===void 0?void 0:V.value;const n=t.ValueListProperty;if(((t===null||t===void 0?void 0:t.$Type)==="com.sap.vocabularies.Common.v1.ValueListParameterInOut"||(t===null||t===void 0?void 0:t.$Type)==="com.sap.vocabularies.Common.v1.ValueListParameterOut")&&i===e){a=t}if(((t===null||t===void 0?void 0:t.$Type)==="com.sap.vocabularies.Common.v1.ValueListParameterInOut"||(t===null||t===void 0?void 0:t.$Type)==="com.sap.vocabularies.Common.v1.ValueListParameterIn")&&i!==e){const t=r(o,n);if(!t){h.push({localDataProperty:e,valueListProperty:n})}}}}if(h&&h.length){h.forEach(function(t){const n=g(d(e.getConverterContextFor(e.getAbsoluteAnnotationPath(t===null||t===void 0?void 0:t.localDataProperty)).getDataModelObjectPath(),["SingleValue"]));const l=g(d(o.getConverterContextFor(o.getAbsoluteAnnotationPath(t===null||t===void 0?void 0:t.valueListProperty)).getDataModelObjectPath(),["SingleValue"]));if(l==="true"&&n==="false"){throw new Error(`FilterRestrictions of ${i} in MainEntitySet and ValueListEntitySet are different`)}})}const I=pt===null||pt===void 0?void 0:pt.PresentationVariantQualifier;const C=pt===null||pt===void 0?void 0:pt.SelectionVariantQualifier;const E=o===null||o===void 0?void 0:(D=o.getEntityType().annotations.UI)===null||D===void 0?void 0:D[`PresentationVariant#${I}`];const ct=new P(o.getEntityType(),o);if(!ct.isAnalyticsSupported()){return undefined}if(E){var T;const n=E===null||E===void 0?void 0:E.Visualizations;const r=`/${pt===null||pt===void 0?void 0:pt.CollectionPath}`||`/${o===null||o===void 0?void 0:(T=o.getEntitySet())===null||T===void 0?void 0:T.name}`;l={};l.contextPath=r;l.isValueListWithFixedValues=Pt;let P;for(const t of n){var $;if((($=t.$target)===null||$===void 0?void 0:$.term)==="com.sap.vocabularies.UI.v1.Chart"){P=t;break}}if(P){var F,O,M,R,b,x,N,U,H,q,w,j,_,Q;const r=y(o,P,ct);if(!r){return}const I=(F=P)===null||F===void 0?void 0:(O=F.$target)===null||O===void 0?void 0:(M=O.Dimensions[0])===null||M===void 0?void 0:(R=M.$target)===null||R===void 0?void 0:(b=R.annotations)===null||b===void 0?void 0:(x=b.UI)===null||x===void 0?void 0:(N=x.Hidden)===null||N===void 0?void 0:N.valueOf();const S=(U=P)===null||U===void 0?void 0:(H=U.$target)===null||H===void 0?void 0:(q=H.Dimensions[0])===null||q===void 0?void 0:(w=q.$target)===null||w===void 0?void 0:(j=w.annotations)===null||j===void 0?void 0:(_=j.UI)===null||_===void 0?void 0:(Q=_.HiddenFilter)===null||Q===void 0?void 0:Q.valueOf();if(I===true||S===true){return}else if(n&&n.length){var k,G,W,z,B,J,K,X,Y,Z;l.chartAnnotation=P?o===null||o===void 0?void 0:o.getAbsoluteAnnotationPath(`${P.$target.fullyQualifiedName}/$AnnotationPath/`):undefined;const n=(k=o.getEntitySet())===null||k===void 0?void 0:k.name;let r;const y=o===null||o===void 0?void 0:o.getRelativeAnnotationPath(`${E.fullyQualifiedName}/`,o.getEntityType());if(L){r=o.getContextPath()+"/"+y}else{r="/"+n+"/"+y}l.presentationAnnotation=E?r:undefined;l.outParameter=(G=a)===null||G===void 0?void 0:(W=G.LocalDataProperty)===null||W===void 0?void 0:W.value;l.inParameters=h;l.valuelistProperty=(z=a)===null||z===void 0?void 0:z.ValueListProperty;const I=d(e.getConverterContextFor(e.getAbsoluteAnnotationPath(i)).getDataModelObjectPath(),["SingleRange","MultiRange"]);if(g(I)==="true"){e.getDiagnostics().addIssue(p.Annotation,f.High,c.MALFORMED_VISUALFILTERS.VALUELIST);return undefined}const S=d(e.getConverterContextFor(e.getAbsoluteAnnotationPath(i)).getDataModelObjectPath(),["SingleValue"]);l.multipleSelectionAllowed=g(u(S));l.required=v(e,i);let D;if(C){var tt,et;D=o===null||o===void 0?void 0:(tt=o.getEntityTypeAnnotation(`@UI.SelectionVariant#${C}`))===null||tt===void 0?void 0:tt.annotation;let t;const e=o===null||o===void 0?void 0:o.getRelativeAnnotationPath(`${(et=D)===null||et===void 0?void 0:et.fullyQualifiedName}/`,o.getEntityType());if(L){t=o.getContextPath()+"/"+e}else{t="/"+n+"/"+e}l.selectionVariantAnnotation=D?t:undefined}let V=[];if(L){var it,ot,nt,lt,at;const i=t.split("/")[0];const o=t.split("/")[1];const n=e.getConverterContextFor(`/${i}`);const l=n===null||n===void 0?void 0:(it=n.getDataModelObjectPath().startingEntitySet)===null||it===void 0?void 0:(ot=it.annotations)===null||ot===void 0?void 0:(nt=ot.Capabilities)===null||nt===void 0?void 0:(lt=nt.NavigationRestrictions)===null||lt===void 0?void 0:lt.RestrictedProperties;const a=l===null||l===void 0?void 0:l.find(t=>{var e;if(((e=t.NavigationProperty)===null||e===void 0?void 0:e.type)==="NavigationPropertyPath"){return t.NavigationProperty.value===o}});V=(a===null||a===void 0?void 0:(at=a.FilterRestrictions)===null||at===void 0?void 0:at.RequiredProperties)??[]}else{const t=o===null||o===void 0?void 0:o.getEntitySet();if(s(t)){var rt,vt;V=((rt=t.annotations.Capabilities)===null||rt===void 0?void 0:(vt=rt.FilterRestrictions)===null||vt===void 0?void 0:vt.RequiredProperties)??[]}}let T=[];if((B=V)!==null&&B!==void 0&&B.length){V.forEach(function(t){T.push(t.value)})}T=T.concat(A);l.requiredProperties=T;if(e.getContextPath()===o.getContextPath()){m(h,V,false)}if((J=l.requiredProperties)!==null&&J!==void 0&&J.length){if(!l.inParameters||!l.inParameters.length){if(!l.selectionVariantAnnotation){l.showOverlayInitially=true}else{var dt,st,ut,gt;let t=((dt=D)===null||dt===void 0?void 0:(st=dt.SelectOptions)===null||st===void 0?void 0:st.map(t=>{var e;return(e=t.PropertyName)===null||e===void 0?void 0:e.value}))||[];const e=((ut=D)===null||ut===void 0?void 0:(gt=ut.Parameters)===null||gt===void 0?void 0:gt.map(t=>{var e;return(e=t.PropertyName)===null||e===void 0?void 0:e.value}))||[];t=t.concat(e);T=T.sort();t=t.sort();l.showOverlayInitially=T.some(function(e){return t.indexOf(e)===-1})}}else{l.showOverlayInitially=false}}else{l.showOverlayInitially=false}const $=(K=P)===null||K===void 0?void 0:(X=K.$target)===null||X===void 0?void 0:(Y=X.Dimensions[0])===null||Y===void 0?void 0:(Z=Y.$target)===null||Z===void 0?void 0:Z.type;if(!($==="Edm.DateTimeOffset"||$==="Edm.Date"||$==="Edm.TimeOfDay")&&P.$target.ChartType==="UI.ChartType/Line"){l.renderLineChart=false}else{l.renderLineChart=true}}}else{e.getDiagnostics().addIssue(p.Annotation,f.High,c.MALFORMED_VISUALFILTERS.CHART);return}}else{e.getDiagnostics().addIssue(p.Annotation,f.High,c.MALFORMED_VISUALFILTERS.PRESENTATIONVARIANT)}}else{e.getDiagnostics().addIssue(p.Annotation,f.High,c.MALFORMED_VISUALFILTERS.VALUELIST)}}else{e.getDiagnostics().addIssue(p.Manifest,f.High,c.MALFORMED_VISUALFILTERS.VALUELIST)}return l}a.getVisualFilters=h;function m(t,e,i){e.forEach(function(e){const o=i?e:e.value;t.push({localDataProperty:o,valueListProperty:o})})}a._addInParameters=m;return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/Avatar-dbg", ["sap/fe/core/helpers/BindingToolkit"], function (BindingToolkit) {
  "use strict";

  var _exports = {};
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var compileExpression = BindingToolkit.compileExpression;
  var AvatarShape;
  (function (AvatarShape) {
    AvatarShape["Circle"] = "Circle";
    AvatarShape["Square"] = "Square";
  })(AvatarShape || (AvatarShape = {}));
  const isNaturalPerson = converterContext => {
    var _converterContext$get, _converterContext$get2;
    return ((_converterContext$get = converterContext.getEntityType().annotations.Common) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.IsNaturalPerson) === null || _converterContext$get2 === void 0 ? void 0 : _converterContext$get2.valueOf()) === true;
  };
  const getFallBackIcon = converterContext => {
    var _converterContext$get3, _converterContext$get4;
    const headerInfo = (_converterContext$get3 = converterContext.getEntityType().annotations) === null || _converterContext$get3 === void 0 ? void 0 : (_converterContext$get4 = _converterContext$get3.UI) === null || _converterContext$get4 === void 0 ? void 0 : _converterContext$get4.HeaderInfo;
    if (!headerInfo || headerInfo && !headerInfo.ImageUrl && !headerInfo.TypeImageUrl) {
      return undefined;
    }
    if (headerInfo.ImageUrl && headerInfo.TypeImageUrl) {
      return compileExpression(getExpressionFromAnnotation(headerInfo.TypeImageUrl));
    }
    return compileExpression(isNaturalPerson(converterContext) ? "sap-icon://person-placeholder" : "sap-icon://product");
  };
  const getSource = converterContext => {
    var _converterContext$get5, _converterContext$get6;
    const headerInfo = (_converterContext$get5 = converterContext.getEntityType().annotations) === null || _converterContext$get5 === void 0 ? void 0 : (_converterContext$get6 = _converterContext$get5.UI) === null || _converterContext$get6 === void 0 ? void 0 : _converterContext$get6.HeaderInfo;
    if (!headerInfo || !(headerInfo.ImageUrl || headerInfo.TypeImageUrl)) {
      return undefined;
    }
    return compileExpression(getExpressionFromAnnotation(headerInfo.ImageUrl || headerInfo.TypeImageUrl));
  };
  const getAvatar = converterContext => {
    var _converterContext$get7, _converterContext$get8;
    const headerInfo = (_converterContext$get7 = converterContext.getEntityType().annotations) === null || _converterContext$get7 === void 0 ? void 0 : (_converterContext$get8 = _converterContext$get7.UI) === null || _converterContext$get8 === void 0 ? void 0 : _converterContext$get8.HeaderInfo;
    const oSource = headerInfo && (headerInfo.ImageUrl || headerInfo.TypeImageUrl || headerInfo.Initials);
    if (!oSource) {
      return undefined;
    }
    return {
      src: getSource(converterContext),
      initials: compileExpression(getExpressionFromAnnotation((headerInfo === null || headerInfo === void 0 ? void 0 : headerInfo.Initials) || "")),
      fallbackIcon: getFallBackIcon(converterContext),
      displayShape: compileExpression(isNaturalPerson(converterContext) ? AvatarShape.Circle : AvatarShape.Square)
    };
  };
  _exports.getAvatar = getAvatar;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/Avatar", ["sap/fe/core/helpers/BindingToolkit"],function(e){"use strict";var n={};var r=e.getExpressionFromAnnotation;var i=e.compileExpression;var o;(function(e){e["Circle"]="Circle";e["Square"]="Square"})(o||(o={}));const t=e=>{var n,r;return((n=e.getEntityType().annotations.Common)===null||n===void 0?void 0:(r=n.IsNaturalPerson)===null||r===void 0?void 0:r.valueOf())===true};const a=e=>{var n,o;const a=(n=e.getEntityType().annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.HeaderInfo;if(!a||a&&!a.ImageUrl&&!a.TypeImageUrl){return undefined}if(a.ImageUrl&&a.TypeImageUrl){return i(r(a.TypeImageUrl))}return i(t(e)?"sap-icon://person-placeholder":"sap-icon://product")};const l=e=>{var n,o;const t=(n=e.getEntityType().annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.HeaderInfo;if(!t||!(t.ImageUrl||t.TypeImageUrl)){return undefined}return i(r(t.ImageUrl||t.TypeImageUrl))};const d=e=>{var n,d;const s=(n=e.getEntityType().annotations)===null||n===void 0?void 0:(d=n.UI)===null||d===void 0?void 0:d.HeaderInfo;const u=s&&(s.ImageUrl||s.TypeImageUrl||s.Initials);if(!u){return undefined}return{src:l(e),initials:i(r((s===null||s===void 0?void 0:s.Initials)||"")),fallbackIcon:a(e),displayShape:i(t(e)?o.Circle:o.Square)}};n.getAvatar=d;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/HeaderFacet-dbg", ["sap/fe/core/converters/annotations/DataField", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/ID", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "../../../helpers/StableIdHelper", "../../helpers/DataFieldHelper", "../Common/Form"], function (DataField, ConfigurableObject, ID, Key, BindingToolkit, StableIdHelper, DataFieldHelper, Form) {
  "use strict";

  var _exports = {};
  var getFormElementsFromManifest = Form.getFormElementsFromManifest;
  var FormElementType = Form.FormElementType;
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var isAnnotationFieldStaticallyHidden = DataFieldHelper.isAnnotationFieldStaticallyHidden;
  var createIdForAnnotation = StableIdHelper.createIdForAnnotation;
  var not = BindingToolkit.not;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var KeyHelper = Key.KeyHelper;
  var getHeaderFacetID = ID.getHeaderFacetID;
  var getHeaderFacetFormID = ID.getHeaderFacetFormID;
  var getHeaderFacetContainerID = ID.getHeaderFacetContainerID;
  var getCustomHeaderFacetID = ID.getCustomHeaderFacetID;
  var Placement = ConfigurableObject.Placement;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var getSemanticObjectPath = DataField.getSemanticObjectPath;
  // region definitions
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Definitions: Header Facet Types, Generic OP Header Facet, Manifest Properties for Custom Header Facet
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  let HeaderFacetType;
  (function (HeaderFacetType) {
    HeaderFacetType["Annotation"] = "Annotation";
    HeaderFacetType["XMLFragment"] = "XMLFragment";
  })(HeaderFacetType || (HeaderFacetType = {}));
  _exports.HeaderFacetType = HeaderFacetType;
  let FacetType;
  (function (FacetType) {
    FacetType["Reference"] = "Reference";
    FacetType["Collection"] = "Collection";
  })(FacetType || (FacetType = {}));
  _exports.FacetType = FacetType;
  let FlexDesignTimeType;
  (function (FlexDesignTimeType) {
    FlexDesignTimeType["Default"] = "Default";
    FlexDesignTimeType["NotAdaptable"] = "not-adaptable";
    FlexDesignTimeType["NotAdaptableTree"] = "not-adaptable-tree";
    FlexDesignTimeType["NotAdaptableVisibility"] = "not-adaptable-visibility";
  })(FlexDesignTimeType || (FlexDesignTimeType = {}));
  _exports.FlexDesignTimeType = FlexDesignTimeType;
  var HeaderDataPointType;
  (function (HeaderDataPointType) {
    HeaderDataPointType["ProgressIndicator"] = "ProgressIndicator";
    HeaderDataPointType["RatingIndicator"] = "RatingIndicator";
    HeaderDataPointType["Content"] = "Content";
  })(HeaderDataPointType || (HeaderDataPointType = {}));
  var TargetAnnotationType;
  (function (TargetAnnotationType) {
    TargetAnnotationType["None"] = "None";
    TargetAnnotationType["DataPoint"] = "DataPoint";
    TargetAnnotationType["Chart"] = "Chart";
    TargetAnnotationType["Identification"] = "Identification";
    TargetAnnotationType["Contact"] = "Contact";
    TargetAnnotationType["Address"] = "Address";
    TargetAnnotationType["FieldGroup"] = "FieldGroup";
  })(TargetAnnotationType || (TargetAnnotationType = {}));
  // endregion definitions

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Collect All Header Facets: Custom (via Manifest) and Annotation Based (via Metamodel)
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  /**
   * Retrieve header facets from annotations.
   *
   * @param converterContext
   * @returns Header facets from annotations
   */
  function getHeaderFacetsFromAnnotations(converterContext) {
    var _converterContext$get, _converterContext$get2, _converterContext$get3;
    const headerFacets = [];
    (_converterContext$get = converterContext.getEntityType().annotations) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.UI) === null || _converterContext$get2 === void 0 ? void 0 : (_converterContext$get3 = _converterContext$get2.HeaderFacets) === null || _converterContext$get3 === void 0 ? void 0 : _converterContext$get3.forEach(facet => {
      const headerFacet = createHeaderFacet(facet, converterContext);
      if (headerFacet) {
        headerFacets.push(headerFacet);
      }
    });
    return headerFacets;
  }

  /**
   * Retrieve custom header facets from manifest.
   *
   * @param manifestCustomHeaderFacets
   * @returns HeaderFacets from manifest
   */
  _exports.getHeaderFacetsFromAnnotations = getHeaderFacetsFromAnnotations;
  function getHeaderFacetsFromManifest(manifestCustomHeaderFacets) {
    const customHeaderFacets = {};
    Object.keys(manifestCustomHeaderFacets).forEach(manifestHeaderFacetKey => {
      const customHeaderFacet = manifestCustomHeaderFacets[manifestHeaderFacetKey];
      customHeaderFacets[manifestHeaderFacetKey] = createCustomHeaderFacet(customHeaderFacet, manifestHeaderFacetKey);
    });
    return customHeaderFacets;
  }

  /**
   * Retrieve stashed settings for header facets from manifest.
   *
   * @param facetDefinition
   * @param collectionFacetDefinition
   * @param converterContext
   * @returns Stashed setting for header facet or false
   */
  _exports.getHeaderFacetsFromManifest = getHeaderFacetsFromManifest;
  function getStashedSettingsForHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext) {
    var _headerFacetsControlC;
    // When a HeaderFacet is nested inside a CollectionFacet, stashing is not supported
    if (facetDefinition.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet" && collectionFacetDefinition.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet") {
      return false;
    }
    const headerFacetID = createIdForAnnotation(facetDefinition) ?? "";
    const headerFacetsControlConfig = converterContext.getManifestWrapper().getHeaderFacets();
    const stashedSetting = (_headerFacetsControlC = headerFacetsControlConfig[headerFacetID]) === null || _headerFacetsControlC === void 0 ? void 0 : _headerFacetsControlC.stashed;
    return stashedSetting === true;
  }

  /**
   * Retrieve flexibility designtime settings from manifest.
   *
   * @param facetDefinition
   * @param collectionFacetDefinition
   * @param converterContext
   * @returns Designtime setting or default
   */
  _exports.getStashedSettingsForHeaderFacet = getStashedSettingsForHeaderFacet;
  function getDesignTimeMetadataSettingsForHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext) {
    let designTimeMetadata = FlexDesignTimeType.Default;
    const headerFacetID = createIdForAnnotation(facetDefinition);

    // For HeaderFacets nested inside CollectionFacet RTA should be disabled, therefore set to "not-adaptable-tree"
    if (facetDefinition.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet" && collectionFacetDefinition.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet") {
      designTimeMetadata = FlexDesignTimeType.NotAdaptableTree;
    } else {
      const headerFacetsControlConfig = converterContext.getManifestWrapper().getHeaderFacets();
      if (headerFacetID) {
        var _headerFacetsControlC2, _headerFacetsControlC3;
        const designTime = (_headerFacetsControlC2 = headerFacetsControlConfig[headerFacetID]) === null || _headerFacetsControlC2 === void 0 ? void 0 : (_headerFacetsControlC3 = _headerFacetsControlC2.flexSettings) === null || _headerFacetsControlC3 === void 0 ? void 0 : _headerFacetsControlC3.designtime;
        switch (designTime) {
          case FlexDesignTimeType.NotAdaptable:
          case FlexDesignTimeType.NotAdaptableTree:
          case FlexDesignTimeType.NotAdaptableVisibility:
            designTimeMetadata = designTime;
            break;
          default:
            break;
        }
      }
    }
    return designTimeMetadata;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Convert & Build Annotation Based Header Facets
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  _exports.getDesignTimeMetadataSettingsForHeaderFacet = getDesignTimeMetadataSettingsForHeaderFacet;
  function createReferenceHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext) {
    var _facetDefinition$anno, _facetDefinition$anno2, _facetDefinition$anno3;
    if (facetDefinition.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet" && !(((_facetDefinition$anno = facetDefinition.annotations) === null || _facetDefinition$anno === void 0 ? void 0 : (_facetDefinition$anno2 = _facetDefinition$anno.UI) === null || _facetDefinition$anno2 === void 0 ? void 0 : (_facetDefinition$anno3 = _facetDefinition$anno2.Hidden) === null || _facetDefinition$anno3 === void 0 ? void 0 : _facetDefinition$anno3.valueOf()) === true)) {
      var _facetDefinition$Targ, _facetDefinition$Targ2;
      const headerFacetID = getHeaderFacetID(facetDefinition),
        getHeaderFacetKey = (facetDefinitionToCheck, fallback) => {
          var _facetDefinitionToChe, _facetDefinitionToChe2;
          return ((_facetDefinitionToChe = facetDefinitionToCheck.ID) === null || _facetDefinitionToChe === void 0 ? void 0 : _facetDefinitionToChe.toString()) || ((_facetDefinitionToChe2 = facetDefinitionToCheck.Label) === null || _facetDefinitionToChe2 === void 0 ? void 0 : _facetDefinitionToChe2.toString()) || fallback;
        },
        targetAnnotationValue = facetDefinition.Target.value,
        targetAnnotationType = getTargetAnnotationType(facetDefinition);
      let headerFormData;
      let headerDataPointData;
      switch (targetAnnotationType) {
        case TargetAnnotationType.FieldGroup:
          headerFormData = getFieldGroupFormData(facetDefinition, converterContext);
          break;
        case TargetAnnotationType.DataPoint:
          headerDataPointData = getDataPointData(facetDefinition, converterContext);
          break;
        // ToDo: Handle other cases
        default:
          break;
      }
      const {
        annotations
      } = facetDefinition;
      if (((_facetDefinition$Targ = facetDefinition.Target) === null || _facetDefinition$Targ === void 0 ? void 0 : (_facetDefinition$Targ2 = _facetDefinition$Targ.$target) === null || _facetDefinition$Targ2 === void 0 ? void 0 : _facetDefinition$Targ2.term) === "com.sap.vocabularies.UI.v1.Chart" && isAnnotationFieldStaticallyHidden(facetDefinition)) {
        return undefined;
      } else {
        var _annotations$UI, _annotations$UI$Hidde;
        return {
          type: HeaderFacetType.Annotation,
          facetType: FacetType.Reference,
          id: headerFacetID,
          containerId: getHeaderFacetContainerID(facetDefinition),
          key: getHeaderFacetKey(facetDefinition, headerFacetID),
          flexSettings: {
            designtime: getDesignTimeMetadataSettingsForHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext)
          },
          stashed: getStashedSettingsForHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext),
          visible: compileExpression(not(equal(getExpressionFromAnnotation(annotations === null || annotations === void 0 ? void 0 : (_annotations$UI = annotations.UI) === null || _annotations$UI === void 0 ? void 0 : (_annotations$UI$Hidde = _annotations$UI.Hidden) === null || _annotations$UI$Hidde === void 0 ? void 0 : _annotations$UI$Hidde.valueOf()), true))),
          annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(facetDefinition.fullyQualifiedName)}/`,
          targetAnnotationValue,
          targetAnnotationType,
          headerFormData,
          headerDataPointData
        };
      }
    }
    return undefined;
  }
  function createCollectionHeaderFacet(collectionFacetDefinition, converterContext) {
    if (collectionFacetDefinition.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet") {
      var _collectionFacetDefin, _collectionFacetDefin2, _collectionFacetDefin3;
      const facets = [],
        headerFacetID = getHeaderFacetID(collectionFacetDefinition),
        getHeaderFacetKey = (facetDefinition, fallback) => {
          var _facetDefinition$ID, _facetDefinition$Labe;
          return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
        };
      collectionFacetDefinition.Facets.forEach(facetDefinition => {
        const facet = createReferenceHeaderFacet(facetDefinition, collectionFacetDefinition, converterContext);
        if (facet) {
          facets.push(facet);
        }
      });
      return {
        type: HeaderFacetType.Annotation,
        facetType: FacetType.Collection,
        id: headerFacetID,
        containerId: getHeaderFacetContainerID(collectionFacetDefinition),
        key: getHeaderFacetKey(collectionFacetDefinition, headerFacetID),
        flexSettings: {
          designtime: getDesignTimeMetadataSettingsForHeaderFacet(collectionFacetDefinition, collectionFacetDefinition, converterContext)
        },
        stashed: getStashedSettingsForHeaderFacet(collectionFacetDefinition, collectionFacetDefinition, converterContext),
        visible: compileExpression(not(equal(getExpressionFromAnnotation((_collectionFacetDefin = collectionFacetDefinition.annotations) === null || _collectionFacetDefin === void 0 ? void 0 : (_collectionFacetDefin2 = _collectionFacetDefin.UI) === null || _collectionFacetDefin2 === void 0 ? void 0 : (_collectionFacetDefin3 = _collectionFacetDefin2.Hidden) === null || _collectionFacetDefin3 === void 0 ? void 0 : _collectionFacetDefin3.valueOf()), true))),
        annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(collectionFacetDefinition.fullyQualifiedName)}/`,
        facets
      };
    }
    return undefined;
  }
  function getTargetAnnotationType(facetDefinition) {
    let annotationType = TargetAnnotationType.None;
    const annotationTypeMap = {
      "com.sap.vocabularies.UI.v1.DataPoint": TargetAnnotationType.DataPoint,
      "com.sap.vocabularies.UI.v1.Chart": TargetAnnotationType.Chart,
      "com.sap.vocabularies.UI.v1.Identification": TargetAnnotationType.Identification,
      "com.sap.vocabularies.Communication.v1.Contact": TargetAnnotationType.Contact,
      "com.sap.vocabularies.Communication.v1.Address": TargetAnnotationType.Address,
      "com.sap.vocabularies.UI.v1.FieldGroup": TargetAnnotationType.FieldGroup
    };
    // ReferenceURLFacet and CollectionFacet do not have Target property.
    if (facetDefinition.$Type !== "com.sap.vocabularies.UI.v1.ReferenceURLFacet" && facetDefinition.$Type !== "com.sap.vocabularies.UI.v1.CollectionFacet") {
      var _facetDefinition$Targ3, _facetDefinition$Targ4;
      annotationType = annotationTypeMap[(_facetDefinition$Targ3 = facetDefinition.Target) === null || _facetDefinition$Targ3 === void 0 ? void 0 : (_facetDefinition$Targ4 = _facetDefinition$Targ3.$target) === null || _facetDefinition$Targ4 === void 0 ? void 0 : _facetDefinition$Targ4.term] || TargetAnnotationType.None;
    }
    return annotationType;
  }
  function getFieldGroupFormData(facetDefinition, converterContext) {
    var _facetDefinition$Labe2;
    // split in this from annotation + getFieldGroupFromDefault
    if (!facetDefinition) {
      throw new Error("Cannot get FieldGroup form data without facet definition");
    }
    const formElements = insertCustomElements(getFormElementsFromAnnotations(facetDefinition, converterContext), getFormElementsFromManifest(facetDefinition, converterContext));
    return {
      id: getHeaderFacetFormID(facetDefinition),
      label: (_facetDefinition$Labe2 = facetDefinition.Label) === null || _facetDefinition$Labe2 === void 0 ? void 0 : _facetDefinition$Labe2.toString(),
      formElements
    };
  }

  /**
   * Creates an array of manifest-based FormElements.
   *
   * @param facetDefinition The definition of the facet
   * @param converterContext The converter context for the facet
   * @returns Annotation-based FormElements
   */
  function getFormElementsFromAnnotations(facetDefinition, converterContext) {
    const annotationBasedFormElements = [];

    // ReferenceURLFacet and CollectionFacet do not have Target property.
    if (facetDefinition.$Type !== "com.sap.vocabularies.UI.v1.ReferenceURLFacet" && facetDefinition.$Type !== "com.sap.vocabularies.UI.v1.CollectionFacet") {
      var _facetDefinition$Targ5, _facetDefinition$Targ6;
      (_facetDefinition$Targ5 = facetDefinition.Target) === null || _facetDefinition$Targ5 === void 0 ? void 0 : (_facetDefinition$Targ6 = _facetDefinition$Targ5.$target) === null || _facetDefinition$Targ6 === void 0 ? void 0 : _facetDefinition$Targ6.Data.forEach(dataField => {
        var _dataField$annotation, _dataField$annotation2, _dataField$annotation3;
        if (!(((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : (_dataField$annotation3 = _dataField$annotation2.Hidden) === null || _dataField$annotation3 === void 0 ? void 0 : _dataField$annotation3.valueOf()) === true)) {
          const semanticObjectAnnotationPath = getSemanticObjectPath(converterContext, dataField);
          if ((dataField.$Type === "com.sap.vocabularies.UI.v1.DataField" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithUrl" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation" || dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldWithAction") && !isReferencePropertyStaticallyHidden(dataField)) {
            var _dataField$Value, _dataField$Value$$tar, _dataField$Value$$tar2, _dataField$Value$$tar3, _dataField$Value$$tar4, _annotations$UI2, _annotations$UI2$Hidd, _dataField$Value2, _dataField$Value2$$ta, _dataField$Value2$$ta2, _dataField$Value2$$ta3;
            const {
              annotations
            } = dataField;
            annotationBasedFormElements.push({
              isValueMultilineText: ((_dataField$Value = dataField.Value) === null || _dataField$Value === void 0 ? void 0 : (_dataField$Value$$tar = _dataField$Value.$target) === null || _dataField$Value$$tar === void 0 ? void 0 : (_dataField$Value$$tar2 = _dataField$Value$$tar.annotations) === null || _dataField$Value$$tar2 === void 0 ? void 0 : (_dataField$Value$$tar3 = _dataField$Value$$tar2.UI) === null || _dataField$Value$$tar3 === void 0 ? void 0 : (_dataField$Value$$tar4 = _dataField$Value$$tar3.MultiLineText) === null || _dataField$Value$$tar4 === void 0 ? void 0 : _dataField$Value$$tar4.valueOf()) === true,
              type: FormElementType.Annotation,
              key: KeyHelper.generateKeyFromDataField(dataField),
              visible: compileExpression(not(equal(getExpressionFromAnnotation(annotations === null || annotations === void 0 ? void 0 : (_annotations$UI2 = annotations.UI) === null || _annotations$UI2 === void 0 ? void 0 : (_annotations$UI2$Hidd = _annotations$UI2.Hidden) === null || _annotations$UI2$Hidd === void 0 ? void 0 : _annotations$UI2$Hidd.valueOf()), true))),
              label: ((_dataField$Value2 = dataField.Value) === null || _dataField$Value2 === void 0 ? void 0 : (_dataField$Value2$$ta = _dataField$Value2.$target) === null || _dataField$Value2$$ta === void 0 ? void 0 : (_dataField$Value2$$ta2 = _dataField$Value2$$ta.annotations) === null || _dataField$Value2$$ta2 === void 0 ? void 0 : (_dataField$Value2$$ta3 = _dataField$Value2$$ta2.Common) === null || _dataField$Value2$$ta3 === void 0 ? void 0 : _dataField$Value2$$ta3.Label) || dataField.Label,
              idPrefix: getHeaderFacetFormID(facetDefinition, dataField),
              annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName)}/`,
              semanticObjectPath: semanticObjectAnnotationPath
            });
          } else if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && !isReferencePropertyStaticallyHidden(dataField)) {
            var _annotations$UI3, _annotations$UI3$Hidd, _dataField$Target, _dataField$Target$$ta, _dataField$Target$$ta2, _dataField$Target$$ta3, _dataField$Target$$ta4, _dataField$Label;
            const {
              annotations
            } = dataField;
            annotationBasedFormElements.push({
              isValueMultilineText: false,
              // was dataField.Target?.$target?.annotations?.UI?.MultiLineText?.valueOf() === true but that doesn't make sense as the target cannot have that annotation
              type: FormElementType.Annotation,
              key: KeyHelper.generateKeyFromDataField(dataField),
              visible: compileExpression(not(equal(getExpressionFromAnnotation(annotations === null || annotations === void 0 ? void 0 : (_annotations$UI3 = annotations.UI) === null || _annotations$UI3 === void 0 ? void 0 : (_annotations$UI3$Hidd = _annotations$UI3.Hidden) === null || _annotations$UI3$Hidd === void 0 ? void 0 : _annotations$UI3$Hidd.valueOf()), true))),
              label: ((_dataField$Target = dataField.Target) === null || _dataField$Target === void 0 ? void 0 : (_dataField$Target$$ta = _dataField$Target.$target) === null || _dataField$Target$$ta === void 0 ? void 0 : (_dataField$Target$$ta2 = _dataField$Target$$ta.annotations) === null || _dataField$Target$$ta2 === void 0 ? void 0 : (_dataField$Target$$ta3 = _dataField$Target$$ta2.Common) === null || _dataField$Target$$ta3 === void 0 ? void 0 : (_dataField$Target$$ta4 = _dataField$Target$$ta3.Label) === null || _dataField$Target$$ta4 === void 0 ? void 0 : _dataField$Target$$ta4.toString()) || ((_dataField$Label = dataField.Label) === null || _dataField$Label === void 0 ? void 0 : _dataField$Label.toString()),
              idPrefix: getHeaderFacetFormID(facetDefinition, dataField),
              annotationPath: `${converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName)}/`,
              semanticObjectPath: semanticObjectAnnotationPath
            });
          }
        }
      });
    }
    return annotationBasedFormElements;
  }
  function getDataPointData(facetDefinition, converterContext) {
    let type = HeaderDataPointType.Content;
    let semanticObjectPath;
    if (facetDefinition.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet" && !isAnnotationFieldStaticallyHidden(facetDefinition)) {
      var _facetDefinition$Targ7, _facetDefinition$Targ8, _facetDefinition$Targ9, _facetDefinition$Targ10, _facetDefinition$Targ11;
      if (((_facetDefinition$Targ7 = facetDefinition.Target) === null || _facetDefinition$Targ7 === void 0 ? void 0 : (_facetDefinition$Targ8 = _facetDefinition$Targ7.$target) === null || _facetDefinition$Targ8 === void 0 ? void 0 : _facetDefinition$Targ8.Visualization) === "UI.VisualizationType/Progress") {
        type = HeaderDataPointType.ProgressIndicator;
      } else if (((_facetDefinition$Targ9 = facetDefinition.Target) === null || _facetDefinition$Targ9 === void 0 ? void 0 : (_facetDefinition$Targ10 = _facetDefinition$Targ9.$target) === null || _facetDefinition$Targ10 === void 0 ? void 0 : _facetDefinition$Targ10.Visualization) === "UI.VisualizationType/Rating") {
        type = HeaderDataPointType.RatingIndicator;
      }
      const dataPoint = (_facetDefinition$Targ11 = facetDefinition.Target) === null || _facetDefinition$Targ11 === void 0 ? void 0 : _facetDefinition$Targ11.$target;
      if (typeof dataPoint === "object") {
        var _dataPoint$Value;
        if (dataPoint !== null && dataPoint !== void 0 && (_dataPoint$Value = dataPoint.Value) !== null && _dataPoint$Value !== void 0 && _dataPoint$Value.$target) {
          var _property$annotations, _property$annotations2;
          const property = dataPoint.Value.$target;
          if ((property === null || property === void 0 ? void 0 : (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Common) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.SemanticObject) !== undefined) {
            semanticObjectPath = converterContext.getEntitySetBasedAnnotationPath(property === null || property === void 0 ? void 0 : property.fullyQualifiedName);
          }
        }
      }
    }
    return {
      type,
      semanticObjectPath
    };
  }

  /**
   * Creates an annotation-based header facet.
   *
   * @param facetDefinition The definition of the facet
   * @param converterContext The converter context
   * @returns The created annotation-based header facet
   */
  function createHeaderFacet(facetDefinition, converterContext) {
    let headerFacet;
    switch (facetDefinition.$Type) {
      case "com.sap.vocabularies.UI.v1.ReferenceFacet":
        headerFacet = createReferenceHeaderFacet(facetDefinition, facetDefinition, converterContext);
        break;
      case "com.sap.vocabularies.UI.v1.CollectionFacet":
        headerFacet = createCollectionHeaderFacet(facetDefinition, converterContext);
        break;
      default:
        break;
    }
    return headerFacet;
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // Convert & Build Manifest Based Header Facets
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  function generateBinding(requestGroupId) {
    if (!requestGroupId) {
      return undefined;
    }
    const groupId = ["Heroes", "Decoration", "Workers", "LongRunners"].indexOf(requestGroupId) !== -1 ? `$auto.${requestGroupId}` : requestGroupId;
    return `{ path : '', parameters : { $$groupId : '${groupId}' } }`;
  }

  /**
   * Create a manifest based custom header facet.
   *
   * @param customHeaderFacetDefinition
   * @param headerFacetKey
   * @returns The manifest based custom header facet created
   */
  function createCustomHeaderFacet(customHeaderFacetDefinition, headerFacetKey) {
    const customHeaderFacetID = getCustomHeaderFacetID(headerFacetKey);
    let position = customHeaderFacetDefinition.position;
    if (!position) {
      position = {
        placement: Placement.After
      };
    }
    // TODO for an non annotation fragment the name is mandatory -> Not checked
    return {
      facetType: FacetType.Reference,
      facets: {},
      type: customHeaderFacetDefinition.type,
      id: customHeaderFacetID,
      containerId: customHeaderFacetID,
      key: headerFacetKey,
      position: position,
      visible: customHeaderFacetDefinition.visible,
      fragmentName: customHeaderFacetDefinition.template || customHeaderFacetDefinition.name,
      title: customHeaderFacetDefinition.title,
      subTitle: customHeaderFacetDefinition.subTitle,
      stashed: customHeaderFacetDefinition.stashed || false,
      flexSettings: {
        ...{
          designtime: FlexDesignTimeType.Default
        },
        ...customHeaderFacetDefinition.flexSettings
      },
      binding: generateBinding(customHeaderFacetDefinition.requestGroupId),
      templateEdit: customHeaderFacetDefinition.templateEdit
    };
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/HeaderFacet", ["sap/fe/core/converters/annotations/DataField","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/ID","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","../../../helpers/StableIdHelper","../../helpers/DataFieldHelper","../Common/Form"],function(e,t,a,i,o,n,l,r){"use strict";var d={};var v=r.getFormElementsFromManifest;var s=r.FormElementType;var c=l.isReferencePropertyStaticallyHidden;var u=l.isAnnotationFieldStaticallyHidden;var f=n.createIdForAnnotation;var p=o.not;var m=o.getExpressionFromAnnotation;var g=o.equal;var b=o.compileExpression;var y=i.KeyHelper;var F=a.getHeaderFacetID;var I=a.getHeaderFacetFormID;var h=a.getHeaderFacetContainerID;var T=a.getCustomHeaderFacetID;var $=t.Placement;var U=t.insertCustomElements;var D=e.getSemanticObjectPath;let C;(function(e){e["Annotation"]="Annotation";e["XMLFragment"]="XMLFragment"})(C||(C={}));d.HeaderFacetType=C;let A;(function(e){e["Reference"]="Reference";e["Collection"]="Collection"})(A||(A={}));d.FacetType=A;let P;(function(e){e["Default"]="Default";e["NotAdaptable"]="not-adaptable";e["NotAdaptableTree"]="not-adaptable-tree";e["NotAdaptableVisibility"]="not-adaptable-visibility"})(P||(P={}));d.FlexDesignTimeType=P;var S;(function(e){e["ProgressIndicator"]="ProgressIndicator";e["RatingIndicator"]="RatingIndicator";e["Content"]="Content"})(S||(S={}));var H;(function(e){e["None"]="None";e["DataPoint"]="DataPoint";e["Chart"]="Chart";e["Identification"]="Identification";e["Contact"]="Contact";e["Address"]="Address";e["FieldGroup"]="FieldGroup"})(H||(H={}));function E(e){var t,a,i;const o=[];(t=e.getEntityType().annotations)===null||t===void 0?void 0:(a=t.UI)===null||a===void 0?void 0:(i=a.HeaderFacets)===null||i===void 0?void 0:i.forEach(t=>{const a=B(t,e);if(a){o.push(a)}});return o}d.getHeaderFacetsFromAnnotations=E;function N(e){const t={};Object.keys(e).forEach(a=>{const i=e[a];t[a]=W(i,a)});return t}d.getHeaderFacetsFromManifest=N;function R(e,t,a){var i;if(e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"&&t.$Type==="com.sap.vocabularies.UI.v1.CollectionFacet"){return false}const o=f(e)??"";const n=a.getManifestWrapper().getHeaderFacets();const l=(i=n[o])===null||i===void 0?void 0:i.stashed;return l===true}d.getStashedSettingsForHeaderFacet=R;function k(e,t,a){let i=P.Default;const o=f(e);if(e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"&&t.$Type==="com.sap.vocabularies.UI.v1.CollectionFacet"){i=P.NotAdaptableTree}else{const e=a.getManifestWrapper().getHeaderFacets();if(o){var n,l;const t=(n=e[o])===null||n===void 0?void 0:(l=n.flexSettings)===null||l===void 0?void 0:l.designtime;switch(t){case P.NotAdaptable:case P.NotAdaptableTree:case P.NotAdaptableVisibility:i=t;break;default:break}}}return i}d.getDesignTimeMetadataSettingsForHeaderFacet=k;function O(e,t,a){var i,o,n;if(e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"&&!(((i=e.annotations)===null||i===void 0?void 0:(o=i.UI)===null||o===void 0?void 0:(n=o.Hidden)===null||n===void 0?void 0:n.valueOf())===true)){var l,r;const i=F(e),o=(e,t)=>{var a,i;return((a=e.ID)===null||a===void 0?void 0:a.toString())||((i=e.Label)===null||i===void 0?void 0:i.toString())||t},n=e.Target.value,s=L(e);let c;let f;switch(s){case H.FieldGroup:c=V(e,a);break;case H.DataPoint:f=j(e,a);break;default:break}const{annotations:y}=e;if(((l=e.Target)===null||l===void 0?void 0:(r=l.$target)===null||r===void 0?void 0:r.term)==="com.sap.vocabularies.UI.v1.Chart"&&u(e)){return undefined}else{var d,v;return{type:C.Annotation,facetType:A.Reference,id:i,containerId:h(e),key:o(e,i),flexSettings:{designtime:k(e,t,a)},stashed:R(e,t,a),visible:b(p(g(m(y===null||y===void 0?void 0:(d=y.UI)===null||d===void 0?void 0:(v=d.Hidden)===null||v===void 0?void 0:v.valueOf()),true))),annotationPath:`${a.getEntitySetBasedAnnotationPath(e.fullyQualifiedName)}/`,targetAnnotationValue:n,targetAnnotationType:s,headerFormData:c,headerDataPointData:f}}}return undefined}function x(e,t){if(e.$Type==="com.sap.vocabularies.UI.v1.CollectionFacet"){var a,i,o;const n=[],l=F(e),r=(e,t)=>{var a,i;return((a=e.ID)===null||a===void 0?void 0:a.toString())||((i=e.Label)===null||i===void 0?void 0:i.toString())||t};e.Facets.forEach(a=>{const i=O(a,e,t);if(i){n.push(i)}});return{type:C.Annotation,facetType:A.Collection,id:l,containerId:h(e),key:r(e,l),flexSettings:{designtime:k(e,e,t)},stashed:R(e,e,t),visible:b(p(g(m((a=e.annotations)===null||a===void 0?void 0:(i=a.UI)===null||i===void 0?void 0:(o=i.Hidden)===null||o===void 0?void 0:o.valueOf()),true))),annotationPath:`${t.getEntitySetBasedAnnotationPath(e.fullyQualifiedName)}/`,facets:n}}return undefined}function L(e){let t=H.None;const a={"com.sap.vocabularies.UI.v1.DataPoint":H.DataPoint,"com.sap.vocabularies.UI.v1.Chart":H.Chart,"com.sap.vocabularies.UI.v1.Identification":H.Identification,"com.sap.vocabularies.Communication.v1.Contact":H.Contact,"com.sap.vocabularies.Communication.v1.Address":H.Address,"com.sap.vocabularies.UI.v1.FieldGroup":H.FieldGroup};if(e.$Type!=="com.sap.vocabularies.UI.v1.ReferenceURLFacet"&&e.$Type!=="com.sap.vocabularies.UI.v1.CollectionFacet"){var i,o;t=a[(i=e.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.term]||H.None}return t}function V(e,t){var a;if(!e){throw new Error("Cannot get FieldGroup form data without facet definition")}const i=U(M(e,t),v(e,t));return{id:I(e),label:(a=e.Label)===null||a===void 0?void 0:a.toString(),formElements:i}}function M(e,t){const a=[];if(e.$Type!=="com.sap.vocabularies.UI.v1.ReferenceURLFacet"&&e.$Type!=="com.sap.vocabularies.UI.v1.CollectionFacet"){var i,o;(i=e.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.Data.forEach(i=>{var o,n,l;if(!(((o=i.annotations)===null||o===void 0?void 0:(n=o.UI)===null||n===void 0?void 0:(l=n.Hidden)===null||l===void 0?void 0:l.valueOf())===true)){const o=D(t,i);if((i.$Type==="com.sap.vocabularies.UI.v1.DataField"||i.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithUrl"||i.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath"||i.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation"||i.$Type==="com.sap.vocabularies.UI.v1.DataFieldWithAction")&&!c(i)){var r,d,v,u,f,F,h,T,$,U,C;const{annotations:n}=i;a.push({isValueMultilineText:((r=i.Value)===null||r===void 0?void 0:(d=r.$target)===null||d===void 0?void 0:(v=d.annotations)===null||v===void 0?void 0:(u=v.UI)===null||u===void 0?void 0:(f=u.MultiLineText)===null||f===void 0?void 0:f.valueOf())===true,type:s.Annotation,key:y.generateKeyFromDataField(i),visible:b(p(g(m(n===null||n===void 0?void 0:(F=n.UI)===null||F===void 0?void 0:(h=F.Hidden)===null||h===void 0?void 0:h.valueOf()),true))),label:((T=i.Value)===null||T===void 0?void 0:($=T.$target)===null||$===void 0?void 0:(U=$.annotations)===null||U===void 0?void 0:(C=U.Common)===null||C===void 0?void 0:C.Label)||i.Label,idPrefix:I(e,i),annotationPath:`${t.getEntitySetBasedAnnotationPath(i.fullyQualifiedName)}/`,semanticObjectPath:o})}else if(i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&!c(i)){var A,P,S,H,E,N,R,k;const{annotations:n}=i;a.push({isValueMultilineText:false,type:s.Annotation,key:y.generateKeyFromDataField(i),visible:b(p(g(m(n===null||n===void 0?void 0:(A=n.UI)===null||A===void 0?void 0:(P=A.Hidden)===null||P===void 0?void 0:P.valueOf()),true))),label:((S=i.Target)===null||S===void 0?void 0:(H=S.$target)===null||H===void 0?void 0:(E=H.annotations)===null||E===void 0?void 0:(N=E.Common)===null||N===void 0?void 0:(R=N.Label)===null||R===void 0?void 0:R.toString())||((k=i.Label)===null||k===void 0?void 0:k.toString()),idPrefix:I(e,i),annotationPath:`${t.getEntitySetBasedAnnotationPath(i.fullyQualifiedName)}/`,semanticObjectPath:o})}}})}return a}function j(e,t){let a=S.Content;let i;if(e.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"&&!u(e)){var o,n,l,r,d;if(((o=e.Target)===null||o===void 0?void 0:(n=o.$target)===null||n===void 0?void 0:n.Visualization)==="UI.VisualizationType/Progress"){a=S.ProgressIndicator}else if(((l=e.Target)===null||l===void 0?void 0:(r=l.$target)===null||r===void 0?void 0:r.Visualization)==="UI.VisualizationType/Rating"){a=S.RatingIndicator}const u=(d=e.Target)===null||d===void 0?void 0:d.$target;if(typeof u==="object"){var v;if(u!==null&&u!==void 0&&(v=u.Value)!==null&&v!==void 0&&v.$target){var s,c;const e=u.Value.$target;if((e===null||e===void 0?void 0:(s=e.annotations)===null||s===void 0?void 0:(c=s.Common)===null||c===void 0?void 0:c.SemanticObject)!==undefined){i=t.getEntitySetBasedAnnotationPath(e===null||e===void 0?void 0:e.fullyQualifiedName)}}}}return{type:a,semanticObjectPath:i}}function B(e,t){let a;switch(e.$Type){case"com.sap.vocabularies.UI.v1.ReferenceFacet":a=O(e,e,t);break;case"com.sap.vocabularies.UI.v1.CollectionFacet":a=x(e,t);break;default:break}return a}function G(e){if(!e){return undefined}const t=["Heroes","Decoration","Workers","LongRunners"].indexOf(e)!==-1?`$auto.${e}`:e;return`{ path : '', parameters : { $$groupId : '${t}' } }`}function W(e,t){const a=T(t);let i=e.position;if(!i){i={placement:$.After}}return{facetType:A.Reference,facets:{},type:e.type,id:a,containerId:a,key:t,position:i,visible:e.visible,fragmentName:e.template||e.name,title:e.title,subTitle:e.subTitle,stashed:e.stashed||false,flexSettings:{...{designtime:P.Default},...e.flexSettings},binding:G(e.requestGroupId),templateEdit:e.templateEdit}}return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/SubSection-dbg", ["sap/base/Log", "sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/controls/ObjectPage/HeaderFacet", "sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "../../annotations/DataField", "../../helpers/ConfigurableObject", "../../helpers/ID", "../../ManifestSettings", "../../objectPage/FormMenuActions", "../Common/DataVisualization", "../Common/Form"], function (Log, Action, HeaderFacet, IssueManager, Key, BindingToolkit, TypeGuards, DataField, ConfigurableObject, ID, ManifestSettings, FormMenuActions, DataVisualization, Form) {
  "use strict";

  var _exports = {};
  var isReferenceFacet = Form.isReferenceFacet;
  var createFormDefinition = Form.createFormDefinition;
  var getDataVisualizationConfiguration = DataVisualization.getDataVisualizationConfiguration;
  var getVisibilityEnablementFormMenuActions = FormMenuActions.getVisibilityEnablementFormMenuActions;
  var getFormHiddenActions = FormMenuActions.getFormHiddenActions;
  var getFormActions = FormMenuActions.getFormActions;
  var ActionType = ManifestSettings.ActionType;
  var getSubSectionID = ID.getSubSectionID;
  var getSideContentID = ID.getSideContentID;
  var getFormID = ID.getFormID;
  var getCustomSubSectionID = ID.getCustomSubSectionID;
  var Placement = ConfigurableObject.Placement;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var isActionWithDialog = DataField.isActionWithDialog;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var ref = BindingToolkit.ref;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var notEqual = BindingToolkit.notEqual;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var fn = BindingToolkit.fn;
  var equal = BindingToolkit.equal;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var KeyHelper = Key.KeyHelper;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  var getStashedSettingsForHeaderFacet = HeaderFacet.getStashedSettingsForHeaderFacet;
  var getHeaderFacetsFromManifest = HeaderFacet.getHeaderFacetsFromManifest;
  var getDesignTimeMetadataSettingsForHeaderFacet = HeaderFacet.getDesignTimeMetadataSettingsForHeaderFacet;
  var removeDuplicateActions = Action.removeDuplicateActions;
  var isActionNavigable = Action.isActionNavigable;
  var getSemanticObjectMapping = Action.getSemanticObjectMapping;
  var getEnabledForAnnotationAction = Action.getEnabledForAnnotationAction;
  var getActionsFromManifest = Action.getActionsFromManifest;
  var ButtonType = Action.ButtonType;
  let SubSectionType;
  (function (SubSectionType) {
    SubSectionType["Unknown"] = "Unknown";
    SubSectionType["Form"] = "Form";
    SubSectionType["DataVisualization"] = "DataVisualization";
    SubSectionType["XMLFragment"] = "XMLFragment";
    SubSectionType["Placeholder"] = "Placeholder";
    SubSectionType["Mixed"] = "Mixed";
    SubSectionType["EmbeddedComponent"] = "EmbeddedComponent";
  })(SubSectionType || (SubSectionType = {}));
  _exports.SubSectionType = SubSectionType;
  const visualizationTerms = ["com.sap.vocabularies.UI.v1.LineItem", "com.sap.vocabularies.UI.v1.Chart", "com.sap.vocabularies.UI.v1.PresentationVariant", "com.sap.vocabularies.UI.v1.SelectionPresentationVariant"];

  /**
   * Create subsections based on facet definition.
   *
   * @param facetCollection Collection of facets
   * @param converterContext The converter context
   * @param isHeaderSection True if header section is generated in this iteration
   * @returns The current subsections
   */
  function createSubSections(facetCollection, converterContext, isHeaderSection) {
    // First we determine which sub section we need to create
    const facetsToCreate = facetCollection.reduce((facetsToCreate, facetDefinition) => {
      switch (facetDefinition.$Type) {
        case "com.sap.vocabularies.UI.v1.ReferenceFacet":
          facetsToCreate.push(facetDefinition);
          break;
        case "com.sap.vocabularies.UI.v1.CollectionFacet":
          // TODO If the Collection Facet has a child of type Collection Facet we bring them up one level (Form + Table use case) ?
          // first case facet Collection is combination of collection and reference facet or not all facets are reference facets.
          if (facetDefinition.Facets.find(facetType => facetType.$Type === "com.sap.vocabularies.UI.v1.CollectionFacet")) {
            facetsToCreate.splice(facetsToCreate.length, 0, ...facetDefinition.Facets);
          } else {
            facetsToCreate.push(facetDefinition);
          }
          break;
        case "com.sap.vocabularies.UI.v1.ReferenceURLFacet":
          // Not supported
          break;
      }
      return facetsToCreate;
    }, []);

    // Then we create the actual subsections
    return facetsToCreate.map(facet => {
      var _Facets;
      return createSubSection(facet, facetsToCreate, converterContext, 0, !(facet !== null && facet !== void 0 && (_Facets = facet.Facets) !== null && _Facets !== void 0 && _Facets.length), isHeaderSection);
    });
  }

  /**
   * Creates subsections based on the definition of the custom header facet.
   *
   * @param converterContext The converter context
   * @returns The current subsections
   */
  _exports.createSubSections = createSubSections;
  function createCustomHeaderFacetSubSections(converterContext) {
    const customHeaderFacets = getHeaderFacetsFromManifest(converterContext.getManifestWrapper().getHeaderFacets());
    const aCustomHeaderFacets = [];
    Object.keys(customHeaderFacets).forEach(function (key) {
      aCustomHeaderFacets.push(customHeaderFacets[key]);
      return aCustomHeaderFacets;
    });
    const facetsToCreate = aCustomHeaderFacets.reduce((facetsToCreate, customHeaderFacet) => {
      if (customHeaderFacet.templateEdit) {
        facetsToCreate.push(customHeaderFacet);
      }
      return facetsToCreate;
    }, []);
    return facetsToCreate.map(customHeaderFacet => createCustomHeaderFacetSubSection(customHeaderFacet));
  }

  /**
   * Creates a subsection based on a custom header facet.
   *
   * @param customHeaderFacet A custom header facet
   * @returns A definition for a subsection
   */
  _exports.createCustomHeaderFacetSubSections = createCustomHeaderFacetSubSections;
  function createCustomHeaderFacetSubSection(customHeaderFacet) {
    const subSectionID = getCustomSubSectionID(customHeaderFacet.key);
    const subSection = {
      id: subSectionID,
      key: customHeaderFacet.key,
      title: customHeaderFacet.title,
      type: SubSectionType.XMLFragment,
      template: customHeaderFacet.templateEdit || "",
      visible: customHeaderFacet.visible,
      level: 1,
      sideContent: undefined,
      stashed: customHeaderFacet.stashed,
      flexSettings: customHeaderFacet.flexSettings,
      actions: {},
      objectPageLazyLoaderEnabled: false
    };
    return subSection;
  }

  // function isTargetForCompliant(annotationPath: AnnotationPath) {
  // 	return /.*com\.sap\.vocabularies\.UI\.v1\.(FieldGroup|Identification|DataPoint|StatusInfo).*/.test(annotationPath.value);
  // }
  const getSubSectionKey = (facetDefinition, fallback) => {
    var _facetDefinition$ID, _facetDefinition$Labe;
    return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
  };
  /**
   * Adds Form menu action to all form actions, removes duplicate actions and hidden actions.
   *
   * @param actions The actions involved
   * @param facetDefinition The definition for the facet
   * @param converterContext The converter context
   * @returns The form menu actions
   */
  function addFormMenuActions(actions, facetDefinition, converterContext) {
    const hiddenActions = getFormHiddenActions(facetDefinition, converterContext) || [],
      formActions = getFormActions(facetDefinition, converterContext),
      manifestActions = getActionsFromManifest(formActions, converterContext, actions, undefined, undefined, hiddenActions),
      actionOverwriteConfig = {
        enabled: OverrideType.overwrite,
        visible: OverrideType.overwrite,
        command: OverrideType.overwrite
      },
      formAllActions = insertCustomElements(actions, manifestActions.actions, actionOverwriteConfig);
    return {
      actions: formAllActions ? getVisibilityEnablementFormMenuActions(removeDuplicateActions(formAllActions)) : actions,
      commandActions: manifestActions.commandActions
    };
  }

  /**
   * Retrieves the action form a facet.
   *
   * @param facetDefinition
   * @param converterContext
   * @returns The current facet actions
   */
  function getFacetActions(facetDefinition, converterContext) {
    let actions = [];
    switch (facetDefinition.$Type) {
      case "com.sap.vocabularies.UI.v1.CollectionFacet":
        actions = facetDefinition.Facets.filter(subFacetDefinition => isReferenceFacet(subFacetDefinition)).reduce((actionReducer, referenceFacet) => createFormActionReducer(actionReducer, referenceFacet, converterContext), []);
        break;
      case "com.sap.vocabularies.UI.v1.ReferenceFacet":
        actions = createFormActionReducer([], facetDefinition, converterContext);
        break;
      default:
        break;
    }
    return addFormMenuActions(actions, facetDefinition, converterContext);
  }
  /**
   * Returns the button type based on @UI.Emphasized annotation.
   *
   * @param emphasized Emphasized annotation value.
   * @returns The button type or path based expression.
   */
  function getButtonType(emphasized) {
    // Emphasized is a boolean so if it's equal to true we show the button as Ghost, otherwise as Transparent
    const buttonTypeCondition = equal(getExpressionFromAnnotation(emphasized), true);
    return compileExpression(ifElse(buttonTypeCondition, ButtonType.Ghost, ButtonType.Transparent));
  }

  /**
   * Create a subsection based on FacetTypes.
   *
   * @param facetDefinition
   * @param facetsToCreate
   * @param converterContext
   * @param level
   * @param hasSingleContent
   * @param isHeaderSection
   * @returns A subsection definition
   */
  function createSubSection(facetDefinition, facetsToCreate, converterContext, level, hasSingleContent, isHeaderSection) {
    var _facetDefinition$anno, _facetDefinition$anno2, _presentation$visuali, _presentation$visuali2, _presentation$visuali3, _facetDefinition$anno3, _facetDefinition$anno4, _facetDefinition$anno5;
    const subSectionID = getSubSectionID(facetDefinition);
    const oHiddenAnnotation = (_facetDefinition$anno = facetDefinition.annotations) === null || _facetDefinition$anno === void 0 ? void 0 : (_facetDefinition$anno2 = _facetDefinition$anno.UI) === null || _facetDefinition$anno2 === void 0 ? void 0 : _facetDefinition$anno2.Hidden;
    const isVisibleExpression = not(equal(true, getExpressionFromAnnotation(oHiddenAnnotation)));
    const isVisible = compileExpression(isVisibleExpression);
    const isDynamicExpression = isVisible !== undefined && typeof isVisible === "string" && isVisible.indexOf("{=") === 0 && !isPathAnnotationExpression(oHiddenAnnotation);
    const isVisibleDynamicExpression = isVisible && isDynamicExpression ? isVisible.substring(isVisible.indexOf("{=") + 2, isVisible.lastIndexOf("}")) !== undefined : false;
    const title = compileExpression(getExpressionFromAnnotation(facetDefinition.Label));
    const subSection = {
      id: subSectionID,
      key: getSubSectionKey(facetDefinition, subSectionID),
      title: title,
      type: SubSectionType.Unknown,
      annotationPath: converterContext.getEntitySetBasedAnnotationPath(facetDefinition.fullyQualifiedName),
      visible: isVisible,
      isVisibilityDynamic: isDynamicExpression,
      level: level,
      sideContent: undefined,
      objectPageLazyLoaderEnabled: converterContext.getManifestWrapper().getEnableLazyLoading()
    };
    if (isHeaderSection) {
      subSection.stashed = getStashedSettingsForHeaderFacet(facetDefinition, facetDefinition, converterContext);
      subSection.flexSettings = {
        designtime: getDesignTimeMetadataSettingsForHeaderFacet(facetDefinition, facetDefinition, converterContext)
      };
    }
    let unsupportedText = "";
    level++;
    switch (facetDefinition.$Type) {
      case "com.sap.vocabularies.UI.v1.CollectionFacet":
        const facets = facetDefinition.Facets;

        // Filter for all facets of this subsection that are referring to an annotation describing a visualization (e.g. table or chart)
        const visualizationFacets = facets.map((facet, index) => ({
          index,
          facet
        })) // Remember the index assigned to each facet
        .filter(_ref => {
          var _Target, _Target$$target;
          let {
            facet
          } = _ref;
          return visualizationTerms.includes((_Target = facet.Target) === null || _Target === void 0 ? void 0 : (_Target$$target = _Target.$target) === null || _Target$$target === void 0 ? void 0 : _Target$$target.term);
        });

        // Filter out all visualization facets; "visualizationFacets" and "nonVisualizationFacets" are disjoint
        const nonVisualizationFacets = facets.filter(facet => !visualizationFacets.find(visualization => visualization.facet === facet));
        if (visualizationFacets.length > 0) {
          // CollectionFacets with visualizations must be handled separately as they cannot be included in forms
          const visualizationContent = [];
          const formContent = [];
          const mixedContent = [];

          // Create each visualization facet as if it was its own subsection (via recursion), and keep their relative ordering
          for (const {
            facet
          } of visualizationFacets) {
            visualizationContent.push(createSubSection(facet, [], converterContext, level, true, isHeaderSection));
          }
          if (nonVisualizationFacets.length > 0) {
            // This subsection includes visualizations and other content, so it is a "Mixed" subsection
            Log.warning(`Warning: CollectionFacet '${facetDefinition.ID}' includes a combination of either a chart or a table and other content. This can lead to rendering issues. Consider moving the chart or table into a separate CollectionFacet.`);
            const fakeFormFacet = {
              ...facetDefinition
            };
            fakeFormFacet.Facets = nonVisualizationFacets;
            // Create a joined form of all facets that are not referring to visualizations
            formContent.push(createSubSection(fakeFormFacet, [], converterContext, level, hasSingleContent, isHeaderSection));
          }

          // Merge the visualization content with the form content
          if (visualizationFacets.find(_ref2 => {
            let {
              index
            } = _ref2;
            return index === 0;
          })) {
            // If the first facet is a visualization, display the visualizations first
            mixedContent.push(...visualizationContent);
            mixedContent.push(...formContent);
          } else {
            // Otherwise, display the form first
            mixedContent.push(...formContent);
            mixedContent.push(...visualizationContent);
          }
          const mixedSubSection = {
            ...subSection,
            type: SubSectionType.Mixed,
            level: level,
            content: mixedContent
          };
          return mixedSubSection;
        } else {
          // This CollectionFacet only includes content that can be rendered in a merged form
          const facetActions = getFacetActions(facetDefinition, converterContext),
            formCollectionSubSection = {
              ...subSection,
              type: SubSectionType.Form,
              formDefinition: createFormDefinition(facetDefinition, isVisible, converterContext, facetActions.actions),
              level: level,
              actions: facetActions.actions.filter(action => action.facetName === undefined),
              commandActions: facetActions.commandActions
            };
          return formCollectionSubSection;
        }
      case "com.sap.vocabularies.UI.v1.ReferenceFacet":
        if (!facetDefinition.Target.$target) {
          unsupportedText = `Unable to find annotationPath ${facetDefinition.Target.value}`;
        } else {
          switch (facetDefinition.Target.$target.term) {
            case "com.sap.vocabularies.UI.v1.LineItem":
            case "com.sap.vocabularies.UI.v1.Chart":
            case "com.sap.vocabularies.UI.v1.PresentationVariant":
            case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
              const presentation = getDataVisualizationConfiguration(facetDefinition.Target.value, getCondensedTableLayoutCompliance(facetDefinition, facetsToCreate, converterContext), converterContext, undefined, isHeaderSection);
              const subSectionTitle = subSection.title ? subSection.title : "";
              const controlTitle = ((_presentation$visuali = presentation.visualizations[0]) === null || _presentation$visuali === void 0 ? void 0 : (_presentation$visuali2 = _presentation$visuali.annotation) === null || _presentation$visuali2 === void 0 ? void 0 : _presentation$visuali2.title) || ((_presentation$visuali3 = presentation.visualizations[0]) === null || _presentation$visuali3 === void 0 ? void 0 : _presentation$visuali3.title);
              const isPartOfPreview = ((_facetDefinition$anno3 = facetDefinition.annotations) === null || _facetDefinition$anno3 === void 0 ? void 0 : (_facetDefinition$anno4 = _facetDefinition$anno3.UI) === null || _facetDefinition$anno4 === void 0 ? void 0 : (_facetDefinition$anno5 = _facetDefinition$anno4.PartOfPreview) === null || _facetDefinition$anno5 === void 0 ? void 0 : _facetDefinition$anno5.valueOf()) !== false;
              const showTitle = getTitleVisibility(controlTitle ?? "", subSectionTitle, hasSingleContent);

              // Either calculate the title visibility statically or dynamically
              // Additionally to checking whether a title exists,
              // we also need to check that the facet title is not the same as the control (i.e. visualization) title;
              // this is done by including "showTitle" in the and expression
              const titleVisible = ifElse(isDynamicExpression, and(isVisibleDynamicExpression, not(equal(title, "undefined")), showTitle), and(isVisible !== undefined, title !== "undefined", title !== undefined, isVisibleExpression, showTitle));
              const dataVisualizationSubSection = {
                ...subSection,
                type: SubSectionType.DataVisualization,
                level: level,
                presentation: presentation,
                showTitle: compileExpression(showTitle),
                // This is used on the ObjectPageSubSection
                isPartOfPreview,
                titleVisible: compileExpression(titleVisible) // This is used to hide the actual Title control
              };

              return dataVisualizationSubSection;
            case "com.sap.vocabularies.UI.v1.FieldGroup":
            case "com.sap.vocabularies.UI.v1.Identification":
            case "com.sap.vocabularies.UI.v1.DataPoint":
            case "com.sap.vocabularies.UI.v1.StatusInfo":
            case "com.sap.vocabularies.Communication.v1.Contact":
              // All those element belong to a from facet
              const facetActions = getFacetActions(facetDefinition, converterContext),
                formElementSubSection = {
                  ...subSection,
                  type: SubSectionType.Form,
                  level: level,
                  formDefinition: createFormDefinition(facetDefinition, isVisible, converterContext, facetActions.actions),
                  actions: facetActions.actions.filter(action => action.facetName === undefined),
                  commandActions: facetActions.commandActions
                };
              return formElementSubSection;
            default:
              unsupportedText = `For ${facetDefinition.Target.$target.term} Fragment`;
              break;
          }
        }
        break;
      case "com.sap.vocabularies.UI.v1.ReferenceURLFacet":
        unsupportedText = "For Reference URL Facet";
        break;
      default:
        break;
    }
    // If we reach here we ended up with an unsupported SubSection type
    const unsupportedSubSection = {
      ...subSection,
      text: unsupportedText
    };
    return unsupportedSubSection;
  }

  /**
   * Checks whether to hide or show subsection title.
   *
   * @param controlTitle
   * @param subSectionTitle
   * @param hasSingleContent
   * @returns Boolean value or expression for showTitle
   */
  _exports.createSubSection = createSubSection;
  function getTitleVisibility(controlTitle, subSectionTitle, hasSingleContent) {
    // visible shall be true if there are multiple content or if the control and subsection title are different
    return or(not(hasSingleContent), notEqual(resolveBindingString(controlTitle), resolveBindingString(subSectionTitle)));
  }
  _exports.getTitleVisibility = getTitleVisibility;
  function createFormActionReducer(actions, facetDefinition, converterContext) {
    const referenceTarget = facetDefinition.Target.$target;
    const targetValue = facetDefinition.Target.value;
    let manifestActions = {};
    let dataFieldCollection = [];
    let navigationPropertyPath;
    [navigationPropertyPath] = targetValue.split("@");
    if (navigationPropertyPath.length > 0) {
      if (navigationPropertyPath.lastIndexOf("/") === navigationPropertyPath.length - 1) {
        navigationPropertyPath = navigationPropertyPath.substr(0, navigationPropertyPath.length - 1);
      }
    } else {
      navigationPropertyPath = undefined;
    }
    if (referenceTarget) {
      switch (referenceTarget.term) {
        case "com.sap.vocabularies.UI.v1.FieldGroup":
          dataFieldCollection = referenceTarget.Data;
          manifestActions = getActionsFromManifest(converterContext.getManifestControlConfiguration(referenceTarget).actions, converterContext, undefined, undefined, undefined, undefined, facetDefinition.fullyQualifiedName).actions;
          break;
        case "com.sap.vocabularies.UI.v1.Identification":
        case "com.sap.vocabularies.UI.v1.StatusInfo":
          if (referenceTarget.qualifier) {
            dataFieldCollection = referenceTarget;
          }
          break;
        default:
          break;
      }
    }
    actions = dataFieldCollection.reduce((actionReducer, dataField) => {
      var _dataField$RequiresCo, _dataField$Inline, _dataField$Determinin, _dataField$Label, _dataField$Navigation, _dataField$annotation, _dataField$annotation2, _dataField$annotation3, _dataField$annotation4, _dataField$annotation5, _dataField$Label2, _dataField$annotation6, _dataField$annotation7, _dataField$annotation8, _dataField$annotation9, _dataField$annotation10;
      switch (dataField.$Type) {
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
          if (((_dataField$RequiresCo = dataField.RequiresContext) === null || _dataField$RequiresCo === void 0 ? void 0 : _dataField$RequiresCo.valueOf()) === true) {
            converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.REQUIRESCONTEXT);
          }
          if (((_dataField$Inline = dataField.Inline) === null || _dataField$Inline === void 0 ? void 0 : _dataField$Inline.valueOf()) === true) {
            converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.INLINE);
          }
          if (((_dataField$Determinin = dataField.Determining) === null || _dataField$Determinin === void 0 ? void 0 : _dataField$Determinin.valueOf()) === true) {
            converterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Low, IssueType.MALFORMED_DATAFIELD_FOR_IBN.DETERMINING);
          }
          const mNavigationParameters = {};
          if (dataField.Mapping) {
            mNavigationParameters.semanticObjectMapping = getSemanticObjectMapping(dataField.Mapping);
          }
          actionReducer.push({
            type: ActionType.DataFieldForIntentBasedNavigation,
            id: getFormID(facetDefinition, dataField),
            key: KeyHelper.generateKeyFromDataField(dataField),
            text: (_dataField$Label = dataField.Label) === null || _dataField$Label === void 0 ? void 0 : _dataField$Label.toString(),
            annotationPath: "",
            enabled: dataField.NavigationAvailable !== undefined ? compileExpression(equal(getExpressionFromAnnotation((_dataField$Navigation = dataField.NavigationAvailable) === null || _dataField$Navigation === void 0 ? void 0 : _dataField$Navigation.valueOf()), true)) : "true",
            visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : (_dataField$annotation3 = _dataField$annotation2.Hidden) === null || _dataField$annotation3 === void 0 ? void 0 : _dataField$annotation3.valueOf()), true))),
            buttonType: getButtonType((_dataField$annotation4 = dataField.annotations) === null || _dataField$annotation4 === void 0 ? void 0 : (_dataField$annotation5 = _dataField$annotation4.UI) === null || _dataField$annotation5 === void 0 ? void 0 : _dataField$annotation5.Emphasized),
            press: compileExpression(fn("._intentBasedNavigation.navigate", [getExpressionFromAnnotation(dataField.SemanticObject), getExpressionFromAnnotation(dataField.Action), mNavigationParameters])),
            customData: compileExpression({
              semanticObject: getExpressionFromAnnotation(dataField.SemanticObject),
              action: getExpressionFromAnnotation(dataField.Action)
            })
          });
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
          const formManifestActionsConfiguration = converterContext.getManifestControlConfiguration(referenceTarget).actions;
          const key = KeyHelper.generateKeyFromDataField(dataField);
          actionReducer.push({
            type: ActionType.DataFieldForAction,
            id: getFormID(facetDefinition, dataField),
            key: key,
            text: (_dataField$Label2 = dataField.Label) === null || _dataField$Label2 === void 0 ? void 0 : _dataField$Label2.toString(),
            annotationPath: "",
            enabled: getEnabledForAnnotationAction(converterContext, dataField.ActionTarget),
            binding: navigationPropertyPath ? `{ 'path' : '${navigationPropertyPath}'}` : undefined,
            visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation6 = dataField.annotations) === null || _dataField$annotation6 === void 0 ? void 0 : (_dataField$annotation7 = _dataField$annotation6.UI) === null || _dataField$annotation7 === void 0 ? void 0 : (_dataField$annotation8 = _dataField$annotation7.Hidden) === null || _dataField$annotation8 === void 0 ? void 0 : _dataField$annotation8.valueOf()), true))),
            requiresDialog: isActionWithDialog(dataField),
            buttonType: getButtonType((_dataField$annotation9 = dataField.annotations) === null || _dataField$annotation9 === void 0 ? void 0 : (_dataField$annotation10 = _dataField$annotation9.UI) === null || _dataField$annotation10 === void 0 ? void 0 : _dataField$annotation10.Emphasized),
            press: compileExpression(fn("invokeAction", [dataField.Action, {
              contexts: fn("getBindingContext", [], pathInModel("", "$source")),
              invocationGrouping: dataField.InvocationGrouping === "UI.OperationGroupingType/ChangeSet" ? "ChangeSet" : "Isolated",
              label: getExpressionFromAnnotation(dataField.Label),
              model: fn("getModel", [], pathInModel("/", "$source")),
              isNavigable: isActionNavigable(formManifestActionsConfiguration && formManifestActionsConfiguration[key])
            }], ref(".editFlow"))),
            facetName: dataField.Inline ? facetDefinition.fullyQualifiedName : undefined
          });
          break;
        default:
          break;
      }
      return actionReducer;
    }, actions);
    // Overwriting of actions happens in addFormMenuActions
    return insertCustomElements(actions, manifestActions);
  }
  function isDialog(actionDefinition) {
    if (actionDefinition) {
      var _actionDefinition$ann, _actionDefinition$ann2;
      const bCritical = (_actionDefinition$ann = actionDefinition.annotations) === null || _actionDefinition$ann === void 0 ? void 0 : (_actionDefinition$ann2 = _actionDefinition$ann.Common) === null || _actionDefinition$ann2 === void 0 ? void 0 : _actionDefinition$ann2.IsActionCritical;
      if (actionDefinition.parameters.length > 1 || bCritical) {
        return "Dialog";
      } else {
        return "None";
      }
    } else {
      return "None";
    }
  }
  _exports.isDialog = isDialog;
  function createCustomSubSections(manifestSubSections, converterContext) {
    const subSections = {};
    Object.keys(manifestSubSections).forEach(subSectionKey => subSections[subSectionKey] = createCustomSubSection(manifestSubSections[subSectionKey], subSectionKey, converterContext));
    return subSections;
  }
  _exports.createCustomSubSections = createCustomSubSections;
  function createCustomSubSection(manifestSubSection, subSectionKey, converterContext) {
    const sideContent = manifestSubSection.sideContent ? {
      template: manifestSubSection.sideContent.template,
      id: getSideContentID(subSectionKey),
      visible: false,
      equalSplit: manifestSubSection.sideContent.equalSplit
    } : undefined;
    let position = manifestSubSection.position;
    if (!position) {
      position = {
        placement: Placement.After
      };
    }
    const isVisible = manifestSubSection.visible !== undefined ? manifestSubSection.visible : true;
    const isDynamicExpression = isVisible && typeof isVisible === "string" && isVisible.indexOf("{=") === 0;
    const manifestActions = getActionsFromManifest(manifestSubSection.actions, converterContext);
    const subSectionDefinition = {
      type: SubSectionType.Unknown,
      id: manifestSubSection.id || getCustomSubSectionID(subSectionKey),
      actions: manifestActions.actions,
      key: subSectionKey,
      title: manifestSubSection.title,
      level: 1,
      position: position,
      visible: manifestSubSection.visible !== undefined ? manifestSubSection.visible : "true",
      sideContent: sideContent,
      isVisibilityDynamic: isDynamicExpression,
      objectPageLazyLoaderEnabled: manifestSubSection.enableLazyLoading ?? false,
      componentName: "",
      settings: ""
    };
    if (manifestSubSection.template || manifestSubSection.name) {
      subSectionDefinition.type = SubSectionType.XMLFragment;
      subSectionDefinition.template = manifestSubSection.template || manifestSubSection.name || "";
    } else if (manifestSubSection.embeddedComponent !== undefined) {
      subSectionDefinition.type = SubSectionType.EmbeddedComponent;
      subSectionDefinition.componentName = manifestSubSection.embeddedComponent.name;
      if (manifestSubSection.embeddedComponent.settings !== undefined) {
        subSectionDefinition.settings = JSON.stringify(manifestSubSection.embeddedComponent.settings);
      }
    } else {
      subSectionDefinition.type = SubSectionType.Placeholder;
    }
    return subSectionDefinition;
  }

  /**
   * Evaluate if the condensed mode can be applied on the table.
   *
   * @param currentFacet
   * @param facetsToCreateInSection
   * @param converterContext
   * @returns `true` for compliant, false otherwise
   */
  _exports.createCustomSubSection = createCustomSubSection;
  function getCondensedTableLayoutCompliance(currentFacet, facetsToCreateInSection, converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    if (manifestWrapper.useIconTabBar()) {
      // If the OP use the tab based we check if the facets that will be created for this section are all non visible
      return hasNoOtherVisibleTableInTargets(currentFacet, facetsToCreateInSection);
    } else {
      var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3, _entityType$annotatio4, _entityType$annotatio5, _entityType$annotatio6;
      const entityType = converterContext.getEntityType();
      if ((_entityType$annotatio = entityType.annotations) !== null && _entityType$annotatio !== void 0 && (_entityType$annotatio2 = _entityType$annotatio.UI) !== null && _entityType$annotatio2 !== void 0 && (_entityType$annotatio3 = _entityType$annotatio2.Facets) !== null && _entityType$annotatio3 !== void 0 && _entityType$annotatio3.length && ((_entityType$annotatio4 = entityType.annotations) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.Facets) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.length) > 1) {
        return hasNoOtherVisibleTableInTargets(currentFacet, facetsToCreateInSection);
      } else {
        return true;
      }
    }
  }
  function hasNoOtherVisibleTableInTargets(currentFacet, facetsToCreateInSection) {
    return facetsToCreateInSection.every(function (subFacet) {
      if (subFacet !== currentFacet) {
        if (subFacet.$Type === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
          var _refFacet$Target, _refFacet$Target$$tar, _refFacet$Target2, _refFacet$Target2$$ta, _refFacet$Target$$tar2;
          const refFacet = subFacet;
          if (((_refFacet$Target = refFacet.Target) === null || _refFacet$Target === void 0 ? void 0 : (_refFacet$Target$$tar = _refFacet$Target.$target) === null || _refFacet$Target$$tar === void 0 ? void 0 : _refFacet$Target$$tar.term) === "com.sap.vocabularies.UI.v1.LineItem" || ((_refFacet$Target2 = refFacet.Target) === null || _refFacet$Target2 === void 0 ? void 0 : (_refFacet$Target2$$ta = _refFacet$Target2.$target) === null || _refFacet$Target2$$ta === void 0 ? void 0 : _refFacet$Target2$$ta.term) === "com.sap.vocabularies.UI.v1.PresentationVariant" || ((_refFacet$Target$$tar2 = refFacet.Target.$target) === null || _refFacet$Target$$tar2 === void 0 ? void 0 : _refFacet$Target$$tar2.term) === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
            var _refFacet$annotations, _refFacet$annotations2, _refFacet$annotations3, _refFacet$annotations4;
            return ((_refFacet$annotations = refFacet.annotations) === null || _refFacet$annotations === void 0 ? void 0 : (_refFacet$annotations2 = _refFacet$annotations.UI) === null || _refFacet$annotations2 === void 0 ? void 0 : _refFacet$annotations2.Hidden) !== undefined ? (_refFacet$annotations3 = refFacet.annotations) === null || _refFacet$annotations3 === void 0 ? void 0 : (_refFacet$annotations4 = _refFacet$annotations3.UI) === null || _refFacet$annotations4 === void 0 ? void 0 : _refFacet$annotations4.Hidden : false;
          }
          return true;
        } else {
          const subCollectionFacet = subFacet;
          return subCollectionFacet.Facets.every(function (facet) {
            var _subRefFacet$Target, _subRefFacet$Target$$, _subRefFacet$Target2, _subRefFacet$Target2$, _subRefFacet$Target3, _subRefFacet$Target3$;
            const subRefFacet = facet;
            if (((_subRefFacet$Target = subRefFacet.Target) === null || _subRefFacet$Target === void 0 ? void 0 : (_subRefFacet$Target$$ = _subRefFacet$Target.$target) === null || _subRefFacet$Target$$ === void 0 ? void 0 : _subRefFacet$Target$$.term) === "com.sap.vocabularies.UI.v1.LineItem" || ((_subRefFacet$Target2 = subRefFacet.Target) === null || _subRefFacet$Target2 === void 0 ? void 0 : (_subRefFacet$Target2$ = _subRefFacet$Target2.$target) === null || _subRefFacet$Target2$ === void 0 ? void 0 : _subRefFacet$Target2$.term) === "com.sap.vocabularies.UI.v1.PresentationVariant" || ((_subRefFacet$Target3 = subRefFacet.Target) === null || _subRefFacet$Target3 === void 0 ? void 0 : (_subRefFacet$Target3$ = _subRefFacet$Target3.$target) === null || _subRefFacet$Target3$ === void 0 ? void 0 : _subRefFacet$Target3$.term) === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
              var _subRefFacet$annotati, _subRefFacet$annotati2, _subRefFacet$annotati3, _subRefFacet$annotati4;
              return ((_subRefFacet$annotati = subRefFacet.annotations) === null || _subRefFacet$annotati === void 0 ? void 0 : (_subRefFacet$annotati2 = _subRefFacet$annotati.UI) === null || _subRefFacet$annotati2 === void 0 ? void 0 : _subRefFacet$annotati2.Hidden) !== undefined ? (_subRefFacet$annotati3 = subRefFacet.annotations) === null || _subRefFacet$annotati3 === void 0 ? void 0 : (_subRefFacet$annotati4 = _subRefFacet$annotati3.UI) === null || _subRefFacet$annotati4 === void 0 ? void 0 : _subRefFacet$annotati4.Hidden : false;
            }
            return true;
          });
        }
      }
      return true;
    });
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/controls/ObjectPage/SubSection", ["sap/base/Log","sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/controls/ObjectPage/HeaderFacet","sap/fe/core/converters/helpers/IssueManager","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","../../annotations/DataField","../../helpers/ConfigurableObject","../../helpers/ID","../../ManifestSettings","../../objectPage/FormMenuActions","../Common/DataVisualization","../Common/Form"],function(e,t,n,a,i,o,s,r,l,c,d,u,v,f){"use strict";var m={};var p=f.isReferenceFacet;var g=f.createFormDefinition;var b=v.getDataVisualizationConfiguration;var I=u.getVisibilityEnablementFormMenuActions;var F=u.getFormHiddenActions;var h=u.getFormActions;var y=d.ActionType;var U=c.getSubSectionID;var C=c.getSideContentID;var D=c.getFormID;var S=c.getCustomSubSectionID;var A=l.Placement;var T=l.OverrideType;var L=l.insertCustomElements;var E=r.isActionWithDialog;var O=s.isPathAnnotationExpression;var M=o.resolveBindingString;var k=o.ref;var P=o.pathInModel;var N=o.or;var $=o.notEqual;var x=o.not;var w=o.ifElse;var R=o.getExpressionFromAnnotation;var V=o.fn;var H=o.equal;var z=o.compileExpression;var j=o.and;var B=i.KeyHelper;var _=a.IssueType;var G=a.IssueSeverity;var q=a.IssueCategory;var W=n.getStashedSettingsForHeaderFacet;var X=n.getHeaderFacetsFromManifest;var K=n.getDesignTimeMetadataSettingsForHeaderFacet;var Q=t.removeDuplicateActions;var J=t.isActionNavigable;var Y=t.getSemanticObjectMapping;var Z=t.getEnabledForAnnotationAction;var ee=t.getActionsFromManifest;var te=t.ButtonType;let ne;(function(e){e["Unknown"]="Unknown";e["Form"]="Form";e["DataVisualization"]="DataVisualization";e["XMLFragment"]="XMLFragment";e["Placeholder"]="Placeholder";e["Mixed"]="Mixed";e["EmbeddedComponent"]="EmbeddedComponent"})(ne||(ne={}));m.SubSectionType=ne;const ae=["com.sap.vocabularies.UI.v1.LineItem","com.sap.vocabularies.UI.v1.Chart","com.sap.vocabularies.UI.v1.PresentationVariant","com.sap.vocabularies.UI.v1.SelectionPresentationVariant"];function ie(e,t,n){const a=e.reduce((e,t)=>{switch(t.$Type){case"com.sap.vocabularies.UI.v1.ReferenceFacet":e.push(t);break;case"com.sap.vocabularies.UI.v1.CollectionFacet":if(t.Facets.find(e=>e.$Type==="com.sap.vocabularies.UI.v1.CollectionFacet")){e.splice(e.length,0,...t.Facets)}else{e.push(t)}break;case"com.sap.vocabularies.UI.v1.ReferenceURLFacet":break}return e},[]);return a.map(e=>{var i;return ue(e,a,t,0,!(e!==null&&e!==void 0&&(i=e.Facets)!==null&&i!==void 0&&i.length),n)})}m.createSubSections=ie;function oe(e){const t=X(e.getManifestWrapper().getHeaderFacets());const n=[];Object.keys(t).forEach(function(e){n.push(t[e]);return n});const a=n.reduce((e,t)=>{if(t.templateEdit){e.push(t)}return e},[]);return a.map(e=>se(e))}m.createCustomHeaderFacetSubSections=oe;function se(e){const t=S(e.key);const n={id:t,key:e.key,title:e.title,type:ne.XMLFragment,template:e.templateEdit||"",visible:e.visible,level:1,sideContent:undefined,stashed:e.stashed,flexSettings:e.flexSettings,actions:{},objectPageLazyLoaderEnabled:false};return n}const re=(e,t)=>{var n,a;return((n=e.ID)===null||n===void 0?void 0:n.toString())||((a=e.Label)===null||a===void 0?void 0:a.toString())||t};function le(e,t,n){const a=F(t,n)||[],i=h(t,n),o=ee(i,n,e,undefined,undefined,a),s={enabled:T.overwrite,visible:T.overwrite,command:T.overwrite},r=L(e,o.actions,s);return{actions:r?I(Q(r)):e,commandActions:o.commandActions}}function ce(e,t){let n=[];switch(e.$Type){case"com.sap.vocabularies.UI.v1.CollectionFacet":n=e.Facets.filter(e=>p(e)).reduce((e,n)=>fe(e,n,t),[]);break;case"com.sap.vocabularies.UI.v1.ReferenceFacet":n=fe([],e,t);break;default:break}return le(n,e,t)}function de(e){const t=H(R(e),true);return z(w(t,te.Ghost,te.Transparent))}function ue(t,n,a,i,o,s){var r,l,c,d,u,v,f,m;const p=U(t);const I=(r=t.annotations)===null||r===void 0?void 0:(l=r.UI)===null||l===void 0?void 0:l.Hidden;const F=x(H(true,R(I)));const h=z(F);const y=h!==undefined&&typeof h==="string"&&h.indexOf("{=")===0&&!O(I);const C=h&&y?h.substring(h.indexOf("{=")+2,h.lastIndexOf("}"))!==undefined:false;const D=z(R(t.Label));const S={id:p,key:re(t,p),title:D,type:ne.Unknown,annotationPath:a.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),visible:h,isVisibilityDynamic:y,level:i,sideContent:undefined,objectPageLazyLoaderEnabled:a.getManifestWrapper().getEnableLazyLoading()};if(s){S.stashed=W(t,t,a);S.flexSettings={designtime:K(t,t,a)}}let A="";i++;switch(t.$Type){case"com.sap.vocabularies.UI.v1.CollectionFacet":const r=t.Facets;const l=r.map((e,t)=>({index:t,facet:e})).filter(e=>{var t,n;let{facet:a}=e;return ae.includes((t=a.Target)===null||t===void 0?void 0:(n=t.$target)===null||n===void 0?void 0:n.term)});const p=r.filter(e=>!l.find(t=>t.facet===e));if(l.length>0){const n=[];const r=[];const c=[];for(const{facet:e}of l){n.push(ue(e,[],a,i,true,s))}if(p.length>0){e.warning(`Warning: CollectionFacet '${t.ID}' includes a combination of either a chart or a table and other content. This can lead to rendering issues. Consider moving the chart or table into a separate CollectionFacet.`);const n={...t};n.Facets=p;r.push(ue(n,[],a,i,o,s))}if(l.find(e=>{let{index:t}=e;return t===0})){c.push(...n);c.push(...r)}else{c.push(...r);c.push(...n)}const d={...S,type:ne.Mixed,level:i,content:c};return d}else{const e=ce(t,a),n={...S,type:ne.Form,formDefinition:g(t,h,a,e.actions),level:i,actions:e.actions.filter(e=>e.facetName===undefined),commandActions:e.commandActions};return n}case"com.sap.vocabularies.UI.v1.ReferenceFacet":if(!t.Target.$target){A=`Unable to find annotationPath ${t.Target.value}`}else{switch(t.Target.$target.term){case"com.sap.vocabularies.UI.v1.LineItem":case"com.sap.vocabularies.UI.v1.Chart":case"com.sap.vocabularies.UI.v1.PresentationVariant":case"com.sap.vocabularies.UI.v1.SelectionPresentationVariant":const e=b(t.Target.value,be(t,n,a),a,undefined,s);const r=S.title?S.title:"";const l=((c=e.visualizations[0])===null||c===void 0?void 0:(d=c.annotation)===null||d===void 0?void 0:d.title)||((u=e.visualizations[0])===null||u===void 0?void 0:u.title);const p=((v=t.annotations)===null||v===void 0?void 0:(f=v.UI)===null||f===void 0?void 0:(m=f.PartOfPreview)===null||m===void 0?void 0:m.valueOf())!==false;const I=ve(l??"",r,o);const U=w(y,j(C,x(H(D,"undefined")),I),j(h!==undefined,D!=="undefined",D!==undefined,F,I));const T={...S,type:ne.DataVisualization,level:i,presentation:e,showTitle:z(I),isPartOfPreview:p,titleVisible:z(U)};return T;case"com.sap.vocabularies.UI.v1.FieldGroup":case"com.sap.vocabularies.UI.v1.Identification":case"com.sap.vocabularies.UI.v1.DataPoint":case"com.sap.vocabularies.UI.v1.StatusInfo":case"com.sap.vocabularies.Communication.v1.Contact":const L=ce(t,a),E={...S,type:ne.Form,level:i,formDefinition:g(t,h,a,L.actions),actions:L.actions.filter(e=>e.facetName===undefined),commandActions:L.commandActions};return E;default:A=`For ${t.Target.$target.term} Fragment`;break}}break;case"com.sap.vocabularies.UI.v1.ReferenceURLFacet":A="For Reference URL Facet";break;default:break}const T={...S,text:A};return T}m.createSubSection=ue;function ve(e,t,n){return N(x(n),$(M(e),M(t)))}m.getTitleVisibility=ve;function fe(e,t,n){const a=t.Target.$target;const i=t.Target.value;let o={};let s=[];let r;[r]=i.split("@");if(r.length>0){if(r.lastIndexOf("/")===r.length-1){r=r.substr(0,r.length-1)}}else{r=undefined}if(a){switch(a.term){case"com.sap.vocabularies.UI.v1.FieldGroup":s=a.Data;o=ee(n.getManifestControlConfiguration(a).actions,n,undefined,undefined,undefined,undefined,t.fullyQualifiedName).actions;break;case"com.sap.vocabularies.UI.v1.Identification":case"com.sap.vocabularies.UI.v1.StatusInfo":if(a.qualifier){s=a}break;default:break}}e=s.reduce((e,i)=>{var o,s,l,c,d,u,v,f,m,p,g,b,I,F,h,U;switch(i.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":if(((o=i.RequiresContext)===null||o===void 0?void 0:o.valueOf())===true){n.getDiagnostics().addIssue(q.Annotation,G.Low,_.MALFORMED_DATAFIELD_FOR_IBN.REQUIRESCONTEXT)}if(((s=i.Inline)===null||s===void 0?void 0:s.valueOf())===true){n.getDiagnostics().addIssue(q.Annotation,G.Low,_.MALFORMED_DATAFIELD_FOR_IBN.INLINE)}if(((l=i.Determining)===null||l===void 0?void 0:l.valueOf())===true){n.getDiagnostics().addIssue(q.Annotation,G.Low,_.MALFORMED_DATAFIELD_FOR_IBN.DETERMINING)}const C={};if(i.Mapping){C.semanticObjectMapping=Y(i.Mapping)}e.push({type:y.DataFieldForIntentBasedNavigation,id:D(t,i),key:B.generateKeyFromDataField(i),text:(c=i.Label)===null||c===void 0?void 0:c.toString(),annotationPath:"",enabled:i.NavigationAvailable!==undefined?z(H(R((d=i.NavigationAvailable)===null||d===void 0?void 0:d.valueOf()),true)):"true",visible:z(x(H(R((u=i.annotations)===null||u===void 0?void 0:(v=u.UI)===null||v===void 0?void 0:(f=v.Hidden)===null||f===void 0?void 0:f.valueOf()),true))),buttonType:de((m=i.annotations)===null||m===void 0?void 0:(p=m.UI)===null||p===void 0?void 0:p.Emphasized),press:z(V("._intentBasedNavigation.navigate",[R(i.SemanticObject),R(i.Action),C])),customData:z({semanticObject:R(i.SemanticObject),action:R(i.Action)})});break;case"com.sap.vocabularies.UI.v1.DataFieldForAction":const S=n.getManifestControlConfiguration(a).actions;const A=B.generateKeyFromDataField(i);e.push({type:y.DataFieldForAction,id:D(t,i),key:A,text:(g=i.Label)===null||g===void 0?void 0:g.toString(),annotationPath:"",enabled:Z(n,i.ActionTarget),binding:r?`{ 'path' : '${r}'}`:undefined,visible:z(x(H(R((b=i.annotations)===null||b===void 0?void 0:(I=b.UI)===null||I===void 0?void 0:(F=I.Hidden)===null||F===void 0?void 0:F.valueOf()),true))),requiresDialog:E(i),buttonType:de((h=i.annotations)===null||h===void 0?void 0:(U=h.UI)===null||U===void 0?void 0:U.Emphasized),press:z(V("invokeAction",[i.Action,{contexts:V("getBindingContext",[],P("","$source")),invocationGrouping:i.InvocationGrouping==="UI.OperationGroupingType/ChangeSet"?"ChangeSet":"Isolated",label:R(i.Label),model:V("getModel",[],P("/","$source")),isNavigable:J(S&&S[A])}],k(".editFlow"))),facetName:i.Inline?t.fullyQualifiedName:undefined});break;default:break}return e},e);return L(e,o)}function me(e){if(e){var t,n;const a=(t=e.annotations)===null||t===void 0?void 0:(n=t.Common)===null||n===void 0?void 0:n.IsActionCritical;if(e.parameters.length>1||a){return"Dialog"}else{return"None"}}else{return"None"}}m.isDialog=me;function pe(e,t){const n={};Object.keys(e).forEach(a=>n[a]=ge(e[a],a,t));return n}m.createCustomSubSections=pe;function ge(e,t,n){const a=e.sideContent?{template:e.sideContent.template,id:C(t),visible:false,equalSplit:e.sideContent.equalSplit}:undefined;let i=e.position;if(!i){i={placement:A.After}}const o=e.visible!==undefined?e.visible:true;const s=o&&typeof o==="string"&&o.indexOf("{=")===0;const r=ee(e.actions,n);const l={type:ne.Unknown,id:e.id||S(t),actions:r.actions,key:t,title:e.title,level:1,position:i,visible:e.visible!==undefined?e.visible:"true",sideContent:a,isVisibilityDynamic:s,objectPageLazyLoaderEnabled:e.enableLazyLoading??false,componentName:"",settings:""};if(e.template||e.name){l.type=ne.XMLFragment;l.template=e.template||e.name||""}else if(e.embeddedComponent!==undefined){l.type=ne.EmbeddedComponent;l.componentName=e.embeddedComponent.name;if(e.embeddedComponent.settings!==undefined){l.settings=JSON.stringify(e.embeddedComponent.settings)}}else{l.type=ne.Placeholder}return l}m.createCustomSubSection=ge;function be(e,t,n){const a=n.getManifestWrapper();if(a.useIconTabBar()){return Ie(e,t)}else{var i,o,s,r,l,c;const a=n.getEntityType();if((i=a.annotations)!==null&&i!==void 0&&(o=i.UI)!==null&&o!==void 0&&(s=o.Facets)!==null&&s!==void 0&&s.length&&((r=a.annotations)===null||r===void 0?void 0:(l=r.UI)===null||l===void 0?void 0:(c=l.Facets)===null||c===void 0?void 0:c.length)>1){return Ie(e,t)}else{return true}}}function Ie(e,t){return t.every(function(t){if(t!==e){if(t.$Type==="com.sap.vocabularies.UI.v1.ReferenceFacet"){var n,a,i,o,s;const e=t;if(((n=e.Target)===null||n===void 0?void 0:(a=n.$target)===null||a===void 0?void 0:a.term)==="com.sap.vocabularies.UI.v1.LineItem"||((i=e.Target)===null||i===void 0?void 0:(o=i.$target)===null||o===void 0?void 0:o.term)==="com.sap.vocabularies.UI.v1.PresentationVariant"||((s=e.Target.$target)===null||s===void 0?void 0:s.term)==="com.sap.vocabularies.UI.v1.SelectionPresentationVariant"){var r,l,c,d;return((r=e.annotations)===null||r===void 0?void 0:(l=r.UI)===null||l===void 0?void 0:l.Hidden)!==undefined?(c=e.annotations)===null||c===void 0?void 0:(d=c.UI)===null||d===void 0?void 0:d.Hidden:false}return true}else{const e=t;return e.Facets.every(function(e){var t,n,a,i,o,s;const r=e;if(((t=r.Target)===null||t===void 0?void 0:(n=t.$target)===null||n===void 0?void 0:n.term)==="com.sap.vocabularies.UI.v1.LineItem"||((a=r.Target)===null||a===void 0?void 0:(i=a.$target)===null||i===void 0?void 0:i.term)==="com.sap.vocabularies.UI.v1.PresentationVariant"||((o=r.Target)===null||o===void 0?void 0:(s=o.$target)===null||s===void 0?void 0:s.term)==="com.sap.vocabularies.UI.v1.SelectionPresentationVariant"){var l,c,d,u;return((l=r.annotations)===null||l===void 0?void 0:(c=l.UI)===null||c===void 0?void 0:c.Hidden)!==undefined?(d=r.annotations)===null||d===void 0?void 0:(u=d.UI)===null||u===void 0?void 0:u.Hidden:false}return true})}}return true})}return m},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/Aggregation-dbg", ["sap/fe/core/helpers/TypeGuards"], function (TypeGuards) {
  "use strict";

  var _exports = {};
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isEntityType = TypeGuards.isEntityType;
  var isEntitySet = TypeGuards.isEntitySet;
  /**
   * helper class for Aggregation annotations.
   */
  let AggregationHelper = /*#__PURE__*/function () {
    /**
     * Creates a helper for a specific entity type and a converter context.
     *
     * @param entityType The EntityType
     * @param converterContext The ConverterContext
     * @param [considerOldAnnotations] The flag to indicate whether or not to consider old annotations
     */
    function AggregationHelper(entityType, converterContext) {
      var _this$oTargetAggregat;
      let considerOldAnnotations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      //considerOldAnnotations will be true and sent only for chart
      this._entityType = entityType;
      this._converterContext = converterContext;
      this._oAggregationAnnotationTarget = this._determineAggregationAnnotationTarget();
      if (isNavigationProperty(this._oAggregationAnnotationTarget) || isEntityType(this._oAggregationAnnotationTarget) || isEntitySet(this._oAggregationAnnotationTarget)) {
        this.oTargetAggregationAnnotations = this._oAggregationAnnotationTarget.annotations.Aggregation;
      }
      this._bApplySupported = (_this$oTargetAggregat = this.oTargetAggregationAnnotations) !== null && _this$oTargetAggregat !== void 0 && _this$oTargetAggregat.ApplySupported ? true : false;
      if (this._bApplySupported) {
        var _this$oTargetAggregat2, _this$oTargetAggregat3, _this$oTargetAggregat4, _this$oTargetAggregat5;
        this._aGroupableProperties = (_this$oTargetAggregat2 = this.oTargetAggregationAnnotations) === null || _this$oTargetAggregat2 === void 0 ? void 0 : (_this$oTargetAggregat3 = _this$oTargetAggregat2.ApplySupported) === null || _this$oTargetAggregat3 === void 0 ? void 0 : _this$oTargetAggregat3.GroupableProperties;
        this._aAggregatableProperties = (_this$oTargetAggregat4 = this.oTargetAggregationAnnotations) === null || _this$oTargetAggregat4 === void 0 ? void 0 : (_this$oTargetAggregat5 = _this$oTargetAggregat4.ApplySupported) === null || _this$oTargetAggregat5 === void 0 ? void 0 : _this$oTargetAggregat5.AggregatableProperties;
        this.oContainerAggregationAnnotation = converterContext.getEntityContainer().annotations.Aggregation;
      }
      if (!this._aAggregatableProperties && considerOldAnnotations) {
        const entityProperties = this._getEntityProperties();
        this._aAggregatableProperties = entityProperties === null || entityProperties === void 0 ? void 0 : entityProperties.filter(property => {
          var _property$annotations, _property$annotations2;
          return (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Aggregation) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.Aggregatable;
        });
      }
    }

    /**
     * Determines the most appropriate target for the aggregation annotations.
     *
     * @returns  EntityType, EntitySet or NavigationProperty where aggregation annotations should be read from.
     */
    _exports.AggregationHelper = AggregationHelper;
    var _proto = AggregationHelper.prototype;
    _proto._determineAggregationAnnotationTarget = function _determineAggregationAnnotationTarget() {
      var _this$_converterConte, _this$_converterConte2, _this$_converterConte3, _this$_converterConte4, _this$_converterConte5;
      const bIsParameterized = (_this$_converterConte = this._converterContext.getDataModelObjectPath()) !== null && _this$_converterConte !== void 0 && (_this$_converterConte2 = _this$_converterConte.targetEntitySet) !== null && _this$_converterConte2 !== void 0 && (_this$_converterConte3 = _this$_converterConte2.entityType) !== null && _this$_converterConte3 !== void 0 && (_this$_converterConte4 = _this$_converterConte3.annotations) !== null && _this$_converterConte4 !== void 0 && (_this$_converterConte5 = _this$_converterConte4.Common) !== null && _this$_converterConte5 !== void 0 && _this$_converterConte5.ResultContext ? true : false;
      let oAggregationAnnotationSource;

      // find ApplySupported
      if (bIsParameterized) {
        var _oNavigationPropertyO, _oNavigationPropertyO2, _oEntityTypeObject$an, _oEntityTypeObject$an2;
        // if this is a parameterized view then applysupported can be found at either the navProp pointing to the result set or entityType.
        // If applySupported is present at both the navProp and the entityType then navProp is more specific so take annotations from there
        // targetObject in the converter context for a parameterized view is the navigation property pointing to th result set
        const oDataModelObjectPath = this._converterContext.getDataModelObjectPath();
        const oNavigationPropertyObject = oDataModelObjectPath === null || oDataModelObjectPath === void 0 ? void 0 : oDataModelObjectPath.targetObject;
        const oEntityTypeObject = oDataModelObjectPath === null || oDataModelObjectPath === void 0 ? void 0 : oDataModelObjectPath.targetEntityType;
        if (oNavigationPropertyObject !== null && oNavigationPropertyObject !== void 0 && (_oNavigationPropertyO = oNavigationPropertyObject.annotations) !== null && _oNavigationPropertyO !== void 0 && (_oNavigationPropertyO2 = _oNavigationPropertyO.Aggregation) !== null && _oNavigationPropertyO2 !== void 0 && _oNavigationPropertyO2.ApplySupported) {
          oAggregationAnnotationSource = oNavigationPropertyObject;
        } else if (oEntityTypeObject !== null && oEntityTypeObject !== void 0 && (_oEntityTypeObject$an = oEntityTypeObject.annotations) !== null && _oEntityTypeObject$an !== void 0 && (_oEntityTypeObject$an2 = _oEntityTypeObject$an.Aggregation) !== null && _oEntityTypeObject$an2 !== void 0 && _oEntityTypeObject$an2.ApplySupported) {
          oAggregationAnnotationSource = oEntityTypeObject;
        }
      } else {
        var _oEntitySetObject$ann;
        // For the time being, we ignore annotations at the container level, until the vocabulary is stabilized
        const oEntitySetObject = this._converterContext.getEntitySet();
        if (isEntitySet(oEntitySetObject) && (_oEntitySetObject$ann = oEntitySetObject.annotations.Aggregation) !== null && _oEntitySetObject$ann !== void 0 && _oEntitySetObject$ann.ApplySupported) {
          oAggregationAnnotationSource = oEntitySetObject;
        } else {
          oAggregationAnnotationSource = this._converterContext.getEntityType();
        }
      }
      return oAggregationAnnotationSource;
    }

    /**
     * Checks if the entity supports analytical queries.
     *
     * @returns `true` if analytical queries are supported, false otherwise.
     */;
    _proto.isAnalyticsSupported = function isAnalyticsSupported() {
      return this._bApplySupported;
    }

    /**
     * Checks if a property is groupable.
     *
     * @param property The property to check
     * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise
     */;
    _proto.isPropertyGroupable = function isPropertyGroupable(property) {
      if (!this._bApplySupported) {
        return undefined;
      } else if (!this._aGroupableProperties || this._aGroupableProperties.length === 0) {
        // No groupableProperties --> all properties are groupable
        return true;
      } else {
        return this._aGroupableProperties.findIndex(path => path.$target.fullyQualifiedName === property.fullyQualifiedName) >= 0;
      }
    }

    /**
     * Checks if a property is aggregatable.
     *
     * @param property The property to check
     * @returns `undefined` if the entity doesn't support analytical queries, true or false otherwise
     */;
    _proto.isPropertyAggregatable = function isPropertyAggregatable(property) {
      if (!this._bApplySupported) {
        return undefined;
      } else {
        // Get the custom aggregates
        const aCustomAggregateAnnotations = this._converterContext.getAnnotationsByTerm("Aggregation", "Org.OData.Aggregation.V1.CustomAggregate", [this._oAggregationAnnotationTarget]);

        // Check if a custom aggregate has a qualifier that corresponds to the property name
        return aCustomAggregateAnnotations.some(annotation => {
          return property.name === annotation.qualifier;
        });
      }
    };
    _proto.getGroupableProperties = function getGroupableProperties() {
      return this._aGroupableProperties;
    };
    _proto.getAggregatableProperties = function getAggregatableProperties() {
      return this._aAggregatableProperties;
    };
    _proto.getEntityType = function getEntityType() {
      return this._entityType;
    }

    /**
     * Returns AggregatedProperties or AggregatedProperty based on param Term.
     * The Term here indicates if the AggregatedProperty should be retrieved or the deprecated AggregatedProperties.
     *
     * @param Term The Annotation Term
     * @returns Annotations The appropriate annotations based on the given Term.
     */;
    _proto.getAggregatedProperties = function getAggregatedProperties(Term) {
      if (Term === "AggregatedProperties") {
        return this._converterContext.getAnnotationsByTerm("Analytics", "com.sap.vocabularies.Analytics.v1.AggregatedProperties", [this._converterContext.getEntityContainer(), this._converterContext.getEntityType()]);
      }
      return this._converterContext.getAnnotationsByTerm("Analytics", "com.sap.vocabularies.Analytics.v1.AggregatedProperty", [this._converterContext.getEntityContainer(), this._converterContext.getEntityType()]);
    }

    // retirve all transformation aggregates by prioritizing AggregatedProperty over AggregatedProperties objects
    ;
    _proto.getTransAggregations = function getTransAggregations() {
      var _aAggregatedPropertyO;
      let aAggregatedPropertyObjects = this.getAggregatedProperties("AggregatedProperty");
      if (!aAggregatedPropertyObjects || aAggregatedPropertyObjects.length === 0) {
        aAggregatedPropertyObjects = this.getAggregatedProperties("AggregatedProperties")[0];
      }
      return (_aAggregatedPropertyO = aAggregatedPropertyObjects) === null || _aAggregatedPropertyO === void 0 ? void 0 : _aAggregatedPropertyO.filter(aggregatedProperty => {
        if (this._getAggregatableAggregates(aggregatedProperty.AggregatableProperty)) {
          return aggregatedProperty;
        }
      });
    }

    /**
     * Check if each transformation is aggregatable.
     *
     * @param property The property to check
     * @returns 'aggregatedProperty'
     */;
    _proto._getAggregatableAggregates = function _getAggregatableAggregates(property) {
      const aAggregatableProperties = this.getAggregatableProperties() || [];
      return aAggregatableProperties.find(function (obj) {
        var _obj$Property;
        const prop = property.qualifier ? property.qualifier : property.$target.name;
        if (obj !== null && obj !== void 0 && (_obj$Property = obj.Property) !== null && _obj$Property !== void 0 && _obj$Property.value) {
          return obj.Property.value === prop;
        }
        return (obj === null || obj === void 0 ? void 0 : obj.name) === prop;
      });
    };
    _proto._getEntityProperties = function _getEntityProperties() {
      let entityProperties;
      if (isEntitySet(this._oAggregationAnnotationTarget)) {
        var _this$_oAggregationAn, _this$_oAggregationAn2;
        entityProperties = (_this$_oAggregationAn = this._oAggregationAnnotationTarget) === null || _this$_oAggregationAn === void 0 ? void 0 : (_this$_oAggregationAn2 = _this$_oAggregationAn.entityType) === null || _this$_oAggregationAn2 === void 0 ? void 0 : _this$_oAggregationAn2.entityProperties;
      } else if (isEntityType(this._oAggregationAnnotationTarget)) {
        var _this$_oAggregationAn3;
        entityProperties = (_this$_oAggregationAn3 = this._oAggregationAnnotationTarget) === null || _this$_oAggregationAn3 === void 0 ? void 0 : _this$_oAggregationAn3.entityProperties;
      }
      return entityProperties;
    }

    /**
     * Returns the list of custom aggregate definitions for the entity type.
     *
     * @returns A map (propertyName --> array of context-defining property names) for each custom aggregate corresponding to a property. The array of
     * context-defining property names is empty if the custom aggregate doesn't have any context-defining property.
     */;
    _proto.getCustomAggregateDefinitions = function getCustomAggregateDefinitions() {
      // Get the custom aggregates
      const aCustomAggregateAnnotations = this._converterContext.getAnnotationsByTerm("Aggregation", "Org.OData.Aggregation.V1.CustomAggregate", [this._oAggregationAnnotationTarget]);
      return aCustomAggregateAnnotations;
    }

    /**
     * Returns the list of allowed transformations in the $apply.
     * First look at the current EntitySet, then look at the default values provided at the container level.
     *
     * @returns The list of transformations, or undefined if no list is found
     */;
    _proto.getAllowedTransformations = function getAllowedTransformations() {
      var _this$oTargetAggregat6, _this$oTargetAggregat7, _this$oContainerAggre, _this$oContainerAggre2;
      return ((_this$oTargetAggregat6 = this.oTargetAggregationAnnotations) === null || _this$oTargetAggregat6 === void 0 ? void 0 : (_this$oTargetAggregat7 = _this$oTargetAggregat6.ApplySupported) === null || _this$oTargetAggregat7 === void 0 ? void 0 : _this$oTargetAggregat7.Transformations) || ((_this$oContainerAggre = this.oContainerAggregationAnnotation) === null || _this$oContainerAggre === void 0 ? void 0 : (_this$oContainerAggre2 = _this$oContainerAggre.ApplySupportedDefaults) === null || _this$oContainerAggre2 === void 0 ? void 0 : _this$oContainerAggre2.Transformations);
    };
    return AggregationHelper;
  }();
  _exports.AggregationHelper = AggregationHelper;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/Aggregation", ["sap/fe/core/helpers/TypeGuards"],function(t){"use strict";var e={};var n=t.isNavigationProperty;var o=t.isEntityType;var i=t.isEntitySet;let r=function(){function t(t,e){var r;let g=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;this._entityType=t;this._converterContext=e;this._oAggregationAnnotationTarget=this._determineAggregationAnnotationTarget();if(n(this._oAggregationAnnotationTarget)||o(this._oAggregationAnnotationTarget)||i(this._oAggregationAnnotationTarget)){this.oTargetAggregationAnnotations=this._oAggregationAnnotationTarget.annotations.Aggregation}this._bApplySupported=(r=this.oTargetAggregationAnnotations)!==null&&r!==void 0&&r.ApplySupported?true:false;if(this._bApplySupported){var a,s,l,u;this._aGroupableProperties=(a=this.oTargetAggregationAnnotations)===null||a===void 0?void 0:(s=a.ApplySupported)===null||s===void 0?void 0:s.GroupableProperties;this._aAggregatableProperties=(l=this.oTargetAggregationAnnotations)===null||l===void 0?void 0:(u=l.ApplySupported)===null||u===void 0?void 0:u.AggregatableProperties;this.oContainerAggregationAnnotation=e.getEntityContainer().annotations.Aggregation}if(!this._aAggregatableProperties&&g){const t=this._getEntityProperties();this._aAggregatableProperties=t===null||t===void 0?void 0:t.filter(t=>{var e,n;return(e=t.annotations)===null||e===void 0?void 0:(n=e.Aggregation)===null||n===void 0?void 0:n.Aggregatable})}}e.AggregationHelper=t;var r=t.prototype;r._determineAggregationAnnotationTarget=function t(){var e,n,o,r,g;const a=(e=this._converterContext.getDataModelObjectPath())!==null&&e!==void 0&&(n=e.targetEntitySet)!==null&&n!==void 0&&(o=n.entityType)!==null&&o!==void 0&&(r=o.annotations)!==null&&r!==void 0&&(g=r.Common)!==null&&g!==void 0&&g.ResultContext?true:false;let s;if(a){var l,u,p,A;const t=this._converterContext.getDataModelObjectPath();const e=t===null||t===void 0?void 0:t.targetObject;const n=t===null||t===void 0?void 0:t.targetEntityType;if(e!==null&&e!==void 0&&(l=e.annotations)!==null&&l!==void 0&&(u=l.Aggregation)!==null&&u!==void 0&&u.ApplySupported){s=e}else if(n!==null&&n!==void 0&&(p=n.annotations)!==null&&p!==void 0&&(A=p.Aggregation)!==null&&A!==void 0&&A.ApplySupported){s=n}}else{var d;const t=this._converterContext.getEntitySet();if(i(t)&&(d=t.annotations.Aggregation)!==null&&d!==void 0&&d.ApplySupported){s=t}else{s=this._converterContext.getEntityType()}}return s};r.isAnalyticsSupported=function t(){return this._bApplySupported};r.isPropertyGroupable=function t(e){if(!this._bApplySupported){return undefined}else if(!this._aGroupableProperties||this._aGroupableProperties.length===0){return true}else{return this._aGroupableProperties.findIndex(t=>t.$target.fullyQualifiedName===e.fullyQualifiedName)>=0}};r.isPropertyAggregatable=function t(e){if(!this._bApplySupported){return undefined}else{const t=this._converterContext.getAnnotationsByTerm("Aggregation","Org.OData.Aggregation.V1.CustomAggregate",[this._oAggregationAnnotationTarget]);return t.some(t=>e.name===t.qualifier)}};r.getGroupableProperties=function t(){return this._aGroupableProperties};r.getAggregatableProperties=function t(){return this._aAggregatableProperties};r.getEntityType=function t(){return this._entityType};r.getAggregatedProperties=function t(e){if(e==="AggregatedProperties"){return this._converterContext.getAnnotationsByTerm("Analytics","com.sap.vocabularies.Analytics.v1.AggregatedProperties",[this._converterContext.getEntityContainer(),this._converterContext.getEntityType()])}return this._converterContext.getAnnotationsByTerm("Analytics","com.sap.vocabularies.Analytics.v1.AggregatedProperty",[this._converterContext.getEntityContainer(),this._converterContext.getEntityType()])};r.getTransAggregations=function t(){var e;let n=this.getAggregatedProperties("AggregatedProperty");if(!n||n.length===0){n=this.getAggregatedProperties("AggregatedProperties")[0]}return(e=n)===null||e===void 0?void 0:e.filter(t=>{if(this._getAggregatableAggregates(t.AggregatableProperty)){return t}})};r._getAggregatableAggregates=function t(e){const n=this.getAggregatableProperties()||[];return n.find(function(t){var n;const o=e.qualifier?e.qualifier:e.$target.name;if(t!==null&&t!==void 0&&(n=t.Property)!==null&&n!==void 0&&n.value){return t.Property.value===o}return(t===null||t===void 0?void 0:t.name)===o})};r._getEntityProperties=function t(){let e;if(i(this._oAggregationAnnotationTarget)){var n,r;e=(n=this._oAggregationAnnotationTarget)===null||n===void 0?void 0:(r=n.entityType)===null||r===void 0?void 0:r.entityProperties}else if(o(this._oAggregationAnnotationTarget)){var g;e=(g=this._oAggregationAnnotationTarget)===null||g===void 0?void 0:g.entityProperties}return e};r.getCustomAggregateDefinitions=function t(){const e=this._converterContext.getAnnotationsByTerm("Aggregation","Org.OData.Aggregation.V1.CustomAggregate",[this._oAggregationAnnotationTarget]);return e};r.getAllowedTransformations=function t(){var e,n,o,i;return((e=this.oTargetAggregationAnnotations)===null||e===void 0?void 0:(n=e.ApplySupported)===null||n===void 0?void 0:n.Transformations)||((o=this.oContainerAggregationAnnotation)===null||o===void 0?void 0:(i=o.ApplySupportedDefaults)===null||i===void 0?void 0:i.Transformations)};return t}();e.AggregationHelper=r;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/BindingHelper-dbg", ["sap/fe/core/helpers/BindingToolkit"], function (BindingToolkit) {
  "use strict";

  var _exports = {};
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var equal = BindingToolkit.equal;
  var and = BindingToolkit.and;
  const UI = {
    IsCreateMode: pathInModel("createMode", "ui"),
    IsEditable: pathInModel("/isEditable", "ui"),
    IsTransientBinding: equal(pathInModel("@$ui5.context.isTransient"), true),
    IsTotal: equal(pathInModel("@$ui5.node.isTotal"), true),
    IsExpanded: equal(pathInModel("@$ui5.node.isExpanded"), true),
    NodeLevel: pathInModel("@$ui5.node.level"),
    IsInactive: pathInModel("@$ui5.context.isInactive")
  };
  _exports.UI = UI;
  const Entity = {
    HasDraft: pathInModel("HasDraftEntity"),
    HasActive: pathInModel("HasActiveEntity"),
    IsActive: pathInModel("IsActiveEntity")
  };
  _exports.Entity = Entity;
  const Draft = {
    IsNewObject: and(not(Entity.HasActive), not(Entity.IsActive)),
    HasNoDraftForCurrentUser: or(not(Entity.HasDraft), and(Entity.HasDraft, not(pathInModel("DraftAdministrativeData/DraftIsCreatedByMe"))))
  };

  /**
   * Gets a singleton based on the fully qualified name.
   *
   * @param convertedTypes The converted types
   * @param fullyQualifiedName The fully qualified name of the singleton
   * @returns The singleton instance.
   */
  _exports.Draft = Draft;
  function getSingleton(convertedTypes, fullyQualifiedName) {
    return convertedTypes.singletons.find(singleton => singleton.fullyQualifiedName === fullyQualifiedName);
  }

  /**
   * Function to adjust singleton paths in the annotation.
   * The absolute path via EntityContainer needs to be shortened to /SingletonName/PropertyName.
   *
   * @param path The path configured in the annotation
   * @param convertedTypes The instance of the converter context
   * @param visitedNavigationPaths The array of visited navigation paths
   * @returns The adjusted path for the reference of the singleton property, otherwise the input path itself.
   */
  const singletonPathVisitor = function (path, convertedTypes, visitedNavigationPaths) {
    // Determine whether the path is absolute and whether it points to a singleton.
    if (path.indexOf("/") === 0) {
      const parts = path.split("/").filter(Boolean),
        propertyName = parts.pop(),
        entitySetName = parts.join("/"),
        singleton = getSingleton(convertedTypes, entitySetName);
      if (singleton) {
        // Set the absolute binding path to access the singleton property
        path = `/${singleton.name}/${propertyName}`;
      }
    } else {
      // Not a singleton reference.
      // Prefix the navigation path to the property path
      const localPath = visitedNavigationPaths.concat();
      localPath.push(path);
      path = localPath.join("/");
    }
    return path;
  };

  /**
   * Function to adjust property paths defined in the binding of an action.
   *
   * The binding parameter name needs to be removed. Singleton paths need to be resolved.
   *
   * @param path The path configured in the annotation
   * @param converterContext The instance of the converter context
   * @param bindingParameterFullName The fully qualified name of the binding parameter
   * @returns The adjusted property path
   */
  _exports.singletonPathVisitor = singletonPathVisitor;
  function bindingContextPathVisitor(path, converterContext, bindingParameterFullName) {
    if (bindingParameterFullName) {
      const bindingParameterPrefix = `${bindingParameterFullName === null || bindingParameterFullName === void 0 ? void 0 : bindingParameterFullName.substring(bindingParameterFullName.lastIndexOf("/") + 1)}/`;
      // Strip the binding parameter name from OperationAvailable path
      // For e.g. _it/property1 --> property1
      if (path.startsWith(bindingParameterPrefix)) {
        return path.substring(bindingParameterPrefix.length);
      }
    }
    return singletonPathVisitor(path, converterContext.getConvertedTypes(), []);
  }
  _exports.bindingContextPathVisitor = bindingContextPathVisitor;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/BindingHelper", ["sap/fe/core/helpers/BindingToolkit"],function(t){"use strict";var e={};var i=t.pathInModel;var n=t.or;var s=t.not;var a=t.equal;var r=t.and;const o={IsCreateMode:i("createMode","ui"),IsEditable:i("/isEditable","ui"),IsTransientBinding:a(i("@$ui5.context.isTransient"),true),IsTotal:a(i("@$ui5.node.isTotal"),true),IsExpanded:a(i("@$ui5.node.isExpanded"),true),NodeLevel:i("@$ui5.node.level"),IsInactive:i("@$ui5.context.isInactive")};e.UI=o;const u={HasDraft:i("HasDraftEntity"),HasActive:i("HasActiveEntity"),IsActive:i("IsActiveEntity")};e.Entity=u;const c={IsNewObject:r(s(u.HasActive),s(u.IsActive)),HasNoDraftForCurrentUser:n(s(u.HasDraft),r(u.HasDraft,s(i("DraftAdministrativeData/DraftIsCreatedByMe"))))};e.Draft=c;function d(t,e){return t.singletons.find(t=>t.fullyQualifiedName===e)}const f=function(t,e,i){if(t.indexOf("/")===0){const i=t.split("/").filter(Boolean),n=i.pop(),s=i.join("/"),a=d(e,s);if(a){t=`/${a.name}/${n}`}}else{const e=i.concat();e.push(t);t=e.join("/")}return t};e.singletonPathVisitor=f;function l(t,e,i){if(i){const e=`${i===null||i===void 0?void 0:i.substring(i.lastIndexOf("/")+1)}/`;if(t.startsWith(e)){return t.substring(e.length)}}return f(t,e.getConvertedTypes(),[])}e.bindingContextPathVisitor=l;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/ConfigurableObject-dbg", ["sap/base/Log"], function (Log) {
  "use strict";

  var _exports = {};
  let Placement;
  (function (Placement) {
    Placement["After"] = "After";
    Placement["Before"] = "Before";
    Placement["End"] = "End";
  })(Placement || (Placement = {}));
  _exports.Placement = Placement;
  /**
   * Recursive method that order the keys based on a position information.
   *
   * @param positioningItems
   * @param anchor
   * @param sorted
   * @param visited
   * @returns The order of the current item
   */
  const orderPositioningItemRecursively = (positioningItems, anchor, sorted, visited) => {
    let insertIndex = sorted.indexOf(anchor);
    if (insertIndex !== -1) {
      return insertIndex;
    }
    const anchorItem = positioningItems[anchor];
    if (anchorItem === undefined) {
      const anchorText = anchor.split("::"),
        manifestItem = Object.keys(visited)[0];
      Log.warning(`Position anchor '${anchorText[anchorText.length - 1]}' not found for item '${manifestItem}'. Please check manifest settings.`);
      return sorted.length;
      // throw new Error(`position anchor not found: ${anchor}`);
    }

    visited[anchor] = anchorItem;
    if (anchorItem && !(anchorItem.anchor in visited)) {
      insertIndex = orderPositioningItemRecursively(positioningItems, anchorItem.anchor, sorted, visited);
      if (anchorItem.placement !== Placement.Before) {
        ++insertIndex;
      }
    } else {
      insertIndex = sorted.length;
    }
    sorted.splice(insertIndex, 0, anchor);
    return insertIndex;
  };
  let OverrideType;
  (function (OverrideType) {
    OverrideType["merge"] = "merge";
    OverrideType["overwrite"] = "overwrite";
    OverrideType["ignore"] = "ignore";
  })(OverrideType || (OverrideType = {}));
  _exports.OverrideType = OverrideType;
  function isArrayConfig(config) {
    return typeof config === "object";
  }
  function applyOverride(overwritableKeys, sourceItem, customElement) {
    const outItem = sourceItem || customElement;
    for (const overwritableKey in overwritableKeys) {
      if (Object.hasOwnProperty.call(overwritableKeys, overwritableKey)) {
        const overrideConfig = overwritableKeys[overwritableKey];
        if (sourceItem !== null) {
          switch (overrideConfig) {
            case "overwrite":
              if (customElement.hasOwnProperty(overwritableKey) && customElement[overwritableKey] !== undefined) {
                sourceItem[overwritableKey] = customElement[overwritableKey];
              }
              break;
            case "merge":
            default:
              const subItem = sourceItem[overwritableKey] || [];
              let subConfig = {};
              if (isArrayConfig(overrideConfig)) {
                subConfig = overrideConfig;
              }
              if (Array.isArray(subItem)) {
                sourceItem[overwritableKey] = insertCustomElements(subItem, customElement && customElement[overwritableKey] || {}, subConfig);
              }
              break;
          }
        } else {
          switch (overrideConfig) {
            case "overwrite":
              if (customElement.hasOwnProperty(overwritableKey) && customElement[overwritableKey] !== undefined) {
                outItem[overwritableKey] = customElement[overwritableKey];
              }
              break;
            case "merge":
            default:
              let subConfig = {};
              if (isArrayConfig(overrideConfig)) {
                subConfig = overrideConfig;
              }
              outItem[overwritableKey] = insertCustomElements([], customElement && customElement[overwritableKey] || {}, subConfig);
              break;
          }
        }
      }
    }
    return outItem;
  }

  /**
   * Insert a set of custom elements in the right position in an original collection.
   *
   * Parameters for overwritableKeys and their implications:
   * "overwrite": The whole object gets overwritten - if the customElements include a default, this will overrule the whole rootElements configuration.
   * "merge": This is similar to calling insertCustomElements itself. You must include the
   * full CustomElement syntax within the customElements, including anchors, for example.
   * "ignore": There are no additions and no combinations. Only the rootElements object is used.
   *
   * Note - Proceed as follows in case you have defined customElements and do not want to overwrite their values with defaults:
   * Hand the rootElements into the creation function of the customElement.
   * Depending on the existence of both rootElement-configuration and customElement-configuration,
   * you must set the customElements property, for which the "overwrite"-property is set, explicitly to undefined.
   *
   * @template T
   * @param rootElements A list of "ConfigurableObject" which means object that have a unique "key"
   * @param customElements An object containing extra object to add, they are indexed by a key and have a "position" object
   * @param overwritableKeys The list of keys from the original object that can be overwritten in case a custom element has the same "key"
   * @returns An ordered array of elements including the custom ones
   */
  function insertCustomElements(rootElements, customElements) {
    let overwritableKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    const firstAnchor = rootElements.length ? rootElements[0].key : null;
    const rootElementsWithoutLast = rootElements.filter(rootElement => {
      var _rootElement$position;
      return ((_rootElement$position = rootElement.position) === null || _rootElement$position === void 0 ? void 0 : _rootElement$position.placement) !== Placement.End;
    });
    const lastAnchor = rootElements.length ? rootElements[rootElementsWithoutLast.length - 1].key : null;
    let endElement;
    const positioningItems = {};
    const itemsPerKey = {};
    rootElements.forEach(rootElement => {
      var _rootElement$position2;
      if (((_rootElement$position2 = rootElement.position) === null || _rootElement$position2 === void 0 ? void 0 : _rootElement$position2.placement) === Placement.End && !endElement) {
        endElement = rootElement;
      } else {
        var _rootElement$position3, _rootElement$position4;
        positioningItems[rootElement.key] = {
          anchor: ((_rootElement$position3 = rootElement.position) === null || _rootElement$position3 === void 0 ? void 0 : _rootElement$position3.anchor) || rootElement.key,
          placement: ((_rootElement$position4 = rootElement.position) === null || _rootElement$position4 === void 0 ? void 0 : _rootElement$position4.placement) || Placement.After
        };
      }
      itemsPerKey[rootElement.key] = rootElement;
    });
    Object.keys(customElements).forEach(customElementKey => {
      var _customElement$menu;
      const customElement = customElements[customElementKey];
      const anchor = customElement.position.anchor;
      // If no placement defined we are After
      if (!customElement.position.placement) {
        customElement.position.placement = Placement.After;
      }
      // If no anchor we're either After the last anchor or Before the first
      if (!anchor) {
        const potentialAnchor = customElement.position.placement === Placement.After ? lastAnchor : firstAnchor;
        customElement.position.anchor = potentialAnchor ? potentialAnchor : customElementKey;
      }

      // Adding bound/unbound actions to menu
      customElement.menu = customElement === null || customElement === void 0 ? void 0 : (_customElement$menu = customElement.menu) === null || _customElement$menu === void 0 ? void 0 : _customElement$menu.map(menu => {
        return itemsPerKey[menu.key] ?? menu;
      });
      const adjustedCustomElementKey = customElement.key;
      if (itemsPerKey[adjustedCustomElementKey]) {
        itemsPerKey[adjustedCustomElementKey] = applyOverride(overwritableKeys, itemsPerKey[adjustedCustomElementKey], customElement);

        //Position is overwritten for filter fields if there is a change in manifest
        if (anchor && customElement.position && overwritableKeys.position && overwritableKeys.position === "overwrite") {
          positioningItems[adjustedCustomElementKey] = itemsPerKey[adjustedCustomElementKey].position;
        }
        /**
         * anchor check is added to make sure change in properties in the manifest does not affect the position of the field.
         * Otherwise, when no position is mentioned in manifest for an altered field, the position is changed as
         * per the potential anchor
         */
      } else {
        itemsPerKey[adjustedCustomElementKey] = applyOverride(overwritableKeys, null, customElement);
        positioningItems[adjustedCustomElementKey] = customElement.position;
      }
    });
    const sortedKeys = [];
    Object.keys(positioningItems).forEach(positionItemKey => {
      orderPositioningItemRecursively(positioningItems, positionItemKey, sortedKeys, {});
    });
    const outElements = sortedKeys.map(key => itemsPerKey[key]);
    if (endElement) {
      outElements.push(endElement);
    }
    return outElements;
  }
  _exports.insertCustomElements = insertCustomElements;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/ConfigurableObject", ["sap/base/Log"],function(e){"use strict";var n={};let t;(function(e){e["After"]="After";e["Before"]="Before";e["End"]="End"})(t||(t={}));n.Placement=t;const o=(n,i,r,s)=>{let c=r.indexOf(i);if(c!==-1){return c}const l=n[i];if(l===undefined){const n=i.split("::"),t=Object.keys(s)[0];e.warning(`Position anchor '${n[n.length-1]}' not found for item '${t}'. Please check manifest settings.`);return r.length}s[i]=l;if(l&&!(l.anchor in s)){c=o(n,l.anchor,r,s);if(l.placement!==t.Before){++c}}else{c=r.length}r.splice(c,0,i);return c};let i;(function(e){e["merge"]="merge";e["overwrite"]="overwrite";e["ignore"]="ignore"})(i||(i={}));n.OverrideType=i;function r(e){return typeof e==="object"}function s(e,n,t){const o=n||t;for(const i in e){if(Object.hasOwnProperty.call(e,i)){const s=e[i];if(n!==null){switch(s){case"overwrite":if(t.hasOwnProperty(i)&&t[i]!==undefined){n[i]=t[i]}break;case"merge":default:const e=n[i]||[];let o={};if(r(s)){o=s}if(Array.isArray(e)){n[i]=c(e,t&&t[i]||{},o)}break}}else{switch(s){case"overwrite":if(t.hasOwnProperty(i)&&t[i]!==undefined){o[i]=t[i]}break;case"merge":default:let e={};if(r(s)){e=s}o[i]=c([],t&&t[i]||{},e);break}}}}return o}function c(e,n){let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const r=e.length?e[0].key:null;const c=e.filter(e=>{var n;return((n=e.position)===null||n===void 0?void 0:n.placement)!==t.End});const l=e.length?e[c.length-1].key:null;let a;const f={};const u={};e.forEach(e=>{var n;if(((n=e.position)===null||n===void 0?void 0:n.placement)===t.End&&!a){a=e}else{var o,i;f[e.key]={anchor:((o=e.position)===null||o===void 0?void 0:o.anchor)||e.key,placement:((i=e.position)===null||i===void 0?void 0:i.placement)||t.After}}u[e.key]=e});Object.keys(n).forEach(e=>{var o;const c=n[e];const a=c.position.anchor;if(!c.position.placement){c.position.placement=t.After}if(!a){const n=c.position.placement===t.After?l:r;c.position.anchor=n?n:e}c.menu=c===null||c===void 0?void 0:(o=c.menu)===null||o===void 0?void 0:o.map(e=>u[e.key]??e);const p=c.key;if(u[p]){u[p]=s(i,u[p],c);if(a&&c.position&&i.position&&i.position==="overwrite"){f[p]=u[p].position}}else{u[p]=s(i,null,c);f[p]=c.position}});const p=[];Object.keys(f).forEach(e=>{o(f,e,p,{})});const d=p.map(e=>u[e]);if(a){d.push(a)}return d}n.insertCustomElements=c;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/DataFieldHelper-dbg", ["sap/base/Log"], function (Log) {
  "use strict";

  var _exports = {};
  //function to check for statically hidden reference properties
  function isReferencePropertyStaticallyHidden(property) {
    var _property$annotations, _property$annotations2, _property$annotations3, _property$Value, _property$Value$$targ, _property$Value$$targ2, _property$Value$$targ3, _property$Value$$targ4, _property$Value3, _property$Value3$$tar, _propertyValueAnnotat, _propertyValueAnnotat2, _property$annotations4, _property$annotations5, _property$annotations6;
    if (property) {
      switch (property.$Type) {
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          return isAnnotationFieldStaticallyHidden(property);
        case "com.sap.vocabularies.UI.v1.DataField":
          if (((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.UI) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.Hidden) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.valueOf()) === true) {
            var _UI, _UI$HiddenFilter;
            if (property.annotations && ((_UI = property.annotations.UI) === null || _UI === void 0 ? void 0 : (_UI$HiddenFilter = _UI.HiddenFilter) === null || _UI$HiddenFilter === void 0 ? void 0 : _UI$HiddenFilter.valueOf()) === true) {
              Log.warning("Warning: Property " + property.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            return true;
          } else if (((_property$Value = property.Value) === null || _property$Value === void 0 ? void 0 : (_property$Value$$targ = _property$Value.$target) === null || _property$Value$$targ === void 0 ? void 0 : (_property$Value$$targ2 = _property$Value$$targ.annotations) === null || _property$Value$$targ2 === void 0 ? void 0 : (_property$Value$$targ3 = _property$Value$$targ2.UI) === null || _property$Value$$targ3 === void 0 ? void 0 : (_property$Value$$targ4 = _property$Value$$targ3.Hidden) === null || _property$Value$$targ4 === void 0 ? void 0 : _property$Value$$targ4.valueOf()) === true) {
            var _property$Value2, _property$Value2$$tar, _property$Value2$$tar2, _property$Value2$$tar3, _property$Value2$$tar4;
            if (((_property$Value2 = property.Value) === null || _property$Value2 === void 0 ? void 0 : (_property$Value2$$tar = _property$Value2.$target) === null || _property$Value2$$tar === void 0 ? void 0 : (_property$Value2$$tar2 = _property$Value2$$tar.annotations) === null || _property$Value2$$tar2 === void 0 ? void 0 : (_property$Value2$$tar3 = _property$Value2$$tar2.UI) === null || _property$Value2$$tar3 === void 0 ? void 0 : (_property$Value2$$tar4 = _property$Value2$$tar3.HiddenFilter) === null || _property$Value2$$tar4 === void 0 ? void 0 : _property$Value2$$tar4.valueOf()) === true) {
              Log.warning("Warning: Property " + property.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            return true;
          } else {
            return false;
          }
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
          const propertyValueAnnotation = (_property$Value3 = property.Value) === null || _property$Value3 === void 0 ? void 0 : (_property$Value3$$tar = _property$Value3.$target) === null || _property$Value3$$tar === void 0 ? void 0 : _property$Value3$$tar.annotations;
          if ((propertyValueAnnotation === null || propertyValueAnnotation === void 0 ? void 0 : (_propertyValueAnnotat = propertyValueAnnotation.UI) === null || _propertyValueAnnotat === void 0 ? void 0 : (_propertyValueAnnotat2 = _propertyValueAnnotat.Hidden) === null || _propertyValueAnnotat2 === void 0 ? void 0 : _propertyValueAnnotat2.valueOf()) === true) {
            var _propertyValueAnnotat3, _propertyValueAnnotat4;
            if ((propertyValueAnnotation === null || propertyValueAnnotation === void 0 ? void 0 : (_propertyValueAnnotat3 = propertyValueAnnotation.UI) === null || _propertyValueAnnotat3 === void 0 ? void 0 : (_propertyValueAnnotat4 = _propertyValueAnnotat3.HiddenFilter) === null || _propertyValueAnnotat4 === void 0 ? void 0 : _propertyValueAnnotat4.valueOf()) === true) {
              Log.warning("Warning: Property " + property.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            return true;
          } else {
            return false;
          }
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
          if (((_property$annotations4 = property.annotations) === null || _property$annotations4 === void 0 ? void 0 : (_property$annotations5 = _property$annotations4.UI) === null || _property$annotations5 === void 0 ? void 0 : (_property$annotations6 = _property$annotations5.Hidden) === null || _property$annotations6 === void 0 ? void 0 : _property$annotations6.valueOf()) === true) {
            var _UI2, _UI2$HiddenFilter;
            if (property.annotations && ((_UI2 = property.annotations.UI) === null || _UI2 === void 0 ? void 0 : (_UI2$HiddenFilter = _UI2.HiddenFilter) === null || _UI2$HiddenFilter === void 0 ? void 0 : _UI2$HiddenFilter.valueOf()) === true) {
              Log.warning("Warning: Property " + property.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            return true;
          } else {
            return false;
          }
        default:
      }
    }
  }
  _exports.isReferencePropertyStaticallyHidden = isReferencePropertyStaticallyHidden;
  function isAnnotationFieldStaticallyHidden(annotationProperty) {
    var _propertyValueAnnotat5, _propertyValueAnnotat6, _propertyValueAnnotat7;
    const target = annotationProperty.Target.$target.term;
    // let ChartAnnotation: Chart, ConnectedFieldsAnnotation: ConnectedFields, FieldGroupAnnotation: FieldGroup, DataPointAnnotation: DataPoint;
    switch (target) {
      case "com.sap.vocabularies.UI.v1.Chart":
        let ischartMeasureHidden;
        annotationProperty.Target.$target.Measures.forEach(chartMeasure => {
          var _chartMeasure$$target, _chartMeasure$$target2, _chartMeasure$$target3;
          if (((_chartMeasure$$target = chartMeasure.$target.annotations) === null || _chartMeasure$$target === void 0 ? void 0 : (_chartMeasure$$target2 = _chartMeasure$$target.UI) === null || _chartMeasure$$target2 === void 0 ? void 0 : (_chartMeasure$$target3 = _chartMeasure$$target2.Hidden) === null || _chartMeasure$$target3 === void 0 ? void 0 : _chartMeasure$$target3.valueOf()) === true) {
            var _UI3, _UI3$HiddenFilter;
            Log.warning("Warning: Measure attribute for Chart " + chartMeasure.$target.name + " is statically hidden hence chart can't be rendered");
            if (chartMeasure.$target.annotations && ((_UI3 = chartMeasure.$target.annotations.UI) === null || _UI3 === void 0 ? void 0 : (_UI3$HiddenFilter = _UI3.HiddenFilter) === null || _UI3$HiddenFilter === void 0 ? void 0 : _UI3$HiddenFilter.valueOf()) === true) {
              Log.warning("Warning: Property " + chartMeasure.$target.name + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            ischartMeasureHidden = true;
          }
        });
        if (ischartMeasureHidden === true) {
          return true;
        } else {
          return false;
        }
      case "com.sap.vocabularies.UI.v1.ConnectedFields":
        if (annotationProperty) {
          var _annotationProperty$a, _annotationProperty$a2, _annotationProperty$a3;
          if (((_annotationProperty$a = annotationProperty.annotations) === null || _annotationProperty$a === void 0 ? void 0 : (_annotationProperty$a2 = _annotationProperty$a.UI) === null || _annotationProperty$a2 === void 0 ? void 0 : (_annotationProperty$a3 = _annotationProperty$a2.Hidden) === null || _annotationProperty$a3 === void 0 ? void 0 : _annotationProperty$a3.valueOf()) === true) {
            var _UI4, _UI4$HiddenFilter;
            if (annotationProperty.annotations && ((_UI4 = annotationProperty.annotations.UI) === null || _UI4 === void 0 ? void 0 : (_UI4$HiddenFilter = _UI4.HiddenFilter) === null || _UI4$HiddenFilter === void 0 ? void 0 : _UI4$HiddenFilter.valueOf()) === true) {
              Log.warning("Warning: Property " + annotationProperty.Target.$target.qualifier + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
            }
            return true;
          } else {
            return false;
          }
        }
        break;
      case "com.sap.vocabularies.UI.v1.FieldGroup":
        if (annotationProperty) {
          if (annotationProperty.Target.$target.Data.every(field => isReferencePropertyStaticallyHidden(field) === true)) {
            return true;
          } else {
            return false;
          }
        }
        break;
      case "com.sap.vocabularies.UI.v1.DataPoint":
        const propertyValueAnnotation = annotationProperty.Target.$target.Value.$target;
        if (((_propertyValueAnnotat5 = propertyValueAnnotation.annotations) === null || _propertyValueAnnotat5 === void 0 ? void 0 : (_propertyValueAnnotat6 = _propertyValueAnnotat5.UI) === null || _propertyValueAnnotat6 === void 0 ? void 0 : (_propertyValueAnnotat7 = _propertyValueAnnotat6.Hidden) === null || _propertyValueAnnotat7 === void 0 ? void 0 : _propertyValueAnnotat7.valueOf()) === true) {
          var _propertyValueAnnotat8, _propertyValueAnnotat9, _propertyValueAnnotat10;
          if (((_propertyValueAnnotat8 = propertyValueAnnotation.annotations) === null || _propertyValueAnnotat8 === void 0 ? void 0 : (_propertyValueAnnotat9 = _propertyValueAnnotat8.UI) === null || _propertyValueAnnotat9 === void 0 ? void 0 : (_propertyValueAnnotat10 = _propertyValueAnnotat9.HiddenFilter) === null || _propertyValueAnnotat10 === void 0 ? void 0 : _propertyValueAnnotat10.valueOf()) === true) {
            Log.warning("Warning: Property " + annotationProperty.Target.$target.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
          }
          return true;
        } else {
          return false;
        }
      default:
    }
  }
  _exports.isAnnotationFieldStaticallyHidden = isAnnotationFieldStaticallyHidden;
  function isHeaderStaticallyHidden(property) {
    if (property.targetObject) {
      var _headerInfoAnnotation, _headerInfoAnnotation2, _headerInfoAnnotation3, _headerInfoAnnotation9, _headerInfoAnnotation10, _headerInfoAnnotation11, _headerInfoAnnotation12, _headerInfoAnnotation13, _headerInfoAnnotation14;
      const headerInfoAnnotation = property.targetObject;
      if (headerInfoAnnotation.annotations && ((_headerInfoAnnotation = headerInfoAnnotation.annotations) === null || _headerInfoAnnotation === void 0 ? void 0 : (_headerInfoAnnotation2 = _headerInfoAnnotation.UI) === null || _headerInfoAnnotation2 === void 0 ? void 0 : (_headerInfoAnnotation3 = _headerInfoAnnotation2.Hidden) === null || _headerInfoAnnotation3 === void 0 ? void 0 : _headerInfoAnnotation3.valueOf()) === true) {
        var _headerInfoAnnotation4, _headerInfoAnnotation5, _headerInfoAnnotation6, _headerInfoAnnotation7, _headerInfoAnnotation8;
        if (((_headerInfoAnnotation4 = headerInfoAnnotation.Value) === null || _headerInfoAnnotation4 === void 0 ? void 0 : (_headerInfoAnnotation5 = _headerInfoAnnotation4.$target) === null || _headerInfoAnnotation5 === void 0 ? void 0 : (_headerInfoAnnotation6 = _headerInfoAnnotation5.annotations) === null || _headerInfoAnnotation6 === void 0 ? void 0 : (_headerInfoAnnotation7 = _headerInfoAnnotation6.UI) === null || _headerInfoAnnotation7 === void 0 ? void 0 : (_headerInfoAnnotation8 = _headerInfoAnnotation7.HiddenFilter) === null || _headerInfoAnnotation8 === void 0 ? void 0 : _headerInfoAnnotation8.valueOf()) === true) {
          Log.warning("Warning: Property " + headerInfoAnnotation.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
        }
        return true;
      } else if (headerInfoAnnotation !== null && headerInfoAnnotation !== void 0 && (_headerInfoAnnotation9 = headerInfoAnnotation.Value) !== null && _headerInfoAnnotation9 !== void 0 && _headerInfoAnnotation9.$target && (headerInfoAnnotation === null || headerInfoAnnotation === void 0 ? void 0 : (_headerInfoAnnotation10 = headerInfoAnnotation.Value) === null || _headerInfoAnnotation10 === void 0 ? void 0 : (_headerInfoAnnotation11 = _headerInfoAnnotation10.$target) === null || _headerInfoAnnotation11 === void 0 ? void 0 : (_headerInfoAnnotation12 = _headerInfoAnnotation11.annotations) === null || _headerInfoAnnotation12 === void 0 ? void 0 : (_headerInfoAnnotation13 = _headerInfoAnnotation12.UI) === null || _headerInfoAnnotation13 === void 0 ? void 0 : (_headerInfoAnnotation14 = _headerInfoAnnotation13.Hidden) === null || _headerInfoAnnotation14 === void 0 ? void 0 : _headerInfoAnnotation14.valueOf()) === true) {
        var _headerInfoAnnotation15, _headerInfoAnnotation16, _headerInfoAnnotation17, _headerInfoAnnotation18, _headerInfoAnnotation19;
        if ((headerInfoAnnotation === null || headerInfoAnnotation === void 0 ? void 0 : (_headerInfoAnnotation15 = headerInfoAnnotation.Value) === null || _headerInfoAnnotation15 === void 0 ? void 0 : (_headerInfoAnnotation16 = _headerInfoAnnotation15.$target) === null || _headerInfoAnnotation16 === void 0 ? void 0 : (_headerInfoAnnotation17 = _headerInfoAnnotation16.annotations) === null || _headerInfoAnnotation17 === void 0 ? void 0 : (_headerInfoAnnotation18 = _headerInfoAnnotation17.UI) === null || _headerInfoAnnotation18 === void 0 ? void 0 : (_headerInfoAnnotation19 = _headerInfoAnnotation18.HiddenFilter) === null || _headerInfoAnnotation19 === void 0 ? void 0 : _headerInfoAnnotation19.valueOf()) === true) {
          Log.warning("Warning: Property " + headerInfoAnnotation.Value.path + " is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!");
        }
        return true;
      } else {
        return false;
      }
    }
  }
  _exports.isHeaderStaticallyHidden = isHeaderStaticallyHidden;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/DataFieldHelper", ["sap/base/Log"],function(e){"use strict";var i={};function n(i){var n,l,o,d,a,r,v,u,s,f,g,c,U,I,H;if(i){switch(i.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":return t(i);case"com.sap.vocabularies.UI.v1.DataField":if(((n=i.annotations)===null||n===void 0?void 0:(l=n.UI)===null||l===void 0?void 0:(o=l.Hidden)===null||o===void 0?void 0:o.valueOf())===true){var h,p;if(i.annotations&&((h=i.annotations.UI)===null||h===void 0?void 0:(p=h.HiddenFilter)===null||p===void 0?void 0:p.valueOf())===true){e.warning("Warning: Property "+i.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else if(((d=i.Value)===null||d===void 0?void 0:(a=d.$target)===null||a===void 0?void 0:(r=a.annotations)===null||r===void 0?void 0:(v=r.UI)===null||v===void 0?void 0:(u=v.Hidden)===null||u===void 0?void 0:u.valueOf())===true){var F,y,b,w,O;if(((F=i.Value)===null||F===void 0?void 0:(y=F.$target)===null||y===void 0?void 0:(b=y.annotations)===null||b===void 0?void 0:(w=b.UI)===null||w===void 0?void 0:(O=w.HiddenFilter)===null||O===void 0?void 0:O.valueOf())===true){e.warning("Warning: Property "+i.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":const m=(s=i.Value)===null||s===void 0?void 0:(f=s.$target)===null||f===void 0?void 0:f.annotations;if((m===null||m===void 0?void 0:(g=m.UI)===null||g===void 0?void 0:(c=g.Hidden)===null||c===void 0?void 0:c.valueOf())===true){var $,V;if((m===null||m===void 0?void 0:($=m.UI)===null||$===void 0?void 0:(V=$.HiddenFilter)===null||V===void 0?void 0:V.valueOf())===true){e.warning("Warning: Property "+i.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":if(((U=i.annotations)===null||U===void 0?void 0:(I=U.UI)===null||I===void 0?void 0:(H=I.Hidden)===null||H===void 0?void 0:H.valueOf())===true){var P,W;if(i.annotations&&((P=i.annotations.UI)===null||P===void 0?void 0:(W=P.HiddenFilter)===null||W===void 0?void 0:W.valueOf())===true){e.warning("Warning: Property "+i.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}default:}}}i.isReferencePropertyStaticallyHidden=n;function t(i){var t,l,o;const d=i.Target.$target.term;switch(d){case"com.sap.vocabularies.UI.v1.Chart":let d;i.Target.$target.Measures.forEach(i=>{var n,t,l;if(((n=i.$target.annotations)===null||n===void 0?void 0:(t=n.UI)===null||t===void 0?void 0:(l=t.Hidden)===null||l===void 0?void 0:l.valueOf())===true){var o,a;e.warning("Warning: Measure attribute for Chart "+i.$target.name+" is statically hidden hence chart can't be rendered");if(i.$target.annotations&&((o=i.$target.annotations.UI)===null||o===void 0?void 0:(a=o.HiddenFilter)===null||a===void 0?void 0:a.valueOf())===true){e.warning("Warning: Property "+i.$target.name+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}d=true}});if(d===true){return true}else{return false}case"com.sap.vocabularies.UI.v1.ConnectedFields":if(i){var a,r,v;if(((a=i.annotations)===null||a===void 0?void 0:(r=a.UI)===null||r===void 0?void 0:(v=r.Hidden)===null||v===void 0?void 0:v.valueOf())===true){var u,s;if(i.annotations&&((u=i.annotations.UI)===null||u===void 0?void 0:(s=u.HiddenFilter)===null||s===void 0?void 0:s.valueOf())===true){e.warning("Warning: Property "+i.Target.$target.qualifier+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}}break;case"com.sap.vocabularies.UI.v1.FieldGroup":if(i){if(i.Target.$target.Data.every(e=>n(e)===true)){return true}else{return false}}break;case"com.sap.vocabularies.UI.v1.DataPoint":const U=i.Target.$target.Value.$target;if(((t=U.annotations)===null||t===void 0?void 0:(l=t.UI)===null||l===void 0?void 0:(o=l.Hidden)===null||o===void 0?void 0:o.valueOf())===true){var f,g,c;if(((f=U.annotations)===null||f===void 0?void 0:(g=f.UI)===null||g===void 0?void 0:(c=g.HiddenFilter)===null||c===void 0?void 0:c.valueOf())===true){e.warning("Warning: Property "+i.Target.$target.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}default:}}i.isAnnotationFieldStaticallyHidden=t;function l(i){if(i.targetObject){var n,t,l,o,d,a,r,v,u;const y=i.targetObject;if(y.annotations&&((n=y.annotations)===null||n===void 0?void 0:(t=n.UI)===null||t===void 0?void 0:(l=t.Hidden)===null||l===void 0?void 0:l.valueOf())===true){var s,f,g,c,U;if(((s=y.Value)===null||s===void 0?void 0:(f=s.$target)===null||f===void 0?void 0:(g=f.annotations)===null||g===void 0?void 0:(c=g.UI)===null||c===void 0?void 0:(U=c.HiddenFilter)===null||U===void 0?void 0:U.valueOf())===true){e.warning("Warning: Property "+y.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else if(y!==null&&y!==void 0&&(o=y.Value)!==null&&o!==void 0&&o.$target&&(y===null||y===void 0?void 0:(d=y.Value)===null||d===void 0?void 0:(a=d.$target)===null||a===void 0?void 0:(r=a.annotations)===null||r===void 0?void 0:(v=r.UI)===null||v===void 0?void 0:(u=v.Hidden)===null||u===void 0?void 0:u.valueOf())===true){var I,H,h,p,F;if((y===null||y===void 0?void 0:(I=y.Value)===null||I===void 0?void 0:(H=I.$target)===null||H===void 0?void 0:(h=H.annotations)===null||h===void 0?void 0:(p=h.UI)===null||p===void 0?void 0:(F=p.HiddenFilter)===null||F===void 0?void 0:F.valueOf())===true){e.warning("Warning: Property "+y.Value.path+" is set with both UI.Hidden and UI.HiddenFilter - please set only one of these! UI.HiddenFilter is ignored currently!")}return true}else{return false}}}i.isHeaderStaticallyHidden=l;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/ID-dbg", ["../../helpers/StableIdHelper"], function (StableIdHelper) {
  "use strict";

  var _exports = {};
  var generate = StableIdHelper.generate;
  const BASE_ID = ["fe"];

  /**
   * Shortcut to the stableIdHelper providing a "curry" like method where the last parameter is missing.
   *
   * @param sFixedPart
   * @returns A shortcut function with the fixed ID part
   */
  function createIDGenerator() {
    for (var _len = arguments.length, sFixedPart = new Array(_len), _key = 0; _key < _len; _key++) {
      sFixedPart[_key] = arguments[_key];
    }
    return function () {
      for (var _len2 = arguments.length, sIDPart = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        sIDPart[_key2] = arguments[_key2];
      }
      return generate(BASE_ID.concat(...sFixedPart, ...sIDPart));
    };
  }

  /**
   * Those are all helpers to centralize ID generation in the code for different elements
   */
  _exports.createIDGenerator = createIDGenerator;
  const getHeaderFacetID = createIDGenerator("HeaderFacet");
  _exports.getHeaderFacetID = getHeaderFacetID;
  const getHeaderFacetContainerID = createIDGenerator("HeaderFacetContainer");
  _exports.getHeaderFacetContainerID = getHeaderFacetContainerID;
  const getHeaderFacetFormID = createIDGenerator("HeaderFacet", "Form");
  _exports.getHeaderFacetFormID = getHeaderFacetFormID;
  const getCustomHeaderFacetID = createIDGenerator("HeaderFacetCustomContainer");
  _exports.getCustomHeaderFacetID = getCustomHeaderFacetID;
  const getEditableHeaderSectionID = createIDGenerator("EditableHeaderSection");
  _exports.getEditableHeaderSectionID = getEditableHeaderSectionID;
  const getSectionID = createIDGenerator("FacetSection");
  _exports.getSectionID = getSectionID;
  const getCustomSectionID = createIDGenerator("CustomSection");
  _exports.getCustomSectionID = getCustomSectionID;
  const getSubSectionID = createIDGenerator("FacetSubSection");
  _exports.getSubSectionID = getSubSectionID;
  const getCustomSubSectionID = createIDGenerator("CustomSubSection");
  _exports.getCustomSubSectionID = getCustomSubSectionID;
  const getSideContentID = createIDGenerator("SideContent");
  _exports.getSideContentID = getSideContentID;
  const getSideContentLayoutID = function (sSectionID) {
    return generate(["fe", sSectionID, "SideContentLayout"]);
  };
  _exports.getSideContentLayoutID = getSideContentLayoutID;
  const getFormID = createIDGenerator("Form");
  _exports.getFormID = getFormID;
  const getFormContainerID = createIDGenerator("FormContainer");
  _exports.getFormContainerID = getFormContainerID;
  const getFormStandardActionButtonID = function (sFormContainerId, sActionName) {
    return generate(["fe", "FormContainer", sFormContainerId, "StandardAction", sActionName]);
  };
  _exports.getFormStandardActionButtonID = getFormStandardActionButtonID;
  const getTableID = createIDGenerator("table");
  _exports.getTableID = getTableID;
  const getCustomTabID = createIDGenerator("CustomTab");
  _exports.getCustomTabID = getCustomTabID;
  const getFilterBarID = createIDGenerator("FilterBar");
  _exports.getFilterBarID = getFilterBarID;
  const getDynamicListReportID = function () {
    return "fe::ListReport";
  };
  _exports.getDynamicListReportID = getDynamicListReportID;
  const getIconTabBarID = createIDGenerator("TabMultipleMode");
  _exports.getIconTabBarID = getIconTabBarID;
  const getFilterVariantManagementID = function (sFilterID) {
    return generate([sFilterID, "VariantManagement"]);
  };
  _exports.getFilterVariantManagementID = getFilterVariantManagementID;
  const getChartID = createIDGenerator("Chart");
  _exports.getChartID = getChartID;
  const getCustomActionID = function (sActionID) {
    return generate(["CustomAction", sActionID]);
  };
  _exports.getCustomActionID = getCustomActionID;
  const getKPIID = createIDGenerator("KPI");
  _exports.getKPIID = getKPIID;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/ID", ["../../helpers/StableIdHelper"],function(t){"use strict";var e={};var n=t.generate;const o=["fe"];function r(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++){e[r]=arguments[r]}return function(){for(var t=arguments.length,r=new Array(t),a=0;a<t;a++){r[a]=arguments[a]}return n(o.concat(...e,...r))}}e.createIDGenerator=r;const a=r("HeaderFacet");e.getHeaderFacetID=a;const c=r("HeaderFacetContainer");e.getHeaderFacetContainerID=c;const i=r("HeaderFacet","Form");e.getHeaderFacetFormID=i;const s=r("HeaderFacetCustomContainer");e.getCustomHeaderFacetID=s;const u=r("EditableHeaderSection");e.getEditableHeaderSectionID=u;const g=r("FacetSection");e.getSectionID=g;const I=r("CustomSection");e.getCustomSectionID=I;const D=r("FacetSubSection");e.getSubSectionID=D;const d=r("CustomSubSection");e.getCustomSubSectionID=d;const C=r("SideContent");e.getSideContentID=C;const m=function(t){return n(["fe",t,"SideContentLayout"])};e.getSideContentLayoutID=m;const F=r("Form");e.getFormID=F;const S=r("FormContainer");e.getFormContainerID=S;const f=function(t,e){return n(["fe","FormContainer",t,"StandardAction",e])};e.getFormStandardActionButtonID=f;const l=r("table");e.getTableID=l;const b=r("CustomTab");e.getCustomTabID=b;const H=r("FilterBar");e.getFilterBarID=H;const p=function(){return"fe::ListReport"};e.getDynamicListReportID=p;const A=r("TabMultipleMode");e.getIconTabBarID=A;const h=function(t){return n([t,"VariantManagement"])};e.getFilterVariantManagementID=h;const y=r("Chart");e.getChartID=y;const T=function(t){return n(["CustomAction",t])};e.getCustomActionID=T;const v=r("KPI");e.getKPIID=v;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/InsightsHelpers-dbg", ["../ManifestSettings"], function (ManifestSettings) {
  "use strict";

  var _exports = {};
  var TemplateType = ManifestSettings.TemplateType;
  /**
   * Gets the boolean value for the 'visible' property of the 'AddCardToInsights' action.
   *
   * @param cardType
   * @param converterContext
   * @param visualizationPath
   * @param standardActionsContext
   * @returns Boolean value for the 'visible' property of the 'AddCardToInsights' action.
   */
  function getInsightsVisibility(cardType, converterContext, visualizationPath, standardActionsContext) {
    var _vizPathConfiguration;
    let tableManifestConfig, isResponsiveTable;
    const isMultiEntity = converterContext.getManifestWrapper().hasMultipleEntitySets();
    const isMultipleVisualizations = converterContext.getManifestWrapper().hasMultipleVisualizations();
    const viewConfig = converterContext.getManifestWrapper().getViewConfiguration();
    const isMultiTabs = viewConfig !== undefined && viewConfig.paths.length > 1 ? true : false;
    const templateBindingExpression = converterContext.getTemplateType() === TemplateType.ListReport;
    const vizPathConfiguration = converterContext.getManifestControlConfiguration(visualizationPath);
    const enableAddCardToInsights = cardType === "Analytical" ? (vizPathConfiguration === null || vizPathConfiguration === void 0 ? void 0 : vizPathConfiguration.enableAddCardToInsights) ?? true : (vizPathConfiguration === null || vizPathConfiguration === void 0 ? void 0 : (_vizPathConfiguration = vizPathConfiguration.tableSettings) === null || _vizPathConfiguration === void 0 ? void 0 : _vizPathConfiguration.enableAddCardToInsights) ?? true;
    if (cardType === "Table") {
      var _tableManifestConfig;
      tableManifestConfig = standardActionsContext === null || standardActionsContext === void 0 ? void 0 : standardActionsContext.tableManifestConfiguration;
      isResponsiveTable = ((_tableManifestConfig = tableManifestConfig) === null || _tableManifestConfig === void 0 ? void 0 : _tableManifestConfig.type) === "ResponsiveTable";
    }
    return enableAddCardToInsights && templateBindingExpression && !isMultiEntity && !isMultiTabs && (cardType === "Table" ? (isResponsiveTable ?? false) && !isMultipleVisualizations : true);
  }
  _exports.getInsightsVisibility = getInsightsVisibility;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/InsightsHelpers", ["../ManifestSettings"],function(t){"use strict";var e={};var i=t.TemplateType;function n(t,e,n,a){var s;let l,o;const r=e.getManifestWrapper().hasMultipleEntitySets();const u=e.getManifestWrapper().hasMultipleVisualizations();const d=e.getManifestWrapper().getViewConfiguration();const f=d!==undefined&&d.paths.length>1?true:false;const p=e.getTemplateType()===i.ListReport;const g=e.getManifestControlConfiguration(n);const v=t==="Analytical"?(g===null||g===void 0?void 0:g.enableAddCardToInsights)??true:(g===null||g===void 0?void 0:(s=g.tableSettings)===null||s===void 0?void 0:s.enableAddCardToInsights)??true;if(t==="Table"){var c;l=a===null||a===void 0?void 0:a.tableManifestConfiguration;o=((c=l)===null||c===void 0?void 0:c.type)==="ResponsiveTable"}return v&&p&&!r&&!f&&(t==="Table"?(o??false)&&!u:true)}e.getInsightsVisibility=n;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/IssueManager-dbg", [], function () {
  "use strict";

  var _exports = {};
  let IssueSeverity;
  (function (IssueSeverity) {
    IssueSeverity[IssueSeverity["High"] = 0] = "High";
    IssueSeverity[IssueSeverity["Low"] = 1] = "Low";
    IssueSeverity[IssueSeverity["Medium"] = 2] = "Medium";
  })(IssueSeverity || (IssueSeverity = {}));
  _exports.IssueSeverity = IssueSeverity;
  const IssueCategoryType = {
    Facets: {
      MissingID: "MissingID",
      UnSupportedLevel: "UnsupportedLevel"
    },
    AnnotationColumns: {
      InvalidKey: "InvalidKey"
    },
    Annotations: {
      IgnoredAnnotation: "IgnoredAnnotation"
    }
  };
  _exports.IssueCategoryType = IssueCategoryType;
  let IssueCategory;
  (function (IssueCategory) {
    IssueCategory["Annotation"] = "Annotation";
    IssueCategory["Template"] = "Template";
    IssueCategory["Manifest"] = "Manifest";
    IssueCategory["Facets"] = "Facets";
  })(IssueCategory || (IssueCategory = {}));
  _exports.IssueCategory = IssueCategory;
  const IssueType = {
    MISSING_CHART: "We couldn't find a chart annotation for the current entitySet, you should consider adding one.",
    MISSING_LINEITEM: "We couldn't find a line item annotation for the current entitySet, you should consider adding one.",
    MISSING_SELECTIONFIELD: "We couldn't find the defined selection field.",
    MALFORMED_DATAFIELD_FOR_IBN: {
      REQUIRESCONTEXT: "DataFieldForIntentBasedNavigation cannot use RequiresContext in the form or header.",
      INLINE: "DataFieldForIntentBasedNavigation cannot use Inline in the form or header.",
      DETERMINING: "DataFieldForIntentBasedNavigation cannot use Determining in the form or header."
    },
    MALFORMED_VISUALFILTERS: {
      VALUELIST: "We couldn't find the ValueList path provided in the manifest",
      PRESENTATIONVARIANT: "PresentationVariant is missing for the VisualFilters",
      CHART: "Chart is missing from the PV configured for the VisualFilters",
      VALUELISTCONFIG: "ValueList has not been configured inside the Visual Filter Settings",
      FilterRestrictions: "For VisualFilters, range expressions are not allowed"
    },
    FULLSCREENMODE_NOT_ON_LISTREPORT: "enableFullScreenMode is not supported on list report pages.",
    KPI_ISSUES: {
      KPI_NOT_FOUND: "Couldn't find KPI or SPV with qualifier ",
      KPI_DETAIL_NOT_FOUND: "Can't find proper datapoint or chart definition for KPI ",
      NO_ANALYTICS: "The following entitySet used in a KPI definition doesn't support $apply queries:",
      MAIN_PROPERTY_NOT_AGGREGATABLE: "Main property used in KPI cannot be aggregated "
    }
  };
  _exports.IssueType = IssueType;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/IssueManager", [],function(){"use strict";var e={};let n;(function(e){e[e["High"]=0]="High";e[e["Low"]=1]="Low";e[e["Medium"]=2]="Medium"})(n||(n={}));e.IssueSeverity=n;const t={Facets:{MissingID:"MissingID",UnSupportedLevel:"UnsupportedLevel"},AnnotationColumns:{InvalidKey:"InvalidKey"},Annotations:{IgnoredAnnotation:"IgnoredAnnotation"}};e.IssueCategoryType=t;let i;(function(e){e["Annotation"]="Annotation";e["Template"]="Template";e["Manifest"]="Manifest";e["Facets"]="Facets"})(i||(i={}));e.IssueCategory=i;const o={MISSING_CHART:"We couldn't find a chart annotation for the current entitySet, you should consider adding one.",MISSING_LINEITEM:"We couldn't find a line item annotation for the current entitySet, you should consider adding one.",MISSING_SELECTIONFIELD:"We couldn't find the defined selection field.",MALFORMED_DATAFIELD_FOR_IBN:{REQUIRESCONTEXT:"DataFieldForIntentBasedNavigation cannot use RequiresContext in the form or header.",INLINE:"DataFieldForIntentBasedNavigation cannot use Inline in the form or header.",DETERMINING:"DataFieldForIntentBasedNavigation cannot use Determining in the form or header."},MALFORMED_VISUALFILTERS:{VALUELIST:"We couldn't find the ValueList path provided in the manifest",PRESENTATIONVARIANT:"PresentationVariant is missing for the VisualFilters",CHART:"Chart is missing from the PV configured for the VisualFilters",VALUELISTCONFIG:"ValueList has not been configured inside the Visual Filter Settings",FilterRestrictions:"For VisualFilters, range expressions are not allowed"},FULLSCREENMODE_NOT_ON_LISTREPORT:"enableFullScreenMode is not supported on list report pages.",KPI_ISSUES:{KPI_NOT_FOUND:"Couldn't find KPI or SPV with qualifier ",KPI_DETAIL_NOT_FOUND:"Can't find proper datapoint or chart definition for KPI ",NO_ANALYTICS:"The following entitySet used in a KPI definition doesn't support $apply queries:",MAIN_PROPERTY_NOT_AGGREGATABLE:"Main property used in KPI cannot be aggregated "}};e.IssueType=o;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/Key-dbg", ["../../helpers/StableIdHelper"], function (StableIdHelper) {
  "use strict";

  var _exports = {};
  var getStableIdPartFromDataField = StableIdHelper.getStableIdPartFromDataField;
  /**
   * The KeyHelper is used for dealing with Key in the concern of the flexible programming model
   */
  let KeyHelper = /*#__PURE__*/function () {
    function KeyHelper() {}
    _exports.KeyHelper = KeyHelper;
    /**
     * Returns a generated key for DataFields to be used in the flexible programming model.
     *
     * @param dataField DataField to generate the key for
     * @returns Returns a through StableIdHelper generated key
     */
    KeyHelper.generateKeyFromDataField = function generateKeyFromDataField(dataField) {
      return getStableIdPartFromDataField(dataField, true);
    }

    /**
     * Throws a Error if any other character then aA-zZ, 0-9, ':', '_' or '-' is used.
     *
     * @param key String to check validity on
     */;
    KeyHelper.validateKey = function validateKey(key) {
      const pattern = /[^A-Za-z0-9_\-:]/;
      if (pattern.exec(key)) {
        throw new Error(`Invalid key: ${key} - only 'A-Za-z0-9_-:' are allowed`);
      }
    }

    /**
     * Returns the key for a selection field required for adaption.
     *
     * @param fullPropertyPath The full property path (without entityType)
     * @returns The key of the selection field
     */;
    KeyHelper.getSelectionFieldKeyFromPath = function getSelectionFieldKeyFromPath(fullPropertyPath) {
      return fullPropertyPath.replace(/([*+])?\//g, "::");
    }

    /**
     * Returns the path for a selection field required for adaption.
     *
     * @param selectionFieldKey The key of the selection field
     * @returns The full property path
     */;
    KeyHelper.getPathFromSelectionFieldKey = function getPathFromSelectionFieldKey(selectionFieldKey) {
      return selectionFieldKey.replace(/::/g, "/");
    };
    return KeyHelper;
  }();
  _exports.KeyHelper = KeyHelper;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/Key", ["../../helpers/StableIdHelper"],function(e){"use strict";var t={};var r=e.getStableIdPartFromDataField;let n=function(){function e(){}t.KeyHelper=e;e.generateKeyFromDataField=function e(t){return r(t,true)};e.validateKey=function e(t){const r=/[^A-Za-z0-9_\-:]/;if(r.exec(t)){throw new Error(`Invalid key: ${t} - only 'A-Za-z0-9_-:' are allowed`)}};e.getSelectionFieldKeyFromPath=function e(t){return t.replace(/([*+])?\//g,"::")};e.getPathFromSelectionFieldKey=function e(t){return t.replace(/::/g,"/")};return e}();t.KeyHelper=n;return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/SelectionVariantHelper-dbg", [], function () {
  "use strict";

  var _exports = {};
  function getRangeDefinition(range, propertyType) {
    let operator;
    const bInclude = range.Sign === "UI.SelectionRangeSignType/I" ? true : false;
    switch (range.Option) {
      case "UI.SelectionRangeOptionType/BT":
        operator = bInclude ? "BT" : "NB";
        break;
      case "UI.SelectionRangeOptionType/CP":
        operator = bInclude ? "Contains" : "NotContains";
        break;
      case "UI.SelectionRangeOptionType/EQ":
        operator = bInclude ? "EQ" : "NE";
        break;
      case "UI.SelectionRangeOptionType/GE":
        operator = bInclude ? "GE" : "LT";
        break;
      case "UI.SelectionRangeOptionType/GT":
        operator = bInclude ? "GT" : "LE";
        break;
      case "UI.SelectionRangeOptionType/LE":
        operator = bInclude ? "LE" : "GT";
        break;
      case "UI.SelectionRangeOptionType/LT":
        operator = bInclude ? "LT" : "GE";
        break;
      case "UI.SelectionRangeOptionType/NB":
        operator = bInclude ? "NB" : "BT";
        break;
      case "UI.SelectionRangeOptionType/NE":
        operator = bInclude ? "NE" : "EQ";
        break;
      case "UI.SelectionRangeOptionType/NP":
        operator = bInclude ? "NotContains" : "Contains";
        break;
      default:
        operator = "EQ";
    }
    return {
      operator: operator,
      rangeLow: propertyType && propertyType.indexOf("Edm.Date") === 0 ? new Date(range.Low) : range.Low,
      rangeHigh: range.High && propertyType && propertyType.indexOf("Edm.Date") === 0 ? new Date(range.High) : range.High
    };
  }

  /**
   * Parses a SelectionVariant annotations and creates the corresponding filter definitions.
   *
   * @param selectionVariant SelectionVariant annotation
   * @returns Returns an array of filter definitions corresponding to the SelectionVariant.
   */
  function getFilterDefinitionsFromSelectionVariant(selectionVariant) {
    const aFilterDefs = [];
    if (selectionVariant.SelectOptions) {
      selectionVariant.SelectOptions.forEach(selectOption => {
        if (selectOption.PropertyName && selectOption.Ranges.length > 0) {
          aFilterDefs.push({
            propertyPath: selectOption.PropertyName.value,
            propertyType: selectOption.PropertyName.$target.type,
            ranges: selectOption.Ranges.map(range => {
              var _selectOption$Propert;
              return getRangeDefinition(range, (_selectOption$Propert = selectOption.PropertyName) === null || _selectOption$Propert === void 0 ? void 0 : _selectOption$Propert.$target.type);
            })
          });
        }
      });
    }
    return aFilterDefs;
  }
  _exports.getFilterDefinitionsFromSelectionVariant = getFilterDefinitionsFromSelectionVariant;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/helpers/SelectionVariantHelper", [],function(){"use strict";var e={};function n(e,n){let t;const a=e.Sign==="UI.SelectionRangeSignType/I"?true:false;switch(e.Option){case"UI.SelectionRangeOptionType/BT":t=a?"BT":"NB";break;case"UI.SelectionRangeOptionType/CP":t=a?"Contains":"NotContains";break;case"UI.SelectionRangeOptionType/EQ":t=a?"EQ":"NE";break;case"UI.SelectionRangeOptionType/GE":t=a?"GE":"LT";break;case"UI.SelectionRangeOptionType/GT":t=a?"GT":"LE";break;case"UI.SelectionRangeOptionType/LE":t=a?"LE":"GT";break;case"UI.SelectionRangeOptionType/LT":t=a?"LT":"GE";break;case"UI.SelectionRangeOptionType/NB":t=a?"NB":"BT";break;case"UI.SelectionRangeOptionType/NE":t=a?"NE":"EQ";break;case"UI.SelectionRangeOptionType/NP":t=a?"NotContains":"Contains";break;default:t="EQ"}return{operator:t,rangeLow:n&&n.indexOf("Edm.Date")===0?new Date(e.Low):e.Low,rangeHigh:e.High&&n&&n.indexOf("Edm.Date")===0?new Date(e.High):e.High}}function t(e){const t=[];if(e.SelectOptions){e.SelectOptions.forEach(e=>{if(e.PropertyName&&e.Ranges.length>0){t.push({propertyPath:e.PropertyName.value,propertyType:e.PropertyName.$target.type,ranges:e.Ranges.map(t=>{var a;return n(t,(a=e.PropertyName)===null||a===void 0?void 0:a.$target.type)})})}})}return t}e.getFilterDefinitionsFromSelectionVariant=t;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/objectPage/FormMenuActions-dbg", ["sap/fe/core/converters/helpers/Key"], function (Key) {
  "use strict";

  var _exports = {};
  var KeyHelper = Key.KeyHelper;
  var ActionType;
  (function (ActionType) {
    ActionType["Default"] = "Default";
  })(ActionType || (ActionType = {}));
  const getVisibilityEnablementFormMenuActions = actions => {
    let menuActionVisible, menuActionVisiblePaths;
    actions.forEach(menuActions => {
      var _menuActions$menu;
      menuActionVisible = false;
      menuActionVisiblePaths = [];
      if (menuActions !== null && menuActions !== void 0 && (_menuActions$menu = menuActions.menu) !== null && _menuActions$menu !== void 0 && _menuActions$menu.length) {
        var _menuActions$menu2;
        menuActions === null || menuActions === void 0 ? void 0 : (_menuActions$menu2 = menuActions.menu) === null || _menuActions$menu2 === void 0 ? void 0 : _menuActions$menu2.forEach(menuItem => {
          const menuItemVisible = menuItem.visible;
          if (!menuActionVisible) {
            if (menuItemVisible && typeof menuItemVisible === "boolean" || menuItemVisible.valueOf() === "true") {
              menuActionVisible = true;
            } else if (menuItemVisible && menuItemVisible.valueOf() !== "false") {
              menuActionVisiblePaths.push(menuItemVisible.valueOf());
            }
          }
        });
        if (menuActionVisiblePaths.length) {
          menuActions.visible = menuActionVisiblePaths;
        } else {
          menuActions.visible = menuActionVisible.toString();
        }
      }
    });
    return actions;
  };
  _exports.getVisibilityEnablementFormMenuActions = getVisibilityEnablementFormMenuActions;
  const mergeFormActions = (source, target) => {
    for (const key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
    return source;
  };
  _exports.mergeFormActions = mergeFormActions;
  const getFormHiddenActions = (facetDefinition, converterContext) => {
    var _converterContext$get, _converterContext$get2;
    const formActions = getFormActions(facetDefinition, converterContext) || [],
      annotations = converterContext === null || converterContext === void 0 ? void 0 : (_converterContext$get = converterContext.getEntityType()) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.annotations) === null || _converterContext$get2 === void 0 ? void 0 : _converterContext$get2.UI;
    const hiddenFormActions = [];
    for (const property in annotations) {
      var _annotations$property, _annotations$property3, _annotations$property4;
      if (((_annotations$property = annotations[property]) === null || _annotations$property === void 0 ? void 0 : _annotations$property.$Type) === "com.sap.vocabularies.UI.v1.FieldGroupType") {
        var _annotations$property2;
        (_annotations$property2 = annotations[property]) === null || _annotations$property2 === void 0 ? void 0 : _annotations$property2.Data.forEach(dataField => {
          if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && formActions.hasOwnProperty(`DataFieldForAction::${dataField.Action}`)) {
            var _dataField$annotation, _dataField$annotation2, _dataField$annotation3;
            if ((dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : (_dataField$annotation3 = _dataField$annotation2.Hidden) === null || _dataField$annotation3 === void 0 ? void 0 : _dataField$annotation3.valueOf()) === true) {
              hiddenFormActions.push({
                type: ActionType.Default,
                key: KeyHelper.generateKeyFromDataField(dataField)
              });
            }
          } else if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && formActions.hasOwnProperty(`DataFieldForIntentBasedNavigation::${dataField.Action}`)) {
            var _dataField$annotation4, _dataField$annotation5, _dataField$annotation6;
            if ((dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation4 = dataField.annotations) === null || _dataField$annotation4 === void 0 ? void 0 : (_dataField$annotation5 = _dataField$annotation4.UI) === null || _dataField$annotation5 === void 0 ? void 0 : (_dataField$annotation6 = _dataField$annotation5.Hidden) === null || _dataField$annotation6 === void 0 ? void 0 : _dataField$annotation6.valueOf()) === true) {
              hiddenFormActions.push({
                type: ActionType.Default,
                key: KeyHelper.generateKeyFromDataField(dataField)
              });
            }
          }
        });
      } else if (((_annotations$property3 = annotations[property]) === null || _annotations$property3 === void 0 ? void 0 : _annotations$property3.term) === "com.sap.vocabularies.UI.v1.Identification" || ((_annotations$property4 = annotations[property]) === null || _annotations$property4 === void 0 ? void 0 : _annotations$property4.term) === "@com.sap.vocabularies.UI.v1.StatusInfo") {
        var _annotations$property5;
        (_annotations$property5 = annotations[property]) === null || _annotations$property5 === void 0 ? void 0 : _annotations$property5.forEach(dataField => {
          if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && formActions.hasOwnProperty(`DataFieldForAction::${dataField.Action}`)) {
            var _dataField$annotation7, _dataField$annotation8, _dataField$annotation9;
            if ((dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation7 = dataField.annotations) === null || _dataField$annotation7 === void 0 ? void 0 : (_dataField$annotation8 = _dataField$annotation7.UI) === null || _dataField$annotation8 === void 0 ? void 0 : (_dataField$annotation9 = _dataField$annotation8.Hidden) === null || _dataField$annotation9 === void 0 ? void 0 : _dataField$annotation9.valueOf()) === true) {
              hiddenFormActions.push({
                type: ActionType.Default,
                key: KeyHelper.generateKeyFromDataField(dataField)
              });
            }
          } else if (dataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && formActions.hasOwnProperty(`DataFieldForIntentBasedNavigation::${dataField.Action}`)) {
            var _dataField$annotation10, _dataField$annotation11, _dataField$annotation12;
            if ((dataField === null || dataField === void 0 ? void 0 : (_dataField$annotation10 = dataField.annotations) === null || _dataField$annotation10 === void 0 ? void 0 : (_dataField$annotation11 = _dataField$annotation10.UI) === null || _dataField$annotation11 === void 0 ? void 0 : (_dataField$annotation12 = _dataField$annotation11.Hidden) === null || _dataField$annotation12 === void 0 ? void 0 : _dataField$annotation12.valueOf()) === true) {
              hiddenFormActions.push({
                type: ActionType.Default,
                key: KeyHelper.generateKeyFromDataField(dataField)
              });
            }
          }
        });
      }
    }
    return hiddenFormActions;
  };
  _exports.getFormHiddenActions = getFormHiddenActions;
  const getFormActions = (facetDefinition, converterContext) => {
    const manifestWrapper = converterContext.getManifestWrapper();
    let targetValue, manifestFormContainer;
    let actions = {};
    if ((facetDefinition === null || facetDefinition === void 0 ? void 0 : facetDefinition.$Type) === "com.sap.vocabularies.UI.v1.CollectionFacet") {
      if (facetDefinition !== null && facetDefinition !== void 0 && facetDefinition.Facets) {
        facetDefinition === null || facetDefinition === void 0 ? void 0 : facetDefinition.Facets.forEach(facet => {
          var _facet$Target, _manifestFormContaine;
          targetValue = facet === null || facet === void 0 ? void 0 : (_facet$Target = facet.Target) === null || _facet$Target === void 0 ? void 0 : _facet$Target.value;
          manifestFormContainer = manifestWrapper.getFormContainer(targetValue);
          if ((_manifestFormContaine = manifestFormContainer) !== null && _manifestFormContaine !== void 0 && _manifestFormContaine.actions) {
            var _manifestFormContaine2;
            for (const actionKey in manifestFormContainer.actions) {
              // store the correct facet an action is belonging to for the case it's an inline form action
              manifestFormContainer.actions[actionKey].facetName = facet.fullyQualifiedName;
            }
            actions = mergeFormActions((_manifestFormContaine2 = manifestFormContainer) === null || _manifestFormContaine2 === void 0 ? void 0 : _manifestFormContaine2.actions, actions);
          }
        });
      }
    } else if ((facetDefinition === null || facetDefinition === void 0 ? void 0 : facetDefinition.$Type) === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
      var _facetDefinition$Targ, _manifestFormContaine3;
      targetValue = facetDefinition === null || facetDefinition === void 0 ? void 0 : (_facetDefinition$Targ = facetDefinition.Target) === null || _facetDefinition$Targ === void 0 ? void 0 : _facetDefinition$Targ.value;
      manifestFormContainer = manifestWrapper.getFormContainer(targetValue);
      if ((_manifestFormContaine3 = manifestFormContainer) !== null && _manifestFormContaine3 !== void 0 && _manifestFormContaine3.actions) {
        for (const actionKey in manifestFormContainer.actions) {
          // store the correct facet an action is belonging to for the case it's an inline form action
          manifestFormContainer.actions[actionKey].facetName = facetDefinition.fullyQualifiedName;
        }
        actions = manifestFormContainer.actions;
      }
    }
    return actions;
  };
  _exports.getFormActions = getFormActions;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/objectPage/FormMenuActions", ["sap/fe/core/converters/helpers/Key"],function(i){"use strict";var o={};var e=i.KeyHelper;var a;(function(i){i["Default"]="Default"})(a||(a={}));const n=i=>{let o,e;i.forEach(i=>{var a;o=false;e=[];if(i!==null&&i!==void 0&&(a=i.menu)!==null&&a!==void 0&&a.length){var n;i===null||i===void 0?void 0:(n=i.menu)===null||n===void 0?void 0:n.forEach(i=>{const a=i.visible;if(!o){if(a&&typeof a==="boolean"||a.valueOf()==="true"){o=true}else if(a&&a.valueOf()!=="false"){e.push(a.valueOf())}}});if(e.length){i.visible=e}else{i.visible=o.toString()}}});return i};o.getVisibilityEnablementFormMenuActions=n;const l=(i,o)=>{for(const e in i){if(i.hasOwnProperty(e)){o[e]=i[e]}}return i};o.mergeFormActions=l;const t=(i,o)=>{var n,l;const t=v(i,o)||[],d=o===null||o===void 0?void 0:(n=o.getEntityType())===null||n===void 0?void 0:(l=n.annotations)===null||l===void 0?void 0:l.UI;const r=[];for(const i in d){var u,s,c;if(((u=d[i])===null||u===void 0?void 0:u.$Type)==="com.sap.vocabularies.UI.v1.FieldGroupType"){var f;(f=d[i])===null||f===void 0?void 0:f.Data.forEach(i=>{if(i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"&&t.hasOwnProperty(`DataFieldForAction::${i.Action}`)){var o,n,l;if((i===null||i===void 0?void 0:(o=i.annotations)===null||o===void 0?void 0:(n=o.UI)===null||n===void 0?void 0:(l=n.Hidden)===null||l===void 0?void 0:l.valueOf())===true){r.push({type:a.Default,key:e.generateKeyFromDataField(i)})}}else if(i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&t.hasOwnProperty(`DataFieldForIntentBasedNavigation::${i.Action}`)){var v,d,u;if((i===null||i===void 0?void 0:(v=i.annotations)===null||v===void 0?void 0:(d=v.UI)===null||d===void 0?void 0:(u=d.Hidden)===null||u===void 0?void 0:u.valueOf())===true){r.push({type:a.Default,key:e.generateKeyFromDataField(i)})}}})}else if(((s=d[i])===null||s===void 0?void 0:s.term)==="com.sap.vocabularies.UI.v1.Identification"||((c=d[i])===null||c===void 0?void 0:c.term)==="@com.sap.vocabularies.UI.v1.StatusInfo"){var p;(p=d[i])===null||p===void 0?void 0:p.forEach(i=>{if(i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"&&t.hasOwnProperty(`DataFieldForAction::${i.Action}`)){var o,n,l;if((i===null||i===void 0?void 0:(o=i.annotations)===null||o===void 0?void 0:(n=o.UI)===null||n===void 0?void 0:(l=n.Hidden)===null||l===void 0?void 0:l.valueOf())===true){r.push({type:a.Default,key:e.generateKeyFromDataField(i)})}}else if(i.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&t.hasOwnProperty(`DataFieldForIntentBasedNavigation::${i.Action}`)){var v,d,u;if((i===null||i===void 0?void 0:(v=i.annotations)===null||v===void 0?void 0:(d=v.UI)===null||d===void 0?void 0:(u=d.Hidden)===null||u===void 0?void 0:u.valueOf())===true){r.push({type:a.Default,key:e.generateKeyFromDataField(i)})}}})}}return r};o.getFormHiddenActions=t;const v=(i,o)=>{const e=o.getManifestWrapper();let a,n;let t={};if((i===null||i===void 0?void 0:i.$Type)==="com.sap.vocabularies.UI.v1.CollectionFacet"){if(i!==null&&i!==void 0&&i.Facets){i===null||i===void 0?void 0:i.Facets.forEach(i=>{var o,v;a=i===null||i===void 0?void 0:(o=i.Target)===null||o===void 0?void 0:o.value;n=e.getFormContainer(a);if((v=n)!==null&&v!==void 0&&v.actions){var d;for(const o in n.actions){n.actions[o].facetName=i.fullyQualifiedName}t=l((d=n)===null||d===void 0?void 0:d.actions,t)}})}}else if((i===null||i===void 0?void 0:i.$Type)==="com.sap.vocabularies.UI.v1.ReferenceFacet"){var v,d;a=i===null||i===void 0?void 0:(v=i.Target)===null||v===void 0?void 0:v.value;n=e.getFormContainer(a);if((d=n)!==null&&d!==void 0&&d.actions){for(const o in n.actions){n.actions[o].facetName=i.fullyQualifiedName}t=n.actions}}return t};o.getFormActions=v;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/objectPage/HeaderAndFooterAction-dbg", ["sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/converters/helpers/Key", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/ui/core/Core", "../helpers/BindingHelper", "../ManifestSettings"], function (Action, ConfigurableObject, Key, BindingToolkit, ModelHelper, TypeGuards, DataModelPathHelper, Core, BindingHelper, ManifestSettings) {
  "use strict";

  var _exports = {};
  var ActionType = ManifestSettings.ActionType;
  var UI = BindingHelper.UI;
  var singletonPathVisitor = BindingHelper.singletonPathVisitor;
  var Draft = BindingHelper.Draft;
  var isPathDeletable = DataModelPathHelper.isPathDeletable;
  var isEntitySet = TypeGuards.isEntitySet;
  var pathInModel = BindingToolkit.pathInModel;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var fn = BindingToolkit.fn;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var KeyHelper = Key.KeyHelper;
  var Placement = ConfigurableObject.Placement;
  var getSemanticObjectMapping = Action.getSemanticObjectMapping;
  var getEnabledForAnnotationAction = Action.getEnabledForAnnotationAction;
  var getCopyAction = Action.getCopyAction;
  var dataFieldIsCopyAction = Action.dataFieldIsCopyAction;
  var ButtonType = Action.ButtonType;
  /**
   * Retrieves all the data field for actions for the identification annotation
   * They must be
   * - Not statically hidden
   * - Either linked to an Unbound action or to an action which has an OperationAvailable that is not set to false statically.
   *
   * @param entityType The current entity type
   * @param isDeterminingAction The flag which denotes whether or not the action is a determining action
   * @returns An array of DataField for action respecting the input parameter 'isDeterminingAction'
   */
  function getIdentificationDataFieldForActions(entityType, isDeterminingAction) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;
    return ((_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.Identification) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.filter(identificationDataField => {
      var _identificationDataFi, _identificationDataFi2, _identificationDataFi3, _identificationDataFi4, _identificationDataFi5, _identificationDataFi6, _identificationDataFi7, _identificationDataFi8, _identificationDataFi9, _identificationDataFi10;
      return ((_identificationDataFi = identificationDataField.annotations) === null || _identificationDataFi === void 0 ? void 0 : (_identificationDataFi2 = _identificationDataFi.UI) === null || _identificationDataFi2 === void 0 ? void 0 : (_identificationDataFi3 = _identificationDataFi2.Hidden) === null || _identificationDataFi3 === void 0 ? void 0 : _identificationDataFi3.valueOf()) !== true && identificationDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAction" && Boolean((_identificationDataFi4 = identificationDataField.Determining) === null || _identificationDataFi4 === void 0 ? void 0 : _identificationDataFi4.valueOf()) === isDeterminingAction && (((_identificationDataFi5 = identificationDataField.ActionTarget) === null || _identificationDataFi5 === void 0 ? void 0 : (_identificationDataFi6 = _identificationDataFi5.isBound) === null || _identificationDataFi6 === void 0 ? void 0 : _identificationDataFi6.valueOf()) !== true || (identificationDataField === null || identificationDataField === void 0 ? void 0 : (_identificationDataFi7 = identificationDataField.ActionTarget) === null || _identificationDataFi7 === void 0 ? void 0 : (_identificationDataFi8 = _identificationDataFi7.annotations) === null || _identificationDataFi8 === void 0 ? void 0 : (_identificationDataFi9 = _identificationDataFi8.Core) === null || _identificationDataFi9 === void 0 ? void 0 : (_identificationDataFi10 = _identificationDataFi9.OperationAvailable) === null || _identificationDataFi10 === void 0 ? void 0 : _identificationDataFi10.valueOf()) !== false) ? true : false;
    })) || [];
  }

  /**
   * Retrieve all the IBN actions for the identification annotation.
   * They must be
   * - Not statically hidden.
   *
   * @param entityType The current entitytype
   * @param isDeterminingAction Whether or not the action should be determining
   * @returns An array of data field for action respecting the isDeterminingAction property.
   */
  _exports.getIdentificationDataFieldForActions = getIdentificationDataFieldForActions;
  function getIdentificationDataFieldForIBNActions(entityType, isDeterminingAction) {
    var _entityType$annotatio4, _entityType$annotatio5, _entityType$annotatio6;
    return ((_entityType$annotatio4 = entityType.annotations) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.Identification) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.filter(identificationDataField => {
      var _identificationDataFi11, _identificationDataFi12, _identificationDataFi13, _identificationDataFi14;
      return ((_identificationDataFi11 = identificationDataField.annotations) === null || _identificationDataFi11 === void 0 ? void 0 : (_identificationDataFi12 = _identificationDataFi11.UI) === null || _identificationDataFi12 === void 0 ? void 0 : (_identificationDataFi13 = _identificationDataFi12.Hidden) === null || _identificationDataFi13 === void 0 ? void 0 : _identificationDataFi13.valueOf()) !== true && identificationDataField.$Type === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation" && Boolean((_identificationDataFi14 = identificationDataField.Determining) === null || _identificationDataFi14 === void 0 ? void 0 : _identificationDataFi14.valueOf()) === isDeterminingAction ? true : false;
    })) || [];
  }
  const IMPORTANT_CRITICALITIES = ["UI.CriticalityType/VeryPositive", "UI.CriticalityType/Positive", "UI.CriticalityType/Negative", "UI.CriticalityType/VeryNegative"];

  /**
   * Method to determine the 'visible' property binding for the Delete button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param deleteHidden The value of the UI.DeleteHidden annotation on the entity set / type.
   * @returns The binding expression for the 'visible' property of the Delete button.
   */
  _exports.IMPORTANT_CRITICALITIES = IMPORTANT_CRITICALITIES;
  function getDeleteButtonVisibility(converterContext, deleteHidden) {
    const dataModelObjectPath = converterContext.getDataModelObjectPath(),
      visitedNavigationPaths = dataModelObjectPath.navigationProperties.map(navProp => navProp.name),
      // Set absolute binding path for Singleton references, otherwise the configured annotation path itself.
      // For e.g. /com.sap.namespace.EntityContainer/Singleton/Property to /Singleton/Property
      deleteHiddenExpression = getExpressionFromAnnotation(deleteHidden, visitedNavigationPaths, undefined, path => singletonPathVisitor(path, converterContext.getConvertedTypes(), [])),
      manifestWrapper = converterContext.getManifestWrapper(),
      viewLevel = manifestWrapper.getViewLevel(),
      // Delete button is visible
      // In OP 		-->  when not in edit mode
      // In sub-OP 	-->  when in edit mode
      editableExpression = viewLevel > 1 ? UI.IsEditable : not(UI.IsEditable);

    // If UI.DeleteHidden annotation on entity set or type is either not defined or explicitly set to false,
    // Delete button is visible based on editableExpression.
    // else,
    // Delete button is visible based on both annotation path and editableExpression.
    return ifElse(deleteHidden === undefined || deleteHidden.valueOf() === false, editableExpression, and(editableExpression, equal(deleteHiddenExpression, false)));
  }

  /**
   * Method to determine the 'enabled' property binding for the Delete button on an object page.
   *
   * @param isDeletable The delete restriction configured
   * @param isParentDeletable The delete restriction configured on the parent entity
   * @param converterContext
   * @returns The binding expression for the 'enabled' property of the Delete button
   */
  _exports.getDeleteButtonVisibility = getDeleteButtonVisibility;
  function getDeleteButtonEnabled(isDeletable, isParentDeletable, converterContext) {
    const entitySet = converterContext.getEntitySet(),
      isDraftRoot = ModelHelper.isDraftRoot(entitySet);
    let ret = ifElse(isParentDeletable !== undefined, isParentDeletable, ifElse(isDeletable !== undefined, equal(getExpressionFromAnnotation(isDeletable), true), constant(true)));

    // delete should be disabled for Locked objects
    ret = isDraftRoot ? and(ret, not(pathInModel("DraftAdministrativeData/InProcessByUser"))) : ret;
    return ret;
  }

  /**
   * Method to determine the 'visible' property binding for the Edit button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param rootUpdateHidden The value of the UI.UpdateHidden annotation on the entity set / type.
   * @param rootConverterContext
   * @param updateHidden
   * @param viewLevel
   * @returns The binding expression for the 'visible' property of the Edit button.
   */
  _exports.getDeleteButtonEnabled = getDeleteButtonEnabled;
  function getEditButtonVisibility(converterContext, rootUpdateHidden, rootConverterContext, updateHidden, viewLevel) {
    const rootEntitySet = rootConverterContext === null || rootConverterContext === void 0 ? void 0 : rootConverterContext.getEntitySet(),
      entitySet = converterContext.getEntitySet(),
      isFCLEnabled = converterContext.getManifestWrapper().isFclEnabled();
    let isDraftEnabled;
    const rootUpdateHiddenExpression = getHiddenExpression(rootConverterContext, rootUpdateHidden);
    if (viewLevel && viewLevel > 1) {
      // if viewlevel > 1 check if node is draft enabled
      isDraftEnabled = ModelHelper.isDraftNode(entitySet);
    } else {
      isDraftEnabled = ModelHelper.isDraftRoot(rootEntitySet);
    }
    const updateHiddenExpression = getHiddenExpression(rootConverterContext, updateHidden);
    const notEditableExpression = not(UI.IsEditable);

    // If UI.UpdateHidden annotation on entity set or type is either not defined or explicitly set to false,
    // Edit button is visible in display mode.
    // else,
    // Edit button is visible based on both annotation path and in display mode.
    const resultantExpression = ifElse(viewLevel > 1, ifElse(updateHidden === undefined || updateHidden.valueOf() === false, and(notEditableExpression, equal(pathInModel("rootEditVisible", "internal"), true), ifElse(isFCLEnabled, equal(pathInModel("/showEditButton", "fclhelper"), true), true)), and(notEditableExpression, equal(updateHiddenExpression, false), equal(pathInModel("rootEditVisible", "internal"), true), ifElse(isFCLEnabled, equal(pathInModel("/showEditButton", "fclhelper"), true), true))), ifElse(rootUpdateHidden === undefined || rootUpdateHidden.valueOf() === false, notEditableExpression, and(notEditableExpression, equal(rootUpdateHiddenExpression, false))));
    return ifElse(isDraftEnabled, and(resultantExpression, Draft.HasNoDraftForCurrentUser), resultantExpression);
  }
  _exports.getEditButtonVisibility = getEditButtonVisibility;
  function getHiddenExpression(converterContext, updateHidden) {
    const dataModelObjectPath = converterContext.getDataModelObjectPath(),
      visitedNavigationPaths = dataModelObjectPath.navigationProperties.map(navProp => navProp.name),
      // Set absolute binding path for Singleton references, otherwise the configured annotation path itself.
      // For e.g. /com.sap.namespace.EntityContainer/Singleton/Property to /Singleton/Property
      updateHiddenExpression = getExpressionFromAnnotation(updateHidden, visitedNavigationPaths, undefined, path => singletonPathVisitor(path, converterContext.getConvertedTypes(), visitedNavigationPaths));
    return updateHiddenExpression;
  }
  /**
   * Method to determine the 'enabled' property binding for the Edit button on an object page.
   *
   * @param converterContext Instance of the converter context.
   * @param updateRestrictions
   * @param viewLevel
   * @returns The binding expression for the 'enabled' property of the Edit button.
   */
  _exports.getHiddenExpression = getHiddenExpression;
  function getEditButtonEnabled(converterContext, updateRestrictions, viewLevel) {
    const entitySet = converterContext.getEntitySet(),
      isDraftRoot = ModelHelper.isDraftRoot(entitySet),
      isSticky = ModelHelper.isSticky(entitySet);
    let editActionName;
    if (isDraftRoot && isEntitySet(entitySet)) {
      var _entitySet$annotation, _entitySet$annotation2;
      editActionName = (_entitySet$annotation = entitySet.annotations.Common) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.DraftRoot) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.EditAction;
    } else if (isSticky && isEntitySet(entitySet)) {
      var _entitySet$annotation3, _entitySet$annotation4;
      editActionName = (_entitySet$annotation3 = entitySet.annotations.Session) === null || _entitySet$annotation3 === void 0 ? void 0 : (_entitySet$annotation4 = _entitySet$annotation3.StickySessionSupported) === null || _entitySet$annotation4 === void 0 ? void 0 : _entitySet$annotation4.EditAction;
    }
    if (editActionName) {
      var _editAction$annotatio, _editAction$annotatio2;
      const editActionAnnotationPath = converterContext.getAbsoluteAnnotationPath(editActionName);
      const editAction = converterContext.resolveAbsolutePath(editActionAnnotationPath).target;
      if ((editAction === null || editAction === void 0 ? void 0 : (_editAction$annotatio = editAction.annotations) === null || _editAction$annotatio === void 0 ? void 0 : (_editAction$annotatio2 = _editAction$annotatio.Core) === null || _editAction$annotatio2 === void 0 ? void 0 : _editAction$annotatio2.OperationAvailable) === null) {
        // We disabled action advertisement but kept it in the code for the time being
        //return "{= ${#" + editActionName + "} ? true : false }";
      } else if (viewLevel > 1) {
        // Edit button is enabled based on the update restrictions of the sub-OP
        if (updateRestrictions !== undefined) {
          return compileExpression(and(equal(getExpressionFromAnnotation(updateRestrictions), true), equal(pathInModel("rootEditEnabled", "internal"), true)));
        } else {
          return compileExpression(equal(pathInModel("rootEditEnabled", "internal"), true));
        }
      } else {
        return getEnabledForAnnotationAction(converterContext, editAction ?? undefined);
      }
    }
    return "true";
  }
  _exports.getEditButtonEnabled = getEditButtonEnabled;
  function getHeaderDefaultActions(converterContext) {
    var _entitySet$annotation5, _entitySet$annotation6, _entitySet$annotation7, _entitySet$annotation8, _entityDeleteRestrict;
    const sContextPath = converterContext.getContextPath();
    const rootEntitySetPath = ModelHelper.getRootEntitySetPath(sContextPath);
    const rootConverterContext = converterContext.getConverterContextFor("/" + rootEntitySetPath);
    const entitySet = converterContext.getEntitySet(),
      entityType = converterContext.getEntityType(),
      rootEntitySet = rootConverterContext.getEntitySet(),
      rootEntityType = rootConverterContext.getEntityType(),
      stickySessionSupported = ModelHelper.getStickySession(rootEntitySet),
      //for sticky app
      draftRoot = ModelHelper.getDraftRoot(rootEntitySet),
      //entitySet && entitySet.annotations.Common?.DraftRoot,
      draftNode = ModelHelper.getDraftNode(rootEntitySet),
      entityDeleteRestrictions = entitySet && ((_entitySet$annotation5 = entitySet.annotations) === null || _entitySet$annotation5 === void 0 ? void 0 : (_entitySet$annotation6 = _entitySet$annotation5.Capabilities) === null || _entitySet$annotation6 === void 0 ? void 0 : _entitySet$annotation6.DeleteRestrictions),
      rootUpdateHidden = ModelHelper.isUpdateHidden(rootEntitySet, rootEntityType),
      updateHidden = rootEntitySet && isEntitySet(rootEntitySet) && (rootUpdateHidden === null || rootUpdateHidden === void 0 ? void 0 : rootUpdateHidden.valueOf()),
      dataModelObjectPath = converterContext.getDataModelObjectPath(),
      isParentDeletable = isPathDeletable(dataModelObjectPath, {
        pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, converterContext.getConvertedTypes(), navigationPaths)
      }),
      parentEntitySetDeletable = isParentDeletable ? compileExpression(isParentDeletable) : isParentDeletable,
      identificationFieldForActions = getIdentificationDataFieldForActions(converterContext.getEntityType(), false);
    const copyDataField = converterContext.getManifestWrapper().getViewLevel() === 1 ? getCopyAction(identificationFieldForActions.filter(dataField => {
      return dataFieldIsCopyAction(dataField);
    })) : undefined;
    const headerDataFieldForActions = identificationFieldForActions.filter(dataField => {
      return !dataFieldIsCopyAction(dataField);
    });

    // Initialize actions and start with draft actions if available since they should appear in the first
    // leftmost position in the actions area of the OP header
    // This is more like a placeholder than a single action, since this controls not only the templating of
    // the button for switching between draft and active document versions but also the controls for
    // the collaborative draft fragment.
    const headerActions = [];
    if (isEntitySet(entitySet) && draftRoot !== null && draftRoot !== void 0 && draftRoot.EditAction && updateHidden !== true) {
      headerActions.push({
        type: ActionType.DraftActions,
        key: "DraftActions"
      });
    }
    const viewLevel = converterContext.getManifestWrapper().getViewLevel();
    const updatablePropertyPath = viewLevel > 1 ? entitySet === null || entitySet === void 0 ? void 0 : (_entitySet$annotation7 = entitySet.annotations.Capabilities) === null || _entitySet$annotation7 === void 0 ? void 0 : (_entitySet$annotation8 = _entitySet$annotation7.UpdateRestrictions) === null || _entitySet$annotation8 === void 0 ? void 0 : _entitySet$annotation8.Updatable : undefined;
    if (draftRoot || draftNode) {
      headerActions.push({
        type: ActionType.CollaborationAvatars,
        key: "CollaborationAvatars"
      });
    }
    // Then add the "Critical" DataFieldForActions
    headerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) > -1;
    }).forEach(dataField => {
      headerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });

    // Then the edit action if it exists
    if ((draftRoot !== null && draftRoot !== void 0 && draftRoot.EditAction || stickySessionSupported !== null && stickySessionSupported !== void 0 && stickySessionSupported.EditAction) && updateHidden !== true) {
      headerActions.push({
        type: ActionType.Primary,
        key: "EditAction",
        visible: compileExpression(getEditButtonVisibility(converterContext, rootUpdateHidden, rootConverterContext, ModelHelper.isUpdateHidden(entitySet, entityType), viewLevel)),
        enabled: getEditButtonEnabled(rootConverterContext, updatablePropertyPath, viewLevel)
      });
    }
    // Then the delete action if we're not statically not deletable
    if (parentEntitySetDeletable && parentEntitySetDeletable !== "false" || (entityDeleteRestrictions === null || entityDeleteRestrictions === void 0 ? void 0 : (_entityDeleteRestrict = entityDeleteRestrictions.Deletable) === null || _entityDeleteRestrict === void 0 ? void 0 : _entityDeleteRestrict.valueOf()) !== false && parentEntitySetDeletable !== "false") {
      const deleteHidden = ModelHelper.getDeleteHidden(entitySet, entityType);
      headerActions.push({
        type: ActionType.Secondary,
        key: "DeleteAction",
        visible: compileExpression(getDeleteButtonVisibility(converterContext, deleteHidden)),
        enabled: compileExpression(getDeleteButtonEnabled(entityDeleteRestrictions === null || entityDeleteRestrictions === void 0 ? void 0 : entityDeleteRestrictions.Deletable, isParentDeletable, converterContext)),
        parentEntityDeleteEnabled: parentEntitySetDeletable
      });
    }
    if (copyDataField) {
      var _copyDataField$Label;
      headerActions.push({
        ...getDataFieldAnnotationAction(copyDataField, converterContext),
        type: ActionType.Copy,
        text: ((_copyDataField$Label = copyDataField.Label) === null || _copyDataField$Label === void 0 ? void 0 : _copyDataField$Label.toString()) ?? Core.getLibraryResourceBundle("sap.fe.core").getText("C_COMMON_COPY")
      });
    }
    const headerDataFieldForIBNActions = getIdentificationDataFieldForIBNActions(converterContext.getEntityType(), false);
    headerDataFieldForIBNActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      var _dataField$RequiresCo, _dataField$Inline, _dataField$Label, _dataField$annotation, _dataField$annotation2, _dataField$Navigation;
      if (((_dataField$RequiresCo = dataField.RequiresContext) === null || _dataField$RequiresCo === void 0 ? void 0 : _dataField$RequiresCo.valueOf()) === true) {
        throw new Error(`RequiresContext property should not be true for header IBN action : ${dataField.Label}`);
      }
      if (((_dataField$Inline = dataField.Inline) === null || _dataField$Inline === void 0 ? void 0 : _dataField$Inline.valueOf()) === true) {
        throw new Error(`Inline property should not be true for header IBN action : ${dataField.Label}`);
      }
      const oNavigationParams = {
        semanticObjectMapping: getSemanticObjectMapping(dataField.Mapping)
      };
      headerActions.push({
        type: ActionType.DataFieldForIntentBasedNavigation,
        text: (_dataField$Label = dataField.Label) === null || _dataField$Label === void 0 ? void 0 : _dataField$Label.toString(),
        annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
        buttonType: ButtonType.Ghost,
        visible: compileExpression(and(not(equal(getExpressionFromAnnotation((_dataField$annotation = dataField.annotations) === null || _dataField$annotation === void 0 ? void 0 : (_dataField$annotation2 = _dataField$annotation.UI) === null || _dataField$annotation2 === void 0 ? void 0 : _dataField$annotation2.Hidden), true)), not(equal(pathInModel("shellNavigationNotAvailable", "internal"), true)))),
        enabled: dataField.NavigationAvailable !== undefined ? compileExpression(equal(getExpressionFromAnnotation((_dataField$Navigation = dataField.NavigationAvailable) === null || _dataField$Navigation === void 0 ? void 0 : _dataField$Navigation.valueOf()), true)) : true,
        key: KeyHelper.generateKeyFromDataField(dataField),
        isNavigable: true,
        press: compileExpression(fn("._intentBasedNavigation.navigate", [getExpressionFromAnnotation(dataField.SemanticObject), getExpressionFromAnnotation(dataField.Action), oNavigationParams])),
        customData: compileExpression({
          semanticObject: getExpressionFromAnnotation(dataField.SemanticObject),
          action: getExpressionFromAnnotation(dataField.Action)
        })
      });
    });
    // Finally the non critical DataFieldForActions
    headerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      headerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });
    return headerActions;
  }
  _exports.getHeaderDefaultActions = getHeaderDefaultActions;
  function getHiddenHeaderActions(converterContext) {
    var _entityType$annotatio7, _entityType$annotatio8, _entityType$annotatio9;
    const entityType = converterContext.getEntityType();
    const hiddenActions = ((_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : (_entityType$annotatio9 = _entityType$annotatio8.Identification) === null || _entityType$annotatio9 === void 0 ? void 0 : _entityType$annotatio9.filter(identificationDataField => {
      var _identificationDataFi15, _identificationDataFi16, _identificationDataFi17;
      return (identificationDataField === null || identificationDataField === void 0 ? void 0 : (_identificationDataFi15 = identificationDataField.annotations) === null || _identificationDataFi15 === void 0 ? void 0 : (_identificationDataFi16 = _identificationDataFi15.UI) === null || _identificationDataFi16 === void 0 ? void 0 : (_identificationDataFi17 = _identificationDataFi16.Hidden) === null || _identificationDataFi17 === void 0 ? void 0 : _identificationDataFi17.valueOf()) === true;
    })) || [];
    return hiddenActions.map(dataField => {
      return {
        type: ActionType.Default,
        key: KeyHelper.generateKeyFromDataField(dataField)
      };
    });
  }
  _exports.getHiddenHeaderActions = getHiddenHeaderActions;
  function getFooterDefaultActions(viewLevel, converterContext) {
    var _entitySet$annotation9, _entitySet$annotation10, _entitySet$annotation11, _entitySet$annotation12;
    const entitySet = converterContext.getEntitySet();
    const entityType = converterContext.getEntityType();
    const stickySessionSupported = ModelHelper.getStickySession(entitySet),
      //for sticky app
      entitySetDraftRoot = isEntitySet(entitySet) && (((_entitySet$annotation9 = entitySet.annotations.Common) === null || _entitySet$annotation9 === void 0 ? void 0 : (_entitySet$annotation10 = _entitySet$annotation9.DraftRoot) === null || _entitySet$annotation10 === void 0 ? void 0 : _entitySet$annotation10.term) ?? ((_entitySet$annotation11 = entitySet.annotations.Session) === null || _entitySet$annotation11 === void 0 ? void 0 : (_entitySet$annotation12 = _entitySet$annotation11.StickySessionSupported) === null || _entitySet$annotation12 === void 0 ? void 0 : _entitySet$annotation12.term)),
      conditionSave = Boolean(entitySetDraftRoot === "com.sap.vocabularies.Common.v1.DraftRoot" || stickySessionSupported && (stickySessionSupported === null || stickySessionSupported === void 0 ? void 0 : stickySessionSupported.SaveAction)),
      conditionApply = viewLevel > 1,
      conditionCancel = Boolean(entitySetDraftRoot === "com.sap.vocabularies.Common.v1.DraftRoot" || stickySessionSupported && (stickySessionSupported === null || stickySessionSupported === void 0 ? void 0 : stickySessionSupported.DiscardAction));

    // Retrieve all determining actions
    const footerDataFieldForActions = getIdentificationDataFieldForActions(converterContext.getEntityType(), true);

    // First add the "Critical" DataFieldForActions
    const footerActions = footerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) > -1;
    }).map(dataField => {
      return getDataFieldAnnotationAction(dataField, converterContext);
    });

    // Then the save action if it exists
    if ((entitySet === null || entitySet === void 0 ? void 0 : entitySet.entityTypeName) === (entityType === null || entityType === void 0 ? void 0 : entityType.fullyQualifiedName) && conditionSave) {
      footerActions.push({
        type: ActionType.Primary,
        key: "SaveAction"
      });
    }

    // Then the apply action if it exists
    if (conditionApply) {
      footerActions.push({
        type: ActionType.DefaultApply,
        key: "ApplyAction"
      });
    }

    // Then the non critical DataFieldForActions
    footerDataFieldForActions.filter(dataField => {
      return IMPORTANT_CRITICALITIES.indexOf(dataField === null || dataField === void 0 ? void 0 : dataField.Criticality) === -1;
    }).forEach(dataField => {
      footerActions.push(getDataFieldAnnotationAction(dataField, converterContext));
    });

    // Then the cancel action if it exists
    if (conditionCancel) {
      footerActions.push({
        type: ActionType.Secondary,
        key: "CancelAction",
        position: {
          placement: Placement.End
        }
      });
    }
    return footerActions;
  }
  _exports.getFooterDefaultActions = getFooterDefaultActions;
  function getDataFieldAnnotationAction(dataField, converterContext) {
    var _dataField$annotation3, _dataField$annotation4;
    return {
      type: ActionType.DataFieldForAction,
      annotationPath: converterContext.getEntitySetBasedAnnotationPath(dataField.fullyQualifiedName),
      key: KeyHelper.generateKeyFromDataField(dataField),
      visible: compileExpression(not(equal(getExpressionFromAnnotation((_dataField$annotation3 = dataField.annotations) === null || _dataField$annotation3 === void 0 ? void 0 : (_dataField$annotation4 = _dataField$annotation3.UI) === null || _dataField$annotation4 === void 0 ? void 0 : _dataField$annotation4.Hidden), true))),
      enabled: getEnabledForAnnotationAction(converterContext, dataField.ActionTarget),
      isNavigable: true
    };
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/objectPage/HeaderAndFooterAction", ["sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/converters/helpers/Key","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/ui/core/Core","../helpers/BindingHelper","../ManifestSettings"],function(e,t,i,n,o,a,l,r,d,v){"use strict";var s={};var u=v.ActionType;var c=d.UI;var f=d.singletonPathVisitor;var p=d.Draft;var y=l.isPathDeletable;var g=a.isEntitySet;var b=n.pathInModel;var E=n.not;var h=n.ifElse;var A=n.getExpressionFromAnnotation;var m=n.fn;var D=n.equal;var C=n.constant;var I=n.compileExpression;var O=n.and;var S=i.KeyHelper;var T=t.Placement;var P=e.getSemanticObjectMapping;var B=e.getEnabledForAnnotationAction;var F=e.getCopyAction;var N=e.dataFieldIsCopyAction;var U=e.ButtonType;function H(e,t){var i,n,o;return((i=e.annotations)===null||i===void 0?void 0:(n=i.UI)===null||n===void 0?void 0:(o=n.Identification)===null||o===void 0?void 0:o.filter(e=>{var i,n,o,a,l,r,d,v,s,u;return((i=e.annotations)===null||i===void 0?void 0:(n=i.UI)===null||n===void 0?void 0:(o=n.Hidden)===null||o===void 0?void 0:o.valueOf())!==true&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAction"&&Boolean((a=e.Determining)===null||a===void 0?void 0:a.valueOf())===t&&(((l=e.ActionTarget)===null||l===void 0?void 0:(r=l.isBound)===null||r===void 0?void 0:r.valueOf())!==true||(e===null||e===void 0?void 0:(d=e.ActionTarget)===null||d===void 0?void 0:(v=d.annotations)===null||v===void 0?void 0:(s=v.Core)===null||s===void 0?void 0:(u=s.OperationAvailable)===null||u===void 0?void 0:u.valueOf())!==false)?true:false}))||[]}s.getIdentificationDataFieldForActions=H;function M(e,t){var i,n,o;return((i=e.annotations)===null||i===void 0?void 0:(n=i.UI)===null||n===void 0?void 0:(o=n.Identification)===null||o===void 0?void 0:o.filter(e=>{var i,n,o,a;return((i=e.annotations)===null||i===void 0?void 0:(n=i.UI)===null||n===void 0?void 0:(o=n.Hidden)===null||o===void 0?void 0:o.valueOf())!==true&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation"&&Boolean((a=e.Determining)===null||a===void 0?void 0:a.valueOf())===t?true:false}))||[]}const k=["UI.CriticalityType/VeryPositive","UI.CriticalityType/Positive","UI.CriticalityType/Negative","UI.CriticalityType/VeryNegative"];s.IMPORTANT_CRITICALITIES=k;function R(e,t){const i=e.getDataModelObjectPath(),n=i.navigationProperties.map(e=>e.name),o=A(t,n,undefined,t=>f(t,e.getConvertedTypes(),[])),a=e.getManifestWrapper(),l=a.getViewLevel(),r=l>1?c.IsEditable:E(c.IsEditable);return h(t===undefined||t.valueOf()===false,r,O(r,D(o,false)))}s.getDeleteButtonVisibility=R;function x(e,t,i){const n=i.getEntitySet(),a=o.isDraftRoot(n);let l=h(t!==undefined,t,h(e!==undefined,D(A(e),true),C(true)));l=a?O(l,E(b("DraftAdministrativeData/InProcessByUser"))):l;return l}s.getDeleteButtonEnabled=x;function V(e,t,i,n,a){const l=i===null||i===void 0?void 0:i.getEntitySet(),r=e.getEntitySet(),d=e.getManifestWrapper().isFclEnabled();let v;const s=j(i,t);if(a&&a>1){v=o.isDraftNode(r)}else{v=o.isDraftRoot(l)}const u=j(i,n);const f=E(c.IsEditable);const y=h(a>1,h(n===undefined||n.valueOf()===false,O(f,D(b("rootEditVisible","internal"),true),h(d,D(b("/showEditButton","fclhelper"),true),true)),O(f,D(u,false),D(b("rootEditVisible","internal"),true),h(d,D(b("/showEditButton","fclhelper"),true),true))),h(t===undefined||t.valueOf()===false,f,O(f,D(s,false))));return h(v,O(y,p.HasNoDraftForCurrentUser),y)}s.getEditButtonVisibility=V;function j(e,t){const i=e.getDataModelObjectPath(),n=i.navigationProperties.map(e=>e.name),o=A(t,n,undefined,t=>f(t,e.getConvertedTypes(),n));return o}s.getHiddenExpression=j;function w(e,t,i){const n=e.getEntitySet(),a=o.isDraftRoot(n),l=o.isSticky(n);let r;if(a&&g(n)){var d,v;r=(d=n.annotations.Common)===null||d===void 0?void 0:(v=d.DraftRoot)===null||v===void 0?void 0:v.EditAction}else if(l&&g(n)){var s,u;r=(s=n.annotations.Session)===null||s===void 0?void 0:(u=s.StickySessionSupported)===null||u===void 0?void 0:u.EditAction}if(r){var c,f;const n=e.getAbsoluteAnnotationPath(r);const o=e.resolveAbsolutePath(n).target;if((o===null||o===void 0?void 0:(c=o.annotations)===null||c===void 0?void 0:(f=c.Core)===null||f===void 0?void 0:f.OperationAvailable)===null){}else if(i>1){if(t!==undefined){return I(O(D(A(t),true),D(b("rootEditEnabled","internal"),true)))}else{return I(D(b("rootEditEnabled","internal"),true))}}else{return B(e,o??undefined)}}return"true"}s.getEditButtonEnabled=w;function L(e){var t,i,n,a,l;const d=e.getContextPath();const v=o.getRootEntitySetPath(d);const s=e.getConverterContextFor("/"+v);const c=e.getEntitySet(),p=e.getEntityType(),h=s.getEntitySet(),C=s.getEntityType(),T=o.getStickySession(h),B=o.getDraftRoot(h),j=o.getDraftNode(h),L=c&&((t=c.annotations)===null||t===void 0?void 0:(i=t.Capabilities)===null||i===void 0?void 0:i.DeleteRestrictions),K=o.isUpdateHidden(h,C),W=h&&g(h)&&(K===null||K===void 0?void 0:K.valueOf()),_=e.getDataModelObjectPath(),q=y(_,{pathVisitor:(t,i)=>f(t,e.getConvertedTypes(),i)}),Q=q?I(q):q,G=H(e.getEntityType(),false);const Y=e.getManifestWrapper().getViewLevel()===1?F(G.filter(e=>N(e))):undefined;const z=G.filter(e=>!N(e));const J=[];if(g(c)&&B!==null&&B!==void 0&&B.EditAction&&W!==true){J.push({type:u.DraftActions,key:"DraftActions"})}const X=e.getManifestWrapper().getViewLevel();const Z=X>1?c===null||c===void 0?void 0:(n=c.annotations.Capabilities)===null||n===void 0?void 0:(a=n.UpdateRestrictions)===null||a===void 0?void 0:a.Updatable:undefined;if(B||j){J.push({type:u.CollaborationAvatars,key:"CollaborationAvatars"})}z.filter(e=>k.indexOf(e===null||e===void 0?void 0:e.Criticality)>-1).forEach(t=>{J.push($(t,e))});if((B!==null&&B!==void 0&&B.EditAction||T!==null&&T!==void 0&&T.EditAction)&&W!==true){J.push({type:u.Primary,key:"EditAction",visible:I(V(e,K,s,o.isUpdateHidden(c,p),X)),enabled:w(s,Z,X)})}if(Q&&Q!=="false"||(L===null||L===void 0?void 0:(l=L.Deletable)===null||l===void 0?void 0:l.valueOf())!==false&&Q!=="false"){const t=o.getDeleteHidden(c,p);J.push({type:u.Secondary,key:"DeleteAction",visible:I(R(e,t)),enabled:I(x(L===null||L===void 0?void 0:L.Deletable,q,e)),parentEntityDeleteEnabled:Q})}if(Y){var ee;J.push({...$(Y,e),type:u.Copy,text:((ee=Y.Label)===null||ee===void 0?void 0:ee.toString())??r.getLibraryResourceBundle("sap.fe.core").getText("C_COMMON_COPY")})}const te=M(e.getEntityType(),false);te.filter(e=>k.indexOf(e===null||e===void 0?void 0:e.Criticality)===-1).forEach(t=>{var i,n,o,a,l,r;if(((i=t.RequiresContext)===null||i===void 0?void 0:i.valueOf())===true){throw new Error(`RequiresContext property should not be true for header IBN action : ${t.Label}`)}if(((n=t.Inline)===null||n===void 0?void 0:n.valueOf())===true){throw new Error(`Inline property should not be true for header IBN action : ${t.Label}`)}const d={semanticObjectMapping:P(t.Mapping)};J.push({type:u.DataFieldForIntentBasedNavigation,text:(o=t.Label)===null||o===void 0?void 0:o.toString(),annotationPath:e.getEntitySetBasedAnnotationPath(t.fullyQualifiedName),buttonType:U.Ghost,visible:I(O(E(D(A((a=t.annotations)===null||a===void 0?void 0:(l=a.UI)===null||l===void 0?void 0:l.Hidden),true)),E(D(b("shellNavigationNotAvailable","internal"),true)))),enabled:t.NavigationAvailable!==undefined?I(D(A((r=t.NavigationAvailable)===null||r===void 0?void 0:r.valueOf()),true)):true,key:S.generateKeyFromDataField(t),isNavigable:true,press:I(m("._intentBasedNavigation.navigate",[A(t.SemanticObject),A(t.Action),d])),customData:I({semanticObject:A(t.SemanticObject),action:A(t.Action)})})});z.filter(e=>k.indexOf(e===null||e===void 0?void 0:e.Criticality)===-1).forEach(t=>{J.push($(t,e))});return J}s.getHeaderDefaultActions=L;function K(e){var t,i,n;const o=e.getEntityType();const a=((t=o.annotations)===null||t===void 0?void 0:(i=t.UI)===null||i===void 0?void 0:(n=i.Identification)===null||n===void 0?void 0:n.filter(e=>{var t,i,n;return(e===null||e===void 0?void 0:(t=e.annotations)===null||t===void 0?void 0:(i=t.UI)===null||i===void 0?void 0:(n=i.Hidden)===null||n===void 0?void 0:n.valueOf())===true}))||[];return a.map(e=>({type:u.Default,key:S.generateKeyFromDataField(e)}))}s.getHiddenHeaderActions=K;function W(e,t){var i,n,a,l;const r=t.getEntitySet();const d=t.getEntityType();const v=o.getStickySession(r),s=g(r)&&(((i=r.annotations.Common)===null||i===void 0?void 0:(n=i.DraftRoot)===null||n===void 0?void 0:n.term)??((a=r.annotations.Session)===null||a===void 0?void 0:(l=a.StickySessionSupported)===null||l===void 0?void 0:l.term)),c=Boolean(s==="com.sap.vocabularies.Common.v1.DraftRoot"||v&&(v===null||v===void 0?void 0:v.SaveAction)),f=e>1,p=Boolean(s==="com.sap.vocabularies.Common.v1.DraftRoot"||v&&(v===null||v===void 0?void 0:v.DiscardAction));const y=H(t.getEntityType(),true);const b=y.filter(e=>k.indexOf(e===null||e===void 0?void 0:e.Criticality)>-1).map(e=>$(e,t));if((r===null||r===void 0?void 0:r.entityTypeName)===(d===null||d===void 0?void 0:d.fullyQualifiedName)&&c){b.push({type:u.Primary,key:"SaveAction"})}if(f){b.push({type:u.DefaultApply,key:"ApplyAction"})}y.filter(e=>k.indexOf(e===null||e===void 0?void 0:e.Criticality)===-1).forEach(e=>{b.push($(e,t))});if(p){b.push({type:u.Secondary,key:"CancelAction",position:{placement:T.End}})}return b}s.getFooterDefaultActions=W;function $(e,t){var i,n;return{type:u.DataFieldForAction,annotationPath:t.getEntitySetBasedAnnotationPath(e.fullyQualifiedName),key:S.generateKeyFromDataField(e),visible:I(E(D(A((i=e.annotations)===null||i===void 0?void 0:(n=i.UI)===null||n===void 0?void 0:n.Hidden),true))),enabled:B(t,e.ActionTarget),isNavigable:true}}return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/templates/ListReportConverter-dbg", ["sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/controls/ListReport/FilterBar", "sap/fe/core/converters/helpers/ConfigurableObject", "sap/fe/core/helpers/BindingToolkit", "../controls/Common/DataVisualization", "../controls/Common/KPI", "../helpers/ID", "../ManifestSettings"], function (Action, FilterBar, ConfigurableObject, BindingToolkit, DataVisualization, KPI, ID, ManifestSettings) {
  "use strict";

  var _exports = {};
  var VisualizationType = ManifestSettings.VisualizationType;
  var VariantManagementType = ManifestSettings.VariantManagementType;
  var TemplateType = ManifestSettings.TemplateType;
  var getTableID = ID.getTableID;
  var getIconTabBarID = ID.getIconTabBarID;
  var getFilterVariantManagementID = ID.getFilterVariantManagementID;
  var getFilterBarID = ID.getFilterBarID;
  var getDynamicListReportID = ID.getDynamicListReportID;
  var getCustomTabID = ID.getCustomTabID;
  var getChartID = ID.getChartID;
  var getKPIDefinitions = KPI.getKPIDefinitions;
  var isSelectionPresentationCompliant = DataVisualization.isSelectionPresentationCompliant;
  var isPresentationCompliant = DataVisualization.isPresentationCompliant;
  var getSelectionVariant = DataVisualization.getSelectionVariant;
  var getSelectionPresentationVariant = DataVisualization.getSelectionPresentationVariant;
  var getDefaultPresentationVariant = DataVisualization.getDefaultPresentationVariant;
  var getDefaultLineItem = DataVisualization.getDefaultLineItem;
  var getDefaultChart = DataVisualization.getDefaultChart;
  var getDataVisualizationConfiguration = DataVisualization.getDataVisualizationConfiguration;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var compileExpression = BindingToolkit.compileExpression;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var getSelectionFields = FilterBar.getSelectionFields;
  var getManifestFilterFields = FilterBar.getManifestFilterFields;
  var getFilterBarHideBasicSearch = FilterBar.getFilterBarHideBasicSearch;
  var getActionsFromManifest = Action.getActionsFromManifest;
  /**
   * Retrieves all list report tables.
   *
   * @param views The list report views configured in the manifest
   * @returns The list report table
   */
  function getTableVisualizations(views) {
    const tables = [];
    views.forEach(function (view) {
      if (!view.type) {
        const visualizations = view.secondaryVisualization ? view.secondaryVisualization.visualizations : view.presentation.visualizations;
        visualizations.forEach(function (visualization) {
          if (visualization.type === VisualizationType.Table) {
            tables.push(visualization);
          }
        });
      }
    });
    return tables;
  }
  function getChartVisualizations(views) {
    const charts = [];
    views.forEach(function (view) {
      if (!view.type) {
        const visualizations = view.primaryVisualization ? view.primaryVisualization.visualizations : view.presentation.visualizations;
        visualizations.forEach(function (visualization) {
          if (visualization.type === VisualizationType.Chart) {
            charts.push(visualization);
          }
        });
      }
    });
    return charts;
  }
  const getDefaultSemanticDates = function (filterFields) {
    const defaultSemanticDates = {};
    for (const filterField in filterFields) {
      var _filterFields$filterF, _filterFields$filterF2, _filterFields$filterF3;
      if ((_filterFields$filterF = filterFields[filterField]) !== null && _filterFields$filterF !== void 0 && (_filterFields$filterF2 = _filterFields$filterF.settings) !== null && _filterFields$filterF2 !== void 0 && (_filterFields$filterF3 = _filterFields$filterF2.defaultValues) !== null && _filterFields$filterF3 !== void 0 && _filterFields$filterF3.length) {
        var _filterFields$filterF4, _filterFields$filterF5;
        defaultSemanticDates[filterField] = (_filterFields$filterF4 = filterFields[filterField]) === null || _filterFields$filterF4 === void 0 ? void 0 : (_filterFields$filterF5 = _filterFields$filterF4.settings) === null || _filterFields$filterF5 === void 0 ? void 0 : _filterFields$filterF5.defaultValues;
      }
    }
    return defaultSemanticDates;
  };
  /**
   * Find a visualization annotation that can be used for rendering the list report.
   *
   * @param entityType The current EntityType
   * @param converterContext
   * @param isALP
   * @returns A compliant annotation for rendering the list report
   */
  function getCompliantVisualizationAnnotation(entityType, converterContext, isALP) {
    const annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();
    const selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);
    const errorMessageForALP = "ALP flavor needs both chart and table to load the application";
    if (selectionPresentationVariant) {
      if (annotationPath) {
        const presentationVariant = selectionPresentationVariant.PresentationVariant;
        if (!presentationVariant) {
          throw new Error("Presentation Variant is not configured in the SPV mentioned in the manifest");
        }
        if (!isPresentationCompliant(presentationVariant, isALP)) {
          if (isALP) {
            throw new Error(errorMessageForALP);
          }
          return undefined;
        }
      }
      if (isSelectionPresentationCompliant(selectionPresentationVariant, isALP) === true) {
        return selectionPresentationVariant;
      } else if (isALP) {
        throw new Error(errorMessageForALP);
      }
    }
    const presentationVariant = getDefaultPresentationVariant(entityType);
    if (presentationVariant) {
      if (isPresentationCompliant(presentationVariant, isALP)) {
        return presentationVariant;
      } else if (isALP) {
        throw new Error(errorMessageForALP);
      }
    }
    if (!isALP) {
      return getDefaultLineItem(entityType);
    }
    return undefined;
  }
  const getView = function (viewConverterConfiguration, isInsightsEnabled) {
    let config = viewConverterConfiguration;
    if (config.converterContext) {
      var _presentation, _presentation$visuali;
      let converterContext = config.converterContext;
      config = config;
      const isMultipleViewConfiguration = function (currentConfig) {
        return currentConfig.key !== undefined;
      };
      let presentation = getDataVisualizationConfiguration(config.annotation ? converterContext.getRelativeAnnotationPath(config.annotation.fullyQualifiedName, converterContext.getEntityType()) : "", true, converterContext, config, undefined, undefined, isMultipleViewConfiguration(config), isInsightsEnabled);
      let tableControlId = "";
      let chartControlId = "";
      let title = "";
      let selectionVariantPath = "";
      const createVisualization = function (currentPresentation, isPrimary) {
        let defaultVisualization;
        for (const visualization of currentPresentation.visualizations) {
          if (isPrimary && visualization.type === VisualizationType.Chart) {
            defaultVisualization = visualization;
            break;
          }
          if (!isPrimary && visualization.type === VisualizationType.Table) {
            defaultVisualization = visualization;
            break;
          }
        }
        const presentationCreated = Object.assign({}, currentPresentation);
        if (defaultVisualization) {
          presentationCreated.visualizations = [defaultVisualization];
        } else {
          throw new Error((isPrimary ? "Primary" : "Secondary") + " visualisation needs valid " + (isPrimary ? "chart" : "table"));
        }
        return presentationCreated;
      };
      const getPresentation = function (item, isPrimary) {
        const resolvedTarget = converterContext.getEntityTypeAnnotation(item.annotationPath);
        const targetAnnotation = resolvedTarget.annotation;
        converterContext = resolvedTarget.converterContext;
        const annotation = targetAnnotation;
        if (annotation || converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
          presentation = getDataVisualizationConfiguration(annotation ? converterContext.getRelativeAnnotationPath(annotation.fullyQualifiedName, converterContext.getEntityType()) : "", true, converterContext, config, undefined, undefined, undefined, isInsightsEnabled);
          return presentation;
        } else {
          const sError = "Annotation Path for the " + (isPrimary ? "primary" : "secondary") + " visualisation mentioned in the manifest is not found";
          throw new Error(sError);
        }
      };
      const createAlpView = function (presentations, defaultPath) {
        var _primaryVisualization, _secondaryVisualizati, _secondaryVisualizati2;
        const primaryVisualization = createVisualization(presentations[0], true);
        chartControlId = primaryVisualization === null || primaryVisualization === void 0 ? void 0 : (_primaryVisualization = primaryVisualization.visualizations[0]) === null || _primaryVisualization === void 0 ? void 0 : _primaryVisualization.id;
        const secondaryVisualization = createVisualization(presentations[1] ? presentations[1] : presentations[0], false);
        tableControlId = secondaryVisualization === null || secondaryVisualization === void 0 ? void 0 : (_secondaryVisualizati = secondaryVisualization.visualizations[0]) === null || _secondaryVisualizati === void 0 ? void 0 : (_secondaryVisualizati2 = _secondaryVisualizati.annotation) === null || _secondaryVisualizati2 === void 0 ? void 0 : _secondaryVisualizati2.id;
        if (primaryVisualization && secondaryVisualization) {
          config = config;
          const visible = config.visible;
          const view = {
            primaryVisualization,
            secondaryVisualization,
            tableControlId,
            chartControlId,
            defaultPath,
            visible
          };
          return view;
        }
      };
      if (!converterContext.getManifestWrapper().hasMultipleVisualizations(config) && ((_presentation = presentation) === null || _presentation === void 0 ? void 0 : (_presentation$visuali = _presentation.visualizations) === null || _presentation$visuali === void 0 ? void 0 : _presentation$visuali.length) === 2 && converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
        const view = createAlpView([presentation], "both");
        if (view) {
          return view;
        }
      } else if (converterContext.getManifestWrapper().hasMultipleVisualizations(config) || converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
        const {
          primary,
          secondary
        } = config;
        if (primary && primary.length && secondary && secondary.length) {
          const view = createAlpView([getPresentation(primary[0], true), getPresentation(secondary[0], false)], config.defaultPath);
          if (view) {
            return view;
          }
        } else {
          throw new Error("SecondaryItems in the Views is not present");
        }
      } else if (isMultipleViewConfiguration(config)) {
        // key exists only on multi tables mode
        const resolvedTarget = converterContext.getEntityTypeAnnotation(config.annotationPath);
        const viewAnnotation = resolvedTarget.annotation;
        converterContext = resolvedTarget.converterContext;
        title = compileExpression(getExpressionFromAnnotation(viewAnnotation.Text));
        // Need to loop on table into views since multi table mode get specific configuration (hidden filters or Table Id)
        presentation.visualizations.forEach((visualizationDefinition, index) => {
          var _config$annotation;
          switch (visualizationDefinition.type) {
            case VisualizationType.Table:
              const tableVisualization = presentation.visualizations[index];
              const filters = tableVisualization.control.filters || {};
              filters.hiddenFilters = filters.hiddenFilters || {
                paths: []
              };
              if (!config.keepPreviousPersonalization) {
                // Need to override Table Id to match with Tab Key (currently only table is managed in multiple view mode)
                tableVisualization.annotation.id = getTableID(config.key || "", "LineItem");
              }
              config = config;
              if (((_config$annotation = config.annotation) === null || _config$annotation === void 0 ? void 0 : _config$annotation.term) === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
                var _config$annotation$Se;
                if (!config.annotation.SelectionVariant) {
                  throw new Error(`The Selection Variant is missing for the Selection Presentation Variant ${config.annotation.fullyQualifiedName}`);
                }
                selectionVariantPath = `@${(_config$annotation$Se = config.annotation.SelectionVariant) === null || _config$annotation$Se === void 0 ? void 0 : _config$annotation$Se.fullyQualifiedName.split("@")[1]}`;
              } else {
                selectionVariantPath = config.annotationPath;
              }
              //Provide Selection Variant to hiddenFilters in order to set the SV filters to the table.
              //MDC Table overrides binding Filter and from SAP FE the only method where we are able to add
              //additional filter is 'rebindTable' into Table delegate.
              //To avoid implementing specific LR feature to SAP FE Macro Table, the filter(s) related to the Tab (multi table mode)
              //can be passed to macro table via parameter/context named filters and key hiddenFilters.
              filters.hiddenFilters.paths.push({
                annotationPath: selectionVariantPath
              });
              tableVisualization.control.filters = filters;
              break;
            case VisualizationType.Chart:
              const chartVisualization = presentation.visualizations[index];
              chartVisualization.id = getChartID(config.key || "", "Chart");
              chartVisualization.multiViews = true;
              break;
            default:
              break;
          }
        });
      }
      presentation.visualizations.forEach(visualizationDefinition => {
        if (visualizationDefinition.type === VisualizationType.Table) {
          tableControlId = visualizationDefinition.annotation.id;
        } else if (visualizationDefinition.type === VisualizationType.Chart) {
          chartControlId = visualizationDefinition.id;
        }
      });
      config = config;
      const visible = config.visible;
      return {
        presentation,
        tableControlId,
        chartControlId,
        title,
        selectionVariantPath,
        visible
      };
    } else {
      config = config;
      const title = config.label,
        fragment = config.template,
        type = config.type,
        customTabId = getCustomTabID(config.key || ""),
        visible = config.visible;
      return {
        title,
        fragment,
        type,
        customTabId,
        visible
      };
    }
  };
  const getViews = function (converterContext, settingsViews, isInsightsEnabled) {
    let viewConverterConfigs = [];
    if (settingsViews) {
      settingsViews.paths.forEach(path => {
        if (converterContext.getManifestWrapper().hasMultipleVisualizations(path)) {
          if (settingsViews.paths.length > 1) {
            throw new Error("ALP flavor cannot have multiple views");
          } else {
            path = path;
            viewConverterConfigs.push({
              converterContext: converterContext,
              primary: path.primary,
              secondary: path.secondary,
              defaultPath: path.defaultPath
            });
          }
        } else if (path.template) {
          path = path;
          viewConverterConfigs.push({
            key: path.key,
            label: path.label,
            template: path.template,
            type: "Custom",
            visible: path.visible
          });
        } else {
          path = path;
          const viewConverterContext = converterContext.getConverterContextFor(path.contextPath || path.entitySet && `/${path.entitySet}` || converterContext.getContextPath()),
            entityType = viewConverterContext.getEntityType();
          if (entityType && viewConverterContext) {
            let annotation;
            const resolvedTarget = viewConverterContext.getEntityTypeAnnotation(path.annotationPath);
            const targetAnnotation = resolvedTarget.annotation;
            if (targetAnnotation) {
              annotation = targetAnnotation.term === "com.sap.vocabularies.UI.v1.SelectionVariant" ? getCompliantVisualizationAnnotation(entityType, viewConverterContext, false) : targetAnnotation;
              viewConverterConfigs.push({
                converterContext: viewConverterContext,
                annotation,
                annotationPath: path.annotationPath,
                keepPreviousPersonalization: path.keepPreviousPersonalization,
                key: path.key,
                visible: path.visible
              });
            }
          } else {
            // TODO Diagnostics message
          }
        }
      });
    } else {
      const entityType = converterContext.getEntityType();
      if (converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
        viewConverterConfigs = getAlpViewConfig(converterContext, viewConverterConfigs);
      } else {
        viewConverterConfigs.push({
          annotation: getCompliantVisualizationAnnotation(entityType, converterContext, false),
          converterContext: converterContext
        });
      }
    }
    return viewConverterConfigs.map(viewConverterConfig => {
      return getView(viewConverterConfig, isInsightsEnabled);
    });
  };
  const getMultiViewsControl = function (converterContext, views) {
    const manifestWrapper = converterContext.getManifestWrapper();
    const viewsDefinition = manifestWrapper.getViewConfiguration();
    if (views.length > 1 && !hasMultiVisualizations(converterContext)) {
      return {
        showTabCounts: viewsDefinition ? (viewsDefinition === null || viewsDefinition === void 0 ? void 0 : viewsDefinition.showCounts) || manifestWrapper.hasMultipleEntitySets() : undefined,
        // with multi EntitySets, tab counts are displayed by default
        id: getIconTabBarID()
      };
    }
    return undefined;
  };
  function getAlpViewConfig(converterContext, viewConfigs) {
    const entityType = converterContext.getEntityType();
    const annotation = getCompliantVisualizationAnnotation(entityType, converterContext, true);
    let chart, table;
    if (annotation) {
      viewConfigs.push({
        annotation: annotation,
        converterContext
      });
    } else {
      chart = getDefaultChart(entityType);
      table = getDefaultLineItem(entityType);
      if (chart && table) {
        const primary = [{
          annotationPath: "@" + chart.term
        }];
        const secondary = [{
          annotationPath: "@" + table.term
        }];
        viewConfigs.push({
          converterContext: converterContext,
          primary: primary,
          secondary: secondary,
          defaultPath: "both"
        });
      } else {
        throw new Error("ALP flavor needs both chart and table to load the application");
      }
    }
    return viewConfigs;
  }
  function hasMultiVisualizations(converterContext) {
    return converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;
  }
  const getHeaderActions = function (converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    return insertCustomElements([], getActionsFromManifest(manifestWrapper.getHeaderActions(), converterContext).actions);
  };
  _exports.getHeaderActions = getHeaderActions;
  const checkChartFilterBarId = function (views, filterBarId) {
    views.forEach(view => {
      if (!view.type) {
        const presentation = view.presentation;
        presentation.visualizations.forEach(visualizationDefinition => {
          if (visualizationDefinition.type === VisualizationType.Chart && visualizationDefinition.filterId !== filterBarId) {
            visualizationDefinition.filterId = filterBarId;
          }
        });
      }
    });
  };
  /**
   * Creates the ListReportDefinition for multiple entity sets (multiple table mode).
   *
   * @param converterContext The converter context
   * @param isInsightsEnabled
   * @returns The list report definition based on annotation + manifest
   */
  _exports.checkChartFilterBarId = checkChartFilterBarId;
  const convertPage = function (converterContext, isInsightsEnabled) {
    const entityType = converterContext.getEntityType();
    const sContextPath = converterContext.getContextPath();
    if (!sContextPath) {
      // If we don't have an entitySet at this point we have an issue I'd say
      throw new Error("An EntitySet is required to be able to display a ListReport, please adjust your `entitySet` property to point to one.");
    }
    const manifestWrapper = converterContext.getManifestWrapper();
    const viewsDefinition = manifestWrapper.getViewConfiguration();
    const hasMultipleEntitySets = manifestWrapper.hasMultipleEntitySets();
    const views = getViews(converterContext, viewsDefinition, isInsightsEnabled);
    const lrTableVisualizations = getTableVisualizations(views);
    const lrChartVisualizations = getChartVisualizations(views);
    const showPinnableToggle = lrTableVisualizations.some(table => table.control.type === "ResponsiveTable");
    let singleTableId = "";
    let singleChartId = "";
    const dynamicListReportId = getDynamicListReportID();
    const filterBarId = getFilterBarID(sContextPath);
    const filterVariantManagementID = getFilterVariantManagementID(filterBarId);
    const fbConfig = manifestWrapper.getFilterConfiguration();
    const filterInitialLayout = (fbConfig === null || fbConfig === void 0 ? void 0 : fbConfig.initialLayout) !== undefined ? fbConfig === null || fbConfig === void 0 ? void 0 : fbConfig.initialLayout.toLowerCase() : "compact";
    const filterLayout = (fbConfig === null || fbConfig === void 0 ? void 0 : fbConfig.layout) !== undefined ? fbConfig === null || fbConfig === void 0 ? void 0 : fbConfig.layout.toLowerCase() : "compact";
    const useSemanticDateRange = fbConfig.useSemanticDateRange !== undefined ? fbConfig.useSemanticDateRange : true;
    const showClearButton = fbConfig.showClearButton !== undefined ? fbConfig.showClearButton : false;
    const oConfig = getContentAreaId(converterContext, views);
    if (oConfig) {
      singleChartId = oConfig.chartId;
      singleTableId = oConfig.tableId;
    }
    const useHiddenFilterBar = manifestWrapper.useHiddenFilterBar();
    // Chart has a dependency to filter bar (issue with loading data). Once resolved, the check for chart should be removed here.
    // Until then, hiding filter bar is now allowed if a chart is being used on LR.
    const hideFilterBar = (manifestWrapper.isFilterBarHidden() || useHiddenFilterBar) && singleChartId === "";
    const lrFilterProperties = getSelectionFields(converterContext, lrTableVisualizations);
    const selectionFields = lrFilterProperties.selectionFields;
    const propertyInfoFields = lrFilterProperties.sPropertyInfo;
    const hideBasicSearch = getFilterBarHideBasicSearch(lrTableVisualizations, lrChartVisualizations, converterContext);
    const multiViewControl = getMultiViewsControl(converterContext, views);
    const selectionVariant = multiViewControl ? undefined : getSelectionVariant(entityType, converterContext);
    const defaultSemanticDates = useSemanticDateRange ? getDefaultSemanticDates(getManifestFilterFields(entityType, converterContext)) : {};
    // Sort header actions according to position attributes in manifest
    const headerActions = getHeaderActions(converterContext);
    if (hasMultipleEntitySets) {
      checkChartFilterBarId(views, filterBarId);
    }
    const visualizationIds = lrTableVisualizations.map(visualization => {
      return visualization.annotation.id;
    }).concat(lrChartVisualizations.map(visualization => {
      return visualization.id;
    }));
    const targetControlIds = [...(hideFilterBar && !useHiddenFilterBar ? [] : [filterBarId]), ...(manifestWrapper.getVariantManagement() !== VariantManagementType.Control ? visualizationIds : []), ...(multiViewControl ? [multiViewControl.id] : [])];
    const stickySubheaderProvider = multiViewControl && manifestWrapper.getStickyMultiTabHeaderConfiguration() ? multiViewControl.id : undefined;
    return {
      mainEntitySet: sContextPath,
      mainEntityType: `${sContextPath}/`,
      multiViewsControl: multiViewControl,
      stickySubheaderProvider,
      singleTableId,
      singleChartId,
      dynamicListReportId,
      headerActions,
      showPinnableToggle: showPinnableToggle,
      filterBar: {
        propertyInfo: propertyInfoFields,
        selectionFields,
        hideBasicSearch,
        showClearButton
      },
      views: views,
      filterBarId: hideFilterBar && !useHiddenFilterBar ? "" : filterBarId,
      filterConditions: {
        selectionVariant: selectionVariant,
        defaultSemanticDates: defaultSemanticDates
      },
      variantManagement: {
        id: filterVariantManagementID,
        targetControlIds: targetControlIds.join(",")
      },
      hasMultiVisualizations: hasMultiVisualizations(converterContext),
      templateType: manifestWrapper.getTemplateType(),
      useSemanticDateRange,
      filterInitialLayout,
      filterLayout,
      kpiDefinitions: getKPIDefinitions(converterContext),
      hideFilterBar,
      useHiddenFilterBar
    };
  };
  _exports.convertPage = convertPage;
  function getContentAreaId(converterContext, views) {
    let singleTableId = "",
      singleChartId = "";
    if (converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage) {
      for (const lrView of views) {
        const view = lrView;
        if (view.chartControlId && view.tableControlId) {
          singleChartId = view.chartControlId;
          singleTableId = view.tableControlId;
          break;
        }
      }
    } else {
      for (const lrView of views) {
        const view = lrView;
        if (!singleTableId && view.tableControlId) {
          singleTableId = view.tableControlId || "";
        }
        if (!singleChartId && view.chartControlId) {
          singleChartId = view.chartControlId || "";
        }
        if (singleChartId && singleTableId) {
          break;
        }
      }
    }
    if (singleTableId || singleChartId) {
      return {
        chartId: singleChartId,
        tableId: singleTableId
      };
    }
    return undefined;
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/templates/ListReportConverter", ["sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/controls/ListReport/FilterBar","sap/fe/core/converters/helpers/ConfigurableObject","sap/fe/core/helpers/BindingToolkit","../controls/Common/DataVisualization","../controls/Common/KPI","../helpers/ID","../ManifestSettings"],function(t,e,n,i,a,o,r,s){"use strict";var l={};var c=s.VisualizationType;var u=s.VariantManagementType;var f=s.TemplateType;var d=r.getTableID;var p=r.getIconTabBarID;var v=r.getFilterVariantManagementID;var h=r.getFilterBarID;var y=r.getDynamicListReportID;var g=r.getCustomTabID;var m=r.getChartID;var C=o.getKPIDefinitions;var b=a.isSelectionPresentationCompliant;var P=a.isPresentationCompliant;var T=a.getSelectionVariant;var I=a.getSelectionPresentationVariant;var V=a.getDefaultPresentationVariant;var w=a.getDefaultLineItem;var E=a.getDefaultChart;var z=a.getDataVisualizationConfiguration;var S=i.getExpressionFromAnnotation;var M=i.compileExpression;var k=n.insertCustomElements;var A=e.getSelectionFields;var D=e.getManifestFilterFields;var F=e.getFilterBarHideBasicSearch;var L=t.getActionsFromManifest;function B(t){const e=[];t.forEach(function(t){if(!t.type){const n=t.secondaryVisualization?t.secondaryVisualization.visualizations:t.presentation.visualizations;n.forEach(function(t){if(t.type===c.Table){e.push(t)}})}});return e}function x(t){const e=[];t.forEach(function(t){if(!t.type){const n=t.primaryVisualization?t.primaryVisualization.visualizations:t.presentation.visualizations;n.forEach(function(t){if(t.type===c.Chart){e.push(t)}})}});return e}const R=function(t){const e={};for(const s in t){var n,i,a;if((n=t[s])!==null&&n!==void 0&&(i=n.settings)!==null&&i!==void 0&&(a=i.defaultValues)!==null&&a!==void 0&&a.length){var o,r;e[s]=(o=t[s])===null||o===void 0?void 0:(r=o.settings)===null||r===void 0?void 0:r.defaultValues}}return e};function W(t,e,n){const i=e.getManifestWrapper().getDefaultTemplateAnnotationPath();const a=I(t,i,e);const o="ALP flavor needs both chart and table to load the application";if(a){if(i){const t=a.PresentationVariant;if(!t){throw new Error("Presentation Variant is not configured in the SPV mentioned in the manifest")}if(!P(t,n)){if(n){throw new Error(o)}return undefined}}if(b(a,n)===true){return a}else if(n){throw new Error(o)}}const r=V(t);if(r){if(P(r,n)){return r}else if(n){throw new Error(o)}}if(!n){return w(t)}return undefined}const H=function(t,e){let n=t;if(n.converterContext){var i,a;let t=n.converterContext;n=n;const o=function(t){return t.key!==undefined};let r=z(n.annotation?t.getRelativeAnnotationPath(n.annotation.fullyQualifiedName,t.getEntityType()):"",true,t,n,undefined,undefined,o(n),e);let s="";let l="";let u="";let p="";const v=function(t,e){let n;for(const i of t.visualizations){if(e&&i.type===c.Chart){n=i;break}if(!e&&i.type===c.Table){n=i;break}}const i=Object.assign({},t);if(n){i.visualizations=[n]}else{throw new Error((e?"Primary":"Secondary")+" visualisation needs valid "+(e?"chart":"table"))}return i};const h=function(i,a){const o=t.getEntityTypeAnnotation(i.annotationPath);const s=o.annotation;t=o.converterContext;const l=s;if(l||t.getTemplateType()===f.AnalyticalListPage){r=z(l?t.getRelativeAnnotationPath(l.fullyQualifiedName,t.getEntityType()):"",true,t,n,undefined,undefined,undefined,e);return r}else{const t="Annotation Path for the "+(a?"primary":"secondary")+" visualisation mentioned in the manifest is not found";throw new Error(t)}};const y=function(t,e){var i,a,o;const r=v(t[0],true);l=r===null||r===void 0?void 0:(i=r.visualizations[0])===null||i===void 0?void 0:i.id;const c=v(t[1]?t[1]:t[0],false);s=c===null||c===void 0?void 0:(a=c.visualizations[0])===null||a===void 0?void 0:(o=a.annotation)===null||o===void 0?void 0:o.id;if(r&&c){n=n;const t=n.visible;const i={primaryVisualization:r,secondaryVisualization:c,tableControlId:s,chartControlId:l,defaultPath:e,visible:t};return i}};if(!t.getManifestWrapper().hasMultipleVisualizations(n)&&((i=r)===null||i===void 0?void 0:(a=i.visualizations)===null||a===void 0?void 0:a.length)===2&&t.getTemplateType()===f.AnalyticalListPage){const t=y([r],"both");if(t){return t}}else if(t.getManifestWrapper().hasMultipleVisualizations(n)||t.getTemplateType()===f.AnalyticalListPage){const{primary:t,secondary:e}=n;if(t&&t.length&&e&&e.length){const i=y([h(t[0],true),h(e[0],false)],n.defaultPath);if(i){return i}}else{throw new Error("SecondaryItems in the Views is not present")}}else if(o(n)){const e=t.getEntityTypeAnnotation(n.annotationPath);const i=e.annotation;t=e.converterContext;u=M(S(i.Text));r.visualizations.forEach((t,e)=>{var i;switch(t.type){case c.Table:const t=r.visualizations[e];const o=t.control.filters||{};o.hiddenFilters=o.hiddenFilters||{paths:[]};if(!n.keepPreviousPersonalization){t.annotation.id=d(n.key||"","LineItem")}n=n;if(((i=n.annotation)===null||i===void 0?void 0:i.term)==="com.sap.vocabularies.UI.v1.SelectionPresentationVariant"){var a;if(!n.annotation.SelectionVariant){throw new Error(`The Selection Variant is missing for the Selection Presentation Variant ${n.annotation.fullyQualifiedName}`)}p=`@${(a=n.annotation.SelectionVariant)===null||a===void 0?void 0:a.fullyQualifiedName.split("@")[1]}`}else{p=n.annotationPath}o.hiddenFilters.paths.push({annotationPath:p});t.control.filters=o;break;case c.Chart:const s=r.visualizations[e];s.id=m(n.key||"","Chart");s.multiViews=true;break;default:break}})}r.visualizations.forEach(t=>{if(t.type===c.Table){s=t.annotation.id}else if(t.type===c.Chart){l=t.id}});n=n;const g=n.visible;return{presentation:r,tableControlId:s,chartControlId:l,title:u,selectionVariantPath:p,visible:g}}else{n=n;const t=n.label,e=n.template,i=n.type,a=g(n.key||""),o=n.visible;return{title:t,fragment:e,type:i,customTabId:a,visible:o}}};const j=function(t,e,n){let i=[];if(e){e.paths.forEach(n=>{if(t.getManifestWrapper().hasMultipleVisualizations(n)){if(e.paths.length>1){throw new Error("ALP flavor cannot have multiple views")}else{n=n;i.push({converterContext:t,primary:n.primary,secondary:n.secondary,defaultPath:n.defaultPath})}}else if(n.template){n=n;i.push({key:n.key,label:n.label,template:n.template,type:"Custom",visible:n.visible})}else{n=n;const e=t.getConverterContextFor(n.contextPath||n.entitySet&&`/${n.entitySet}`||t.getContextPath()),a=e.getEntityType();if(a&&e){let t;const o=e.getEntityTypeAnnotation(n.annotationPath);const r=o.annotation;if(r){t=r.term==="com.sap.vocabularies.UI.v1.SelectionVariant"?W(a,e,false):r;i.push({converterContext:e,annotation:t,annotationPath:n.annotationPath,keepPreviousPersonalization:n.keepPreviousPersonalization,key:n.key,visible:n.visible})}}else{}}})}else{const e=t.getEntityType();if(t.getTemplateType()===f.AnalyticalListPage){i=Q(t,i)}else{i.push({annotation:W(e,t,false),converterContext:t})}}return i.map(t=>H(t,n))};const N=function(t,e){const n=t.getManifestWrapper();const i=n.getViewConfiguration();if(e.length>1&&!$(t)){return{showTabCounts:i?(i===null||i===void 0?void 0:i.showCounts)||n.hasMultipleEntitySets():undefined,id:p()}}return undefined};function Q(t,e){const n=t.getEntityType();const i=W(n,t,true);let a,o;if(i){e.push({annotation:i,converterContext:t})}else{a=E(n);o=w(n);if(a&&o){const n=[{annotationPath:"@"+a.term}];const i=[{annotationPath:"@"+o.term}];e.push({converterContext:t,primary:n,secondary:i,defaultPath:"both"})}else{throw new Error("ALP flavor needs both chart and table to load the application")}}return e}function $(t){return t.getManifestWrapper().hasMultipleVisualizations()||t.getTemplateType()===f.AnalyticalListPage}const K=function(t){const e=t.getManifestWrapper();return k([],L(e.getHeaderActions(),t).actions)};l.getHeaderActions=K;const O=function(t,e){t.forEach(t=>{if(!t.type){const n=t.presentation;n.visualizations.forEach(t=>{if(t.type===c.Chart&&t.filterId!==e){t.filterId=e}})}})};l.checkChartFilterBarId=O;const U=function(t,e){const n=t.getEntityType();const i=t.getContextPath();if(!i){throw new Error("An EntitySet is required to be able to display a ListReport, please adjust your `entitySet` property to point to one.")}const a=t.getManifestWrapper();const o=a.getViewConfiguration();const r=a.hasMultipleEntitySets();const s=j(t,o,e);const l=B(s);const c=x(s);const f=l.some(t=>t.control.type==="ResponsiveTable");let d="";let p="";const g=y();const m=h(i);const b=v(m);const P=a.getFilterConfiguration();const I=(P===null||P===void 0?void 0:P.initialLayout)!==undefined?P===null||P===void 0?void 0:P.initialLayout.toLowerCase():"compact";const V=(P===null||P===void 0?void 0:P.layout)!==undefined?P===null||P===void 0?void 0:P.layout.toLowerCase():"compact";const w=P.useSemanticDateRange!==undefined?P.useSemanticDateRange:true;const E=P.showClearButton!==undefined?P.showClearButton:false;const z=q(t,s);if(z){p=z.chartId;d=z.tableId}const S=a.useHiddenFilterBar();const M=(a.isFilterBarHidden()||S)&&p==="";const k=A(t,l);const L=k.selectionFields;const W=k.sPropertyInfo;const H=F(l,c,t);const Q=N(t,s);const U=Q?undefined:T(n,t);const G=w?R(D(n,t)):{};const J=K(t);if(r){O(s,m)}const X=l.map(t=>t.annotation.id).concat(c.map(t=>t.id));const Y=[...M&&!S?[]:[m],...a.getVariantManagement()!==u.Control?X:[],...Q?[Q.id]:[]];const Z=Q&&a.getStickyMultiTabHeaderConfiguration()?Q.id:undefined;return{mainEntitySet:i,mainEntityType:`${i}/`,multiViewsControl:Q,stickySubheaderProvider:Z,singleTableId:d,singleChartId:p,dynamicListReportId:g,headerActions:J,showPinnableToggle:f,filterBar:{propertyInfo:W,selectionFields:L,hideBasicSearch:H,showClearButton:E},views:s,filterBarId:M&&!S?"":m,filterConditions:{selectionVariant:U,defaultSemanticDates:G},variantManagement:{id:b,targetControlIds:Y.join(",")},hasMultiVisualizations:$(t),templateType:a.getTemplateType(),useSemanticDateRange:w,filterInitialLayout:I,filterLayout:V,kpiDefinitions:C(t),hideFilterBar:M,useHiddenFilterBar:S}};l.convertPage=U;function q(t,e){let n="",i="";if(t.getManifestWrapper().hasMultipleVisualizations()||t.getTemplateType()===f.AnalyticalListPage){for(const t of e){const e=t;if(e.chartControlId&&e.tableControlId){i=e.chartControlId;n=e.tableControlId;break}}}else{for(const t of e){const e=t;if(!n&&e.tableControlId){n=e.tableControlId||""}if(!i&&e.chartControlId){i=e.chartControlId||""}if(i&&n){break}}}if(n||i){return{chartId:i,tableId:n}}return undefined}return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/templates/ObjectPageConverter-dbg", ["sap/fe/core/converters/controls/Common/Action", "sap/fe/core/converters/objectPage/HeaderAndFooterAction", "sap/fe/core/helpers/BindingToolkit", "../controls/ObjectPage/Avatar", "../controls/ObjectPage/HeaderFacet", "../controls/ObjectPage/SubSection", "../helpers/BindingHelper", "../helpers/ConfigurableObject", "../helpers/ID", "../ManifestSettings"], function (Action, HeaderAndFooterAction, BindingToolkit, Avatar, HeaderFacet, SubSection, BindingHelper, ConfigurableObject, ID, ManifestSettings) {
  "use strict";

  var _exports = {};
  var VisualizationType = ManifestSettings.VisualizationType;
  var TemplateType = ManifestSettings.TemplateType;
  var getSectionID = ID.getSectionID;
  var getEditableHeaderSectionID = ID.getEditableHeaderSectionID;
  var getCustomSectionID = ID.getCustomSectionID;
  var Placement = ConfigurableObject.Placement;
  var OverrideType = ConfigurableObject.OverrideType;
  var insertCustomElements = ConfigurableObject.insertCustomElements;
  var UI = BindingHelper.UI;
  var SubSectionType = SubSection.SubSectionType;
  var createSubSections = SubSection.createSubSections;
  var createCustomSubSections = SubSection.createCustomSubSections;
  var createCustomHeaderFacetSubSections = SubSection.createCustomHeaderFacetSubSections;
  var getHeaderFacetsFromManifest = HeaderFacet.getHeaderFacetsFromManifest;
  var getHeaderFacetsFromAnnotations = HeaderFacet.getHeaderFacetsFromAnnotations;
  var getAvatar = Avatar.getAvatar;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var getHiddenHeaderActions = HeaderAndFooterAction.getHiddenHeaderActions;
  var getHeaderDefaultActions = HeaderAndFooterAction.getHeaderDefaultActions;
  var getFooterDefaultActions = HeaderAndFooterAction.getFooterDefaultActions;
  var removeDuplicateActions = Action.removeDuplicateActions;
  var getActionsFromManifest = Action.getActionsFromManifest;
  const getSectionKey = (facetDefinition, fallback) => {
    var _facetDefinition$ID, _facetDefinition$Labe;
    return ((_facetDefinition$ID = facetDefinition.ID) === null || _facetDefinition$ID === void 0 ? void 0 : _facetDefinition$ID.toString()) || ((_facetDefinition$Labe = facetDefinition.Label) === null || _facetDefinition$Labe === void 0 ? void 0 : _facetDefinition$Labe.toString()) || fallback;
  };

  /**
   * Creates a section that represents the editable header part; it is only visible in edit mode.
   *
   * @param converterContext The converter context
   * @param allHeaderFacets The converter context
   * @returns The section representing the editable header parts
   */
  function createEditableHeaderSection(converterContext, allHeaderFacets) {
    var _converterContext$get, _converterContext$get2;
    const editableHeaderSectionID = getEditableHeaderSectionID();
    const headerFacets = (_converterContext$get = converterContext.getEntityType().annotations) === null || _converterContext$get === void 0 ? void 0 : (_converterContext$get2 = _converterContext$get.UI) === null || _converterContext$get2 === void 0 ? void 0 : _converterContext$get2.HeaderFacets;
    const headerfacetSubSections = headerFacets ? createSubSections(headerFacets, converterContext, true) : [];
    const customHeaderFacetSubSections = createCustomHeaderFacetSubSections(converterContext);
    let allHeaderFacetsSubSections = [];
    if (customHeaderFacetSubSections.length > 0) {
      // merge annotation based header facets and custom header facets in the right order
      let i = 0;
      allHeaderFacets.forEach(function (item) {
        // hidden header facets are not included in allHeaderFacets array => add them anyway
        while (headerfacetSubSections.length > i && headerfacetSubSections[i].visible === "false") {
          allHeaderFacetsSubSections.push(headerfacetSubSections[i]);
          i++;
        }
        if (headerfacetSubSections.length > i && (item.key === headerfacetSubSections[i].key ||
        // for header facets with no id the keys of header facet and subsection are different => check only the last part
        item.key.slice(item.key.lastIndexOf("::") + 2) === headerfacetSubSections[i].key.slice(headerfacetSubSections[i].key.lastIndexOf("::") + 2))) {
          allHeaderFacetsSubSections.push(headerfacetSubSections[i]);
          i++;
        } else {
          customHeaderFacetSubSections.forEach(function (customItem) {
            if (item.key === customItem.key) {
              allHeaderFacetsSubSections.push(customItem);
            }
          });
        }
      });
    } else {
      allHeaderFacetsSubSections = headerfacetSubSections;
    }
    const headerSection = {
      id: editableHeaderSectionID,
      key: "EditableHeaderContent",
      title: "{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",
      visible: compileExpression(UI.IsEditable),
      subSections: allHeaderFacetsSubSections
    };
    return headerSection;
  }

  /**
   * Creates a definition for a section based on the Facet annotation.
   *
   * @param converterContext The converter context
   * @returns All sections
   */
  _exports.createEditableHeaderSection = createEditableHeaderSection;
  function getSectionsFromAnnotation(converterContext) {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3;
    const entityType = converterContext.getEntityType();
    const objectPageSections = ((_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.Facets) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.map(facetDefinition => getSectionFromAnnotation(facetDefinition, converterContext))) || [];
    return objectPageSections;
  }

  /**
   * Create an annotation based section.
   *
   * @param facet
   * @param converterContext
   * @returns The current section
   */
  function getSectionFromAnnotation(facet, converterContext) {
    var _facet$annotations, _facet$annotations$UI, _facet$annotations$UI2;
    const sectionID = getSectionID(facet);
    const section = {
      id: sectionID,
      key: getSectionKey(facet, sectionID),
      title: facet.Label ? compileExpression(getExpressionFromAnnotation(facet.Label)) : undefined,
      showTitle: !!facet.Label,
      visible: compileExpression(not(equal(getExpressionFromAnnotation((_facet$annotations = facet.annotations) === null || _facet$annotations === void 0 ? void 0 : (_facet$annotations$UI = _facet$annotations.UI) === null || _facet$annotations$UI === void 0 ? void 0 : (_facet$annotations$UI2 = _facet$annotations$UI.Hidden) === null || _facet$annotations$UI2 === void 0 ? void 0 : _facet$annotations$UI2.valueOf()), true))),
      subSections: createSubSections([facet], converterContext)
    };
    return section;
  }

  /**
   * Creates section definitions based on the manifest definitions.
   *
   * @param manifestSections The sections defined in the manifest
   * @param converterContext
   * @returns The sections defined in the manifest
   */
  function getSectionsFromManifest(manifestSections, converterContext) {
    const sections = {};
    Object.keys(manifestSections).forEach(manifestSectionKey => {
      sections[manifestSectionKey] = getSectionFromManifest(manifestSections[manifestSectionKey], manifestSectionKey, converterContext);
    });
    return sections;
  }

  /**
   * Create a manifest-based custom section.
   *
   * @param customSectionDefinition
   * @param sectionKey
   * @param converterContext
   * @returns The current custom section
   */
  function getSectionFromManifest(customSectionDefinition, sectionKey, converterContext) {
    const customSectionID = customSectionDefinition.id || getCustomSectionID(sectionKey);
    let position = customSectionDefinition.position;
    if (!position) {
      position = {
        placement: Placement.After
      };
    }
    let manifestSubSections;
    if (!customSectionDefinition.subSections) {
      // If there is no subSection defined, we add the content of the custom section as subsections
      // and make sure to set the visibility to 'true', as the actual visibility is handled by the section itself
      manifestSubSections = {
        [sectionKey]: {
          ...customSectionDefinition,
          position: undefined,
          visible: "true"
        }
      };
    } else {
      manifestSubSections = customSectionDefinition.subSections;
    }
    const subSections = createCustomSubSections(manifestSubSections, converterContext);
    const customSection = {
      id: customSectionID,
      key: sectionKey,
      title: customSectionDefinition.title,
      showTitle: !!customSectionDefinition.title,
      visible: customSectionDefinition.visible !== undefined ? customSectionDefinition.visible : "true",
      position: position,
      subSections: subSections
    };
    return customSection;
  }

  /**
   * Retrieves the ObjectPage header actions (both the default ones and the custom ones defined in the manifest).
   *
   * @param converterContext The converter context
   * @returns An array containing all the actions for this ObjectPage header
   */
  const getHeaderActions = function (converterContext) {
    const aAnnotationHeaderActions = getHeaderDefaultActions(converterContext);
    const manifestWrapper = converterContext.getManifestWrapper();
    const manifestActions = getActionsFromManifest(manifestWrapper.getHeaderActions(), converterContext, aAnnotationHeaderActions, undefined, undefined, getHiddenHeaderActions(converterContext));
    const actionOverwriteConfig = {
      isNavigable: OverrideType.overwrite,
      enabled: OverrideType.overwrite,
      visible: OverrideType.overwrite,
      defaultValuesExtensionFunction: OverrideType.overwrite,
      command: OverrideType.overwrite
    };
    const headerActions = insertCustomElements(aAnnotationHeaderActions, manifestActions.actions, actionOverwriteConfig);
    return {
      actions: removeDuplicateActions(headerActions),
      commandActions: manifestActions.commandActions
    };
  };

  /**
   * Retrieves the ObjectPage footer actions (both the default ones and the custom ones defined in the manifest).
   *
   * @param converterContext The converter context
   * @returns An array containing all the actions for this ObjectPage footer
   */
  _exports.getHeaderActions = getHeaderActions;
  const getFooterActions = function (converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    const aAnnotationFooterActions = getFooterDefaultActions(manifestWrapper.getViewLevel(), converterContext);
    const manifestActions = getActionsFromManifest(manifestWrapper.getFooterActions(), converterContext, aAnnotationFooterActions);
    const actionOverwriteConfig = {
      isNavigable: OverrideType.overwrite,
      enabled: OverrideType.overwrite,
      visible: OverrideType.overwrite,
      defaultValuesExtensionFunction: OverrideType.overwrite,
      command: OverrideType.overwrite
    };
    const footerActions = insertCustomElements(aAnnotationFooterActions, manifestActions.actions, actionOverwriteConfig);
    return {
      actions: footerActions,
      commandActions: manifestActions.commandActions
    };
  };
  _exports.getFooterActions = getFooterActions;
  function _getSubSectionVisualization(subSection) {
    var _subSection$presentat;
    return subSection !== null && subSection !== void 0 && (_subSection$presentat = subSection.presentation) !== null && _subSection$presentat !== void 0 && _subSection$presentat.visualizations[0] ? subSection.presentation.visualizations[0] : undefined;
  }
  function _isFacetHasNonResponsiveTableVisible(dataVisualizationSubSection, subSectionVisualization) {
    var _dataVisualizationSub, _subSectionVisualizat;
    return dataVisualizationSubSection.visible === "true" && (dataVisualizationSubSection === null || dataVisualizationSubSection === void 0 ? void 0 : (_dataVisualizationSub = dataVisualizationSubSection.presentation) === null || _dataVisualizationSub === void 0 ? void 0 : _dataVisualizationSub.visualizations) && (subSectionVisualization === null || subSectionVisualization === void 0 ? void 0 : subSectionVisualization.type) === "Table" && (subSectionVisualization === null || subSectionVisualization === void 0 ? void 0 : (_subSectionVisualizat = subSectionVisualization.control) === null || _subSectionVisualizat === void 0 ? void 0 : _subSectionVisualizat.type) !== "ResponsiveTable";
  }
  function _setNonResponsiveTableVisualizationInformation(sections, dataVisualizationSubSection, subSectionVisualization, sectionLayout) {
    if (_isFacetHasNonResponsiveTableVisible(dataVisualizationSubSection, subSectionVisualization)) {
      const tableControlConfiguration = subSectionVisualization.control;
      if (!(sectionLayout === "Page" && sections.length > 1)) {
        tableControlConfiguration.rowCountMode = "Auto";
      }
      if (sectionLayout !== "Tabs") {
        tableControlConfiguration.useCondensedTableLayout = false;
      }
    }
  }
  function _setNonResponsiveTableWithMixFacetsInformation(subSection, sectionLayout) {
    var _subSection$content;
    if ((subSection === null || subSection === void 0 ? void 0 : (_subSection$content = subSection.content) === null || _subSection$content === void 0 ? void 0 : _subSection$content.length) === 1) {
      var _presentation;
      const tableControl = ((_presentation = subSection.content[0].presentation) === null || _presentation === void 0 ? void 0 : _presentation.visualizations[0]).control;
      if (tableControl.type !== "ResponsiveTable") {
        tableControl.rowCountMode = "Auto";
        if (sectionLayout !== "Tabs") {
          tableControl.useCondensedTableLayout = false;
        }
      }
    }
  }

  /**
   * Set the NonResponsive Table (grid, tree, analytical) display information.
   *
   * @param sections The ObjectPage sections
   * @param section The current ObjectPage section processed
   * @param sectionLayout
   */
  function _setNonResponsiveTableSubSectionControlConfiguration(sections, section, sectionLayout) {
    let dataVisualizationSubSection;
    let subSectionVisualization;
    const subSections = section.subSections;
    if (subSections.length === 1) {
      dataVisualizationSubSection = subSections[0];
      switch (subSections[0].type) {
        case "DataVisualization":
          subSectionVisualization = _getSubSectionVisualization(dataVisualizationSubSection);
          _setNonResponsiveTableVisualizationInformation(sections, dataVisualizationSubSection, subSectionVisualization, sectionLayout);
          break;
        case "Mixed":
          _setNonResponsiveTableWithMixFacetsInformation(dataVisualizationSubSection, sectionLayout);
          break;
        default:
          break;
      }
      return;
    }
    _removeCondensedFromSubSections(subSections);
  }

  /**
   * Remove the condense layout mode from the subsections.
   *
   * @param subSections The subSections where we need to remove the condensed layout
   */
  function _removeCondensedFromSubSections(subSections) {
    let dataVisualizationSubSection;
    // We check in each subsection if there is visualizations
    subSections.forEach(subSection => {
      var _dataVisualizationSub2, _dataVisualizationSub3, _dataVisualizationSub6;
      dataVisualizationSubSection = subSection;
      if ((_dataVisualizationSub2 = dataVisualizationSubSection) !== null && _dataVisualizationSub2 !== void 0 && (_dataVisualizationSub3 = _dataVisualizationSub2.presentation) !== null && _dataVisualizationSub3 !== void 0 && _dataVisualizationSub3.visualizations) {
        var _dataVisualizationSub4, _dataVisualizationSub5;
        (_dataVisualizationSub4 = dataVisualizationSubSection) === null || _dataVisualizationSub4 === void 0 ? void 0 : (_dataVisualizationSub5 = _dataVisualizationSub4.presentation) === null || _dataVisualizationSub5 === void 0 ? void 0 : _dataVisualizationSub5.visualizations.forEach(singleVisualization => {
          if (singleVisualization.type === VisualizationType.Table) {
            singleVisualization.control.useCondensedTableLayout = false;
          }
        });
      }
      // Then we check the content of the subsection, and in each content we check if there is a table to set its condensed layout to false
      if ((_dataVisualizationSub6 = dataVisualizationSubSection) !== null && _dataVisualizationSub6 !== void 0 && _dataVisualizationSub6.content) {
        dataVisualizationSubSection.content.forEach(singleContent => {
          var _presentation2;
          (_presentation2 = singleContent.presentation) === null || _presentation2 === void 0 ? void 0 : _presentation2.visualizations.forEach(singleVisualization => {
            if (singleVisualization.type === VisualizationType.Table) {
              singleVisualization.control.useCondensedTableLayout = false;
            }
          });
        });
      }
    });
  }
  /**
   * Retrieves and merges the ObjectPage sections defined in the annotation and in the manifest.
   *
   * @param converterContext The converter context
   * @returns An array of sections.
   */

  const getSections = function (converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    const sections = insertCustomElements(getSectionsFromAnnotation(converterContext), getSectionsFromManifest(manifestWrapper.getSections(), converterContext), {
      title: OverrideType.overwrite,
      visible: OverrideType.overwrite,
      subSections: {
        actions: OverrideType.merge,
        title: OverrideType.overwrite,
        sideContent: OverrideType.overwrite,
        objectPageLazyLoaderEnabled: OverrideType.overwrite
      }
    });
    // Level Adjustment for "Mixed" Collection Facets:
    // ==============================================
    // The manifest definition of custom side contents and actions still needs to be aligned for "Mixed" collection facets:
    // Collection facets containing tables gain an extra reference facet as a table wrapper to ensure, that the table is always
    // placed in an own individual Object Page Block; this additional hierarchy level is unknown to app developers, which are
    // defining the side content and actions in the manifest at collection facet level; now, since the sideContent always needs
    // to be assigned to a block, and actions always need to be assigned to a form,
    // we need to move the sideContent and actions from a mixed collection facet to its content.
    // ==============================================
    sections.forEach(function (section) {
      var _section$subSections;
      _setNonResponsiveTableSubSectionControlConfiguration(sections, section, manifestWrapper.getSectionLayout());
      (_section$subSections = section.subSections) === null || _section$subSections === void 0 ? void 0 : _section$subSections.forEach(function (subSection) {
        var _subSection$content3;
        subSection.title = subSection.title === "undefined" ? undefined : subSection.title;
        if (subSection.type === "Mixed") {
          var _subSection$content2;
          (_subSection$content2 = subSection.content) === null || _subSection$content2 === void 0 ? void 0 : _subSection$content2.forEach(content => {
            content.objectPageLazyLoaderEnabled = subSection.objectPageLazyLoaderEnabled;
          });
        }
        if (subSection.type === "Mixed" && (_subSection$content3 = subSection.content) !== null && _subSection$content3 !== void 0 && _subSection$content3.length) {
          var _actions;
          const firstForm = subSection.content.find(element => element.type === SubSectionType.Form);

          // 1. Copy sideContent to the SubSection's first form; or -- if unavailable -- to its first content
          // 2. Copy actions to the first form of the SubSection's content
          // 3. Delete sideContent / actions at the (invalid) manifest level

          if (subSection.sideContent) {
            if (firstForm) {
              // If there is a form, it always needs to be attached to the form, as the form inherits the ID of the SubSection
              firstForm.sideContent = subSection.sideContent;
            } else {
              subSection.content[0].sideContent = subSection.sideContent;
            }
            subSection.sideContent = undefined;
          }
          if (firstForm && (_actions = subSection.actions) !== null && _actions !== void 0 && _actions.length) {
            firstForm.actions = subSection.actions;
            subSection.actions = [];
          }
        }
      });
    });
    return sections;
  };

  /**
   * Determines if the ObjectPage has header content.
   *
   * @param converterContext The instance of the converter context
   * @returns `true` if there is at least on header facet
   */
  _exports.getSections = getSections;
  function hasHeaderContent(converterContext) {
    var _converterContext$get3, _converterContext$get4;
    const manifestWrapper = converterContext.getManifestWrapper();
    return (((_converterContext$get3 = converterContext.getEntityType().annotations) === null || _converterContext$get3 === void 0 ? void 0 : (_converterContext$get4 = _converterContext$get3.UI) === null || _converterContext$get4 === void 0 ? void 0 : _converterContext$get4.HeaderFacets) || []).length > 0 || Object.keys(manifestWrapper.getHeaderFacets()).length > 0;
  }

  /**
   * Gets the expression to evaluate the visibility of the header content.
   *
   * @param converterContext The instance of the converter context
   * @returns The binding expression for the Delete button
   */
  function getShowHeaderContentExpression(converterContext) {
    const manifestWrapper = converterContext.getManifestWrapper();
    return ifElse(!hasHeaderContent(converterContext), constant(false), ifElse(equal(manifestWrapper.isHeaderEditable(), false), constant(true), not(UI.IsEditable)));
  }

  /**
   * Gets the binding expression to evaluate the visibility of the header content.
   *
   * @param converterContext The instance of the converter context
   * @returns The binding expression for the Delete button
   */
  const getShowHeaderContent = function (converterContext) {
    return compileExpression(getShowHeaderContentExpression(converterContext));
  };

  /**
   * Gets the binding expression to evaluate the visibility of the avatar when the header is in expanded state.
   *
   * @param converterContext The instance of the converter context
   * @returns The binding expression for the Delete button
   */
  _exports.getShowHeaderContent = getShowHeaderContent;
  const getExpandedImageVisible = function (converterContext) {
    return compileExpression(not(getShowHeaderContentExpression(converterContext)));
  };
  _exports.getExpandedImageVisible = getExpandedImageVisible;
  const convertPage = function (converterContext) {
    var _entityType$annotatio4, _entityType$annotatio5;
    const manifestWrapper = converterContext.getManifestWrapper();
    let headerSection;
    const entityType = converterContext.getEntityType();

    // Retrieve all header facets (from annotations & custom)
    const headerFacets = insertCustomElements(getHeaderFacetsFromAnnotations(converterContext), getHeaderFacetsFromManifest(manifestWrapper.getHeaderFacets()));

    // Retrieve the page header actions
    const headerActions = getHeaderActions(converterContext);

    // Retrieve the page footer actions
    const footerActions = getFooterActions(converterContext);
    if (manifestWrapper.isHeaderEditable() && ((_entityType$annotatio4 = entityType.annotations.UI) !== null && _entityType$annotatio4 !== void 0 && _entityType$annotatio4.HeaderFacets || (_entityType$annotatio5 = entityType.annotations.UI) !== null && _entityType$annotatio5 !== void 0 && _entityType$annotatio5.HeaderInfo)) {
      headerSection = createEditableHeaderSection(converterContext, headerFacets);
    }
    const sections = getSections(converterContext);
    return {
      template: TemplateType.ObjectPage,
      header: {
        visible: manifestWrapper.getShowObjectPageHeader(),
        section: headerSection,
        facets: headerFacets,
        actions: headerActions.actions,
        showContent: getShowHeaderContent(converterContext),
        hasContent: hasHeaderContent(converterContext),
        avatar: getAvatar(converterContext),
        title: {
          expandedImageVisible: getExpandedImageVisible(converterContext)
        }
      },
      sections: sections,
      footerActions: footerActions.actions,
      headerCommandActions: headerActions.commandActions,
      footerCommandActions: footerActions.commandActions,
      showAnchorBar: manifestWrapper.getShowAnchorBar(),
      useIconTabBar: manifestWrapper.useIconTabBar()
    };
  };
  _exports.convertPage = convertPage;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/converters/templates/ObjectPageConverter", ["sap/fe/core/converters/controls/Common/Action","sap/fe/core/converters/objectPage/HeaderAndFooterAction","sap/fe/core/helpers/BindingToolkit","../controls/ObjectPage/Avatar","../controls/ObjectPage/HeaderFacet","../controls/ObjectPage/SubSection","../helpers/BindingHelper","../helpers/ConfigurableObject","../helpers/ID","../ManifestSettings"],function(e,t,n,o,i,a,s,r,c,l){"use strict";var d={};var v=l.VisualizationType;var u=l.TemplateType;var f=c.getSectionID;var b=c.getEditableHeaderSectionID;var g=c.getCustomSectionID;var p=r.Placement;var m=r.OverrideType;var y=r.insertCustomElements;var h=s.UI;var E=a.SubSectionType;var A=a.createSubSections;var S=a.createCustomSubSections;var C=a.createCustomHeaderFacetSubSections;var T=i.getHeaderFacetsFromManifest;var w=i.getHeaderFacetsFromAnnotations;var H=o.getAvatar;var I=n.not;var F=n.ifElse;var k=n.getExpressionFromAnnotation;var L=n.equal;var M=n.constant;var O=n.compileExpression;var P=t.getHiddenHeaderActions;var j=t.getHeaderDefaultActions;var z=t.getFooterDefaultActions;var x=e.removeDuplicateActions;var D=e.getActionsFromManifest;const B=(e,t)=>{var n,o;return((n=e.ID)===null||n===void 0?void 0:n.toString())||((o=e.Label)===null||o===void 0?void 0:o.toString())||t};function U(e,t){var n,o;const i=b();const a=(n=e.getEntityType().annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:o.HeaderFacets;const s=a?A(a,e,true):[];const r=C(e);let c=[];if(r.length>0){let e=0;t.forEach(function(t){while(s.length>e&&s[e].visible==="false"){c.push(s[e]);e++}if(s.length>e&&(t.key===s[e].key||t.key.slice(t.key.lastIndexOf("::")+2)===s[e].key.slice(s[e].key.lastIndexOf("::")+2))){c.push(s[e]);e++}else{r.forEach(function(e){if(t.key===e.key){c.push(e)}})}})}else{c=s}const l={id:i,key:"EditableHeaderContent",title:"{sap.fe.i18n>T_COMMON_OBJECT_PAGE_HEADER_SECTION}",visible:O(h.IsEditable),subSections:c};return l}d.createEditableHeaderSection=U;function V(e){var t,n,o;const i=e.getEntityType();const a=((t=i.annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:(o=n.Facets)===null||o===void 0?void 0:o.map(t=>W(t,e)))||[];return a}function W(e,t){var n,o,i;const a=f(e);const s={id:a,key:B(e,a),title:e.Label?O(k(e.Label)):undefined,showTitle:!!e.Label,visible:O(I(L(k((n=e.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:(i=o.Hidden)===null||i===void 0?void 0:i.valueOf()),true))),subSections:A([e],t)};return s}function _(e,t){const n={};Object.keys(e).forEach(o=>{n[o]=N(e[o],o,t)});return n}function N(e,t,n){const o=e.id||g(t);let i=e.position;if(!i){i={placement:p.After}}let a;if(!e.subSections){a={[t]:{...e,position:undefined,visible:"true"}}}else{a=e.subSections}const s=S(a,n);const r={id:o,key:t,title:e.title,showTitle:!!e.title,visible:e.visible!==undefined?e.visible:"true",position:i,subSections:s};return r}const R=function(e){const t=j(e);const n=e.getManifestWrapper();const o=D(n.getHeaderActions(),e,t,undefined,undefined,P(e));const i={isNavigable:m.overwrite,enabled:m.overwrite,visible:m.overwrite,defaultValuesExtensionFunction:m.overwrite,command:m.overwrite};const a=y(t,o.actions,i);return{actions:x(a),commandActions:o.commandActions}};d.getHeaderActions=R;const q=function(e){const t=e.getManifestWrapper();const n=z(t.getViewLevel(),e);const o=D(t.getFooterActions(),e,n);const i={isNavigable:m.overwrite,enabled:m.overwrite,visible:m.overwrite,defaultValuesExtensionFunction:m.overwrite,command:m.overwrite};const a=y(n,o.actions,i);return{actions:a,commandActions:o.commandActions}};d.getFooterActions=q;function G(e){var t;return e!==null&&e!==void 0&&(t=e.presentation)!==null&&t!==void 0&&t.visualizations[0]?e.presentation.visualizations[0]:undefined}function J(e,t){var n,o;return e.visible==="true"&&(e===null||e===void 0?void 0:(n=e.presentation)===null||n===void 0?void 0:n.visualizations)&&(t===null||t===void 0?void 0:t.type)==="Table"&&(t===null||t===void 0?void 0:(o=t.control)===null||o===void 0?void 0:o.type)!=="ResponsiveTable"}function K(e,t,n,o){if(J(t,n)){const t=n.control;if(!(o==="Page"&&e.length>1)){t.rowCountMode="Auto"}if(o!=="Tabs"){t.useCondensedTableLayout=false}}}function Q(e,t){var n;if((e===null||e===void 0?void 0:(n=e.content)===null||n===void 0?void 0:n.length)===1){var o;const n=((o=e.content[0].presentation)===null||o===void 0?void 0:o.visualizations[0]).control;if(n.type!=="ResponsiveTable"){n.rowCountMode="Auto";if(t!=="Tabs"){n.useCondensedTableLayout=false}}}}function X(e,t,n){let o;let i;const a=t.subSections;if(a.length===1){o=a[0];switch(a[0].type){case"DataVisualization":i=G(o);K(e,o,i,n);break;case"Mixed":Q(o,n);break;default:break}return}Y(a)}function Y(e){let t;e.forEach(e=>{var n,o,i;t=e;if((n=t)!==null&&n!==void 0&&(o=n.presentation)!==null&&o!==void 0&&o.visualizations){var a,s;(a=t)===null||a===void 0?void 0:(s=a.presentation)===null||s===void 0?void 0:s.visualizations.forEach(e=>{if(e.type===v.Table){e.control.useCondensedTableLayout=false}})}if((i=t)!==null&&i!==void 0&&i.content){t.content.forEach(e=>{var t;(t=e.presentation)===null||t===void 0?void 0:t.visualizations.forEach(e=>{if(e.type===v.Table){e.control.useCondensedTableLayout=false}})})}})}const Z=function(e){const t=e.getManifestWrapper();const n=y(V(e),_(t.getSections(),e),{title:m.overwrite,visible:m.overwrite,subSections:{actions:m.merge,title:m.overwrite,sideContent:m.overwrite,objectPageLazyLoaderEnabled:m.overwrite}});n.forEach(function(e){var o;X(n,e,t.getSectionLayout());(o=e.subSections)===null||o===void 0?void 0:o.forEach(function(e){var t;e.title=e.title==="undefined"?undefined:e.title;if(e.type==="Mixed"){var n;(n=e.content)===null||n===void 0?void 0:n.forEach(t=>{t.objectPageLazyLoaderEnabled=e.objectPageLazyLoaderEnabled})}if(e.type==="Mixed"&&(t=e.content)!==null&&t!==void 0&&t.length){var o;const t=e.content.find(e=>e.type===E.Form);if(e.sideContent){if(t){t.sideContent=e.sideContent}else{e.content[0].sideContent=e.sideContent}e.sideContent=undefined}if(t&&(o=e.actions)!==null&&o!==void 0&&o.length){t.actions=e.actions;e.actions=[]}}})});return n};d.getSections=Z;function $(e){var t,n;const o=e.getManifestWrapper();return(((t=e.getEntityType().annotations)===null||t===void 0?void 0:(n=t.UI)===null||n===void 0?void 0:n.HeaderFacets)||[]).length>0||Object.keys(o.getHeaderFacets()).length>0}function ee(e){const t=e.getManifestWrapper();return F(!$(e),M(false),F(L(t.isHeaderEditable(),false),M(true),I(h.IsEditable)))}const te=function(e){return O(ee(e))};d.getShowHeaderContent=te;const ne=function(e){return O(I(ee(e)))};d.getExpandedImageVisible=ne;const oe=function(e){var t,n;const o=e.getManifestWrapper();let i;const a=e.getEntityType();const s=y(w(e),T(o.getHeaderFacets()));const r=R(e);const c=q(e);if(o.isHeaderEditable()&&((t=a.annotations.UI)!==null&&t!==void 0&&t.HeaderFacets||(n=a.annotations.UI)!==null&&n!==void 0&&n.HeaderInfo)){i=U(e,s)}const l=Z(e);return{template:u.ObjectPage,header:{visible:o.getShowObjectPageHeader(),section:i,facets:s,actions:r.actions,showContent:te(e),hasContent:$(e),avatar:H(e),title:{expandedImageVisible:ne(e)}},sections:l,footerActions:c.actions,headerCommandActions:r.commandActions,footerCommandActions:c.commandActions,showAnchorBar:o.getShowAnchorBar(),useIconTabBar:o.useIconTabBar()}};d.convertPage=oe;return d},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/CollaborationFormatter-dbg", ["sap/fe/core/controllerextensions/collaboration/CollaborationCommon", "sap/ui/core/Core"], function (CollaborationCommon, Core) {
  "use strict";

  var _exports = {};
  var getActivityKeyFromPath = CollaborationCommon.getActivityKeyFromPath;
  const collaborationFormatters = function (sName) {
    if (collaborationFormatters.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return collaborationFormatters[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  const hasCollaborationActivity = function (activities) {
    return !!getCollaborationActivity(activities, this);
  };
  hasCollaborationActivity.__functionName = "sap.fe.core.formatters.CollaborationFormatter#hasCollaborationActivity";
  _exports.hasCollaborationActivity = hasCollaborationActivity;
  const getCollaborationActivityInitials = function (activities) {
    const activity = getCollaborationActivity(activities, this);
    return activity === null || activity === void 0 ? void 0 : activity.initials;
  };
  getCollaborationActivityInitials.__functionName = "sap.fe.core.formatters.CollaborationFormatter#getCollaborationActivityInitials";
  _exports.getCollaborationActivityInitials = getCollaborationActivityInitials;
  const getCollaborationActivityColor = function (activities) {
    const activity = getCollaborationActivity(activities, this);
    return activity !== null && activity !== void 0 && activity.color ? `Accent${activity.color}` : undefined;
  };
  getCollaborationActivityColor.__functionName = "sap.fe.core.formatters.CollaborationFormatter#getCollaborationActivityColor";
  _exports.getCollaborationActivityColor = getCollaborationActivityColor;
  function getCollaborationActivity(activities, control) {
    var _control$getBindingCo;
    const path = control === null || control === void 0 ? void 0 : (_control$getBindingCo = control.getBindingContext()) === null || _control$getBindingCo === void 0 ? void 0 : _control$getBindingCo.getPath();
    if (!path) {
      return undefined;
    }
    const activityKey = getActivityKeyFromPath(path);
    if (activities && activities.length > 0) {
      return activities.find(activity => {
        return activity.key === activityKey;
      });
    } else {
      return undefined;
    }
  }

  /**
   * Compute the Invitation dialog title based on the underlying resource bundle.
   *
   * @param args The inner function parameters
   * @returns The dialog title
   */
  const getFormattedText = function () {
    const textId = arguments.length <= 0 ? undefined : arguments[0];
    const resourceModel = Core.getLibraryResourceBundle("sap.fe.core");
    const params = [];
    for (let i = 1; i < arguments.length; i++) {
      params.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);
    }
    return resourceModel.getText(textId, params);
  };
  getFormattedText.__functionName = "sap.fe.core.formatters.CollaborationFormatter#getFormattedText";
  _exports.getFormattedText = getFormattedText;
  collaborationFormatters.hasCollaborationActivity = hasCollaborationActivity;
  collaborationFormatters.getCollaborationActivityInitials = getCollaborationActivityInitials;
  collaborationFormatters.getCollaborationActivityColor = getCollaborationActivityColor;
  collaborationFormatters.getFormattedText = getFormattedText;
  /**
   * @global
   */
  return collaborationFormatters;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/CollaborationFormatter", ["sap/fe/core/controllerextensions/collaboration/CollaborationCommon","sap/ui/core/Core"],function(t,o){"use strict";var n={};var e=t.getActivityKeyFromPath;const r=function(t){if(r.hasOwnProperty(t)){for(var o=arguments.length,n=new Array(o>1?o-1:0),e=1;e<o;e++){n[e-1]=arguments[e]}return r[t].apply(this,n)}else{return""}};const i=function(t){return!!c(t,this)};i.__functionName="sap.fe.core.formatters.CollaborationFormatter#hasCollaborationActivity";n.hasCollaborationActivity=i;const a=function(t){const o=c(t,this);return o===null||o===void 0?void 0:o.initials};a.__functionName="sap.fe.core.formatters.CollaborationFormatter#getCollaborationActivityInitials";n.getCollaborationActivityInitials=a;const l=function(t){const o=c(t,this);return o!==null&&o!==void 0&&o.color?`Accent${o.color}`:undefined};l.__functionName="sap.fe.core.formatters.CollaborationFormatter#getCollaborationActivityColor";n.getCollaborationActivityColor=l;function c(t,o){var n;const r=o===null||o===void 0?void 0:(n=o.getBindingContext())===null||n===void 0?void 0:n.getPath();if(!r){return undefined}const i=e(r);if(t&&t.length>0){return t.find(t=>t.key===i)}else{return undefined}}const s=function(){const t=arguments.length<=0?undefined:arguments[0];const n=o.getLibraryResourceBundle("sap.fe.core");const e=[];for(let t=1;t<arguments.length;t++){e.push(t<0||arguments.length<=t?undefined:arguments[t])}return n.getText(t,e)};s.__functionName="sap.fe.core.formatters.CollaborationFormatter#getFormattedText";n.getFormattedText=s;r.hasCollaborationActivity=i;r.getCollaborationActivityInitials=a;r.getCollaborationActivityColor=l;r.getFormattedText=s;return r},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/FPMFormatter-dbg", [], function () {
  "use strict";

  const customBooleanPropertyCheck = function (oView, modulePath, aSelectedContexts) {
    const oExtensionAPI = oView.getController().getExtensionAPI();
    const parts = modulePath.split(".");
    const methodName = parts.pop();
    const moduleName = parts.join("/");
    return new Promise(resolve => {
      sap.ui.require([moduleName], module => {
        resolve(module[methodName].bind(oExtensionAPI)(this.getBindingContext(), aSelectedContexts || []));
      });
    });
  };
  customBooleanPropertyCheck.__functionName = "sap.fe.core.formatters.FPMFormatter#customBooleanPropertyCheck";

  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const fpmFormatter = function (sName) {
    if (fpmFormatter.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return fpmFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  fpmFormatter.customBooleanPropertyCheck = customBooleanPropertyCheck;

  /**
   * @global
   */
  return fpmFormatter;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/FPMFormatter", [],function(){"use strict";const t=function(t,e,n){const o=t.getController().getExtensionAPI();const r=e.split(".");const s=r.pop();const i=r.join("/");return new Promise(t=>{sap.ui.require([i],e=>{t(e[s].bind(o)(this.getBindingContext(),n||[]))})})};t.__functionName="sap.fe.core.formatters.FPMFormatter#customBooleanPropertyCheck";const e=function(t){if(e.hasOwnProperty(t)){for(var n=arguments.length,o=new Array(n>1?n-1:0),r=1;r<n;r++){o[r-1]=arguments[r]}return e[t].apply(this,o)}else{return""}};e.customBooleanPropertyCheck=t;return e},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/FiscalFormat-dbg", ["sap/ui/core/Locale", "sap/ui/core/LocaleData"], function (Locale, LocaleData) {
  "use strict";

  var _exports = {};
  /**
   * Constructor for a new FiscalFormat
   *
   * @param formatOptions Object that defines format options
   * @param formatOptions.format String with fiscal format
   * @param formatOptions.calendarType String with calendar type
   * @class
   * <h3>Overview</h3>
   *
   * Formatting, Validating and Parsing Fiscal Dates
   * @author SAP SE
   * @since 1.110.0
   * @experimental This module is only for internal/experimental use!
   * @hideconstructor
   */
  let FiscalFormat = /*#__PURE__*/function () {
    function FiscalFormat(formatOptions) {
      const locale = new Locale(sap.ui.getCore().getConfiguration().getLanguage()),
        localeData = new LocaleData(locale);
      let format = formatOptions.format;
      if (formatOptions.format.length > 4) {
        format = "yM";
      } else if (formatOptions.format === "PPP") {
        format = "M";
      }
      let pattern = localeData.getCustomDateTimePattern(format, formatOptions.calendarType);
      pattern = pattern.replace(/([\u4e00-\u9faf\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uffef])+/gi, "");
      // Parsing the "yM" format pattern to the pattern that would match the passed format
      if (formatOptions.format.length > 4) {
        pattern = pattern.replace(/y+/i, formatOptions.format.slice(0, formatOptions.format.lastIndexOf("Y") + 1));
        pattern = pattern.replace(/m+/i, formatOptions.format.slice(formatOptions.format.lastIndexOf("Y") + 1));
      } else if (formatOptions.format === "PPP") {
        pattern = "PPP";
      }
      const formatArray = this.parseCalendarDatePattern(pattern);
      this.pattern = formatArray.length > 1 ? pattern : undefined;
      this._setFormatRegex(formatArray);
      this._setParseRegex(formatArray);
      this._setValidationRegex(formatArray);
    }

    /**
     * Get a date instance of the <code>FiscalFormat</code> class, which can be used for formatting.
     *
     * @param formatOptions Object that defines format options
     * @param formatOptions.format Fiscal format
     * @param formatOptions.calendarType Calendar type
     * @returns Instance of the FiscalFormat
     */
    _exports = FiscalFormat;
    FiscalFormat.getDateInstance = function getDateInstance(formatOptions) {
      return new FiscalFormat(formatOptions);
    };
    var _proto = FiscalFormat.prototype;
    _proto.getPattern = function getPattern() {
      return this.pattern;
    }

    /**
     * Format the raw fiscal data to a locale-dependent format.
     *
     * @param value The parameter containing a raw fiscal value
     * @returns The formatted value
     */;
    _proto.format = function format(value) {
      if (value == null) {
        return "";
      }
      if (typeof value !== "string") {
        return value;
      }
      return value.replace(this.formatRegExPattern, this.formatRegExGroups);
    }

    /**
     * Parse from a locale-dependent format to a raw value.
     *
     * @param value The string containing a parsed fiscal data value
     * @returns The raw value
     */;
    _proto.parse = function parse(value) {
      if (!value) {
        return "";
      }
      return value.replace(this.parseRegExPattern, this.parseRegExReplacer);
    }

    /**
     * Validates the data input.
     *
     * @param value The raw fiscal data
     * @returns If <code>true</code> the validation passes, otherwise <code>false</code>
     */;
    _proto.validate = function validate(value) {
      return this.validationRegExPattern.test(value);
    }

    /**
     * Parse the date pattern string and create a format array from it.
     * Array is used for data parsing and formatting.
     *
     * @param pattern The calendar date pattern string
     * @returns Format array
     */;
    _proto.parseCalendarDatePattern = function parseCalendarDatePattern(pattern) {
      const formatArray = [];
      let char,
        currentObject = {
          digits: 0,
          value: "",
          symbol: ""
        };
      for (const curChar of pattern) {
        if (char !== curChar) {
          currentObject = {
            digits: 0,
            value: "",
            symbol: ""
          };
        } else {
          currentObject.digits += 1;
          continue;
        }
        if (typeof FiscalFormat.symbols[curChar] === "undefined") {
          currentObject.value = curChar;
        } else {
          currentObject.symbol = curChar;
          currentObject.digits = 1;
        }
        char = curChar;
        formatArray.push(currentObject);
      }
      return formatArray;
    }

    /**
     * Creates the formatting regular expression based on the locale-dependent format.
     *
     * @param formatArray An array with the locale-dependent format
     */;
    _proto._setFormatRegex = function _setFormatRegex(formatArray) {
      const regExPattern = [],
        regExGroups = [];
      let part, symbol, regex, year;
      for (let i = 0; i < formatArray.length; i++) {
        part = formatArray[i];
        symbol = part.symbol;
        regex = FiscalFormat.symbols[symbol].format;
        if (symbol === "") {
          regExGroups[i] = part.value;
        } else if (symbol.toLocaleLowerCase() === "y") {
          regExPattern.unshift("(" + regex.source + ")");
          regExGroups[i] = "$" + 1;
        } else {
          regExPattern.push("(" + regex.source + ")");
          year = formatArray.some(function (partEntry) {
            return partEntry.symbol.toLowerCase() === "y";
          });
          regExGroups[i] = year ? "$" + 2 : "$" + 1;
        }
      }
      this.formatRegExPattern = new RegExp(regExPattern.join(""));
      this.formatRegExGroups = regExGroups.join("");
    }

    /**
     * Creates the parsing regular expression based on the locale-dependent format.
     *
     * @param formatArray An array with the locale-dependent format
     */;
    _proto._setParseRegex = function _setParseRegex(formatArray) {
      const regExPattern = [],
        filteredFormat = {};
      let symbol,
        regex,
        currGroup,
        group = 0;
      for (const part of formatArray) {
        symbol = part.symbol;
        if (symbol === "") {
          regExPattern.push("\\D+?");
        } else {
          regex = FiscalFormat.symbols[symbol].parse;
          regExPattern.push("(" + regex.source + ")");
          currGroup = ++group;
          filteredFormat[currGroup] = part;
        }
      }
      this.parseRegExPattern = new RegExp("^" + regExPattern.join("") + "$");
      this.parseRegExReplacer = this.getRegExReplacer(filteredFormat);
    }

    /**
     * Creates a function that is used to replace strings and then performs raw string parsing.
     *
     * @param filteredFormat An array with the locale-dependent format
     * @returns Function that can be passed into the string.replace function
     */;
    _proto.getRegExReplacer = function getRegExReplacer(filteredFormat) {
      return function () {
        const result = [];
        let valuePart, stringGroup;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        for (const key in filteredFormat) {
          valuePart = filteredFormat[key];
          stringGroup = args[parseInt(key, 10)];
          if (stringGroup.length < valuePart.digits) {
            if (valuePart.symbol.toLowerCase() === "y") {
              stringGroup = parseYear(stringGroup);
            } else {
              stringGroup = stringGroup.padStart(valuePart.digits, "0");
            }
          }
          if (valuePart.symbol.toLowerCase() === "y") {
            result.unshift(stringGroup);
          } else {
            result.push(stringGroup);
          }
        }
        return result.join("");
      };
    }

    /**
     * Creates the validation regular expression based on the format.
     *
     * @param formatArray An array with the locale-dependent format
     */;
    _proto._setValidationRegex = function _setValidationRegex(formatArray) {
      const regExPattern = [];
      let symbol, regex;
      for (const part of formatArray) {
        symbol = part.symbol;
        regex = FiscalFormat.symbols[symbol].format;
        if (symbol === "") {
          continue;
        } else if (symbol.toLowerCase() === "y") {
          regExPattern.unshift(regex.source);
        } else {
          regExPattern.push(regex.source);
        }
      }
      this.validationRegExPattern = new RegExp("^(" + regExPattern.join(")(") + ")$");
    }

    /**
     * Regular expression patterns used to format fiscal date strings
     */;
    return FiscalFormat;
  }();
  /**
   * Parses the Year format. This is how the DateFormat parses years, except those years consisting of 3 digits, since currency fiscal dates support only years consisting of 4 digits.
   *
   * @param year Year string
   * @returns Year number
   */
  FiscalFormat.regexFormatPatterns = {
    year: /[1-9]\d{3}/,
    period: /\d{3}/,
    quarter: /[1-4]/,
    week: /0[1-9]|[1-4]\d|5[0-3]/,
    day: /371|370|3[0-6]\d|[1-2]\d{2}|[1-9]\d|[1-9]/
  };
  _exports = FiscalFormat;
  FiscalFormat.regexParsePatterns = {
    year: /\d{1,4}/,
    period: /\d{1,3}/,
    quarter: /[1-4]/,
    week: /\d{1,2}/,
    day: /[1-9]/
  };
  FiscalFormat.symbols = {
    "": {
      format: / /,
      parse: / /
    },
    // "text"
    y: {
      format: FiscalFormat.regexFormatPatterns.year,
      parse: FiscalFormat.regexParsePatterns.year
    },
    // "year"
    Y: {
      format: FiscalFormat.regexFormatPatterns.year,
      parse: FiscalFormat.regexParsePatterns.year
    },
    // "weekYear"
    P: {
      format: FiscalFormat.regexFormatPatterns.period,
      parse: FiscalFormat.regexParsePatterns.period
    },
    // "period"
    W: {
      format: FiscalFormat.regexFormatPatterns.week,
      parse: FiscalFormat.regexParsePatterns.week
    },
    // "weekInYear"
    d: {
      format: FiscalFormat.regexFormatPatterns.day,
      parse: FiscalFormat.regexParsePatterns.day
    },
    // "dayInYear"
    Q: {
      format: FiscalFormat.regexFormatPatterns.quarter,
      parse: FiscalFormat.regexParsePatterns.quarter
    },
    // "quarter"
    q: {
      format: FiscalFormat.regexFormatPatterns.quarter,
      parse: FiscalFormat.regexParsePatterns.quarter
    } //"quarterStandalone"
  };

  function parseYear(year) {
    let parsedYear = Number.parseInt(year, 10);
    const currentYear = new Date().getUTCFullYear(),
      currentCentury = Math.floor(currentYear / 100),
      yearDiff = currentCentury * 100 + parsedYear - currentYear;
    if (year.length === 3) {
      parsedYear += Math.floor((currentCentury - 1) / 10) * 1000;
    } else if (yearDiff < -70) {
      parsedYear += (currentCentury + 1) * 100; // Take next century if "year" is 30 years in the future. Current year 1999 and we enter 28 it will we 2028
    } else if (yearDiff < 30) {
      parsedYear += currentCentury * 100; // Take next century if "year" is 30 years in the future. Current year 2000 and we enter 29 it will we 2029
    } else {
      parsedYear += (currentCentury - 1) * 100; // Any entered "year" that is more than 30 years in the future will be treated as from previous century
    }

    return parsedYear;
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/FiscalFormat", ["sap/ui/core/Locale","sap/ui/core/LocaleData"],function(e,t){"use strict";var r={};let a=function(){function a(r){const a=new e(sap.ui.getCore().getConfiguration().getLanguage()),s=new t(a);let n=r.format;if(r.format.length>4){n="yM"}else if(r.format==="PPP"){n="M"}let o=s.getCustomDateTimePattern(n,r.calendarType);o=o.replace(/([\u4e00-\u9faf\u3000-\u303f\u3040-\u309f\u30a0-\u30ff\uff00-\uffef])+/gi,"");if(r.format.length>4){o=o.replace(/y+/i,r.format.slice(0,r.format.lastIndexOf("Y")+1));o=o.replace(/m+/i,r.format.slice(r.format.lastIndexOf("Y")+1))}else if(r.format==="PPP"){o="PPP"}const i=this.parseCalendarDatePattern(o);this.pattern=i.length>1?o:undefined;this._setFormatRegex(i);this._setParseRegex(i);this._setValidationRegex(i)}r=a;a.getDateInstance=function e(t){return new a(t)};var n=a.prototype;n.getPattern=function e(){return this.pattern};n.format=function e(t){if(t==null){return""}if(typeof t!=="string"){return t}return t.replace(this.formatRegExPattern,this.formatRegExGroups)};n.parse=function e(t){if(!t){return""}return t.replace(this.parseRegExPattern,this.parseRegExReplacer)};n.validate=function e(t){return this.validationRegExPattern.test(t)};n.parseCalendarDatePattern=function e(t){const r=[];let s,n={digits:0,value:"",symbol:""};for(const e of t){if(s!==e){n={digits:0,value:"",symbol:""}}else{n.digits+=1;continue}if(typeof a.symbols[e]==="undefined"){n.value=e}else{n.symbol=e;n.digits=1}s=e;r.push(n)}return r};n._setFormatRegex=function e(t){const r=[],s=[];let n,o,i,f;for(let e=0;e<t.length;e++){n=t[e];o=n.symbol;i=a.symbols[o].format;if(o===""){s[e]=n.value}else if(o.toLocaleLowerCase()==="y"){r.unshift("("+i.source+")");s[e]="$"+1}else{r.push("("+i.source+")");f=t.some(function(e){return e.symbol.toLowerCase()==="y"});s[e]=f?"$"+2:"$"+1}}this.formatRegExPattern=new RegExp(r.join(""));this.formatRegExGroups=s.join("")};n._setParseRegex=function e(t){const r=[],s={};let n,o,i,f=0;for(const e of t){n=e.symbol;if(n===""){r.push("\\D+?")}else{o=a.symbols[n].parse;r.push("("+o.source+")");i=++f;s[i]=e}}this.parseRegExPattern=new RegExp("^"+r.join("")+"$");this.parseRegExReplacer=this.getRegExReplacer(s)};n.getRegExReplacer=function e(t){return function(){const e=[];let r,a;for(var n=arguments.length,o=new Array(n),i=0;i<n;i++){o[i]=arguments[i]}for(const n in t){r=t[n];a=o[parseInt(n,10)];if(a.length<r.digits){if(r.symbol.toLowerCase()==="y"){a=s(a)}else{a=a.padStart(r.digits,"0")}}if(r.symbol.toLowerCase()==="y"){e.unshift(a)}else{e.push(a)}}return e.join("")}};n._setValidationRegex=function e(t){const r=[];let s,n;for(const e of t){s=e.symbol;n=a.symbols[s].format;if(s===""){continue}else if(s.toLowerCase()==="y"){r.unshift(n.source)}else{r.push(n.source)}}this.validationRegExPattern=new RegExp("^("+r.join(")(")+")$")};return a}();a.regexFormatPatterns={year:/[1-9]\d{3}/,period:/\d{3}/,quarter:/[1-4]/,week:/0[1-9]|[1-4]\d|5[0-3]/,day:/371|370|3[0-6]\d|[1-2]\d{2}|[1-9]\d|[1-9]/};r=a;a.regexParsePatterns={year:/\d{1,4}/,period:/\d{1,3}/,quarter:/[1-4]/,week:/\d{1,2}/,day:/[1-9]/};a.symbols={"":{format:/ /,parse:/ /},y:{format:a.regexFormatPatterns.year,parse:a.regexParsePatterns.year},Y:{format:a.regexFormatPatterns.year,parse:a.regexParsePatterns.year},P:{format:a.regexFormatPatterns.period,parse:a.regexParsePatterns.period},W:{format:a.regexFormatPatterns.week,parse:a.regexParsePatterns.week},d:{format:a.regexFormatPatterns.day,parse:a.regexParsePatterns.day},Q:{format:a.regexFormatPatterns.quarter,parse:a.regexParsePatterns.quarter},q:{format:a.regexFormatPatterns.quarter,parse:a.regexParsePatterns.quarter}};function s(e){let t=Number.parseInt(e,10);const r=(new Date).getUTCFullYear(),a=Math.floor(r/100),s=a*100+t-r;if(e.length===3){t+=Math.floor((a-1)/10)*1e3}else if(s<-70){t+=(a+1)*100}else if(s<30){t+=a*100}else{t+=(a-1)*100}return t}return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/KPIFormatter-dbg", ["sap/ui/core/Core"], function (Core) {
  "use strict";

  const labelFormat = function (kpiTitle) {
    if (kpiTitle) {
      // Split the title in words
      const titleParts = kpiTitle.split(" ");
      let kpiLabel;
      if (titleParts.length === 1) {
        // Only 1 word --> first 3 capitalized letters of the word
        kpiLabel = titleParts[0].substring(0, 3).toUpperCase();
      } else if (titleParts.length === 2) {
        // 2 words --> first capitalized letters of these two words
        kpiLabel = (titleParts[0].substring(0, 1) + titleParts[1].substring(0, 1)).toUpperCase();
      } else {
        // 3 words or more --> first capitalized letters of the first 3 words
        kpiLabel = (titleParts[0].substring(0, 1) + titleParts[1].substring(0, 1) + titleParts[2].substring(0, 1)).toUpperCase();
      }
      return kpiLabel;
    } else {
      // No KPI title --> no label
      return "";
    }
  };
  labelFormat.__functionName = "sap.fe.core.formatters.KPIFormatter#labelFormat";

  /**
   * KPI tooltip formatting.
   *
   * @param kpiTitle KPI title
   * @param kpiValue KPI value
   * @param kpiUnit KPI unit or currency (can be undefined)
   * @param kpiStatus KPI status
   * @param hasUnit Is "true" if the KPI value has a unit or a currency
   * @returns Returns the text for the KPI tooltip.
   */
  const tooltipFormat = function (kpiTitle, kpiValue, kpiUnit, kpiStatus, hasUnit) {
    const resBundle = Core.getLibraryResourceBundle("sap.fe.core");
    const msgKey = kpiStatus ? `C_KPI_TOOLTIP_${kpiStatus.toUpperCase()}` : "C_KPI_TOOLTIP_NONE";
    let amountWithUnit;
    if (hasUnit === "true") {
      if (!kpiUnit) {
        // No unit means multi-unit situation
        amountWithUnit = resBundle.getText("C_KPI_TOOLTIP_AMOUNT_MULTIUNIT");
      } else {
        amountWithUnit = `${kpiValue} ${kpiUnit}`;
      }
    } else {
      amountWithUnit = kpiValue;
    }
    return resBundle.getText(msgKey, [kpiTitle, amountWithUnit]);
  };
  tooltipFormat.__functionName = "sap.fe.core.formatters.KPIFormatter#tooltipFormat";

  // See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax
  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const kpiFormatters = function (sName) {
    if (kpiFormatters.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return kpiFormatters[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  kpiFormatters.labelFormat = labelFormat;
  kpiFormatters.tooltipFormat = tooltipFormat;

  /**
   * @global
   */
  return kpiFormatters;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/KPIFormatter", ["sap/ui/core/Core"],function(e){"use strict";const t=function(e){if(e){const t=e.split(" ");let r;if(t.length===1){r=t[0].substring(0,3).toUpperCase()}else if(t.length===2){r=(t[0].substring(0,1)+t[1].substring(0,1)).toUpperCase()}else{r=(t[0].substring(0,1)+t[1].substring(0,1)+t[2].substring(0,1)).toUpperCase()}return r}else{return""}};t.__functionName="sap.fe.core.formatters.KPIFormatter#labelFormat";const r=function(t,r,s,n,o){const i=e.getLibraryResourceBundle("sap.fe.core");const a=n?`C_KPI_TOOLTIP_${n.toUpperCase()}`:"C_KPI_TOOLTIP_NONE";let u;if(o==="true"){if(!s){u=i.getText("C_KPI_TOOLTIP_AMOUNT_MULTIUNIT")}else{u=`${r} ${s}`}}else{u=r}return i.getText(a,[t,u])};r.__functionName="sap.fe.core.formatters.KPIFormatter#tooltipFormat";const s=function(e){if(s.hasOwnProperty(e)){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++){r[n-1]=arguments[n]}return s[e].apply(this,r)}else{return""}};s.labelFormat=t;s.tooltipFormat=r;return s},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/StandardFormatter-dbg", ["sap/fe/core/controls/Any", "sap/fe/core/helpers/BindingToolkit"], function (Any, BindingToolkit) {
  "use strict";

  var transformRecursively = BindingToolkit.transformRecursively;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  const evaluateComplexExpression = function (expressionAsString) {
    for (var _len = arguments.length, partsToConcat = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      partsToConcat[_key - 1] = arguments[_key];
    }
    const myExpression = JSON.parse(expressionAsString);
    transformRecursively(myExpression, "PathInModel", pathInModelDef => {
      if (pathInModelDef.modelName === "$") {
        return constant(partsToConcat[parseInt(pathInModelDef.path.substring(1), 10)]);
      }
      return pathInModelDef;
    }, true);
    transformRecursively(myExpression, "ComplexType", complexTypeDef => {
      const compiledExpression = compileExpression(complexTypeDef);
      if (compiledExpression) {
        return constant(getValue(compiledExpression, this));
      }
      return constant(compiledExpression);
    });
    const myCompiledExpression = compileExpression(myExpression);
    return getValue(myCompiledExpression, this);
  };
  const getValue = function (myExpression, target) {
    const myAny = new Any({
      anyText: myExpression
    });
    myAny.setModel(target.getModel());
    myAny.setBindingContext(target.getBindingContext());
    return myAny.getAnyText();
  };
  evaluateComplexExpression.__functionName = "sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression";
  const concat = function () {
    for (var _len2 = arguments.length, partsToConcat = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      partsToConcat[_key2] = arguments[_key2];
    }
    return partsToConcat.join("");
  };
  concat.__functionName = "sap.fe.core.formatters.StandardFormatter#concat";
  const ifElse = function (condition, onTrue, onFalse) {
    return condition ? onTrue : onFalse;
  };
  ifElse.__functionName = "sap.fe.core.formatters.StandardFormatter#ifElse";

  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const standardFormatter = function (sName) {
    if (standardFormatter.hasOwnProperty(sName)) {
      for (var _len3 = arguments.length, oArgs = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        oArgs[_key3 - 1] = arguments[_key3];
      }
      return standardFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  standardFormatter.evaluateComplexExpression = evaluateComplexExpression;
  standardFormatter.concat = concat;
  standardFormatter.ifElse = ifElse;

  /**
   * @global
   */
  return standardFormatter;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/StandardFormatter", ["sap/fe/core/controls/Any","sap/fe/core/helpers/BindingToolkit"],function(e,t){"use strict";var n=t.transformRecursively;var r=t.constant;var o=t.compileExpression;const a=function(e){for(var t=arguments.length,a=new Array(t>1?t-1:0),i=1;i<t;i++){a[i-1]=arguments[i]}const c=JSON.parse(e);n(c,"PathInModel",e=>{if(e.modelName==="$"){return r(a[parseInt(e.path.substring(1),10)])}return e},true);n(c,"ComplexType",e=>{const t=o(e);if(t){return r(s(t,this))}return r(t)});const u=o(c);return s(u,this)};const s=function(t,n){const r=new e({anyText:t});r.setModel(n.getModel());r.setBindingContext(n.getBindingContext());return r.getAnyText()};a.__functionName="sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression";const i=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++){t[n]=arguments[n]}return t.join("")};i.__functionName="sap.fe.core.formatters.StandardFormatter#concat";const c=function(e,t,n){return e?t:n};c.__functionName="sap.fe.core.formatters.StandardFormatter#ifElse";const u=function(e){if(u.hasOwnProperty(e)){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++){n[r-1]=arguments[r]}return u[e].apply(this,n)}else{return""}};u.evaluateComplexExpression=a;u.concat=i;u.ifElse=c;return u},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/TableFormatter-dbg", ["sap/fe/core/formatters/TableFormatterTypes", "sap/fe/macros/DelegateUtil", "sap/fe/macros/table/TableSizeHelper", "sap/ui/mdc/enum/EditMode", "../CommonUtils"], function (TableFormatterTypes, DelegateUtil, TableSizeHelper, EditMode, CommonUtils) {
  "use strict";

  var MessageType = TableFormatterTypes.MessageType;
  const getMessagetypeOrder = function (messageType) {
    switch (messageType) {
      case "Error":
        return 4;
      case "Warning":
        return 3;
      case "Information":
        return 2;
      case "None":
        return 1;
      default:
        return -1;
    }
  };

  /**
   * Gets the validity of creation row fields.
   *
   * @function
   * @name validateCreationRowFields
   * @param fieldValidityObject Object holding the fields
   * @returns `true` if all the fields in the creation row are valid, `false` otherwise
   */
  const validateCreationRowFields = function (fieldValidityObject) {
    if (!fieldValidityObject) {
      return false;
    }
    const fieldKeys = Object.keys(fieldValidityObject);
    return fieldKeys.length > 0 && fieldKeys.every(function (key) {
      return fieldValidityObject[key]["validity"];
    });
  };
  validateCreationRowFields.__functionName = "sap.fe.core.formatters.TableFormatter#validateCreationRowFields";

  /**
   * @param this The object status control.
   * @param semanticKeyHasDraftIndicator The property name of the draft indicator.
   * @param aFilteredMessages Array of messages.
   * @param columnName
   * @param isSemanticKeyInFieldGroup Flag which says if semantic key is a part of field group.
   * @returns The value for the visibility property of the object status
   */
  const getErrorStatusTextVisibilityFormatter = function (semanticKeyHasDraftIndicator, aFilteredMessages, columnName, isSemanticKeyInFieldGroup) {
    let bStatusVisibility = false;
    if (aFilteredMessages && aFilteredMessages.length > 0 && (isSemanticKeyInFieldGroup || columnName === semanticKeyHasDraftIndicator)) {
      const sCurrentContextPath = this.getBindingContext() ? this.getBindingContext().getPath() : undefined;
      aFilteredMessages.forEach(oMessage => {
        if (oMessage.type === "Error" && oMessage.aTargets[0].indexOf(sCurrentContextPath) === 0) {
          bStatusVisibility = true;
          return bStatusVisibility;
        }
      });
    }
    return bStatusVisibility;
  };
  getErrorStatusTextVisibilityFormatter.__functionName = "sap.fe.core.formatters.TableFormatter#getErrorStatusTextVisibilityFormatter";

  /**
   * rowHighlighting
   *
   * @param {object} this The context
   * @param {string|number} CriticalityValue The criticality value
   * @param {number} messageLastUpdate Timestamp of the last message that was created. It's defined as an input value, but not used in the body of the function
   * It is used to refresh the formatting of the table each time a new message is updated
   * @returns {object} The value from the inner function
   */

  const rowHighlighting = function (criticalityValue, aFilteredMessages, hasActiveEntity, isActiveEntity, isDraftMode) {
    var _this$getBindingConte2;
    let iHighestCriticalityValue = -1;
    if (aFilteredMessages && aFilteredMessages.length > 0) {
      var _this$getBindingConte;
      const sCurrentContextPath = (_this$getBindingConte = this.getBindingContext()) === null || _this$getBindingConte === void 0 ? void 0 : _this$getBindingConte.getPath();
      aFilteredMessages.forEach(oMessage => {
        if (oMessage.aTargets[0].indexOf(sCurrentContextPath) === 0 && iHighestCriticalityValue < getMessagetypeOrder(oMessage.type)) {
          iHighestCriticalityValue = getMessagetypeOrder(oMessage.type);
          criticalityValue = oMessage.type;
        }
      });
    }
    if (typeof criticalityValue !== "string") {
      switch (criticalityValue) {
        case 1:
          criticalityValue = MessageType.Error;
          break;
        case 2:
          criticalityValue = MessageType.Warning;
          break;
        case 3:
          criticalityValue = MessageType.Success;
          break;
        case 5:
          criticalityValue = MessageType.Information;
          break;
        default:
          criticalityValue = MessageType.None;
      }
    }

    // If we have calculated a criticality <> None, return it
    if (criticalityValue !== MessageType.None) {
      return criticalityValue;
    }

    // If not, we set criticality to 'Information' for newly created rows in Draft mode, and keep 'None' otherwise
    const isInactive = ((_this$getBindingConte2 = this.getBindingContext()) === null || _this$getBindingConte2 === void 0 ? void 0 : _this$getBindingConte2.isInactive()) ?? false;
    const isNewObject = !hasActiveEntity && !isActiveEntity && !isInactive;
    return isDraftMode === "true" && isNewObject ? MessageType.Information : MessageType.None;
  };
  rowHighlighting.__functionName = "sap.fe.core.formatters.TableFormatter#rowHighlighting";
  const navigatedRow = function (sDeepestPath) {
    var _this$getBindingConte3;
    const sPath = (_this$getBindingConte3 = this.getBindingContext()) === null || _this$getBindingConte3 === void 0 ? void 0 : _this$getBindingConte3.getPath();
    if (sPath && sDeepestPath) {
      return sDeepestPath.indexOf(sPath) === 0;
    } else {
      return false;
    }
  };
  navigatedRow.__functionName = "sap.fe.core.formatters.TableFormatter#navigatedRow";

  /**
   * Method to calculate the width of an MDCColumn based on the property definition.
   *
   * @function
   * @name getColumnWidth
   * @param this The MDCColumn object
   * @param editMode The EditMode of the table
   * @param isPropertiesCacheAvailable Indicates if the properties cache is available
   * @param propertyName The name of the property we want to calculate le width
   * @param useRemUnit Indicates if the rem unit must be concatenated with the column width result
   * @returns The width of the column
   * @private
   */
  const getColumnWidth = function (editMode, isPropertiesCacheAvailable, propertyName) {
    let useRemUnit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
    if (!isPropertiesCacheAvailable) {
      return null;
    }
    const table = this.getParent();
    const properties = DelegateUtil.getCachedProperties(table);
    const property = properties === null || properties === void 0 ? void 0 : properties.find(prop => prop.name === propertyName);
    if (property) {
      let columnWidth = properties ? TableSizeHelper.getMDCColumnWidthFromProperty(property, properties, true) : null;
      if (columnWidth && editMode === EditMode.Editable) {
        var _property$typeConfig;
        switch ((_property$typeConfig = property.typeConfig) === null || _property$typeConfig === void 0 ? void 0 : _property$typeConfig.baseType) {
          case "Date":
          case "Time":
          case "DateTime":
            columnWidth += 2.8;
            break;
          default:
        }
      }
      if (useRemUnit) {
        return columnWidth + "rem";
      }
      return columnWidth;
    }
    return null;
  };
  getColumnWidth.__functionName = "sap.fe.core.formatters.TableFormatter#getColumnWidth";

  /**
   * Method to calculate the width of an MDCColumn for valueHelp the table.
   *
   * @function
   * @name getColumnWidthForValueHelpTable
   * @param this The MDCColumn object
   * @param isPropertiesCacheAvailable Indicates if the properties cache is available
   * @param propertyName The name of the property we want to calculate le width
   * @param isTargetSmallDevice Indicates the current device has a small device
   * @returns The width of the column
   * @private
   */
  const getColumnWidthForValueHelpTable = function (isPropertiesCacheAvailable, propertyName, isTargetSmallDevice) {
    const isSmallDevice = CommonUtils.isSmallDevice();
    const withUnit = !isSmallDevice;
    return isSmallDevice && isTargetSmallDevice || !isSmallDevice && !isTargetSmallDevice ? tableFormatter.getColumnWidth.call(this, EditMode.Display, isPropertiesCacheAvailable, propertyName, withUnit) : null;
  };
  getColumnWidthForValueHelpTable.__functionName = "sap.fe.core.formatters.TableFormatter#getColumnWidthForValueHelpTable";
  function isRatingIndicator(oControl) {
    if (oControl.isA("sap.fe.macros.controls.FieldWrapper")) {
      const vContentDisplay = Array.isArray(oControl.getContentDisplay()) ? oControl.getContentDisplay()[0] : oControl.getContentDisplay();
      if (vContentDisplay && vContentDisplay.isA("sap.m.RatingIndicator")) {
        return true;
      }
    }
    return false;
  }
  function _updateStyleClassForRatingIndicator(oFieldWrapper, bLast) {
    const vContentDisplay = Array.isArray(oFieldWrapper.getContentDisplay()) ? oFieldWrapper.getContentDisplay()[0] : oFieldWrapper.getContentDisplay();
    const vContentEdit = Array.isArray(oFieldWrapper.getContentEdit()) ? oFieldWrapper.getContentEdit()[0] : oFieldWrapper.getContentEdit();
    if (bLast) {
      vContentDisplay.addStyleClass("sapUiNoMarginBottom");
      vContentDisplay.addStyleClass("sapUiNoMarginTop");
      vContentEdit.removeStyleClass("sapUiTinyMarginBottom");
    } else {
      vContentDisplay.addStyleClass("sapUiNoMarginBottom");
      vContentDisplay.removeStyleClass("sapUiNoMarginTop");
      vContentEdit.addStyleClass("sapUiTinyMarginBottom");
    }
  }
  function getVBoxVisibility() {
    const aItems = this.getItems();
    let bLastElementFound = false;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    for (let index = aItems.length - 1; index >= 0; index--) {
      if (!bLastElementFound) {
        if (args[index] !== true) {
          bLastElementFound = true;
          if (isRatingIndicator(aItems[index])) {
            _updateStyleClassForRatingIndicator(aItems[index], true);
          } else {
            aItems[index].removeStyleClass("sapUiTinyMarginBottom");
          }
        }
      } else if (isRatingIndicator(aItems[index])) {
        _updateStyleClassForRatingIndicator(aItems[index], false);
      } else {
        aItems[index].addStyleClass("sapUiTinyMarginBottom");
      }
    }
    return true;
  }
  getVBoxVisibility.__functionName = "sap.fe.core.formatters.TableFormatter#getVBoxVisibility";

  // See https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters for more detail on this weird syntax
  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const tableFormatter = function (sName) {
    if (tableFormatter.hasOwnProperty(sName)) {
      for (var _len2 = arguments.length, oArgs = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        oArgs[_key2 - 1] = arguments[_key2];
      }
      return tableFormatter[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  tableFormatter.validateCreationRowFields = validateCreationRowFields;
  tableFormatter.rowHighlighting = rowHighlighting;
  tableFormatter.navigatedRow = navigatedRow;
  tableFormatter.getErrorStatusTextVisibilityFormatter = getErrorStatusTextVisibilityFormatter;
  tableFormatter.getVBoxVisibility = getVBoxVisibility;
  tableFormatter.isRatingIndicator = isRatingIndicator; // for unit tests
  tableFormatter.getColumnWidth = getColumnWidth;
  tableFormatter.getColumnWidthForValueHelpTable = getColumnWidthForValueHelpTable;

  /**
   * @global
   */
  return tableFormatter;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/TableFormatter", ["sap/fe/core/formatters/TableFormatterTypes","sap/fe/macros/DelegateUtil","sap/fe/macros/table/TableSizeHelper","sap/ui/mdc/enum/EditMode","../CommonUtils"],function(t,e,n,r,i){"use strict";var a=t.MessageType;const o=function(t){switch(t){case"Error":return 4;case"Warning":return 3;case"Information":return 2;case"None":return 1;default:return-1}};const s=function(t){if(!t){return false}const e=Object.keys(t);return e.length>0&&e.every(function(e){return t[e]["validity"]})};s.__functionName="sap.fe.core.formatters.TableFormatter#validateCreationRowFields";const l=function(t,e,n,r){let i=false;if(e&&e.length>0&&(r||n===t)){const t=this.getBindingContext()?this.getBindingContext().getPath():undefined;e.forEach(e=>{if(e.type==="Error"&&e.aTargets[0].indexOf(t)===0){i=true;return i}})}return i};l.__functionName="sap.fe.core.formatters.TableFormatter#getErrorStatusTextVisibilityFormatter";const f=function(t,e,n,r,i){var s;let l=-1;if(e&&e.length>0){var f;const n=(f=this.getBindingContext())===null||f===void 0?void 0:f.getPath();e.forEach(e=>{if(e.aTargets[0].indexOf(n)===0&&l<o(e.type)){l=o(e.type);t=e.type}})}if(typeof t!=="string"){switch(t){case 1:t=a.Error;break;case 2:t=a.Warning;break;case 3:t=a.Success;break;case 5:t=a.Information;break;default:t=a.None}}if(t!==a.None){return t}const u=((s=this.getBindingContext())===null||s===void 0?void 0:s.isInactive())??false;const c=!n&&!r&&!u;return i==="true"&&c?a.Information:a.None};f.__functionName="sap.fe.core.formatters.TableFormatter#rowHighlighting";const u=function(t){var e;const n=(e=this.getBindingContext())===null||e===void 0?void 0:e.getPath();if(n&&t){return t.indexOf(n)===0}else{return false}};u.__functionName="sap.fe.core.formatters.TableFormatter#navigatedRow";const c=function(t,i,a){let o=arguments.length>3&&arguments[3]!==undefined?arguments[3]:true;if(!i){return null}const s=this.getParent();const l=e.getCachedProperties(s);const f=l===null||l===void 0?void 0:l.find(t=>t.name===a);if(f){let e=l?n.getMDCColumnWidthFromProperty(f,l,true):null;if(e&&t===r.Editable){var u;switch((u=f.typeConfig)===null||u===void 0?void 0:u.baseType){case"Date":case"Time":case"DateTime":e+=2.8;break;default:}}if(o){return e+"rem"}return e}return null};c.__functionName="sap.fe.core.formatters.TableFormatter#getColumnWidth";const g=function(t,e,n){const a=i.isSmallDevice();const o=!a;return a&&n||!a&&!n?y.getColumnWidth.call(this,r.Display,t,e,o):null};g.__functionName="sap.fe.core.formatters.TableFormatter#getColumnWidthForValueHelpTable";function d(t){if(t.isA("sap.fe.macros.controls.FieldWrapper")){const e=Array.isArray(t.getContentDisplay())?t.getContentDisplay()[0]:t.getContentDisplay();if(e&&e.isA("sap.m.RatingIndicator")){return true}}return false}function m(t,e){const n=Array.isArray(t.getContentDisplay())?t.getContentDisplay()[0]:t.getContentDisplay();const r=Array.isArray(t.getContentEdit())?t.getContentEdit()[0]:t.getContentEdit();if(e){n.addStyleClass("sapUiNoMarginBottom");n.addStyleClass("sapUiNoMarginTop");r.removeStyleClass("sapUiTinyMarginBottom")}else{n.addStyleClass("sapUiNoMarginBottom");n.removeStyleClass("sapUiNoMarginTop");r.addStyleClass("sapUiTinyMarginBottom")}}function p(){const t=this.getItems();let e=false;for(var n=arguments.length,r=new Array(n),i=0;i<n;i++){r[i]=arguments[i]}for(let n=t.length-1;n>=0;n--){if(!e){if(r[n]!==true){e=true;if(d(t[n])){m(t[n],true)}else{t[n].removeStyleClass("sapUiTinyMarginBottom")}}}else if(d(t[n])){m(t[n],false)}else{t[n].addStyleClass("sapUiTinyMarginBottom")}}return true}p.__functionName="sap.fe.core.formatters.TableFormatter#getVBoxVisibility";const y=function(t){if(y.hasOwnProperty(t)){for(var e=arguments.length,n=new Array(e>1?e-1:0),r=1;r<e;r++){n[r-1]=arguments[r]}return y[t].apply(this,n)}else{return""}};y.validateCreationRowFields=s;y.rowHighlighting=f;y.navigatedRow=u;y.getErrorStatusTextVisibilityFormatter=l;y.getVBoxVisibility=p;y.isRatingIndicator=d;y.getColumnWidth=c;y.getColumnWidthForValueHelpTable=g;return y},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/TableFormatterTypes-dbg", [], function () {
  "use strict";

  var _exports = {};
  let MessageType;
  (function (MessageType) {
    MessageType["Error"] = "Error";
    MessageType["Information"] = "Information";
    MessageType["None"] = "None";
    MessageType["Success"] = "Success";
    MessageType["Warning"] = "Warning";
  })(MessageType || (MessageType = {}));
  _exports.MessageType = MessageType;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/TableFormatterTypes", [],function(){"use strict";var n={};let r;(function(n){n["Error"]="Error";n["Information"]="Information";n["None"]="None";n["Success"]="Success";n["Warning"]="Warning"})(r||(r={}));n.MessageType=r;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/ValueFormatter-dbg", ["sap/base/strings/whitespaceReplacer", "sap/ui/core/Core", "sap/ui/core/format/DateFormat"], function (whitespaceReplacer, Core, DateFormat) {
  "use strict";

  var _exports = {};
  /**
   * Collection of table formatters.
   *
   * @param this The context
   * @param sName The inner function name
   * @param oArgs The inner function parameters
   * @returns The value from the inner function
   */
  const valueFormatters = function (sName) {
    if (valueFormatters.hasOwnProperty(sName)) {
      for (var _len = arguments.length, oArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        oArgs[_key - 1] = arguments[_key];
      }
      return valueFormatters[sName].apply(this, oArgs);
    } else {
      return "";
    }
  };
  const formatWithBrackets = (firstPart, secondPart) => {
    if (firstPart && secondPart) {
      return Core.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT", [firstPart, secondPart]);
    } else {
      return firstPart || secondPart || "";
    }
  };
  formatWithBrackets.__functionName = "sap.fe.core.formatters.ValueFormatter#formatWithBrackets";
  const formatTitle = (firstPart, secondPart) => {
    return secondPart ? formatWithBrackets(whitespaceReplacer(firstPart), whitespaceReplacer(secondPart)) : whitespaceReplacer(firstPart);
  };
  formatTitle.__functionName = "sap.fe.core.formatters.ValueFormatter#formatTitle";
  const formatWithPercentage = sValue => {
    return sValue !== null && sValue !== undefined ? `${sValue} %` : "";
  };
  formatWithPercentage.__functionName = "sap.fe.core.formatters.ValueFormatter#formatWithPercentage";
  const computePercentage = (value, target, sUnit) => {
    let sPercentString;
    //BCP: 2370008548 If the base value is undefined return "0" by default
    if (value === undefined) {
      return "0";
    }
    const iValue = typeof value === "string" ? parseFloat(value) : value;
    const iTarget = typeof target === "string" ? parseFloat(target) : target;
    if (sUnit === "%") {
      if (iValue > 100) {
        sPercentString = "100";
      } else if (iValue <= 0) {
        sPercentString = "0";
      } else {
        sPercentString = typeof value === "string" ? value : value === null || value === void 0 ? void 0 : value.toString();
      }
    } else if (iValue > iTarget) {
      sPercentString = "100";
    } else if (iValue <= 0) {
      sPercentString = "0";
    } else {
      sPercentString = iValue && iTarget ? (iValue / iTarget * 100).toString() : "0";
    }
    return sPercentString;
  };
  computePercentage.__functionName = "sap.fe.core.formatters.ValueFormatter#computePercentage";
  const formatCriticalityIcon = val => {
    let sIcon;
    if (val === "UI.CriticalityType/Negative" || val === "1" || val === 1) {
      sIcon = "sap-icon://message-error";
    } else if (val === "UI.CriticalityType/Critical" || val === "2" || val === 2) {
      sIcon = "sap-icon://message-warning";
    } else if (val === "UI.CriticalityType/Positive" || val === "3" || val === 3) {
      sIcon = "sap-icon://message-success";
    } else if (val === "UI.CriticalityType/Information" || val === "5" || val === 5) {
      sIcon = "sap-icon://message-information";
    } else {
      sIcon = "";
    }
    return sIcon;
  };
  formatCriticalityIcon.__functionName = "sap.fe.core.formatters.ValueFormatter#formatCriticalityIcon";
  _exports.formatCriticalityIcon = formatCriticalityIcon;
  const formatCriticalityValueState = val => {
    let sValueState;
    if (val === "UI.CriticalityType/Negative" || val === "1" || val === 1) {
      sValueState = "Error";
    } else if (val === "UI.CriticalityType/Critical" || val === "2" || val === 2) {
      sValueState = "Warning";
    } else if (val === "UI.CriticalityType/Positive" || val === "3" || val === 3) {
      sValueState = "Success";
    } else if (val === "UI.CriticalityType/Information" || val === "5" || val === 5) {
      sValueState = "Information";
    } else {
      sValueState = "None";
    }
    return sValueState;
  };
  formatCriticalityValueState.__functionName = "sap.fe.core.formatters.ValueFormatter#formatCriticalityValueState";
  _exports.formatCriticalityValueState = formatCriticalityValueState;
  const formatCriticalityButtonType = val => {
    let sType;
    if (val === "UI.CriticalityType/Negative" || val === "1" || val === 1) {
      sType = "Reject";
    } else if (val === "UI.CriticalityType/Positive" || val === "3" || val === 3) {
      sType = "Accept";
    } else {
      sType = "Default";
    }
    return sType;
  };
  formatCriticalityButtonType.__functionName = "sap.fe.core.formatters.ValueFormatter#formatCriticalityButtonType";
  _exports.formatCriticalityButtonType = formatCriticalityButtonType;
  const formatCriticalityColorMicroChart = val => {
    let sColor;
    if (val === "UI.CriticalityType/Negative" || val === "1" || val === 1) {
      sColor = "Error";
    } else if (val === "UI.CriticalityType/Critical" || val === "2" || val === 2) {
      sColor = "Critical";
    } else if (val === "UI.CriticalityType/Positive" || val === "3" || val === 3) {
      sColor = "Good";
    } else {
      sColor = "Neutral";
    }
    return sColor;
  };
  formatCriticalityColorMicroChart.__functionName = "sap.fe.core.formatters.ValueFormatter#formatCriticalityColorMicroChart";
  _exports.formatCriticalityColorMicroChart = formatCriticalityColorMicroChart;
  const formatProgressIndicatorText = (value, target, unit) => {
    if (value && target && unit) {
      var _localeData$dateField, _localeData$units, _localeData$units$sho;
      const unitSplit = unit.split("-");
      const searchUnit = `${unitSplit[1] === undefined ? unit : unitSplit[1]}-narrow`;
      const dateFormat = DateFormat.getDateInstance();
      const localeData = dateFormat.oLocaleData.mData;
      const oResourceModel = Core.getLibraryResourceBundle("sap.fe.macros");
      let unitDisplayed = unit;
      if (localeData !== null && localeData !== void 0 && (_localeData$dateField = localeData.dateFields[searchUnit]) !== null && _localeData$dateField !== void 0 && _localeData$dateField.displayName) {
        unitDisplayed = localeData.dateFields[searchUnit].displayName;
      } else if (localeData !== null && localeData !== void 0 && (_localeData$units = localeData.units) !== null && _localeData$units !== void 0 && (_localeData$units$sho = _localeData$units.short[unit]) !== null && _localeData$units$sho !== void 0 && _localeData$units$sho.displayName) {
        unitDisplayed = localeData.units.short[unit].displayName;
      }
      return oResourceModel.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_WITH_UOM", [value, target, unitDisplayed]);
    }
  };
  formatProgressIndicatorText.__functionName = "sap.fe.core.formatters.ValueFormatter#formatProgressIndicatorText";
  _exports.formatProgressIndicatorText = formatProgressIndicatorText;
  const formatToKeepWhitespace = value => {
    return value === null || value === undefined ? "" : whitespaceReplacer(value + "");
  };
  formatToKeepWhitespace.__functionName = "sap.fe.core.formatters.ValueFormatter#formatToKeepWhitespace";
  _exports.formatToKeepWhitespace = formatToKeepWhitespace;
  valueFormatters.formatWithBrackets = formatWithBrackets;
  valueFormatters.formatTitle = formatTitle;
  valueFormatters.formatWithPercentage = formatWithPercentage;
  valueFormatters.computePercentage = computePercentage;
  valueFormatters.formatCriticalityIcon = formatCriticalityIcon;
  valueFormatters.formatCriticalityValueState = formatCriticalityValueState;
  valueFormatters.formatCriticalityButtonType = formatCriticalityButtonType;
  valueFormatters.formatCriticalityColorMicroChart = formatCriticalityColorMicroChart;
  valueFormatters.formatProgressIndicatorText = formatProgressIndicatorText;
  valueFormatters.formatToKeepWhitespace = formatToKeepWhitespace;
  /**
   * @global
   */
  return valueFormatters;
}, true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/formatters/ValueFormatter", ["sap/base/strings/whitespaceReplacer","sap/ui/core/Core","sap/ui/core/format/DateFormat"],function(e,t,r){"use strict";var i={};const a=function(e){if(a.hasOwnProperty(e)){for(var t=arguments.length,r=new Array(t>1?t-1:0),i=1;i<t;i++){r[i-1]=arguments[i]}return a[e].apply(this,r)}else{return""}};const o=(e,r)=>{if(e&&r){return t.getLibraryResourceBundle("sap.fe.core").getText("C_FORMAT_FOR_TEXT_ARRANGEMENT",[e,r])}else{return e||r||""}};o.__functionName="sap.fe.core.formatters.ValueFormatter#formatWithBrackets";const s=(t,r)=>r?o(e(t),e(r)):e(t);s.__functionName="sap.fe.core.formatters.ValueFormatter#formatTitle";const n=e=>e!==null&&e!==undefined?`${e} %`:"";n.__functionName="sap.fe.core.formatters.ValueFormatter#formatWithPercentage";const c=(e,t,r)=>{let i;if(e===undefined){return"0"}const a=typeof e==="string"?parseFloat(e):e;const o=typeof t==="string"?parseFloat(t):t;if(r==="%"){if(a>100){i="100"}else if(a<=0){i="0"}else{i=typeof e==="string"?e:e===null||e===void 0?void 0:e.toString()}}else if(a>o){i="100"}else if(a<=0){i="0"}else{i=a&&o?(a/o*100).toString():"0"}return i};c.__functionName="sap.fe.core.formatters.ValueFormatter#computePercentage";const l=e=>{let t;if(e==="UI.CriticalityType/Negative"||e==="1"||e===1){t="sap-icon://message-error"}else if(e==="UI.CriticalityType/Critical"||e==="2"||e===2){t="sap-icon://message-warning"}else if(e==="UI.CriticalityType/Positive"||e==="3"||e===3){t="sap-icon://message-success"}else if(e==="UI.CriticalityType/Information"||e==="5"||e===5){t="sap-icon://message-information"}else{t=""}return t};l.__functionName="sap.fe.core.formatters.ValueFormatter#formatCriticalityIcon";i.formatCriticalityIcon=l;const f=e=>{let t;if(e==="UI.CriticalityType/Negative"||e==="1"||e===1){t="Error"}else if(e==="UI.CriticalityType/Critical"||e==="2"||e===2){t="Warning"}else if(e==="UI.CriticalityType/Positive"||e==="3"||e===3){t="Success"}else if(e==="UI.CriticalityType/Information"||e==="5"||e===5){t="Information"}else{t="None"}return t};f.__functionName="sap.fe.core.formatters.ValueFormatter#formatCriticalityValueState";i.formatCriticalityValueState=f;const m=e=>{let t;if(e==="UI.CriticalityType/Negative"||e==="1"||e===1){t="Reject"}else if(e==="UI.CriticalityType/Positive"||e==="3"||e===3){t="Accept"}else{t="Default"}return t};m.__functionName="sap.fe.core.formatters.ValueFormatter#formatCriticalityButtonType";i.formatCriticalityButtonType=m;const u=e=>{let t;if(e==="UI.CriticalityType/Negative"||e==="1"||e===1){t="Error"}else if(e==="UI.CriticalityType/Critical"||e==="2"||e===2){t="Critical"}else if(e==="UI.CriticalityType/Positive"||e==="3"||e===3){t="Good"}else{t="Neutral"}return t};u.__functionName="sap.fe.core.formatters.ValueFormatter#formatCriticalityColorMicroChart";i.formatCriticalityColorMicroChart=u;const p=(e,i,a)=>{if(e&&i&&a){var o,s,n;const c=a.split("-");const l=`${c[1]===undefined?a:c[1]}-narrow`;const f=r.getDateInstance();const m=f.oLocaleData.mData;const u=t.getLibraryResourceBundle("sap.fe.macros");let p=a;if(m!==null&&m!==void 0&&(o=m.dateFields[l])!==null&&o!==void 0&&o.displayName){p=m.dateFields[l].displayName}else if(m!==null&&m!==void 0&&(s=m.units)!==null&&s!==void 0&&(n=s.short[a])!==null&&n!==void 0&&n.displayName){p=m.units.short[a].displayName}return u.getText("T_COMMON_PROGRESS_INDICATOR_DISPLAY_VALUE_WITH_UOM",[e,i,p])}};p.__functionName="sap.fe.core.formatters.ValueFormatter#formatProgressIndicatorText";i.formatProgressIndicatorText=p;const y=t=>t===null||t===undefined?"":e(t+"");y.__functionName="sap.fe.core.formatters.ValueFormatter#formatToKeepWhitespace";i.formatToKeepWhitespace=y;a.formatWithBrackets=o;a.formatTitle=s;a.formatWithPercentage=n;a.computePercentage=c;a.formatCriticalityIcon=l;a.formatCriticalityValueState=f;a.formatCriticalityButtonType=m;a.formatCriticalityColorMicroChart=u;a.formatProgressIndicatorText=p;a.formatToKeepWhitespace=y;return a},true);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/fpm/Component-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/fe/core/TemplateComponent"], function (ClassSupport, TemplateComponent) {
  "use strict";

  var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Component that can be used as a wrapper component for custom pages.
   *
   * The component can be used in case you want to use SAP Fiori elements Building Blocks or XML template
   * constructions. You can either extend the component and set the viewName and contextPath within your code
   * or you can use it to wrap your custom XML view directly the manifest when you define your custom page
   * under sapui5/routing/targets:
   *
   * <pre>
   * "myCustomPage": {
   *	"type": "Component",
   *	"id": "myCustomPage",
   *	"name": "sap.fe.core.fpm",
   *	"title": "My Custom Page",
   *	"options": {
   *		"settings": {
   *			"viewName": "myNamespace.myView",
   *			"contextPath": "/MyEntitySet"
   *			}
   *		}
   *	}
   * </pre>
   *
   * @name sap.fe.core.fpm.Component
   * @public
   * @experimental As of version 1.92.0
   * @since 1.92.0
   */
  let FPMComponent = (_dec = defineUI5Class("sap.fe.core.fpm.Component", {
    manifest: "json"
  }), _dec2 = property({
    type: "string"
  }), _dec3 = property({
    type: "string"
  }), _dec4 = property({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_TemplateComponent) {
    _inheritsLoose(FPMComponent, _TemplateComponent);
    /**
     * Name of the XML view which is used for this page. The XML view can contain SAP Fiori elements Building Blocks and XML template constructions.
     *
     * @public
     */

    function FPMComponent(mSettings) {
      var _this;
      if (mSettings.viewType === "JSX") {
        mSettings._mdxViewName = mSettings.viewName;
        mSettings.viewName = "module:sap/fe/core/jsx-runtime/ViewLoader";
        // Remove the cache property from the settings as it is not supported by the ViewLoader
        delete mSettings.cache;
      }
      _this = _TemplateComponent.call(this, mSettings) || this;
      _initializerDefineProperty(_this, "viewName", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "controllerName", _descriptor2, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "_mdxViewName", _descriptor3, _assertThisInitialized(_this));
      return _this;
    }
    return FPMComponent;
  }(TemplateComponent), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewName", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "controllerName", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "_mdxViewName", [_dec4], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return "";
    }
  })), _class2)) || _class);
  return FPMComponent;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/fpm/Component", ["sap/fe/core/helpers/ClassSupport","sap/fe/core/TemplateComponent"],function(e,r){"use strict";var i,t,n,a,o,l,u,c,f;var s=e.property;var p=e.defineUI5Class;function b(e,r,i,t){if(!i)return;Object.defineProperty(e,r,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(t):void 0})}function m(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function d(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;v(e,r)}function v(e,r){v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,i){r.__proto__=i;return r};return v(e,r)}function w(e,r,i,t,n){var a={};Object.keys(t).forEach(function(e){a[e]=t[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=i.slice().reverse().reduce(function(i,t){return t(e,r,i)||i},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function y(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let h=(i=p("sap.fe.core.fpm.Component",{manifest:"json"}),t=s({type:"string"}),n=s({type:"string"}),a=s({type:"string"}),i(o=(l=function(e){d(r,e);function r(r){var i;if(r.viewType==="JSX"){r._mdxViewName=r.viewName;r.viewName="module:sap/fe/core/jsx-runtime/ViewLoader";delete r.cache}i=e.call(this,r)||this;b(i,"viewName",u,m(i));b(i,"controllerName",c,m(i));b(i,"_mdxViewName",f,m(i));return i}return r}(r),u=w(l.prototype,"viewName",[t],{configurable:true,enumerable:true,writable:true,initializer:null}),c=w(l.prototype,"controllerName",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),f=w(l.prototype,"_mdxViewName",[a],{configurable:true,enumerable:true,writable:true,initializer:function(){return""}}),l))||o);return h},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/AnnotationEnum-dbg", [], function () {
  "use strict";

  var _exports = {};
  // This list needs to come from AVT
  const ENUM_VALUES = {
    "com.sap.vocabularies.Common.v1.FieldControlType": {
      Mandatory: 7,
      Optional: 3,
      ReadOnly: 0,
      Inapplicable: 0,
      Disabled: 1
    }
  };
  const resolveEnumValue = function (enumName) {
    const [termName, value] = enumName.split("/");
    if (ENUM_VALUES.hasOwnProperty(termName)) {
      return ENUM_VALUES[termName][value];
    } else {
      return false;
    }
  };
  _exports.resolveEnumValue = resolveEnumValue;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/AnnotationEnum", [],function(){"use strict";var e={};const n={"com.sap.vocabularies.Common.v1.FieldControlType":{Mandatory:7,Optional:3,ReadOnly:0,Inapplicable:0,Disabled:1}};const a=function(e){const[a,o]=e.split("/");if(n.hasOwnProperty(a)){return n[a][o]}else{return false}};e.resolveEnumValue=a;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/AppStartupHelper-dbg", ["sap/ui/model/Filter", "sap/ui/model/FilterOperator", "./ModelHelper"], function (Filter, FilterOperator, ModelHelper) {
  "use strict";

  const AppStartupHelper = {
    /**
     * Retrieves a set of key values from startup parameters.
     *
     * @param aKeyNames The array of key names
     * @param oStartupParameters The startup parameters
     * @returns An array of pairs \{name, value\} if all key values could be found in the startup parameters, undefined otherwise
     */
    _getKeysFromStartupParams: function (aKeyNames, oStartupParameters) {
      let bAllFound = true;
      const aKeys = aKeyNames.map(name => {
        if (oStartupParameters[name] && oStartupParameters[name].length === 1) {
          return {
            name,
            value: oStartupParameters[name][0]
          };
        } else {
          // A unique key value couldn't be found in the startup parameters
          bAllFound = false;
          return {
            name,
            value: ""
          };
        }
      });
      return bAllFound ? aKeys : undefined;
    },
    /**
     * Creates a filter from a list of key values.
     *
     * @param aKeys Array of semantic keys or technical keys (with values)
     * @param bDraftMode True if the entity supports draft mode
     * @param oMetaModel The metamodel
     * @returns The filter
     */
    _createFilterFromKeys: function (aKeys, bDraftMode, oMetaModel) {
      const bFilterCaseSensitive = ModelHelper.isFilteringCaseSensitive(oMetaModel);
      let bFilterOnActiveEntity = false;
      const aFilters = aKeys.map(key => {
        if (key.name === "IsActiveEntity") {
          bFilterOnActiveEntity = true;
        }
        return new Filter({
          path: key.name,
          operator: FilterOperator.EQ,
          value1: key.value,
          caseSensitive: bFilterCaseSensitive
        });
      });
      if (bDraftMode && !bFilterOnActiveEntity) {
        const oDraftFilter = new Filter({
          filters: [new Filter("IsActiveEntity", "EQ", false), new Filter("SiblingEntity/IsActiveEntity", "EQ", null)],
          and: false
        });
        aFilters.push(oDraftFilter);
      }
      return new Filter(aFilters, true);
    },
    /**
     * Loads all contexts for a list of page infos.
     *
     * @param aStartupPages The list of page infos
     * @param oModel The model used to load the contexts
     * @returns A Promise for all contexts
     */
    _requestObjectsFromParameters: function (aStartupPages, oModel) {
      // Load the respective objects for all object pages found in aExternallyNavigablePages
      const aContextPromises = aStartupPages.map(pageInfo => {
        const aKeys = pageInfo.semanticKeys || pageInfo.technicalKeys || [];
        const oFilter = this._createFilterFromKeys(aKeys, pageInfo.draftMode, oModel.getMetaModel());

        // only request a minimum of fields to boost backend performance since this is only used to check if an object exists
        const oListBind = oModel.bindList(pageInfo.contextPath, undefined, undefined, oFilter, {
          $select: aKeys.map(key => {
            return key.name;
          }).join(",")
        });
        return oListBind.requestContexts(0, 2);
      });
      return Promise.all(aContextPromises);
    },
    /**
     * Creates a PageInfo from a route if it's reachable from the startup parameters.
     *
     * @param oRoute The route
     * @param oManifestRouting The app manifest routing section
     * @param oStartupParameters The startup parameters
     * @param oMetaModel The app metamodel
     * @returns A page info if the page is reachable, undefined otherwise
     */
    _getReachablePageInfoFromRoute: function (oRoute, oManifestRouting, oStartupParameters, oMetaModel) {
      var _oTarget$options, _oTarget$options$sett;
      // Remove trailing ':?query:' and '/'
      let sPattern = oRoute.pattern.replace(":?query:", "");
      sPattern = sPattern.replace(/\/$/, "");
      if (!sPattern || !sPattern.endsWith(")")) {
        // Ignore level-0 routes (ListReport) or routes corresponding to a 1-1 relation (no keys in the URL in this case)
        return undefined;
      }
      sPattern = sPattern.replace(/\(\{[^}]*\}\)/g, "(#)"); // Replace keys with #

      // Get the rightmost target for this route
      const sTargetName = Array.isArray(oRoute.target) ? oRoute.target[oRoute.target.length - 1] : oRoute.target;
      const oTarget = oManifestRouting.targets[sTargetName];
      const aPatternSegments = sPattern.split("/");
      const pageLevel = aPatternSegments.length - 1;
      if (pageLevel !== 0 && (oTarget === null || oTarget === void 0 ? void 0 : (_oTarget$options = oTarget.options) === null || _oTarget$options === void 0 ? void 0 : (_oTarget$options$sett = _oTarget$options.settings) === null || _oTarget$options$sett === void 0 ? void 0 : _oTarget$options$sett.allowDeepLinking) !== true) {
        // The first level of object page allows deep linking by default.
        // Otherwise, the target must allow deep linking explicitely in the manifest
        return undefined;
      }
      const sContextPath = oTarget.options.settings.contextPath || oTarget.options.settings.entitySet && `/${oTarget.options.settings.entitySet}`;
      const oEntityType = sContextPath && oMetaModel.getObject(`/$EntityContainer${sContextPath}/`);
      if (!oEntityType) {
        return undefined;
      }

      // Get the semantic key values for the entity
      const aSemanticKeyNames = oMetaModel.getObject(`/$EntityContainer${sContextPath}/@com.sap.vocabularies.Common.v1.SemanticKey`);
      const aSemantickKeys = aSemanticKeyNames ? this._getKeysFromStartupParams(aSemanticKeyNames.map(semKey => {
        return semKey.$PropertyPath;
      }), oStartupParameters) : undefined;

      // Get the technical keys only if we couldn't find the semantic key values, and on first level OP
      const aTechnicalKeys = !aSemantickKeys && pageLevel === 0 ? this._getKeysFromStartupParams(oEntityType["$Key"], oStartupParameters) : undefined;
      if (aSemantickKeys === undefined && aTechnicalKeys === undefined) {
        // We couldn't find the semantic/technical keys in the startup parameters
        return undefined;
      }

      // The startup parameters contain values for all semantic keys (or technical keys) --> we can store the page info in the corresponding level
      const draftMode = oMetaModel.getObject(`/$EntityContainer${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot`) || oMetaModel.getObject(`/$EntityContainer${sContextPath}@com.sap.vocabularies.Common.v1.DraftNode`) ? true : false;
      return {
        pattern: sPattern,
        contextPath: sContextPath,
        draftMode,
        technicalKeys: aTechnicalKeys,
        semanticKeys: aSemantickKeys,
        target: sTargetName,
        pageLevel
      };
    },
    /**
     * Returns the list of all pages that allow deeplink and that can be reached using the startup parameters.
     *
     * @param oManifestRouting The routing information from the app manifest
     * @param oStartupParameters The startup parameters
     * @param oMetaModel The metamodel
     * @returns The reachable pages
     */
    _getReachablePages: function (oManifestRouting, oStartupParameters, oMetaModel) {
      const aRoutes = oManifestRouting.routes;
      const mPagesByLevel = {};
      aRoutes.forEach(oRoute => {
        const oPageInfo = this._getReachablePageInfoFromRoute(oRoute, oManifestRouting, oStartupParameters, oMetaModel);
        if (oPageInfo) {
          if (!mPagesByLevel[oPageInfo.pageLevel]) {
            mPagesByLevel[oPageInfo.pageLevel] = [];
          }
          mPagesByLevel[oPageInfo.pageLevel].push(oPageInfo);
        }
      });

      // A page is reachable only if all its parents are also reachable
      // So if we couldn't find any pages for a given level, all pages with a higher level won't be reachable anyway
      const aReachablePages = [];
      let level = 0;
      while (mPagesByLevel[level]) {
        aReachablePages.push(mPagesByLevel[level]);
        level++;
      }
      return aReachablePages;
    },
    /**
     * Get the list of startup pages.
     *
     * @param oManifestRouting The routing information from the app manifest
     * @param oStartupParameters The startup parameters
     * @param oMetaModel The metamodel
     * @returns An array of startup page infos
     */
    _getStartupPagesFromStartupParams: function (oManifestRouting, oStartupParameters, oMetaModel) {
      // Find all pages that can be reached with the startup parameters
      const aReachablePages = this._getReachablePages(oManifestRouting, oStartupParameters, oMetaModel);
      if (aReachablePages.length === 0) {
        return [];
      }

      // Find the longest sequence of pages that can be reached (recursively)
      let result = [];
      const current = [];
      function findRecursive(level) {
        const aCurrentLevelPages = aReachablePages[level];
        const lastPage = current.length ? current[current.length - 1] : undefined;
        if (aCurrentLevelPages) {
          aCurrentLevelPages.forEach(function (nextPage) {
            if (!lastPage || nextPage.pattern.indexOf(lastPage.pattern) === 0) {
              // We only consider pages that can be reached from the page at the previous level,
              // --> their pattern must be the pattern of the previous page with another segment appended
              current.push(nextPage);
              findRecursive(level + 1);
              current.pop();
            }
          });
        }
        if (current.length > result.length) {
          result = current.slice(); // We have found a sequence longer than our previous best --> store it as the new longest
        }
      }

      findRecursive(0);
      return result;
    },
    /**
     * Creates the startup object from the list of pages and contexts.
     *
     * @param aStartupPages The pages
     * @param aContexts The contexts
     * @returns An object containing either a hash or a context to navigate to, or an empty object if no deep link was found
     */
    _getDeepLinkObject: function (aStartupPages, aContexts) {
      if (aContexts.length === 1) {
        return {
          context: aContexts[0]
        };
      } else if (aContexts.length > 1) {
        // Navigation to a deeper level --> use the pattern of the deepest object page
        // and replace the parameters by the ID from the contexts
        let hash = aStartupPages[aStartupPages.length - 1].pattern;
        aContexts.forEach(function (oContext) {
          hash = hash.replace("(#)", `(${oContext.getPath().split("(")[1]}`);
        });
        return {
          hash
        };
      } else {
        return {};
      }
    },
    /**
     * Calculates startup parameters for a deeplink case, from startup parameters and routing infoirmation.
     *
     * @param oManifestRouting The routing information from the app manifest
     * @param oStartupParameters The startup parameters
     * @param oModel The OData model
     * @returns An object containing either a hash or a context to navigate to, or an empty object if no deep link was found
     */
    getDeepLinkStartupHash: function (oManifestRouting, oStartupParameters, oModel) {
      let aStartupPages;
      return oModel.getMetaModel().requestObject("/$EntityContainer/").then(() => {
        // Check if semantic keys are present in url parameters for every object page at each level
        aStartupPages = this._getStartupPagesFromStartupParams(oManifestRouting, oStartupParameters, oModel.getMetaModel());
        return this._requestObjectsFromParameters(aStartupPages, oModel);
      }).then(aValues => {
        if (aValues.length) {
          // Make sure we only get 1 context per promise, and flatten the array
          const aContexts = [];
          aValues.forEach(function (aFoundContexts) {
            if (aFoundContexts.length === 1) {
              aContexts.push(aFoundContexts[0]);
            }
          });
          return aContexts.length === aValues.length ? this._getDeepLinkObject(aStartupPages, aContexts) : {};
        } else {
          return {};
        }
      });
    },
    /**
     * Calculates the new hash based on the startup parameters.
     *
     * @param oStartupParameters The startup parameter values (map parameter name -> array of values)
     * @param sContextPath The context path for the startup of the app (generally the path to the main entity set)
     * @param oRouter The router instance
     * @param oMetaModel The meta model
     * @returns A promise containing the hash to navigate to, or an empty string if there's no need to navigate
     */
    getCreateStartupHash: function (oStartupParameters, sContextPath, oRouter, oMetaModel) {
      return oMetaModel.requestObject(`${sContextPath}@`).then(oEntitySetAnnotations => {
        let sMetaPath = "";
        let bCreatable = true;
        if (oEntitySetAnnotations["@com.sap.vocabularies.Common.v1.DraftRoot"] && oEntitySetAnnotations["@com.sap.vocabularies.Common.v1.DraftRoot"]["NewAction"]) {
          sMetaPath = `${sContextPath}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction@Org.OData.Core.V1.OperationAvailable`;
        } else if (oEntitySetAnnotations["@com.sap.vocabularies.Session.v1.StickySessionSupported"] && oEntitySetAnnotations["@com.sap.vocabularies.Session.v1.StickySessionSupported"]["NewAction"]) {
          sMetaPath = `${sContextPath}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction@Org.OData.Core.V1.OperationAvailable`;
        }
        if (sMetaPath) {
          const bNewActionOperationAvailable = oMetaModel.getObject(sMetaPath);
          if (bNewActionOperationAvailable === false) {
            bCreatable = false;
          }
        } else {
          const oInsertRestrictions = oEntitySetAnnotations["@Org.OData.Capabilities.V1.InsertRestrictions"];
          if (oInsertRestrictions && oInsertRestrictions.Insertable === false) {
            bCreatable = false;
          }
        }
        if (bCreatable) {
          return this.getDefaultCreateHash(oStartupParameters, sContextPath, oRouter);
        } else {
          return "";
        }
      });
    },
    /**
     * Calculates the hash to create a new object.
     *
     * @param oStartupParameters The startup parameter values (map parameter name -> array of values)
     * @param sContextPath The context path of the entity set to be used for the creation
     * @param oRouter The router instance
     * @returns The hash
     */
    getDefaultCreateHash: function (oStartupParameters, sContextPath, oRouter) {
      let sDefaultCreateHash = oStartupParameters && oStartupParameters.preferredMode ? oStartupParameters.preferredMode[0] : "create";
      let sHash = "";
      sDefaultCreateHash = sDefaultCreateHash.indexOf(":") !== -1 && sDefaultCreateHash.length > sDefaultCreateHash.indexOf(":") + 1 ? sDefaultCreateHash.substr(0, sDefaultCreateHash.indexOf(":")) : "create";
      sHash = `${sContextPath.substring(1)}(...)?i-action=${sDefaultCreateHash}`;
      if (oRouter.getRouteInfoByHash(sHash)) {
        return sHash;
      } else {
        throw new Error(`No route match for creating a new ${sContextPath.substring(1)}`);
      }
    }
  };
  return AppStartupHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/AppStartupHelper", ["sap/ui/model/Filter","sap/ui/model/FilterOperator","./ModelHelper"],function(e,t,n){"use strict";const r={_getKeysFromStartupParams:function(e,t){let n=true;const r=e.map(e=>{if(t[e]&&t[e].length===1){return{name:e,value:t[e][0]}}else{n=false;return{name:e,value:""}}});return n?r:undefined},_createFilterFromKeys:function(r,a,s){const i=n.isFilteringCaseSensitive(s);let o=false;const c=r.map(n=>{if(n.name==="IsActiveEntity"){o=true}return new e({path:n.name,operator:t.EQ,value1:n.value,caseSensitive:i})});if(a&&!o){const t=new e({filters:[new e("IsActiveEntity","EQ",false),new e("SiblingEntity/IsActiveEntity","EQ",null)],and:false});c.push(t)}return new e(c,true)},_requestObjectsFromParameters:function(e,t){const n=e.map(e=>{const n=e.semanticKeys||e.technicalKeys||[];const r=this._createFilterFromKeys(n,e.draftMode,t.getMetaModel());const a=t.bindList(e.contextPath,undefined,undefined,r,{$select:n.map(e=>e.name).join(",")});return a.requestContexts(0,2)});return Promise.all(n)},_getReachablePageInfoFromRoute:function(e,t,n,r){var a,s;let i=e.pattern.replace(":?query:","");i=i.replace(/\/$/,"");if(!i||!i.endsWith(")")){return undefined}i=i.replace(/\(\{[^}]*\}\)/g,"(#)");const o=Array.isArray(e.target)?e.target[e.target.length-1]:e.target;const c=t.targets[o];const u=i.split("/");const l=u.length-1;if(l!==0&&(c===null||c===void 0?void 0:(a=c.options)===null||a===void 0?void 0:(s=a.settings)===null||s===void 0?void 0:s.allowDeepLinking)!==true){return undefined}const f=c.options.settings.contextPath||c.options.settings.entitySet&&`/${c.options.settings.entitySet}`;const p=f&&r.getObject(`/$EntityContainer${f}/`);if(!p){return undefined}const g=r.getObject(`/$EntityContainer${f}/@com.sap.vocabularies.Common.v1.SemanticKey`);const h=g?this._getKeysFromStartupParams(g.map(e=>e.$PropertyPath),n):undefined;const d=!h&&l===0?this._getKeysFromStartupParams(p["$Key"],n):undefined;if(h===undefined&&d===undefined){return undefined}const m=r.getObject(`/$EntityContainer${f}@com.sap.vocabularies.Common.v1.DraftRoot`)||r.getObject(`/$EntityContainer${f}@com.sap.vocabularies.Common.v1.DraftNode`)?true:false;return{pattern:i,contextPath:f,draftMode:m,technicalKeys:d,semanticKeys:h,target:o,pageLevel:l}},_getReachablePages:function(e,t,n){const r=e.routes;const a={};r.forEach(r=>{const s=this._getReachablePageInfoFromRoute(r,e,t,n);if(s){if(!a[s.pageLevel]){a[s.pageLevel]=[]}a[s.pageLevel].push(s)}});const s=[];let i=0;while(a[i]){s.push(a[i]);i++}return s},_getStartupPagesFromStartupParams:function(e,t,n){const r=this._getReachablePages(e,t,n);if(r.length===0){return[]}let a=[];const s=[];function i(e){const t=r[e];const n=s.length?s[s.length-1]:undefined;if(t){t.forEach(function(t){if(!n||t.pattern.indexOf(n.pattern)===0){s.push(t);i(e+1);s.pop()}})}if(s.length>a.length){a=s.slice()}}i(0);return a},_getDeepLinkObject:function(e,t){if(t.length===1){return{context:t[0]}}else if(t.length>1){let n=e[e.length-1].pattern;t.forEach(function(e){n=n.replace("(#)",`(${e.getPath().split("(")[1]}`)});return{hash:n}}else{return{}}},getDeepLinkStartupHash:function(e,t,n){let r;return n.getMetaModel().requestObject("/$EntityContainer/").then(()=>{r=this._getStartupPagesFromStartupParams(e,t,n.getMetaModel());return this._requestObjectsFromParameters(r,n)}).then(e=>{if(e.length){const t=[];e.forEach(function(e){if(e.length===1){t.push(e[0])}});return t.length===e.length?this._getDeepLinkObject(r,t):{}}else{return{}}})},getCreateStartupHash:function(e,t,n,r){return r.requestObject(`${t}@`).then(a=>{let s="";let i=true;if(a["@com.sap.vocabularies.Common.v1.DraftRoot"]&&a["@com.sap.vocabularies.Common.v1.DraftRoot"]["NewAction"]){s=`${t}@com.sap.vocabularies.Common.v1.DraftRoot/NewAction@Org.OData.Core.V1.OperationAvailable`}else if(a["@com.sap.vocabularies.Session.v1.StickySessionSupported"]&&a["@com.sap.vocabularies.Session.v1.StickySessionSupported"]["NewAction"]){s=`${t}@com.sap.vocabularies.Session.v1.StickySessionSupported/NewAction@Org.OData.Core.V1.OperationAvailable`}if(s){const e=r.getObject(s);if(e===false){i=false}}else{const e=a["@Org.OData.Capabilities.V1.InsertRestrictions"];if(e&&e.Insertable===false){i=false}}if(i){return this.getDefaultCreateHash(e,t,n)}else{return""}})},getDefaultCreateHash:function(e,t,n){let r=e&&e.preferredMode?e.preferredMode[0]:"create";let a="";r=r.indexOf(":")!==-1&&r.length>r.indexOf(":")+1?r.substr(0,r.indexOf(":")):"create";a=`${t.substring(1)}(...)?i-action=${r}`;if(n.getRouteInfoByHash(a)){return a}else{throw new Error(`No route match for creating a new ${t.substring(1)}`)}}};return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/BindingToolkit-dbg", ["sap/fe/core/helpers/TypeGuards", "./AnnotationEnum"], function (TypeGuards, AnnotationEnum) {
  "use strict";

  var _exports = {};
  var resolveEnumValue = AnnotationEnum.resolveEnumValue;
  var isProperty = TypeGuards.isProperty;
  const EDM_TYPE_MAPPING = {
    "Edm.Boolean": {
      type: "sap.ui.model.odata.type.Boolean"
    },
    "Edm.Byte": {
      type: "sap.ui.model.odata.type.Byte"
    },
    "Edm.Date": {
      type: "sap.ui.model.odata.type.Date"
    },
    "Edm.DateTimeOffset": {
      constraints: {
        $Precision: "precision",
        $V4: "V4"
      },
      type: "sap.ui.model.odata.type.DateTimeOffset"
    },
    "Edm.Decimal": {
      constraints: {
        "@Org.OData.Validation.V1.Minimum/$Decimal": "minimum",
        "@Org.OData.Validation.V1.Minimum@Org.OData.Validation.V1.Exclusive": "minimumExclusive",
        "@Org.OData.Validation.V1.Maximum/$Decimal": "maximum",
        "@Org.OData.Validation.V1.Maximum@Org.OData.Validation.V1.Exclusive": "maximumExclusive",
        $Precision: "precision",
        $Scale: "scale"
      },
      type: "sap.ui.model.odata.type.Decimal"
    },
    "Edm.Double": {
      type: "sap.ui.model.odata.type.Double"
    },
    "Edm.Guid": {
      type: "sap.ui.model.odata.type.Guid"
    },
    "Edm.Int16": {
      type: "sap.ui.model.odata.type.Int16"
    },
    "Edm.Int32": {
      type: "sap.ui.model.odata.type.Int32"
    },
    "Edm.Int64": {
      type: "sap.ui.model.odata.type.Int64"
    },
    "Edm.SByte": {
      type: "sap.ui.model.odata.type.SByte"
    },
    "Edm.Single": {
      type: "sap.ui.model.odata.type.Single"
    },
    "Edm.Stream": {
      type: "sap.ui.model.odata.type.Stream"
    },
    "Edm.Binary": {
      type: "sap.ui.model.odata.type.Stream"
    },
    "Edm.String": {
      constraints: {
        "@com.sap.vocabularies.Common.v1.IsDigitSequence": "isDigitSequence",
        $MaxLength: "maxLength",
        $Nullable: "nullable"
      },
      type: "sap.ui.model.odata.type.String"
    },
    "Edm.TimeOfDay": {
      constraints: {
        $Precision: "precision"
      },
      type: "sap.ui.model.odata.type.TimeOfDay"
    }
  };

  /**
   * An expression that evaluates to type T, or a constant value of type T
   */
  _exports.EDM_TYPE_MAPPING = EDM_TYPE_MAPPING;
  const unresolvableExpression = {
    _type: "Unresolvable"
  };
  _exports.unresolvableExpression = unresolvableExpression;
  function escapeXmlAttribute(inputString) {
    return inputString.replace(/'/g, "\\'");
  }
  function hasUnresolvableExpression() {
    for (var _len = arguments.length, expressions = new Array(_len), _key = 0; _key < _len; _key++) {
      expressions[_key] = arguments[_key];
    }
    return expressions.find(expr => expr._type === "Unresolvable") !== undefined;
  }
  /**
   * Check two expressions for (deep) equality.
   *
   * @param a
   * @param b
   * @returns `true` if the two expressions are equal
   * @private
   */
  _exports.hasUnresolvableExpression = hasUnresolvableExpression;
  function _checkExpressionsAreEqual(a, b) {
    if (a._type !== b._type) {
      return false;
    }
    switch (a._type) {
      case "Unresolvable":
        return false;
      // Unresolvable is never equal to anything even itself
      case "Constant":
      case "EmbeddedBinding":
      case "EmbeddedExpressionBinding":
        return a.value === b.value;
      case "Not":
        return _checkExpressionsAreEqual(a.operand, b.operand);
      case "Truthy":
        return _checkExpressionsAreEqual(a.operand, b.operand);
      case "Set":
        return a.operator === b.operator && a.operands.length === b.operands.length && a.operands.every(expression => b.operands.some(otherExpression => _checkExpressionsAreEqual(expression, otherExpression)));
      case "IfElse":
        return _checkExpressionsAreEqual(a.condition, b.condition) && _checkExpressionsAreEqual(a.onTrue, b.onTrue) && _checkExpressionsAreEqual(a.onFalse, b.onFalse);
      case "Comparison":
        return a.operator === b.operator && _checkExpressionsAreEqual(a.operand1, b.operand1) && _checkExpressionsAreEqual(a.operand2, b.operand2);
      case "Concat":
        const aExpressions = a.expressions;
        const bExpressions = b.expressions;
        if (aExpressions.length !== bExpressions.length) {
          return false;
        }
        return aExpressions.every((expression, index) => {
          return _checkExpressionsAreEqual(expression, bExpressions[index]);
        });
      case "Length":
        return _checkExpressionsAreEqual(a.pathInModel, b.pathInModel);
      case "PathInModel":
        return a.modelName === b.modelName && a.path === b.path && a.targetEntitySet === b.targetEntitySet;
      case "Formatter":
        return a.fn === b.fn && a.parameters.length === b.parameters.length && a.parameters.every((value, index) => _checkExpressionsAreEqual(b.parameters[index], value));
      case "ComplexType":
        return a.type === b.type && a.bindingParameters.length === b.bindingParameters.length && a.bindingParameters.every((value, index) => _checkExpressionsAreEqual(b.bindingParameters[index], value));
      case "Function":
        const otherFunction = b;
        if (a.obj === undefined || otherFunction.obj === undefined) {
          return a.obj === otherFunction;
        }
        return a.fn === otherFunction.fn && _checkExpressionsAreEqual(a.obj, otherFunction.obj) && a.parameters.length === otherFunction.parameters.length && a.parameters.every((value, index) => _checkExpressionsAreEqual(otherFunction.parameters[index], value));
      case "Ref":
        return a.ref === b.ref;
    }
    return false;
  }

  /**
   * Converts a nested SetExpression by inlining operands of type SetExpression with the same operator.
   *
   * @param expression The expression to flatten
   * @returns A new SetExpression with the same operator
   */
  _exports._checkExpressionsAreEqual = _checkExpressionsAreEqual;
  function flattenSetExpression(expression) {
    return expression.operands.reduce((result, operand) => {
      const candidatesForFlattening = operand._type === "Set" && operand.operator === expression.operator ? operand.operands : [operand];
      candidatesForFlattening.forEach(candidate => {
        if (result.operands.every(e => !_checkExpressionsAreEqual(e, candidate))) {
          result.operands.push(candidate);
        }
      });
      return result;
    }, {
      _type: "Set",
      operator: expression.operator,
      operands: []
    });
  }

  /**
   * Detects whether an array of boolean expressions contains an expression and its negation.
   *
   * @param expressions Array of expressions
   * @returns `true` if the set of expressions contains an expression and its negation
   */
  function hasOppositeExpressions(expressions) {
    const negatedExpressions = expressions.map(not);
    return expressions.some((expression, index) => {
      for (let i = index + 1; i < negatedExpressions.length; i++) {
        if (_checkExpressionsAreEqual(expression, negatedExpressions[i])) {
          return true;
        }
      }
      return false;
    });
  }

  /**
   * Logical `and` expression.
   *
   * The expression is simplified to false if this can be decided statically (that is, if one operand is a constant
   * false or if the expression contains an operand and its negation).
   *
   * @param operands Expressions to connect by `and`
   * @returns Expression evaluating to boolean
   */
  function and() {
    for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      operands[_key2] = arguments[_key2];
    }
    const expressions = flattenSetExpression({
      _type: "Set",
      operator: "&&",
      operands: operands.map(wrapPrimitive)
    }).operands;
    if (hasUnresolvableExpression(...expressions)) {
      return unresolvableExpression;
    }
    let isStaticFalse = false;
    const nonTrivialExpression = expressions.filter(expression => {
      if (isFalse(expression)) {
        isStaticFalse = true;
      }
      return !isConstant(expression);
    });
    if (isStaticFalse) {
      return constant(false);
    } else if (nonTrivialExpression.length === 0) {
      // Resolve the constant then
      const isValid = expressions.reduce((result, expression) => result && isTrue(expression), true);
      return constant(isValid);
    } else if (nonTrivialExpression.length === 1) {
      return nonTrivialExpression[0];
    } else if (hasOppositeExpressions(nonTrivialExpression)) {
      return constant(false);
    } else {
      return {
        _type: "Set",
        operator: "&&",
        operands: nonTrivialExpression
      };
    }
  }

  /**
   * Logical `or` expression.
   *
   * The expression is simplified to true if this can be decided statically (that is, if one operand is a constant
   * true or if the expression contains an operand and its negation).
   *
   * @param operands Expressions to connect by `or`
   * @returns Expression evaluating to boolean
   */
  _exports.and = and;
  function or() {
    for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      operands[_key3] = arguments[_key3];
    }
    const expressions = flattenSetExpression({
      _type: "Set",
      operator: "||",
      operands: operands.map(wrapPrimitive)
    }).operands;
    if (hasUnresolvableExpression(...expressions)) {
      return unresolvableExpression;
    }
    let isStaticTrue = false;
    const nonTrivialExpression = expressions.filter(expression => {
      if (isTrue(expression)) {
        isStaticTrue = true;
      }
      return !isConstant(expression) || expression.value;
    });
    if (isStaticTrue) {
      return constant(true);
    } else if (nonTrivialExpression.length === 0) {
      // Resolve the constant then
      const isValid = expressions.reduce((result, expression) => result && isTrue(expression), true);
      return constant(isValid);
    } else if (nonTrivialExpression.length === 1) {
      return nonTrivialExpression[0];
    } else if (hasOppositeExpressions(nonTrivialExpression)) {
      return constant(true);
    } else {
      return {
        _type: "Set",
        operator: "||",
        operands: nonTrivialExpression
      };
    }
  }

  /**
   * Logical `not` operator.
   *
   * @param operand The expression to reverse
   * @returns The resulting expression that evaluates to boolean
   */
  _exports.or = or;
  function not(operand) {
    operand = wrapPrimitive(operand);
    if (hasUnresolvableExpression(operand)) {
      return unresolvableExpression;
    } else if (isConstant(operand)) {
      return constant(!operand.value);
    } else if (typeof operand === "object" && operand._type === "Set" && operand.operator === "||" && operand.operands.every(expression => isConstant(expression) || isComparison(expression))) {
      return and(...operand.operands.map(expression => not(expression)));
    } else if (typeof operand === "object" && operand._type === "Set" && operand.operator === "&&" && operand.operands.every(expression => isConstant(expression) || isComparison(expression))) {
      return or(...operand.operands.map(expression => not(expression)));
    } else if (isComparison(operand)) {
      // Create the reverse comparison
      switch (operand.operator) {
        case "!==":
          return {
            ...operand,
            operator: "==="
          };
        case "<":
          return {
            ...operand,
            operator: ">="
          };
        case "<=":
          return {
            ...operand,
            operator: ">"
          };
        case "===":
          return {
            ...operand,
            operator: "!=="
          };
        case ">":
          return {
            ...operand,
            operator: "<="
          };
        case ">=":
          return {
            ...operand,
            operator: "<"
          };
      }
    } else if (operand._type === "Not") {
      return operand.operand;
    }
    return {
      _type: "Not",
      operand: operand
    };
  }

  /**
   * Evaluates whether a binding expression is equal to true with a loose equality.
   *
   * @param operand The expression to check
   * @returns The resulting expression that evaluates to boolean
   */
  _exports.not = not;
  function isTruthy(operand) {
    if (isConstant(operand)) {
      return constant(!!operand.value);
    } else {
      return {
        _type: "Truthy",
        operand: operand
      };
    }
  }

  /**
   * Creates a binding expression that will be evaluated by the corresponding model.
   *
   * @param path
   * @param modelName
   * @param visitedNavigationPaths
   * @param pathVisitor
   * @returns An expression representating that path in the model
   * @deprecated use pathInModel instead
   */
  _exports.isTruthy = isTruthy;
  function bindingExpression(path, modelName) {
    let visitedNavigationPaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let pathVisitor = arguments.length > 3 ? arguments[3] : undefined;
    return pathInModel(path, modelName, visitedNavigationPaths, pathVisitor);
  }

  /**
   * Creates a binding expression that will be evaluated by the corresponding model.
   *
   * @template TargetType
   * @param path The path on the model
   * @param [modelName] The name of the model
   * @param [visitedNavigationPaths] The paths from the root entitySet
   * @param [pathVisitor] A function to modify the resulting path
   * @returns An expression representating that path in the model
   */
  _exports.bindingExpression = bindingExpression;
  function pathInModel(path, modelName) {
    let visitedNavigationPaths = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    let pathVisitor = arguments.length > 3 ? arguments[3] : undefined;
    if (path === undefined) {
      return unresolvableExpression;
    }
    let targetPath;
    if (pathVisitor) {
      targetPath = pathVisitor(path);
      if (targetPath === undefined) {
        return unresolvableExpression;
      }
    } else {
      const localPath = visitedNavigationPaths.concat();
      localPath.push(path);
      targetPath = localPath.join("/");
    }
    return {
      _type: "PathInModel",
      modelName: modelName,
      path: targetPath
    };
  }
  _exports.pathInModel = pathInModel;
  /**
   * Creates a constant expression based on a primitive value.
   *
   * @template T
   * @param value The constant to wrap in an expression
   * @returns The constant expression
   */
  function constant(value) {
    let constantValue;
    if (typeof value === "object" && value !== null && value !== undefined) {
      if (Array.isArray(value)) {
        constantValue = value.map(wrapPrimitive);
      } else if (isPrimitiveObject(value)) {
        constantValue = value.valueOf();
      } else {
        constantValue = Object.entries(value).reduce((plainExpression, _ref) => {
          let [key, val] = _ref;
          const wrappedValue = wrapPrimitive(val);
          if (wrappedValue._type !== "Constant" || wrappedValue.value !== undefined) {
            plainExpression[key] = wrappedValue;
          }
          return plainExpression;
        }, {});
      }
    } else {
      constantValue = value;
    }
    return {
      _type: "Constant",
      value: constantValue
    };
  }
  _exports.constant = constant;
  function resolveBindingString(value, targetType) {
    if (value !== undefined && typeof value === "string" && value.startsWith("{")) {
      const pathInModelRegex = /^{(.*)>(.+)}$/; // Matches model paths like "model>path" or ">path" (default model)
      const pathInModelRegexMatch = pathInModelRegex.exec(value);
      if (value.startsWith("{=")) {
        // Expression binding, we can just remove the outer binding things
        return {
          _type: "EmbeddedExpressionBinding",
          value: value
        };
      } else if (pathInModelRegexMatch) {
        return pathInModel(pathInModelRegexMatch[2] || "", pathInModelRegexMatch[1] || undefined);
      } else {
        return {
          _type: "EmbeddedBinding",
          value: value
        };
      }
    } else if (targetType === "boolean" && typeof value === "string" && (value === "true" || value === "false")) {
      return constant(value === "true");
    } else if (targetType === "number" && typeof value === "string" && (!isNaN(Number(value)) || value === "NaN")) {
      return constant(Number(value));
    } else {
      return constant(value);
    }
  }

  /**
   * A named reference.
   *
   * @see fn
   * @param reference Reference
   * @returns The object reference binding part
   */
  _exports.resolveBindingString = resolveBindingString;
  function ref(reference) {
    return {
      _type: "Ref",
      ref: reference
    };
  }

  /**
   * Wrap a primitive into a constant expression if it is not already an expression.
   *
   * @template T
   * @param something The object to wrap in a Constant expression
   * @returns Either the original object or the wrapped one depending on the case
   */
  _exports.ref = ref;
  function wrapPrimitive(something) {
    if (isBindingToolkitExpression(something)) {
      return something;
    }
    return constant(something);
  }

  /**
   * Checks if the expression or value provided is a binding tooling expression or not.
   *
   * Every object having a property named `_type` of some value is considered an expression, even if there is actually
   * no such expression type supported.
   *
   * @param expression
   * @returns `true` if the expression is a binding toolkit expression
   */
  function isBindingToolkitExpression(expression) {
    return (expression === null || expression === void 0 ? void 0 : expression._type) !== undefined;
  }

  /**
   * Checks if the expression or value provided is constant or not.
   *
   * @template T The target type
   * @param  maybeConstant The expression or primitive value that is to be checked
   * @returns `true` if it is constant
   */
  _exports.isBindingToolkitExpression = isBindingToolkitExpression;
  function isConstant(maybeConstant) {
    return typeof maybeConstant !== "object" || maybeConstant._type === "Constant";
  }
  _exports.isConstant = isConstant;
  function isTrue(expression) {
    return isConstant(expression) && expression.value === true;
  }
  function isFalse(expression) {
    return isConstant(expression) && expression.value === false;
  }

  /**
   * Checks if the expression or value provided is a path in model expression or not.
   *
   * @template T The target type
   * @param  maybeBinding The expression or primitive value that is to be checked
   * @returns `true` if it is a path in model expression
   */
  function isPathInModelExpression(maybeBinding) {
    return (maybeBinding === null || maybeBinding === void 0 ? void 0 : maybeBinding._type) === "PathInModel";
  }

  /**
   * Checks if the expression or value provided is a complex type expression.
   *
   * @template T The target type
   * @param  maybeBinding The expression or primitive value that is to be checked
   * @returns `true` if it is a path in model expression
   */
  _exports.isPathInModelExpression = isPathInModelExpression;
  function isComplexTypeExpression(maybeBinding) {
    return (maybeBinding === null || maybeBinding === void 0 ? void 0 : maybeBinding._type) === "ComplexType";
  }

  /**
   * Checks if the expression or value provided is a concat expression or not.
   *
   * @param expression
   * @returns `true` if the expression is a ConcatExpression
   */
  _exports.isComplexTypeExpression = isComplexTypeExpression;
  function isConcatExpression(expression) {
    return (expression === null || expression === void 0 ? void 0 : expression._type) === "Concat";
  }

  /**
   * Checks if the expression provided is a comparison or not.
   *
   * @template T The target type
   * @param expression The expression
   * @returns `true` if the expression is a ComparisonExpression
   */
  function isComparison(expression) {
    return expression._type === "Comparison";
  }

  /**
   * Checks whether the input parameter is a constant expression of type undefined.
   *
   * @param expression The input expression or object in general
   * @returns `true` if the input is constant which has undefined for value
   */
  function isUndefinedExpression(expression) {
    const expressionAsExpression = expression;
    return (expressionAsExpression === null || expressionAsExpression === void 0 ? void 0 : expressionAsExpression._type) === "Constant" && (expressionAsExpression === null || expressionAsExpression === void 0 ? void 0 : expressionAsExpression.value) === undefined;
  }
  _exports.isUndefinedExpression = isUndefinedExpression;
  function isPrimitiveObject(objectType) {
    switch (objectType.constructor.name) {
      case "String":
      case "Number":
      case "Boolean":
        return true;
      default:
        return false;
    }
  }
  /**
   * Check if the passed annotation annotationValue is a ComplexAnnotationExpression.
   *
   * @template T The target type
   * @param  annotationValue The annotation annotationValue to evaluate
   * @returns `true` if the object is a {ComplexAnnotationExpression}
   */
  function isComplexAnnotationExpression(annotationValue) {
    return typeof annotationValue === "object" && !isPrimitiveObject(annotationValue);
  }

  /**
   * Generate the corresponding annotationValue for a given annotation annotationValue.
   *
   * @template T The target type
   * @param annotationValue The source annotation annotationValue
   * @param visitedNavigationPaths The path from the root entity set
   * @param defaultValue Default value if the annotationValue is undefined
   * @param pathVisitor A function to modify the resulting path
   * @returns The annotationValue equivalent to that annotation annotationValue
   * @deprecated use getExpressionFromAnnotation instead
   */
  function annotationExpression(annotationValue) {
    let visitedNavigationPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let defaultValue = arguments.length > 2 ? arguments[2] : undefined;
    let pathVisitor = arguments.length > 3 ? arguments[3] : undefined;
    return getExpressionFromAnnotation(annotationValue, visitedNavigationPaths, defaultValue, pathVisitor);
  }
  /**
   * Generate the corresponding annotationValue for a given annotation annotationValue.
   *
   * @template T The target type
   * @param annotationValue The source annotation annotationValue
   * @param visitedNavigationPaths The path from the root entity set
   * @param defaultValue Default value if the annotationValue is undefined
   * @param pathVisitor A function to modify the resulting path
   * @returns The annotationValue equivalent to that annotation annotationValue
   */
  _exports.annotationExpression = annotationExpression;
  function getExpressionFromAnnotation(annotationValue) {
    var _annotationValue;
    let visitedNavigationPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let defaultValue = arguments.length > 2 ? arguments[2] : undefined;
    let pathVisitor = arguments.length > 3 ? arguments[3] : undefined;
    if (annotationValue === undefined) {
      return wrapPrimitive(defaultValue);
    }
    annotationValue = (_annotationValue = annotationValue) === null || _annotationValue === void 0 ? void 0 : _annotationValue.valueOf();
    if (!isComplexAnnotationExpression(annotationValue)) {
      return constant(annotationValue);
    }
    switch (annotationValue.type) {
      case "Path":
        return pathInModel(annotationValue.path, undefined, visitedNavigationPaths, pathVisitor);
      case "If":
        return annotationIfExpression(annotationValue.If, visitedNavigationPaths, pathVisitor);
      case "Not":
        return not(parseAnnotationCondition(annotationValue.Not, visitedNavigationPaths, pathVisitor));
      case "Eq":
        return equal(parseAnnotationCondition(annotationValue.Eq[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Eq[1], visitedNavigationPaths, pathVisitor));
      case "Ne":
        return notEqual(parseAnnotationCondition(annotationValue.Ne[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Ne[1], visitedNavigationPaths, pathVisitor));
      case "Gt":
        return greaterThan(parseAnnotationCondition(annotationValue.Gt[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Gt[1], visitedNavigationPaths, pathVisitor));
      case "Ge":
        return greaterOrEqual(parseAnnotationCondition(annotationValue.Ge[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Ge[1], visitedNavigationPaths, pathVisitor));
      case "Lt":
        return lessThan(parseAnnotationCondition(annotationValue.Lt[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Lt[1], visitedNavigationPaths, pathVisitor));
      case "Le":
        return lessOrEqual(parseAnnotationCondition(annotationValue.Le[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.Le[1], visitedNavigationPaths, pathVisitor));
      case "Or":
        return or(...annotationValue.Or.map(function (orCondition) {
          return parseAnnotationCondition(orCondition, visitedNavigationPaths, pathVisitor);
        }));
      case "And":
        return and(...annotationValue.And.map(function (andCondition) {
          return parseAnnotationCondition(andCondition, visitedNavigationPaths, pathVisitor);
        }));
      case "Apply":
        return annotationApplyExpression(annotationValue, visitedNavigationPaths, pathVisitor);
    }
    return unresolvableExpression;
  }

  /**
   * Parse the annotation condition into an expression.
   *
   * @template T The target type
   * @param annotationValue The condition or value from the annotation
   * @param visitedNavigationPaths The path from the root entity set
   * @param pathVisitor A function to modify the resulting path
   * @returns An equivalent expression
   */
  _exports.getExpressionFromAnnotation = getExpressionFromAnnotation;
  function parseAnnotationCondition(annotationValue) {
    let visitedNavigationPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let pathVisitor = arguments.length > 2 ? arguments[2] : undefined;
    if (annotationValue === null || typeof annotationValue !== "object") {
      return constant(annotationValue);
    } else if (annotationValue.hasOwnProperty("$Or")) {
      return or(...annotationValue.$Or.map(function (orCondition) {
        return parseAnnotationCondition(orCondition, visitedNavigationPaths, pathVisitor);
      }));
    } else if (annotationValue.hasOwnProperty("$And")) {
      return and(...annotationValue.$And.map(function (andCondition) {
        return parseAnnotationCondition(andCondition, visitedNavigationPaths, pathVisitor);
      }));
    } else if (annotationValue.hasOwnProperty("$Not")) {
      return not(parseAnnotationCondition(annotationValue.$Not, visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Eq")) {
      return equal(parseAnnotationCondition(annotationValue.$Eq[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Eq[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Ne")) {
      return notEqual(parseAnnotationCondition(annotationValue.$Ne[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Ne[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Gt")) {
      return greaterThan(parseAnnotationCondition(annotationValue.$Gt[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Gt[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Ge")) {
      return greaterOrEqual(parseAnnotationCondition(annotationValue.$Ge[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Ge[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Lt")) {
      return lessThan(parseAnnotationCondition(annotationValue.$Lt[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Lt[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Le")) {
      return lessOrEqual(parseAnnotationCondition(annotationValue.$Le[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue.$Le[1], visitedNavigationPaths, pathVisitor));
    } else if (annotationValue.hasOwnProperty("$Path")) {
      return pathInModel(annotationValue.$Path, undefined, visitedNavigationPaths, pathVisitor);
    } else if (annotationValue.hasOwnProperty("$Apply")) {
      return getExpressionFromAnnotation({
        type: "Apply",
        Function: annotationValue.$Function,
        Apply: annotationValue.$Apply
      }, visitedNavigationPaths, undefined, pathVisitor);
    } else if (annotationValue.hasOwnProperty("$If")) {
      return getExpressionFromAnnotation({
        type: "If",
        If: annotationValue.$If
      }, visitedNavigationPaths, undefined, pathVisitor);
    } else if (annotationValue.hasOwnProperty("$EnumMember")) {
      return constant(resolveEnumValue(annotationValue.$EnumMember));
    }
    return constant(false);
  }

  /**
   * Process the {IfAnnotationExpressionValue} into an expression.
   *
   * @template T The target type
   * @param annotationValue An If expression returning the type T
   * @param visitedNavigationPaths The path from the root entity set
   * @param pathVisitor A function to modify the resulting path
   * @returns The equivalent ifElse expression
   */
  function annotationIfExpression(annotationValue) {
    let visitedNavigationPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let pathVisitor = arguments.length > 2 ? arguments[2] : undefined;
    return ifElse(parseAnnotationCondition(annotationValue[0], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue[1], visitedNavigationPaths, pathVisitor), parseAnnotationCondition(annotationValue[2], visitedNavigationPaths, pathVisitor));
  }
  // This type is not recursively transformed from the metamodel content, as such we have some ugly things there
  _exports.annotationIfExpression = annotationIfExpression;
  function convertSubApplyParameters(applyParam) {
    let applyParamConverted = applyParam;
    if (applyParam.hasOwnProperty("$Path")) {
      applyParamConverted = {
        type: "Path",
        path: applyParam.$Path
      };
    } else if (applyParam.hasOwnProperty("$If")) {
      applyParamConverted = {
        type: "If",
        If: applyParam.$If
      };
    } else if (applyParam.hasOwnProperty("$Apply")) {
      applyParamConverted = {
        type: "Apply",
        Function: applyParam.$Function,
        Apply: applyParam.$Apply
      };
    }
    return applyParamConverted;
  }
  function annotationApplyExpression(applyExpression) {
    let visitedNavigationPaths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let pathVisitor = arguments.length > 2 ? arguments[2] : undefined;
    switch (applyExpression.Function) {
      case "odata.concat":
        return concat(...applyExpression.Apply.map(applyParam => {
          return getExpressionFromAnnotation(convertSubApplyParameters(applyParam), visitedNavigationPaths, undefined, pathVisitor);
        }));
      case "odata.uriEncode":
        const parameter = getExpressionFromAnnotation(convertSubApplyParameters(applyExpression.Apply[0]), visitedNavigationPaths, undefined, pathVisitor);
        // The second parameter for uriEncode is always a string since the target evaluation is against a formatValue call in ODataUtils which expect the target type as second parameter
        return fn("odata.uriEncode", [parameter, "Edm.String"], undefined, true);
      case "odata.fillUriTemplate":
        const template = applyExpression.Apply[0];
        const templateParams = applyExpression.Apply.slice(1);
        const targetObject = {};
        templateParams.forEach(applyParam => {
          targetObject[applyParam.$Name] = getExpressionFromAnnotation(convertSubApplyParameters(applyParam.$LabeledElement), visitedNavigationPaths, undefined, pathVisitor);
        });
        return fn("odata.fillUriTemplate", [template, targetObject], undefined, true);
    }
    return unresolvableExpression;
  }

  /**
   * Generic helper for the comparison operations (equal, notEqual, ...).
   *
   * @template T The target type
   * @param operator The operator to apply
   * @param leftOperand The operand on the left side of the operator
   * @param rightOperand The operand on the right side of the operator
   * @returns An expression representing the comparison
   */
  _exports.annotationApplyExpression = annotationApplyExpression;
  function comparison(operator, leftOperand, rightOperand) {
    const leftExpression = wrapPrimitive(leftOperand);
    const rightExpression = wrapPrimitive(rightOperand);
    if (hasUnresolvableExpression(leftExpression, rightExpression)) {
      return unresolvableExpression;
    }
    if (isConstant(leftExpression) && isConstant(rightExpression)) {
      switch (operator) {
        case "!==":
          return constant(leftExpression.value !== rightExpression.value);
        case "===":
          return constant(leftExpression.value === rightExpression.value);
        case "<":
          return constant(leftExpression.value < rightExpression.value);
        case "<=":
          return constant(leftExpression.value <= rightExpression.value);
        case ">":
          return constant(leftExpression.value > rightExpression.value);
        case ">=":
          return constant(leftExpression.value >= rightExpression.value);
      }
    } else {
      return {
        _type: "Comparison",
        operator: operator,
        operand1: leftExpression,
        operand2: rightExpression
      };
    }
  }
  function length(expression) {
    if (expression._type === "Unresolvable") {
      return expression;
    }
    return {
      _type: "Length",
      pathInModel: expression
    };
  }

  /**
   * Comparison: "equal" (===).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.length = length;
  function equal(leftOperand, rightOperand) {
    const leftExpression = wrapPrimitive(leftOperand);
    const rightExpression = wrapPrimitive(rightOperand);
    if (hasUnresolvableExpression(leftExpression, rightExpression)) {
      return unresolvableExpression;
    }
    if (_checkExpressionsAreEqual(leftExpression, rightExpression)) {
      return constant(true);
    }
    function reduce(left, right) {
      if (left._type === "Comparison" && isTrue(right)) {
        // compare(a, b) === true ~~> compare(a, b)
        return left;
      } else if (left._type === "Comparison" && isFalse(right)) {
        // compare(a, b) === false ~~> !compare(a, b)
        return not(left);
      } else if (left._type === "IfElse" && _checkExpressionsAreEqual(left.onTrue, right)) {
        // (if (x) { a } else { b }) === a ~~> x || (b === a)
        return or(left.condition, equal(left.onFalse, right));
      } else if (left._type === "IfElse" && _checkExpressionsAreEqual(left.onFalse, right)) {
        // (if (x) { a } else { b }) === b ~~> !x || (a === b)
        return or(not(left.condition), equal(left.onTrue, right));
      } else if (left._type === "IfElse" && isConstant(left.onTrue) && isConstant(left.onFalse) && isConstant(right) && !_checkExpressionsAreEqual(left.onTrue, right) && !_checkExpressionsAreEqual(left.onFalse, right)) {
        return constant(false);
      }
      return undefined;
    }

    // exploit symmetry: a === b <~> b === a
    const reduced = reduce(leftExpression, rightExpression) ?? reduce(rightExpression, leftExpression);
    return reduced ?? comparison("===", leftExpression, rightExpression);
  }

  /**
   * Comparison: "not equal" (!==).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.equal = equal;
  function notEqual(leftOperand, rightOperand) {
    return not(equal(leftOperand, rightOperand));
  }

  /**
   * Comparison: "greater or equal" (>=).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.notEqual = notEqual;
  function greaterOrEqual(leftOperand, rightOperand) {
    return comparison(">=", leftOperand, rightOperand);
  }

  /**
   * Comparison: "greater than" (>).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.greaterOrEqual = greaterOrEqual;
  function greaterThan(leftOperand, rightOperand) {
    return comparison(">", leftOperand, rightOperand);
  }

  /**
   * Comparison: "less or equal" (<=).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.greaterThan = greaterThan;
  function lessOrEqual(leftOperand, rightOperand) {
    return comparison("<=", leftOperand, rightOperand);
  }

  /**
   * Comparison: "less than" (<).
   *
   * @template T The target type
   * @param leftOperand The operand on the left side
   * @param rightOperand The operand on the right side of the comparison
   * @returns An expression representing the comparison
   */
  _exports.lessOrEqual = lessOrEqual;
  function lessThan(leftOperand, rightOperand) {
    return comparison("<", leftOperand, rightOperand);
  }

  /**
   * If-then-else expression.
   *
   * Evaluates to onTrue if the condition evaluates to true, else evaluates to onFalse.
   *
   * @template T The target type
   * @param condition The condition to evaluate
   * @param onTrue Expression result if the condition evaluates to true
   * @param onFalse Expression result if the condition evaluates to false
   * @returns The expression that represents this conditional check
   */
  _exports.lessThan = lessThan;
  function ifElse(condition, onTrue, onFalse) {
    let conditionExpression = wrapPrimitive(condition);
    let onTrueExpression = wrapPrimitive(onTrue);
    let onFalseExpression = wrapPrimitive(onFalse);
    if (hasUnresolvableExpression(conditionExpression, onTrueExpression, onFalseExpression)) {
      return unresolvableExpression;
    }
    // swap branches if the condition is a negation
    if (conditionExpression._type === "Not") {
      // ifElse(not(X), a, b) --> ifElse(X, b, a)
      [onTrueExpression, onFalseExpression] = [onFalseExpression, onTrueExpression];
      conditionExpression = not(conditionExpression);
    }

    // inline nested if-else expressions: onTrue branch
    // ifElse(X, ifElse(X, a, b), c) ==> ifElse(X, a, c)
    if (onTrueExpression._type === "IfElse" && _checkExpressionsAreEqual(conditionExpression, onTrueExpression.condition)) {
      onTrueExpression = onTrueExpression.onTrue;
    }

    // inline nested if-else expressions: onFalse branch
    // ifElse(X, a, ifElse(X, b, c)) ==> ifElse(X, a, c)
    if (onFalseExpression._type === "IfElse" && _checkExpressionsAreEqual(conditionExpression, onFalseExpression.condition)) {
      onFalseExpression = onFalseExpression.onFalse;
    }

    // (if true then a else b)  ~~> a
    // (if false then a else b) ~~> b
    if (isConstant(conditionExpression)) {
      return conditionExpression.value ? onTrueExpression : onFalseExpression;
    }

    // if (isConstantBoolean(onTrueExpression) || isConstantBoolean(onFalseExpression)) {
    // 	return or(and(condition, onTrueExpression as Expression<boolean>), and(not(condition), onFalseExpression as Expression<boolean>)) as Expression<T>
    // }

    // (if X then a else a) ~~> a
    if (_checkExpressionsAreEqual(onTrueExpression, onFalseExpression)) {
      return onTrueExpression;
    }

    // if X then a else false ~~> X && a
    if (isFalse(onFalseExpression)) {
      return and(conditionExpression, onTrueExpression);
    }

    // if X then a else true ~~> !X || a
    if (isTrue(onFalseExpression)) {
      return or(not(conditionExpression), onTrueExpression);
    }

    // if X then false else a ~~> !X && a
    if (isFalse(onTrueExpression)) {
      return and(not(conditionExpression), onFalseExpression);
    }

    // if X then true else a ~~> X || a
    if (isTrue(onTrueExpression)) {
      return or(conditionExpression, onFalseExpression);
    }
    if (isComplexTypeExpression(condition) || isComplexTypeExpression(onTrue) || isComplexTypeExpression(onFalse)) {
      let pathIdx = 0;
      const myIfElseExpression = formatResult([condition, onTrue, onFalse], "sap.fe.core.formatters.StandardFormatter#ifElse");
      const allParts = [];
      transformRecursively(myIfElseExpression, "PathInModel", constantPath => {
        allParts.push(constantPath);
        return pathInModel(`$${pathIdx++}`, "$");
      }, true);
      allParts.unshift(constant(JSON.stringify(myIfElseExpression)));
      return formatResult(allParts, "sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression", undefined, true);
    }
    return {
      _type: "IfElse",
      condition: conditionExpression,
      onTrue: onTrueExpression,
      onFalse: onFalseExpression
    };
  }

  /**
   * Checks whether the current expression has a reference to the default model (undefined).
   *
   * @param expression The expression to evaluate
   * @returns `true` if there is a reference to the default context
   */
  _exports.ifElse = ifElse;
  function hasReferenceToDefaultContext(expression) {
    switch (expression._type) {
      case "Constant":
      case "Formatter":
      case "ComplexType":
        return false;
      case "Set":
        return expression.operands.some(hasReferenceToDefaultContext);
      case "PathInModel":
        return expression.modelName === undefined;
      case "Comparison":
        return hasReferenceToDefaultContext(expression.operand1) || hasReferenceToDefaultContext(expression.operand2);
      case "IfElse":
        return hasReferenceToDefaultContext(expression.condition) || hasReferenceToDefaultContext(expression.onTrue) || hasReferenceToDefaultContext(expression.onFalse);
      case "Not":
      case "Truthy":
        return hasReferenceToDefaultContext(expression.operand);
      default:
        return false;
    }
  }
  /**
   * Calls a formatter function to process the parameters.
   * If requireContext is set to true and no context is passed a default context will be added automatically.
   *
   * @template T
   * @template U
   * @param parameters The list of parameter that should match the type and number of the formatter function
   * @param formatterFunction The function to call
   * @param [contextEntityType] If no parameter refers to the context then we use this information to add a reference to the keys from the entity type.
   * @param [ignoreComplexType] Whether to ignore the transgformation to the StandardFormatter or not
   * @returns The corresponding expression
   */
  function formatResult(parameters, formatterFunction, contextEntityType) {
    let ignoreComplexType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const parameterExpressions = parameters.map(wrapPrimitive);
    if (hasUnresolvableExpression(...parameterExpressions)) {
      return unresolvableExpression;
    }
    if (contextEntityType) {
      // Otherwise, if the context is required and no context is provided make sure to add the default binding
      if (!parameterExpressions.some(hasReferenceToDefaultContext)) {
        contextEntityType.keys.forEach(key => parameterExpressions.push(pathInModel(key.name, "")));
      }
    }
    let functionName = "";
    if (typeof formatterFunction === "string") {
      functionName = formatterFunction;
    } else {
      functionName = formatterFunction.__functionName;
    }
    // FormatterName can be of format sap.fe.core.xxx#methodName to have multiple formatter in one class
    const [formatterClass, formatterName] = functionName.split("#");

    // In some case we also cannot call directly a function because of too complex input, in that case we need to convert to a simpler function call
    if (!ignoreComplexType && (parameterExpressions.some(isComplexTypeExpression) || parameterExpressions.some(isConcatExpression))) {
      let pathIdx = 0;
      const myFormatExpression = formatResult(parameterExpressions, functionName, undefined, true);
      const allParts = [];
      transformRecursively(myFormatExpression, "PathInModel", constantPath => {
        allParts.push(constantPath);
        return pathInModel(`$${pathIdx++}`, "$");
      });
      allParts.unshift(constant(JSON.stringify(myFormatExpression)));
      return formatResult(allParts, "sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression", undefined, true);
    } else if (!!formatterName && formatterName.length > 0) {
      parameterExpressions.unshift(constant(formatterName));
    }
    return {
      _type: "Formatter",
      fn: formatterClass,
      parameters: parameterExpressions
    };
  }
  _exports.formatResult = formatResult;
  function setUpConstraints(targetMapping, property) {
    var _targetMapping$constr, _targetMapping$constr2, _targetMapping$constr3, _targetMapping$constr4, _property$annotations, _property$annotations2, _targetMapping$constr5, _property$annotations5, _property$annotations6, _property$annotations9, _property$annotations10, _targetMapping$constr6, _targetMapping$constr7;
    const constraints = {};
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr = targetMapping.constraints) !== null && _targetMapping$constr !== void 0 && _targetMapping$constr.$Scale && property.scale !== undefined) {
      constraints.scale = property.scale;
    }
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr2 = targetMapping.constraints) !== null && _targetMapping$constr2 !== void 0 && _targetMapping$constr2.$Precision && property.precision !== undefined) {
      constraints.precision = property.precision;
    }
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr3 = targetMapping.constraints) !== null && _targetMapping$constr3 !== void 0 && _targetMapping$constr3.$MaxLength && property.maxLength !== undefined) {
      constraints.maxLength = property.maxLength;
    }
    if (property.nullable === false) {
      constraints.nullable = false;
    }
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr4 = targetMapping.constraints) !== null && _targetMapping$constr4 !== void 0 && _targetMapping$constr4["@Org.OData.Validation.V1.Minimum/$Decimal"] && !isNaN((_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.Validation) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.Minimum)) {
      var _property$annotations3, _property$annotations4;
      constraints.minimum = `${(_property$annotations3 = property.annotations) === null || _property$annotations3 === void 0 ? void 0 : (_property$annotations4 = _property$annotations3.Validation) === null || _property$annotations4 === void 0 ? void 0 : _property$annotations4.Minimum}`;
    }
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr5 = targetMapping.constraints) !== null && _targetMapping$constr5 !== void 0 && _targetMapping$constr5["@Org.OData.Validation.V1.Maximum/$Decimal"] && !isNaN((_property$annotations5 = property.annotations) === null || _property$annotations5 === void 0 ? void 0 : (_property$annotations6 = _property$annotations5.Validation) === null || _property$annotations6 === void 0 ? void 0 : _property$annotations6.Maximum)) {
      var _property$annotations7, _property$annotations8;
      constraints.maximum = `${(_property$annotations7 = property.annotations) === null || _property$annotations7 === void 0 ? void 0 : (_property$annotations8 = _property$annotations7.Validation) === null || _property$annotations8 === void 0 ? void 0 : _property$annotations8.Maximum}`;
    }
    if ((_property$annotations9 = property.annotations) !== null && _property$annotations9 !== void 0 && (_property$annotations10 = _property$annotations9.Common) !== null && _property$annotations10 !== void 0 && _property$annotations10.IsDigitSequence && targetMapping.type === "sap.ui.model.odata.type.String" && targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr6 = targetMapping.constraints) !== null && _targetMapping$constr6 !== void 0 && _targetMapping$constr6["@com.sap.vocabularies.Common.v1.IsDigitSequence"]) {
      constraints.isDigitSequence = true;
    }
    if (targetMapping !== null && targetMapping !== void 0 && (_targetMapping$constr7 = targetMapping.constraints) !== null && _targetMapping$constr7 !== void 0 && _targetMapping$constr7.$V4) {
      constraints.V4 = true;
    }
    return constraints;
  }

  /**
   * Generates the binding expression for the property, and sets up the formatOptions and constraints.
   *
   * @param property The Property for which we are setting up the binding
   * @param propertyBindingExpression The BindingExpression of the property above. Serves as the basis to which information can be added
   * @param ignoreConstraints Ignore constraints of the property
   * @returns The binding expression for the property with formatOptions and constraints
   */
  _exports.setUpConstraints = setUpConstraints;
  function formatWithTypeInformation(property, propertyBindingExpression) {
    var _outExpression$type;
    let ignoreConstraints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const outExpression = propertyBindingExpression;
    if (property._type !== "Property" && property._type !== "ActionParameter") {
      return outExpression;
    }
    const targetMapping = EDM_TYPE_MAPPING[property.type];
    if (!targetMapping) {
      return outExpression;
    }
    if (!outExpression.formatOptions) {
      outExpression.formatOptions = {};
    }
    outExpression.constraints = {};
    outExpression.type = targetMapping.type;
    if (!ignoreConstraints) {
      outExpression.constraints = setUpConstraints(targetMapping, property);
    }
    if ((outExpression === null || outExpression === void 0 ? void 0 : (_outExpression$type = outExpression.type) === null || _outExpression$type === void 0 ? void 0 : _outExpression$type.indexOf("sap.ui.model.odata.type.Int")) === 0 && (outExpression === null || outExpression === void 0 ? void 0 : outExpression.type) !== "sap.ui.model.odata.type.Int64" || (outExpression === null || outExpression === void 0 ? void 0 : outExpression.type) === "sap.ui.model.odata.type.Double") {
      outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
        parseAsString: false
      });
    }
    if (outExpression.type === "sap.ui.model.odata.type.String" && isProperty(property)) {
      outExpression.formatOptions.parseKeepsEmptyString = true;
      const fiscalType = getFiscalType(property);
      if (fiscalType) {
        outExpression.formatOptions.fiscalType = fiscalType;
        outExpression.type = "sap.fe.core.type.FiscalDate";
      }
    }
    if (outExpression.type === "sap.ui.model.odata.type.Decimal" || (outExpression === null || outExpression === void 0 ? void 0 : outExpression.type) === "sap.ui.model.odata.type.Int64") {
      outExpression.formatOptions = Object.assign(outExpression.formatOptions, {
        emptyString: ""
      });
    }
    return outExpression;
  }
  _exports.formatWithTypeInformation = formatWithTypeInformation;
  const getFiscalType = function (property) {
    var _property$annotations11, _property$annotations12, _property$annotations13, _property$annotations14, _property$annotations15, _property$annotations16, _property$annotations17, _property$annotations18, _property$annotations19, _property$annotations20, _property$annotations21, _property$annotations22, _property$annotations23, _property$annotations24, _property$annotations25, _property$annotations26;
    if ((_property$annotations11 = property.annotations) !== null && _property$annotations11 !== void 0 && (_property$annotations12 = _property$annotations11.Common) !== null && _property$annotations12 !== void 0 && _property$annotations12.IsFiscalYear) {
      return "com.sap.vocabularies.Common.v1.IsFiscalYear";
    }
    if ((_property$annotations13 = property.annotations) !== null && _property$annotations13 !== void 0 && (_property$annotations14 = _property$annotations13.Common) !== null && _property$annotations14 !== void 0 && _property$annotations14.IsFiscalPeriod) {
      return "com.sap.vocabularies.Common.v1.IsFiscalPeriod";
    }
    if ((_property$annotations15 = property.annotations) !== null && _property$annotations15 !== void 0 && (_property$annotations16 = _property$annotations15.Common) !== null && _property$annotations16 !== void 0 && _property$annotations16.IsFiscalYearPeriod) {
      return "com.sap.vocabularies.Common.v1.IsFiscalYearPeriod";
    }
    if ((_property$annotations17 = property.annotations) !== null && _property$annotations17 !== void 0 && (_property$annotations18 = _property$annotations17.Common) !== null && _property$annotations18 !== void 0 && _property$annotations18.IsFiscalQuarter) {
      return "com.sap.vocabularies.Common.v1.IsFiscalQuarter";
    }
    if ((_property$annotations19 = property.annotations) !== null && _property$annotations19 !== void 0 && (_property$annotations20 = _property$annotations19.Common) !== null && _property$annotations20 !== void 0 && _property$annotations20.IsFiscalYearQuarter) {
      return "com.sap.vocabularies.Common.v1.IsFiscalYearQuarter";
    }
    if ((_property$annotations21 = property.annotations) !== null && _property$annotations21 !== void 0 && (_property$annotations22 = _property$annotations21.Common) !== null && _property$annotations22 !== void 0 && _property$annotations22.IsFiscalWeek) {
      return "com.sap.vocabularies.Common.v1.IsFiscalWeek";
    }
    if ((_property$annotations23 = property.annotations) !== null && _property$annotations23 !== void 0 && (_property$annotations24 = _property$annotations23.Common) !== null && _property$annotations24 !== void 0 && _property$annotations24.IsFiscalYearWeek) {
      return "com.sap.vocabularies.Common.v1.IsFiscalYearWeek";
    }
    if ((_property$annotations25 = property.annotations) !== null && _property$annotations25 !== void 0 && (_property$annotations26 = _property$annotations25.Common) !== null && _property$annotations26 !== void 0 && _property$annotations26.IsDayOfFiscalYear) {
      return "com.sap.vocabularies.Common.v1.IsDayOfFiscalYear";
    }
  };

  /**
   * Calls a complex type to process the parameters.
   * If requireContext is set to true and no context is passed, a default context will be added automatically.
   *
   * @template T
   * @template U
   * @param parameters The list of parameters that should match the type for the complex type=
   * @param type The complex type to use
   * @param [contextEntityType] The context entity type to consider
   * @param oFormatOptions
   * @returns The corresponding expression
   */
  _exports.getFiscalType = getFiscalType;
  function addTypeInformation(parameters, type, contextEntityType, oFormatOptions) {
    const parameterExpressions = parameters.map(wrapPrimitive);
    if (hasUnresolvableExpression(...parameterExpressions)) {
      return unresolvableExpression;
    }
    // If there is only one parameter and it is a constant and we don't expect the context then return the constant
    if (parameterExpressions.length === 1 && isConstant(parameterExpressions[0]) && !contextEntityType) {
      return parameterExpressions[0];
    } else if (contextEntityType) {
      // Otherwise, if the context is required and no context is provided make sure to add the default binding
      if (!parameterExpressions.some(hasReferenceToDefaultContext)) {
        contextEntityType.keys.forEach(key => parameterExpressions.push(pathInModel(key.name, "")));
      }
    }
    oFormatOptions = _getComplexTypeFormatOptionsFromFirstParam(parameters[0], oFormatOptions);
    if (type === "sap.ui.model.odata.type.Unit") {
      const uomPath = pathInModel("/##@@requestUnitsOfMeasure");
      uomPath.targetType = "any";
      uomPath.mode = "OneTime";
      parameterExpressions.push(uomPath);
    } else if (type === "sap.ui.model.odata.type.Currency") {
      const currencyPath = pathInModel("/##@@requestCurrencyCodes");
      currencyPath.targetType = "any";
      currencyPath.mode = "OneTime";
      parameterExpressions.push(currencyPath);
    }
    return {
      _type: "ComplexType",
      type: type,
      formatOptions: oFormatOptions || {},
      parameters: {},
      bindingParameters: parameterExpressions
    };
  }

  /**
   * Process the formatOptions for a complexType based on the first parameter.
   *
   * @param param The first parameter of the complex type
   * @param formatOptions Initial formatOptions
   * @returns The modified formatOptions
   */
  _exports.addTypeInformation = addTypeInformation;
  function _getComplexTypeFormatOptionsFromFirstParam(param, formatOptions) {
    var _param$type, _param$constraints;
    // if showMeasure is set to false we want to not parse as string to see the 0
    // we do that also for all bindings because otherwise the mdc Field isn't editable
    if (!(formatOptions && formatOptions.showNumber === false) && ((param === null || param === void 0 ? void 0 : (_param$type = param.type) === null || _param$type === void 0 ? void 0 : _param$type.indexOf("sap.ui.model.odata.type.Int")) === 0 || (param === null || param === void 0 ? void 0 : param.type) === "sap.ui.model.odata.type.Decimal" || (param === null || param === void 0 ? void 0 : param.type) === "sap.ui.model.odata.type.Double")) {
      if ((param === null || param === void 0 ? void 0 : param.type) === "sap.ui.model.odata.type.Int64" || (param === null || param === void 0 ? void 0 : param.type) === "sap.ui.model.odata.type.Decimal") {
        var _formatOptions;
        //sap.ui.model.odata.type.Int64 do not support parseAsString false
        formatOptions = ((_formatOptions = formatOptions) === null || _formatOptions === void 0 ? void 0 : _formatOptions.showMeasure) === false ? {
          emptyString: "",
          showMeasure: false
        } : {
          emptyString: ""
        };
      } else {
        var _formatOptions2;
        formatOptions = ((_formatOptions2 = formatOptions) === null || _formatOptions2 === void 0 ? void 0 : _formatOptions2.showMeasure) === false ? {
          parseAsString: false,
          showMeasure: false
        } : {
          parseAsString: false
        };
      }
    }
    if ((param === null || param === void 0 ? void 0 : (_param$constraints = param.constraints) === null || _param$constraints === void 0 ? void 0 : _param$constraints.nullable) !== false) {
      var _formatOptions3;
      (_formatOptions3 = formatOptions) === null || _formatOptions3 === void 0 ? true : delete _formatOptions3.emptyString;
    }
    return formatOptions;
  }
  /**
   * Function call, optionally with arguments.
   *
   * @param func Function name or reference to function
   * @param parameters Arguments
   * @param on Object to call the function on
   * @returns Expression representing the function call (not the result of the function call!)
   */
  function fn(func, parameters, on) {
    let isFormattingFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const functionName = typeof func === "string" ? func : func.__functionName;
    return {
      _type: "Function",
      obj: on !== undefined ? wrapPrimitive(on) : undefined,
      fn: functionName,
      isFormattingFn: isFormattingFn,
      parameters: parameters.map(wrapPrimitive)
    };
  }

  /**
   * Shortcut function to determine if a binding value is null, undefined or empty.
   *
   * @param expression
   * @returns A Boolean expression evaluating the fact that the current element is empty
   */
  _exports.fn = fn;
  function isEmpty(expression) {
    const aBindings = [];
    transformRecursively(expression, "PathInModel", expr => {
      aBindings.push(or(equal(expr, ""), equal(expr, undefined), equal(expr, null)));
      return expr;
    });
    return and(...aBindings);
  }
  _exports.isEmpty = isEmpty;
  function concat() {
    for (var _len4 = arguments.length, inExpressions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      inExpressions[_key4] = arguments[_key4];
    }
    const expressions = inExpressions.map(wrapPrimitive);
    if (hasUnresolvableExpression(...expressions)) {
      return unresolvableExpression;
    }
    if (expressions.every(isConstant)) {
      return constant(expressions.reduce((concatenated, value) => {
        if (value.value !== undefined) {
          return concatenated + value.value.toString();
        }
        return concatenated;
      }, ""));
    } else if (expressions.some(isComplexTypeExpression)) {
      let pathIdx = 0;
      const myConcatExpression = formatResult(expressions, "sap.fe.core.formatters.StandardFormatter#concat", undefined, true);
      const allParts = [];
      transformRecursively(myConcatExpression, "PathInModel", constantPath => {
        allParts.push(constantPath);
        return pathInModel(`$${pathIdx++}`, "$");
      });
      allParts.unshift(constant(JSON.stringify(myConcatExpression)));
      return formatResult(allParts, "sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression", undefined, true);
    }
    return {
      _type: "Concat",
      expressions: expressions
    };
  }
  _exports.concat = concat;
  function transformRecursively(inExpression, expressionType, transformFunction) {
    let includeAllExpression = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let expression = inExpression;
    switch (expression._type) {
      case "Function":
      case "Formatter":
        expression.parameters = expression.parameters.map(parameter => transformRecursively(parameter, expressionType, transformFunction, includeAllExpression));
        break;
      case "Concat":
        expression.expressions = expression.expressions.map(subExpression => transformRecursively(subExpression, expressionType, transformFunction, includeAllExpression));
        expression = concat(...expression.expressions);
        break;
      case "ComplexType":
        expression.bindingParameters = expression.bindingParameters.map(bindingParameter => transformRecursively(bindingParameter, expressionType, transformFunction, includeAllExpression));
        break;
      case "IfElse":
        const onTrue = transformRecursively(expression.onTrue, expressionType, transformFunction, includeAllExpression);
        const onFalse = transformRecursively(expression.onFalse, expressionType, transformFunction, includeAllExpression);
        let condition = expression.condition;
        if (includeAllExpression) {
          condition = transformRecursively(expression.condition, expressionType, transformFunction, includeAllExpression);
        }
        expression = ifElse(condition, onTrue, onFalse);
        break;
      case "Not":
        if (includeAllExpression) {
          const operand = transformRecursively(expression.operand, expressionType, transformFunction, includeAllExpression);
          expression = not(operand);
        }
        break;
      case "Truthy":
        break;
      case "Set":
        if (includeAllExpression) {
          const operands = expression.operands.map(operand => transformRecursively(operand, expressionType, transformFunction, includeAllExpression));
          expression = expression.operator === "||" ? or(...operands) : and(...operands);
        }
        break;
      case "Comparison":
        if (includeAllExpression) {
          const operand1 = transformRecursively(expression.operand1, expressionType, transformFunction, includeAllExpression);
          const operand2 = transformRecursively(expression.operand2, expressionType, transformFunction, includeAllExpression);
          expression = comparison(expression.operator, operand1, operand2);
        }
        break;
      case "Constant":
        const constantValue = expression.value;
        if (typeof constantValue === "object" && constantValue) {
          Object.keys(constantValue).forEach(key => {
            constantValue[key] = transformRecursively(constantValue[key], expressionType, transformFunction, includeAllExpression);
          });
        }
        break;
      case "Ref":
      case "Length":
      case "PathInModel":
      case "EmbeddedBinding":
      case "EmbeddedExpressionBinding":
      case "Unresolvable":
        // Do nothing
        break;
    }
    if (expressionType === expression._type) {
      expression = transformFunction(inExpression);
    }
    return expression;
  }
  _exports.transformRecursively = transformRecursively;
  const needParenthesis = function (expr) {
    return !isConstant(expr) && !isPathInModelExpression(expr) && isBindingToolkitExpression(expr) && expr._type !== "IfElse" && expr._type !== "Function";
  };

  /**
   * Compiles a constant object to a string.
   *
   * @param expr
   * @param isNullable
   * @returns The compiled string
   */
  function compileConstantObject(expr) {
    let isNullable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (isNullable && Object.keys(expr.value).length === 0) {
      return "";
    }
    const objects = expr.value;
    const properties = [];
    Object.keys(objects).forEach(key => {
      const value = objects[key];
      const childResult = compileExpression(value, true, false, isNullable);
      if (childResult && childResult.length > 0) {
        properties.push(`${key}: ${childResult}`);
      }
    });
    return `{${properties.join(", ")}}`;
  }

  /**
   * Compiles a Constant Binding Expression.
   *
   * @param expr
   * @param embeddedInBinding
   * @param isNullable
   * @param doNotStringify
   * @returns The compiled string
   */

  function compileConstant(expr, embeddedInBinding) {
    let isNullable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let doNotStringify = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    if (expr.value === null) {
      return doNotStringify ? null : "null";
    }
    if (expr.value === undefined) {
      return doNotStringify ? undefined : "undefined";
    }
    if (typeof expr.value === "object") {
      if (Array.isArray(expr.value)) {
        const entries = expr.value.map(expression => compileExpression(expression, true));
        return `[${entries.join(", ")}]`;
      } else {
        return compileConstantObject(expr, isNullable);
      }
    }
    if (embeddedInBinding) {
      switch (typeof expr.value) {
        case "number":
        case "bigint":
        case "boolean":
          return expr.value.toString();
        case "string":
          return `'${escapeXmlAttribute(expr.value.toString())}'`;
        default:
          return "";
      }
    } else {
      return doNotStringify ? expr.value : expr.value.toString();
    }
  }

  /**
   * Generates the binding string for a Binding expression.
   *
   * @param expressionForBinding The expression to compile
   * @param embeddedInBinding Whether the expression to compile is embedded into another expression
   * @param embeddedSeparator The binding value evaluator ($ or % depending on whether we want to force the type or not)
   * @returns The corresponding expression binding
   */
  _exports.compileConstant = compileConstant;
  function compilePathInModelExpression(expressionForBinding, embeddedInBinding, embeddedSeparator) {
    if (expressionForBinding.type || expressionForBinding.parameters || expressionForBinding.targetType || expressionForBinding.formatOptions || expressionForBinding.constraints) {
      // This is now a complex binding definition, let's prepare for it
      const complexBindingDefinition = {
        path: compilePathInModel(expressionForBinding),
        type: expressionForBinding.type,
        targetType: expressionForBinding.targetType,
        parameters: expressionForBinding.parameters,
        formatOptions: expressionForBinding.formatOptions,
        constraints: expressionForBinding.constraints
      };
      const outBinding = compileExpression(complexBindingDefinition, false, false, true);
      if (embeddedInBinding) {
        return `${embeddedSeparator}${outBinding}`;
      }
      return outBinding;
    } else if (embeddedInBinding) {
      return `${embeddedSeparator}{${compilePathInModel(expressionForBinding)}}`;
    } else {
      return `{${compilePathInModel(expressionForBinding)}}`;
    }
  }
  function compileComplexTypeExpression(expression) {
    if (expression.bindingParameters.length === 1) {
      return `{${compilePathParameter(expression.bindingParameters[0], true)}, type: '${expression.type}'}`;
    }
    let outputEnd = `], type: '${expression.type}'`;
    if (hasElements(expression.formatOptions)) {
      outputEnd += `, formatOptions: ${compileExpression(expression.formatOptions)}`;
    }
    if (hasElements(expression.parameters)) {
      outputEnd += `, parameters: ${compileExpression(expression.parameters)}`;
    }
    outputEnd += "}";
    return `{mode:'TwoWay', parts:[${expression.bindingParameters.map(param => compilePathParameter(param)).join(",")}${outputEnd}`;
  }

  /**
   * Wrap the compiled binding string as required depending on its context.
   *
   * @param expression The compiled expression
   * @param embeddedInBinding True if the compiled expression is to be embedded in a binding
   * @param parenthesisRequired True if the embedded binding needs to be wrapped in parethesis so that it is evaluated as one
   * @returns Finalized compiled expression
   */
  function wrapBindingExpression(expression, embeddedInBinding) {
    let parenthesisRequired = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (embeddedInBinding) {
      if (parenthesisRequired) {
        return `(${expression})`;
      } else {
        return expression;
      }
    } else {
      return `{= ${expression}}`;
    }
  }

  /**
   * Compile an expression into an expression binding.
   *
   * @template T The target type
   * @param expression The expression to compile
   * @param embeddedInBinding Whether the expression to compile is embedded into another expression
   * @param keepTargetType Keep the target type of the embedded bindings instead of casting them to any
   * @param isNullable Whether binding expression can resolve to empty string or not
   * @returns The corresponding expression binding
   */
  _exports.wrapBindingExpression = wrapBindingExpression;
  function compileExpression(expression) {
    let embeddedInBinding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let keepTargetType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let isNullable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    const expr = wrapPrimitive(expression);
    const embeddedSeparator = keepTargetType ? "$" : "%";
    switch (expr._type) {
      case "Unresolvable":
        return undefined;
      case "Constant":
        return compileConstant(expr, embeddedInBinding, isNullable);
      case "Ref":
        return expr.ref || "null";
      case "Function":
        let hasEmbeddedFunctionCallOrBinding = false;
        if (expr.isFormattingFn) {
          transformRecursively(expr, "Function", subFn => {
            if (subFn !== expr && subFn.obj === undefined) {
              hasEmbeddedFunctionCallOrBinding = true;
            }
            return subFn;
          }, true);
          transformRecursively(expr, "Constant", subFn => {
            if (subFn !== expr && typeof subFn.value === "object") {
              transformRecursively(subFn, "PathInModel", subSubFn => {
                hasEmbeddedFunctionCallOrBinding = true;
                return subSubFn;
              });
            }
            return subFn;
          }, true);
        }
        const argumentString = `${expr.parameters.map(arg => compileExpression(arg, true)).join(", ")}`;
        let fnCall = expr.obj === undefined ? `${expr.fn}(${argumentString})` : `${compileExpression(expr.obj, true)}.${expr.fn}(${argumentString})`;
        if (!embeddedInBinding && hasEmbeddedFunctionCallOrBinding) {
          fnCall = `{= ${fnCall}}`;
        }
        return fnCall;
      case "EmbeddedExpressionBinding":
        return embeddedInBinding ? `(${expr.value.substring(2, expr.value.length - 1)})` : `${expr.value}`;
      case "EmbeddedBinding":
        return embeddedInBinding ? `${embeddedSeparator}${expr.value}` : `${expr.value}`;
      case "PathInModel":
        return compilePathInModelExpression(expr, embeddedInBinding, embeddedSeparator);
      case "Comparison":
        const comparisonExpression = compileComparisonExpression(expr);
        return wrapBindingExpression(comparisonExpression, embeddedInBinding);
      case "IfElse":
        const ifElseExpression = `${compileExpression(expr.condition, true)} ? ${compileExpression(expr.onTrue, true, keepTargetType)} : ${compileExpression(expr.onFalse, true, keepTargetType)}`;
        return wrapBindingExpression(ifElseExpression, embeddedInBinding, true);
      case "Set":
        const setExpression = expr.operands.map(operand => compileExpression(operand, true)).join(` ${expr.operator} `);
        return wrapBindingExpression(setExpression, embeddedInBinding, true);
      case "Concat":
        const concatExpression = expr.expressions.map(nestedExpression => compileExpression(nestedExpression, true, true)).join(" + ");
        return wrapBindingExpression(concatExpression, embeddedInBinding);
      case "Length":
        const lengthExpression = `${compileExpression(expr.pathInModel, true)}.length`;
        return wrapBindingExpression(lengthExpression, embeddedInBinding);
      case "Not":
        const notExpression = `!${compileExpression(expr.operand, true)}`;
        return wrapBindingExpression(notExpression, embeddedInBinding);
      case "Truthy":
        const truthyExpression = `!!${compileExpression(expr.operand, true)}`;
        return wrapBindingExpression(truthyExpression, embeddedInBinding);
      case "Formatter":
        const formatterExpression = compileFormatterExpression(expr);
        return embeddedInBinding ? `$${formatterExpression}` : formatterExpression;
      case "ComplexType":
        const complexTypeExpression = compileComplexTypeExpression(expr);
        return embeddedInBinding ? `$${complexTypeExpression}` : complexTypeExpression;
      default:
        return "";
    }
  }

  /**
   * Compile a comparison expression.
   *
   * @param expression The comparison expression.
   * @returns The compiled expression. Needs wrapping before it can be used as an expression binding.
   */
  _exports.compileExpression = compileExpression;
  function compileComparisonExpression(expression) {
    function compileOperand(operand) {
      const compiledOperand = compileExpression(operand, true) ?? "undefined";
      return wrapBindingExpression(compiledOperand, true, needParenthesis(operand));
    }
    return `${compileOperand(expression.operand1)} ${expression.operator} ${compileOperand(expression.operand2)}`;
  }

  /**
   * Compile a formatter expression.
   *
   * @param expression The formatter expression.
   * @returns The compiled expression.
   */
  function compileFormatterExpression(expression) {
    if (expression.parameters.length === 1) {
      return `{${compilePathParameter(expression.parameters[0], true)}, formatter: '${expression.fn}'}`;
    } else {
      const parts = expression.parameters.map(param => {
        if (param._type === "ComplexType") {
          return compileComplexTypeExpression(param);
        } else {
          return compilePathParameter(param);
        }
      });
      return `{parts: [${parts.join(", ")}], formatter: '${expression.fn}'}`;
    }
  }

  /**
   * Compile the path parameter of a formatter call.
   *
   * @param expression The binding part to evaluate
   * @param singlePath Whether there is one or multiple path to consider
   * @returns The string snippet to include in the overall binding definition
   */
  function compilePathParameter(expression) {
    let singlePath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let outValue = "";
    if (expression._type === "Constant") {
      if (expression.value === undefined) {
        // Special case otherwise the JSTokenizer complains about incorrect content
        outValue = `value: 'undefined'`;
      } else {
        outValue = `value: ${compileConstant(expression, true)}`;
      }
    } else if (expression._type === "PathInModel") {
      outValue = `path: '${compilePathInModel(expression)}'`;
      outValue += expression.type ? `, type: '${expression.type}'` : `, targetType: 'any'`;
      if (hasElements(expression.mode)) {
        outValue += `, mode: '${compileExpression(expression.mode)}'`;
      }
      if (hasElements(expression.constraints)) {
        outValue += `, constraints: ${compileExpression(expression.constraints)}`;
      }
      if (hasElements(expression.formatOptions)) {
        outValue += `, formatOptions: ${compileExpression(expression.formatOptions)}`;
      }
      if (hasElements(expression.parameters)) {
        outValue += `, parameters: ${compileExpression(expression.parameters)}`;
      }
    } else {
      return "";
    }
    return singlePath ? outValue : `{${outValue}}`;
  }
  function hasElements(obj) {
    return obj && Object.keys(obj).length > 0;
  }

  /**
   * Compile a binding expression path.
   *
   * @param expression The expression to compile.
   * @returns The compiled path.
   */
  function compilePathInModel(expression) {
    return `${expression.modelName ? `${expression.modelName}>` : ""}${expression.path}`;
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/BindingToolkit", ["sap/fe/core/helpers/TypeGuards","./AnnotationEnum"],function(e,n){"use strict";var t={};var r=n.resolveEnumValue;var a=e.isProperty;const o={"Edm.Boolean":{type:"sap.ui.model.odata.type.Boolean"},"Edm.Byte":{type:"sap.ui.model.odata.type.Byte"},"Edm.Date":{type:"sap.ui.model.odata.type.Date"},"Edm.DateTimeOffset":{constraints:{$Precision:"precision",$V4:"V4"},type:"sap.ui.model.odata.type.DateTimeOffset"},"Edm.Decimal":{constraints:{"@Org.OData.Validation.V1.Minimum/$Decimal":"minimum","@Org.OData.Validation.V1.Minimum@Org.OData.Validation.V1.Exclusive":"minimumExclusive","@Org.OData.Validation.V1.Maximum/$Decimal":"maximum","@Org.OData.Validation.V1.Maximum@Org.OData.Validation.V1.Exclusive":"maximumExclusive",$Precision:"precision",$Scale:"scale"},type:"sap.ui.model.odata.type.Decimal"},"Edm.Double":{type:"sap.ui.model.odata.type.Double"},"Edm.Guid":{type:"sap.ui.model.odata.type.Guid"},"Edm.Int16":{type:"sap.ui.model.odata.type.Int16"},"Edm.Int32":{type:"sap.ui.model.odata.type.Int32"},"Edm.Int64":{type:"sap.ui.model.odata.type.Int64"},"Edm.SByte":{type:"sap.ui.model.odata.type.SByte"},"Edm.Single":{type:"sap.ui.model.odata.type.Single"},"Edm.Stream":{type:"sap.ui.model.odata.type.Stream"},"Edm.Binary":{type:"sap.ui.model.odata.type.Stream"},"Edm.String":{constraints:{"@com.sap.vocabularies.Common.v1.IsDigitSequence":"isDigitSequence",$MaxLength:"maxLength",$Nullable:"nullable"},type:"sap.ui.model.odata.type.String"},"Edm.TimeOfDay":{constraints:{$Precision:"precision"},type:"sap.ui.model.odata.type.TimeOfDay"}};t.EDM_TYPE_MAPPING=o;const i={_type:"Unresolvable"};t.unresolvableExpression=i;function s(e){return e.replace(/'/g,"\\'")}function u(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++){n[t]=arguments[t]}return n.find(e=>e._type==="Unresolvable")!==undefined}t.hasUnresolvableExpression=u;function l(e,n){if(e._type!==n._type){return false}switch(e._type){case"Unresolvable":return false;case"Constant":case"EmbeddedBinding":case"EmbeddedExpressionBinding":return e.value===n.value;case"Not":return l(e.operand,n.operand);case"Truthy":return l(e.operand,n.operand);case"Set":return e.operator===n.operator&&e.operands.length===n.operands.length&&e.operands.every(e=>n.operands.some(n=>l(e,n)));case"IfElse":return l(e.condition,n.condition)&&l(e.onTrue,n.onTrue)&&l(e.onFalse,n.onFalse);case"Comparison":return e.operator===n.operator&&l(e.operand1,n.operand1)&&l(e.operand2,n.operand2);case"Concat":const t=e.expressions;const r=n.expressions;if(t.length!==r.length){return false}return t.every((e,n)=>l(e,r[n]));case"Length":return l(e.pathInModel,n.pathInModel);case"PathInModel":return e.modelName===n.modelName&&e.path===n.path&&e.targetEntitySet===n.targetEntitySet;case"Formatter":return e.fn===n.fn&&e.parameters.length===n.parameters.length&&e.parameters.every((e,t)=>l(n.parameters[t],e));case"ComplexType":return e.type===n.type&&e.bindingParameters.length===n.bindingParameters.length&&e.bindingParameters.every((e,t)=>l(n.bindingParameters[t],e));case"Function":const a=n;if(e.obj===undefined||a.obj===undefined){return e.obj===a}return e.fn===a.fn&&l(e.obj,a.obj)&&e.parameters.length===a.parameters.length&&e.parameters.every((e,n)=>l(a.parameters[n],e));case"Ref":return e.ref===n.ref}return false}t._checkExpressionsAreEqual=l;function d(e){return e.operands.reduce((n,t)=>{const r=t._type==="Set"&&t.operator===e.operator?t.operands:[t];r.forEach(e=>{if(n.operands.every(n=>!l(n,e))){n.operands.push(e)}});return n},{_type:"Set",operator:e.operator,operands:[]})}function p(e){const n=e.map(m);return e.some((e,t)=>{for(let r=t+1;r<n.length;r++){if(l(e,n[r])){return true}}return false})}function f(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++){n[t]=arguments[t]}const r=d({_type:"Set",operator:"&&",operands:n.map(E)}).operands;if(u(...r)){return i}let a=false;const o=r.filter(e=>{if(x(e)){a=true}return!I(e)});if(a){return g(false)}else if(o.length===0){const e=r.reduce((e,n)=>e&&_(n),true);return g(e)}else if(o.length===1){return o[0]}else if(p(o)){return g(false)}else{return{_type:"Set",operator:"&&",operands:o}}}t.and=f;function c(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++){n[t]=arguments[t]}const r=d({_type:"Set",operator:"||",operands:n.map(E)}).operands;if(u(...r)){return i}let a=false;const o=r.filter(e=>{if(_(e)){a=true}return!I(e)||e.value});if(a){return g(true)}else if(o.length===0){const e=r.reduce((e,n)=>e&&_(n),true);return g(e)}else if(o.length===1){return o[0]}else if(p(o)){return g(true)}else{return{_type:"Set",operator:"||",operands:o}}}t.or=c;function m(e){e=E(e);if(u(e)){return i}else if(I(e)){return g(!e.value)}else if(typeof e==="object"&&e._type==="Set"&&e.operator==="||"&&e.operands.every(e=>I(e)||S(e))){return f(...e.operands.map(e=>m(e)))}else if(typeof e==="object"&&e._type==="Set"&&e.operator==="&&"&&e.operands.every(e=>I(e)||S(e))){return c(...e.operands.map(e=>m(e)))}else if(S(e)){switch(e.operator){case"!==":return{...e,operator:"==="};case"<":return{...e,operator:">="};case"<=":return{...e,operator:">"};case"===":return{...e,operator:"!=="};case">":return{...e,operator:"<="};case">=":return{...e,operator:"<"}}}else if(e._type==="Not"){return e.operand}return{_type:"Not",operand:e}}t.not=m;function y(e){if(I(e)){return g(!!e.value)}else{return{_type:"Truthy",operand:e}}}t.isTruthy=y;function v(e,n){let t=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let r=arguments.length>3?arguments[3]:undefined;return h(e,n,t,r)}t.bindingExpression=v;function h(e,n){let t=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];let r=arguments.length>3?arguments[3]:undefined;if(e===undefined){return i}let a;if(r){a=r(e);if(a===undefined){return i}}else{const n=t.concat();n.push(e);a=n.join("/")}return{_type:"PathInModel",modelName:n,path:a}}t.pathInModel=h;function g(e){let n;if(typeof e==="object"&&e!==null&&e!==undefined){if(Array.isArray(e)){n=e.map(E)}else if(N(e)){n=e.valueOf()}else{n=Object.entries(e).reduce((e,n)=>{let[t,r]=n;const a=E(r);if(a._type!=="Constant"||a.value!==undefined){e[t]=a}return e},{})}}else{n=e}return{_type:"Constant",value:n}}t.constant=g;function $(e,n){if(e!==undefined&&typeof e==="string"&&e.startsWith("{")){const n=/^{(.*)>(.+)}$/;const t=n.exec(e);if(e.startsWith("{=")){return{_type:"EmbeddedExpressionBinding",value:e}}else if(t){return h(t[2]||"",t[1]||undefined)}else{return{_type:"EmbeddedBinding",value:e}}}else if(n==="boolean"&&typeof e==="string"&&(e==="true"||e==="false")){return g(e==="true")}else if(n==="number"&&typeof e==="string"&&(!isNaN(Number(e))||e==="NaN")){return g(Number(e))}else{return g(e)}}t.resolveBindingString=$;function b(e){return{_type:"Ref",ref:e}}t.ref=b;function E(e){if(O(e)){return e}return g(e)}function O(e){return(e===null||e===void 0?void 0:e._type)!==undefined}t.isBindingToolkitExpression=O;function I(e){return typeof e!=="object"||e._type==="Constant"}t.isConstant=I;function _(e){return I(e)&&e.value===true}function x(e){return I(e)&&e.value===false}function C(e){return(e===null||e===void 0?void 0:e._type)==="PathInModel"}t.isPathInModelExpression=C;function P(e){return(e===null||e===void 0?void 0:e._type)==="ComplexType"}t.isComplexTypeExpression=P;function F(e){return(e===null||e===void 0?void 0:e._type)==="Concat"}function S(e){return e._type==="Comparison"}function T(e){const n=e;return(n===null||n===void 0?void 0:n._type)==="Constant"&&(n===null||n===void 0?void 0:n.value)===undefined}t.isUndefinedExpression=T;function N(e){switch(e.constructor.name){case"String":case"Number":case"Boolean":return true;default:return false}}function M(e){return typeof e==="object"&&!N(e)}function w(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let t=arguments.length>2?arguments[2]:undefined;let r=arguments.length>3?arguments[3]:undefined;return D(e,n,t,r)}t.annotationExpression=w;function D(e){var n;let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let r=arguments.length>2?arguments[2]:undefined;let a=arguments.length>3?arguments[3]:undefined;if(e===undefined){return E(r)}e=(n=e)===null||n===void 0?void 0:n.valueOf();if(!M(e)){return g(e)}switch(e.type){case"Path":return h(e.path,undefined,t,a);case"If":return j(e.If,t,a);case"Not":return m(A(e.Not,t,a));case"Eq":return q(A(e.Eq[0],t,a),A(e.Eq[1],t,a));case"Ne":return G(A(e.Ne[0],t,a),A(e.Ne[1],t,a));case"Gt":return Y(A(e.Gt[0],t,a),A(e.Gt[1],t,a));case"Ge":return U(A(e.Ge[0],t,a),A(e.Ge[1],t,a));case"Lt":return R(A(e.Lt[0],t,a),A(e.Lt[1],t,a));case"Le":return W(A(e.Le[0],t,a),A(e.Le[1],t,a));case"Or":return c(...e.Or.map(function(e){return A(e,t,a)}));case"And":return f(...e.And.map(function(e){return A(e,t,a)}));case"Apply":return L(e,t,a)}return i}t.getExpressionFromAnnotation=D;function A(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let t=arguments.length>2?arguments[2]:undefined;if(e===null||typeof e!=="object"){return g(e)}else if(e.hasOwnProperty("$Or")){return c(...e.$Or.map(function(e){return A(e,n,t)}))}else if(e.hasOwnProperty("$And")){return f(...e.$And.map(function(e){return A(e,n,t)}))}else if(e.hasOwnProperty("$Not")){return m(A(e.$Not,n,t))}else if(e.hasOwnProperty("$Eq")){return q(A(e.$Eq[0],n,t),A(e.$Eq[1],n,t))}else if(e.hasOwnProperty("$Ne")){return G(A(e.$Ne[0],n,t),A(e.$Ne[1],n,t))}else if(e.hasOwnProperty("$Gt")){return Y(A(e.$Gt[0],n,t),A(e.$Gt[1],n,t))}else if(e.hasOwnProperty("$Ge")){return U(A(e.$Ge[0],n,t),A(e.$Ge[1],n,t))}else if(e.hasOwnProperty("$Lt")){return R(A(e.$Lt[0],n,t),A(e.$Lt[1],n,t))}else if(e.hasOwnProperty("$Le")){return W(A(e.$Le[0],n,t),A(e.$Le[1],n,t))}else if(e.hasOwnProperty("$Path")){return h(e.$Path,undefined,n,t)}else if(e.hasOwnProperty("$Apply")){return D({type:"Apply",Function:e.$Function,Apply:e.$Apply},n,undefined,t)}else if(e.hasOwnProperty("$If")){return D({type:"If",If:e.$If},n,undefined,t)}else if(e.hasOwnProperty("$EnumMember")){return g(r(e.$EnumMember))}return g(false)}function j(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let t=arguments.length>2?arguments[2]:undefined;return Q(A(e[0],n,t),A(e[1],n,t),A(e[2],n,t))}t.annotationIfExpression=j;function V(e){let n=e;if(e.hasOwnProperty("$Path")){n={type:"Path",path:e.$Path}}else if(e.hasOwnProperty("$If")){n={type:"If",If:e.$If}}else if(e.hasOwnProperty("$Apply")){n={type:"Apply",Function:e.$Function,Apply:e.$Apply}}return n}function L(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];let t=arguments.length>2?arguments[2]:undefined;switch(e.Function){case"odata.concat":return re(...e.Apply.map(e=>D(V(e),n,undefined,t)));case"odata.uriEncode":const r=D(V(e.Apply[0]),n,undefined,t);return ne("odata.uriEncode",[r,"Edm.String"],undefined,true);case"odata.fillUriTemplate":const a=e.Apply[0];const o=e.Apply.slice(1);const i={};o.forEach(e=>{i[e.$Name]=D(V(e.$LabeledElement),n,undefined,t)});return ne("odata.fillUriTemplate",[a,i],undefined,true)}return i}t.annotationApplyExpression=L;function k(e,n,t){const r=E(n);const a=E(t);if(u(r,a)){return i}if(I(r)&&I(a)){switch(e){case"!==":return g(r.value!==a.value);case"===":return g(r.value===a.value);case"<":return g(r.value<a.value);case"<=":return g(r.value<=a.value);case">":return g(r.value>a.value);case">=":return g(r.value>=a.value)}}else{return{_type:"Comparison",operator:e,operand1:r,operand2:a}}}function B(e){if(e._type==="Unresolvable"){return e}return{_type:"Length",pathInModel:e}}t.length=B;function q(e,n){const t=E(e);const r=E(n);if(u(t,r)){return i}if(l(t,r)){return g(true)}function a(e,n){if(e._type==="Comparison"&&_(n)){return e}else if(e._type==="Comparison"&&x(n)){return m(e)}else if(e._type==="IfElse"&&l(e.onTrue,n)){return c(e.condition,q(e.onFalse,n))}else if(e._type==="IfElse"&&l(e.onFalse,n)){return c(m(e.condition),q(e.onTrue,n))}else if(e._type==="IfElse"&&I(e.onTrue)&&I(e.onFalse)&&I(n)&&!l(e.onTrue,n)&&!l(e.onFalse,n)){return g(false)}return undefined}const o=a(t,r)??a(r,t);return o??k("===",t,r)}t.equal=q;function G(e,n){return m(q(e,n))}t.notEqual=G;function U(e,n){return k(">=",e,n)}t.greaterOrEqual=U;function Y(e,n){return k(">",e,n)}t.greaterThan=Y;function W(e,n){return k("<=",e,n)}t.lessOrEqual=W;function R(e,n){return k("<",e,n)}t.lessThan=R;function Q(e,n,t){let r=E(e);let a=E(n);let o=E(t);if(u(r,a,o)){return i}if(r._type==="Not"){[a,o]=[o,a];r=m(r)}if(a._type==="IfElse"&&l(r,a.condition)){a=a.onTrue}if(o._type==="IfElse"&&l(r,o.condition)){o=o.onFalse}if(I(r)){return r.value?a:o}if(l(a,o)){return a}if(x(o)){return f(r,a)}if(_(o)){return c(m(r),a)}if(x(a)){return f(m(r),o)}if(_(a)){return c(r,o)}if(P(e)||P(n)||P(t)){let r=0;const a=K([e,n,t],"sap.fe.core.formatters.StandardFormatter#ifElse");const o=[];ae(a,"PathInModel",e=>{o.push(e);return h(`$${r++}`,"$")},true);o.unshift(g(JSON.stringify(a)));return K(o,"sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression",undefined,true)}return{_type:"IfElse",condition:r,onTrue:a,onFalse:o}}t.ifElse=Q;function J(e){switch(e._type){case"Constant":case"Formatter":case"ComplexType":return false;case"Set":return e.operands.some(J);case"PathInModel":return e.modelName===undefined;case"Comparison":return J(e.operand1)||J(e.operand2);case"IfElse":return J(e.condition)||J(e.onTrue)||J(e.onFalse);case"Not":case"Truthy":return J(e.operand);default:return false}}function K(e,n,t){let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const a=e.map(E);if(u(...a)){return i}if(t){if(!a.some(J)){t.keys.forEach(e=>a.push(h(e.name,"")))}}let o="";if(typeof n==="string"){o=n}else{o=n.__functionName}const[s,l]=o.split("#");if(!r&&(a.some(P)||a.some(F))){let e=0;const n=K(a,o,undefined,true);const t=[];ae(n,"PathInModel",n=>{t.push(n);return h(`$${e++}`,"$")});t.unshift(g(JSON.stringify(n)));return K(t,"sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression",undefined,true)}else if(!!l&&l.length>0){a.unshift(g(l))}return{_type:"Formatter",fn:s,parameters:a}}t.formatResult=K;function z(e,n){var t,r,a,o,i,s,u,l,d,p,f,c,m;const y={};if(e!==null&&e!==void 0&&(t=e.constraints)!==null&&t!==void 0&&t.$Scale&&n.scale!==undefined){y.scale=n.scale}if(e!==null&&e!==void 0&&(r=e.constraints)!==null&&r!==void 0&&r.$Precision&&n.precision!==undefined){y.precision=n.precision}if(e!==null&&e!==void 0&&(a=e.constraints)!==null&&a!==void 0&&a.$MaxLength&&n.maxLength!==undefined){y.maxLength=n.maxLength}if(n.nullable===false){y.nullable=false}if(e!==null&&e!==void 0&&(o=e.constraints)!==null&&o!==void 0&&o["@Org.OData.Validation.V1.Minimum/$Decimal"]&&!isNaN((i=n.annotations)===null||i===void 0?void 0:(s=i.Validation)===null||s===void 0?void 0:s.Minimum)){var v,h;y.minimum=`${(v=n.annotations)===null||v===void 0?void 0:(h=v.Validation)===null||h===void 0?void 0:h.Minimum}`}if(e!==null&&e!==void 0&&(u=e.constraints)!==null&&u!==void 0&&u["@Org.OData.Validation.V1.Maximum/$Decimal"]&&!isNaN((l=n.annotations)===null||l===void 0?void 0:(d=l.Validation)===null||d===void 0?void 0:d.Maximum)){var g,$;y.maximum=`${(g=n.annotations)===null||g===void 0?void 0:($=g.Validation)===null||$===void 0?void 0:$.Maximum}`}if((p=n.annotations)!==null&&p!==void 0&&(f=p.Common)!==null&&f!==void 0&&f.IsDigitSequence&&e.type==="sap.ui.model.odata.type.String"&&e!==null&&e!==void 0&&(c=e.constraints)!==null&&c!==void 0&&c["@com.sap.vocabularies.Common.v1.IsDigitSequence"]){y.isDigitSequence=true}if(e!==null&&e!==void 0&&(m=e.constraints)!==null&&m!==void 0&&m.$V4){y.V4=true}return y}t.setUpConstraints=z;function H(e,n){var t;let r=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const i=n;if(e._type!=="Property"&&e._type!=="ActionParameter"){return i}const s=o[e.type];if(!s){return i}if(!i.formatOptions){i.formatOptions={}}i.constraints={};i.type=s.type;if(!r){i.constraints=z(s,e)}if((i===null||i===void 0?void 0:(t=i.type)===null||t===void 0?void 0:t.indexOf("sap.ui.model.odata.type.Int"))===0&&(i===null||i===void 0?void 0:i.type)!=="sap.ui.model.odata.type.Int64"||(i===null||i===void 0?void 0:i.type)==="sap.ui.model.odata.type.Double"){i.formatOptions=Object.assign(i.formatOptions,{parseAsString:false})}if(i.type==="sap.ui.model.odata.type.String"&&a(e)){i.formatOptions.parseKeepsEmptyString=true;const n=X(e);if(n){i.formatOptions.fiscalType=n;i.type="sap.fe.core.type.FiscalDate"}}if(i.type==="sap.ui.model.odata.type.Decimal"||(i===null||i===void 0?void 0:i.type)==="sap.ui.model.odata.type.Int64"){i.formatOptions=Object.assign(i.formatOptions,{emptyString:""})}return i}t.formatWithTypeInformation=H;const X=function(e){var n,t,r,a,o,i,s,u,l,d,p,f,c,m,y,v;if((n=e.annotations)!==null&&n!==void 0&&(t=n.Common)!==null&&t!==void 0&&t.IsFiscalYear){return"com.sap.vocabularies.Common.v1.IsFiscalYear"}if((r=e.annotations)!==null&&r!==void 0&&(a=r.Common)!==null&&a!==void 0&&a.IsFiscalPeriod){return"com.sap.vocabularies.Common.v1.IsFiscalPeriod"}if((o=e.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&i.IsFiscalYearPeriod){return"com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"}if((s=e.annotations)!==null&&s!==void 0&&(u=s.Common)!==null&&u!==void 0&&u.IsFiscalQuarter){return"com.sap.vocabularies.Common.v1.IsFiscalQuarter"}if((l=e.annotations)!==null&&l!==void 0&&(d=l.Common)!==null&&d!==void 0&&d.IsFiscalYearQuarter){return"com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"}if((p=e.annotations)!==null&&p!==void 0&&(f=p.Common)!==null&&f!==void 0&&f.IsFiscalWeek){return"com.sap.vocabularies.Common.v1.IsFiscalWeek"}if((c=e.annotations)!==null&&c!==void 0&&(m=c.Common)!==null&&m!==void 0&&m.IsFiscalYearWeek){return"com.sap.vocabularies.Common.v1.IsFiscalYearWeek"}if((y=e.annotations)!==null&&y!==void 0&&(v=y.Common)!==null&&v!==void 0&&v.IsDayOfFiscalYear){return"com.sap.vocabularies.Common.v1.IsDayOfFiscalYear"}};t.getFiscalType=X;function Z(e,n,t,r){const a=e.map(E);if(u(...a)){return i}if(a.length===1&&I(a[0])&&!t){return a[0]}else if(t){if(!a.some(J)){t.keys.forEach(e=>a.push(h(e.name,"")))}}r=ee(e[0],r);if(n==="sap.ui.model.odata.type.Unit"){const e=h("/##@@requestUnitsOfMeasure");e.targetType="any";e.mode="OneTime";a.push(e)}else if(n==="sap.ui.model.odata.type.Currency"){const e=h("/##@@requestCurrencyCodes");e.targetType="any";e.mode="OneTime";a.push(e)}return{_type:"ComplexType",type:n,formatOptions:r||{},parameters:{},bindingParameters:a}}t.addTypeInformation=Z;function ee(e,n){var t,r;if(!(n&&n.showNumber===false)&&((e===null||e===void 0?void 0:(t=e.type)===null||t===void 0?void 0:t.indexOf("sap.ui.model.odata.type.Int"))===0||(e===null||e===void 0?void 0:e.type)==="sap.ui.model.odata.type.Decimal"||(e===null||e===void 0?void 0:e.type)==="sap.ui.model.odata.type.Double")){if((e===null||e===void 0?void 0:e.type)==="sap.ui.model.odata.type.Int64"||(e===null||e===void 0?void 0:e.type)==="sap.ui.model.odata.type.Decimal"){var a;n=((a=n)===null||a===void 0?void 0:a.showMeasure)===false?{emptyString:"",showMeasure:false}:{emptyString:""}}else{var o;n=((o=n)===null||o===void 0?void 0:o.showMeasure)===false?{parseAsString:false,showMeasure:false}:{parseAsString:false}}}if((e===null||e===void 0?void 0:(r=e.constraints)===null||r===void 0?void 0:r.nullable)!==false){var i;(i=n)===null||i===void 0?true:delete i.emptyString}return n}function ne(e,n,t){let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const a=typeof e==="string"?e:e.__functionName;return{_type:"Function",obj:t!==undefined?E(t):undefined,fn:a,isFormattingFn:r,parameters:n.map(E)}}t.fn=ne;function te(e){const n=[];ae(e,"PathInModel",e=>{n.push(c(q(e,""),q(e,undefined),q(e,null)));return e});return f(...n)}t.isEmpty=te;function re(){for(var e=arguments.length,n=new Array(e),t=0;t<e;t++){n[t]=arguments[t]}const r=n.map(E);if(u(...r)){return i}if(r.every(I)){return g(r.reduce((e,n)=>{if(n.value!==undefined){return e+n.value.toString()}return e},""))}else if(r.some(P)){let e=0;const n=K(r,"sap.fe.core.formatters.StandardFormatter#concat",undefined,true);const t=[];ae(n,"PathInModel",n=>{t.push(n);return h(`$${e++}`,"$")});t.unshift(g(JSON.stringify(n)));return K(t,"sap.fe.core.formatters.StandardFormatter#evaluateComplexExpression",undefined,true)}return{_type:"Concat",expressions:r}}t.concat=re;function ae(e,n,t){let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let a=e;switch(a._type){case"Function":case"Formatter":a.parameters=a.parameters.map(e=>ae(e,n,t,r));break;case"Concat":a.expressions=a.expressions.map(e=>ae(e,n,t,r));a=re(...a.expressions);break;case"ComplexType":a.bindingParameters=a.bindingParameters.map(e=>ae(e,n,t,r));break;case"IfElse":const e=ae(a.onTrue,n,t,r);const o=ae(a.onFalse,n,t,r);let i=a.condition;if(r){i=ae(a.condition,n,t,r)}a=Q(i,e,o);break;case"Not":if(r){const e=ae(a.operand,n,t,r);a=m(e)}break;case"Truthy":break;case"Set":if(r){const e=a.operands.map(e=>ae(e,n,t,r));a=a.operator==="||"?c(...e):f(...e)}break;case"Comparison":if(r){const e=ae(a.operand1,n,t,r);const o=ae(a.operand2,n,t,r);a=k(a.operator,e,o)}break;case"Constant":const s=a.value;if(typeof s==="object"&&s){Object.keys(s).forEach(e=>{s[e]=ae(s[e],n,t,r)})}break;case"Ref":case"Length":case"PathInModel":case"EmbeddedBinding":case"EmbeddedExpressionBinding":case"Unresolvable":break}if(n===a._type){a=t(e)}return a}t.transformRecursively=ae;const oe=function(e){return!I(e)&&!C(e)&&O(e)&&e._type!=="IfElse"&&e._type!=="Function"};function ie(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(n&&Object.keys(e.value).length===0){return""}const t=e.value;const r=[];Object.keys(t).forEach(e=>{const a=t[e];const o=pe(a,true,false,n);if(o&&o.length>0){r.push(`${e}: ${o}`)}});return`{${r.join(", ")}}`}function se(e,n){let t=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;if(e.value===null){return r?null:"null"}if(e.value===undefined){return r?undefined:"undefined"}if(typeof e.value==="object"){if(Array.isArray(e.value)){const n=e.value.map(e=>pe(e,true));return`[${n.join(", ")}]`}else{return ie(e,t)}}if(n){switch(typeof e.value){case"number":case"bigint":case"boolean":return e.value.toString();case"string":return`'${s(e.value.toString())}'`;default:return""}}else{return r?e.value:e.value.toString()}}t.compileConstant=se;function ue(e,n,t){if(e.type||e.parameters||e.targetType||e.formatOptions||e.constraints){const r={path:ve(e),type:e.type,targetType:e.targetType,parameters:e.parameters,formatOptions:e.formatOptions,constraints:e.constraints};const a=pe(r,false,false,true);if(n){return`${t}${a}`}return a}else if(n){return`${t}{${ve(e)}}`}else{return`{${ve(e)}}`}}function le(e){if(e.bindingParameters.length===1){return`{${me(e.bindingParameters[0],true)}, type: '${e.type}'}`}let n=`], type: '${e.type}'`;if(ye(e.formatOptions)){n+=`, formatOptions: ${pe(e.formatOptions)}`}if(ye(e.parameters)){n+=`, parameters: ${pe(e.parameters)}`}n+="}";return`{mode:'TwoWay', parts:[${e.bindingParameters.map(e=>me(e)).join(",")}${n}`}function de(e,n){let t=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(n){if(t){return`(${e})`}else{return e}}else{return`{= ${e}}`}}t.wrapBindingExpression=de;function pe(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let t=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let r=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;const a=E(e);const o=t?"$":"%";switch(a._type){case"Unresolvable":return undefined;case"Constant":return se(a,n,r);case"Ref":return a.ref||"null";case"Function":let e=false;if(a.isFormattingFn){ae(a,"Function",n=>{if(n!==a&&n.obj===undefined){e=true}return n},true);ae(a,"Constant",n=>{if(n!==a&&typeof n.value==="object"){ae(n,"PathInModel",n=>{e=true;return n})}return n},true)}const i=`${a.parameters.map(e=>pe(e,true)).join(", ")}`;let s=a.obj===undefined?`${a.fn}(${i})`:`${pe(a.obj,true)}.${a.fn}(${i})`;if(!n&&e){s=`{= ${s}}`}return s;case"EmbeddedExpressionBinding":return n?`(${a.value.substring(2,a.value.length-1)})`:`${a.value}`;case"EmbeddedBinding":return n?`${o}${a.value}`:`${a.value}`;case"PathInModel":return ue(a,n,o);case"Comparison":const u=fe(a);return de(u,n);case"IfElse":const l=`${pe(a.condition,true)} ? ${pe(a.onTrue,true,t)} : ${pe(a.onFalse,true,t)}`;return de(l,n,true);case"Set":const d=a.operands.map(e=>pe(e,true)).join(` ${a.operator} `);return de(d,n,true);case"Concat":const p=a.expressions.map(e=>pe(e,true,true)).join(" + ");return de(p,n);case"Length":const f=`${pe(a.pathInModel,true)}.length`;return de(f,n);case"Not":const c=`!${pe(a.operand,true)}`;return de(c,n);case"Truthy":const m=`!!${pe(a.operand,true)}`;return de(m,n);case"Formatter":const y=ce(a);return n?`$${y}`:y;case"ComplexType":const v=le(a);return n?`$${v}`:v;default:return""}}t.compileExpression=pe;function fe(e){function n(e){const n=pe(e,true)??"undefined";return de(n,true,oe(e))}return`${n(e.operand1)} ${e.operator} ${n(e.operand2)}`}function ce(e){if(e.parameters.length===1){return`{${me(e.parameters[0],true)}, formatter: '${e.fn}'}`}else{const n=e.parameters.map(e=>{if(e._type==="ComplexType"){return le(e)}else{return me(e)}});return`{parts: [${n.join(", ")}], formatter: '${e.fn}'}`}}function me(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let t="";if(e._type==="Constant"){if(e.value===undefined){t=`value: 'undefined'`}else{t=`value: ${se(e,true)}`}}else if(e._type==="PathInModel"){t=`path: '${ve(e)}'`;t+=e.type?`, type: '${e.type}'`:`, targetType: 'any'`;if(ye(e.mode)){t+=`, mode: '${pe(e.mode)}'`}if(ye(e.constraints)){t+=`, constraints: ${pe(e.constraints)}`}if(ye(e.formatOptions)){t+=`, formatOptions: ${pe(e.formatOptions)}`}if(ye(e.parameters)){t+=`, parameters: ${pe(e.parameters)}`}}else{return""}return n?t:`{${t}}`}function ye(e){return e&&Object.keys(e).length>0}function ve(e){return`${e.modelName?`${e.modelName}>`:""}${e.path}`}return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ClassSupport-dbg", ["sap/base/util/merge", "sap/base/util/ObjectPath", "sap/base/util/uid", "sap/ui/base/Metadata", "sap/ui/core/mvc/ControllerMetadata"], function (merge, ObjectPath, uid, Metadata, ControllerMetadata) {
  "use strict";

  var _exports = {};
  const ensureMetadata = function (target) {
    target.metadata = merge({
      controllerExtensions: {},
      properties: {},
      aggregations: {},
      associations: {},
      methods: {},
      events: {},
      interfaces: []
    }, target.metadata || {});
    return target.metadata;
  };

  /* #region CONTROLLER EXTENSIONS */

  /**
   * Defines that the following method is an override for the method name with the same name in the specific controller extension or base implementation.
   *
   * @param extensionName The name of the extension that will be overridden
   * @returns The decorated method
   */
  function methodOverride(extensionName) {
    return function (target, propertyKey) {
      if (!target.override) {
        target.override = {};
      }
      let currentTarget = target.override;
      if (extensionName) {
        if (!currentTarget.extension) {
          currentTarget.extension = {};
        }
        if (!currentTarget.extension[extensionName]) {
          currentTarget.extension[extensionName] = {};
        }
        currentTarget = currentTarget.extension[extensionName];
      }
      currentTarget[propertyKey.toString()] = target[propertyKey.toString()];
    };
  }

  /**
   * Defines that the method can be extended by other controller extension based on the defined overrideExecutionType.
   *
   * @param overrideExecutionType The OverrideExecution defining when the override should run (Before / After / Instead)
   * @returns The decorated method
   */
  _exports.methodOverride = methodOverride;
  function extensible(overrideExecutionType) {
    return function (target, propertyKey) {
      const metadata = ensureMetadata(target);
      if (!metadata.methods[propertyKey.toString()]) {
        metadata.methods[propertyKey.toString()] = {};
      }
      metadata.methods[propertyKey.toString()].overrideExecution = overrideExecutionType;
    };
  }

  /**
   * Defines that the method will be publicly available for controller extension usage.
   *
   * @returns The decorated method
   */
  _exports.extensible = extensible;
  function publicExtension() {
    return function (target, propertyKey, descriptor) {
      const metadata = ensureMetadata(target);
      descriptor.enumerable = true;
      if (!metadata.methods[propertyKey.toString()]) {
        metadata.methods[propertyKey.toString()] = {};
      }
      metadata.methods[propertyKey.toString()].public = true;
    };
  }
  /**
   * Defines that the method will be only available for internal usage of the controller extension.
   *
   * @returns The decorated method
   */
  _exports.publicExtension = publicExtension;
  function privateExtension() {
    return function (target, propertyKey, descriptor) {
      const metadata = ensureMetadata(target);
      descriptor.enumerable = true;
      if (!metadata.methods[propertyKey.toString()]) {
        metadata.methods[propertyKey.toString()] = {};
      }
      metadata.methods[propertyKey.toString()].public = false;
    };
  }
  /**
   * Defines that the method cannot be further extended by other controller extension.
   *
   * @returns The decorated method
   */
  _exports.privateExtension = privateExtension;
  function finalExtension() {
    return function (target, propertyKey, descriptor) {
      const metadata = ensureMetadata(target);
      descriptor.enumerable = true;
      if (!metadata.methods[propertyKey.toString()]) {
        metadata.methods[propertyKey.toString()] = {};
      }
      metadata.methods[propertyKey.toString()].final = true;
    };
  }

  /**
   * Defines that we are going to use instantiate a controller extension under the following variable name.
   *
   * @param extensionClass The controller extension that will be instantiated
   * @returns The decorated property
   */
  _exports.finalExtension = finalExtension;
  function usingExtension(extensionClass) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = ensureMetadata(target);
      delete propertyDescriptor.initializer;
      metadata.controllerExtensions[propertyKey.toString()] = extensionClass;
      return propertyDescriptor;
    }; // This is technically an accessor decorator, but somehow the compiler doesn't like it if I declare it as such.
  }

  /* #endregion */

  /* #region CONTROL */
  /**
   * Indicates that the property shall be declared as an event on the control metadata.
   *
   * @returns The decorated property
   */
  _exports.usingExtension = usingExtension;
  function event() {
    return function (target, eventKey) {
      const metadata = ensureMetadata(target);
      if (!metadata.events[eventKey.toString()]) {
        metadata.events[eventKey.toString()] = {};
      }
    };
  }

  /**
   * Defines the following property in the control metatada.
   *
   * @param attributeDefinition The property definition
   * @returns The decorated property.
   */
  _exports.event = event;
  function property(attributeDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = ensureMetadata(target);
      if (!metadata.properties[propertyKey]) {
        metadata.properties[propertyKey] = attributeDefinition;
      }
      delete propertyDescriptor.writable;
      delete propertyDescriptor.initializer;
      return propertyDescriptor;
    }; // This is technically an accessor decorator, but somehow the compiler doesn't like it if i declare it as such.;
  }
  /**
   * Defines and configure the following aggregation in the control metatada.
   *
   * @param aggregationDefinition The aggregation definition
   * @returns The decorated property.
   */
  _exports.property = property;
  function aggregation(aggregationDefinition) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = ensureMetadata(target);
      if (aggregationDefinition.multiple === undefined) {
        // UI5 defaults this to true but this is just weird...
        aggregationDefinition.multiple = false;
      }
      if (!metadata.aggregations[propertyKey]) {
        metadata.aggregations[propertyKey] = aggregationDefinition;
      }
      if (aggregationDefinition.isDefault) {
        metadata.defaultAggregation = propertyKey;
      }
      delete propertyDescriptor.writable;
      delete propertyDescriptor.initializer;
      return propertyDescriptor;
    }; // This is technically an accessor decorator, but somehow the compiler doesn't like it if i declare it as such.;
  }

  /**
   * Defines and configure the following association in the control metatada.
   *
   * @param ui5AssociationMetadata The definition of the association.
   * @returns The decorated property
   */
  _exports.aggregation = aggregation;
  function association(ui5AssociationMetadata) {
    return function (target, propertyKey, propertyDescriptor) {
      const metadata = ensureMetadata(target);
      if (!metadata.associations[propertyKey]) {
        metadata.associations[propertyKey] = ui5AssociationMetadata;
      }
      delete propertyDescriptor.writable;
      delete propertyDescriptor.initializer;
      return propertyDescriptor;
    }; // This is technically an accessor decorator, but somehow the compiler doesn't like it if i declare it as such.;
  }

  /**
   * Defines in the metadata that this control implements a specific interface.
   *
   * @param interfaceName The name of the implemented interface
   * @returns The decorated method
   */
  _exports.association = association;
  function implementInterface(interfaceName) {
    return function (target) {
      const metadata = ensureMetadata(target);
      metadata.interfaces.push(interfaceName);
    };
  }

  /**
   * Indicates that the following method should also be exposed statically so we can call it from XML.
   *
   * @returns The decorated method
   */
  _exports.implementInterface = implementInterface;
  function xmlEventHandler() {
    return function (target, propertykey) {
      const currentConstructor = target.constructor;
      currentConstructor[propertykey.toString()] = function () {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        if (args && args.length) {
          const currentTarget = currentConstructor.getAPI(args[0]);
          currentTarget === null || currentTarget === void 0 ? void 0 : currentTarget[propertykey.toString()](...args);
        }
      };
    };
  }

  /**
   * Indicates that the following class should define a UI5 control of the specified name.
   *
   * @param sTarget The fully qualified name of the UI5 class
   * @param metadataDefinition Inline metadata definition
   * @class
   */
  _exports.xmlEventHandler = xmlEventHandler;
  function defineUI5Class(sTarget, metadataDefinition) {
    return function (constructor) {
      if (!constructor.prototype.metadata) {
        constructor.prototype.metadata = {};
      }
      if (metadataDefinition) {
        for (const key in metadataDefinition) {
          constructor.prototype.metadata[key] = metadataDefinition[key];
        }
      }
      return registerUI5Metadata(constructor, sTarget, constructor.prototype);
    };
  }
  _exports.defineUI5Class = defineUI5Class;
  function createReference() {
    return {
      current: undefined,
      setCurrent: function (oControlInstance) {
        this.current = oControlInstance;
      }
    };
  }
  /**
   * Defines that the following object will hold a reference to a control through jsx templating.
   *
   * @returns The decorated property.
   */
  _exports.createReference = createReference;
  function defineReference() {
    return function (target, propertyKey, propertyDescriptor) {
      delete propertyDescriptor.writable;
      delete propertyDescriptor.initializer;
      propertyDescriptor.initializer = createReference;
      return propertyDescriptor;
    }; // This is technically an accessor decorator, but somehow the compiler doesn't like it if i declare it as such.;
  }

  /**
   * Internal heavy lifting that will take care of creating the class property for ui5 to use.
   *
   * @param clazz The class prototype
   * @param name The name of the class to create
   * @param inObj The metadata object
   * @returns The metadata class
   */
  _exports.defineReference = defineReference;
  function registerUI5Metadata(clazz, name, inObj) {
    var _clazz$getMetadata, _inObj$metadata, _clazz$metadata, _obj$metadata;
    if (clazz.getMetadata && clazz.getMetadata().isA("sap.ui.core.mvc.ControllerExtension")) {
      Object.getOwnPropertyNames(inObj).forEach(objName => {
        const descriptor = Object.getOwnPropertyDescriptor(inObj, objName);
        if (descriptor && !descriptor.enumerable) {
          descriptor.enumerable = true;
          //		Log.error(`Property ${objName} from ${name} should be decorated as public`);
        }
      });
    }

    const obj = {};
    obj.metadata = inObj.metadata || {};
    obj.override = inObj.override;
    obj.constructor = clazz;
    obj.metadata.baseType = Object.getPrototypeOf(clazz.prototype).getMetadata().getName();
    if ((clazz === null || clazz === void 0 ? void 0 : (_clazz$getMetadata = clazz.getMetadata()) === null || _clazz$getMetadata === void 0 ? void 0 : _clazz$getMetadata.getStereotype()) === "control") {
      const rendererDefinition = inObj.renderer || clazz.renderer || clazz.render;
      obj.renderer = {
        apiVersion: 2
      };
      if (typeof rendererDefinition === "function") {
        obj.renderer.render = rendererDefinition;
      } else if (rendererDefinition != undefined) {
        obj.renderer = rendererDefinition;
      }
    }
    obj.metadata.interfaces = ((_inObj$metadata = inObj.metadata) === null || _inObj$metadata === void 0 ? void 0 : _inObj$metadata.interfaces) || ((_clazz$metadata = clazz.metadata) === null || _clazz$metadata === void 0 ? void 0 : _clazz$metadata.interfaces);
    Object.keys(clazz.prototype).forEach(key => {
      if (key !== "metadata") {
        try {
          obj[key] = clazz.prototype[key];
        } catch (e) {
          //console.log(e);
        }
      }
    });
    if ((_obj$metadata = obj.metadata) !== null && _obj$metadata !== void 0 && _obj$metadata.controllerExtensions && Object.keys(obj.metadata.controllerExtensions).length > 0) {
      for (const cExtName in obj.metadata.controllerExtensions) {
        obj[cExtName] = obj.metadata.controllerExtensions[cExtName];
      }
    }
    const output = clazz.extend(name, obj);
    const fnInit = output.prototype.init;
    output.prototype.init = function () {
      if (fnInit) {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        fnInit.apply(this, args);
      }
      this.metadata = obj.metadata;
      if (obj.metadata.properties) {
        const aPropertyKeys = Object.keys(obj.metadata.properties);
        aPropertyKeys.forEach(propertyKey => {
          Object.defineProperty(this, propertyKey, {
            configurable: true,
            set: v => {
              return this.setProperty(propertyKey, v);
            },
            get: () => {
              return this.getProperty(propertyKey);
            }
          });
        });
        const aAggregationKeys = Object.keys(obj.metadata.aggregations);
        aAggregationKeys.forEach(aggregationKey => {
          Object.defineProperty(this, aggregationKey, {
            configurable: true,
            set: v => {
              return this.setAggregation(aggregationKey, v);
            },
            get: () => {
              const aggregationContent = this.getAggregation(aggregationKey);
              if (obj.metadata.aggregations[aggregationKey].multiple) {
                return aggregationContent || [];
              } else {
                return aggregationContent;
              }
            }
          });
        });
        const aAssociationKeys = Object.keys(obj.metadata.associations);
        aAssociationKeys.forEach(associationKey => {
          Object.defineProperty(this, associationKey, {
            configurable: true,
            set: v => {
              return this.setAssociation(associationKey, v);
            },
            get: () => {
              const aggregationContent = this.getAssociation(associationKey);
              if (obj.metadata.associations[associationKey].multiple) {
                return aggregationContent || [];
              } else {
                return aggregationContent;
              }
            }
          });
        });
      }
    };
    clazz.override = function (oExtension) {
      const pol = {};
      pol.constructor = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return clazz.apply(this, args);
      };
      const oClass = Metadata.createClass(clazz, `anonymousExtension~${uid()}`, pol, ControllerMetadata);
      oClass.getMetadata()._staticOverride = oExtension;
      oClass.getMetadata()._override = clazz.getMetadata()._override;
      return oClass;
    };
    ObjectPath.set(name, output);
    return output;
  }
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ClassSupport", ["sap/base/util/merge","sap/base/util/ObjectPath","sap/base/util/uid","sap/ui/base/Metadata","sap/ui/core/mvc/ControllerMetadata"],function(t,e,n,r,i){"use strict";var o={};const a=function(e){e.metadata=t({controllerExtensions:{},properties:{},aggregations:{},associations:{},methods:{},events:{},interfaces:[]},e.metadata||{});return e.metadata};function s(t){return function(e,n){if(!e.override){e.override={}}let r=e.override;if(t){if(!r.extension){r.extension={}}if(!r.extension[t]){r.extension[t]={}}r=r.extension[t]}r[n.toString()]=e[n.toString()]}}o.methodOverride=s;function c(t){return function(e,n){const r=a(e);if(!r.methods[n.toString()]){r.methods[n.toString()]={}}r.methods[n.toString()].overrideExecution=t}}o.extensible=c;function u(){return function(t,e,n){const r=a(t);n.enumerable=true;if(!r.methods[e.toString()]){r.methods[e.toString()]={}}r.methods[e.toString()].public=true}}o.publicExtension=u;function f(){return function(t,e,n){const r=a(t);n.enumerable=true;if(!r.methods[e.toString()]){r.methods[e.toString()]={}}r.methods[e.toString()].public=false}}o.privateExtension=f;function d(){return function(t,e,n){const r=a(t);n.enumerable=true;if(!r.methods[e.toString()]){r.methods[e.toString()]={}}r.methods[e.toString()].final=true}}o.finalExtension=d;function l(t){return function(e,n,r){const i=a(e);delete r.initializer;i.controllerExtensions[n.toString()]=t;return r}}o.usingExtension=l;function g(){return function(t,e){const n=a(t);if(!n.events[e.toString()]){n.events[e.toString()]={}}}}o.event=g;function p(t){return function(e,n,r){const i=a(e);if(!i.properties[n]){i.properties[n]=t}delete r.writable;delete r.initializer;return r}}o.property=p;function m(t){return function(e,n,r){const i=a(e);if(t.multiple===undefined){t.multiple=false}if(!i.aggregations[n]){i.aggregations[n]=t}if(t.isDefault){i.defaultAggregation=n}delete r.writable;delete r.initializer;return r}}o.aggregation=m;function h(t){return function(e,n,r){const i=a(e);if(!i.associations[n]){i.associations[n]=t}delete r.writable;delete r.initializer;return r}}o.association=h;function v(t){return function(e){const n=a(e);n.interfaces.push(t)}}o.implementInterface=v;function b(){return function(t,e){const n=t.constructor;n[e.toString()]=function(){for(var t=arguments.length,r=new Array(t),i=0;i<t;i++){r[i]=arguments[i]}if(r&&r.length){const t=n.getAPI(r[0]);t===null||t===void 0?void 0:t[e.toString()](...r)}}}}o.xmlEventHandler=b;function y(t,e){return function(n){if(!n.prototype.metadata){n.prototype.metadata={}}if(e){for(const t in e){n.prototype.metadata[t]=e[t]}}return E(n,t,n.prototype)}}o.defineUI5Class=y;function x(){return{current:undefined,setCurrent:function(t){this.current=t}}}o.createReference=x;function S(){return function(t,e,n){delete n.writable;delete n.initializer;n.initializer=x;return n}}o.defineReference=S;function E(t,o,a){var s,c,u,f;if(t.getMetadata&&t.getMetadata().isA("sap.ui.core.mvc.ControllerExtension")){Object.getOwnPropertyNames(a).forEach(t=>{const e=Object.getOwnPropertyDescriptor(a,t);if(e&&!e.enumerable){e.enumerable=true}})}const d={};d.metadata=a.metadata||{};d.override=a.override;d.constructor=t;d.metadata.baseType=Object.getPrototypeOf(t.prototype).getMetadata().getName();if((t===null||t===void 0?void 0:(s=t.getMetadata())===null||s===void 0?void 0:s.getStereotype())==="control"){const e=a.renderer||t.renderer||t.render;d.renderer={apiVersion:2};if(typeof e==="function"){d.renderer.render=e}else if(e!=undefined){d.renderer=e}}d.metadata.interfaces=((c=a.metadata)===null||c===void 0?void 0:c.interfaces)||((u=t.metadata)===null||u===void 0?void 0:u.interfaces);Object.keys(t.prototype).forEach(e=>{if(e!=="metadata"){try{d[e]=t.prototype[e]}catch(t){}}});if((f=d.metadata)!==null&&f!==void 0&&f.controllerExtensions&&Object.keys(d.metadata.controllerExtensions).length>0){for(const t in d.metadata.controllerExtensions){d[t]=d.metadata.controllerExtensions[t]}}const l=t.extend(o,d);const g=l.prototype.init;l.prototype.init=function(){if(g){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++){e[n]=arguments[n]}g.apply(this,e)}this.metadata=d.metadata;if(d.metadata.properties){const t=Object.keys(d.metadata.properties);t.forEach(t=>{Object.defineProperty(this,t,{configurable:true,set:e=>this.setProperty(t,e),get:()=>this.getProperty(t)})});const e=Object.keys(d.metadata.aggregations);e.forEach(t=>{Object.defineProperty(this,t,{configurable:true,set:e=>this.setAggregation(t,e),get:()=>{const e=this.getAggregation(t);if(d.metadata.aggregations[t].multiple){return e||[]}else{return e}}})});const n=Object.keys(d.metadata.associations);n.forEach(t=>{Object.defineProperty(this,t,{configurable:true,set:e=>this.setAssociation(t,e),get:()=>{const e=this.getAssociation(t);if(d.metadata.associations[t].multiple){return e||[]}else{return e}}})})}};t.override=function(e){const o={};o.constructor=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++){n[r]=arguments[r]}return t.apply(this,n)};const a=r.createClass(t,`anonymousExtension~${n()}`,o,i);a.getMetadata()._staticOverride=e;a.getMetadata()._override=t.getMetadata()._override;return a};e.set(o,l);return l}return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/DeleteHelper-dbg", ["sap/base/Log", "sap/fe/core/controllerextensions/editFlow/draft", "sap/m/CheckBox", "sap/m/MessageToast", "sap/m/Text"], function (Log, draft, CheckBox, MessageToast, Text) {
  "use strict";

  var DeleteOptionTypes;
  (function (DeleteOptionTypes) {
    DeleteOptionTypes["deletableContexts"] = "deletableContexts";
    DeleteOptionTypes["draftsWithDeletableActive"] = "draftsWithDeletableActive";
    DeleteOptionTypes["unSavedContexts"] = "unSavedContexts";
    DeleteOptionTypes["draftsWithNonDeletableActive"] = "draftsWithNonDeletableActive";
    DeleteOptionTypes["draftsToDeleteBeforeActive"] = "draftsToDeleteBeforeActive";
  })(DeleteOptionTypes || (DeleteOptionTypes = {}));
  var DeleteDialogContentControl;
  (function (DeleteDialogContentControl) {
    DeleteDialogContentControl["CHECKBOX"] = "checkBox";
    DeleteDialogContentControl["TEXT"] = "text";
  })(DeleteDialogContentControl || (DeleteDialogContentControl = {}));
  function getUpdatedSelections(internalModelContext, type, selectedContexts, contextsToRemove) {
    const retSelectedContexts = [...selectedContexts];
    contextsToRemove.forEach(context => {
      const idx = retSelectedContexts.indexOf(context);
      if (idx !== -1) {
        retSelectedContexts.splice(idx, 1);
      }
    });
    internalModelContext.setProperty(type, []);
    return retSelectedContexts;
  }
  function clearSelectedContextsForOption(internalModelContext, option) {
    let selectedContexts = internalModelContext.getProperty("selectedContexts") || [];
    if (option.type === DeleteOptionTypes.deletableContexts) {
      selectedContexts = getUpdatedSelections(internalModelContext, DeleteOptionTypes.deletableContexts, selectedContexts, internalModelContext.getProperty(DeleteOptionTypes.deletableContexts) || []);
      const draftSiblingPairs = internalModelContext.getProperty(DeleteOptionTypes.draftsWithDeletableActive) || [];
      const drafts = draftSiblingPairs.map(contextPair => {
        return contextPair.draft;
      });
      selectedContexts = getUpdatedSelections(internalModelContext, DeleteOptionTypes.draftsWithDeletableActive, selectedContexts, drafts);
    } else {
      const contextsToRemove = internalModelContext.getProperty(option.type) || [];
      selectedContexts = getUpdatedSelections(internalModelContext, option.type, selectedContexts, contextsToRemove);
    }
    internalModelContext.setProperty("selectedContexts", selectedContexts);
    internalModelContext.setProperty("numberOfSelectedContexts", selectedContexts.length);
  }
  function afterDeleteProcess(parameters, options, contexts, resourceModel, lastDeletedRowIndex) {
    const {
      internalModelContext,
      entitySetName
    } = parameters;
    if (internalModelContext) {
      if (internalModelContext.getProperty("deleteEnabled") != undefined) {
        options.forEach(option => {
          // if an option is selected, then it is deleted. So, we need to remove them from selected contexts.
          if (option.selected) {
            clearSelectedContextsForOption(internalModelContext, option);
          }
        });
      }
      // if atleast one of the options is not selected, then the delete button needs to be enabled.
      internalModelContext.setProperty("deleteEnabled", options.some(option => !option.selected));
    }
    if (contexts.length === 1) {
      MessageToast.show(resourceModel.getText("C_TRANSACTION_HELPER_DELETE_TOAST_SINGULAR", undefined, entitySetName));
    } else {
      MessageToast.show(resourceModel.getText("C_TRANSACTION_HELPER_DELETE_TOAST_PLURAL", undefined, entitySetName));
    }
    deleteHelper.setFocusAfterDelete(parameters.parentControl, contexts.length, lastDeletedRowIndex);
  }
  async function setFocusAfterDelete(table, deletedRowsCount, lastDeletedRowIndex) {
    var _table$getRowBinding;
    const tableRowsCount = (_table$getRowBinding = table.getRowBinding()) === null || _table$getRowBinding === void 0 ? void 0 : _table$getRowBinding.getCount();
    const originalTableRowsCount = (tableRowsCount ?? 0) + deletedRowsCount;
    let nextFocusRowIndex;
    if (lastDeletedRowIndex !== -1 && tableRowsCount !== undefined && tableRowsCount > 0) {
      //If the last row is deleted, move the focus to previous row to it
      if (lastDeletedRowIndex === originalTableRowsCount - 1) {
        nextFocusRowIndex = tableRowsCount - 1;
        //For the normal scenario, move the focus to the next row
      } else {
        nextFocusRowIndex = lastDeletedRowIndex - deletedRowsCount + 1;
      }
      await table.focusRow(nextFocusRowIndex, false);
    } else {
      // For zero rows or default case, move focus to table
      table.focus();
    }
  }
  function getLockedContextUser(lockedContext) {
    const draftAdminData = lockedContext.getObject()["DraftAdministrativeData"];
    return draftAdminData && draftAdminData["InProcessByUser"] || "";
  }
  function getLockedObjectsText(resourceModel, numberOfSelectedContexts, lockedContexts) {
    let retTxt = "";
    if (numberOfSelectedContexts === 1 && lockedContexts.length === 1) {
      //only one unsaved object
      const lockedUser = getLockedContextUser(lockedContexts[0]);
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_OBJECT_LOCKED", [lockedUser]);
    } else if (lockedContexts.length == 1) {
      const lockedUser = getLockedContextUser(lockedContexts[0]);
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_LOCKED", [numberOfSelectedContexts, lockedUser]);
    } else if (lockedContexts.length > 1) {
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_LOCKED", [lockedContexts.length, numberOfSelectedContexts]);
    }
    return retTxt;
  }
  function getNonDeletableActivesOfDraftsText(resourceModel, numberOfDrafts, totalDeletable) {
    let retTxt = "";
    if (totalDeletable === numberOfDrafts) {
      if (numberOfDrafts === 1) {
        retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFT_OF_NON_DELETABLE_ACTIVE");
      } else {
        retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFTS_OF_NON_DELETABLE_ACTIVE");
      }
    } else if (numberOfDrafts === 1) {
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFT_OF_NON_DELETABLE_ACTIVE");
    } else {
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFTS_OF_NON_DELETABLE_ACTIVE");
    }
    return retTxt;
  }
  function getUnSavedContextUser(unSavedContext) {
    const draftAdminData = unSavedContext.getObject()["DraftAdministrativeData"];
    let sLastChangedByUser = "";
    if (draftAdminData) {
      sLastChangedByUser = draftAdminData["LastChangedByUserDescription"] || draftAdminData["LastChangedByUser"] || "";
    }
    return sLastChangedByUser;
  }
  function getUnsavedContextsText(resourceModel, numberOfSelectedContexts, unSavedContexts, totalDeletable) {
    let infoTxt = "",
      optionTxt = "",
      optionWithoutTxt = false;
    if (numberOfSelectedContexts === 1 && unSavedContexts.length === 1) {
      //only one unsaved object are selected
      const lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);
      infoTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES", [lastChangedByUser]);
      optionWithoutTxt = true;
    } else if (numberOfSelectedContexts === unSavedContexts.length) {
      //only multiple unsaved objects are selected
      infoTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES_MULTIPLE_OBJECTS");
      optionWithoutTxt = true;
    } else if (totalDeletable === unSavedContexts.length) {
      // non-deletable/locked exists, all deletable are unsaved by others
      if (unSavedContexts.length === 1) {
        const lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);
        infoTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_SINGULAR", [lastChangedByUser]);
      } else {
        infoTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_PLURAL");
      }
      optionWithoutTxt = true;
    } else if (totalDeletable > unSavedContexts.length) {
      // non-deletable/locked exists, deletable include unsaved and other types.
      if (unSavedContexts.length === 1) {
        const lastChangedByUser = getUnSavedContextUser(unSavedContexts[0]);
        optionTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_SINGULAR", [lastChangedByUser]);
      } else {
        optionTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_PLURAL");
      }
    }
    return {
      infoTxt,
      optionTxt,
      optionWithoutTxt
    };
  }
  function getNonDeletableText(mParameters, totalNumDeletableContexts, resourceModel) {
    const {
      numberOfSelectedContexts,
      entitySetName,
      lockedContexts = [],
      draftsWithNonDeletableActive = []
    } = mParameters;
    const nonDeletableContexts = numberOfSelectedContexts - (lockedContexts.length + totalNumDeletableContexts - draftsWithNonDeletableActive.length);
    let retTxt = "";
    if (nonDeletableContexts > 0 && (totalNumDeletableContexts === 0 || draftsWithNonDeletableActive.length === totalNumDeletableContexts)) {
      // 1. None of the ccontexts are deletable
      // 2. Only drafts of non deletable contexts exist.
      if (lockedContexts.length > 0) {
        // Locked contexts exist
        if (nonDeletableContexts === 1) {
          retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_SINGULAR");
        } else {
          retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_PLURAL");
        }
      } else if (nonDeletableContexts === 1) {
        // Only pure non-deletable contexts exist single
        retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_AND_ONE_OBJECT_NON_DELETABLE", undefined, entitySetName);
      } else {
        // Only pure non-deletable contexts exist multiple
        retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_MULTIPLE_AND_ALL_OBJECT_NON_DELETABLE", undefined, entitySetName);
      }
    } else if (nonDeletableContexts === 1) {
      // deletable and non-deletable exists together, single
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_NON_DELETABLE", [numberOfSelectedContexts], entitySetName);
    } else if (nonDeletableContexts > 1) {
      // deletable and non-deletable exists together, multiple
      retTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_NON_DELETABLE", [nonDeletableContexts, numberOfSelectedContexts], entitySetName);
    }
    return retTxt ? new Text({
      text: retTxt
    }) : undefined;
  }
  function getConfirmedDeletableContext(contexts, options) {
    return options.reduce((result, option) => {
      return option.selected && option.type !== DeleteOptionTypes.draftsToDeleteBeforeActive ? result.concat(option.contexts) : result;
    }, contexts);
  }
  function getDraftsToDeleteBeforeActive(options) {
    const contexts = [];
    return options.reduce((result, option) => {
      return option.selected && option.type === DeleteOptionTypes.draftsToDeleteBeforeActive ? result.concat(option.contexts) : result;
    }, contexts);
  }
  function updateDraftOptionsForDeletableTexts(mParameters, vContexts, totalDeletable, resourceModel, items, options) {
    const {
      numberOfSelectedContexts,
      draftsWithDeletableActive,
      unSavedContexts,
      lockedContexts,
      draftsWithNonDeletableActive
    } = mParameters;
    let lockedContextsTxt = "";

    // drafts with active
    if (draftsWithDeletableActive.length > 0) {
      const draftsToDeleteBeforeActive = [];
      draftsWithDeletableActive.forEach(deletableDraftInfo => {
        // In either cases, if an own draft is locked or not the draft needs to be discarded before deleting active record.
        draftsToDeleteBeforeActive.push(deletableDraftInfo.draft);
        vContexts.push(deletableDraftInfo.siblingInfo.targetContext);
      });
      if (draftsToDeleteBeforeActive.length > 0) {
        options.push({
          type: DeleteOptionTypes.draftsToDeleteBeforeActive,
          contexts: draftsToDeleteBeforeActive,
          selected: true
        });
      }
    }

    // items locked msg
    if (lockedContexts.length > 0) {
      lockedContextsTxt = deleteHelper.getLockedObjectsText(resourceModel, numberOfSelectedContexts, lockedContexts) || "";
      items.push(new Text({
        text: lockedContextsTxt
      }));
    }

    // non deletable msg
    const nonDeletableExists = numberOfSelectedContexts != totalDeletable - draftsWithNonDeletableActive.length + lockedContexts.length;
    const nonDeletableTextCtrl = nonDeletableExists && deleteHelper.getNonDeletableText(mParameters, totalDeletable, resourceModel);
    if (nonDeletableTextCtrl) {
      items.push(nonDeletableTextCtrl);
    }

    // option: unsaved changes by others
    if (unSavedContexts.length > 0) {
      const unsavedChangesTxts = deleteHelper.getUnsavedContextsText(resourceModel, numberOfSelectedContexts, unSavedContexts, totalDeletable) || {};
      if (unsavedChangesTxts.infoTxt) {
        items.push(new Text({
          text: unsavedChangesTxts.infoTxt
        }));
      }
      if (unsavedChangesTxts.optionTxt || unsavedChangesTxts.optionWithoutTxt) {
        options.push({
          type: DeleteOptionTypes.unSavedContexts,
          contexts: unSavedContexts,
          text: unsavedChangesTxts.optionTxt,
          selected: true,
          control: DeleteDialogContentControl.CHECKBOX
        });
      }
    }

    // option: drafts with active not deletable
    if (draftsWithNonDeletableActive.length > 0) {
      const nonDeletableActivesOfDraftsText = deleteHelper.getNonDeletableActivesOfDraftsText(resourceModel, draftsWithNonDeletableActive.length, totalDeletable) || "";
      if (nonDeletableActivesOfDraftsText) {
        options.push({
          type: DeleteOptionTypes.draftsWithNonDeletableActive,
          contexts: draftsWithNonDeletableActive,
          text: nonDeletableActivesOfDraftsText,
          selected: true,
          control: totalDeletable > 0 ? DeleteDialogContentControl.CHECKBOX : DeleteDialogContentControl.TEXT
        });
      }
    }
  }
  function updateContentForDeleteDialog(options, items) {
    if (options.length === 1) {
      // Single option doesn't need checkBox
      const option = options[0];
      if (option.text) {
        items.push(new Text({
          text: option.text
        }));
      }
    } else if (options.length > 1) {
      // Multiple Options

      // Texts
      options.forEach(option => {
        if (option.control === "text" && option.text) {
          items.push(new Text({
            text: option.text
          }));
        }
      });
      // CheckBoxs
      options.forEach(option => {
        if (option.control === "checkBox" && option.text) {
          items.push(new CheckBox({
            text: option.text,
            selected: true,
            select: function (oEvent) {
              const checkBox = oEvent.getSource();
              const selected = checkBox.getSelected();
              option.selected = selected;
            }
          }));
        }
      });
    }
  }

  /**
   * Get the selected record in UI for text rather than the context to delete.
   *
   * @param mParameters Delete parameters and information of selected contexts.
   * @param contextToDelete Context to check.
   * @returns Context for delete.
   */
  function _getOriginalSelectedRecord(mParameters, contextToDelete) {
    const {
      draftsWithDeletableActive
    } = mParameters;
    const ret = draftsWithDeletableActive.find(draftSiblingPair => draftSiblingPair.siblingInfo.targetContext === contextToDelete);
    return ret !== null && ret !== void 0 && ret.draft ? ret.draft : contextToDelete;
  }

  /**
   * Get options possible for delete of selected contexts.
   *
   * @param mParameters Delete parameters and information of selected contexts.
   * @param directDeletableContexts Contexts that can be deletable directly.
   * @param resourceModel Resource model.
   * @returns Options that are possible for selected records.
   */
  function getOptionsForDeletableTexts(mParameters, directDeletableContexts, resourceModel) {
    const {
      numberOfSelectedContexts,
      entitySetName,
      parentControl,
      description,
      lockedContexts,
      draftsWithNonDeletableActive,
      unSavedContexts
    } = mParameters;
    const totalDeletable = directDeletableContexts.length + draftsWithNonDeletableActive.length + unSavedContexts.length;
    const nonDeletableContexts = numberOfSelectedContexts - (lockedContexts.length + totalDeletable - draftsWithNonDeletableActive.length);
    const options = [];
    if (numberOfSelectedContexts === 1 && numberOfSelectedContexts === directDeletableContexts.length) {
      // single deletable context
      const oTable = parentControl;
      const sKey = oTable && oTable.getParent().getIdentifierColumn();
      let txt;
      let aParams = [];
      if (sKey) {
        const descriptionPath = description && description.path;
        let singleContext = directDeletableContexts[0];
        let oLineContextData = singleContext.getObject();
        if (!oLineContextData || Object.keys(oLineContextData).length === 0) {
          // In case original selected record is draft(in UI). The Active record needs to be deleted(directDeletableContexts has active record), but data is not requested. We get data from the draft.
          singleContext = _getOriginalSelectedRecord(mParameters, singleContext);
          oLineContextData = singleContext.getObject();
        }
        const sKeyValue = sKey ? oLineContextData[sKey] : undefined;
        const sDescription = descriptionPath && oLineContextData[descriptionPath];
        if (sKeyValue) {
          if (sDescription && description && sKey !== description.path) {
            aParams = [sKeyValue + " ", sDescription];
          } else {
            aParams = [sKeyValue, ""];
          }
          txt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO", aParams, entitySetName);
        } else {
          txt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR", undefined, entitySetName);
        }
      } else {
        txt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR", undefined, entitySetName);
      }
      options.push({
        type: DeleteOptionTypes.deletableContexts,
        contexts: directDeletableContexts,
        text: txt,
        selected: true,
        control: DeleteDialogContentControl.TEXT
      });
    } else if (unSavedContexts.length !== totalDeletable && numberOfSelectedContexts > 0 && (directDeletableContexts.length > 0 || unSavedContexts.length > 0 && draftsWithNonDeletableActive.length > 0)) {
      if (numberOfSelectedContexts > directDeletableContexts.length && nonDeletableContexts + lockedContexts.length > 0) {
        // other types exists with pure deletable ones
        let deletableOptionTxt = "";
        if (totalDeletable === 1) {
          deletableOptionTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR_NON_DELETABLE", undefined, entitySetName);
        } else {
          deletableOptionTxt = resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL_NON_DELETABLE", undefined, entitySetName);
        }
        options.unshift({
          type: DeleteOptionTypes.deletableContexts,
          contexts: directDeletableContexts,
          text: deletableOptionTxt,
          selected: true,
          control: DeleteDialogContentControl.TEXT
        });
      } else {
        // only deletable
        const allDeletableTxt = totalDeletable === 1 ? resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR", undefined, entitySetName) : resourceModel.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL", undefined, entitySetName);
        options.push({
          type: DeleteOptionTypes.deletableContexts,
          contexts: directDeletableContexts,
          text: allDeletableTxt,
          selected: true,
          control: DeleteDialogContentControl.TEXT
        });
      }
    }
    return options;
  }
  async function deleteConfirmHandler(options, mParameters, messageHandler, resourceModel, appComponent, draftEnabled) {
    try {
      const contexts = deleteHelper.getConfirmedDeletableContext([], options);
      const lastDeletedRowIndex = contexts[contexts.length - 1].getIndex() ?? -1;
      const draftsToDeleteBeforeActive = getDraftsToDeleteBeforeActive(options);
      const {
        beforeDeleteCallBack,
        parentControl
      } = mParameters;
      if (beforeDeleteCallBack) {
        await beforeDeleteCallBack({
          contexts: contexts
        });
      }
      if (contexts && contexts.length) {
        try {
          const enableStrictHandling = contexts.length === 1 ? true : false;
          const draftErrors = [];
          await Promise.allSettled(draftsToDeleteBeforeActive.map(async function (context) {
            try {
              return await draft.deleteDraft(context, appComponent, enableStrictHandling);
            } catch (e) {
              Log.error(`FE : core : DeleteHelper : Error while discarding draft with path : ${context.getPath()}`);
              draftErrors.push(e);
            }
          }));
          await Promise.all(contexts.map(function (context) {
            if (draftEnabled && !context.getProperty("IsActiveEntity")) {
              //delete the draft
              return draft.deleteDraft(context, appComponent, enableStrictHandling);
            }
            return context.delete();
          }));
          await deleteHelper.afterDeleteProcess(mParameters, options, contexts, resourceModel, lastDeletedRowIndex);
          if (draftErrors.length > 0) {
            throw Error(`FE : core : DeleteHelper : Errors on draft delete : ${draftErrors}`);
          }
        } catch (error) {
          await messageHandler.showMessageDialog({
            control: parentControl
          });
          // re-throw error to enforce rejecting the general promise
          throw error;
        }
      }
    } catch (oError) {
      await messageHandler.showMessages();
      // re-throw error to enforce rejecting the general promise
      throw oError;
    }
  }

  // Table Runtime Helpers:

  /* refreshes data in internal model relevant for enablement of delete button according to selected contexts
  relevant data are: deletableContexts, draftsWithDeletableActive, draftsWithNonDeletableActive, unSavedContexts, deleteEnabled
  not relevant: lockedContexts
  */
  async function updateDeleteInfoForSelectedContexts(internalModelContext, selectedContexts) {
    const contextInfos = selectedContexts.map(context => {
      // assuming metaContext is the same for all contexts, still not relying on this assumption
      const metaContext = context.getModel().getMetaModel().getMetaContext(context.getCanonicalPath());
      const deletablePath = metaContext.getProperty("@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable/$Path");
      const staticDeletable = !deletablePath && metaContext.getProperty("@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable") !== false;
      // default values according to non-draft case (sticky behaves the same as non-draft from UI point of view regarding deletion)
      const info = {
        context: context,
        isDraftRoot: !!metaContext.getProperty("@com.sap.vocabularies.Common.v1.DraftRoot"),
        isDraftNode: !!metaContext.getProperty("@com.sap.vocabularies.Common.v1.DraftNode"),
        isActive: true,
        hasActive: false,
        hasDraft: false,
        locked: false,
        deletable: deletablePath ? context.getProperty(deletablePath) : staticDeletable,
        siblingPromise: Promise.resolve(undefined),
        siblingInfo: undefined,
        siblingDeletable: false
      };
      if (info.isDraftRoot) {
        var _context$getObject;
        info.locked = !!((_context$getObject = context.getObject("DraftAdministrativeData")) !== null && _context$getObject !== void 0 && _context$getObject.InProcessByUser);
        info.hasDraft = context.getProperty("HasDraftEntity");
      }
      if (info.isDraftRoot) {
        info.isActive = context.getProperty("IsActiveEntity");
        info.hasActive = context.getProperty("HasActiveEntity");
        if (!info.isActive && info.hasActive) {
          // get sibling contexts (only relevant for draft root, not for nodes)
          // draft.computeSiblingInformation expects draft root as first parameter - if we are on a subnode, this is not given
          // - done wrong also above, but seems not to break anything
          // - why is draft.computeSiblingInformation not able to calculate draft root on its own?!
          // - and why is it not able to deal with contexts not draft enabled (of course they never have a sibling - could just return undefined)
          info.siblingPromise = draft.computeSiblingInformation(context, context).then(async siblingInformation => {
            // For draftWithDeletableActive bucket, currently also siblingInformation is put into internalModel and used
            // from there in case of deletion. Therefore, sibling needs to be retrieved in case of staticDeletable.
            // Possible improvement: Only read siblingInfo here if needed for determination of delete button enablement,
            // in other cases, read it only if deletion really happens.
            info.siblingInfo = siblingInformation;
            if (deletablePath) {
              var _siblingInformation$t;
              info.siblingDeletable = await (siblingInformation === null || siblingInformation === void 0 ? void 0 : (_siblingInformation$t = siblingInformation.targetContext) === null || _siblingInformation$t === void 0 ? void 0 : _siblingInformation$t.requestProperty(deletablePath));
            } else {
              info.siblingDeletable = staticDeletable;
            }
          });
        }
      }
      return info;
    });
    // wait for all siblingPromises. If no sibling exists, promise is resolved to undefined (but it's still a promise)
    await Promise.all(contextInfos.map(info => info.siblingPromise));
    const buckets = [{
      key: "draftsWithDeletableActive",
      // only for draft root: In that case, the delete request needs to be sent for the active (i.e. the sibling),
      // while in draft node, the delete request needs to be send for the draft itself
      value: contextInfos.filter(info => info.isDraftRoot && !info.isActive && info.hasActive && info.siblingDeletable)
    }, {
      key: "draftsWithNonDeletableActive",
      // only for draft root: For draft node, we only rely on information in the draft itself (not its active sibling)
      // application has to take care to set this correctly (in case active sibling must not be deletable, activation
      // of draft with deleted node would also delte active sibling => deletion of draft node to be avoided)
      value: contextInfos.filter(info => info.isDraftRoot && !info.isActive && info.hasActive && !info.siblingDeletable)
    }, {
      key: "lockedContexts",
      value: contextInfos.filter(info => info.isDraftRoot && info.isActive && info.hasDraft && info.locked)
    }, {
      key: "unSavedContexts",
      value: contextInfos.filter(info => info.isDraftRoot && info.isActive && info.hasDraft && !info.locked)
    },
    // non-draft/sticky and deletable
    // active draft root without any draft and deletable
    // created draft root (regardless of deletable)
    // draft node only according to its annotation
    {
      key: "deletableContexts",
      value: contextInfos.filter(info => !info.isDraftRoot && !info.isDraftNode && info.deletable || info.isDraftRoot && info.isActive && !info.hasDraft && info.deletable || info.isDraftRoot && !info.isActive && !info.hasActive || info.isDraftNode && info.deletable)
    }];
    for (const {
      key,
      value
    } of buckets) {
      internalModelContext.setProperty(key,
      // Currently, bucket draftsWithDeletableActive has a different structure (containing also sibling information, which is used
      // in case of deletion). Possible improvement: Read sibling information only when needed, and build all buckets with same
      // structure. However, in that case siblingInformation might need to be read twice (if already needed for button enablement),
      // thus a buffer probably would make sense.
      value.map(info => key === "draftsWithDeletableActive" ? {
        draft: info.context,
        siblingInfo: info.siblingInfo
      } : info.context));
    }
  }
  const deleteHelper = {
    getNonDeletableText,
    deleteConfirmHandler,
    getOptionsForDeletableTexts,
    updateContentForDeleteDialog,
    updateDraftOptionsForDeletableTexts,
    getConfirmedDeletableContext,
    getLockedObjectsText,
    getUnsavedContextsText,
    getNonDeletableActivesOfDraftsText,
    afterDeleteProcess,
    updateDeleteInfoForSelectedContexts,
    DeleteOptionTypes,
    DeleteDialogContentControl,
    setFocusAfterDelete
  };
  return deleteHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/DeleteHelper", ["sap/base/Log","sap/fe/core/controllerextensions/editFlow/draft","sap/m/CheckBox","sap/m/MessageToast","sap/m/Text"],function(e,t,n,o,s){"use strict";var l;(function(e){e["deletableContexts"]="deletableContexts";e["draftsWithDeletableActive"]="draftsWithDeletableActive";e["unSavedContexts"]="unSavedContexts";e["draftsWithNonDeletableActive"]="draftsWithNonDeletableActive";e["draftsToDeleteBeforeActive"]="draftsToDeleteBeforeActive"})(l||(l={}));var i;(function(e){e["CHECKBOX"]="checkBox";e["TEXT"]="text"})(i||(i={}));function E(e,t,n,o){const s=[...n];o.forEach(e=>{const t=s.indexOf(e);if(t!==-1){s.splice(t,1)}});e.setProperty(t,[]);return s}function a(e,t){let n=e.getProperty("selectedContexts")||[];if(t.type===l.deletableContexts){n=E(e,l.deletableContexts,n,e.getProperty(l.deletableContexts)||[]);const t=e.getProperty(l.draftsWithDeletableActive)||[];const o=t.map(e=>e.draft);n=E(e,l.draftsWithDeletableActive,n,o)}else{const o=e.getProperty(t.type)||[];n=E(e,t.type,n,o)}e.setProperty("selectedContexts",n);e.setProperty("numberOfSelectedContexts",n.length)}function r(e,t,n,s,l){const{internalModelContext:i,entitySetName:E}=e;if(i){if(i.getProperty("deleteEnabled")!=undefined){t.forEach(e=>{if(e.selected){a(i,e)}})}i.setProperty("deleteEnabled",t.some(e=>!e.selected))}if(n.length===1){o.show(s.getText("C_TRANSACTION_HELPER_DELETE_TOAST_SINGULAR",undefined,E))}else{o.show(s.getText("C_TRANSACTION_HELPER_DELETE_TOAST_PLURAL",undefined,E))}R.setFocusAfterDelete(e.parentControl,n.length,l)}async function _(e,t,n){var o;const s=(o=e.getRowBinding())===null||o===void 0?void 0:o.getCount();const l=(s??0)+t;let i;if(n!==-1&&s!==undefined&&s>0){if(n===l-1){i=s-1}else{i=n-t+1}await e.focusRow(i,false)}else{e.focus()}}function T(e){const t=e.getObject()["DraftAdministrativeData"];return t&&t["InProcessByUser"]||""}function c(e,t,n){let o="";if(t===1&&n.length===1){const t=T(n[0]);o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_OBJECT_LOCKED",[t])}else if(n.length==1){const s=T(n[0]);o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_LOCKED",[t,s])}else if(n.length>1){o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_LOCKED",[n.length,t])}return o}function f(e,t,n){let o="";if(n===t){if(t===1){o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFT_OF_NON_DELETABLE_ACTIVE")}else{o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_ONLY_DRAFTS_OF_NON_DELETABLE_ACTIVE")}}else if(t===1){o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFT_OF_NON_DELETABLE_ACTIVE")}else{o=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_DRAFTS_OF_NON_DELETABLE_ACTIVE")}return o}function C(e){const t=e.getObject()["DraftAdministrativeData"];let n="";if(t){n=t["LastChangedByUserDescription"]||t["LastChangedByUser"]||""}return n}function N(e,t,n,o){let s="",l="",i=false;if(t===1&&n.length===1){const t=C(n[0]);s=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES",[t]);i=true}else if(t===n.length){s=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_CHANGES_MULTIPLE_OBJECTS");i=true}else if(o===n.length){if(n.length===1){const t=C(n[0]);s=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_SINGULAR",[t])}else{s=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_UNSAVED_AND_FEW_OBJECTS_LOCKED_PLURAL")}i=true}else if(o>n.length){if(n.length===1){const t=C(n[0]);l=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_SINGULAR",[t])}else{l=e.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_UNSAVED_PLURAL")}}return{infoTxt:s,optionTxt:l,optionWithoutTxt:i}}function A(e,t,n){const{numberOfSelectedContexts:o,entitySetName:l,lockedContexts:i=[],draftsWithNonDeletableActive:E=[]}=e;const a=o-(i.length+t-E.length);let r="";if(a>0&&(t===0||E.length===t)){if(i.length>0){if(a===1){r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_SINGULAR")}else{r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_ALL_REMAINING_NON_DELETABLE_PLURAL")}}else if(a===1){r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_SINGLE_AND_ONE_OBJECT_NON_DELETABLE",undefined,l)}else{r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_MULTIPLE_AND_ALL_OBJECT_NON_DELETABLE",undefined,l)}}else if(a===1){r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_ONE_OBJECT_NON_DELETABLE",[o],l)}else if(a>1){r=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO_AND_FEW_OBJECTS_NON_DELETABLE",[a,o],l)}return r?new s({text:r}):undefined}function d(e,t){return t.reduce((e,t)=>t.selected&&t.type!==l.draftsToDeleteBeforeActive?e.concat(t.contexts):e,e)}function D(e){const t=[];return e.reduce((e,t)=>t.selected&&t.type===l.draftsToDeleteBeforeActive?e.concat(t.contexts):e,t)}function g(e,t,n,o,E,a){const{numberOfSelectedContexts:r,draftsWithDeletableActive:_,unSavedContexts:T,lockedContexts:c,draftsWithNonDeletableActive:f}=e;let C="";if(_.length>0){const e=[];_.forEach(n=>{e.push(n.draft);t.push(n.siblingInfo.targetContext)});if(e.length>0){a.push({type:l.draftsToDeleteBeforeActive,contexts:e,selected:true})}}if(c.length>0){C=R.getLockedObjectsText(o,r,c)||"";E.push(new s({text:C}))}const N=r!=n-f.length+c.length;const A=N&&R.getNonDeletableText(e,n,o);if(A){E.push(A)}if(T.length>0){const e=R.getUnsavedContextsText(o,r,T,n)||{};if(e.infoTxt){E.push(new s({text:e.infoTxt}))}if(e.optionTxt||e.optionWithoutTxt){a.push({type:l.unSavedContexts,contexts:T,text:e.optionTxt,selected:true,control:i.CHECKBOX})}}if(f.length>0){const e=R.getNonDeletableActivesOfDraftsText(o,f.length,n)||"";if(e){a.push({type:l.draftsWithNonDeletableActive,contexts:f,text:e,selected:true,control:n>0?i.CHECKBOX:i.TEXT})}}}function O(e,t){if(e.length===1){const n=e[0];if(n.text){t.push(new s({text:n.text}))}}else if(e.length>1){e.forEach(e=>{if(e.control==="text"&&e.text){t.push(new s({text:e.text}))}});e.forEach(e=>{if(e.control==="checkBox"&&e.text){t.push(new n({text:e.text,selected:true,select:function(t){const n=t.getSource();const o=n.getSelected();e.selected=o}}))}})}}function L(e,t){const{draftsWithDeletableActive:n}=e;const o=n.find(e=>e.siblingInfo.targetContext===t);return o!==null&&o!==void 0&&o.draft?o.draft:t}function u(e,t,n){const{numberOfSelectedContexts:o,entitySetName:s,parentControl:E,description:a,lockedContexts:r,draftsWithNonDeletableActive:_,unSavedContexts:T}=e;const c=t.length+_.length+T.length;const f=o-(r.length+c-_.length);const C=[];if(o===1&&o===t.length){const o=E;const r=o&&o.getParent().getIdentifierColumn();let _;let T=[];if(r){const o=a&&a.path;let l=t[0];let i=l.getObject();if(!i||Object.keys(i).length===0){l=L(e,l);i=l.getObject()}const E=r?i[r]:undefined;const c=o&&i[o];if(E){if(c&&a&&r!==a.path){T=[E+" ",c]}else{T=[E,""]}_=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTINFO",T,s)}else{_=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR",undefined,s)}}else{_=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR",undefined,s)}C.push({type:l.deletableContexts,contexts:t,text:_,selected:true,control:i.TEXT})}else if(T.length!==c&&o>0&&(t.length>0||T.length>0&&_.length>0)){if(o>t.length&&f+r.length>0){let e="";if(c===1){e=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR_NON_DELETABLE",undefined,s)}else{e=n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL_NON_DELETABLE",undefined,s)}C.unshift({type:l.deletableContexts,contexts:t,text:e,selected:true,control:i.TEXT})}else{const e=c===1?n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR",undefined,s):n.getText("C_TRANSACTION_HELPER_CONFIRM_DELETE_WITH_OBJECTTITLE_PLURAL",undefined,s);C.push({type:l.deletableContexts,contexts:t,text:e,selected:true,control:i.TEXT})}}return C}async function I(n,o,s,l,i,E){try{const a=R.getConfirmedDeletableContext([],n);const r=a[a.length-1].getIndex()??-1;const _=D(n);const{beforeDeleteCallBack:T,parentControl:c}=o;if(T){await T({contexts:a})}if(a&&a.length){try{const s=a.length===1?true:false;const T=[];await Promise.allSettled(_.map(async function(n){try{return await t.deleteDraft(n,i,s)}catch(t){e.error(`FE : core : DeleteHelper : Error while discarding draft with path : ${n.getPath()}`);T.push(t)}}));await Promise.all(a.map(function(e){if(E&&!e.getProperty("IsActiveEntity")){return t.deleteDraft(e,i,s)}return e.delete()}));await R.afterDeleteProcess(o,n,a,l,r);if(T.length>0){throw Error(`FE : core : DeleteHelper : Errors on draft delete : ${T}`)}}catch(e){await s.showMessageDialog({control:c});throw e}}}catch(e){await s.showMessages();throw e}}async function x(e,n){const o=n.map(e=>{const n=e.getModel().getMetaModel().getMetaContext(e.getCanonicalPath());const o=n.getProperty("@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable/$Path");const s=!o&&n.getProperty("@Org.OData.Capabilities.V1.DeleteRestrictions/Deletable")!==false;const l={context:e,isDraftRoot:!!n.getProperty("@com.sap.vocabularies.Common.v1.DraftRoot"),isDraftNode:!!n.getProperty("@com.sap.vocabularies.Common.v1.DraftNode"),isActive:true,hasActive:false,hasDraft:false,locked:false,deletable:o?e.getProperty(o):s,siblingPromise:Promise.resolve(undefined),siblingInfo:undefined,siblingDeletable:false};if(l.isDraftRoot){var i;l.locked=!!((i=e.getObject("DraftAdministrativeData"))!==null&&i!==void 0&&i.InProcessByUser);l.hasDraft=e.getProperty("HasDraftEntity")}if(l.isDraftRoot){l.isActive=e.getProperty("IsActiveEntity");l.hasActive=e.getProperty("HasActiveEntity");if(!l.isActive&&l.hasActive){l.siblingPromise=t.computeSiblingInformation(e,e).then(async e=>{l.siblingInfo=e;if(o){var t;l.siblingDeletable=await(e===null||e===void 0?void 0:(t=e.targetContext)===null||t===void 0?void 0:t.requestProperty(o))}else{l.siblingDeletable=s}})}}return l});await Promise.all(o.map(e=>e.siblingPromise));const s=[{key:"draftsWithDeletableActive",value:o.filter(e=>e.isDraftRoot&&!e.isActive&&e.hasActive&&e.siblingDeletable)},{key:"draftsWithNonDeletableActive",value:o.filter(e=>e.isDraftRoot&&!e.isActive&&e.hasActive&&!e.siblingDeletable)},{key:"lockedContexts",value:o.filter(e=>e.isDraftRoot&&e.isActive&&e.hasDraft&&e.locked)},{key:"unSavedContexts",value:o.filter(e=>e.isDraftRoot&&e.isActive&&e.hasDraft&&!e.locked)},{key:"deletableContexts",value:o.filter(e=>!e.isDraftRoot&&!e.isDraftNode&&e.deletable||e.isDraftRoot&&e.isActive&&!e.hasDraft&&e.deletable||e.isDraftRoot&&!e.isActive&&!e.hasActive||e.isDraftNode&&e.deletable)}];for(const{key:t,value:n}of s){e.setProperty(t,n.map(e=>t==="draftsWithDeletableActive"?{draft:e.context,siblingInfo:e.siblingInfo}:e.context))}}const R={getNonDeletableText:A,deleteConfirmHandler:I,getOptionsForDeletableTexts:u,updateContentForDeleteDialog:O,updateDraftOptionsForDeletableTexts:g,getConfirmedDeletableContext:d,getLockedObjectsText:c,getUnsavedContextsText:N,getNonDeletableActivesOfDraftsText:f,afterDeleteProcess:r,updateDeleteInfoForSelectedContexts:x,DeleteOptionTypes:l,DeleteDialogContentControl:i,setFocusAfterDelete:_};return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/DynamicAnnotationPathHelper-dbg", ["sap/ui/base/BindingParser"], function (BindingParser) {
  "use strict";

  var _exports = {};
  function getObject(oObject, sPath) {
    if (!oObject) {
      return null;
    }
    const sPathSplit = sPath.split("/");
    if (sPathSplit.length === 1) {
      return oObject[sPath];
    } else {
      return getObject(oObject[sPathSplit[0]], sPathSplit.splice(1).join("/"));
    }
  }
  /**
   * Resolve a dynamic annotation path down to a standard annotation path.
   *
   * @param sAnnotationPath
   * @param oMetaModel
   * @returns The non dynamic version of the annotation path
   */
  function resolveDynamicExpression(sAnnotationPath, oMetaModel) {
    if (sAnnotationPath.indexOf("[") !== -1) {
      const firstBracket = sAnnotationPath.indexOf("[");
      const sStableBracket = sAnnotationPath.substr(0, firstBracket);
      const sRest = sAnnotationPath.substr(firstBracket + 1);
      const lastBracket = sRest.indexOf("]");
      const aValue = oMetaModel.getObject(sStableBracket);
      const oExpression = BindingParser.parseExpression(sRest.substr(0, lastBracket));
      if (Array.isArray(aValue) && oExpression && oExpression.result && oExpression.result.parts && oExpression.result.parts[0] && oExpression.result.parts[0].path) {
        let i;
        let bFound = false;
        for (i = 0; i < aValue.length && !bFound; i++) {
          const oObjectValue = getObject(aValue[i], oExpression.result.parts[0].path);
          const bResult = oExpression.result.formatter(oObjectValue);
          if (bResult) {
            bFound = true;
          }
        }
        if (bFound) {
          sAnnotationPath = resolveDynamicExpression(sStableBracket + (i - 1) + sRest.substr(lastBracket + 1), oMetaModel);
        }
      }
    }
    return sAnnotationPath;
  }
  _exports.resolveDynamicExpression = resolveDynamicExpression;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/DynamicAnnotationPathHelper", ["sap/ui/base/BindingParser"],function(s){"use strict";var t={};function r(s,t){if(!s){return null}const e=t.split("/");if(e.length===1){return s[t]}else{return r(s[e[0]],e.splice(1).join("/"))}}function e(t,n){if(t.indexOf("[")!==-1){const i=t.indexOf("[");const u=t.substr(0,i);const a=t.substr(i+1);const l=a.indexOf("]");const o=n.getObject(u);const f=s.parseExpression(a.substr(0,l));if(Array.isArray(o)&&f&&f.result&&f.result.parts&&f.result.parts[0]&&f.result.parts[0].path){let s;let i=false;for(s=0;s<o.length&&!i;s++){const t=r(o[s],f.result.parts[0].path);const e=f.result.formatter(t);if(e){i=true}}if(i){t=e(u+(s-1)+a.substr(l+1),n)}}}return t}t.resolveDynamicExpression=e;return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/EditState-dbg", [], function () {
  "use strict";

  const enumEditState = {
    CLEAN: 0,
    PROCESSED: 1,
    DIRTY: 2
  };
  let currentEditState = enumEditState.CLEAN;
  return {
    /**
     * This sets the edit state as dirty, meaning bindings have to be refreshed.
     *
     * @function
     * @name sap.fe.core.helpers.EditState#setEditStateDirty
     * @memberof sap.fe.core.helpers.EditState
     * @ui5-restricted
     * @final
     */
    setEditStateDirty: function () {
      currentEditState = enumEditState.DIRTY;
    },
    /**
     * This sets the edit state as processed, meaning is can be reset to clean after all bindings are refreshed.
     *
     * @function
     * @name sap.fe.core.helpers.EditState#setEditStateProcessed
     * @memberof sap.fe.core.helpers.EditState
     * @ui5-restricted
     * @final
     */
    setEditStateProcessed: function () {
      currentEditState = enumEditState.PROCESSED;
    },
    /**
     * Resets the edit state to the initial state.
     *
     * @function
     * @name sap.fe.core.helpers.EditState#resetEditState
     * @memberof sap.fe.core.helpers.EditState
     * @ui5-restricted
     * @final
     */
    resetEditState: function () {
      currentEditState = enumEditState.CLEAN;
    },
    /**
     * Returns true if the edit state is not clean, meaning bindings have to be refreshed
     *
     * @function
     * @name sap.fe.core.helpers.EditState#isEditStateDirty
     * @memberof sap.fe.core.helpers.EditState
     * @ui5-restricted
     * @final
     */

    isEditStateDirty: function () {
      return currentEditState !== enumEditState.CLEAN;
    },
    /**
     * Cleans the edit state if it has been processed, i.e. bindings have been properly refreshed.
     *
     * @function
     * @name sap.fe.core.helpers.EditState#cleanProcessedEditState
     * @memberof sap.fe.core.helpers.EditState
     * @ui5-restricted
     * @final
     */
    cleanProcessedEditState: function () {
      if (currentEditState === enumEditState.PROCESSED) {
        currentEditState = enumEditState.CLEAN;
      }
    }
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/EditState", [],function(){"use strict";const t={CLEAN:0,PROCESSED:1,DIRTY:2};let e=t.CLEAN;return{setEditStateDirty:function(){e=t.DIRTY},setEditStateProcessed:function(){e=t.PROCESSED},resetEditState:function(){e=t.CLEAN},isEditStateDirty:function(){return e!==t.CLEAN},cleanProcessedEditState:function(){if(e===t.PROCESSED){e=t.CLEAN}}}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ExcelFormatHelper-dbg", ["sap/ui/core/format/DateFormat"], function (DateFormat) {
  "use strict";

  const ExcelFormatHelper = {
    /**
     * Method for converting JS Date format to Excel custom date format.
     *
     * @returns Format for the Date column to be used on excel.
     */
    getExcelDatefromJSDate: function () {
      // Get date Format(pattern), which will be used for date format mapping between sapui5 and excel.
      // UI5_ANY
      let sJSDateFormat = DateFormat.getDateInstance().oFormatOptions.pattern.toLowerCase();
      if (sJSDateFormat) {
        // Checking for the existence of single 'y' in the pattern.
        const regex = /^[^y]*y[^y]*$/m;
        if (regex.exec(sJSDateFormat)) {
          sJSDateFormat = sJSDateFormat.replace("y", "yyyy");
        }
      }
      return sJSDateFormat;
    },
    getExcelDateTimefromJSDateTime: function () {
      // Get date Format(pattern), which will be used for date time format mapping between sapui5 and excel.
      // UI5_ANY
      let sJSDateTimeFormat = DateFormat.getDateTimeInstance().oFormatOptions.pattern.toLowerCase();
      if (sJSDateTimeFormat) {
        // Checking for the existence of single 'y' in the pattern.
        const regexYear = /^[^y]*y[^y]*$/m;
        if (regexYear.exec(sJSDateTimeFormat)) {
          sJSDateTimeFormat = sJSDateTimeFormat.replace("y", "yyyy");
        }
        if (sJSDateTimeFormat.includes("a")) {
          sJSDateTimeFormat = sJSDateTimeFormat.replace("a", "AM/PM");
        }
      }
      return sJSDateTimeFormat;
    },
    getExcelTimefromJSTime: function () {
      // Get date Format(pattern), which will be used for date time format mapping between sapui5 and excel.
      // UI5_ANY
      let sJSTimeFormat = DateFormat.getTimeInstance().oFormatOptions.pattern;
      if (sJSTimeFormat && sJSTimeFormat.includes("a")) {
        sJSTimeFormat = sJSTimeFormat.replace("a", "AM/PM");
      }
      return sJSTimeFormat;
    }
  };
  return ExcelFormatHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ExcelFormatHelper", ["sap/ui/core/format/DateFormat"],function(e){"use strict";const t={getExcelDatefromJSDate:function(){let t=e.getDateInstance().oFormatOptions.pattern.toLowerCase();if(t){const e=/^[^y]*y[^y]*$/m;if(e.exec(t)){t=t.replace("y","yyyy")}}return t},getExcelDateTimefromJSDateTime:function(){let t=e.getDateTimeInstance().oFormatOptions.pattern.toLowerCase();if(t){const e=/^[^y]*y[^y]*$/m;if(e.exec(t)){t=t.replace("y","yyyy")}if(t.includes("a")){t=t.replace("a","AM/PM")}}return t},getExcelTimefromJSTime:function(){let t=e.getTimeInstance().oFormatOptions.pattern;if(t&&t.includes("a")){t=t.replace("a","AM/PM")}return t}};return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/FPMHelper-dbg", ["sap/base/util/ObjectPath", "sap/fe/core/CommonUtils"], function (ObjectPath, CommonUtils) {
  "use strict";

  const FPMHelper = {
    actionWrapper: function (oEvent, sModule, sMethod, oParameters) {
      return new Promise(function (resolve) {
        //The source would be command execution, in case a command is defined for the action in the manifest.
        const oSource = oEvent.getSource ? oEvent.getSource() : oEvent.oSource,
          oView = CommonUtils.getTargetView(oSource),
          oBindingContext = oSource.getBindingContext();
        let oExtensionAPI;
        let aSelectedContexts;
        if (oParameters !== undefined) {
          aSelectedContexts = oParameters.contexts || [];
        } else if (oBindingContext !== undefined) {
          aSelectedContexts = [oBindingContext];
        } else {
          aSelectedContexts = [];
        }
        if (oView.getControllerName() === "sap.fe.templates.ObjectPage.ObjectPageController" || oView.getControllerName() === "sap.fe.templates.ListReport.ListReportController") {
          oExtensionAPI = oView.getController().getExtensionAPI();
        }
        if (sModule.startsWith("/extension/")) {
          const fnTarget = ObjectPath.get(sModule.replace(/\//g, ".").substr(1), oExtensionAPI);
          resolve(fnTarget[sMethod](oBindingContext, aSelectedContexts));
        } else {
          sap.ui.require([sModule], function (module) {
            // - we bind the action to the extensionAPI of the controller so it has the same scope as a custom section
            // - we provide the context as API, maybe if needed further properties
            resolve(module[sMethod].bind(oExtensionAPI)(oBindingContext, aSelectedContexts));
          });
        }
      });
    },
    validationWrapper: function (sModule, sMethod, oValidationContexts, oView, oBindingContext) {
      return new Promise(function (resolve) {
        let oExtensionAPI;
        if (oView.getControllerName() === "sap.fe.templates.ObjectPage.ObjectPageController" || oView.getControllerName() === "sap.fe.templates.ListReport.ListReportController") {
          oExtensionAPI = oView.getController().getExtensionAPI();
        }
        sap.ui.require([sModule], function (module) {
          // - we bind the action to the extensionAPI of the controller so it has the same scope as a custom section
          // - we provide the context as API, maybe if needed further properties
          resolve(module[sMethod].bind(oExtensionAPI)(oBindingContext, oValidationContexts));
        });
      });
    }
  };
  return FPMHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/FPMHelper", ["sap/base/util/ObjectPath","sap/fe/core/CommonUtils"],function(e,t){"use strict";const n={actionWrapper:function(n,o,r,i){return new Promise(function(s){const l=n.getSource?n.getSource():n.oSource,a=t.getTargetView(l),c=l.getBindingContext();let u;let p;if(i!==undefined){p=i.contexts||[]}else if(c!==undefined){p=[c]}else{p=[]}if(a.getControllerName()==="sap.fe.templates.ObjectPage.ObjectPageController"||a.getControllerName()==="sap.fe.templates.ListReport.ListReportController"){u=a.getController().getExtensionAPI()}if(o.startsWith("/extension/")){const t=e.get(o.replace(/\//g,".").substr(1),u);s(t[r](c,p))}else{sap.ui.require([o],function(e){s(e[r].bind(u)(c,p))})}})},validationWrapper:function(e,t,n,o,r){return new Promise(function(i){let s;if(o.getControllerName()==="sap.fe.templates.ObjectPage.ObjectPageController"||o.getControllerName()==="sap.fe.templates.ListReport.ListReportController"){s=o.getController().getExtensionAPI()}sap.ui.require([e],function(e){i(e[t].bind(s)(r,n))})})}};return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/KeepAliveHelper-dbg", ["sap/base/Log", "sap/fe/core/helpers/KeepAliveRefreshTypes", "./ModelHelper"], function (Log, KeepAliveRefreshTypes, ModelHelper) {
  "use strict";

  var RefreshStrategyType = KeepAliveRefreshTypes.RefreshStrategyType;
  var PATH_TO_STORE = KeepAliveRefreshTypes.PATH_TO_STORE;
  // Private functions - start
  const _fnSimplifyEntitySetPath = function (metaModel, entitySetPathToUse) {
    const entitySetPath = ModelHelper.getEntitySetPath(entitySetPathToUse);
    const entitySet = entitySetPath.indexOf("$NavigationPropertyBinding") > -1 && metaModel.getObject(entitySetPath);
    return entitySet ? `/${entitySet}` : entitySetPathToUse;
  };
  const _fnIsApplicable = function (primaryPath, key, strategy) {
    return primaryPath === key || strategy === RefreshStrategyType.IncludingDependents && primaryPath.startsWith(key);
  };
  /**
   * Check if given path resides in the context path provided.
   *
   * @param metaModel MetaModel to be used
   * @param contextPath Context path to be used
   * @param path Path to be used
   * @param strategy Strategy, it could be 'self' | 'includingDependents'
   * @returns Returns true if the context path is applicable.
   */
  const _isPathApplicableToContextPath = function (metaModel, contextPath, path, strategy) {
    let contextPathToCheck = contextPath.startsWith("/") ? contextPath : `/${contextPath}`,
      pathToCheck = path.startsWith("/") ? path : `/${path}`;
    if (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {
      contextPathToCheck = _fnSimplifyEntitySetPath(metaModel, contextPathToCheck);
      if (!_fnIsApplicable(contextPathToCheck, pathToCheck, strategy)) {
        pathToCheck = _fnSimplifyEntitySetPath(metaModel, pathToCheck);
      } else {
        return true;
      }
    }
    return _fnIsApplicable(contextPathToCheck, pathToCheck, strategy);
  };
  // Private functions - end
  /**
   * Get controls to refresh in a view.
   *
   * @param view View of the controls
   * @param controls Context path to be used
   * @returns Returns controls that need to be refreshed.
   */
  const getControlsForRefresh = function (view, controls) {
    const controlsForRefresh = [];
    const metaModel = view.getModel().getMetaModel();
    const internalModel = view.getModel("internal");
    const refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};
    if (controls) {
      controls.forEach(function (control) {
        const contextPath = control.data("targetCollectionPath");
        for (const key in refreshStrategy) {
          const strategy = refreshStrategy[key];
          if (controlsForRefresh.indexOf(control) === -1 && _isPathApplicableToContextPath(metaModel, contextPath, key, strategy)) {
            controlsForRefresh.push(control);
          }
        }
      });
    }
    return controlsForRefresh;
  };
  /**
   * Get refresh strategy for the control for a context path.
   *
   * @param control Control from which refresh info is needed
   * @param contextPath ContextPath for properities
   * @returns Returns strategy for control refresh.
   */
  const getControlRefreshStrategyForContextPath = function (control, contextPath) {
    const metaModel = control.getModel().getMetaModel();
    const internalModel = control.getModel("internal");
    const refreshStrategy = internalModel.getProperty(PATH_TO_STORE) || {};
    let strategy;
    if (contextPath) {
      for (const key in refreshStrategy) {
        const strategyToCheck = refreshStrategy[key];
        if (_isPathApplicableToContextPath(metaModel, contextPath, key, strategyToCheck)) {
          strategy = strategyToCheck;
          if (strategy === "includingDependents") {
            break;
          }
        }
      }
    }
    return strategy;
  };
  /**
   * Get refresh info from view.
   *
   * @param view View from which refresh info is needed
   * @returns Returns strategy for view refresh.
   */
  const getViewRefreshInfo = function (view) {
    const viewData = view.getViewData(),
      contextPath = viewData && ((viewData === null || viewData === void 0 ? void 0 : viewData.contextPath) || `/${viewData === null || viewData === void 0 ? void 0 : viewData.entitySet}`);
    return KeepAliveHelper.getControlRefreshStrategyForContextPath(view, contextPath);
  };

  /**
   * Get refresh strategy for an intent.
   *
   * @param refreshStrategies RefreshStrategies to consider
   * @param semanticObject Outbound Semantic Object
   * @param action Outbound Action
   * @returns Returns refresh strategies to use for the intent.
   */
  const getRefreshStrategyForIntent = function (refreshStrategies, semanticObject, action) {
    const soAction = semanticObject && action && `${semanticObject}-${action}`;
    const intents = refreshStrategies.intents;
    const soActionIntentMatch = intents && soAction && intents[soAction];
    const soIntentMatch = !soActionIntentMatch && intents && semanticObject && intents[semanticObject];
    return soActionIntentMatch || soIntentMatch || (refreshStrategies === null || refreshStrategies === void 0 ? void 0 : refreshStrategies.defaultBehavior) || (refreshStrategies === null || refreshStrategies === void 0 ? void 0 : refreshStrategies._feDefault);
  };
  /**
   * Store control refresh strategy for hash in the internal model.
   *
   * @param control Control for the refresh strategy
   * @param hash Shell hash object
   */
  const storeControlRefreshStrategyForHash = function (control, hash) {
    if (control && control.getModel("viewData") && control.getModel("internal")) {
      const viewData = control.getModel("viewData");
      const refreshStrategies = viewData.getProperty(PATH_TO_STORE);
      if (refreshStrategies) {
        const internalModel = control.getModel("internal");
        const refreshStrategy = KeepAliveHelper.getRefreshStrategyForIntent(refreshStrategies, hash === null || hash === void 0 ? void 0 : hash.semanticObject, hash === null || hash === void 0 ? void 0 : hash.action);
        internalModel.setProperty(PATH_TO_STORE, refreshStrategy);
      }
    }
  };

  /**
   * Method to refresh and restore the view if neccessary.
   *
   * @param view Control for the refresh strategy
   * @returns A promise after view refresh and restore are triggered
   */
  const restoreView = function (view) {
    const internalModelContext = view.getBindingContext("internal");
    const controller = view.getController();
    const viewState = controller === null || controller === void 0 ? void 0 : controller.viewState;
    let refreshBindings = Promise.resolve();
    if (internalModelContext && internalModelContext.getProperty("restoreStatus") === "pending") {
      if (viewState.refreshViewBindings) {
        refreshBindings = viewState.refreshViewBindings();
        refreshBindings.then(function () {
          Log.info(`FE V4: Refresh was triggered successfull: ${view.getId()}`);
        }).catch(function (err) {
          Log.warning(`FE V4: Refresh was unsuccessfull: ${view.getId()}`, err);
        });
      }
      refreshBindings = refreshBindings.then(function () {
        viewState.onRestore();
        internalModelContext.setProperty("restoreStatus", "done");
      }).catch(function (error) {
        Log.warning(`FE V4: Restore was unsuccessfull: ${view.getId()}`, error);
      });
    }
    return refreshBindings;
  };

  /**
   * helper class for KeepAlive feature in sap.fe.
   */
  const KeepAliveHelper = {
    getControlsForRefresh,
    getControlRefreshStrategyForContextPath,
    getViewRefreshInfo,
    getRefreshStrategyForIntent,
    storeControlRefreshStrategyForHash,
    restoreView
  };
  return KeepAliveHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/KeepAliveHelper", ["sap/base/Log","sap/fe/core/helpers/KeepAliveRefreshTypes","./ModelHelper"],function(t,e,n){"use strict";var o=e.RefreshStrategyType;var r=e.PATH_TO_STORE;const s=function(t,e){const o=n.getEntitySetPath(e);const r=o.indexOf("$NavigationPropertyBinding")>-1&&t.getObject(o);return r?`/${r}`:e};const i=function(t,e,n){return t===e||n===o.IncludingDependents&&t.startsWith(e)};const c=function(t,e,n,o){let r=e.startsWith("/")?e:`/${e}`,c=n.startsWith("/")?n:`/${n}`;if(!i(r,c,o)){r=s(t,r);if(!i(r,c,o)){c=s(t,c)}else{return true}}return i(r,c,o)};const a=function(t,e){const n=[];const o=t.getModel().getMetaModel();const s=t.getModel("internal");const i=s.getProperty(r)||{};if(e){e.forEach(function(t){const e=t.data("targetCollectionPath");for(const r in i){const s=i[r];if(n.indexOf(t)===-1&&c(o,e,r,s)){n.push(t)}}})}return n};const l=function(t,e){const n=t.getModel().getMetaModel();const o=t.getModel("internal");const s=o.getProperty(r)||{};let i;if(e){for(const t in s){const o=s[t];if(c(n,e,t,o)){i=o;if(i==="includingDependents"){break}}}}return i};const f=function(t){const e=t.getViewData(),n=e&&((e===null||e===void 0?void 0:e.contextPath)||`/${e===null||e===void 0?void 0:e.entitySet}`);return h.getControlRefreshStrategyForContextPath(t,n)};const u=function(t,e,n){const o=e&&n&&`${e}-${n}`;const r=t.intents;const s=r&&o&&r[o];const i=!s&&r&&e&&r[e];return s||i||(t===null||t===void 0?void 0:t.defaultBehavior)||(t===null||t===void 0?void 0:t._feDefault)};const g=function(t,e){if(t&&t.getModel("viewData")&&t.getModel("internal")){const n=t.getModel("viewData");const o=n.getProperty(r);if(o){const n=t.getModel("internal");const s=h.getRefreshStrategyForIntent(o,e===null||e===void 0?void 0:e.semanticObject,e===null||e===void 0?void 0:e.action);n.setProperty(r,s)}}};const d=function(e){const n=e.getBindingContext("internal");const o=e.getController();const r=o===null||o===void 0?void 0:o.viewState;let s=Promise.resolve();if(n&&n.getProperty("restoreStatus")==="pending"){if(r.refreshViewBindings){s=r.refreshViewBindings();s.then(function(){t.info(`FE V4: Refresh was triggered successfull: ${e.getId()}`)}).catch(function(n){t.warning(`FE V4: Refresh was unsuccessfull: ${e.getId()}`,n)})}s=s.then(function(){r.onRestore();n.setProperty("restoreStatus","done")}).catch(function(n){t.warning(`FE V4: Restore was unsuccessfull: ${e.getId()}`,n)})}return s};const h={getControlsForRefresh:a,getControlRefreshStrategyForContextPath:l,getViewRefreshInfo:f,getRefreshStrategyForIntent:u,storeControlRefreshStrategyForHash:g,restoreView:d};return h},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/KeepAliveRefreshTypes-dbg", [], function () {
  "use strict";

  var _exports = {};
  /**
   * Enumeration for supported refresh strategy type
   */
  let RefreshStrategyType;
  /**
   * Configuration of a RefreshStrategy
   */
  (function (RefreshStrategyType) {
    RefreshStrategyType["Self"] = "self";
    RefreshStrategyType["IncludingDependents"] = "includingDependents";
  })(RefreshStrategyType || (RefreshStrategyType = {}));
  _exports.RefreshStrategyType = RefreshStrategyType;
  /**
   * Path used to store information
   */
  const PATH_TO_STORE = "/refreshStrategyOnAppRestore";
  _exports.PATH_TO_STORE = PATH_TO_STORE;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/KeepAliveRefreshTypes", [],function(){"use strict";var e={};let n;(function(e){e["Self"]="self";e["IncludingDependents"]="includingDependents"})(n||(n={}));e.RefreshStrategyType=n;const t="/refreshStrategyOnAppRestore";e.PATH_TO_STORE=t;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/LoaderUtils-dbg", [], function () {
  "use strict";

  var _exports = {};
  async function requireDependencies(dependencyNames) {
    let resolveFn;
    const awaiter = new Promise(resolve => {
      resolveFn = resolve;
    });
    if (dependencyNames.length > 0) {
      sap.ui.require(dependencyNames, function () {
        for (var _len = arguments.length, dependencies = new Array(_len), _key = 0; _key < _len; _key++) {
          dependencies[_key] = arguments[_key];
        }
        resolveFn(dependencies);
      });
    } else {
      resolveFn([]);
    }
    return awaiter;
  }
  _exports.requireDependencies = requireDependencies;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/LoaderUtils", [],function(){"use strict";var e={};async function n(e){let n;const r=new Promise(e=>{n=e});if(e.length>0){sap.ui.require(e,function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++){r[i]=arguments[i]}n(r)})}else{n([])}return r}e.requireDependencies=n;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MassEditHelper-dbg", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/library", "sap/fe/core/TemplateModel", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/PropertyHelper", "sap/fe/macros/field/FieldTemplating", "sap/fe/macros/table/TableHelper", "sap/m/Button", "sap/m/Dialog", "sap/m/MessageToast", "sap/ui/core/Core", "sap/ui/core/Fragment", "sap/ui/core/util/XMLPreprocessor", "sap/ui/core/XMLTemplateProcessor", "sap/ui/mdc/enum/EditMode", "sap/ui/model/json/JSONModel", "../controllerextensions/messageHandler/messageHandling", "../controls/Any", "../converters/MetaModelConverter", "../templating/FieldControlHelper", "../templating/UIFormatters"], function (Log, CommonUtils, BindingToolkit, TypeGuards, FELibrary, TemplateModel, DataModelPathHelper, PropertyHelper, FieldTemplating, TableHelper, Button, Dialog, MessageToast, Core, Fragment, XMLPreprocessor, XMLTemplateProcessor, EditMode, JSONModel, messageHandling, Any, MetaModelConverter, FieldControlHelper, UIFormatters) {
  "use strict";

  var isMultiValueField = UIFormatters.isMultiValueField;
  var getRequiredExpression = UIFormatters.getRequiredExpression;
  var getEditMode = UIFormatters.getEditMode;
  var isReadOnlyExpression = FieldControlHelper.isReadOnlyExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var setEditStyleProperties = FieldTemplating.setEditStyleProperties;
  var getTextBinding = FieldTemplating.getTextBinding;
  var hasValueHelpWithFixedValues = PropertyHelper.hasValueHelpWithFixedValues;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var hasUnit = PropertyHelper.hasUnit;
  var hasCurrency = PropertyHelper.hasCurrency;
  var getAssociatedUnitPropertyPath = PropertyHelper.getAssociatedUnitPropertyPath;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isProperty = TypeGuards.isProperty;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var ifElse = BindingToolkit.ifElse;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  const MassEditHelper = {
    /**
     * Initializes the value at final or deepest level path with a blank array.
     * Return an empty array pointing to the final or deepest level path.
     *
     * @param sPath Property path
     * @param aValues Array instance where the default data needs to be added
     * @returns The final path
     */
    initLastLevelOfPropertyPath: function (sPath, aValues) {
      let aFinalPath;
      let index = 0;
      const aPaths = sPath.split("/");
      let sFullPath = "";
      aPaths.forEach(function (sPropertyPath) {
        if (!aValues[sPropertyPath] && index === 0) {
          aValues[sPropertyPath] = {};
          aFinalPath = aValues[sPropertyPath];
          sFullPath = sFullPath + sPropertyPath;
          index++;
        } else if (!aFinalPath[sPropertyPath]) {
          sFullPath = `${sFullPath}/${sPropertyPath}`;
          if (sFullPath !== sPath) {
            aFinalPath[sPropertyPath] = {};
            aFinalPath = aFinalPath[sPropertyPath];
          } else {
            aFinalPath[sPropertyPath] = [];
          }
        }
      });
      return aFinalPath;
    },
    /**
     * Method to get unique values for given array values.
     *
     * @param sValue Property value
     * @param index Index of the property value
     * @param self Instance of the array
     * @returns The unique value
     */
    getUniqueValues: function (sValue, index, self) {
      return sValue != undefined && sValue != null ? self.indexOf(sValue) === index : undefined;
    },
    /**
     * Gets the property value for a multi-level path (for example: _Materials/Material_Details gets the value of Material_Details under _Materials Object).
     * Returns the propertyValue, which can be of any type (string, number, etc..).
     *
     * @param sDataPropertyPath Property path
     * @param oValues Object of property values
     * @returns The property value
     */
    getValueForMultiLevelPath: function (sDataPropertyPath, oValues) {
      let result;
      if (sDataPropertyPath && sDataPropertyPath.indexOf("/") > 0) {
        const aPropertyPaths = sDataPropertyPath.split("/");
        aPropertyPaths.forEach(function (sPath) {
          result = oValues && oValues[sPath] ? oValues[sPath] : result && result[sPath];
        });
      }
      return result;
    },
    /**
     * Gets the key path for the key of a combo box that must be selected initially when the dialog opens:
     * => If propertyValue for all selected contexts is different, then < Keep Existing Values > is preselected.
     * => If propertyValue for all selected contexts is the same, then the propertyValue is preselected.
     * => If propertyValue for all selected contexts is empty, then < Leave Blank > is preselected.
     *
     *
     * @param aContexts Contexts for mass edit
     * @param sDataPropertyPath Data property path
     * @returns The key path
     */
    getDefaultSelectionPathComboBox: function (aContexts, sDataPropertyPath) {
      let result;
      if (sDataPropertyPath && aContexts.length > 0) {
        const oSelectedContext = aContexts,
          aPropertyValues = [];
        oSelectedContext.forEach(function (oContext) {
          const oDataObject = oContext.getObject();
          const sMultiLevelPathCondition = sDataPropertyPath.indexOf("/") > -1 && oDataObject.hasOwnProperty(sDataPropertyPath.split("/")[0]);
          if (oContext && (oDataObject.hasOwnProperty(sDataPropertyPath) || sMultiLevelPathCondition)) {
            aPropertyValues.push(oContext.getObject(sDataPropertyPath));
          }
        });
        const aUniquePropertyValues = aPropertyValues.filter(MassEditHelper.getUniqueValues);
        if (aUniquePropertyValues.length > 1) {
          result = `Default/${sDataPropertyPath}`;
        } else if (aUniquePropertyValues.length === 0) {
          result = `Empty/${sDataPropertyPath}`;
        } else if (aUniquePropertyValues.length === 1) {
          result = `${sDataPropertyPath}/${aUniquePropertyValues[0]}`;
        }
      }
      return result;
    },
    /**
     * Checks hidden annotation value [both static and path based] for table's selected context.
     *
     * @param hiddenValue Hidden annotation value / path for field
     * @param aContexts Contexts for mass edit
     * @returns The hidden annotation value
     */
    getHiddenValueForContexts: function (hiddenValue, aContexts) {
      if (hiddenValue && hiddenValue.$Path) {
        return !aContexts.some(function (oSelectedContext) {
          return oSelectedContext.getObject(hiddenValue.$Path) === false;
        });
      }
      return hiddenValue;
    },
    getInputType: function (propertyInfo, dataFieldConverted, oDataModelPath) {
      const editStyleProperties = {};
      let inputType;
      if (propertyInfo) {
        setEditStyleProperties(editStyleProperties, dataFieldConverted, oDataModelPath, true);
        inputType = (editStyleProperties === null || editStyleProperties === void 0 ? void 0 : editStyleProperties.editStyle) || "";
      }
      const isValidForMassEdit = inputType && ["DatePicker", "TimePicker", "DateTimePicker", "RatingIndicator"].indexOf(inputType) === -1 && !isMultiValueField(oDataModelPath) && !hasValueHelpWithFixedValues(propertyInfo);
      return (isValidForMassEdit || "") && inputType;
    },
    getIsFieldGrp: function (dataFieldConverted) {
      return dataFieldConverted && dataFieldConverted.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && dataFieldConverted.Target && dataFieldConverted.Target.value && dataFieldConverted.Target.value.indexOf("FieldGroup") > -1;
    },
    /**
     * Get text path for the mass edit field.
     *
     * @param property Property path
     * @param textBinding Text Binding Info
     * @param displayMode Display mode
     * @returns Text Property Path if it exists
     */
    getTextPath: function (property, textBinding, displayMode) {
      let descriptionPath;
      if (textBinding && (textBinding.path || textBinding.parameters && textBinding.parameters.length) && property) {
        if (textBinding.path && displayMode === "Description") {
          descriptionPath = textBinding.path;
        } else if (textBinding.parameters) {
          textBinding.parameters.forEach(function (props) {
            if (props.path && props.path !== property) {
              descriptionPath = props.path;
            }
          });
        }
      }
      return descriptionPath;
    },
    /**
     * Initializes a JSON Model for properties of dialog fields [label, visiblity, dataproperty, etc.].
     *
     * @param oTable Instance of Table
     * @param aContexts Contexts for mass edit
     * @param aDataArray Array containing data related to the dialog used by both the static and the runtime model
     * @returns The model
     */
    prepareDataForDialog: function (oTable, aContexts, aDataArray) {
      const oMetaModel = oTable && oTable.getModel().getMetaModel(),
        sCurrentEntitySetName = oTable.data("metaPath"),
        aTableFields = MassEditHelper.getTableFields(oTable),
        oEntityTypeContext = oMetaModel.getContext(`${sCurrentEntitySetName}/@`),
        oEntitySetContext = oMetaModel.getContext(sCurrentEntitySetName),
        oDataModelObjectPath = getInvolvedDataModelObjects(oEntityTypeContext);
      const oDataFieldModel = new JSONModel();
      let oResult;
      let sLabelText;
      let bValueHelpEnabled;
      let sUnitPropertyPath;
      let bValueHelpEnabledForUnit;
      let oTextBinding;
      aTableFields.forEach(function (oColumnInfo) {
        if (!oColumnInfo.annotationPath) {
          return;
        }
        const sDataPropertyPath = oColumnInfo.dataProperty;
        if (sDataPropertyPath) {
          var _oDataFieldConverted$, _oDataFieldConverted$2, _oDataFieldConverted$3, _oDataFieldConverted$4, _oPropertyInfo, _oPropertyInfo$annota, _oPropertyInfo$annota2, _unitPropertyInfo$ann, _unitPropertyInfo$ann2;
          let oPropertyInfo = sDataPropertyPath && oMetaModel.getObject(`${sCurrentEntitySetName}/${sDataPropertyPath}@`);
          sLabelText = oColumnInfo.label || oPropertyInfo && oPropertyInfo["@com.sap.vocabularies.Common.v1.Label"] || sDataPropertyPath;
          if (oDataModelObjectPath) {
            oDataModelObjectPath.targetObject = oDataModelObjectPath.targetEntityType.entityProperties.filter(function (oProperty) {
              return oProperty.name === sDataPropertyPath;
            });
          }
          oDataModelObjectPath.targetObject = oDataModelObjectPath.targetObject[0] || {};
          oTextBinding = getTextBinding(oDataModelObjectPath, {}, true) || {};
          const oFieldContext = oMetaModel.getContext(oColumnInfo.annotationPath),
            oDataFieldConverted = convertMetaModelContext(oFieldContext),
            oPropertyContext = oMetaModel.getContext(`${sCurrentEntitySetName}/${sDataPropertyPath}@`),
            oInterface = oPropertyContext && oPropertyContext.getInterface();
          let oDataModelPath = getInvolvedDataModelObjects(oFieldContext, oEntitySetContext);
          if ((oDataFieldConverted === null || oDataFieldConverted === void 0 ? void 0 : (_oDataFieldConverted$ = oDataFieldConverted.Value) === null || _oDataFieldConverted$ === void 0 ? void 0 : (_oDataFieldConverted$2 = _oDataFieldConverted$.path) === null || _oDataFieldConverted$2 === void 0 ? void 0 : _oDataFieldConverted$2.length) > 0) {
            oDataModelPath = enhanceDataModelPath(oDataModelPath, sDataPropertyPath);
          }
          const bHiddenField = MassEditHelper.getHiddenValueForContexts(oFieldContext && oFieldContext.getObject()["@com.sap.vocabularies.UI.v1.Hidden"], aContexts) || false;
          const isImage = oPropertyInfo && oPropertyInfo["@com.sap.vocabularies.UI.v1.IsImageURL"];
          oInterface.context = {
            getModel: function () {
              return oInterface.getModel();
            },
            getPath: function () {
              return `${sCurrentEntitySetName}/${sDataPropertyPath}`;
            }
          };
          oPropertyInfo = isProperty(oDataFieldConverted) ? oDataFieldConverted : (oDataFieldConverted === null || oDataFieldConverted === void 0 ? void 0 : (_oDataFieldConverted$3 = oDataFieldConverted.Value) === null || _oDataFieldConverted$3 === void 0 ? void 0 : _oDataFieldConverted$3.$target) ?? (oDataFieldConverted === null || oDataFieldConverted === void 0 ? void 0 : (_oDataFieldConverted$4 = oDataFieldConverted.Target) === null || _oDataFieldConverted$4 === void 0 ? void 0 : _oDataFieldConverted$4.$target);
          // Datafield is not included in the FieldControl calculation, needs to be implemented

          const chartProperty = oPropertyInfo && oPropertyInfo.term && oPropertyInfo.term === "com.sap.vocabularies.UI.v1.Chart";
          const isAction = !!oDataFieldConverted.Action;
          const isFieldGrp = MassEditHelper.getIsFieldGrp(oDataFieldConverted);
          if (isImage || bHiddenField || chartProperty || isAction || isFieldGrp) {
            return;
          }

          // ValueHelp properties
          sUnitPropertyPath = (hasCurrency(oPropertyInfo) || hasUnit(oPropertyInfo)) && getAssociatedUnitPropertyPath(oPropertyInfo) || "";
          const unitPropertyInfo = sUnitPropertyPath && getAssociatedUnitProperty(oPropertyInfo);
          bValueHelpEnabled = hasValueHelp(oPropertyInfo);
          bValueHelpEnabledForUnit = unitPropertyInfo && hasValueHelp(unitPropertyInfo);
          const hasContextDependentVH = (bValueHelpEnabled || bValueHelpEnabledForUnit) && (((_oPropertyInfo = oPropertyInfo) === null || _oPropertyInfo === void 0 ? void 0 : (_oPropertyInfo$annota = _oPropertyInfo.annotations) === null || _oPropertyInfo$annota === void 0 ? void 0 : (_oPropertyInfo$annota2 = _oPropertyInfo$annota.Common) === null || _oPropertyInfo$annota2 === void 0 ? void 0 : _oPropertyInfo$annota2.ValueListRelevantQualifiers) || unitPropertyInfo && (unitPropertyInfo === null || unitPropertyInfo === void 0 ? void 0 : (_unitPropertyInfo$ann = unitPropertyInfo.annotations) === null || _unitPropertyInfo$ann === void 0 ? void 0 : (_unitPropertyInfo$ann2 = _unitPropertyInfo$ann.Common) === null || _unitPropertyInfo$ann2 === void 0 ? void 0 : _unitPropertyInfo$ann2.ValueListRelevantQualifiers));
          if (hasContextDependentVH) {
            // context dependent VH is not supported for Mass Edit.
            return;
          }

          // EditMode and InputType
          const propertyForFieldControl = oPropertyInfo && oPropertyInfo.Value ? oPropertyInfo.Value : oPropertyInfo;
          const expBinding = getEditMode(propertyForFieldControl, oDataModelPath, false, false, oDataFieldConverted, constant(true));
          const editModeValues = Object.keys(EditMode);
          const editModeIsStatic = !!expBinding && editModeValues.includes(expBinding);
          const editable = !!expBinding && (editModeIsStatic && expBinding === EditMode.Editable || !editModeIsStatic);
          const navPropertyWithValueHelp = sDataPropertyPath.includes("/") && bValueHelpEnabled;
          if (!editable || navPropertyWithValueHelp) {
            return;
          }
          const inputType = MassEditHelper.getInputType(oPropertyInfo, oDataFieldConverted, oDataModelPath);
          if (inputType) {
            const relativePath = getRelativePaths(oDataModelPath);
            const isReadOnly = isReadOnlyExpression(oPropertyInfo, relativePath);
            const displayMode = CommonUtils.computeDisplayMode(oPropertyContext.getObject());
            const isValueHelpEnabled = bValueHelpEnabled ? bValueHelpEnabled : false;
            const isValueHelpEnabledForUnit = bValueHelpEnabledForUnit && !sUnitPropertyPath.includes("/") ? bValueHelpEnabledForUnit : false;
            const unitProperty = sUnitPropertyPath && !sDataPropertyPath.includes("/") ? sUnitPropertyPath : false;
            oResult = {
              label: sLabelText,
              dataProperty: sDataPropertyPath,
              isValueHelpEnabled: bValueHelpEnabled ? bValueHelpEnabled : false,
              unitProperty,
              isFieldRequired: getRequiredExpression(oPropertyInfo, oDataFieldConverted, true, false, {}, oDataModelPath),
              defaultSelectionPath: sDataPropertyPath ? MassEditHelper.getDefaultSelectionPathComboBox(aContexts, sDataPropertyPath) : false,
              defaultSelectionUnitPath: sUnitPropertyPath ? MassEditHelper.getDefaultSelectionPathComboBox(aContexts, sUnitPropertyPath) : false,
              entitySet: sCurrentEntitySetName,
              display: displayMode,
              descriptionPath: MassEditHelper.getTextPath(sDataPropertyPath, oTextBinding, displayMode),
              nullable: oPropertyInfo.nullable !== undefined ? oPropertyInfo.nullable : true,
              isPropertyReadOnly: isReadOnly !== undefined ? isReadOnly : false,
              inputType: inputType,
              editMode: editable ? expBinding : undefined,
              propertyInfo: {
                hasVH: isValueHelpEnabled,
                runtimePath: "fieldsInfo>/values/",
                relativePath: sDataPropertyPath,
                propertyFullyQualifiedName: oPropertyInfo.fullyQualifiedName,
                propertyPathForValueHelp: `${sCurrentEntitySetName}/${sDataPropertyPath}`
              },
              unitInfo: unitProperty && {
                hasVH: isValueHelpEnabledForUnit,
                runtimePath: "fieldsInfo>/unitData/",
                relativePath: unitProperty,
                propertyPathForValueHelp: `${sCurrentEntitySetName}/${unitProperty}`
              }
            };
            aDataArray.push(oResult);
          }
        }
      });
      oDataFieldModel.setData(aDataArray);
      return oDataFieldModel;
    },
    getTableFields: function (oTable) {
      const aColumns = oTable && oTable.getColumns() || [];
      const columnsData = oTable && oTable.getParent().getTableDefinition().columns;
      return aColumns.map(function (oColumn) {
        const sDataProperty = oColumn && oColumn.getDataProperty(),
          aRealtedColumnInfo = columnsData && columnsData.filter(function (oColumnInfo) {
            return oColumnInfo.name === sDataProperty && oColumnInfo.type === "Annotation";
          });
        return {
          dataProperty: sDataProperty,
          label: oColumn.getHeader(),
          annotationPath: aRealtedColumnInfo && aRealtedColumnInfo[0] && aRealtedColumnInfo[0].annotationPath
        };
      });
    },
    getDefaultTextsForDialog: function (oResourceBundle, iSelectedContexts, oTable) {
      // The confirm button text is "Save" for table in Display mode and "Apply" for table in edit mode. This can be later exposed if needed.
      const bDisplayMode = oTable.data("displayModePropertyBinding") === "true";
      return {
        keepExistingPrefix: "< Keep",
        leaveBlankValue: "< Leave Blank >",
        clearFieldValue: "< Clear Values >",
        massEditTitle: oResourceBundle.getText("C_MASS_EDIT_DIALOG_TITLE", iSelectedContexts.toString()),
        applyButtonText: bDisplayMode ? oResourceBundle.getText("C_MASS_EDIT_SAVE_BUTTON_TEXT") : oResourceBundle.getText("C_MASS_EDIT_APPLY_BUTTON_TEXT"),
        useValueHelpValue: "< Use Value Help >",
        cancelButtonText: oResourceBundle.getText("C_COMMON_OBJECT_PAGE_CANCEL"),
        noFields: oResourceBundle.getText("C_MASS_EDIT_NO_EDITABLE_FIELDS"),
        okButtonText: oResourceBundle.getText("C_COMMON_DIALOG_OK")
      };
    },
    /**
     * Adds a suffix to the 'keep existing' property of the comboBox.
     *
     * @param sInputType InputType of the field
     * @returns The modified string
     */
    // getSuffixForKeepExisiting: function (sInputType: string) {
    // 	let sResult = "Values";

    // 	switch (sInputType) {
    // 		//TODO - Add for other control types as well (Radio Button, Email, Input, MDC Fields, Image etc.)
    // 		case "DatePicker":
    // 			sResult = "Dates";
    // 			break;
    // 		case "CheckBox":
    // 			sResult = "Settings";
    // 			break;
    // 		default:
    // 			sResult = "Values";
    // 	}
    // 	return sResult;
    // },

    /**
     * Adds default values to the model [Keep Existing Values, Leave Blank].
     *
     * @param aValues Array instance where the default data needs to be added
     * @param oDefaultValues Default values from Application Manifest
     * @param oPropertyInfo Property information
     * @param bUOMField
     */
    setDefaultValuesToDialog: function (aValues, oDefaultValues, oPropertyInfo, bUOMField) {
      const sPropertyPath = bUOMField ? oPropertyInfo.unitProperty : oPropertyInfo.dataProperty,
        sInputType = oPropertyInfo.inputType,
        bPropertyRequired = oPropertyInfo.isFieldRequired;
      // const sSuffixForKeepExisting = MassEditHelper.getSuffixForKeepExisiting(sInputType);
      const sSuffixForKeepExisting = "Values";
      aValues.defaultOptions = aValues.defaultOptions || [];
      const selectOptionsExist = aValues.selectOptions && aValues.selectOptions.length > 0;
      const keepEntry = {
        text: `${oDefaultValues.keepExistingPrefix} ${sSuffixForKeepExisting} >`,
        key: `Default/${sPropertyPath}`
      };
      if (sInputType === "CheckBox") {
        const falseEntry = {
          text: "No",
          key: `${sPropertyPath}/false`,
          textInfo: {
            value: false
          }
        };
        const truthyEntry = {
          text: "Yes",
          key: `${sPropertyPath}/true`,
          textInfo: {
            value: true
          }
        };
        aValues.unshift(falseEntry);
        aValues.defaultOptions.unshift(falseEntry);
        aValues.unshift(truthyEntry);
        aValues.defaultOptions.unshift(truthyEntry);
        aValues.unshift(keepEntry);
        aValues.defaultOptions.unshift(keepEntry);
      } else {
        var _oPropertyInfo$proper, _oPropertyInfo$unitIn;
        if (oPropertyInfo !== null && oPropertyInfo !== void 0 && (_oPropertyInfo$proper = oPropertyInfo.propertyInfo) !== null && _oPropertyInfo$proper !== void 0 && _oPropertyInfo$proper.hasVH || oPropertyInfo !== null && oPropertyInfo !== void 0 && (_oPropertyInfo$unitIn = oPropertyInfo.unitInfo) !== null && _oPropertyInfo$unitIn !== void 0 && _oPropertyInfo$unitIn.hasVH && bUOMField) {
          const vhdEntry = {
            text: oDefaultValues.useValueHelpValue,
            key: `UseValueHelpValue/${sPropertyPath}`
          };
          aValues.unshift(vhdEntry);
          aValues.defaultOptions.unshift(vhdEntry);
        }
        if (selectOptionsExist) {
          if (bPropertyRequired !== "true" && !bUOMField) {
            const clearEntry = {
              text: oDefaultValues.clearFieldValue,
              key: `ClearFieldValue/${sPropertyPath}`
            };
            aValues.unshift(clearEntry);
            aValues.defaultOptions.unshift(clearEntry);
          }
          aValues.unshift(keepEntry);
          aValues.defaultOptions.unshift(keepEntry);
        } else {
          const emptyEntry = {
            text: oDefaultValues.leaveBlankValue,
            key: `Default/${sPropertyPath}`
          };
          aValues.unshift(emptyEntry);
          aValues.defaultOptions.unshift(emptyEntry);
        }
      }
    },
    /**
     * Get text arrangement info for a context property.
     *
     * @param property Property Path
     * @param descriptionPath Path to text association of the property
     * @param displayMode Display mode of the property and text association
     * @param selectedContext Context to find the full text
     * @returns The text arrangement
     */
    getTextArrangementInfo: function (property, descriptionPath, displayMode, selectedContext) {
      let value = selectedContext.getObject(property),
        descriptionValue,
        fullText;
      if (descriptionPath && property) {
        switch (displayMode) {
          case "Description":
            descriptionValue = selectedContext.getObject(descriptionPath) || "";
            fullText = descriptionValue;
            break;
          case "Value":
            value = selectedContext.getObject(property) || "";
            fullText = value;
            break;
          case "ValueDescription":
            value = selectedContext.getObject(property) || "";
            descriptionValue = selectedContext.getObject(descriptionPath) || "";
            fullText = descriptionValue ? `${value} (${descriptionValue})` : value;
            break;
          case "DescriptionValue":
            value = selectedContext.getObject(property) || "";
            descriptionValue = selectedContext.getObject(descriptionPath) || "";
            fullText = descriptionValue ? `${descriptionValue} (${value})` : value;
            break;
          default:
            Log.info(`Display Property not applicable: ${property}`);
            break;
        }
      }
      return {
        textArrangement: displayMode,
        valuePath: property,
        descriptionPath: descriptionPath,
        value: value,
        description: descriptionValue,
        fullText: fullText
      };
    },
    /**
     * Return the visibility valuue for the ManagedObject Any.
     *
     * @param any The ManagedObject Any to be used to calculate the visible value of the binding.
     * @returns Returns true if the mass edit field is editable.
     */
    isEditable: function (any) {
      const binding = any.getBinding("any");
      const value = binding.getExternalValue();
      return value === EditMode.Editable;
    },
    /**
     * Calculate and update the visibility of mass edit field on change of the ManagedObject Any binding.
     *
     * @param oDialogDataModel Model to be used runtime.
     * @param dataProperty Field name.
     */
    onContextEditableChange: function (oDialogDataModel, dataProperty) {
      const objectsForVisibility = oDialogDataModel.getProperty(`/values/${dataProperty}/objectsForVisibility`) || [];
      const editable = objectsForVisibility.some(MassEditHelper.isEditable);
      if (editable) {
        oDialogDataModel.setProperty(`/values/${dataProperty}/visible`, editable);
      }
    },
    /**
     * Update Managed Object Any for visibility of the mass edit fields.
     *
     * @param mOToUse The ManagedObject Any to be used to calculate the visible value of the binding.
     * @param oDialogDataModel Model to be used runtime.
     * @param dataProperty Field name.
     * @param values Values of the field.
     */
    updateOnContextChange: function (mOToUse, oDialogDataModel, dataProperty, values) {
      const binding = mOToUse.getBinding("any");
      values.objectsForVisibility = values.objectsForVisibility || [];
      values.objectsForVisibility.push(mOToUse);
      binding === null || binding === void 0 ? void 0 : binding.attachChange(MassEditHelper.onContextEditableChange.bind(null, oDialogDataModel, dataProperty));
    },
    /**
     * Get bound object to calculate the visibility of contexts.
     *
     * @param expBinding Binding String object.
     * @param context Context the binding value.
     * @returns The ManagedObject Any to be used to calculate the visible value of the binding.
     */
    getBoundObject: function (expBinding, context) {
      const mOToUse = new Any({
        any: expBinding
      });
      const model = context.getModel();
      mOToUse.setModel(model);
      mOToUse.setBindingContext(context);
      return mOToUse;
    },
    /**
     * Get the visibility of the field.
     *
     * @param expBinding Binding String object.
     * @param oDialogDataModel Model to be used runtime.
     * @param dataProperty Field name.
     * @param values Values of the field.
     * @param context Context the binding value.
     * @returns Returns true if the mass edit field is editable.
     */
    getFieldVisiblity: function (expBinding, oDialogDataModel, dataProperty, values, context) {
      const mOToUse = MassEditHelper.getBoundObject(expBinding, context);
      const isContextEditable = MassEditHelper.isEditable(mOToUse);
      if (!isContextEditable) {
        MassEditHelper.updateOnContextChange(mOToUse, oDialogDataModel, dataProperty, values);
      }
      return isContextEditable;
    },
    /**
     * Initializes a runtime model:
     * => The model consists of values shown in the comboBox of the dialog (Leave Blank, Keep Existing Values, or any property value for the selected context, etc.)
     * => The model will capture runtime changes in the results property (the value entered in the comboBox).
     *
     * @param aContexts Contexts for mass edit
     * @param aDataArray Array containing data related to the dialog used by both the static and the runtime model
     * @param oDefaultValues Default values from i18n
     * @param dialogContext Transient context for mass edit dialog.
     * @returns The runtime model
     */
    setRuntimeModelOnDialog: function (aContexts, aDataArray, oDefaultValues, dialogContext) {
      const aValues = [];
      const aUnitData = [];
      const aResults = [];
      const textPaths = [];
      const aReadOnlyFieldInfo = [];
      const oData = {
        values: aValues,
        unitData: aUnitData,
        results: aResults,
        readablePropertyData: aReadOnlyFieldInfo,
        selectedKey: undefined,
        textPaths: textPaths,
        noFields: oDefaultValues.noFields
      };
      const oDialogDataModel = new JSONModel(oData);
      aDataArray.forEach(function (oInData) {
        let oTextInfo;
        let sPropertyKey;
        let sUnitPropertyName;
        const oDistinctValueMap = {};
        const oDistinctUnitMap = {};
        if (oInData.dataProperty && oInData.dataProperty.indexOf("/") > -1) {
          const aFinalPath = MassEditHelper.initLastLevelOfPropertyPath(oInData.dataProperty, aValues /*, dialogContext */);
          const aPropertyPaths = oInData.dataProperty.split("/");
          for (const context of aContexts) {
            const sMultiLevelPathValue = context.getObject(oInData.dataProperty);
            sPropertyKey = `${oInData.dataProperty}/${sMultiLevelPathValue}`;
            if (!oDistinctValueMap[sPropertyKey] && aFinalPath[aPropertyPaths[aPropertyPaths.length - 1]]) {
              oTextInfo = MassEditHelper.getTextArrangementInfo(oInData.dataProperty, oInData.descriptionPath, oInData.display, context);
              aFinalPath[aPropertyPaths[aPropertyPaths.length - 1]].push({
                text: oTextInfo && oTextInfo.fullText || sMultiLevelPathValue,
                key: sPropertyKey,
                textInfo: oTextInfo
              });
              oDistinctValueMap[sPropertyKey] = sMultiLevelPathValue;
            }
          }
          // if (Object.keys(oDistinctValueMap).length === 1) {
          // 	dialogContext.setProperty(oData.dataProperty, sPropertyKey && oDistinctValueMap[sPropertyKey]);
          // }

          aFinalPath[aPropertyPaths[aPropertyPaths.length - 1]].textInfo = {
            descriptionPath: oInData.descriptionPath,
            valuePath: oInData.dataProperty,
            displayMode: oInData.display
          };
        } else {
          aValues[oInData.dataProperty] = aValues[oInData.dataProperty] || [];
          aValues[oInData.dataProperty]["selectOptions"] = aValues[oInData.dataProperty]["selectOptions"] || [];
          if (oInData.unitProperty) {
            aUnitData[oInData.unitProperty] = aUnitData[oInData.unitProperty] || [];
            aUnitData[oInData.unitProperty]["selectOptions"] = aUnitData[oInData.unitProperty]["selectOptions"] || [];
          }
          for (const context of aContexts) {
            const oDataObject = context.getObject();
            sPropertyKey = `${oInData.dataProperty}/${oDataObject[oInData.dataProperty]}`;
            if (oInData.dataProperty && oDataObject[oInData.dataProperty] && !oDistinctValueMap[sPropertyKey]) {
              if (oInData.inputType != "CheckBox") {
                oTextInfo = MassEditHelper.getTextArrangementInfo(oInData.dataProperty, oInData.descriptionPath, oInData.display, context);
                const entry = {
                  text: oTextInfo && oTextInfo.fullText || oDataObject[oInData.dataProperty],
                  key: sPropertyKey,
                  textInfo: oTextInfo
                };
                aValues[oInData.dataProperty].push(entry);
                aValues[oInData.dataProperty]["selectOptions"].push(entry);
              }
              oDistinctValueMap[sPropertyKey] = oDataObject[oInData.dataProperty];
            }
            if (oInData.unitProperty && oDataObject[oInData.unitProperty]) {
              sUnitPropertyName = `${oInData.unitProperty}/${oDataObject[oInData.unitProperty]}`;
              if (!oDistinctUnitMap[sUnitPropertyName]) {
                if (oInData.inputType != "CheckBox") {
                  oTextInfo = MassEditHelper.getTextArrangementInfo(oInData.unitProperty, oInData.descriptionPath, oInData.display, context);
                  const unitEntry = {
                    text: oTextInfo && oTextInfo.fullText || oDataObject[oInData.unitProperty],
                    key: sUnitPropertyName,
                    textInfo: oTextInfo
                  };
                  aUnitData[oInData.unitProperty].push(unitEntry);
                  aUnitData[oInData.unitProperty]["selectOptions"].push(unitEntry);
                }
                oDistinctUnitMap[sUnitPropertyName] = oDataObject[oInData.unitProperty];
              }
            }
          }
          aValues[oInData.dataProperty].textInfo = {
            descriptionPath: oInData.descriptionPath,
            valuePath: oInData.dataProperty,
            displayMode: oInData.display
          };
          if (Object.keys(oDistinctValueMap).length === 1) {
            dialogContext.setProperty(oInData.dataProperty, sPropertyKey && oDistinctValueMap[sPropertyKey]);
          }
          if (Object.keys(oDistinctUnitMap).length === 1) {
            dialogContext.setProperty(oInData.unitProperty, sUnitPropertyName && oDistinctUnitMap[sUnitPropertyName]);
          }
        }
        textPaths[oInData.dataProperty] = oInData.descriptionPath ? [oInData.descriptionPath] : [];
      });
      aDataArray.forEach(function (oInData) {
        let values = {};
        if (oInData.dataProperty.indexOf("/") > -1) {
          const sMultiLevelPropPathValue = MassEditHelper.getValueForMultiLevelPath(oInData.dataProperty, aValues);
          if (!sMultiLevelPropPathValue) {
            sMultiLevelPropPathValue.push({
              text: oDefaultValues.leaveBlankValue,
              key: `Empty/${oInData.dataProperty}`
            });
          } else {
            MassEditHelper.setDefaultValuesToDialog(sMultiLevelPropPathValue, oDefaultValues, oInData);
          }
          values = sMultiLevelPropPathValue;
        } else if (aValues[oInData.dataProperty]) {
          aValues[oInData.dataProperty] = aValues[oInData.dataProperty] || [];
          MassEditHelper.setDefaultValuesToDialog(aValues[oInData.dataProperty], oDefaultValues, oInData);
          values = aValues[oInData.dataProperty];
        }
        if (aUnitData[oInData.unitProperty] && aUnitData[oInData.unitProperty].length) {
          MassEditHelper.setDefaultValuesToDialog(aUnitData[oInData.unitProperty], oDefaultValues, oInData, true);
          aUnitData[oInData.unitProperty].textInfo = {};
          aUnitData[oInData.unitProperty].selectedKey = MassEditHelper.getDefaultSelectionPathComboBox(aContexts, oInData.unitProperty);
          aUnitData[oInData.unitProperty].inputType = oInData.inputType;
        } else if (oInData.dataProperty && aValues[oInData.dataProperty] && !aValues[oInData.dataProperty].length || oInData.unitProperty && aUnitData[oInData.unitProperty] && !aUnitData[oInData.unitProperty].length) {
          const bClearFieldOrBlankValueExists = aValues[oInData.dataProperty] && aValues[oInData.dataProperty].some(function (obj) {
            return obj.text === "< Clear Values >" || obj.text === "< Leave Blank >";
          });
          if (oInData.dataProperty && !bClearFieldOrBlankValueExists) {
            aValues[oInData.dataProperty].push({
              text: oDefaultValues.leaveBlankValue,
              key: `Empty/${oInData.dataProperty}`
            });
          }
          const bClearFieldOrBlankUnitValueExists = aUnitData[oInData.unitProperty] && aUnitData[oInData.unitProperty].some(function (obj) {
            return obj.text === "< Clear Values >" || obj.text === "< Leave Blank >";
          });
          if (oInData.unitProperty) {
            if (!bClearFieldOrBlankUnitValueExists) {
              aUnitData[oInData.unitProperty].push({
                text: oDefaultValues.leaveBlankValue,
                key: `Empty/${oInData.unitProperty}`
              });
            }
            aUnitData[oInData.unitProperty].textInfo = {};
            aUnitData[oInData.unitProperty].selectedKey = MassEditHelper.getDefaultSelectionPathComboBox(aContexts, oInData.unitProperty);
            aUnitData[oInData.unitProperty].inputType = oInData.inputType;
          }
        }
        if (oInData.isPropertyReadOnly && typeof oInData.isPropertyReadOnly === "boolean") {
          aReadOnlyFieldInfo.push({
            property: oInData.dataProperty,
            value: oInData.isPropertyReadOnly,
            type: "Default"
          });
        } else if (oInData.isPropertyReadOnly && oInData.isPropertyReadOnly.operands && oInData.isPropertyReadOnly.operands[0] && oInData.isPropertyReadOnly.operands[0].operand1 && oInData.isPropertyReadOnly.operands[0].operand2) {
          // This needs to be refactored in accordance with the ReadOnlyExpression change
          aReadOnlyFieldInfo.push({
            property: oInData.dataProperty,
            propertyPath: oInData.isPropertyReadOnly.operands[0].operand1.path,
            propertyValue: oInData.isPropertyReadOnly.operands[0].operand2.value,
            type: "Path"
          });
        }

        // Setting visbility of the mass edit field.
        if (oInData.editMode) {
          values.visible = oInData.editMode === EditMode.Editable || aContexts.some(MassEditHelper.getFieldVisiblity.bind(MassEditHelper, oInData.editMode, oDialogDataModel, oInData.dataProperty, values));
        } else {
          values.visible = true;
        }
        values.selectedKey = MassEditHelper.getDefaultSelectionPathComboBox(aContexts, oInData.dataProperty);
        values.inputType = oInData.inputType;
        values.unitProperty = oInData.unitProperty;
      });
      return oDialogDataModel;
    },
    /**
     * Gets transient context for dialog.
     *
     * @param table Instance of Table.
     * @param dialog Mass Edit Dialog.
     * @returns Promise returning instance of dialog.
     */
    getDialogContext: function (table, dialog) {
      let transCtx = dialog === null || dialog === void 0 ? void 0 : dialog.getBindingContext();
      if (!transCtx) {
        const model = table.getModel();
        const listBinding = table.getRowBinding();
        const transientListBinding = model.bindList(listBinding.getPath(), listBinding.getContext(), [], [], {
          $$updateGroupId: "submitLater"
        });
        transientListBinding.refreshInternal = function () {
          /* */
        };
        transCtx = transientListBinding.create({}, true);
      }
      return transCtx;
    },
    onDialogOpen: function (event) {
      const source = event.getSource();
      const fieldsInfoModel = source.getModel("fieldsInfo");
      fieldsInfoModel.setProperty("/isOpen", true);
    },
    closeDialog: function (oDialog) {
      oDialog.close();
      oDialog.destroy();
    },
    messageHandlingForMassEdit: async function (oTable, aContexts, oController, oInDialog, aResults, errorContexts) {
      var _oController$getView, _oController$getView$, _oController$getView4, _oController$getView5;
      const DraftStatus = FELibrary.DraftStatus;
      const oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core");
      (_oController$getView = oController.getView()) === null || _oController$getView === void 0 ? void 0 : (_oController$getView$ = _oController$getView.getBindingContext("internal")) === null || _oController$getView$ === void 0 ? void 0 : _oController$getView$.setProperty("getBoundMessagesForMassEdit", true);
      oController.messageHandler.showMessages({
        onBeforeShowMessage: function (messages, showMessageParameters) {
          //messages.concatenate(messageHandling.getMessages(true, true));
          showMessageParameters.fnGetMessageSubtitle = messageHandling.setMessageSubtitle.bind({}, oTable, aContexts);
          const unboundErrors = [];
          messages.forEach(function (message) {
            if (!message.getTarget()) {
              unboundErrors.push(message);
            }
          });
          if (aResults.length > 0 && errorContexts.length === 0) {
            oController.editFlow.setDraftStatus(DraftStatus.Saved);
            const successToast = oResourceBundle.getText("C_MASS_EDIT_SUCCESS_TOAST");
            MessageToast.show(successToast);
          } else if (errorContexts.length < oTable.getSelectedContexts().length) {
            oController.editFlow.setDraftStatus(DraftStatus.Saved);
          } else if (errorContexts.length === oTable.getSelectedContexts().length) {
            oController.editFlow.setDraftStatus(DraftStatus.Clear);
          }
          if (oController.getModel("ui").getProperty("/isEditable") && unboundErrors.length === 0) {
            showMessageParameters.showMessageBox = false;
            showMessageParameters.showMessageDialog = false;
          }
          return showMessageParameters;
        }
      });
      if (oInDialog.isOpen()) {
        var _oController$getView2, _oController$getView3;
        MassEditHelper.closeDialog(oInDialog);
        (_oController$getView2 = oController.getView()) === null || _oController$getView2 === void 0 ? void 0 : (_oController$getView3 = _oController$getView2.getBindingContext("internal")) === null || _oController$getView3 === void 0 ? void 0 : _oController$getView3.setProperty("skipPatchHandlers", false);
      }
      (_oController$getView4 = oController.getView()) === null || _oController$getView4 === void 0 ? void 0 : (_oController$getView5 = _oController$getView4.getBindingContext("internal")) === null || _oController$getView5 === void 0 ? void 0 : _oController$getView5.setProperty("getBoundMessagesForMassEdit", false);
    },
    /**
     * This function generates side effects map from side effects ids(which is a combination of entity type and qualifier).
     *
     * @param oEntitySetContext
     * @param appComponent
     * @param oController
     * @param aResults
     * @returns Side effect map with data.
     */
    getSideEffectDataForKey: function (oEntitySetContext, appComponent, oController, aResults) {
      const sOwnerEntityType = oEntitySetContext.getProperty("$Type");
      const baseSideEffectsMapArray = {};
      aResults.forEach(result => {
        const sPath = result.keyValue;
        const sideEffectService = appComponent.getSideEffectsService();
        const fieldGroupIds = sideEffectService.computeFieldGroupIds(sOwnerEntityType, result.propertyFullyQualifiedName ?? "") ?? [];
        baseSideEffectsMapArray[sPath] = oController._sideEffects.getSideEffectsMapForFieldGroups(fieldGroupIds);
      });
      return baseSideEffectsMapArray;
    },
    /**
     * Give the entity type for a given spath for e.g.RequestedQuantity.
     *
     * @param sPath
     * @param sEntityType
     * @param oMetaModel
     * @returns Object having entity, spath and navigation path.
     */
    fnGetPathForSourceProperty: function (sPath, sEntityType, oMetaModel) {
      // if the property path has a navigation, get the target entity type of the navigation
      const sNavigationPath = sPath.indexOf("/") > 0 ? "/" + sEntityType + "/" + sPath.substr(0, sPath.lastIndexOf("/") + 1) + "@sapui.name" : false,
        pOwnerEntity = !sNavigationPath ? Promise.resolve(sEntityType) : oMetaModel.requestObject(sNavigationPath);
      sPath = sNavigationPath ? sPath.substr(sPath.lastIndexOf("/") + 1) : sPath;
      return {
        sPath,
        pOwnerEntity,
        sNavigationPath
      };
    },
    fnGetEntityTypeOfOwner: function (oMetaModel, baseNavPath, oEntitySetContext, targetEntity, aTargets) {
      const ownerEntityType = oEntitySetContext.getProperty("$Type");
      const {
        $Type: pOwner,
        $Partner: ownerNavPath
      } = oMetaModel.getObject(`${oEntitySetContext}/${baseNavPath}`); // nav path
      if (ownerNavPath) {
        const entityObjOfOwnerPartner = oMetaModel.getObject(`/${pOwner}/${ownerNavPath}`);
        if (entityObjOfOwnerPartner) {
          const entityTypeOfOwnerPartner = entityObjOfOwnerPartner["$Type"];
          // if the entity types defer, then base nav path is not from owner
          if (entityTypeOfOwnerPartner !== ownerEntityType) {
            // if target Prop is not from owner, we add it as immediate
            aTargets.push(targetEntity);
          }
        }
      } else {
        // if there is no $Partner attribute, it may not be from owner
        aTargets.push(targetEntity);
      }
      return aTargets;
    },
    /**
     * Give targets that are immediate or deferred based on the entity type of that target.
     *
     *
     * @param sideEffectsData
     * @param oEntitySetContext
     * @param sEntityType
     * @param oMetaModel
     * @returns Targets to request side effects.
     */
    fnGetTargetsForMassEdit: function (sideEffectsData, oEntitySetContext, sEntityType, oMetaModel) {
      const {
        targetProperties: aTargetProperties,
        targetEntities: aTargetEntities
      } = sideEffectsData;
      const aPromises = [];
      let aTargets = [];
      const ownerEntityType = oEntitySetContext.getProperty("$Type");
      if (sEntityType === ownerEntityType) {
        // if SalesOrdr Item
        aTargetEntities === null || aTargetEntities === void 0 ? void 0 : aTargetEntities.forEach(targetEntity => {
          targetEntity = targetEntity["$NavigationPropertyPath"];
          let baseNavPath;
          if (targetEntity.includes("/")) {
            baseNavPath = targetEntity.split("/")[0];
          } else {
            baseNavPath = targetEntity;
          }
          aTargets = MassEditHelper.fnGetEntityTypeOfOwner(oMetaModel, baseNavPath, oEntitySetContext, targetEntity, aTargets);
        });
      }
      if (aTargetProperties.length) {
        aTargetProperties.forEach(targetProp => {
          const {
            pOwnerEntity
          } = MassEditHelper.fnGetPathForSourceProperty(targetProp, sEntityType, oMetaModel);
          aPromises.push(pOwnerEntity.then(resultEntity => {
            // if entity is SalesOrderItem, Target Property is from Items table
            if (resultEntity === ownerEntityType) {
              aTargets.push(targetProp); // get immediate targets
            } else if (targetProp.includes("/")) {
              const baseNavPath = targetProp.split("/")[0];
              aTargets = MassEditHelper.fnGetEntityTypeOfOwner(oMetaModel, baseNavPath, oEntitySetContext, targetProp, aTargets);
            }
            return Promise.resolve(aTargets);
          }));
        });
      } else {
        aPromises.push(Promise.resolve(aTargets));
      }
      return Promise.all(aPromises);
    },
    /**
     * This function checks if in the given side Effects Obj, if _Item is set as Target Entity for any side Effects on
     * other entity set.
     *
     * @param sideEffectsMap
     * @param oEntitySetContext
     * @returns Length of sideEffectsArray where current Entity is set as Target Entity
     */
    checkIfEntityExistsAsTargetEntity: (sideEffectsMap, oEntitySetContext) => {
      const ownerEntityType = oEntitySetContext.getProperty("$Type");
      const sideEffectsOnOtherEntity = Object.values(sideEffectsMap).filter(obj => {
        return obj.name.indexOf(ownerEntityType) == -1;
      });
      const entitySetName = oEntitySetContext.getPath().split("/").pop();
      const sideEffectsWithCurrentEntityAsTarget = sideEffectsOnOtherEntity.filter(obj => {
        const targetEntitiesArray = obj.sideEffects.targetEntities;
        return targetEntitiesArray !== null && targetEntitiesArray !== void 0 && targetEntitiesArray.filter(innerObj => innerObj["$NavigationPropertyPath"] === entitySetName).length ? obj : false;
      });
      return sideEffectsWithCurrentEntityAsTarget.length;
    },
    /**
     * Upon updating the field, array of immediate and deferred side effects for that field are created.
     * If there are any failed side effects for that context, they will also be used to generate the map.
     * If the field has text associated with it, then add it to request side effects.
     *
     * @param mParams
     * @param mParams.oController Controller
     * @param mParams.oFieldPromise Promise to update field
     * @param mParams.sideEffectMap SideEffectsMap for the field
     * @param mParams.textPaths TextPaths of the field if any
     * @param mParams.groupId Group Id to used to group requests
     * @param mParams.key KeyValue of the field
     * @param mParams.oEntitySetContext EntitySetcontext
     * @param mParams.oMetaModel Metamodel data
     * @param mParams.selectedContext Selected row context
     * @param mParams.deferredTargetsForAQualifiedName Deferred targets data
     * @returns Promise for all immediately requested side effects.
     */
    handleMassEditFieldUpdateAndRequestSideEffects: async function (mParams) {
      const {
        oController,
        oFieldPromise,
        sideEffectsMap,
        textPaths,
        groupId,
        key,
        oEntitySetContext,
        oMetaModel,
        oSelectedContext,
        deferredTargetsForAQualifiedName
      } = mParams;
      const immediateSideEffectsPromises = [oFieldPromise];
      const ownerEntityType = oEntitySetContext.getProperty("$Type");
      const oAppComponent = CommonUtils.getAppComponent(oController.getView());
      const oSideEffectsService = oAppComponent.getSideEffectsService();
      const isSideEffectsWithCurrentEntityAsTarget = MassEditHelper.checkIfEntityExistsAsTargetEntity(sideEffectsMap, oEntitySetContext);
      if (sideEffectsMap) {
        const allEntityTypesWithQualifier = Object.keys(sideEffectsMap);
        const sideEffectsDataForField = Object.values(sideEffectsMap);
        const mVisitedSideEffects = {};
        deferredTargetsForAQualifiedName[key] = {};
        for (const [index, data] of sideEffectsDataForField.entries()) {
          const entityTypeWithQualifier = allEntityTypesWithQualifier[index];
          const sEntityType = entityTypeWithQualifier.split("#")[0];
          const oContext = oController._sideEffects.getContextForSideEffects(oSelectedContext, sEntityType);
          data.context = oContext;
          const allFailedSideEffects = oController._sideEffects.getRegisteredFailedRequests();
          const aFailedSideEffects = allFailedSideEffects[oContext.getPath()];
          oController._sideEffects.unregisterFailedSideEffectsForAContext(oContext);
          let sideEffectsForCurrentContext = [data.sideEffects];
          sideEffectsForCurrentContext = aFailedSideEffects && aFailedSideEffects.length ? sideEffectsForCurrentContext.concat(aFailedSideEffects) : sideEffectsForCurrentContext;
          mVisitedSideEffects[oContext] = {};
          for (const aSideEffect of sideEffectsForCurrentContext) {
            if (!mVisitedSideEffects[oContext].hasOwnProperty(aSideEffect.fullyQualifiedName)) {
              mVisitedSideEffects[oContext][aSideEffect.fullyQualifiedName] = true;
              let aImmediateTargets = [],
                allTargets = [],
                triggerActionName;
              const fnGetImmediateTargetsAndActions = async function (mSideEffect) {
                const {
                  targetProperties: aTargetProperties,
                  targetEntities: aTargetEntities
                } = mSideEffect;
                const sideEffectEntityType = mSideEffect.fullyQualifiedName.split("@")[0];
                const targetsArrayForAllProperties = await MassEditHelper.fnGetTargetsForMassEdit(mSideEffect, oEntitySetContext, sideEffectEntityType, oMetaModel);
                aImmediateTargets = targetsArrayForAllProperties[0];
                allTargets = (aTargetProperties || []).concat(aTargetEntities || []);
                const actionName = mSideEffect.triggerAction;
                const aDeferredTargets = allTargets.filter(target => {
                  return !aImmediateTargets.includes(target);
                });
                deferredTargetsForAQualifiedName[key][mSideEffect.fullyQualifiedName] = {
                  aTargets: aDeferredTargets,
                  oContext: oContext,
                  mSideEffect
                };

                // if entity is other than items table then action is defered
                if (actionName && sideEffectEntityType === ownerEntityType) {
                  // static action is on collection, so we defer it, else add to immediate requests array
                  const isStaticAction = TableHelper._isStaticAction(oMetaModel.getObject(`/${actionName}`), actionName);
                  if (!isStaticAction) {
                    triggerActionName = actionName;
                  } else {
                    deferredTargetsForAQualifiedName[key][mSideEffect.fullyQualifiedName]["TriggerAction"] = actionName;
                  }
                } else {
                  deferredTargetsForAQualifiedName[key][mSideEffect.fullyQualifiedName]["TriggerAction"] = actionName;
                }
                if (isSideEffectsWithCurrentEntityAsTarget) {
                  aImmediateTargets = [];
                }
                return {
                  aTargets: aImmediateTargets,
                  TriggerAction: triggerActionName
                };
              };
              immediateSideEffectsPromises.push(oController._sideEffects.requestSideEffects(aSideEffect, oContext, groupId, fnGetImmediateTargetsAndActions));
            }
          }
        }
      }
      if (textPaths !== null && textPaths !== void 0 && textPaths[key] && textPaths[key].length) {
        immediateSideEffectsPromises.push(oSideEffectsService.requestSideEffects(textPaths[key], oSelectedContext, groupId));
      }
      return Promise.allSettled(immediateSideEffectsPromises);
    },
    /**
     * Create the mass edit dialog.
     *
     * @param oTable Instance of Table
     * @param aContexts Contexts for mass edit
     * @param oController Controller for the view
     * @returns Promise returning instance of dialog.
     */
    createDialog: async function (oTable, aContexts, oController) {
      const sFragmentName = "sap/fe/core/controls/massEdit/MassEditDialog",
        aDataArray = [],
        oResourceBundle = Core.getLibraryResourceBundle("sap.fe.core"),
        oDefaultValues = MassEditHelper.getDefaultTextsForDialog(oResourceBundle, aContexts.length, oTable),
        oDataFieldModel = MassEditHelper.prepareDataForDialog(oTable, aContexts, aDataArray),
        dialogContext = MassEditHelper.getDialogContext(oTable),
        oDialogDataModel = MassEditHelper.setRuntimeModelOnDialog(aContexts, aDataArray, oDefaultValues, dialogContext),
        model = oTable.getModel(),
        metaModel = model.getMetaModel(),
        itemsModel = new TemplateModel(oDataFieldModel.getData(), metaModel);
      const oFragment = XMLTemplateProcessor.loadTemplate(sFragmentName, "fragment");
      const oCreatedFragment = await Promise.resolve(XMLPreprocessor.process(oFragment, {
        name: sFragmentName
      }, {
        bindingContexts: {
          dataFieldModel: itemsModel.createBindingContext("/"),
          metaModel: metaModel.createBindingContext("/"),
          contextPath: metaModel.createBindingContext(metaModel.getMetaPath(dialogContext.getPath()))
        },
        models: {
          dataFieldModel: itemsModel,
          metaModel: metaModel,
          contextPath: metaModel
        }
      }));
      const oDialogContent = await Fragment.load({
        definition: oCreatedFragment
      });
      const oDialog = new Dialog({
        resizable: true,
        title: oDefaultValues.massEditTitle,
        content: [oDialogContent],
        afterOpen: MassEditHelper.onDialogOpen,
        beginButton: new Button({
          text: MassEditHelper.helpers.getExpBindingForApplyButtonTxt(oDefaultValues, oDataFieldModel.getObject("/")),
          type: "Emphasized",
          press: async function (oEvent) {
            var _oController$getView6, _oController$getView7;
            messageHandling.removeBoundTransitionMessages();
            messageHandling.removeUnboundTransitionMessages();
            (_oController$getView6 = oController.getView()) === null || _oController$getView6 === void 0 ? void 0 : (_oController$getView7 = _oController$getView6.getBindingContext("internal")) === null || _oController$getView7 === void 0 ? void 0 : _oController$getView7.setProperty("skipPatchHandlers", true);
            const appComponent = CommonUtils.getAppComponent(oController.getView());
            const oInDialog = oEvent.getSource().getParent();
            const oModel = oInDialog.getModel("fieldsInfo");
            const aResults = oModel.getProperty("/results");
            const oMetaModel = oTable && oTable.getModel().getMetaModel(),
              sCurrentEntitySetName = oTable.data("metaPath"),
              oEntitySetContext = oMetaModel.getContext(sCurrentEntitySetName);
            const errorContexts = [];
            const textPaths = oModel.getProperty("/textPaths");
            const aPropertyReadableInfo = oModel.getProperty("/readablePropertyData");
            let groupId;
            let allSideEffects;
            const massEditPromises = [];
            const failedFieldsData = {};
            const selectedRowsLength = aContexts.length;
            const deferredTargetsForAQualifiedName = {};
            const baseSideEffectsMapArray = MassEditHelper.getSideEffectDataForKey(oEntitySetContext, appComponent, oController, aResults);
            //const changePromise: any[] = [];
            //let bReadOnlyField = false;
            //const errorContexts: object[] = [];

            aContexts.forEach(function (oSelectedContext, idx) {
              allSideEffects = [];
              aResults.forEach(async function (oResult) {
                if (!failedFieldsData.hasOwnProperty(oResult.keyValue)) {
                  failedFieldsData[oResult.keyValue] = 0;
                }
                //TODO - Add save implementation for Value Help.
                if (baseSideEffectsMapArray[oResult.keyValue]) {
                  allSideEffects[oResult.keyValue] = baseSideEffectsMapArray[oResult.keyValue];
                }
                if (aPropertyReadableInfo) {
                  aPropertyReadableInfo.some(function (oPropertyInfo) {
                    if (oResult.keyValue === oPropertyInfo.property) {
                      if (oPropertyInfo.type === "Default") {
                        return oPropertyInfo.value === true;
                      } else if (oPropertyInfo.type === "Path" && oPropertyInfo.propertyValue && oPropertyInfo.propertyPath) {
                        return oSelectedContext.getObject(oPropertyInfo.propertyPath) === oPropertyInfo.propertyValue;
                      }
                    }
                  });
                }
                groupId = `$auto.${idx}`;
                const oFieldPromise = oSelectedContext.setProperty(oResult.keyValue, oResult.value, groupId).catch(function (oError) {
                  errorContexts.push(oSelectedContext.getObject());
                  Log.error("Mass Edit: Something went wrong in updating entries.", oError);
                  failedFieldsData[oResult.keyValue] = failedFieldsData[oResult.keyValue] + 1;
                  return Promise.reject({
                    isFieldUpdateFailed: true
                  });
                });
                const dataToUpdateFieldAndSideEffects = {
                  oController,
                  oFieldPromise,
                  sideEffectsMap: baseSideEffectsMapArray[oResult.keyValue],
                  textPaths,
                  groupId,
                  key: oResult.keyValue,
                  oEntitySetContext,
                  oMetaModel,
                  oSelectedContext,
                  deferredTargetsForAQualifiedName
                };
                massEditPromises.push(MassEditHelper.handleMassEditFieldUpdateAndRequestSideEffects(dataToUpdateFieldAndSideEffects));
              });
            });
            await Promise.allSettled(massEditPromises).then(async function () {
              groupId = `$auto.massEditDeferred`;
              const deferredRequests = [];
              const sideEffectsDataForAllKeys = Object.values(deferredTargetsForAQualifiedName);
              const keysWithSideEffects = Object.keys(deferredTargetsForAQualifiedName);
              sideEffectsDataForAllKeys.forEach((aSideEffect, index) => {
                const currentKey = keysWithSideEffects[index];
                if (failedFieldsData[currentKey] !== selectedRowsLength) {
                  const deferredSideEffectsData = Object.values(aSideEffect);
                  deferredSideEffectsData.forEach(req => {
                    const {
                      aTargets,
                      oContext,
                      TriggerAction,
                      mSideEffect
                    } = req;
                    const fnGetDeferredTargets = function () {
                      return aTargets;
                    };
                    const fnGetDeferredTargetsAndActions = function () {
                      return {
                        aTargets: fnGetDeferredTargets(),
                        TriggerAction: TriggerAction
                      };
                    };
                    deferredRequests.push(
                    // if some deferred is rejected, it will be add to failed queue
                    oController._sideEffects.requestSideEffects(mSideEffect, oContext, groupId, fnGetDeferredTargetsAndActions));
                  });
                }
              });
            }).then(function () {
              MassEditHelper.messageHandlingForMassEdit(oTable, aContexts, oController, oInDialog, aResults, errorContexts);
            }).catch(e => {
              MassEditHelper.closeDialog(oDialog);
              return Promise.reject(e);
            });
          }
        }),
        endButton: new Button({
          text: oDefaultValues.cancelButtonText,
          visible: MassEditHelper.helpers.hasEditableFieldsBinding(oDataFieldModel.getObject("/"), true),
          press: function (oEvent) {
            const oInDialog = oEvent.getSource().getParent();
            MassEditHelper.closeDialog(oInDialog);
          }
        })
      });
      oDialog.setModel(oDialogDataModel, "fieldsInfo");
      oDialog.setModel(model);
      oDialog.setBindingContext(dialogContext);
      return oDialog;
    },
    helpers: {
      getBindingExpForHasEditableFields: (fields, editable) => {
        const totalExp = fields.reduce((expression, field) => or(expression, pathInModel("/values/" + field.dataProperty + "/visible", "fieldsInfo")), constant(false));
        return editable ? totalExp : not(totalExp);
      },
      getExpBindingForApplyButtonTxt: (defaultValues, fields) => {
        const editableExp = MassEditHelper.helpers.getBindingExpForHasEditableFields(fields, true);
        const totalExp = ifElse(editableExp, constant(defaultValues.applyButtonText), constant(defaultValues.okButtonText));
        return compileExpression(totalExp);
      },
      hasEditableFieldsBinding: (fields, editable) => {
        const ret = compileExpression(MassEditHelper.helpers.getBindingExpForHasEditableFields(fields, editable));
        if (ret === "true") {
          return true;
        } else if (ret === "false") {
          return false;
        } else {
          return ret;
        }
      }
    }
  };
  return MassEditHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MassEditHelper", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/library","sap/fe/core/TemplateModel","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/PropertyHelper","sap/fe/macros/field/FieldTemplating","sap/fe/macros/table/TableHelper","sap/m/Button","sap/m/Dialog","sap/m/MessageToast","sap/ui/core/Core","sap/ui/core/Fragment","sap/ui/core/util/XMLPreprocessor","sap/ui/core/XMLTemplateProcessor","sap/ui/mdc/enum/EditMode","sap/ui/model/json/JSONModel","../controllerextensions/messageHandler/messageHandling","../controls/Any","../converters/MetaModelConverter","../templating/FieldControlHelper","../templating/UIFormatters"],function(e,t,n,o,a,i,r,s,l,u,c,d,p,f,g,y,P,h,v,x,m,E,b,O){"use strict";var T=O.isMultiValueField;var M=O.getRequiredExpression;var C=O.getEditMode;var F=b.isReadOnlyExpression;var V=E.getInvolvedDataModelObjects;var D=E.convertMetaModelContext;var S=l.setEditStyleProperties;var $=l.getTextBinding;var B=s.hasValueHelpWithFixedValues;var k=s.hasValueHelp;var I=s.hasUnit;var j=s.hasCurrency;var A=s.getAssociatedUnitPropertyPath;var w=s.getAssociatedUnitProperty;var _=r.getRelativePaths;var H=r.enhanceDataModelPath;var R=o.isProperty;var L=n.pathInModel;var N=n.or;var U=n.not;var G=n.ifElse;var Q=n.constant;var q=n.compileExpression;const K={initLastLevelOfPropertyPath:function(e,t){let n;let o=0;const a=e.split("/");let i="";a.forEach(function(a){if(!t[a]&&o===0){t[a]={};n=t[a];i=i+a;o++}else if(!n[a]){i=`${i}/${a}`;if(i!==e){n[a]={};n=n[a]}else{n[a]=[]}}});return n},getUniqueValues:function(e,t,n){return e!=undefined&&e!=null?n.indexOf(e)===t:undefined},getValueForMultiLevelPath:function(e,t){let n;if(e&&e.indexOf("/")>0){const o=e.split("/");o.forEach(function(e){n=t&&t[e]?t[e]:n&&n[e]})}return n},getDefaultSelectionPathComboBox:function(e,t){let n;if(t&&e.length>0){const o=e,a=[];o.forEach(function(e){const n=e.getObject();const o=t.indexOf("/")>-1&&n.hasOwnProperty(t.split("/")[0]);if(e&&(n.hasOwnProperty(t)||o)){a.push(e.getObject(t))}});const i=a.filter(K.getUniqueValues);if(i.length>1){n=`Default/${t}`}else if(i.length===0){n=`Empty/${t}`}else if(i.length===1){n=`${t}/${i[0]}`}}return n},getHiddenValueForContexts:function(e,t){if(e&&e.$Path){return!t.some(function(t){return t.getObject(e.$Path)===false})}return e},getInputType:function(e,t,n){const o={};let a;if(e){S(o,t,n,true);a=(o===null||o===void 0?void 0:o.editStyle)||""}const i=a&&["DatePicker","TimePicker","DateTimePicker","RatingIndicator"].indexOf(a)===-1&&!T(n)&&!B(e);return(i||"")&&a},getIsFieldGrp:function(e){return e&&e.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&e.Target&&e.Target.value&&e.Target.value.indexOf("FieldGroup")>-1},getTextPath:function(e,t,n){let o;if(t&&(t.path||t.parameters&&t.parameters.length)&&e){if(t.path&&n==="Description"){o=t.path}else if(t.parameters){t.parameters.forEach(function(t){if(t.path&&t.path!==e){o=t.path}})}}return o},prepareDataForDialog:function(e,n,o){const a=e&&e.getModel().getMetaModel(),i=e.data("metaPath"),r=K.getTableFields(e),s=a.getContext(`${i}/@`),l=a.getContext(i),u=V(s);const c=new v;let d;let p;let f;let g;let y;let P;r.forEach(function(e){if(!e.annotationPath){return}const r=e.dataProperty;if(r){var s,c,v,x,m,E,b,O,T;let S=r&&a.getObject(`${i}/${r}@`);p=e.label||S&&S["@com.sap.vocabularies.Common.v1.Label"]||r;if(u){u.targetObject=u.targetEntityType.entityProperties.filter(function(e){return e.name===r})}u.targetObject=u.targetObject[0]||{};P=$(u,{},true)||{};const B=a.getContext(e.annotationPath),L=D(B),N=a.getContext(`${i}/${r}@`),U=N&&N.getInterface();let G=V(B,l);if((L===null||L===void 0?void 0:(s=L.Value)===null||s===void 0?void 0:(c=s.path)===null||c===void 0?void 0:c.length)>0){G=H(G,r)}const q=K.getHiddenValueForContexts(B&&B.getObject()["@com.sap.vocabularies.UI.v1.Hidden"],n)||false;const X=S&&S["@com.sap.vocabularies.UI.v1.IsImageURL"];U.context={getModel:function(){return U.getModel()},getPath:function(){return`${i}/${r}`}};S=R(L)?L:(L===null||L===void 0?void 0:(v=L.Value)===null||v===void 0?void 0:v.$target)??(L===null||L===void 0?void 0:(x=L.Target)===null||x===void 0?void 0:x.$target);const z=S&&S.term&&S.term==="com.sap.vocabularies.UI.v1.Chart";const J=!!L.Action;const Y=K.getIsFieldGrp(L);if(X||q||z||J||Y){return}g=(j(S)||I(S))&&A(S)||"";const W=g&&w(S);f=k(S);y=W&&k(W);const Z=(f||y)&&(((m=S)===null||m===void 0?void 0:(E=m.annotations)===null||E===void 0?void 0:(b=E.Common)===null||b===void 0?void 0:b.ValueListRelevantQualifiers)||W&&(W===null||W===void 0?void 0:(O=W.annotations)===null||O===void 0?void 0:(T=O.Common)===null||T===void 0?void 0:T.ValueListRelevantQualifiers));if(Z){return}const ee=S&&S.Value?S.Value:S;const te=C(ee,G,false,false,L,Q(true));const ne=Object.keys(h);const oe=!!te&&ne.includes(te);const ae=!!te&&(oe&&te===h.Editable||!oe);const ie=r.includes("/")&&f;if(!ae||ie){return}const re=K.getInputType(S,L,G);if(re){const e=_(G);const a=F(S,e);const s=t.computeDisplayMode(N.getObject());const l=f?f:false;const u=y&&!g.includes("/")?y:false;const c=g&&!r.includes("/")?g:false;d={label:p,dataProperty:r,isValueHelpEnabled:f?f:false,unitProperty:c,isFieldRequired:M(S,L,true,false,{},G),defaultSelectionPath:r?K.getDefaultSelectionPathComboBox(n,r):false,defaultSelectionUnitPath:g?K.getDefaultSelectionPathComboBox(n,g):false,entitySet:i,display:s,descriptionPath:K.getTextPath(r,P,s),nullable:S.nullable!==undefined?S.nullable:true,isPropertyReadOnly:a!==undefined?a:false,inputType:re,editMode:ae?te:undefined,propertyInfo:{hasVH:l,runtimePath:"fieldsInfo>/values/",relativePath:r,propertyFullyQualifiedName:S.fullyQualifiedName,propertyPathForValueHelp:`${i}/${r}`},unitInfo:c&&{hasVH:u,runtimePath:"fieldsInfo>/unitData/",relativePath:c,propertyPathForValueHelp:`${i}/${c}`}};o.push(d)}}});c.setData(o);return c},getTableFields:function(e){const t=e&&e.getColumns()||[];const n=e&&e.getParent().getTableDefinition().columns;return t.map(function(e){const t=e&&e.getDataProperty(),o=n&&n.filter(function(e){return e.name===t&&e.type==="Annotation"});return{dataProperty:t,label:e.getHeader(),annotationPath:o&&o[0]&&o[0].annotationPath}})},getDefaultTextsForDialog:function(e,t,n){const o=n.data("displayModePropertyBinding")==="true";return{keepExistingPrefix:"< Keep",leaveBlankValue:"< Leave Blank >",clearFieldValue:"< Clear Values >",massEditTitle:e.getText("C_MASS_EDIT_DIALOG_TITLE",t.toString()),applyButtonText:o?e.getText("C_MASS_EDIT_SAVE_BUTTON_TEXT"):e.getText("C_MASS_EDIT_APPLY_BUTTON_TEXT"),useValueHelpValue:"< Use Value Help >",cancelButtonText:e.getText("C_COMMON_OBJECT_PAGE_CANCEL"),noFields:e.getText("C_MASS_EDIT_NO_EDITABLE_FIELDS"),okButtonText:e.getText("C_COMMON_DIALOG_OK")}},setDefaultValuesToDialog:function(e,t,n,o){const a=o?n.unitProperty:n.dataProperty,i=n.inputType,r=n.isFieldRequired;const s="Values";e.defaultOptions=e.defaultOptions||[];const l=e.selectOptions&&e.selectOptions.length>0;const u={text:`${t.keepExistingPrefix} ${s} >`,key:`Default/${a}`};if(i==="CheckBox"){const t={text:"No",key:`${a}/false`,textInfo:{value:false}};const n={text:"Yes",key:`${a}/true`,textInfo:{value:true}};e.unshift(t);e.defaultOptions.unshift(t);e.unshift(n);e.defaultOptions.unshift(n);e.unshift(u);e.defaultOptions.unshift(u)}else{var c,d;if(n!==null&&n!==void 0&&(c=n.propertyInfo)!==null&&c!==void 0&&c.hasVH||n!==null&&n!==void 0&&(d=n.unitInfo)!==null&&d!==void 0&&d.hasVH&&o){const n={text:t.useValueHelpValue,key:`UseValueHelpValue/${a}`};e.unshift(n);e.defaultOptions.unshift(n)}if(l){if(r!=="true"&&!o){const n={text:t.clearFieldValue,key:`ClearFieldValue/${a}`};e.unshift(n);e.defaultOptions.unshift(n)}e.unshift(u);e.defaultOptions.unshift(u)}else{const n={text:t.leaveBlankValue,key:`Default/${a}`};e.unshift(n);e.defaultOptions.unshift(n)}}},getTextArrangementInfo:function(t,n,o,a){let i=a.getObject(t),r,s;if(n&&t){switch(o){case"Description":r=a.getObject(n)||"";s=r;break;case"Value":i=a.getObject(t)||"";s=i;break;case"ValueDescription":i=a.getObject(t)||"";r=a.getObject(n)||"";s=r?`${i} (${r})`:i;break;case"DescriptionValue":i=a.getObject(t)||"";r=a.getObject(n)||"";s=r?`${r} (${i})`:i;break;default:e.info(`Display Property not applicable: ${t}`);break}}return{textArrangement:o,valuePath:t,descriptionPath:n,value:i,description:r,fullText:s}},isEditable:function(e){const t=e.getBinding("any");const n=t.getExternalValue();return n===h.Editable},onContextEditableChange:function(e,t){const n=e.getProperty(`/values/${t}/objectsForVisibility`)||[];const o=n.some(K.isEditable);if(o){e.setProperty(`/values/${t}/visible`,o)}},updateOnContextChange:function(e,t,n,o){const a=e.getBinding("any");o.objectsForVisibility=o.objectsForVisibility||[];o.objectsForVisibility.push(e);a===null||a===void 0?void 0:a.attachChange(K.onContextEditableChange.bind(null,t,n))},getBoundObject:function(e,t){const n=new m({any:e});const o=t.getModel();n.setModel(o);n.setBindingContext(t);return n},getFieldVisiblity:function(e,t,n,o,a){const i=K.getBoundObject(e,a);const r=K.isEditable(i);if(!r){K.updateOnContextChange(i,t,n,o)}return r},setRuntimeModelOnDialog:function(e,t,n,o){const a=[];const i=[];const r=[];const s=[];const l=[];const u={values:a,unitData:i,results:r,readablePropertyData:l,selectedKey:undefined,textPaths:s,noFields:n.noFields};const c=new v(u);t.forEach(function(t){let n;let r;let l;const u={};const c={};if(t.dataProperty&&t.dataProperty.indexOf("/")>-1){const o=K.initLastLevelOfPropertyPath(t.dataProperty,a);const i=t.dataProperty.split("/");for(const a of e){const e=a.getObject(t.dataProperty);r=`${t.dataProperty}/${e}`;if(!u[r]&&o[i[i.length-1]]){n=K.getTextArrangementInfo(t.dataProperty,t.descriptionPath,t.display,a);o[i[i.length-1]].push({text:n&&n.fullText||e,key:r,textInfo:n});u[r]=e}}o[i[i.length-1]].textInfo={descriptionPath:t.descriptionPath,valuePath:t.dataProperty,displayMode:t.display}}else{a[t.dataProperty]=a[t.dataProperty]||[];a[t.dataProperty]["selectOptions"]=a[t.dataProperty]["selectOptions"]||[];if(t.unitProperty){i[t.unitProperty]=i[t.unitProperty]||[];i[t.unitProperty]["selectOptions"]=i[t.unitProperty]["selectOptions"]||[]}for(const o of e){const e=o.getObject();r=`${t.dataProperty}/${e[t.dataProperty]}`;if(t.dataProperty&&e[t.dataProperty]&&!u[r]){if(t.inputType!="CheckBox"){n=K.getTextArrangementInfo(t.dataProperty,t.descriptionPath,t.display,o);const i={text:n&&n.fullText||e[t.dataProperty],key:r,textInfo:n};a[t.dataProperty].push(i);a[t.dataProperty]["selectOptions"].push(i)}u[r]=e[t.dataProperty]}if(t.unitProperty&&e[t.unitProperty]){l=`${t.unitProperty}/${e[t.unitProperty]}`;if(!c[l]){if(t.inputType!="CheckBox"){n=K.getTextArrangementInfo(t.unitProperty,t.descriptionPath,t.display,o);const a={text:n&&n.fullText||e[t.unitProperty],key:l,textInfo:n};i[t.unitProperty].push(a);i[t.unitProperty]["selectOptions"].push(a)}c[l]=e[t.unitProperty]}}}a[t.dataProperty].textInfo={descriptionPath:t.descriptionPath,valuePath:t.dataProperty,displayMode:t.display};if(Object.keys(u).length===1){o.setProperty(t.dataProperty,r&&u[r])}if(Object.keys(c).length===1){o.setProperty(t.unitProperty,l&&c[l])}}s[t.dataProperty]=t.descriptionPath?[t.descriptionPath]:[]});t.forEach(function(t){let o={};if(t.dataProperty.indexOf("/")>-1){const e=K.getValueForMultiLevelPath(t.dataProperty,a);if(!e){e.push({text:n.leaveBlankValue,key:`Empty/${t.dataProperty}`})}else{K.setDefaultValuesToDialog(e,n,t)}o=e}else if(a[t.dataProperty]){a[t.dataProperty]=a[t.dataProperty]||[];K.setDefaultValuesToDialog(a[t.dataProperty],n,t);o=a[t.dataProperty]}if(i[t.unitProperty]&&i[t.unitProperty].length){K.setDefaultValuesToDialog(i[t.unitProperty],n,t,true);i[t.unitProperty].textInfo={};i[t.unitProperty].selectedKey=K.getDefaultSelectionPathComboBox(e,t.unitProperty);i[t.unitProperty].inputType=t.inputType}else if(t.dataProperty&&a[t.dataProperty]&&!a[t.dataProperty].length||t.unitProperty&&i[t.unitProperty]&&!i[t.unitProperty].length){const o=a[t.dataProperty]&&a[t.dataProperty].some(function(e){return e.text==="< Clear Values >"||e.text==="< Leave Blank >"});if(t.dataProperty&&!o){a[t.dataProperty].push({text:n.leaveBlankValue,key:`Empty/${t.dataProperty}`})}const r=i[t.unitProperty]&&i[t.unitProperty].some(function(e){return e.text==="< Clear Values >"||e.text==="< Leave Blank >"});if(t.unitProperty){if(!r){i[t.unitProperty].push({text:n.leaveBlankValue,key:`Empty/${t.unitProperty}`})}i[t.unitProperty].textInfo={};i[t.unitProperty].selectedKey=K.getDefaultSelectionPathComboBox(e,t.unitProperty);i[t.unitProperty].inputType=t.inputType}}if(t.isPropertyReadOnly&&typeof t.isPropertyReadOnly==="boolean"){l.push({property:t.dataProperty,value:t.isPropertyReadOnly,type:"Default"})}else if(t.isPropertyReadOnly&&t.isPropertyReadOnly.operands&&t.isPropertyReadOnly.operands[0]&&t.isPropertyReadOnly.operands[0].operand1&&t.isPropertyReadOnly.operands[0].operand2){l.push({property:t.dataProperty,propertyPath:t.isPropertyReadOnly.operands[0].operand1.path,propertyValue:t.isPropertyReadOnly.operands[0].operand2.value,type:"Path"})}if(t.editMode){o.visible=t.editMode===h.Editable||e.some(K.getFieldVisiblity.bind(K,t.editMode,c,t.dataProperty,o))}else{o.visible=true}o.selectedKey=K.getDefaultSelectionPathComboBox(e,t.dataProperty);o.inputType=t.inputType;o.unitProperty=t.unitProperty});return c},getDialogContext:function(e,t){let n=t===null||t===void 0?void 0:t.getBindingContext();if(!n){const t=e.getModel();const o=e.getRowBinding();const a=t.bindList(o.getPath(),o.getContext(),[],[],{$$updateGroupId:"submitLater"});a.refreshInternal=function(){};n=a.create({},true)}return n},onDialogOpen:function(e){const t=e.getSource();const n=t.getModel("fieldsInfo");n.setProperty("/isOpen",true)},closeDialog:function(e){e.close();e.destroy()},messageHandlingForMassEdit:async function(e,t,n,o,i,r){var s,l,u,c;const d=a.DraftStatus;const g=f.getLibraryResourceBundle("sap.fe.core");(s=n.getView())===null||s===void 0?void 0:(l=s.getBindingContext("internal"))===null||l===void 0?void 0:l.setProperty("getBoundMessagesForMassEdit",true);n.messageHandler.showMessages({onBeforeShowMessage:function(o,a){a.fnGetMessageSubtitle=x.setMessageSubtitle.bind({},e,t);const s=[];o.forEach(function(e){if(!e.getTarget()){s.push(e)}});if(i.length>0&&r.length===0){n.editFlow.setDraftStatus(d.Saved);const e=g.getText("C_MASS_EDIT_SUCCESS_TOAST");p.show(e)}else if(r.length<e.getSelectedContexts().length){n.editFlow.setDraftStatus(d.Saved)}else if(r.length===e.getSelectedContexts().length){n.editFlow.setDraftStatus(d.Clear)}if(n.getModel("ui").getProperty("/isEditable")&&s.length===0){a.showMessageBox=false;a.showMessageDialog=false}return a}});if(o.isOpen()){var y,P;K.closeDialog(o);(y=n.getView())===null||y===void 0?void 0:(P=y.getBindingContext("internal"))===null||P===void 0?void 0:P.setProperty("skipPatchHandlers",false)}(u=n.getView())===null||u===void 0?void 0:(c=u.getBindingContext("internal"))===null||c===void 0?void 0:c.setProperty("getBoundMessagesForMassEdit",false)},getSideEffectDataForKey:function(e,t,n,o){const a=e.getProperty("$Type");const i={};o.forEach(e=>{const o=e.keyValue;const r=t.getSideEffectsService();const s=r.computeFieldGroupIds(a,e.propertyFullyQualifiedName??"")??[];i[o]=n._sideEffects.getSideEffectsMapForFieldGroups(s)});return i},fnGetPathForSourceProperty:function(e,t,n){const o=e.indexOf("/")>0?"/"+t+"/"+e.substr(0,e.lastIndexOf("/")+1)+"@sapui.name":false,a=!o?Promise.resolve(t):n.requestObject(o);e=o?e.substr(e.lastIndexOf("/")+1):e;return{sPath:e,pOwnerEntity:a,sNavigationPath:o}},fnGetEntityTypeOfOwner:function(e,t,n,o,a){const i=n.getProperty("$Type");const{$Type:r,$Partner:s}=e.getObject(`${n}/${t}`);if(s){const t=e.getObject(`/${r}/${s}`);if(t){const e=t["$Type"];if(e!==i){a.push(o)}}}else{a.push(o)}return a},fnGetTargetsForMassEdit:function(e,t,n,o){const{targetProperties:a,targetEntities:i}=e;const r=[];let s=[];const l=t.getProperty("$Type");if(n===l){i===null||i===void 0?void 0:i.forEach(e=>{e=e["$NavigationPropertyPath"];let n;if(e.includes("/")){n=e.split("/")[0]}else{n=e}s=K.fnGetEntityTypeOfOwner(o,n,t,e,s)})}if(a.length){a.forEach(e=>{const{pOwnerEntity:a}=K.fnGetPathForSourceProperty(e,n,o);r.push(a.then(n=>{if(n===l){s.push(e)}else if(e.includes("/")){const n=e.split("/")[0];s=K.fnGetEntityTypeOfOwner(o,n,t,e,s)}return Promise.resolve(s)}))})}else{r.push(Promise.resolve(s))}return Promise.all(r)},checkIfEntityExistsAsTargetEntity:(e,t)=>{const n=t.getProperty("$Type");const o=Object.values(e).filter(e=>e.name.indexOf(n)==-1);const a=t.getPath().split("/").pop();const i=o.filter(e=>{const t=e.sideEffects.targetEntities;return t!==null&&t!==void 0&&t.filter(e=>e["$NavigationPropertyPath"]===a).length?e:false});return i.length},handleMassEditFieldUpdateAndRequestSideEffects:async function(e){const{oController:n,oFieldPromise:o,sideEffectsMap:a,textPaths:i,groupId:r,key:s,oEntitySetContext:l,oMetaModel:c,oSelectedContext:d,deferredTargetsForAQualifiedName:p}=e;const f=[o];const g=l.getProperty("$Type");const y=t.getAppComponent(n.getView());const P=y.getSideEffectsService();const h=K.checkIfEntityExistsAsTargetEntity(a,l);if(a){const e=Object.keys(a);const t=Object.values(a);const o={};p[s]={};for(const[a,i]of t.entries()){const t=e[a];const y=t.split("#")[0];const P=n._sideEffects.getContextForSideEffects(d,y);i.context=P;const v=n._sideEffects.getRegisteredFailedRequests();const x=v[P.getPath()];n._sideEffects.unregisterFailedSideEffectsForAContext(P);let m=[i.sideEffects];m=x&&x.length?m.concat(x):m;o[P]={};for(const e of m){if(!o[P].hasOwnProperty(e.fullyQualifiedName)){o[P][e.fullyQualifiedName]=true;let t=[],a=[],i;const d=async function(e){const{targetProperties:n,targetEntities:o}=e;const r=e.fullyQualifiedName.split("@")[0];const d=await K.fnGetTargetsForMassEdit(e,l,r,c);t=d[0];a=(n||[]).concat(o||[]);const f=e.triggerAction;const y=a.filter(e=>!t.includes(e));p[s][e.fullyQualifiedName]={aTargets:y,oContext:P,mSideEffect:e};if(f&&r===g){const t=u._isStaticAction(c.getObject(`/${f}`),f);if(!t){i=f}else{p[s][e.fullyQualifiedName]["TriggerAction"]=f}}else{p[s][e.fullyQualifiedName]["TriggerAction"]=f}if(h){t=[]}return{aTargets:t,TriggerAction:i}};f.push(n._sideEffects.requestSideEffects(e,P,r,d))}}}}if(i!==null&&i!==void 0&&i[s]&&i[s].length){f.push(P.requestSideEffects(i[s],d,r))}return Promise.allSettled(f)},createDialog:async function(n,o,a){const r="sap/fe/core/controls/massEdit/MassEditDialog",s=[],l=f.getLibraryResourceBundle("sap.fe.core"),u=K.getDefaultTextsForDialog(l,o.length,n),p=K.prepareDataForDialog(n,o,s),h=K.getDialogContext(n),v=K.setRuntimeModelOnDialog(o,s,u,h),m=n.getModel(),E=m.getMetaModel(),b=new i(p.getData(),E);const O=P.loadTemplate(r,"fragment");const T=await Promise.resolve(y.process(O,{name:r},{bindingContexts:{dataFieldModel:b.createBindingContext("/"),metaModel:E.createBindingContext("/"),contextPath:E.createBindingContext(E.getMetaPath(h.getPath()))},models:{dataFieldModel:b,metaModel:E,contextPath:E}}));const M=await g.load({definition:T});const C=new d({resizable:true,title:u.massEditTitle,content:[M],afterOpen:K.onDialogOpen,beginButton:new c({text:K.helpers.getExpBindingForApplyButtonTxt(u,p.getObject("/")),type:"Emphasized",press:async function(i){var r,s;x.removeBoundTransitionMessages();x.removeUnboundTransitionMessages();(r=a.getView())===null||r===void 0?void 0:(s=r.getBindingContext("internal"))===null||s===void 0?void 0:s.setProperty("skipPatchHandlers",true);const l=t.getAppComponent(a.getView());const u=i.getSource().getParent();const c=u.getModel("fieldsInfo");const d=c.getProperty("/results");const p=n&&n.getModel().getMetaModel(),f=n.data("metaPath"),g=p.getContext(f);const y=[];const P=c.getProperty("/textPaths");const h=c.getProperty("/readablePropertyData");let v;let m;const E=[];const b={};const O=o.length;const T={};const M=K.getSideEffectDataForKey(g,l,a,d);o.forEach(function(t,n){m=[];d.forEach(async function(o){if(!b.hasOwnProperty(o.keyValue)){b[o.keyValue]=0}if(M[o.keyValue]){m[o.keyValue]=M[o.keyValue]}if(h){h.some(function(e){if(o.keyValue===e.property){if(e.type==="Default"){return e.value===true}else if(e.type==="Path"&&e.propertyValue&&e.propertyPath){return t.getObject(e.propertyPath)===e.propertyValue}}})}v=`$auto.${n}`;const i=t.setProperty(o.keyValue,o.value,v).catch(function(n){y.push(t.getObject());e.error("Mass Edit: Something went wrong in updating entries.",n);b[o.keyValue]=b[o.keyValue]+1;return Promise.reject({isFieldUpdateFailed:true})});const r={oController:a,oFieldPromise:i,sideEffectsMap:M[o.keyValue],textPaths:P,groupId:v,key:o.keyValue,oEntitySetContext:g,oMetaModel:p,oSelectedContext:t,deferredTargetsForAQualifiedName:T};E.push(K.handleMassEditFieldUpdateAndRequestSideEffects(r))})});await Promise.allSettled(E).then(async function(){v=`$auto.massEditDeferred`;const e=[];const t=Object.values(T);const n=Object.keys(T);t.forEach((t,o)=>{const i=n[o];if(b[i]!==O){const n=Object.values(t);n.forEach(t=>{const{aTargets:n,oContext:o,TriggerAction:i,mSideEffect:r}=t;const s=function(){return n};const l=function(){return{aTargets:s(),TriggerAction:i}};e.push(a._sideEffects.requestSideEffects(r,o,v,l))})}})}).then(function(){K.messageHandlingForMassEdit(n,o,a,u,d,y)}).catch(e=>{K.closeDialog(C);return Promise.reject(e)})}}),endButton:new c({text:u.cancelButtonText,visible:K.helpers.hasEditableFieldsBinding(p.getObject("/"),true),press:function(e){const t=e.getSource().getParent();K.closeDialog(t)}})});C.setModel(v,"fieldsInfo");C.setModel(m);C.setBindingContext(h);return C},helpers:{getBindingExpForHasEditableFields:(e,t)=>{const n=e.reduce((e,t)=>N(e,L("/values/"+t.dataProperty+"/visible","fieldsInfo")),Q(false));return t?n:U(n)},getExpBindingForApplyButtonTxt:(e,t)=>{const n=K.helpers.getBindingExpForHasEditableFields(t,true);const o=G(n,Q(e.applyButtonText),Q(e.okButtonText));return q(o)},hasEditableFieldsBinding:(e,t)=>{const n=q(K.helpers.getBindingExpForHasEditableFields(e,t));if(n==="true"){return true}else if(n==="false"){return false}else{return n}}}};return K},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MessageStrip-dbg", ["sap/fe/core/CommonUtils", "sap/fe/core/helpers/ResourceModelHelper", "sap/ui/core/Core", "sap/ui/Device"], function (CommonUtils, ResourceModelHelper, Core, Device) {
  "use strict";

  var system = Device.system;
  var getLocalizedText = ResourceModelHelper.getLocalizedText;
  function getLabels(aIgnoredFields, sEntityTypePath, oFilterControl, resourceModel) {
    const oMetaModel = oFilterControl.getModel().getMetaModel(),
      aIgnoredLabels = aIgnoredFields.map(function (sProperty) {
        if (sProperty === "$search") {
          return resourceModel.getText("M_FILTERBAR_SEARCH") || "";
        }
        if (sProperty === "$editState") {
          return resourceModel.getText("FILTERBAR_EDITING_STATUS") || "";
        }
        const sLabel = oMetaModel.getObject(`${sEntityTypePath}${sProperty}@com.sap.vocabularies.Common.v1.Label`);
        return getLocalizedText(sLabel, oFilterControl);
      });
    return aIgnoredLabels;
  }
  function getALPText(aIgnoredLabels, oFilterBar, bIsSearchIgnored) {
    let sResourceKey = "";
    let aParameters = [];
    const oResourceBundle = _getResourceBundle();
    if (!oResourceBundle) {
      return "";
    }
    const view = CommonUtils.getTargetView(oFilterBar);
    const oChart = view.getController().getChartControl();
    const bIsDraftSupported = oChart.data("draftSupported") === "true";
    const oMacroResourceBundle = Core.getLibraryResourceBundle("sap.fe.macros");
    bIsSearchIgnored = bIsSearchIgnored && aIgnoredLabels.includes(oMacroResourceBundle.getText("M_FILTERBAR_SEARCH"));
    const sDefaultResourceKey = `C_LR_MULTIVIZ_CHART_${_getArgumentSize(aIgnoredLabels)}_IGNORED_FILTER_${_getSizeText()}`;
    if (bIsDraftSupported && (aIgnoredLabels.length === 2 && bIsSearchIgnored || aIgnoredLabels.length === 1)) {
      sResourceKey = aIgnoredLabels.length === 1 ? "C_MULTIVIZ_CHART_IGNORED_FILTER_DRAFT_DATA" : "C_LR_MULTIVIZ_CHART_IGNORED_FILTER_DRAFT_DATA_AND_SEARCH";
    } else {
      sResourceKey = sDefaultResourceKey;
      aParameters = [aIgnoredLabels.join(", ")];
    }
    return oResourceBundle.getText(sResourceKey, aParameters);
  }
  function getText(aIgnoredLabels, oFilterBar, sTabTitle) {
    const oResourceBundle = _getResourceBundle();
    return oResourceBundle ? oResourceBundle.getText(`C_LR_MULTITABLES_${_getArgumentSize(aIgnoredLabels)}_IGNORED_FILTER_${_getSizeText()}`, [aIgnoredLabels.join(", "), getLocalizedText(sTabTitle, oFilterBar)]) : "";
  }
  function _getSizeText() {
    return system.desktop ? "LARGE" : "SMALL";
  }
  function _getArgumentSize(aIgnoredLabels) {
    return aIgnoredLabels.length === 1 ? "SINGLE" : "MULTI";
  }
  function _getResourceBundle() {
    return Core.getLibraryResourceBundle("sap.fe.templates");
  }
  const MessageStripHelper = {
    getALPText: getALPText,
    getText: getText,
    getLabels: getLabels
  };
  return MessageStripHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MessageStrip", ["sap/fe/core/CommonUtils","sap/fe/core/helpers/ResourceModelHelper","sap/ui/core/Core","sap/ui/Device"],function(e,t,n,r){"use strict";var o=r.system;var s=t.getLocalizedText;function _(e,t,n,r){const o=n.getModel().getMetaModel(),_=e.map(function(e){if(e==="$search"){return r.getText("M_FILTERBAR_SEARCH")||""}if(e==="$editState"){return r.getText("FILTERBAR_EDITING_STATUS")||""}const _=o.getObject(`${t}${e}@com.sap.vocabularies.Common.v1.Label`);return s(_,n)});return _}function c(t,r,o){let s="";let _=[];const c=R();if(!c){return""}const u=e.getTargetView(r);const i=u.getController().getChartControl();const L=i.data("draftSupported")==="true";const l=n.getLibraryResourceBundle("sap.fe.macros");o=o&&t.includes(l.getText("M_FILTERBAR_SEARCH"));const g=`C_LR_MULTIVIZ_CHART_${a(t)}_IGNORED_FILTER_${T()}`;if(L&&(t.length===2&&o||t.length===1)){s=t.length===1?"C_MULTIVIZ_CHART_IGNORED_FILTER_DRAFT_DATA":"C_LR_MULTIVIZ_CHART_IGNORED_FILTER_DRAFT_DATA_AND_SEARCH"}else{s=g;_=[t.join(", ")]}return c.getText(s,_)}function u(e,t,n){const r=R();return r?r.getText(`C_LR_MULTITABLES_${a(e)}_IGNORED_FILTER_${T()}`,[e.join(", "),s(n,t)]):""}function T(){return o.desktop?"LARGE":"SMALL"}function a(e){return e.length===1?"SINGLE":"MULTI"}function R(){return n.getLibraryResourceBundle("sap.fe.templates")}const i={getALPText:c,getText:u,getLabels:_};return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MetaModelFunction-dbg", ["sap/fe/core/converters/helpers/IssueManager", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/type/EDM"], function (IssueManager, BindingToolkit, ModelHelper, EDM) {
  "use strict";

  var _exports = {};
  var isTypeFilterable = EDM.isTypeFilterable;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var compileExpression = BindingToolkit.compileExpression;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategoryType = IssueManager.IssueCategoryType;
  var IssueCategory = IssueManager.IssueCategory;
  // From FilterBar.block.ts only
  function getSearchRestrictions(fullPath, metaModel) {
    let searchRestrictions;
    let navigationSearchRestrictions;
    const navigationText = "$NavigationPropertyBinding";
    const searchRestrictionsTerm = "@Org.OData.Capabilities.V1.SearchRestrictions";
    const entityTypePathParts = fullPath.replaceAll("%2F", "/").split("/").filter(ModelHelper.filterOutNavPropBinding);
    const entitySetPath = ModelHelper.getEntitySetPath(fullPath, metaModel);
    const entitySetPathParts = entitySetPath.split("/").filter(ModelHelper.filterOutNavPropBinding);
    const isContainment = metaModel.getObject(`/${entityTypePathParts.join("/")}/$ContainsTarget`) ? true : false;
    const containmentNavPath = isContainment ? entityTypePathParts[entityTypePathParts.length - 1] : "";

    //LEAST PRIORITY - Search restrictions directly at Entity Set
    //e.g. FR in "NS.EntityContainer/SalesOrderManage" ContextPath: /SalesOrderManage
    if (!isContainment) {
      searchRestrictions = metaModel.getObject(`${entitySetPath}${searchRestrictionsTerm}`);
    }
    if (entityTypePathParts.length > 1) {
      const navPath = isContainment ? containmentNavPath : entitySetPathParts[entitySetPathParts.length - 1];
      // In case of containment we take entitySet provided as parent. And in case of normal we would remove the last navigation from entitySetPath.
      const parentEntitySetPath = isContainment ? entitySetPath : `/${entitySetPathParts.slice(0, -1).join(`/${navigationText}/`)}`;

      //HIGHEST priority - Navigation restrictions
      //e.g. Parent "/Customer" with NavigationPropertyPath="Set" ContextPath: Customer/Set
      const navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(metaModel, parentEntitySetPath, navPath.replaceAll("%2F", "/"));
      navigationSearchRestrictions = navigationRestrictions === null || navigationRestrictions === void 0 ? void 0 : navigationRestrictions.SearchRestrictions;
    }
    return navigationSearchRestrictions ?? searchRestrictions;
  }

  // From CommonUtils
  _exports.getSearchRestrictions = getSearchRestrictions;
  function getNavigationRestrictions(metaModelContext, entitySetPath, navigationPath) {
    const navigationRestrictions = metaModelContext.getObject(`${entitySetPath}@Org.OData.Capabilities.V1.NavigationRestrictions`);
    const restrictedProperties = navigationRestrictions === null || navigationRestrictions === void 0 ? void 0 : navigationRestrictions.RestrictedProperties;
    return restrictedProperties === null || restrictedProperties === void 0 ? void 0 : restrictedProperties.find(function (restrictedProperty) {
      var _restrictedProperty$N;
      return ((_restrictedProperty$N = restrictedProperty.NavigationProperty) === null || _restrictedProperty$N === void 0 ? void 0 : _restrictedProperty$N.$NavigationPropertyPath) === navigationPath;
    });
  }

  // Internal usage only
  _exports.getNavigationRestrictions = getNavigationRestrictions;
  function isInNonFilterableProperties(metamodelContext, entitySetPath, contextPath) {
    let isNotFilterable = false;
    const filterRestrictionsAnnotation = metamodelContext.getObject(`${entitySetPath}@Org.OData.Capabilities.V1.FilterRestrictions`);
    if (filterRestrictionsAnnotation !== null && filterRestrictionsAnnotation !== void 0 && filterRestrictionsAnnotation.NonFilterableProperties) {
      isNotFilterable = filterRestrictionsAnnotation.NonFilterableProperties.some(function (property) {
        return property.$NavigationPropertyPath === contextPath || property.$PropertyPath === contextPath;
      });
    }
    return isNotFilterable;
  }

  // Internal usage only
  function isCustomAggregate(metamodelContext, entitySetPath, contextPath) {
    let interanlIsCustomAggregate = false;
    // eslint-disable-next-line regex/invalid-warn
    const isApplySupported = metamodelContext.getObject(entitySetPath + "@Org.OData.Aggregation.V1.ApplySupported") ? true : false;
    if (isApplySupported) {
      const entitySetAnnotations = metamodelContext.getObject(`${entitySetPath}@`);
      const customAggregatesAnnotations = METAMODEL_FUNCTIONS.getAllCustomAggregates(entitySetAnnotations);
      const customAggregates = customAggregatesAnnotations ? Object.keys(customAggregatesAnnotations) : undefined;
      if (customAggregates !== null && customAggregates !== void 0 && customAggregates.includes(contextPath)) {
        interanlIsCustomAggregate = true;
      }
    }
    return interanlIsCustomAggregate;
  }

  // Internal usage only
  _exports.isCustomAggregate = isCustomAggregate;
  function checkEntitySetIsFilterable(entitySetPath, metaModelContext, property, navigationContext) {
    let isFilterable = entitySetPath.split("/").length === 2 && !property.includes("/") ? !isInNonFilterableProperties(metaModelContext, entitySetPath, property) && !isCustomAggregate(metaModelContext, entitySetPath, property) : !isContextPathFilterable(metaModelContext, entitySetPath, property);
    // check if type can be used for filtering
    if (isFilterable && navigationContext) {
      const propertyDataType = getPropertyDataType(navigationContext);
      if (propertyDataType) {
        isFilterable = propertyDataType ? isTypeFilterable(propertyDataType) : false;
      } else {
        isFilterable = false;
      }
    }
    return isFilterable;
  }

  // Internal usage only
  function isContextPathFilterable(metaModelContext, entitySetPath, contextPath) {
    const fullPath = `${entitySetPath}/${contextPath}`,
      esParts = fullPath.split("/").splice(0, 2),
      contexts = fullPath.split("/").splice(2);
    let isNoFilterable = false,
      context = "";
    entitySetPath = esParts.join("/");
    isNoFilterable = contexts.some(function (item, index, array) {
      if (context.length > 0) {
        context += `/${item}`;
      } else {
        context = item;
      }
      if (index === array.length - 2) {
        // In case of "/Customer/Set/Property" this is to check navigation restrictions of "Customer" for non-filterable properties in "Set"
        const navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(metaModelContext, entitySetPath, item);
        const filterRestrictions = navigationRestrictions === null || navigationRestrictions === void 0 ? void 0 : navigationRestrictions.FilterRestrictions;
        const nonFilterableProperties = filterRestrictions === null || filterRestrictions === void 0 ? void 0 : filterRestrictions.NonFilterableProperties;
        const targetPropertyPath = array[array.length - 1];
        if (nonFilterableProperties !== null && nonFilterableProperties !== void 0 && nonFilterableProperties.find(function (propertyPath) {
          return propertyPath.$PropertyPath === targetPropertyPath;
        })) {
          return true;
        }
      }
      if (index === array.length - 1) {
        //last path segment
        isNoFilterable = isInNonFilterableProperties(metaModelContext, entitySetPath, context);
      } else if (metaModelContext.getObject(`${entitySetPath}/$NavigationPropertyBinding/${item}`)) {
        //check existing context path and initialize it
        isNoFilterable = isInNonFilterableProperties(metaModelContext, entitySetPath, context);
        context = "";
        //set the new EntitySet
        entitySetPath = `/${metaModelContext.getObject(`${entitySetPath}/$NavigationPropertyBinding/${item}`)}`;
      }
      return isNoFilterable;
    });
    return isNoFilterable;
  }

  // Internal usage only

  function getPropertyDataType(navigationContext) {
    let dataType = navigationContext.getProperty("$Type");
    // if $kind exists, it's not a DataField and we have the final type already
    if (!navigationContext.getProperty("$kind")) {
      switch (dataType) {
        case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
          dataType = undefined;
          break;
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
          dataType = navigationContext.getProperty("Value/$Path/$Type");
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        default:
          const annotationPath = navigationContext.getProperty("Target/$AnnotationPath");
          if (annotationPath) {
            if (annotationPath.includes("com.sap.vocabularies.Communication.v1.Contact")) {
              dataType = navigationContext.getProperty("Target/$AnnotationPath/fn/$Path/$Type");
            } else if (annotationPath.includes("com.sap.vocabularies.UI.v1.DataPoint")) {
              dataType = navigationContext.getProperty("Value/$Path/$Type");
            } else {
              // e.g. FieldGroup or Chart
              dataType = undefined;
            }
          } else {
            dataType = undefined;
          }
          break;
      }
    }
    return dataType;
  }

  // From CommonUtils, CommonHelper, FilterBarDelegate, FilterField, ValueListHelper, TableDelegate
  // TODO check used places and rework this
  function isPropertyFilterable(metaModelContext, entitySetPath, property, skipHiddenFilters) {
    if (typeof property !== "string") {
      throw new Error("sProperty parameter must be a string");
    }

    // Parameters should be rendered as filterfields
    if (metaModelContext.getObject(`${entitySetPath}/@com.sap.vocabularies.Common.v1.ResultContext`) === true) {
      return true;
    }
    const navigationContext = metaModelContext.createBindingContext(`${entitySetPath}/${property}`);
    if (navigationContext && !skipHiddenFilters) {
      if (navigationContext.getProperty("@com.sap.vocabularies.UI.v1.Hidden") === true || navigationContext.getProperty("@com.sap.vocabularies.UI.v1.HiddenFilter") === true) {
        return false;
      }
      const hiddenPath = navigationContext.getProperty("@com.sap.vocabularies.UI.v1.Hidden/$Path");
      const hiddenFilterPath = navigationContext.getProperty("@com.sap.vocabularies.UI.v1.HiddenFilter/$Path");
      if (hiddenPath && hiddenFilterPath) {
        return compileExpression(not(or(pathInModel(hiddenPath), pathInModel(hiddenFilterPath))));
      } else if (hiddenPath) {
        return compileExpression(not(pathInModel(hiddenPath)));
      } else if (hiddenFilterPath) {
        return compileExpression(not(pathInModel(hiddenFilterPath)));
      }
    }
    return checkEntitySetIsFilterable(entitySetPath, metaModelContext, property, navigationContext);
  }

  // From TransactionHelper / EditFlow
  _exports.isPropertyFilterable = isPropertyFilterable;
  function getNonComputedVisibleFields(metaModelContext, path, appComponent) {
    const technicalKeys = metaModelContext.getObject(`${path}/`).$Key;
    const nonComputedVisibleKeys = [];
    const immutableVisibleFields = [];
    const entityType = metaModelContext.getObject(`${path}/`);
    for (const item in entityType) {
      if (entityType[item].$kind && entityType[item].$kind === "Property") {
        const annotations = metaModelContext.getObject(`${path}/${item}@`) || {},
          isKey = technicalKeys.includes(item),
          isImmutable = annotations["@Org.OData.Core.V1.Immutable"],
          isNonComputed = !annotations["@Org.OData.Core.V1.Computed"],
          isVisible = !annotations["@com.sap.vocabularies.UI.v1.Hidden"],
          isComputedDefaultValue = annotations["@Org.OData.Core.V1.ComputedDefaultValue"],
          isKeyComputedDefaultValueWithText = isKey && entityType[item].$Type === "Edm.Guid" ? isComputedDefaultValue && annotations["@com.sap.vocabularies.Common.v1.Text"] : false;
        if ((isKeyComputedDefaultValueWithText || isKey && entityType[item].$Type !== "Edm.Guid") && isNonComputed && isVisible) {
          nonComputedVisibleKeys.push(item);
        } else if (isImmutable && isNonComputed && isVisible) {
          immutableVisibleFields.push(item);
        }
        if (!isNonComputed && isComputedDefaultValue && appComponent) {
          const diagnostics = appComponent.getDiagnostics();
          const message = "Core.ComputedDefaultValue is ignored as Core.Computed is already set to true";
          diagnostics.addIssue(IssueCategory.Annotation, IssueSeverity.Medium, message, IssueCategoryType, IssueCategoryType.Annotations.IgnoredAnnotation);
        }
      }
    }
    const requiredProperties = METAMODEL_FUNCTIONS.getRequiredPropertiesFromInsertRestrictions(path, metaModelContext);
    if (requiredProperties.length) {
      requiredProperties.forEach(function (property) {
        const annotations = metaModelContext.getObject(`${path}/${property}@`),
          isVisible = !(annotations !== null && annotations !== void 0 && annotations["@com.sap.vocabularies.UI.v1.Hidden"]);
        if (isVisible && !nonComputedVisibleKeys.includes(property) && !immutableVisibleFields.includes(property)) {
          nonComputedVisibleKeys.push(property);
        }
      });
    }
    return nonComputedVisibleKeys.concat(immutableVisibleFields);
  }
  // Internal only, exposed for tests
  _exports.getNonComputedVisibleFields = getNonComputedVisibleFields;
  function getRequiredProperties(path, metaModelContext) {
    let checkUpdateRestrictions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    const requiredProperties = [];
    let requiredPropertiesWithPath = [];
    const navigationText = "$NavigationPropertyBinding";
    let entitySetAnnotation = null;
    if (path.endsWith("$")) {
      // if sPath comes with a $ in the end, removing it as it is of no significance
      path = path.replace("/$", "");
    }
    const entityTypePathParts = path.replaceAll("%2F", "/").split("/").filter(ModelHelper.filterOutNavPropBinding);
    const entitySetPath = ModelHelper.getEntitySetPath(path, metaModelContext);
    const entitySetPathParts = entitySetPath.split("/").filter(ModelHelper.filterOutNavPropBinding);
    const isContainment = metaModelContext.getObject(`/${entityTypePathParts.join("/")}/$ContainsTarget`) ? true : false;
    const containmentNavPath = isContainment ? entityTypePathParts[entityTypePathParts.length - 1] : "";

    //Restrictions directly at Entity Set
    //e.g. FR in "NS.EntityContainer/SalesOrderManage" ContextPath: /SalesOrderManage
    if (!isContainment) {
      entitySetAnnotation = metaModelContext.getObject(`${entitySetPath}@`);
    }
    if (entityTypePathParts.length > 1) {
      const navPath = isContainment ? containmentNavPath : entitySetPathParts[entitySetPathParts.length - 1];
      const parentEntitySetPath = isContainment ? entitySetPath : `/${entitySetPathParts.slice(0, -1).join(`/${navigationText}/`)}`;
      //Navigation restrictions
      //e.g. Parent "/Customer" with NavigationPropertyPath="Set" ContextPath: Customer/Set
      const navigationRestrictions = METAMODEL_FUNCTIONS.getNavigationRestrictions(metaModelContext, parentEntitySetPath, navPath.replaceAll("%2F", "/"));
      if (navigationRestrictions !== undefined && METAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(navigationRestrictions, true, checkUpdateRestrictions)) {
        var _navigationRestrictio, _navigationRestrictio2;
        requiredPropertiesWithPath = checkUpdateRestrictions ? ((_navigationRestrictio = navigationRestrictions.UpdateRestrictions) === null || _navigationRestrictio === void 0 ? void 0 : _navigationRestrictio.RequiredProperties) ?? [] : ((_navigationRestrictio2 = navigationRestrictions.InsertRestrictions) === null || _navigationRestrictio2 === void 0 ? void 0 : _navigationRestrictio2.RequiredProperties) ?? [];
      }
      if (!requiredPropertiesWithPath.length && METAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(entitySetAnnotation, false, checkUpdateRestrictions)) {
        requiredPropertiesWithPath = METAMODEL_FUNCTIONS.getRequiredPropertiesFromAnnotations(entitySetAnnotation, checkUpdateRestrictions);
      }
    } else if (METAMODEL_FUNCTIONS.hasRestrictedPropertiesInAnnotations(entitySetAnnotation, false, checkUpdateRestrictions)) {
      requiredPropertiesWithPath = METAMODEL_FUNCTIONS.getRequiredPropertiesFromAnnotations(entitySetAnnotation, checkUpdateRestrictions);
    }
    requiredPropertiesWithPath.forEach(function (requiredProperty) {
      const propertyPath = requiredProperty.$PropertyPath;
      requiredProperties.push(propertyPath);
    });
    return requiredProperties;
  }

  // TransactionHelper // InternalField
  function getRequiredPropertiesFromInsertRestrictions(path, metamodelContext) {
    return METAMODEL_FUNCTIONS.getRequiredProperties(path, metamodelContext);
  }

  // InternalField
  _exports.getRequiredPropertiesFromInsertRestrictions = getRequiredPropertiesFromInsertRestrictions;
  function getRequiredPropertiesFromUpdateRestrictions(path, metamodelContext) {
    return METAMODEL_FUNCTIONS.getRequiredProperties(path, metamodelContext, true);
  }

  // Internal only, exposed for tests
  _exports.getRequiredPropertiesFromUpdateRestrictions = getRequiredPropertiesFromUpdateRestrictions;
  function getRequiredPropertiesFromAnnotations(annotations) {
    var _annotations$OrgODa2;
    let checkUpdateRestrictions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    if (checkUpdateRestrictions) {
      var _annotations$OrgODa;
      return (annotations === null || annotations === void 0 ? void 0 : (_annotations$OrgODa = annotations["@Org.OData.Capabilities.V1.UpdateRestrictions"]) === null || _annotations$OrgODa === void 0 ? void 0 : _annotations$OrgODa.RequiredProperties) ?? [];
    }
    return (annotations === null || annotations === void 0 ? void 0 : (_annotations$OrgODa2 = annotations["@Org.OData.Capabilities.V1.InsertRestrictions"]) === null || _annotations$OrgODa2 === void 0 ? void 0 : _annotations$OrgODa2.RequiredProperties) ?? [];
  }

  // Internal only, exposed for tests
  function hasRestrictedPropertiesInAnnotations(annotations) {
    var _entitytSetAnnotation;
    let isNavigationRestrictions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let checkUpdateRestrictions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (isNavigationRestrictions) {
      var _navAnnotations$Inser;
      const navAnnotations = annotations;
      if (checkUpdateRestrictions) {
        var _navAnnotations$Updat;
        return navAnnotations !== null && navAnnotations !== void 0 && (_navAnnotations$Updat = navAnnotations.UpdateRestrictions) !== null && _navAnnotations$Updat !== void 0 && _navAnnotations$Updat.RequiredProperties ? true : false;
      }
      return navAnnotations !== null && navAnnotations !== void 0 && (_navAnnotations$Inser = navAnnotations.InsertRestrictions) !== null && _navAnnotations$Inser !== void 0 && _navAnnotations$Inser.RequiredProperties ? true : false;
    } else if (checkUpdateRestrictions) {
      var _entityAnnotations$O;
      const entityAnnotations = annotations;
      return entityAnnotations !== null && entityAnnotations !== void 0 && (_entityAnnotations$O = entityAnnotations["@Org.OData.Capabilities.V1.UpdateRestrictions"]) !== null && _entityAnnotations$O !== void 0 && _entityAnnotations$O.RequiredProperties ? true : false;
    }
    const entitytSetAnnotations = annotations;
    return entitytSetAnnotations !== null && entitytSetAnnotations !== void 0 && (_entitytSetAnnotation = entitytSetAnnotations["@Org.OData.Capabilities.V1.InsertRestrictions"]) !== null && _entitytSetAnnotation !== void 0 && _entitytSetAnnotation.RequiredProperties ? true : false;
  }
  // Used in this file and FilterUtils
  /**
   * Returns custom aggregates for a given entitySet.
   *
   * @param annotations A list of annotations of the entity set
   * @returns A map to the custom aggregates keyed by their qualifiers
   */
  function getAllCustomAggregates(annotations) {
    const customAggregates = {};
    let annotation;
    for (const annotationKey in annotations) {
      if (annotationKey.startsWith("@Org.OData.Aggregation.V1.CustomAggregate")) {
        annotation = annotationKey.replace("@Org.OData.Aggregation.V1.CustomAggregate#", "");
        const annotationParts = annotation.split("@");
        if (annotationParts.length == 2) {
          const customAggregate = {};
          //inner annotation that is not part of 	Validation.AggregatableTerms
          if (annotationParts[1] == "Org.OData.Aggregation.V1.ContextDefiningProperties") {
            customAggregate.contextDefiningProperties = annotations[annotationKey];
          }
          if (annotationParts[1] == "com.sap.vocabularies.Common.v1.Label") {
            customAggregate.label = annotations[annotationKey];
          }
          customAggregates[annotationParts[0]] = customAggregate;
        } else if (annotationParts.length == 1) {
          customAggregates[annotationParts[0]] = {
            name: annotationParts[0],
            propertyPath: annotationParts[0],
            label: `Custom Aggregate (${annotation})`,
            sortable: true,
            sortOrder: "both",
            custom: true
          };
        }
      }
    }
    return customAggregates;
  }

  // Used in ValueListHelper, ChartDelegate and ValueHelp-TableDelegate
  _exports.getAllCustomAggregates = getAllCustomAggregates;
  /**
   * Determines the sorting information from the restriction annotation.
   *
   * @param entitySetAnnotations EntitySet or collection annotations with the sort restrictions annotation
   * @returns An object containing the sort restriction information
   */
  function getSortRestrictionsInfo(entitySetAnnotations) {
    const sortRestrictionsInfo = {
      sortable: true,
      propertyInfo: {}
    };
    const sortRestrictions = entitySetAnnotations["@Org.OData.Capabilities.V1.SortRestrictions"];
    if (!sortRestrictions) {
      return sortRestrictionsInfo;
    }
    if (sortRestrictions.Sortable === false) {
      sortRestrictionsInfo.sortable = false;
    }
    for (const propertyItem of sortRestrictions.NonSortableProperties || []) {
      const propertyName = propertyItem.$PropertyPath;
      sortRestrictionsInfo.propertyInfo[propertyName] = {
        sortable: false
      };
    }
    for (const propertyItem of sortRestrictions.AscendingOnlyProperties || []) {
      const propertyName = propertyItem.$PropertyPath;
      sortRestrictionsInfo.propertyInfo[propertyName] = {
        sortable: true,
        sortDirection: "asc" // not used, yet
      };
    }

    for (const propertyItem of sortRestrictions.DescendingOnlyProperties || []) {
      const propertyName = propertyItem.$PropertyPath;
      sortRestrictionsInfo.propertyInfo[propertyName] = {
        sortable: true,
        sortDirection: "desc" // not used, yet
      };
    }

    return sortRestrictionsInfo;
  }

  // Used in ChartDelegate and ValueHelp-TableDelegate
  _exports.getSortRestrictionsInfo = getSortRestrictionsInfo;
  /**
   * Determines the filter information based on the filter restrictions annoation.
   *
   * @param filterRestrictions The filter restrictions annotation
   * @returns An object containing the filter restriction information
   */
  function getFilterRestrictionsInfo(filterRestrictions) {
    let i, propertyName;
    const filterRestrictionsInfo = {
      filterable: true,
      requiresFilter: (filterRestrictions === null || filterRestrictions === void 0 ? void 0 : filterRestrictions.RequiresFilter) || false,
      propertyInfo: {},
      requiredProperties: []
    };
    if (!filterRestrictions) {
      return filterRestrictionsInfo;
    }
    if (filterRestrictions.Filterable === false) {
      filterRestrictionsInfo.filterable = false;
    }

    //Hierarchical Case
    if (filterRestrictions.RequiredProperties) {
      for (i = 0; i < filterRestrictions.RequiredProperties.length; i++) {
        propertyName = filterRestrictions.RequiredProperties[i].$PropertyPath;
        filterRestrictionsInfo.requiredProperties.push(propertyName);
      }
    }
    if (filterRestrictions.NonFilterableProperties) {
      for (i = 0; i < filterRestrictions.NonFilterableProperties.length; i++) {
        propertyName = filterRestrictions.NonFilterableProperties[i].$PropertyPath;
        filterRestrictionsInfo.propertyInfo[propertyName] = {
          filterable: false
        };
      }
    }
    if (filterRestrictions.FilterExpressionRestrictions) {
      //TBD
      for (i = 0; i < filterRestrictions.FilterExpressionRestrictions.length; i++) {
        var _filterRestrictions$F;
        propertyName = (_filterRestrictions$F = filterRestrictions.FilterExpressionRestrictions[i].Property) === null || _filterRestrictions$F === void 0 ? void 0 : _filterRestrictions$F.$PropertyPath;
        if (propertyName) {
          filterRestrictionsInfo.propertyInfo[propertyName] = {
            filterable: true,
            allowedExpressions: filterRestrictions.FilterExpressionRestrictions[i].AllowedExpressions
          };
        }
      }
    }
    return filterRestrictionsInfo;
  }

  // Used in ChartDelegate and ValueHelp-TableDelegate
  /**
   * Provides the information if the FilterExpression is a multiValue Filter Expression.
   *
   * @param filterExpression The FilterExpressionType
   * @returns A boolean value wether it is a multiValue Filter Expression or not
   */
  _exports.getFilterRestrictionsInfo = getFilterRestrictionsInfo;
  function isMultiValueFilterExpression(filterExpression) {
    let isMultiValue = true;

    //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression
    switch (filterExpression) {
      case "SearchExpression":
      case "SingleRange":
      case "SingleValue":
        isMultiValue = false;
        break;
      default:
        break;
    }
    return isMultiValue;
  }

  // DO NOT USE, only for tests and internally in this file
  _exports.isMultiValueFilterExpression = isMultiValueFilterExpression;
  const METAMODEL_FUNCTIONS = {
    getRequiredProperties,
    getRequiredPropertiesFromAnnotations,
    hasRestrictedPropertiesInAnnotations,
    getRequiredPropertiesFromInsertRestrictions,
    getNavigationRestrictions,
    getAllCustomAggregates
  };
  _exports.METAMODEL_FUNCTIONS = METAMODEL_FUNCTIONS;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/MetaModelFunction", ["sap/fe/core/converters/helpers/IssueManager","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/ModelHelper","sap/fe/core/type/EDM"],function(e,t,r,i){"use strict";var o={};var n=i.isTypeFilterable;var s=t.pathInModel;var a=t.or;var l=t.not;var c=t.compileExpression;var u=e.IssueSeverity;var p=e.IssueCategoryType;var g=e.IssueCategory;function d(e,t){let i;let o;const n="$NavigationPropertyBinding";const s="@Org.OData.Capabilities.V1.SearchRestrictions";const a=e.replaceAll("%2F","/").split("/").filter(r.filterOutNavPropBinding);const l=r.getEntitySetPath(e,t);const c=l.split("/").filter(r.filterOutNavPropBinding);const u=t.getObject(`/${a.join("/")}/$ContainsTarget`)?true:false;const p=u?a[a.length-1]:"";if(!u){i=t.getObject(`${l}${s}`)}if(a.length>1){const e=u?p:c[c.length-1];const r=u?l:`/${c.slice(0,-1).join(`/${n}/`)}`;const i=U.getNavigationRestrictions(t,r,e.replaceAll("%2F","/"));o=i===null||i===void 0?void 0:i.SearchRestrictions}return o??i}o.getSearchRestrictions=d;function f(e,t,r){const i=e.getObject(`${t}@Org.OData.Capabilities.V1.NavigationRestrictions`);const o=i===null||i===void 0?void 0:i.RestrictedProperties;return o===null||o===void 0?void 0:o.find(function(e){var t;return((t=e.NavigationProperty)===null||t===void 0?void 0:t.$NavigationPropertyPath)===r})}o.getNavigationRestrictions=f;function v(e,t,r){let i=false;const o=e.getObject(`${t}@Org.OData.Capabilities.V1.FilterRestrictions`);if(o!==null&&o!==void 0&&o.NonFilterableProperties){i=o.NonFilterableProperties.some(function(e){return e.$NavigationPropertyPath===r||e.$PropertyPath===r})}return i}function P(e,t,r){let i=false;const o=e.getObject(t+"@Org.OData.Aggregation.V1.ApplySupported")?true:false;if(o){const o=e.getObject(`${t}@`);const n=U.getAllCustomAggregates(o);const s=n?Object.keys(n):undefined;if(s!==null&&s!==void 0&&s.includes(r)){i=true}}return i}o.isCustomAggregate=P;function b(e,t,r,i){let o=e.split("/").length===2&&!r.includes("/")?!v(t,e,r)&&!P(t,e,r):!h(t,e,r);if(o&&i){const e=$(i);if(e){o=e?n(e):false}else{o=false}}return o}function h(e,t,r){const i=`${t}/${r}`,o=i.split("/").splice(0,2),n=i.split("/").splice(2);let s=false,a="";t=o.join("/");s=n.some(function(r,i,o){if(a.length>0){a+=`/${r}`}else{a=r}if(i===o.length-2){const i=U.getNavigationRestrictions(e,t,r);const n=i===null||i===void 0?void 0:i.FilterRestrictions;const s=n===null||n===void 0?void 0:n.NonFilterableProperties;const a=o[o.length-1];if(s!==null&&s!==void 0&&s.find(function(e){return e.$PropertyPath===a})){return true}}if(i===o.length-1){s=v(e,t,a)}else if(e.getObject(`${t}/$NavigationPropertyBinding/${r}`)){s=v(e,t,a);a="";t=`/${e.getObject(`${t}/$NavigationPropertyBinding/${r}`)}`}return s});return s}function $(e){let t=e.getProperty("$Type");if(!e.getProperty("$kind")){switch(t){case"com.sap.vocabularies.UI.v1.DataFieldForAction":case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":t=undefined;break;case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":t=e.getProperty("Value/$Path/$Type");break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":default:const r=e.getProperty("Target/$AnnotationPath");if(r){if(r.includes("com.sap.vocabularies.Communication.v1.Contact")){t=e.getProperty("Target/$AnnotationPath/fn/$Path/$Type")}else if(r.includes("com.sap.vocabularies.UI.v1.DataPoint")){t=e.getProperty("Value/$Path/$Type")}else{t=undefined}}else{t=undefined}break}}return t}function y(e,t,r,i){if(typeof r!=="string"){throw new Error("sProperty parameter must be a string")}if(e.getObject(`${t}/@com.sap.vocabularies.Common.v1.ResultContext`)===true){return true}const o=e.createBindingContext(`${t}/${r}`);if(o&&!i){if(o.getProperty("@com.sap.vocabularies.UI.v1.Hidden")===true||o.getProperty("@com.sap.vocabularies.UI.v1.HiddenFilter")===true){return false}const e=o.getProperty("@com.sap.vocabularies.UI.v1.Hidden/$Path");const t=o.getProperty("@com.sap.vocabularies.UI.v1.HiddenFilter/$Path");if(e&&t){return c(l(a(s(e),s(t))))}else if(e){return c(l(s(e)))}else if(t){return c(l(s(t)))}}return b(t,e,r,o)}o.isPropertyFilterable=y;function R(e,t,r){const i=e.getObject(`${t}/`).$Key;const o=[];const n=[];const s=e.getObject(`${t}/`);for(const a in s){if(s[a].$kind&&s[a].$kind==="Property"){const l=e.getObject(`${t}/${a}@`)||{},c=i.includes(a),d=l["@Org.OData.Core.V1.Immutable"],f=!l["@Org.OData.Core.V1.Computed"],v=!l["@com.sap.vocabularies.UI.v1.Hidden"],P=l["@Org.OData.Core.V1.ComputedDefaultValue"],b=c&&s[a].$Type==="Edm.Guid"?P&&l["@com.sap.vocabularies.Common.v1.Text"]:false;if((b||c&&s[a].$Type!=="Edm.Guid")&&f&&v){o.push(a)}else if(d&&f&&v){n.push(a)}if(!f&&P&&r){const e=r.getDiagnostics();const t="Core.ComputedDefaultValue is ignored as Core.Computed is already set to true";e.addIssue(g.Annotation,u.Medium,t,p,p.Annotations.IgnoredAnnotation)}}}const a=U.getRequiredPropertiesFromInsertRestrictions(t,e);if(a.length){a.forEach(function(r){const i=e.getObject(`${t}/${r}@`),s=!(i!==null&&i!==void 0&&i["@com.sap.vocabularies.UI.v1.Hidden"]);if(s&&!o.includes(r)&&!n.includes(r)){o.push(r)}})}return o.concat(n)}o.getNonComputedVisibleFields=R;function m(e,t){let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;const o=[];let n=[];const s="$NavigationPropertyBinding";let a=null;if(e.endsWith("$")){e=e.replace("/$","")}const l=e.replaceAll("%2F","/").split("/").filter(r.filterOutNavPropBinding);const c=r.getEntitySetPath(e,t);const u=c.split("/").filter(r.filterOutNavPropBinding);const p=t.getObject(`/${l.join("/")}/$ContainsTarget`)?true:false;const g=p?l[l.length-1]:"";if(!p){a=t.getObject(`${c}@`)}if(l.length>1){const e=p?g:u[u.length-1];const r=p?c:`/${u.slice(0,-1).join(`/${s}/`)}`;const o=U.getNavigationRestrictions(t,r,e.replaceAll("%2F","/"));if(o!==undefined&&U.hasRestrictedPropertiesInAnnotations(o,true,i)){var d,f;n=i?((d=o.UpdateRestrictions)===null||d===void 0?void 0:d.RequiredProperties)??[]:((f=o.InsertRestrictions)===null||f===void 0?void 0:f.RequiredProperties)??[]}if(!n.length&&U.hasRestrictedPropertiesInAnnotations(a,false,i)){n=U.getRequiredPropertiesFromAnnotations(a,i)}}else if(U.hasRestrictedPropertiesInAnnotations(a,false,i)){n=U.getRequiredPropertiesFromAnnotations(a,i)}n.forEach(function(e){const t=e.$PropertyPath;o.push(t)});return o}function O(e,t){return U.getRequiredProperties(e,t)}o.getRequiredPropertiesFromInsertRestrictions=O;function I(e,t){return U.getRequiredProperties(e,t,true)}o.getRequiredPropertiesFromUpdateRestrictions=I;function F(e){var t;let r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(r){var i;return(e===null||e===void 0?void 0:(i=e["@Org.OData.Capabilities.V1.UpdateRestrictions"])===null||i===void 0?void 0:i.RequiredProperties)??[]}return(e===null||e===void 0?void 0:(t=e["@Org.OData.Capabilities.V1.InsertRestrictions"])===null||t===void 0?void 0:t.RequiredProperties)??[]}function C(e){var t;let r=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(r){var o;const t=e;if(i){var n;return t!==null&&t!==void 0&&(n=t.UpdateRestrictions)!==null&&n!==void 0&&n.RequiredProperties?true:false}return t!==null&&t!==void 0&&(o=t.InsertRestrictions)!==null&&o!==void 0&&o.RequiredProperties?true:false}else if(i){var s;const t=e;return t!==null&&t!==void 0&&(s=t["@Org.OData.Capabilities.V1.UpdateRestrictions"])!==null&&s!==void 0&&s.RequiredProperties?true:false}const a=e;return a!==null&&a!==void 0&&(t=a["@Org.OData.Capabilities.V1.InsertRestrictions"])!==null&&t!==void 0&&t.RequiredProperties?true:false}function A(e){const t={};let r;for(const i in e){if(i.startsWith("@Org.OData.Aggregation.V1.CustomAggregate")){r=i.replace("@Org.OData.Aggregation.V1.CustomAggregate#","");const o=r.split("@");if(o.length==2){const r={};if(o[1]=="Org.OData.Aggregation.V1.ContextDefiningProperties"){r.contextDefiningProperties=e[i]}if(o[1]=="com.sap.vocabularies.Common.v1.Label"){r.label=e[i]}t[o[0]]=r}else if(o.length==1){t[o[0]]={name:o[0],propertyPath:o[0],label:`Custom Aggregate (${r})`,sortable:true,sortOrder:"both",custom:true}}}}return t}o.getAllCustomAggregates=A;function D(e){const t={sortable:true,propertyInfo:{}};const r=e["@Org.OData.Capabilities.V1.SortRestrictions"];if(!r){return t}if(r.Sortable===false){t.sortable=false}for(const e of r.NonSortableProperties||[]){const r=e.$PropertyPath;t.propertyInfo[r]={sortable:false}}for(const e of r.AscendingOnlyProperties||[]){const r=e.$PropertyPath;t.propertyInfo[r]={sortable:true,sortDirection:"asc"}}for(const e of r.DescendingOnlyProperties||[]){const r=e.$PropertyPath;t.propertyInfo[r]={sortable:true,sortDirection:"desc"}}return t}o.getSortRestrictionsInfo=D;function N(e){let t,r;const i={filterable:true,requiresFilter:(e===null||e===void 0?void 0:e.RequiresFilter)||false,propertyInfo:{},requiredProperties:[]};if(!e){return i}if(e.Filterable===false){i.filterable=false}if(e.RequiredProperties){for(t=0;t<e.RequiredProperties.length;t++){r=e.RequiredProperties[t].$PropertyPath;i.requiredProperties.push(r)}}if(e.NonFilterableProperties){for(t=0;t<e.NonFilterableProperties.length;t++){r=e.NonFilterableProperties[t].$PropertyPath;i.propertyInfo[r]={filterable:false}}}if(e.FilterExpressionRestrictions){for(t=0;t<e.FilterExpressionRestrictions.length;t++){var o;r=(o=e.FilterExpressionRestrictions[t].Property)===null||o===void 0?void 0:o.$PropertyPath;if(r){i.propertyInfo[r]={filterable:true,allowedExpressions:e.FilterExpressionRestrictions[t].AllowedExpressions}}}}return i}o.getFilterRestrictionsInfo=N;function q(e){let t=true;switch(e){case"SearchExpression":case"SingleRange":case"SingleValue":t=false;break;default:break}return t}o.isMultiValueFilterExpression=q;const U={getRequiredProperties:m,getRequiredPropertiesFromAnnotations:F,hasRestrictedPropertiesInAnnotations:C,getRequiredPropertiesFromInsertRestrictions:O,getNavigationRestrictions:f,getAllCustomAggregates:A};o.METAMODEL_FUNCTIONS=U;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ModelHelper-dbg", ["sap/base/util/UriParameters", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/TypeGuards"], function (UriParameters, MetaModelConverter, TypeGuards) {
  "use strict";

  var isEntitySet = TypeGuards.isEntitySet;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const ModelHelper = {
    /**
     * Method to determine if the programming model is sticky.
     *
     * @function
     * @name isStickySessionSupported
     * @param metaModel ODataModelMetaModel to check for sticky enabled entity
     * @returns Returns true if sticky, else false
     */
    isStickySessionSupported: function (metaModel) {
      const entityContainer = metaModel.getObject("/");
      for (const entitySetName in entityContainer) {
        if (entityContainer[entitySetName].$kind === "EntitySet" && metaModel.getObject(`/${entitySetName}@com.sap.vocabularies.Session.v1.StickySessionSupported`)) {
          return true;
        }
      }
      return false;
    },
    /**
     * Method to determine if the programming model is draft.
     *
     * @function
     * @name isDraftSupported
     * @param metaModel ODataModelMetaModel of the context for which draft support shall be checked
     * @param path Path for which draft support shall be checked
     * @returns Returns true if draft, else false
     */
    isDraftSupported: function (metaModel, path) {
      const metaContext = metaModel.getMetaContext(path);
      const objectPath = getInvolvedDataModelObjects(metaContext);
      return this.isObjectPathDraftSupported(objectPath);
    },
    /**
     * Checks if draft is supported for the data model object path.
     *
     * @param dataModelObjectPath
     * @returns `true` if it is supported
     */
    isObjectPathDraftSupported: function (dataModelObjectPath) {
      var _dataModelObjectPath$, _dataModelObjectPath$2, _dataModelObjectPath$3, _dataModelObjectPath$4, _dataModelObjectPath$5, _dataModelObjectPath$6, _dataModelObjectPath$7;
      const currentEntitySet = dataModelObjectPath.targetEntitySet;
      const bIsDraftRoot = ModelHelper.isDraftRoot(currentEntitySet);
      const bIsDraftNode = ModelHelper.isDraftNode(currentEntitySet);
      const bIsDraftParentEntityForContainment = (_dataModelObjectPath$ = dataModelObjectPath.targetObject) !== null && _dataModelObjectPath$ !== void 0 && _dataModelObjectPath$.containsTarget && ((_dataModelObjectPath$2 = dataModelObjectPath.startingEntitySet) !== null && _dataModelObjectPath$2 !== void 0 && (_dataModelObjectPath$3 = _dataModelObjectPath$2.annotations) !== null && _dataModelObjectPath$3 !== void 0 && (_dataModelObjectPath$4 = _dataModelObjectPath$3.Common) !== null && _dataModelObjectPath$4 !== void 0 && _dataModelObjectPath$4.DraftRoot || (_dataModelObjectPath$5 = dataModelObjectPath.startingEntitySet) !== null && _dataModelObjectPath$5 !== void 0 && (_dataModelObjectPath$6 = _dataModelObjectPath$5.annotations) !== null && _dataModelObjectPath$6 !== void 0 && (_dataModelObjectPath$7 = _dataModelObjectPath$6.Common) !== null && _dataModelObjectPath$7 !== void 0 && _dataModelObjectPath$7.DraftNode) ? true : false;
      return bIsDraftRoot || bIsDraftNode || !currentEntitySet && bIsDraftParentEntityForContainment;
    },
    /**
     * Method to determine if the service, supports collaboration draft.
     *
     * @function
     * @name isCollaborationDraftSupported
     * @param metaObject MetaObject to be used for determination
     * @param templateInterface API provided by UI5 templating if used
     * @returns Returns true if the service supports collaboration draft, else false
     */
    isCollaborationDraftSupported: function (metaObject, templateInterface) {
      // We'll hide the first version of the collaboration draft behind a URL parameter
      if (UriParameters.fromQuery(window.location.search).get("sap-fe-xx-enableCollaborationDraft") === "true") {
        var _templateInterface$co;
        const oMetaModel = (templateInterface === null || templateInterface === void 0 ? void 0 : (_templateInterface$co = templateInterface.context) === null || _templateInterface$co === void 0 ? void 0 : _templateInterface$co.getModel()) || metaObject;
        const oEntityContainer = oMetaModel.getObject("/");
        for (const sEntitySet in oEntityContainer) {
          if (oEntityContainer[sEntitySet].$kind === "EntitySet" && oMetaModel.getObject(`/${sEntitySet}@com.sap.vocabularies.Common.v1.DraftRoot/ShareAction`)) {
            return true;
          }
        }
      }
      return false;
    },
    /**
     * Method to get the path of the DraftRoot path according to the provided context.
     *
     * @function
     * @name getDraftRootPath
     * @param oContext OdataModel context
     * @returns Returns the path of the draftRoot entity, or undefined if no draftRoot is found
     */
    getDraftRootPath: function (oContext) {
      const oMetaModel = oContext.getModel().getMetaModel();
      const getRootPath = function (sPath, model) {
        var _RegExp$exec;
        let firstIteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        const sIterationPath = firstIteration ? sPath : (_RegExp$exec = new RegExp(/.*(?=\/)/).exec(sPath)) === null || _RegExp$exec === void 0 ? void 0 : _RegExp$exec[0]; // *Regex to get the ancestor
        if (sIterationPath && sIterationPath !== "/") {
          var _mDataModel$targetEnt, _mDataModel$targetEnt2;
          const sEntityPath = oMetaModel.getMetaPath(sIterationPath);
          const mDataModel = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.getContext(sEntityPath));
          if ((_mDataModel$targetEnt = mDataModel.targetEntitySet) !== null && _mDataModel$targetEnt !== void 0 && (_mDataModel$targetEnt2 = _mDataModel$targetEnt.annotations.Common) !== null && _mDataModel$targetEnt2 !== void 0 && _mDataModel$targetEnt2.DraftRoot) {
            return sIterationPath;
          }
          return getRootPath(sIterationPath, model, false);
        }
        return undefined;
      };
      return getRootPath(oContext.getPath(), oContext.getModel());
    },
    /**
     * Method to get the path of the StickyRoot path according to the provided context.
     *
     * @function
     * @name getStickyRootPath
     * @param oContext OdataModel context
     * @returns Returns the path of the StickyRoot entity, or undefined if no StickyRoot is found
     */
    getStickyRootPath: function (oContext) {
      const oMetaModel = oContext.getModel().getMetaModel();
      const getRootPath = function (sPath, model) {
        var _RegExp$exec2;
        let firstIteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        const sIterationPath = firstIteration ? sPath : (_RegExp$exec2 = new RegExp(/.*(?=\/)/).exec(sPath)) === null || _RegExp$exec2 === void 0 ? void 0 : _RegExp$exec2[0]; // *Regex to get the ancestor
        if (sIterationPath && sIterationPath !== "/") {
          var _mDataModel$targetEnt3, _mDataModel$targetEnt4, _mDataModel$targetEnt5;
          const sEntityPath = oMetaModel.getMetaPath(sIterationPath);
          const mDataModel = MetaModelConverter.getInvolvedDataModelObjects(oMetaModel.getContext(sEntityPath));
          if ((_mDataModel$targetEnt3 = mDataModel.targetEntitySet) !== null && _mDataModel$targetEnt3 !== void 0 && (_mDataModel$targetEnt4 = _mDataModel$targetEnt3.annotations) !== null && _mDataModel$targetEnt4 !== void 0 && (_mDataModel$targetEnt5 = _mDataModel$targetEnt4.Session) !== null && _mDataModel$targetEnt5 !== void 0 && _mDataModel$targetEnt5.StickySessionSupported) {
            return sIterationPath;
          }
          return getRootPath(sIterationPath, model, false);
        }
        return undefined;
      };
      return getRootPath(oContext.getPath(), oContext.getModel());
    },
    /**
     * Returns the path to the target entity set via navigation property binding.
     *
     * @function
     * @name getTargetEntitySet
     * @param oContext Context for which the target entity set will be determined
     * @returns Returns the path to the target entity set
     */
    getTargetEntitySet: function (oContext) {
      const sPath = oContext.getPath();
      if (oContext.getObject("$kind") === "EntitySet" || oContext.getObject("$kind") === "Action" || oContext.getObject("0/$kind") === "Action") {
        return sPath;
      }
      const sEntitySetPath = ModelHelper.getEntitySetPath(sPath);
      return `/${oContext.getObject(sEntitySetPath)}`;
    },
    /**
     * Returns complete path to the entity set via using navigation property binding. Note: To be used only after the metamodel has loaded.
     *
     * @function
     * @name getEntitySetPath
     * @param path Path for which complete entitySet path needs to be determined from entityType path
     * @param odataMetaModel Metamodel to be used.(Optional in normal scenarios, but needed for parameterized service scenarios)
     * @returns Returns complete path to the entity set
     */
    getEntitySetPath: function (path, odataMetaModel) {
      let entitySetPath = "";
      if (!odataMetaModel) {
        // Previous implementation for getting entitySetPath from entityTypePath
        entitySetPath = `/${path.split("/").filter(ModelHelper.filterOutNavPropBinding).join("/$NavigationPropertyBinding/")}`;
      } else {
        // Calculating the entitySetPath from MetaModel.
        const pathParts = path.split("/").filter(ModelHelper.filterOutNavPropBinding);
        if (pathParts.length > 1) {
          const initialPathObject = {
            growingPath: "/",
            pendingNavPropBinding: ""
          };
          const pathObject = pathParts.reduce((pathUnderConstruction, pathPart, idx) => {
            const delimiter = !!idx && "/$NavigationPropertyBinding/" || "";
            let {
              growingPath,
              pendingNavPropBinding
            } = pathUnderConstruction;
            const tempPath = growingPath + delimiter;
            const navPropBindings = odataMetaModel.getObject(tempPath);
            const navPropBindingToCheck = pendingNavPropBinding ? `${pendingNavPropBinding}/${pathPart}` : pathPart;
            if (navPropBindings && Object.keys(navPropBindings).length > 0 && navPropBindings.hasOwnProperty(navPropBindingToCheck)) {
              growingPath = tempPath + navPropBindingToCheck.replace("/", "%2F");
              pendingNavPropBinding = "";
            } else {
              pendingNavPropBinding += pendingNavPropBinding ? `/${pathPart}` : pathPart;
            }
            return {
              growingPath,
              pendingNavPropBinding
            };
          }, initialPathObject);
          entitySetPath = pathObject.growingPath;
        } else {
          entitySetPath = `/${pathParts[0]}`;
        }
      }
      return entitySetPath;
    },
    /**
     * Gets the path for the items property of MultiValueField parameters.
     *
     * @function
     * @name getActionParameterItemsModelPath
     * @param oParameter Action Parameter
     * @returns Returns the complete model path for the items property of MultiValueField parameters
     */
    getActionParameterItemsModelPath: function (oParameter) {
      return oParameter && oParameter.$Name ? `{path: 'mvfview>/${oParameter.$Name}'}` : undefined;
    },
    filterOutNavPropBinding: function (sPathPart) {
      return sPathPart !== "" && sPathPart !== "$NavigationPropertyBinding";
    },
    /**
     * Adds a setProperty to the created binding contexts of the internal JSON model.
     *
     * @function
     * @name enhanceInternalJSONModel
     * @param {sap.ui.model.json.JSONModel} Internal JSON Model which is enhanced
     */

    enhanceInternalJSONModel: function (oInternalModel) {
      const fnBindContext = oInternalModel.bindContext;
      oInternalModel.bindContext = function (sPath, oContext, mParameters) {
        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          args[_key - 3] = arguments[_key];
        }
        oContext = fnBindContext.apply(this, [sPath, oContext, mParameters, ...args]);
        const fnGetBoundContext = oContext.getBoundContext;
        oContext.getBoundContext = function () {
          for (var _len2 = arguments.length, subArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            subArgs[_key2] = arguments[_key2];
          }
          const oBoundContext = fnGetBoundContext.apply(this, ...subArgs);
          if (oBoundContext && !oBoundContext.setProperty) {
            oBoundContext.setProperty = function (sSetPropPath, value) {
              if (this.getObject() === undefined) {
                // initialize
                this.getModel().setProperty(this.getPath(), {});
              }
              this.getModel().setProperty(sSetPropPath, value, this);
            };
          }
          return oBoundContext;
        };
        return oContext;
      };
    },
    /**
     * Adds an handler on propertyChange.
     * The property "/editMode" is changed according to property '/isEditable' when this last one is set
     * in order to be compliant with former versions where building blocks use the property "/editMode"
     *
     * @function
     * @name enhanceUiJSONModel
     * @param {sap.ui.model.json.JSONModel} uiModel JSON Model which is enhanced
     * @param {object} library Core library of SAP Fiori elements
     */

    enhanceUiJSONModel: function (uiModel, library) {
      const fnSetProperty = uiModel.setProperty;
      uiModel.setProperty = function () {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        const value = args[1];
        if (args[0] === "/isEditable") {
          uiModel.setProperty("/editMode", value ? library.EditMode.Editable : library.EditMode.Display, args[2], args[3]);
        }
        return fnSetProperty.apply(this, [...args]);
      };
    },
    /**
     * Returns whether filtering on the table is case sensitive.
     *
     * @param oMetaModel The instance of the meta model
     * @returns Returns 'false' if FilterFunctions annotation supports 'tolower', else 'true'
     */
    isFilteringCaseSensitive: function (oMetaModel) {
      if (!oMetaModel) {
        return undefined;
      }
      const aFilterFunctions = oMetaModel.getObject("/@Org.OData.Capabilities.V1.FilterFunctions");
      // Get filter functions defined at EntityContainer and check for existence of 'tolower'
      return aFilterFunctions ? aFilterFunctions.indexOf("tolower") === -1 : true;
    },
    /**
     * Get MetaPath for the context.
     *
     * @param oContext Context to be used
     * @returns Returns the metapath for the context.
     */
    getMetaPathForContext: function (oContext) {
      const oModel = oContext.getModel(),
        oMetaModel = oModel.getMetaModel(),
        sPath = oContext.getPath();
      return oMetaModel && sPath && oMetaModel.getMetaPath(sPath);
    },
    /**
     * Get MetaPath for the context.
     *
     * @param contextPath MetaPath to be used
     * @returns Returns the root entity set path.
     */
    getRootEntitySetPath: function (contextPath) {
      let rootEntitySetPath = "";
      const aPaths = contextPath ? contextPath.split("/") : [];
      if (aPaths.length > 1) {
        rootEntitySetPath = aPaths[1];
      }
      return rootEntitySetPath;
    },
    /**
     * Get MetaPath for the listBinding.
     *
     * @param oView View of the control using listBinding
     * @param vListBinding ODataListBinding object or the binding path for a temporary list binding
     * @returns Returns the metapath for the listbinding.
     */
    getAbsoluteMetaPathForListBinding: function (oView, vListBinding) {
      const oMetaModel = oView.getModel().getMetaModel();
      let sMetaPath;
      if (typeof vListBinding === "string") {
        if (vListBinding.startsWith("/")) {
          // absolute path
          sMetaPath = oMetaModel.getMetaPath(vListBinding);
        } else {
          // relative path
          const oBindingContext = oView.getBindingContext();
          const sRootContextPath = oBindingContext.getPath();
          sMetaPath = oMetaModel.getMetaPath(`${sRootContextPath}/${vListBinding}`);
        }
      } else {
        // we already get a list binding use this one
        const oBinding = vListBinding;
        const oRootBinding = oBinding.getRootBinding();
        if (oBinding === oRootBinding) {
          // absolute path
          sMetaPath = oMetaModel.getMetaPath(oBinding.getPath());
        } else {
          // relative path
          const sRootBindingPath = oRootBinding.getPath();
          const sRelativePath = oBinding.getPath();
          sMetaPath = oMetaModel.getMetaPath(`${sRootBindingPath}/${sRelativePath}`);
        }
      }
      return sMetaPath;
    },
    /**
     * Method to determine whether the argument is a draft root.
     *
     * @function
     * @name isDraftRoot
     * @param entitySet EntitySet | Singleton | undefined
     * @returns Whether the argument is a draft root
     */
    isDraftRoot: function (entitySet) {
      return this.getDraftRoot(entitySet) !== undefined;
    },
    /**
     * Method to determine whether the argument is a draft node.
     *
     * @function
     * @name isDraftNode
     * @param entitySet EntitySet | Singleton | undefined
     * @returns Whether the argument is a draft node
     */
    isDraftNode: function (entitySet) {
      return this.getDraftNode(entitySet) !== undefined;
    },
    /**
     * Method to determine whether the argument is a sticky session root.
     *
     * @function
     * @name isSticky
     * @param entitySet EntitySet | Singleton | undefined
     * @returns Whether the argument is a sticky session root
     */
    isSticky: function (entitySet) {
      return this.getStickySession(entitySet) !== undefined;
    },
    /**
     * Method to determine if entity is updatable or not.
     *
     * @function
     * @name isUpdateHidden
     * @param entitySet EntitySet | Singleton | undefined
     * @param entityType EntityType
     * @returns True if updatable else false
     */
    isUpdateHidden: function (entitySet, entityType) {
      if (isEntitySet(entitySet)) {
        var _entitySet$annotation, _entityType$annotatio;
        return ((_entitySet$annotation = entitySet.annotations.UI) === null || _entitySet$annotation === void 0 ? void 0 : _entitySet$annotation.UpdateHidden) ?? (entityType === null || entityType === void 0 ? void 0 : (_entityType$annotatio = entityType.annotations.UI) === null || _entityType$annotatio === void 0 ? void 0 : _entityType$annotatio.UpdateHidden) ?? false;
      } else {
        return false;
      }
    },
    /**
     * Gets the @Common.DraftRoot annotation if the argument is an EntitySet.
     *
     * @function
     * @name getDraftRoot
     * @param entitySet EntitySet | Singleton | undefined
     * @returns DraftRoot
     */
    getDraftRoot: function (entitySet) {
      var _entitySet$annotation2;
      return isEntitySet(entitySet) ? (_entitySet$annotation2 = entitySet.annotations.Common) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.DraftRoot : undefined;
    },
    /**
     * Gets the @Common.DraftNode annotation if the argument is an EntitySet.
     *
     * @function
     * @name getDraftNode
     * @param entitySet EntitySet | Singleton | undefined
     * @returns DraftRoot
     */
    getDraftNode: function (entitySet) {
      var _entitySet$annotation3;
      return isEntitySet(entitySet) ? (_entitySet$annotation3 = entitySet.annotations.Common) === null || _entitySet$annotation3 === void 0 ? void 0 : _entitySet$annotation3.DraftNode : undefined;
    },
    /**
     * Helper method to get sticky session.
     *
     * @function
     * @name getStickySession
     * @param entitySet EntitySet | Singleton | undefined
     * @returns Session StickySessionSupported
     */
    getStickySession: function (entitySet) {
      var _entitySet$annotation4;
      return isEntitySet(entitySet) ? (_entitySet$annotation4 = entitySet.annotations.Session) === null || _entitySet$annotation4 === void 0 ? void 0 : _entitySet$annotation4.StickySessionSupported : undefined;
    },
    /**
     * Method to get the visibility state of delete button.
     *
     * @function
     * @name getDeleteHidden
     * @param entitySet EntitySet | Singleton | undefined
     * @param entityType EntityType
     * @returns True if delete button is hidden
     */
    getDeleteHidden: function (entitySet, entityType) {
      if (isEntitySet(entitySet)) {
        var _entitySet$annotation5, _entityType$annotatio2;
        return ((_entitySet$annotation5 = entitySet.annotations.UI) === null || _entitySet$annotation5 === void 0 ? void 0 : _entitySet$annotation5.DeleteHidden) ?? ((_entityType$annotatio2 = entityType.annotations.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.DeleteHidden);
      } else {
        return false;
      }
    }
  };
  return ModelHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ModelHelper", ["sap/base/util/UriParameters","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/TypeGuards"],function(t,e,n){"use strict";var o=n.isEntitySet;var i=e.getInvolvedDataModelObjects;const r={isStickySessionSupported:function(t){const e=t.getObject("/");for(const n in e){if(e[n].$kind==="EntitySet"&&t.getObject(`/${n}@com.sap.vocabularies.Session.v1.StickySessionSupported`)){return true}}return false},isDraftSupported:function(t,e){const n=t.getMetaContext(e);const o=i(n);return this.isObjectPathDraftSupported(o)},isObjectPathDraftSupported:function(t){var e,n,o,i,a,s,d;const u=t.targetEntitySet;const l=r.isDraftRoot(u);const c=r.isDraftNode(u);const g=(e=t.targetObject)!==null&&e!==void 0&&e.containsTarget&&((n=t.startingEntitySet)!==null&&n!==void 0&&(o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&i.DraftRoot||(a=t.startingEntitySet)!==null&&a!==void 0&&(s=a.annotations)!==null&&s!==void 0&&(d=s.Common)!==null&&d!==void 0&&d.DraftNode)?true:false;return l||c||!u&&g},isCollaborationDraftSupported:function(e,n){if(t.fromQuery(window.location.search).get("sap-fe-xx-enableCollaborationDraft")==="true"){var o;const t=(n===null||n===void 0?void 0:(o=n.context)===null||o===void 0?void 0:o.getModel())||e;const i=t.getObject("/");for(const e in i){if(i[e].$kind==="EntitySet"&&t.getObject(`/${e}@com.sap.vocabularies.Common.v1.DraftRoot/ShareAction`)){return true}}}return false},getDraftRootPath:function(t){const n=t.getModel().getMetaModel();const o=function(t,i){var r;let a=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const s=a?t:(r=new RegExp(/.*(?=\/)/).exec(t))===null||r===void 0?void 0:r[0];if(s&&s!=="/"){var d,u;const t=n.getMetaPath(s);const r=e.getInvolvedDataModelObjects(n.getContext(t));if((d=r.targetEntitySet)!==null&&d!==void 0&&(u=d.annotations.Common)!==null&&u!==void 0&&u.DraftRoot){return s}return o(s,i,false)}return undefined};return o(t.getPath(),t.getModel())},getStickyRootPath:function(t){const n=t.getModel().getMetaModel();const o=function(t,i){var r;let a=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const s=a?t:(r=new RegExp(/.*(?=\/)/).exec(t))===null||r===void 0?void 0:r[0];if(s&&s!=="/"){var d,u,l;const t=n.getMetaPath(s);const r=e.getInvolvedDataModelObjects(n.getContext(t));if((d=r.targetEntitySet)!==null&&d!==void 0&&(u=d.annotations)!==null&&u!==void 0&&(l=u.Session)!==null&&l!==void 0&&l.StickySessionSupported){return s}return o(s,i,false)}return undefined};return o(t.getPath(),t.getModel())},getTargetEntitySet:function(t){const e=t.getPath();if(t.getObject("$kind")==="EntitySet"||t.getObject("$kind")==="Action"||t.getObject("0/$kind")==="Action"){return e}const n=r.getEntitySetPath(e);return`/${t.getObject(n)}`},getEntitySetPath:function(t,e){let n="";if(!e){n=`/${t.split("/").filter(r.filterOutNavPropBinding).join("/$NavigationPropertyBinding/")}`}else{const o=t.split("/").filter(r.filterOutNavPropBinding);if(o.length>1){const t={growingPath:"/",pendingNavPropBinding:""};const i=o.reduce((t,n,o)=>{const i=!!o&&"/$NavigationPropertyBinding/"||"";let{growingPath:r,pendingNavPropBinding:a}=t;const s=r+i;const d=e.getObject(s);const u=a?`${a}/${n}`:n;if(d&&Object.keys(d).length>0&&d.hasOwnProperty(u)){r=s+u.replace("/","%2F");a=""}else{a+=a?`/${n}`:n}return{growingPath:r,pendingNavPropBinding:a}},t);n=i.growingPath}else{n=`/${o[0]}`}}return n},getActionParameterItemsModelPath:function(t){return t&&t.$Name?`{path: 'mvfview>/${t.$Name}'}`:undefined},filterOutNavPropBinding:function(t){return t!==""&&t!=="$NavigationPropertyBinding"},enhanceInternalJSONModel:function(t){const e=t.bindContext;t.bindContext=function(t,n,o){for(var i=arguments.length,r=new Array(i>3?i-3:0),a=3;a<i;a++){r[a-3]=arguments[a]}n=e.apply(this,[t,n,o,...r]);const s=n.getBoundContext;n.getBoundContext=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++){e[n]=arguments[n]}const o=s.apply(this,...e);if(o&&!o.setProperty){o.setProperty=function(t,e){if(this.getObject()===undefined){this.getModel().setProperty(this.getPath(),{})}this.getModel().setProperty(t,e,this)}}return o};return n}},enhanceUiJSONModel:function(t,e){const n=t.setProperty;t.setProperty=function(){for(var o=arguments.length,i=new Array(o),r=0;r<o;r++){i[r]=arguments[r]}const a=i[1];if(i[0]==="/isEditable"){t.setProperty("/editMode",a?e.EditMode.Editable:e.EditMode.Display,i[2],i[3])}return n.apply(this,[...i])}},isFilteringCaseSensitive:function(t){if(!t){return undefined}const e=t.getObject("/@Org.OData.Capabilities.V1.FilterFunctions");return e?e.indexOf("tolower")===-1:true},getMetaPathForContext:function(t){const e=t.getModel(),n=e.getMetaModel(),o=t.getPath();return n&&o&&n.getMetaPath(o)},getRootEntitySetPath:function(t){let e="";const n=t?t.split("/"):[];if(n.length>1){e=n[1]}return e},getAbsoluteMetaPathForListBinding:function(t,e){const n=t.getModel().getMetaModel();let o;if(typeof e==="string"){if(e.startsWith("/")){o=n.getMetaPath(e)}else{const i=t.getBindingContext();const r=i.getPath();o=n.getMetaPath(`${r}/${e}`)}}else{const t=e;const i=t.getRootBinding();if(t===i){o=n.getMetaPath(t.getPath())}else{const e=i.getPath();const r=t.getPath();o=n.getMetaPath(`${e}/${r}`)}}return o},isDraftRoot:function(t){return this.getDraftRoot(t)!==undefined},isDraftNode:function(t){return this.getDraftNode(t)!==undefined},isSticky:function(t){return this.getStickySession(t)!==undefined},isUpdateHidden:function(t,e){if(o(t)){var n,i;return((n=t.annotations.UI)===null||n===void 0?void 0:n.UpdateHidden)??(e===null||e===void 0?void 0:(i=e.annotations.UI)===null||i===void 0?void 0:i.UpdateHidden)??false}else{return false}},getDraftRoot:function(t){var e;return o(t)?(e=t.annotations.Common)===null||e===void 0?void 0:e.DraftRoot:undefined},getDraftNode:function(t){var e;return o(t)?(e=t.annotations.Common)===null||e===void 0?void 0:e.DraftNode:undefined},getStickySession:function(t){var e;return o(t)?(e=t.annotations.Session)===null||e===void 0?void 0:e.StickySessionSupported:undefined},getDeleteHidden:function(t,e){if(o(t)){var n,i;return((n=t.annotations.UI)===null||n===void 0?void 0:n.DeleteHidden)??((i=e.annotations.UI)===null||i===void 0?void 0:i.DeleteHidden)}else{return false}}};return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/PasteHelper-dbg", ["sap/base/Log", "sap/m/MessageBox", "sap/ui/core/Core", "sap/ui/core/util/PasteHelper"], function (Log, MessageBox, Core, CorePasteHelper) {
  "use strict";

  const getInfoForEntityProperty = function (propertyPath, rowBindingPath, metaContext, metaModel) {
    const property = metaContext.getProperty(propertyPath),
      formatOptions = {
        parseKeepsEmptyString: true
      },
      type = metaModel.getUI5Type(`${rowBindingPath}/${propertyPath}`, formatOptions),
      isIgnored = !property || metaContext.getProperty(`${propertyPath}@Org.OData.Core.V1.Computed`);
    return {
      property: propertyPath,
      ignore: isIgnored,
      type: type
    };
  };
  const displayErrorMessages = function (errorMessages) {
    const messageDetails = [...errorMessages];
    const resourceBundle = Core.getLibraryResourceBundle("sap.fe.core"),
      errorCorrectionMessage = resourceBundle.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_MESSAGE"),
      noteMessage = resourceBundle.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_NOTE");
    let pasteErrorMessage;
    if (messageDetails.length > 1) {
      pasteErrorMessage = resourceBundle.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_PLURAL", [messageDetails.length]);
    } else {
      pasteErrorMessage = resourceBundle.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_SINGULAR");
    }
    messageDetails.unshift(""); // To show space between the short text and the list of errors
    messageDetails.unshift(noteMessage);
    messageDetails.unshift(errorCorrectionMessage);
    MessageBox.error(pasteErrorMessage, {
      title: resourceBundle.getText("C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR"),
      details: messageDetails.join("<br>")
    });
  };
  const PasteHelper = {
    displayErrorMessages: displayErrorMessages,
    formatCustomMessage: function (validationMessages, iRowNumber) {
      let errorMessage = "";
      const numberMessages = validationMessages.length;
      const resourceBundle = Core.getLibraryResourceBundle("sap.fe.core"),
        i18nRow = resourceBundle.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW");
      if (numberMessages > 0) {
        errorMessage += `${i18nRow} ${iRowNumber}: `;
        validationMessages.forEach((message, indexMessage) => {
          if (message.messageText) {
            errorMessage += message.messageText + (indexMessage + 1 !== numberMessages ? " " : "");
          }
        });
      }
      return errorMessage;
    },
    getColumnInfo: function (table) {
      const model = table.getRowBinding().getModel(),
        metaModel = model.getMetaModel(),
        rowBindingPath = model.resolve(table.getRowBinding().getPath(), table.getRowBinding().getContext()),
        metaContext = metaModel.getMetaContext(rowBindingPath);
      return table.getControlDelegate().fetchProperties(table).then(propertyInfo => {
        const PropertyInfoDict = Object.assign({}, ...propertyInfo.map(property => ({
          [property.name]: property
        })));
        const columnInfos = [];
        table.getColumns().forEach(column => {
          const infoProperty = PropertyInfoDict[column.getDataProperty()];
          // Check if it's a complex property (property associated to multiple simple properties)
          if (infoProperty.propertyInfos) {
            // Get data from simple property
            infoProperty.propertyInfos.forEach(property => {
              const dataProperty = PropertyInfoDict[property];
              // Non exported columns should be parte of the columnInfos
              if (dataProperty.exportSettings !== null) {
                // Check a navigation property within the current Complex property --> ignore
                if (property.indexOf("/") > -1) {
                  columnInfos.push({
                    property: dataProperty.path,
                    ignore: true
                  });
                } else {
                  columnInfos.push(this.getInfoForEntityProperty(dataProperty.path, rowBindingPath, metaContext, metaModel));
                }
              }
            });
            if (infoProperty.exportDataPointTargetValue) {
              columnInfos.push({
                property: "targetValueFromDataPoint",
                ignore: true
              });
            }
            // Non exported columns should be parte of the columnInfos
          } else if (infoProperty.exportSettings !== null) {
            if (infoProperty.path) {
              columnInfos.push(this.getInfoForEntityProperty(infoProperty.path, rowBindingPath, metaContext, metaModel));
            } else {
              // Empty column --> ignore
              columnInfos.push({
                property: "unused",
                type: null,
                ignore: true
              });
            }
          }
        });
        return columnInfos;
      });
    },
    getInfoForEntityProperty: getInfoForEntityProperty,
    parsePastedData: function (rawData, table) {
      return this.getColumnInfo(table).then(function (pasteInfos) {
        // Check if we have data for at least the first editable column
        const pastedColumnCount = rawData.length ? rawData[0].length : 0;
        let firstEditableColumnIndex = -1;
        for (let I = 0; I < pasteInfos.length && firstEditableColumnIndex < 0; I++) {
          if (!pasteInfos[I].ignore) {
            firstEditableColumnIndex = I;
          }
        }
        return firstEditableColumnIndex < 0 || firstEditableColumnIndex > pastedColumnCount - 1 ? Promise.resolve({}) // We don't have data for an editable column --> return empty parsed data
        : CorePasteHelper.parse(rawData, pasteInfos);
      }).then(parseResult => {
        if (parseResult.errors) {
          const errorMessages = parseResult.errors.map(function (oElement) {
            return oElement.message;
          });
          this.displayErrorMessages(errorMessages);
          return []; // Errors --> return nothing
        } else {
          return parseResult.parsedData ? parseResult.parsedData : [];
        }
      });
    },
    pasteData: function (rawData, table, controller) {
      const editFlow = controller.editFlow;
      const tableDefinition = table.getParent().getTableDefinition();
      let aData = [];
      return this.parsePastedData(rawData, table).then(aParsedData => {
        aData = aParsedData || [];
        return Promise.all(aData.map(mData => {
          var _tableDefinition$cont;
          return editFlow.validateDocument(table.getBindingContext(), {
            data: mData,
            customValidationFunction: tableDefinition === null || tableDefinition === void 0 ? void 0 : (_tableDefinition$cont = tableDefinition.control) === null || _tableDefinition$cont === void 0 ? void 0 : _tableDefinition$cont.customValidationFunction
          });
        }));
      }).then(aValidationMessages => {
        const aErrorMessages = aValidationMessages.reduce(function (aMessages, aCustomMessages, index) {
          if (aCustomMessages.length > 0) {
            aMessages.push({
              messages: aCustomMessages,
              row: index + 1
            });
          }
          return aMessages;
        }, []);
        if (aErrorMessages.length > 0) {
          const aRowMessages = aErrorMessages.map(mError => this.formatCustomMessage(mError.messages, mError.row));
          this.displayErrorMessages(aRowMessages);
          return [];
        }
        return aData;
      }).then(aValidatedData => {
        var _tableDefinition$cont2;
        return aValidatedData.length > 0 ? editFlow.createMultipleDocuments(table.getRowBinding(), aValidatedData, tableDefinition === null || tableDefinition === void 0 ? void 0 : (_tableDefinition$cont2 = tableDefinition.control) === null || _tableDefinition$cont2 === void 0 ? void 0 : _tableDefinition$cont2.createAtEnd, true, controller.editFlow.onBeforeCreate) : undefined;
      }).catch(oError => {
        Log.error("Error while pasting data", oError);
      });
    }
  };
  return PasteHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/PasteHelper", ["sap/base/Log","sap/m/MessageBox","sap/ui/core/Core","sap/ui/core/util/PasteHelper"],function(e,t,r,n){"use strict";const o=function(e,t,r,n){const o=r.getProperty(e),s={parseKeepsEmptyString:true},i=n.getUI5Type(`${t}/${e}`,s),a=!o||r.getProperty(`${e}@Org.OData.Core.V1.Computed`);return{property:e,ignore:a,type:i}};const s=function(e){const n=[...e];const o=r.getLibraryResourceBundle("sap.fe.core"),s=o.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_MESSAGE"),i=o.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_CORRECTION_NOTE");let a;if(n.length>1){a=o.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_PLURAL",[n.length])}else{a=o.getText("C_PASTE_HELPER_SAPFE_PASTE_ERROR_MESSAGE_SINGULAR")}n.unshift("");n.unshift(i);n.unshift(s);t.error(a,{title:o.getText("C_COMMON_SAPFE_ERROR_MESSAGES_PAGE_TITLE_ERROR"),details:n.join("<br>")})};const i={displayErrorMessages:s,formatCustomMessage:function(e,t){let n="";const o=e.length;const s=r.getLibraryResourceBundle("sap.fe.core"),i=s.getText("T_MESSAGE_GROUP_DESCRIPTION_TABLE_ROW");if(o>0){n+=`${i} ${t}: `;e.forEach((e,t)=>{if(e.messageText){n+=e.messageText+(t+1!==o?" ":"")}})}return n},getColumnInfo:function(e){const t=e.getRowBinding().getModel(),r=t.getMetaModel(),n=t.resolve(e.getRowBinding().getPath(),e.getRowBinding().getContext()),o=r.getMetaContext(n);return e.getControlDelegate().fetchProperties(e).then(t=>{const s=Object.assign({},...t.map(e=>({[e.name]:e})));const i=[];e.getColumns().forEach(e=>{const t=s[e.getDataProperty()];if(t.propertyInfos){t.propertyInfos.forEach(e=>{const t=s[e];if(t.exportSettings!==null){if(e.indexOf("/")>-1){i.push({property:t.path,ignore:true})}else{i.push(this.getInfoForEntityProperty(t.path,n,o,r))}}});if(t.exportDataPointTargetValue){i.push({property:"targetValueFromDataPoint",ignore:true})}}else if(t.exportSettings!==null){if(t.path){i.push(this.getInfoForEntityProperty(t.path,n,o,r))}else{i.push({property:"unused",type:null,ignore:true})}}});return i})},getInfoForEntityProperty:o,parsePastedData:function(e,t){return this.getColumnInfo(t).then(function(t){const r=e.length?e[0].length:0;let o=-1;for(let e=0;e<t.length&&o<0;e++){if(!t[e].ignore){o=e}}return o<0||o>r-1?Promise.resolve({}):n.parse(e,t)}).then(e=>{if(e.errors){const t=e.errors.map(function(e){return e.message});this.displayErrorMessages(t);return[]}else{return e.parsedData?e.parsedData:[]}})},pasteData:function(t,r,n){const o=n.editFlow;const s=r.getParent().getTableDefinition();let i=[];return this.parsePastedData(t,r).then(e=>{i=e||[];return Promise.all(i.map(e=>{var t;return o.validateDocument(r.getBindingContext(),{data:e,customValidationFunction:s===null||s===void 0?void 0:(t=s.control)===null||t===void 0?void 0:t.customValidationFunction})}))}).then(e=>{const t=e.reduce(function(e,t,r){if(t.length>0){e.push({messages:t,row:r+1})}return e},[]);if(t.length>0){const e=t.map(e=>this.formatCustomMessage(e.messages,e.row));this.displayErrorMessages(e);return[]}return i}).then(e=>{var t;return e.length>0?o.createMultipleDocuments(r.getRowBinding(),e,s===null||s===void 0?void 0:(t=s.control)===null||t===void 0?void 0:t.createAtEnd,true,n.editFlow.onBeforeCreate):undefined}).catch(t=>{e.error("Error while pasting data",t)})}};return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/RecommendationHelper-dbg", [], function () {
  "use strict";

  var _exports = {};
  const recommendationHelper = {
    /**
     * This function will take recommendation data for a field and sort it in descending order based on probability of the value.
     *
     * @param incompletenessInfo The set of recommended data for a field
     */
    sortRecommendationsData(incompletenessInfo) {
      const recommendationDataSorted = incompletenessInfo.recommendations;
      recommendationDataSorted.sort((param1, param2) => {
        if (param1.probability < param2.probability) {
          return 1;
        } else if (param1.probability > param2.probability) {
          return -1;
        } else {
          return 0;
        }
      });
      const info = incompletenessInfo;
      delete info["recommendations"];
      info.additionalValues = recommendationDataSorted;
    },
    // The incompletenessinfo can be either for direct fields or fields through navigation property.
    // If the property is from the 1:n navigation then the information will be in the form of array of objects, where each object will be data
    // for a specific context in 1:n. The format of data for each object would be similar to that of fields at first level.
    // This may be the scenario for multiple levels i.e. 1:n navigation data inside another 1:n navigation and so on.
    // As we do not know the definite number of levels we use recursion to update data for all properties(for navigation properties as well, the data will
    // be nested but will follow same structure for each field info).
    // For reference of how data will look like, check CustomAction.js -> function setCustomRecommendation
    /**
     * This function will go through entire recommendation data for both direct fields and fields from navigation property and for each field update the recommendation info in descending order.
     * As with our use case we want recommendations that are in the order of probability for given value.
     *
     * @param data Incompleteness info data
     */
    transformRecommendationsForInternalStorage(data) {
      if (data.hasOwnProperty("recommendations")) {
        this.sortRecommendationsData(data);
        return;
      } else if (Array.isArray(data)) {
        // we expect the data in array format for fields from 1:n navigation paths
        data.forEach(dataObj => {
          // for each entry in 1:n navigation we update the 'recommendations' object to sort in descending order of proability
          Object.values(dataObj).forEach(valObj => {
            if (typeof valObj === "object") {
              this.transformRecommendationsForInternalStorage(valObj);
            }
          });
        });
      } else {
        // for direct fields we check for the data value against the given Field and sort its recommendation data
        // from the given information
        Object.values(data).forEach(valObj => {
          if (typeof valObj === "object") {
            this.transformRecommendationsForInternalStorage(valObj);
          }
        });
      }
    }
  };
  _exports.recommendationHelper = recommendationHelper;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/RecommendationHelper", [],function(){"use strict";var e={};const t={sortRecommendationsData(e){const t=e.recommendations;t.sort((e,t)=>{if(e.probability<t.probability){return 1}else if(e.probability>t.probability){return-1}else{return 0}});const r=e;delete r["recommendations"];r.additionalValues=t},transformRecommendationsForInternalStorage(e){if(e.hasOwnProperty("recommendations")){this.sortRecommendationsData(e);return}else if(Array.isArray(e)){e.forEach(e=>{Object.values(e).forEach(e=>{if(typeof e==="object"){this.transformRecommendationsForInternalStorage(e)}})})}else{Object.values(e).forEach(e=>{if(typeof e==="object"){this.transformRecommendationsForInternalStorage(e)}})}}};e.recommendationHelper=t;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ResourceModelHelper-dbg", ["sap/base/Log"], function (Log) {
  "use strict";

  var _exports = {};
  /**
   * Determines the resource model for a given control, view, controller or appComponent.
   *
   * @param scope The control, view, controller or appComponent for which the resource model should be determined.
   * @returns The resource model
   */
  function getResourceModel(scope) {
    if (scope.isA("sap.ui.core.mvc.Controller") || scope.isA("sap.ui.core.mvc.ControllerExtension")) {
      var _scope$getView;
      return (_scope$getView = scope.getView()) === null || _scope$getView === void 0 ? void 0 : _scope$getView.getModel("sap.fe.i18n");
    } else {
      return scope.getModel("sap.fe.i18n");
    }
  }
  _exports.getResourceModel = getResourceModel;
  function getLocalizedText(textOrToken, control) {
    const matches = /{([A-Za-z0-9_.|@]+)>([A-Za-z0-9_.|]+)}/.exec(textOrToken);
    if (matches) {
      try {
        const resourceBundle = control.getModel(matches[1]).getResourceBundle();
        return resourceBundle.getText(matches[2]);
      } catch (e) {
        Log.info(`Unable to retrieve localized text ${textOrToken}`);
      }
    }
    return textOrToken;
  }
  _exports.getLocalizedText = getLocalizedText;
  return {
    getResourceModel,
    getLocalizedText
  };
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ResourceModelHelper", ["sap/base/Log"],function(e){"use strict";var t={};function o(e){if(e.isA("sap.ui.core.mvc.Controller")||e.isA("sap.ui.core.mvc.ControllerExtension")){var t;return(t=e.getView())===null||t===void 0?void 0:t.getModel("sap.fe.i18n")}else{return e.getModel("sap.fe.i18n")}}t.getResourceModel=o;function r(t,o){const r=/{([A-Za-z0-9_.|@]+)>([A-Za-z0-9_.|]+)}/.exec(t);if(r){try{const e=o.getModel(r[1]).getResourceBundle();return e.getText(r[2])}catch(o){e.info(`Unable to retrieve localized text ${t}`)}}return t}t.getLocalizedText=r;return{getResourceModel:o,getLocalizedText:r}},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SemanticDateOperators-dbg", ["sap/ui/mdc/condition/FilterOperatorUtil", "sap/ui/mdc/condition/Operator", "sap/ui/model/Filter", "sap/ui/model/FilterOperator", "sap/ui/model/ValidateException"], function (FilterOperatorUtil, Operator, Filter, ModelOperator, ValidateException) {
  "use strict";

  const aSupportedOperations = ["DATE", "FROM", "TO", "DATERANGE"];
  const DYNAMIC_DATE_CATEGORY = "DYNAMIC.DATE";
  const FIXED_DATE_CATEGORY = "FIXED.DATE";
  const DYNAMIC_DATE_INT_CATEGORY = "DYNAMIC.DATE.INT";
  const DYNAMIC_DATERANGE_CATEGORY = "DYNAMIC.DATERANGE";
  const DYNAMIC_MONTH_CATEGORY = "DYNAMIC.MONTH";
  const FIXED_WEEK_CATEGORY = "FIXED.WEEK";
  const FIXED_MONTH_CATEGORY = "FIXED.MONTH";
  const FIXED_QUARTER_CATEGORY = "FIXED.QUARTER";
  const FIXED_YEAR_CATEGORY = "FIXED.YEAR";
  const DYNAMIC_WEEK_INT_CATEGORY = "DYNAMIC.WEEK.INT";
  const DYNAMIC_MONTH_INT_CATEGORY = "DYNAMIC.MONTH.INT";
  const DYNAMIC_QUARTER_INT_CATEGORY = "DYNAMIC.QUARTER.INT";
  const DYNAMIC_YEAR_INT_CATEGORY = "DYNAMIC.YEAR.INT";
  const DYNAMIC_MINUTE_INT_CATEGORY = "DYNAMIC.MINUTE.INT";
  const DYNAMIC_HOUR_INT_CATEGORY = "DYNAMIC.HOUR.INT";
  const basicDateTimeOps = {
    EQ: {
      key: "EQ",
      category: DYNAMIC_DATE_CATEGORY
    },
    BT: {
      key: "BT",
      category: DYNAMIC_DATERANGE_CATEGORY
    }
  };
  const mSemanticDateOperations = {
    DATE: {
      key: "DATE",
      category: DYNAMIC_DATE_CATEGORY
    },
    FROM: {
      key: "FROM",
      category: DYNAMIC_DATE_CATEGORY
    },
    TO: {
      key: "TO",
      category: DYNAMIC_DATE_CATEGORY
    },
    DATERANGE: {
      key: "DATERANGE",
      category: DYNAMIC_DATERANGE_CATEGORY
    },
    SPECIFICMONTH: {
      key: "SPECIFICMONTH",
      category: DYNAMIC_MONTH_CATEGORY
    },
    TODAY: {
      key: "TODAY",
      category: FIXED_DATE_CATEGORY
    },
    TODAYFROMTO: {
      key: "TODAYFROMTO",
      category: DYNAMIC_DATE_INT_CATEGORY
    },
    YESTERDAY: {
      key: "YESTERDAY",
      category: FIXED_DATE_CATEGORY
    },
    TOMORROW: {
      key: "TOMORROW",
      category: FIXED_DATE_CATEGORY
    },
    LASTDAYS: {
      key: "LASTDAYS",
      category: DYNAMIC_DATE_INT_CATEGORY
    },
    NEXTDAYS: {
      key: "NEXTDAYS",
      category: DYNAMIC_DATE_INT_CATEGORY
    },
    THISWEEK: {
      key: "THISWEEK",
      category: FIXED_WEEK_CATEGORY
    },
    LASTWEEK: {
      key: "LASTWEEK",
      category: FIXED_WEEK_CATEGORY
    },
    LASTWEEKS: {
      key: "LASTWEEKS",
      category: DYNAMIC_WEEK_INT_CATEGORY
    },
    NEXTWEEK: {
      key: "NEXTWEEK",
      category: FIXED_WEEK_CATEGORY
    },
    NEXTWEEKS: {
      key: "NEXTWEEKS",
      category: DYNAMIC_WEEK_INT_CATEGORY
    },
    THISMONTH: {
      key: "THISMONTH",
      category: FIXED_MONTH_CATEGORY
    },
    LASTMONTH: {
      key: "LASTMONTH",
      category: FIXED_MONTH_CATEGORY
    },
    LASTMONTHS: {
      key: "LASTMONTHS",
      category: DYNAMIC_MONTH_INT_CATEGORY
    },
    NEXTMONTH: {
      key: "NEXTMONTH",
      category: FIXED_MONTH_CATEGORY
    },
    NEXTMONTHS: {
      key: "NEXTMONTHS",
      category: DYNAMIC_MONTH_INT_CATEGORY
    },
    THISQUARTER: {
      key: "THISQUARTER",
      category: FIXED_QUARTER_CATEGORY
    },
    LASTQUARTER: {
      key: "LASTQUARTER",
      category: FIXED_QUARTER_CATEGORY
    },
    LASTQUARTERS: {
      key: "LASTQUARTERS",
      category: DYNAMIC_QUARTER_INT_CATEGORY
    },
    NEXTQUARTER: {
      key: "NEXTQUARTER",
      category: FIXED_QUARTER_CATEGORY
    },
    NEXTQUARTERS: {
      key: "NEXTQUARTERS",
      category: DYNAMIC_QUARTER_INT_CATEGORY
    },
    QUARTER1: {
      key: "QUARTER1",
      category: FIXED_QUARTER_CATEGORY
    },
    QUARTER2: {
      key: "QUARTER2",
      category: FIXED_QUARTER_CATEGORY
    },
    QUARTER3: {
      key: "QUARTER3",
      category: FIXED_QUARTER_CATEGORY
    },
    QUARTER4: {
      key: "QUARTER4",
      category: FIXED_QUARTER_CATEGORY
    },
    THISYEAR: {
      key: "THISYEAR",
      category: FIXED_YEAR_CATEGORY
    },
    LASTYEAR: {
      key: "LASTYEAR",
      category: FIXED_YEAR_CATEGORY
    },
    LASTYEARS: {
      key: "LASTYEARS",
      category: DYNAMIC_YEAR_INT_CATEGORY
    },
    NEXTYEAR: {
      key: "NEXTYEAR",
      category: FIXED_YEAR_CATEGORY
    },
    NEXTYEARS: {
      key: "NEXTYEARS",
      category: DYNAMIC_YEAR_INT_CATEGORY
    },
    LASTMINUTES: {
      key: "LASTMINUTES",
      category: DYNAMIC_MINUTE_INT_CATEGORY
    },
    NEXTMINUTES: {
      key: "NEXTMINUTES",
      category: DYNAMIC_MINUTE_INT_CATEGORY
    },
    LASTHOURS: {
      key: "LASTHOURS",
      category: DYNAMIC_HOUR_INT_CATEGORY
    },
    NEXTHOURS: {
      key: "NEXTHOURS",
      category: DYNAMIC_HOUR_INT_CATEGORY
    },
    YEARTODATE: {
      key: "YEARTODATE",
      category: FIXED_YEAR_CATEGORY
    },
    DATETOYEAR: {
      key: "DATETOYEAR",
      category: FIXED_YEAR_CATEGORY
    }
  };
  function _getDateRangeOperator() {
    return new Operator({
      name: "DATERANGE",
      filterOperator: ModelOperator.BT,
      alias: {
        Date: "DATERANGE",
        DateTime: "DATERANGE"
      },
      valueTypes: [{
        name: "sap.ui.model.odata.type.Date"
      }, {
        name: "sap.ui.model.odata.type.Date"
      }],
      // use date type to have no time part,
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForDateRange(oCondition, sFieldPath, oType, this);
      },
      validate: function (aValues, oType) {
        if (aValues.length < 2) {
          throw new ValidateException("Date Range must have two values");
        } else {
          const fromDate = new Date(aValues[0]);
          const toDate = new Date(aValues[1]);
          if (fromDate.getTime() > toDate.getTime()) {
            throw new ValidateException("From Date Should Be Less Than To Date");
          }
        }
        Operator.prototype.validate.apply(this, [aValues, oType]);
      }
    });
  }
  function _getDateOperator() {
    return new Operator({
      name: "DATE",
      alias: {
        Date: "DATE",
        DateTime: "DATE"
      },
      filterOperator: ModelOperator.EQ,
      valueTypes: [{
        name: "sap.ui.model.odata.type.Date"
      }],
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForDate(oCondition, sFieldPath, oType, this);
      }
    });
  }
  function _getFromOperator() {
    return new Operator({
      name: "FROM",
      alias: {
        Date: "FROM",
        DateTime: "FROM"
      },
      filterOperator: ModelOperator.GE,
      valueTypes: [{
        name: "sap.ui.model.odata.type.Date"
      }],
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForFrom(oCondition, sFieldPath, oType, this);
      }
    });
  }
  function _getToOperator() {
    return new Operator({
      name: "TO",
      alias: {
        Date: "TO",
        DateTime: "TO"
      },
      filterOperator: ModelOperator.LE,
      valueTypes: [{
        name: "sap.ui.model.odata.type.Date"
      }],
      getModelFilter: function (oCondition, sFieldPath, oType) {
        return SemanticDateOperators.getModelFilterForTo(oCondition, sFieldPath, oType, this);
      }
    });
  }
  function _filterOperation(oOperation, aOperatorConfiguration) {
    if (!aOperatorConfiguration) {
      return true;
    }
    aOperatorConfiguration = Array.isArray(aOperatorConfiguration) ? aOperatorConfiguration : [aOperatorConfiguration];
    let bResult;
    aOperatorConfiguration.some(function (oOperatorConfiguration) {
      let j;
      if (!oOperatorConfiguration.path) {
        return false;
      }
      const sValue = oOperation[oOperatorConfiguration.path];
      const bExclude = oOperatorConfiguration.exclude || false;
      let aOperatorValues;
      if (oOperatorConfiguration.contains && sValue) {
        aOperatorValues = oOperatorConfiguration.contains.split(",");
        bResult = bExclude;
        for (j = 0; j < aOperatorValues.length; j++) {
          if (bExclude && sValue.indexOf(aOperatorValues[j]) > -1) {
            bResult = false;
            return true;
          } else if (!bExclude && sValue.indexOf(aOperatorValues[j]) > -1) {
            bResult = true;
            return true;
          }
        }
      }
      if (oOperatorConfiguration.equals && sValue) {
        aOperatorValues = oOperatorConfiguration.equals.split(",");
        bResult = bExclude;
        for (j = 0; j < aOperatorValues.length; j++) {
          if (bExclude && sValue === aOperatorValues[j]) {
            bResult = false;
            return true;
          } else if (!bExclude && sValue === aOperatorValues[j]) {
            bResult = true;
            return true;
          }
        }
      }
      return false;
    });
    return bResult;
  }
  // Get the operators based on type
  function _getOperators(type) {
    return type === "Edm.DateTimeOffset" ? Object.assign({}, mSemanticDateOperations, basicDateTimeOps) : mSemanticDateOperations;
  }
  const SemanticDateOperators = {
    // Extending operators for Sematic Date Control
    addSemanticDateOperators: function () {
      FilterOperatorUtil.addOperator(_getDateRangeOperator());
      FilterOperatorUtil.addOperator(_getDateOperator());
      FilterOperatorUtil.addOperator(_getFromOperator());
      FilterOperatorUtil.addOperator(_getToOperator());
    },
    getSupportedOperations: function () {
      return aSupportedOperations;
    },
    getSemanticDateOperations: function (type) {
      const operators = _getOperators(type);
      return Object.keys(operators);
    },
    // TODO: Would need to check with MDC for removeOperator method
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    removeSemanticDateOperators: function () {},
    // To filter operators based on manifest aOperatorConfiguration settings
    getFilterOperations: function (aOperatorConfiguration, type) {
      const aOperations = [];
      const operators = _getOperators(type);
      for (const n in operators) {
        const oOperation = operators[n];
        if (_filterOperation(oOperation, aOperatorConfiguration)) {
          aOperations.push(oOperation);
        }
      }
      return aOperations.map(function (oOperation) {
        return oOperation.key;
      });
    },
    hasSemanticDateOperations: function (oConditions) {
      const aSemanticDateOps = this.getSemanticDateOperations();
      for (const n in oConditions) {
        const aFilterCondtion = oConditions[n];
        const oSemanticOperator = aFilterCondtion.find(function (oCondition) {
          return aSemanticDateOps.indexOf(oCondition.operator) > -1;
        });
        if (oSemanticOperator) {
          return false;
        }
      }
      return true;
    },
    getModelFilterForDate: function (oCondition, sFieldPath, oType, operator) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        const oOperatorType = operator._createLocalType(operator.valueTypes[0]);
        let sFrom = oCondition.values[0];
        const oOperatorModelFormat = oOperatorType.getModelFormat();
        const oDate = oOperatorModelFormat.parse(sFrom, false);
        sFrom = oType.getModelValue(oDate);
        oDate.setHours(23);
        oDate.setMinutes(59);
        oDate.setSeconds(59);
        oDate.setMilliseconds(999);
        const sTo = oType.getModelValue(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.BT,
          value1: sFrom,
          value2: sTo
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: operator.filterOperator,
          value1: oCondition.values[0]
        });
      }
    },
    getModelFilterForTo: function (oCondition, sFieldPath, oType, operator) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        const oOperatorType = operator._createLocalType(operator.valueTypes[0]);
        const value = oCondition.values[0];
        const oOperatorModelFormat = oOperatorType.getModelFormat();
        const oDate = oOperatorModelFormat.parse(value, false);
        oDate.setHours(23);
        oDate.setMinutes(59);
        oDate.setSeconds(59);
        oDate.setMilliseconds(999);
        const sTo = oType.getModelValue(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.LE,
          value1: sTo
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: operator.filterOperator,
          value1: oCondition.values[0]
        });
      }
    },
    getModelFilterForFrom: function (oCondition, sFieldPath, oType, operator) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        const oOperatorType = operator._createLocalType(operator.valueTypes[0]);
        const value = oCondition.values[0];
        const oOperatorModelFormat = oOperatorType.getModelFormat();
        const oDate = oOperatorModelFormat.parse(value, false);
        oDate.setHours(0);
        oDate.setMinutes(0);
        oDate.setSeconds(0);
        oDate.setMilliseconds(0);
        const sFrom = oType.getModelValue(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.GE,
          value1: sFrom
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: operator.filterOperator,
          value1: oCondition.values[0]
        });
      }
    },
    getModelFilterForDateRange: function (oCondition, sFieldPath, oType, operator) {
      if (oType.isA("sap.ui.model.odata.type.DateTimeOffset")) {
        let oOperatorType = operator._createLocalType(operator.valueTypes[0]);
        let sFrom = oCondition.values[0];
        let oOperatorModelFormat = oOperatorType.getModelFormat(); // use ModelFormat to convert in JS-Date and add 23:59:59
        let oDate = oOperatorModelFormat.parse(sFrom, false);
        sFrom = oType.getModelValue(oDate);
        oOperatorType = operator._createLocalType(operator.valueTypes[1]);
        oOperatorModelFormat = oOperatorType.getModelFormat(); // use ModelFormat to convert in JS-Date and add 23:59:59
        let sTo = oCondition.values[1];
        oDate = oOperatorModelFormat.parse(sTo, false);
        oDate.setHours(23);
        oDate.setMinutes(59);
        oDate.setSeconds(59);
        oDate.setMilliseconds(999);
        sTo = oType.getModelValue(oDate);
        return new Filter({
          path: sFieldPath,
          operator: ModelOperator.BT,
          value1: sFrom,
          value2: sTo
        });
      } else {
        return new Filter({
          path: sFieldPath,
          operator: operator.filterOperator,
          value1: oCondition.values[0],
          value2: oCondition.values[1]
        });
      }
    }
  };
  return SemanticDateOperators;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SemanticDateOperators", ["sap/ui/mdc/condition/FilterOperatorUtil","sap/ui/mdc/condition/Operator","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/ui/model/ValidateException"],function(e,t,a,o,r){"use strict";const n=["DATE","FROM","TO","DATERANGE"];const s="DYNAMIC.DATE";const T="FIXED.DATE";const l="DYNAMIC.DATE.INT";const i="DYNAMIC.DATERANGE";const c="DYNAMIC.MONTH";const u="FIXED.WEEK";const E="FIXED.MONTH";const y="FIXED.QUARTER";const A="FIXED.YEAR";const p="DYNAMIC.WEEK.INT";const R="DYNAMIC.MONTH.INT";const O="DYNAMIC.QUARTER.INT";const f="DYNAMIC.YEAR.INT";const g="DYNAMIC.MINUTE.INT";const d="DYNAMIC.HOUR.INT";const D={EQ:{key:"EQ",category:s},BT:{key:"BT",category:i}};const S={DATE:{key:"DATE",category:s},FROM:{key:"FROM",category:s},TO:{key:"TO",category:s},DATERANGE:{key:"DATERANGE",category:i},SPECIFICMONTH:{key:"SPECIFICMONTH",category:c},TODAY:{key:"TODAY",category:T},TODAYFROMTO:{key:"TODAYFROMTO",category:l},YESTERDAY:{key:"YESTERDAY",category:T},TOMORROW:{key:"TOMORROW",category:T},LASTDAYS:{key:"LASTDAYS",category:l},NEXTDAYS:{key:"NEXTDAYS",category:l},THISWEEK:{key:"THISWEEK",category:u},LASTWEEK:{key:"LASTWEEK",category:u},LASTWEEKS:{key:"LASTWEEKS",category:p},NEXTWEEK:{key:"NEXTWEEK",category:u},NEXTWEEKS:{key:"NEXTWEEKS",category:p},THISMONTH:{key:"THISMONTH",category:E},LASTMONTH:{key:"LASTMONTH",category:E},LASTMONTHS:{key:"LASTMONTHS",category:R},NEXTMONTH:{key:"NEXTMONTH",category:E},NEXTMONTHS:{key:"NEXTMONTHS",category:R},THISQUARTER:{key:"THISQUARTER",category:y},LASTQUARTER:{key:"LASTQUARTER",category:y},LASTQUARTERS:{key:"LASTQUARTERS",category:O},NEXTQUARTER:{key:"NEXTQUARTER",category:y},NEXTQUARTERS:{key:"NEXTQUARTERS",category:O},QUARTER1:{key:"QUARTER1",category:y},QUARTER2:{key:"QUARTER2",category:y},QUARTER3:{key:"QUARTER3",category:y},QUARTER4:{key:"QUARTER4",category:y},THISYEAR:{key:"THISYEAR",category:A},LASTYEAR:{key:"LASTYEAR",category:A},LASTYEARS:{key:"LASTYEARS",category:f},NEXTYEAR:{key:"NEXTYEAR",category:A},NEXTYEARS:{key:"NEXTYEARS",category:f},LASTMINUTES:{key:"LASTMINUTES",category:g},NEXTMINUTES:{key:"NEXTMINUTES",category:g},LASTHOURS:{key:"LASTHOURS",category:d},NEXTHOURS:{key:"NEXTHOURS",category:d},YEARTODATE:{key:"YEARTODATE",category:A},DATETOYEAR:{key:"DATETOYEAR",category:A}};function M(){return new t({name:"DATERANGE",filterOperator:o.BT,alias:{Date:"DATERANGE",DateTime:"DATERANGE"},valueTypes:[{name:"sap.ui.model.odata.type.Date"},{name:"sap.ui.model.odata.type.Date"}],getModelFilter:function(e,t,a){return Y.getModelFilterForDateRange(e,t,a,this)},validate:function(e,a){if(e.length<2){throw new r("Date Range must have two values")}else{const t=new Date(e[0]);const a=new Date(e[1]);if(t.getTime()>a.getTime()){throw new r("From Date Should Be Less Than To Date")}}t.prototype.validate.apply(this,[e,a])}})}function N(){return new t({name:"DATE",alias:{Date:"DATE",DateTime:"DATE"},filterOperator:o.EQ,valueTypes:[{name:"sap.ui.model.odata.type.Date"}],getModelFilter:function(e,t,a){return Y.getModelFilterForDate(e,t,a,this)}})}function m(){return new t({name:"FROM",alias:{Date:"FROM",DateTime:"FROM"},filterOperator:o.GE,valueTypes:[{name:"sap.ui.model.odata.type.Date"}],getModelFilter:function(e,t,a){return Y.getModelFilterForFrom(e,t,a,this)}})}function F(){return new t({name:"TO",alias:{Date:"TO",DateTime:"TO"},filterOperator:o.LE,valueTypes:[{name:"sap.ui.model.odata.type.Date"}],getModelFilter:function(e,t,a){return Y.getModelFilterForTo(e,t,a,this)}})}function k(e,t){if(!t){return true}t=Array.isArray(t)?t:[t];let a;t.some(function(t){let o;if(!t.path){return false}const r=e[t.path];const n=t.exclude||false;let s;if(t.contains&&r){s=t.contains.split(",");a=n;for(o=0;o<s.length;o++){if(n&&r.indexOf(s[o])>-1){a=false;return true}else if(!n&&r.indexOf(s[o])>-1){a=true;return true}}}if(t.equals&&r){s=t.equals.split(",");a=n;for(o=0;o<s.length;o++){if(n&&r===s[o]){a=false;return true}else if(!n&&r===s[o]){a=true;return true}}}return false});return a}function I(e){return e==="Edm.DateTimeOffset"?Object.assign({},S,D):S}const Y={addSemanticDateOperators:function(){e.addOperator(M());e.addOperator(N());e.addOperator(m());e.addOperator(F())},getSupportedOperations:function(){return n},getSemanticDateOperations:function(e){const t=I(e);return Object.keys(t)},removeSemanticDateOperators:function(){},getFilterOperations:function(e,t){const a=[];const o=I(t);for(const t in o){const r=o[t];if(k(r,e)){a.push(r)}}return a.map(function(e){return e.key})},hasSemanticDateOperations:function(e){const t=this.getSemanticDateOperations();for(const a in e){const o=e[a];const r=o.find(function(e){return t.indexOf(e.operator)>-1});if(r){return false}}return true},getModelFilterForDate:function(e,t,r,n){if(r.isA("sap.ui.model.odata.type.DateTimeOffset")){const s=n._createLocalType(n.valueTypes[0]);let T=e.values[0];const l=s.getModelFormat();const i=l.parse(T,false);T=r.getModelValue(i);i.setHours(23);i.setMinutes(59);i.setSeconds(59);i.setMilliseconds(999);const c=r.getModelValue(i);return new a({path:t,operator:o.BT,value1:T,value2:c})}else{return new a({path:t,operator:n.filterOperator,value1:e.values[0]})}},getModelFilterForTo:function(e,t,r,n){if(r.isA("sap.ui.model.odata.type.DateTimeOffset")){const s=n._createLocalType(n.valueTypes[0]);const T=e.values[0];const l=s.getModelFormat();const i=l.parse(T,false);i.setHours(23);i.setMinutes(59);i.setSeconds(59);i.setMilliseconds(999);const c=r.getModelValue(i);return new a({path:t,operator:o.LE,value1:c})}else{return new a({path:t,operator:n.filterOperator,value1:e.values[0]})}},getModelFilterForFrom:function(e,t,r,n){if(r.isA("sap.ui.model.odata.type.DateTimeOffset")){const s=n._createLocalType(n.valueTypes[0]);const T=e.values[0];const l=s.getModelFormat();const i=l.parse(T,false);i.setHours(0);i.setMinutes(0);i.setSeconds(0);i.setMilliseconds(0);const c=r.getModelValue(i);return new a({path:t,operator:o.GE,value1:c})}else{return new a({path:t,operator:n.filterOperator,value1:e.values[0]})}},getModelFilterForDateRange:function(e,t,r,n){if(r.isA("sap.ui.model.odata.type.DateTimeOffset")){let s=n._createLocalType(n.valueTypes[0]);let T=e.values[0];let l=s.getModelFormat();let i=l.parse(T,false);T=r.getModelValue(i);s=n._createLocalType(n.valueTypes[1]);l=s.getModelFormat();let c=e.values[1];i=l.parse(c,false);i.setHours(23);i.setMinutes(59);i.setSeconds(59);i.setMilliseconds(999);c=r.getModelValue(i);return new a({path:t,operator:o.BT,value1:T,value2:c})}else{return new a({path:t,operator:n.filterOperator,value1:e.values[0],value2:e.values[1]})}}};return Y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SemanticKeyHelper-dbg", ["sap/base/Log"], function (Log) {
  "use strict";

  const SemanticKeyHelper = {
    getSemanticKeys: function (oMetaModel, sEntitySetName) {
      return oMetaModel.getObject(`/${sEntitySetName}/@com.sap.vocabularies.Common.v1.SemanticKey`);
    },
    getSemanticObjectInformation: function (oMetaModel, sEntitySetName) {
      const oSemanticObject = oMetaModel.getObject(`/${sEntitySetName}/@com.sap.vocabularies.Common.v1.SemanticObject`);
      const aSemanticKeys = this.getSemanticKeys(oMetaModel, sEntitySetName);
      return {
        semanticObject: oSemanticObject,
        semanticKeys: aSemanticKeys
      };
    },
    getSemanticPath: function (oContext) {
      let bStrict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const oMetaModel = oContext.getModel().getMetaModel(),
        sEntitySetName = oMetaModel.getMetaContext(oContext.getPath()).getObject("@sapui.name"),
        oSemanticObjectInformation = this.getSemanticObjectInformation(oMetaModel, sEntitySetName);
      let sTechnicalPath, sSemanticPath;
      if (oContext.isA("sap.ui.model.odata.v4.ODataListBinding") && oContext.isRelative()) {
        sTechnicalPath = oContext.getHeaderContext().getPath();
      } else {
        sTechnicalPath = oContext.getPath();
      }
      if (this._isPathForSemantic(sTechnicalPath) && oSemanticObjectInformation.semanticKeys) {
        const aSemanticKeys = oSemanticObjectInformation.semanticKeys,
          oEntityType = oMetaModel.getObject(`/${oMetaModel.getObject(`/${sEntitySetName}`).$Type}`);
        try {
          const sSemanticKeysPart = aSemanticKeys.map(function (oSemanticKey) {
            const sPropertyPath = oSemanticKey.$PropertyPath;
            let sKeyValue = oContext.getProperty(sPropertyPath);
            if (sKeyValue === undefined || sKeyValue === null) {
              throw new Error(`Couldn't resolve semantic key value for ${sPropertyPath}`);
            } else {
              if (oEntityType[sPropertyPath].$Type === "Edm.String") {
                sKeyValue = `'${encodeURIComponent(sKeyValue)}'`;
              }
              if (aSemanticKeys.length > 1) {
                // Several semantic keys --> path should be entitySet(key1=value1, key2=value2, ...)
                // Otherwise we keep entitySet(keyValue)
                sKeyValue = `${sPropertyPath}=${sKeyValue}`;
              }
              return sKeyValue;
            }
          }).join(",");
          sSemanticPath = `/${sEntitySetName}(${sSemanticKeysPart})`;
        } catch (e) {
          Log.info(e);
        }
      }
      return bStrict ? sSemanticPath : sSemanticPath || sTechnicalPath;
    },
    // ==============================
    // INTERNAL METHODS
    // ==============================

    _isPathForSemantic: function (sPath) {
      // Only path on root objects allow semantic keys, i.e. sPath = xxx(yyy)
      return /^[^()]+\([^()]+\)$/.test(sPath);
    }
  };
  return SemanticKeyHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SemanticKeyHelper", ["sap/base/Log"],function(e){"use strict";const t={getSemanticKeys:function(e,t){return e.getObject(`/${t}/@com.sap.vocabularies.Common.v1.SemanticKey`)},getSemanticObjectInformation:function(e,t){const n=e.getObject(`/${t}/@com.sap.vocabularies.Common.v1.SemanticObject`);const i=this.getSemanticKeys(e,t);return{semanticObject:n,semanticKeys:i}},getSemanticPath:function(t){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const i=t.getModel().getMetaModel(),a=i.getMetaContext(t.getPath()).getObject("@sapui.name"),o=this.getSemanticObjectInformation(i,a);let c,s;if(t.isA("sap.ui.model.odata.v4.ODataListBinding")&&t.isRelative()){c=t.getHeaderContext().getPath()}else{c=t.getPath()}if(this._isPathForSemantic(c)&&o.semanticKeys){const n=o.semanticKeys,c=i.getObject(`/${i.getObject(`/${a}`).$Type}`);try{const e=n.map(function(e){const i=e.$PropertyPath;let a=t.getProperty(i);if(a===undefined||a===null){throw new Error(`Couldn't resolve semantic key value for ${i}`)}else{if(c[i].$Type==="Edm.String"){a=`'${encodeURIComponent(a)}'`}if(n.length>1){a=`${i}=${a}`}return a}}).join(",");s=`/${a}(${e})`}catch(t){e.info(t)}}return n?s:s||c},_isPathForSemantic:function(e){return/^[^()]+\([^()]+\)$/.test(e)}};return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SizeHelper-dbg", ["sap/m/Button", "sap/ui/core/Core", "sap/ui/dom/units/Rem"], function (Button, Core, Rem) {
  "use strict";

  const SizeHelper = {
    calls: 0,
    hiddenButton: undefined,
    /**
     * Creates a hidden button and places it in the static area.
     */
    init: function () {
      // Create a new button in static area
      this.calls++;
      this.hiddenButton = this.hiddenButton ? this.hiddenButton : new Button().placeAt(Core.getStaticAreaRef());
      // Hide button from accessibility tree
      this.hiddenButton.setVisible(false);
    },
    /**
     * Method to calculate the width of the button from a temporarily created button placed in the static area.
     *
     * @param text The text to measure inside the Button.
     * @returns The value of the Button width.
     */
    getButtonWidth: function (text) {
      var _this$hiddenButton$ge;
      if (!text || !this.hiddenButton) {
        return 0;
      }
      this.hiddenButton.setVisible(true);
      this.hiddenButton.setText(text);
      this.hiddenButton.rerender();
      const buttonWidth = Rem.fromPx((_this$hiddenButton$ge = this.hiddenButton.getDomRef()) === null || _this$hiddenButton$ge === void 0 ? void 0 : _this$hiddenButton$ge.scrollWidth);
      this.hiddenButton.setVisible(false);
      return Math.round(buttonWidth * 100) / 100;
    },
    /**
     * Deletes the hidden button if not needed anymore.
     */
    exit: function () {
      this.calls--;
      if (this.calls === 0) {
        var _this$hiddenButton;
        (_this$hiddenButton = this.hiddenButton) === null || _this$hiddenButton === void 0 ? void 0 : _this$hiddenButton.destroy();
        this.hiddenButton = undefined;
      }
    }
  };
  return SizeHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/SizeHelper", ["sap/m/Button","sap/ui/core/Core","sap/ui/dom/units/Rem"],function(t,i,n){"use strict";const e={calls:0,hiddenButton:undefined,init:function(){this.calls++;this.hiddenButton=this.hiddenButton?this.hiddenButton:(new t).placeAt(i.getStaticAreaRef());this.hiddenButton.setVisible(false)},getButtonWidth:function(t){var i;if(!t||!this.hiddenButton){return 0}this.hiddenButton.setVisible(true);this.hiddenButton.setText(t);this.hiddenButton.rerender();const e=n.fromPx((i=this.hiddenButton.getDomRef())===null||i===void 0?void 0:i.scrollWidth);this.hiddenButton.setVisible(false);return Math.round(e*100)/100},exit:function(){this.calls--;if(this.calls===0){var t;(t=this.hiddenButton)===null||t===void 0?void 0:t.destroy();this.hiddenButton=undefined}}};return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/StableIdHelper-dbg", [], function () {
  "use strict";

  var _exports = {};
  /**
   * Generates the ID from an IBN.
   *
   * The ID contains the value, the potential action and context.
   *
   * @param dataField The IBN annotation
   * @returns The ID
   */
  const _getStableIdPartFromIBN = dataField => {
    var _dataField$Action;
    const idParts = [dataField.SemanticObject.valueOf(), (_dataField$Action = dataField.Action) === null || _dataField$Action === void 0 ? void 0 : _dataField$Action.valueOf()];
    if (dataField.RequiresContext) {
      idParts.push("RequiresContext");
    }
    return idParts.filter(id => id).join("::");
  };

  /**
   * Generates the ID part related to the value of the DataField.
   *
   * @param dataField The DataField
   * @returns String related to the DataField value
   */
  const _getStableIdPartFromValue = dataField => {
    const value = dataField.Value;
    if (value.path) {
      return value.path;
    } else if (value.Apply && value.Function === "odata.concat") {
      return value.Apply.map(app => app.$Path).join("::");
    }
    return replaceSpecialChars(value.replace(/ /g, "_"));
  };

  /**
   * Generates the ID part related to the value or url of the DataFieldWithUrl.
   *
   * @param dataField The DataFieldWithUrl
   * @returns String related to the DataFieldWithUrl value or url
   */
  const _getStableIdPartFromUrlOrPath = dataField => {
    const value = dataField.Value;
    if (value !== null && value !== void 0 && value.path) {
      return value.path;
    } else if (value !== null && value !== void 0 && value.Apply && value.Function === "odata.concat") {
      return value.Apply.map(app => app.$Path).join("::");
    }
    const url = dataField.Url;
    if (url !== null && url !== void 0 && url.path) {
      return url.path;
    } else if (url !== null && url !== void 0 && url.Apply && url.Function === "odata.concat") {
      return url.Apply.map(app => app.$Path).join("::");
    }
    return replaceSpecialChars(value === null || value === void 0 ? void 0 : value.replace(/ /g, "_"));
  };

  /**
   * Copy for the Core.isValid function to be independent.
   *
   * @param value String to validate
   * @returns Whether the value is valid or not
   */
  const _isValid = value => {
    return /^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(value);
  };

  /**
   * Removes the annotation namespaces.
   *
   * @param id String to manipulate
   * @returns String without the annotation namespaces
   */
  const _removeNamespaces = id => {
    id = id.replace("com.sap.vocabularies.UI.v1.", "");
    id = id.replace("com.sap.vocabularies.Communication.v1.", "");
    return id;
  };

  /**
   * Generates the ID from an annotation.
   *
   * @param annotation The annotation
   * @param idPreparation Determines whether the ID needs to be prepared for final usage
   * @returns The ID
   */
  const createIdForAnnotation = function (annotation) {
    var _id;
    let idPreparation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    let id;
    switch (annotation.$Type) {
      case "com.sap.vocabularies.UI.v1.ReferenceFacet":
        id = annotation.ID ?? annotation.Target.value;
        break;
      case "com.sap.vocabularies.UI.v1.CollectionFacet":
        id = annotation.ID ?? "undefined"; // CollectionFacet without Id is not supported but doesn't necessary fail right now
        break;
      case "com.sap.vocabularies.UI.v1.FieldGroupType":
        id = annotation.Label;
        break;
      default:
        id = getStableIdPartFromDataField(annotation);
        break;
    }
    id = (_id = id) === null || _id === void 0 ? void 0 : _id.toString();
    return id && idPreparation ? prepareId(id) : id;
  };

  /**
   * Generates a stable ID based on the given parameters.
   *
   * Parameters are combined in the same order in which they are provided and are separated by '::'.
   * Generate(['Stable', 'Id']) would result in 'Stable::Id' as the stable ID.
   * Currently supported annotations are Facets, FieldGroup and all kinds of DataField.
   *
   * @param stableIdParts Array of strings, undefined, dataModelObjectPath or annotations
   * @returns Stable ID constructed from the provided parameters
   */
  _exports.createIdForAnnotation = createIdForAnnotation;
  const generate = stableIdParts => {
    const ids = stableIdParts.map(element => {
      if (typeof element === "string" || !element) {
        return element;
      }
      return createIdForAnnotation(element.targetObject || element, false);
    });
    const result = ids.filter(id => id).join("::");
    return prepareId(result);
  };

  /**
   * Generates the ID from a DataField.
   *
   * @param dataField The DataField
   * @param ignoreForCompatibility Ignore a part of the ID on the DataFieldWithNavigationPath to be aligned with previous versions
   * @returns The ID
   */
  _exports.generate = generate;
  const getStableIdPartFromDataField = function (dataField) {
    let ignoreForCompatibility = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let id = "";
    switch (dataField.$Type) {
      case "com.sap.vocabularies.UI.v1.DataFieldForAction":
        id = `DataFieldForAction::${dataField.Action}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":
        id = `DataFieldForIntentBasedNavigation::${_getStableIdPartFromIBN(dataField)}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
        id = `DataFieldForAnnotation::${dataField.Target.value}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
        id = `DataFieldWithAction::${_getStableIdPartFromValue(dataField)}::${dataField.Action}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataField":
        id = `DataField::${_getStableIdPartFromValue(dataField)}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        id = `DataFieldWithIntentBasedNavigation::${_getStableIdPartFromValue(dataField)}::${_getStableIdPartFromIBN(dataField)}`;
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        id = `DataFieldWithNavigationPath::${_getStableIdPartFromValue(dataField)}`;
        if (dataField.Target.type === "NavigationPropertyPath" && !ignoreForCompatibility) {
          id = `${id}::${dataField.Target.value}`;
        }
        break;
      case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        id = `DataFieldWithUrl::${_getStableIdPartFromUrlOrPath(dataField)}`;
        break;
      default:
        break;
    }
    return id ? prepareId(id) : undefined;
  };

  /**
   * Removes or replaces with "::" some special characters.
   * Special characters (@, /, #) are replaced by '::' if they are in the middle of the stable ID and removed altogether if they are at the beginning or end.
   *
   * @param id String to manipulate
   * @returns String without the special characters
   */
  _exports.getStableIdPartFromDataField = getStableIdPartFromDataField;
  const replaceSpecialChars = id => {
    if (id.indexOf(" ") >= 0) {
      throw Error(`${id} - Spaces are not allowed in ID parts.`);
    }
    id = id.replace(/^\/|^@|^#|^\*/, "") // remove special characters from the beginning of the string
    .replace(/\/$|@$|#$|\*$/, "") // remove special characters from the end of the string
    .replace(/\/|@|\(|\)|#|\*/g, "::"); // replace special characters with ::

    // Replace double occurrences of the separator with a single separator
    while (id.indexOf("::::") > -1) {
      id = id.replace("::::", "::");
    }

    // If there is a :: at the end of the ID remove it
    if (id.slice(-2) == "::") {
      id = id.slice(0, -2);
    }
    return id;
  };

  /**
   * Prepares the ID.
   *
   * Removes namespaces and special characters and checks the validity of this ID.
   *
   * @param id The ID
   * @returns The ID or throws an error
   */
  _exports.replaceSpecialChars = replaceSpecialChars;
  const prepareId = function (id) {
    id = replaceSpecialChars(_removeNamespaces(id));
    if (_isValid(id)) {
      return id;
    } else {
      throw Error(`${id} - Stable Id could not be generated due to insufficient information.`);
    }
  };
  _exports.prepareId = prepareId;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/StableIdHelper", [],function(){"use strict";var a={};const e=a=>{var e;const t=[a.SemanticObject.valueOf(),(e=a.Action)===null||e===void 0?void 0:e.valueOf()];if(a.RequiresContext){t.push("RequiresContext")}return t.filter(a=>a).join("::")};const t=a=>{const e=a.Value;if(e.path){return e.path}else if(e.Apply&&e.Function==="odata.concat"){return e.Apply.map(a=>a.$Path).join("::")}return s(e.replace(/ /g,"_"))};const i=a=>{const e=a.Value;if(e!==null&&e!==void 0&&e.path){return e.path}else if(e!==null&&e!==void 0&&e.Apply&&e.Function==="odata.concat"){return e.Apply.map(a=>a.$Path).join("::")}const t=a.Url;if(t!==null&&t!==void 0&&t.path){return t.path}else if(t!==null&&t!==void 0&&t.Apply&&t.Function==="odata.concat"){return t.Apply.map(a=>a.$Path).join("::")}return s(e===null||e===void 0?void 0:e.replace(/ /g,"_"))};const n=a=>/^([A-Za-z_][-A-Za-z0-9_.:]*)$/.test(a);const r=a=>{a=a.replace("com.sap.vocabularies.UI.v1.","");a=a.replace("com.sap.vocabularies.Communication.v1.","");return a};const o=function(a){var e;let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;let i;switch(a.$Type){case"com.sap.vocabularies.UI.v1.ReferenceFacet":i=a.ID??a.Target.value;break;case"com.sap.vocabularies.UI.v1.CollectionFacet":i=a.ID??"undefined";break;case"com.sap.vocabularies.UI.v1.FieldGroupType":i=a.Label;break;default:i=l(a);break}i=(e=i)===null||e===void 0?void 0:e.toString();return i&&t?u(i):i};a.createIdForAnnotation=o;const c=a=>{const e=a.map(a=>{if(typeof a==="string"||!a){return a}return o(a.targetObject||a,false)});const t=e.filter(a=>a).join("::");return u(t)};a.generate=c;const l=function(a){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let r="";switch(a.$Type){case"com.sap.vocabularies.UI.v1.DataFieldForAction":r=`DataFieldForAction::${a.Action}`;break;case"com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation":r=`DataFieldForIntentBasedNavigation::${e(a)}`;break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":r=`DataFieldForAnnotation::${a.Target.value}`;break;case"com.sap.vocabularies.UI.v1.DataFieldWithAction":r=`DataFieldWithAction::${t(a)}::${a.Action}`;break;case"com.sap.vocabularies.UI.v1.DataField":r=`DataField::${t(a)}`;break;case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":r=`DataFieldWithIntentBasedNavigation::${t(a)}::${e(a)}`;break;case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":r=`DataFieldWithNavigationPath::${t(a)}`;if(a.Target.type==="NavigationPropertyPath"&&!n){r=`${r}::${a.Target.value}`}break;case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":r=`DataFieldWithUrl::${i(a)}`;break;default:break}return r?u(r):undefined};a.getStableIdPartFromDataField=l;const s=a=>{if(a.indexOf(" ")>=0){throw Error(`${a} - Spaces are not allowed in ID parts.`)}a=a.replace(/^\/|^@|^#|^\*/,"").replace(/\/$|@$|#$|\*$/,"").replace(/\/|@|\(|\)|#|\*/g,"::");while(a.indexOf("::::")>-1){a=a.replace("::::","::")}if(a.slice(-2)=="::"){a=a.slice(0,-2)}return a};a.replaceSpecialChars=s;const u=function(a){a=s(r(a));if(n(a)){return a}else{throw Error(`${a} - Stable Id could not be generated due to insufficient information.`)}};a.prepareId=u;return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/Synchronization-dbg", [], function () {
  "use strict";

  let Synchronization = /*#__PURE__*/function () {
    function Synchronization() {
      this._fnResolve = null;
      this._isResolved = false;
    }
    var _proto = Synchronization.prototype;
    _proto.waitFor = function waitFor() {
      if (this._isResolved) {
        return Promise.resolve();
      } else {
        return new Promise(resolve => {
          this._fnResolve = resolve;
        });
      }
    };
    _proto.resolve = function resolve() {
      if (!this._isResolved) {
        this._isResolved = true;
        if (this._fnResolve) {
          this._fnResolve();
        }
      }
    };
    return Synchronization;
  }();
  return Synchronization;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/Synchronization", [],function(){"use strict";let e=function(){function e(){this._fnResolve=null;this._isResolved=false}var s=e.prototype;s.waitFor=function e(){if(this._isResolved){return Promise.resolve()}else{return new Promise(e=>{this._fnResolve=e})}};s.resolve=function e(){if(!this._isResolved){this._isResolved=true;if(this._fnResolve){this._fnResolve()}}};return e}();return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/TitleHelper-dbg", ["sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataFieldFormatters", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters"], function (BindingHelper, valueFormatters, BindingToolkit, TypeGuards, DataFieldFormatters, DataModelPathHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getLabelForConnectedFields = DataFieldFormatters.getLabelForConnectedFields;
  var isPropertyPathExpression = TypeGuards.isPropertyPathExpression;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var transformRecursively = BindingToolkit.transformRecursively;
  var resolveBindingString = BindingToolkit.resolveBindingString;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isEmpty = BindingToolkit.isEmpty;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var constant = BindingToolkit.constant;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var UI = BindingHelper.UI;
  var Draft = BindingHelper.Draft;
  const formatValueRecursively = function (bindingExpressionToEnhance, fullContextPath) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      let outExpression = expression;
      if (expression.modelName === undefined) {
        // In case of default model we then need to resolve the text arrangement property
        const oPropertyDataModelPath = enhanceDataModelPath(fullContextPath, expression.path);
        outExpression = formatWithTypeInformation(oPropertyDataModelPath.targetObject, expression);
      }
      return outExpression;
    });
  };

  /**
   * Get property definition from data model object path.
   *
   * @param propertyDataModelObject The property data model object
   * @returns The property
   */
  _exports.formatValueRecursively = formatValueRecursively;
  const getPropertyDefinition = propertyDataModelObject => {
    const propertyPathOrProperty = propertyDataModelObject.targetObject;
    return isPropertyPathExpression(propertyPathOrProperty) ? propertyPathOrProperty.$target : propertyPathOrProperty;
  };

  /**
   * Checks whether an associated active entity exists.
   *
   * @param fullContextPath The full path to the context
   * @returns The expression-binding string
   */
  const isOrHasActiveEntity = fullContextPath => {
    var _fullContextPath$targ, _fullContextPath$targ2, _fullContextPath$targ3, _fullContextPath$targ4, _fullContextPath$targ5, _fullContextPath$targ6;
    const draftRoot = (_fullContextPath$targ = fullContextPath.targetEntitySet) === null || _fullContextPath$targ === void 0 ? void 0 : (_fullContextPath$targ2 = _fullContextPath$targ.annotations) === null || _fullContextPath$targ2 === void 0 ? void 0 : (_fullContextPath$targ3 = _fullContextPath$targ2.Common) === null || _fullContextPath$targ3 === void 0 ? void 0 : _fullContextPath$targ3.DraftRoot;
    const draftNode = (_fullContextPath$targ4 = fullContextPath.targetEntitySet) === null || _fullContextPath$targ4 === void 0 ? void 0 : (_fullContextPath$targ5 = _fullContextPath$targ4.annotations) === null || _fullContextPath$targ5 === void 0 ? void 0 : (_fullContextPath$targ6 = _fullContextPath$targ5.Common) === null || _fullContextPath$targ6 === void 0 ? void 0 : _fullContextPath$targ6.DraftNode;
    if (!!draftRoot || !!draftNode) {
      return not(Draft.IsNewObject);
    }
    return false;
  };

  /**
   * Checks if title value expression is empty.
   *
   * @param titleValueExpression The title value expression
   * @returns The expression-binding string
   */
  const isTitleEmptyBooleanExpression = titleValueExpression => titleValueExpression._type === "Constant" ? constant(!titleValueExpression.value) : isEmpty(titleValueExpression);

  /**
   * Retrieves the title expression binding.
   *
   * @param propertyDataModelPath The full path to the property context
   * @param propertyBindingExpression The binding expression of the property above
   * @param [fieldFormatOptions] The format options of the field
   * @param fieldFormatOptions.displayMode
   * @param [alwaysShowDescriptionAndValue] The flag to always display description
   * @returns The expression-binding parameters
   */
  const getTitleBindingWithTextArrangement = function (propertyDataModelPath, propertyBindingExpression, fieldFormatOptions, alwaysShowDescriptionAndValue) {
    var _propertyDefinition$a, _propertyDataModelPat, _propertyDataModelPat2, _propertyDataModelPat3, _commonText$annotatio, _commonText$annotatio2;
    const targetDisplayModeOverride = fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.displayMode;
    const propertyDefinition = getPropertyDefinition(propertyDataModelPath);
    const targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(propertyDataModelPath);
    const commonText = (_propertyDefinition$a = propertyDefinition.annotations.Common) === null || _propertyDefinition$a === void 0 ? void 0 : _propertyDefinition$a.Text;
    const relativeLocation = getRelativePaths(propertyDataModelPath);
    const showDescriptionAndValue = alwaysShowDescriptionAndValue ?? !!((_propertyDataModelPat = propertyDataModelPath.targetObject) !== null && _propertyDataModelPat !== void 0 && (_propertyDataModelPat2 = _propertyDataModelPat.annotations) !== null && _propertyDataModelPat2 !== void 0 && (_propertyDataModelPat3 = _propertyDataModelPat2.Common) !== null && _propertyDataModelPat3 !== void 0 && _propertyDataModelPat3.SemanticObject);
    propertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);
    let params = [propertyBindingExpression];
    if (targetDisplayMode !== "Value" && commonText) {
      switch (targetDisplayMode) {
        case "Description":
          params = [getExpressionFromAnnotation(commonText, relativeLocation)];
          break;
        case "DescriptionValue":
          params = [getExpressionFromAnnotation(commonText, relativeLocation), ifElse(!!((_commonText$annotatio = commonText.annotations) !== null && _commonText$annotatio !== void 0 && (_commonText$annotatio2 = _commonText$annotatio.UI) !== null && _commonText$annotatio2 !== void 0 && _commonText$annotatio2.TextArrangement), propertyBindingExpression, ifElse(showDescriptionAndValue, propertyBindingExpression, constant("")))];
          break;
        case "ValueDescription":
          params = [propertyBindingExpression, getExpressionFromAnnotation(commonText, relativeLocation)];
          break;
      }
    }
    return params;
  };

  /**
   * Recursively add the text arrangement to a title binding expression.
   *
   * @param bindingExpressionToEnhance The binding expression to be enhanced
   * @param path The data field data model object path
   * @returns An updated expression containing the text arrangement binding parameters
   */
  const addTextArrangementToTitleBindingExpression = function (bindingExpressionToEnhance, path) {
    return transformRecursively(bindingExpressionToEnhance, "PathInModel", expression => {
      if (expression.modelName !== undefined) return expression;
      // In case of default model we then need to resolve the text arrangement property
      const propertyDataModelPath = enhanceDataModelPath(path, expression.path);
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      return getTitleBindingWithTextArrangement(propertyDataModelPath, expression);
    });
  };

  /**
   * Gets binding expression for create mode title.
   *
   * @param viewData The associated view data
   * @param [typeName] The type name from the object page header info
   * @param typeName.TypeName
   * @returns The expression-binding string
   */
  const getCreateModeTitle = function (viewData, _ref) {
    let {
      TypeName: typeName
    } = _ref;
    const titleNoHeaderInfo = pathInModel("T_NEW_OBJECT", "sap.fe.i18n");
    let createModeTitle = titleNoHeaderInfo;
    if (viewData.resourceModel.getText("T_NEW_OBJECT", undefined, viewData.entitySet) === viewData.resourceModel.getText("T_NEW_OBJECT_DEFAULT", undefined, viewData.entitySet)) {
      //T_NEW_OBJECT has not been customized
      const titleWithHeaderInfo = viewData.resourceModel.getText("T_ANNOTATION_HELPER_DEFAULT_OBJECT_PAGE_HEADER_TITLE", undefined, viewData.entitySet);
      createModeTitle = typeName ? concat(titleWithHeaderInfo, ": ", resolveBindingString(typeName.toString())) : titleNoHeaderInfo;
    }
    return formatResult([createModeTitle], valueFormatters.formatTitle);
  };

  /**
   * Checks whether an empty string should be used.
   *
   * @param path The meta path pointing to the property used for the title
   * @returns The expression-binding string
   */
  const shouldForceEmptyString = path => {
    var _propertyDefinition$a2, _propertyDefinition$a3;
    const propertyDefinition = getPropertyDefinition(path);
    if (propertyDefinition && (_propertyDefinition$a2 = propertyDefinition.annotations) !== null && _propertyDefinition$a2 !== void 0 && (_propertyDefinition$a3 = _propertyDefinition$a2.Core) !== null && _propertyDefinition$a3 !== void 0 && _propertyDefinition$a3.Computed) {
      return UI.IsInactive;
    } else {
      return constant(false);
    }
  };

  /**
   * Gets title value expression from object page header info.
   *
   * @param fullContextPath The full path to the context
   * @param headerInfoTitle The title value from the object page header info
   * @param getTextBindingExpression The function to get the text binding expression
   * @returns The expression-binding string
   */
  const getTitleValueExpressionFromHeaderInfo = function (fullContextPath, headerInfoTitle, getTextBindingExpression) {
    let titleValueExpression;
    if (headerInfoTitle.$Type === "com.sap.vocabularies.UI.v1.DataField") {
      var _Value, _Value$$target, _Value$$target$annota, _Value$$target$annota2, _Value$$target$annota3, _Value$$target$annota4;
      titleValueExpression = getExpressionFromAnnotation(headerInfoTitle.Value);
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      if ((_Value = headerInfoTitle.Value) !== null && _Value !== void 0 && (_Value$$target = _Value.$target) !== null && _Value$$target !== void 0 && (_Value$$target$annota = _Value$$target.annotations.Common) !== null && _Value$$target$annota !== void 0 && (_Value$$target$annota2 = _Value$$target$annota.Text) !== null && _Value$$target$annota2 !== void 0 && (_Value$$target$annota3 = _Value$$target$annota2.annotations) !== null && _Value$$target$annota3 !== void 0 && (_Value$$target$annota4 = _Value$$target$annota3.UI) !== null && _Value$$target$annota4 !== void 0 && _Value$$target$annota4.TextArrangement) {
        // In case an explicit text arrangement was set we make use of it in the description as well
        titleValueExpression = addTextArrangementToTitleBindingExpression(titleValueExpression, fullContextPath);
      }
      titleValueExpression = formatValueRecursively(titleValueExpression, fullContextPath);
    }
    if (headerInfoTitle.$Type === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation" && headerInfoTitle.Target.$target.$Type === "com.sap.vocabularies.UI.v1.ConnectedFieldsType") {
      const connectedFieldsPath = enhanceDataModelPath(fullContextPath, "$Type/@UI.HeaderInfo/Title/Target/$AnnotationPath");
      titleValueExpression = getLabelForConnectedFields(connectedFieldsPath, getTextBindingExpression, false);
    }
    return titleValueExpression;
  };

  /**
   * Creates binding expression for Object Page, List Report, Quick View and other titles.
   *
   * @param path The data model object path
   * @param getTextBindingExpression The function to get the text binding expression
   * @param [fieldFormatOptions] The format options of the field
   * @param fieldFormatOptions.displayMode
   * @param [headerInfo] The object page header info
   * @param [viewData] The associated view data
   * @param [alwaysShowDescriptionAndValue] The flag to always display description
   * @returns The compiled expression-binding string
   */
  const getTitleBindingExpression = function (path, getTextBindingExpression, fieldFormatOptions, headerInfo, viewData, alwaysShowDescriptionAndValue) {
    var _headerInfo$Title;
    let createModeTitle = pathInModel("T_NEW_OBJECT", "sap.fe.i18n");
    let titleValueExpression;

    // received header info for object page
    if (headerInfo !== null && headerInfo !== void 0 && (_headerInfo$Title = headerInfo.Title) !== null && _headerInfo$Title !== void 0 && _headerInfo$Title.$Type && viewData) {
      titleValueExpression = getTitleValueExpressionFromHeaderInfo(path, headerInfo.Title, getTextBindingExpression);
      createModeTitle = getCreateModeTitle(viewData, headerInfo);
    }

    // needed for quickview
    if (isPathAnnotationExpression(path.targetObject)) {
      path = enhanceDataModelPath(path, path.targetObject.path);
    }
    const propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(path));
    let params;
    if (titleValueExpression) {
      params = Array.isArray(titleValueExpression) ? titleValueExpression : [titleValueExpression];
    } else {
      params = getTitleBindingWithTextArrangement(path, propertyBindingExpression, fieldFormatOptions, alwaysShowDescriptionAndValue);
    }
    const isTitleEmpty = isTitleEmptyBooleanExpression(params[0]);
    const forceEmptyString = shouldForceEmptyString(path);
    const formattedExpression = formatResult(params, valueFormatters.formatTitle);
    titleValueExpression = ifElse(isTitleEmpty, ifElse(forceEmptyString, "", ifElse(or(UI.IsCreateMode, not(isOrHasActiveEntity(path))), createModeTitle, pathInModel("T_ANNOTATION_HELPER_DEFAULT_HEADER_TITLE_NO_HEADER_INFO", "sap.fe.i18n"))), formattedExpression);
    return compileExpression(titleValueExpression);
  };
  _exports.getTitleBindingExpression = getTitleBindingExpression;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/TitleHelper", ["sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataFieldFormatters","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/UIFormatters"],function(e,t,n,o,a,r,i){"use strict";var l={};var s=r.getRelativePaths;var c=r.getContextRelativeTargetObjectPath;var v=r.enhanceDataModelPath;var d=a.getLabelForConnectedFields;var u=o.isPropertyPathExpression;var f=o.isPathAnnotationExpression;var p=n.transformRecursively;var T=n.resolveBindingString;var m=n.pathInModel;var E=n.or;var g=n.not;var _=n.isEmpty;var y=n.ifElse;var I=n.getExpressionFromAnnotation;var h=n.formatWithTypeInformation;var A=n.formatResult;var O=n.constant;var D=n.concat;var C=n.compileExpression;var N=e.UI;var b=e.Draft;const F=function(e,t){return p(e,"PathInModel",e=>{let n=e;if(e.modelName===undefined){const o=v(t,e.path);n=h(o.targetObject,e)}return n})};l.formatValueRecursively=F;const x=e=>{const t=e.targetObject;return u(t)?t.$target:t};const P=e=>{var t,n,o,a,r,i;const l=(t=e.targetEntitySet)===null||t===void 0?void 0:(n=t.annotations)===null||n===void 0?void 0:(o=n.Common)===null||o===void 0?void 0:o.DraftRoot;const s=(a=e.targetEntitySet)===null||a===void 0?void 0:(r=a.annotations)===null||r===void 0?void 0:(i=r.Common)===null||i===void 0?void 0:i.DraftNode;if(!!l||!!s){return g(b.IsNewObject)}return false};const M=e=>e._type==="Constant"?O(!e.value):_(e);const R=function(e,t,n,o){var a,r,l,c,v,d;const u=n===null||n===void 0?void 0:n.displayMode;const f=x(e);const p=u||i.getDisplayMode(e);const T=(a=f.annotations.Common)===null||a===void 0?void 0:a.Text;const m=s(e);const E=o??!!((r=e.targetObject)!==null&&r!==void 0&&(l=r.annotations)!==null&&l!==void 0&&(c=l.Common)!==null&&c!==void 0&&c.SemanticObject);t=h(f,t);let g=[t];if(p!=="Value"&&T){switch(p){case"Description":g=[I(T,m)];break;case"DescriptionValue":g=[I(T,m),y(!!((v=T.annotations)!==null&&v!==void 0&&(d=v.UI)!==null&&d!==void 0&&d.TextArrangement),t,y(E,t,O("")))];break;case"ValueDescription":g=[t,I(T,m)];break}}return g};const U=function(e,t){return p(e,"PathInModel",e=>{if(e.modelName!==undefined)return e;const n=v(t,e.path);return R(n,e)})};const B=function(e,n){let{TypeName:o}=n;const a=m("T_NEW_OBJECT","sap.fe.i18n");let r=a;if(e.resourceModel.getText("T_NEW_OBJECT",undefined,e.entitySet)===e.resourceModel.getText("T_NEW_OBJECT_DEFAULT",undefined,e.entitySet)){const t=e.resourceModel.getText("T_ANNOTATION_HELPER_DEFAULT_OBJECT_PAGE_HEADER_TITLE",undefined,e.entitySet);r=o?D(t,": ",T(o.toString())):a}return A([r],t.formatTitle)};const $=e=>{var t,n;const o=x(e);if(o&&(t=o.annotations)!==null&&t!==void 0&&(n=t.Core)!==null&&n!==void 0&&n.Computed){return N.IsInactive}else{return O(false)}};const j=function(e,t,n){let o;if(t.$Type==="com.sap.vocabularies.UI.v1.DataField"){var a,r,i,l,s,c;o=I(t.Value);if((a=t.Value)!==null&&a!==void 0&&(r=a.$target)!==null&&r!==void 0&&(i=r.annotations.Common)!==null&&i!==void 0&&(l=i.Text)!==null&&l!==void 0&&(s=l.annotations)!==null&&s!==void 0&&(c=s.UI)!==null&&c!==void 0&&c.TextArrangement){o=U(o,e)}o=F(o,e)}if(t.$Type==="com.sap.vocabularies.UI.v1.DataFieldForAnnotation"&&t.Target.$target.$Type==="com.sap.vocabularies.UI.v1.ConnectedFieldsType"){const t=v(e,"$Type/@UI.HeaderInfo/Title/Target/$AnnotationPath");o=d(t,n,false)}return o};const H=function(e,n,o,a,r,i){var l;let s=m("T_NEW_OBJECT","sap.fe.i18n");let d;if(a!==null&&a!==void 0&&(l=a.Title)!==null&&l!==void 0&&l.$Type&&r){d=j(e,a.Title,n);s=B(r,a)}if(f(e.targetObject)){e=v(e,e.targetObject.path)}const u=m(c(e));let p;if(d){p=Array.isArray(d)?d:[d]}else{p=R(e,u,o,i)}const T=M(p[0]);const _=$(e);const I=A(p,t.formatTitle);d=y(T,y(_,"",y(E(N.IsCreateMode,g(P(e))),s,m("T_ANNOTATION_HELPER_DEFAULT_HEADER_TITLE_NO_HEADER_INFO","sap.fe.i18n"))),I);return C(d)};l.getTitleBindingExpression=H;return l},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ToES6Promise-dbg", [], function () {
  "use strict";

  /**
   * Transforms a jQuery promise into a regular ES6/TS promise.
   *
   * @param oThenable The jQueryPromise
   * @returns The corresponding ES6 Promise
   */
  function toES6Promise(oThenable) {
    return Promise.resolve(oThenable.then(function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return Array.prototype.slice.call(args);
    }).catch(function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return Array.prototype.slice.call(args);
    }));
  }
  return toES6Promise;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/ToES6Promise", [],function(){"use strict";function r(r){return Promise.resolve(r.then(function(){for(var r=arguments.length,e=new Array(r),n=0;n<r;n++){e[n]=arguments[n]}return Array.prototype.slice.call(e)}).catch(function(){for(var r=arguments.length,e=new Array(r),n=0;n<r;n++){e[n]=arguments[n]}return Array.prototype.slice.call(e)}))}return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/TypeGuards-dbg", [], function () {
  "use strict";

  var _exports = {};
  function isContext(potentialContext) {
    var _isA, _ref;
    return potentialContext === null || potentialContext === void 0 ? void 0 : (_isA = (_ref = potentialContext).isA) === null || _isA === void 0 ? void 0 : _isA.call(_ref, "sap.ui.model.Context");
  }
  _exports.isContext = isContext;
  function isFunctionArray(potentialFunctionArray) {
    return Array.isArray(potentialFunctionArray) && potentialFunctionArray.length > 0 && potentialFunctionArray.every(item => typeof item === "function");
  }
  _exports.isFunctionArray = isFunctionArray;
  function isAnnotationOfType(potentialAnnotationType, typeName) {
    return potentialAnnotationType.$Type === typeName;
  }

  /**
   * Checks whether the argument is a {@link ServiceObject}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link ServiceObject}.
   */
  _exports.isAnnotationOfType = isAnnotationOfType;
  function isServiceObject(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject.hasOwnProperty("_type")) ?? false;
  }

  /**
   * Checks whether the argument is a {@link ComplexType}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link ComplexType}.
   */
  _exports.isServiceObject = isServiceObject;
  function isComplexType(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "ComplexType";
  }

  /**
   * Checks whether the argument is a {@link TypeDefinition}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link TypeDefinition}.
   */
  _exports.isComplexType = isComplexType;
  function isTypeDefinition(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "TypeDefinition";
  }

  /**
   * Checks whether the argument is an {@link EntityContainer}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is an {@link EntityContainer}.
   */
  _exports.isTypeDefinition = isTypeDefinition;
  function isEntityContainer(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "EntityContainer";
  }

  /**
   * Checks whether the argument is an {@link EntitySet}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is an {@link EntitySet}.
   */
  _exports.isEntityContainer = isEntityContainer;
  function isEntitySet(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "EntitySet";
  }

  /**
   * Checks whether the argument is a {@link Singleton}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link Singleton}
   */
  _exports.isEntitySet = isEntitySet;
  function isSingleton(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "Singleton";
  }

  /**
   * Checks whether the argument is an {@link EntityType}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is an {@link EntityType}
   */
  _exports.isSingleton = isSingleton;
  function isEntityType(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "EntityType";
  }

  /**
   * Checks whether the argument is a {@link Property}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link Property}.
   */
  _exports.isEntityType = isEntityType;
  function isProperty(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "Property";
  }

  /**
   * Checks whether the argument is a {@link NavigationProperty}.
   *
   * Hint: There are also the more specific functions {@link isSingleNavigationProperty} and {@link isMultipleNavigationProperty}. These can be
   * used to check for to-one and to-many navigation properties, respectively.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link NavigationProperty}.
   */
  _exports.isProperty = isProperty;
  function isNavigationProperty(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject._type) === "NavigationProperty";
  }

  /**
   * Checks whether the argument is a {@link SingleNavigationProperty}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link SingleNavigationProperty}.
   */
  _exports.isNavigationProperty = isNavigationProperty;
  function isSingleNavigationProperty(serviceObject) {
    return isNavigationProperty(serviceObject) && !serviceObject.isCollection;
  }

  /**
   * Checks whether the argument is a {@link MultipleNavigationProperty}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link MultipleNavigationProperty}.
   */
  _exports.isSingleNavigationProperty = isSingleNavigationProperty;
  function isMultipleNavigationProperty(serviceObject) {
    return isNavigationProperty(serviceObject) && serviceObject.isCollection;
  }

  /**
   * Checks whether the argument is a {@link PathAnnotationExpression}.
   *
   * @param expression The object to be checked.
   * @returns Whether the argument is a {@link PathAnnotationExpression}.
   */
  _exports.isMultipleNavigationProperty = isMultipleNavigationProperty;
  function isPathAnnotationExpression(expression) {
    return (expression === null || expression === void 0 ? void 0 : expression.type) === "Path";
  }

  /**
   * Checks whether the argument is a {@link PropertyPath}.
   *
   * @param expression The object to be checked.
   * @returns Whether the argument is a {@link PropertyPath}.
   */
  _exports.isPathAnnotationExpression = isPathAnnotationExpression;
  function isPropertyPathExpression(expression) {
    return (expression === null || expression === void 0 ? void 0 : expression.type) === "PropertyPath";
  }
  _exports.isPropertyPathExpression = isPropertyPathExpression;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/helpers/TypeGuards", [],function(){"use strict";var n={};function i(n){var i,t;return n===null||n===void 0?void 0:(i=(t=n).isA)===null||i===void 0?void 0:i.call(t,"sap.ui.model.Context")}n.isContext=i;function t(n){return Array.isArray(n)&&n.length>0&&n.every(n=>typeof n==="function")}n.isFunctionArray=t;function o(n,i){return n.$Type===i}n.isAnnotationOfType=o;function e(n){return(n===null||n===void 0?void 0:n.hasOwnProperty("_type"))??false}n.isServiceObject=e;function r(n){return(n===null||n===void 0?void 0:n._type)==="ComplexType"}n.isComplexType=r;function u(n){return(n===null||n===void 0?void 0:n._type)==="TypeDefinition"}n.isTypeDefinition=u;function l(n){return(n===null||n===void 0?void 0:n._type)==="EntityContainer"}n.isEntityContainer=l;function y(n){return(n===null||n===void 0?void 0:n._type)==="EntitySet"}n.isEntitySet=y;function p(n){return(n===null||n===void 0?void 0:n._type)==="Singleton"}n.isSingleton=p;function v(n){return(n===null||n===void 0?void 0:n._type)==="EntityType"}n.isEntityType=v;function s(n){return(n===null||n===void 0?void 0:n._type)==="Property"}n.isProperty=s;function d(n){return(n===null||n===void 0?void 0:n._type)==="NavigationProperty"}n.isNavigationProperty=d;function a(n){return d(n)&&!n.isCollection}n.isSingleNavigationProperty=a;function c(n){return d(n)&&n.isCollection}n.isMultipleNavigationProperty=c;function f(n){return(n===null||n===void 0?void 0:n.type)==="Path"}n.isPathAnnotationExpression=f;function P(n){return(n===null||n===void 0?void 0:n.type)==="PropertyPath"}n.isPropertyPathExpression=P;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/Fragment-dbg", [], function () {
  "use strict";

  var _exports = {};
  let Fragment = function Fragment() {};
  Fragment.isFragment = true;
  _exports = Fragment;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/Fragment", [],function(){"use strict";var e={};let t=function e(){};t.isFragment=true;e=t;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/ViewLoader-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/m/Page", "sap/ui/base/ManagedObject", "sap/ui/core/mvc/View", "sap/fe/core/jsx-runtime/jsx"], function (ClassSupport, Page, ManagedObject, View, _jsx) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var _exports = {};
  var property = ClassSupport.property;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let ViewLoader = (_dec = defineUI5Class("sap.fe.core.jsx-runtime.MDXViewLoader"), _dec2 = property({
    type: "string"
  }), _dec(_class = (_class2 = /*#__PURE__*/function (_View) {
    _inheritsLoose(ViewLoader, _View);
    function ViewLoader() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _View.call(this, ...args) || this;
      _initializerDefineProperty(_this, "viewName", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    _exports = ViewLoader;
    var _proto = ViewLoader.prototype;
    _proto.loadDependency = function loadDependency(name) {
      return new Promise(resolve => {
        sap.ui.require([name], async MDXContent => {
          resolve(MDXContent);
        });
      });
    };
    _proto.getControllerName = function getControllerName() {
      const viewData = this.getViewData();
      return viewData.controllerName;
    }

    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    ;
    _proto.createContent = async function createContent(oController) {
      const viewData = this.getViewData();
      const MDXContent = viewData.viewContent || (await this.loadDependency(viewData._mdxViewName));
      ViewLoader.preprocessorData = this.mPreprocessors.xml;
      ViewLoader.controller = oController;
      const mdxContent = ManagedObject.runWithPreprocessors(() => {
        return MDXContent();
      }, {
        id: sId => {
          return this.createId(sId);
        },
        settings: function () {
          this.controller = oController;
        }
      });
      return _jsx(Page, {
        class: "sapUiContentPadding",
        children: {
          content: mdxContent
        }
      });
    };
    return ViewLoader;
  }(View), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewName", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  _exports = ViewLoader;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/ViewLoader", ["sap/fe/core/helpers/ClassSupport","sap/m/Page","sap/ui/base/ManagedObject","sap/ui/core/mvc/View","sap/fe/core/jsx-runtime/jsx"],function(e,r,t,i,n){"use strict";var a,o,s,c,l;var u={};var f=e.property;var p=e.defineUI5Class;function d(e,r,t,i){if(!t)return;Object.defineProperty(e,r,{enumerable:t.enumerable,configurable:t.configurable,writable:t.writable,value:t.initializer?t.initializer.call(i):void 0})}function b(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function v(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;h(e,r)}function h(e,r){h=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,t){r.__proto__=t;return r};return h(e,r)}function m(e,r,t,i,n){var a={};Object.keys(i).forEach(function(e){a[e]=i[e]});a.enumerable=!!a.enumerable;a.configurable=!!a.configurable;if("value"in a||a.initializer){a.writable=true}a=t.slice().reverse().reduce(function(t,i){return i(e,r,t)||t},a);if(n&&a.initializer!==void 0){a.value=a.initializer?a.initializer.call(n):void 0;a.initializer=undefined}if(a.initializer===void 0){Object.defineProperty(e,r,a);a=null}return a}function w(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let y=(a=p("sap.fe.core.jsx-runtime.MDXViewLoader"),o=f({type:"string"}),a(s=(c=function(e){v(i,e);function i(){var r;for(var t=arguments.length,i=new Array(t),n=0;n<t;n++){i[n]=arguments[n]}r=e.call(this,...i)||this;d(r,"viewName",l,b(r));return r}u=i;var a=i.prototype;a.loadDependency=function e(r){return new Promise(e=>{sap.ui.require([r],async r=>{e(r)})})};a.getControllerName=function e(){const r=this.getViewData();return r.controllerName};a.createContent=async function e(a){const o=this.getViewData();const s=o.viewContent||await this.loadDependency(o._mdxViewName);i.preprocessorData=this.mPreprocessors.xml;i.controller=a;const c=t.runWithPreprocessors(()=>s(),{id:e=>this.createId(e),settings:function(){this.controller=a}});return n(r,{class:"sapUiContentPadding",children:{content:c}})};return i}(i),l=m(c.prototype,"viewName",[o],{configurable:true,enumerable:true,writable:true,initializer:null}),c))||s);u=y;return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx-control-dbg", ["sap/fe/core/helpers/BindingToolkit", "sap/m/Text", "sap/ui/base/DataType", "sap/ui/core/mvc/EventHandlerResolver"], function (BindingToolkit, Text, DataType, EventHandlerResolver) {
  "use strict";

  var isConstant = BindingToolkit.isConstant;
  var isBindingToolkitExpression = BindingToolkit.isBindingToolkitExpression;
  var compileExpression = BindingToolkit.compileExpression;
  var compileConstant = BindingToolkit.compileConstant;
  const addChildAggregation = function (aggregationChildren, aggregationName, child) {
    if (child === undefined || typeof child === "string") {
      return;
    }
    if (!aggregationChildren[aggregationName]) {
      aggregationChildren[aggregationName] = [];
    }
    if (isChildAnElement(child)) {
      aggregationChildren[aggregationName].push(child);
    } else if (Array.isArray(child)) {
      child.forEach(subChild => {
        addChildAggregation(aggregationChildren, aggregationName, subChild);
      });
    } else {
      Object.keys(child).forEach(childKey => {
        addChildAggregation(aggregationChildren, childKey, child[childKey]);
      });
    }
  };
  const isChildAnElement = function (children) {
    var _isA, _ref;
    return children === null || children === void 0 ? void 0 : (_isA = (_ref = children).isA) === null || _isA === void 0 ? void 0 : _isA.call(_ref, "sap.ui.core.Element");
  };
  const isAControl = function (children) {
    return !!(children !== null && children !== void 0 && children.getMetadata);
  };
  function processAggregations(metadata, mSettings) {
    const metadataAggregations = metadata.getAllAggregations();
    const defaultAggregationName = metadata.getDefaultAggregationName();
    const aggregationChildren = {};
    addChildAggregation(aggregationChildren, defaultAggregationName, mSettings.children);
    delete mSettings.children;
    // find out which aggregation are bound (both in children and directly under it)
    Object.keys(metadataAggregations).forEach(aggregationName => {
      if (aggregationChildren[aggregationName] !== undefined) {
        if (mSettings.hasOwnProperty(aggregationName)) {
          // always use the first item as template according to UI5 logic
          mSettings[aggregationName].template = aggregationChildren[aggregationName][0];
        } else {
          mSettings[aggregationName] = aggregationChildren[aggregationName];
        }
      }
    });
  }

  /**
   * Processes the properties.
   *
   * If the property is a bindingToolkit expression we need to compile it.
   * Else if the property is set as string (compiled binding expression returns string by default even if it's a boolean, int, etc.) and it doesn't match with expected
   * format the value is parsed to provide expected format.
   *
   * @param metadata Metadata of the control
   * @param settings Settings of the control
   * @returns {void}
   */
  function processProperties(metadata, settings) {
    let settingsKey;
    for (settingsKey in settings) {
      const value = settings[settingsKey];
      if (isBindingToolkitExpression(value)) {
        const bindingToolkitExpression = value;
        if (isConstant(bindingToolkitExpression)) {
          settings[settingsKey] = compileConstant(bindingToolkitExpression, false, true, true);
        } else {
          settings[settingsKey] = compileExpression(bindingToolkitExpression);
        }
      } else if (typeof value === "string" && !value.startsWith("{")) {
        var _metadata$getAllPrope, _metadata$getAllPrope2, _metadata$getAllPrope3;
        const propertyType = (_metadata$getAllPrope = metadata.getAllProperties()[settingsKey]) === null || _metadata$getAllPrope === void 0 ? void 0 : (_metadata$getAllPrope2 = (_metadata$getAllPrope3 = _metadata$getAllPrope).getType) === null || _metadata$getAllPrope2 === void 0 ? void 0 : _metadata$getAllPrope2.call(_metadata$getAllPrope3);
        if (propertyType && propertyType instanceof DataType && ["boolean", "int", "float"].indexOf(propertyType.getName()) > -1) {
          settings[settingsKey] = propertyType.parseValue(value);
        }
      }
    }
  }

  /**
   * Processes the command.
   *
   * Resolves the command set on the control via the intrinsic class attribute "jsx:command".
   * If no command has been set or the targeted event doesn't exist, no configuration is set.
   *
   * @param metadata Metadata of the control
   * @param settings Settings of the control
   * @returns {void}
   */
  function processCommand(metadata, settings) {
    const commandProperty = settings["jsx:command"];
    if (commandProperty) {
      const [command, eventName] = commandProperty.split("|");
      const event = metadata.getAllEvents()[eventName];
      if (event && command.startsWith("cmd:")) {
        settings[event.name] = EventHandlerResolver.resolveEventHandler(command);
      }
    }
    delete settings["jsx:command"];
  }
  const jsxControl = function (ControlType, settings, key, jsxContext) {
    let targetControl;
    if (ControlType !== null && ControlType !== void 0 && ControlType.isFragment) {
      targetControl = settings.children;
    } else if (ControlType !== null && ControlType !== void 0 && ControlType.isRuntime) {
      const runtimeBuildingBlock = new ControlType(settings);
      targetControl = runtimeBuildingBlock.getContent(jsxContext.view, jsxContext.appComponent);
    } else if (isAControl(ControlType)) {
      const metadata = ControlType.getMetadata();
      if (key !== undefined) {
        settings["key"] = key;
      }
      processCommand(metadata, settings);
      processAggregations(metadata, settings);
      const classDef = settings.class;
      const refDef = settings.ref;
      delete settings.ref;
      delete settings.class;
      processProperties(metadata, settings);
      targetControl = new ControlType(settings);
      if (classDef) {
        targetControl.addStyleClass(classDef);
      }
      if (refDef) {
        refDef.setCurrent(targetControl);
      }
    } else if (typeof ControlType === "function") {
      const controlTypeFn = ControlType;
      targetControl = controlTypeFn(settings);
    } else {
      targetControl = new Text({
        text: "Missing component " + ControlType
      });
    }
    return targetControl;
  };
  return jsxControl;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx-control", ["sap/fe/core/helpers/BindingToolkit","sap/m/Text","sap/ui/base/DataType","sap/ui/core/mvc/EventHandlerResolver"],function(e,t,n,i){"use strict";var s=e.isConstant;var o=e.isBindingToolkitExpression;var l=e.compileExpression;var a=e.compileConstant;const r=function(e,t,n){if(n===undefined||typeof n==="string"){return}if(!e[t]){e[t]=[]}if(c(n)){e[t].push(n)}else if(Array.isArray(n)){n.forEach(n=>{r(e,t,n)})}else{Object.keys(n).forEach(t=>{r(e,t,n[t])})}};const c=function(e){var t,n;return e===null||e===void 0?void 0:(t=(n=e).isA)===null||t===void 0?void 0:t.call(n,"sap.ui.core.Element")};const f=function(e){return!!(e!==null&&e!==void 0&&e.getMetadata)};function d(e,t){const n=e.getAllAggregations();const i=e.getDefaultAggregationName();const s={};r(s,i,t.children);delete t.children;Object.keys(n).forEach(e=>{if(s[e]!==undefined){if(t.hasOwnProperty(e)){t[e].template=s[e][0]}else{t[e]=s[e]}}})}function u(e,t){let i;for(i in t){const d=t[i];if(o(d)){const e=d;if(s(e)){t[i]=a(e,false,true,true)}else{t[i]=l(e)}}else if(typeof d==="string"&&!d.startsWith("{")){var r,c,f;const s=(r=e.getAllProperties()[i])===null||r===void 0?void 0:(c=(f=r).getType)===null||c===void 0?void 0:c.call(f);if(s&&s instanceof n&&["boolean","int","float"].indexOf(s.getName())>-1){t[i]=s.parseValue(d)}}}}function p(e,t){const n=t["jsx:command"];if(n){const[s,o]=n.split("|");const l=e.getAllEvents()[o];if(l&&s.startsWith("cmd:")){t[l.name]=i.resolveEventHandler(s)}}delete t["jsx:command"]}const v=function(e,n,i,s){let o;if(e!==null&&e!==void 0&&e.isFragment){o=n.children}else if(e!==null&&e!==void 0&&e.isRuntime){const t=new e(n);o=t.getContent(s.view,s.appComponent)}else if(f(e)){const t=e.getMetadata();if(i!==undefined){n["key"]=i}p(t,n);d(t,n);const s=n.class;const l=n.ref;delete n.ref;delete n.class;u(t,n);o=new e(n);if(s){o.addStyleClass(s)}if(l){l.setCurrent(o)}}else if(typeof e==="function"){const t=e;o=t(n)}else{o=new t({text:"Missing component "+e})}return o};return v},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx-dbg", ["sap/fe/core/jsx-runtime/jsx-control", "sap/fe/core/jsx-runtime/jsx-xml"], function (jsxControl, jsxXml) {
  "use strict";

  let renderNextAsXML = false;
  const jsx = function (ControlType, mSettings, key) {
    if (!renderNextAsXML) {
      return jsxControl(ControlType, mSettings, key, jsxContext);
    } else {
      return jsxXml(ControlType, mSettings, key);
    }
  };

  /**
   * Indicates that the next JSX call should be rendered as XML.
   *
   * @param renderMethod The method that needs to be rendered as XML
   * @returns The XML representation of the control
   */
  jsx.renderAsXML = function (renderMethod) {
    renderNextAsXML = true;
    const returnValue = renderMethod();
    renderNextAsXML = false;
    return returnValue;
  };
  let jsxContext = {};
  jsx.getContext = function () {
    return jsxContext;
  };
  jsx.withContext = function (context, functionToExecute) {
    jsxContext = context;
    const callBackReturn = functionToExecute();
    jsxContext = {};
    return callBackReturn;
  };
  return jsx;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx-xml-dbg", [], function () {
  "use strict";

  const writeChildren = function (val) {
    if (Array.isArray(val)) {
      return val.join("");
    } else {
      return val;
    }
  };
  const addChildAggregation = function (aggregationChildren, aggregationName, child) {
    if (child === undefined) {
      return;
    }
    if (!aggregationChildren[aggregationName]) {
      aggregationChildren[aggregationName] = [];
    }
    if (typeof child === "string" && child.trim().length > 0) {
      aggregationChildren[aggregationName].push(child);
    } else if (Array.isArray(child)) {
      child.forEach(subChild => {
        addChildAggregation(aggregationChildren, aggregationName, subChild);
      });
    } else {
      Object.keys(child).forEach(childKey => {
        addChildAggregation(aggregationChildren, childKey, child[childKey]);
      });
    }
  };
  const FL_DELEGATE = "fl:delegate";
  const jsxXml = function (type, mSettings, key) {
    const metadata = type.getMetadata();
    const namesSplit = metadata.getName().split(".");
    if (key !== undefined) {
      mSettings["key"] = key;
    }
    const metadataProperties = metadata.getAllProperties();
    const metadataAggregations = metadata.getAllAggregations();
    metadataProperties["class"] = {
      name: "class"
    };
    metadataProperties["id"] = {
      name: "id"
    };
    metadataProperties[FL_DELEGATE] = {
      name: FL_DELEGATE
    };
    metadataProperties["xmlns:fl"] = {
      name: FL_DELEGATE
    };
    if (metadata.getName() === "sap.ui.core.Fragment") {
      metadataProperties["fragmentName"] = {
        name: "fragmentName"
      };
    }
    const namespace = namesSplit.slice(0, -1);
    const name = namesSplit[namesSplit.length - 1];
    const namespaceAlias = namespace[namespace.length - 1];
    const tagName = `${namespaceAlias}:${name}`;
    const propertiesString = [];
    const aggregationString = [];
    const defaultAggregationName = metadata.getDefaultAggregationName();
    Object.keys(metadataProperties).forEach(propertyName => {
      if (mSettings.hasOwnProperty(propertyName) && mSettings[propertyName] !== undefined) {
        if (typeof mSettings[propertyName] === "object") {
          propertiesString.push(`${propertyName}='${JSON.stringify(mSettings[propertyName])}'`);
        } else {
          propertiesString.push(`${propertyName}='${mSettings[propertyName]}'`);
        }
      }
    });
    const aggregationChildren = {
      [defaultAggregationName]: []
    };
    addChildAggregation(aggregationChildren, defaultAggregationName, mSettings.children);
    Object.keys(metadataAggregations).forEach(aggregationName => {
      if (aggregationChildren.hasOwnProperty(aggregationName) && aggregationChildren[aggregationName].length > 0) {
        aggregationString.push(`<${namespaceAlias}:${aggregationName}>
						${writeChildren(aggregationChildren[aggregationName])}
					</${namespaceAlias}:${aggregationName}>`);
      }
      if (mSettings.hasOwnProperty(aggregationName) && mSettings[aggregationName] !== undefined) {
        propertiesString.push(`${aggregationName}='${JSON.stringify(mSettings[aggregationName])}'`);
      }
    });
    return `<${tagName} xmlns:${namespaceAlias}="${namespace.join(".")}" ${propertiesString.join(" ")}>${aggregationString.join("")}</${tagName}>`;
  };
  return jsxXml;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx-xml", [],function(){"use strict";const e=function(e){if(Array.isArray(e)){return e.join("")}else{return e}};const t=function(e,n,s){if(s===undefined){return}if(!e[n]){e[n]=[]}if(typeof s==="string"&&s.trim().length>0){e[n].push(s)}else if(Array.isArray(s)){s.forEach(s=>{t(e,n,s)})}else{Object.keys(s).forEach(n=>{t(e,n,s[n])})}};const n="fl:delegate";const s=function(s,i,r){const o=s.getMetadata();const a=o.getName().split(".");if(r!==undefined){i["key"]=r}const c=o.getAllProperties();const f=o.getAllAggregations();c["class"]={name:"class"};c["id"]={name:"id"};c[n]={name:n};c["xmlns:fl"]={name:n};if(o.getName()==="sap.ui.core.Fragment"){c["fragmentName"]={name:"fragmentName"}}const l=a.slice(0,-1);const g=a[a.length-1];const u=l[l.length-1];const $=`${u}:${g}`;const h=[];const m=[];const y=o.getDefaultAggregationName();Object.keys(c).forEach(e=>{if(i.hasOwnProperty(e)&&i[e]!==undefined){if(typeof i[e]==="object"){h.push(`${e}='${JSON.stringify(i[e])}'`)}else{h.push(`${e}='${i[e]}'`)}}});const d={[y]:[]};t(d,y,i.children);Object.keys(f).forEach(t=>{if(d.hasOwnProperty(t)&&d[t].length>0){m.push(`<${u}:${t}>\n\t\t\t\t\t\t${e(d[t])}\n\t\t\t\t\t</${u}:${t}>`)}if(i.hasOwnProperty(t)&&i[t]!==undefined){h.push(`${t}='${JSON.stringify(i[t])}'`)}});return`<${$} xmlns:${u}="${l.join(".")}" ${h.join(" ")}>${m.join("")}</${$}>`};return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsx", ["sap/fe/core/jsx-runtime/jsx-control","sap/fe/core/jsx-runtime/jsx-xml"],function(e,t){"use strict";let n=false;const r=function(r,u,o){if(!n){return e(r,u,o,s)}else{return t(r,u,o)}};r.renderAsXML=function(e){n=true;const t=e();n=false;return t};let s={};r.getContext=function(){return s};r.withContext=function(e,t){s=e;const n=t();s={};return n};return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsxs-dbg", ["sap/fe/core/jsx-runtime/jsx"], function (jsx) {
  "use strict";

  return jsx;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/jsxs", ["sap/fe/core/jsx-runtime/jsx"],function(e){"use strict";return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/useMDXComponents-dbg", ["sap/base/Log", "sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/jsx-runtime/ViewLoader", "sap/fe/macros/macroLibrary", "sap/m/FormattedText", "sap/m/HBox", "sap/m/Panel", "sap/m/Title", "sap/ui/codeeditor/CodeEditor", "sap/ui/core/Fragment", "sap/ui/core/library", "sap/ui/core/util/XMLPreprocessor", "sap/fe/core/jsx-runtime/jsx"], function (Log, BuildingBlockTemplateProcessor, ClassSupport, MDXViewLoader, macroLibrary, FormattedText, HBox, Panel, Title, CodeEditor, Fragment, library, XMLPreprocessor, _jsx) {
  "use strict";

  var TitleLevel = library.TitleLevel;
  var createReference = ClassSupport.createReference;
  var parseXMLString = BuildingBlockTemplateProcessor.parseXMLString;
  function p(strValue) {
    const content = Array.isArray(strValue.children) ? strValue.children.map(child => {
      let output;
      if (typeof child === "string") {
        output = child;
      } else {
        switch (child.getMetadata().getName()) {
          case "sap.m.Link":
            output = `<a href="${child.getHref()}">${child.getText()}</a>`;
            break;
          case "sap.ui.codeeditor.CodeEditor":
            output = `<code>${child.getValue()}</code>`;
            break;
        }
      }
      return output;
    }).join("") : strValue.children;
    return _jsx(FormattedText, {
      htmlText: content,
      class: "sapUiTinyMarginBottom"
    });
  }
  function h1(strValue) {
    return _jsx(Title, {
      text: strValue.children,
      level: TitleLevel.H1,
      class: "sapUiTinyMarginBottom"
    });
  }
  function a(strValue) {
    return `<a href={strValue.href}>${strValue.children}</a>`;
  }
  function ul(strValue) {
    const ulContent = `<ul>${Array.isArray(strValue.children) ? strValue.children.join("") : strValue.children}</ul>`;
    return _jsx(FormattedText, {
      htmlText: ulContent
    });
  }
  function li(strValue) {
    return `<li>${Array.isArray(strValue.children) ? strValue.children.join("") : strValue.children}</li>`;
  }
  function h2(strValue) {
    return _jsx(Title, {
      text: strValue.children,
      level: TitleLevel.H2,
      class: "sapUiSmallMarginTop sapUiTinyMarginBottom"
    });
  }
  function pre(content) {
    return content.children;
  }
  function BuildingBlockPlayground(inValue) {
    const sourceHBox = createReference();
    const binding = inValue.binding ? {
      path: inValue.binding
    } : undefined;
    const target = _jsx(Panel, {
      headerText: inValue.headerText || "",
      class: "sapUiSmallMarginTop",
      children: _jsx(HBox, {
        ref: sourceHBox
      })
    });
    // 	<TabContainer>
    // 		{{
    // 			items: [
    // 				<TabContainerItem name={"Sample"}>{{ content:  }},</TabContainerItem>,
    // 				<TabContainerItem name={"Source"}>
    // 					{{
    // 						content: (
    // 							<CodeBlock editable={false} lineNumbers={true} type={"xml"} lineCount={10}>
    // 								{inValue.children}
    // 							</CodeBlock>
    // 						)
    // 					}}
    // 				</TabContainerItem>
    // 			]
    // 		}}
    // 	</TabContainer>
    // );
    if (binding) {
      target.bindElement(binding);
    }
    macroLibrary.register();
    const fragmentOrPromise = XMLPreprocessor.process(parseXMLString(`<root>${inValue.children}</root>`, true)[0], {
      name: "myBuildingBlockFragment"
    }, MDXViewLoader.preprocessorData);
    Promise.resolve(fragmentOrPromise).then(fragment => {
      return Fragment.load({
        definition: fragment.firstElementChild,
        controller: MDXViewLoader.controller
      });
    }).then(fragmentContent => {
      sourceHBox.current.removeAllItems();
      sourceHBox.current.addItem(fragmentContent);
    }).catch(err => {
      Log.error(err);
    });
    return target;
  }
  function CodeBlock(inValue) {
    var _inValue$children, _snippet$split, _inValue$className;
    const snippet = ((_inValue$children = inValue.children) === null || _inValue$children === void 0 ? void 0 : _inValue$children.trim()) || "";
    const lineCount = inValue.lineCount || Math.max((_snippet$split = snippet.split("\n")) === null || _snippet$split === void 0 ? void 0 : _snippet$split.length, 3);
    const type = inValue.type || (inValue === null || inValue === void 0 ? void 0 : (_inValue$className = inValue.className) === null || _inValue$className === void 0 ? void 0 : _inValue$className.split("-")[1]) || "js";
    const myCodeEditor = _jsx(CodeEditor, {
      class: "sapUiTinyMargin",
      lineNumbers: inValue.lineNumbers || false,
      type: type,
      editable: inValue.editable || false,
      maxLines: lineCount,
      height: "auto",
      width: "98%"
    });
    myCodeEditor.setValue(snippet);
    if (inValue.source) {
      fetch(inValue.source).then(res => res.text()).then(text => {
        let splittedText = text.split("\n");
        if (inValue.start) {
          splittedText = splittedText.slice(inValue.start - 1, inValue.end);
        }
        const newLineCount = Math.max(splittedText.length, 3);
        myCodeEditor.setMaxLines(newLineCount);
        myCodeEditor.setValue(splittedText.join("\n"));
        return;
      }).catch(e => {
        myCodeEditor.setValue(e.message);
      });
    }
    return myCodeEditor;
  }
  const provideComponenents = function () {
    return {
      p: p,
      a: a,
      h1: h1,
      h2: h2,
      ul: ul,
      li: li,
      pre: pre,
      code: CodeBlock,
      CodeBlock: CodeBlock,
      BuildingBlockPlayground: BuildingBlockPlayground
    };
  };
  return provideComponenents;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/jsx-runtime/useMDXComponents", ["sap/base/Log","sap/fe/core/buildingBlocks/BuildingBlockTemplateProcessor","sap/fe/core/helpers/ClassSupport","sap/fe/core/jsx-runtime/ViewLoader","sap/fe/macros/macroLibrary","sap/m/FormattedText","sap/m/HBox","sap/m/Panel","sap/m/Title","sap/ui/codeeditor/CodeEditor","sap/ui/core/Fragment","sap/ui/core/library","sap/ui/core/util/XMLPreprocessor","sap/fe/core/jsx-runtime/jsx"],function(e,r,t,n,i,a,s,o,l,c,u,d,p,h){"use strict";var m=d.TitleLevel;var f=t.createReference;var g=r.parseXMLString;function v(e){const r=Array.isArray(e.children)?e.children.map(e=>{let r;if(typeof e==="string"){r=e}else{switch(e.getMetadata().getName()){case"sap.m.Link":r=`<a href="${e.getHref()}">${e.getText()}</a>`;break;case"sap.ui.codeeditor.CodeEditor":r=`<code>${e.getValue()}</code>`;break}}return r}).join(""):e.children;return h(a,{htmlText:r,class:"sapUiTinyMarginBottom"})}function x(e){return h(l,{text:e.children,level:m.H1,class:"sapUiTinyMarginBottom"})}function y(e){return`<a href={strValue.href}>${e.children}</a>`}function T(e){const r=`<ul>${Array.isArray(e.children)?e.children.join(""):e.children}</ul>`;return h(a,{htmlText:r})}function b(e){return`<li>${Array.isArray(e.children)?e.children.join(""):e.children}</li>`}function B(e){return h(l,{text:e.children,level:m.H2,class:"sapUiSmallMarginTop sapUiTinyMarginBottom"})}function M(e){return e.children}function L(r){const t=f();const a=r.binding?{path:r.binding}:undefined;const l=h(o,{headerText:r.headerText||"",class:"sapUiSmallMarginTop",children:h(s,{ref:t})});if(a){l.bindElement(a)}i.register();const c=p.process(g(`<root>${r.children}</root>`,true)[0],{name:"myBuildingBlockFragment"},n.preprocessorData);Promise.resolve(c).then(e=>u.load({definition:e.firstElementChild,controller:n.controller})).then(e=>{t.current.removeAllItems();t.current.addItem(e)}).catch(r=>{e.error(r)});return l}function j(e){var r,t,n;const i=((r=e.children)===null||r===void 0?void 0:r.trim())||"";const a=e.lineCount||Math.max((t=i.split("\n"))===null||t===void 0?void 0:t.length,3);const s=e.type||(e===null||e===void 0?void 0:(n=e.className)===null||n===void 0?void 0:n.split("-")[1])||"js";const o=h(c,{class:"sapUiTinyMargin",lineNumbers:e.lineNumbers||false,type:s,editable:e.editable||false,maxLines:a,height:"auto",width:"98%"});o.setValue(i);if(e.source){fetch(e.source).then(e=>e.text()).then(r=>{let t=r.split("\n");if(e.start){t=t.slice(e.start-1,e.end)}const n=Math.max(t.length,3);o.setMaxLines(n);o.setValue(t.join("\n"));return}).catch(e=>{o.setValue(e.message)})}return o}const k=function(){return{p:v,a:y,h1:x,h2:B,ul:T,li:b,pre:M,code:j,CodeBlock:j,BuildingBlockPlayground:L}};return k},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/library-dbg", ["sap/base/Log", "sap/fe/core/formatters/FPMFormatter", "sap/fe/core/formatters/StandardFormatter", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/services/AsyncComponentServiceFactory", "sap/fe/core/services/CacheHandlerServiceFactory", "sap/fe/core/services/EnvironmentServiceFactory", "sap/fe/core/services/NavigationServiceFactory", "sap/fe/core/services/ResourceModelServiceFactory", "sap/fe/core/services/RoutingServiceFactory", "sap/fe/core/services/ShellServicesFactory", "sap/fe/core/services/SideEffectsServiceFactory", "sap/fe/core/services/TemplatedViewServiceFactory", "sap/fe/core/type/DateTimeWithTimezone", "sap/fe/core/type/Email", "sap/fe/core/type/FiscalDate", "sap/fe/navigation/library", "sap/fe/placeholder/library", "sap/ui/base/DataType", "sap/ui/core/Core", "sap/ui/core/library", "sap/ui/core/service/ServiceFactoryRegistry", "sap/ui/fl/library", "sap/ui/mdc/library"], function (Log, _FPMFormatter, _StandardFormatter, _ValueFormatter, AsyncComponentServiceFactory, CacheHandlerServiceFactory, $EnvironmentServiceFactory, NavigationService, ResourceModelServiceFactory, RoutingServiceFactory, ShellServicesFactory, SideEffectsServiceFactory, TemplatedViewServiceFactory, _DateTimeWithTimezone, _Email, _FiscalDate, _library, _library2, DataType, Core, _library3, ServiceFactoryRegistry, _library4, _library5) {
  "use strict";

  var _exports = {};
  var EnvironmentServiceFactory = $EnvironmentServiceFactory.EnvironmentServiceFactory;
  /**
   * Root namespace for all the libraries related to SAP Fiori elements.
   *
   * @namespace
   * @name sap.fe
   * @public
   */
  const feNamespace = "sap.fe";
  /**
   * Library providing the core functionality of the runtime for SAP Fiori elements for OData V4.
   *
   * @namespace
   * @name sap.fe.core
   * @public
   */
  _exports.feNamespace = feNamespace;
  const feCoreNamespace = "sap.fe.core";
  /**
   * Collection of controller extensions used internally in SAP Fiori elements exposing a method that you can override to allow more flexibility.
   *
   * @namespace
   * @name sap.fe.core.controllerextensions
   * @public
   */
  _exports.feCoreNamespace = feCoreNamespace;
  const feCextNamespace = "sap.fe.controllerextensions";
  /**
   * Collection of classes provided by SAP Fiori elements for the Flexible Programming Model
   *
   * @namespace
   * @name sap.fe.core.fpm
   * @public
   */
  _exports.feCextNamespace = feCextNamespace;
  const feFpmNamespace = "sap.fe.core.fpm";
  _exports.feFpmNamespace = feFpmNamespace;
  const thisLib = Core.initLibrary({
    name: "sap.fe.core",
    dependencies: ["sap.ui.core", "sap.fe.navigation", "sap.fe.placeholder", "sap.ui.fl", "sap.ui.mdc", "sap.f"],
    types: ["sap.fe.core.CreationMode", "sap.fe.core.VariantManagement"],
    interfaces: [],
    controls: [],
    elements: [],
    // eslint-disable-next-line no-template-curly-in-string
    version: "1.115.1",
    noLibraryCSS: true,
    extensions: {
      //Configuration used for rule loading of Support Assistant
      "sap.ui.support": {
        publicRules: true,
        internalRules: true
      },
      flChangeHandlers: {
        "sap.fe.core.controls.FilterBar": "sap/ui/mdc/flexibility/FilterBar"
      }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
  });

  /**
   * Available values for invocation grouping.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.InvocationGrouping = {
    /**
     * Isolated.
     *
     * @constant
     * @type {string}
     * @public
     */
    Isolated: "Isolated",
    /**
     * ChangeSet.
     *
     * @constant
     * @type {string}
     * @public
     */
    ChangeSet: "ChangeSet"
  };
  /**
   * Available values for creation mode.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.CreationMode = {
    /**
     * New Page.
     *
     * @constant
     * @type {string}
     * @public
     */
    NewPage: "NewPage",
    /**
     * Sync.
     *
     * @constant
     * @type {string}
     * @public
     */
    Sync: "Sync",
    /**
     * Async.
     *
     * @constant
     * @type {string}
     * @public
     */
    Async: "Async",
    /**
     * Deferred.
     *
     * @constant
     * @type {string}
     * @public
     */
    Deferred: "Deferred",
    /**
     * Inline.
     *
     * @constant
     * @type {string}
     * @public
     */
    Inline: "Inline",
    /**
     * Creation row.
     *
     * @constant
     * @type {string}
     * @public
     */
    CreationRow: "CreationRow",
    /**
     * Inline creation rows.
     *
     * @constant
     * @type {string}
     * @public
     */
    InlineCreationRows: "InlineCreationRows",
    /**
     * External (by outbound navigation).
     *
     * @constant
     * @type {string}
     * @public
     */
    External: "External"
  };
  /**
   * Available values for Variant Management.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.VariantManagement = {
    /**
     * No variant management at all.
     *
     * @constant
     * @type {string}
     * @public
     */
    None: "None",
    /**
     * One variant configuration for the whole page.
     *
     * @constant
     * @type {string}
     * @public
     */
    Page: "Page",
    /**
     * Variant management on control level.
     *
     * @constant
     * @type {string}
     * @public
     */
    Control: "Control"
  };
  /**
   * Available constants.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.Constants = {
    /*
     * Indicates cancelling of an action dialog.
     *
     * @constant
     * @type {string}
     * @public
     */
    CancelActionDialog: "cancel",
    /*
     * Indicates failure returned from backend during the execution of an action
     *
     * @constant
     * @type {string}
     * @public
     */
    ActionExecutionFailed: "actionExecutionFailed",
    /*
     * Indicates failure returned from backend during creation of a business object (via direct POST)
     *
     * @constant
     * @type {string}
     * @public
     */
    CreationFailed: "creationFailed"
  };
  /**
   * Available values for programming model.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.ProgrammingModel = {
    /*
     * Draft.
     *
     * @constant
     * @type {string}
     * @public
     */
    Draft: "Draft",
    /**
     * Sticky.
     *
     * @constant
     * @type {string}
     * @public
     */
    Sticky: "Sticky",
    /**
     * NonDraft.
     *
     * @constant
     * @type {string}
     * @public
     */
    NonDraft: "NonDraft"
  };
  /**
   * Available values for draft status.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.DraftStatus = {
    /**
     * Saving.
     *
     * @constant
     * @type {string}
     * @public
     */
    Saving: "Saving",
    /**
     * Saved.
     *
     * @constant
     * @type {string}
     * @public
     */
    Saved: "Saved",
    /**
     * Clear.
     *
     * @constant
     * @type {string}
     * @public
     */
    Clear: "Clear"
  };
  /**
   * Edit mode values.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.EditMode = {
    /**
     * View is currently displaying only.
     *
     * @constant
     * @type {string}
     * @public
     */
    Display: "Display",
    /**
     * View is currently editable.
     *
     * @constant
     * @type {string}
     * @public
     */
    Editable: "Editable"
  };
  /**
   * Template views.
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.TemplateContentView = {
    /**
     * Hybrid.
     *
     * @constant
     * @type {string}
     */
    Hybrid: "Hybrid",
    /**
     * Chart.
     *
     * @constant
     * @type {string}
     */
    Chart: "Chart",
    /**
     * Table.
     *
     * @constant
     * @type {string}
     */
    Table: "Table"
  };
  /**
   * Possible initial load (first app startup) modes for a ListReport.
   *
   * @enum {string}
   * @name sap.fe.core.InitialLoadMode
   * @readonly
   * @public
   * @since 1.86.0
   */
  let InitialLoadMode;
  (function (InitialLoadMode) {
    InitialLoadMode["Enabled"] = "Enabled";
    InitialLoadMode["Disabled"] = "Disabled";
    InitialLoadMode["Auto"] = "Auto";
  })(InitialLoadMode || (InitialLoadMode = {}));
  _exports.InitialLoadMode = InitialLoadMode;
  thisLib.InitialLoadMode = InitialLoadMode;

  /**
   * Value of the startup mode
   *
   * @readonly
   * @enum {string}
   * @private
   */
  thisLib.StartupMode = {
    /**
     * App has been started normally.
     *
     * @constant
     * @type {string}
     */
    Normal: "Normal",
    /**
     * App has been started with startup keys (deeplink).
     *
     * @constant
     * @type {string}
     */
    Deeplink: "Deeplink",
    /**
     * App has been started in 'create' mode.
     *
     * @constant
     * @type {string}
     */
    Create: "Create",
    /**
     * App has been started in 'auto create' mode which means to skip any dialogs on startup
     *
     * @constant
     * @type {string}
     */
    AutoCreate: "AutoCreate"
  };
  // explicit type to handle backward compatibility with boolean values
  const InitialLoadType = DataType.createType("sap.fe.core.InitialLoadMode", {
    defaultValue: thisLib.InitialLoadMode.Auto,
    isValid: function (vValue) {
      if (typeof vValue === "boolean") {
        Log.warning("DEPRECATED: boolean value not allowed for 'initialLoad' manifest setting - supported values are: Disabled|Enabled|Auto");
      }
      return vValue === undefined || vValue === null || typeof vValue === "boolean" || thisLib.InitialLoadMode.hasOwnProperty(vValue);
    }
  });
  // normalize a value, taking care of boolean type
  InitialLoadType.setNormalizer(function (vValue) {
    if (!vValue) {
      // undefined, null or false
      return thisLib.InitialLoadMode.Disabled;
    }
    return vValue === true ? thisLib.InitialLoadMode.Enabled : vValue;
  });
  ServiceFactoryRegistry.register("sap.fe.core.services.TemplatedViewService", new TemplatedViewServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.ResourceModelService", new ResourceModelServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.CacheHandlerService", new CacheHandlerServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.NavigationService", new NavigationService());
  ServiceFactoryRegistry.register("sap.fe.core.services.RoutingService", new RoutingServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.SideEffectsService", new SideEffectsServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.ShellServices", new ShellServicesFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.EnvironmentService", new EnvironmentServiceFactory());
  ServiceFactoryRegistry.register("sap.fe.core.services.AsyncComponentService", new AsyncComponentServiceFactory());
  return thisLib;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/library", ["sap/base/Log","sap/fe/core/formatters/FPMFormatter","sap/fe/core/formatters/StandardFormatter","sap/fe/core/formatters/ValueFormatter","sap/fe/core/services/AsyncComponentServiceFactory","sap/fe/core/services/CacheHandlerServiceFactory","sap/fe/core/services/EnvironmentServiceFactory","sap/fe/core/services/NavigationServiceFactory","sap/fe/core/services/ResourceModelServiceFactory","sap/fe/core/services/RoutingServiceFactory","sap/fe/core/services/ShellServicesFactory","sap/fe/core/services/SideEffectsServiceFactory","sap/fe/core/services/TemplatedViewServiceFactory","sap/fe/core/type/DateTimeWithTimezone","sap/fe/core/type/Email","sap/fe/core/type/FiscalDate","sap/fe/navigation/library","sap/fe/placeholder/library","sap/ui/base/DataType","sap/ui/core/Core","sap/ui/core/library","sap/ui/core/service/ServiceFactoryRegistry","sap/ui/fl/library","sap/ui/mdc/library"],function(e,a,r,i,o,t,s,n,c,l,p,f,d,v,u,y,S,m,g,C,b,F,w,D){"use strict";var E={};var M=s.EnvironmentServiceFactory;const N="sap.fe";E.feNamespace=N;const I="sap.fe.core";E.feCoreNamespace=I;const h="sap.fe.controllerextensions";E.feCextNamespace=h;const A="sap.fe.core.fpm";E.feFpmNamespace=A;const R=C.initLibrary({name:"sap.fe.core",dependencies:["sap.ui.core","sap.fe.navigation","sap.fe.placeholder","sap.ui.fl","sap.ui.mdc","sap.f"],types:["sap.fe.core.CreationMode","sap.fe.core.VariantManagement"],interfaces:[],controls:[],elements:[],version:"1.115.1",noLibraryCSS:true,extensions:{"sap.ui.support":{publicRules:true,internalRules:true},flChangeHandlers:{"sap.fe.core.controls.FilterBar":"sap/ui/mdc/flexibility/FilterBar"}}});R.InvocationGrouping={Isolated:"Isolated",ChangeSet:"ChangeSet"};R.CreationMode={NewPage:"NewPage",Sync:"Sync",Async:"Async",Deferred:"Deferred",Inline:"Inline",CreationRow:"CreationRow",InlineCreationRows:"InlineCreationRows",External:"External"};R.VariantManagement={None:"None",Page:"Page",Control:"Control"};R.Constants={CancelActionDialog:"cancel",ActionExecutionFailed:"actionExecutionFailed",CreationFailed:"creationFailed"};R.ProgrammingModel={Draft:"Draft",Sticky:"Sticky",NonDraft:"NonDraft"};R.DraftStatus={Saving:"Saving",Saved:"Saved",Clear:"Clear"};R.EditMode={Display:"Display",Editable:"Editable"};R.TemplateContentView={Hybrid:"Hybrid",Chart:"Chart",Table:"Table"};let L;(function(e){e["Enabled"]="Enabled";e["Disabled"]="Disabled";e["Auto"]="Auto"})(L||(L={}));E.InitialLoadMode=L;R.InitialLoadMode=L;R.StartupMode={Normal:"Normal",Deeplink:"Deeplink",Create:"Create",AutoCreate:"AutoCreate"};const T=g.createType("sap.fe.core.InitialLoadMode",{defaultValue:R.InitialLoadMode.Auto,isValid:function(a){if(typeof a==="boolean"){e.warning("DEPRECATED: boolean value not allowed for 'initialLoad' manifest setting - supported values are: Disabled|Enabled|Auto")}return a===undefined||a===null||typeof a==="boolean"||R.InitialLoadMode.hasOwnProperty(a)}});T.setNormalizer(function(e){if(!e){return R.InitialLoadMode.Disabled}return e===true?R.InitialLoadMode.Enabled:e});F.register("sap.fe.core.services.TemplatedViewService",new d);F.register("sap.fe.core.services.ResourceModelService",new c);F.register("sap.fe.core.services.CacheHandlerService",new t);F.register("sap.fe.core.services.NavigationService",new n);F.register("sap.fe.core.services.RoutingService",new l);F.register("sap.fe.core.services.SideEffectsService",new f);F.register("sap.fe.core.services.ShellServices",new p);F.register("sap.fe.core.services.EnvironmentService",new M);F.register("sap.fe.core.services.AsyncComponentService",new o);return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/manifestMerger/ChangePageConfiguration-dbg", ["sap/base/Log", "sap/base/util/ObjectPath"], function (Log, ObjectPath) {
  "use strict";

  var _exports = {};
  let pageConfigurationChanges = {};
  /**
   * Apply change method.
   *
   * This method is being called by the FLEX framework in case a manifest change with the change type
   * 'appdescr_fe_changePageConfiguration' was created for the current application. This method is not meant to be
   * called by anyone else but the FLEX framework.
   *
   * @function
   * @name sap.fe.core.manifestMerger#applyChange
   * @param manifest The original manifest.
   * @param change The change content.
   * @returns The changed or unchanged manifest.
   * @private
   */
  function applyChange(manifest, change) {
    const changeContent = change.getContent();
    const pageId = changeContent === null || changeContent === void 0 ? void 0 : changeContent.page;
    const propertyChange = changeContent === null || changeContent === void 0 ? void 0 : changeContent.entityPropertyChange;

    // return unmodified manifest in case change not valid
    if ((propertyChange === null || propertyChange === void 0 ? void 0 : propertyChange.operation) !== "UPSERT" || !(propertyChange !== null && propertyChange !== void 0 && propertyChange.propertyPath) || (propertyChange === null || propertyChange === void 0 ? void 0 : propertyChange.propertyValue) === undefined || propertyChange !== null && propertyChange !== void 0 && propertyChange.propertyPath.startsWith("/")) {
      Log.error("Change content is not a valid");
      return manifest;
    }
    return changeConfiguration(manifest, pageId, propertyChange.propertyPath, propertyChange.propertyValue);
  }

  /**
   * Changes the page configuration of SAP Fiori elements.
   *
   * This method enables you to change the page configuration of SAP Fiori elements.
   *
   * @function
   * @name sap.fe.core.manifestMerger#changeConfiguration
   * @param manifest The original manifest.
   * @param pageId The ID of the page for which the configuration is to be changed.
   * @param path The path in the page settings for which the configuration is to be changed.
   * @param value The new value of the configuration. This could be a plain value like a string, or a Boolean, or a structured object.
   * @param lateChange Indicates that the change was done after application startup (e.g. feature toggle).
   * @returns The changed or unchanged manifest.
   * @private
   */
  _exports.applyChange = applyChange;
  function changeConfiguration(manifest, pageId, path, value, lateChange) {
    const pageSettings = getPageSettings(manifest, pageId);
    if (pageSettings) {
      const propertyPath = retrievePropertyPath(path);
      ObjectPath.set(propertyPath, value, pageSettings);
      if (lateChange) {
        pageConfigurationChanges[pageId] = pageConfigurationChanges[pageId] || [];
        pageConfigurationChanges[pageId].push(path);
      }
    } else {
      Log.error(`No Fiori elements page with ID ${pageId} found in routing targets.`);
    }
    return manifest;
  }

  /**
   * Retrieves an array with the property path parts and consider the controlConfiguration specially.
   *
   * @function
   * @param path The given property path
   * @returns An array with the property path parts.
   * @private
   */
  _exports.changeConfiguration = changeConfiguration;
  function retrievePropertyPath(path) {
    let propertyPath = path.split("/");
    if (propertyPath[0] === "controlConfiguration") {
      let annotationPath = "";
      // the annotation path in the control configuration has to stay together. For now rely on the fact the @ is in the last part
      for (let i = 1; i < propertyPath.length; i++) {
        annotationPath += (i > 1 ? "/" : "") + propertyPath[i];
        if (annotationPath.indexOf("@") > -1) {
          propertyPath = ["controlConfiguration", annotationPath].concat(propertyPath.slice(i + 1));
          break;
        }
      }
    }
    return propertyPath;
  }

  /**
   * Search the page settings in the manifest for a given page ID.
   *
   * @function
   * @name sap.fe.core.manifestMerger#getPageSettings
   * @param manifest The manifest where the search is carried out to find the page settings.
   * @param pageId The ID of the page.
   * @returns The page settings for the page ID or undefined if not found.
   * @private
   */
  function getPageSettings(manifest, pageId) {
    var _manifest$sapUi, _manifest$sapUi$routi;
    let pageSettings;
    const targets = ((_manifest$sapUi = manifest["sap.ui5"]) === null || _manifest$sapUi === void 0 ? void 0 : (_manifest$sapUi$routi = _manifest$sapUi.routing) === null || _manifest$sapUi$routi === void 0 ? void 0 : _manifest$sapUi$routi.targets) ?? {};
    for (const p in targets) {
      if (targets[p].id === pageId && targets[p].name.startsWith("sap.fe.templates.")) {
        var _targets$p$options;
        pageSettings = ((_targets$p$options = targets[p].options) === null || _targets$p$options === void 0 ? void 0 : _targets$p$options.settings) ?? {};
        break;
      }
    }
    return pageSettings;
  }

  /**
   * Applies page configuration changes to view data object.
   *
   * UI5 routing clones the manifest settings during the app init, even before the router was initialized.
   * As we allow changing the manifest in the async initializeFeatureToggle hook, the view data might not fit the current
   * manifest settings, therefore (re)applying the registered page configuration changes to the view data object.
   *
   * @param manifest The current page manifest settings.
   * @param viewData The current viewData settings.
   * @param appComponent The app component instance.
   * @param pageId The ID of the page.
   * @returns The updated viewData settings.
   */
  function applyPageConfigurationChanges(manifest, viewData, appComponent, pageId) {
    viewData = viewData ?? {};
    const pageChanges = pageConfigurationChanges[pageId] || [];
    for (const path of pageChanges) {
      const propertyPath = retrievePropertyPath(path);
      const manifestValue = ObjectPath.get(propertyPath, manifest);
      ObjectPath.set(propertyPath, manifestValue, viewData);
    }
    return viewData;
  }

  /**
   * Cleans all registered page configuration changes.
   *
   */
  _exports.applyPageConfigurationChanges = applyPageConfigurationChanges;
  function cleanPageConfigurationChanges() {
    pageConfigurationChanges = {};
  }
  _exports.cleanPageConfigurationChanges = cleanPageConfigurationChanges;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/manifestMerger/ChangePageConfiguration", ["sap/base/Log","sap/base/util/ObjectPath"],function(t,n){"use strict";var o={};let e={};function i(n,o){const e=o.getContent();const i=e===null||e===void 0?void 0:e.page;const a=e===null||e===void 0?void 0:e.entityPropertyChange;if((a===null||a===void 0?void 0:a.operation)!=="UPSERT"||!(a!==null&&a!==void 0&&a.propertyPath)||(a===null||a===void 0?void 0:a.propertyValue)===undefined||a!==null&&a!==void 0&&a.propertyPath.startsWith("/")){t.error("Change content is not a valid");return n}return r(n,i,a.propertyPath,a.propertyValue)}o.applyChange=i;function r(o,i,r,l,u){const c=s(o,i);if(c){const t=a(r);n.set(t,l,c);if(u){e[i]=e[i]||[];e[i].push(r)}}else{t.error(`No Fiori elements page with ID ${i} found in routing targets.`)}return o}o.changeConfiguration=r;function a(t){let n=t.split("/");if(n[0]==="controlConfiguration"){let t="";for(let o=1;o<n.length;o++){t+=(o>1?"/":"")+n[o];if(t.indexOf("@")>-1){n=["controlConfiguration",t].concat(n.slice(o+1));break}}}return n}function s(t,n){var o,e;let i;const r=((o=t["sap.ui5"])===null||o===void 0?void 0:(e=o.routing)===null||e===void 0?void 0:e.targets)??{};for(const t in r){if(r[t].id===n&&r[t].name.startsWith("sap.fe.templates.")){var a;i=((a=r[t].options)===null||a===void 0?void 0:a.settings)??{};break}}return i}function l(t,o,i,r){o=o??{};const s=e[r]||[];for(const e of s){const i=a(e);const r=n.get(i,t);n.set(i,r,o)}return o}o.applyPageConfigurationChanges=l;function u(){e={}}o.cleanPageConfigurationChanges=u;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/operationsHelper-dbg", ["sap/m/MessageBox", "sap/ui/core/message/Message", "sap/ui/model/json/JSONModel", "./controllerextensions/dialog/OperationsDialog.block", "./controllerextensions/messageHandler/messageHandling", "./formatters/TableFormatterTypes"], function (MessageBox, Message, JSONModel, OperationsDialogBlock, messageHandling, TableFormatterTypes) {
  "use strict";

  var MessageType = TableFormatterTypes.MessageType;
  function renderMessageView(mParameters, resourceModel, messageHandler, aMessages, strictHandlingUtilities, isMultiContext412, resolve, sGroupId, isUnboundAction) {
    const sActionName = mParameters.label;
    const oModel = mParameters.model;
    const strictHandlingPromises = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingPromises;
    let sMessage;
    let sCancelButtonTxt = resourceModel.getText("C_COMMON_DIALOG_CANCEL");
    let warningMessageText = "";
    let genericChangesetMessage = "";
    warningMessageText = mParameters.bGrouped ? resourceModel.getText("C_COMMON_DIALOG_CANCEL_MESSAGE_TEXT", [sActionName]) : resourceModel.getText("C_COMMON_DIALOG_SKIP_SINGLE_MESSAGE_TEXT");
    if (aMessages.length === 1) {
      const messageText = aMessages[0].getMessage();
      const identifierText = aMessages[0].getAdditionalText();
      genericChangesetMessage = resourceModel.getText("C_COMMON_DIALOG_CANCEL_SINGLE_MESSAGE_TEXT");
      if (!isMultiContext412) {
        sMessage = `${messageText}\n${resourceModel.getText("PROCEED")}`;
      } else if (identifierText !== undefined && identifierText !== "") {
        sCancelButtonTxt = mParameters.bGrouped ? sCancelButtonTxt : resourceModel.getText("C_COMMON_DIALOG_SKIP");
        const sHeaderInfoTypeName = mParameters.control.getParent().getTableDefinition().headerInfoTypeName;
        if (sHeaderInfoTypeName) {
          sMessage = `${sHeaderInfoTypeName.toString()} ${identifierText}: ${messageText}\n\n${warningMessageText}`;
        } else {
          sMessage = `${identifierText}: ${messageText}\n\n${warningMessageText}`;
        }
      } else {
        sCancelButtonTxt = mParameters.bGrouped ? sCancelButtonTxt : resourceModel.getText("C_COMMON_DIALOG_SKIP");
        sMessage = `${messageText}\n\n${warningMessageText}`;
      }
      if (isMultiContext412) {
        sMessage = `${genericChangesetMessage}\n\n${sMessage}`;
      }
      MessageBox.warning(sMessage, {
        title: resourceModel.getText("WARNING"),
        actions: [sActionName, sCancelButtonTxt],
        emphasizedAction: sActionName,
        onClose: function (sAction) {
          if (sAction === sActionName) {
            if (isUnboundAction) {
              // condition is true for unbound as well as static actions
              resolve(true);
              oModel.submitBatch(sGroupId);
              if (mParameters.requestSideEffects) {
                mParameters.requestSideEffects();
              }
            } else if (!isMultiContext412) {
              // condition true when mulitple contexts are selected but only one strict handling warning is recieved
              strictHandlingPromises[0].resolve(true);
              oModel.submitBatch(strictHandlingPromises[0].groupId);
              if (strictHandlingPromises[0].requestSideEffects) {
                strictHandlingPromises[0].requestSideEffects();
              }
            } else {
              strictHandlingPromises.forEach(function (sHPromise) {
                sHPromise.resolve(true);
                oModel.submitBatch(sHPromise.groupId);
                if (sHPromise.requestSideEffects) {
                  sHPromise.requestSideEffects();
                }
              });
              const strictHandlingFails = strictHandlingUtilities === null || strictHandlingUtilities === void 0 ? void 0 : strictHandlingUtilities.strictHandlingTransitionFails;
              if (strictHandlingFails.length > 0) {
                messageHandler === null || messageHandler === void 0 ? void 0 : messageHandler.removeTransitionMessages();
              }
            }
            if (strictHandlingUtilities) {
              strictHandlingUtilities.is412Executed = true;
            }
          } else {
            if (strictHandlingUtilities) {
              strictHandlingUtilities.is412Executed = false;
            }
            if (isUnboundAction) {
              resolve(false);
            } else if (!isMultiContext412) {
              strictHandlingPromises[0].resolve(false);
            } else {
              strictHandlingPromises.forEach(function (sHPromise) {
                sHPromise.resolve(false);
              });
            }
            if (mParameters.bGrouped) {
              MessageBox.information(resourceModel.getText("M_CHANGESET_CANCEL_MESSAGES"), {
                contentWidth: "150px"
              });
            }
          }
          if (strictHandlingUtilities) {
            strictHandlingUtilities.strictHandlingWarningMessages = [];
          }
        }
      });
    } else if (aMessages.length > 1) {
      if (isMultiContext412) {
        sCancelButtonTxt = mParameters.bGrouped ? sCancelButtonTxt : resourceModel.getText("C_COMMON_DIALOG_SKIP");
        const sWarningMessage = mParameters.bGrouped ? resourceModel.getText("C_COMMON_DIALOG_CANCEL_MESSAGES_WARNING") : resourceModel.getText("C_COMMON_DIALOG_SKIP_MESSAGES_WARNING");
        const sWarningDesc = mParameters.bGrouped ? resourceModel.getText("C_COMMON_DIALOG_CANCEL_MESSAGES_TEXT", [sActionName]) : resourceModel.getText("C_COMMON_DIALOG_SKIP_MESSAGES_TEXT", [sActionName]);
        const genericMessage = new Message({
          message: sWarningMessage,
          type: MessageType.Warning,
          target: undefined,
          persistent: true,
          description: sWarningDesc
        });
        aMessages = [genericMessage].concat(aMessages);
      }
      const oMessageDialogModel = new JSONModel();
      oMessageDialogModel.setData(aMessages);
      const bStrictHandlingFlow = true;
      const oMessageObject = messageHandling.prepareMessageViewForDialog(oMessageDialogModel, bStrictHandlingFlow, isMultiContext412);
      const operationsDialog = new OperationsDialogBlock({
        messageObject: oMessageObject,
        isMultiContext412: isMultiContext412,
        isGrouped: mParameters === null || mParameters === void 0 ? void 0 : mParameters.bGrouped,
        resolve: resolve,
        model: oModel,
        groupId: sGroupId,
        actionName: sActionName,
        strictHandlingUtilities: strictHandlingUtilities,
        strictHandlingPromises: strictHandlingPromises,
        messageHandler: messageHandler,
        messageDialogModel: oMessageDialogModel,
        cancelButtonTxt: sCancelButtonTxt,
        showMessageInfo: function showMessageInfo() {
          MessageBox.information(resourceModel.getText("M_CHANGESET_CANCEL_MESSAGES"), {
            contentWidth: "150px"
          });
        }
      });
      operationsDialog.open();
    }
  }
  async function fnOnStrictHandlingFailed(sGroupId, mParameters, resourceModel, currentContextIndex, oContext, iContextLength, messageHandler, strictHandlingUtilities, a412Messages) {
    let shPromiseParams;
    if (currentContextIndex === null && iContextLength === null || currentContextIndex === 1 && iContextLength === 1) {
      return new Promise(function (resolve) {
        operationsHelper.renderMessageView(mParameters, resourceModel, messageHandler, a412Messages, strictHandlingUtilities, false, resolve, sGroupId, true);
      });
    }
    if (a412Messages.length) {
      var _mParameters$control, _mParameters$control$;
      const strictHandlingPromise = new Promise(function (resolve) {
        shPromiseParams = {
          requestSideEffects: mParameters.requestSideEffects,
          resolve: resolve,
          groupId: sGroupId
        };
      });
      strictHandlingUtilities.strictHandlingPromises.push(shPromiseParams);
      // copy existing 412 warning messages
      const aStrictHandlingWarningMessages = strictHandlingUtilities.strictHandlingWarningMessages;
      const sColumn = (_mParameters$control = mParameters.control) === null || _mParameters$control === void 0 ? void 0 : (_mParameters$control$ = _mParameters$control.getParent()) === null || _mParameters$control$ === void 0 ? void 0 : _mParameters$control$.getIdentifierColumn();
      let sValue = "";
      if (sColumn && iContextLength && iContextLength > 1) {
        sValue = oContext && oContext.getObject(sColumn);
      }

      // set type and subtitle for all warning messages
      a412Messages.forEach(function (msg) {
        msg.setType("Warning");
        msg.setAdditionalText(sValue);
        aStrictHandlingWarningMessages.push(msg);
      });
      strictHandlingUtilities.strictHandlingWarningMessages = aStrictHandlingWarningMessages;
      mParameters.internalOperationsPromiseResolve();
      return strictHandlingPromise;
    }
  }
  const operationsHelper = {
    renderMessageView: renderMessageView,
    fnOnStrictHandlingFailed: fnOnStrictHandlingFailed
  };
  return operationsHelper;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/operationsHelper", ["sap/m/MessageBox","sap/ui/core/message/Message","sap/ui/model/json/JSONModel","./controllerextensions/dialog/OperationsDialog.block","./controllerextensions/messageHandler/messageHandling","./formatters/TableFormatterTypes"],function(e,t,n,s,i,o){"use strict";var r=o.MessageType;function l(o,l,a,c,d,g,f,u,_){const E=o.label;const M=o.model;const S=d===null||d===void 0?void 0:d.strictHandlingPromises;let C;let O=l.getText("C_COMMON_DIALOG_CANCEL");let T="";let G="";T=o.bGrouped?l.getText("C_COMMON_DIALOG_CANCEL_MESSAGE_TEXT",[E]):l.getText("C_COMMON_DIALOG_SKIP_SINGLE_MESSAGE_TEXT");if(c.length===1){const t=c[0].getMessage();const n=c[0].getAdditionalText();G=l.getText("C_COMMON_DIALOG_CANCEL_SINGLE_MESSAGE_TEXT");if(!g){C=`${t}\n${l.getText("PROCEED")}`}else if(n!==undefined&&n!==""){O=o.bGrouped?O:l.getText("C_COMMON_DIALOG_SKIP");const e=o.control.getParent().getTableDefinition().headerInfoTypeName;if(e){C=`${e.toString()} ${n}: ${t}\n\n${T}`}else{C=`${n}: ${t}\n\n${T}`}}else{O=o.bGrouped?O:l.getText("C_COMMON_DIALOG_SKIP");C=`${t}\n\n${T}`}if(g){C=`${G}\n\n${C}`}e.warning(C,{title:l.getText("WARNING"),actions:[E,O],emphasizedAction:E,onClose:function(t){if(t===E){if(_){f(true);M.submitBatch(u);if(o.requestSideEffects){o.requestSideEffects()}}else if(!g){S[0].resolve(true);M.submitBatch(S[0].groupId);if(S[0].requestSideEffects){S[0].requestSideEffects()}}else{S.forEach(function(e){e.resolve(true);M.submitBatch(e.groupId);if(e.requestSideEffects){e.requestSideEffects()}});const e=d===null||d===void 0?void 0:d.strictHandlingTransitionFails;if(e.length>0){a===null||a===void 0?void 0:a.removeTransitionMessages()}}if(d){d.is412Executed=true}}else{if(d){d.is412Executed=false}if(_){f(false)}else if(!g){S[0].resolve(false)}else{S.forEach(function(e){e.resolve(false)})}if(o.bGrouped){e.information(l.getText("M_CHANGESET_CANCEL_MESSAGES"),{contentWidth:"150px"})}}if(d){d.strictHandlingWarningMessages=[]}}})}else if(c.length>1){if(g){O=o.bGrouped?O:l.getText("C_COMMON_DIALOG_SKIP");const e=o.bGrouped?l.getText("C_COMMON_DIALOG_CANCEL_MESSAGES_WARNING"):l.getText("C_COMMON_DIALOG_SKIP_MESSAGES_WARNING");const n=o.bGrouped?l.getText("C_COMMON_DIALOG_CANCEL_MESSAGES_TEXT",[E]):l.getText("C_COMMON_DIALOG_SKIP_MESSAGES_TEXT",[E]);const s=new t({message:e,type:r.Warning,target:undefined,persistent:true,description:n});c=[s].concat(c)}const _=new n;_.setData(c);const C=true;const T=i.prepareMessageViewForDialog(_,C,g);const G=new s({messageObject:T,isMultiContext412:g,isGrouped:o===null||o===void 0?void 0:o.bGrouped,resolve:f,model:M,groupId:u,actionName:E,strictHandlingUtilities:d,strictHandlingPromises:S,messageHandler:a,messageDialogModel:_,cancelButtonTxt:O,showMessageInfo:function t(){e.information(l.getText("M_CHANGESET_CANCEL_MESSAGES"),{contentWidth:"150px"})}});G.open()}}async function a(e,t,n,s,i,o,r,l,a){let d;if(s===null&&o===null||s===1&&o===1){return new Promise(function(s){c.renderMessageView(t,n,r,a,l,false,s,e,true)})}if(a.length){var g,f;const n=new Promise(function(n){d={requestSideEffects:t.requestSideEffects,resolve:n,groupId:e}});l.strictHandlingPromises.push(d);const s=l.strictHandlingWarningMessages;const r=(g=t.control)===null||g===void 0?void 0:(f=g.getParent())===null||f===void 0?void 0:f.getIdentifierColumn();let c="";if(r&&o&&o>1){c=i&&i.getObject(r)}a.forEach(function(e){e.setType("Warning");e.setAdditionalText(c);s.push(e)});l.strictHandlingWarningMessages=s;t.internalOperationsPromiseResolve();return n}}const c={renderMessageView:l,fnOnStrictHandlingFailed:a};return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/Fcl-dbg.controller", ["sap/base/Log", "sap/f/FlexibleColumnLayoutSemanticHelper", "sap/f/library", "sap/fe/core/controllerextensions/ViewState", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/KeepAliveHelper", "sap/m/Link", "sap/m/MessageBox", "sap/m/MessagePage", "./RootViewBaseController"], function (Log, FlexibleColumnLayoutSemanticHelper, fLibrary, ViewState, ClassSupport, KeepAliveHelper, Link, MessageBox, MessagePage, BaseController) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var Icon = MessageBox.Icon;
  var Action = MessageBox.Action;
  var usingExtension = ClassSupport.usingExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  const LayoutType = fLibrary.LayoutType;
  const CONSTANTS = {
    page: {
      names: ["BeginColumn", "MidColumn", "EndColumn"],
      currentGetter: {
        prefix: "getCurrent",
        suffix: "Page"
      },
      getter: {
        prefix: "get",
        suffix: "Pages"
      }
    }
  };
  const _getViewFromContainer = function (oContainer) {
    if (oContainer.isA("sap.ui.core.ComponentContainer")) {
      return oContainer.getComponentInstance().getRootControl();
    } else {
      return oContainer;
    }
  };
  /**
   * Base controller class for your own root view with an sap.f.FlexibleColumnLayout control.
   *
   * By using or extending this controller, you can use your own root view with the sap.fe.core.AppComponent and
   * you can make use of SAP Fiori elements pages and SAP Fiori elements building blocks.
   *
   * @hideconstructor
   * @public
   * @since 1.110.0
   */
  let FclController = (_dec = defineUI5Class("sap.fe.core.rootView.Fcl"), _dec2 = usingExtension(ViewState.override({
    applyInitialStateOnly: function () {
      return false;
    },
    adaptBindingRefreshControls: function (aControls) {
      this.getView().getController()._getAllVisibleViews().forEach(function (oChildView) {
        const pChildView = Promise.resolve(oChildView);
        aControls.push(pChildView);
      });
    },
    adaptStateControls: function (aStateControls) {
      this.getView().getController()._getAllVisibleViews().forEach(function (oChildView) {
        const pChildView = Promise.resolve(oChildView);
        aStateControls.push(pChildView);
      });
    },
    onRestore: function () {
      const fclController = this.getView().getController();
      const appContentContainer = fclController.getAppContentContainer();
      const internalModel = appContentContainer.getModel("internal");
      const pages = internalModel.getProperty("/pages");
      for (const componentId in pages) {
        internalModel.setProperty(`/pages/${componentId}/restoreStatus`, "pending");
      }
      fclController.onContainerReady();
    },
    onSuspend: function () {
      const oFCLController = this.getView().getController();
      const oFCLControl = oFCLController.getFclControl();
      const aBeginColumnPages = oFCLControl.getBeginColumnPages() || [];
      const aMidColumnPages = oFCLControl.getMidColumnPages() || [];
      const aEndColumnPages = oFCLControl.getEndColumnPages() || [];
      const aPages = [].concat(aBeginColumnPages, aMidColumnPages, aEndColumnPages);
      aPages.forEach(function (oPage) {
        const oTargetView = _getViewFromContainer(oPage);
        const oController = oTargetView && oTargetView.getController();
        if (oController && oController.viewState && oController.viewState.onSuspend) {
          oController.viewState.onSuspend();
        }
      });
    }
  })), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseController) {
    _inheritsLoose(FclController, _BaseController);
    function FclController() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseController.call(this, ...args) || this;
      _initializerDefineProperty(_this, "viewState", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = FclController.prototype;
    /**
     * @private
     * @name sap.fe.core.rootView.Fcl.getMetadata
     * @function
     */
    _proto.onInit = function onInit() {
      _BaseController.prototype.onInit.call(this);
      this._internalInit();
    };
    _proto.manageDataReceived = function manageDataReceived(event) {
      if (event.getParameter("error")) {
        var _targetedView$getBind;
        const path = event.getParameter("path"),
          targetedView = this._getAllVisibleViews().find(view => {
            var _view$getBindingConte;
            return ((_view$getBindingConte = view.getBindingContext()) === null || _view$getBindingConte === void 0 ? void 0 : _view$getBindingConte.getPath()) === path;
          });
        // We need to manage error when the request is related to a form  into an ObjectPage
        if (path && targetedView !== null && targetedView !== void 0 && (_targetedView$getBind = targetedView.getBindingContext()) !== null && _targetedView$getBind !== void 0 && _targetedView$getBind.isKeepAlive()) {
          targetedView.getController()._routing.onDataReceived(event);
        }
      }
    };
    _proto.attachRouteMatchers = function attachRouteMatchers() {
      this.getRouter().attachBeforeRouteMatched(this._getViewForNavigatedRowsComputation, this);
      _BaseController.prototype.attachRouteMatchers.call(this);
      this._internalInit();
      this.getRouter().attachBeforeRouteMatched(this.onBeforeRouteMatched, this);
      this.getRouter().attachRouteMatched(this.onRouteMatched, this);
      this.getFclControl().attachStateChange(this._saveLayout, this);
    };
    _proto._internalInit = function _internalInit() {
      var _oRoutingConfig$confi, _oRoutingConfig$confi2;
      if (this._oRouterProxy) {
        return; // Already initialized
      }

      this.sCurrentRouteName = "";
      this.sCurrentArguments = {};
      this.SQUERYKEYNAME = "?query";
      const oAppComponent = this.getAppComponent();
      const oDataModel = this.getAppComponent().getModel();
      oDataModel === null || oDataModel === void 0 ? void 0 : oDataModel.attachEvent("dataReceived", this.manageDataReceived.bind(this));
      this._oRouterProxy = oAppComponent.getRouterProxy();

      // Get FCL configuration in the manifest
      this._oFCLConfig = {
        maxColumnsCount: 3
      };
      const oRoutingConfig = oAppComponent.getManifest()["sap.ui5"].routing;
      if (oRoutingConfig !== null && oRoutingConfig !== void 0 && (_oRoutingConfig$confi = oRoutingConfig.config) !== null && _oRoutingConfig$confi !== void 0 && _oRoutingConfig$confi.flexibleColumnLayout) {
        const oFCLManifestConfig = oRoutingConfig.config.flexibleColumnLayout;

        // Default layout for 2 columns
        if (oFCLManifestConfig.defaultTwoColumnLayoutType) {
          this._oFCLConfig.defaultTwoColumnLayoutType = oFCLManifestConfig.defaultTwoColumnLayoutType;
        }

        // Default layout for 3 columns
        if (oFCLManifestConfig.defaultThreeColumnLayoutType) {
          this._oFCLConfig.defaultThreeColumnLayoutType = oFCLManifestConfig.defaultThreeColumnLayoutType;
        }

        // Limit FCL to 2 columns ?
        if (oFCLManifestConfig.limitFCLToTwoColumns === true) {
          this._oFCLConfig.maxColumnsCount = 2;
        }
      }
      if (oRoutingConfig !== null && oRoutingConfig !== void 0 && (_oRoutingConfig$confi2 = oRoutingConfig.config) !== null && _oRoutingConfig$confi2 !== void 0 && _oRoutingConfig$confi2.controlAggregation) {
        this._oFCLConfig.defaultControlAggregation = oRoutingConfig.config.controlAggregation;
      }
      this._initializeTargetAggregation(oAppComponent);
      this._initializeRoutesInformation(oAppComponent);
      this.getFclControl().attachStateChange(this.onStateChanged, this);
      this.getFclControl().attachAfterEndColumnNavigate(this.onStateChanged, this);
    };
    _proto.getFclControl = function getFclControl() {
      return this.getAppContentContainer();
    };
    _proto._saveLayout = function _saveLayout(oEvent) {
      this.sPreviousLayout = oEvent.getParameters().layout;
    }

    /**
     * Get the additional view (on top of the visible views), to be able to compute the latest table navigated rows of
     * the most right visible view after a nav back or column fullscreen.
     *
     * @function
     * @name sap.fe.core.rootView.Fcl.controller#_getRightMostViewBeforeRouteMatched
     * @memberof sap.fe.core.rootView.Fcl.controller
     */;
    _proto._getViewForNavigatedRowsComputation = function _getViewForNavigatedRowsComputation() {
      const aAllVisibleViewsBeforeRouteMatched = this._getAllVisibleViews(this.sPreviousLayout);
      const oRightMostViewBeforeRouteMatched = aAllVisibleViewsBeforeRouteMatched[aAllVisibleViewsBeforeRouteMatched.length - 1];
      let oRightMostView;
      this.getRouter().attachEventOnce("routeMatched", oEvent => {
        oRightMostView = _getViewFromContainer(oEvent.getParameter("views")[oEvent.getParameter("views").length - 1]);
        if (oRightMostViewBeforeRouteMatched) {
          // Navigation forward from L2 to view level L3 (FullScreenLayout):
          if (oRightMostView.getViewData() && oRightMostView.getViewData().viewLevel === this._oFCLConfig.maxColumnsCount) {
            this.oAdditionalViewForNavRowsComputation = oRightMostView;
          }
          // Navigations backward from L3 down to L2, L1, L0 (ThreeColumn layout):
          if (oRightMostView.getViewData() && oRightMostViewBeforeRouteMatched.getViewData() && oRightMostViewBeforeRouteMatched.getViewData().viewLevel < this._oFCLConfig.maxColumnsCount && oRightMostViewBeforeRouteMatched.getViewData() && oRightMostViewBeforeRouteMatched.getViewData().viewLevel > oRightMostView.getViewData().viewLevel && oRightMostView !== oRightMostViewBeforeRouteMatched) {
            this.oAdditionalViewForNavRowsComputation = oRightMostViewBeforeRouteMatched;
          }
        }
      });
    };
    _proto.getViewForNavigatedRowsComputation = function getViewForNavigatedRowsComputation() {
      return this.oAdditionalViewForNavRowsComputation;
    };
    _proto.onExit = function onExit() {
      this.getRouter().detachRouteMatched(this.onRouteMatched, this);
      this.getRouter().detachBeforeRouteMatched(this.onBeforeRouteMatched, this);
      this.getFclControl().detachStateChange(this.onStateChanged, this);
      this.getFclControl().detachAfterEndColumnNavigate(this.onStateChanged, this);
      this._oTargetsAggregation = null;
      this._oTargetsFromRoutePattern = null;
      BaseController.prototype.onExit.bind(this)();
    }

    /**
     * Check if the FCL component is enabled.
     *
     * @function
     * @name sap.fe.core.rootView.Fcl.controller#isFclEnabled
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @returns `true` since we are in FCL scenario
     * @ui5-restricted
     * @final
     */;
    _proto.isFclEnabled = function isFclEnabled() {
      return true;
    }

    /**
     * Method that creates a new Page to display the IllustratedMessage containing the current error.
     *
     * @param sErrorMessage
     * @param mParameters
     * @alias sap.fe.core.rootView.Fcl.controller#displayErrorPage
     * @returns A promise that creates a Page to display the error
     * @public
     */;
    _proto.displayErrorPage = function displayErrorPage(sErrorMessage, mParameters) {
      const oFCLControl = this.getFclControl();
      if (this._oFCLConfig && mParameters.FCLLevel >= this._oFCLConfig.maxColumnsCount) {
        mParameters.FCLLevel = this._oFCLConfig.maxColumnsCount - 1;
      }
      if (!this.aMessagePages) {
        this.aMessagePages = [null, null, null];
      }
      let oMessagePage = this.aMessagePages[mParameters.FCLLevel];
      if (!oMessagePage) {
        oMessagePage = new MessagePage({
          showHeader: false,
          icon: "sap-icon://message-error"
        });
        this.aMessagePages[mParameters.FCLLevel] = oMessagePage;
        switch (mParameters.FCLLevel) {
          case 0:
            oFCLControl.addBeginColumnPage(oMessagePage);
            break;
          case 1:
            oFCLControl.addMidColumnPage(oMessagePage);
            break;
          default:
            oFCLControl.addEndColumnPage(oMessagePage);
        }
      }
      oMessagePage.setText(sErrorMessage);
      if (mParameters.technicalMessage) {
        oMessagePage.setCustomDescription(new Link({
          text: mParameters.description || mParameters.technicalMessage,
          press: function () {
            MessageBox.show(mParameters.technicalMessage, {
              icon: Icon.ERROR,
              title: mParameters.title,
              actions: [Action.OK],
              defaultAction: Action.OK,
              details: mParameters.technicalDetails || "",
              contentWidth: "60%"
            });
          }
        }));
      } else {
        oMessagePage.setDescription(mParameters.description || "");
      }
      oFCLControl.to(oMessagePage.getId());
      return Promise.resolve(true);
    }

    /**
     * Initialize the object _oTargetsAggregation that defines for each route the relevant aggregation and pattern.
     *
     * @name sap.fe.core.rootView.Fcl.controller#_initializeTargetAggregation
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @function
     * @param [oAppComponent] Reference to the AppComponent
     */;
    _proto._initializeTargetAggregation = function _initializeTargetAggregation(oAppComponent) {
      const oManifest = oAppComponent.getManifest(),
        oTargets = oManifest["sap.ui5"].routing ? oManifest["sap.ui5"].routing.targets : null;
      this._oTargetsAggregation = {};
      if (oTargets) {
        Object.keys(oTargets).forEach(sTargetName => {
          const oTarget = oTargets[sTargetName];
          if (oTarget.controlAggregation) {
            this._oTargetsAggregation[sTargetName] = {
              aggregation: oTarget.controlAggregation,
              pattern: oTarget.contextPattern
            };
          } else {
            this._oTargetsAggregation[sTargetName] = {
              aggregation: "page",
              pattern: null
            };
          }
        });
      }
    }

    /**
     * Initializes the mapping between a route (identifed as its pattern) and the corresponding targets
     *
     * @name sap.fe.core.rootView.Fcl.controller#_initializeRoutesInformation
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @function
     * @param oAppComponent ref to the AppComponent
     */;
    _proto._initializeRoutesInformation = function _initializeRoutesInformation(oAppComponent) {
      const oManifest = oAppComponent.getManifest(),
        aRoutes = oManifest["sap.ui5"].routing ? oManifest["sap.ui5"].routing.routes : null;
      this._oTargetsFromRoutePattern = {};
      if (aRoutes) {
        aRoutes.forEach(route => {
          this._oTargetsFromRoutePattern[route.pattern] = route.target;
        });
      }
    };
    _proto.getCurrentArgument = function getCurrentArgument() {
      return this.sCurrentArguments;
    };
    _proto.getCurrentRouteName = function getCurrentRouteName() {
      return this.sCurrentRouteName;
    }

    /**
     * Get FE FCL constant.
     *
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @returns The constants
     */;
    _proto.getConstants = function getConstants() {
      return CONSTANTS;
    }

    /**
     * Getter for oTargetsAggregation array.
     *
     * @name sap.fe.core.rootView.Fcl.controller#getTargetAggregation
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @function
     * @returns The _oTargetsAggregation array
     * @ui5-restricted
     */;
    _proto.getTargetAggregation = function getTargetAggregation() {
      return this._oTargetsAggregation;
    }

    /**
     * Function triggered by the router RouteMatched event.
     *
     * @name sap.fe.core.rootView.Fcl.controller#onRouteMatched
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @param oEvent
     */;
    _proto.onRouteMatched = function onRouteMatched(oEvent) {
      const sRouteName = oEvent.getParameter("name");

      // Save the current/previous routes and arguments
      this.sCurrentRouteName = sRouteName;
      this.sCurrentArguments = oEvent.getParameter("arguments");
    }

    /**
     * This function is triggering the table scroll to the navigated row after each layout change.
     *
     * @name sap.fe.core.rootView.Fcl.controller#scrollToLastSelectedItem
     * @memberof sap.fe.core.rootView.Fcl.controller
     */;
    _proto._scrollTablesToLastNavigatedItems = function _scrollTablesToLastNavigatedItems() {
      const aViews = this._getAllVisibleViews();
      //The scrolls are triggered only if the layout is with several columns or when switching the mostRight column in full screen
      if (aViews.length > 1 || aViews[0].getViewData().viewLevel < this._oFCLConfig.maxColumnsCount) {
        let sCurrentViewPath;
        const oAdditionalView = this.getViewForNavigatedRowsComputation();
        if (oAdditionalView && aViews.indexOf(oAdditionalView) === -1) {
          aViews.push(oAdditionalView);
        }
        for (let index = aViews.length - 1; index > 0; index--) {
          const oView = aViews[index],
            oPreviousView = aViews[index - 1];
          if (oView.getBindingContext()) {
            sCurrentViewPath = oView.getBindingContext().getPath();
            oPreviousView.getController()._scrollTablesToRow(sCurrentViewPath);
          }
        }
      }
    }

    /**
     * Function triggered by the FCL StateChanged event.
     *
     * @name sap.fe.core.rootView.Fcl.controller#onStateChanged
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @param oEvent
     */;
    _proto.onStateChanged = function onStateChanged(oEvent) {
      const bIsNavigationArrow = oEvent.getParameter("isNavigationArrow");
      if (this.sCurrentArguments !== undefined) {
        if (!this.sCurrentArguments[this.SQUERYKEYNAME]) {
          this.sCurrentArguments[this.SQUERYKEYNAME] = {};
        }
        this.sCurrentArguments[this.SQUERYKEYNAME].layout = oEvent.getParameter("layout");
      }
      this._forceModelContextChangeOnBreadCrumbs(oEvent);

      // Replace the URL with the new layout if a navigation arrow was used
      if (bIsNavigationArrow) {
        this._oRouterProxy.navTo(this.sCurrentRouteName, this.sCurrentArguments);
      }
      const oView = this.getRightmostView();
      if (oView) {
        this._computeTitleHierarchy(oView);
      }
    }

    /**
     * Function to fire ModelContextChange event on all breadcrumbs ( on each ObjectPages).
     *
     * @name sap.fe.core.rootView.Fcl.controller#_forceModelContextChangeOnBreadCrumbs
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @param oEvent
     */;
    _proto._forceModelContextChangeOnBreadCrumbs = function _forceModelContextChangeOnBreadCrumbs(oEvent) {
      //force modelcontextchange on ObjectPages to refresh the breadcrumbs link hrefs
      const oFcl = oEvent.getSource();
      let oPages = [];
      oPages = oPages.concat(oFcl.getBeginColumnPages()).concat(oFcl.getMidColumnPages()).concat(oFcl.getEndColumnPages());
      oPages.forEach(function (oPage) {
        const oView = _getViewFromContainer(oPage);
        const oBreadCrumbs = oView.byId && oView.byId("breadcrumbs");
        if (oBreadCrumbs) {
          oBreadCrumbs.fireModelContextChange();
        }
      });
    }

    /**
     * Function triggered to update the Share button Visibility.
     *
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @param viewColumn Name of the current column ("beginColumn", "midColumn", "endColumn")
     * @param sLayout The current layout used by the FCL
     * @returns The share button visibility
     */;
    _proto._updateShareButtonVisibility = function _updateShareButtonVisibility(viewColumn, sLayout) {
      let bShowShareIcon;
      switch (sLayout) {
        case "OneColumn":
          bShowShareIcon = viewColumn === "beginColumn";
          break;
        case "MidColumnFullScreen":
        case "ThreeColumnsBeginExpandedEndHidden":
        case "ThreeColumnsMidExpandedEndHidden":
        case "TwoColumnsBeginExpanded":
        case "TwoColumnsMidExpanded":
          bShowShareIcon = viewColumn === "midColumn";
          break;
        case "EndColumnFullScreen":
        case "ThreeColumnsEndExpanded":
        case "ThreeColumnsMidExpanded":
          bShowShareIcon = viewColumn === "endColumn";
          break;
        default:
          bShowShareIcon = false;
      }
      return bShowShareIcon;
    };
    _proto._updateEditButtonVisiblity = function _updateEditButtonVisiblity(viewColumn, sLayout) {
      let bEditButtonVisible = true;
      switch (viewColumn) {
        case "midColumn":
          switch (sLayout) {
            case "TwoColumnsMidExpanded":
            case "ThreeColumnsMidExpanded":
            case "ThreeColumnsEndExpanded":
              bEditButtonVisible = false;
              break;
          }
          break;
        case "endColumn":
          switch (sLayout) {
            case "ThreeColumnsMidExpanded":
            case "ThreeColumnsEndExpanded":
              bEditButtonVisible = false;
          }
          break;
      }
      return bEditButtonVisible;
    };
    _proto.updateUIStateForView = function updateUIStateForView(oView, FCLLevel) {
      const oUIState = this.getHelper().getCurrentUIState(),
        oFclColName = ["beginColumn", "midColumn", "endColumn"],
        sLayout = this.getFclControl().getLayout();
      let viewColumn;
      if (!oView.getModel("fclhelper")) {
        oView.setModel(this._createHelperModel(), "fclhelper");
      }
      if (FCLLevel >= this._oFCLConfig.maxColumnsCount) {
        // The view is on a level > max number of columns. It's always fullscreen without close/exit buttons
        viewColumn = oFclColName[this._oFCLConfig.maxColumnsCount - 1];
        oUIState.actionButtonsInfo.midColumn.fullScreen = null;
        oUIState.actionButtonsInfo.midColumn.exitFullScreen = null;
        oUIState.actionButtonsInfo.midColumn.closeColumn = null;
        oUIState.actionButtonsInfo.endColumn.exitFullScreen = null;
        oUIState.actionButtonsInfo.endColumn.fullScreen = null;
        oUIState.actionButtonsInfo.endColumn.closeColumn = null;
      } else {
        viewColumn = oFclColName[FCLLevel];
      }
      if (FCLLevel >= this._oFCLConfig.maxColumnsCount || sLayout === "EndColumnFullScreen" || sLayout === "MidColumnFullScreen" || sLayout === "OneColumn") {
        oView.getModel("fclhelper").setProperty("/breadCrumbIsVisible", true);
      } else {
        oView.getModel("fclhelper").setProperty("/breadCrumbIsVisible", false);
      }
      // Unfortunately, the FCLHelper doesn't provide actionButton values for the first column
      // so we have to add this info manually
      oUIState.actionButtonsInfo.beginColumn = {
        fullScreen: null,
        exitFullScreen: null,
        closeColumn: null
      };
      const oActionButtonInfos = Object.assign({}, oUIState.actionButtonsInfo[viewColumn]);
      oActionButtonInfos.switchVisible = oActionButtonInfos.fullScreen !== null || oActionButtonInfos.exitFullScreen !== null;
      oActionButtonInfos.switchIcon = oActionButtonInfos.fullScreen !== null ? "sap-icon://full-screen" : "sap-icon://exit-full-screen";
      oActionButtonInfos.isFullScreen = oActionButtonInfos.fullScreen === null;
      oActionButtonInfos.closeVisible = oActionButtonInfos.closeColumn !== null;
      oView.getModel("fclhelper").setProperty("/actionButtonsInfo", oActionButtonInfos);
      oView.getModel("fclhelper").setProperty("/showEditButton", this._updateEditButtonVisiblity(viewColumn, sLayout));
      oView.getModel("fclhelper").setProperty("/showShareIcon", this._updateShareButtonVisibility(viewColumn, sLayout));
    }

    /**
     * Function triggered by the router BeforeRouteMatched event.
     *
     * @name sap.fe.core.rootView.Fcl.controller#onBeforeRouteMatched
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @param oEvent
     */;
    _proto.onBeforeRouteMatched = function onBeforeRouteMatched(oEvent) {
      if (oEvent) {
        const oQueryParams = oEvent.getParameters().arguments[this.SQUERYKEYNAME];
        let sLayout = oQueryParams ? oQueryParams.layout : null;

        // If there is no layout parameter, query for the default level 0 layout (normally OneColumn)
        if (!sLayout) {
          const oNextUIState = this.getHelper().getNextUIState(0);
          sLayout = oNextUIState.layout;
        }

        // Check if the layout if compatible with the number of targets
        // This should always be the case for normal navigation, just needed in case
        // the URL has been manually modified
        const aTargets = oEvent.getParameter("config").target;
        sLayout = this._correctLayoutForTargets(sLayout, aTargets);

        // Update the layout of the FlexibleColumnLayout
        if (sLayout) {
          this.getFclControl().setLayout(sLayout);
        }
      }
    }

    /**
     * Helper for the FCL Component.
     *
     * @name sap.fe.core.rootView.Fcl.controller#getHelper
     * @memberof sap.fe.core.rootView.Fcl.controller
     * @returns Instance of a semantic helper
     */;
    _proto.getHelper = function getHelper() {
      return FlexibleColumnLayoutSemanticHelper.getInstanceFor(this.getFclControl(), this._oFCLConfig);
    }

    /**
     * Calculates the FCL layout for a given FCL level and a target hash.
     *
     * @param iNextFCLLevel FCL level to be navigated to
     * @param sHash The hash to be navigated to
     * @param sProposedLayout The proposed layout
     * @param keepCurrentLayout True if we want to keep the current layout if possible
     * @returns The calculated layout
     */;
    _proto.calculateLayout = function calculateLayout(iNextFCLLevel, sHash, sProposedLayout) {
      let keepCurrentLayout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      // First, ask the FCL helper to calculate the layout if nothing is proposed
      if (!sProposedLayout) {
        sProposedLayout = keepCurrentLayout ? this.getFclControl().getLayout() : this.getHelper().getNextUIState(iNextFCLLevel).layout;
      }

      // Then change this value if necessary, based on the number of targets
      const oRoute = this.getRouter().getRouteByHash(`${sHash}?layout=${sProposedLayout}`);
      const aTargets = this._oTargetsFromRoutePattern[oRoute.getPattern()];
      return this._correctLayoutForTargets(sProposedLayout, aTargets);
    }

    /**
     * Checks whether a given FCL layout is compatible with an array of targets.
     *
     * @param sProposedLayout Proposed value for the FCL layout
     * @param aTargets Array of target names used for checking
     * @returns The corrected layout
     */;
    _proto._correctLayoutForTargets = function _correctLayoutForTargets(sProposedLayout, aTargets) {
      const allAllowedLayouts = {
        "2": ["TwoColumnsMidExpanded", "TwoColumnsBeginExpanded", "MidColumnFullScreen"],
        "3": ["ThreeColumnsMidExpanded", "ThreeColumnsEndExpanded", "ThreeColumnsMidExpandedEndHidden", "ThreeColumnsBeginExpandedEndHidden", "MidColumnFullScreen", "EndColumnFullScreen"]
      };
      if (aTargets && !Array.isArray(aTargets)) {
        // To support single target as a string in the manifest
        aTargets = [aTargets];
      }
      if (!aTargets) {
        // Defensive, just in case...
        return sProposedLayout;
      } else if (aTargets.length > 1) {
        // More than 1 target: just simply check from the allowed values
        const aLayouts = allAllowedLayouts[aTargets.length];
        if (aLayouts.indexOf(sProposedLayout) < 0) {
          // The proposed layout isn't compatible with the number of columns
          // --> Ask the helper for the default layout for the number of columns
          sProposedLayout = aLayouts[0];
        }
      } else {
        // Only one target
        const sTargetAggregation = this.getTargetAggregation()[aTargets[0]].aggregation || this._oFCLConfig.defaultControlAggregation;
        switch (sTargetAggregation) {
          case "beginColumnPages":
            sProposedLayout = "OneColumn";
            break;
          case "midColumnPages":
            sProposedLayout = "MidColumnFullScreen";
            break;
          case "endColumnPages":
            sProposedLayout = "EndColumnFullScreen";
            break;
          // no default
        }
      }

      return sProposedLayout;
    }

    /**
     * Gets the instanced views in the FCL component.
     *
     * @returns {Array} Return the views.
     */;
    _proto.getInstancedViews = function getInstancedViews() {
      const fclControl = this.getFclControl();
      const componentContainers = [...fclControl.getBeginColumnPages(), ...fclControl.getMidColumnPages(), ...fclControl.getEndColumnPages()];
      return componentContainers.map(oPage => {
        if (oPage && oPage.isA("sap.ui.core.ComponentContainer")) {
          return oPage.getComponentInstance().getRootControl();
        } else {
          return oPage;
        }
      });
    }

    /**
     * get all visible views in the FCL component.
     * sLayout optional parameter is very specific as part of the calculation of the latest navigated row
     *
     * @param {*} sLayout Layout that was applied just before the current navigation
     * @returns {Array} return views
     */;
    _proto._getAllVisibleViews = function _getAllVisibleViews(sLayout) {
      const aViews = [];
      sLayout = sLayout ? sLayout : this.getFclControl().getLayout();
      switch (sLayout) {
        case LayoutType.EndColumnFullScreen:
          if (this.getFclControl().getCurrentEndColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentEndColumnPage()));
          }
          break;
        case LayoutType.MidColumnFullScreen:
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          break;
        case LayoutType.OneColumn:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          break;
        case LayoutType.ThreeColumnsEndExpanded:
        case LayoutType.ThreeColumnsMidExpanded:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          if (this.getFclControl().getCurrentEndColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentEndColumnPage()));
          }
          break;
        case LayoutType.TwoColumnsBeginExpanded:
        case LayoutType.TwoColumnsMidExpanded:
        case LayoutType.ThreeColumnsMidExpandedEndHidden:
        case LayoutType.ThreeColumnsBeginExpandedEndHidden:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          break;
        default:
          Log.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`);
      }
      return aViews;
    };
    _proto._getAllViews = function _getAllViews(sLayout) {
      const aViews = [];
      sLayout = sLayout ? sLayout : this.getFclControl().getLayout();
      switch (sLayout) {
        case LayoutType.OneColumn:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          break;
        case LayoutType.ThreeColumnsEndExpanded:
        case LayoutType.ThreeColumnsMidExpanded:
        case LayoutType.ThreeColumnsMidExpandedEndHidden:
        case LayoutType.ThreeColumnsBeginExpandedEndHidden:
        case LayoutType.EndColumnFullScreen:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          if (this.getFclControl().getCurrentEndColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentEndColumnPage()));
          }
          break;
        case LayoutType.TwoColumnsBeginExpanded:
        case LayoutType.TwoColumnsMidExpanded:
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          break;
        case LayoutType.MidColumnFullScreen:
          // In this case we need to determine if this mid column fullscreen comes from a 2 or a 3 column layout
          const sLayoutWhenExitFullScreen = this.getHelper().getCurrentUIState().actionButtonsInfo.midColumn.exitFullScreen;
          if (this.getFclControl().getCurrentBeginColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentBeginColumnPage()));
          }
          if (this.getFclControl().getCurrentMidColumnPage()) {
            aViews.push(_getViewFromContainer(this.getFclControl().getCurrentMidColumnPage()));
          }
          if (sLayoutWhenExitFullScreen.indexOf("ThreeColumn") >= 0) {
            // We come from a 3 column layout
            if (this.getFclControl().getCurrentEndColumnPage()) {
              aViews.push(_getViewFromContainer(this.getFclControl().getCurrentEndColumnPage()));
            }
          }
          break;
        default:
          Log.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`);
      }
      return aViews;
    };
    _proto.onContainerReady = function onContainerReady() {
      // Restore views if neccessary.
      const aViews = this._getAllVisibleViews();
      const aRestorePromises = aViews.reduce(function (aPromises, oTargetView) {
        aPromises.push(KeepAliveHelper.restoreView(oTargetView));
        return aPromises;
      }, []);
      return Promise.all(aRestorePromises);
    };
    _proto.getRightmostContext = function getRightmostContext() {
      const oView = this.getRightmostView();
      return oView && oView.getBindingContext();
    };
    _proto.getRightmostView = function getRightmostView() {
      return this._getAllViews().pop();
    };
    _proto.isContextUsedInPages = function isContextUsedInPages(oContext) {
      if (!this.getFclControl()) {
        return false;
      }
      const aAllVisibleViews = this._getAllViews();
      for (const view of aAllVisibleViews) {
        if (view) {
          if (view.getBindingContext() === oContext) {
            return true;
          }
        } else {
          // A view has been destroyed --> app is currently being destroyed
          return false;
        }
      }
      return false;
    };
    _proto._setShellMenuTitle = function _setShellMenuTitle(oAppComponent, sTitle, sAppTitle) {
      if (this.getHelper().getCurrentUIState().isFullScreen !== true) {
        oAppComponent.getShellServices().setTitle(sAppTitle);
      } else {
        oAppComponent.getShellServices().setTitle(sTitle);
      }
    };
    return FclController;
  }(BaseController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewState", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return FclController;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/Fcl.controller", ["sap/base/Log","sap/f/FlexibleColumnLayoutSemanticHelper","sap/f/library","sap/fe/core/controllerextensions/ViewState","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/KeepAliveHelper","sap/m/Link","sap/m/MessageBox","sap/m/MessagePage","./RootViewBaseController"],function(e,t,n,o,i,r,l,s,a,u){"use strict";var g,c,C,h,d;var f=s.Icon;var m=s.Action;var p=i.usingExtension;var F=i.defineUI5Class;function w(e,t,n,o){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(o):void 0})}function E(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function P(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;b(e,t)}function b(e,t){b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return b(e,t)}function M(e,t,n,o,i){var r={};Object.keys(o).forEach(function(e){r[e]=o[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=n.slice().reverse().reduce(function(n,o){return o(e,t,n)||n},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function v(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}const y=n.LayoutType;const x={page:{names:["BeginColumn","MidColumn","EndColumn"],currentGetter:{prefix:"getCurrent",suffix:"Page"},getter:{prefix:"get",suffix:"Pages"}}};const T=function(e){if(e.isA("sap.ui.core.ComponentContainer")){return e.getComponentInstance().getRootControl()}else{return e}};let R=(g=F("sap.fe.core.rootView.Fcl"),c=p(o.override({applyInitialStateOnly:function(){return false},adaptBindingRefreshControls:function(e){this.getView().getController()._getAllVisibleViews().forEach(function(t){const n=Promise.resolve(t);e.push(n)})},adaptStateControls:function(e){this.getView().getController()._getAllVisibleViews().forEach(function(t){const n=Promise.resolve(t);e.push(n)})},onRestore:function(){const e=this.getView().getController();const t=e.getAppContentContainer();const n=t.getModel("internal");const o=n.getProperty("/pages");for(const e in o){n.setProperty(`/pages/${e}/restoreStatus`,"pending")}e.onContainerReady()},onSuspend:function(){const e=this.getView().getController();const t=e.getFclControl();const n=t.getBeginColumnPages()||[];const o=t.getMidColumnPages()||[];const i=t.getEndColumnPages()||[];const r=[].concat(n,o,i);r.forEach(function(e){const t=T(e);const n=t&&t.getController();if(n&&n.viewState&&n.viewState.onSuspend){n.viewState.onSuspend()}})}})),g(C=(h=function(n){P(o,n);function o(){var e;for(var t=arguments.length,o=new Array(t),i=0;i<t;i++){o[i]=arguments[i]}e=n.call(this,...o)||this;w(e,"viewState",d,E(e));return e}var i=o.prototype;i.onInit=function e(){n.prototype.onInit.call(this);this._internalInit()};i.manageDataReceived=function e(t){if(t.getParameter("error")){var n;const e=t.getParameter("path"),o=this._getAllVisibleViews().find(t=>{var n;return((n=t.getBindingContext())===null||n===void 0?void 0:n.getPath())===e});if(e&&o!==null&&o!==void 0&&(n=o.getBindingContext())!==null&&n!==void 0&&n.isKeepAlive()){o.getController()._routing.onDataReceived(t)}}};i.attachRouteMatchers=function e(){this.getRouter().attachBeforeRouteMatched(this._getViewForNavigatedRowsComputation,this);n.prototype.attachRouteMatchers.call(this);this._internalInit();this.getRouter().attachBeforeRouteMatched(this.onBeforeRouteMatched,this);this.getRouter().attachRouteMatched(this.onRouteMatched,this);this.getFclControl().attachStateChange(this._saveLayout,this)};i._internalInit=function e(){var t,n;if(this._oRouterProxy){return}this.sCurrentRouteName="";this.sCurrentArguments={};this.SQUERYKEYNAME="?query";const o=this.getAppComponent();const i=this.getAppComponent().getModel();i===null||i===void 0?void 0:i.attachEvent("dataReceived",this.manageDataReceived.bind(this));this._oRouterProxy=o.getRouterProxy();this._oFCLConfig={maxColumnsCount:3};const r=o.getManifest()["sap.ui5"].routing;if(r!==null&&r!==void 0&&(t=r.config)!==null&&t!==void 0&&t.flexibleColumnLayout){const e=r.config.flexibleColumnLayout;if(e.defaultTwoColumnLayoutType){this._oFCLConfig.defaultTwoColumnLayoutType=e.defaultTwoColumnLayoutType}if(e.defaultThreeColumnLayoutType){this._oFCLConfig.defaultThreeColumnLayoutType=e.defaultThreeColumnLayoutType}if(e.limitFCLToTwoColumns===true){this._oFCLConfig.maxColumnsCount=2}}if(r!==null&&r!==void 0&&(n=r.config)!==null&&n!==void 0&&n.controlAggregation){this._oFCLConfig.defaultControlAggregation=r.config.controlAggregation}this._initializeTargetAggregation(o);this._initializeRoutesInformation(o);this.getFclControl().attachStateChange(this.onStateChanged,this);this.getFclControl().attachAfterEndColumnNavigate(this.onStateChanged,this)};i.getFclControl=function e(){return this.getAppContentContainer()};i._saveLayout=function e(t){this.sPreviousLayout=t.getParameters().layout};i._getViewForNavigatedRowsComputation=function e(){const t=this._getAllVisibleViews(this.sPreviousLayout);const n=t[t.length-1];let o;this.getRouter().attachEventOnce("routeMatched",e=>{o=T(e.getParameter("views")[e.getParameter("views").length-1]);if(n){if(o.getViewData()&&o.getViewData().viewLevel===this._oFCLConfig.maxColumnsCount){this.oAdditionalViewForNavRowsComputation=o}if(o.getViewData()&&n.getViewData()&&n.getViewData().viewLevel<this._oFCLConfig.maxColumnsCount&&n.getViewData()&&n.getViewData().viewLevel>o.getViewData().viewLevel&&o!==n){this.oAdditionalViewForNavRowsComputation=n}}})};i.getViewForNavigatedRowsComputation=function e(){return this.oAdditionalViewForNavRowsComputation};i.onExit=function e(){this.getRouter().detachRouteMatched(this.onRouteMatched,this);this.getRouter().detachBeforeRouteMatched(this.onBeforeRouteMatched,this);this.getFclControl().detachStateChange(this.onStateChanged,this);this.getFclControl().detachAfterEndColumnNavigate(this.onStateChanged,this);this._oTargetsAggregation=null;this._oTargetsFromRoutePattern=null;u.prototype.onExit.bind(this)()};i.isFclEnabled=function e(){return true};i.displayErrorPage=function e(t,n){const o=this.getFclControl();if(this._oFCLConfig&&n.FCLLevel>=this._oFCLConfig.maxColumnsCount){n.FCLLevel=this._oFCLConfig.maxColumnsCount-1}if(!this.aMessagePages){this.aMessagePages=[null,null,null]}let i=this.aMessagePages[n.FCLLevel];if(!i){i=new a({showHeader:false,icon:"sap-icon://message-error"});this.aMessagePages[n.FCLLevel]=i;switch(n.FCLLevel){case 0:o.addBeginColumnPage(i);break;case 1:o.addMidColumnPage(i);break;default:o.addEndColumnPage(i)}}i.setText(t);if(n.technicalMessage){i.setCustomDescription(new l({text:n.description||n.technicalMessage,press:function(){s.show(n.technicalMessage,{icon:f.ERROR,title:n.title,actions:[m.OK],defaultAction:m.OK,details:n.technicalDetails||"",contentWidth:"60%"})}}))}else{i.setDescription(n.description||"")}o.to(i.getId());return Promise.resolve(true)};i._initializeTargetAggregation=function e(t){const n=t.getManifest(),o=n["sap.ui5"].routing?n["sap.ui5"].routing.targets:null;this._oTargetsAggregation={};if(o){Object.keys(o).forEach(e=>{const t=o[e];if(t.controlAggregation){this._oTargetsAggregation[e]={aggregation:t.controlAggregation,pattern:t.contextPattern}}else{this._oTargetsAggregation[e]={aggregation:"page",pattern:null}}})}};i._initializeRoutesInformation=function e(t){const n=t.getManifest(),o=n["sap.ui5"].routing?n["sap.ui5"].routing.routes:null;this._oTargetsFromRoutePattern={};if(o){o.forEach(e=>{this._oTargetsFromRoutePattern[e.pattern]=e.target})}};i.getCurrentArgument=function e(){return this.sCurrentArguments};i.getCurrentRouteName=function e(){return this.sCurrentRouteName};i.getConstants=function e(){return x};i.getTargetAggregation=function e(){return this._oTargetsAggregation};i.onRouteMatched=function e(t){const n=t.getParameter("name");this.sCurrentRouteName=n;this.sCurrentArguments=t.getParameter("arguments")};i._scrollTablesToLastNavigatedItems=function e(){const t=this._getAllVisibleViews();if(t.length>1||t[0].getViewData().viewLevel<this._oFCLConfig.maxColumnsCount){let e;const n=this.getViewForNavigatedRowsComputation();if(n&&t.indexOf(n)===-1){t.push(n)}for(let n=t.length-1;n>0;n--){const o=t[n],i=t[n-1];if(o.getBindingContext()){e=o.getBindingContext().getPath();i.getController()._scrollTablesToRow(e)}}}};i.onStateChanged=function e(t){const n=t.getParameter("isNavigationArrow");if(this.sCurrentArguments!==undefined){if(!this.sCurrentArguments[this.SQUERYKEYNAME]){this.sCurrentArguments[this.SQUERYKEYNAME]={}}this.sCurrentArguments[this.SQUERYKEYNAME].layout=t.getParameter("layout")}this._forceModelContextChangeOnBreadCrumbs(t);if(n){this._oRouterProxy.navTo(this.sCurrentRouteName,this.sCurrentArguments)}const o=this.getRightmostView();if(o){this._computeTitleHierarchy(o)}};i._forceModelContextChangeOnBreadCrumbs=function e(t){const n=t.getSource();let o=[];o=o.concat(n.getBeginColumnPages()).concat(n.getMidColumnPages()).concat(n.getEndColumnPages());o.forEach(function(e){const t=T(e);const n=t.byId&&t.byId("breadcrumbs");if(n){n.fireModelContextChange()}})};i._updateShareButtonVisibility=function e(t,n){let o;switch(n){case"OneColumn":o=t==="beginColumn";break;case"MidColumnFullScreen":case"ThreeColumnsBeginExpandedEndHidden":case"ThreeColumnsMidExpandedEndHidden":case"TwoColumnsBeginExpanded":case"TwoColumnsMidExpanded":o=t==="midColumn";break;case"EndColumnFullScreen":case"ThreeColumnsEndExpanded":case"ThreeColumnsMidExpanded":o=t==="endColumn";break;default:o=false}return o};i._updateEditButtonVisiblity=function e(t,n){let o=true;switch(t){case"midColumn":switch(n){case"TwoColumnsMidExpanded":case"ThreeColumnsMidExpanded":case"ThreeColumnsEndExpanded":o=false;break}break;case"endColumn":switch(n){case"ThreeColumnsMidExpanded":case"ThreeColumnsEndExpanded":o=false}break}return o};i.updateUIStateForView=function e(t,n){const o=this.getHelper().getCurrentUIState(),i=["beginColumn","midColumn","endColumn"],r=this.getFclControl().getLayout();let l;if(!t.getModel("fclhelper")){t.setModel(this._createHelperModel(),"fclhelper")}if(n>=this._oFCLConfig.maxColumnsCount){l=i[this._oFCLConfig.maxColumnsCount-1];o.actionButtonsInfo.midColumn.fullScreen=null;o.actionButtonsInfo.midColumn.exitFullScreen=null;o.actionButtonsInfo.midColumn.closeColumn=null;o.actionButtonsInfo.endColumn.exitFullScreen=null;o.actionButtonsInfo.endColumn.fullScreen=null;o.actionButtonsInfo.endColumn.closeColumn=null}else{l=i[n]}if(n>=this._oFCLConfig.maxColumnsCount||r==="EndColumnFullScreen"||r==="MidColumnFullScreen"||r==="OneColumn"){t.getModel("fclhelper").setProperty("/breadCrumbIsVisible",true)}else{t.getModel("fclhelper").setProperty("/breadCrumbIsVisible",false)}o.actionButtonsInfo.beginColumn={fullScreen:null,exitFullScreen:null,closeColumn:null};const s=Object.assign({},o.actionButtonsInfo[l]);s.switchVisible=s.fullScreen!==null||s.exitFullScreen!==null;s.switchIcon=s.fullScreen!==null?"sap-icon://full-screen":"sap-icon://exit-full-screen";s.isFullScreen=s.fullScreen===null;s.closeVisible=s.closeColumn!==null;t.getModel("fclhelper").setProperty("/actionButtonsInfo",s);t.getModel("fclhelper").setProperty("/showEditButton",this._updateEditButtonVisiblity(l,r));t.getModel("fclhelper").setProperty("/showShareIcon",this._updateShareButtonVisibility(l,r))};i.onBeforeRouteMatched=function e(t){if(t){const e=t.getParameters().arguments[this.SQUERYKEYNAME];let n=e?e.layout:null;if(!n){const e=this.getHelper().getNextUIState(0);n=e.layout}const o=t.getParameter("config").target;n=this._correctLayoutForTargets(n,o);if(n){this.getFclControl().setLayout(n)}}};i.getHelper=function e(){return t.getInstanceFor(this.getFclControl(),this._oFCLConfig)};i.calculateLayout=function e(t,n,o){let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;if(!o){o=i?this.getFclControl().getLayout():this.getHelper().getNextUIState(t).layout}const r=this.getRouter().getRouteByHash(`${n}?layout=${o}`);const l=this._oTargetsFromRoutePattern[r.getPattern()];return this._correctLayoutForTargets(o,l)};i._correctLayoutForTargets=function e(t,n){const o={2:["TwoColumnsMidExpanded","TwoColumnsBeginExpanded","MidColumnFullScreen"],3:["ThreeColumnsMidExpanded","ThreeColumnsEndExpanded","ThreeColumnsMidExpandedEndHidden","ThreeColumnsBeginExpandedEndHidden","MidColumnFullScreen","EndColumnFullScreen"]};if(n&&!Array.isArray(n)){n=[n]}if(!n){return t}else if(n.length>1){const e=o[n.length];if(e.indexOf(t)<0){t=e[0]}}else{const e=this.getTargetAggregation()[n[0]].aggregation||this._oFCLConfig.defaultControlAggregation;switch(e){case"beginColumnPages":t="OneColumn";break;case"midColumnPages":t="MidColumnFullScreen";break;case"endColumnPages":t="EndColumnFullScreen";break}}return t};i.getInstancedViews=function e(){const t=this.getFclControl();const n=[...t.getBeginColumnPages(),...t.getMidColumnPages(),...t.getEndColumnPages()];return n.map(e=>{if(e&&e.isA("sap.ui.core.ComponentContainer")){return e.getComponentInstance().getRootControl()}else{return e}})};i._getAllVisibleViews=function t(n){const o=[];n=n?n:this.getFclControl().getLayout();switch(n){case y.EndColumnFullScreen:if(this.getFclControl().getCurrentEndColumnPage()){o.push(T(this.getFclControl().getCurrentEndColumnPage()))}break;case y.MidColumnFullScreen:if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}break;case y.OneColumn:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}break;case y.ThreeColumnsEndExpanded:case y.ThreeColumnsMidExpanded:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}if(this.getFclControl().getCurrentEndColumnPage()){o.push(T(this.getFclControl().getCurrentEndColumnPage()))}break;case y.TwoColumnsBeginExpanded:case y.TwoColumnsMidExpanded:case y.ThreeColumnsMidExpandedEndHidden:case y.ThreeColumnsBeginExpandedEndHidden:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}break;default:e.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`)}return o};i._getAllViews=function t(n){const o=[];n=n?n:this.getFclControl().getLayout();switch(n){case y.OneColumn:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}break;case y.ThreeColumnsEndExpanded:case y.ThreeColumnsMidExpanded:case y.ThreeColumnsMidExpandedEndHidden:case y.ThreeColumnsBeginExpandedEndHidden:case y.EndColumnFullScreen:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}if(this.getFclControl().getCurrentEndColumnPage()){o.push(T(this.getFclControl().getCurrentEndColumnPage()))}break;case y.TwoColumnsBeginExpanded:case y.TwoColumnsMidExpanded:if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}break;case y.MidColumnFullScreen:const t=this.getHelper().getCurrentUIState().actionButtonsInfo.midColumn.exitFullScreen;if(this.getFclControl().getCurrentBeginColumnPage()){o.push(T(this.getFclControl().getCurrentBeginColumnPage()))}if(this.getFclControl().getCurrentMidColumnPage()){o.push(T(this.getFclControl().getCurrentMidColumnPage()))}if(t.indexOf("ThreeColumn")>=0){if(this.getFclControl().getCurrentEndColumnPage()){o.push(T(this.getFclControl().getCurrentEndColumnPage()))}}break;default:e.error(`Unhandled switch case for ${this.getFclControl().getLayout()}`)}return o};i.onContainerReady=function e(){const t=this._getAllVisibleViews();const n=t.reduce(function(e,t){e.push(r.restoreView(t));return e},[]);return Promise.all(n)};i.getRightmostContext=function e(){const t=this.getRightmostView();return t&&t.getBindingContext()};i.getRightmostView=function e(){return this._getAllViews().pop()};i.isContextUsedInPages=function e(t){if(!this.getFclControl()){return false}const n=this._getAllViews();for(const e of n){if(e){if(e.getBindingContext()===t){return true}}else{return false}}return false};i._setShellMenuTitle=function e(t,n,o){if(this.getHelper().getCurrentUIState().isFullScreen!==true){t.getShellServices().setTitle(o)}else{t.getShellServices().setTitle(n)}};return o}(u),d=M(h.prototype,"viewState",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),h))||C);return R},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/NavContainer-dbg.controller", ["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/ViewState", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/KeepAliveHelper", "sap/m/IllustratedMessage", "sap/m/Page", "./RootViewBaseController"], function (Log, CommonUtils, ViewState, ClassSupport, KeepAliveHelper, IllustratedMessage, Page, BaseController) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var usingExtension = ClassSupport.usingExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  /**
   * Base controller class for your own root view with a sap.m.NavContainer control.
   *
   * By using or extending this controller you can use your own root view with the sap.fe.core.AppComponent and
   * you can make use of SAP Fiori elements pages and SAP Fiori elements building blocks.
   *
   * @hideconstructor
   * @public
   * @since 1.108.0
   */
  let NavContainerController = (_dec = defineUI5Class("sap.fe.core.rootView.NavContainer"), _dec2 = usingExtension(ViewState.override({
    applyInitialStateOnly: function () {
      return false;
    },
    adaptBindingRefreshControls: function (aControls) {
      const oView = this.getView(),
        oController = oView.getController();
      aControls.push(oController._getCurrentPage(oView));
    },
    adaptStateControls: function (aStateControls) {
      const oView = this.getView(),
        oController = oView.getController();
      aStateControls.push(oController._getCurrentPage(oView));
    },
    onRestore: function () {
      const oView = this.getView(),
        oController = oView.getController(),
        oNavContainer = oController.getAppContentContainer();
      const oInternalModel = oNavContainer.getModel("internal");
      const oPages = oInternalModel.getProperty("/pages");
      for (const sComponentId in oPages) {
        oInternalModel.setProperty(`/pages/${sComponentId}/restoreStatus`, "pending");
      }
      oController.onContainerReady();
    },
    onSuspend: function () {
      const oView = this.getView(),
        oNavController = oView.getController(),
        oNavContainer = oNavController.getAppContentContainer();
      const aPages = oNavContainer.getPages();
      aPages.forEach(function (oPage) {
        const oTargetView = CommonUtils.getTargetView(oPage);
        const oController = oTargetView && oTargetView.getController();
        if (oController && oController.viewState && oController.viewState.onSuspend) {
          oController.viewState.onSuspend();
        }
      });
    }
  })), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseController) {
    _inheritsLoose(NavContainerController, _BaseController);
    function NavContainerController() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseController.call(this, ...args) || this;
      _initializerDefineProperty(_this, "viewState", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    var _proto = NavContainerController.prototype;
    _proto.onContainerReady = function onContainerReady() {
      // Restore views if neccessary.
      const oView = this.getView(),
        oPagePromise = this._getCurrentPage(oView);
      return oPagePromise.then(function (oCurrentPage) {
        const oTargetView = CommonUtils.getTargetView(oCurrentPage);
        return KeepAliveHelper.restoreView(oTargetView);
      });
    };
    _proto._getCurrentPage = function _getCurrentPage(oView) {
      const oNavContainer = this.getAppContentContainer();
      return new Promise(function (resolve) {
        const oCurrentPage = oNavContainer.getCurrentPage();
        if (oCurrentPage && oCurrentPage.getController && oCurrentPage.getController().isPlaceholder && oCurrentPage.getController().isPlaceholder()) {
          oCurrentPage.getController().attachEventOnce("targetPageInsertedInContainer", function (oEvent) {
            const oTargetPage = oEvent.getParameter("targetpage");
            const oTargetView = CommonUtils.getTargetView(oTargetPage);
            resolve(oTargetView !== oView && oTargetView);
          });
        } else {
          const oTargetView = CommonUtils.getTargetView(oCurrentPage);
          resolve(oTargetView !== oView && oTargetView);
        }
      });
    }

    /**
     * @private
     * @name sap.fe.core.rootView.NavContainer.getMetadata
     * @function
     */;
    _proto._getNavContainer = function _getNavContainer() {
      return this.getAppContentContainer();
    }

    /**
     * Gets the instanced views in the navContainer component.
     *
     * @returns {Array} Return the views.
     */;
    _proto.getInstancedViews = function getInstancedViews() {
      return this._getNavContainer().getPages().map(page => {
        if (page && page.isA("sap.ui.core.ComponentContainer")) {
          return page.getComponentInstance().getRootControl();
        } else {
          return page;
        }
      });
    }

    /**
     * Check if the FCL component is enabled.
     *
     * @function
     * @name sap.fe.core.rootView.NavContainer.controller#isFclEnabled
     * @memberof sap.fe.core.rootView.NavContainer.controller
     * @returns `false` since we are not in FCL scenario
     * @ui5-restricted
     * @final
     */;
    _proto.isFclEnabled = function isFclEnabled() {
      return false;
    };
    _proto._scrollTablesToLastNavigatedItems = function _scrollTablesToLastNavigatedItems() {
      // Do nothing
    }

    /**
     * Method that creates a new Page to display the IllustratedMessage containing the current error.
     *
     * @param sErrorMessage
     * @param mParameters
     * @alias sap.fe.core.rootView.NavContainer.controller#displayErrorPage
     * @returns A promise that creates a Page to display the error
     * @public
     */;
    _proto.displayErrorPage = function displayErrorPage(sErrorMessage, mParameters) {
      return new Promise((resolve, reject) => {
        try {
          const oNavContainer = this._getNavContainer();
          if (!this.oPage) {
            this.oPage = new Page({
              showHeader: false
            });
            this.oIllustratedMessage = new IllustratedMessage({
              title: sErrorMessage,
              description: mParameters.description || "",
              illustrationType: `sapIllus-${mParameters.errorType}`
            });
            this.oPage.insertContent(this.oIllustratedMessage, 0);
            oNavContainer.addPage(this.oPage);
          }
          if (mParameters.handleShellBack) {
            const oErrorOriginPage = oNavContainer.getCurrentPage(),
              oAppComponent = CommonUtils.getAppComponent(oNavContainer.getCurrentPage());
            oAppComponent.getShellServices().setBackNavigation(function () {
              oNavContainer.to(oErrorOriginPage.getId());
              oAppComponent.getShellServices().setBackNavigation();
            });
          }
          oNavContainer.attachAfterNavigate(function () {
            resolve(true);
          });
          oNavContainer.to(this.oPage.getId());
        } catch (e) {
          reject(false);
          Log.info(e);
        }
      });
    };
    return NavContainerController;
  }(BaseController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "viewState", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return NavContainerController;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/NavContainer.controller", ["sap/base/Log","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/ViewState","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/KeepAliveHelper","sap/m/IllustratedMessage","sap/m/Page","./RootViewBaseController"],function(e,t,n,r,o,i,a,s){"use strict";var l,c,u,g,f;var p=r.usingExtension;var d=r.defineUI5Class;function h(e,t,n,r){if(!n)return;Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:n.configurable,writable:n.writable,value:n.initializer?n.initializer.call(r):void 0})}function C(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function v(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;w(e,t)}function w(e,t){w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return w(e,t)}function P(e,t,n,r,o){var i={};Object.keys(r).forEach(function(e){i[e]=r[e]});i.enumerable=!!i.enumerable;i.configurable=!!i.configurable;if("value"in i||i.initializer){i.writable=true}i=n.slice().reverse().reduce(function(n,r){return r(e,t,n)||n},i);if(o&&i.initializer!==void 0){i.value=i.initializer?i.initializer.call(o):void 0;i.initializer=undefined}if(i.initializer===void 0){Object.defineProperty(e,t,i);i=null}return i}function b(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let y=(l=d("sap.fe.core.rootView.NavContainer"),c=p(n.override({applyInitialStateOnly:function(){return false},adaptBindingRefreshControls:function(e){const t=this.getView(),n=t.getController();e.push(n._getCurrentPage(t))},adaptStateControls:function(e){const t=this.getView(),n=t.getController();e.push(n._getCurrentPage(t))},onRestore:function(){const e=this.getView(),t=e.getController(),n=t.getAppContentContainer();const r=n.getModel("internal");const o=r.getProperty("/pages");for(const e in o){r.setProperty(`/pages/${e}/restoreStatus`,"pending")}t.onContainerReady()},onSuspend:function(){const e=this.getView(),n=e.getController(),r=n.getAppContentContainer();const o=r.getPages();o.forEach(function(e){const n=t.getTargetView(e);const r=n&&n.getController();if(r&&r.viewState&&r.viewState.onSuspend){r.viewState.onSuspend()}})}})),l(u=(g=function(n){v(r,n);function r(){var e;for(var t=arguments.length,r=new Array(t),o=0;o<t;o++){r[o]=arguments[o]}e=n.call(this,...r)||this;h(e,"viewState",f,C(e));return e}var s=r.prototype;s.onContainerReady=function e(){const n=this.getView(),r=this._getCurrentPage(n);return r.then(function(e){const n=t.getTargetView(e);return o.restoreView(n)})};s._getCurrentPage=function e(n){const r=this.getAppContentContainer();return new Promise(function(e){const o=r.getCurrentPage();if(o&&o.getController&&o.getController().isPlaceholder&&o.getController().isPlaceholder()){o.getController().attachEventOnce("targetPageInsertedInContainer",function(r){const o=r.getParameter("targetpage");const i=t.getTargetView(o);e(i!==n&&i)})}else{const r=t.getTargetView(o);e(r!==n&&r)}})};s._getNavContainer=function e(){return this.getAppContentContainer()};s.getInstancedViews=function e(){return this._getNavContainer().getPages().map(e=>{if(e&&e.isA("sap.ui.core.ComponentContainer")){return e.getComponentInstance().getRootControl()}else{return e}})};s.isFclEnabled=function e(){return false};s._scrollTablesToLastNavigatedItems=function e(){};s.displayErrorPage=function n(r,o){return new Promise((n,s)=>{try{const e=this._getNavContainer();if(!this.oPage){this.oPage=new a({showHeader:false});this.oIllustratedMessage=new i({title:r,description:o.description||"",illustrationType:`sapIllus-${o.errorType}`});this.oPage.insertContent(this.oIllustratedMessage,0);e.addPage(this.oPage)}if(o.handleShellBack){const n=e.getCurrentPage(),r=t.getAppComponent(e.getCurrentPage());r.getShellServices().setBackNavigation(function(){e.to(n.getId());r.getShellServices().setBackNavigation()})}e.attachAfterNavigate(function(){n(true)});e.to(this.oPage.getId())}catch(t){s(false);e.info(t)}})};return r}(s),f=P(g.prototype,"viewState",[c],{configurable:true,enumerable:true,writable:true,initializer:null}),g))||u);return y},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/RootViewBaseController-dbg", ["sap/base/Log", "sap/fe/core/BaseController", "sap/fe/core/CommonUtils", "sap/fe/core/controllerextensions/Placeholder", "sap/fe/core/controllerextensions/ViewState", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/SizeHelper", "sap/ui/base/BindingParser", "sap/ui/core/routing/HashChanger", "sap/ui/model/json/JSONModel", "sap/ui/model/odata/v4/AnnotationHelper", "sap/ui/thirdparty/URI"], function (Log, BaseController, CommonUtils, Placeholder, ViewState, ClassSupport, SizeHelper, BindingParser, HashChanger, JSONModel, AnnotationHelper, URI) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var usingExtension = ClassSupport.usingExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let RootViewBaseController = (_dec = defineUI5Class("sap.fe.core.rootView.RootViewBaseController"), _dec2 = usingExtension(Placeholder), _dec3 = usingExtension(ViewState), _dec(_class = (_class2 = /*#__PURE__*/function (_BaseController) {
    _inheritsLoose(RootViewBaseController, _BaseController);
    function RootViewBaseController() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _BaseController.call(this, ...args) || this;
      _initializerDefineProperty(_this, "oPlaceholder", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "viewState", _descriptor2, _assertThisInitialized(_this));
      _this.bIsComputingTitleHierachy = false;
      return _this;
    }
    var _proto = RootViewBaseController.prototype;
    _proto.onInit = function onInit() {
      SizeHelper.init();
      this._aHelperModels = [];
    };
    _proto.getPlaceholder = function getPlaceholder() {
      return this.oPlaceholder;
    };
    _proto.attachRouteMatchers = function attachRouteMatchers() {
      this.oPlaceholder.attachRouteMatchers();
      this.getAppComponent().getRoutingService().attachAfterRouteMatched(this._onAfterRouteMatched, this);
    };
    _proto.onExit = function onExit() {
      this.getAppComponent().getRoutingService().detachAfterRouteMatched(this._onAfterRouteMatched, this);
      this.oRouter = undefined;
      SizeHelper.exit();

      // Destroy all JSON models created dynamically for the views
      this._aHelperModels.forEach(function (oModel) {
        oModel.destroy();
      });
    }

    /**
     * Convenience method for getting the resource bundle.
     *
     * @public
     * @returns The resourceModel of the component
     */;
    _proto.getResourceBundle = function getResourceBundle() {
      return this.getOwnerComponent().getModel("i18n").getResourceBundle();
    };
    _proto.getRouter = function getRouter() {
      if (!this.oRouter) {
        this.oRouter = this.getAppComponent().getRouter();
      }
      return this.oRouter;
    };
    _proto._createHelperModel = function _createHelperModel() {
      // We keep a reference on the models created dynamically, as they don't get destroyed
      // automatically when the view is destroyed.
      // This is done during onExit
      const oModel = new JSONModel();
      this._aHelperModels.push(oModel);
      return oModel;
    }

    /**
     * Function waiting for the Right most view to be ready.
     *
     * @memberof sap.fe.core.rootView.BaseController
     * @param oEvent Reference an Event parameter coming from routeMatched event
     * @returns A promise indicating when the right most view is ready
     */;
    _proto.waitForRightMostViewReady = function waitForRightMostViewReady(oEvent) {
      return new Promise(function (resolve) {
        const aContainers = oEvent.getParameter("views"),
          // There can also be reuse components in the view, remove them before processing.
          aFEContainers = [];
        aContainers.forEach(function (oContainer) {
          let oView = oContainer;
          if (oContainer && oContainer.getComponentInstance) {
            const oComponentInstance = oContainer.getComponentInstance();
            oView = oComponentInstance.getRootControl();
          }
          if (oView && oView.getController() && oView.getController().pageReady) {
            aFEContainers.push(oView);
          }
        });
        const oRightMostFEView = aFEContainers[aFEContainers.length - 1];
        if (oRightMostFEView && oRightMostFEView.getController().pageReady.isPageReady()) {
          resolve(oRightMostFEView);
        } else if (oRightMostFEView) {
          oRightMostFEView.getController().pageReady.attachEventOnce("pageReady", function () {
            resolve(oRightMostFEView);
          });
        }
      });
    }

    /**
     * Callback when the navigation is done.
     *  - update the shell title.
     *  - update table scroll.
     *  - call onPageReady on the rightMostView.
     *
     * @param oEvent
     * @name sap.fe.core.rootView.BaseController#_onAfterRouteMatched
     * @memberof sap.fe.core.rootView.BaseController
     */;
    _proto._onAfterRouteMatched = function _onAfterRouteMatched(oEvent) {
      if (!this._oRouteMatchedPromise) {
        this._oRouteMatchedPromise = this.waitForRightMostViewReady(oEvent).then(oView => {
          // The autoFocus is initially disabled on the navContainer or the FCL, so that the focus stays on the Shell menu
          // even if the app takes a long time to launch
          // The first time the view is displayed, we need to enable the autofocus so that it's managed properly during navigation
          const oRootControl = this.getView().getContent()[0];
          if (oRootControl && oRootControl.getAutoFocus && !oRootControl.getAutoFocus()) {
            oRootControl.setProperty("autoFocus", true, true); // Do not mark the container as invalid, otherwise it's re-rendered
          }

          const oAppComponent = this.getAppComponent();
          this._scrollTablesToLastNavigatedItems();
          if (oAppComponent.getEnvironmentCapabilities().getCapabilities().UShell) {
            this._computeTitleHierarchy(oView);
          }
          const bForceFocus = oAppComponent.getRouterProxy().isFocusForced();
          oAppComponent.getRouterProxy().setFocusForced(false); // reset
          if (oView.getController() && oView.getController().onPageReady && oView.getParent().onPageReady) {
            oView.getParent().onPageReady({
              forceFocus: bForceFocus
            });
          }
          if (!bForceFocus) {
            // Try to restore the focus on where it was when we last visited the current hash
            oAppComponent.getRouterProxy().restoreFocusForCurrentHash();
          }
          if (this.onContainerReady) {
            this.onContainerReady();
          }
        }).catch(function (oError) {
          Log.error("An error occurs while computing the title hierarchy and calling focus method", oError);
        }).finally(() => {
          this._oRouteMatchedPromise = null;
        });
      }
    }

    /**
     * This function returns the TitleHierarchy cache ( or initializes it if undefined).
     *
     * @name sap.fe.core.rootView.BaseController#_getTitleHierarchyCache
     * @memberof sap.fe.core.rootView.BaseController
     * @returns  The TitleHierarchy cache
     */;
    _proto._getTitleHierarchyCache = function _getTitleHierarchyCache() {
      if (!this.oTitleHierarchyCache) {
        this.oTitleHierarchyCache = {};
      }
      return this.oTitleHierarchyCache;
    }

    /**
     * This function returns a titleInfo object.
     *
     * @memberof sap.fe.core.rootView.BaseController
     * @param title The application's title
     * @param subtitle The application's subTitle
     * @param sIntent The intent path to be redirected to
     * @param icon The application's icon
     * @returns The title information
     */;
    _proto._computeTitleInfo = function _computeTitleInfo(title, subtitle, sIntent) {
      let icon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
      const aParts = sIntent.split("/");
      if (aParts[aParts.length - 1].indexOf("?") === -1) {
        sIntent += "?restoreHistory=true";
      } else {
        sIntent += "&restoreHistory=true";
      }
      return {
        title: title,
        subtitle: subtitle,
        intent: sIntent,
        icon: icon
      };
    };
    _proto._formatTitle = function _formatTitle(displayMode, titleValue, titleDescription) {
      let formattedTitle = "";
      switch (displayMode) {
        case "Value":
          formattedTitle = `${titleValue}`;
          break;
        case "ValueDescription":
          formattedTitle = `${titleValue} (${titleDescription})`;
          break;
        case "DescriptionValue":
          formattedTitle = `${titleDescription} (${titleValue})`;
          break;
        case "Description":
          formattedTitle = `${titleDescription}`;
          break;
        default:
      }
      return formattedTitle;
    }

    /**
     * Fetches the value of the HeaderInfo title for a given path.
     *
     * @param sPath The path to the entity
     * @returns A promise containing the formatted title, or an empty string if no HeaderInfo title annotation is available
     */;
    _proto._fetchTitleValue = async function _fetchTitleValue(sPath) {
      const oAppComponent = this.getAppComponent(),
        oModel = this.getView().getModel(),
        oMetaModel = oAppComponent.getMetaModel(),
        sMetaPath = oMetaModel.getMetaPath(sPath),
        oBindingViewContext = oModel.createBindingContext(sPath),
        sValueExpression = AnnotationHelper.format(oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value`), {
          context: oMetaModel.createBindingContext("/")
        });
      if (!sValueExpression) {
        return Promise.resolve("");
      }
      const sTextExpression = AnnotationHelper.format(oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@com.sap.vocabularies.Common.v1.Text`), {
          context: oMetaModel.createBindingContext("/")
        }),
        oPropertyContext = oMetaModel.getObject(`${sMetaPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@`),
        aPromises = [],
        oValueExpression = BindingParser.complexParser(sValueExpression),
        oPromiseForDisplayMode = new Promise(function (resolve) {
          const displayMode = CommonUtils.computeDisplayMode(oPropertyContext);
          resolve(displayMode);
        });
      aPromises.push(oPromiseForDisplayMode);
      const sValuePath = oValueExpression.parts ? oValueExpression.parts[0].path : oValueExpression.path,
        fnValueFormatter = oValueExpression.formatter,
        oValueBinding = oModel.bindProperty(sValuePath, oBindingViewContext, {
          "$$groupId": "$auto.Heroes"
        });
      oValueBinding.initialize();
      const oPromiseForTitleValue = new Promise(function (resolve) {
        const fnChange = function (oEvent) {
          const sTargetValue = fnValueFormatter ? fnValueFormatter(oEvent.getSource().getValue()) : oEvent.getSource().getValue();
          oValueBinding.detachChange(fnChange);
          resolve(sTargetValue);
        };
        oValueBinding.attachChange(fnChange);
      });
      aPromises.push(oPromiseForTitleValue);
      if (sTextExpression) {
        const oTextExpression = BindingParser.complexParser(sTextExpression);
        let sTextPath = oTextExpression.parts ? oTextExpression.parts[0].path : oTextExpression.path;
        sTextPath = sValuePath.lastIndexOf("/") > -1 ? `${sValuePath.slice(0, sValuePath.lastIndexOf("/"))}/${sTextPath}` : sTextPath;
        const fnTextFormatter = oTextExpression.formatter,
          oTextBinding = oModel.bindProperty(sTextPath, oBindingViewContext, {
            "$$groupId": "$auto.Heroes"
          });
        oTextBinding.initialize();
        const oPromiseForTitleText = new Promise(function (resolve) {
          const fnChange = function (oEvent) {
            const sTargetText = fnTextFormatter ? fnTextFormatter(oEvent.getSource().getValue()) : oEvent.getSource().getValue();
            oTextBinding.detachChange(fnChange);
            resolve(sTargetText);
          };
          oTextBinding.attachChange(fnChange);
        });
        aPromises.push(oPromiseForTitleText);
      }
      try {
        const titleInfo = await Promise.all(aPromises);
        let formattedTitle = "";
        if (typeof titleInfo !== "string") {
          formattedTitle = this._formatTitle(titleInfo[0], titleInfo[1], titleInfo[2]);
        }
        return formattedTitle;
      } catch (error) {
        Log.error("Error while fetching the title from the header info :" + error);
      }
      return "";
    }

    /**
     * Function returning the decoded application-specific hash.
     *
     * @returns Decoded application-specific hash
     */;
    _proto._getAppSpecificHash = function _getAppSpecificHash() {
      // HashChanged isShellNavigationHashChanger
      const hashChanger = HashChanger.getInstance();
      return "hrefForAppSpecificHash" in hashChanger ? URI.decode(hashChanger.hrefForAppSpecificHash("")) : "#/";
    };
    _proto._getHash = function _getHash() {
      return HashChanger.getInstance().getHash();
    }

    /**
     * This function returns titleInformation from a path.
     * It updates the cache to store title information if necessary
     *
     * @name sap.fe.core.rootView.BaseController#getTitleInfoFromPath
     * @memberof sap.fe.core.rootView.BaseController
     * @param {*} sPath path of the context to retrieve title information from MetaModel
     * @returns {Promise}  oTitleinformation returned as promise
     */;
    _proto.getTitleInfoFromPath = function getTitleInfoFromPath(sPath) {
      const oTitleHierarchyCache = this._getTitleHierarchyCache();
      if (oTitleHierarchyCache[sPath]) {
        // The title info is already stored in the cache
        return Promise.resolve(oTitleHierarchyCache[sPath]);
      }
      const oMetaModel = this.getAppComponent().getMetaModel();
      const sEntityPath = oMetaModel.getMetaPath(sPath);
      const sTypeName = oMetaModel.getObject(`${sEntityPath}/@com.sap.vocabularies.UI.v1.HeaderInfo/TypeName`);
      const sAppSpecificHash = this._getAppSpecificHash();
      const sIntent = sAppSpecificHash + sPath.slice(1);
      return this._fetchTitleValue(sPath).then(sTitle => {
        const oTitleInfo = this._computeTitleInfo(sTypeName, sTitle, sIntent);
        oTitleHierarchyCache[sPath] = oTitleInfo;
        return oTitleInfo;
      });
    }

    /**
     * Ensure that the ushell service receives all elements
     * (title, subtitle, intent, icon) as strings.
     *
     * Annotation HeaderInfo allows for binding of title and description
     * (which are used here as title and subtitle) to any element in the entity
     * (being possibly types like boolean, timestamp, double, etc.)
     *
     * Creates a new hierarchy and converts non-string types to string.
     *
     * @param aHierarchy Shell title hierarchy
     * @returns Copy of shell title hierarchy containing all elements as strings
     */;
    _proto._ensureHierarchyElementsAreStrings = function _ensureHierarchyElementsAreStrings(aHierarchy) {
      const aHierarchyShell = [];
      for (const level in aHierarchy) {
        const oHierarchy = aHierarchy[level];
        const oShellHierarchy = {};
        for (const key in oHierarchy) {
          oShellHierarchy[key] = typeof oHierarchy[key] !== "string" ? String(oHierarchy[key]) : oHierarchy[key];
        }
        aHierarchyShell.push(oShellHierarchy);
      }
      return aHierarchyShell;
    };
    _proto._getTargetTypeFromHash = function _getTargetTypeFromHash(sHash) {
      var _oAppComponent$getMan;
      const oAppComponent = this.getAppComponent();
      let sTargetType = "";
      const aRoutes = ((_oAppComponent$getMan = oAppComponent.getManifestEntry("sap.ui5").routing) === null || _oAppComponent$getMan === void 0 ? void 0 : _oAppComponent$getMan.routes) ?? [];
      for (const route of aRoutes) {
        const oRoute = oAppComponent.getRouter().getRoute(route.name);
        if (oRoute !== null && oRoute !== void 0 && oRoute.match(sHash)) {
          const sTarget = Array.isArray(route.target) ? route.target[0] : route.target;
          sTargetType = oAppComponent.getRouter().getTarget(sTarget)._oOptions.name;
          break;
        }
      }
      return sTargetType;
    }

    /**
     * This function updates the shell title after each navigation.
     *
     * @memberof sap.fe.core.rootView.BaseController
     * @param oView The current view
     * @returns A Promise that is resolved when the menu is filled properly
     */;
    _proto._computeTitleHierarchy = function _computeTitleHierarchy(oView) {
      const oAppComponent = this.getAppComponent(),
        oContext = oView.getBindingContext(),
        oCurrentPage = oView.getParent(),
        aTitleInformationPromises = [],
        sAppSpecificHash = this._getAppSpecificHash(),
        manifestAppSettings = oAppComponent.getManifestEntry("sap.app"),
        sAppTitle = manifestAppSettings.title || "",
        sAppSubTitle = manifestAppSettings.subTitle || "",
        appIcon = manifestAppSettings.icon || "";
      let oPageTitleInformation, sNewPath;
      if (oCurrentPage && oCurrentPage._getPageTitleInformation) {
        if (oContext) {
          // If the first page of the application is a LR, use the title and subtitle from the manifest
          if (this._getTargetTypeFromHash("") === "sap.fe.templates.ListReport") {
            aTitleInformationPromises.push(Promise.resolve(this._computeTitleInfo(sAppTitle, sAppSubTitle, sAppSpecificHash, appIcon)));
          }

          // Then manage other pages
          sNewPath = oContext.getPath();
          const aPathParts = sNewPath.split("/");
          let sPath = "";
          aPathParts.shift(); // Remove the first segment (empty string) as it has been managed above
          aPathParts.pop(); // Remove the last segment as it corresponds to the current page and shouldn't appear in the menu

          aPathParts.forEach(sPathPart => {
            sPath += `/${sPathPart}`;
            const oMetaModel = oAppComponent.getMetaModel(),
              sParameterPath = oMetaModel.getMetaPath(sPath),
              bIsParameterized = oMetaModel.getObject(`${sParameterPath}/@com.sap.vocabularies.Common.v1.ResultContext`);
            if (!bIsParameterized) {
              aTitleInformationPromises.push(this.getTitleInfoFromPath(sPath));
            }
          });
        }

        // Current page
        oPageTitleInformation = oCurrentPage._getPageTitleInformation();
        oPageTitleInformation = this._computeTitleInfo(oPageTitleInformation.title, oPageTitleInformation.subtitle, sAppSpecificHash + this._getHash());
        if (oContext) {
          this._getTitleHierarchyCache()[sNewPath] = oPageTitleInformation;
        } else {
          this._getTitleHierarchyCache()[sAppSpecificHash] = oPageTitleInformation;
        }
      } else {
        aTitleInformationPromises.push(Promise.reject("Title information missing in HeaderInfo"));
      }
      return Promise.all(aTitleInformationPromises).then(aTitleInfoHierarchy => {
        // workaround for shell which is expecting all elements being of type string
        const aTitleInfoHierarchyShell = this._ensureHierarchyElementsAreStrings(aTitleInfoHierarchy),
          sTitle = oPageTitleInformation.title;
        aTitleInfoHierarchyShell.reverse();
        oAppComponent.getShellServices().setHierarchy(aTitleInfoHierarchyShell);
        this._setShellMenuTitle(oAppComponent, sTitle, sAppTitle);
      }).catch(function (sErrorMessage) {
        Log.error(sErrorMessage);
      }).finally(() => {
        this.bIsComputingTitleHierachy = false;
      }).catch(function (sErrorMessage) {
        Log.error(sErrorMessage);
      });
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.calculateLayout = function calculateLayout(iNextFCLLevel, sHash, sProposedLayout) {
      let keepCurrentLayout = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      return null;
    }

    /**
     * Callback after a view has been bound to a context.
     *
     * @param oContext The context that has been bound to a view
     */;
    _proto.onContextBoundToView = function onContextBoundToView(oContext) {
      if (oContext) {
        const sDeepestPath = this.getView().getModel("internal").getProperty("/deepestPath"),
          sViewContextPath = oContext.getPath();
        if (!sDeepestPath || sDeepestPath.indexOf(sViewContextPath) !== 0) {
          // There was no previous value for the deepest reached path, or the path
          // for the view isn't a subpath of the previous deepest path --> update
          this.getView().getModel("internal").setProperty("/deepestPath", sViewContextPath, undefined, true);
        }
      }
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.displayErrorPage = function displayErrorPage(sErrorMessage, mParameters) {
      // To be overridden
      return Promise.resolve(true);
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.updateUIStateForView = function updateUIStateForView(oView, FCLLevel) {
      // To be overriden
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto.getInstancedViews = function getInstancedViews() {
      return [];
      // To be overriden
    };
    _proto._scrollTablesToLastNavigatedItems = function _scrollTablesToLastNavigatedItems() {
      // To be overriden
    };
    _proto.isFclEnabled = function isFclEnabled() {
      return false;
    }

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ;
    _proto._setShellMenuTitle = function _setShellMenuTitle(oAppComponent, sTitle, sAppTitle) {
      // To be overriden by FclController
      oAppComponent.getShellServices().setTitle(sTitle);
    };
    _proto.getAppContentContainer = function getAppContentContainer() {
      var _oAppComponent$getMan2, _oAppComponent$getMan3;
      const oAppComponent = this.getAppComponent();
      const appContentId = ((_oAppComponent$getMan2 = oAppComponent.getManifestEntry("sap.ui5").routing) === null || _oAppComponent$getMan2 === void 0 ? void 0 : (_oAppComponent$getMan3 = _oAppComponent$getMan2.config) === null || _oAppComponent$getMan3 === void 0 ? void 0 : _oAppComponent$getMan3.controlId) ?? "appContent";
      return this.getView().byId(appContentId);
    };
    return RootViewBaseController;
  }(BaseController), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "oPlaceholder", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "viewState", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return RootViewBaseController;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/rootView/RootViewBaseController", ["sap/base/Log","sap/fe/core/BaseController","sap/fe/core/CommonUtils","sap/fe/core/controllerextensions/Placeholder","sap/fe/core/controllerextensions/ViewState","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/SizeHelper","sap/ui/base/BindingParser","sap/ui/core/routing/HashChanger","sap/ui/model/json/JSONModel","sap/ui/model/odata/v4/AnnotationHelper","sap/ui/thirdparty/URI"],function(e,t,o,n,i,r,a,s,c,l,u,h){"use strict";var f,p,g,d,m,y,b;var P=r.usingExtension;var C=r.defineUI5Class;function v(e,t,o,n){if(!o)return;Object.defineProperty(e,t,{enumerable:o.enumerable,configurable:o.configurable,writable:o.writable,value:o.initializer?o.initializer.call(n):void 0})}function R(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function _(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;T(e,t)}function T(e,t){T=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return T(e,t)}function H(e,t,o,n,i){var r={};Object.keys(n).forEach(function(e){r[e]=n[e]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(e,t,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(e,t,r);r=null}return r}function w(e,t){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let I=(f=C("sap.fe.core.rootView.RootViewBaseController"),p=P(n),g=P(i),f(d=(m=function(t){_(n,t);function n(){var e;for(var o=arguments.length,n=new Array(o),i=0;i<o;i++){n[i]=arguments[i]}e=t.call(this,...n)||this;v(e,"oPlaceholder",y,R(e));v(e,"viewState",b,R(e));e.bIsComputingTitleHierachy=false;return e}var i=n.prototype;i.onInit=function e(){a.init();this._aHelperModels=[]};i.getPlaceholder=function e(){return this.oPlaceholder};i.attachRouteMatchers=function e(){this.oPlaceholder.attachRouteMatchers();this.getAppComponent().getRoutingService().attachAfterRouteMatched(this._onAfterRouteMatched,this)};i.onExit=function e(){this.getAppComponent().getRoutingService().detachAfterRouteMatched(this._onAfterRouteMatched,this);this.oRouter=undefined;a.exit();this._aHelperModels.forEach(function(e){e.destroy()})};i.getResourceBundle=function e(){return this.getOwnerComponent().getModel("i18n").getResourceBundle()};i.getRouter=function e(){if(!this.oRouter){this.oRouter=this.getAppComponent().getRouter()}return this.oRouter};i._createHelperModel=function e(){const t=new l;this._aHelperModels.push(t);return t};i.waitForRightMostViewReady=function e(t){return new Promise(function(e){const o=t.getParameter("views"),n=[];o.forEach(function(e){let t=e;if(e&&e.getComponentInstance){const o=e.getComponentInstance();t=o.getRootControl()}if(t&&t.getController()&&t.getController().pageReady){n.push(t)}});const i=n[n.length-1];if(i&&i.getController().pageReady.isPageReady()){e(i)}else if(i){i.getController().pageReady.attachEventOnce("pageReady",function(){e(i)})}})};i._onAfterRouteMatched=function t(o){if(!this._oRouteMatchedPromise){this._oRouteMatchedPromise=this.waitForRightMostViewReady(o).then(e=>{const t=this.getView().getContent()[0];if(t&&t.getAutoFocus&&!t.getAutoFocus()){t.setProperty("autoFocus",true,true)}const o=this.getAppComponent();this._scrollTablesToLastNavigatedItems();if(o.getEnvironmentCapabilities().getCapabilities().UShell){this._computeTitleHierarchy(e)}const n=o.getRouterProxy().isFocusForced();o.getRouterProxy().setFocusForced(false);if(e.getController()&&e.getController().onPageReady&&e.getParent().onPageReady){e.getParent().onPageReady({forceFocus:n})}if(!n){o.getRouterProxy().restoreFocusForCurrentHash()}if(this.onContainerReady){this.onContainerReady()}}).catch(function(t){e.error("An error occurs while computing the title hierarchy and calling focus method",t)}).finally(()=>{this._oRouteMatchedPromise=null})}};i._getTitleHierarchyCache=function e(){if(!this.oTitleHierarchyCache){this.oTitleHierarchyCache={}}return this.oTitleHierarchyCache};i._computeTitleInfo=function e(t,o,n){let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:"";const r=n.split("/");if(r[r.length-1].indexOf("?")===-1){n+="?restoreHistory=true"}else{n+="&restoreHistory=true"}return{title:t,subtitle:o,intent:n,icon:i}};i._formatTitle=function e(t,o,n){let i="";switch(t){case"Value":i=`${o}`;break;case"ValueDescription":i=`${o} (${n})`;break;case"DescriptionValue":i=`${n} (${o})`;break;case"Description":i=`${n}`;break;default:}return i};i._fetchTitleValue=async function t(n){const i=this.getAppComponent(),r=this.getView().getModel(),a=i.getMetaModel(),c=a.getMetaPath(n),l=r.createBindingContext(n),h=u.format(a.getObject(`${c}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value`),{context:a.createBindingContext("/")});if(!h){return Promise.resolve("")}const f=u.format(a.getObject(`${c}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@com.sap.vocabularies.Common.v1.Text`),{context:a.createBindingContext("/")}),p=a.getObject(`${c}/@com.sap.vocabularies.UI.v1.HeaderInfo/Title/Value/$Path@`),g=[],d=s.complexParser(h),m=new Promise(function(e){const t=o.computeDisplayMode(p);e(t)});g.push(m);const y=d.parts?d.parts[0].path:d.path,b=d.formatter,P=r.bindProperty(y,l,{$$groupId:"$auto.Heroes"});P.initialize();const C=new Promise(function(e){const t=function(o){const n=b?b(o.getSource().getValue()):o.getSource().getValue();P.detachChange(t);e(n)};P.attachChange(t)});g.push(C);if(f){const e=s.complexParser(f);let t=e.parts?e.parts[0].path:e.path;t=y.lastIndexOf("/")>-1?`${y.slice(0,y.lastIndexOf("/"))}/${t}`:t;const o=e.formatter,n=r.bindProperty(t,l,{$$groupId:"$auto.Heroes"});n.initialize();const i=new Promise(function(e){const t=function(i){const r=o?o(i.getSource().getValue()):i.getSource().getValue();n.detachChange(t);e(r)};n.attachChange(t)});g.push(i)}try{const e=await Promise.all(g);let t="";if(typeof e!=="string"){t=this._formatTitle(e[0],e[1],e[2])}return t}catch(t){e.error("Error while fetching the title from the header info :"+t)}return""};i._getAppSpecificHash=function e(){const t=c.getInstance();return"hrefForAppSpecificHash"in t?h.decode(t.hrefForAppSpecificHash("")):"#/"};i._getHash=function e(){return c.getInstance().getHash()};i.getTitleInfoFromPath=function e(t){const o=this._getTitleHierarchyCache();if(o[t]){return Promise.resolve(o[t])}const n=this.getAppComponent().getMetaModel();const i=n.getMetaPath(t);const r=n.getObject(`${i}/@com.sap.vocabularies.UI.v1.HeaderInfo/TypeName`);const a=this._getAppSpecificHash();const s=a+t.slice(1);return this._fetchTitleValue(t).then(e=>{const n=this._computeTitleInfo(r,e,s);o[t]=n;return n})};i._ensureHierarchyElementsAreStrings=function e(t){const o=[];for(const e in t){const n=t[e];const i={};for(const e in n){i[e]=typeof n[e]!=="string"?String(n[e]):n[e]}o.push(i)}return o};i._getTargetTypeFromHash=function e(t){var o;const n=this.getAppComponent();let i="";const r=((o=n.getManifestEntry("sap.ui5").routing)===null||o===void 0?void 0:o.routes)??[];for(const e of r){const o=n.getRouter().getRoute(e.name);if(o!==null&&o!==void 0&&o.match(t)){const t=Array.isArray(e.target)?e.target[0]:e.target;i=n.getRouter().getTarget(t)._oOptions.name;break}}return i};i._computeTitleHierarchy=function t(o){const n=this.getAppComponent(),i=o.getBindingContext(),r=o.getParent(),a=[],s=this._getAppSpecificHash(),c=n.getManifestEntry("sap.app"),l=c.title||"",u=c.subTitle||"",h=c.icon||"";let f,p;if(r&&r._getPageTitleInformation){if(i){if(this._getTargetTypeFromHash("")==="sap.fe.templates.ListReport"){a.push(Promise.resolve(this._computeTitleInfo(l,u,s,h)))}p=i.getPath();const e=p.split("/");let t="";e.shift();e.pop();e.forEach(e=>{t+=`/${e}`;const o=n.getMetaModel(),i=o.getMetaPath(t),r=o.getObject(`${i}/@com.sap.vocabularies.Common.v1.ResultContext`);if(!r){a.push(this.getTitleInfoFromPath(t))}})}f=r._getPageTitleInformation();f=this._computeTitleInfo(f.title,f.subtitle,s+this._getHash());if(i){this._getTitleHierarchyCache()[p]=f}else{this._getTitleHierarchyCache()[s]=f}}else{a.push(Promise.reject("Title information missing in HeaderInfo"))}return Promise.all(a).then(e=>{const t=this._ensureHierarchyElementsAreStrings(e),o=f.title;t.reverse();n.getShellServices().setHierarchy(t);this._setShellMenuTitle(n,o,l)}).catch(function(t){e.error(t)}).finally(()=>{this.bIsComputingTitleHierachy=false}).catch(function(t){e.error(t)})};i.calculateLayout=function e(t,o,n){let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;return null};i.onContextBoundToView=function e(t){if(t){const e=this.getView().getModel("internal").getProperty("/deepestPath"),o=t.getPath();if(!e||e.indexOf(o)!==0){this.getView().getModel("internal").setProperty("/deepestPath",o,undefined,true)}}};i.displayErrorPage=function e(t,o){return Promise.resolve(true)};i.updateUIStateForView=function e(t,o){};i.getInstancedViews=function e(){return[]};i._scrollTablesToLastNavigatedItems=function e(){};i.isFclEnabled=function e(){return false};i._setShellMenuTitle=function e(t,o,n){t.getShellServices().setTitle(o)};i.getAppContentContainer=function e(){var t,o;const n=this.getAppComponent();const i=((t=n.getManifestEntry("sap.ui5").routing)===null||t===void 0?void 0:(o=t.config)===null||o===void 0?void 0:o.controlId)??"appContent";return this.getView().byId(i)};return n}(t),y=H(m.prototype,"oPlaceholder",[p],{configurable:true,enumerable:true,writable:true,initializer:null}),b=H(m.prototype,"viewState",[g],{configurable:true,enumerable:true,writable:true,initializer:null}),m))||d);return I},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/AsyncComponentServiceFactory-dbg", ["sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory"], function (Service, ServiceFactory) {
  "use strict";

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let AsyncComponentService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(AsyncComponentService, _Service);
    function AsyncComponentService() {
      return _Service.apply(this, arguments) || this;
    }
    var _proto = AsyncComponentService.prototype;
    // !: means that we know it will be assigned before usage
    _proto.init = function init() {
      this.initPromise = new Promise((resolve, reject) => {
        this.resolveFn = resolve;
        this.rejectFn = reject;
      });
      const oContext = this.getContext();
      const oComponent = oContext.scopeObject;
      const oServices = oComponent._getManifestEntry("/sap.ui5/services", true);
      Promise.all(Object.keys(oServices).filter(sServiceKey => oServices[sServiceKey].startup === "waitFor" && oServices[sServiceKey].factoryName !== "sap.fe.core.services.AsyncComponentService").map(sServiceKey => {
        return oComponent.getService(sServiceKey).then(oServiceInstance => {
          const sMethodName = `get${sServiceKey[0].toUpperCase()}${sServiceKey.substr(1)}`;
          if (!oComponent.hasOwnProperty(sMethodName)) {
            oComponent[sMethodName] = function () {
              return oServiceInstance;
            };
          }
        });
      })).then(() => {
        return oComponent.pRootControlLoaded || Promise.resolve();
      }).then(() => {
        // notifiy the component
        if (oComponent.onServicesStarted) {
          oComponent.onServicesStarted();
        }
        this.resolveFn(this);
      }).catch(this.rejectFn);
    };
    return AsyncComponentService;
  }(Service);
  let AsyncComponentServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(AsyncComponentServiceFactory, _ServiceFactory);
    function AsyncComponentServiceFactory() {
      return _ServiceFactory.apply(this, arguments) || this;
    }
    var _proto2 = AsyncComponentServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const asyncComponentService = new AsyncComponentService(oServiceContext);
      return asyncComponentService.initPromise;
    };
    return AsyncComponentServiceFactory;
  }(ServiceFactory);
  return AsyncComponentServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/AsyncComponentServiceFactory", ["sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory"],function(t,e){"use strict";function r(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;n(t,e)}function n(t,e){n=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,r){e.__proto__=r;return e};return n(t,e)}let o=function(t){r(e,t);function e(){return t.apply(this,arguments)||this}var n=e.prototype;n.init=function t(){this.initPromise=new Promise((t,e)=>{this.resolveFn=t;this.rejectFn=e});const e=this.getContext();const r=e.scopeObject;const n=r._getManifestEntry("/sap.ui5/services",true);Promise.all(Object.keys(n).filter(t=>n[t].startup==="waitFor"&&n[t].factoryName!=="sap.fe.core.services.AsyncComponentService").map(t=>r.getService(t).then(e=>{const n=`get${t[0].toUpperCase()}${t.substr(1)}`;if(!r.hasOwnProperty(n)){r[n]=function(){return e}}}))).then(()=>r.pRootControlLoaded||Promise.resolve()).then(()=>{if(r.onServicesStarted){r.onServicesStarted()}this.resolveFn(this)}).catch(this.rejectFn)};return e}(t);let i=function(t){r(e,t);function e(){return t.apply(this,arguments)||this}var n=e.prototype;n.createInstance=function t(e){const r=new o(e);return r.initPromise};return e}(e);return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/CacheHandlerServiceFactory-dbg", ["sap/base/strings/hash", "sap/ui/core/cache/CacheManager", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory"], function (hash, CacheManager, Service, ServiceFactory) {
  "use strict";

  var _exports = {};
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function getMetadataETag(sUrl, sETag, mUpdatedMetaModelETags) {
    return new Promise(function (resolve) {
      // There is an Url in the FE cache, that's not in the MetaModel yet -> we need to check the ETag
      jQuery.ajax(sUrl, {
        method: "GET"
      }).done(function (oResponse, sTextStatus, jqXHR) {
        // ETag is not the same -> invalid
        // ETag is the same -> valid
        // If ETag is available use it, otherwise use Last-Modified
        mUpdatedMetaModelETags[sUrl] = jqXHR.getResponseHeader("ETag") || jqXHR.getResponseHeader("Last-Modified");
        resolve(sETag === mUpdatedMetaModelETags[sUrl]);
      }).fail(function () {
        // Case 2z - Make sure we update the map so that we invalidate the cache
        mUpdatedMetaModelETags[sUrl] = "";
        resolve(false);
      });
    });
  }
  let CacheHandlerService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(CacheHandlerService, _Service);
    function CacheHandlerService() {
      return _Service.apply(this, arguments) || this;
    }
    _exports.CacheHandlerService = CacheHandlerService;
    var _proto = CacheHandlerService.prototype;
    _proto.init = function init() {
      const oContext = this.getContext();
      this.oFactory = oContext.factory;
      const mSettings = oContext.settings;
      if (!mSettings.metaModel) {
        throw new Error("a `metaModel` property is expected when instantiating the CacheHandlerService");
      }
      this.oMetaModel = mSettings.metaModel;
      this.oAppComponent = mSettings.appComponent;
      this.oComponent = mSettings.component;
      this.initPromise = this.oMetaModel.fetchEntityContainer().then(() => {
        return this;
      });
      this.mCacheNeedsInvalidate = {};
    };
    _proto.exit = function exit() {
      // Deregister global instance
      this.oFactory.removeGlobalInstance(this.oMetaModel);
    };
    _proto.validateCacheKey = async function validateCacheKey(sCacheIdentifier, oComponent) {
      // Keep track if the cache will anyway need to be updated
      let bCacheNeedUpdate = true;
      let sCacheKey;
      try {
        const mCacheOutput = await CacheManager.get(sCacheIdentifier);
        // We provide a default key so that an xml view cache is written
        const mMetaModelETags = this.getETags(oComponent);
        sCacheKey = JSON.stringify(mMetaModelETags);
        // Case #1a - No cache, so mCacheOuput is empty, cacheKey = current metamodel ETags
        if (mCacheOutput) {
          // Case #2 - Cache entry found, check if it's still valid
          const mUpdatedMetaModelETags = {};
          const mCachedETags = JSON.parse(mCacheOutput.cachedETags);
          const aValidETags = await Promise.all(Object.keys(mCachedETags).map(function (sUrl) {
            // Check validity of every single Url that's in the FE Cache object
            if (mCachedETags[sUrl]) {
              if (mMetaModelETags[sUrl]) {
                // Case #2a - Same number of ETags in the cache and in the metadata
                mUpdatedMetaModelETags[sUrl] = mMetaModelETags[sUrl];
                return mCachedETags[sUrl] === mMetaModelETags[sUrl];
              } else {
                // Case #2b - No ETag in the cache for that URL, cachedETags was enhanced
                return getMetadataETag(sUrl, mCachedETags[sUrl], mUpdatedMetaModelETags);
              }
            } else {
              // Case #2z - Last Templating added an URL without ETag
              mUpdatedMetaModelETags[sUrl] = mMetaModelETags[sUrl];
              return mCachedETags[sUrl] === mMetaModelETags[sUrl];
            }
          }));
          bCacheNeedUpdate = aValidETags.indexOf(false) >= 0;
          // Case #2a - Same number of ETags and all valid -> we return the viewCacheKey
          // Case #2b - Different number of ETags and still all valid -> we return the viewCacheKey
          // Case #2c - Same number of ETags but different values, main service Etag has changed, use that as cache key
          // Case #2d - Different number of ETags but different value, main service Etag or linked service Etag has changed, new ETags should be used as cacheKey
          // Case #2z - Cache has an invalid Etag - if there is an Etag provided from MetaModel use it as cacheKey
          if (Object.keys(mUpdatedMetaModelETags).some(function (sUrl) {
            return !mUpdatedMetaModelETags[sUrl];
          })) {
            // At least one of the MetaModel URLs doesn't provide an ETag, so no caching
            sCacheKey = null;
          } else {
            sCacheKey = bCacheNeedUpdate ? JSON.stringify(mUpdatedMetaModelETags) : mCacheOutput.viewCacheKey;
          }
        } else if (Object.keys(mMetaModelETags).some(function (sUrl) {
          return !mMetaModelETags[sUrl];
        })) {
          // Check if cache can be used (all the metadata and annotations have to provide at least a ETag or a Last-Modified header)
          // Case #1-b - No Cache, mCacheOuput is empty, but metamodel etags cannot be used, so no caching
          bCacheNeedUpdate = true;
          sCacheKey = null;
        }
      } catch (e) {
        // Don't use view cache in case of issues with the LRU cache
        bCacheNeedUpdate = true;
        sCacheKey = null;
      }
      this.mCacheNeedsInvalidate[sCacheIdentifier] = bCacheNeedUpdate;
      return sCacheKey;
    };
    _proto.invalidateIfNeeded = function invalidateIfNeeded(sCacheKeys, sCacheIdentifier, oComponent) {
      // Check FE cache after XML view is processed completely
      const sDataSourceETags = JSON.stringify(this.getETags(oComponent));
      if (this.mCacheNeedsInvalidate[sCacheIdentifier] || sCacheKeys && sCacheKeys !== sDataSourceETags) {
        // Something in the sources and/or its ETags changed -> update the FE cache
        const mCacheKeys = {};
        // New ETags that need to be verified, may differ from the one used to generate the view
        mCacheKeys.cachedETags = sDataSourceETags;
        // Old ETags that are used for the xml view cache as key
        mCacheKeys.viewCacheKey = sCacheKeys;
        return CacheManager.set(sCacheIdentifier, mCacheKeys);
      } else {
        return Promise.resolve();
      }
    };
    _proto.getETags = function getETags(oComponent) {
      const mMetaModelETags = this.oMetaModel.getETags();
      // ETags from UI5 are either a Date or a string, let's rationalize that
      Object.keys(mMetaModelETags).forEach(function (sMetaModelKey) {
        if (mMetaModelETags[sMetaModelKey] instanceof Date) {
          // MetaModel contains a Last-Modified timestamp for the URL
          mMetaModelETags[sMetaModelKey] = mMetaModelETags[sMetaModelKey].toISOString();
        }
      });

      // add also the manifest hash as UI5 only considers the root component hash
      const oManifestContent = this.oAppComponent.getManifest();
      const sManifestHash = hash(JSON.stringify({
        sapApp: oManifestContent["sap.app"],
        viewData: oComponent.getViewData()
      }));
      mMetaModelETags["manifest"] = sManifestHash;
      return mMetaModelETags;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    return CacheHandlerService;
  }(Service);
  _exports.CacheHandlerService = CacheHandlerService;
  let CacheHandlerServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(CacheHandlerServiceFactory, _ServiceFactory);
    function CacheHandlerServiceFactory() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ServiceFactory.call(this, ...args) || this;
      _this._oInstanceRegistry = {};
      return _this;
    }
    var _proto2 = CacheHandlerServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const sMetaModelId = oServiceContext.settings.metaModel.getId();
      let cacheHandlerInstance = this._oInstanceRegistry[sMetaModelId];
      if (!cacheHandlerInstance) {
        this._oInstanceRegistry[sMetaModelId] = cacheHandlerInstance = new CacheHandlerService(Object.assign({
          factory: this,
          scopeObject: null,
          scopeType: "service"
        }, oServiceContext));
      }
      return cacheHandlerInstance.initPromise.then(() => {
        return this._oInstanceRegistry[sMetaModelId];
      }).catch(e => {
        // In case of error delete the global instance;
        this._oInstanceRegistry[sMetaModelId] = null;
        throw e;
      });
    };
    _proto2.getInstance = function getInstance(oMetaModel) {
      return this._oInstanceRegistry[oMetaModel.getId()];
    };
    _proto2.removeGlobalInstance = function removeGlobalInstance(oMetaModel) {
      this._oInstanceRegistry[oMetaModel.getId()] = null;
    };
    return CacheHandlerServiceFactory;
  }(ServiceFactory);
  return CacheHandlerServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/CacheHandlerServiceFactory", ["sap/base/strings/hash","sap/ui/core/cache/CacheManager","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory"],function(e,t,n,i){"use strict";var s={};function o(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;r(e,t)}function r(e,t){r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return r(e,t)}function a(e,t,n){return new Promise(function(i){jQuery.ajax(e,{method:"GET"}).done(function(s,o,r){n[e]=r.getResponseHeader("ETag")||r.getResponseHeader("Last-Modified");i(t===n[e])}).fail(function(){n[e]="";i(false)})})}let c=function(n){o(i,n);function i(){return n.apply(this,arguments)||this}s.CacheHandlerService=i;var r=i.prototype;r.init=function e(){const t=this.getContext();this.oFactory=t.factory;const n=t.settings;if(!n.metaModel){throw new Error("a `metaModel` property is expected when instantiating the CacheHandlerService")}this.oMetaModel=n.metaModel;this.oAppComponent=n.appComponent;this.oComponent=n.component;this.initPromise=this.oMetaModel.fetchEntityContainer().then(()=>this);this.mCacheNeedsInvalidate={}};r.exit=function e(){this.oFactory.removeGlobalInstance(this.oMetaModel)};r.validateCacheKey=async function e(n,i){let s=true;let o;try{const e=await t.get(n);const r=this.getETags(i);o=JSON.stringify(r);if(e){const t={};const n=JSON.parse(e.cachedETags);const i=await Promise.all(Object.keys(n).map(function(e){if(n[e]){if(r[e]){t[e]=r[e];return n[e]===r[e]}else{return a(e,n[e],t)}}else{t[e]=r[e];return n[e]===r[e]}}));s=i.indexOf(false)>=0;if(Object.keys(t).some(function(e){return!t[e]})){o=null}else{o=s?JSON.stringify(t):e.viewCacheKey}}else if(Object.keys(r).some(function(e){return!r[e]})){s=true;o=null}}catch(e){s=true;o=null}this.mCacheNeedsInvalidate[n]=s;return o};r.invalidateIfNeeded=function e(n,i,s){const o=JSON.stringify(this.getETags(s));if(this.mCacheNeedsInvalidate[i]||n&&n!==o){const e={};e.cachedETags=o;e.viewCacheKey=n;return t.set(i,e)}else{return Promise.resolve()}};r.getETags=function t(n){const i=this.oMetaModel.getETags();Object.keys(i).forEach(function(e){if(i[e]instanceof Date){i[e]=i[e].toISOString()}});const s=this.oAppComponent.getManifest();const o=e(JSON.stringify({sapApp:s["sap.app"],viewData:n.getViewData()}));i["manifest"]=o;return i};r.getInterface=function e(){return this};return i}(n);s.CacheHandlerService=c;let u=function(e){o(t,e);function t(){var t;for(var n=arguments.length,i=new Array(n),s=0;s<n;s++){i[s]=arguments[s]}t=e.call(this,...i)||this;t._oInstanceRegistry={};return t}var n=t.prototype;n.createInstance=function e(t){const n=t.settings.metaModel.getId();let i=this._oInstanceRegistry[n];if(!i){this._oInstanceRegistry[n]=i=new c(Object.assign({factory:this,scopeObject:null,scopeType:"service"},t))}return i.initPromise.then(()=>this._oInstanceRegistry[n]).catch(e=>{this._oInstanceRegistry[n]=null;throw e})};n.getInstance=function e(t){return this._oInstanceRegistry[t.getId()]};n.removeGlobalInstance=function e(t){this._oInstanceRegistry[t.getId()]=null};return t}(i);return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/EnvironmentServiceFactory-dbg", ["sap/suite/ui/commons/collaboration/CollaborationHelper", "sap/ui/core/Core", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory", "sap/ui/VersionInfo", "../converters/MetaModelConverter"], function (CollaborationHelper, Core, Service, ServiceFactory, VersionInfo, MetaModelConverter) {
  "use strict";

  var _exports = {};
  var DefaultEnvironmentCapabilities = MetaModelConverter.DefaultEnvironmentCapabilities;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let EnvironmentCapabilitiesService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(EnvironmentCapabilitiesService, _Service);
    function EnvironmentCapabilitiesService() {
      return _Service.apply(this, arguments) || this;
    }
    _exports.EnvironmentCapabilitiesService = EnvironmentCapabilitiesService;
    var _proto = EnvironmentCapabilitiesService.prototype;
    // !: means that we know it will be assigned before usage
    _proto.init = function init() {
      this.initPromise = new Promise((resolve, reject) => {
        this.resolveFn = resolve;
        this.rejectFn = reject;
      });
      const oContext = this.getContext();
      this.environmentCapabilities = Object.assign({}, DefaultEnvironmentCapabilities);
      VersionInfo.load().then(async versionInfo => {
        this.environmentCapabilities.Chart = !!versionInfo.libraries.find(lib => lib.name === "sap.viz");
        this.environmentCapabilities.MicroChart = !!versionInfo.libraries.find(lib => lib.name === "sap.suite.ui.microchart");
        this.environmentCapabilities.UShell = !!(sap && sap.ushell && sap.ushell.Container);
        this.environmentCapabilities.IntentBasedNavigation = !!(sap && sap.ushell && sap.ushell.Container);
        this.environmentCapabilities.InsightsSupported = !!versionInfo.libraries.find(lib => lib.name === "sap.insights") && (await getInsightsEnabled());
        this.environmentCapabilities = Object.assign(this.environmentCapabilities, oContext.settings);
        this.resolveFn(this);
        return null;
      }).catch(this.rejectFn);
    };
    EnvironmentCapabilitiesService.resolveLibrary = async function resolveLibrary(libraryName) {
      return new Promise(function (resolve) {
        try {
          Core.loadLibrary(`${libraryName.replace(/\./g, "/")}`, {
            async: true
          }).then(function () {
            resolve(true);
          }).catch(function () {
            resolve(false);
          });
        } catch (e) {
          resolve(false);
        }
      });
    };
    _proto.setCapabilities = function setCapabilities(oCapabilities) {
      this.environmentCapabilities = oCapabilities;
    };
    _proto.setCapability = function setCapability(capability, value) {
      this.environmentCapabilities[capability] = value;
    };
    _proto.getCapabilities = function getCapabilities() {
      return this.environmentCapabilities;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    return EnvironmentCapabilitiesService;
  }(Service);
  _exports.EnvironmentCapabilitiesService = EnvironmentCapabilitiesService;
  let EnvironmentServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(EnvironmentServiceFactory, _ServiceFactory);
    function EnvironmentServiceFactory() {
      return _ServiceFactory.apply(this, arguments) || this;
    }
    _exports.EnvironmentServiceFactory = EnvironmentServiceFactory;
    var _proto2 = EnvironmentServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const environmentCapabilitiesService = new EnvironmentCapabilitiesService(oServiceContext);
      return environmentCapabilitiesService.initPromise;
    };
    return EnvironmentServiceFactory;
  }(ServiceFactory);
  /**
   * Checks if insights are enabled on the home page.
   *
   * @returns True if insights are enabled on the home page.
   */
  _exports.EnvironmentServiceFactory = EnvironmentServiceFactory;
  async function getInsightsEnabled() {
    // insights is enabled
    return new Promise(async resolve => {
      try {
        // getServiceAsync from suite/insights checks to see if myHome is configured with insights and returns a cardHelperInstance if so.
        const isLibAvailable = await EnvironmentCapabilitiesService.resolveLibrary("sap.insights");
        if (isLibAvailable) {
          sap.ui.require(["sap/insights/CardHelper"], async CardHelper => {
            try {
              await CardHelper.getServiceAsync("UIService");
              resolve(!(await getMSTeamsActive()));
            } catch {
              resolve(false);
            }
          });
        } else {
          resolve(false);
        }
      } catch {
        resolve(false);
      }
    });
  }

  /**
   * Checks if the application is opened on Microsoft Teams.
   *
   * @returns True if the application is opened on Microsoft Teams.
   */
  _exports.getInsightsEnabled = getInsightsEnabled;
  async function getMSTeamsActive() {
    let isTeamsModeActive = false;
    try {
      isTeamsModeActive = await CollaborationHelper.isTeamsModeActive();
    } catch {
      return false;
    }
    return isTeamsModeActive;
  }
  _exports.getMSTeamsActive = getMSTeamsActive;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/EnvironmentServiceFactory", ["sap/suite/ui/commons/collaboration/CollaborationHelper","sap/ui/core/Core","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory","sap/ui/VersionInfo","../converters/MetaModelConverter"],function(e,t,i,n,r,a){"use strict";var s={};var o=a.DefaultEnvironmentCapabilities;function c(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;l(e,t)}function l(e,t){l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,i){t.__proto__=i;return t};return l(e,t)}let p=function(e){c(i,e);function i(){return e.apply(this,arguments)||this}s.EnvironmentCapabilitiesService=i;var n=i.prototype;n.init=function e(){this.initPromise=new Promise((e,t)=>{this.resolveFn=e;this.rejectFn=t});const t=this.getContext();this.environmentCapabilities=Object.assign({},o);r.load().then(async e=>{this.environmentCapabilities.Chart=!!e.libraries.find(e=>e.name==="sap.viz");this.environmentCapabilities.MicroChart=!!e.libraries.find(e=>e.name==="sap.suite.ui.microchart");this.environmentCapabilities.UShell=!!(sap&&sap.ushell&&sap.ushell.Container);this.environmentCapabilities.IntentBasedNavigation=!!(sap&&sap.ushell&&sap.ushell.Container);this.environmentCapabilities.InsightsSupported=!!e.libraries.find(e=>e.name==="sap.insights")&&await h();this.environmentCapabilities=Object.assign(this.environmentCapabilities,t.settings);this.resolveFn(this);return null}).catch(this.rejectFn)};i.resolveLibrary=async function e(i){return new Promise(function(e){try{t.loadLibrary(`${i.replace(/\./g,"/")}`,{async:true}).then(function(){e(true)}).catch(function(){e(false)})}catch(t){e(false)}})};n.setCapabilities=function e(t){this.environmentCapabilities=t};n.setCapability=function e(t,i){this.environmentCapabilities[t]=i};n.getCapabilities=function e(){return this.environmentCapabilities};n.getInterface=function e(){return this};return i}(i);s.EnvironmentCapabilitiesService=p;let u=function(e){c(t,e);function t(){return e.apply(this,arguments)||this}s.EnvironmentServiceFactory=t;var i=t.prototype;i.createInstance=function e(t){const i=new p(t);return i.initPromise};return t}(n);s.EnvironmentServiceFactory=u;async function h(){return new Promise(async e=>{try{const t=await p.resolveLibrary("sap.insights");if(t){sap.ui.require(["sap/insights/CardHelper"],async t=>{try{await t.getServiceAsync("UIService");e(!await v())}catch{e(false)}})}else{e(false)}}catch{e(false)}})}s.getInsightsEnabled=h;async function v(){let t=false;try{t=await e.isTeamsModeActive()}catch{return false}return t}s.getMSTeamsActive=v;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/NavigationServiceFactory-dbg", ["sap/fe/navigation/NavigationHandler", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory"], function (NavigationHandler, Service, ServiceFactory) {
  "use strict";

  var _exports = {};
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let NavigationService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(NavigationService, _Service);
    function NavigationService() {
      return _Service.apply(this, arguments) || this;
    }
    _exports.NavigationService = NavigationService;
    var _proto = NavigationService.prototype;
    _proto.init = function init() {
      const oContext = this.getContext(),
        oComponent = oContext && oContext.scopeObject;
      this.oNavHandler = new NavigationHandler(oComponent);
      this.oNavHandler.setModel(oComponent.getModel());
      this.initPromise = Promise.resolve(this);
    };
    _proto.exit = function exit() {
      this.oNavHandler.destroy();
    }

    /**
     * Triggers a cross-app navigation after saving the inner and the cross-app states.
     *
     * @private
     * @ui5-restricted
     * @param sSemanticObject Semantic object of the target app
     * @param sActionName Action of the target app
     * @param [vNavigationParameters] Navigation parameters as an object with key/value pairs or as a string representation of
     *        such an object. If passed as an object, the properties are not checked against the <code>IsPotentialSensitive</code> or
     *        <code>Measure</code> type.
     * @param [oInnerAppData] Object for storing current state of the app
     * @param [fnOnError] Callback that is called if an error occurs during navigation <br>
     * @param [oExternalAppData] Object for storing the state which will be forwarded to the target component.
     * @param [sNavMode] Argument is used to overwrite the FLP-configured target for opening a URL. If used, only the
     *        <code>explace</code> or <code>inplace</code> values are allowed. Any other value will lead to an exception
     *        <code>NavigationHandler.INVALID_NAV_MODE</code>.
     */;
    _proto.navigate = function navigate(sSemanticObject, sActionName, vNavigationParameters, oInnerAppData, fnOnError, oExternalAppData, sNavMode) {
      // TODO: Navigation Handler does not handle navigation without a context
      // but in v4 DataFieldForIBN with requiresContext false can trigger a navigation without any context
      // This should be handled
      this.oNavHandler.navigate(sSemanticObject, sActionName, vNavigationParameters, oInnerAppData, fnOnError, oExternalAppData, sNavMode);
    }

    /**
     * Parses the incoming URL and returns a Promise.
     *
     * @returns A Promise object which returns the
     * extracted app state, the startup parameters, and the type of navigation when execution is successful,
     * @private
     * @ui5-restricted
     */;
    _proto.parseNavigation = function parseNavigation() {
      return this.oNavHandler.parseNavigation();
    }

    /**
     * Processes navigation-related tasks related to beforePopoverOpens event handling for the SmartLink control and returns a Promise object.
     *
     * @param oTableEventParameters The parameters made available by the SmartTable control when the SmartLink control has been clicked,
     *        an instance of a PopOver object
     * @param sSelectionVariant Stringified JSON object as returned, for example, from getDataSuiteFormat() of the SmartFilterBar control
     * @param [mInnerAppData] Object containing the current state of the app. If provided, opening the Popover is deferred until the
     *        inner app data is saved in a consistent way.
     * @returns A Promise object to monitor when all actions of the function have been executed; if the execution is successful, the
     *          modified oTableEventParameters is returned; if an error occurs, an error object of type
     *          {@link sap.fe.navigation.NavError} is returned
     * @private
     */;
    _proto._processBeforeSmartLinkPopoverOpens = function _processBeforeSmartLinkPopoverOpens(oTableEventParameters, sSelectionVariant, mInnerAppData) {
      return this.oNavHandler.processBeforeSmartLinkPopoverOpens(oTableEventParameters, sSelectionVariant, mInnerAppData);
    }

    /**
     * Processes selectionVariant string and returns a Promise object (semanticAttributes and AppStateKey).
     *
     * @param sSelectionVariant Stringified JSON object
     * @returns A Promise object to monitor when all actions of the function have been executed; if the execution is successful, the
     *          semanticAttributes as well as the appStateKey are returned; if an error occurs, an error object of type
     *          {@link sap.fe.navigation.NavError} is returned
     * <br>
     * @example <code>
     *
     * 		var oSelectionVariant = new sap.fe.navigation.SelectionVariant();
     * 		oSelectionVariant.addSelectOption("CompanyCode", "I", "EQ", "0001");
     * 		oSelectionVariant.addSelectOption("Customer", "I", "EQ", "C0001");
     * 		var sSelectionVariant= oSelectionVariant.toJSONString();
     *
     * 		var oNavigationHandler = new sap.fe.navigation.NavigationHandler(oController);
     * 		var oPromiseObject = oNavigationHandler._getAppStateKeyAndUrlParameters(sSelectionVariant);
     *
     * 		oPromiseObject.done(function(oSemanticAttributes, sAppStateKey){
     * 			// here you can add coding that should run after all app state and the semantic attributes have been returned.
     * 		});
     *
     * 		oPromiseObject.fail(function(oError){
     * 			//some error handling
     * 		});
     *
     * </code>
     * @private
     * @ui5-restricted
     */;
    _proto.getAppStateKeyAndUrlParameters = function getAppStateKeyAndUrlParameters(sSelectionVariant) {
      return this.oNavHandler._getAppStateKeyAndUrlParameters(sSelectionVariant);
    }

    /**
     * Gets the application specific technical parameters.
     *
     * @returns Containing the technical parameters.
     * @private
     * @ui5-restricted
     */;
    _proto.getTechnicalParameters = function getTechnicalParameters() {
      return this.oNavHandler.getTechnicalParameters();
    }

    /**
     * Sets the application specific technical parameters. Technical parameters will not be added to the selection variant passed to the
     * application.
     * As a default sap-system, sap-ushell-defaultedParameterNames and hcpApplicationId are considered as technical parameters.
     *
     * @param aTechnicalParameters List of parameter names to be considered as technical parameters. <code>null</code> or
     *        <code>undefined</code> may be used to reset the complete list.
     * @private
     * @ui5-restricted
     */;
    _proto.setTechnicalParameters = function setTechnicalParameters(aTechnicalParameters) {
      this.oNavHandler.setTechnicalParameters(aTechnicalParameters);
    }

    /**
     * Sets the model that is used for verification of sensitive information. If the model is not set, the unnamed component model is used for the
     * verification of sensitive information.
     *
     * @private
     * @ui5-restricted
     * @param oModel Model For checking sensitive information
     */;
    _proto.setModel = function setModel(oModel) {
      this.oNavHandler.setModel(oModel);
    }

    /**
     * Changes the URL according to the current app state and stores the app state for later retrieval.
     *
     * @private
     * @ui5-restricted
     * @param mInnerAppData Object containing the current state of the app
     * @param [bImmediateHashReplace=true] If set to false, the inner app hash will not be replaced until storing is successful; do not
     *        set to false if you cannot react to the resolution of the Promise, for example, when calling the beforeLinkPressed event
     * @param [bSkipHashReplace=false] If set to true, the inner app hash will not be replaced in the storeInnerAppState. Also the bImmediateHashReplace
     * 		  will be ignored.
     * @returns A Promise object to monitor when all the actions of the function have been executed; if the execution is successful, the
     *          app state key is returned; if an error occurs, an object of type {@link sap.fe.navigation.NavError} is
     *          returned
     */;
    _proto.storeInnerAppStateAsync = function storeInnerAppStateAsync(mInnerAppData, bImmediateHashReplace, bSkipHashReplace) {
      // safely converting JQuerry deferred to ES6 promise
      return new Promise((resolve, reject) => this.oNavHandler.storeInnerAppStateAsync(mInnerAppData, bImmediateHashReplace, bSkipHashReplace).then(resolve, reject));
    }

    /**
     * Changes the URL according to the current app state and stores the app state for later retrieval.
     *
     * @private
     * @ui5-restricted
     * @param mInnerAppData Object containing the current state of the app
     * @param [bImmediateHashReplace=false] If set to false, the inner app hash will not be replaced until storing is successful; do not
     * @returns An object containing the appStateId and a promise object to monitor when all the actions of the function have been
     * executed; Please note that the appStateKey may be undefined or empty.
     */;
    _proto.storeInnerAppStateWithImmediateReturn = function storeInnerAppStateWithImmediateReturn(mInnerAppData, bImmediateHashReplace) {
      return this.oNavHandler.storeInnerAppStateWithImmediateReturn(mInnerAppData, bImmediateHashReplace);
    }

    /**
     * Changes the URL according to the current sAppStateKey. As an reaction route change event will be triggered.
     *
     * @private
     * @ui5-restricted
     * @param sAppStateKey The new app state key.
     */;
    _proto.replaceHash = function replaceHash(sAppStateKey) {
      this.oNavHandler.replaceHash(sAppStateKey);
    };
    _proto.replaceInnerAppStateKey = function replaceInnerAppStateKey(sAppHash, sAppStateKey) {
      return this.oNavHandler._replaceInnerAppStateKey(sAppHash, sAppStateKey);
    }

    /**
     * Get single values from SelectionVariant for url parameters.
     *
     * @private
     * @ui5-restricted
     * @param [vSelectionVariant]
     * @param [vSelectionVariant.oUrlParamaters]
     * @returns The url parameters
     */;
    _proto.getUrlParametersFromSelectionVariant = function getUrlParametersFromSelectionVariant(vSelectionVariant) {
      return this.oNavHandler._getURLParametersFromSelectionVariant(vSelectionVariant);
    }

    /**
     * Save app state and return immediately without waiting for response.
     *
     * @private
     * @ui5-restricted
     * @param oInSelectionVariant Instance of sap.fe.navigation.SelectionVariant
     * @returns AppState key
     */;
    _proto.saveAppStateWithImmediateReturn = function saveAppStateWithImmediateReturn(oInSelectionVariant) {
      if (oInSelectionVariant) {
        const sSelectionVariant = oInSelectionVariant.toJSONString(),
          // create an SV for app state in string format
          oSelectionVariant = JSON.parse(sSelectionVariant),
          // convert string into JSON to store in AppState
          oXAppStateObject = {
            selectionVariant: oSelectionVariant
          },
          oReturn = this.oNavHandler._saveAppStateWithImmediateReturn(oXAppStateObject);
        return oReturn !== null && oReturn !== void 0 && oReturn.appStateKey ? oReturn.appStateKey : "";
      } else {
        return undefined;
      }
    }

    /**
     * Mix Attributes and selectionVariant.
     *
     * @param vSemanticAttributes Object/(Array of Objects) containing key/value pairs
     * @param sSelectionVariant The selection variant in string format as provided by the SmartFilterBar control
     * @param [iSuppressionBehavior=sap.fe.navigation.SuppressionBehavior.standard] Indicates whether semantic
     *        attributes with special values (see {@link sap.fe.navigation.SuppressionBehavior suppression behavior}) must be
     *        suppressed before they are combined with the selection variant; several
     *        {@link sap.fe.navigation.SuppressionBehavior suppression behaviors} can be combined with the bitwise OR operator
     *        (|)
     * @returns Instance of {@link sap.fe.navigation.SelectionVariant}
     */;
    _proto.mixAttributesAndSelectionVariant = function mixAttributesAndSelectionVariant(vSemanticAttributes, sSelectionVariant, iSuppressionBehavior) {
      return this.oNavHandler.mixAttributesAndSelectionVariant(vSemanticAttributes, sSelectionVariant, iSuppressionBehavior);
    }

    /**
     * The method creates a context url based on provided data. This context url can either be used as.
     *
     * @param sEntitySetName Used for url determination
     * @param [oModel] The ODataModel used for url determination. If omitted, the NavigationHandler model is used.
     * @returns The context url for the given entities
     */;
    _proto.constructContextUrl = function constructContextUrl(sEntitySetName, oModel) {
      return this.oNavHandler.constructContextUrl(sEntitySetName, oModel);
    };
    _proto.getInterface = function getInterface() {
      return this;
    }

    /**
     * The method returns iAppState key for the current navgation handler instance.
     *
     * @private
     * @ui5-restricted sap.fe, sap.suite.ui.generic.template
     * @returns IAppState key
     */;
    _proto.getIAppStateKey = function getIAppStateKey() {
      return this.oNavHandler.getIAppStateKey();
    };
    return NavigationService;
  }(Service);
  _exports.NavigationService = NavigationService;
  function fnGetEmptyObject() {
    return {};
  }
  function fnGetPromise() {
    return Promise.resolve({});
  }
  function fnGetJQueryPromise() {
    const oMyDeffered = jQuery.Deferred();
    oMyDeffered.resolve({}, {}, "initial");
    return oMyDeffered.promise();
  }
  function fnGetEmptyString() {
    return "";
  }
  let NavigationServicesMock = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(NavigationServicesMock, _ServiceFactory);
    function NavigationServicesMock() {
      var _this;
      _this = _ServiceFactory.call(this) || this;
      _this.createEmptyAppState = fnGetEmptyObject;
      _this.storeInnerAppStateWithImmediateReturn = fnGetEmptyObject;
      _this.mixAttributesAndSelectionVariant = fnGetEmptyObject;
      _this.getAppState = fnGetPromise;
      _this.getStartupAppState = fnGetPromise;
      _this.parseNavigation = fnGetJQueryPromise;
      _this.constructContextUrl = fnGetEmptyString;
      _this.getIAppStateKey = fnGetEmptyString;
      _this.initPromise = Promise.resolve(_assertThisInitialized(_this));
      return _this;
    }
    _exports.NavigationServicesMock = NavigationServicesMock;
    var _proto2 = NavigationServicesMock.prototype;
    _proto2.getInterface = function getInterface() {
      return this;
    }

    // return empty object
    ;
    _proto2.replaceInnerAppStateKey = function replaceInnerAppStateKey(sAppHash) {
      return sAppHash ? sAppHash : "";
    };
    _proto2.navigate = function navigate() {
      // Don't do anything
    };
    return NavigationServicesMock;
  }(ServiceFactory);
  _exports.NavigationServicesMock = NavigationServicesMock;
  let NavigationServiceFactory = /*#__PURE__*/function (_ServiceFactory2) {
    _inheritsLoose(NavigationServiceFactory, _ServiceFactory2);
    function NavigationServiceFactory() {
      return _ServiceFactory2.apply(this, arguments) || this;
    }
    var _proto3 = NavigationServiceFactory.prototype;
    _proto3.createInstance = function createInstance(oServiceContext) {
      const oNavigationService = sap.ushell && sap.ushell.Container ? new NavigationService(oServiceContext) : new NavigationServicesMock();
      // Wait For init
      return oNavigationService.initPromise.then(function (oService) {
        return oService;
      });
    };
    return NavigationServiceFactory;
  }(ServiceFactory);
  return NavigationServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/NavigationServiceFactory", ["sap/fe/navigation/NavigationHandler","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory"],function(e,t,n){"use strict";var r={};function i(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function a(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;o(e,t)}function o(e,t){o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return o(e,t)}let s=function(t){a(n,t);function n(){return t.apply(this,arguments)||this}r.NavigationService=n;var i=n.prototype;i.init=function t(){const n=this.getContext(),r=n&&n.scopeObject;this.oNavHandler=new e(r);this.oNavHandler.setModel(r.getModel());this.initPromise=Promise.resolve(this)};i.exit=function e(){this.oNavHandler.destroy()};i.navigate=function e(t,n,r,i,a,o,s){this.oNavHandler.navigate(t,n,r,i,a,o,s)};i.parseNavigation=function e(){return this.oNavHandler.parseNavigation()};i._processBeforeSmartLinkPopoverOpens=function e(t,n,r){return this.oNavHandler.processBeforeSmartLinkPopoverOpens(t,n,r)};i.getAppStateKeyAndUrlParameters=function e(t){return this.oNavHandler._getAppStateKeyAndUrlParameters(t)};i.getTechnicalParameters=function e(){return this.oNavHandler.getTechnicalParameters()};i.setTechnicalParameters=function e(t){this.oNavHandler.setTechnicalParameters(t)};i.setModel=function e(t){this.oNavHandler.setModel(t)};i.storeInnerAppStateAsync=function e(t,n,r){return new Promise((e,i)=>this.oNavHandler.storeInnerAppStateAsync(t,n,r).then(e,i))};i.storeInnerAppStateWithImmediateReturn=function e(t,n){return this.oNavHandler.storeInnerAppStateWithImmediateReturn(t,n)};i.replaceHash=function e(t){this.oNavHandler.replaceHash(t)};i.replaceInnerAppStateKey=function e(t,n){return this.oNavHandler._replaceInnerAppStateKey(t,n)};i.getUrlParametersFromSelectionVariant=function e(t){return this.oNavHandler._getURLParametersFromSelectionVariant(t)};i.saveAppStateWithImmediateReturn=function e(t){if(t){const e=t.toJSONString(),n=JSON.parse(e),r={selectionVariant:n},i=this.oNavHandler._saveAppStateWithImmediateReturn(r);return i!==null&&i!==void 0&&i.appStateKey?i.appStateKey:""}else{return undefined}};i.mixAttributesAndSelectionVariant=function e(t,n,r){return this.oNavHandler.mixAttributesAndSelectionVariant(t,n,r)};i.constructContextUrl=function e(t,n){return this.oNavHandler.constructContextUrl(t,n)};i.getInterface=function e(){return this};i.getIAppStateKey=function e(){return this.oNavHandler.getIAppStateKey()};return n}(t);r.NavigationService=s;function c(){return{}}function u(){return Promise.resolve({})}function p(){const e=jQuery.Deferred();e.resolve({},{},"initial");return e.promise()}function l(){return""}let v=function(e){a(t,e);function t(){var t;t=e.call(this)||this;t.createEmptyAppState=c;t.storeInnerAppStateWithImmediateReturn=c;t.mixAttributesAndSelectionVariant=c;t.getAppState=u;t.getStartupAppState=u;t.parseNavigation=p;t.constructContextUrl=l;t.getIAppStateKey=l;t.initPromise=Promise.resolve(i(t));return t}r.NavigationServicesMock=t;var n=t.prototype;n.getInterface=function e(){return this};n.replaceInnerAppStateKey=function e(t){return t?t:""};n.navigate=function e(){};return t}(n);r.NavigationServicesMock=v;let f=function(e){a(t,e);function t(){return e.apply(this,arguments)||this}var n=t.prototype;n.createInstance=function e(t){const n=sap.ushell&&sap.ushell.Container?new s(t):new v;return n.initPromise.then(function(e){return e})};return t}(n);return f},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/ResourceModelServiceFactory-dbg", ["sap/fe/core/ResourceModel", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory"], function (ResourceModel, Service, ServiceFactory) {
  "use strict";

  var _exports = {};
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let ResourceModelService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(ResourceModelService, _Service);
    function ResourceModelService() {
      return _Service.apply(this, arguments) || this;
    }
    _exports.ResourceModelService = ResourceModelService;
    var _proto = ResourceModelService.prototype;
    _proto.init = function init() {
      const oContext = this.getContext();
      const mSettings = oContext.settings;
      this.oFactory = oContext.factory;

      // When enhancing i18n keys the value in the last resource bundle takes precedence
      // hence arrange various resource bundles so that enhanceI18n provided by the application is the last.
      // The following order is used :
      // 1. sap.fe bundle - sap.fe.core.messagebundle (passed with mSettings.bundles)
      // 2. sap.fe bundle - sap.fe.templates.messagebundle (passed with mSettings.bundles)
      // 3. Multiple bundles passed by the application as part of enhanceI18n
      const aBundles = mSettings.bundles.concat(mSettings.enhanceI18n || []).map(function (vI18n) {
        // if value passed for enhanceI18n is a Resource Model, return the associated bundle
        // else the value is a bundleUrl, return Resource Bundle configuration so that a bundle can be created
        return typeof vI18n.isA === "function" && vI18n.isA("sap.ui.model.resource.ResourceModel") ? vI18n.getResourceBundle() : {
          bundleName: vI18n.replace(/\//g, ".")
        };
      });
      this.oResourceModel = new ResourceModel({
        bundleName: aBundles[0].bundleName,
        enhanceWith: aBundles.slice(1),
        async: true
      });
      if (oContext.scopeType === "component") {
        const oComponent = oContext.scopeObject;
        oComponent.setModel(this.oResourceModel, mSettings.modelName);
      }
      this.initPromise = Promise.all([this.oResourceModel.getResourceBundle(), this.oResourceModel._pEnhanced || Promise.resolve()]).then(oBundle => {
        this.oResourceModel.__bundle = oBundle[0];
        return this;
      });
    };
    _proto.getResourceModel = function getResourceModel() {
      return this.oResourceModel;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    _proto.exit = function exit() {
      // Deregister global instance
      this.oFactory.removeGlobalInstance();
    };
    return ResourceModelService;
  }(Service);
  _exports.ResourceModelService = ResourceModelService;
  let ResourceModelServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(ResourceModelServiceFactory, _ServiceFactory);
    function ResourceModelServiceFactory() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ServiceFactory.call(this, ...args) || this;
      _this._oInstances = {};
      return _this;
    }
    var _proto2 = ResourceModelServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const sKey = `${oServiceContext.scopeObject.getId()}_${oServiceContext.settings.bundles.join(",")}` + (oServiceContext.settings.enhanceI18n ? `,${oServiceContext.settings.enhanceI18n.join(",")}` : "");
      if (!this._oInstances[sKey]) {
        this._oInstances[sKey] = new ResourceModelService(Object.assign({
          factory: this
        }, oServiceContext));
      }
      return this._oInstances[sKey].initPromise;
    };
    _proto2.removeGlobalInstance = function removeGlobalInstance() {
      this._oInstances = {};
    };
    return ResourceModelServiceFactory;
  }(ServiceFactory);
  return ResourceModelServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/ResourceModelServiceFactory", ["sap/fe/core/ResourceModel","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory"],function(e,t,n){"use strict";var o={};function s(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;c(e,t)}function c(e,t){c=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return c(e,t)}let r=function(t){s(n,t);function n(){return t.apply(this,arguments)||this}o.ResourceModelService=n;var c=n.prototype;c.init=function t(){const n=this.getContext();const o=n.settings;this.oFactory=n.factory;const s=o.bundles.concat(o.enhanceI18n||[]).map(function(e){return typeof e.isA==="function"&&e.isA("sap.ui.model.resource.ResourceModel")?e.getResourceBundle():{bundleName:e.replace(/\//g,".")}});this.oResourceModel=new e({bundleName:s[0].bundleName,enhanceWith:s.slice(1),async:true});if(n.scopeType==="component"){const e=n.scopeObject;e.setModel(this.oResourceModel,o.modelName)}this.initPromise=Promise.all([this.oResourceModel.getResourceBundle(),this.oResourceModel._pEnhanced||Promise.resolve()]).then(e=>{this.oResourceModel.__bundle=e[0];return this})};c.getResourceModel=function e(){return this.oResourceModel};c.getInterface=function e(){return this};c.exit=function e(){this.oFactory.removeGlobalInstance()};return n}(t);o.ResourceModelService=r;let i=function(e){s(t,e);function t(){var t;for(var n=arguments.length,o=new Array(n),s=0;s<n;s++){o[s]=arguments[s]}t=e.call(this,...o)||this;t._oInstances={};return t}var n=t.prototype;n.createInstance=function e(t){const n=`${t.scopeObject.getId()}_${t.settings.bundles.join(",")}`+(t.settings.enhanceI18n?`,${t.settings.enhanceI18n.join(",")}`:"");if(!this._oInstances[n]){this._oInstances[n]=new r(Object.assign({factory:this},t))}return this._oInstances[n].initPromise};n.removeGlobalInstance=function e(){this._oInstances={}};return t}(n);return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/RoutingServiceFactory-dbg", ["sap/base/Log", "sap/fe/core/controllerextensions/BusyLocker", "sap/fe/core/controllerextensions/messageHandler/messageHandling", "sap/fe/core/controllerextensions/Placeholder", "sap/fe/core/controllerextensions/routing/NavigationReason", "sap/fe/core/helpers/AppStartupHelper", "sap/fe/core/helpers/ClassSupport", "sap/fe/core/helpers/EditState", "sap/fe/core/helpers/ModelHelper", "sap/fe/core/helpers/SemanticKeyHelper", "sap/suite/ui/commons/collaboration/CollaborationHelper", "sap/ui/base/BindingParser", "sap/ui/base/EventProvider", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory", "sap/ui/model/odata/v4/ODataUtils"], function (Log, BusyLocker, messageHandling, Placeholder, NavigationReason, AppStartupHelper, ClassSupport, EditState, ModelHelper, SemanticKeyHelper, CollaborationHelper, BindingParser, EventProvider, Service, ServiceFactory, ODataUtils) {
  "use strict";

  var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2;
  var _exports = {};
  var event = ClassSupport.event;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let RoutingServiceEventing = (_dec = defineUI5Class("sap.fe.core.services.RoutingServiceEventing"), _dec2 = event(), _dec3 = event(), _dec(_class = (_class2 = /*#__PURE__*/function (_EventProvider) {
    _inheritsLoose(RoutingServiceEventing, _EventProvider);
    function RoutingServiceEventing() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _EventProvider.call(this, ...args) || this;
      _initializerDefineProperty(_this, "routeMatched", _descriptor, _assertThisInitialized(_this));
      _initializerDefineProperty(_this, "afterRouteMatched", _descriptor2, _assertThisInitialized(_this));
      return _this;
    }
    return RoutingServiceEventing;
  }(EventProvider), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "routeMatched", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "afterRouteMatched", [_dec3], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  let RoutingService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(RoutingService, _Service);
    function RoutingService() {
      var _this2;
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      _this2 = _Service.call(this, ...args) || this;
      _this2.navigationInfoQueue = [];
      return _this2;
    }
    _exports.RoutingService = RoutingService;
    var _proto = RoutingService.prototype;
    _proto.init = function init() {
      const oContext = this.getContext();
      if (oContext.scopeType === "component") {
        var _oAppConfig$crossNavi;
        this.oAppComponent = oContext.scopeObject;
        this.oModel = this.oAppComponent.getModel();
        this.oMetaModel = this.oModel.getMetaModel();
        this.oRouter = this.oAppComponent.getRouter();
        this.oRouterProxy = this.oAppComponent.getRouterProxy();
        this.eventProvider = new RoutingServiceEventing();
        const oRoutingConfig = this.oAppComponent.getManifestEntry("sap.ui5").routing;
        this._parseRoutingConfiguration(oRoutingConfig);
        const oAppConfig = this.oAppComponent.getManifestEntry("sap.app");
        this.outbounds = (_oAppConfig$crossNavi = oAppConfig.crossNavigation) === null || _oAppConfig$crossNavi === void 0 ? void 0 : _oAppConfig$crossNavi.outbounds;
      }
      this.initPromise = Promise.resolve(this);
    };
    _proto.beforeExit = function beforeExit() {
      this.oRouter.detachRouteMatched(this._fnOnRouteMatched, this);
      this.eventProvider.fireEvent("routeMatched", {});
    };
    _proto.exit = function exit() {
      this.eventProvider.destroy();
    }

    /**
     * Parse a manifest routing configuration for internal usage.
     *
     * @param oRoutingConfig The routing configuration from the manifest
     * @private
     */;
    _proto._parseRoutingConfiguration = function _parseRoutingConfiguration(oRoutingConfig) {
      var _oRoutingConfig$confi;
      const isFCL = (oRoutingConfig === null || oRoutingConfig === void 0 ? void 0 : (_oRoutingConfig$confi = oRoutingConfig.config) === null || _oRoutingConfig$confi === void 0 ? void 0 : _oRoutingConfig$confi.routerClass) === "sap.f.routing.Router";

      // Information of targets
      this._mTargets = {};
      Object.keys(oRoutingConfig.targets).forEach(sTargetName => {
        this._mTargets[sTargetName] = Object.assign({
          targetName: sTargetName
        }, oRoutingConfig.targets[sTargetName]);

        // View level for FCL cases is calculated from the target pattern
        if (this._mTargets[sTargetName].contextPattern !== undefined) {
          this._mTargets[sTargetName].viewLevel = this._getViewLevelFromPattern(this._mTargets[sTargetName].contextPattern, 0);
        }
      });

      // Information of routes
      this._mRoutes = {};
      for (const sRouteKey in oRoutingConfig.routes) {
        const oRouteManifestInfo = oRoutingConfig.routes[sRouteKey],
          aRouteTargets = Array.isArray(oRouteManifestInfo.target) ? oRouteManifestInfo.target : [oRouteManifestInfo.target],
          sRouteName = Array.isArray(oRoutingConfig.routes) ? oRouteManifestInfo.name : sRouteKey,
          sRoutePattern = oRouteManifestInfo.pattern;

        // Check route pattern: all patterns need to end with ':?query:', that we use for parameters
        if (sRoutePattern.length < 8 || sRoutePattern.indexOf(":?query:") !== sRoutePattern.length - 8) {
          Log.warning(`Pattern for route ${sRouteName} doesn't end with ':?query:' : ${sRoutePattern}`);
        }
        const iRouteLevel = this._getViewLevelFromPattern(sRoutePattern, 0);
        this._mRoutes[sRouteName] = {
          name: sRouteName,
          pattern: sRoutePattern,
          targets: aRouteTargets,
          routeLevel: iRouteLevel
        };

        // Add the parent targets in the list of targets for the route
        for (let i = 0; i < aRouteTargets.length; i++) {
          const sParentTargetName = this._mTargets[aRouteTargets[i]].parent;
          if (sParentTargetName) {
            aRouteTargets.push(sParentTargetName);
          }
        }
        if (!isFCL) {
          // View level for non-FCL cases is calculated from the route pattern
          if (this._mTargets[aRouteTargets[0]].viewLevel === undefined || this._mTargets[aRouteTargets[0]].viewLevel < iRouteLevel) {
            // There are cases when different routes point to the same target. We take the
            // largest viewLevel in that case.
            this._mTargets[aRouteTargets[0]].viewLevel = iRouteLevel;
          }

          // FCL level for non-FCL cases is equal to -1
          this._mTargets[aRouteTargets[0]].FCLLevel = -1;
        } else if (aRouteTargets.length === 1 && this._mTargets[aRouteTargets[0]].controlAggregation !== "beginColumnPages") {
          // We're in the case where there's only 1 target for the route, and it's not in the first column
          // --> this is a fullscreen column after all columns in the FCL have been used
          this._mTargets[aRouteTargets[0]].FCLLevel = 3;
        } else {
          // Other FCL cases
          aRouteTargets.forEach(sTargetName => {
            switch (this._mTargets[sTargetName].controlAggregation) {
              case "beginColumnPages":
                this._mTargets[sTargetName].FCLLevel = 0;
                break;
              case "midColumnPages":
                this._mTargets[sTargetName].FCLLevel = 1;
                break;
              default:
                this._mTargets[sTargetName].FCLLevel = 2;
            }
          });
        }
      }

      // Propagate viewLevel, contextPattern, FCLLevel and controlAggregation to parent targets
      Object.keys(this._mTargets).forEach(sTargetName => {
        while (this._mTargets[sTargetName].parent) {
          const sParentTargetName = this._mTargets[sTargetName].parent;
          this._mTargets[sParentTargetName].viewLevel = this._mTargets[sParentTargetName].viewLevel || this._mTargets[sTargetName].viewLevel;
          this._mTargets[sParentTargetName].contextPattern = this._mTargets[sParentTargetName].contextPattern || this._mTargets[sTargetName].contextPattern;
          this._mTargets[sParentTargetName].FCLLevel = this._mTargets[sParentTargetName].FCLLevel || this._mTargets[sTargetName].FCLLevel;
          this._mTargets[sParentTargetName].controlAggregation = this._mTargets[sParentTargetName].controlAggregation || this._mTargets[sTargetName].controlAggregation;
          sTargetName = sParentTargetName;
        }
      });

      // Determine the root entity for the app
      const aLevel0RouteNames = [];
      const aLevel1RouteNames = [];
      let sDefaultRouteName;
      for (const sName in this._mRoutes) {
        const iLevel = this._mRoutes[sName].routeLevel;
        if (iLevel === 0) {
          aLevel0RouteNames.push(sName);
        } else if (iLevel === 1) {
          aLevel1RouteNames.push(sName);
        }
      }
      if (aLevel0RouteNames.length === 1) {
        sDefaultRouteName = aLevel0RouteNames[0];
      } else if (aLevel1RouteNames.length === 1) {
        sDefaultRouteName = aLevel1RouteNames[0];
      }
      if (sDefaultRouteName) {
        const sDefaultTargetName = this._mRoutes[sDefaultRouteName].targets.slice(-1)[0];
        this.sContextPath = "";
        if (this._mTargets[sDefaultTargetName].options && this._mTargets[sDefaultTargetName].options.settings) {
          const oSettings = this._mTargets[sDefaultTargetName].options.settings;
          this.sContextPath = oSettings.contextPath || `/${oSettings.entitySet}`;
        }
        if (!this.sContextPath) {
          Log.warning(`Cannot determine default contextPath: contextPath or entitySet missing in default target: ${sDefaultTargetName}`);
        }
      } else {
        Log.warning("Cannot determine default contextPath: no default route found.");
      }

      // We need to establish the correct path to the different pages, including the navigation properties
      Object.keys(this._mTargets).map(sTargetKey => {
        return this._mTargets[sTargetKey];
      }).sort((a, b) => {
        return a.viewLevel < b.viewLevel ? -1 : 1;
      }).forEach(target => {
        // After sorting the targets per level we can then go through their navigation object and update the paths accordingly.
        if (target.options) {
          const settings = target.options.settings;
          const sContextPath = settings.contextPath || (settings.entitySet ? `/${settings.entitySet}` : "");
          if (!settings.fullContextPath && sContextPath) {
            settings.fullContextPath = `${sContextPath}/`;
          }
          Object.keys(settings.navigation || {}).forEach(sNavName => {
            // Check if it's a navigation property
            const targetRoute = this._mRoutes[settings.navigation[sNavName].detail.route];
            if (targetRoute && targetRoute.targets) {
              targetRoute.targets.forEach(sTargetName => {
                if (this._mTargets[sTargetName].options && this._mTargets[sTargetName].options.settings && !this._mTargets[sTargetName].options.settings.fullContextPath) {
                  if (target.viewLevel === 0) {
                    this._mTargets[sTargetName].options.settings.fullContextPath = `${(sNavName.startsWith("/") ? "" : "/") + sNavName}/`;
                  } else {
                    this._mTargets[sTargetName].options.settings.fullContextPath = `${settings.fullContextPath + sNavName}/`;
                  }
                }
              });
            }
          });
        }
      });
    }

    /**
     * Calculates a view level from a pattern by counting the number of segments.
     *
     * @param sPattern The pattern
     * @param viewLevel The current level of view
     * @returns The level
     */;
    _proto._getViewLevelFromPattern = function _getViewLevelFromPattern(sPattern, viewLevel) {
      sPattern = sPattern.replace(":?query:", "");
      const regex = new RegExp("/[^/]*$");
      if (sPattern && sPattern[0] !== "/" && sPattern[0] !== "?") {
        sPattern = `/${sPattern}`;
      }
      if (sPattern.length) {
        sPattern = sPattern.replace(regex, "");
        if (this.oRouter.match(sPattern) || sPattern === "") {
          return this._getViewLevelFromPattern(sPattern, ++viewLevel);
        } else {
          return this._getViewLevelFromPattern(sPattern, viewLevel);
        }
      } else {
        return viewLevel;
      }
    };
    _proto._getRouteInformation = function _getRouteInformation(sRouteName) {
      return this._mRoutes[sRouteName];
    };
    _proto._getTargetInformation = function _getTargetInformation(sTargetName) {
      return this._mTargets[sTargetName];
    };
    _proto._getComponentId = function _getComponentId(sOwnerId, sComponentId) {
      if (sComponentId.indexOf(`${sOwnerId}---`) === 0) {
        return sComponentId.substr(sOwnerId.length + 3);
      }
      return sComponentId;
    }

    /**
     * Get target information for a given component.
     *
     * @param oComponentInstance Instance of the component
     * @returns The configuration for the target
     */;
    _proto.getTargetInformationFor = function getTargetInformationFor(oComponentInstance) {
      const sTargetComponentId = this._getComponentId(oComponentInstance._sOwnerId, oComponentInstance.getId());
      let sCorrectTargetName = null;
      Object.keys(this._mTargets).forEach(sTargetName => {
        if (this._mTargets[sTargetName].id === sTargetComponentId || this._mTargets[sTargetName].viewId === sTargetComponentId) {
          sCorrectTargetName = sTargetName;
        }
      });
      return this._getTargetInformation(sCorrectTargetName);
    };
    _proto.getLastSemanticMapping = function getLastSemanticMapping() {
      return this.oLastSemanticMapping;
    };
    _proto.setLastSemanticMapping = function setLastSemanticMapping(oMapping) {
      this.oLastSemanticMapping = oMapping;
    };
    _proto.navigateTo = function navigateTo(oContext, sRouteName, mParameterMapping, bPreserveHistory) {
      let sTargetURLPromise, bIsStickyMode;
      if (oContext.getModel() && oContext.getModel().getMetaModel && oContext.getModel().getMetaModel()) {
        bIsStickyMode = ModelHelper.isStickySessionSupported(oContext.getModel().getMetaModel());
      }
      if (!mParameterMapping) {
        // if there is no parameter mapping define this mean we rely entirely on the binding context path
        sTargetURLPromise = Promise.resolve(SemanticKeyHelper.getSemanticPath(oContext));
      } else {
        sTargetURLPromise = this.prepareParameters(mParameterMapping, sRouteName, oContext).then(mParameters => {
          return this.oRouter.getURL(sRouteName, mParameters);
        });
      }
      return sTargetURLPromise.then(sTargetURL => {
        this.oRouterProxy.navToHash(sTargetURL, bPreserveHistory, false, false, !bIsStickyMode);
      });
    }

    /**
     * Method to return a map of routing target parameters where the binding syntax is resolved to the current model.
     *
     * @param mParameters Parameters map in the format [k: string] : ComplexBindingSyntax
     * @param sTargetRoute Name of the target route
     * @param oContext The instance of the binding context
     * @returns A promise which resolves to the routing target parameters
     */;
    _proto.prepareParameters = function prepareParameters(mParameters, sTargetRoute, oContext) {
      let oParametersPromise;
      try {
        const sContextPath = oContext.getPath();
        const oMetaModel = oContext.getModel().getMetaModel();
        const aContextPathParts = sContextPath.split("/");
        const aAllResolvedParameterPromises = Object.keys(mParameters).map(sParameterKey => {
          const sParameterMappingExpression = mParameters[sParameterKey];
          // We assume the defined parameters will be compatible with a binding expression
          const oParsedExpression = BindingParser.complexParser(sParameterMappingExpression);
          const aParts = oParsedExpression.parts || [oParsedExpression];
          const aResolvedParameterPromises = aParts.map(function (oPathPart) {
            const aRelativeParts = oPathPart.path.split("../");
            // We go up the current context path as many times as necessary
            const aLocalParts = aContextPathParts.slice(0, aContextPathParts.length - aRelativeParts.length + 1);
            aLocalParts.push(aRelativeParts[aRelativeParts.length - 1]);
            const sPropertyPath = aLocalParts.join("/");
            const oMetaContext = oMetaModel.getMetaContext(sPropertyPath);
            return oContext.requestProperty(sPropertyPath).then(function (oValue) {
              const oPropertyInfo = oMetaContext.getObject();
              const sEdmType = oPropertyInfo.$Type;
              return ODataUtils.formatLiteral(oValue, sEdmType);
            });
          });
          return Promise.all(aResolvedParameterPromises).then(aResolvedParameters => {
            const value = oParsedExpression.formatter ? oParsedExpression.formatter.apply(this, aResolvedParameters) : aResolvedParameters.join("");
            return {
              key: sParameterKey,
              value: value
            };
          });
        });
        oParametersPromise = Promise.all(aAllResolvedParameterPromises).then(function (aAllResolvedParameters) {
          const oParameters = {};
          aAllResolvedParameters.forEach(function (oResolvedParameter) {
            oParameters[oResolvedParameter.key] = oResolvedParameter.value;
          });
          return oParameters;
        });
      } catch (oError) {
        Log.error(`Could not parse the parameters for the navigation to route ${sTargetRoute}`);
        oParametersPromise = Promise.resolve(undefined);
      }
      return oParametersPromise;
    };
    _proto._fireRouteMatchEvents = function _fireRouteMatchEvents(mParameters) {
      this.eventProvider.fireEvent("routeMatched", mParameters);
      this.eventProvider.fireEvent("afterRouteMatched", mParameters);
      EditState.cleanProcessedEditState(); // Reset UI state when all bindings have been refreshed
    }

    /**
     * Navigates to a context.
     *
     * @param oContext The Context to be navigated to, or the list binding for creation (deferred creation)
     * @param [mParameters] Optional, map containing the following attributes:
     * @param [mParameters.checkNoHashChange] Navigate to the context without changing the URL
     * @param [mParameters.asyncContext] The context is created async, navigate to (...) and
     *                    wait for Promise to be resolved and then navigate into the context
     * @param [mParameters.bDeferredContext] The context shall be created deferred at the target page
     * @param [mParameters.editable] The target page shall be immediately in the edit mode to avoid flickering
     * @param [mParameters.bPersistOPScroll] The bPersistOPScroll will be used for scrolling to first tab
     * @param [mParameters.updateFCLLevel] `+1` if we add a column in FCL, `-1` to remove a column, 0 to stay on the same column
     * @param [mParameters.noPreservationCache] Do navigation without taking into account the preserved cache mechanism
     * @param [mParameters.bRecreateContext] Force re-creation of the context instead of using the one passed as parameter
     * @param [mParameters.bForceFocus] Forces focus selection after navigation
     * @param [oViewData] View data
     * @param [oCurrentTargetInfo] The target information from which the navigation is triggered
     * @returns Promise which is resolved once the navigation is triggered
     * @ui5-restricted
     * @final
     */;
    _proto.navigateToContext = function navigateToContext(oContext, mParameters, oViewData, oCurrentTargetInfo) {
      let sTargetRoute = "",
        oRouteParametersPromise,
        bIsStickyMode = false;
      if (oContext.getModel() && oContext.getModel().getMetaModel) {
        bIsStickyMode = ModelHelper.isStickySessionSupported(oContext.getModel().getMetaModel());
      }
      // Manage parameter mapping
      if (mParameters && mParameters.targetPath && oViewData && oViewData.navigation) {
        const oRouteDetail = oViewData.navigation[mParameters.targetPath].detail;
        sTargetRoute = oRouteDetail.route;
        if (oRouteDetail.parameters && oContext.isA("sap.ui.model.odata.v4.Context")) {
          oRouteParametersPromise = this.prepareParameters(oRouteDetail.parameters, sTargetRoute, oContext);
        }
      }
      let sTargetPath = this._getPathFromContext(oContext, mParameters);
      // If the path is empty, we're supposed to navigate to the first page of the app
      // Check if we need to exit from the app instead
      if (sTargetPath.length === 0 && this.bExitOnNavigateBackToRoot) {
        this.oRouterProxy.exitFromApp();
        return Promise.resolve(true);
      }

      // If the context is deferred or async, we add (...) to the path
      if (mParameters !== null && mParameters !== void 0 && mParameters.asyncContext || mParameters !== null && mParameters !== void 0 && mParameters.bDeferredContext) {
        sTargetPath += "(...)";
      }

      // Add layout parameter if needed
      const sLayout = this._calculateLayout(sTargetPath, mParameters);
      if (sLayout) {
        sTargetPath += `?layout=${sLayout}`;
      }

      // Navigation parameters for later usage
      const oNavigationInfo = {
        oAsyncContext: mParameters === null || mParameters === void 0 ? void 0 : mParameters.asyncContext,
        bDeferredContext: mParameters === null || mParameters === void 0 ? void 0 : mParameters.bDeferredContext,
        bTargetEditable: mParameters === null || mParameters === void 0 ? void 0 : mParameters.editable,
        bPersistOPScroll: mParameters === null || mParameters === void 0 ? void 0 : mParameters.bPersistOPScroll,
        bDraftNavigation: mParameters === null || mParameters === void 0 ? void 0 : mParameters.bDraftNavigation,
        bShowPlaceholder: (mParameters === null || mParameters === void 0 ? void 0 : mParameters.showPlaceholder) !== undefined ? mParameters === null || mParameters === void 0 ? void 0 : mParameters.showPlaceholder : true,
        reason: mParameters === null || mParameters === void 0 ? void 0 : mParameters.reason
      };
      if ((mParameters === null || mParameters === void 0 ? void 0 : mParameters.updateFCLLevel) !== -1 && (mParameters === null || mParameters === void 0 ? void 0 : mParameters.bRecreateContext) !== true) {
        if (oContext.isA("sap.ui.model.odata.v4.Context")) {
          oNavigationInfo.useContext = oContext;
        } else {
          oNavigationInfo.listBindingForCreate = oContext;
        }
      }
      if (mParameters !== null && mParameters !== void 0 && mParameters.checkNoHashChange) {
        // Check if the new hash is different from the current one
        const sCurrentHashNoAppState = this.oRouterProxy.getHash().replace(/[&?]{1}sap-iapp-state=[A-Z0-9]+/, "");
        if (sTargetPath === sCurrentHashNoAppState) {
          // The hash doesn't change, but we fire the routeMatch event to trigger page refresh / binding
          const mEventParameters = this.oRouter.getRouteInfoByHash(this.oRouterProxy.getHash());
          if (mEventParameters) {
            mEventParameters.navigationInfo = oNavigationInfo;
            mEventParameters.routeInformation = this._getRouteInformation(this.sCurrentRouteName);
            mEventParameters.routePattern = this.sCurrentRoutePattern;
            mEventParameters.views = this.aCurrentViews;
          }
          this.oRouterProxy.setFocusForced(!!mParameters.bForceFocus);
          this._fireRouteMatchEvents(mEventParameters);
          return Promise.resolve(true);
        }
      }
      if (mParameters !== null && mParameters !== void 0 && mParameters.transient && mParameters.editable == true && sTargetPath.indexOf("(...)") === -1) {
        if (sTargetPath.indexOf("?") > -1) {
          sTargetPath += "&i-action=create";
        } else {
          sTargetPath += "?i-action=create";
        }
      }

      // Clear unbound messages upon navigating from LR to OP
      // This is to ensure stale error messages from LR are not shown to the user after navigation to OP.
      if (oCurrentTargetInfo && oCurrentTargetInfo.name === "sap.fe.templates.ListReport") {
        const oRouteInfo = this.oRouter.getRouteInfoByHash(sTargetPath);
        if (oRouteInfo) {
          const oRoute = this._getRouteInformation(oRouteInfo.name);
          if (oRoute && oRoute.targets && oRoute.targets.length > 0) {
            const sLastTargetName = oRoute.targets[oRoute.targets.length - 1];
            const oTarget = this._getTargetInformation(sLastTargetName);
            if (oTarget && oTarget.name === "sap.fe.templates.ObjectPage") {
              messageHandling.removeUnboundTransitionMessages();
            }
          }
        }
      }

      // Add the navigation parameters in the queue
      this.navigationInfoQueue.push(oNavigationInfo);
      if (sTargetRoute && oRouteParametersPromise) {
        return oRouteParametersPromise.then(oRouteParameters => {
          oRouteParameters.bIsStickyMode = bIsStickyMode;
          this.oRouter.navTo(sTargetRoute, oRouteParameters);
          return Promise.resolve(true);
        });
      }
      return this.oRouterProxy.navToHash(sTargetPath, false, mParameters === null || mParameters === void 0 ? void 0 : mParameters.noPreservationCache, mParameters === null || mParameters === void 0 ? void 0 : mParameters.bForceFocus, !bIsStickyMode).then(bNavigated => {
        if (!bNavigated) {
          // The navigation did not happen --> remove the navigation parameters from the queue as they shouldn't be used
          this.navigationInfoQueue.pop();
        }
        return bNavigated;
      });
    }

    /**
     * Navigates to a route.
     *
     * @function
     * @name sap.fe.core.controllerextensions.Routing#navigateToRoute
     * @memberof sap.fe.core.controllerextensions.Routing
     * @static
     * @param sTargetRouteName Name of the target route
     * @param [oRouteParameters] Parameters to be used with route to create the target hash
     * @returns Promise that is resolved when the navigation is finalized
     * @ui5-restricted
     * @final
     */;
    _proto.navigateToRoute = function navigateToRoute(sTargetRouteName, oRouteParameters) {
      const sTargetURL = this.oRouter.getURL(sTargetRouteName, oRouteParameters);
      return this.oRouterProxy.navToHash(sTargetURL, undefined, undefined, undefined, !oRouteParameters.bIsStickyMode);
    }

    /**
     * Checks if one of the current views on the screen is bound to a given context.
     *
     * @param oContext The context
     * @returns `true` or `false` if the current state is impacted or not
     */;
    _proto.isCurrentStateImpactedBy = function isCurrentStateImpactedBy(oContext) {
      const sPath = oContext.getPath();

      // First, check with the technical path. We have to try it, because for level > 1, we
      // uses technical keys even if Semantic keys are enabled
      if (this.oRouterProxy.isCurrentStateImpactedBy(sPath)) {
        return true;
      } else if (/^[^()]+\([^()]+\)$/.test(sPath)) {
        // If the current path can be semantic (i.e. is like xxx(yyy))
        // check with the semantic path if we can find it
        let sSemanticPath;
        if (this.oLastSemanticMapping && this.oLastSemanticMapping.technicalPath === sPath) {
          // We have already resolved this semantic path
          sSemanticPath = this.oLastSemanticMapping.semanticPath;
        } else {
          sSemanticPath = SemanticKeyHelper.getSemanticPath(oContext);
        }
        return sSemanticPath != sPath ? this.oRouterProxy.isCurrentStateImpactedBy(sSemanticPath) : false;
      } else {
        return false;
      }
    };
    _proto._findPathToNavigate = function _findPathToNavigate(sPath) {
      const regex = new RegExp("/[^/]*$");
      sPath = sPath.replace(regex, "");
      if (this.oRouter.match(sPath) || sPath === "") {
        return sPath;
      } else {
        return this._findPathToNavigate(sPath);
      }
    };
    _proto._checkIfContextSupportsSemanticPath = function _checkIfContextSupportsSemanticPath(oContext) {
      const sPath = oContext.getPath();

      // First, check if this is a level-1 object (path = /aaa(bbb))
      if (!/^\/[^(]+\([^)]+\)$/.test(sPath)) {
        return false;
      }

      // Then check if the entity has semantic keys
      const oMetaModel = oContext.getModel().getMetaModel();
      const sEntitySetName = oMetaModel.getMetaContext(oContext.getPath()).getObject("@sapui.name");
      if (!SemanticKeyHelper.getSemanticKeys(oMetaModel, sEntitySetName)) {
        return false;
      }

      // Then check the entity is draft-enabled
      return ModelHelper.isDraftSupported(oMetaModel, sPath);
    };
    _proto._getPathFromContext = function _getPathFromContext(oContext, mParameters) {
      let sPath;
      if (oContext.isA("sap.ui.model.odata.v4.ODataListBinding") && oContext.isRelative()) {
        sPath = oContext.getHeaderContext().getPath();
      } else {
        sPath = oContext.getPath();
      }
      if (mParameters.updateFCLLevel === -1) {
        // When navigating back from a context, we need to remove the last component of the path
        sPath = this._findPathToNavigate(sPath);

        // Check if we're navigating back to a semantic path that was previously resolved
        if (this.oLastSemanticMapping && this.oLastSemanticMapping.technicalPath === sPath) {
          sPath = this.oLastSemanticMapping.semanticPath;
        }
      } else if (this._checkIfContextSupportsSemanticPath(oContext)) {
        // We check if we have to use a semantic path
        const sSemanticPath = SemanticKeyHelper.getSemanticPath(oContext, true);
        if (!sSemanticPath) {
          // We were not able to build the semantic path --> Use the technical path and
          // clear the previous mapping, otherwise the old mapping is used in EditFlow#updateDocument
          // and it leads to unwanted page reloads
          this.setLastSemanticMapping(undefined);
        } else if (sSemanticPath !== sPath) {
          // Store the mapping technical <-> semantic path to avoid recalculating it later
          // and use the semantic path instead of the technical one
          this.setLastSemanticMapping({
            technicalPath: sPath,
            semanticPath: sSemanticPath
          });
          sPath = sSemanticPath;
        }
      }

      // remove extra '/' at the beginning of path
      if (sPath[0] === "/") {
        sPath = sPath.substring(1);
      }
      return sPath;
    };
    _proto._calculateLayout = function _calculateLayout(sPath, mParameters) {
      let FCLLevel = mParameters.FCLLevel;
      if (mParameters.updateFCLLevel) {
        FCLLevel += mParameters.updateFCLLevel;
        if (FCLLevel < 0) {
          FCLLevel = 0;
        }
      }

      // When navigating back, try to find the layout in the navigation history if it's not provided as parameter
      // (layout calculation is not handled properly by the FlexibleColumnLayoutSemanticHelper in this case)
      if (mParameters.updateFCLLevel < 0 && !mParameters.sLayout) {
        mParameters.sLayout = this.oRouterProxy.findLayoutForHash(sPath);
      }
      return this.oAppComponent.getRootViewController().calculateLayout(FCLLevel, sPath, mParameters.sLayout, mParameters.keepCurrentLayout);
    }

    /**
     * Event handler before a route is matched.
     * Displays a busy indicator.
     *
     */;
    _proto._beforeRouteMatched = function _beforeRouteMatched( /*oEvent: Event*/
    ) {
      const bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();
      if (!bPlaceholderEnabled) {
        const oRootView = this.oAppComponent.getRootControl();
        BusyLocker.lock(oRootView);
      }
    }

    /**
     * Event handler when a route is matched.
     * Hides the busy indicator and fires its own 'routematched' event.
     *
     * @param oEvent The event
     */;
    _proto._onRouteMatched = function _onRouteMatched(oEvent) {
      const oAppStateHandler = this.oAppComponent.getAppStateHandler(),
        oRootView = this.oAppComponent.getRootControl();
      const bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();
      if (BusyLocker.isLocked(oRootView) && !bPlaceholderEnabled) {
        BusyLocker.unlock(oRootView);
      }
      const mParameters = oEvent.getParameters();
      if (this.navigationInfoQueue.length) {
        mParameters.navigationInfo = this.navigationInfoQueue[0];
        this.navigationInfoQueue = this.navigationInfoQueue.slice(1);
      } else {
        mParameters.navigationInfo = {};
      }
      if (oAppStateHandler.checkIfRouteChangedByIApp()) {
        mParameters.navigationInfo.reason = NavigationReason.AppStateChanged;
        oAppStateHandler.resetRouteChangedByIApp();
      }
      this.sCurrentRouteName = oEvent.getParameter("name");
      this.sCurrentRoutePattern = mParameters.config.pattern;
      this.aCurrentViews = oEvent.getParameter("views");
      mParameters.routeInformation = this._getRouteInformation(this.sCurrentRouteName);
      mParameters.routePattern = this.sCurrentRoutePattern;
      this._fireRouteMatchEvents(mParameters);

      // Check if current hash has been set by the routerProxy.navToHash function
      // If not, rebuild history properly (both in the browser and the RouterProxy)
      if (!history.state || history.state.feLevel === undefined) {
        this.oRouterProxy.restoreHistory().then(() => {
          this.oRouterProxy.resolveRouteMatch();
        }).catch(function (oError) {
          Log.error("Error while restoring history", oError);
        });
      } else {
        this.oRouterProxy.resolveRouteMatch();
      }
    };
    _proto.attachRouteMatched = function attachRouteMatched(oData, fnFunction, oListener) {
      this.eventProvider.attachEvent("routeMatched", oData, fnFunction, oListener);
    };
    _proto.detachRouteMatched = function detachRouteMatched(fnFunction, oListener) {
      this.eventProvider.detachEvent("routeMatched", fnFunction, oListener);
    };
    _proto.attachAfterRouteMatched = function attachAfterRouteMatched(oData, fnFunction, oListener) {
      this.eventProvider.attachEvent("afterRouteMatched", oData, fnFunction, oListener);
    };
    _proto.detachAfterRouteMatched = function detachAfterRouteMatched(fnFunction, oListener) {
      this.eventProvider.detachEvent("afterRouteMatched", fnFunction, oListener);
    };
    _proto.getRouteFromHash = function getRouteFromHash(oRouter, oAppComponent) {
      const sHash = oRouter.getHashChanger().hash;
      const oRouteInfo = oRouter.getRouteInfoByHash(sHash);
      return oAppComponent.getMetadata().getManifestEntry("/sap.ui5/routing/routes").filter(function (oRoute) {
        return oRoute.name === oRouteInfo.name;
      })[0];
    };
    _proto.getTargetsFromRoute = function getTargetsFromRoute(oRoute) {
      const oTarget = oRoute.target;
      if (typeof oTarget === "string") {
        return [this._mTargets[oTarget]];
      } else {
        const aTarget = [];
        oTarget.forEach(sTarget => {
          aTarget.push(this._mTargets[sTarget]);
        });
        return aTarget;
      }
    };
    _proto.initializeRouting = async function initializeRouting() {
      // Attach router handlers
      await CollaborationHelper.processAndExpandHash();
      this._fnOnRouteMatched = this._onRouteMatched.bind(this);
      this.oRouter.attachRouteMatched(this._fnOnRouteMatched, this);
      const bPlaceholderEnabled = new Placeholder().isPlaceholderEnabled();
      if (!bPlaceholderEnabled) {
        this.oRouter.attachBeforeRouteMatched(this._beforeRouteMatched.bind(this));
      }
      // Reset internal state
      this.navigationInfoQueue = [];
      EditState.resetEditState();
      this.bExitOnNavigateBackToRoot = !this.oRouter.match("");
      const bIsIappState = this.oRouter.getHashChanger().getHash().indexOf("sap-iapp-state") !== -1;
      try {
        const oStartupParameters = await this.oAppComponent.getStartupParameters();
        const bHasStartUpParameters = oStartupParameters !== undefined && Object.keys(oStartupParameters).length !== 0;
        const sHash = this.oRouter.getHashChanger().getHash();
        // Manage startup parameters (in case of no iapp-state)
        if (!bIsIappState && bHasStartUpParameters && !sHash) {
          if (oStartupParameters.preferredMode && oStartupParameters.preferredMode[0].toUpperCase().indexOf("CREATE") !== -1) {
            // Create mode
            // This check will catch multiple modes like create, createWith and autoCreateWith which all need
            // to be handled like create startup!
            await this._manageCreateStartup(oStartupParameters);
          } else {
            // Deep link
            await this._manageDeepLinkStartup(oStartupParameters);
          }
        }
      } catch (oError) {
        Log.error("Error during routing initialization", oError);
      }
    };
    _proto.getDefaultCreateHash = function getDefaultCreateHash(oStartupParameters) {
      return AppStartupHelper.getDefaultCreateHash(oStartupParameters, this.getContextPath(), this.oRouter);
    };
    _proto._manageCreateStartup = function _manageCreateStartup(oStartupParameters) {
      return AppStartupHelper.getCreateStartupHash(oStartupParameters, this.getContextPath(), this.oRouter, this.oMetaModel).then(sNewHash => {
        if (sNewHash) {
          this.oRouter.getHashChanger().replaceHash(sNewHash);
          if (oStartupParameters !== null && oStartupParameters !== void 0 && oStartupParameters.preferredMode && oStartupParameters.preferredMode[0].toUpperCase().indexOf("AUTOCREATE") !== -1) {
            this.oAppComponent.setStartupModeAutoCreate();
          } else {
            this.oAppComponent.setStartupModeCreate();
          }
          this.bExitOnNavigateBackToRoot = true;
        }
      });
    };
    _proto._manageDeepLinkStartup = function _manageDeepLinkStartup(oStartupParameters) {
      return AppStartupHelper.getDeepLinkStartupHash(this.oAppComponent.getManifest()["sap.ui5"].routing, oStartupParameters, this.oModel).then(oDeepLink => {
        let sHash;
        if (oDeepLink.context) {
          const sTechnicalPath = oDeepLink.context.getPath();
          const sSemanticPath = this._checkIfContextSupportsSemanticPath(oDeepLink.context) ? SemanticKeyHelper.getSemanticPath(oDeepLink.context) : sTechnicalPath;
          if (sSemanticPath !== sTechnicalPath) {
            // Store the mapping technical <-> semantic path to avoid recalculating it later
            // and use the semantic path instead of the technical one
            this.setLastSemanticMapping({
              technicalPath: sTechnicalPath,
              semanticPath: sSemanticPath
            });
          }
          sHash = sSemanticPath.substring(1); // To remove the leading '/'
        } else if (oDeepLink.hash) {
          sHash = oDeepLink.hash;
        }
        if (sHash) {
          //Replace the hash with newly created hash
          this.oRouter.getHashChanger().replaceHash(sHash);
          this.oAppComponent.setStartupModeDeeplink();
        }
      });
    };
    _proto.getOutbounds = function getOutbounds() {
      return this.outbounds;
    }

    /**
     * Gets the name of the Draft root entity set or the sticky-enabled entity set.
     *
     * @returns The name of the root EntitySet
     * @ui5-restricted
     */;
    _proto.getContextPath = function getContextPath() {
      return this.sContextPath;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    return RoutingService;
  }(Service);
  _exports.RoutingService = RoutingService;
  let RoutingServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(RoutingServiceFactory, _ServiceFactory);
    function RoutingServiceFactory() {
      return _ServiceFactory.apply(this, arguments) || this;
    }
    var _proto2 = RoutingServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const oRoutingService = new RoutingService(oServiceContext);
      return oRoutingService.initPromise;
    };
    return RoutingServiceFactory;
  }(ServiceFactory);
  return RoutingServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/RoutingServiceFactory", ["sap/base/Log","sap/fe/core/controllerextensions/BusyLocker","sap/fe/core/controllerextensions/messageHandler/messageHandling","sap/fe/core/controllerextensions/Placeholder","sap/fe/core/controllerextensions/routing/NavigationReason","sap/fe/core/helpers/AppStartupHelper","sap/fe/core/helpers/ClassSupport","sap/fe/core/helpers/EditState","sap/fe/core/helpers/ModelHelper","sap/fe/core/helpers/SemanticKeyHelper","sap/suite/ui/commons/collaboration/CollaborationHelper","sap/ui/base/BindingParser","sap/ui/base/EventProvider","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory","sap/ui/model/odata/v4/ODataUtils"],function(t,e,o,n,i,r,a,s,u,h,c,l,g,f,p,d){"use strict";var m,v,P,C,R,_,y;var M={};var b=a.event;var x=a.defineUI5Class;function L(t,e,o,n){if(!o)return;Object.defineProperty(t,e,{enumerable:o.enumerable,configurable:o.configurable,writable:o.writable,value:o.initializer?o.initializer.call(n):void 0})}function T(t){if(t===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return t}function S(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;w(t,e)}function w(t,e){w=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,o){e.__proto__=o;return e};return w(t,e)}function E(t,e,o,n,i){var r={};Object.keys(n).forEach(function(t){r[t]=n[t]});r.enumerable=!!r.enumerable;r.configurable=!!r.configurable;if("value"in r||r.initializer){r.writable=true}r=o.slice().reverse().reduce(function(o,n){return n(t,e,o)||o},r);if(i&&r.initializer!==void 0){r.value=r.initializer?r.initializer.call(i):void 0;r.initializer=undefined}if(r.initializer===void 0){Object.defineProperty(t,e,r);r=null}return r}function A(t,e){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let I=(m=x("sap.fe.core.services.RoutingServiceEventing"),v=b(),P=b(),m(C=(R=function(t){S(e,t);function e(){var e;for(var o=arguments.length,n=new Array(o),i=0;i<o;i++){n[i]=arguments[i]}e=t.call(this,...n)||this;L(e,"routeMatched",_,T(e));L(e,"afterRouteMatched",y,T(e));return e}return e}(g),_=E(R.prototype,"routeMatched",[v],{configurable:true,enumerable:true,writable:true,initializer:null}),y=E(R.prototype,"afterRouteMatched",[P],{configurable:true,enumerable:true,writable:true,initializer:null}),R))||C);let O=function(a){S(g,a);function g(){var t;for(var e=arguments.length,o=new Array(e),n=0;n<e;n++){o[n]=arguments[n]}t=a.call(this,...o)||this;t.navigationInfoQueue=[];return t}M.RoutingService=g;var f=g.prototype;f.init=function t(){const e=this.getContext();if(e.scopeType==="component"){var o;this.oAppComponent=e.scopeObject;this.oModel=this.oAppComponent.getModel();this.oMetaModel=this.oModel.getMetaModel();this.oRouter=this.oAppComponent.getRouter();this.oRouterProxy=this.oAppComponent.getRouterProxy();this.eventProvider=new I;const t=this.oAppComponent.getManifestEntry("sap.ui5").routing;this._parseRoutingConfiguration(t);const n=this.oAppComponent.getManifestEntry("sap.app");this.outbounds=(o=n.crossNavigation)===null||o===void 0?void 0:o.outbounds}this.initPromise=Promise.resolve(this)};f.beforeExit=function t(){this.oRouter.detachRouteMatched(this._fnOnRouteMatched,this);this.eventProvider.fireEvent("routeMatched",{})};f.exit=function t(){this.eventProvider.destroy()};f._parseRoutingConfiguration=function e(o){var n;const i=(o===null||o===void 0?void 0:(n=o.config)===null||n===void 0?void 0:n.routerClass)==="sap.f.routing.Router";this._mTargets={};Object.keys(o.targets).forEach(t=>{this._mTargets[t]=Object.assign({targetName:t},o.targets[t]);if(this._mTargets[t].contextPattern!==undefined){this._mTargets[t].viewLevel=this._getViewLevelFromPattern(this._mTargets[t].contextPattern,0)}});this._mRoutes={};for(const e in o.routes){const n=o.routes[e],r=Array.isArray(n.target)?n.target:[n.target],a=Array.isArray(o.routes)?n.name:e,s=n.pattern;if(s.length<8||s.indexOf(":?query:")!==s.length-8){t.warning(`Pattern for route ${a} doesn't end with ':?query:' : ${s}`)}const u=this._getViewLevelFromPattern(s,0);this._mRoutes[a]={name:a,pattern:s,targets:r,routeLevel:u};for(let t=0;t<r.length;t++){const e=this._mTargets[r[t]].parent;if(e){r.push(e)}}if(!i){if(this._mTargets[r[0]].viewLevel===undefined||this._mTargets[r[0]].viewLevel<u){this._mTargets[r[0]].viewLevel=u}this._mTargets[r[0]].FCLLevel=-1}else if(r.length===1&&this._mTargets[r[0]].controlAggregation!=="beginColumnPages"){this._mTargets[r[0]].FCLLevel=3}else{r.forEach(t=>{switch(this._mTargets[t].controlAggregation){case"beginColumnPages":this._mTargets[t].FCLLevel=0;break;case"midColumnPages":this._mTargets[t].FCLLevel=1;break;default:this._mTargets[t].FCLLevel=2}})}}Object.keys(this._mTargets).forEach(t=>{while(this._mTargets[t].parent){const e=this._mTargets[t].parent;this._mTargets[e].viewLevel=this._mTargets[e].viewLevel||this._mTargets[t].viewLevel;this._mTargets[e].contextPattern=this._mTargets[e].contextPattern||this._mTargets[t].contextPattern;this._mTargets[e].FCLLevel=this._mTargets[e].FCLLevel||this._mTargets[t].FCLLevel;this._mTargets[e].controlAggregation=this._mTargets[e].controlAggregation||this._mTargets[t].controlAggregation;t=e}});const r=[];const a=[];let s;for(const t in this._mRoutes){const e=this._mRoutes[t].routeLevel;if(e===0){r.push(t)}else if(e===1){a.push(t)}}if(r.length===1){s=r[0]}else if(a.length===1){s=a[0]}if(s){const e=this._mRoutes[s].targets.slice(-1)[0];this.sContextPath="";if(this._mTargets[e].options&&this._mTargets[e].options.settings){const t=this._mTargets[e].options.settings;this.sContextPath=t.contextPath||`/${t.entitySet}`}if(!this.sContextPath){t.warning(`Cannot determine default contextPath: contextPath or entitySet missing in default target: ${e}`)}}else{t.warning("Cannot determine default contextPath: no default route found.")}Object.keys(this._mTargets).map(t=>this._mTargets[t]).sort((t,e)=>t.viewLevel<e.viewLevel?-1:1).forEach(t=>{if(t.options){const e=t.options.settings;const o=e.contextPath||(e.entitySet?`/${e.entitySet}`:"");if(!e.fullContextPath&&o){e.fullContextPath=`${o}/`}Object.keys(e.navigation||{}).forEach(o=>{const n=this._mRoutes[e.navigation[o].detail.route];if(n&&n.targets){n.targets.forEach(n=>{if(this._mTargets[n].options&&this._mTargets[n].options.settings&&!this._mTargets[n].options.settings.fullContextPath){if(t.viewLevel===0){this._mTargets[n].options.settings.fullContextPath=`${(o.startsWith("/")?"":"/")+o}/`}else{this._mTargets[n].options.settings.fullContextPath=`${e.fullContextPath+o}/`}}})}})}})};f._getViewLevelFromPattern=function t(e,o){e=e.replace(":?query:","");const n=new RegExp("/[^/]*$");if(e&&e[0]!=="/"&&e[0]!=="?"){e=`/${e}`}if(e.length){e=e.replace(n,"");if(this.oRouter.match(e)||e===""){return this._getViewLevelFromPattern(e,++o)}else{return this._getViewLevelFromPattern(e,o)}}else{return o}};f._getRouteInformation=function t(e){return this._mRoutes[e]};f._getTargetInformation=function t(e){return this._mTargets[e]};f._getComponentId=function t(e,o){if(o.indexOf(`${e}---`)===0){return o.substr(e.length+3)}return o};f.getTargetInformationFor=function t(e){const o=this._getComponentId(e._sOwnerId,e.getId());let n=null;Object.keys(this._mTargets).forEach(t=>{if(this._mTargets[t].id===o||this._mTargets[t].viewId===o){n=t}});return this._getTargetInformation(n)};f.getLastSemanticMapping=function t(){return this.oLastSemanticMapping};f.setLastSemanticMapping=function t(e){this.oLastSemanticMapping=e};f.navigateTo=function t(e,o,n,i){let r,a;if(e.getModel()&&e.getModel().getMetaModel&&e.getModel().getMetaModel()){a=u.isStickySessionSupported(e.getModel().getMetaModel())}if(!n){r=Promise.resolve(h.getSemanticPath(e))}else{r=this.prepareParameters(n,o,e).then(t=>this.oRouter.getURL(o,t))}return r.then(t=>{this.oRouterProxy.navToHash(t,i,false,false,!a)})};f.prepareParameters=function e(o,n,i){let r;try{const t=i.getPath();const e=i.getModel().getMetaModel();const n=t.split("/");const a=Object.keys(o).map(t=>{const r=o[t];const a=l.complexParser(r);const s=a.parts||[a];const u=s.map(function(t){const o=t.path.split("../");const r=n.slice(0,n.length-o.length+1);r.push(o[o.length-1]);const a=r.join("/");const s=e.getMetaContext(a);return i.requestProperty(a).then(function(t){const e=s.getObject();const o=e.$Type;return d.formatLiteral(t,o)})});return Promise.all(u).then(e=>{const o=a.formatter?a.formatter.apply(this,e):e.join("");return{key:t,value:o}})});r=Promise.all(a).then(function(t){const e={};t.forEach(function(t){e[t.key]=t.value});return e})}catch(e){t.error(`Could not parse the parameters for the navigation to route ${n}`);r=Promise.resolve(undefined)}return r};f._fireRouteMatchEvents=function t(e){this.eventProvider.fireEvent("routeMatched",e);this.eventProvider.fireEvent("afterRouteMatched",e);s.cleanProcessedEditState()};f.navigateToContext=function t(e,n,i,r){let a="",s,h=false;if(e.getModel()&&e.getModel().getMetaModel){h=u.isStickySessionSupported(e.getModel().getMetaModel())}if(n&&n.targetPath&&i&&i.navigation){const t=i.navigation[n.targetPath].detail;a=t.route;if(t.parameters&&e.isA("sap.ui.model.odata.v4.Context")){s=this.prepareParameters(t.parameters,a,e)}}let c=this._getPathFromContext(e,n);if(c.length===0&&this.bExitOnNavigateBackToRoot){this.oRouterProxy.exitFromApp();return Promise.resolve(true)}if(n!==null&&n!==void 0&&n.asyncContext||n!==null&&n!==void 0&&n.bDeferredContext){c+="(...)"}const l=this._calculateLayout(c,n);if(l){c+=`?layout=${l}`}const g={oAsyncContext:n===null||n===void 0?void 0:n.asyncContext,bDeferredContext:n===null||n===void 0?void 0:n.bDeferredContext,bTargetEditable:n===null||n===void 0?void 0:n.editable,bPersistOPScroll:n===null||n===void 0?void 0:n.bPersistOPScroll,bDraftNavigation:n===null||n===void 0?void 0:n.bDraftNavigation,bShowPlaceholder:(n===null||n===void 0?void 0:n.showPlaceholder)!==undefined?n===null||n===void 0?void 0:n.showPlaceholder:true,reason:n===null||n===void 0?void 0:n.reason};if((n===null||n===void 0?void 0:n.updateFCLLevel)!==-1&&(n===null||n===void 0?void 0:n.bRecreateContext)!==true){if(e.isA("sap.ui.model.odata.v4.Context")){g.useContext=e}else{g.listBindingForCreate=e}}if(n!==null&&n!==void 0&&n.checkNoHashChange){const t=this.oRouterProxy.getHash().replace(/[&?]{1}sap-iapp-state=[A-Z0-9]+/,"");if(c===t){const t=this.oRouter.getRouteInfoByHash(this.oRouterProxy.getHash());if(t){t.navigationInfo=g;t.routeInformation=this._getRouteInformation(this.sCurrentRouteName);t.routePattern=this.sCurrentRoutePattern;t.views=this.aCurrentViews}this.oRouterProxy.setFocusForced(!!n.bForceFocus);this._fireRouteMatchEvents(t);return Promise.resolve(true)}}if(n!==null&&n!==void 0&&n.transient&&n.editable==true&&c.indexOf("(...)")===-1){if(c.indexOf("?")>-1){c+="&i-action=create"}else{c+="?i-action=create"}}if(r&&r.name==="sap.fe.templates.ListReport"){const t=this.oRouter.getRouteInfoByHash(c);if(t){const e=this._getRouteInformation(t.name);if(e&&e.targets&&e.targets.length>0){const t=e.targets[e.targets.length-1];const n=this._getTargetInformation(t);if(n&&n.name==="sap.fe.templates.ObjectPage"){o.removeUnboundTransitionMessages()}}}}this.navigationInfoQueue.push(g);if(a&&s){return s.then(t=>{t.bIsStickyMode=h;this.oRouter.navTo(a,t);return Promise.resolve(true)})}return this.oRouterProxy.navToHash(c,false,n===null||n===void 0?void 0:n.noPreservationCache,n===null||n===void 0?void 0:n.bForceFocus,!h).then(t=>{if(!t){this.navigationInfoQueue.pop()}return t})};f.navigateToRoute=function t(e,o){const n=this.oRouter.getURL(e,o);return this.oRouterProxy.navToHash(n,undefined,undefined,undefined,!o.bIsStickyMode)};f.isCurrentStateImpactedBy=function t(e){const o=e.getPath();if(this.oRouterProxy.isCurrentStateImpactedBy(o)){return true}else if(/^[^()]+\([^()]+\)$/.test(o)){let t;if(this.oLastSemanticMapping&&this.oLastSemanticMapping.technicalPath===o){t=this.oLastSemanticMapping.semanticPath}else{t=h.getSemanticPath(e)}return t!=o?this.oRouterProxy.isCurrentStateImpactedBy(t):false}else{return false}};f._findPathToNavigate=function t(e){const o=new RegExp("/[^/]*$");e=e.replace(o,"");if(this.oRouter.match(e)||e===""){return e}else{return this._findPathToNavigate(e)}};f._checkIfContextSupportsSemanticPath=function t(e){const o=e.getPath();if(!/^\/[^(]+\([^)]+\)$/.test(o)){return false}const n=e.getModel().getMetaModel();const i=n.getMetaContext(e.getPath()).getObject("@sapui.name");if(!h.getSemanticKeys(n,i)){return false}return u.isDraftSupported(n,o)};f._getPathFromContext=function t(e,o){let n;if(e.isA("sap.ui.model.odata.v4.ODataListBinding")&&e.isRelative()){n=e.getHeaderContext().getPath()}else{n=e.getPath()}if(o.updateFCLLevel===-1){n=this._findPathToNavigate(n);if(this.oLastSemanticMapping&&this.oLastSemanticMapping.technicalPath===n){n=this.oLastSemanticMapping.semanticPath}}else if(this._checkIfContextSupportsSemanticPath(e)){const t=h.getSemanticPath(e,true);if(!t){this.setLastSemanticMapping(undefined)}else if(t!==n){this.setLastSemanticMapping({technicalPath:n,semanticPath:t});n=t}}if(n[0]==="/"){n=n.substring(1)}return n};f._calculateLayout=function t(e,o){let n=o.FCLLevel;if(o.updateFCLLevel){n+=o.updateFCLLevel;if(n<0){n=0}}if(o.updateFCLLevel<0&&!o.sLayout){o.sLayout=this.oRouterProxy.findLayoutForHash(e)}return this.oAppComponent.getRootViewController().calculateLayout(n,e,o.sLayout,o.keepCurrentLayout)};f._beforeRouteMatched=function t(){const o=(new n).isPlaceholderEnabled();if(!o){const t=this.oAppComponent.getRootControl();e.lock(t)}};f._onRouteMatched=function o(r){const a=this.oAppComponent.getAppStateHandler(),s=this.oAppComponent.getRootControl();const u=(new n).isPlaceholderEnabled();if(e.isLocked(s)&&!u){e.unlock(s)}const h=r.getParameters();if(this.navigationInfoQueue.length){h.navigationInfo=this.navigationInfoQueue[0];this.navigationInfoQueue=this.navigationInfoQueue.slice(1)}else{h.navigationInfo={}}if(a.checkIfRouteChangedByIApp()){h.navigationInfo.reason=i.AppStateChanged;a.resetRouteChangedByIApp()}this.sCurrentRouteName=r.getParameter("name");this.sCurrentRoutePattern=h.config.pattern;this.aCurrentViews=r.getParameter("views");h.routeInformation=this._getRouteInformation(this.sCurrentRouteName);h.routePattern=this.sCurrentRoutePattern;this._fireRouteMatchEvents(h);if(!history.state||history.state.feLevel===undefined){this.oRouterProxy.restoreHistory().then(()=>{this.oRouterProxy.resolveRouteMatch()}).catch(function(e){t.error("Error while restoring history",e)})}else{this.oRouterProxy.resolveRouteMatch()}};f.attachRouteMatched=function t(e,o,n){this.eventProvider.attachEvent("routeMatched",e,o,n)};f.detachRouteMatched=function t(e,o){this.eventProvider.detachEvent("routeMatched",e,o)};f.attachAfterRouteMatched=function t(e,o,n){this.eventProvider.attachEvent("afterRouteMatched",e,o,n)};f.detachAfterRouteMatched=function t(e,o){this.eventProvider.detachEvent("afterRouteMatched",e,o)};f.getRouteFromHash=function t(e,o){const n=e.getHashChanger().hash;const i=e.getRouteInfoByHash(n);return o.getMetadata().getManifestEntry("/sap.ui5/routing/routes").filter(function(t){return t.name===i.name})[0]};f.getTargetsFromRoute=function t(e){const o=e.target;if(typeof o==="string"){return[this._mTargets[o]]}else{const t=[];o.forEach(e=>{t.push(this._mTargets[e])});return t}};f.initializeRouting=async function e(){await c.processAndExpandHash();this._fnOnRouteMatched=this._onRouteMatched.bind(this);this.oRouter.attachRouteMatched(this._fnOnRouteMatched,this);const o=(new n).isPlaceholderEnabled();if(!o){this.oRouter.attachBeforeRouteMatched(this._beforeRouteMatched.bind(this))}this.navigationInfoQueue=[];s.resetEditState();this.bExitOnNavigateBackToRoot=!this.oRouter.match("");const i=this.oRouter.getHashChanger().getHash().indexOf("sap-iapp-state")!==-1;try{const t=await this.oAppComponent.getStartupParameters();const e=t!==undefined&&Object.keys(t).length!==0;const o=this.oRouter.getHashChanger().getHash();if(!i&&e&&!o){if(t.preferredMode&&t.preferredMode[0].toUpperCase().indexOf("CREATE")!==-1){await this._manageCreateStartup(t)}else{await this._manageDeepLinkStartup(t)}}}catch(e){t.error("Error during routing initialization",e)}};f.getDefaultCreateHash=function t(e){return r.getDefaultCreateHash(e,this.getContextPath(),this.oRouter)};f._manageCreateStartup=function t(e){return r.getCreateStartupHash(e,this.getContextPath(),this.oRouter,this.oMetaModel).then(t=>{if(t){this.oRouter.getHashChanger().replaceHash(t);if(e!==null&&e!==void 0&&e.preferredMode&&e.preferredMode[0].toUpperCase().indexOf("AUTOCREATE")!==-1){this.oAppComponent.setStartupModeAutoCreate()}else{this.oAppComponent.setStartupModeCreate()}this.bExitOnNavigateBackToRoot=true}})};f._manageDeepLinkStartup=function t(e){return r.getDeepLinkStartupHash(this.oAppComponent.getManifest()["sap.ui5"].routing,e,this.oModel).then(t=>{let e;if(t.context){const o=t.context.getPath();const n=this._checkIfContextSupportsSemanticPath(t.context)?h.getSemanticPath(t.context):o;if(n!==o){this.setLastSemanticMapping({technicalPath:o,semanticPath:n})}e=n.substring(1)}else if(t.hash){e=t.hash}if(e){this.oRouter.getHashChanger().replaceHash(e);this.oAppComponent.setStartupModeDeeplink()}})};f.getOutbounds=function t(){return this.outbounds};f.getContextPath=function t(){return this.sContextPath};f.getInterface=function t(){return this};return g}(f);M.RoutingService=O;let F=function(t){S(e,t);function e(){return t.apply(this,arguments)||this}var o=e.prototype;o.createInstance=function t(e){const o=new O(e);return o.initPromise};return e}(p);return F},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/ShellServicesFactory-dbg", ["sap/base/Log", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory"], function (Log, Service, ServiceFactory) {
  "use strict";

  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  /**
   * Mock implementation of the ShellService for OpenFE
   *
   * @implements {IShellServices}
   * @private
   */
  let ShellServiceMock = /*#__PURE__*/function (_Service) {
    _inheritsLoose(ShellServiceMock, _Service);
    function ShellServiceMock() {
      return _Service.apply(this, arguments) || this;
    }
    var _proto = ShellServiceMock.prototype;
    _proto.init = function init() {
      this.initPromise = Promise.resolve(this);
      this.instanceType = "mock";
    };
    _proto.getLinks = function getLinks( /*oArgs: object*/
    ) {
      return Promise.resolve([]);
    };
    _proto.getLinksWithCache = function getLinksWithCache( /*oArgs: object*/
    ) {
      return Promise.resolve([]);
    };
    _proto.toExternal = function toExternal( /*oNavArgumentsArr: Array<object>, oComponent: object*/
    ) {
      /* Do Nothing */
    };
    _proto.getStartupAppState = function getStartupAppState( /*oArgs: object*/
    ) {
      return Promise.resolve(undefined);
    };
    _proto.backToPreviousApp = function backToPreviousApp() {
      /* Do Nothing */
    };
    _proto.hrefForExternal = function hrefForExternal( /*oArgs?: object, oComponent?: object, bAsync?: boolean*/
    ) {
      return "";
    };
    _proto.getHash = function getHash() {
      return window.location.href;
    };
    _proto.hrefForExternalAsync = function hrefForExternalAsync( /*oArgs?: object, oComponent?: object*/
    ) {
      return Promise.resolve({});
    };
    _proto.getAppState = function getAppState( /*oComponent: object, sAppStateKey: string*/
    ) {
      return Promise.resolve({});
    };
    _proto.createEmptyAppState = function createEmptyAppState( /*oComponent: object*/
    ) {
      return Promise.resolve({});
    };
    _proto.createEmptyAppStateAsync = function createEmptyAppStateAsync( /*oComponent: object*/
    ) {
      return Promise.resolve({});
    };
    _proto.isNavigationSupported = function isNavigationSupported( /*oNavArgumentsArr: Array<object>, oComponent: object*/
    ) {
      return Promise.resolve({});
    };
    _proto.isInitialNavigation = function isInitialNavigation() {
      return false;
    };
    _proto.isInitialNavigationAsync = function isInitialNavigationAsync() {
      return Promise.resolve({});
    };
    _proto.expandCompactHash = function expandCompactHash( /*sHashFragment: string*/
    ) {
      return Promise.resolve({});
    };
    _proto.parseShellHash = function parseShellHash( /*sHash: string*/
    ) {
      return {};
    };
    _proto.splitHash = function splitHash( /*sHash: string*/
    ) {
      return Promise.resolve({});
    };
    _proto.constructShellHash = function constructShellHash( /*oNewShellHash: object*/
    ) {
      return "";
    };
    _proto.setDirtyFlag = function setDirtyFlag( /*bDirty: boolean*/
    ) {
      /* Do Nothing */
    };
    _proto.registerDirtyStateProvider = function registerDirtyStateProvider( /*fnDirtyStateProvider: Function*/
    ) {
      /* Do Nothing */
    };
    _proto.deregisterDirtyStateProvider = function deregisterDirtyStateProvider( /*fnDirtyStateProvider: Function*/
    ) {
      /* Do Nothing */
    };
    _proto.createRenderer = function createRenderer() {
      return {};
    };
    _proto.getUser = function getUser() {
      return {};
    };
    _proto.hasUShell = function hasUShell() {
      return false;
    };
    _proto.registerNavigationFilter = function registerNavigationFilter( /*fnNavFilter: Function*/
    ) {
      /* Do Nothing */
    };
    _proto.unregisterNavigationFilter = function unregisterNavigationFilter( /*fnNavFilter: Function*/
    ) {
      /* Do Nothing */
    };
    _proto.setBackNavigation = function setBackNavigation( /*fnCallBack?: Function*/
    ) {
      /* Do Nothing */
    };
    _proto.setHierarchy = function setHierarchy( /*aHierarchyLevels: Array<object>*/
    ) {
      /* Do Nothing */
    };
    _proto.setTitle = function setTitle( /*sTitle: string*/
    ) {
      /* Do Nothing */
    };
    _proto.getContentDensity = function getContentDensity() {
      // in case there is no shell we probably need to look at the classes being defined on the body
      if (document.body.classList.contains("sapUiSizeCozy")) {
        return "cozy";
      } else if (document.body.classList.contains("sapUiSizeCompact")) {
        return "compact";
      } else {
        return "";
      }
    };
    _proto.getPrimaryIntent = function getPrimaryIntent( /*sSemanticObject: string, mParameters?: object*/
    ) {
      return Promise.resolve();
    };
    _proto.waitForPluginsLoad = function waitForPluginsLoad() {
      return Promise.resolve(true);
    };
    return ShellServiceMock;
  }(Service);
  /**
   * @typedef ShellServicesSettings
   * @private
   */
  /**
   * Wrap a JQuery Promise within a native {Promise}.
   *
   * @template {object} T
   * @param jqueryPromise The original jquery promise
   * @returns A native promise wrapping the same object
   * @private
   */
  function wrapJQueryPromise(jqueryPromise) {
    return new Promise((resolve, reject) => {
      // eslint-disable-next-line promise/catch-or-return
      jqueryPromise.done(resolve).fail(reject);
    });
  }

  /**
   * Base implementation of the ShellServices
   *
   * @implements {IShellServices}
   * @private
   */
  let ShellServices = /*#__PURE__*/function (_Service2) {
    _inheritsLoose(ShellServices, _Service2);
    function ShellServices() {
      return _Service2.apply(this, arguments) || this;
    }
    var _proto2 = ShellServices.prototype;
    // !: means that we know it will be assigned before usage
    _proto2.init = function init() {
      const oContext = this.getContext();
      const oComponent = oContext.scopeObject;
      this.oShellContainer = oContext.settings.shellContainer;
      this.instanceType = "real";
      this.linksCache = {};
      this.fnFindSemanticObjectsInCache = function (oArgs) {
        const _oArgs = oArgs;
        const aCachedSemanticObjects = [];
        const aNonCachedSemanticObjects = [];
        for (let i = 0; i < _oArgs.length; i++) {
          if (!!_oArgs[i][0] && !!_oArgs[i][0].semanticObject) {
            if (this.linksCache[_oArgs[i][0].semanticObject]) {
              aCachedSemanticObjects.push(this.linksCache[_oArgs[i][0].semanticObject].links);
              Object.defineProperty(oArgs[i][0], "links", {
                value: this.linksCache[_oArgs[i][0].semanticObject].links
              });
            } else {
              aNonCachedSemanticObjects.push(_oArgs[i]);
            }
          }
        }
        return {
          oldArgs: oArgs,
          newArgs: aNonCachedSemanticObjects,
          cachedLinks: aCachedSemanticObjects
        };
      };
      this.initPromise = new Promise((resolve, reject) => {
        this.resolveFn = resolve;
        this.rejectFn = reject;
      });
      const oCrossAppNavServicePromise = this.oShellContainer.getServiceAsync("CrossApplicationNavigation");
      const oUrlParsingServicePromise = this.oShellContainer.getServiceAsync("URLParsing");
      const oShellNavigationServicePromise = this.oShellContainer.getServiceAsync("ShellNavigation");
      const oShellPluginManagerPromise = this.oShellContainer.getServiceAsync("PluginManager");
      const oShellUIServicePromise = oComponent.getService("ShellUIService");
      Promise.all([oCrossAppNavServicePromise, oUrlParsingServicePromise, oShellNavigationServicePromise, oShellUIServicePromise, oShellPluginManagerPromise]).then(_ref => {
        let [oCrossAppNavService, oUrlParsingService, oShellNavigation, oShellUIService, oShellPluginManager] = _ref;
        this.crossAppNavService = oCrossAppNavService;
        this.urlParsingService = oUrlParsingService;
        this.shellNavigation = oShellNavigation;
        this.shellUIService = oShellUIService;
        this.shellPluginManager = oShellPluginManager;
        this.resolveFn();
      }).catch(this.rejectFn);
    }

    /**
     * Retrieves the target links configured for a given semantic object & action
     * Will retrieve the CrossApplicationNavigation
     * service reference call the getLinks method. In case service is not available or any exception
     * method throws exception error in console.
     *
     * @private
     * @ui5-restricted
     * @param oArgs Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>getLinks arguments
     * @returns Promise which will be resolved to target links array
     */;
    _proto2.getLinks = function getLinks(oArgs) {
      return new Promise((resolve, reject) => {
        // eslint-disable-next-line promise/catch-or-return
        this.crossAppNavService.getLinks(oArgs).fail(oError => {
          reject(new Error(`${oError} sap.fe.core.services.ShellServicesFactory.getLinks`));
        }).then(resolve);
      });
    }

    /**
     * Retrieves the target links configured for a given semantic object & action in cache
     * Will retrieve the CrossApplicationNavigation
     * service reference call the getLinks method. In case service is not available or any exception
     * method throws exception error in console.
     *
     * @private
     * @ui5-restricted
     * @param oArgs Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>getLinks arguments
     * @returns Promise which will be resolved to target links array
     */;
    _proto2.getLinksWithCache = function getLinksWithCache(oArgs) {
      return new Promise((resolve, reject) => {
        // eslint-disable-next-line promise/catch-or-return
        if (oArgs.length === 0) {
          resolve([]);
        } else {
          const oCacheResults = this.fnFindSemanticObjectsInCache(oArgs);
          if (oCacheResults.newArgs.length === 0) {
            resolve(oCacheResults.cachedLinks);
          } else {
            // eslint-disable-next-line promise/catch-or-return
            this.crossAppNavService.getLinks(oCacheResults.newArgs).fail(oError => {
              reject(new Error(`${oError} sap.fe.core.services.ShellServicesFactory.getLinksWithCache`));
            }).then(aLinks => {
              if (aLinks.length !== 0) {
                const oSemanticObjectsLinks = {};
                for (let i = 0; i < aLinks.length; i++) {
                  if (aLinks[i].length > 0 && oCacheResults.newArgs[i][0].links === undefined) {
                    oSemanticObjectsLinks[oCacheResults.newArgs[i][0].semanticObject] = {
                      links: aLinks[i]
                    };
                    this.linksCache = Object.assign(this.linksCache, oSemanticObjectsLinks);
                  }
                }
              }
              if (oCacheResults.cachedLinks.length === 0) {
                resolve(aLinks);
              } else {
                const aMergedLinks = [];
                let j = 0;
                for (let k = 0; k < oCacheResults.oldArgs.length; k++) {
                  if (j < aLinks.length) {
                    if (aLinks[j].length > 0 && oCacheResults.oldArgs[k][0].semanticObject === oCacheResults.newArgs[j][0].semanticObject) {
                      aMergedLinks.push(aLinks[j]);
                      j++;
                    } else {
                      aMergedLinks.push(oCacheResults.oldArgs[k][0].links);
                    }
                  } else {
                    aMergedLinks.push(oCacheResults.oldArgs[k][0].links);
                  }
                }
                resolve(aMergedLinks);
              }
            });
          }
        }
      });
    }

    /**
     * Will retrieve the ShellContainer.
     *
     * @private
     * @ui5-restricted
     * sap.ushell.container
     * @returns Object with predefined shellContainer methods
     */;
    _proto2.getShellContainer = function getShellContainer() {
      return this.oShellContainer;
    }

    /**
     * Will call toExternal method of CrossApplicationNavigation service with Navigation Arguments and oComponent.
     *
     * @private
     * @ui5-restricted
     * @param oNavArgumentsArr And
     * @param oComponent Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>toExternal arguments
     */;
    _proto2.toExternal = function toExternal(oNavArgumentsArr, oComponent) {
      this.crossAppNavService.toExternal(oNavArgumentsArr, oComponent);
    }

    /**
     * Retrieves the target startupAppState
     * Will check the existance of the ShellContainer and retrieve the CrossApplicationNavigation
     * service reference call the getStartupAppState method. In case service is not available or any exception
     * method throws exception error in console.
     *
     * @private
     * @ui5-restricted
     * @param oArgs Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>getStartupAppState arguments
     * @returns Promise which will be resolved to Object
     */;
    _proto2.getStartupAppState = function getStartupAppState(oArgs) {
      return new Promise((resolve, reject) => {
        // JQuery Promise behaves differently
        // eslint-disable-next-line promise/catch-or-return
        this.crossAppNavService.getStartupAppState(oArgs).fail(oError => {
          reject(new Error(`${oError} sap.fe.core.services.ShellServicesFactory.getStartupAppState`));
        }).then(startupAppState => resolve(startupAppState));
      });
    }

    /**
     * Will call backToPreviousApp method of CrossApplicationNavigation service.
     *
     * @returns Something that indicate we've navigated
     * @private
     * @ui5-restricted
     */;
    _proto2.backToPreviousApp = function backToPreviousApp() {
      return this.crossAppNavService.backToPreviousApp();
    }

    /**
     * Will call hrefForExternal method of CrossApplicationNavigation service.
     *
     * @private
     * @ui5-restricted
     * @param oArgs Check the definition of
     * @param oComponent The appComponent
     * @param bAsync Whether this call should be async or not
     * sap.ushell.services.CrossApplicationNavigation=>hrefForExternal arguments
     * @returns Promise which will be resolved to string
     */;
    _proto2.hrefForExternal = function hrefForExternal(oArgs, oComponent, bAsync) {
      return this.crossAppNavService.hrefForExternal(oArgs, oComponent, !!bAsync);
    }

    /**
     * Will call hrefForExternal method of CrossApplicationNavigation service.
     *
     * @private
     * @ui5-restricted
     * @param oArgs Check the definition of
     * @param oComponent The appComponent
     * sap.ushell.services.CrossApplicationNavigation=>hrefForExternalAsync arguments
     * @returns Promise which will be resolved to string
     */;
    _proto2.hrefForExternalAsync = function hrefForExternalAsync(oArgs, oComponent) {
      return this.crossAppNavService.hrefForExternalAsync(oArgs, oComponent);
    }

    /**
     * Will call getAppState method of CrossApplicationNavigation service with oComponent and oAppStateKey.
     *
     * @private
     * @ui5-restricted
     * @param oComponent
     * @param sAppStateKey Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>getAppState arguments
     * @returns Promise which will be resolved to object
     */;
    _proto2.getAppState = function getAppState(oComponent, sAppStateKey) {
      return wrapJQueryPromise(this.crossAppNavService.getAppState(oComponent, sAppStateKey));
    }

    /**
     * Will call createEmptyAppState method of CrossApplicationNavigation service with oComponent.
     *
     * @private
     * @ui5-restricted
     * @param oComponent Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>createEmptyAppState arguments
     * @returns Promise which will be resolved to object
     */;
    _proto2.createEmptyAppState = function createEmptyAppState(oComponent) {
      return this.crossAppNavService.createEmptyAppState(oComponent);
    }

    /**
     * Will call createEmptyAppStateAsync method of CrossApplicationNavigation service with oComponent.
     *
     * @private
     * @ui5-restricted
     * @param oComponent Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>createEmptyAppStateAsync arguments
     * @returns Promise which will be resolved to object
     */;
    _proto2.createEmptyAppStateAsync = function createEmptyAppStateAsync(oComponent) {
      return this.crossAppNavService.createEmptyAppStateAsync(oComponent);
    }

    /**
     * Will call isNavigationSupported method of CrossApplicationNavigation service with Navigation Arguments and oComponent.
     *
     * @private
     * @ui5-restricted
     * @param oNavArgumentsArr
     * @param oComponent Check the definition of
     * sap.ushell.services.CrossApplicationNavigation=>isNavigationSupported arguments
     * @returns Promise which will be resolved to object
     */;
    _proto2.isNavigationSupported = function isNavigationSupported(oNavArgumentsArr, oComponent) {
      return wrapJQueryPromise(this.crossAppNavService.isNavigationSupported(oNavArgumentsArr, oComponent));
    }

    /**
     * Will call isInitialNavigation method of CrossApplicationNavigation service.
     *
     * @private
     * @ui5-restricted
     * @returns Promise which will be resolved to boolean
     */;
    _proto2.isInitialNavigation = function isInitialNavigation() {
      return this.crossAppNavService.isInitialNavigation();
    }

    /**
     * Will call isInitialNavigationAsync method of CrossApplicationNavigation service.
     *
     * @private
     * @ui5-restricted
     * @returns Promise which will be resolved to boolean
     */;
    _proto2.isInitialNavigationAsync = function isInitialNavigationAsync() {
      return this.crossAppNavService.isInitialNavigationAsync();
    }

    /**
     * Will call expandCompactHash method of CrossApplicationNavigation service.
     *
     * @param sHashFragment An (internal format) shell hash
     * @returns A promise the success handler of the resolve promise get an expanded shell hash as first argument
     * @private
     * @ui5-restricted
     */;
    _proto2.expandCompactHash = function expandCompactHash(sHashFragment) {
      return this.crossAppNavService.expandCompactHash(sHashFragment);
    };
    _proto2.getHash = function getHash() {
      return `#${this.urlParsingService.getShellHash(window.location.href)}`;
    }

    /**
     * Will call parseShellHash method of URLParsing service with given sHash.
     *
     * @private
     * @ui5-restricted
     * @param sHash Check the definition of
     * sap.ushell.services.URLParsing=>parseShellHash arguments
     * @returns The parsed url
     */;
    _proto2.parseShellHash = function parseShellHash(sHash) {
      return this.urlParsingService.parseShellHash(sHash);
    }

    /**
     * Will call splitHash method of URLParsing service with given sHash.
     *
     * @private
     * @ui5-restricted
     * @param sHash Check the definition of
     * sap.ushell.services.URLParsing=>splitHash arguments
     * @returns Promise which will be resolved to object
     */;
    _proto2.splitHash = function splitHash(sHash) {
      return this.urlParsingService.splitHash(sHash);
    }

    /**
     * Will call constructShellHash method of URLParsing service with given sHash.
     *
     * @private
     * @ui5-restricted
     * @param oNewShellHash Check the definition of
     * sap.ushell.services.URLParsing=>constructShellHash arguments
     * @returns Shell Hash string
     */;
    _proto2.constructShellHash = function constructShellHash(oNewShellHash) {
      return this.urlParsingService.constructShellHash(oNewShellHash);
    }

    /**
     * Will call setDirtyFlag method with given dirty state.
     *
     * @private
     * @ui5-restricted
     * @param bDirty Check the definition of sap.ushell.Container.setDirtyFlag arguments
     */;
    _proto2.setDirtyFlag = function setDirtyFlag(bDirty) {
      this.oShellContainer.setDirtyFlag(bDirty);
    }

    /**
     * Will call registerDirtyStateProvider method with given dirty state provider callback method.
     *
     * @private
     * @ui5-restricted
     * @param fnDirtyStateProvider Check the definition of sap.ushell.Container.registerDirtyStateProvider arguments
     */;
    _proto2.registerDirtyStateProvider = function registerDirtyStateProvider(fnDirtyStateProvider) {
      this.oShellContainer.registerDirtyStateProvider(fnDirtyStateProvider);
    }

    /**
     * Will call deregisterDirtyStateProvider method with given dirty state provider callback method.
     *
     * @private
     * @ui5-restricted
     * @param fnDirtyStateProvider Check the definition of sap.ushell.Container.deregisterDirtyStateProvider arguments
     */;
    _proto2.deregisterDirtyStateProvider = function deregisterDirtyStateProvider(fnDirtyStateProvider) {
      this.oShellContainer.deregisterDirtyStateProvider(fnDirtyStateProvider);
    }

    /**
     * Will call createRenderer method of ushell container.
     *
     * @private
     * @ui5-restricted
     * @returns Returns renderer object
     */;
    _proto2.createRenderer = function createRenderer() {
      return this.oShellContainer.createRenderer();
    }

    /**
     * Will call getUser method of ushell container.
     *
     * @private
     * @ui5-restricted
     * @returns Returns User object
     */;
    _proto2.getUser = function getUser() {
      return this.oShellContainer.getUser();
    }

    /**
     * Will check if ushell container is available or not.
     *
     * @private
     * @ui5-restricted
     * @returns Returns true
     */;
    _proto2.hasUShell = function hasUShell() {
      return true;
    }

    /**
     * Will call registerNavigationFilter method of shellNavigation.
     *
     * @param fnNavFilter The filter function to register
     * @private
     * @ui5-restricted
     */;
    _proto2.registerNavigationFilter = function registerNavigationFilter(fnNavFilter) {
      this.shellNavigation.registerNavigationFilter(fnNavFilter);
    }

    /**
     * Will call unregisterNavigationFilter method of shellNavigation.
     *
     * @param fnNavFilter The filter function to unregister
     * @private
     * @ui5-restricted
     */;
    _proto2.unregisterNavigationFilter = function unregisterNavigationFilter(fnNavFilter) {
      this.shellNavigation.unregisterNavigationFilter(fnNavFilter);
    }

    /**
     * Will call setBackNavigation method of ShellUIService
     * that displays the back button in the shell header.
     *
     * @param [fnCallBack] A callback function called when the button is clicked in the UI.
     * @private
     * @ui5-restricted
     */;
    _proto2.setBackNavigation = function setBackNavigation(fnCallBack) {
      this.shellUIService.setBackNavigation(fnCallBack);
    }

    /**
     * Will call setHierarchy method of ShellUIService
     * that displays the given hierarchy in the shell header.
     *
     * @param [aHierarchyLevels] An array representing hierarchies of the currently displayed app.
     * @private
     * @ui5-restricted
     */;
    _proto2.setHierarchy = function setHierarchy(aHierarchyLevels) {
      this.shellUIService.setHierarchy(aHierarchyLevels);
    }

    /**
     * Will call setTitle method of ShellUIService
     * that displays the given title in the shell header.
     *
     * @param [sTitle] The new title. The default title is set if this argument is not given.
     * @private
     * @ui5-restricted
     */;
    _proto2.setTitle = function setTitle(sTitle) {
      this.shellUIService.setTitle(sTitle);
    }

    /**
     * Retrieves the currently defined content density.
     *
     * @returns The content density value
     */;
    _proto2.getContentDensity = function getContentDensity() {
      return this.oShellContainer.getUser().getContentDensity();
    }

    /**
     * For a given semantic object, this method considers all actions associated with the semantic object and
     * returns the one tagged as a "primaryAction". If no inbound tagged as "primaryAction" exists, then it returns
     * the intent of the first inbound (after sorting has been applied) matching the action "displayFactSheet".
     *
     * @private
     * @ui5-restricted
     * @param sSemanticObject Semantic object.
     * @param mParameters See #CrossApplicationNavigation#getLinks for description.
     * @returns Promise which will be resolved with an object containing the intent if it exists.
     */;
    _proto2.getPrimaryIntent = function getPrimaryIntent(sSemanticObject, mParameters) {
      return new Promise((resolve, reject) => {
        // eslint-disable-next-line promise/catch-or-return
        this.crossAppNavService.getPrimaryIntent(sSemanticObject, mParameters).fail(oError => {
          reject(new Error(`${oError} sap.fe.core.services.ShellServicesFactory.getPrimaryIntent`));
        }).then(resolve);
      });
    }

    /**
     * Wait for the render extensions plugin to be loaded.
     * If true is returned by the promise we were able to wait for it, otherwise we couldn't and cannot rely on it.
     */;
    _proto2.waitForPluginsLoad = function waitForPluginsLoad() {
      return new Promise(resolve => {
        var _this$shellPluginMana;
        if (!((_this$shellPluginMana = this.shellPluginManager) !== null && _this$shellPluginMana !== void 0 && _this$shellPluginMana.getPluginLoadingPromise)) {
          resolve(false);
        } else {
          // eslint-disable-next-line promise/catch-or-return
          this.shellPluginManager.getPluginLoadingPromise("RendererExtensions").fail(oError => {
            Log.error(oError, "sap.fe.core.services.ShellServicesFactory.waitForPluginsLoad");
            resolve(false);
          }).then(() => resolve(true));
        }
      });
    };
    return ShellServices;
  }(Service);
  /**
   * Service Factory for the ShellServices
   *
   * @private
   */
  let ShellServicesFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(ShellServicesFactory, _ServiceFactory);
    function ShellServicesFactory() {
      return _ServiceFactory.apply(this, arguments) || this;
    }
    var _proto3 = ShellServicesFactory.prototype;
    /**
     * Creates either a standard or a mock Shell service depending on the configuration.
     *
     * @param oServiceContext The shellservice context
     * @returns A promise for a shell service implementation
     * @see ServiceFactory#createInstance
     */
    _proto3.createInstance = function createInstance(oServiceContext) {
      oServiceContext.settings.shellContainer = sap.ushell && sap.ushell.Container;
      const oShellService = oServiceContext.settings.shellContainer ? new ShellServices(oServiceContext) : new ShellServiceMock(oServiceContext);
      return oShellService.initPromise.then(() => {
        // Enrich the appComponent with this method
        oServiceContext.scopeObject.getShellServices = () => oShellService;
        return oShellService;
      });
    };
    return ShellServicesFactory;
  }(ServiceFactory);
  return ShellServicesFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/ShellServicesFactory", ["sap/base/Log","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory"],function(e,t,n){"use strict";function i(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;r(e,t)}function r(e,t){r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return r(e,t)}let s=function(e){i(t,e);function t(){return e.apply(this,arguments)||this}var n=t.prototype;n.init=function e(){this.initPromise=Promise.resolve(this);this.instanceType="mock"};n.getLinks=function e(){return Promise.resolve([])};n.getLinksWithCache=function e(){return Promise.resolve([])};n.toExternal=function e(){};n.getStartupAppState=function e(){return Promise.resolve(undefined)};n.backToPreviousApp=function e(){};n.hrefForExternal=function e(){return""};n.getHash=function e(){return window.location.href};n.hrefForExternalAsync=function e(){return Promise.resolve({})};n.getAppState=function e(){return Promise.resolve({})};n.createEmptyAppState=function e(){return Promise.resolve({})};n.createEmptyAppStateAsync=function e(){return Promise.resolve({})};n.isNavigationSupported=function e(){return Promise.resolve({})};n.isInitialNavigation=function e(){return false};n.isInitialNavigationAsync=function e(){return Promise.resolve({})};n.expandCompactHash=function e(){return Promise.resolve({})};n.parseShellHash=function e(){return{}};n.splitHash=function e(){return Promise.resolve({})};n.constructShellHash=function e(){return""};n.setDirtyFlag=function e(){};n.registerDirtyStateProvider=function e(){};n.deregisterDirtyStateProvider=function e(){};n.createRenderer=function e(){return{}};n.getUser=function e(){return{}};n.hasUShell=function e(){return false};n.registerNavigationFilter=function e(){};n.unregisterNavigationFilter=function e(){};n.setBackNavigation=function e(){};n.setHierarchy=function e(){};n.setTitle=function e(){};n.getContentDensity=function e(){if(document.body.classList.contains("sapUiSizeCozy")){return"cozy"}else if(document.body.classList.contains("sapUiSizeCompact")){return"compact"}else{return""}};n.getPrimaryIntent=function e(){return Promise.resolve()};n.waitForPluginsLoad=function e(){return Promise.resolve(true)};return t}(t);function o(e){return new Promise((t,n)=>{e.done(t).fail(n)})}let c=function(t){i(n,t);function n(){return t.apply(this,arguments)||this}var r=n.prototype;r.init=function e(){const t=this.getContext();const n=t.scopeObject;this.oShellContainer=t.settings.shellContainer;this.instanceType="real";this.linksCache={};this.fnFindSemanticObjectsInCache=function(e){const t=e;const n=[];const i=[];for(let r=0;r<t.length;r++){if(!!t[r][0]&&!!t[r][0].semanticObject){if(this.linksCache[t[r][0].semanticObject]){n.push(this.linksCache[t[r][0].semanticObject].links);Object.defineProperty(e[r][0],"links",{value:this.linksCache[t[r][0].semanticObject].links})}else{i.push(t[r])}}}return{oldArgs:e,newArgs:i,cachedLinks:n}};this.initPromise=new Promise((e,t)=>{this.resolveFn=e;this.rejectFn=t});const i=this.oShellContainer.getServiceAsync("CrossApplicationNavigation");const r=this.oShellContainer.getServiceAsync("URLParsing");const s=this.oShellContainer.getServiceAsync("ShellNavigation");const o=this.oShellContainer.getServiceAsync("PluginManager");const c=n.getService("ShellUIService");Promise.all([i,r,s,c,o]).then(e=>{let[t,n,i,r,s]=e;this.crossAppNavService=t;this.urlParsingService=n;this.shellNavigation=i;this.shellUIService=r;this.shellPluginManager=s;this.resolveFn()}).catch(this.rejectFn)};r.getLinks=function e(t){return new Promise((e,n)=>{this.crossAppNavService.getLinks(t).fail(e=>{n(new Error(`${e} sap.fe.core.services.ShellServicesFactory.getLinks`))}).then(e)})};r.getLinksWithCache=function e(t){return new Promise((e,n)=>{if(t.length===0){e([])}else{const i=this.fnFindSemanticObjectsInCache(t);if(i.newArgs.length===0){e(i.cachedLinks)}else{this.crossAppNavService.getLinks(i.newArgs).fail(e=>{n(new Error(`${e} sap.fe.core.services.ShellServicesFactory.getLinksWithCache`))}).then(t=>{if(t.length!==0){const e={};for(let n=0;n<t.length;n++){if(t[n].length>0&&i.newArgs[n][0].links===undefined){e[i.newArgs[n][0].semanticObject]={links:t[n]};this.linksCache=Object.assign(this.linksCache,e)}}}if(i.cachedLinks.length===0){e(t)}else{const n=[];let r=0;for(let e=0;e<i.oldArgs.length;e++){if(r<t.length){if(t[r].length>0&&i.oldArgs[e][0].semanticObject===i.newArgs[r][0].semanticObject){n.push(t[r]);r++}else{n.push(i.oldArgs[e][0].links)}}else{n.push(i.oldArgs[e][0].links)}}e(n)}})}}})};r.getShellContainer=function e(){return this.oShellContainer};r.toExternal=function e(t,n){this.crossAppNavService.toExternal(t,n)};r.getStartupAppState=function e(t){return new Promise((e,n)=>{this.crossAppNavService.getStartupAppState(t).fail(e=>{n(new Error(`${e} sap.fe.core.services.ShellServicesFactory.getStartupAppState`))}).then(t=>e(t))})};r.backToPreviousApp=function e(){return this.crossAppNavService.backToPreviousApp()};r.hrefForExternal=function e(t,n,i){return this.crossAppNavService.hrefForExternal(t,n,!!i)};r.hrefForExternalAsync=function e(t,n){return this.crossAppNavService.hrefForExternalAsync(t,n)};r.getAppState=function e(t,n){return o(this.crossAppNavService.getAppState(t,n))};r.createEmptyAppState=function e(t){return this.crossAppNavService.createEmptyAppState(t)};r.createEmptyAppStateAsync=function e(t){return this.crossAppNavService.createEmptyAppStateAsync(t)};r.isNavigationSupported=function e(t,n){return o(this.crossAppNavService.isNavigationSupported(t,n))};r.isInitialNavigation=function e(){return this.crossAppNavService.isInitialNavigation()};r.isInitialNavigationAsync=function e(){return this.crossAppNavService.isInitialNavigationAsync()};r.expandCompactHash=function e(t){return this.crossAppNavService.expandCompactHash(t)};r.getHash=function e(){return`#${this.urlParsingService.getShellHash(window.location.href)}`};r.parseShellHash=function e(t){return this.urlParsingService.parseShellHash(t)};r.splitHash=function e(t){return this.urlParsingService.splitHash(t)};r.constructShellHash=function e(t){return this.urlParsingService.constructShellHash(t)};r.setDirtyFlag=function e(t){this.oShellContainer.setDirtyFlag(t)};r.registerDirtyStateProvider=function e(t){this.oShellContainer.registerDirtyStateProvider(t)};r.deregisterDirtyStateProvider=function e(t){this.oShellContainer.deregisterDirtyStateProvider(t)};r.createRenderer=function e(){return this.oShellContainer.createRenderer()};r.getUser=function e(){return this.oShellContainer.getUser()};r.hasUShell=function e(){return true};r.registerNavigationFilter=function e(t){this.shellNavigation.registerNavigationFilter(t)};r.unregisterNavigationFilter=function e(t){this.shellNavigation.unregisterNavigationFilter(t)};r.setBackNavigation=function e(t){this.shellUIService.setBackNavigation(t)};r.setHierarchy=function e(t){this.shellUIService.setHierarchy(t)};r.setTitle=function e(t){this.shellUIService.setTitle(t)};r.getContentDensity=function e(){return this.oShellContainer.getUser().getContentDensity()};r.getPrimaryIntent=function e(t,n){return new Promise((e,i)=>{this.crossAppNavService.getPrimaryIntent(t,n).fail(e=>{i(new Error(`${e} sap.fe.core.services.ShellServicesFactory.getPrimaryIntent`))}).then(e)})};r.waitForPluginsLoad=function t(){return new Promise(t=>{var n;if(!((n=this.shellPluginManager)!==null&&n!==void 0&&n.getPluginLoadingPromise)){t(false)}else{this.shellPluginManager.getPluginLoadingPromise("RendererExtensions").fail(n=>{e.error(n,"sap.fe.core.services.ShellServicesFactory.waitForPluginsLoad");t(false)}).then(()=>t(true))}})};return n}(t);let a=function(e){i(t,e);function t(){return e.apply(this,arguments)||this}var n=t.prototype;n.createInstance=function e(t){t.settings.shellContainer=sap.ushell&&sap.ushell.Container;const n=t.settings.shellContainer?new c(t):new s(t);return n.initPromise.then(()=>{t.scopeObject.getShellServices=()=>n;return n})};return t}(n);return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/SideEffectsServiceFactory-dbg", ["sap/base/Log", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/PropertyHelper", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory", "../templating/DataModelPathHelper"], function (Log, MetaModelConverter, TypeGuards, PropertyHelper, Service, ServiceFactory, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getTargetNavigationPath = DataModelPathHelper.getTargetNavigationPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getAssociatedTextPropertyPath = PropertyHelper.getAssociatedTextPropertyPath;
  var isProperty = TypeGuards.isProperty;
  var isEntityType = TypeGuards.isEntityType;
  var isComplexType = TypeGuards.isComplexType;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertTypes = MetaModelConverter.convertTypes;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let SideEffectsService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(SideEffectsService, _Service);
    function SideEffectsService() {
      return _Service.apply(this, arguments) || this;
    }
    _exports.SideEffectsService = SideEffectsService;
    var _proto = SideEffectsService.prototype;
    // !: means that we know it will be assigned before usage
    _proto.init = function init() {
      this.sideEffectsRegistry = {
        oData: {
          entities: {},
          actions: {}
        },
        control: {}
      };
      this.isInitialized = false;
      this.initPromise = Promise.resolve(this);
    }

    /**
     * Adds a SideEffects control
     * SideEffects definition is added by a control to keep data up to date
     * These SideEffects get limited scope compared with SideEffects coming from an OData service:
     * - Only one SideEffects definition can be defined for the combination entity type - control Id
     * - Only SideEffects source properties are recognized and used to trigger SideEffects
     *
     * Ensure the sourceControlId matches the associated SAPUI5 control ID.
     *
     * @ui5-restricted
     * @param entityType Name of the entity type
     * @param sideEffect SideEffects definition
     */;
    _proto.addControlSideEffects = function addControlSideEffects(entityType, sideEffect) {
      if (sideEffect.sourceControlId) {
        const controlSideEffect = {
          ...sideEffect,
          fullyQualifiedName: `${entityType}/SideEffectsForControl/${sideEffect.sourceControlId}`
        };
        const entityControlSideEffects = this.sideEffectsRegistry.control[entityType] || {};
        entityControlSideEffects[controlSideEffect.sourceControlId] = controlSideEffect;
        this.sideEffectsRegistry.control[entityType] = entityControlSideEffects;
      }
    }

    /**
     * Executes SideEffects action.
     *
     * @ui5-restricted
     * @param triggerAction Name of the action
     * @param context Context
     * @param groupId The group ID to be used for the request
     * @returns A promise that is resolved without data or with a return value context when the action call succeeded
     */;
    _proto.executeAction = function executeAction(triggerAction, context, groupId) {
      const action = context.getModel().bindContext(`${triggerAction}(...)`, context);
      return action.execute(groupId || context.getBinding().getUpdateGroupId());
    }

    /**
     * Gets converted OData metaModel.
     *
     * @ui5-restricted
     * @returns Converted OData metaModel
     */;
    _proto.getConvertedMetaModel = function getConvertedMetaModel() {
      return convertTypes(this.getMetaModel(), this.capabilities);
    }

    /**
     * Gets the entity type of a context.
     *
     * @param context Context
     * @returns Entity Type
     */;
    _proto.getEntityTypeFromContext = function getEntityTypeFromContext(context) {
      const metaModel = context.getModel().getMetaModel(),
        metaPath = metaModel.getMetaPath(context.getPath()),
        entityType = metaModel.getObject(metaPath)["$Type"];
      return entityType;
    }

    /**
     * Gets the SideEffects that come from an OData service.
     *
     * @ui5-restricted
     * @param entityTypeName Name of the entity type
     * @returns SideEffects dictionary
     */;
    _proto.getODataEntitySideEffects = function getODataEntitySideEffects(entityTypeName) {
      return this.sideEffectsRegistry.oData.entities[entityTypeName] || {};
    }

    /**
     * Gets the global SideEffects that come from an OData service.
     *
     * @ui5-restricted
     * @param entityTypeName Name of the entity type
     * @returns Global SideEffects
     */;
    _proto.getGlobalODataEntitySideEffects = function getGlobalODataEntitySideEffects(entityTypeName) {
      const entitySideEffects = this.getODataEntitySideEffects(entityTypeName);
      const globalSideEffects = [];
      for (const key in entitySideEffects) {
        const sideEffects = entitySideEffects[key];
        if (!sideEffects.sourceEntities && !sideEffects.sourceProperties) {
          globalSideEffects.push(sideEffects);
        }
      }
      return globalSideEffects;
    }

    /**
     * Gets the SideEffects that come from an OData service.
     *
     * @ui5-restricted
     * @param actionName Name of the action
     * @param context Context
     * @returns SideEffects definition
     */;
    _proto.getODataActionSideEffects = function getODataActionSideEffects(actionName, context) {
      if (context) {
        const entityType = this.getEntityTypeFromContext(context);
        if (entityType) {
          var _this$sideEffectsRegi;
          return (_this$sideEffectsRegi = this.sideEffectsRegistry.oData.actions[entityType]) === null || _this$sideEffectsRegi === void 0 ? void 0 : _this$sideEffectsRegi[actionName];
        }
      }
      return undefined;
    }

    /**
     * Generates the dictionary for the SideEffects.
     *
     * @ui5-restricted
     * @param capabilities The current capabilities
     */;
    _proto.initializeSideEffects = function initializeSideEffects(capabilities) {
      this.capabilities = capabilities;
      if (!this.isInitialized) {
        const sideEffectSources = {
          entities: {},
          properties: {}
        };
        const convertedMetaModel = this.getConvertedMetaModel();
        convertedMetaModel.entityTypes.forEach(entityType => {
          this.sideEffectsRegistry.oData.entities[entityType.fullyQualifiedName] = this.retrieveODataEntitySideEffects(entityType);
          this.sideEffectsRegistry.oData.actions[entityType.fullyQualifiedName] = this.retrieveODataActionsSideEffects(entityType); // only bound actions are analyzed since unbound ones don't get SideEffects
          this.mapSideEffectSources(entityType, sideEffectSources);
        });
        this.sourcesToSideEffectMappings = sideEffectSources;
        this.isInitialized = true;
      }
    }

    /**
     * Removes all SideEffects related to a control.
     *
     * @ui5-restricted
     * @param controlId Control Id
     */;
    _proto.removeControlSideEffects = function removeControlSideEffects(controlId) {
      Object.keys(this.sideEffectsRegistry.control).forEach(sEntityType => {
        if (this.sideEffectsRegistry.control[sEntityType][controlId]) {
          delete this.sideEffectsRegistry.control[sEntityType][controlId];
        }
      });
    }

    /**
     * Requests the SideEffects on a specific context.
     *
     * @param pathExpressions Targets of SideEffects to be executed
     * @param context Context where SideEffects need to be executed
     * @param groupId The group ID to be used for the request
     * @returns Promise on SideEffects request
     */;
    _proto.requestSideEffects = function requestSideEffects(pathExpressions, context, groupId) {
      this.logRequest(pathExpressions, context);
      return context.requestSideEffects(pathExpressions, groupId);
    }

    /**
     * Requests the SideEffects for an OData action.
     *
     * @param sideEffects SideEffects definition
     * @param context Context where SideEffects need to be executed
     * @returns Promise on SideEffects requests and action execution
     */;
    _proto.requestSideEffectsForODataAction = function requestSideEffectsForODataAction(sideEffects, context) {
      var _sideEffects$triggerA, _sideEffects$pathExpr;
      let promises;
      if ((_sideEffects$triggerA = sideEffects.triggerActions) !== null && _sideEffects$triggerA !== void 0 && _sideEffects$triggerA.length) {
        promises = sideEffects.triggerActions.map(actionName => {
          return this.executeAction(actionName, context);
        });
      } else {
        promises = [];
      }
      if ((_sideEffects$pathExpr = sideEffects.pathExpressions) !== null && _sideEffects$pathExpr !== void 0 && _sideEffects$pathExpr.length) {
        promises.push(this.requestSideEffects(sideEffects.pathExpressions, context));
      }
      return promises.length ? Promise.all(promises) : Promise.resolve([]);
    }

    /**
     * Requests the SideEffects for a navigation property on a specific context.
     *
     * @function
     * @param navigationProperty Navigation property
     * @param context Context where SideEffects need to be executed
     * @param groupId Batch group for the query
     * @returns SideEffects request on SAPUI5 context
     */;
    _proto.requestSideEffectsForNavigationProperty = function requestSideEffectsForNavigationProperty(navigationProperty, context, groupId) {
      const baseEntityType = this.getEntityTypeFromContext(context);
      if (baseEntityType) {
        const navigationPath = `${navigationProperty}/`;
        const entitySideEffects = this.getODataEntitySideEffects(baseEntityType);
        let targetProperties = [];
        let targetEntities = [];
        let sideEffectsTargets = [];
        Object.keys(entitySideEffects).filter(
        // Keep relevant SideEffects
        // 1. SourceEntities match OR
        // 2. Only 1 SourceProperties and match
        annotationName => {
          var _sideEffects$sourcePr;
          const sideEffects = entitySideEffects[annotationName];
          return (sideEffects.sourceEntities || []).some(navigation => navigation.$NavigationPropertyPath === navigationProperty) || ((_sideEffects$sourcePr = sideEffects.sourceProperties) === null || _sideEffects$sourcePr === void 0 ? void 0 : _sideEffects$sourcePr.length) === 1 && sideEffects.sourceProperties.some(propertyPath => propertyPath.startsWith(navigationPath) && propertyPath.replace(navigationPath, "").indexOf("/") === -1);
        }).forEach(sAnnotationName => {
          const sideEffects = entitySideEffects[sAnnotationName];
          if (sideEffects.triggerAction) {
            this.executeAction(sideEffects.triggerAction, context, groupId);
          }
          targetProperties = targetProperties.concat(sideEffects.targetProperties);
          targetEntities = targetEntities.concat(sideEffects.targetEntities);
        });
        // Remove duplicate targets
        const sideEffectsTargetDefinition = this.removeDuplicateTargets({
          targetProperties: targetProperties,
          targetEntities: targetEntities
        });
        sideEffectsTargets = [...sideEffectsTargetDefinition.targetProperties, ...sideEffectsTargetDefinition.targetEntities];
        if (sideEffectsTargets.length) {
          return this.requestSideEffects(sideEffectsTargets, context, groupId).catch(error => Log.error(`SideEffects - Error while processing SideEffects for Navigation Property ${navigationProperty}`, error));
        }
      }
      return Promise.resolve();
    }

    /**
     * Gets the SideEffects that come from controls.
     *
     * @ui5-restricted
     * @param entityTypeName Entity type Name
     * @returns SideEffects dictionary
     */;
    _proto.getControlEntitySideEffects = function getControlEntitySideEffects(entityTypeName) {
      return this.sideEffectsRegistry.control[entityTypeName] || {};
    }

    /**
     * Gets SideEffects' qualifier and owner entity where this entity is used as source.
     *
     * @param entityTypeName Entity type fully qualified name
     * @returns Array of sideEffects info
     */;
    _proto.getSideEffectWhereEntityIsSource = function getSideEffectWhereEntityIsSource(entityTypeName) {
      return this.sourcesToSideEffectMappings.entities[entityTypeName] || [];
    }

    /**
     * Common method to get the field groupIds for a source entity and a source property.
     *
     * @param sourceEntityType
     * @param sourceProperty
     * @returns A collection of fieldGroupIds
     */;
    _proto.computeFieldGroupIds = function computeFieldGroupIds(sourceEntityType, sourceProperty) {
      const entityFieldGroupIds = this.getSideEffectWhereEntityIsSource(sourceEntityType).map(sideEffectInfo => this.getFieldGroupIdForSideEffect(sideEffectInfo, true));
      return entityFieldGroupIds.concat(this.getSideEffectWherePropertyIsSource(sourceProperty).map(sideEffectInfo => this.getFieldGroupIdForSideEffect(sideEffectInfo)));
    }

    /**
     * Gets SideEffects' qualifier and owner entity where this property is used as source.
     *
     * @param propertyName Property fully qualified name
     * @returns Array of sideEffects info
     */;
    _proto.getSideEffectWherePropertyIsSource = function getSideEffectWherePropertyIsSource(propertyName) {
      return this.sourcesToSideEffectMappings.properties[propertyName] || [];
    }

    /**
     * Adds the text properties required for SideEffects
     * If a property has an associated text then this text needs to be added as targetProperties.
     *
     * @ui5-restricted
     * @param sideEffectsTargets SideEffects Targets
     * @param entityType Entity type
     * @returns SideEffects definition with added text properties
     */;
    _proto.addTextProperties = function addTextProperties(sideEffectsTargets, entityType) {
      const setOfProperties = new Set(sideEffectsTargets.targetProperties);
      const setOfEntities = new Set(sideEffectsTargets.targetEntities.map(target => target.$NavigationPropertyPath));

      // Generate all dataModelPath for the properties to analyze (cover "*" and /*)
      const propertiesToAnalyze = sideEffectsTargets.targetProperties.reduce((dataModelPropertyPaths, propertyPath) => {
        return dataModelPropertyPaths.concat(this.getDataModelPropertiesFromAPath(propertyPath, entityType));
      }, []);

      // Generate all paths related to the text properties and not already covered by the SideEffects
      for (const dataModelPropertyPath of propertiesToAnalyze) {
        const associatedTextPath = getAssociatedTextPropertyPath(dataModelPropertyPath.targetObject);
        if (associatedTextPath) {
          const dataModelTextPath = enhanceDataModelPath(dataModelPropertyPath, associatedTextPath);
          const relativeNavigation = getTargetNavigationPath(dataModelTextPath, true);
          const targetPath = getTargetObjectPath(dataModelTextPath, true);
          if (isProperty(dataModelTextPath.targetObject) && !setOfProperties.has(targetPath) &&
          // the property is already listed
          !setOfProperties.has(`${relativeNavigation}${dataModelTextPath.navigationProperties.length ? "/" : ""}*`) &&
          // the property is already listed thanks to the "*"
          !setOfEntities.has(`${relativeNavigation}`) // the property is not part of a TargetEntities
          ) {
            // The Text association is added as TargetEntities if
            //  - it's contained on a different entitySet than the SideEffects
            //  -  and it's contained on a different entitySet than the sourced property
            // Otherwise it's added as targetProperties
            if (dataModelPropertyPath.targetEntitySet !== dataModelTextPath.targetEntitySet && dataModelTextPath.navigationProperties && dataModelTextPath.targetEntityType) {
              setOfEntities.add(relativeNavigation);
            } else {
              setOfProperties.add(targetPath);
            }
          }
        }
      }
      return {
        targetProperties: Array.from(setOfProperties),
        targetEntities: Array.from(setOfEntities).map(navigation => {
          return {
            $NavigationPropertyPath: navigation
          };
        })
      };
    }

    /**
     * Converts the SideEffects to expected format
     *  - Set TriggerAction as string
     *  - Converts SideEffects targets to expected format
     *  - Removes binding parameter from SideEffects targets properties
     *  - Adds the text properties
     *  - Replaces TargetProperties having reference to Source Properties for a SideEffects.
     *
     * @ui5-restricted
     * @param sideEffects SideEffects definition
     * @param entityType Entity type
     * @param bindingParameter Name of the binding parameter
     * @returns SideEffects definition
     */;
    _proto.convertSideEffects = function convertSideEffects(sideEffects, entityType, bindingParameter) {
      const triggerAction = sideEffects.TriggerAction;
      const newSideEffects = this.convertSideEffectsFormat(sideEffects);
      let sideEffectsTargets = {
        targetProperties: newSideEffects.targetProperties,
        targetEntities: newSideEffects.targetEntities
      };
      sideEffectsTargets = this.removeBindingParameter(sideEffectsTargets, bindingParameter);
      sideEffectsTargets = this.addTextProperties(sideEffectsTargets, entityType);
      sideEffectsTargets = this.removeDuplicateTargets(sideEffectsTargets);
      return {
        ...newSideEffects,
        ...{
          targetEntities: sideEffectsTargets.targetEntities,
          targetProperties: sideEffectsTargets.targetProperties,
          triggerAction
        }
      };
    }

    /**
     * Converts the SideEffects targets (TargetEntities and TargetProperties) to expected format
     *  - TargetProperties as array of string
     *  - TargetEntities as array of object with property $NavigationPropertyPath.
     *
     * @ui5-restricted
     * @param sideEffects SideEffects definition
     * @returns Converted SideEffects
     */;
    _proto.convertSideEffectsFormat = function convertSideEffectsFormat(sideEffects) {
      const formatProperties = properties => {
        return properties ? properties.reduce((targetProperties, target) => {
          const path = target.type && target.value || target;
          if (path) {
            targetProperties.push(path);
          } else {
            Log.error(`SideEffects - Error while processing TargetProperties for SideEffects ${sideEffects.fullyQualifiedName}`);
          }
          return targetProperties;
        }, []) : properties;
      };
      const formatEntities = entities => {
        return entities ? entities.map(targetEntity => {
          return {
            $NavigationPropertyPath: targetEntity.value
          };
        }) : entities;
      };
      return {
        fullyQualifiedName: sideEffects.fullyQualifiedName,
        sourceProperties: formatProperties(sideEffects.SourceProperties),
        sourceEntities: formatEntities(sideEffects.SourceEntities),
        targetProperties: formatProperties(sideEffects.TargetProperties) ?? [],
        targetEntities: formatEntities(sideEffects.TargetEntities) ?? []
      };
    }

    /**
     * Gets all dataModelObjectPath related to properties listed by a path
     *
     * The path can be:
     *  - a path targeting a property on a complexType or an EntityType
     *  - a path with a star targeting all properties on a complexType or an EntityType.
     *
     * @ui5-restricted
     * @param path The path to analyze
     * @param entityType Entity type
     * @returns Array of dataModelObjectPath representing the properties
     */;
    _proto.getDataModelPropertiesFromAPath = function getDataModelPropertiesFromAPath(path, entityType) {
      let dataModelObjectPaths = [];
      const convertedMetaModel = this.getConvertedMetaModel();
      const entitySet = convertedMetaModel.entitySets.find(relatedEntitySet => relatedEntitySet.entityType === entityType) || convertedMetaModel.singletons.find(singleton => singleton.entityType === entityType);
      if (entitySet) {
        const metaModel = this.getMetaModel(),
          entitySetContext = metaModel.createBindingContext(`/${entitySet.name}`);
        if (entitySetContext) {
          const dataModelEntitySet = getInvolvedDataModelObjects(entitySetContext);
          const dataModelObjectPath = enhanceDataModelPath(dataModelEntitySet, path.replace("*", "") || "/"),
            // "*" is replaced by "/" to target the current EntityType
            targetObject = dataModelObjectPath.targetObject;
          if (isProperty(targetObject)) {
            if (isComplexType(targetObject.targetType)) {
              dataModelObjectPaths = dataModelObjectPaths.concat(targetObject.targetType.properties.map(property => enhanceDataModelPath(dataModelObjectPath, property.name)));
            } else {
              dataModelObjectPaths.push(dataModelObjectPath);
            }
          } else if (isEntityType(targetObject)) {
            dataModelObjectPaths = dataModelObjectPaths.concat(dataModelObjectPath.targetEntityType.entityProperties.map(entityProperty => {
              return enhanceDataModelPath(dataModelObjectPath, entityProperty.name);
            }));
          }
          entitySetContext.destroy();
        }
      }
      return dataModelObjectPaths.filter(dataModelObjectPath => dataModelObjectPath.targetObject);
    }

    /**
     * Gets the Odata metamodel.
     *
     * @ui5-restricted
     * @returns The OData metamodel
     */;
    _proto.getMetaModel = function getMetaModel() {
      const oContext = this.getContext();
      const oComponent = oContext.scopeObject;
      return oComponent.getModel().getMetaModel();
    }

    /**
     * Gets the SideEffects related to an entity type or action that come from an OData Service
     * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action
     * and to convert these SideEffects with expected format.
     *
     * @ui5-restricted
     * @param source Entity type or action
     * @returns Array of SideEffects
     */;
    _proto.getSideEffectsFromSource = function getSideEffectsFromSource(source) {
      var _source$annotations;
      let bindingAlias = "";
      const isSourceEntityType = isEntityType(source);
      const entityType = isSourceEntityType ? source : source.sourceEntityType;
      const commonAnnotation = (_source$annotations = source.annotations) === null || _source$annotations === void 0 ? void 0 : _source$annotations.Common;
      if (entityType && commonAnnotation) {
        if (!isSourceEntityType) {
          var _source$parameters;
          const bindingParameter = (_source$parameters = source.parameters) === null || _source$parameters === void 0 ? void 0 : _source$parameters.find(parameter => parameter.type === entityType.fullyQualifiedName);
          bindingAlias = (bindingParameter === null || bindingParameter === void 0 ? void 0 : bindingParameter.fullyQualifiedName.split("/")[1]) ?? "";
        }
        return this.getSideEffectsAnnotationFromSource(source).map(sideEffectAnno => this.convertSideEffects(sideEffectAnno, entityType, bindingAlias));
      }
      return [];
    }
    /**
     * Gets the SideEffects related to an entity type or action that come from an OData Service
     * Internal routine to get, from converted oData metaModel, SideEffects related to a specific entity type or action.
     *
     * @param source Entity type or action
     * @returns Array of SideEffects
     */;
    _proto.getSideEffectsAnnotationFromSource = function getSideEffectsAnnotationFromSource(source) {
      var _source$annotations2;
      const sideEffects = [];
      const commonAnnotation = (_source$annotations2 = source.annotations) === null || _source$annotations2 === void 0 ? void 0 : _source$annotations2.Common;
      for (const key in commonAnnotation) {
        const annotation = commonAnnotation[key];
        if (this.isSideEffectsAnnotation(annotation)) {
          sideEffects.push(annotation);
        }
      }
      return sideEffects;
    }

    /**
     * Checks if the annotation is a SideEffects annotation.
     *
     * @ui5-restricted
     * @param annotation Annotation
     * @returns Boolean
     */;
    _proto.isSideEffectsAnnotation = function isSideEffectsAnnotation(annotation) {
      return (annotation === null || annotation === void 0 ? void 0 : annotation.$Type) === "com.sap.vocabularies.Common.v1.SideEffectsType";
    }

    /**
     * Logs the SideEffects request.
     *
     * @ui5-restricted
     * @param pathExpressions SideEffects targets
     * @param context Context
     */;
    _proto.logRequest = function logRequest(pathExpressions, context) {
      const targetPaths = pathExpressions.reduce(function (paths, target) {
        return `${paths}\n\t\t${target.$NavigationPropertyPath || target || ""}`;
      }, "");
      Log.debug(`SideEffects - Request:\n\tContext path : ${context.getPath()}\n\tProperty paths :${targetPaths}`);
    }

    /**
     * Removes the name of the binding parameter on the SideEffects targets.
     *
     * @ui5-restricted
     * @param sideEffectsTargets SideEffects Targets
     * @param bindingParameterName Name of binding parameter
     * @returns SideEffects definition
     */;
    _proto.removeBindingParameter = function removeBindingParameter(sideEffectsTargets, bindingParameterName) {
      if (bindingParameterName) {
        const replaceBindingParameter = function (value) {
          return value.replace(new RegExp(`^${bindingParameterName}/?`), "");
        };
        return {
          targetProperties: sideEffectsTargets.targetProperties.map(targetProperty => replaceBindingParameter(targetProperty)),
          targetEntities: sideEffectsTargets.targetEntities.map(targetEntity => {
            return {
              $NavigationPropertyPath: replaceBindingParameter(targetEntity.$NavigationPropertyPath)
            };
          })
        };
      }
      return {
        targetProperties: sideEffectsTargets.targetProperties,
        targetEntities: sideEffectsTargets.targetEntities
      };
    }

    /**
     * Remove duplicates in SideEffects targets.
     *
     * @ui5-restricted
     * @param sideEffectsTargets SideEffects Targets
     * @returns SideEffects targets without duplicates
     */;
    _proto.removeDuplicateTargets = function removeDuplicateTargets(sideEffectsTargets) {
      const targetEntitiesPaths = sideEffectsTargets.targetEntities.map(targetEntity => targetEntity.$NavigationPropertyPath);
      const uniqueTargetedEntitiesPath = new Set(targetEntitiesPaths);
      const uniqueTargetProperties = new Set(sideEffectsTargets.targetProperties);
      const uniqueTargetedEntities = Array.from(uniqueTargetedEntitiesPath).map(entityPath => {
        return {
          $NavigationPropertyPath: entityPath
        };
      });
      return {
        targetProperties: Array.from(uniqueTargetProperties),
        targetEntities: uniqueTargetedEntities
      };
    }

    /**
     * Gets SideEffects action type that come from an OData Service
     * Internal routine to get, from converted oData metaModel, SideEffects on actions
     * related to a specific entity type and to convert these SideEffects with
     * expected format.
     *
     * @ui5-restricted
     * @param entityType Entity type
     * @returns Entity type SideEffects dictionary
     */;
    _proto.retrieveODataActionsSideEffects = function retrieveODataActionsSideEffects(entityType) {
      const sideEffects = {};
      const actions = entityType.actions;
      if (actions) {
        Object.keys(actions).forEach(actionName => {
          const action = entityType.actions[actionName];
          const triggerActions = new Set();
          let targetProperties = [];
          let targetEntities = [];
          this.getSideEffectsFromSource(action).forEach(oDataSideEffect => {
            const triggerAction = oDataSideEffect.triggerAction;
            targetProperties = targetProperties.concat(oDataSideEffect.targetProperties);
            targetEntities = targetEntities.concat(oDataSideEffect.targetEntities);
            if (triggerAction) {
              triggerActions.add(triggerAction);
            }
          });
          const sideEffectsTargets = this.removeDuplicateTargets({
            targetProperties,
            targetEntities
          });
          sideEffects[actionName] = {
            pathExpressions: [...sideEffectsTargets.targetProperties, ...sideEffectsTargets.targetEntities],
            triggerActions: Array.from(triggerActions)
          };
        });
      }
      return sideEffects;
    }

    /**
     * Gets SideEffects entity type that come from an OData Service
     * Internal routine to get, from converted oData metaModel, SideEffects
     * related to a specific entity type and to convert these SideEffects with
     * expected format.
     *
     * @ui5-restricted
     * @param entityType Entity type
     * @returns Entity type SideEffects dictionary
     */;
    _proto.retrieveODataEntitySideEffects = function retrieveODataEntitySideEffects(entityType) {
      const entitySideEffects = {};
      this.getSideEffectsFromSource(entityType).forEach(sideEffects => {
        entitySideEffects[sideEffects.fullyQualifiedName] = sideEffects;
      });
      return entitySideEffects;
    }

    /**
     * Defines a map for the Sources of sideEffect on the entity to track where those sources are used in SideEffects annotation.
     *
     * @param entityType The entityType we look for side Effects annotation
     * @param sideEffectsSources The mapping object in construction
     * @param sideEffectsSources.entities
     * @param sideEffectsSources.properties
     */;
    _proto.mapSideEffectSources = function mapSideEffectSources(entityType, sideEffectsSources) {
      for (const sideEffectDefinition of this.getSideEffectsAnnotationFromSource(entityType)) {
        var _sideEffectDefinition;
        for (const sourceEntity of sideEffectDefinition.SourceEntities ?? []) {
          var _sourceEntity$$target;
          const targetEntityType = sourceEntity.value ? (_sourceEntity$$target = sourceEntity.$target) === null || _sourceEntity$$target === void 0 ? void 0 : _sourceEntity$$target.targetType : entityType;
          if (targetEntityType) {
            if (!sideEffectsSources.entities[targetEntityType.fullyQualifiedName]) {
              sideEffectsSources.entities[targetEntityType.fullyQualifiedName] = [];
            }
            sideEffectsSources.entities[targetEntityType.fullyQualifiedName].push({
              entity: entityType.fullyQualifiedName,
              qualifier: sideEffectDefinition.qualifier
            });
          }
        }
        const hasUniqueSourceProperty = ((_sideEffectDefinition = sideEffectDefinition.SourceProperties) === null || _sideEffectDefinition === void 0 ? void 0 : _sideEffectDefinition.length) === 1;
        for (const sourceProperty of sideEffectDefinition.SourceProperties ?? []) {
          var _sourceProperty$$targ, _sourceProperty$$targ3;
          if (!sideEffectsSources.properties[(_sourceProperty$$targ = sourceProperty.$target) === null || _sourceProperty$$targ === void 0 ? void 0 : _sourceProperty$$targ.fullyQualifiedName]) {
            var _sourceProperty$$targ2;
            sideEffectsSources.properties[(_sourceProperty$$targ2 = sourceProperty.$target) === null || _sourceProperty$$targ2 === void 0 ? void 0 : _sourceProperty$$targ2.fullyQualifiedName] = [];
          }
          sideEffectsSources.properties[(_sourceProperty$$targ3 = sourceProperty.$target) === null || _sourceProperty$$targ3 === void 0 ? void 0 : _sourceProperty$$targ3.fullyQualifiedName].push({
            entity: entityType.fullyQualifiedName,
            qualifier: sideEffectDefinition.qualifier,
            hasUniqueSourceProperty
          });
        }
      }
    }

    /**
     * Get the fieldGroupId based on the stored information on th side effect.
     *
     * @param sideEffectInfo
     * @param isImmediate
     * @returns A string for the fieldGroupId.
     */;
    _proto.getFieldGroupIdForSideEffect = function getFieldGroupIdForSideEffect(sideEffectInfo) {
      let isImmediate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const sideEffectWithQualifier = sideEffectInfo.qualifier ? `${sideEffectInfo.entity}#${sideEffectInfo.qualifier}` : sideEffectInfo.entity;
      return isImmediate || sideEffectInfo.hasUniqueSourceProperty === true ? `${sideEffectWithQualifier}$$ImmediateRequest` : sideEffectWithQualifier;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    return SideEffectsService;
  }(Service);
  _exports.SideEffectsService = SideEffectsService;
  let SideEffectsServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(SideEffectsServiceFactory, _ServiceFactory);
    function SideEffectsServiceFactory() {
      return _ServiceFactory.apply(this, arguments) || this;
    }
    var _proto2 = SideEffectsServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      const SideEffectsServiceService = new SideEffectsService(oServiceContext);
      return SideEffectsServiceService.initPromise;
    };
    return SideEffectsServiceFactory;
  }(ServiceFactory);
  return SideEffectsServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/SideEffectsServiceFactory", ["sap/base/Log","sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/PropertyHelper","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory","../templating/DataModelPathHelper"],function(t,e,i,r,o,n,s){"use strict";var a={};var c=s.getTargetObjectPath;var f=s.getTargetNavigationPath;var u=s.enhanceDataModelPath;var l=r.getAssociatedTextPropertyPath;var d=i.isProperty;var p=i.isEntityType;var g=i.isComplexType;var h=e.getInvolvedDataModelObjects;var E=e.convertTypes;function y(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;v(t,e)}function v(t,e){v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,i){e.__proto__=i;return e};return v(t,e)}let m=function(e){y(i,e);function i(){return e.apply(this,arguments)||this}a.SideEffectsService=i;var r=i.prototype;r.init=function t(){this.sideEffectsRegistry={oData:{entities:{},actions:{}},control:{}};this.isInitialized=false;this.initPromise=Promise.resolve(this)};r.addControlSideEffects=function t(e,i){if(i.sourceControlId){const t={...i,fullyQualifiedName:`${e}/SideEffectsForControl/${i.sourceControlId}`};const r=this.sideEffectsRegistry.control[e]||{};r[t.sourceControlId]=t;this.sideEffectsRegistry.control[e]=r}};r.executeAction=function t(e,i,r){const o=i.getModel().bindContext(`${e}(...)`,i);return o.execute(r||i.getBinding().getUpdateGroupId())};r.getConvertedMetaModel=function t(){return E(this.getMetaModel(),this.capabilities)};r.getEntityTypeFromContext=function t(e){const i=e.getModel().getMetaModel(),r=i.getMetaPath(e.getPath()),o=i.getObject(r)["$Type"];return o};r.getODataEntitySideEffects=function t(e){return this.sideEffectsRegistry.oData.entities[e]||{}};r.getGlobalODataEntitySideEffects=function t(e){const i=this.getODataEntitySideEffects(e);const r=[];for(const t in i){const e=i[t];if(!e.sourceEntities&&!e.sourceProperties){r.push(e)}}return r};r.getODataActionSideEffects=function t(e,i){if(i){const t=this.getEntityTypeFromContext(i);if(t){var r;return(r=this.sideEffectsRegistry.oData.actions[t])===null||r===void 0?void 0:r[e]}}return undefined};r.initializeSideEffects=function t(e){this.capabilities=e;if(!this.isInitialized){const t={entities:{},properties:{}};const e=this.getConvertedMetaModel();e.entityTypes.forEach(e=>{this.sideEffectsRegistry.oData.entities[e.fullyQualifiedName]=this.retrieveODataEntitySideEffects(e);this.sideEffectsRegistry.oData.actions[e.fullyQualifiedName]=this.retrieveODataActionsSideEffects(e);this.mapSideEffectSources(e,t)});this.sourcesToSideEffectMappings=t;this.isInitialized=true}};r.removeControlSideEffects=function t(e){Object.keys(this.sideEffectsRegistry.control).forEach(t=>{if(this.sideEffectsRegistry.control[t][e]){delete this.sideEffectsRegistry.control[t][e]}})};r.requestSideEffects=function t(e,i,r){this.logRequest(e,i);return i.requestSideEffects(e,r)};r.requestSideEffectsForODataAction=function t(e,i){var r,o;let n;if((r=e.triggerActions)!==null&&r!==void 0&&r.length){n=e.triggerActions.map(t=>this.executeAction(t,i))}else{n=[]}if((o=e.pathExpressions)!==null&&o!==void 0&&o.length){n.push(this.requestSideEffects(e.pathExpressions,i))}return n.length?Promise.all(n):Promise.resolve([])};r.requestSideEffectsForNavigationProperty=function e(i,r,o){const n=this.getEntityTypeFromContext(r);if(n){const e=`${i}/`;const s=this.getODataEntitySideEffects(n);let a=[];let c=[];let f=[];Object.keys(s).filter(t=>{var r;const o=s[t];return(o.sourceEntities||[]).some(t=>t.$NavigationPropertyPath===i)||((r=o.sourceProperties)===null||r===void 0?void 0:r.length)===1&&o.sourceProperties.some(t=>t.startsWith(e)&&t.replace(e,"").indexOf("/")===-1)}).forEach(t=>{const e=s[t];if(e.triggerAction){this.executeAction(e.triggerAction,r,o)}a=a.concat(e.targetProperties);c=c.concat(e.targetEntities)});const u=this.removeDuplicateTargets({targetProperties:a,targetEntities:c});f=[...u.targetProperties,...u.targetEntities];if(f.length){return this.requestSideEffects(f,r,o).catch(e=>t.error(`SideEffects - Error while processing SideEffects for Navigation Property ${i}`,e))}}return Promise.resolve()};r.getControlEntitySideEffects=function t(e){return this.sideEffectsRegistry.control[e]||{}};r.getSideEffectWhereEntityIsSource=function t(e){return this.sourcesToSideEffectMappings.entities[e]||[]};r.computeFieldGroupIds=function t(e,i){const r=this.getSideEffectWhereEntityIsSource(e).map(t=>this.getFieldGroupIdForSideEffect(t,true));return r.concat(this.getSideEffectWherePropertyIsSource(i).map(t=>this.getFieldGroupIdForSideEffect(t)))};r.getSideEffectWherePropertyIsSource=function t(e){return this.sourcesToSideEffectMappings.properties[e]||[]};r.addTextProperties=function t(e,i){const r=new Set(e.targetProperties);const o=new Set(e.targetEntities.map(t=>t.$NavigationPropertyPath));const n=e.targetProperties.reduce((t,e)=>t.concat(this.getDataModelPropertiesFromAPath(e,i)),[]);for(const t of n){const e=l(t.targetObject);if(e){const i=u(t,e);const n=f(i,true);const s=c(i,true);if(d(i.targetObject)&&!r.has(s)&&!r.has(`${n}${i.navigationProperties.length?"/":""}*`)&&!o.has(`${n}`)){if(t.targetEntitySet!==i.targetEntitySet&&i.navigationProperties&&i.targetEntityType){o.add(n)}else{r.add(s)}}}}return{targetProperties:Array.from(r),targetEntities:Array.from(o).map(t=>({$NavigationPropertyPath:t}))}};r.convertSideEffects=function t(e,i,r){const o=e.TriggerAction;const n=this.convertSideEffectsFormat(e);let s={targetProperties:n.targetProperties,targetEntities:n.targetEntities};s=this.removeBindingParameter(s,r);s=this.addTextProperties(s,i);s=this.removeDuplicateTargets(s);return{...n,...{targetEntities:s.targetEntities,targetProperties:s.targetProperties,triggerAction:o}}};r.convertSideEffectsFormat=function e(i){const r=e=>e?e.reduce((e,r)=>{const o=r.type&&r.value||r;if(o){e.push(o)}else{t.error(`SideEffects - Error while processing TargetProperties for SideEffects ${i.fullyQualifiedName}`)}return e},[]):e;const o=t=>t?t.map(t=>({$NavigationPropertyPath:t.value})):t;return{fullyQualifiedName:i.fullyQualifiedName,sourceProperties:r(i.SourceProperties),sourceEntities:o(i.SourceEntities),targetProperties:r(i.TargetProperties)??[],targetEntities:o(i.TargetEntities)??[]}};r.getDataModelPropertiesFromAPath=function t(e,i){let r=[];const o=this.getConvertedMetaModel();const n=o.entitySets.find(t=>t.entityType===i)||o.singletons.find(t=>t.entityType===i);if(n){const t=this.getMetaModel(),i=t.createBindingContext(`/${n.name}`);if(i){const t=h(i);const o=u(t,e.replace("*","")||"/"),n=o.targetObject;if(d(n)){if(g(n.targetType)){r=r.concat(n.targetType.properties.map(t=>u(o,t.name)))}else{r.push(o)}}else if(p(n)){r=r.concat(o.targetEntityType.entityProperties.map(t=>u(o,t.name)))}i.destroy()}}return r.filter(t=>t.targetObject)};r.getMetaModel=function t(){const e=this.getContext();const i=e.scopeObject;return i.getModel().getMetaModel()};r.getSideEffectsFromSource=function t(e){var i;let r="";const o=p(e);const n=o?e:e.sourceEntityType;const s=(i=e.annotations)===null||i===void 0?void 0:i.Common;if(n&&s){if(!o){var a;const t=(a=e.parameters)===null||a===void 0?void 0:a.find(t=>t.type===n.fullyQualifiedName);r=(t===null||t===void 0?void 0:t.fullyQualifiedName.split("/")[1])??""}return this.getSideEffectsAnnotationFromSource(e).map(t=>this.convertSideEffects(t,n,r))}return[]};r.getSideEffectsAnnotationFromSource=function t(e){var i;const r=[];const o=(i=e.annotations)===null||i===void 0?void 0:i.Common;for(const t in o){const e=o[t];if(this.isSideEffectsAnnotation(e)){r.push(e)}}return r};r.isSideEffectsAnnotation=function t(e){return(e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.Common.v1.SideEffectsType"};r.logRequest=function e(i,r){const o=i.reduce(function(t,e){return`${t}\n\t\t${e.$NavigationPropertyPath||e||""}`},"");t.debug(`SideEffects - Request:\n\tContext path : ${r.getPath()}\n\tProperty paths :${o}`)};r.removeBindingParameter=function t(e,i){if(i){const t=function(t){return t.replace(new RegExp(`^${i}/?`),"")};return{targetProperties:e.targetProperties.map(e=>t(e)),targetEntities:e.targetEntities.map(e=>({$NavigationPropertyPath:t(e.$NavigationPropertyPath)}))}}return{targetProperties:e.targetProperties,targetEntities:e.targetEntities}};r.removeDuplicateTargets=function t(e){const i=e.targetEntities.map(t=>t.$NavigationPropertyPath);const r=new Set(i);const o=new Set(e.targetProperties);const n=Array.from(r).map(t=>({$NavigationPropertyPath:t}));return{targetProperties:Array.from(o),targetEntities:n}};r.retrieveODataActionsSideEffects=function t(e){const i={};const r=e.actions;if(r){Object.keys(r).forEach(t=>{const r=e.actions[t];const o=new Set;let n=[];let s=[];this.getSideEffectsFromSource(r).forEach(t=>{const e=t.triggerAction;n=n.concat(t.targetProperties);s=s.concat(t.targetEntities);if(e){o.add(e)}});const a=this.removeDuplicateTargets({targetProperties:n,targetEntities:s});i[t]={pathExpressions:[...a.targetProperties,...a.targetEntities],triggerActions:Array.from(o)}})}return i};r.retrieveODataEntitySideEffects=function t(e){const i={};this.getSideEffectsFromSource(e).forEach(t=>{i[t.fullyQualifiedName]=t});return i};r.mapSideEffectSources=function t(e,i){for(const t of this.getSideEffectsAnnotationFromSource(e)){var r;for(const r of t.SourceEntities??[]){var o;const n=r.value?(o=r.$target)===null||o===void 0?void 0:o.targetType:e;if(n){if(!i.entities[n.fullyQualifiedName]){i.entities[n.fullyQualifiedName]=[]}i.entities[n.fullyQualifiedName].push({entity:e.fullyQualifiedName,qualifier:t.qualifier})}}const c=((r=t.SourceProperties)===null||r===void 0?void 0:r.length)===1;for(const r of t.SourceProperties??[]){var n,s;if(!i.properties[(n=r.$target)===null||n===void 0?void 0:n.fullyQualifiedName]){var a;i.properties[(a=r.$target)===null||a===void 0?void 0:a.fullyQualifiedName]=[]}i.properties[(s=r.$target)===null||s===void 0?void 0:s.fullyQualifiedName].push({entity:e.fullyQualifiedName,qualifier:t.qualifier,hasUniqueSourceProperty:c})}}};r.getFieldGroupIdForSideEffect=function t(e){let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const r=e.qualifier?`${e.entity}#${e.qualifier}`:e.entity;return i||e.hasUniqueSourceProperty===true?`${r}$$ImmediateRequest`:r};r.getInterface=function t(){return this};return i}(o);a.SideEffectsService=m;let P=function(t){y(e,t);function e(){return t.apply(this,arguments)||this}var i=e.prototype;i.createInstance=function t(e){const i=new m(e);return i.initPromise};return e}(n);return P},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/TemplatedViewServiceFactory-dbg", ["sap/base/Log", "sap/fe/core/helpers/LoaderUtils", "sap/fe/core/manifestMerger/ChangePageConfiguration", "sap/fe/core/TemplateModel", "sap/ui/core/Component", "sap/ui/core/mvc/View", "sap/ui/core/service/Service", "sap/ui/core/service/ServiceFactory", "sap/ui/core/service/ServiceFactoryRegistry", "sap/ui/Device", "sap/ui/model/base/ManagedObjectModel", "sap/ui/model/json/JSONModel", "sap/ui/VersionInfo", "../helpers/DynamicAnnotationPathHelper"], function (Log, LoaderUtils, ChangePageConfiguration, TemplateModel, Component, View, Service, ServiceFactory, ServiceFactoryRegistry, Device, ManagedObjectModel, JSONModel, VersionInfo, DynamicAnnotationPathHelper) {
  "use strict";

  var resolveDynamicExpression = DynamicAnnotationPathHelper.resolveDynamicExpression;
  var applyPageConfigurationChanges = ChangePageConfiguration.applyPageConfigurationChanges;
  var requireDependencies = LoaderUtils.requireDependencies;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let TemplatedViewService = /*#__PURE__*/function (_Service) {
    _inheritsLoose(TemplatedViewService, _Service);
    function TemplatedViewService() {
      return _Service.apply(this, arguments) || this;
    }
    var _proto = TemplatedViewService.prototype;
    _proto.init = function init() {
      const aServiceDependencies = [];
      const oContext = this.getContext();
      const oComponent = oContext.scopeObject;
      const oAppComponent = Component.getOwnerComponentFor(oComponent);
      const oMetaModel = oAppComponent.getMetaModel();
      this.pageId = oAppComponent.getLocalId(oComponent.getId());
      const sStableId = `${oAppComponent.getMetadata().getComponentName()}::${this.pageId}`;
      const aEnhanceI18n = oComponent.getEnhanceI18n() || [];
      let sAppNamespace;
      this.oFactory = oContext.factory;
      if (aEnhanceI18n) {
        sAppNamespace = oAppComponent.getMetadata().getComponentName();
        for (let i = 0; i < aEnhanceI18n.length; i++) {
          // In order to support text-verticalization applications can also passs a resource model defined in the manifest
          // UI5 takes care of text-verticalization for resource models defined in the manifest
          // Hence check if the given key is a resource model defined in the manifest
          // if so this model should be used to enhance the sap.fe resource model so pass it as it is
          const oResourceModel = oAppComponent.getModel(aEnhanceI18n[i]);
          if (oResourceModel && oResourceModel.isA("sap.ui.model.resource.ResourceModel")) {
            aEnhanceI18n[i] = oResourceModel;
          } else {
            aEnhanceI18n[i] = `${sAppNamespace}.${aEnhanceI18n[i].replace(".properties", "")}`;
          }
        }
      }
      const sCacheIdentifier = `${oAppComponent.getMetadata().getName()}_${sStableId}_${sap.ui.getCore().getConfiguration().getLanguageTag()}`;
      aServiceDependencies.push(ServiceFactoryRegistry.get("sap.fe.core.services.ResourceModelService").createInstance({
        scopeType: "component",
        scopeObject: oComponent,
        settings: {
          bundles: ["sap.fe.core.messagebundle", "sap.fe.macros.messagebundle", "sap.fe.templates.messagebundle"],
          enhanceI18n: aEnhanceI18n,
          modelName: "sap.fe.i18n"
        }
      }).then(oResourceModelService => {
        this.oResourceModelService = oResourceModelService;
        return oResourceModelService.getResourceModel();
      }));
      aServiceDependencies.push(ServiceFactoryRegistry.get("sap.fe.core.services.CacheHandlerService").createInstance({
        settings: {
          metaModel: oMetaModel,
          appComponent: oAppComponent,
          component: oComponent
        }
      }).then(oCacheHandlerService => {
        this.oCacheHandlerService = oCacheHandlerService;
        return oCacheHandlerService.validateCacheKey(sCacheIdentifier, oComponent);
      }));
      aServiceDependencies.push(VersionInfo.load().then(function (oInfo) {
        let sTimestamp = "";
        if (!oInfo.libraries) {
          sTimestamp = sap.ui.buildinfo.buildtime;
        } else {
          oInfo.libraries.forEach(function (oLibrary) {
            sTimestamp += oLibrary.buildTimestamp;
          });
        }
        return sTimestamp;
      }).catch(function () {
        return "<NOVALUE>";
      }));
      this.initPromise = Promise.all(aServiceDependencies).then(async aDependenciesResult => {
        const oResourceModel = aDependenciesResult[0];
        const sCacheKey = aDependenciesResult[1];
        const oSideEffectsServices = oAppComponent.getSideEffectsService();
        oSideEffectsServices.initializeSideEffects(oAppComponent.getEnvironmentCapabilities().getCapabilities());
        const [TemplateConverter, MetaModelConverter] = await requireDependencies(["sap/fe/core/converters/TemplateConverter", "sap/fe/core/converters/MetaModelConverter"]);
        return this.createView(oResourceModel, sStableId, sCacheKey, TemplateConverter, MetaModelConverter);
      }).then(function (sCacheKey) {
        const oCacheHandlerService = ServiceFactoryRegistry.get("sap.fe.core.services.CacheHandlerService").getInstance(oMetaModel);
        oCacheHandlerService.invalidateIfNeeded(sCacheKey, sCacheIdentifier, oComponent);
      });
    }

    /**
     * Refresh the current view using the same configuration as before.
     *
     * @param oComponent
     * @returns A promise indicating when the view is refreshed
     * @private
     */;
    _proto.refreshView = function refreshView(oComponent) {
      const oRootView = oComponent.getRootControl();
      if (oRootView) {
        oRootView.destroy();
      } else if (this.oView) {
        this.oView.destroy();
      }
      return this.createView(this.resourceModel, this.stableId, "", this.TemplateConverter, this.MetaModelConverter).then(function () {
        oComponent.oContainer.invalidate();
      }).catch(function (oError) {
        oComponent.oContainer.invalidate();
        Log.error(oError);
      });
    };
    _proto.createView = async function createView(oResourceModel, sStableId, sCacheKey, TemplateConverter, MetaModelConverter) {
      this.resourceModel = oResourceModel; // TODO: get rid, kept it for the time being
      this.stableId = sStableId;
      this.TemplateConverter = TemplateConverter;
      this.MetaModelConverter = MetaModelConverter;
      const oContext = this.getContext();
      const mServiceSettings = oContext.settings;
      const sConverterType = mServiceSettings.converterType;
      const oComponent = oContext.scopeObject;
      const oAppComponent = Component.getOwnerComponentFor(oComponent);
      const sFullContextPath = oAppComponent.getRoutingService().getTargetInformationFor(oComponent).options.settings.fullContextPath;
      const oMetaModel = oAppComponent.getMetaModel();
      const oManifestContent = oAppComponent.getManifest();
      const oDeviceModel = new JSONModel(Device).setDefaultBindingMode("OneWay");
      const oManifestModel = new JSONModel(oManifestContent);
      const bError = false;
      let oPageModel, oViewDataModel, oViewSettings, mViewData;
      // Load the index for the additional building blocks which is responsible for initializing them
      function getViewSettings() {
        const aSplitPath = sFullContextPath.split("/");
        const sEntitySetPath = aSplitPath.reduce(function (sPathSoFar, sNextPathPart) {
          if (sNextPathPart === "") {
            return sPathSoFar;
          }
          if (sPathSoFar === "") {
            sPathSoFar = `/${sNextPathPart}`;
          } else {
            const oTarget = oMetaModel.getObject(`${sPathSoFar}/$NavigationPropertyBinding/${sNextPathPart}`);
            if (oTarget && Object.keys(oTarget).length > 0) {
              sPathSoFar += "/$NavigationPropertyBinding";
            }
            sPathSoFar += `/${sNextPathPart}`;
          }
          return sPathSoFar;
        }, "");
        let viewType = mServiceSettings.viewType || oComponent.getViewType() || "XML";
        if (viewType !== "XML") {
          viewType = undefined;
        }
        return {
          type: viewType,
          preprocessors: {
            xml: {
              bindingContexts: {
                entitySet: sEntitySetPath ? oMetaModel.createBindingContext(sEntitySetPath) : null,
                fullContextPath: sFullContextPath ? oMetaModel.createBindingContext(sFullContextPath) : null,
                contextPath: sFullContextPath ? oMetaModel.createBindingContext(sFullContextPath) : null,
                converterContext: oPageModel.createBindingContext("/", undefined, {
                  noResolve: true
                }),
                viewData: mViewData ? oViewDataModel.createBindingContext("/") : null
              },
              models: {
                entitySet: oMetaModel,
                fullContextPath: oMetaModel,
                contextPath: oMetaModel,
                "sap.fe.i18n": oResourceModel,
                metaModel: oMetaModel,
                device: oDeviceModel,
                manifest: oManifestModel,
                converterContext: oPageModel,
                viewData: oViewDataModel
              },
              appComponent: oAppComponent
            }
          },
          id: sStableId,
          viewName: mServiceSettings.viewName || oComponent.getViewName(),
          viewData: mViewData,
          cache: {
            keys: [sCacheKey],
            additionalData: {
              // We store the page model data in the `additionalData` of the view cache, this way it is always in sync
              getAdditionalCacheData: () => {
                return oPageModel.getData();
              },
              setAdditionalCacheData: value => {
                oPageModel.setData(value);
              }
            }
          },
          models: {
            "sap.fe.i18n": oResourceModel
          },
          height: "100%"
        };
      }
      const createErrorPage = reason => {
        // just replace the view name and add an additional model containing the reason, but
        // keep the other settings
        Log.error(reason.message, reason);
        oViewSettings.viewName = mServiceSettings.errorViewName || "sap.fe.core.services.view.TemplatingErrorPage";
        oViewSettings.preprocessors.xml.models["error"] = new JSONModel(reason);
        return oComponent.runAsOwner(() => {
          return View.create(oViewSettings).then(oView => {
            this.oView = oView;
            this.oView.setModel(new ManagedObjectModel(this.oView), "$view");
            oComponent.setAggregation("rootControl", this.oView);
            return sCacheKey;
          });
        });
      };
      try {
        var _oManifestContent$sap;
        const oRoutingService = await oAppComponent.getService("routingService");
        // Retrieve the viewLevel for the component
        const oTargetInfo = oRoutingService.getTargetInformationFor(oComponent);
        const mOutbounds = oManifestContent["sap.app"] && oManifestContent["sap.app"].crossNavigation && oManifestContent["sap.app"].crossNavigation.outbounds || {};
        const mNavigation = oComponent.getNavigation() || {};
        Object.keys(mNavigation).forEach(function (navigationObjectKey) {
          const navigationObject = mNavigation[navigationObjectKey];
          let outboundConfig;
          if (navigationObject.detail && navigationObject.detail.outbound && mOutbounds[navigationObject.detail.outbound]) {
            outboundConfig = mOutbounds[navigationObject.detail.outbound];
            navigationObject.detail.outboundDetail = {
              semanticObject: outboundConfig.semanticObject,
              action: outboundConfig.action,
              parameters: outboundConfig.parameters
            };
          }
          if (navigationObject.create && navigationObject.create.outbound && mOutbounds[navigationObject.create.outbound]) {
            outboundConfig = mOutbounds[navigationObject.create.outbound];
            navigationObject.create.outboundDetail = {
              semanticObject: outboundConfig.semanticObject,
              action: outboundConfig.action,
              parameters: outboundConfig.parameters
            };
          }
        });
        mViewData = {
          appComponent: oAppComponent,
          navigation: mNavigation,
          viewLevel: oTargetInfo.viewLevel,
          stableId: sStableId,
          contentDensities: (_oManifestContent$sap = oManifestContent["sap.ui5"]) === null || _oManifestContent$sap === void 0 ? void 0 : _oManifestContent$sap.contentDensities,
          resourceModel: oResourceModel,
          fullContextPath: sFullContextPath,
          isDesktop: Device.system.desktop,
          isPhone: Device.system.phone
        };
        if (oComponent.getViewData) {
          var _oManifestContent$sap2, _oManifestContent$sap3, _oManifestContent$sap4, _oManifestContent$sap5, _oManifestContent$sap6;
          Object.assign(mViewData, oComponent.getViewData());
          const actualSettings = (oManifestContent === null || oManifestContent === void 0 ? void 0 : (_oManifestContent$sap2 = oManifestContent["sap.ui5"]) === null || _oManifestContent$sap2 === void 0 ? void 0 : (_oManifestContent$sap3 = _oManifestContent$sap2.routing) === null || _oManifestContent$sap3 === void 0 ? void 0 : (_oManifestContent$sap4 = _oManifestContent$sap3.targets) === null || _oManifestContent$sap4 === void 0 ? void 0 : (_oManifestContent$sap5 = _oManifestContent$sap4[this.pageId]) === null || _oManifestContent$sap5 === void 0 ? void 0 : (_oManifestContent$sap6 = _oManifestContent$sap5.options) === null || _oManifestContent$sap6 === void 0 ? void 0 : _oManifestContent$sap6.settings) || {};
          mViewData = applyPageConfigurationChanges(actualSettings, mViewData, oAppComponent, this.pageId);
        }
        mViewData.isShareButtonVisibleForMyInbox = TemplatedViewServiceFactory.getShareButtonVisibilityForMyInbox(oAppComponent);
        const oShellServices = oAppComponent.getShellServices();
        mViewData.converterType = sConverterType;
        mViewData.shellContentDensity = oShellServices.getContentDensity();
        mViewData.retrieveTextFromValueList = oManifestContent["sap.fe"] && oManifestContent["sap.fe"].form ? oManifestContent["sap.fe"].form.retrieveTextFromValueList : undefined;
        oViewDataModel = new JSONModel(mViewData);
        if (mViewData.controlConfiguration) {
          for (const sAnnotationPath in mViewData.controlConfiguration) {
            if (sAnnotationPath.indexOf("[") !== -1) {
              const sTargetAnnotationPath = resolveDynamicExpression(sAnnotationPath, oMetaModel);
              mViewData.controlConfiguration[sTargetAnnotationPath] = mViewData.controlConfiguration[sAnnotationPath];
            }
          }
        }
        MetaModelConverter.convertTypes(oMetaModel, oAppComponent.getEnvironmentCapabilities().getCapabilities());
        oPageModel = new TemplateModel(() => {
          try {
            const oDiagnostics = oAppComponent.getDiagnostics();
            const iIssueCount = oDiagnostics.getIssues().length;
            const oConverterPageModel = TemplateConverter.convertPage(sConverterType, oMetaModel, mViewData, oDiagnostics, sFullContextPath, oAppComponent.getEnvironmentCapabilities().getCapabilities(), oComponent);
            const aIssues = oDiagnostics.getIssues();
            const aAddedIssues = aIssues.slice(iIssueCount);
            if (aAddedIssues.length > 0) {
              Log.warning("Some issues have been detected in your project, please check the UI5 support assistant rule for sap.fe.core");
            }
            return oConverterPageModel;
          } catch (error) {
            Log.error(error, error);
            return {};
          }
        }, oMetaModel);
        if (!bError) {
          oViewSettings = getViewSettings();
          // Setting the pageModel on the component for potential reuse
          oComponent.setModel(oPageModel, "_pageModel");
          return oComponent.runAsOwner(() => {
            return View.create(oViewSettings).catch(createErrorPage).then(oView => {
              this.oView = oView;
              this.oView.setModel(new ManagedObjectModel(this.oView), "$view");
              this.oView.setModel(oViewDataModel, "viewData");
              oComponent.setAggregation("rootControl", this.oView);
              return sCacheKey;
            }).catch(e => Log.error(e.message, e));
          });
        }
      } catch (error) {
        Log.error(error.message, error);
        throw new Error(`Error while creating view : ${error}`);
      }
    };
    _proto.getView = function getView() {
      return this.oView;
    };
    _proto.getInterface = function getInterface() {
      return this;
    };
    _proto.exit = function exit() {
      // Deregister global instance
      if (this.oResourceModelService) {
        this.oResourceModelService.destroy();
      }
      if (this.oCacheHandlerService) {
        this.oCacheHandlerService.destroy();
      }
      this.oFactory.removeGlobalInstance();
    };
    return TemplatedViewService;
  }(Service);
  let TemplatedViewServiceFactory = /*#__PURE__*/function (_ServiceFactory) {
    _inheritsLoose(TemplatedViewServiceFactory, _ServiceFactory);
    function TemplatedViewServiceFactory() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _ServiceFactory.call(this, ...args) || this;
      _this._oInstanceRegistry = {};
      return _this;
    }
    var _proto2 = TemplatedViewServiceFactory.prototype;
    _proto2.createInstance = function createInstance(oServiceContext) {
      TemplatedViewServiceFactory.iCreatingViews++;
      const oTemplatedViewService = new TemplatedViewService(Object.assign({
        factory: this
      }, oServiceContext));
      return oTemplatedViewService.initPromise.then(function () {
        TemplatedViewServiceFactory.iCreatingViews--;
        return oTemplatedViewService;
      });
    };
    _proto2.removeGlobalInstance = function removeGlobalInstance() {
      this._oInstanceRegistry = {};
    }

    /**
     * @description This function checks if the component data specifies the visibility of the 'Share' button and returns true or false based on the visibility
     * @param appComponent Specifies the app component
     * @returns Boolean value as true or false based whether the 'Share' button should be visible or not
     */;
    TemplatedViewServiceFactory.getShareButtonVisibilityForMyInbox = function getShareButtonVisibilityForMyInbox(appComponent) {
      const componentData = appComponent.getComponentData();
      if (componentData !== undefined && componentData.feEnvironment) {
        return componentData.feEnvironment.getShareControlVisibility();
      }
      return undefined;
    };
    TemplatedViewServiceFactory.getNumberOfViewsInCreationState = function getNumberOfViewsInCreationState() {
      return TemplatedViewServiceFactory.iCreatingViews;
    };
    return TemplatedViewServiceFactory;
  }(ServiceFactory);
  return TemplatedViewServiceFactory;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/TemplatedViewServiceFactory", ["sap/base/Log","sap/fe/core/helpers/LoaderUtils","sap/fe/core/manifestMerger/ChangePageConfiguration","sap/fe/core/TemplateModel","sap/ui/core/Component","sap/ui/core/mvc/View","sap/ui/core/service/Service","sap/ui/core/service/ServiceFactory","sap/ui/core/service/ServiceFactoryRegistry","sap/ui/Device","sap/ui/model/base/ManagedObjectModel","sap/ui/model/json/JSONModel","sap/ui/VersionInfo","../helpers/DynamicAnnotationPathHelper"],function(e,t,n,o,i,r,s,a,c,l,u,p,g,d){"use strict";var f=d.resolveDynamicExpression;var h=n.applyPageConfigurationChanges;var v=t.requireDependencies;function m(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;C(e,t)}function C(e,t){C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,n){t.__proto__=n;return t};return C(e,t)}let w=function(t){m(n,t);function n(){return t.apply(this,arguments)||this}var s=n.prototype;s.init=function e(){const t=[];const n=this.getContext();const o=n.scopeObject;const r=i.getOwnerComponentFor(o);const s=r.getMetaModel();this.pageId=r.getLocalId(o.getId());const a=`${r.getMetadata().getComponentName()}::${this.pageId}`;const l=o.getEnhanceI18n()||[];let u;this.oFactory=n.factory;if(l){u=r.getMetadata().getComponentName();for(let e=0;e<l.length;e++){const t=r.getModel(l[e]);if(t&&t.isA("sap.ui.model.resource.ResourceModel")){l[e]=t}else{l[e]=`${u}.${l[e].replace(".properties","")}`}}}const p=`${r.getMetadata().getName()}_${a}_${sap.ui.getCore().getConfiguration().getLanguageTag()}`;t.push(c.get("sap.fe.core.services.ResourceModelService").createInstance({scopeType:"component",scopeObject:o,settings:{bundles:["sap.fe.core.messagebundle","sap.fe.macros.messagebundle","sap.fe.templates.messagebundle"],enhanceI18n:l,modelName:"sap.fe.i18n"}}).then(e=>{this.oResourceModelService=e;return e.getResourceModel()}));t.push(c.get("sap.fe.core.services.CacheHandlerService").createInstance({settings:{metaModel:s,appComponent:r,component:o}}).then(e=>{this.oCacheHandlerService=e;return e.validateCacheKey(p,o)}));t.push(g.load().then(function(e){let t="";if(!e.libraries){t=sap.ui.buildinfo.buildtime}else{e.libraries.forEach(function(e){t+=e.buildTimestamp})}return t}).catch(function(){return"<NOVALUE>"}));this.initPromise=Promise.all(t).then(async e=>{const t=e[0];const n=e[1];const o=r.getSideEffectsService();o.initializeSideEffects(r.getEnvironmentCapabilities().getCapabilities());const[i,s]=await v(["sap/fe/core/converters/TemplateConverter","sap/fe/core/converters/MetaModelConverter"]);return this.createView(t,a,n,i,s)}).then(function(e){const t=c.get("sap.fe.core.services.CacheHandlerService").getInstance(s);t.invalidateIfNeeded(e,p,o)})};s.refreshView=function t(n){const o=n.getRootControl();if(o){o.destroy()}else if(this.oView){this.oView.destroy()}return this.createView(this.resourceModel,this.stableId,"",this.TemplateConverter,this.MetaModelConverter).then(function(){n.oContainer.invalidate()}).catch(function(t){n.oContainer.invalidate();e.error(t)})};s.createView=async function t(n,s,a,c,g){this.resourceModel=n;this.stableId=s;this.TemplateConverter=c;this.MetaModelConverter=g;const d=this.getContext();const v=d.settings;const m=v.converterType;const C=d.scopeObject;const w=i.getOwnerComponentFor(C);const y=w.getRoutingService().getTargetInformationFor(C).options.settings.fullContextPath;const M=w.getMetaModel();const V=w.getManifest();const I=new p(l).setDefaultBindingMode("OneWay");const S=new p(V);const O=false;let x,D,P,j;function N(){const e=y.split("/");const t=e.reduce(function(e,t){if(t===""){return e}if(e===""){e=`/${t}`}else{const n=M.getObject(`${e}/$NavigationPropertyBinding/${t}`);if(n&&Object.keys(n).length>0){e+="/$NavigationPropertyBinding"}e+=`/${t}`}return e},"");let o=v.viewType||C.getViewType()||"XML";if(o!=="XML"){o=undefined}return{type:o,preprocessors:{xml:{bindingContexts:{entitySet:t?M.createBindingContext(t):null,fullContextPath:y?M.createBindingContext(y):null,contextPath:y?M.createBindingContext(y):null,converterContext:x.createBindingContext("/",undefined,{noResolve:true}),viewData:j?D.createBindingContext("/"):null},models:{entitySet:M,fullContextPath:M,contextPath:M,"sap.fe.i18n":n,metaModel:M,device:I,manifest:S,converterContext:x,viewData:D},appComponent:w}},id:s,viewName:v.viewName||C.getViewName(),viewData:j,cache:{keys:[a],additionalData:{getAdditionalCacheData:()=>x.getData(),setAdditionalCacheData:e=>{x.setData(e)}}},models:{"sap.fe.i18n":n},height:"100%"}}const T=t=>{e.error(t.message,t);P.viewName=v.errorViewName||"sap.fe.core.services.view.TemplatingErrorPage";P.preprocessors.xml.models["error"]=new p(t);return C.runAsOwner(()=>r.create(P).then(e=>{this.oView=e;this.oView.setModel(new u(this.oView),"$view");C.setAggregation("rootControl",this.oView);return a}))};try{var $;const t=await w.getService("routingService");const i=t.getTargetInformationFor(C);const d=V["sap.app"]&&V["sap.app"].crossNavigation&&V["sap.app"].crossNavigation.outbounds||{};const v=C.getNavigation()||{};Object.keys(v).forEach(function(e){const t=v[e];let n;if(t.detail&&t.detail.outbound&&d[t.detail.outbound]){n=d[t.detail.outbound];t.detail.outboundDetail={semanticObject:n.semanticObject,action:n.action,parameters:n.parameters}}if(t.create&&t.create.outbound&&d[t.create.outbound]){n=d[t.create.outbound];t.create.outboundDetail={semanticObject:n.semanticObject,action:n.action,parameters:n.parameters}}});j={appComponent:w,navigation:v,viewLevel:i.viewLevel,stableId:s,contentDensities:($=V["sap.ui5"])===null||$===void 0?void 0:$.contentDensities,resourceModel:n,fullContextPath:y,isDesktop:l.system.desktop,isPhone:l.system.phone};if(C.getViewData){var E,F,R,B,L;Object.assign(j,C.getViewData());const e=(V===null||V===void 0?void 0:(E=V["sap.ui5"])===null||E===void 0?void 0:(F=E.routing)===null||F===void 0?void 0:(R=F.targets)===null||R===void 0?void 0:(B=R[this.pageId])===null||B===void 0?void 0:(L=B.options)===null||L===void 0?void 0:L.settings)||{};j=h(e,j,w,this.pageId)}j.isShareButtonVisibleForMyInbox=b.getShareButtonVisibilityForMyInbox(w);const I=w.getShellServices();j.converterType=m;j.shellContentDensity=I.getContentDensity();j.retrieveTextFromValueList=V["sap.fe"]&&V["sap.fe"].form?V["sap.fe"].form.retrieveTextFromValueList:undefined;D=new p(j);if(j.controlConfiguration){for(const e in j.controlConfiguration){if(e.indexOf("[")!==-1){const t=f(e,M);j.controlConfiguration[t]=j.controlConfiguration[e]}}}g.convertTypes(M,w.getEnvironmentCapabilities().getCapabilities());x=new o(()=>{try{const t=w.getDiagnostics();const n=t.getIssues().length;const o=c.convertPage(m,M,j,t,y,w.getEnvironmentCapabilities().getCapabilities(),C);const i=t.getIssues();const r=i.slice(n);if(r.length>0){e.warning("Some issues have been detected in your project, please check the UI5 support assistant rule for sap.fe.core")}return o}catch(t){e.error(t,t);return{}}},M);if(!O){P=N();C.setModel(x,"_pageModel");return C.runAsOwner(()=>r.create(P).catch(T).then(e=>{this.oView=e;this.oView.setModel(new u(this.oView),"$view");this.oView.setModel(D,"viewData");C.setAggregation("rootControl",this.oView);return a}).catch(t=>e.error(t.message,t)))}}catch(t){e.error(t.message,t);throw new Error(`Error while creating view : ${t}`)}};s.getView=function e(){return this.oView};s.getInterface=function e(){return this};s.exit=function e(){if(this.oResourceModelService){this.oResourceModelService.destroy()}if(this.oCacheHandlerService){this.oCacheHandlerService.destroy()}this.oFactory.removeGlobalInstance()};return n}(s);let b=function(e){m(t,e);function t(){var t;for(var n=arguments.length,o=new Array(n),i=0;i<n;i++){o[i]=arguments[i]}t=e.call(this,...o)||this;t._oInstanceRegistry={};return t}var n=t.prototype;n.createInstance=function e(n){t.iCreatingViews++;const o=new w(Object.assign({factory:this},n));return o.initPromise.then(function(){t.iCreatingViews--;return o})};n.removeGlobalInstance=function e(){this._oInstanceRegistry={}};t.getShareButtonVisibilityForMyInbox=function e(t){const n=t.getComponentData();if(n!==undefined&&n.feEnvironment){return n.feEnvironment.getShareControlVisibility()}return undefined};t.getNumberOfViewsInCreationState=function e(){return t.iCreatingViews};return t}(a);return b},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/view/TemplatingErrorPage-dbg.controller", ["sap/fe/core/controllerextensions/InternalRouting", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/mvc/Controller"], function (InternalRouting, ClassSupport, Controller) {
  "use strict";

  var _dec, _dec2, _class, _class2, _descriptor;
  var usingExtension = ClassSupport.usingExtension;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }
  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }
  function _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }
  let TemplatingErrorPage = (_dec = defineUI5Class("sap.fe.core.services.view.TemplatingErrorPage"), _dec2 = usingExtension(InternalRouting), _dec(_class = (_class2 = /*#__PURE__*/function (_Controller) {
    _inheritsLoose(TemplatingErrorPage, _Controller);
    function TemplatingErrorPage() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _Controller.call(this, ...args) || this;
      _initializerDefineProperty(_this, "_routing", _descriptor, _assertThisInitialized(_this));
      return _this;
    }
    return TemplatingErrorPage;
  }(Controller), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_routing", [_dec2], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  })), _class2)) || _class);
  return TemplatingErrorPage;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/services/view/TemplatingErrorPage.controller", ["sap/fe/core/controllerextensions/InternalRouting","sap/fe/core/helpers/ClassSupport","sap/ui/core/mvc/Controller"],function(e,r,i){"use strict";var t,n,o,a,l;var u=r.usingExtension;var c=r.defineUI5Class;function s(e,r,i,t){if(!i)return;Object.defineProperty(e,r,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(t):void 0})}function f(e){if(e===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return e}function p(e,r){e.prototype=Object.create(r.prototype);e.prototype.constructor=e;b(e,r)}function b(e,r){b=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(r,i){r.__proto__=i;return r};return b(e,r)}function d(e,r,i,t,n){var o={};Object.keys(t).forEach(function(e){o[e]=t[e]});o.enumerable=!!o.enumerable;o.configurable=!!o.configurable;if("value"in o||o.initializer){o.writable=true}o=i.slice().reverse().reduce(function(i,t){return t(e,r,i)||i},o);if(n&&o.initializer!==void 0){o.value=o.initializer?o.initializer.call(n):void 0;o.initializer=undefined}if(o.initializer===void 0){Object.defineProperty(e,r,o);o=null}return o}function v(e,r){throw new Error("Decorating class property failed. Please ensure that "+"proposal-class-properties is enabled and runs after the decorators transform.")}let g=(t=c("sap.fe.core.services.view.TemplatingErrorPage"),n=u(e),t(o=(a=function(e){p(r,e);function r(){var r;for(var i=arguments.length,t=new Array(i),n=0;n<i;n++){t[n]=arguments[n]}r=e.call(this,...t)||this;s(r,"_routing",l,f(r));return r}return r}(i),l=d(a.prototype,"_routing",[n],{configurable:true,enumerable:true,writable:true,initializer:null}),a))||o);return g},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/support/CommonHelper-dbg", ["sap/fe/core/converters/helpers/IssueManager", "sap/ui/support/library"], function (IssueManager, SupportLib) {
  "use strict";

  var _exports = {};
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;
  const Categories = SupportLib.Categories,
    // Accessibility, Performance, Memory, ...
    Severity = SupportLib.Severity,
    // Hint, Warning, Error
    Audiences = SupportLib.Audiences; // Control, Internal, Application

  //**********************************************************
  // Rule Definitions
  //**********************************************************

  // Rule checks if objectPage componentContainer height is set
  _exports.Categories = Categories;
  _exports.Audiences = Audiences;
  _exports.Severity = Severity;
  const getSeverity = function (oSeverity) {
    switch (oSeverity) {
      case IssueSeverity.Low:
        return Severity.Low;
      case IssueSeverity.High:
        return Severity.High;
      case IssueSeverity.Medium:
        return Severity.Medium;
      // no default
    }
  };
  _exports.getSeverity = getSeverity;
  const getIssueByCategory = function (oIssueManager, oCoreFacade, issueCategoryType, issueSubCategoryType) {
    const mComponents = oCoreFacade.getComponents();
    let oAppComponent;
    Object.keys(mComponents).forEach(sKey => {
      var _oComponent$getMetada, _oComponent$getMetada2;
      const oComponent = mComponents[sKey];
      if ((oComponent === null || oComponent === void 0 ? void 0 : (_oComponent$getMetada = oComponent.getMetadata()) === null || _oComponent$getMetada === void 0 ? void 0 : (_oComponent$getMetada2 = _oComponent$getMetada.getParent()) === null || _oComponent$getMetada2 === void 0 ? void 0 : _oComponent$getMetada2.getName()) === "sap.fe.core.AppComponent") {
        oAppComponent = oComponent;
      }
    });
    if (oAppComponent) {
      const aIssues = oAppComponent.getDiagnostics().getIssuesByCategory(IssueCategory[issueCategoryType], issueSubCategoryType);
      aIssues.forEach(function (oElement) {
        oIssueManager.addIssue({
          severity: getSeverity(oElement.severity),
          details: oElement.details,
          context: {
            id: oElement.category
          }
        });
      });
    }
  };
  _exports.getIssueByCategory = getIssueByCategory;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/support/CommonHelper", ["sap/fe/core/converters/helpers/IssueManager","sap/ui/support/library"],function(e,t){"use strict";var s={};var i=e.IssueSeverity;var r=e.IssueCategory;const o=t.Categories,n=t.Severity,a=t.Audiences;s.Categories=o;s.Audiences=a;s.Severity=n;const c=function(e){switch(e){case i.Low:return n.Low;case i.High:return n.High;case i.Medium:return n.Medium}};s.getSeverity=c;const u=function(e,t,s,i){const o=t.getComponents();let n;Object.keys(o).forEach(e=>{var t,s;const i=o[e];if((i===null||i===void 0?void 0:(t=i.getMetadata())===null||t===void 0?void 0:(s=t.getParent())===null||s===void 0?void 0:s.getName())==="sap.fe.core.AppComponent"){n=i}});if(n){const t=n.getDiagnostics().getIssuesByCategory(r[s],i);t.forEach(function(t){e.addIssue({severity:c(t.severity),details:t.details,context:{id:t.category}})})}};s.getIssueByCategory=u;return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/support/Diagnostics-dbg", [], function () {
  "use strict";

  let Diagnostics = /*#__PURE__*/function () {
    function Diagnostics() {
      this._issues = [];
    }
    var _proto = Diagnostics.prototype;
    _proto.addIssue = function addIssue(issueCategory, issueSeverity, details, issueCategoryType, subCategory) {
      const checkIfIssueExists = this.checkIfIssueExists(issueCategory, issueSeverity, details, issueCategoryType, subCategory);
      if (!checkIfIssueExists) {
        this._issues.push({
          category: issueCategory,
          severity: issueSeverity,
          details: details,
          subCategory: subCategory
        });
      }
    };
    _proto.getIssues = function getIssues() {
      return this._issues;
    };
    _proto.getIssuesByCategory = function getIssuesByCategory(inCategory, subCategory) {
      if (subCategory) {
        return this._issues.filter(issue => issue.category === inCategory && issue.subCategory === subCategory);
      } else {
        return this._issues.filter(issue => issue.category === inCategory);
      }
    };
    _proto.checkIfIssueExists = function checkIfIssueExists(inCategory, severity, details, issueCategoryType, issueSubCategory) {
      if (issueCategoryType && issueCategoryType[inCategory] && issueSubCategory) {
        return this._issues.some(issue => issue.category === inCategory && issue.severity === severity && issue.details.replace(/\n/g, "") === details.replace(/\n/g, "") && issue.subCategory === issueSubCategory);
      }
      return this._issues.some(issue => issue.category === inCategory && issue.severity === severity && issue.details.replace(/\n/g, "") === details.replace(/\n/g, ""));
    };
    return Diagnostics;
  }();
  return Diagnostics;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/support/Diagnostics", [],function(){"use strict";let s=function(){function s(){this._issues=[]}var e=s.prototype;e.addIssue=function s(e,t,i,r,u){const n=this.checkIfIssueExists(e,t,i,r,u);if(!n){this._issues.push({category:e,severity:t,details:i,subCategory:u})}};e.getIssues=function s(){return this._issues};e.getIssuesByCategory=function s(e,t){if(t){return this._issues.filter(s=>s.category===e&&s.subCategory===t)}else{return this._issues.filter(s=>s.category===e)}};e.checkIfIssueExists=function s(e,t,i,r,u){if(r&&r[e]&&u){return this._issues.some(s=>s.category===e&&s.severity===t&&s.details.replace(/\n/g,"")===i.replace(/\n/g,"")&&s.subCategory===u)}return this._issues.some(s=>s.category===e&&s.severity===t&&s.details.replace(/\n/g,"")===i.replace(/\n/g,""))};return s}();return s},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/CommonFormatters-dbg", ["sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters", "../converters/helpers/DataFieldHelper"], function (valueFormatters, BindingToolkit, TypeGuards, DataModelPathHelper, UIFormatters, DataFieldHelper) {
  "use strict";

  var _exports = {};
  var isReferencePropertyStaticallyHidden = DataFieldHelper.isReferencePropertyStaticallyHidden;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var compileExpression = BindingToolkit.compileExpression;
  // Import-export methods related to the common annotations used by the converter to use them in the templating through the Common Formatters.

  /**
   * Retrieves the expressionBinding created out of a binding expression.
   *
   * @param expression The expression which needs to be compiled
   * @returns The expression-binding string
   */
  const getExpressionBinding = function (expression) {
    return compileExpression(expression);
  };
  _exports.getExpressionBinding = getExpressionBinding;
  const getBindingWithTextArrangement = function (propertyDataModelPath, propertyBindingExpression, fieldFormatOptions) {
    var _propertyDefinition$a, _propertyDefinition$a2;
    const targetDisplayModeOverride = fieldFormatOptions === null || fieldFormatOptions === void 0 ? void 0 : fieldFormatOptions.displayMode;
    let outExpression = propertyBindingExpression;
    const propertyDefinition = propertyDataModelPath.targetObject.type === "PropertyPath" ? propertyDataModelPath.targetObject.$target : propertyDataModelPath.targetObject;
    const targetDisplayMode = targetDisplayModeOverride || UIFormatters.getDisplayMode(propertyDataModelPath);
    const commonText = (_propertyDefinition$a = propertyDefinition.annotations) === null || _propertyDefinition$a === void 0 ? void 0 : (_propertyDefinition$a2 = _propertyDefinition$a.Common) === null || _propertyDefinition$a2 === void 0 ? void 0 : _propertyDefinition$a2.Text;
    const relativeLocation = getRelativePaths(propertyDataModelPath);
    propertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression);
    if (targetDisplayMode !== "Value" && commonText) {
      switch (targetDisplayMode) {
        case "Description":
          outExpression = getExpressionFromAnnotation(commonText, relativeLocation);
          break;
        case "DescriptionValue":
          outExpression = formatResult([getExpressionFromAnnotation(commonText, relativeLocation), propertyBindingExpression], valueFormatters.formatWithBrackets);
          break;
        case "ValueDescription":
          outExpression = formatResult([propertyBindingExpression, getExpressionFromAnnotation(commonText, relativeLocation)], valueFormatters.formatWithBrackets);
          break;
      }
    }
    return outExpression;
  };
  _exports.getBindingWithTextArrangement = getBindingWithTextArrangement;
  const getBindingWithText = function (targetDataModelPath) {
    let propertyDataModelPath = targetDataModelPath;
    if (isPathAnnotationExpression(targetDataModelPath === null || targetDataModelPath === void 0 ? void 0 : targetDataModelPath.targetObject)) {
      var _targetDataModelPath$;
      propertyDataModelPath = enhanceDataModelPath(targetDataModelPath, (_targetDataModelPath$ = targetDataModelPath.targetObject) === null || _targetDataModelPath$ === void 0 ? void 0 : _targetDataModelPath$.path);
    }
    const propertyDefinition = propertyDataModelPath.targetObject;
    let propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(propertyDataModelPath));
    propertyBindingExpression = formatWithTypeInformation(propertyDefinition, propertyBindingExpression, true);
    const textArrangementBinding = getBindingWithTextArrangement(propertyDataModelPath, propertyBindingExpression);
    return propertyDefinition.annotations.UI && !isReferencePropertyStaticallyHidden(propertyDefinition.annotations.UI.DataFieldDefault) && compileExpression(textArrangementBinding) || undefined;
  };
  _exports.getBindingWithText = getBindingWithText;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/CommonFormatters", ["sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/UIFormatters","../converters/helpers/DataFieldHelper"],function(t,e,a,r,n,o){"use strict";var i={};var s=o.isReferencePropertyStaticallyHidden;var c=r.getRelativePaths;var l=r.getContextRelativeTargetObjectPath;var p=r.enhanceDataModelPath;var d=a.isPathAnnotationExpression;var v=e.pathInModel;var u=e.getExpressionFromAnnotation;var f=e.formatWithTypeInformation;var g=e.formatResult;var h=e.compileExpression;const m=function(t){return h(t)};i.getExpressionBinding=m;const b=function(e,a,r){var o,i;const s=r===null||r===void 0?void 0:r.displayMode;let l=a;const p=e.targetObject.type==="PropertyPath"?e.targetObject.$target:e.targetObject;const d=s||n.getDisplayMode(e);const v=(o=p.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Text;const h=c(e);a=f(p,a);if(d!=="Value"&&v){switch(d){case"Description":l=u(v,h);break;case"DescriptionValue":l=g([u(v,h),a],t.formatWithBrackets);break;case"ValueDescription":l=g([a,u(v,h)],t.formatWithBrackets);break}}return l};i.getBindingWithTextArrangement=b;const D=function(t){let e=t;if(d(t===null||t===void 0?void 0:t.targetObject)){var a;e=p(t,(a=t.targetObject)===null||a===void 0?void 0:a.path)}const r=e.targetObject;let n=v(l(e));n=f(r,n,true);const o=b(e,n);return r.annotations.UI&&!s(r.annotations.UI.DataFieldDefault)&&h(o)||undefined};i.getBindingWithText=D;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/CriticalityFormatters-dbg", ["sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper"], function (BindingToolkit, DataModelPathHelper) {
  "use strict";

  var _exports = {};
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var or = BindingToolkit.or;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  /**
   * Returns an expression to set button type based on Criticality
   * Supported Criticality: Positive, Negative, Critical and Information leading to Success, Error, Warning and None state respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityColor
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField a DataPoint or a DataModelObjectPath.
   * @param [oPropertyDataModelPath] DataModelObjectPath.
   * @returns An expression to deduce the state of an objectStatus.
   * @private
   * @ui5-restricted
   */
  const buildExpressionForCriticalityColor = (oTarget, oPropertyDataModelPath) => {
    const oAnnotationTarget = oTarget.targetObject ? oTarget.targetObject : oTarget;
    const oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    const relativeLocation = oPropertyDataModelPath ? getRelativePaths(oPropertyDataModelPath) : undefined;
    const oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty, relativeLocation);
    let sValueStateExpression;
    if (oCriticalityProperty) {
      sValueStateExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("Warning"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Success"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Information")), equal(oCriticalityExpression, constant(5)), equal(oCriticalityExpression, constant("5"))), constant("Information"), constant("None")))));
    } else {
      // Any other cases are not valid, the default value of 'None' will be returned
      sValueStateExpression = constant("None");
    }
    return compileExpression(sValueStateExpression);
  };

  /**
   * Returns an expression to set icon type based on Criticality
   * Supported Criticality: Positive, Negative, Critical and Information.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityIcon
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField a DataPoint or a DataModelObjectPath.
   * @param [oPropertyDataModelPath] DataModelObjectPath.
   * @returns An expression to deduce the icon of an objectStatus.
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityColor = buildExpressionForCriticalityColor;
  const buildExpressionForCriticalityIcon = (oTarget, oPropertyDataModelPath) => {
    const oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    const oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    const relativeLocation = oPropertyDataModelPath ? getRelativePaths(oPropertyDataModelPath) : undefined;
    const oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty, relativeLocation);
    const bCondition = (oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.CriticalityRepresentation) && (oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.CriticalityRepresentation) === "UI.CriticalityRepresentationType/WithoutIcon";
    let sIconPath;
    if (!bCondition) {
      if (oCriticalityProperty) {
        sIconPath = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("sap-icon://message-error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("sap-icon://message-warning"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("sap-icon://message-success"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Information")), equal(oCriticalityExpression, constant(5)), equal(oCriticalityExpression, constant("5"))), constant("sap-icon://message-information"), constant("")))));
      } else {
        sIconPath = constant("");
      }
    } else {
      sIconPath = constant("");
    }
    return compileExpression(sIconPath);
  };

  /**
   * Returns an expression to set button type based on Criticality
   * Supported Criticality: Positive and Negative leading to Accept and Reject button type respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityButtonType
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField, DataPoint, DataModelObjectPath.
   * @returns An expression to deduce button type.
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityIcon = buildExpressionForCriticalityIcon;
  const buildExpressionForCriticalityButtonType = oTarget => {
    const oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    const oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    const oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty);
    let sButtonTypeExpression;
    if (oCriticalityProperty) {
      sButtonTypeExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Reject"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Accept"), constant("Default")));
    } else {
      // Any other cases are not valid, the default value of 'Default' will be returned
      sButtonTypeExpression = constant("Default");
    }
    return compileExpression(sButtonTypeExpression);
  };

  /**
   * Returns an expression to set color in MicroCharts based on Criticality
   * Supported Criticality: Positive, Negative and Critical leading to Good, Error and Critical color respectively.
   *
   * @function
   * @static
   * @name sap.fe.core.CriticalityFormatters.buildExpressionForCriticalityColorMicroChart
   * @memberof sap.fe.core.CriticalityFormatters
   * @param oTarget A DataField, DataPoint, DataModelObjectPath
   * @returns An expression to deduce colors in Microcharts
   * @private
   * @ui5-restricted
   */
  _exports.buildExpressionForCriticalityButtonType = buildExpressionForCriticalityButtonType;
  const buildExpressionForCriticalityColorMicroChart = oTarget => {
    const oAnnotationTarget = oTarget !== null && oTarget !== void 0 && oTarget.targetObject ? oTarget.targetObject : oTarget;
    const oCriticalityProperty = oAnnotationTarget === null || oAnnotationTarget === void 0 ? void 0 : oAnnotationTarget.Criticality;
    const oCriticalityExpression = getExpressionFromAnnotation(oCriticalityProperty);
    let sColorExpression;
    if (oCriticalityProperty) {
      sColorExpression = ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Negative")), equal(oCriticalityExpression, constant(1)), equal(oCriticalityExpression, constant("1"))), constant("Error"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Critical")), equal(oCriticalityExpression, constant(2)), equal(oCriticalityExpression, constant("2"))), constant("Critical"), ifElse(or(equal(oCriticalityExpression, constant("UI.CriticalityType/Positive")), equal(oCriticalityExpression, constant(3)), equal(oCriticalityExpression, constant("3"))), constant("Good"), constant("Neutral"))));
    } else {
      sColorExpression = constant("Neutral");
    }
    return compileExpression(sColorExpression);
  };
  _exports.buildExpressionForCriticalityColorMicroChart = buildExpressionForCriticalityColorMicroChart;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/CriticalityFormatters", ["sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DataModelPathHelper"],function(i,t){"use strict";var e={};var r=t.getRelativePaths;var o=i.or;var a=i.ifElse;var n=i.getExpressionFromAnnotation;var c=i.equal;var l=i.constant;var s=i.compileExpression;const y=(i,t)=>{const e=i.targetObject?i.targetObject:i;const y=e===null||e===void 0?void 0:e.Criticality;const p=t?r(t):undefined;const u=n(y,p);let v;if(y){v=a(o(c(u,l("UI.CriticalityType/Negative")),c(u,l(1)),c(u,l("1"))),l("Error"),a(o(c(u,l("UI.CriticalityType/Critical")),c(u,l(2)),c(u,l("2"))),l("Warning"),a(o(c(u,l("UI.CriticalityType/Positive")),c(u,l(3)),c(u,l("3"))),l("Success"),a(o(c(u,l("UI.CriticalityType/Information")),c(u,l(5)),c(u,l("5"))),l("Information"),l("None")))))}else{v=l("None")}return s(v)};e.buildExpressionForCriticalityColor=y;const p=(i,t)=>{const e=i!==null&&i!==void 0&&i.targetObject?i.targetObject:i;const y=e===null||e===void 0?void 0:e.Criticality;const p=t?r(t):undefined;const u=n(y,p);const v=(e===null||e===void 0?void 0:e.CriticalityRepresentation)&&(e===null||e===void 0?void 0:e.CriticalityRepresentation)==="UI.CriticalityRepresentationType/WithoutIcon";let C;if(!v){if(y){C=a(o(c(u,l("UI.CriticalityType/Negative")),c(u,l(1)),c(u,l("1"))),l("sap-icon://message-error"),a(o(c(u,l("UI.CriticalityType/Critical")),c(u,l(2)),c(u,l("2"))),l("sap-icon://message-warning"),a(o(c(u,l("UI.CriticalityType/Positive")),c(u,l(3)),c(u,l("3"))),l("sap-icon://message-success"),a(o(c(u,l("UI.CriticalityType/Information")),c(u,l(5)),c(u,l("5"))),l("sap-icon://message-information"),l("")))))}else{C=l("")}}else{C=l("")}return s(C)};e.buildExpressionForCriticalityIcon=p;const u=i=>{const t=i!==null&&i!==void 0&&i.targetObject?i.targetObject:i;const e=t===null||t===void 0?void 0:t.Criticality;const r=n(e);let y;if(e){y=a(o(c(r,l("UI.CriticalityType/Negative")),c(r,l(1)),c(r,l("1"))),l("Reject"),a(o(c(r,l("UI.CriticalityType/Positive")),c(r,l(3)),c(r,l("3"))),l("Accept"),l("Default")))}else{y=l("Default")}return s(y)};e.buildExpressionForCriticalityButtonType=u;const v=i=>{const t=i!==null&&i!==void 0&&i.targetObject?i.targetObject:i;const e=t===null||t===void 0?void 0:t.Criticality;const r=n(e);let y;if(e){y=a(o(c(r,l("UI.CriticalityType/Negative")),c(r,l(1)),c(r,l("1"))),l("Error"),a(o(c(r,l("UI.CriticalityType/Critical")),c(r,l(2)),c(r,l("2"))),l("Critical"),a(o(c(r,l("UI.CriticalityType/Positive")),c(r,l(3)),c(r,l("3"))),l("Good"),l("Neutral"))))}else{y=l("Neutral")}return s(y)};e.buildExpressionForCriticalityColorMicroChart=v;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DataFieldFormatters-dbg", ["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/UIFormatters"], function (MetaModelConverter, BindingToolkit, DataModelPathHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getConverterContext = UIFormatters.getConverterContext;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var constant = BindingToolkit.constant;
  var concat = BindingToolkit.concat;
  var compileExpression = BindingToolkit.compileExpression;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const getDataField = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    let isPath = false;
    if (typeof oContext === "object" && (oContext.hasOwnProperty("$Path") || oContext.hasOwnProperty("$AnnotationPath"))) {
      isPath = true;
    } else if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a DataField object but to a ${oContext.$kind}`);
    }
    let oConverterContext = getConverterContext(oContext, oInterface);
    if (isPath) {
      oConverterContext = oConverterContext.$target;
    }
    return oConverterContext;
  };
  _exports.getDataField = getDataField;
  const getDataFieldObjectPath = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a Property object but to a ${oContext.$kind}`);
    }
    let involvedDataModelObjects = getInvolvedDataModelObjects(oInterface.context);
    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "Path") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject.path);
    }
    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "AnnotationPath") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject);
    }
    if (sPath.endsWith("$Path") || sPath.endsWith("$AnnotationPath")) {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, oContext);
    }
    return involvedDataModelObjects;
  };
  _exports.getDataFieldObjectPath = getDataFieldObjectPath;
  const isSemanticallyConnectedFields = function (oContext, oInterface) {
    const oDataField = getDataField(oContext, oInterface);
    return oDataField.$Type === "com.sap.vocabularies.UI.v1.ConnectedFieldsType";
  };
  _exports.isSemanticallyConnectedFields = isSemanticallyConnectedFields;
  const connectedFieldsTemplateRegex = /(?:({[^}]+})[^{]*)/g;
  const connectedFieldsTemplateSubRegex = /{([^}]+)}(.*)/;
  const getLabelForConnectedFields = function (connectedFieldsPath, getTextBindingExpression) {
    let compileBindingExpression = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    const connectedFields = connectedFieldsPath.targetObject;
    // First we separate each group of `{TemplatePart} xxx`
    const templateMatches = connectedFields.Template.toString().match(connectedFieldsTemplateRegex);
    if (!templateMatches) {
      return "";
    }
    const partsToConcat = templateMatches.reduce((subPartsToConcat, match) => {
      // Then for each sub-group, we retrieve the name of the data object and the remaining text, if it exists
      const subMatch = match.match(connectedFieldsTemplateSubRegex);
      if (subMatch && subMatch.length > 1) {
        const targetValue = subMatch[1];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const targetData = connectedFields.Data[targetValue];
        if (targetData) {
          const dataFieldPath = enhanceDataModelPath(connectedFieldsPath,
          // TODO Better type for the Edm.Dictionary
          targetData.fullyQualifiedName.replace(connectedFieldsPath.targetEntityType.fullyQualifiedName, ""));
          dataFieldPath.targetObject = dataFieldPath.targetObject.Value;
          subPartsToConcat.push(getTextBindingExpression(dataFieldPath, {}));
          if (subMatch.length > 2) {
            subPartsToConcat.push(constant(subMatch[2]));
          }
        }
      }
      return subPartsToConcat;
    }, []);
    return compileBindingExpression ? compileExpression(concat(...partsToConcat)) : concat(...partsToConcat);
  };
  _exports.getLabelForConnectedFields = getLabelForConnectedFields;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DataFieldFormatters", ["sap/fe/core/converters/MetaModelConverter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/UIFormatters"],function(t,e,n,o){"use strict";var r={};var a=o.getConverterContext;var c=n.enhanceDataModelPath;var i=e.constant;var s=e.concat;var l=e.compileExpression;var p=t.getInvolvedDataModelObjects;const d=function(t,e){const n=e.context.getPath();if(!t){throw new Error(`Unresolved context path ${n}`)}let o=false;if(typeof t==="object"&&(t.hasOwnProperty("$Path")||t.hasOwnProperty("$AnnotationPath"))){o=true}else if(typeof t==="object"&&t.hasOwnProperty("$kind")&&t.$kind!=="Property"){throw new Error(`Context does not resolve to a DataField object but to a ${t.$kind}`)}let r=a(t,e);if(o){r=r.$target}return r};r.getDataField=d;const f=function(t,e){const n=e.context.getPath();if(!t){throw new Error(`Unresolved context path ${n}`)}if(typeof t==="object"&&t.hasOwnProperty("$kind")&&t.$kind!=="Property"){throw new Error(`Context does not resolve to a Property object but to a ${t.$kind}`)}let o=p(e.context);if(o.targetObject&&o.targetObject.type==="Path"){o=c(o,o.targetObject.path)}if(o.targetObject&&o.targetObject.type==="AnnotationPath"){o=c(o,o.targetObject)}if(n.endsWith("$Path")||n.endsWith("$AnnotationPath")){o=c(o,t)}return o};r.getDataFieldObjectPath=f;const h=function(t,e){const n=d(t,e);return n.$Type==="com.sap.vocabularies.UI.v1.ConnectedFieldsType"};r.isSemanticallyConnectedFields=h;const u=/(?:({[^}]+})[^{]*)/g;const g=/{([^}]+)}(.*)/;const b=function(t,e){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;const o=t.targetObject;const r=o.Template.toString().match(u);if(!r){return""}const a=r.reduce((n,r)=>{const a=r.match(g);if(a&&a.length>1){const r=a[1];const s=o.Data[r];if(s){const o=c(t,s.fullyQualifiedName.replace(t.targetEntityType.fullyQualifiedName,""));o.targetObject=o.targetObject.Value;n.push(e(o,{}));if(a.length>2){n.push(i(a[2]))}}}return n},[]);return n?l(s(...a)):s(...a)};r.getLabelForConnectedFields=b;return r},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DataModelPathHelper-dbg", ["sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards"], function (BindingToolkit, TypeGuards) {
  "use strict";

  var _exports = {};
  var isProperty = TypeGuards.isProperty;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isNavigationProperty = TypeGuards.isNavigationProperty;
  var isMultipleNavigationProperty = TypeGuards.isMultipleNavigationProperty;
  var isEntityType = TypeGuards.isEntityType;
  var isEntitySet = TypeGuards.isEntitySet;
  var isComplexType = TypeGuards.isComplexType;
  var unresolvableExpression = BindingToolkit.unresolvableExpression;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  /**
   * Function that returns the relative path to the property from the DataModelObjectPath.
   *
   * @param contextPath The DataModelObjectPath object to the property
   * @returns The path from the root entity set
   */
  const getRelativePaths = function (contextPath) {
    return getPathRelativeLocation(contextPath === null || contextPath === void 0 ? void 0 : contextPath.contextLocation, contextPath === null || contextPath === void 0 ? void 0 : contextPath.navigationProperties).map(np => np.name);
  };

  /**
   * Gets the navigation properties from a dataModelObjectPath to the targeted navigation properties.
   *
   * @param contextPath The dataModelObjectPath
   * @param visitedNavProps The targeted navigation properties
   * @returns An array of navigation properties to reach the targeted navigation properties
   */
  _exports.getRelativePaths = getRelativePaths;
  const getPathRelativeLocation = function (contextPath) {
    let visitedNavProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const cleanUpNavProp = navProps => {
      let currentIdx = 0;
      while (navProps.length > 1 && currentIdx != navProps.length - 1) {
        const currentNav = navProps[currentIdx];
        const nextNavProp = navProps[currentIdx + 1];
        if (isNavigationProperty(currentNav) && currentNav.partner === nextNavProp.name) {
          navProps.splice(0, 2);
        } else {
          currentIdx++;
        }
      }
      return navProps;
    };
    const getAdditionalNavProp = (referenceProps, otherProps, keepReference) => {
      const additionalNavProps = [];
      referenceProps.forEach((navProp, navIndex) => {
        if (otherProps[navIndex] !== navProp) {
          additionalNavProps.push(keepReference ? navProp : otherProps[navIndex]);
        }
      });
      return additionalNavProps;
    };
    if (!contextPath) {
      return visitedNavProps;
    }
    if (visitedNavProps.length >= contextPath.navigationProperties.length) {
      let remainingNavProps = getAdditionalNavProp(contextPath.navigationProperties, visitedNavProps, false);
      remainingNavProps = remainingNavProps.concat(visitedNavProps.slice(contextPath.navigationProperties.length));
      return cleanUpNavProp(remainingNavProps);
    }
    let extraNavProp = getAdditionalNavProp(visitedNavProps, contextPath.navigationProperties, true);
    extraNavProp = extraNavProp.concat(contextPath.navigationProperties.slice(visitedNavProps.length));
    cleanUpNavProp(extraNavProp);
    extraNavProp = extraNavProp.map(navProp => {
      return isNavigationProperty(navProp) ? navProp.targetType.navigationProperties.find(np => np.name === navProp.partner) : navProp;
    });
    return extraNavProp;
  };

  /**
   * Gets a new enhanced dataModelObjectPath matching with the provided property.
   *
   * @param dataModelObjectPath The initial dataModelObjectPath
   * @param propertyPath The property path or property to reach
   * @returns A new dataModelObjectPath
   */
  _exports.getPathRelativeLocation = getPathRelativeLocation;
  const enhanceDataModelPath = function (dataModelObjectPath, propertyPath) {
    let sPropertyPath = "";
    if (isPathAnnotationExpression(propertyPath)) {
      sPropertyPath = propertyPath.path;
    } else if (typeof propertyPath === "string") {
      sPropertyPath = propertyPath;
    }
    let target;
    if (isPathAnnotationExpression(propertyPath)) {
      target = propertyPath.$target;
    } else if (containsAComplexType(dataModelObjectPath)) {
      var _dataModelObjectPath$;
      target = (_dataModelObjectPath$ = dataModelObjectPath.convertedTypes.resolvePath(`${getTargetNavigationPath(dataModelObjectPath)}/${sPropertyPath}`)) === null || _dataModelObjectPath$ === void 0 ? void 0 : _dataModelObjectPath$.target;
    } else {
      if (sPropertyPath.startsWith("/")) {
        // remove the leading "/" because the path is going to be resolved from the entity type, so it should not be absolute
        sPropertyPath = sPropertyPath.substring(1);
      }
      target = dataModelObjectPath.targetEntityType.resolvePath(sPropertyPath);
    }
    const pathSplits = sPropertyPath.split("/");
    let newDataModelObjectPath = dataModelObjectPath;
    for (const pathPart of pathSplits) {
      newDataModelObjectPath = enhanceFromPath(newDataModelObjectPath, pathPart);
    }
    newDataModelObjectPath.targetObject = target;
    return newDataModelObjectPath;
  };

  /**
   * Gets a new enhanced dataModelObjectPath matching with the provided path
   * The targetObject is not updated by this internal function.
   *
   * @param dataModelObjectPath The initial dataModelObjectPath
   * @param path The object path to reach
   * @returns A new dataModelObjectPath
   */
  _exports.enhanceDataModelPath = enhanceDataModelPath;
  const enhanceFromPath = function (dataModelObjectPath, path) {
    let targetEntitySet;
    let targetEntityType;
    const navigationProperties = dataModelObjectPath.navigationProperties.concat();
    const navigationIndex = navigationProperties.length;
    const referenceEntityType = navigationIndex ? navigationProperties[navigationIndex - 1].targetType : dataModelObjectPath.targetEntityType;
    if (!referenceEntityType) {
      return dataModelObjectPath;
    } else if (isEntityType(referenceEntityType) || isComplexType(referenceEntityType)) {
      const currentEntitySet = dataModelObjectPath.targetEntitySet;
      const potentialNavProp = referenceEntityType.navigationProperties.find(navProp => navProp.name === path);
      if (potentialNavProp) {
        navigationProperties.push(potentialNavProp);
        targetEntityType = potentialNavProp.targetType;
        const navigationPathFromPreviousEntitySet = getNavigationBindingFromPreviousEntitySet(navigationProperties);
        if (navigationPathFromPreviousEntitySet && currentEntitySet !== null && currentEntitySet !== void 0 && currentEntitySet.navigationPropertyBinding.hasOwnProperty(navigationPathFromPreviousEntitySet)) {
          targetEntitySet = currentEntitySet.navigationPropertyBinding[navigationPathFromPreviousEntitySet];
        }
      } else {
        const potentialComplexType = (referenceEntityType.entityProperties || referenceEntityType.properties).find(navProp => navProp.name === path);
        if (potentialComplexType !== null && potentialComplexType !== void 0 && potentialComplexType.targetType) {
          navigationProperties.push(potentialComplexType);
        }
      }
    }
    return {
      startingEntitySet: dataModelObjectPath.startingEntitySet,
      navigationProperties: navigationProperties,
      contextLocation: dataModelObjectPath.contextLocation,
      targetEntitySet: targetEntitySet ?? dataModelObjectPath.targetEntitySet,
      targetEntityType: targetEntityType ?? dataModelObjectPath.targetEntityType,
      targetObject: dataModelObjectPath.targetObject,
      convertedTypes: dataModelObjectPath.convertedTypes
    };
  };

  /**
   * Detects if the DataModelObjectPath has navigated threw a complexType.
   *
   * @param dataModelObjectPath The dataModelObjectPath
   * @returns Is there a complexType into the DataModelObjectPath.
   */
  const containsAComplexType = function (dataModelObjectPath) {
    return dataModelObjectPath.navigationProperties.find(navigation => isComplexType(navigation === null || navigation === void 0 ? void 0 : navigation.targetType)) !== undefined;
  };

  /**
   * Gets the navigation binding from the previous entitySet listed into the navigation properties.
   *
   * @param navigationProperties The navigation properties
   * @returns A new dataModelObjectPath.
   */
  const getNavigationBindingFromPreviousEntitySet = function (navigationProperties) {
    const navigationPropertyLength = navigationProperties.length;
    if (navigationPropertyLength) {
      const lastNavigation = navigationProperties[navigationPropertyLength - 1];
      const isComplexTypeLastNavigation = isComplexType(lastNavigation.targetType);
      let navigationPath = "";
      if (navigationPropertyLength > 1 && !isComplexTypeLastNavigation) {
        for (let i = 0; i < navigationPropertyLength - 1; i++) {
          const navigationProperty = navigationProperties[i];
          if (isComplexType(navigationProperty.targetType)) {
            navigationPath += `${navigationProperty.name}/`;
          } else {
            navigationPath = "";
          }
        }
      }
      return isComplexTypeLastNavigation ? "" : `${navigationPath}${lastNavigation.name}`;
    }
    return "";
  };

  /**
   * Gets the path of the targeted entitySet.
   *
   * @param dataModelObjectPath The dataModelObjectPath
   * @returns The path.
   */
  const getTargetEntitySetPath = function (dataModelObjectPath) {
    const initialPath = `/${dataModelObjectPath.startingEntitySet.name}`;
    let targetEntitySetPath = initialPath;
    let currentEntitySet = dataModelObjectPath.startingEntitySet;
    const navigationProperties = dataModelObjectPath.navigationProperties;
    let navigationPath;
    for (let i = 0; i < navigationProperties.length; i++) {
      navigationPath = getNavigationBindingFromPreviousEntitySet(navigationProperties.slice(0, i + 1));
      if (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(navigationPath)) {
        targetEntitySetPath += `/$NavigationPropertyBinding/${navigationPath.replace("/", "%2F")}`;
        currentEntitySet = currentEntitySet.navigationPropertyBinding[navigationPath];
      }
    }
    targetEntitySetPath += "/$";
    return targetEntitySetPath;
  };

  /**
   * Gets the path of the targeted navigation.
   *
   * @param dataModelObjectPath The dataModelObjectPath
   * @param bRelative
   * @returns The path.
   */
  _exports.getTargetEntitySetPath = getTargetEntitySetPath;
  const getTargetNavigationPath = function (dataModelObjectPath) {
    let bRelative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let path = "";
    if (!dataModelObjectPath.startingEntitySet) {
      return "/";
    }
    if (!bRelative) {
      path += `/${dataModelObjectPath.startingEntitySet.name}`;
    }
    if (dataModelObjectPath.navigationProperties.length > 0) {
      path = setTrailingSlash(path);
      path += dataModelObjectPath.navigationProperties.map(navProp => navProp.name).join("/");
    }
    return path;
  };

  /**
   * Gets the path of the targeted object.
   *
   * @param dataModelObjectPath The dataModelObjectPath
   * @param bRelative
   * @returns The path.
   */
  _exports.getTargetNavigationPath = getTargetNavigationPath;
  const getTargetObjectPath = function (dataModelObjectPath) {
    var _dataModelObjectPath$2, _dataModelObjectPath$3;
    let bRelative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let path = getTargetNavigationPath(dataModelObjectPath, bRelative);
    if ((_dataModelObjectPath$2 = dataModelObjectPath.targetObject) !== null && _dataModelObjectPath$2 !== void 0 && _dataModelObjectPath$2.name && !isNavigationProperty(dataModelObjectPath.targetObject) && !isEntityType(dataModelObjectPath.targetObject) && !isEntitySet(dataModelObjectPath.targetObject) && !isComplexType((_dataModelObjectPath$3 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$3 === void 0 ? void 0 : _dataModelObjectPath$3.targetType) && dataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet) {
      path = setTrailingSlash(path);
      path += `${dataModelObjectPath.targetObject.name}`;
    } else if (dataModelObjectPath.targetObject && dataModelObjectPath.targetObject.hasOwnProperty("term")) {
      path = setTrailingSlash(path);
      path += `@${dataModelObjectPath.targetObject.term}`;
      if (dataModelObjectPath.targetObject.hasOwnProperty("qualifier") && !!dataModelObjectPath.targetObject.qualifier) {
        path += `#${dataModelObjectPath.targetObject.qualifier}`;
      }
    }
    return path;
  };
  _exports.getTargetObjectPath = getTargetObjectPath;
  const getContextRelativeTargetObjectPath = function (dataModelObjectPath) {
    var _dataModelObjectPath$4;
    let forBindingExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let forFilterConditionPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (((_dataModelObjectPath$4 = dataModelObjectPath.contextLocation) === null || _dataModelObjectPath$4 === void 0 ? void 0 : _dataModelObjectPath$4.startingEntitySet) !== dataModelObjectPath.startingEntitySet) {
      return getTargetObjectPath(dataModelObjectPath);
    }
    return _getContextRelativeTargetObjectPath(dataModelObjectPath, forBindingExpression, forFilterConditionPath);
  };
  _exports.getContextRelativeTargetObjectPath = getContextRelativeTargetObjectPath;
  const _getContextRelativeTargetObjectPath = function (dataModelObjectPath) {
    var _dataModelObjectPath$5;
    let forBindingExpression = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    let forFilterConditionPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!dataModelObjectPath.targetObject) {
      return undefined;
    }
    const navProperties = getPathRelativeLocation(dataModelObjectPath.contextLocation, dataModelObjectPath.navigationProperties);
    if (forBindingExpression) {
      if (navProperties.some(isMultipleNavigationProperty)) {
        return undefined;
      }
    }
    let path = forFilterConditionPath ? navProperties.map(navProp => {
      const isCollection = isMultipleNavigationProperty(navProp);
      return isCollection ? `${navProp.name}*` : navProp.name;
    }).join("/") : navProperties.map(navProp => navProp.name).join("/");
    if ((dataModelObjectPath.targetObject.name || dataModelObjectPath.targetObject.type === "PropertyPath" && dataModelObjectPath.targetObject.value) && !isNavigationProperty(dataModelObjectPath.targetObject) && !isEntityType(dataModelObjectPath.targetObject) && !isEntitySet(dataModelObjectPath.targetObject) && !isComplexType((_dataModelObjectPath$5 = dataModelObjectPath.targetObject) === null || _dataModelObjectPath$5 === void 0 ? void 0 : _dataModelObjectPath$5.targetType) && dataModelObjectPath.targetObject !== dataModelObjectPath.startingEntitySet) {
      path = setTrailingSlash(path);
      path += dataModelObjectPath.targetObject.type === "PropertyPath" ? `${dataModelObjectPath.targetObject.value}` : `${dataModelObjectPath.targetObject.name}`;
    } else if (dataModelObjectPath.targetObject.hasOwnProperty("term")) {
      path = setTrailingSlash(path);
      path += `@${dataModelObjectPath.targetObject.term}`;
      if (dataModelObjectPath.targetObject.hasOwnProperty("qualifier") && !!dataModelObjectPath.targetObject.qualifier) {
        path += `#${dataModelObjectPath.targetObject.qualifier}`;
      }
    }
    return path;
  };
  const isPathUpdatable = function (dataModelObjectPath, extractionParametersOnPath) {
    return checkOnPath(dataModelObjectPath, annotationObject => {
      var _annotationObject$Upd;
      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Upd = annotationObject.UpdateRestrictions) === null || _annotationObject$Upd === void 0 ? void 0 : _annotationObject$Upd.Updatable;
    }, extractionParametersOnPath);
  };
  _exports.isPathUpdatable = isPathUpdatable;
  const isPathSearchable = function (dataModelObjectPath, extractionParametersOnPath) {
    return checkOnPath(dataModelObjectPath, annotationObject => {
      var _annotationObject$Sea;
      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Sea = annotationObject.SearchRestrictions) === null || _annotationObject$Sea === void 0 ? void 0 : _annotationObject$Sea.Searchable;
    }, extractionParametersOnPath);
  };
  _exports.isPathSearchable = isPathSearchable;
  const isPathDeletable = function (dataModelObjectPath, extractionParametersOnPath) {
    return checkOnPath(dataModelObjectPath, annotationObject => {
      var _annotationObject$Del;
      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Del = annotationObject.DeleteRestrictions) === null || _annotationObject$Del === void 0 ? void 0 : _annotationObject$Del.Deletable;
    }, extractionParametersOnPath);
  };
  _exports.isPathDeletable = isPathDeletable;
  const isPathInsertable = function (dataModelObjectPath, extractionParametersOnPath) {
    return checkOnPath(dataModelObjectPath, annotationObject => {
      var _annotationObject$Ins;
      return annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Ins = annotationObject.InsertRestrictions) === null || _annotationObject$Ins === void 0 ? void 0 : _annotationObject$Ins.Insertable;
    }, extractionParametersOnPath);
  };
  _exports.isPathInsertable = isPathInsertable;
  const checkFilterExpressionRestrictions = function (dataModelObjectPath, allowedExpression) {
    return checkOnPath(dataModelObjectPath, annotationObject => {
      if (annotationObject && "FilterRestrictions" in annotationObject) {
        var _annotationObject$Fil;
        const filterExpressionRestrictions = (annotationObject === null || annotationObject === void 0 ? void 0 : (_annotationObject$Fil = annotationObject.FilterRestrictions) === null || _annotationObject$Fil === void 0 ? void 0 : _annotationObject$Fil.FilterExpressionRestrictions) || [];
        const currentObjectRestriction = filterExpressionRestrictions.find(restriction => {
          return restriction.Property.$target === dataModelObjectPath.targetObject;
        });
        if (currentObjectRestriction) {
          var _currentObjectRestric;
          return allowedExpression.indexOf(currentObjectRestriction === null || currentObjectRestriction === void 0 ? void 0 : (_currentObjectRestric = currentObjectRestriction.AllowedExpressions) === null || _currentObjectRestric === void 0 ? void 0 : _currentObjectRestric.toString()) !== -1;
        } else {
          return false;
        }
      } else {
        return false;
      }
    });
  };
  _exports.checkFilterExpressionRestrictions = checkFilterExpressionRestrictions;
  const checkOnPath = function (dataModelObjectPath, checkFunction, extractionParametersOnPath) {
    if (!dataModelObjectPath || !dataModelObjectPath.startingEntitySet) {
      return constant(true);
    }
    dataModelObjectPath = enhanceDataModelPath(dataModelObjectPath, extractionParametersOnPath === null || extractionParametersOnPath === void 0 ? void 0 : extractionParametersOnPath.propertyPath);
    let currentEntitySet = dataModelObjectPath.startingEntitySet;
    let parentEntitySet = null;
    let visitedNavigationPropsName = [];
    const allVisitedNavigationProps = [];
    let targetEntitySet = currentEntitySet;
    const targetEntityType = dataModelObjectPath.targetEntityType;
    let resetVisitedNavProps = false;
    dataModelObjectPath.navigationProperties.forEach(navigationProperty => {
      if (resetVisitedNavProps) {
        visitedNavigationPropsName = [];
      }
      visitedNavigationPropsName.push(navigationProperty.name);
      allVisitedNavigationProps.push(navigationProperty);
      if (isProperty(navigationProperty) || !navigationProperty.containsTarget) {
        // We should have a navigationPropertyBinding associated with the path so far which can consist of ([ContainmentNavProp]/)*[NavProp]
        const fullNavigationPath = visitedNavigationPropsName.join("/");
        if (currentEntitySet && currentEntitySet.navigationPropertyBinding.hasOwnProperty(fullNavigationPath)) {
          parentEntitySet = currentEntitySet;
          currentEntitySet = currentEntitySet.navigationPropertyBinding[fullNavigationPath];
          targetEntitySet = currentEntitySet;
          // If we reached a navigation property with a navigationpropertybinding, we need to reset the visited path on the next iteration (if there is one)
          resetVisitedNavProps = true;
        } else {
          // We really should not end up here but at least let's try to avoid incorrect behavior
          parentEntitySet = currentEntitySet;
          currentEntitySet = null;
          resetVisitedNavProps = true;
        }
      } else {
        parentEntitySet = currentEntitySet;
        targetEntitySet = null;
      }
    });

    // At this point we have navigated down all the nav prop and we should have
    // The target entitySet pointing to either null (in case of containment navprop a last part), or the actual target (non containment as target)
    // The parent entitySet pointing to the previous entitySet used in the path
    // VisitedNavigationPath should contain the path up to this property

    // Restrictions should then be evaluated as ParentEntitySet.NavRestrictions[NavPropertyPath] || TargetEntitySet.Restrictions
    const fullNavigationPath = visitedNavigationPropsName.join("/");
    let restrictions, visitedNavProps;
    if (parentEntitySet !== null) {
      var _parentEntitySet$anno, _parentEntitySet$anno2, _parentEntitySet$anno3;
      const _parentEntitySet = parentEntitySet;
      (_parentEntitySet$anno = _parentEntitySet.annotations) === null || _parentEntitySet$anno === void 0 ? void 0 : (_parentEntitySet$anno2 = _parentEntitySet$anno.Capabilities) === null || _parentEntitySet$anno2 === void 0 ? void 0 : (_parentEntitySet$anno3 = _parentEntitySet$anno2.NavigationRestrictions) === null || _parentEntitySet$anno3 === void 0 ? void 0 : _parentEntitySet$anno3.RestrictedProperties.forEach(restrictedNavProp => {
        var _restrictedNavProp$Na;
        if (((_restrictedNavProp$Na = restrictedNavProp.NavigationProperty) === null || _restrictedNavProp$Na === void 0 ? void 0 : _restrictedNavProp$Na.type) === "NavigationPropertyPath") {
          const restrictionDefinition = checkFunction(restrictedNavProp);
          if (fullNavigationPath === restrictedNavProp.NavigationProperty.value && restrictionDefinition !== undefined) {
            var _dataModelObjectPath;
            const _allVisitedNavigationProps = allVisitedNavigationProps.slice(0, -1);
            visitedNavProps = _allVisitedNavigationProps;
            const pathRelativeLocation = getPathRelativeLocation((_dataModelObjectPath = dataModelObjectPath) === null || _dataModelObjectPath === void 0 ? void 0 : _dataModelObjectPath.contextLocation, visitedNavProps).map(np => np.name);
            const pathVisitorFunction = extractionParametersOnPath !== null && extractionParametersOnPath !== void 0 && extractionParametersOnPath.pathVisitor ? getPathVisitorForSingleton(extractionParametersOnPath.pathVisitor, pathRelativeLocation) : undefined; // send pathVisitor function only when it is defined and only send function or defined as a parameter
            restrictions = equal(getExpressionFromAnnotation(restrictionDefinition, pathRelativeLocation, undefined, pathVisitorFunction), true);
          }
        }
      });
    }
    let targetRestrictions;
    if (!(extractionParametersOnPath !== null && extractionParametersOnPath !== void 0 && extractionParametersOnPath.ignoreTargetCollection)) {
      var _targetEntitySet, _targetEntitySet$anno;
      let restrictionDefinition = checkFunction((_targetEntitySet = targetEntitySet) === null || _targetEntitySet === void 0 ? void 0 : (_targetEntitySet$anno = _targetEntitySet.annotations) === null || _targetEntitySet$anno === void 0 ? void 0 : _targetEntitySet$anno.Capabilities);
      if (targetEntitySet === null && restrictionDefinition === undefined) {
        var _targetEntityType$ann;
        restrictionDefinition = checkFunction(targetEntityType === null || targetEntityType === void 0 ? void 0 : (_targetEntityType$ann = targetEntityType.annotations) === null || _targetEntityType$ann === void 0 ? void 0 : _targetEntityType$ann.Capabilities);
      }
      if (restrictionDefinition !== undefined) {
        const pathRelativeLocation = getPathRelativeLocation(dataModelObjectPath.contextLocation, allVisitedNavigationProps).map(np => np.name);
        const pathVisitorFunction = extractionParametersOnPath !== null && extractionParametersOnPath !== void 0 && extractionParametersOnPath.pathVisitor ? getPathVisitorForSingleton(extractionParametersOnPath.pathVisitor, pathRelativeLocation) : undefined;
        targetRestrictions = equal(getExpressionFromAnnotation(restrictionDefinition, pathRelativeLocation, undefined, pathVisitorFunction), true);
      }
    }
    return restrictions || targetRestrictions || (extractionParametersOnPath !== null && extractionParametersOnPath !== void 0 && extractionParametersOnPath.authorizeUnresolvable ? unresolvableExpression : constant(true));
  };

  /**
   * Set a trailing slash to a path if not already set.
   *
   * @param path The path
   * @returns The path with a trailing slash
   */
  _exports.checkOnPath = checkOnPath;
  const setTrailingSlash = function (path) {
    if (path.length && !path.endsWith("/")) {
      return `${path}/`;
    }
    return path;
  };

  // This helper method is used to add relative path location argument to singletonPathVisitorFunction i.e. pathVisitor
  // pathVisitor method is used later to get the correct bindings for singleton entity
  // method is invoked later in pathInModel() method to get the correct binding.
  const getPathVisitorForSingleton = function (pathVisitor, pathRelativeLocation) {
    return function (path) {
      return pathVisitor(path, pathRelativeLocation);
    };
  };
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DataModelPathHelper", ["sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards"],function(t,e){"use strict";var n={};var i=e.isProperty;var r=e.isPathAnnotationExpression;var o=e.isNavigationProperty;var a=e.isMultipleNavigationProperty;var l=e.isEntityType;var s=e.isEntitySet;var c=e.isComplexType;var u=t.unresolvableExpression;var g=t.getExpressionFromAnnotation;var v=t.equal;var d=t.constant;const f=function(t){return p(t===null||t===void 0?void 0:t.contextLocation,t===null||t===void 0?void 0:t.navigationProperties).map(t=>t.name)};n.getRelativePaths=f;const p=function(t){let e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];const n=t=>{let e=0;while(t.length>1&&e!=t.length-1){const n=t[e];const i=t[e+1];if(o(n)&&n.partner===i.name){t.splice(0,2)}else{e++}}return t};const i=(t,e,n)=>{const i=[];t.forEach((t,r)=>{if(e[r]!==t){i.push(n?t:e[r])}});return i};if(!t){return e}if(e.length>=t.navigationProperties.length){let r=i(t.navigationProperties,e,false);r=r.concat(e.slice(t.navigationProperties.length));return n(r)}let r=i(e,t.navigationProperties,true);r=r.concat(t.navigationProperties.slice(e.length));n(r);r=r.map(t=>o(t)?t.targetType.navigationProperties.find(e=>e.name===t.partner):t);return r};n.getPathRelativeLocation=p;const y=function(t,e){let n="";if(r(e)){n=e.path}else if(typeof e==="string"){n=e}let i;if(r(e)){i=e.$target}else if(P(t)){var o;i=(o=t.convertedTypes.resolvePath(`${j(t)}/${n}`))===null||o===void 0?void 0:o.target}else{if(n.startsWith("/")){n=n.substring(1)}i=t.targetEntityType.resolvePath(n)}const a=n.split("/");let l=t;for(const t of a){l=h(l,t)}l.targetObject=i;return l};n.enhanceDataModelPath=y;const h=function(t,e){let n;let i;const r=t.navigationProperties.concat();const o=r.length;const a=o?r[o-1].targetType:t.targetEntityType;if(!a){return t}else if(l(a)||c(a)){const o=t.targetEntitySet;const l=a.navigationProperties.find(t=>t.name===e);if(l){r.push(l);i=l.targetType;const t=b(r);if(t&&o!==null&&o!==void 0&&o.navigationPropertyBinding.hasOwnProperty(t)){n=o.navigationPropertyBinding[t]}}else{const t=(a.entityProperties||a.properties).find(t=>t.name===e);if(t!==null&&t!==void 0&&t.targetType){r.push(t)}}}return{startingEntitySet:t.startingEntitySet,navigationProperties:r,contextLocation:t.contextLocation,targetEntitySet:n??t.targetEntitySet,targetEntityType:i??t.targetEntityType,targetObject:t.targetObject,convertedTypes:t.convertedTypes}};const P=function(t){return t.navigationProperties.find(t=>c(t===null||t===void 0?void 0:t.targetType))!==undefined};const b=function(t){const e=t.length;if(e){const n=t[e-1];const i=c(n.targetType);let r="";if(e>1&&!i){for(let n=0;n<e-1;n++){const e=t[n];if(c(e.targetType)){r+=`${e.name}/`}else{r=""}}}return i?"":`${r}${n.name}`}return""};const O=function(t){const e=`/${t.startingEntitySet.name}`;let n=e;let i=t.startingEntitySet;const r=t.navigationProperties;let o;for(let t=0;t<r.length;t++){o=b(r.slice(0,t+1));if(i&&i.navigationPropertyBinding.hasOwnProperty(o)){n+=`/$NavigationPropertyBinding/${o.replace("/","%2F")}`;i=i.navigationPropertyBinding[o]}}n+="/$";return n};n.getTargetEntitySetPath=O;const j=function(t){let e=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let n="";if(!t.startingEntitySet){return"/"}if(!e){n+=`/${t.startingEntitySet.name}`}if(t.navigationProperties.length>0){n=L(n);n+=t.navigationProperties.map(t=>t.name).join("/")}return n};n.getTargetNavigationPath=j;const m=function(t){var e,n;let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let r=j(t,i);if((e=t.targetObject)!==null&&e!==void 0&&e.name&&!o(t.targetObject)&&!l(t.targetObject)&&!s(t.targetObject)&&!c((n=t.targetObject)===null||n===void 0?void 0:n.targetType)&&t.targetObject!==t.startingEntitySet){r=L(r);r+=`${t.targetObject.name}`}else if(t.targetObject&&t.targetObject.hasOwnProperty("term")){r=L(r);r+=`@${t.targetObject.term}`;if(t.targetObject.hasOwnProperty("qualifier")&&!!t.targetObject.qualifier){r+=`#${t.targetObject.qualifier}`}}return r};n.getTargetObjectPath=m;const E=function(t){var e;let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(((e=t.contextLocation)===null||e===void 0?void 0:e.startingEntitySet)!==t.startingEntitySet){return m(t)}return T(t,n,i)};n.getContextRelativeTargetObjectPath=E;const T=function(t){var e;let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;let i=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!t.targetObject){return undefined}const r=p(t.contextLocation,t.navigationProperties);if(n){if(r.some(a)){return undefined}}let u=i?r.map(t=>{const e=a(t);return e?`${t.name}*`:t.name}).join("/"):r.map(t=>t.name).join("/");if((t.targetObject.name||t.targetObject.type==="PropertyPath"&&t.targetObject.value)&&!o(t.targetObject)&&!l(t.targetObject)&&!s(t.targetObject)&&!c((e=t.targetObject)===null||e===void 0?void 0:e.targetType)&&t.targetObject!==t.startingEntitySet){u=L(u);u+=t.targetObject.type==="PropertyPath"?`${t.targetObject.value}`:`${t.targetObject.name}`}else if(t.targetObject.hasOwnProperty("term")){u=L(u);u+=`@${t.targetObject.term}`;if(t.targetObject.hasOwnProperty("qualifier")&&!!t.targetObject.qualifier){u+=`#${t.targetObject.qualifier}`}}return u};const S=function(t,e){return B(t,t=>{var e;return t===null||t===void 0?void 0:(e=t.UpdateRestrictions)===null||e===void 0?void 0:e.Updatable},e)};n.isPathUpdatable=S;const $=function(t,e){return B(t,t=>{var e;return t===null||t===void 0?void 0:(e=t.SearchRestrictions)===null||e===void 0?void 0:e.Searchable},e)};n.isPathSearchable=$;const x=function(t,e){return B(t,t=>{var e;return t===null||t===void 0?void 0:(e=t.DeleteRestrictions)===null||e===void 0?void 0:e.Deletable},e)};n.isPathDeletable=x;const R=function(t,e){return B(t,t=>{var e;return t===null||t===void 0?void 0:(e=t.InsertRestrictions)===null||e===void 0?void 0:e.Insertable},e)};n.isPathInsertable=R;const w=function(t,e){return B(t,n=>{if(n&&"FilterRestrictions"in n){var i;const o=(n===null||n===void 0?void 0:(i=n.FilterRestrictions)===null||i===void 0?void 0:i.FilterExpressionRestrictions)||[];const a=o.find(e=>e.Property.$target===t.targetObject);if(a){var r;return e.indexOf(a===null||a===void 0?void 0:(r=a.AllowedExpressions)===null||r===void 0?void 0:r.toString())!==-1}else{return false}}else{return false}})};n.checkFilterExpressionRestrictions=w;const B=function(t,e,n){if(!t||!t.startingEntitySet){return d(true)}t=y(t,n===null||n===void 0?void 0:n.propertyPath);let r=t.startingEntitySet;let o=null;let a=[];const l=[];let s=r;const c=t.targetEntityType;let f=false;t.navigationProperties.forEach(t=>{if(f){a=[]}a.push(t.name);l.push(t);if(i(t)||!t.containsTarget){const t=a.join("/");if(r&&r.navigationPropertyBinding.hasOwnProperty(t)){o=r;r=r.navigationPropertyBinding[t];s=r;f=true}else{o=r;r=null;f=true}}else{o=r;s=null}});const h=a.join("/");let P,b;if(o!==null){var O,j,m;const i=o;(O=i.annotations)===null||O===void 0?void 0:(j=O.Capabilities)===null||j===void 0?void 0:(m=j.NavigationRestrictions)===null||m===void 0?void 0:m.RestrictedProperties.forEach(i=>{var r;if(((r=i.NavigationProperty)===null||r===void 0?void 0:r.type)==="NavigationPropertyPath"){const r=e(i);if(h===i.NavigationProperty.value&&r!==undefined){var o;const e=l.slice(0,-1);b=e;const i=p((o=t)===null||o===void 0?void 0:o.contextLocation,b).map(t=>t.name);const a=n!==null&&n!==void 0&&n.pathVisitor?N(n.pathVisitor,i):undefined;P=v(g(r,i,undefined,a),true)}}})}let E;if(!(n!==null&&n!==void 0&&n.ignoreTargetCollection)){var T,S;let i=e((T=s)===null||T===void 0?void 0:(S=T.annotations)===null||S===void 0?void 0:S.Capabilities);if(s===null&&i===undefined){var $;i=e(c===null||c===void 0?void 0:($=c.annotations)===null||$===void 0?void 0:$.Capabilities)}if(i!==undefined){const e=p(t.contextLocation,l).map(t=>t.name);const r=n!==null&&n!==void 0&&n.pathVisitor?N(n.pathVisitor,e):undefined;E=v(g(i,e,undefined,r),true)}}return P||E||(n!==null&&n!==void 0&&n.authorizeUnresolvable?u:d(true))};n.checkOnPath=B;const L=function(t){if(t.length&&!t.endsWith("/")){return`${t}/`}return t};const N=function(t,e){return function(n){return t(n,e)}};return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DisplayModeFormatter-dbg", ["sap/fe/core/helpers/TypeGuards"], function (TypeGuards) {
  "use strict";

  var _exports = {};
  var isPropertyPathExpression = TypeGuards.isPropertyPathExpression;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  const ODATA_TYPE_MAPPING = {
    "sap.ui.model.odata.type.Boolean": "Edm.Boolean",
    "sap.ui.model.odata.type.Byte": "Edm.Byte",
    "sap.ui.model.odata.type.Date": "Edm.Date",
    "sap.ui.model.odata.type.DateTimeOffset": "Edm.DateTimeOffset",
    "sap.ui.model.odata.type.Decimal": "Edm.Decimal",
    "sap.ui.model.odata.type.Double": "Edm.Double",
    "sap.ui.model.odata.type.Guid": "Edm.Guid",
    "sap.ui.model.odata.type.Int16": "Edm.Int16",
    "sap.ui.model.odata.type.Int32": "Edm.Int32",
    "sap.ui.model.odata.type.Int64": "Edm.Int64",
    "sap.ui.model.odata.type.SByte": "Edm.SByte",
    "sap.ui.model.odata.type.Single": "Edm.Single",
    "sap.ui.model.odata.type.Stream": "Edm.Stream",
    "sap.ui.model.odata.type.TimeOfDay": "Edm.TimeOfDay",
    "sap.ui.model.odata.type.String": "Edm.String"
  };
  _exports.ODATA_TYPE_MAPPING = ODATA_TYPE_MAPPING;
  const getDisplayMode = function (oPropertyPath, oDataModelObjectPath) {
    var _oProperty$annotation, _oProperty$annotation2, _oTextAnnotation$anno, _oTextAnnotation$anno2, _oTextAnnotation$anno3, _oEntityType$annotati, _oEntityType$annotati2, _oEntityType$annotati3, _oEntityType$annotati4, _oEntityType$annotati5, _oEntityType$annotati6;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return "Value";
    }
    const oProperty = (isPathAnnotationExpression(oPropertyPath) || isPropertyPathExpression(oPropertyPath)) && oPropertyPath.$target || oPropertyPath;
    const oEntityType = oDataModelObjectPath && oDataModelObjectPath.targetEntityType;
    const oTextAnnotation = (_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Common) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Text;
    const oTextArrangementAnnotation = typeof oTextAnnotation !== "string" && (oTextAnnotation === null || oTextAnnotation === void 0 ? void 0 : (_oTextAnnotation$anno = oTextAnnotation.annotations) === null || _oTextAnnotation$anno === void 0 ? void 0 : (_oTextAnnotation$anno2 = _oTextAnnotation$anno.UI) === null || _oTextAnnotation$anno2 === void 0 ? void 0 : (_oTextAnnotation$anno3 = _oTextAnnotation$anno2.TextArrangement) === null || _oTextAnnotation$anno3 === void 0 ? void 0 : _oTextAnnotation$anno3.toString()) || (oEntityType === null || oEntityType === void 0 ? void 0 : (_oEntityType$annotati = oEntityType.annotations) === null || _oEntityType$annotati === void 0 ? void 0 : (_oEntityType$annotati2 = _oEntityType$annotati.UI) === null || _oEntityType$annotati2 === void 0 ? void 0 : (_oEntityType$annotati3 = _oEntityType$annotati2.TextArrangement) === null || _oEntityType$annotati3 === void 0 ? void 0 : _oEntityType$annotati3.toString());
    let sDisplayValue = oTextAnnotation ? "DescriptionValue" : "Value";
    if (oTextAnnotation && oTextArrangementAnnotation || oEntityType !== null && oEntityType !== void 0 && (_oEntityType$annotati4 = oEntityType.annotations) !== null && _oEntityType$annotati4 !== void 0 && (_oEntityType$annotati5 = _oEntityType$annotati4.UI) !== null && _oEntityType$annotati5 !== void 0 && (_oEntityType$annotati6 = _oEntityType$annotati5.TextArrangement) !== null && _oEntityType$annotati6 !== void 0 && _oEntityType$annotati6.toString()) {
      if (oTextArrangementAnnotation === "UI.TextArrangementType/TextOnly") {
        sDisplayValue = "Description";
      } else if (oTextArrangementAnnotation === "UI.TextArrangementType/TextLast") {
        sDisplayValue = "ValueDescription";
      } else if (oTextArrangementAnnotation === "UI.TextArrangementType/TextSeparate") {
        sDisplayValue = "Value";
      } else {
        //Default should be TextFirst if there is a Text annotation and neither TextOnly nor TextLast are set
        sDisplayValue = "DescriptionValue";
      }
    }
    return sDisplayValue;
  };
  _exports.getDisplayMode = getDisplayMode;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/DisplayModeFormatter", ["sap/fe/core/helpers/TypeGuards"],function(e){"use strict";var t={};var a=e.isPropertyPathExpression;var o=e.isPathAnnotationExpression;const i={"sap.ui.model.odata.type.Boolean":"Edm.Boolean","sap.ui.model.odata.type.Byte":"Edm.Byte","sap.ui.model.odata.type.Date":"Edm.Date","sap.ui.model.odata.type.DateTimeOffset":"Edm.DateTimeOffset","sap.ui.model.odata.type.Decimal":"Edm.Decimal","sap.ui.model.odata.type.Double":"Edm.Double","sap.ui.model.odata.type.Guid":"Edm.Guid","sap.ui.model.odata.type.Int16":"Edm.Int16","sap.ui.model.odata.type.Int32":"Edm.Int32","sap.ui.model.odata.type.Int64":"Edm.Int64","sap.ui.model.odata.type.SByte":"Edm.SByte","sap.ui.model.odata.type.Single":"Edm.Single","sap.ui.model.odata.type.Stream":"Edm.Stream","sap.ui.model.odata.type.TimeOfDay":"Edm.TimeOfDay","sap.ui.model.odata.type.String":"Edm.String"};t.ODATA_TYPE_MAPPING=i;const n=function(e,t){var i,n,d,l,s,p,u,m,r,y,v;if(!e||typeof e==="string"){return"Value"}const T=(o(e)||a(e))&&e.$target||e;const E=t&&t.targetEntityType;const f=(i=T.annotations)===null||i===void 0?void 0:(n=i.Common)===null||n===void 0?void 0:n.Text;const g=typeof f!=="string"&&(f===null||f===void 0?void 0:(d=f.annotations)===null||d===void 0?void 0:(l=d.UI)===null||l===void 0?void 0:(s=l.TextArrangement)===null||s===void 0?void 0:s.toString())||(E===null||E===void 0?void 0:(p=E.annotations)===null||p===void 0?void 0:(u=p.UI)===null||u===void 0?void 0:(m=u.TextArrangement)===null||m===void 0?void 0:m.toString());let c=f?"DescriptionValue":"Value";if(f&&g||E!==null&&E!==void 0&&(r=E.annotations)!==null&&r!==void 0&&(y=r.UI)!==null&&y!==void 0&&(v=y.TextArrangement)!==null&&v!==void 0&&v.toString()){if(g==="UI.TextArrangementType/TextOnly"){c="Description"}else if(g==="UI.TextArrangementType/TextLast"){c="ValueDescription"}else if(g==="UI.TextArrangementType/TextSeparate"){c="Value"}else{c="DescriptionValue"}}return c};t.getDisplayMode=n;return t},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/EntitySetHelper-dbg", ["sap/fe/core/helpers/TypeGuards"], function (TypeGuards) {
  "use strict";

  var _exports = {};
  var isEntitySet = TypeGuards.isEntitySet;
  /**
   * Reads all SortRestrictions of the main entity and the (first level) navigation restrictions.
   * This does not work for more than one level of navigation.
   *
   * @param entitySet Entity set to be analyzed
   * @returns Array containing the property names of all non-sortable properties
   */
  const getNonSortablePropertiesRestrictions = function (entitySet) {
    var _entitySet$annotation6, _entitySet$annotation7, _entitySet$annotation8;
    let nonSortableProperties = [];
    // Check annotations for main entity
    if (isEntitySet(entitySet)) {
      var _entitySet$annotation, _entitySet$annotation2;
      if (((_entitySet$annotation = entitySet.annotations.Capabilities) === null || _entitySet$annotation === void 0 ? void 0 : (_entitySet$annotation2 = _entitySet$annotation.SortRestrictions) === null || _entitySet$annotation2 === void 0 ? void 0 : _entitySet$annotation2.Sortable) === false) {
        // add all properties of the entity to the nonSortableProperties
        nonSortableProperties.push(...entitySet.entityType.entityProperties.map(property => property.name));
      } else {
        var _entitySet$annotation3, _entitySet$annotation4, _entitySet$annotation5;
        nonSortableProperties = ((_entitySet$annotation3 = entitySet.annotations.Capabilities) === null || _entitySet$annotation3 === void 0 ? void 0 : (_entitySet$annotation4 = _entitySet$annotation3.SortRestrictions) === null || _entitySet$annotation4 === void 0 ? void 0 : (_entitySet$annotation5 = _entitySet$annotation4.NonSortableProperties) === null || _entitySet$annotation5 === void 0 ? void 0 : _entitySet$annotation5.map(property => property.value)) || [];
      }
    } else {
      return [];
    }
    // Check for every navigationRestriction if it has sortRestrictions
    (_entitySet$annotation6 = entitySet.annotations.Capabilities) === null || _entitySet$annotation6 === void 0 ? void 0 : (_entitySet$annotation7 = _entitySet$annotation6.NavigationRestrictions) === null || _entitySet$annotation7 === void 0 ? void 0 : (_entitySet$annotation8 = _entitySet$annotation7.RestrictedProperties) === null || _entitySet$annotation8 === void 0 ? void 0 : _entitySet$annotation8.forEach(navigationRestriction => {
      var _navigationRestrictio;
      if ((navigationRestriction === null || navigationRestriction === void 0 ? void 0 : (_navigationRestrictio = navigationRestriction.SortRestrictions) === null || _navigationRestrictio === void 0 ? void 0 : _navigationRestrictio.Sortable) === false) {
        var _navigationRestrictio2;
        // find correct navigation property
        const navigationProperty = entitySet.entityType.navigationProperties.by_name(navigationRestriction === null || navigationRestriction === void 0 ? void 0 : (_navigationRestrictio2 = navigationRestriction.NavigationProperty) === null || _navigationRestrictio2 === void 0 ? void 0 : _navigationRestrictio2.value);
        if (navigationProperty) {
          // add all properties of the navigation property to the nonSortableProperties
          nonSortableProperties.push(...navigationProperty.targetType.entityProperties.map(property => `${navigationProperty.name}/${property.name}`));
        }
      } else {
        var _navigationRestrictio3, _navigationRestrictio4;
        // leave the property path unchanged (it is relative to the annotation target!)
        const nonSortableNavigationProperties = navigationRestriction === null || navigationRestriction === void 0 ? void 0 : (_navigationRestrictio3 = navigationRestriction.SortRestrictions) === null || _navigationRestrictio3 === void 0 ? void 0 : (_navigationRestrictio4 = _navigationRestrictio3.NonSortableProperties) === null || _navigationRestrictio4 === void 0 ? void 0 : _navigationRestrictio4.map(property => property.value);
        if (nonSortableNavigationProperties) {
          nonSortableProperties.push(...nonSortableNavigationProperties);
        }
      }
    });
    return nonSortableProperties;
  };
  _exports.getNonSortablePropertiesRestrictions = getNonSortablePropertiesRestrictions;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/EntitySetHelper", ["sap/fe/core/helpers/TypeGuards"],function(i){"use strict";var o={};var e=i.isEntitySet;const t=function(i){var o,t,n;let r=[];if(e(i)){var a,l;if(((a=i.annotations.Capabilities)===null||a===void 0?void 0:(l=a.SortRestrictions)===null||l===void 0?void 0:l.Sortable)===false){r.push(...i.entityType.entityProperties.map(i=>i.name))}else{var s,v,d;r=((s=i.annotations.Capabilities)===null||s===void 0?void 0:(v=s.SortRestrictions)===null||v===void 0?void 0:(d=v.NonSortableProperties)===null||d===void 0?void 0:d.map(i=>i.value))||[]}}else{return[]}(o=i.annotations.Capabilities)===null||o===void 0?void 0:(t=o.NavigationRestrictions)===null||t===void 0?void 0:(n=t.RestrictedProperties)===null||n===void 0?void 0:n.forEach(o=>{var e;if((o===null||o===void 0?void 0:(e=o.SortRestrictions)===null||e===void 0?void 0:e.Sortable)===false){var t;const e=i.entityType.navigationProperties.by_name(o===null||o===void 0?void 0:(t=o.NavigationProperty)===null||t===void 0?void 0:t.value);if(e){r.push(...e.targetType.entityProperties.map(i=>`${e.name}/${i.name}`))}}else{var n,a;const i=o===null||o===void 0?void 0:(n=o.SortRestrictions)===null||n===void 0?void 0:(a=n.NonSortableProperties)===null||a===void 0?void 0:a.map(i=>i.value);if(i){r.push(...i)}}});return r};o.getNonSortablePropertiesRestrictions=t;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/EntityTypeHelper-dbg", ["sap/base/Log", "sap/fe/core/helpers/BindingToolkit"], function (Log, BindingToolkit) {
  "use strict";

  var _exports = {};
  var pathInModel = BindingToolkit.pathInModel;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var concat = BindingToolkit.concat;
  // Collection of helper functions to retrieve information from an EntityType.

  // This is still a work in progress

  /**
   * Retrieve the binding expression required to display the title of an entity.
   *
   * This is usually defined as:
   *  - the HeaderInfo.Title value
   *  - the SemanticKeys properties
   *  - the keys properties.
   *
   * @param entityType The target entityType
   * @returns The title binding expression
   */
  const getTitleExpression = entityType => {
    var _entityType$annotatio, _entityType$annotatio2, _entityType$annotatio3, _entityType$annotatio4, _entityType$annotatio5, _entityType$annotatio6, _entityType$annotatio7, _entityType$annotatio8;
    // HeaderInfo can be a [DataField] and any of its children, or a [DataFieldForAnnotation] targeting [ConnectedFields](#ConnectedFields).
    const headerInfoTitle = (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : (_entityType$annotatio3 = _entityType$annotatio2.HeaderInfo) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.Title;
    if (headerInfoTitle) {
      switch (headerInfoTitle.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField":
          return getExpressionFromAnnotation(headerInfoTitle.Value);
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          Log.error("DataFieldForAnnotation with connected fields not supported for HeaderInfo.Title");
          return getExpressionFromAnnotation((_entityType$annotatio4 = entityType.annotations) === null || _entityType$annotatio4 === void 0 ? void 0 : (_entityType$annotatio5 = _entityType$annotatio4.UI) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.HeaderInfo) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.TypeName);
      }
    }
    const semanticKeys = (_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.Common) === null || _entityType$annotatio8 === void 0 ? void 0 : _entityType$annotatio8.SemanticKey;
    if (semanticKeys) {
      return concat(...semanticKeys.map(key => pathInModel(key.value)));
    }
  };
  _exports.getTitleExpression = getTitleExpression;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/EntityTypeHelper", ["sap/base/Log","sap/fe/core/helpers/BindingToolkit"],function(o,n){"use strict";var e={};var i=n.pathInModel;var a=n.getExpressionFromAnnotation;var t=n.concat;const l=n=>{var e,l,r,d,s,v,u,c;const p=(e=n.annotations)===null||e===void 0?void 0:(l=e.UI)===null||l===void 0?void 0:(r=l.HeaderInfo)===null||r===void 0?void 0:r.Title;if(p){switch(p.$Type){case"com.sap.vocabularies.UI.v1.DataField":return a(p.Value);case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":o.error("DataFieldForAnnotation with connected fields not supported for HeaderInfo.Title");return a((d=n.annotations)===null||d===void 0?void 0:(s=d.UI)===null||s===void 0?void 0:(v=s.HeaderInfo)===null||v===void 0?void 0:v.TypeName)}}const f=(u=n.annotations)===null||u===void 0?void 0:(c=u.Common)===null||c===void 0?void 0:c.SemanticKey;if(f){return t(...f.map(o=>i(o.value)))}};e.getTitleExpression=l;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FieldControlHelper-dbg", ["sap/fe/core/helpers/BindingToolkit"], function (BindingToolkit) {
  "use strict";

  var _exports = {};
  var or = BindingToolkit.or;
  var isConstant = BindingToolkit.isConstant;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var equal = BindingToolkit.equal;
  var constant = BindingToolkit.constant;
  /**
   * Create the binding expression to check if the property is read only or not.
   *
   * @param oTarget The target property or DataField
   * @param relativePath Array of navigation properties pointing to the location of field control property
   * @returns The binding expression resolving to a Boolean being true if it's read only
   */
  const isReadOnlyExpression = function (oTarget, relativePath) {
    var _oTarget$annotations, _oTarget$annotations$, _oTarget$annotations$2;
    const oFieldControlValue = oTarget === null || oTarget === void 0 ? void 0 : (_oTarget$annotations = oTarget.annotations) === null || _oTarget$annotations === void 0 ? void 0 : (_oTarget$annotations$ = _oTarget$annotations.Common) === null || _oTarget$annotations$ === void 0 ? void 0 : (_oTarget$annotations$2 = _oTarget$annotations$.FieldControl) === null || _oTarget$annotations$2 === void 0 ? void 0 : _oTarget$annotations$2.valueOf();
    if (typeof oFieldControlValue === "object" && !!oFieldControlValue) {
      return or(equal(getExpressionFromAnnotation(oFieldControlValue, relativePath), 1), equal(getExpressionFromAnnotation(oFieldControlValue, relativePath), "1"));
    }
    return constant(oFieldControlValue === "Common.FieldControlType/ReadOnly");
  };

  /**
   * Create the binding expression to check if the property is disabled or not.
   *
   * @param oTarget The target property or DataField
   * @param relativePath Array of navigation properties pointing to the location of field control property
   * @returns The binding expression resolving to a Boolean being true if it's disabled
   */
  _exports.isReadOnlyExpression = isReadOnlyExpression;
  const isDisabledExpression = function (oTarget, relativePath) {
    var _oTarget$annotations2, _oTarget$annotations3, _oTarget$annotations4;
    const oFieldControlValue = oTarget === null || oTarget === void 0 ? void 0 : (_oTarget$annotations2 = oTarget.annotations) === null || _oTarget$annotations2 === void 0 ? void 0 : (_oTarget$annotations3 = _oTarget$annotations2.Common) === null || _oTarget$annotations3 === void 0 ? void 0 : (_oTarget$annotations4 = _oTarget$annotations3.FieldControl) === null || _oTarget$annotations4 === void 0 ? void 0 : _oTarget$annotations4.valueOf();
    if (typeof oFieldControlValue === "object" && !!oFieldControlValue) {
      return or(equal(getExpressionFromAnnotation(oFieldControlValue, relativePath), 0), equal(getExpressionFromAnnotation(oFieldControlValue, relativePath), "0"));
    }
    return constant(oFieldControlValue === "Common.FieldControlType/Inapplicable");
  };

  /**
   * Create the binding expression to check if the property is editable or not.
   *
   * @param oTarget The target property or DataField
   * @param relativePath Array of navigation properties pointing to the location of field control property
   * @returns The binding expression resolving to a Boolean being true if it's not editable
   */
  _exports.isDisabledExpression = isDisabledExpression;
  const isNonEditableExpression = function (oTarget, relativePath) {
    return or(isReadOnlyExpression(oTarget, relativePath), isDisabledExpression(oTarget, relativePath));
  };

  /**
   * Create the binding expression to check if the property is read only or not.
   *
   * @param oTarget The target property or DataField
   * @param relativePath Array of navigation properties pointing to the location of field control property
   * @returns The binding expression resolving to a Boolean being true if it's read only
   */
  _exports.isNonEditableExpression = isNonEditableExpression;
  const isRequiredExpression = function (oTarget, relativePath) {
    var _oTarget$annotations5, _oTarget$annotations6, _oTarget$annotations7;
    const oFieldControlValue = (_oTarget$annotations5 = oTarget.annotations) === null || _oTarget$annotations5 === void 0 ? void 0 : (_oTarget$annotations6 = _oTarget$annotations5.Common) === null || _oTarget$annotations6 === void 0 ? void 0 : (_oTarget$annotations7 = _oTarget$annotations6.FieldControl) === null || _oTarget$annotations7 === void 0 ? void 0 : _oTarget$annotations7.valueOf();
    const fieldControlValue = getExpressionFromAnnotation(oFieldControlValue, relativePath);
    return or(isConstant(fieldControlValue) && equal(fieldControlValue, "Common.FieldControlType/Mandatory"), equal(fieldControlValue, 7), equal(fieldControlValue, "7"));
  };
  _exports.isRequiredExpression = isRequiredExpression;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FieldControlHelper", ["sap/fe/core/helpers/BindingToolkit"],function(o){"use strict";var n={};var i=o.or;var t=o.isConstant;var l=o.getExpressionFromAnnotation;var e=o.equal;var r=o.constant;const d=function(o,n){var t,d,s;const v=o===null||o===void 0?void 0:(t=o.annotations)===null||t===void 0?void 0:(d=t.Common)===null||d===void 0?void 0:(s=d.FieldControl)===null||s===void 0?void 0:s.valueOf();if(typeof v==="object"&&!!v){return i(e(l(v,n),1),e(l(v,n),"1"))}return r(v==="Common.FieldControlType/ReadOnly")};n.isReadOnlyExpression=d;const s=function(o,n){var t,d,s;const v=o===null||o===void 0?void 0:(t=o.annotations)===null||t===void 0?void 0:(d=t.Common)===null||d===void 0?void 0:(s=d.FieldControl)===null||s===void 0?void 0:s.valueOf();if(typeof v==="object"&&!!v){return i(e(l(v,n),0),e(l(v,n),"0"))}return r(v==="Common.FieldControlType/Inapplicable")};n.isDisabledExpression=s;const v=function(o,n){return i(d(o,n),s(o,n))};n.isNonEditableExpression=v;const a=function(o,n){var r,d,s;const v=(r=o.annotations)===null||r===void 0?void 0:(d=r.Common)===null||d===void 0?void 0:(s=d.FieldControl)===null||s===void 0?void 0:s.valueOf();const a=l(v,n);return i(t(a)&&e(a,"Common.FieldControlType/Mandatory"),e(a,7),e(a,"7"))};n.isRequiredExpression=a;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FilterHelper-dbg", ["sap/base/Log", "sap/fe/core/type/EDM", "sap/ui/mdc/condition/Condition", "sap/ui/mdc/enum/ConditionValidated"], function (Log, EDM, Condition, ConditionValidated) {
  "use strict";

  var _exports = {};
  var isTypeFilterable = EDM.isTypeFilterable;
  const oExcludeMap = {
    Contains: "NotContains",
    StartsWith: "NotStartsWith",
    EndsWith: "NotEndsWith",
    Empty: "NotEmpty",
    NotEmpty: "Empty",
    LE: "NOTLE",
    GE: "NOTGE",
    LT: "NOTLT",
    GT: "NOTGT",
    BT: "NOTBT",
    NE: "EQ",
    EQ: "NE"
  };
  function _getDateTimeOffsetCompliantValue(sValue) {
    let oValue;
    if (sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})\+(\d{1,4})/)) {
      oValue = sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})\+(\d{1,4})/)[0];
    } else if (sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/)) {
      oValue = `${sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/)[0]}+0000`;
    } else if (sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)) {
      oValue = `${sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)[0]}T00:00:00+0000`;
    } else if (sValue.indexOf("Z") === sValue.length - 1) {
      oValue = `${sValue.split("Z")[0]}+0100`;
    } else {
      oValue = undefined;
    }
    return oValue;
  }
  _exports._getDateTimeOffsetCompliantValue = _getDateTimeOffsetCompliantValue;
  function _getDateCompliantValue(sValue) {
    return sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/) ? sValue.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)[0] : sValue.match(/^(\d{8})/) && sValue.match(/^(\d{8})/)[0];
  }

  /**
   * Method to get the compliant value type based on the data type.
   *
   * @param  sValue Raw value
   * @param  sType The property type
   * @returns Value to be propagated to the condition.
   */
  _exports._getDateCompliantValue = _getDateCompliantValue;
  function getTypeCompliantValue(sValue, sType) {
    let oValue;
    if (!isTypeFilterable(sType)) {
      return undefined;
    }
    oValue = sValue;
    switch (sType) {
      case "Edm.Boolean":
        if (typeof sValue === "boolean") {
          oValue = sValue;
        } else {
          oValue = sValue === "true" || (sValue === "false" ? false : undefined);
        }
        break;
      case "Edm.Double":
      case "Edm.Single":
        oValue = isNaN(sValue) ? undefined : parseFloat(sValue);
        break;
      case "Edm.Byte":
      case "Edm.Int16":
      case "Edm.Int32":
      case "Edm.SByte":
        oValue = isNaN(sValue) ? undefined : parseInt(sValue, 10);
        break;
      case "Edm.Date":
        oValue = _getDateCompliantValue(sValue);
        break;
      case "Edm.DateTimeOffset":
        oValue = _getDateTimeOffsetCompliantValue(sValue);
        break;
      case "Edm.TimeOfDay":
        oValue = sValue.match(/(\d{1,2}):(\d{1,2}):(\d{1,2})/) ? sValue.match(/(\d{1,2}):(\d{1,2}):(\d{1,2})/)[0] : undefined;
        break;
      default:
    }
    return oValue === null ? undefined : oValue;
  }

  /**
   * Method to create a condition.
   *
   * @param  sOption Operator to be used.
   * @param  oV1 Lower value
   * @param  oV2 Higher value
   * @param sSign
   * @returns Condition to be created
   */
  _exports.getTypeCompliantValue = getTypeCompliantValue;
  function resolveConditionValues(sOption, oV1, oV2, sSign) {
    let oValue = oV1,
      oValue2,
      sInternalOperation;
    const oCondition = {};
    oCondition.values = [];
    oCondition.isEmpty = null;
    if (oV1 === undefined || oV1 === null) {
      return undefined;
    }
    switch (sOption) {
      case "CP":
        sInternalOperation = "Contains";
        if (oValue) {
          const nIndexOf = oValue.indexOf("*");
          const nLastIndex = oValue.lastIndexOf("*");

          // only when there are '*' at all
          if (nIndexOf > -1) {
            if (nIndexOf === 0 && nLastIndex !== oValue.length - 1) {
              sInternalOperation = "EndsWith";
              oValue = oValue.substring(1, oValue.length);
            } else if (nIndexOf !== 0 && nLastIndex === oValue.length - 1) {
              sInternalOperation = "StartsWith";
              oValue = oValue.substring(0, oValue.length - 1);
            } else {
              oValue = oValue.substring(1, oValue.length - 1);
            }
          } else {
            Log.warning("Contains Option cannot be used without '*'.");
            return undefined;
          }
        }
        break;
      case "EQ":
        sInternalOperation = oV1 === "" ? "Empty" : sOption;
        break;
      case "NE":
        sInternalOperation = oV1 === "" ? "NotEmpty" : sOption;
        break;
      case "BT":
        if (oV2 === undefined || oV2 === null) {
          return;
        }
        oValue2 = oV2;
        sInternalOperation = sOption;
        break;
      case "LE":
      case "GE":
      case "GT":
      case "LT":
        sInternalOperation = sOption;
        break;
      default:
        Log.warning(`Selection Option is not supported : '${sOption}'`);
        return undefined;
    }
    if (sSign === "E") {
      sInternalOperation = oExcludeMap[sInternalOperation];
    }
    oCondition.operator = sInternalOperation;
    if (sInternalOperation !== "Empty") {
      oCondition.values.push(oValue);
      if (oValue2) {
        oCondition.values.push(oValue2);
      }
    }
    return oCondition;
  }

  /* Method to get the Range property from the Selection Option */
  _exports.resolveConditionValues = resolveConditionValues;
  function getRangeProperty(sProperty) {
    return sProperty.indexOf("/") > 0 ? sProperty.split("/")[1] : sProperty;
  }
  _exports.getRangeProperty = getRangeProperty;
  function _buildConditionsFromSelectionRanges(Ranges, oProperty, sPropertyName, getCustomConditions) {
    const aConditions = [];
    Ranges === null || Ranges === void 0 ? void 0 : Ranges.forEach(Range => {
      const oCondition = getCustomConditions ? getCustomConditions(Range, oProperty, sPropertyName) : getConditions(Range, oProperty);
      if (oCondition) {
        aConditions.push(oCondition);
      }
    });
    return aConditions;
  }
  function _getProperty(propertyName, metaModel, entitySetPath) {
    const lastSlashIndex = propertyName.lastIndexOf("/");
    const navigationPath = lastSlashIndex > -1 ? propertyName.substring(0, propertyName.lastIndexOf("/") + 1) : "";
    const collection = metaModel.getObject(`${entitySetPath}/${navigationPath}`);
    return collection === null || collection === void 0 ? void 0 : collection[propertyName.replace(navigationPath, "")];
  }
  function _buildFiltersConditionsFromSelectOption(selectOption, metaModel, entitySetPath, getCustomConditions) {
    const propertyName = selectOption.PropertyName,
      filterConditions = {},
      propertyPath = propertyName.value || propertyName.$PropertyPath,
      Ranges = selectOption.Ranges;
    const targetProperty = _getProperty(propertyPath, metaModel, entitySetPath);
    if (targetProperty) {
      const conditions = _buildConditionsFromSelectionRanges(Ranges, targetProperty, propertyPath, getCustomConditions);
      if (conditions.length) {
        filterConditions[propertyPath] = (filterConditions[propertyPath] || []).concat(conditions);
      }
    }
    return filterConditions;
  }
  function getFiltersConditionsFromSelectionVariant(sEntitySetPath, oMetaModel, selectionVariant, getCustomConditions) {
    let oFilterConditions = {};
    if (!selectionVariant) {
      return oFilterConditions;
    }
    const aSelectOptions = selectionVariant.SelectOptions,
      aParameters = selectionVariant.Parameters;
    aSelectOptions === null || aSelectOptions === void 0 ? void 0 : aSelectOptions.forEach(selectOption => {
      const propertyName = selectOption.PropertyName,
        sPropertyName = propertyName.value || propertyName.$PropertyPath;
      if (Object.keys(oFilterConditions).includes(sPropertyName)) {
        oFilterConditions[sPropertyName] = oFilterConditions[sPropertyName].concat(_buildFiltersConditionsFromSelectOption(selectOption, oMetaModel, sEntitySetPath, getCustomConditions)[sPropertyName]);
      } else {
        oFilterConditions = {
          ...oFilterConditions,
          ..._buildFiltersConditionsFromSelectOption(selectOption, oMetaModel, sEntitySetPath, getCustomConditions)
        };
      }
    });
    aParameters === null || aParameters === void 0 ? void 0 : aParameters.forEach(parameter => {
      const sPropertyPath = parameter.PropertyName.value || parameter.PropertyName.$PropertyPath;
      const oCondition = getCustomConditions ? {
        operator: "EQ",
        value1: parameter.PropertyValue,
        value2: null,
        path: sPropertyPath,
        isParameter: true
      } : {
        operator: "EQ",
        values: [parameter.PropertyValue],
        isEmpty: null,
        validated: ConditionValidated.Validated,
        isParameter: true
      };
      oFilterConditions[sPropertyPath] = [oCondition];
    });
    return oFilterConditions;
  }
  _exports.getFiltersConditionsFromSelectionVariant = getFiltersConditionsFromSelectionVariant;
  function getConditions(Range, oValidProperty) {
    let oCondition;
    const sign = Range.Sign ? getRangeProperty(Range.Sign) : undefined;
    const sOption = Range.Option ? getRangeProperty(Range.Option) : undefined;
    const oValue1 = getTypeCompliantValue(Range.Low, oValidProperty.$Type || oValidProperty.type);
    const oValue2 = Range.High ? getTypeCompliantValue(Range.High, oValidProperty.$Type || oValidProperty.type) : undefined;
    const oConditionValues = resolveConditionValues(sOption, oValue1, oValue2, sign);
    if (oConditionValues) {
      oCondition = Condition.createCondition(oConditionValues.operator, oConditionValues.values, null, null, ConditionValidated.Validated);
    }
    return oCondition;
  }
  _exports.getConditions = getConditions;
  const getDefaultValueFilters = function (oContext, properties) {
    const filterConditions = {};
    const entitySetPath = oContext.getInterface(1).getPath(),
      oMetaModel = oContext.getInterface(1).getModel();
    if (properties) {
      for (const key in properties) {
        const defaultFilterValue = oMetaModel.getObject(`${entitySetPath}/${key}@com.sap.vocabularies.Common.v1.FilterDefaultValue`);
        if (defaultFilterValue !== undefined) {
          const PropertyName = key;
          filterConditions[PropertyName] = [Condition.createCondition("EQ", [defaultFilterValue], null, null, ConditionValidated.Validated)];
        }
      }
    }
    return filterConditions;
  };
  const getDefaultSemanticDateFilters = function (oContext, properties, defaultSemanticDates) {
    const filterConditions = {};
    const oInterface = oContext.getInterface(1);
    const oMetaModel = oInterface.getModel();
    const sEntityTypePath = oInterface.getPath();
    for (const key in defaultSemanticDates) {
      if (defaultSemanticDates[key][0]) {
        const aPropertyPathParts = key.split("::");
        let sPath = "";
        const iPropertyPathLength = aPropertyPathParts.length;
        const sNavigationPath = aPropertyPathParts.slice(0, aPropertyPathParts.length - 1).join("/");
        const sProperty = aPropertyPathParts[iPropertyPathLength - 1];
        if (sNavigationPath) {
          //Create Proper Condition Path e.g. _Item*/Property or _Item/Property
          const vProperty = oMetaModel.getObject(sEntityTypePath + "/" + sNavigationPath);
          if (vProperty.$kind === "NavigationProperty" && vProperty.$isCollection) {
            sPath += `${sNavigationPath}*/`;
          } else if (vProperty.$kind === "NavigationProperty") {
            sPath += `${sNavigationPath}/`;
          }
        }
        sPath += sProperty;
        const operatorParamsArr = "values" in defaultSemanticDates[key][0] ? defaultSemanticDates[key][0].values : [];
        filterConditions[sPath] = [Condition.createCondition(defaultSemanticDates[key][0].operator, operatorParamsArr, null, null, null)];
      }
    }
    return filterConditions;
  };
  function getEditStatusFilter() {
    const ofilterConditions = {};
    ofilterConditions["$editState"] = [Condition.createCondition("DRAFT_EDIT_STATE", ["ALL"], null, null, ConditionValidated.Validated)];
    return ofilterConditions;
  }
  _exports.getEditStatusFilter = getEditStatusFilter;
  function getFilterConditions(oContext, filterConditions) {
    var _filterConditions, _filterConditions2;
    let editStateFilter;
    const entitySetPath = oContext.getInterface(1).getPath(),
      oMetaModel = oContext.getInterface(1).getModel(),
      entityTypeAnnotations = oMetaModel.getObject(`${entitySetPath}@`),
      entityTypeProperties = oMetaModel.getObject(`${entitySetPath}/`);
    if (entityTypeAnnotations && (entityTypeAnnotations["@com.sap.vocabularies.Common.v1.DraftRoot"] || entityTypeAnnotations["@com.sap.vocabularies.Common.v1.DraftNode"])) {
      editStateFilter = getEditStatusFilter();
    }
    const selectionVariant = (_filterConditions = filterConditions) === null || _filterConditions === void 0 ? void 0 : _filterConditions.selectionVariant;
    const defaultSemanticDates = ((_filterConditions2 = filterConditions) === null || _filterConditions2 === void 0 ? void 0 : _filterConditions2.defaultSemanticDates) || {};
    const defaultFilters = getDefaultValueFilters(oContext, entityTypeProperties);
    const defaultSemanticDateFilters = getDefaultSemanticDateFilters(oContext, entityTypeProperties, defaultSemanticDates);
    if (selectionVariant) {
      filterConditions = getFiltersConditionsFromSelectionVariant(entitySetPath, oMetaModel, selectionVariant);
    } else if (defaultFilters) {
      filterConditions = defaultFilters;
    }
    if (defaultSemanticDateFilters) {
      // only for semantic date:
      // 1. value from manifest get merged with SV
      // 2. manifest value is given preference when there is same semantic date property in SV and manifest
      filterConditions = {
        ...filterConditions,
        ...defaultSemanticDateFilters
      };
    }
    if (editStateFilter) {
      filterConditions = {
        ...filterConditions,
        ...editStateFilter
      };
    }
    return Object.keys(filterConditions).length > 0 ? JSON.stringify(filterConditions).replace(/([{}])/g, "\\$1") : undefined;
  }

  /**
   * Checks whether the argument is a {@link SelectionVariantTypeTypes}.
   *
   * @param serviceObject The object to be checked.
   * @returns Whether the argument is a {@link SelectionVariantTypeTypes}.
   */
  _exports.getFilterConditions = getFilterConditions;
  function isSelectionVariant(serviceObject) {
    return (serviceObject === null || serviceObject === void 0 ? void 0 : serviceObject.$Type) === "com.sap.vocabularies.UI.v1.SelectionVariantType";
  }
  _exports.isSelectionVariant = isSelectionVariant;
  getFilterConditions.requiresIContext = true;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FilterHelper", ["sap/base/Log","sap/fe/core/type/EDM","sap/ui/mdc/condition/Condition","sap/ui/mdc/enum/ConditionValidated"],function(e,t,n,i){"use strict";var o={};var a=t.isTypeFilterable;const s={Contains:"NotContains",StartsWith:"NotStartsWith",EndsWith:"NotEndsWith",Empty:"NotEmpty",NotEmpty:"Empty",LE:"NOTLE",GE:"NOTGE",LT:"NOTLT",GT:"NOTGT",BT:"NOTBT",NE:"EQ",EQ:"NE"};function d(e){let t;if(e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})\+(\d{1,4})/)){t=e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})\+(\d{1,4})/)[0]}else if(e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/)){t=`${e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})T(\d{1,2}):(\d{1,2}):(\d{1,2})/)[0]}+0000`}else if(e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)){t=`${e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)[0]}T00:00:00+0000`}else if(e.indexOf("Z")===e.length-1){t=`${e.split("Z")[0]}+0100`}else{t=undefined}return t}o._getDateTimeOffsetCompliantValue=d;function r(e){return e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)?e.match(/^(\d{4})-(\d{1,2})-(\d{1,2})/)[0]:e.match(/^(\d{8})/)&&e.match(/^(\d{8})/)[0]}o._getDateCompliantValue=r;function l(e,t){let n;if(!a(t)){return undefined}n=e;switch(t){case"Edm.Boolean":if(typeof e==="boolean"){n=e}else{n=e==="true"||(e==="false"?false:undefined)}break;case"Edm.Double":case"Edm.Single":n=isNaN(e)?undefined:parseFloat(e);break;case"Edm.Byte":case"Edm.Int16":case"Edm.Int32":case"Edm.SByte":n=isNaN(e)?undefined:parseInt(e,10);break;case"Edm.Date":n=r(e);break;case"Edm.DateTimeOffset":n=d(e);break;case"Edm.TimeOfDay":n=e.match(/(\d{1,2}):(\d{1,2}):(\d{1,2})/)?e.match(/(\d{1,2}):(\d{1,2}):(\d{1,2})/)[0]:undefined;break;default:}return n===null?undefined:n}o.getTypeCompliantValue=l;function c(t,n,i,o){let a=n,d,r;const l={};l.values=[];l.isEmpty=null;if(n===undefined||n===null){return undefined}switch(t){case"CP":r="Contains";if(a){const t=a.indexOf("*");const n=a.lastIndexOf("*");if(t>-1){if(t===0&&n!==a.length-1){r="EndsWith";a=a.substring(1,a.length)}else if(t!==0&&n===a.length-1){r="StartsWith";a=a.substring(0,a.length-1)}else{a=a.substring(1,a.length-1)}}else{e.warning("Contains Option cannot be used without '*'.");return undefined}}break;case"EQ":r=n===""?"Empty":t;break;case"NE":r=n===""?"NotEmpty":t;break;case"BT":if(i===undefined||i===null){return}d=i;r=t;break;case"LE":case"GE":case"GT":case"LT":r=t;break;default:e.warning(`Selection Option is not supported : '${t}'`);return undefined}if(o==="E"){r=s[r]}l.operator=r;if(r!=="Empty"){l.values.push(a);if(d){l.values.push(d)}}return l}o.resolveConditionValues=c;function u(e){return e.indexOf("/")>0?e.split("/")[1]:e}o.getRangeProperty=u;function f(e,t,n,i){const o=[];e===null||e===void 0?void 0:e.forEach(e=>{const a=i?i(e,t,n):h(e,t);if(a){o.push(a)}});return o}function p(e,t,n){const i=e.lastIndexOf("/");const o=i>-1?e.substring(0,e.lastIndexOf("/")+1):"";const a=t.getObject(`${n}/${o}`);return a===null||a===void 0?void 0:a[e.replace(o,"")]}function m(e,t,n,i){const o=e.PropertyName,a={},s=o.value||o.$PropertyPath,d=e.Ranges;const r=p(s,t,n);if(r){const e=f(d,r,s,i);if(e.length){a[s]=(a[s]||[]).concat(e)}}return a}function g(e,t,n,o){let a={};if(!n){return a}const s=n.SelectOptions,d=n.Parameters;s===null||s===void 0?void 0:s.forEach(n=>{const i=n.PropertyName,s=i.value||i.$PropertyPath;if(Object.keys(a).includes(s)){a[s]=a[s].concat(m(n,t,e,o)[s])}else{a={...a,...m(n,t,e,o)}}});d===null||d===void 0?void 0:d.forEach(e=>{const t=e.PropertyName.value||e.PropertyName.$PropertyPath;const n=o?{operator:"EQ",value1:e.PropertyValue,value2:null,path:t,isParameter:true}:{operator:"EQ",values:[e.PropertyValue],isEmpty:null,validated:i.Validated,isParameter:true};a[t]=[n]});return a}o.getFiltersConditionsFromSelectionVariant=g;function h(e,t){let o;const a=e.Sign?u(e.Sign):undefined;const s=e.Option?u(e.Option):undefined;const d=l(e.Low,t.$Type||t.type);const r=e.High?l(e.High,t.$Type||t.type):undefined;const f=c(s,d,r,a);if(f){o=n.createCondition(f.operator,f.values,null,null,i.Validated)}return o}o.getConditions=h;const E=function(e,t){const o={};const a=e.getInterface(1).getPath(),s=e.getInterface(1).getModel();if(t){for(const e in t){const t=s.getObject(`${a}/${e}@com.sap.vocabularies.Common.v1.FilterDefaultValue`);if(t!==undefined){const a=e;o[a]=[n.createCondition("EQ",[t],null,null,i.Validated)]}}}return o};const v=function(e,t,i){const o={};const a=e.getInterface(1);const s=a.getModel();const d=a.getPath();for(const e in i){if(i[e][0]){const t=e.split("::");let a="";const r=t.length;const l=t.slice(0,t.length-1).join("/");const c=t[r-1];if(l){const e=s.getObject(d+"/"+l);if(e.$kind==="NavigationProperty"&&e.$isCollection){a+=`${l}*/`}else if(e.$kind==="NavigationProperty"){a+=`${l}/`}}a+=c;const u="values"in i[e][0]?i[e][0].values:[];o[a]=[n.createCondition(i[e][0].operator,u,null,null,null)]}}return o};function y(){const e={};e["$editState"]=[n.createCondition("DRAFT_EDIT_STATE",["ALL"],null,null,i.Validated)];return e}o.getEditStatusFilter=y;function T(e,t){var n,i;let o;const a=e.getInterface(1).getPath(),s=e.getInterface(1).getModel(),d=s.getObject(`${a}@`),r=s.getObject(`${a}/`);if(d&&(d["@com.sap.vocabularies.Common.v1.DraftRoot"]||d["@com.sap.vocabularies.Common.v1.DraftNode"])){o=y()}const l=(n=t)===null||n===void 0?void 0:n.selectionVariant;const c=((i=t)===null||i===void 0?void 0:i.defaultSemanticDates)||{};const u=E(e,r);const f=v(e,r,c);if(l){t=g(a,s,l)}else if(u){t=u}if(f){t={...t,...f}}if(o){t={...t,...o}}return Object.keys(t).length>0?JSON.stringify(t).replace(/([{}])/g,"\\$1"):undefined}o.getFilterConditions=T;function b(e){return(e===null||e===void 0?void 0:e.$Type)==="com.sap.vocabularies.UI.v1.SelectionVariantType"}o.isSelectionVariant=b;T.requiresIContext=true;return o},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FilterTemplating-dbg", ["sap/fe/core/helpers/TypeGuards"], function (TypeGuards) {
  "use strict";

  var _exports = {};
  var isEntitySet = TypeGuards.isEntitySet;
  function getIsRequired(converterContext, sPropertyPath) {
    var _capabilities, _capabilities$FilterR;
    const entitySet = converterContext.getEntitySet();
    let capabilities;
    if (isEntitySet(entitySet)) {
      capabilities = entitySet.annotations.Capabilities;
    }
    const aRequiredProperties = (_capabilities = capabilities) === null || _capabilities === void 0 ? void 0 : (_capabilities$FilterR = _capabilities.FilterRestrictions) === null || _capabilities$FilterR === void 0 ? void 0 : _capabilities$FilterR.RequiredProperties;
    let bIsRequired = false;
    if (aRequiredProperties) {
      aRequiredProperties.forEach(function (oRequiredProperty) {
        if (sPropertyPath === (oRequiredProperty === null || oRequiredProperty === void 0 ? void 0 : oRequiredProperty.value)) {
          bIsRequired = true;
        }
      });
    }
    return bIsRequired;
  }
  _exports.getIsRequired = getIsRequired;
  function isPropertyFilterable(converterContext, valueListProperty) {
    var _capabilities2, _capabilities2$Filter;
    let bNotFilterable, bHidden;
    const entityType = converterContext.getEntityType();
    const entitySet = converterContext.getEntitySet();
    let capabilities;
    if (isEntitySet(entitySet)) {
      capabilities = entitySet.annotations.Capabilities;
    }
    const nonFilterableProperties = (_capabilities2 = capabilities) === null || _capabilities2 === void 0 ? void 0 : (_capabilities2$Filter = _capabilities2.FilterRestrictions) === null || _capabilities2$Filter === void 0 ? void 0 : _capabilities2$Filter.NonFilterableProperties;
    const properties = entityType.entityProperties;
    properties.forEach(property => {
      const PropertyPath = property.name;
      if (PropertyPath === valueListProperty) {
        var _property$annotations, _property$annotations2, _property$annotations3;
        bHidden = (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : (_property$annotations2 = _property$annotations.UI) === null || _property$annotations2 === void 0 ? void 0 : (_property$annotations3 = _property$annotations2.Hidden) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.valueOf();
      }
    });
    if (nonFilterableProperties && nonFilterableProperties.length > 0) {
      for (let i = 0; i < nonFilterableProperties.length; i++) {
        var _nonFilterablePropert;
        const sPropertyName = (_nonFilterablePropert = nonFilterableProperties[i]) === null || _nonFilterablePropert === void 0 ? void 0 : _nonFilterablePropert.value;
        if (sPropertyName === valueListProperty) {
          bNotFilterable = true;
        }
      }
    }
    return bNotFilterable || bHidden;
  }
  _exports.isPropertyFilterable = isPropertyFilterable;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/FilterTemplating", ["sap/fe/core/helpers/TypeGuards"],function(t){"use strict";var i={};var e=t.isEntitySet;function n(t,i){var n,o;const l=t.getEntitySet();let r;if(e(l)){r=l.annotations.Capabilities}const s=(n=r)===null||n===void 0?void 0:(o=n.FilterRestrictions)===null||o===void 0?void 0:o.RequiredProperties;let a=false;if(s){s.forEach(function(t){if(i===(t===null||t===void 0?void 0:t.value)){a=true}})}return a}i.getIsRequired=n;function o(t,i){var n,o;let l,r;const s=t.getEntityType();const a=t.getEntitySet();let v;if(e(a)){v=a.annotations.Capabilities}const u=(n=v)===null||n===void 0?void 0:(o=n.FilterRestrictions)===null||o===void 0?void 0:o.NonFilterableProperties;const d=s.entityProperties;d.forEach(t=>{const e=t.name;if(e===i){var n,o,l;r=(n=t.annotations)===null||n===void 0?void 0:(o=n.UI)===null||o===void 0?void 0:(l=o.Hidden)===null||l===void 0?void 0:l.valueOf()}});if(u&&u.length>0){for(let t=0;t<u.length;t++){var f;const e=(f=u[t])===null||f===void 0?void 0:f.value;if(e===i){l=true}}}return l||r}i.isPropertyFilterable=o;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/PropertyFormatters-dbg", ["sap/fe/core/converters/MetaModelConverter", "sap/fe/core/templating/DataModelPathHelper", "./PropertyHelper", "./UIFormatters"], function (MetaModelConverter, DataModelPathHelper, PropertyHelper, UIFormatters) {
  "use strict";

  var _exports = {};
  var getConverterContext = UIFormatters.getConverterContext;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var enhanceDataModelPath = DataModelPathHelper.enhanceDataModelPath;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  const getProperty = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    let isPath = false;
    if (typeof oContext === "object" && oContext.hasOwnProperty("$Path")) {
      isPath = true;
    } else if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a Property object but to a ${oContext.$kind}`);
    }
    let oConverterContext = getConverterContext(oContext, oInterface);
    if (isPath) {
      oConverterContext = oConverterContext.$target;
    }
    return oConverterContext;
  };
  _exports.getProperty = getProperty;
  const getPropertyObjectPath = function (oContext, oInterface) {
    const sPath = oInterface.context.getPath();
    if (!oContext) {
      throw new Error(`Unresolved context path ${sPath}`);
    }
    if (typeof oContext === "object" && oContext.hasOwnProperty("$kind") && oContext.$kind !== "Property") {
      throw new Error(`Context does not resolve to a Property object but to a ${oContext.$kind}`);
    }
    let involvedDataModelObjects = getInvolvedDataModelObjects(oInterface.context);
    if (involvedDataModelObjects.targetObject && involvedDataModelObjects.targetObject.type === "Path") {
      involvedDataModelObjects = enhanceDataModelPath(involvedDataModelObjects, involvedDataModelObjects.targetObject.path);
    }
    return involvedDataModelObjects;
  };
  _exports.getPropertyObjectPath = getPropertyObjectPath;
  const isKey = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.isKey(oProperty);
  };
  _exports.isKey = isKey;
  const hasValueHelp = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasValueHelp(oProperty);
  };
  _exports.hasValueHelp = hasValueHelp;
  const hasDateType = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasDateType(oProperty);
  };
  _exports.hasDateType = hasDateType;
  const hasValueHelpWithFixedValues = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.hasValueHelpWithFixedValues(oProperty);
  };
  _exports.hasValueHelpWithFixedValues = hasValueHelpWithFixedValues;
  const getName = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return oProperty.name;
  };
  _exports.getName = getName;
  const getLabel = function (oContext, oInterface) {
    const oProperty = getProperty(oContext, oInterface);
    return PropertyHelper.getLabel(oProperty);
  };
  _exports.getLabel = getLabel;
  const getPropertyPath = function (oContext, oInterface) {
    const propertyPath = getPropertyObjectPath(oContext, oInterface);
    return getTargetObjectPath(propertyPath);
  };
  _exports.getPropertyPath = getPropertyPath;
  const getRelativePropertyPath = function (oContext, oInterface) {
    const propertyPath = getPropertyObjectPath(oContext, oInterface);
    return getTargetObjectPath(propertyPath, true);
  };
  _exports.getRelativePropertyPath = getRelativePropertyPath;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/PropertyFormatters", ["sap/fe/core/converters/MetaModelConverter","sap/fe/core/templating/DataModelPathHelper","./PropertyHelper","./UIFormatters"],function(t,e,r,o){"use strict";var n={};var a=o.getConverterContext;var c=e.getTargetObjectPath;var s=e.enhanceDataModelPath;var i=t.getInvolvedDataModelObjects;const u=function(t,e){const r=e.context.getPath();if(!t){throw new Error(`Unresolved context path ${r}`)}let o=false;if(typeof t==="object"&&t.hasOwnProperty("$Path")){o=true}else if(typeof t==="object"&&t.hasOwnProperty("$kind")&&t.$kind!=="Property"){throw new Error(`Context does not resolve to a Property object but to a ${t.$kind}`)}let n=a(t,e);if(o){n=n.$target}return n};n.getProperty=u;const l=function(t,e){const r=e.context.getPath();if(!t){throw new Error(`Unresolved context path ${r}`)}if(typeof t==="object"&&t.hasOwnProperty("$kind")&&t.$kind!=="Property"){throw new Error(`Context does not resolve to a Property object but to a ${t.$kind}`)}let o=i(e.context);if(o.targetObject&&o.targetObject.type==="Path"){o=s(o,o.targetObject.path)}return o};n.getPropertyObjectPath=l;const p=function(t,e){const o=u(t,e);return r.isKey(o)};n.isKey=p;const h=function(t,e){const o=u(t,e);return r.hasValueHelp(o)};n.hasValueHelp=h;const f=function(t,e){const o=u(t,e);return r.hasDateType(o)};n.hasDateType=f;const P=function(t,e){const o=u(t,e);return r.hasValueHelpWithFixedValues(o)};n.hasValueHelpWithFixedValues=P;const y=function(t,e){const r=u(t,e);return r.name};n.getName=y;const d=function(t,e){const o=u(t,e);return r.getLabel(o)};n.getLabel=d;const g=function(t,e){const r=l(t,e);return c(r)};n.getPropertyPath=g;const b=function(t,e){const r=l(t,e);return c(r,true)};n.getRelativePropertyPath=b;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/PropertyHelper-dbg", ["sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/SemanticObjectHelper"], function (TypeGuards, SemanticObjectHelper) {
  "use strict";

  var _exports = {};
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  /**
   * Check whether the property has the Core.Computed annotation or not.
   *
   * @param oProperty The target property
   * @returns `true` if the property is computed
   */
  const isComputed = function (oProperty) {
    var _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation3;
    return !!((_oProperty$annotation = oProperty.annotations) !== null && _oProperty$annotation !== void 0 && (_oProperty$annotation2 = _oProperty$annotation.Core) !== null && _oProperty$annotation2 !== void 0 && (_oProperty$annotation3 = _oProperty$annotation2.Computed) !== null && _oProperty$annotation3 !== void 0 && _oProperty$annotation3.valueOf());
  };

  /**
   * Check whether the property has the Core.Immutable annotation or not.
   *
   * @param oProperty The target property
   * @returns `true` if it's immutable
   */
  _exports.isComputed = isComputed;
  const isImmutable = function (oProperty) {
    var _oProperty$annotation4, _oProperty$annotation5, _oProperty$annotation6;
    return !!((_oProperty$annotation4 = oProperty.annotations) !== null && _oProperty$annotation4 !== void 0 && (_oProperty$annotation5 = _oProperty$annotation4.Core) !== null && _oProperty$annotation5 !== void 0 && (_oProperty$annotation6 = _oProperty$annotation5.Immutable) !== null && _oProperty$annotation6 !== void 0 && _oProperty$annotation6.valueOf());
  };

  /**
   * Check whether the property is a key or not.
   *
   * @param oProperty The target property
   * @returns `true` if it's a key
   */
  _exports.isImmutable = isImmutable;
  const isKey = function (oProperty) {
    return !!oProperty.isKey;
  };

  /**
   * Check whether the property is a semanticKey for the context entity.
   *
   * @param property
   * @param contextDataModelObject The DataModelObject that holds the context
   * @returns `true`if it's a semantic key
   */
  _exports.isKey = isKey;
  const isSemanticKey = function (property, contextDataModelObject) {
    var _contextDataModelObje, _contextDataModelObje2, _contextDataModelObje3, _contextDataModelObje4;
    const semanticKeys = (_contextDataModelObje = contextDataModelObject.contextLocation) === null || _contextDataModelObje === void 0 ? void 0 : (_contextDataModelObje2 = _contextDataModelObje.targetEntityType) === null || _contextDataModelObje2 === void 0 ? void 0 : (_contextDataModelObje3 = _contextDataModelObje2.annotations) === null || _contextDataModelObje3 === void 0 ? void 0 : (_contextDataModelObje4 = _contextDataModelObje3.Common) === null || _contextDataModelObje4 === void 0 ? void 0 : _contextDataModelObje4.SemanticKey;
    return (semanticKeys === null || semanticKeys === void 0 ? void 0 : semanticKeys.some(function (key) {
      var _key$$target;
      return (key === null || key === void 0 ? void 0 : (_key$$target = key.$target) === null || _key$$target === void 0 ? void 0 : _key$$target.fullyQualifiedName) === property.fullyQualifiedName;
    })) ?? false;
  };

  /**
   * Checks whether the property has a date time or not.
   *
   * @param oProperty
   * @returns `true` if it is of type date / datetime / datetimeoffset
   */
  _exports.isSemanticKey = isSemanticKey;
  const hasDateType = function (oProperty) {
    return ["Edm.Date", "Edm.DateTime", "Edm.DateTimeOffset"].indexOf(oProperty.type) !== -1;
  };

  /**
   * Retrieve the label annotation.
   *
   * @param oProperty The target property
   * @returns The label string
   */
  _exports.hasDateType = hasDateType;
  const getLabel = function (oProperty) {
    var _oProperty$annotation7, _oProperty$annotation8, _oProperty$annotation9;
    return ((_oProperty$annotation7 = oProperty.annotations) === null || _oProperty$annotation7 === void 0 ? void 0 : (_oProperty$annotation8 = _oProperty$annotation7.Common) === null || _oProperty$annotation8 === void 0 ? void 0 : (_oProperty$annotation9 = _oProperty$annotation8.Label) === null || _oProperty$annotation9 === void 0 ? void 0 : _oProperty$annotation9.toString()) || "";
  };

  /**
   * Check whether the property has a semantic object defined or not.
   *
   * @param property The target property
   * @returns `true` if it has a semantic object
   */
  _exports.getLabel = getLabel;
  const hasSemanticObject = function (property) {
    return SemanticObjectHelper.hasSemanticObject(property);
  };

  /**
   * Retrieves the timezone property associated to the property, if applicable.
   *
   * @param oProperty The target property
   * @returns The timezone property, if it exists
   */
  _exports.hasSemanticObject = hasSemanticObject;
  const getAssociatedTimezoneProperty = function (oProperty) {
    var _oProperty$annotation10, _oProperty$annotation11, _oProperty$annotation12, _oProperty$annotation13;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation10 = oProperty.annotations) === null || _oProperty$annotation10 === void 0 ? void 0 : (_oProperty$annotation11 = _oProperty$annotation10.Common) === null || _oProperty$annotation11 === void 0 ? void 0 : _oProperty$annotation11.Timezone) ? (_oProperty$annotation12 = oProperty.annotations) === null || _oProperty$annotation12 === void 0 ? void 0 : (_oProperty$annotation13 = _oProperty$annotation12.Common) === null || _oProperty$annotation13 === void 0 ? void 0 : _oProperty$annotation13.Timezone.$target : undefined;
  };

  /**
   * Retrieves the timezone property path associated to the property, if applicable.
   *
   * @param oProperty The target property
   * @returns The timezone property path, if it exists
   */
  _exports.getAssociatedTimezoneProperty = getAssociatedTimezoneProperty;
  const getAssociatedTimezonePropertyPath = function (oProperty) {
    var _oProperty$annotation14, _oProperty$annotation15, _oProperty$annotation16, _oProperty$annotation17, _oProperty$annotation18;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation14 = oProperty.annotations) === null || _oProperty$annotation14 === void 0 ? void 0 : (_oProperty$annotation15 = _oProperty$annotation14.Common) === null || _oProperty$annotation15 === void 0 ? void 0 : _oProperty$annotation15.Timezone) ? oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation16 = oProperty.annotations) === null || _oProperty$annotation16 === void 0 ? void 0 : (_oProperty$annotation17 = _oProperty$annotation16.Common) === null || _oProperty$annotation17 === void 0 ? void 0 : (_oProperty$annotation18 = _oProperty$annotation17.Timezone) === null || _oProperty$annotation18 === void 0 ? void 0 : _oProperty$annotation18.path : undefined;
  };

  /**
   * Retrieves the associated text property for that property, if it exists.
   *
   * @param oProperty The target property
   * @returns The text property, if it exists
   */
  _exports.getAssociatedTimezonePropertyPath = getAssociatedTimezonePropertyPath;
  const getAssociatedTextProperty = function (oProperty) {
    var _oProperty$annotation19, _oProperty$annotation20, _oProperty$annotation21, _oProperty$annotation22;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation19 = oProperty.annotations) === null || _oProperty$annotation19 === void 0 ? void 0 : (_oProperty$annotation20 = _oProperty$annotation19.Common) === null || _oProperty$annotation20 === void 0 ? void 0 : _oProperty$annotation20.Text) ? (_oProperty$annotation21 = oProperty.annotations) === null || _oProperty$annotation21 === void 0 ? void 0 : (_oProperty$annotation22 = _oProperty$annotation21.Common) === null || _oProperty$annotation22 === void 0 ? void 0 : _oProperty$annotation22.Text.$target : undefined;
  };

  /**
   * Retrieves the unit property associated to the property, if applicable.
   *
   * @param oProperty The target property
   * @returns The unit property, if it exists
   */
  _exports.getAssociatedTextProperty = getAssociatedTextProperty;
  const getAssociatedUnitProperty = function (oProperty) {
    var _oProperty$annotation23, _oProperty$annotation24, _oProperty$annotation25, _oProperty$annotation26;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation23 = oProperty.annotations) === null || _oProperty$annotation23 === void 0 ? void 0 : (_oProperty$annotation24 = _oProperty$annotation23.Measures) === null || _oProperty$annotation24 === void 0 ? void 0 : _oProperty$annotation24.Unit) ? (_oProperty$annotation25 = oProperty.annotations) === null || _oProperty$annotation25 === void 0 ? void 0 : (_oProperty$annotation26 = _oProperty$annotation25.Measures) === null || _oProperty$annotation26 === void 0 ? void 0 : _oProperty$annotation26.Unit.$target : undefined;
  };
  _exports.getAssociatedUnitProperty = getAssociatedUnitProperty;
  const getAssociatedUnitPropertyPath = function (oProperty) {
    var _oProperty$annotation27, _oProperty$annotation28, _oProperty$annotation29, _oProperty$annotation30;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation27 = oProperty.annotations) === null || _oProperty$annotation27 === void 0 ? void 0 : (_oProperty$annotation28 = _oProperty$annotation27.Measures) === null || _oProperty$annotation28 === void 0 ? void 0 : _oProperty$annotation28.Unit) ? (_oProperty$annotation29 = oProperty.annotations) === null || _oProperty$annotation29 === void 0 ? void 0 : (_oProperty$annotation30 = _oProperty$annotation29.Measures) === null || _oProperty$annotation30 === void 0 ? void 0 : _oProperty$annotation30.Unit.path : undefined;
  };

  /**
   * Retrieves the associated currency property for that property if it exists.
   *
   * @param oProperty The target property
   * @returns The unit property, if it exists
   */
  _exports.getAssociatedUnitPropertyPath = getAssociatedUnitPropertyPath;
  const getAssociatedCurrencyProperty = function (oProperty) {
    var _oProperty$annotation31, _oProperty$annotation32, _oProperty$annotation33, _oProperty$annotation34;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation31 = oProperty.annotations) === null || _oProperty$annotation31 === void 0 ? void 0 : (_oProperty$annotation32 = _oProperty$annotation31.Measures) === null || _oProperty$annotation32 === void 0 ? void 0 : _oProperty$annotation32.ISOCurrency) ? (_oProperty$annotation33 = oProperty.annotations) === null || _oProperty$annotation33 === void 0 ? void 0 : (_oProperty$annotation34 = _oProperty$annotation33.Measures) === null || _oProperty$annotation34 === void 0 ? void 0 : _oProperty$annotation34.ISOCurrency.$target : undefined;
  };
  _exports.getAssociatedCurrencyProperty = getAssociatedCurrencyProperty;
  const getAssociatedCurrencyPropertyPath = function (oProperty) {
    var _oProperty$annotation35, _oProperty$annotation36, _oProperty$annotation37, _oProperty$annotation38;
    return isPathAnnotationExpression(oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation35 = oProperty.annotations) === null || _oProperty$annotation35 === void 0 ? void 0 : (_oProperty$annotation36 = _oProperty$annotation35.Measures) === null || _oProperty$annotation36 === void 0 ? void 0 : _oProperty$annotation36.ISOCurrency) ? (_oProperty$annotation37 = oProperty.annotations) === null || _oProperty$annotation37 === void 0 ? void 0 : (_oProperty$annotation38 = _oProperty$annotation37.Measures) === null || _oProperty$annotation38 === void 0 ? void 0 : _oProperty$annotation38.ISOCurrency.path : undefined;
  };

  /**
   * Retrieves the Common.Text property path if it exists.
   *
   * @param oProperty The target property
   * @returns The Common.Text property path or undefined if it does not exist
   */
  _exports.getAssociatedCurrencyPropertyPath = getAssociatedCurrencyPropertyPath;
  const getAssociatedTextPropertyPath = function (oProperty) {
    var _oProperty$annotation39, _oProperty$annotation40, _oProperty$annotation41, _oProperty$annotation42;
    return isPathAnnotationExpression((_oProperty$annotation39 = oProperty.annotations) === null || _oProperty$annotation39 === void 0 ? void 0 : (_oProperty$annotation40 = _oProperty$annotation39.Common) === null || _oProperty$annotation40 === void 0 ? void 0 : _oProperty$annotation40.Text) ? (_oProperty$annotation41 = oProperty.annotations) === null || _oProperty$annotation41 === void 0 ? void 0 : (_oProperty$annotation42 = _oProperty$annotation41.Common) === null || _oProperty$annotation42 === void 0 ? void 0 : _oProperty$annotation42.Text.path : undefined;
  };

  /**
   * Check whether the property has a value help annotation defined or not.
   *
   * @param property The target property to be checked
   * @returns `true` if it has a value help
   */
  _exports.getAssociatedTextPropertyPath = getAssociatedTextPropertyPath;
  const hasValueHelp = function (property) {
    var _property$annotations, _property$annotations2, _property$annotations3, _property$annotations4, _property$annotations5, _property$annotations6, _property$annotations7, _property$annotations8;
    return !!((_property$annotations = property.annotations) !== null && _property$annotations !== void 0 && (_property$annotations2 = _property$annotations.Common) !== null && _property$annotations2 !== void 0 && _property$annotations2.ValueList) || !!((_property$annotations3 = property.annotations) !== null && _property$annotations3 !== void 0 && (_property$annotations4 = _property$annotations3.Common) !== null && _property$annotations4 !== void 0 && _property$annotations4.ValueListReferences) || !!((_property$annotations5 = property.annotations) !== null && _property$annotations5 !== void 0 && (_property$annotations6 = _property$annotations5.Common) !== null && _property$annotations6 !== void 0 && _property$annotations6.ValueListWithFixedValues) || !!((_property$annotations7 = property.annotations) !== null && _property$annotations7 !== void 0 && (_property$annotations8 = _property$annotations7.Common) !== null && _property$annotations8 !== void 0 && _property$annotations8.ValueListMapping);
  };

  /**
   * Check whether the property has a value help with fixed value annotation defined or not.
   *
   * @param oProperty The target property
   * @returns `true` if it has a value help
   */
  _exports.hasValueHelp = hasValueHelp;
  const hasValueHelpWithFixedValues = function (oProperty) {
    var _oProperty$annotation43, _oProperty$annotation44, _oProperty$annotation45;
    return !!(oProperty !== null && oProperty !== void 0 && (_oProperty$annotation43 = oProperty.annotations) !== null && _oProperty$annotation43 !== void 0 && (_oProperty$annotation44 = _oProperty$annotation43.Common) !== null && _oProperty$annotation44 !== void 0 && (_oProperty$annotation45 = _oProperty$annotation44.ValueListWithFixedValues) !== null && _oProperty$annotation45 !== void 0 && _oProperty$annotation45.valueOf());
  };

  /**
   * Check whether the property has a value help for validation annotation defined or not.
   *
   * @param oProperty The target property
   * @returns `true` if it has a value help
   */
  _exports.hasValueHelpWithFixedValues = hasValueHelpWithFixedValues;
  const hasValueListForValidation = function (oProperty) {
    var _oProperty$annotation46, _oProperty$annotation47;
    return ((_oProperty$annotation46 = oProperty.annotations) === null || _oProperty$annotation46 === void 0 ? void 0 : (_oProperty$annotation47 = _oProperty$annotation46.Common) === null || _oProperty$annotation47 === void 0 ? void 0 : _oProperty$annotation47.ValueListForValidation) !== undefined;
  };
  _exports.hasValueListForValidation = hasValueListForValidation;
  const hasTimezone = function (oProperty) {
    var _oProperty$annotation48, _oProperty$annotation49;
    return ((_oProperty$annotation48 = oProperty.annotations) === null || _oProperty$annotation48 === void 0 ? void 0 : (_oProperty$annotation49 = _oProperty$annotation48.Common) === null || _oProperty$annotation49 === void 0 ? void 0 : _oProperty$annotation49.Timezone) !== undefined;
  };
  /**
   * Checks whether the property is a unit property.
   *
   * @param property The property to be checked
   * @returns `true` if it is a unit
   */
  _exports.hasTimezone = hasTimezone;
  const isUnit = function (property) {
    var _property$annotations9, _property$annotations10, _property$annotations11;
    return !!((_property$annotations9 = property.annotations) !== null && _property$annotations9 !== void 0 && (_property$annotations10 = _property$annotations9.Common) !== null && _property$annotations10 !== void 0 && (_property$annotations11 = _property$annotations10.IsUnit) !== null && _property$annotations11 !== void 0 && _property$annotations11.valueOf());
  };

  /**
   * Checks whether the property has a text property.
   *
   * @param property The property to be checked
   * @returns `true` if it is a Text
   */
  _exports.isUnit = isUnit;
  const hasText = function (property) {
    var _property$annotations12, _property$annotations13, _property$annotations14;
    return !!((_property$annotations12 = property.annotations) !== null && _property$annotations12 !== void 0 && (_property$annotations13 = _property$annotations12.Common) !== null && _property$annotations13 !== void 0 && (_property$annotations14 = _property$annotations13.Text) !== null && _property$annotations14 !== void 0 && _property$annotations14.valueOf());
  };

  /**
   * Checks whether the property has an ImageURL.
   *
   * @param property The property to be checked
   * @returns `true` if it is an ImageURL
   */
  _exports.hasText = hasText;
  const isImageURL = function (property) {
    var _property$annotations15, _property$annotations16, _property$annotations17;
    return !!((_property$annotations15 = property.annotations) !== null && _property$annotations15 !== void 0 && (_property$annotations16 = _property$annotations15.UI) !== null && _property$annotations16 !== void 0 && (_property$annotations17 = _property$annotations16.IsImageURL) !== null && _property$annotations17 !== void 0 && _property$annotations17.valueOf());
  };

  /**
   * Checks whether the property is a currency property.
   *
   * @param oProperty The property to be checked
   * @returns `true` if it is a currency
   */
  _exports.isImageURL = isImageURL;
  const isCurrency = function (oProperty) {
    var _oProperty$annotation50, _oProperty$annotation51, _oProperty$annotation52;
    return !!((_oProperty$annotation50 = oProperty.annotations) !== null && _oProperty$annotation50 !== void 0 && (_oProperty$annotation51 = _oProperty$annotation50.Common) !== null && _oProperty$annotation51 !== void 0 && (_oProperty$annotation52 = _oProperty$annotation51.IsCurrency) !== null && _oProperty$annotation52 !== void 0 && _oProperty$annotation52.valueOf());
  };

  /**
   * Checks whether the property has a currency property.
   *
   * @param property The property to be checked
   * @returns `true` if it has a currency
   */
  _exports.isCurrency = isCurrency;
  const hasCurrency = function (property) {
    var _property$annotations18, _property$annotations19;
    return ((_property$annotations18 = property.annotations) === null || _property$annotations18 === void 0 ? void 0 : (_property$annotations19 = _property$annotations18.Measures) === null || _property$annotations19 === void 0 ? void 0 : _property$annotations19.ISOCurrency) !== undefined;
  };

  /**
   * Checks whether the property has a unit property.
   *
   * @param property The property to be checked
   * @returns `true` if it has a unit
   */
  _exports.hasCurrency = hasCurrency;
  const hasUnit = function (property) {
    var _property$annotations20, _property$annotations21;
    return ((_property$annotations20 = property.annotations) === null || _property$annotations20 === void 0 ? void 0 : (_property$annotations21 = _property$annotations20.Measures) === null || _property$annotations21 === void 0 ? void 0 : _property$annotations21.Unit) !== undefined;
  };

  /**
   * Checks whether the property type has Edm.Guid.
   *
   * @param property The property to be checked
   * @returns `true` if it is a Guid
   */
  _exports.hasUnit = hasUnit;
  const isGuid = function (property) {
    return property.type === "Edm.Guid";
  };
  _exports.isGuid = isGuid;
  const hasStaticPercentUnit = function (oProperty) {
    var _oProperty$annotation53, _oProperty$annotation54, _oProperty$annotation55;
    return (oProperty === null || oProperty === void 0 ? void 0 : (_oProperty$annotation53 = oProperty.annotations) === null || _oProperty$annotation53 === void 0 ? void 0 : (_oProperty$annotation54 = _oProperty$annotation53.Measures) === null || _oProperty$annotation54 === void 0 ? void 0 : (_oProperty$annotation55 = _oProperty$annotation54.Unit) === null || _oProperty$annotation55 === void 0 ? void 0 : _oProperty$annotation55.toString()) === "%";
  };
  _exports.hasStaticPercentUnit = hasStaticPercentUnit;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/PropertyHelper", ["sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/SemanticObjectHelper"],function(n,o){"use strict";var i={};var t=n.isPathAnnotationExpression;const e=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Core)!==null&&i!==void 0&&(t=i.Computed)!==null&&t!==void 0&&t.valueOf())};i.isComputed=e;const l=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Core)!==null&&i!==void 0&&(t=i.Immutable)!==null&&t!==void 0&&t.valueOf())};i.isImmutable=l;const u=function(n){return!!n.isKey};i.isKey=u;const d=function(n,o){var i,t,e,l;const u=(i=o.contextLocation)===null||i===void 0?void 0:(t=i.targetEntityType)===null||t===void 0?void 0:(e=t.annotations)===null||e===void 0?void 0:(l=e.Common)===null||l===void 0?void 0:l.SemanticKey;return(u===null||u===void 0?void 0:u.some(function(o){var i;return(o===null||o===void 0?void 0:(i=o.$target)===null||i===void 0?void 0:i.fullyQualifiedName)===n.fullyQualifiedName}))??false};i.isSemanticKey=d;const a=function(n){return["Edm.Date","Edm.DateTime","Edm.DateTimeOffset"].indexOf(n.type)!==-1};i.hasDateType=a;const v=function(n){var o,i,t;return((o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:(t=i.Label)===null||t===void 0?void 0:t.toString())||""};i.getLabel=v;const r=function(n){return o.hasSemanticObject(n)};i.hasSemanticObject=r;const s=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Timezone)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Common)===null||l===void 0?void 0:l.Timezone.$target:undefined};i.getAssociatedTimezoneProperty=s;const c=function(n){var o,i,e,l,u;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Timezone)?n===null||n===void 0?void 0:(e=n.annotations)===null||e===void 0?void 0:(l=e.Common)===null||l===void 0?void 0:(u=l.Timezone)===null||u===void 0?void 0:u.path:undefined};i.getAssociatedTimezonePropertyPath=c;const m=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Text)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Common)===null||l===void 0?void 0:l.Text.$target:undefined};i.getAssociatedTextProperty=m;const f=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.Unit)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Measures)===null||l===void 0?void 0:l.Unit.$target:undefined};i.getAssociatedUnitProperty=f;const C=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.Unit)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Measures)===null||l===void 0?void 0:l.Unit.path:undefined};i.getAssociatedUnitPropertyPath=C;const p=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.ISOCurrency)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Measures)===null||l===void 0?void 0:l.ISOCurrency.$target:undefined};i.getAssociatedCurrencyProperty=p;const y=function(n){var o,i,e,l;return t(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.ISOCurrency)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Measures)===null||l===void 0?void 0:l.ISOCurrency.path:undefined};i.getAssociatedCurrencyPropertyPath=y;const h=function(n){var o,i,e,l;return t((o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Text)?(e=n.annotations)===null||e===void 0?void 0:(l=e.Common)===null||l===void 0?void 0:l.Text.path:undefined};i.getAssociatedTextPropertyPath=h;const g=function(n){var o,i,t,e,l,u,d,a;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&i.ValueList)||!!((t=n.annotations)!==null&&t!==void 0&&(e=t.Common)!==null&&e!==void 0&&e.ValueListReferences)||!!((l=n.annotations)!==null&&l!==void 0&&(u=l.Common)!==null&&u!==void 0&&u.ValueListWithFixedValues)||!!((d=n.annotations)!==null&&d!==void 0&&(a=d.Common)!==null&&a!==void 0&&a.ValueListMapping)};i.hasValueHelp=g;const T=function(n){var o,i,t;return!!(n!==null&&n!==void 0&&(o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&(t=i.ValueListWithFixedValues)!==null&&t!==void 0&&t.valueOf())};i.hasValueHelpWithFixedValues=T;const O=function(n){var o,i;return((o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.ValueListForValidation)!==undefined};i.hasValueListForValidation=O;const U=function(n){var o,i;return((o=n.annotations)===null||o===void 0?void 0:(i=o.Common)===null||i===void 0?void 0:i.Timezone)!==undefined};i.hasTimezone=U;const x=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&(t=i.IsUnit)!==null&&t!==void 0&&t.valueOf())};i.isUnit=x;const P=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&(t=i.Text)!==null&&t!==void 0&&t.valueOf())};i.hasText=P;const V=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.UI)!==null&&i!==void 0&&(t=i.IsImageURL)!==null&&t!==void 0&&t.valueOf())};i.isImageURL=V;const I=function(n){var o,i,t;return!!((o=n.annotations)!==null&&o!==void 0&&(i=o.Common)!==null&&i!==void 0&&(t=i.IsCurrency)!==null&&t!==void 0&&t.valueOf())};i.isCurrency=I;const S=function(n){var o,i;return((o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.ISOCurrency)!==undefined};i.hasCurrency=S;const L=function(n){var o,i;return((o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:i.Unit)!==undefined};i.hasUnit=L;const M=function(n){return n.type==="Edm.Guid"};i.isGuid=M;const A=function(n){var o,i,t;return(n===null||n===void 0?void 0:(o=n.annotations)===null||o===void 0?void 0:(i=o.Measures)===null||i===void 0?void 0:(t=i.Unit)===null||t===void 0?void 0:t.toString())==="%"};i.hasStaticPercentUnit=A;return i},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/SemanticObjectHelper-dbg", [], function () {
  "use strict";

  var _exports = {};
  /**
   * Get the path of the semantic Object if it is a dynamic SemanticObject.
   *
   * @param semanticObject The value of the Common.SemanticObject annotation.
   * @returns  The path of the semantic Object if it is a dynamic SemanticObject null otherwise.
   */
  const getDynamicPathFromSemanticObject = semanticObject => {
    const dynamicSemObjectRegex = semanticObject === null || semanticObject === void 0 ? void 0 : semanticObject.match(/{(.*?)}/);
    if (dynamicSemObjectRegex !== null && dynamicSemObjectRegex !== void 0 && dynamicSemObjectRegex.length && dynamicSemObjectRegex.length > 1) {
      return dynamicSemObjectRegex[1];
    }
    return null;
  };

  /**
   * Check whether a property or a NavigationProperty has a semantic object defined or not.
   *
   * @param property The target property
   * @returns `true` if it has a semantic object
   */
  _exports.getDynamicPathFromSemanticObject = getDynamicPathFromSemanticObject;
  const hasSemanticObject = function (property) {
    var _property$annotations;
    const _propertyCommonAnnotations = (_property$annotations = property.annotations) === null || _property$annotations === void 0 ? void 0 : _property$annotations.Common;
    if (_propertyCommonAnnotations) {
      for (const key in _propertyCommonAnnotations) {
        var _propertyCommonAnnota;
        if (((_propertyCommonAnnota = _propertyCommonAnnotations[key]) === null || _propertyCommonAnnota === void 0 ? void 0 : _propertyCommonAnnota.term) === "com.sap.vocabularies.Common.v1.SemanticObject") {
          return true;
        }
      }
    }
    return false;
  };
  _exports.hasSemanticObject = hasSemanticObject;
  const getSemanticObjects = function (property) {
    var _property$annotations2;
    const semanticObjects = [];
    const _propertyCommonAnnotations = (_property$annotations2 = property.annotations) === null || _property$annotations2 === void 0 ? void 0 : _property$annotations2.Common;
    if (_propertyCommonAnnotations) {
      for (const key in _propertyCommonAnnotations) {
        var _propertyCommonAnnota2;
        if (((_propertyCommonAnnota2 = _propertyCommonAnnotations[key]) === null || _propertyCommonAnnota2 === void 0 ? void 0 : _propertyCommonAnnota2.term) === "com.sap.vocabularies.Common.v1.SemanticObject") {
          semanticObjects.push(_propertyCommonAnnotations[key]);
        }
      }
    }
    return semanticObjects;
  };
  _exports.getSemanticObjects = getSemanticObjects;
  const getSemanticObjectMappings = function (property) {
    var _property$annotations3;
    const semanticObjectMappings = [];
    const _propertyCommonAnnotations = (_property$annotations3 = property.annotations) === null || _property$annotations3 === void 0 ? void 0 : _property$annotations3.Common;
    if (_propertyCommonAnnotations) {
      for (const key in _propertyCommonAnnotations) {
        var _propertyCommonAnnota3;
        if (((_propertyCommonAnnota3 = _propertyCommonAnnotations[key]) === null || _propertyCommonAnnota3 === void 0 ? void 0 : _propertyCommonAnnota3.term) === "com.sap.vocabularies.Common.v1.SemanticObjectMapping") {
          semanticObjectMappings.push(_propertyCommonAnnotations[key]);
        }
      }
    }
    return semanticObjectMappings;
  };
  _exports.getSemanticObjectMappings = getSemanticObjectMappings;
  const getSemanticObjectUnavailableActions = function (property) {
    var _property$annotations4;
    const semanticObjectUnavailableActions = [];
    const _propertyCommonAnnotations = (_property$annotations4 = property.annotations) === null || _property$annotations4 === void 0 ? void 0 : _property$annotations4.Common;
    if (_propertyCommonAnnotations) {
      for (const key in _propertyCommonAnnotations) {
        var _propertyCommonAnnota4;
        if (((_propertyCommonAnnota4 = _propertyCommonAnnotations[key]) === null || _propertyCommonAnnota4 === void 0 ? void 0 : _propertyCommonAnnota4.term) === "com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions") {
          semanticObjectUnavailableActions.push(_propertyCommonAnnotations[key]);
        }
      }
    }
    return semanticObjectUnavailableActions;
  };
  _exports.getSemanticObjectUnavailableActions = getSemanticObjectUnavailableActions;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/SemanticObjectHelper", [],function(){"use strict";var n={};const o=n=>{const o=n===null||n===void 0?void 0:n.match(/{(.*?)}/);if(o!==null&&o!==void 0&&o.length&&o.length>1){return o[1]}return null};n.getDynamicPathFromSemanticObject=o;const t=function(n){var o;const t=(o=n.annotations)===null||o===void 0?void 0:o.Common;if(t){for(const n in t){var i;if(((i=t[n])===null||i===void 0?void 0:i.term)==="com.sap.vocabularies.Common.v1.SemanticObject"){return true}}}return false};n.hasSemanticObject=t;const i=function(n){var o;const t=[];const i=(o=n.annotations)===null||o===void 0?void 0:o.Common;if(i){for(const n in i){var a;if(((a=i[n])===null||a===void 0?void 0:a.term)==="com.sap.vocabularies.Common.v1.SemanticObject"){t.push(i[n])}}}return t};n.getSemanticObjects=i;const a=function(n){var o;const t=[];const i=(o=n.annotations)===null||o===void 0?void 0:o.Common;if(i){for(const n in i){var a;if(((a=i[n])===null||a===void 0?void 0:a.term)==="com.sap.vocabularies.Common.v1.SemanticObjectMapping"){t.push(i[n])}}}return t};n.getSemanticObjectMappings=a;const c=function(n){var o;const t=[];const i=(o=n.annotations)===null||o===void 0?void 0:o.Common;if(i){for(const n in i){var a;if(((a=i[n])===null||a===void 0?void 0:a.term)==="com.sap.vocabularies.Common.v1.SemanticObjectUnavailableActions"){t.push(i[n])}}}return t};n.getSemanticObjectUnavailableActions=c;return n},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/UIFormatters-dbg", ["sap/fe/core/converters/helpers/BindingHelper", "sap/fe/core/converters/MetaModelConverter", "sap/fe/core/formatters/ValueFormatter", "sap/fe/core/helpers/BindingToolkit", "sap/fe/core/helpers/TypeGuards", "sap/fe/core/templating/DataModelPathHelper", "sap/fe/core/templating/DisplayModeFormatter", "sap/fe/core/templating/FieldControlHelper", "sap/fe/core/templating/PropertyHelper", "sap/ui/mdc/enum/EditMode"], function (BindingHelper, MetaModelConverter, valueFormatters, BindingToolkit, TypeGuards, DataModelPathHelper, DisplayModeFormatter, FieldControlHelper, PropertyHelper, EditMode) {
  "use strict";

  var _exports = {};
  var isKey = PropertyHelper.isKey;
  var isImmutable = PropertyHelper.isImmutable;
  var isComputed = PropertyHelper.isComputed;
  var hasValueHelp = PropertyHelper.hasValueHelp;
  var getAssociatedUnitProperty = PropertyHelper.getAssociatedUnitProperty;
  var getAssociatedCurrencyProperty = PropertyHelper.getAssociatedCurrencyProperty;
  var isRequiredExpression = FieldControlHelper.isRequiredExpression;
  var isReadOnlyExpression = FieldControlHelper.isReadOnlyExpression;
  var isNonEditableExpression = FieldControlHelper.isNonEditableExpression;
  var isDisabledExpression = FieldControlHelper.isDisabledExpression;
  var isPathUpdatable = DataModelPathHelper.isPathUpdatable;
  var getTargetObjectPath = DataModelPathHelper.getTargetObjectPath;
  var getRelativePaths = DataModelPathHelper.getRelativePaths;
  var getContextRelativeTargetObjectPath = DataModelPathHelper.getContextRelativeTargetObjectPath;
  var isProperty = TypeGuards.isProperty;
  var isPathAnnotationExpression = TypeGuards.isPathAnnotationExpression;
  var isMultipleNavigationProperty = TypeGuards.isMultipleNavigationProperty;
  var pathInModel = BindingToolkit.pathInModel;
  var or = BindingToolkit.or;
  var not = BindingToolkit.not;
  var isTruthy = BindingToolkit.isTruthy;
  var isConstant = BindingToolkit.isConstant;
  var ifElse = BindingToolkit.ifElse;
  var getExpressionFromAnnotation = BindingToolkit.getExpressionFromAnnotation;
  var formatWithTypeInformation = BindingToolkit.formatWithTypeInformation;
  var formatResult = BindingToolkit.formatResult;
  var equal = BindingToolkit.equal;
  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  var constant = BindingToolkit.constant;
  var compileExpression = BindingToolkit.compileExpression;
  var and = BindingToolkit.and;
  var addTypeInformation = BindingToolkit.addTypeInformation;
  var getInvolvedDataModelObjects = MetaModelConverter.getInvolvedDataModelObjects;
  var convertMetaModelContext = MetaModelConverter.convertMetaModelContext;
  var UI = BindingHelper.UI;
  var singletonPathVisitor = BindingHelper.singletonPathVisitor;
  const getDisplayMode = function (oDataModelObjectPath) {
    return DisplayModeFormatter.getDisplayMode(oDataModelObjectPath.targetObject, oDataModelObjectPath);
  };
  _exports.getDisplayMode = getDisplayMode;
  const getEditableExpressionAsObject = function (oPropertyPath) {
    let oDataFieldConverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let oDataModelObjectPath = arguments.length > 2 ? arguments[2] : undefined;
    let isEditable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UI.IsEditable;
    let considerUpdateRestrictions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    return getEditableExpression(oPropertyPath, oDataFieldConverted, oDataModelObjectPath, true, isEditable, considerUpdateRestrictions);
  };
  _exports.getEditableExpressionAsObject = getEditableExpressionAsObject;
  /**
   * Create the expression to generate an "editable" Boolean value.
   *
   * @param oPropertyPath The input property
   * @param oDataFieldConverted The DataFieldConverted object to read the fieldControl annotation
   * @param oDataModelObjectPath The path to this property object
   * @param bAsObject Whether or not this should be returned as an object or a binding string
   * @param isEditable Whether or not UI.IsEditable be considered.
   * @param considerUpdateRestrictions Whether we want to take into account UpdateRestrictions to compute the editable
   * @returns The binding expression used to determine if a property is editable or not
   */
  const getEditableExpression = function (oPropertyPath) {
    let oDataFieldConverted = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    let oDataModelObjectPath = arguments.length > 2 ? arguments[2] : undefined;
    let bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let isEditable = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : UI.IsEditable;
    let considerUpdateRestrictions = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileExpression(false);
    }
    let dataFieldEditableExpression = constant(true);
    if (oDataFieldConverted !== null) {
      dataFieldEditableExpression = ifElse(isNonEditableExpression(oDataFieldConverted), false, isEditable);
    }
    const oProperty = isPathAnnotationExpression(oPropertyPath) ? oPropertyPath.$target : oPropertyPath;
    const relativePath = getRelativePaths(oDataModelObjectPath);
    // Editability depends on the field control expression
    // If the Field control is statically in ReadOnly or Inapplicable (disabled) -> not editable
    // If the property is a key -> not editable except in creation if not computed
    // If the property is computed -> not editable
    // If the property is not updatable -> not editable
    // If the property is immutable -> not editable except in creation
    // If the Field control is a path resolving to ReadOnly or Inapplicable (disabled) (<= 1) -> not editable
    // Else, to be editable you need
    // immutable and key while in the creation row
    // ui/isEditable
    const isPathUpdatableExpression = isPathUpdatable(oDataModelObjectPath, {
      propertyPath: oPropertyPath,
      pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, oDataModelObjectPath.convertedTypes, navigationPaths)
    });
    if (compileExpression(isPathUpdatableExpression) === "false" && considerUpdateRestrictions) {
      return bAsObject ? isPathUpdatableExpression : "false";
    }
    const editableExpression = ifElse(or(and(not(isPathUpdatableExpression), considerUpdateRestrictions), isComputed(oProperty), isKey(oProperty), isImmutable(oProperty), isNonEditableExpression(oProperty, relativePath)), ifElse(or(isComputed(oProperty), isNonEditableExpression(oProperty, relativePath)), false, UI.IsTransientBinding), isEditable);
    if (bAsObject) {
      return and(editableExpression, dataFieldEditableExpression);
    }
    return compileExpression(and(editableExpression, dataFieldEditableExpression));
  };
  _exports.getEditableExpression = getEditableExpression;
  const getCollaborationExpression = function (dataModelObjectPath, formatter) {
    var _dataModelObjectPath$;
    const objectPath = getTargetObjectPath(dataModelObjectPath);
    const activityExpression = pathInModel(`/collaboration/activities${objectPath}`, "internal");
    const keys = dataModelObjectPath === null || dataModelObjectPath === void 0 ? void 0 : (_dataModelObjectPath$ = dataModelObjectPath.targetEntityType) === null || _dataModelObjectPath$ === void 0 ? void 0 : _dataModelObjectPath$.keys;
    const keysExpressions = [];
    keys === null || keys === void 0 ? void 0 : keys.forEach(function (key) {
      const keyExpression = pathInModel(key.name);
      keysExpressions.push(keyExpression);
    });
    return formatResult([activityExpression, ...keysExpressions], formatter);
  };
  _exports.getCollaborationExpression = getCollaborationExpression;
  const getEnabledExpressionAsObject = function (oPropertyPath, oDataFieldConverted, oDataModelObjectPath) {
    return getEnabledExpression(oPropertyPath, oDataFieldConverted, true, oDataModelObjectPath);
  };
  /**
   * Create the expression to generate an "enabled" Boolean value.
   *
   * @param oPropertyPath The input property
   * @param oDataFieldConverted The DataFieldConverted Object to read the fieldControl annotation
   * @param bAsObject Whether or not this should be returned as an object or a binding string
   * @param oDataModelObjectPath
   * @returns The binding expression to determine if a property is enabled or not
   */
  _exports.getEnabledExpressionAsObject = getEnabledExpressionAsObject;
  const getEnabledExpression = function (oPropertyPath, oDataFieldConverted) {
    let bAsObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let oDataModelObjectPath = arguments.length > 3 ? arguments[3] : undefined;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      return compileExpression(true);
    }
    let relativePath;
    if (oDataModelObjectPath) {
      relativePath = getRelativePaths(oDataModelObjectPath);
    }
    let dataFieldEnabledExpression = constant(true);
    if (oDataFieldConverted !== null) {
      dataFieldEnabledExpression = ifElse(isDisabledExpression(oDataFieldConverted), false, true);
    }
    const oProperty = isPathAnnotationExpression(oPropertyPath) ? oPropertyPath.$target : oPropertyPath;
    // Enablement depends on the field control expression
    // If the Field control is statically in Inapplicable (disabled) -> not enabled
    const enabledExpression = ifElse(isDisabledExpression(oProperty, relativePath), false, true);
    if (bAsObject) {
      return and(enabledExpression, dataFieldEnabledExpression);
    }
    return compileExpression(and(enabledExpression, dataFieldEnabledExpression));
  };

  /**
   * Create the expression to generate an "editMode" enum value.
   *
   * @param propertyPath The input property
   * @param dataModelObjectPath The list of data model objects that are involved to reach that property
   * @param measureReadOnly Whether we should set UoM / currency field mode to read only
   * @param asObject Whether we should return this as an expression or as a string
   * @param dataFieldConverted The dataField object
   * @param isEditable Whether or not UI.IsEditable be considered.
   * @returns The binding expression representing the current property edit mode, compliant with the MDC Field definition of editMode.
   */
  _exports.getEnabledExpression = getEnabledExpression;
  const getEditMode = function (propertyPath, dataModelObjectPath) {
    let measureReadOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let asObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let dataFieldConverted = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
    let isEditable = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : UI.IsEditable;
    if (!propertyPath || typeof propertyPath === "string" || (dataFieldConverted === null || dataFieldConverted === void 0 ? void 0 : dataFieldConverted.$Type) === "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath") {
      return EditMode.Display;
    }
    const property = isPathAnnotationExpression(propertyPath) ? propertyPath.$target : propertyPath;
    const relativePath = getRelativePaths(dataModelObjectPath);
    const isPathUpdatableExpression = isPathUpdatable(dataModelObjectPath, {
      propertyPath: property,
      pathVisitor: (path, navigationPaths) => singletonPathVisitor(path, dataModelObjectPath.convertedTypes, navigationPaths)
    });

    // we get the editable Expression without considering update Restrictions because they are handled separately
    const editableExpression = getEditableExpressionAsObject(propertyPath, dataFieldConverted, dataModelObjectPath, isEditable, false);
    const enabledExpression = getEnabledExpressionAsObject(propertyPath, dataFieldConverted, dataModelObjectPath);
    const associatedCurrencyProperty = getAssociatedCurrencyProperty(property);
    const unitProperty = associatedCurrencyProperty || getAssociatedUnitProperty(property);
    let resultExpression = constant(EditMode.Editable);
    if (unitProperty) {
      const isUnitReadOnly = isReadOnlyExpression(unitProperty, relativePath);
      resultExpression = ifElse(or(isUnitReadOnly, isComputed(unitProperty), and(isImmutable(unitProperty), not(UI.IsTransientBinding)), measureReadOnly), ifElse(!isConstant(isUnitReadOnly) && isUnitReadOnly, EditMode.EditableReadOnly, EditMode.EditableDisplay), EditMode.Editable);
    }
    const readOnlyExpression = or(isReadOnlyExpression(property, relativePath), isReadOnlyExpression(dataFieldConverted));

    // if there are update Restrictions it is always display mode
    const editModeExpression = ifElse(or(isPathUpdatableExpression, UI.IsTransientBinding), ifElse(enabledExpression, ifElse(editableExpression, resultExpression, ifElse(and(!isConstant(readOnlyExpression) && readOnlyExpression, isEditable), EditMode.ReadOnly, EditMode.Display)), ifElse(isEditable, EditMode.Disabled, EditMode.Display)), EditMode.Display);
    if (asObject) {
      return editModeExpression;
    }
    return compileExpression(editModeExpression);
  };
  _exports.getEditMode = getEditMode;
  const hasValidAnalyticalCurrencyOrUnit = function (oPropertyDataModelObjectPath) {
    var _oPropertyDefinition$, _oPropertyDefinition$2, _oPropertyDefinition$3, _oPropertyDefinition$4;
    const oPropertyDefinition = oPropertyDataModelObjectPath.targetObject;
    const currency = (_oPropertyDefinition$ = oPropertyDefinition.annotations) === null || _oPropertyDefinition$ === void 0 ? void 0 : (_oPropertyDefinition$2 = _oPropertyDefinition$.Measures) === null || _oPropertyDefinition$2 === void 0 ? void 0 : _oPropertyDefinition$2.ISOCurrency;
    const measure = currency ? currency : (_oPropertyDefinition$3 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$3 === void 0 ? void 0 : (_oPropertyDefinition$4 = _oPropertyDefinition$3.Measures) === null || _oPropertyDefinition$4 === void 0 ? void 0 : _oPropertyDefinition$4.Unit;
    if (measure) {
      return compileExpression(or(isTruthy(getExpressionFromAnnotation(measure)), not(UI.IsTotal)));
    } else {
      return compileExpression(constant(true));
    }
  };
  _exports.hasValidAnalyticalCurrencyOrUnit = hasValidAnalyticalCurrencyOrUnit;
  const ifUnitEditable = function (oPropertyPath, sEditableValue, sNonEditableValue) {
    const oProperty = isPathAnnotationExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    const unitProperty = getAssociatedCurrencyProperty(oProperty) || getAssociatedUnitProperty(oProperty);
    if (!unitProperty) {
      return compileExpression(sNonEditableValue);
    }
    const isUnitReadOnly = isReadOnlyExpression(unitProperty);
    const editableExpression = and(or(!isConstant(isUnitReadOnly), not(isUnitReadOnly)), not(isComputed(unitProperty)), not(isImmutable(unitProperty)));
    return compileExpression(ifElse(editableExpression, sEditableValue, sNonEditableValue));
  };
  _exports.ifUnitEditable = ifUnitEditable;
  const getFieldDisplay = function (oPropertyPath, sTargetDisplayMode, oComputedEditMode) {
    const oProperty = isPathAnnotationExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    return hasValueHelp(oProperty) ? compileExpression(sTargetDisplayMode) : compileExpression(ifElse(equal(oComputedEditMode, "Editable"), "Value", sTargetDisplayMode));
  };
  _exports.getFieldDisplay = getFieldDisplay;
  const getTypeConfig = function (oProperty, dataType) {
    var _propertyTypeConfig$t, _propertyTypeConfig$t2, _propertyTypeConfig$t3, _propertyTypeConfig$t4;
    const oTargetMapping = EDM_TYPE_MAPPING[oProperty === null || oProperty === void 0 ? void 0 : oProperty.type] || (dataType ? EDM_TYPE_MAPPING[dataType] : undefined);
    const propertyTypeConfig = {
      type: oTargetMapping.type,
      constraints: {},
      formatOptions: {}
    };
    if (isProperty(oProperty)) {
      var _oTargetMapping$const, _oTargetMapping$const2, _oTargetMapping$const3, _oTargetMapping$const4, _oTargetMapping$const5, _oProperty$annotation, _oProperty$annotation2, _oProperty$annotation3, _oProperty$annotation4, _oTargetMapping$const6, _oProperty$annotation5, _oProperty$annotation6, _oProperty$annotation7, _oProperty$annotation8, _oTargetMapping$const7, _oProperty$annotation9, _oProperty$annotation10, _oTargetMapping$const8;
      propertyTypeConfig.constraints = {
        scale: (_oTargetMapping$const = oTargetMapping.constraints) !== null && _oTargetMapping$const !== void 0 && _oTargetMapping$const.$Scale ? oProperty.scale : undefined,
        precision: (_oTargetMapping$const2 = oTargetMapping.constraints) !== null && _oTargetMapping$const2 !== void 0 && _oTargetMapping$const2.$Precision ? oProperty.precision : undefined,
        maxLength: (_oTargetMapping$const3 = oTargetMapping.constraints) !== null && _oTargetMapping$const3 !== void 0 && _oTargetMapping$const3.$MaxLength ? oProperty.maxLength : undefined,
        nullable: (_oTargetMapping$const4 = oTargetMapping.constraints) !== null && _oTargetMapping$const4 !== void 0 && _oTargetMapping$const4.$Nullable ? oProperty.nullable : undefined,
        minimum: (_oTargetMapping$const5 = oTargetMapping.constraints) !== null && _oTargetMapping$const5 !== void 0 && _oTargetMapping$const5["@Org.OData.Validation.V1.Minimum/$Decimal"] && !isNaN((_oProperty$annotation = oProperty.annotations) === null || _oProperty$annotation === void 0 ? void 0 : (_oProperty$annotation2 = _oProperty$annotation.Validation) === null || _oProperty$annotation2 === void 0 ? void 0 : _oProperty$annotation2.Minimum) ? `${(_oProperty$annotation3 = oProperty.annotations) === null || _oProperty$annotation3 === void 0 ? void 0 : (_oProperty$annotation4 = _oProperty$annotation3.Validation) === null || _oProperty$annotation4 === void 0 ? void 0 : _oProperty$annotation4.Minimum}` : undefined,
        maximum: (_oTargetMapping$const6 = oTargetMapping.constraints) !== null && _oTargetMapping$const6 !== void 0 && _oTargetMapping$const6["@Org.OData.Validation.V1.Maximum/$Decimal"] && !isNaN((_oProperty$annotation5 = oProperty.annotations) === null || _oProperty$annotation5 === void 0 ? void 0 : (_oProperty$annotation6 = _oProperty$annotation5.Validation) === null || _oProperty$annotation6 === void 0 ? void 0 : _oProperty$annotation6.Maximum) ? `${(_oProperty$annotation7 = oProperty.annotations) === null || _oProperty$annotation7 === void 0 ? void 0 : (_oProperty$annotation8 = _oProperty$annotation7.Validation) === null || _oProperty$annotation8 === void 0 ? void 0 : _oProperty$annotation8.Maximum}` : undefined,
        isDigitSequence: propertyTypeConfig.type === "sap.ui.model.odata.type.String" && (_oTargetMapping$const7 = oTargetMapping.constraints) !== null && _oTargetMapping$const7 !== void 0 && _oTargetMapping$const7["@com.sap.vocabularies.Common.v1.IsDigitSequence"] && (_oProperty$annotation9 = oProperty.annotations) !== null && _oProperty$annotation9 !== void 0 && (_oProperty$annotation10 = _oProperty$annotation9.Common) !== null && _oProperty$annotation10 !== void 0 && _oProperty$annotation10.IsDigitSequence ? true : undefined,
        V4: (_oTargetMapping$const8 = oTargetMapping.constraints) !== null && _oTargetMapping$const8 !== void 0 && _oTargetMapping$const8.$V4 ? true : undefined
      };
    }
    propertyTypeConfig.formatOptions = {
      parseAsString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t = propertyTypeConfig.type) === null || _propertyTypeConfig$t === void 0 ? void 0 : _propertyTypeConfig$t.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t2 = propertyTypeConfig.type) === null || _propertyTypeConfig$t2 === void 0 ? void 0 : _propertyTypeConfig$t2.indexOf("sap.ui.model.odata.type.Double")) === 0 ? false : undefined,
      emptyString: (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t3 = propertyTypeConfig.type) === null || _propertyTypeConfig$t3 === void 0 ? void 0 : _propertyTypeConfig$t3.indexOf("sap.ui.model.odata.type.Int")) === 0 || (propertyTypeConfig === null || propertyTypeConfig === void 0 ? void 0 : (_propertyTypeConfig$t4 = propertyTypeConfig.type) === null || _propertyTypeConfig$t4 === void 0 ? void 0 : _propertyTypeConfig$t4.indexOf("sap.ui.model.odata.type.Double")) === 0 ? "" : undefined,
      parseKeepsEmptyString: propertyTypeConfig.type === "sap.ui.model.odata.type.String" ? true : undefined
    };
    return propertyTypeConfig;
  };
  _exports.getTypeConfig = getTypeConfig;
  const getBindingWithUnitOrCurrency = function (oPropertyDataModelPath, propertyBindingExpression, ignoreUnitConstraint, formatOptions) {
    var _oPropertyDefinition$5, _oPropertyDefinition$6, _unit, _oPropertyDefinition$7, _oPropertyDefinition$8;
    const oPropertyDefinition = oPropertyDataModelPath.targetObject;
    let unit = (_oPropertyDefinition$5 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$5 === void 0 ? void 0 : (_oPropertyDefinition$6 = _oPropertyDefinition$5.Measures) === null || _oPropertyDefinition$6 === void 0 ? void 0 : _oPropertyDefinition$6.Unit;
    const relativeLocation = getRelativePaths(oPropertyDataModelPath);
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
    if (((_unit = unit) === null || _unit === void 0 ? void 0 : _unit.toString()) === "%") {
      if ((formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.showMeasure) === false) {
        return propertyBindingExpression;
      }
      return formatResult([propertyBindingExpression], valueFormatters.formatWithPercentage);
    }
    const complexType = unit ? "sap.ui.model.odata.type.Unit" : "sap.ui.model.odata.type.Currency";
    unit = unit ? unit : (_oPropertyDefinition$7 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$7 === void 0 ? void 0 : (_oPropertyDefinition$8 = _oPropertyDefinition$7.Measures) === null || _oPropertyDefinition$8 === void 0 ? void 0 : _oPropertyDefinition$8.ISOCurrency;
    const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation), ignoreUnitConstraint) : getExpressionFromAnnotation(unit, relativeLocation);
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, formatOptions);
  };
  _exports.getBindingWithUnitOrCurrency = getBindingWithUnitOrCurrency;
  const getBindingForUnitOrCurrency = function (oPropertyDataModelPath) {
    var _oPropertyDefinition$9, _oPropertyDefinition$10, _unit2, _oPropertyDefinition$11, _oPropertyDefinition$12;
    const oPropertyDefinition = oPropertyDataModelPath.targetObject;
    let unit = (_oPropertyDefinition$9 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$9 === void 0 ? void 0 : (_oPropertyDefinition$10 = _oPropertyDefinition$9.Measures) === null || _oPropertyDefinition$10 === void 0 ? void 0 : _oPropertyDefinition$10.Unit;
    if (((_unit2 = unit) === null || _unit2 === void 0 ? void 0 : _unit2.toString()) === "%") {
      return constant("%");
    }
    const relativeLocation = getRelativePaths(oPropertyDataModelPath);
    const complexType = unit ? "sap.ui.model.odata.type.Unit" : "sap.ui.model.odata.type.Currency";
    unit = unit ? unit : (_oPropertyDefinition$11 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$11 === void 0 ? void 0 : (_oPropertyDefinition$12 = _oPropertyDefinition$11.Measures) === null || _oPropertyDefinition$12 === void 0 ? void 0 : _oPropertyDefinition$12.ISOCurrency;
    const unitBindingExpression = unit.$target ? formatWithTypeInformation(unit.$target, getExpressionFromAnnotation(unit, relativeLocation)) : getExpressionFromAnnotation(unit, relativeLocation);
    let propertyBindingExpression = pathInModel(getContextRelativeTargetObjectPath(oPropertyDataModelPath));
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression, true);
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, {
      parseKeepsEmptyString: true,
      emptyString: "",
      showNumber: false
    });
  };
  _exports.getBindingForUnitOrCurrency = getBindingForUnitOrCurrency;
  const getBindingWithTimezone = function (oPropertyDataModelPath, propertyBindingExpression) {
    var _oPropertyDefinition$13, _oPropertyDefinition$14;
    let ignoreUnitConstraint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let hideTimezoneForEmptyValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let dateFormatOptions = arguments.length > 4 ? arguments[4] : undefined;
    const oPropertyDefinition = oPropertyDataModelPath.targetObject;
    const timezone = (_oPropertyDefinition$13 = oPropertyDefinition.annotations) === null || _oPropertyDefinition$13 === void 0 ? void 0 : (_oPropertyDefinition$14 = _oPropertyDefinition$13.Common) === null || _oPropertyDefinition$14 === void 0 ? void 0 : _oPropertyDefinition$14.Timezone;
    const relativeLocation = getRelativePaths(oPropertyDataModelPath);
    propertyBindingExpression = formatWithTypeInformation(oPropertyDefinition, propertyBindingExpression);
    const complexType = "sap.fe.core.type.DateTimeWithTimezone";
    const unitBindingExpression = timezone.$target ? formatWithTypeInformation(timezone.$target, getExpressionFromAnnotation(timezone, relativeLocation), ignoreUnitConstraint) : getExpressionFromAnnotation(timezone, relativeLocation);
    let formatOptions = {};
    if (hideTimezoneForEmptyValues) {
      formatOptions = {
        showTimezoneForEmptyValues: false
      };
    }
    if (dateFormatOptions !== null && dateFormatOptions !== void 0 && dateFormatOptions.showTime) {
      formatOptions = {
        ...formatOptions,
        ...{
          showTime: dateFormatOptions.showTime === "false" ? false : true
        }
      };
    }
    if (dateFormatOptions !== null && dateFormatOptions !== void 0 && dateFormatOptions.showDate) {
      formatOptions = {
        ...formatOptions,
        ...{
          showDate: dateFormatOptions.showDate === "false" ? false : true
        }
      };
    }
    if (dateFormatOptions !== null && dateFormatOptions !== void 0 && dateFormatOptions.showTimezone) {
      formatOptions = {
        ...formatOptions,
        ...{
          showTimezone: dateFormatOptions.showTimezone === "false" ? false : true
        }
      };
    }
    return addTypeInformation([propertyBindingExpression, unitBindingExpression], complexType, undefined, formatOptions);
  };
  _exports.getBindingWithTimezone = getBindingWithTimezone;
  const getAlignmentExpression = function (oComputedEditMode) {
    let sAlignDisplay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "Begin";
    let sAlignEdit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Begin";
    return compileExpression(ifElse(equal(oComputedEditMode, "Display"), sAlignDisplay, sAlignEdit));
  };

  /**
   * Formatter helper to retrieve the converterContext from the metamodel context.
   *
   * @param oContext The original metamodel context
   * @param oInterface The current templating context
   * @returns The ConverterContext representing that object
   */
  _exports.getAlignmentExpression = getAlignmentExpression;
  const getConverterContext = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return convertMetaModelContext(oInterface.context);
    }
    return null;
  };
  getConverterContext.requiresIContext = true;

  /**
   * Formatter helper to retrieve the data model objects that are involved from the metamodel context.
   *
   * @param oContext The original ODataMetaModel context
   * @param oInterface The current templating context
   * @returns An array of entitysets and navproperties that are involved to get to a specific object in the metamodel
   */
  _exports.getConverterContext = getConverterContext;
  const getDataModelObjectPath = function (oContext, oInterface) {
    if (oInterface && oInterface.context) {
      return getInvolvedDataModelObjects(oInterface.context);
    }
    return null;
  };
  getDataModelObjectPath.requiresIContext = true;

  /**
   * Checks if the referenced property is part of a 1..n navigation.
   *
   * @param oDataModelPath The data model path to check
   * @returns True if the property is part of a 1..n navigation
   */
  _exports.getDataModelObjectPath = getDataModelObjectPath;
  const isMultiValueField = function (oDataModelPath) {
    var _oDataModelPath$navig;
    if ((_oDataModelPath$navig = oDataModelPath.navigationProperties) !== null && _oDataModelPath$navig !== void 0 && _oDataModelPath$navig.length) {
      const hasOneToManyNavigation = (oDataModelPath === null || oDataModelPath === void 0 ? void 0 : oDataModelPath.navigationProperties.findIndex(oNav => {
        if (isMultipleNavigationProperty(oNav)) {
          var _oDataModelPath$conte, _oDataModelPath$conte2;
          if ((_oDataModelPath$conte = oDataModelPath.contextLocation) !== null && _oDataModelPath$conte !== void 0 && (_oDataModelPath$conte2 = _oDataModelPath$conte.navigationProperties) !== null && _oDataModelPath$conte2 !== void 0 && _oDataModelPath$conte2.length) {
            var _oDataModelPath$conte3;
            //we check the one to many nav is not already part of the context
            return ((_oDataModelPath$conte3 = oDataModelPath.contextLocation) === null || _oDataModelPath$conte3 === void 0 ? void 0 : _oDataModelPath$conte3.navigationProperties.findIndex(oContextNav => oContextNav.name === oNav.name)) === -1;
          }
          return true;
        }
        return false;
      })) > -1;
      if (hasOneToManyNavigation) {
        return true;
      }
    }
    return false;
  };
  _exports.isMultiValueField = isMultiValueField;
  const getRequiredExpressionAsObject = function (oPropertyPath, oDataFieldConverted) {
    let forceEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    return getRequiredExpression(oPropertyPath, oDataFieldConverted, forceEditMode, true);
  };
  _exports.getRequiredExpressionAsObject = getRequiredExpressionAsObject;
  const getRequiredExpression = function (oPropertyPath, oDataFieldConverted) {
    let forceEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let bAsObject = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    let oRequiredProperties = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    let dataModelObjectPath = arguments.length > 5 ? arguments[5] : undefined;
    const aRequiredPropertiesFromInsertRestrictions = oRequiredProperties.requiredPropertiesFromInsertRestrictions;
    const aRequiredPropertiesFromUpdateRestrictions = oRequiredProperties.requiredPropertiesFromUpdateRestrictions;
    if (!oPropertyPath || typeof oPropertyPath === "string") {
      if (bAsObject) {
        return constant(false);
      }
      return compileExpression(constant(false));
    }
    let relativePath;
    if (dataModelObjectPath) {
      relativePath = getRelativePaths(dataModelObjectPath);
    }
    let dataFieldRequiredExpression = constant(false);
    if (oDataFieldConverted !== null && oDataFieldConverted !== undefined) {
      dataFieldRequiredExpression = isRequiredExpression(oDataFieldConverted);
    }
    let requiredPropertyFromInsertRestrictionsExpression = constant(false);
    let requiredPropertyFromUpdateRestrictionsExpression = constant(false);
    const oProperty = isPathAnnotationExpression(oPropertyPath) && oPropertyPath.$target || oPropertyPath;
    // Enablement depends on the field control expression
    // If the Field control is statically in Inapplicable (disabled) -> not enabled
    const requiredExpression = isRequiredExpression(oProperty, relativePath);
    const editMode = forceEditMode || UI.IsEditable;
    if (aRequiredPropertiesFromInsertRestrictions !== null && aRequiredPropertiesFromInsertRestrictions !== void 0 && aRequiredPropertiesFromInsertRestrictions.includes(oPropertyPath.name)) {
      requiredPropertyFromInsertRestrictionsExpression = UI.IsCreateMode;
    }
    if (aRequiredPropertiesFromUpdateRestrictions !== null && aRequiredPropertiesFromUpdateRestrictions !== void 0 && aRequiredPropertiesFromUpdateRestrictions.includes(oPropertyPath.name)) {
      requiredPropertyFromUpdateRestrictionsExpression = and(UI.IsEditable, not(UI.IsCreateMode));
    }
    const returnExpression = or(and(or(requiredExpression, dataFieldRequiredExpression), editMode), requiredPropertyFromInsertRestrictionsExpression, requiredPropertyFromUpdateRestrictionsExpression);
    if (bAsObject) {
      return returnExpression;
    }
    return compileExpression(returnExpression);
  };
  _exports.getRequiredExpression = getRequiredExpression;
  const getRequiredExpressionForConnectedDataField = function (dataFieldObjectPath) {
    var _dataFieldObjectPath$, _dataFieldObjectPath$2;
    const data = dataFieldObjectPath === null || dataFieldObjectPath === void 0 ? void 0 : (_dataFieldObjectPath$ = dataFieldObjectPath.targetObject) === null || _dataFieldObjectPath$ === void 0 ? void 0 : (_dataFieldObjectPath$2 = _dataFieldObjectPath$.$target) === null || _dataFieldObjectPath$2 === void 0 ? void 0 : _dataFieldObjectPath$2.Data;
    const keys = Object.keys(data);
    const dataFields = [];
    let propertyPath;
    const isRequiredExpressions = [];
    for (const key of keys) {
      if (data[key]["$Type"] && data[key]["$Type"].indexOf("DataField") > -1) {
        dataFields.push(data[key]);
      }
    }
    for (const dataField of dataFields) {
      switch (dataField.$Type) {
        case "com.sap.vocabularies.UI.v1.DataField":
        case "com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":
        case "com.sap.vocabularies.UI.v1.DataFieldWithUrl":
        case "com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":
        case "com.sap.vocabularies.UI.v1.DataFieldWithAction":
          if (typeof dataField.Value === "object") {
            propertyPath = dataField.Value.$target;
          }
          break;
        case "com.sap.vocabularies.UI.v1.DataFieldForAnnotation":
          if (dataField.Target.$target) {
            if (dataField.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataField" || dataField.Target.$target.$Type === "com.sap.vocabularies.UI.v1.DataPointType") {
              if (typeof dataField.Target.$target.Value === "object") {
                propertyPath = dataField.Target.$target.Value.$target;
              }
            } else {
              if (typeof dataField.Target === "object") {
                propertyPath = dataField.Target.$target;
              }
              break;
            }
          }
          break;
        // no default
      }

      isRequiredExpressions.push(getRequiredExpressionAsObject(propertyPath, dataField, false));
    }
    return compileExpression(or(...isRequiredExpressions));
  };
  _exports.getRequiredExpressionForConnectedDataField = getRequiredExpressionForConnectedDataField;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/templating/UIFormatters", ["sap/fe/core/converters/helpers/BindingHelper","sap/fe/core/converters/MetaModelConverter","sap/fe/core/formatters/ValueFormatter","sap/fe/core/helpers/BindingToolkit","sap/fe/core/helpers/TypeGuards","sap/fe/core/templating/DataModelPathHelper","sap/fe/core/templating/DisplayModeFormatter","sap/fe/core/templating/FieldControlHelper","sap/fe/core/templating/PropertyHelper","sap/ui/mdc/enum/EditMode"],function(e,t,n,i,o,a,r,l,s,d){"use strict";var u={};var c=s.isKey;var v=s.isImmutable;var f=s.isComputed;var p=s.hasValueHelp;var g=s.getAssociatedUnitProperty;var m=s.getAssociatedCurrencyProperty;var y=l.isRequiredExpression;var h=l.isReadOnlyExpression;var b=l.isNonEditableExpression;var E=l.isDisabledExpression;var x=a.isPathUpdatable;var D=a.getTargetObjectPath;var T=a.getRelativePaths;var I=a.getContextRelativeTargetObjectPath;var $=o.isProperty;var O=o.isPathAnnotationExpression;var M=o.isMultipleNavigationProperty;var P=i.pathInModel;var C=i.or;var U=i.not;var V=i.isTruthy;var F=i.isConstant;var j=i.ifElse;var S=i.getExpressionFromAnnotation;var w=i.formatWithTypeInformation;var A=i.formatResult;var q=i.equal;var N=i.EDM_TYPE_MAPPING;var R=i.constant;var B=i.compileExpression;var W=i.and;var z=i.addTypeInformation;var k=t.getInvolvedDataModelObjects;var H=t.convertMetaModelContext;var L=e.UI;var K=e.singletonPathVisitor;const G=function(e){return r.getDisplayMode(e.targetObject,e)};u.getDisplayMode=G;const _=function(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let n=arguments.length>2?arguments[2]:undefined;let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:L.IsEditable;let o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:true;return Y(e,t,n,true,i,o)};u.getEditableExpressionAsObject=_;const Y=function(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;let n=arguments.length>2?arguments[2]:undefined;let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:L.IsEditable;let a=arguments.length>5&&arguments[5]!==undefined?arguments[5]:true;if(!e||typeof e==="string"){return B(false)}let r=R(true);if(t!==null){r=j(b(t),false,o)}const l=O(e)?e.$target:e;const s=T(n);const d=x(n,{propertyPath:e,pathVisitor:(e,t)=>K(e,n.convertedTypes,t)});if(B(d)==="false"&&a){return i?d:"false"}const u=j(C(W(U(d),a),f(l),c(l),v(l),b(l,s)),j(C(f(l),b(l,s)),false,L.IsTransientBinding),o);if(i){return W(u,r)}return B(W(u,r))};u.getEditableExpression=Y;const J=function(e,t){var n;const i=D(e);const o=P(`/collaboration/activities${i}`,"internal");const a=e===null||e===void 0?void 0:(n=e.targetEntityType)===null||n===void 0?void 0:n.keys;const r=[];a===null||a===void 0?void 0:a.forEach(function(e){const t=P(e.name);r.push(t)});return A([o,...r],t)};u.getCollaborationExpression=J;const Q=function(e,t,n){return X(e,t,true,n)};u.getEnabledExpressionAsObject=Q;const X=function(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let i=arguments.length>3?arguments[3]:undefined;if(!e||typeof e==="string"){return B(true)}let o;if(i){o=T(i)}let a=R(true);if(t!==null){a=j(E(t),false,true)}const r=O(e)?e.$target:e;const l=j(E(r,o),false,true);if(n){return W(l,a)}return B(W(l,a))};u.getEnabledExpression=X;const Z=function(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:null;let a=arguments.length>5&&arguments[5]!==undefined?arguments[5]:L.IsEditable;if(!e||typeof e==="string"||(o===null||o===void 0?void 0:o.$Type)==="com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath"){return d.Display}const r=O(e)?e.$target:e;const l=T(t);const s=x(t,{propertyPath:r,pathVisitor:(e,n)=>K(e,t.convertedTypes,n)});const u=_(e,o,t,a,false);const c=Q(e,o,t);const p=m(r);const y=p||g(r);let b=R(d.Editable);if(y){const e=h(y,l);b=j(C(e,f(y),W(v(y),U(L.IsTransientBinding)),n),j(!F(e)&&e,d.EditableReadOnly,d.EditableDisplay),d.Editable)}const E=C(h(r,l),h(o));const D=j(C(s,L.IsTransientBinding),j(c,j(u,b,j(W(!F(E)&&E,a),d.ReadOnly,d.Display)),j(a,d.Disabled,d.Display)),d.Display);if(i){return D}return B(D)};u.getEditMode=Z;const ee=function(e){var t,n,i,o;const a=e.targetObject;const r=(t=a.annotations)===null||t===void 0?void 0:(n=t.Measures)===null||n===void 0?void 0:n.ISOCurrency;const l=r?r:(i=a.annotations)===null||i===void 0?void 0:(o=i.Measures)===null||o===void 0?void 0:o.Unit;if(l){return B(C(V(S(l)),U(L.IsTotal)))}else{return B(R(true))}};u.hasValidAnalyticalCurrencyOrUnit=ee;const te=function(e,t,n){const i=O(e)&&e.$target||e;const o=m(i)||g(i);if(!o){return B(n)}const a=h(o);const r=W(C(!F(a),U(a)),U(f(o)),U(v(o)));return B(j(r,t,n))};u.ifUnitEditable=te;const ne=function(e,t,n){const i=O(e)&&e.$target||e;return p(i)?B(t):B(j(q(n,"Editable"),"Value",t))};u.getFieldDisplay=ne;const ie=function(e,t){var n,i,o,a;const r=N[e===null||e===void 0?void 0:e.type]||(t?N[t]:undefined);const l={type:r.type,constraints:{},formatOptions:{}};if($(e)){var s,d,u,c,v,f,p,g,m,y,h,b,E,x,D,T,I,O;l.constraints={scale:(s=r.constraints)!==null&&s!==void 0&&s.$Scale?e.scale:undefined,precision:(d=r.constraints)!==null&&d!==void 0&&d.$Precision?e.precision:undefined,maxLength:(u=r.constraints)!==null&&u!==void 0&&u.$MaxLength?e.maxLength:undefined,nullable:(c=r.constraints)!==null&&c!==void 0&&c.$Nullable?e.nullable:undefined,minimum:(v=r.constraints)!==null&&v!==void 0&&v["@Org.OData.Validation.V1.Minimum/$Decimal"]&&!isNaN((f=e.annotations)===null||f===void 0?void 0:(p=f.Validation)===null||p===void 0?void 0:p.Minimum)?`${(g=e.annotations)===null||g===void 0?void 0:(m=g.Validation)===null||m===void 0?void 0:m.Minimum}`:undefined,maximum:(y=r.constraints)!==null&&y!==void 0&&y["@Org.OData.Validation.V1.Maximum/$Decimal"]&&!isNaN((h=e.annotations)===null||h===void 0?void 0:(b=h.Validation)===null||b===void 0?void 0:b.Maximum)?`${(E=e.annotations)===null||E===void 0?void 0:(x=E.Validation)===null||x===void 0?void 0:x.Maximum}`:undefined,isDigitSequence:l.type==="sap.ui.model.odata.type.String"&&(D=r.constraints)!==null&&D!==void 0&&D["@com.sap.vocabularies.Common.v1.IsDigitSequence"]&&(T=e.annotations)!==null&&T!==void 0&&(I=T.Common)!==null&&I!==void 0&&I.IsDigitSequence?true:undefined,V4:(O=r.constraints)!==null&&O!==void 0&&O.$V4?true:undefined}}l.formatOptions={parseAsString:(l===null||l===void 0?void 0:(n=l.type)===null||n===void 0?void 0:n.indexOf("sap.ui.model.odata.type.Int"))===0||(l===null||l===void 0?void 0:(i=l.type)===null||i===void 0?void 0:i.indexOf("sap.ui.model.odata.type.Double"))===0?false:undefined,emptyString:(l===null||l===void 0?void 0:(o=l.type)===null||o===void 0?void 0:o.indexOf("sap.ui.model.odata.type.Int"))===0||(l===null||l===void 0?void 0:(a=l.type)===null||a===void 0?void 0:a.indexOf("sap.ui.model.odata.type.Double"))===0?"":undefined,parseKeepsEmptyString:l.type==="sap.ui.model.odata.type.String"?true:undefined};return l};u.getTypeConfig=ie;const oe=function(e,t,i,o){var a,r,l,s,d;const u=e.targetObject;let c=(a=u.annotations)===null||a===void 0?void 0:(r=a.Measures)===null||r===void 0?void 0:r.Unit;const v=T(e);t=w(u,t);if(((l=c)===null||l===void 0?void 0:l.toString())==="%"){if((o===null||o===void 0?void 0:o.showMeasure)===false){return t}return A([t],n.formatWithPercentage)}const f=c?"sap.ui.model.odata.type.Unit":"sap.ui.model.odata.type.Currency";c=c?c:(s=u.annotations)===null||s===void 0?void 0:(d=s.Measures)===null||d===void 0?void 0:d.ISOCurrency;const p=c.$target?w(c.$target,S(c,v),i):S(c,v);return z([t,p],f,undefined,o)};u.getBindingWithUnitOrCurrency=oe;const ae=function(e){var t,n,i,o,a;const r=e.targetObject;let l=(t=r.annotations)===null||t===void 0?void 0:(n=t.Measures)===null||n===void 0?void 0:n.Unit;if(((i=l)===null||i===void 0?void 0:i.toString())==="%"){return R("%")}const s=T(e);const d=l?"sap.ui.model.odata.type.Unit":"sap.ui.model.odata.type.Currency";l=l?l:(o=r.annotations)===null||o===void 0?void 0:(a=o.Measures)===null||a===void 0?void 0:a.ISOCurrency;const u=l.$target?w(l.$target,S(l,s)):S(l,s);let c=P(I(e));c=w(r,c,true);return z([c,u],d,undefined,{parseKeepsEmptyString:true,emptyString:"",showNumber:false})};u.getBindingForUnitOrCurrency=ae;const re=function(e,t){var n,i;let o=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let a=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let r=arguments.length>4?arguments[4]:undefined;const l=e.targetObject;const s=(n=l.annotations)===null||n===void 0?void 0:(i=n.Common)===null||i===void 0?void 0:i.Timezone;const d=T(e);t=w(l,t);const u="sap.fe.core.type.DateTimeWithTimezone";const c=s.$target?w(s.$target,S(s,d),o):S(s,d);let v={};if(a){v={showTimezoneForEmptyValues:false}}if(r!==null&&r!==void 0&&r.showTime){v={...v,...{showTime:r.showTime==="false"?false:true}}}if(r!==null&&r!==void 0&&r.showDate){v={...v,...{showDate:r.showDate==="false"?false:true}}}if(r!==null&&r!==void 0&&r.showTimezone){v={...v,...{showTimezone:r.showTimezone==="false"?false:true}}}return z([t,c],u,undefined,v)};u.getBindingWithTimezone=re;const le=function(e){let t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"Begin";let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:"Begin";return B(j(q(e,"Display"),t,n))};u.getAlignmentExpression=le;const se=function(e,t){if(t&&t.context){return H(t.context)}return null};se.requiresIContext=true;u.getConverterContext=se;const de=function(e,t){if(t&&t.context){return k(t.context)}return null};de.requiresIContext=true;u.getDataModelObjectPath=de;const ue=function(e){var t;if((t=e.navigationProperties)!==null&&t!==void 0&&t.length){const t=(e===null||e===void 0?void 0:e.navigationProperties.findIndex(t=>{if(M(t)){var n,i;if((n=e.contextLocation)!==null&&n!==void 0&&(i=n.navigationProperties)!==null&&i!==void 0&&i.length){var o;return((o=e.contextLocation)===null||o===void 0?void 0:o.navigationProperties.findIndex(e=>e.name===t.name))===-1}return true}return false}))>-1;if(t){return true}}return false};u.isMultiValueField=ue;const ce=function(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return ve(e,t,n,true)};u.getRequiredExpressionAsObject=ce;const ve=function(e,t){let n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;let i=arguments.length>3&&arguments[3]!==undefined?arguments[3]:false;let o=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};let a=arguments.length>5?arguments[5]:undefined;const r=o.requiredPropertiesFromInsertRestrictions;const l=o.requiredPropertiesFromUpdateRestrictions;if(!e||typeof e==="string"){if(i){return R(false)}return B(R(false))}let s;if(a){s=T(a)}let d=R(false);if(t!==null&&t!==undefined){d=y(t)}let u=R(false);let c=R(false);const v=O(e)&&e.$target||e;const f=y(v,s);const p=n||L.IsEditable;if(r!==null&&r!==void 0&&r.includes(e.name)){u=L.IsCreateMode}if(l!==null&&l!==void 0&&l.includes(e.name)){c=W(L.IsEditable,U(L.IsCreateMode))}const g=C(W(C(f,d),p),u,c);if(i){return g}return B(g)};u.getRequiredExpression=ve;const fe=function(e){var t,n;const i=e===null||e===void 0?void 0:(t=e.targetObject)===null||t===void 0?void 0:(n=t.$target)===null||n===void 0?void 0:n.Data;const o=Object.keys(i);const a=[];let r;const l=[];for(const e of o){if(i[e]["$Type"]&&i[e]["$Type"].indexOf("DataField")>-1){a.push(i[e])}}for(const e of a){switch(e.$Type){case"com.sap.vocabularies.UI.v1.DataField":case"com.sap.vocabularies.UI.v1.DataFieldWithNavigationPath":case"com.sap.vocabularies.UI.v1.DataFieldWithUrl":case"com.sap.vocabularies.UI.v1.DataFieldWithIntentBasedNavigation":case"com.sap.vocabularies.UI.v1.DataFieldWithAction":if(typeof e.Value==="object"){r=e.Value.$target}break;case"com.sap.vocabularies.UI.v1.DataFieldForAnnotation":if(e.Target.$target){if(e.Target.$target.$Type==="com.sap.vocabularies.UI.v1.DataField"||e.Target.$target.$Type==="com.sap.vocabularies.UI.v1.DataPointType"){if(typeof e.Target.$target.Value==="object"){r=e.Target.$target.Value.$target}}else{if(typeof e.Target==="object"){r=e.Target.$target}break}}break}l.push(ce(r,e,false))}return B(C(...l))};u.getRequiredExpressionForConnectedDataField=fe;return u},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/DateTimeWithTimezone-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/model/odata/type/DateTimeWithTimezone"], function (ClassSupport, _DateTimeWithTimezone) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  let DateTimeWithTimezone = (_dec = defineUI5Class("sap.fe.core.type.DateTimeWithTimezone"), _dec(_class = /*#__PURE__*/function (_DateTimeWithTimezone2) {
    _inheritsLoose(DateTimeWithTimezone, _DateTimeWithTimezone2);
    function DateTimeWithTimezone(oFormatOptions, oConstraints) {
      var _this;
      _this = _DateTimeWithTimezone2.call(this, oFormatOptions, oConstraints) || this;
      _this.bShowTimezoneForEmptyValues = (oFormatOptions === null || oFormatOptions === void 0 ? void 0 : oFormatOptions.showTimezoneForEmptyValues) ?? true;
      return _this;
    }
    var _proto = DateTimeWithTimezone.prototype;
    _proto.formatValue = function formatValue(aValues, sTargetType) {
      const oTimestamp = aValues && aValues[0];
      if (oTimestamp === undefined ||
      // data is not yet available
      // if time zone is not shown falsy timestamps cannot be formatted -> return null
      !oTimestamp && !this.bShowTimezoneForEmptyValues) {
        return null;
      }
      return _DateTimeWithTimezone2.prototype.formatValue.call(this, aValues, sTargetType);
    };
    return DateTimeWithTimezone;
  }(_DateTimeWithTimezone)) || _class);
  return DateTimeWithTimezone;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/DateTimeWithTimezone", ["sap/fe/core/helpers/ClassSupport","sap/ui/model/odata/type/DateTimeWithTimezone"],function(e,t){"use strict";var o,r;var n=e.defineUI5Class;function i(e,t){e.prototype=Object.create(t.prototype);e.prototype.constructor=e;u(e,t)}function u(e,t){u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function e(t,o){t.__proto__=o;return t};return u(e,t)}let a=(o=n("sap.fe.core.type.DateTimeWithTimezone"),o(r=function(e){i(t,e);function t(t,o){var r;r=e.call(this,t,o)||this;r.bShowTimezoneForEmptyValues=(t===null||t===void 0?void 0:t.showTimezoneForEmptyValues)??true;return r}var o=t.prototype;o.formatValue=function t(o,r){const n=o&&o[0];if(n===undefined||!n&&!this.bShowTimezoneForEmptyValues){return null}return e.prototype.formatValue.call(this,o,r)};return t}(t))||r);return a},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/EDM-dbg", [], function () {
  "use strict";

  var _exports = {};
  const DefaultTypeForEdmType = {
    "Edm.Binary": {
      modelType: undefined
    },
    "Edm.Boolean": {
      modelType: "Bool"
    },
    "Edm.Byte": {
      modelType: "Int"
    },
    "Edm.Date": {
      modelType: "Date"
    },
    "Edm.DateTime": {
      modelType: "Date"
    },
    "Edm.DateTimeOffset": {
      modelType: "DateTimeOffset"
    },
    "Edm.Decimal": {
      modelType: "Decimal"
    },
    "Edm.Duration": {
      modelType: undefined
    },
    "Edm.Double": {
      modelType: "Float"
    },
    "Edm.Float": {
      modelType: "Float"
    },
    "Edm.Guid": {
      modelType: "Guid"
    },
    "Edm.Int16": {
      modelType: "Int"
    },
    "Edm.Int32": {
      modelType: "Int"
    },
    "Edm.Int64": {
      modelType: "Int"
    },
    "Edm.SByte": {
      modelType: "Int"
    },
    "Edm.Single": {
      modelType: "Float"
    },
    "Edm.String": {
      modelType: "String"
    },
    "Edm.Time": {
      modelType: "TimeOfDay"
    },
    "Edm.TimeOfDay": {
      modelType: "TimeOfDay"
    },
    "Edm.Stream": {
      modelType: undefined
    }
  };
  _exports.DefaultTypeForEdmType = DefaultTypeForEdmType;
  function isTypeFilterable(edmType) {
    var _DefaultTypeForEdmTyp;
    return !!((_DefaultTypeForEdmTyp = DefaultTypeForEdmType[edmType]) !== null && _DefaultTypeForEdmTyp !== void 0 && _DefaultTypeForEdmTyp.modelType);
  }
  _exports.isTypeFilterable = isTypeFilterable;
  function getModelType(edmType) {
    var _DefaultTypeForEdmTyp2;
    return (_DefaultTypeForEdmTyp2 = DefaultTypeForEdmType[edmType]) === null || _DefaultTypeForEdmTyp2 === void 0 ? void 0 : _DefaultTypeForEdmTyp2.modelType;
  }
  _exports.getModelType = getModelType;
  return _exports;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/EDM", [],function(){"use strict";var e={};const d={"Edm.Binary":{modelType:undefined},"Edm.Boolean":{modelType:"Bool"},"Edm.Byte":{modelType:"Int"},"Edm.Date":{modelType:"Date"},"Edm.DateTime":{modelType:"Date"},"Edm.DateTimeOffset":{modelType:"DateTimeOffset"},"Edm.Decimal":{modelType:"Decimal"},"Edm.Duration":{modelType:undefined},"Edm.Double":{modelType:"Float"},"Edm.Float":{modelType:"Float"},"Edm.Guid":{modelType:"Guid"},"Edm.Int16":{modelType:"Int"},"Edm.Int32":{modelType:"Int"},"Edm.Int64":{modelType:"Int"},"Edm.SByte":{modelType:"Int"},"Edm.Single":{modelType:"Float"},"Edm.String":{modelType:"String"},"Edm.Time":{modelType:"TimeOfDay"},"Edm.TimeOfDay":{modelType:"TimeOfDay"},"Edm.Stream":{modelType:undefined}};e.DefaultTypeForEdmType=d;function m(e){var m;return!!((m=d[e])!==null&&m!==void 0&&m.modelType)}e.isTypeFilterable=m;function l(e){var m;return(m=d[e])===null||m===void 0?void 0:m.modelType}e.getModelType=l;return e},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/Email-dbg", ["sap/fe/core/helpers/ClassSupport", "sap/ui/core/Core", "sap/ui/model/odata/type/String", "sap/ui/model/ValidateException"], function (ClassSupport, Core, ODataStringType, ValidateException) {
  "use strict";

  var _dec, _class;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  const emailW3CRegexp = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*$/;
  let EmailType = (_dec = defineUI5Class("sap.fe.core.type.Email"), _dec(_class = /*#__PURE__*/function (_ODataStringType) {
    _inheritsLoose(EmailType, _ODataStringType);
    function EmailType() {
      return _ODataStringType.apply(this, arguments) || this;
    }
    var _proto = EmailType.prototype;
    _proto.validateValue = function validateValue(sValue) {
      if (!emailW3CRegexp.test(sValue)) {
        throw new ValidateException(Core.getLibraryResourceBundle("sap.fe.core").getText("T_EMAILTYPE_INVALID_VALUE"));
      }
      _ODataStringType.prototype.validateValue.call(this, sValue);
    };
    return EmailType;
  }(ODataStringType)) || _class);
  return EmailType;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/Email", ["sap/fe/core/helpers/ClassSupport","sap/ui/core/Core","sap/ui/model/odata/type/String","sap/ui/model/ValidateException"],function(t,e,o,r){"use strict";var a,n;var p=t.defineUI5Class;function i(t,e){t.prototype=Object.create(e.prototype);t.prototype.constructor=t;s(t,e)}function s(t,e){s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function t(e,o){e.__proto__=o;return e};return s(t,e)}const u=/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:.[a-zA-Z0-9-]+)*$/;let c=(a=p("sap.fe.core.type.Email"),a(n=function(t){i(o,t);function o(){return t.apply(this,arguments)||this}var a=o.prototype;a.validateValue=function o(a){if(!u.test(a)){throw new r(e.getLibraryResourceBundle("sap.fe.core").getText("T_EMAILTYPE_INVALID_VALUE"))}t.prototype.validateValue.call(this,a)};return o}(o))||n);return c},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/FiscalDate-dbg", ["sap/fe/core/formatters/FiscalFormat", "sap/fe/core/helpers/ClassSupport", "sap/ui/core/CalendarType", "sap/ui/core/Core", "sap/ui/model/odata/type/String", "sap/ui/model/ValidateException"], function (FiscalFormat, ClassSupport, CalendarType, Core, ODataStringType, ValidateException) {
  "use strict";

  var _dec, _class, _class2;
  var defineUI5Class = ClassSupport.defineUI5Class;
  function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }
  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
  /**
   * Define the UI5 class for a type of fiscal date.
   *
   * @class The data type Fiscal Date supports the parsing and formatting of fiscal dates that follow the pattern 'yM'
   * @param formatOptions Format options
   * @param formatOptions.fiscalType String with a fiscal annotation type
   * @param constraints Constraints
   * @since 1.110.0
   * @experimental
   * @extends sap.ui.model.odata.type.String
   * @alias {sap.fe.core.type.FiscalDate} The implementation of the fiscal date
   */
  let FiscalDate = (_dec = defineUI5Class("sap.fe.core.type.FiscalDate"), _dec(_class = (_class2 = /*#__PURE__*/function (_ODataStringType) {
    _inheritsLoose(FiscalDate, _ODataStringType);
    function FiscalDate(formatOptions, constraints) {
      var _this;
      if ((formatOptions.fiscalType === "com.sap.vocabularies.Common.v1.IsFiscalYearPeriod" || formatOptions.fiscalType === "com.sap.vocabularies.Common.v1.IsFiscalYearQuarter" || formatOptions.fiscalType === "com.sap.vocabularies.Common.v1.IsFiscalYearWeek") && constraints !== null && constraints !== void 0 && constraints.maxLength) {
        // We increase maxLength for +1 for any fiscal type that have delimiter in locale format.
        // It's necessary for validation to work correctly.
        // Also for validation to function properly user also should specify constraints.isDigitSequence = true
        // isDigitSequence and maxLength combination ensures that missing characters will be populated with leading zeros
        // that will ensure user will receive correct validation results.
        constraints.maxLength = constraints.maxLength + 1;
      }
      _this = _ODataStringType.call(this, formatOptions, constraints) || this;
      _this.annotationType = formatOptions.fiscalType;
      const format = FiscalDate.dateFormats[_this.annotationType];
      if (format) {
        _this.formatter = FiscalFormat.getDateInstance({
          format,
          calendarType: CalendarType.Gregorian
        });
      }
      return _this;
    }

    /**
     * Return pattern for fiscal date type.
     *
     * @returns The fiscal date pattern
     */
    var _proto = FiscalDate.prototype;
    _proto.getPattern = function getPattern() {
      var _this$formatter;
      return (_this$formatter = this.formatter) === null || _this$formatter === void 0 ? void 0 : _this$formatter.getPattern();
    }

    /**
     * Formats the given value to the given fiscal type.
     *
     * @param value The value to be formatted
     * @returns The formatted output value; <code>undefined</code> is always formatted to <code>null</code>
     * @override
     */;
    _proto.formatValue = function formatValue(value, targetType) {
      return this.formatter ? this.formatter.format(_ODataStringType.prototype.formatValue.call(this, value, targetType)) : _ODataStringType.prototype.formatValue.call(this, value, targetType);
    }

    /**
     * Parses the given value, which is expected to be of the fiscal type, to a string.
     *
     * @param value The value to be parsed
     * @returns The parsed value
     * @override
     */;
    _proto.parseValue = function parseValue(value, sourceType) {
      return this.formatter ? this.formatter.parse(_ODataStringType.prototype.parseValue.call(this, value, sourceType)) : _ODataStringType.prototype.parseValue.call(this, value, sourceType);
    }

    /**
     * @inheritDoc
     */;
    _proto.validateValue = function validateValue(value) {
      try {
        _ODataStringType.prototype.validateValue.call(this, value);
      } catch (error) {
        if (!this.formatter) {
          throw error;
        }
        if (!this.formatter.validate(value)) {
          throw new ValidateException(this.getErrorMessage(this.annotationType));
        }
      }
      if (!this.formatter || value === "" || value === null) {
        return;
      }
      if (!this.formatter.validate(value)) {
        throw new ValidateException(this.getErrorMessage(this.annotationType));
      }
    }

    /**
     * Returns the matching locale-dependent error message for the type based on the fiscal annotation.
     *
     * @param annotationType The fiscal annotation type
     * @returns The locale-dependent error message
     */;
    _proto.getErrorMessage = function getErrorMessage(annotationType) {
      let sValue = "";
      this.fullYear = this.fullYear || new Date().getFullYear().toString();
      switch (annotationType) {
        case "com.sap.vocabularies.Common.v1.IsFiscalYear":
          sValue = this.fullYear;
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalPeriod":
          sValue = "001";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalYearPeriod":
          sValue = this.fullYear + "001";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalQuarter":
          sValue = "1";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalYearQuarter":
          sValue = this.fullYear + "1";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalWeek":
          sValue = "01";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalYearWeek":
          sValue = this.fullYear + "01";
          break;
        case "com.sap.vocabularies.Common.v1.IsDayOfFiscalYear":
          sValue = "1";
          break;
        case "com.sap.vocabularies.Common.v1.IsFiscalYearVariant":
          break;
        default:
          sValue = this.fullYear;
      }
      return Core.getLibraryResourceBundle("sap.fe.core").getText("FISCAL_VALIDATION_FAILS", [this.formatValue(sValue, "string")]);
    }

    /**
     * @inheritDoc
     */;
    _proto.getName = function getName() {
      return "sap.fe.core.type.FiscalDate";
    }

    /**
     * Returns the formatter that is assigned to this particular FiscalDate type.
     *
     * @returns The assigned instance of FiscalFormat
     */;
    _proto.getFormatter = function getFormatter() {
      return this.formatter;
    };
    return FiscalDate;
  }(ODataStringType), _class2.dateFormats = {
    ["com.sap.vocabularies.Common.v1.IsFiscalYear"]: "YYYY",
    ["com.sap.vocabularies.Common.v1.IsFiscalPeriod"]: "PPP",
    ["com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"]: "YYYYPPP",
    ["com.sap.vocabularies.Common.v1.IsFiscalQuarter"]: "Q",
    ["com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"]: "YYYYQ",
    ["com.sap.vocabularies.Common.v1.IsFiscalWeek"]: "WW",
    ["com.sap.vocabularies.Common.v1.IsFiscalYearWeek"]: "YYYYWW",
    ["com.sap.vocabularies.Common.v1.IsDayOfFiscalYear"]: "d",
    ["com.sap.vocabularies.Common.v1.IsFiscalYearVariant"]: ""
  }, _class2)) || _class);
  return FiscalDate;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/FiscalDate", ["sap/fe/core/formatters/FiscalFormat","sap/fe/core/helpers/ClassSupport","sap/ui/core/CalendarType","sap/ui/core/Core","sap/ui/model/odata/type/String","sap/ui/model/ValidateException"],function(a,e,r,t,o,s){"use strict";var i,c,l;var n=e.defineUI5Class;function m(a,e){a.prototype=Object.create(e.prototype);a.prototype.constructor=a;u(a,e)}function u(a,e){u=Object.setPrototypeOf?Object.setPrototypeOf.bind():function a(e,r){e.__proto__=r;return e};return u(a,e)}let p=(i=n("sap.fe.core.type.FiscalDate"),i(c=(l=function(e){m(o,e);function o(t,s){var i;if((t.fiscalType==="com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"||t.fiscalType==="com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"||t.fiscalType==="com.sap.vocabularies.Common.v1.IsFiscalYearWeek")&&s!==null&&s!==void 0&&s.maxLength){s.maxLength=s.maxLength+1}i=e.call(this,t,s)||this;i.annotationType=t.fiscalType;const c=o.dateFormats[i.annotationType];if(c){i.formatter=a.getDateInstance({format:c,calendarType:r.Gregorian})}return i}var i=o.prototype;i.getPattern=function a(){var e;return(e=this.formatter)===null||e===void 0?void 0:e.getPattern()};i.formatValue=function a(r,t){return this.formatter?this.formatter.format(e.prototype.formatValue.call(this,r,t)):e.prototype.formatValue.call(this,r,t)};i.parseValue=function a(r,t){return this.formatter?this.formatter.parse(e.prototype.parseValue.call(this,r,t)):e.prototype.parseValue.call(this,r,t)};i.validateValue=function a(r){try{e.prototype.validateValue.call(this,r)}catch(a){if(!this.formatter){throw a}if(!this.formatter.validate(r)){throw new s(this.getErrorMessage(this.annotationType))}}if(!this.formatter||r===""||r===null){return}if(!this.formatter.validate(r)){throw new s(this.getErrorMessage(this.annotationType))}};i.getErrorMessage=function a(e){let r="";this.fullYear=this.fullYear||(new Date).getFullYear().toString();switch(e){case"com.sap.vocabularies.Common.v1.IsFiscalYear":r=this.fullYear;break;case"com.sap.vocabularies.Common.v1.IsFiscalPeriod":r="001";break;case"com.sap.vocabularies.Common.v1.IsFiscalYearPeriod":r=this.fullYear+"001";break;case"com.sap.vocabularies.Common.v1.IsFiscalQuarter":r="1";break;case"com.sap.vocabularies.Common.v1.IsFiscalYearQuarter":r=this.fullYear+"1";break;case"com.sap.vocabularies.Common.v1.IsFiscalWeek":r="01";break;case"com.sap.vocabularies.Common.v1.IsFiscalYearWeek":r=this.fullYear+"01";break;case"com.sap.vocabularies.Common.v1.IsDayOfFiscalYear":r="1";break;case"com.sap.vocabularies.Common.v1.IsFiscalYearVariant":break;default:r=this.fullYear}return t.getLibraryResourceBundle("sap.fe.core").getText("FISCAL_VALIDATION_FAILS",[this.formatValue(r,"string")])};i.getName=function a(){return"sap.fe.core.type.FiscalDate"};i.getFormatter=function a(){return this.formatter};return o}(o),l.dateFormats={["com.sap.vocabularies.Common.v1.IsFiscalYear"]:"YYYY",["com.sap.vocabularies.Common.v1.IsFiscalPeriod"]:"PPP",["com.sap.vocabularies.Common.v1.IsFiscalYearPeriod"]:"YYYYPPP",["com.sap.vocabularies.Common.v1.IsFiscalQuarter"]:"Q",["com.sap.vocabularies.Common.v1.IsFiscalYearQuarter"]:"YYYYQ",["com.sap.vocabularies.Common.v1.IsFiscalWeek"]:"WW",["com.sap.vocabularies.Common.v1.IsFiscalYearWeek"]:"YYYYWW",["com.sap.vocabularies.Common.v1.IsDayOfFiscalYear"]:"d",["com.sap.vocabularies.Common.v1.IsFiscalYearVariant"]:""},l))||c);return p},false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/TypeUtil-dbg", ["sap/base/util/merge", "sap/fe/core/helpers/BindingToolkit", "sap/ui/mdc/enum/BaseType", "sap/ui/mdc/odata/v4/TypeUtil"], function (merge, BindingToolkit, BaseType, ODataTypeUtil) {
  "use strict";

  var EDM_TYPE_MAPPING = BindingToolkit.EDM_TYPE_MAPPING;
  const ODataV4TypeUtil = Object.assign({}, ODataTypeUtil);
  ODataV4TypeUtil.getBaseType = function (type, formatOptions, constraints) {
    switch (type) {
      case "sap.ui.model.odata.type.Date":
        return BaseType.Date;
      case "sap.ui.model.odata.type.TimeOfDay":
        return BaseType.Time;
      case "sap.ui.model.odata.type.Unit":
      case "sap.ui.model.odata.type.Currency":
        if (!formatOptions || (!formatOptions.hasOwnProperty("showMeasure") || formatOptions.showMeasure) && (!formatOptions.hasOwnProperty("showNumber") || formatOptions.showNumber)) {
          return BaseType.Unit;
        } else if (!formatOptions.hasOwnProperty("showNumber") || formatOptions.showNumber) {
          return BaseType.Numeric; // only number to show
        } else {
          return BaseType.String; // only unit to show
        }

      default:
        return ODataTypeUtil.getBaseType.call(ODataV4TypeUtil, type, formatOptions, constraints);
    }
  };
  ODataV4TypeUtil.getDataTypeClassName = function (type) {
    // V4 specific types
    if (EDM_TYPE_MAPPING[type]) {
      type = EDM_TYPE_MAPPING[type].type;
    } else {
      type = ODataTypeUtil.getDataTypeClassName.call(ODataV4TypeUtil, type);
    }
    return type;
  };
  ODataV4TypeUtil.getDataTypeInstance = function (dataType, formatOptions, constraints) {
    switch (dataType) {
      case "sap.ui.model.odata.type.DateTimeOffset":
      case "Edm.DateTimeOffset":
        constraints = merge({}, constraints || {});
        constraints.V4 = true;
        break;
      default:
    }
    const TypeClass = ODataV4TypeUtil.getDataTypeClass(dataType);
    return new TypeClass(formatOptions, constraints);
  };
  return ODataV4TypeUtil;
}, false);
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.predefine("sap/fe/core/type/TypeUtil", ["sap/base/util/merge","sap/fe/core/helpers/BindingToolkit","sap/ui/mdc/enum/BaseType","sap/ui/mdc/odata/v4/TypeUtil"],function(e,a,t,s){"use strict";var r=a.EDM_TYPE_MAPPING;const u=Object.assign({},s);u.getBaseType=function(e,a,r){switch(e){case"sap.ui.model.odata.type.Date":return t.Date;case"sap.ui.model.odata.type.TimeOfDay":return t.Time;case"sap.ui.model.odata.type.Unit":case"sap.ui.model.odata.type.Currency":if(!a||(!a.hasOwnProperty("showMeasure")||a.showMeasure)&&(!a.hasOwnProperty("showNumber")||a.showNumber)){return t.Unit}else if(!a.hasOwnProperty("showNumber")||a.showNumber){return t.Numeric}else{return t.String}default:return s.getBaseType.call(u,e,a,r)}};u.getDataTypeClassName=function(e){if(r[e]){e=r[e].type}else{e=s.getDataTypeClassName.call(u,e)}return e};u.getDataTypeInstance=function(a,t,s){switch(a){case"sap.ui.model.odata.type.DateTimeOffset":case"Edm.DateTimeOffset":s=e({},s||{});s.V4=true;break;default:}const r=u.getDataTypeClass(a);return new r(t,s)};return u},false);
sap.ui.require.preload({
	"sap/fe/core/controls/ActionParameterDialog.fragment.xml":'\n<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcField="sap.ui.mdc.field"\n\txmlns:form="sap.ui.layout.form"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tFE_MODEL: \'sap/fe/core/helpers/ModelHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\'\n\t}"\n><form:SimpleForm binding="{$Parameter}" width="20rem"><template:repeat list="{action>$Parameter}" var="parameter"><template:with path="parameter>" helper="COMMON.gotoActionParameter" var="actionParameter"><template:if test="{= !${action>$IsBound} || ${parameter>$Name} !== ${action>$Parameter/0/$Name} }"><Label\n\t\t\t\t\t\tunittest:id="ActionParameterDialogLabelExpressionTest"\n\t\t\t\t\t\tid="{= ID.generate([\'APD_\', ${parameter>$Name}, \'Label\']) }"\n\t\t\t\t\t\ttext="{= ${actionParameter>@com.sap.vocabularies.Common.v1.Label} ? ${actionParameter>@com.sap.vocabularies.Common.v1.Label} : ${parameter>$Name}}"\n\t\t\t\t\t/><template:if test="{=  !${parameter>$isCollection} }"><template:then><mdc:Field\n\t\t\t\t\t\t\t\tdelegate="{name:\'sap/fe/macros/field/FieldBaseDelegate\', payload:{retrieveTextFromValueList:true}}"\n\t\t\t\t\t\t\t\tunittest:id="ActionParameterDialogFieldExpressionTest"\n\t\t\t\t\t\t\t\tid="{= ID.generate([\'APD_\', ${parameter>$Name}]) }"\n\t\t\t\t\t\t\t\tvalue="{parameter>@@MODEL.format}"\n\t\t\t\t\t\t\t\tplaceholder="{actionParameter>@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"\n\t\t\t\t\t\t\t\tdisplay="{actionParameter>@@FIELD.getAPDialogDisplayFormat}"\n\t\t\t\t\t\t\t\teditMode="{actionParameter>@@COMMON.getParameterEditMode}"\n\t\t\t\t\t\t\t\twidth="100%"\n\t\t\t\t\t\t\t\tmultipleLines="{= ${actionParameter>@com.sap.vocabularies.UI.v1.MultiLineText} ? (${actionParameter>@com.sap.vocabularies.UI.v1.MultiLineText} !== false)  : undefined}"\n\t\t\t\t\t\t\t\trequired="{= FIELD.isRequired(${actionParameter>@@FIELD.fieldControl}, \'Editable\')}"\n\t\t\t\t\t\t\t\tchange="{= \'.handleChange($event, \\\'\' + ${parameter>$Name} + \'\\\')\' }"\n\t\t\t\t\t\t\t\tfieldHelp="{= FIELD.getActionParameterDialogFieldHelp(${actionParameter>@}, ${actionName>@sapui.name}, ${parameter>$Name}) }"\n\t\t\t\t\t\t\t\tvisible="{= (${actionParameter>$Name} === \'ResultIsActiveEntity\') ? false : ${actionParameter>@com.sap.vocabularies.UI.v1.Hidden@@FIELD.getActionParameterVisibility} }"\n\t\t\t\t\t\t\t\tariaLabelledBy="{= ID.generate([\'APD_\', ${parameter>$Name}, \'Label\']) }"\n\t\t\t\t\t\t\t><core:Fragment fragmentName="sap.fe.core.controls.ActionParameterDialogValueHelp" type="XML" /></mdc:Field></template:then><template:else><mdc:MultiValueField\n\t\t\t\t\t\t\t\tid="{= ID.generate([\'APD_\', ${parameter>$Name}]) }"\n\t\t\t\t\t\t\t\tplaceholder="{actionParameter>@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"\n\t\t\t\t\t\t\t\titems="{actionParameter>@@FE_MODEL.getActionParameterItemsModelPath}"\n\t\t\t\t\t\t\t\tdelegate="{name: \'sap/fe/core/controls/MultiValueParameterDelegate\'}"\n\t\t\t\t\t\t\t\tunittest:id="ActionParameterDialogMultiValueFieldExpressionTest"\n\t\t\t\t\t\t\t\tdisplay="{actionParameter>@@FIELD.getAPDialogDisplayFormat}"\n\t\t\t\t\t\t\t\teditMode="{actionParameter>@@COMMON.getParameterEditMode}"\n\t\t\t\t\t\t\t\twidth="100%"\n\t\t\t\t\t\t\t\tmultipleLines="{= ${actionParameter>@com.sap.vocabularies.UI.v1.MultiLineText} ? (${actionParameter>@com.sap.vocabularies.UI.v1.MultiLineText} !== false)  : undefined}"\n\t\t\t\t\t\t\t\trequired="{= FIELD.isRequired(${actionParameter>@@FIELD.fieldControl}, \'Editable\')}"\n\t\t\t\t\t\t\t\tfieldHelp="{= FIELD.getActionParameterDialogFieldHelp(${actionParameter>@}, ${actionName>@sapui.name}, ${parameter>$Name}) }"\n\t\t\t\t\t\t\t\tchange="{= \'.handleChange($event, \\\'\' + ${parameter>$Name} + \'\\\')\' }"\n\t\t\t\t\t\t\t\tvisible="{actionParameter>@com.sap.vocabularies.UI.v1.Hidden@@FIELD.getActionParameterVisibility}"\n\t\t\t\t\t\t\t\tariaLabelledBy="{= ID.generate([\'APD_\', ${parameter>$Name}, \'Label\']) }"\n\t\t\t\t\t\t\t><mdcField:MultiValueFieldItem\n\t\t\t\t\t\t\t\t\tkey="{path: \'mvfview>Key\', type:\'sap.ui.model.type.String\'}"\n\t\t\t\t\t\t\t\t\tdescription="{mvfview>Desc}"\n\t\t\t\t\t\t\t\t/><core:Fragment fragmentName="sap.fe.core.controls.ActionParameterDialogValueHelp" type="XML" /></mdc:MultiValueField></template:else></template:if></template:if></template:with></template:repeat></form:SimpleForm></core:FragmentDefinition>\n',
	"sap/fe/core/controls/ActionParameterDialogValueHelp.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcv="sap.ui.mdc.valuehelp"\n\txmlns:mdcvc="sap.ui.mdc.valuehelp.content"\n\txmlns:unittest="http://schemas.sap.com/sapui5/preprocessorextension/sap.fe.unittesting/1"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\'\n\t}"\n><template:if test="{= FIELD.hasValueHelpAnnotation(${actionParameter>@}) }"><mdc:dependents><mdc:ValueHelp\n\t\t\t\tunittest:id="ActionParameterDialogValuehelpExpressionTest"\n\t\t\t\tid="{= ID.generate([${actionName>@sapui.name},${parameter>$Name}]) }"\n\t\t\t\tdelegate="{= FIELD.getValueHelpDelegate(${action>$IsBound}, ${entitySet>@@COMMON.getContextPath}, ${actionName>@sapui.name}, ${parameter>$Name}) }"\n\t\t\t\tvalidateInput="{= ValueHelpTemplating.requiresValidation(${actionParameter>@@Property.getProperty})}"\n\t\t\t><mdc:typeahead><mdcv:Popover><mdcvc:MTable\n\t\t\t\t\t\t\tid="{= ID.generate([${actionName>@sapui.name},${parameter>$Name}]) }::Popover::qualifier::"\n\t\t\t\t\t\t\tcaseSensitive="{= ValueHelpTemplating.useCaseSensitiveFilterRequests(${actionParameter>@@Property.getPropertyObjectPath}, ${actionParameter>/@Org.OData.Capabilities.V1.FilterFunctions})}"\n\t\t\t\t\t\t\tuseAsValueHelp="{= ${actionParameter>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} || false}"\n\t\t\t\t\t\t/></mdcv:Popover></mdc:typeahead><template:if\n\t\t\t\t\ttest="{= ${actionParameter>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} ? (${actionParameter>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} === \'true\') : true}"\n\t\t\t\t><mdc:dialog><mdcv:Dialog /></mdc:dialog></template:if></mdc:ValueHelp></mdc:dependents></template:if></core:FragmentDefinition>\n',
	"sap/fe/core/controls/NonComputedVisibleKeyFieldsDialog.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns="sap.m"\n\txmlns:core="sap.ui.core"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcv="sap.ui.mdc.valuehelp"\n\txmlns:mdcvc="sap.ui.mdc.valuehelp.content"\n\txmlns:form="sap.ui.layout.form"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tMODEL: \'sap/ui/model/odata/v4/AnnotationHelper\',\n\t\tCOMMON: \'sap/fe/macros/CommonHelper\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\',\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tFIELD: \'sap/fe/macros/field/FieldHelper\',\n\t\tUI: \'sap/fe/core/templating/UIFormatters\'\n\t}"\n><template:with path="fields>" var="allFields"><form:SimpleForm><template:repeat list="{allFields>}" var="key"><template:with path="key>" helper="COMMON.getPathToKey" var="immutableKey"><Label text="{= ${immutableKey>@com.sap.vocabularies.Common.v1.Label}}" /><mdc:Field\n\t\t\t\t\t\tdelegate="{name:\'sap/fe/macros/field/FieldBaseDelegate\', payload:{retrieveTextFromValueList:true}}"\n\t\t\t\t\t\tid="{= ID.generate([\'CreateDialog\', ${entitySet>@sapui.name}, ${immutableKey>@sapui.name}]) }"\n\t\t\t\t\t\tvalue="{immutableKey>@@MODEL.format}"\n\t\t\t\t\t\tplaceholder="{immutableKey>@com.sap.vocabularies.UI.v1.Placeholder@@MODEL.value}"\n\t\t\t\t\t\twidth="100%"\n\t\t\t\t\t\trequired="{= FIELD.getRequired(${immutableKey>@sapui.name}, ${immutableKey>@@UI.getDataModelObjectPath}, ${requiredProperties>})}"\n\t\t\t\t\t\tdisplay="{immutableKey>@@FIELD.getAPDialogDisplayFormat}"\n\t\t\t\t\t\tchange="{= \'.handleChange($event, \\\'\' + ${immutableKey>@sapui.name} + \'\\\')\' }"\n\t\t\t\t\t\tliveChange=".handleLiveChange"\n\t\t\t\t\t\tfieldHelp="{= ${immutableKey>@@Property.hasValueHelp} ? ID.generate([${immutableKey>@sapui.name},\'VH\']) : undefined }"\n\t\t\t\t\t\tcustomData:fieldName="{immutableKey>@sapui.name}"\n\t\t\t\t\t\teditMode="{= ${immutableKey>@com.sap.vocabularies.Common.v1.FieldControl} &amp;&amp; ${immutableKey>@com.sap.vocabularies.Common.v1.FieldControl/$EnumMember} &amp;&amp; ${immutableKey>@com.sap.vocabularies.Common.v1.FieldControl/$EnumMember} === \'com.sap.vocabularies.Common.v1.FieldControlType/ReadOnly\' ? \'Display\' : \'Editable\'}"\n\t\t\t\t\t><template:if test="{immutableKey>@@Property.hasValueHelp}"><template:then><mdc:dependents><mdc:ValueHelp\n\t\t\t\t\t\t\t\t\t\tid="{= ID.generate([${immutableKey>@sapui.name},\'VH\']) }"\n\t\t\t\t\t\t\t\t\t\tdelegate="{= FIELD.getValueHelpDelegateForNonComputedVisibleKeyField(${immutableKey>@@Property.getPropertyPath}) }"\n\t\t\t\t\t\t\t\t\t\tvalidateInput="{= ValueHelpTemplating.requiresValidation(${immutableKey>@@Property.getProperty})}"\n\t\t\t\t\t\t\t\t\t><mdc:typeahead><mdcv:Popover><mdcvc:MTable\n\t\t\t\t\t\t\t\t\t\t\t\t\tid="{= ID.generate([${immutableKey>@sapui.name},\'VH\']) }::Popover::qualifier::"\n\t\t\t\t\t\t\t\t\t\t\t\t\tcaseSensitive="{= ValueHelpTemplating.useCaseSensitiveFilterRequests(${immutableKey>@@Property.getPropertyObjectPath}, ${immutableKey>/@Org.OData.Capabilities.V1.FilterFunctions})}"\n\t\t\t\t\t\t\t\t\t\t\t\t\tuseAsValueHelp="{= ${immutableKey>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} || false}"\n\t\t\t\t\t\t\t\t\t\t\t\t/></mdcv:Popover></mdc:typeahead><template:if\n\t\t\t\t\t\t\t\t\t\t\ttest="{= ${immutableKey>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} ? (${immutableKey>@com.sap.vocabularies.Common.v1.ValueListWithFixedValues} === \'true\') : true}"\n\t\t\t\t\t\t\t\t\t\t><mdc:dialog><mdcv:Dialog /></mdc:dialog></template:if></mdc:ValueHelp></mdc:dependents></template:then></template:if></mdc:Field></template:with></template:repeat></form:SimpleForm></template:with></core:FragmentDefinition>\n',
	"sap/fe/core/controls/massEdit/MassEditDialog.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcField="sap.ui.mdc.field"\n\txmlns:f="sap.ui.layout.form"\n\txmlns:l="sap.ui.layout"\n\ttemplate:require="{\n\t\tMED: \'sap/fe/core/helpers/MassEditHelper\'\n\t}"\n><f:Form visible="{= MED.helpers.hasEditableFieldsBinding(${dataFieldModel>}, true) }"><f:layout><f:ResponsiveGridLayout\n\t\t\t\tlabelSpanXL="4"\n\t\t\t\tlabelSpanL="4"\n\t\t\t\tlabelSpanM="12"\n\t\t\t\tlabelSpanS="12"\n\t\t\t\tadjustLabelSpan="false"\n\t\t\t\temptySpanXL="0"\n\t\t\t\temptySpanL="0"\n\t\t\t\temptySpanM="0"\n\t\t\t\temptySpanS="0"\n\t\t\t\tcolumnsXL="2"\n\t\t\t\tcolumnsL="2"\n\t\t\t\tcolumnsM="1"\n\t\t\t\tsingleContainerFullSize="false"\n\t\t\t/></f:layout><f:formContainers><f:FormContainer><f:formElements><template:repeat list="{dataFieldModel>}" var="dataField"><f:FormElement\n\t\t\t\t\t\t\tlabel="{dataField>label}"\n\t\t\t\t\t\t\tvisible="{= \'{fieldsInfo>/values/\' + ${dataField>dataProperty} + \'/visible}\' }"\n\t\t\t\t\t\t><f:fields><template:with path="dataField>propertyInfo" var="property"><core:Fragment fragmentName="sap.fe.core.controls.massEdit.MassEditField" type="XML" /></template:with><template:if test="{dataField>unitInfo}"><template:with path="dataField>unitInfo" var="property"><core:Fragment fragmentName="sap.fe.core.controls.massEdit.MassEditField" type="XML" /></template:with></template:if></f:fields></f:FormElement></template:repeat></f:formElements></f:FormContainer></f:formContainers></f:Form><Text\n\t\tvisible="{= MED.helpers.hasEditableFieldsBinding(${dataFieldModel>}, false) }"\n\t\ttext="{fieldsInfo>/noFields}"\n\t\tclass="sapUiSmallMargin"\n\t/>\n\t/></core:FragmentDefinition>\n',
	"sap/fe/core/controls/massEdit/MassEditField.fragment.xml":'<core:FragmentDefinition\n\txmlns:template="http://schemas.sap.com/sapui5/extension/sap.ui.core.template/1"\n\txmlns:core="sap.ui.core"\n\txmlns="sap.m"\n\txmlns:mdc="sap.ui.mdc"\n\txmlns:mdcField="sap.ui.mdc.field"\n\txmlns:control="sap.fe.core.controls"\n\txmlns:macro="sap.fe.macros"\n\txmlns:f="sap.ui.layout.form"\n\txmlns:l="sap.ui.layout"\n\txmlns:customData="http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1"\n\ttemplate:require="{\n\t\tProperty: \'sap/fe/core/templating/PropertyFormatters\',\n\t\tID: \'sap/fe/core/helpers/StableIdHelper\',\n\t\tValueHelpTemplating: \'sap/fe/macros/internal/valuehelp/ValueHelpTemplating\'\n\t}"\n><template:if test="{property>hasVH}"><template:then><template:with path="property>propertyPathForValueHelp" var="vhProperty"><mdc:Field\n\t\t\t\t\tdelegate="{name: \'sap/ui/mdc/odata/v4/FieldBaseDelegate\'}"\n\t\t\t\t\tid="{= ID.generate([\'MED_\', ${dataField>entitySet}, ${property>relativePath}, \'_MDCField\']) }"\n\t\t\t\t\tcore:require="{MassEditHandlers: \'sap/fe/core/controls/massEdit/MassEditHandlers\'}"\n\t\t\t\t\tchange="{= \'MassEditHandlers.handleMDCFieldChange($event, \\\'\' + ${property>relativePath} + \'\\\')\' }"\n\t\t\t\t\tlabel="{dataField>label}"\n\t\t\t\t\twidth="100%"\n\t\t\t\t\trequired="{dataField>isFieldRequired}"\n\t\t\t\t\tfieldHelp="{= ID.generate([\'MED_\', ${dataField>entitySet}, \'VHD\', ${vhProperty>@@Property.getRelativePropertyPath} ]) }"\n\t\t\t\t\tdisplay="{dataField>display}"\n\t\t\t\t\tvalue="{= ${property>relativePath} ? \'{path: \\\'\' + ${property>relativePath} + \'\\\', parameters: {$$noPatch: true} }\' : undefined }"\n\t\t\t\t\tadditionalValue="{= ${dataField>descriptionPath} ? \'{path: \\\'\' + ${dataField>descriptionPath} + \'\\\', parameters: {$$noPatch: true} }\' : undefined }"\n\t\t\t\t><mdc:layoutData><l:GridData\n\t\t\t\t\t\t\tspan="{= (!${dataField>unitProperty}) ? \'XL12 L12 M12 S12\' : ((${property>relativePath} === ${dataField>unitProperty}) ? \'XL4 L4 M4 S4\' : \'XL8 L8 M8 S8\') }"\n\t\t\t\t\t\t/></mdc:layoutData><control:MassEditSelect\n\t\t\t\t\t\tcore:require="{MassEditHandlers: \'sap/fe/core/controls/massEdit/MassEditHandlers\'}"\n\t\t\t\t\t\tid="{= ID.generate([\'MED_\', ${dataField>entitySet}, ${property>relativePath}]) }"\n\t\t\t\t\t\titems="{= \'{path : \\\'\' + ${property>runtimePath} + ${property>relativePath} + \'\\\'}\' }"\n\t\t\t\t\t\tchange="MassEditHandlers.handleSelectionChange($event)"\n\t\t\t\t\t\tselectedKey="{= \'{\' + ${property>runtimePath} + ${property>relativePath} + \'/selectedKey}\' }"\n\t\t\t\t\t\tselectValue="{= (${dataField>inputType} !== \'CheckBox\') &amp;&amp; (\'{ parts : [{ path:\\\'\' +  ${property>relativePath} + \'\\\'}, {value: \\\'\' + ${property>relativePath} + \'\\\' }, {value: \\\'\' + ID.generate([\'MED_\', ${dataField>entitySet}, ${property>relativePath}, \'_MDCField\']) + \'\\\' }], formatter: \\\'MassEditHandlers.contextPropertyChange\\\' }\') }"\n\t\t\t\t\t\twidth="100%"\n\t\t\t\t\t\tcustomData:fieldPath="{property>relativePath}"\n\t\t\t\t\t\tcustomData:propertyFullyQualifiedName="{property>propertyFullyQualifiedName}"\n\t\t\t\t\t><control:items><core:Item key="{fieldsInfo>key}" text="{fieldsInfo>text}" /></control:items><control:layoutData><l:GridData span="XL12 L12 M12 S12" /></control:layoutData></control:MassEditSelect><template:if test="{= ${dataField>inputType} !== \'CheckBox\' }"><mdc:dependents><macro:ValueHelp\n\t\t\t\t\t\t\t\tcontextPath="{contextPath>}"\n\t\t\t\t\t\t\t\tidPrefix="{= ID.generate([\'MED_\', ${dataField>entitySet}, \'VHD\' ]) }"\n\t\t\t\t\t\t\t\tproperty="{vhProperty>}"\n\t\t\t\t\t\t\t\tuseMultiValueField="true"\n\t\t\t\t\t\t\t/></mdc:dependents></template:if></mdc:Field></template:with></template:then><template:else><ComboBox\n\t\t\t\tid="{= ID.generate([\'MED_\', ${dataField>entitySet}, ${property>relativePath}]) }"\n\t\t\t\tcore:require="{MassEditHandlers: \'sap/fe/core/controls/massEdit/MassEditHandlers\'}"\n\t\t\t\titems="{= \'{path : \\\'\' + ${property>runtimePath} + ${property>relativePath} + \'\\\'}\' }"\n\t\t\t\tchange="MassEditHandlers.handleSelectionChange($event)"\n\t\t\t\tselectedKey="{= \'{\' + ${property>runtimePath} + ${property>relativePath} + \'/selectedKey}\' }"\n\t\t\t\tvisible="{= \'{\' + ${property>runtimePath} + ${property>relativePath} + \'/visible}\' }"\n\t\t\t\tcustomData:fieldPath="{property>relativePath}"\n\t\t\t\tcustomData:propertyFullyQualifiedName="{property>propertyFullyQualifiedName}"\n\t\t\t><items><core:Item key="{fieldsInfo>key}" text="{fieldsInfo>text}" /></items><layoutData><l:GridData\n\t\t\t\t\t\tspan="{= (!${dataField>unitProperty}) ? \'XL12 L12 M12 S12\' : ((${property>relativePath} === ${dataField>unitProperty}) ? \'XL4 L4 M4 S4\' : \'XL8 L8 M8 S8\') }"\n\t\t\t\t\t/></layoutData></ComboBox></template:else></template:if></core:FragmentDefinition>\n',
	"sap/fe/core/fpm/manifest.json":'{"_version":"1.14.0","sap.app":{"id":"sap.fe.core.fpm","type":"component","applicationVersion":{"version":"1.115.1"},"title":"Object Page","tags":{"keywords":["Object Page"]},"ach":"CA-UI5-FE","offline":false,"resources":"resources.json"},"sap.ui":{"technology":"UI5","deviceTypes":{"desktop":true,"tablet":true,"phone":true},"supportedThemes":["sap_fiori_3","sap_hcb","sap_bluecrystal","sap_belize","sap_belize_plus","sap_belize_hcw"]},"sap.ui5":{"config":{"sapFiori2Adaptation":{"style":true,"hierarchy":true}},"services":{"templatedViewService":{"factoryName":"sap.fe.core.services.TemplatedViewService","startup":"waitFor","settings":{"converterType":"None"}},"asyncComponentService":{"factoryName":"sap.fe.core.services.AsyncComponentService","startup":"waitFor"}},"handleValidation":true,"dependencies":{"minUI5Version":"${sap.ui5.core.version}","libs":{"sap.f":{},"sap.fe.macros":{},"sap.m":{},"sap.ui.core":{},"sap.ui.layout":{},"sap.ui.mdc":{},"sap.ui.fl":{}}},"contentDensities":{"compact":true,"cozy":true}}}',
	"sap/fe/core/manifest.json":'{"_version":"1.21.0","sap.app":{"id":"sap.fe.core","type":"library","embeds":["fpm"],"applicationVersion":{"version":"1.115.1"},"title":"UI5 library: sap.fe.core","description":"UI5 library: sap.fe.core","ach":"CA-UI5-FE","resources":"resources.json","offline":true},"sap.ui":{"technology":"UI5","supportedThemes":[]},"sap.ui5":{"dependencies":{"libs":{"sap.ui.core":{},"sap.f":{},"sap.fe.navigation":{},"sap.fe.placeholder":{},"sap.m":{},"sap.ui.layout":{"lazy":true},"sap.ui.mdc":{},"sap.ui.fl":{}}},"library":{"i18n":{"bundleUrl":"messagebundle.properties","supportedLocales":["","ar","bg","ca","cs","cy","da","de","el","en","en-GB","en-US-sappsd","en-US-saprigi","en-US-saptrc","es","es-MX","et","fi","fr","fr-CA","hi","hr","hu","id","it","iw","ja","kk","ko","lt","lv","ms","nl","no","pl","pt","pt-PT","ro","ru","sh","sk","sl","sv","th","tr","uk","vi","zh-CN","zh-TW"]},"content":{"controls":[],"elements":[],"types":[],"interfaces":[]}}}}',
	"sap/fe/core/rootView/Fcl.view.xml":'<mvc:View xmlns:mvc="sap.ui.core.mvc" xmlns="sap.f" displayBlock="true" height="100%" controllerName="sap.fe.core.rootView.Fcl"><FlexibleColumnLayout id="appContent" backgroundDesign="Transparent" restoreFocusOnBackNavigation="true" autoFocus="false" /></mvc:View>\n',
	"sap/fe/core/rootView/NavContainer.view.xml":'<mvc:View xmlns:mvc="sap.ui.core.mvc" xmlns="sap.m" displayBlock="true" height="100%" controllerName="sap.fe.core.rootView.NavContainer"><NavContainer id="appContent" autoFocus="false" /></mvc:View>\n',
	"sap/fe/core/services/view/TemplatingErrorPage.view.xml":'<mvc:View xmlns:mvc="sap.ui.core.mvc" xmlns="sap.m" controllerName="sap.fe.core.services.view.TemplatingErrorPage"><MessagePage\n\t\tshowHeader="false"\n\t\ticon="sap-icon://message-error"\n\t\ttext="{sap.fe.i18n>T_TEMPLATING_ERROR_PAGE_SAPFE_APPSTART_TEMPLATING_FAILED}"\n\t\tdescription="{= ${error>/message} ? ${error>/message} : \'\'}"\n\t/></mvc:View>\n'
});
//# sourceMappingURL=library-preload.js.map
