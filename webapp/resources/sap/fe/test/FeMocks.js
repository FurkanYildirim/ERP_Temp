/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2023 SAP SE. All rights reserved
 */
sap.ui.define(["@sap-ux/jest-mock-ui5/dist/generic", "sap/fe/core/controllerextensions/EditFlow", "sap/fe/core/PageController", "sap/ui/mdc/FilterBar"], function (generic, EditFlow, PageController, FilterBar) {
  "use strict";

  var _exports = {};
  var mock = generic.mock;
  function mockListReportController() {
    // manually add ListReportController.controller functions since I am unable to import the prototype
    const listReport = {
      _getFilterBarControl: jest.fn(),
      _getControls: jest.fn(),
      _isFilterBarHidden: jest.fn(),
      _isMultiMode: jest.fn(),
      _getMultiModeControl: jest.fn(),
      _getFilterBarVariantControl: jest.fn(),
      _hasMultiVisualizations: jest.fn(),
      _shouldAutoTriggerSearch: jest.fn(),
      _getTable: jest.fn(),
      getExtensionAPI: jest.fn(),
      getChartControl: jest.fn(),
      editFlow: mock(EditFlow)
    };
    return Object.assign(mock(PageController), listReport);
  }
  _exports.mockListReportController = mockListReportController;
  function mockObjectPageController() {
    // manually add ListReportController.controller functions since I am unable to import the prototype
    const objectPage = {
      getStickyEditMode: jest.fn(),
      getExtensionAPI: jest.fn(),
      editFlow: mock(EditFlow)
    };
    return Object.assign(mock(PageController), objectPage);
  }
  _exports.mockObjectPageController = mockObjectPageController;
  function mockContextForExtension(extension, controller, base) {
    const view = controller.getView();
    extension.getView = () => view;
    const mockedBase = mock(base || {});
    return Object.assign(mockedBase, extension);
  }
  _exports.mockContextForExtension = mockContextForExtension;
  function mockFilterBar() {
    const filterBar = mock(FilterBar);
    filterBar.mock.waitForInitialization = jest.fn();
    return filterBar;
  }
  _exports.mockFilterBar = mockFilterBar;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtb2NrTGlzdFJlcG9ydENvbnRyb2xsZXIiLCJsaXN0UmVwb3J0IiwiX2dldEZpbHRlckJhckNvbnRyb2wiLCJqZXN0IiwiZm4iLCJfZ2V0Q29udHJvbHMiLCJfaXNGaWx0ZXJCYXJIaWRkZW4iLCJfaXNNdWx0aU1vZGUiLCJfZ2V0TXVsdGlNb2RlQ29udHJvbCIsIl9nZXRGaWx0ZXJCYXJWYXJpYW50Q29udHJvbCIsIl9oYXNNdWx0aVZpc3VhbGl6YXRpb25zIiwiX3Nob3VsZEF1dG9UcmlnZ2VyU2VhcmNoIiwiX2dldFRhYmxlIiwiZ2V0RXh0ZW5zaW9uQVBJIiwiZ2V0Q2hhcnRDb250cm9sIiwiZWRpdEZsb3ciLCJtb2NrIiwiRWRpdEZsb3ciLCJPYmplY3QiLCJhc3NpZ24iLCJQYWdlQ29udHJvbGxlciIsIm1vY2tPYmplY3RQYWdlQ29udHJvbGxlciIsIm9iamVjdFBhZ2UiLCJnZXRTdGlja3lFZGl0TW9kZSIsIm1vY2tDb250ZXh0Rm9yRXh0ZW5zaW9uIiwiZXh0ZW5zaW9uIiwiY29udHJvbGxlciIsImJhc2UiLCJ2aWV3IiwiZ2V0VmlldyIsIm1vY2tlZEJhc2UiLCJtb2NrRmlsdGVyQmFyIiwiZmlsdGVyQmFyIiwiRmlsdGVyQmFyIiwid2FpdEZvckluaXRpYWxpemF0aW9uIl0sInNvdXJjZVJvb3QiOiIuIiwic291cmNlcyI6WyJGZU1vY2tzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTW9ja2VkSW5zdGFuY2UsIFVJNUluc3RhbmNlVHlwZSwgV2l0aE1vY2sgfSBmcm9tIFwiQHNhcC11eC9qZXN0LW1vY2stdWk1L2Rpc3QvZ2VuZXJpY1wiO1xuaW1wb3J0IHsgbW9jayB9IGZyb20gXCJAc2FwLXV4L2plc3QtbW9jay11aTUvZGlzdC9nZW5lcmljXCI7XG5pbXBvcnQgRWRpdEZsb3cgZnJvbSBcInNhcC9mZS9jb3JlL2NvbnRyb2xsZXJleHRlbnNpb25zL0VkaXRGbG93XCI7XG5pbXBvcnQgUGFnZUNvbnRyb2xsZXIgZnJvbSBcInNhcC9mZS9jb3JlL1BhZ2VDb250cm9sbGVyXCI7XG5pbXBvcnQgdHlwZSBDb250cm9sbGVyIGZyb20gXCJzYXAvdWkvY29yZS9tdmMvQ29udHJvbGxlclwiO1xuaW1wb3J0IEZpbHRlckJhciBmcm9tIFwic2FwL3VpL21kYy9GaWx0ZXJCYXJcIjtcblxuaW50ZXJmYWNlIENvbW1vbkNvbnRyb2xsZXJUeXBlIHtcblx0Z2V0RXh0ZW5zaW9uQVBJOiBhbnk7XG5cdGVkaXRGbG93OiBXaXRoTW9jazxFZGl0Rmxvdz47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlzdFJlcG9ydENvbnRyb2xsZXJUeXBlIHtcblx0X2dldEZpbHRlckJhckNvbnRyb2w6IGFueTtcblx0X2dldENvbnRyb2xzOiBhbnk7XG5cdF9pc0ZpbHRlckJhckhpZGRlbjogYW55O1xuXHRfaXNNdWx0aU1vZGU6IGFueTtcblx0X2dldE11bHRpTW9kZUNvbnRyb2w6IGFueTtcblx0X2dldEZpbHRlckJhclZhcmlhbnRDb250cm9sOiBhbnk7XG5cdF9oYXNNdWx0aVZpc3VhbGl6YXRpb25zOiBhbnk7XG5cdF9zaG91bGRBdXRvVHJpZ2dlclNlYXJjaDogYW55O1xuXHRfZ2V0VGFibGU6IGFueTtcblx0Z2V0Q2hhcnRDb250cm9sOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0UGFnZUNvbnRyb2xsZXJUeXBlIHtcblx0Z2V0U3RpY2t5RWRpdE1vZGU6IGFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tMaXN0UmVwb3J0Q29udHJvbGxlcigpOiBXaXRoTW9jazxDb250cm9sbGVyICYgUGFnZUNvbnRyb2xsZXIgJiBMaXN0UmVwb3J0Q29udHJvbGxlclR5cGUgJiBDb21tb25Db250cm9sbGVyVHlwZT4ge1xuXHQvLyBtYW51YWxseSBhZGQgTGlzdFJlcG9ydENvbnRyb2xsZXIuY29udHJvbGxlciBmdW5jdGlvbnMgc2luY2UgSSBhbSB1bmFibGUgdG8gaW1wb3J0IHRoZSBwcm90b3R5cGVcblx0Y29uc3QgbGlzdFJlcG9ydDogTW9ja2VkSW5zdGFuY2U8TGlzdFJlcG9ydENvbnRyb2xsZXJUeXBlICYgQ29tbW9uQ29udHJvbGxlclR5cGU+ID0ge1xuXHRcdF9nZXRGaWx0ZXJCYXJDb250cm9sOiBqZXN0LmZuKCksXG5cdFx0X2dldENvbnRyb2xzOiBqZXN0LmZuKCksXG5cdFx0X2lzRmlsdGVyQmFySGlkZGVuOiBqZXN0LmZuKCksXG5cdFx0X2lzTXVsdGlNb2RlOiBqZXN0LmZuKCksXG5cdFx0X2dldE11bHRpTW9kZUNvbnRyb2w6IGplc3QuZm4oKSxcblx0XHRfZ2V0RmlsdGVyQmFyVmFyaWFudENvbnRyb2w6IGplc3QuZm4oKSxcblx0XHRfaGFzTXVsdGlWaXN1YWxpemF0aW9uczogamVzdC5mbigpLFxuXHRcdF9zaG91bGRBdXRvVHJpZ2dlclNlYXJjaDogamVzdC5mbigpLFxuXHRcdF9nZXRUYWJsZTogamVzdC5mbigpLFxuXHRcdGdldEV4dGVuc2lvbkFQSTogamVzdC5mbigpLFxuXHRcdGdldENoYXJ0Q29udHJvbDogamVzdC5mbigpLFxuXHRcdGVkaXRGbG93OiBtb2NrKEVkaXRGbG93KSBhcyBhbnlcblx0fTtcblx0cmV0dXJuIE9iamVjdC5hc3NpZ24obW9jayhQYWdlQ29udHJvbGxlcikgYXMgYW55LCBsaXN0UmVwb3J0KSBhcyBXaXRoTW9jazxcblx0XHRDb250cm9sbGVyICYgUGFnZUNvbnRyb2xsZXIgJiBMaXN0UmVwb3J0Q29udHJvbGxlclR5cGUgJiBDb21tb25Db250cm9sbGVyVHlwZVxuXHQ+O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW9ja09iamVjdFBhZ2VDb250cm9sbGVyKCk6IFdpdGhNb2NrPENvbnRyb2xsZXIgJiBQYWdlQ29udHJvbGxlciAmIE9iamVjdFBhZ2VDb250cm9sbGVyVHlwZSAmIENvbW1vbkNvbnRyb2xsZXJUeXBlPiB7XG5cdC8vIG1hbnVhbGx5IGFkZCBMaXN0UmVwb3J0Q29udHJvbGxlci5jb250cm9sbGVyIGZ1bmN0aW9ucyBzaW5jZSBJIGFtIHVuYWJsZSB0byBpbXBvcnQgdGhlIHByb3RvdHlwZVxuXHRjb25zdCBvYmplY3RQYWdlOiBNb2NrZWRJbnN0YW5jZTxPYmplY3RQYWdlQ29udHJvbGxlclR5cGUgJiBDb21tb25Db250cm9sbGVyVHlwZT4gPSB7XG5cdFx0Z2V0U3RpY2t5RWRpdE1vZGU6IGplc3QuZm4oKSxcblx0XHRnZXRFeHRlbnNpb25BUEk6IGplc3QuZm4oKSxcblx0XHRlZGl0RmxvdzogbW9jayhFZGl0RmxvdykgYXMgYW55XG5cdH07XG5cdHJldHVybiBPYmplY3QuYXNzaWduKG1vY2soUGFnZUNvbnRyb2xsZXIpIGFzIGFueSwgb2JqZWN0UGFnZSkgYXMgV2l0aE1vY2s8XG5cdFx0Q29udHJvbGxlciAmIFBhZ2VDb250cm9sbGVyICYgT2JqZWN0UGFnZUNvbnRyb2xsZXJUeXBlICYgQ29tbW9uQ29udHJvbGxlclR5cGVcblx0Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tDb250ZXh0Rm9yRXh0ZW5zaW9uPEVYVCBleHRlbmRzIG9iamVjdCwgQkFTRSBleHRlbmRzIG9iamVjdD4oXG5cdGV4dGVuc2lvbjogRVhULFxuXHRjb250cm9sbGVyOiBXaXRoTW9jazxDb250cm9sbGVyPixcblx0YmFzZT86IEJBU0Vcbik6IFdpdGhNb2NrPEVYVCAmIFVJNUluc3RhbmNlVHlwZTxCQVNFPj4ge1xuXHRjb25zdCB2aWV3ID0gY29udHJvbGxlci5nZXRWaWV3KCk7XG5cdChleHRlbnNpb24gYXMgYW55KS5nZXRWaWV3ID0gKCkgPT4gdmlldztcblx0Y29uc3QgbW9ja2VkQmFzZSA9IG1vY2soYmFzZSB8fCB7fSk7XG5cdHJldHVybiBPYmplY3QuYXNzaWduKG1vY2tlZEJhc2UsIGV4dGVuc2lvbikgYXMgV2l0aE1vY2s8RVhUICYgVUk1SW5zdGFuY2VUeXBlPEJBU0U+Pjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1vY2tGaWx0ZXJCYXIoKTogV2l0aE1vY2s8XG5cdEZpbHRlckJhciAmIHsgd2FpdEZvckluaXRpYWxpemF0aW9uOiBGdW5jdGlvbjsgX2JTZWFyY2hUcmlnZ2VyZWQ6IEJvb2xlYW47IF9nZXRDb25kaXRpb25Nb2RlbDogRnVuY3Rpb24gfVxuPiB7XG5cdGNvbnN0IGZpbHRlckJhciA9IG1vY2soRmlsdGVyQmFyKSBhcyBXaXRoTW9jazxcblx0XHRGaWx0ZXJCYXIgJiB7IHdhaXRGb3JJbml0aWFsaXphdGlvbjogRnVuY3Rpb247IF9iU2VhcmNoVHJpZ2dlcmVkOiBCb29sZWFuOyBfZ2V0Q29uZGl0aW9uTW9kZWw6IEZ1bmN0aW9uIH1cblx0Pjtcblx0ZmlsdGVyQmFyLm1vY2sud2FpdEZvckluaXRpYWxpemF0aW9uID0gamVzdC5mbigpO1xuXHRyZXR1cm4gZmlsdGVyQmFyO1xufVxuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUFBOzs7Ozs7RUE2Qk8sU0FBU0Esd0JBQXdCLEdBQTRGO0lBQ25JO0lBQ0EsTUFBTUMsVUFBMkUsR0FBRztNQUNuRkMsb0JBQW9CLEVBQUVDLElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQy9CQyxZQUFZLEVBQUVGLElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ3ZCRSxrQkFBa0IsRUFBRUgsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDN0JHLFlBQVksRUFBRUosSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDdkJJLG9CQUFvQixFQUFFTCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMvQkssMkJBQTJCLEVBQUVOLElBQUksQ0FBQ0MsRUFBRSxFQUFFO01BQ3RDTSx1QkFBdUIsRUFBRVAsSUFBSSxDQUFDQyxFQUFFLEVBQUU7TUFDbENPLHdCQUF3QixFQUFFUixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUNuQ1EsU0FBUyxFQUFFVCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUNwQlMsZUFBZSxFQUFFVixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMxQlUsZUFBZSxFQUFFWCxJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMxQlcsUUFBUSxFQUFFQyxJQUFJLENBQUNDLFFBQVE7SUFDeEIsQ0FBQztJQUNELE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSCxJQUFJLENBQUNJLGNBQWMsQ0FBQyxFQUFTbkIsVUFBVSxDQUFDO0VBRzlEO0VBQUM7RUFFTSxTQUFTb0Isd0JBQXdCLEdBQTRGO0lBQ25JO0lBQ0EsTUFBTUMsVUFBMkUsR0FBRztNQUNuRkMsaUJBQWlCLEVBQUVwQixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUM1QlMsZUFBZSxFQUFFVixJQUFJLENBQUNDLEVBQUUsRUFBRTtNQUMxQlcsUUFBUSxFQUFFQyxJQUFJLENBQUNDLFFBQVE7SUFDeEIsQ0FBQztJQUNELE9BQU9DLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDSCxJQUFJLENBQUNJLGNBQWMsQ0FBQyxFQUFTRSxVQUFVLENBQUM7RUFHOUQ7RUFBQztFQUVNLFNBQVNFLHVCQUF1QixDQUN0Q0MsU0FBYyxFQUNkQyxVQUFnQyxFQUNoQ0MsSUFBVyxFQUM2QjtJQUN4QyxNQUFNQyxJQUFJLEdBQUdGLFVBQVUsQ0FBQ0csT0FBTyxFQUFFO0lBQ2hDSixTQUFTLENBQVNJLE9BQU8sR0FBRyxNQUFNRCxJQUFJO0lBQ3ZDLE1BQU1FLFVBQVUsR0FBR2QsSUFBSSxDQUFDVyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDbkMsT0FBT1QsTUFBTSxDQUFDQyxNQUFNLENBQUNXLFVBQVUsRUFBRUwsU0FBUyxDQUFDO0VBQzVDO0VBQUM7RUFFTSxTQUFTTSxhQUFhLEdBRTNCO0lBQ0QsTUFBTUMsU0FBUyxHQUFHaEIsSUFBSSxDQUFDaUIsU0FBUyxDQUUvQjtJQUNERCxTQUFTLENBQUNoQixJQUFJLENBQUNrQixxQkFBcUIsR0FBRy9CLElBQUksQ0FBQ0MsRUFBRSxFQUFFO0lBQ2hELE9BQU80QixTQUFTO0VBQ2pCO0VBQUM7RUFBQTtBQUFBIn0=